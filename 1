
target/mips32/debug/mos-6502:     file format elf32-tradlittlemips


Disassembly of section .tlb_miss_entry:

80000000 <tlb_miss_entry>:
.globl tlb_miss_entry;
.align 2;
.type tlb_miss_entry,@function;
.ent tlb_miss_entry;
tlb_miss_entry:
	j       exc_gen_entry
80000000:	08000060 	j	80000180 <exc_gen_entry>
80000004:	00000000 	nop

Disassembly of section .exc_gen_entry:

80000180 <exc_gen_entry>:
.globl exc_gen_entry;
.align 2;
.type exc_gen_entry,@function;
.ent exc_gen_entry;
exc_gen_entry:
	SAVE_ALL
80000180:	401a6000 	mfc0	k0,c0_status
80000184:	335a0010 	andi	k0,k0,0x10
80000188:	13400003 	beqz	k0,80000198 <exc_gen_entry+0x18>
8000018c:	03a0d025 	move	k0,sp
80000190:	3c1d810a 	lui	sp,0x810a
80000194:	27bd6000 	addiu	sp,sp,24576
80000198:	27bdff68 	addiu	sp,sp,-152
8000019c:	afba0074 	sw	k0,116(sp)
800001a0:	401a6000 	mfc0	k0,c0_status
800001a4:	afba0080 	sw	k0,128(sp)
800001a8:	401a6800 	mfc0	k0,c0_cause
800001ac:	afba0090 	sw	k0,144(sp)
800001b0:	401a7000 	mfc0	k0,c0_epc
800001b4:	afba0094 	sw	k0,148(sp)
800001b8:	401a4000 	mfc0	k0,c0_badvaddr
800001bc:	afba008c 	sw	k0,140(sp)
800001c0:	0000d010 	mfhi	k0
800001c4:	afba0084 	sw	k0,132(sp)
800001c8:	0000d012 	mflo	k0
800001cc:	afba0088 	sw	k0,136(sp)
800001d0:	afa00000 	sw	zero,0(sp)
800001d4:	afa10004 	sw	at,4(sp)
800001d8:	afa20008 	sw	v0,8(sp)
800001dc:	afa3000c 	sw	v1,12(sp)
800001e0:	afa40010 	sw	a0,16(sp)
800001e4:	afa50014 	sw	a1,20(sp)
800001e8:	afa60018 	sw	a2,24(sp)
800001ec:	afa7001c 	sw	a3,28(sp)
800001f0:	afa80020 	sw	t0,32(sp)
800001f4:	afa90024 	sw	t1,36(sp)
800001f8:	afaa0028 	sw	t2,40(sp)
800001fc:	afab002c 	sw	t3,44(sp)
80000200:	afac0030 	sw	t4,48(sp)
80000204:	afad0034 	sw	t5,52(sp)
80000208:	afae0038 	sw	t6,56(sp)
8000020c:	afaf003c 	sw	t7,60(sp)
80000210:	afb00040 	sw	s0,64(sp)
80000214:	afb10044 	sw	s1,68(sp)
80000218:	afb20048 	sw	s2,72(sp)
8000021c:	afb3004c 	sw	s3,76(sp)
80000220:	afb40050 	sw	s4,80(sp)
80000224:	afb50054 	sw	s5,84(sp)
80000228:	afb60058 	sw	s6,88(sp)
8000022c:	afb7005c 	sw	s7,92(sp)
80000230:	afb80060 	sw	t8,96(sp)
80000234:	afb90064 	sw	t9,100(sp)
80000238:	afba0068 	sw	k0,104(sp)
8000023c:	afbb006c 	sw	k1,108(sp)
80000240:	afbc0070 	sw	gp,112(sp)
80000244:	afbe0078 	sw	s8,120(sp)
80000248:	afbf007c 	sw	ra,124(sp)
	mfc0    $t0, $12
8000024c:	40086000 	mfc0	t0,c0_status
	and     $t0, $t0, ~(0x0010 | 0x0002 | 0x0001)
80000250:	2401ffec 	li	at,-20
80000254:	01014024 	and	t0,t0,at
	mtc0    $t0, $12
80000258:	40886000 	mtc0	t0,c0_status
    move    $a0,$sp
8000025c:	03a02025 	move	a0,sp
    jal   trap_handler
80000260:	0c00d3e7 	jal	80034f9c <trap_handler>
80000264:	00000000 	nop
	j   ret_from_exception
80000268:	0800009c 	j	80000270 <ret_from_exception>
8000026c:	00000000 	nop

80000270 <ret_from_exception>:
.end exc_gen_entry;

.globl ret_from_exception;
.type ret_from_exception,@function;
ret_from_exception:
	RESTORE_ALL
80000270:	8fa20080 	lw	v0,128(sp)
80000274:	40826000 	mtc0	v0,c0_status
80000278:	8fa30088 	lw	v1,136(sp)
8000027c:	00600013 	mtlo	v1
80000280:	8fa20084 	lw	v0,132(sp)
80000284:	8fa30094 	lw	v1,148(sp)
80000288:	00400011 	mthi	v0
8000028c:	40837000 	mtc0	v1,c0_epc
80000290:	8fbf007c 	lw	ra,124(sp)
80000294:	8fbe0078 	lw	s8,120(sp)
80000298:	8fbc0070 	lw	gp,112(sp)
8000029c:	8fb90064 	lw	t9,100(sp)
800002a0:	8fb80060 	lw	t8,96(sp)
800002a4:	8fb7005c 	lw	s7,92(sp)
800002a8:	8fb60058 	lw	s6,88(sp)
800002ac:	8fb50054 	lw	s5,84(sp)
800002b0:	8fb40050 	lw	s4,80(sp)
800002b4:	8fb3004c 	lw	s3,76(sp)
800002b8:	8fb20048 	lw	s2,72(sp)
800002bc:	8fb10044 	lw	s1,68(sp)
800002c0:	8fb00040 	lw	s0,64(sp)
800002c4:	8faf003c 	lw	t7,60(sp)
800002c8:	8fae0038 	lw	t6,56(sp)
800002cc:	8fad0034 	lw	t5,52(sp)
800002d0:	8fac0030 	lw	t4,48(sp)
800002d4:	8fab002c 	lw	t3,44(sp)
800002d8:	8faa0028 	lw	t2,40(sp)
800002dc:	8fa90024 	lw	t1,36(sp)
800002e0:	8fa80020 	lw	t0,32(sp)
800002e4:	8fa7001c 	lw	a3,28(sp)
800002e8:	8fa60018 	lw	a2,24(sp)
800002ec:	8fa50014 	lw	a1,20(sp)
800002f0:	8fa40010 	lw	a0,16(sp)
800002f4:	8fa3000c 	lw	v1,12(sp)
800002f8:	8fa20008 	lw	v0,8(sp)
800002fc:	8fa10004 	lw	at,4(sp)
80000300:	8fbd0074 	lw	sp,116(sp)
	eret
80000304:	42000018 	eret

Disassembly of section .text:

80020000 <_init>:
elf::DEFINE_ELF_BYTES!(DEVTST, "../target/user/bin/devtst.b");
elf::DEFINE_ELF_BYTES!(NUM, "../target/user/bin/num.b");
elf::DEFINE_ELF_BYTES!(TESTFDSHARING, "../target/user/bin/testfdsharing.b");
#[no_mangle]
#[link_section = ".text.boot"]
extern "C" fn _init(mem_sz: usize) -> ! {
80020000:	27bdff18 	addiu	sp,sp,-232
80020004:	afbf00e4 	sw	ra,228(sp)
80020008:	afa4002c 	sw	a0,44(sp)
8002000c:	afa40034 	sw	a0,52(sp)
    }
}

#[inline(always)]
fn logo() {
    print!(" __  __    ____     _____\n");
80020010:	3c018105 	lui	at,0x8105
80020014:	242507f4 	addiu	a1,at,2036
80020018:	27a4003c 	addiu	a0,sp,60
8002001c:	afa40010 	sw	a0,16(sp)
80020020:	24060001 	li	a2,1
80020024:	afa60030 	sw	a2,48(sp)
80020028:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
8002002c:	00000000 	nop
80020030:	8fa40010 	lw	a0,16(sp)
80020034:	0c00b558 	jal	8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>
80020038:	00000000 	nop
8002003c:	8fa60030 	lw	a2,48(sp)
    print!("|  \\/  |  / __ \\   / ____|\n");
80020040:	3c018105 	lui	at,0x8105
80020044:	24250818 	addiu	a1,at,2072
80020048:	27a40054 	addiu	a0,sp,84
8002004c:	afa40014 	sw	a0,20(sp)
80020050:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80020054:	00000000 	nop
80020058:	8fa40014 	lw	a0,20(sp)
8002005c:	0c00b558 	jal	8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>
80020060:	00000000 	nop
80020064:	8fa60030 	lw	a2,48(sp)
    print!("| \\  / | | |  | | | (___\n");
80020068:	3c018105 	lui	at,0x8105
8002006c:	2425083c 	addiu	a1,at,2108
80020070:	27a4006c 	addiu	a0,sp,108
80020074:	afa40018 	sw	a0,24(sp)
80020078:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
8002007c:	00000000 	nop
80020080:	8fa40018 	lw	a0,24(sp)
80020084:	0c00b558 	jal	8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>
80020088:	00000000 	nop
8002008c:	8fa60030 	lw	a2,48(sp)
    print!("| |\\/| | | |  | |  \\___ \\\n");
80020090:	3c018105 	lui	at,0x8105
80020094:	24250860 	addiu	a1,at,2144
80020098:	27a40084 	addiu	a0,sp,132
8002009c:	afa4001c 	sw	a0,28(sp)
800200a0:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
800200a4:	00000000 	nop
800200a8:	8fa4001c 	lw	a0,28(sp)
800200ac:	0c00b558 	jal	8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>
800200b0:	00000000 	nop
800200b4:	8fa60030 	lw	a2,48(sp)
    print!("| |  | | | |__| |  ____) |\n");
800200b8:	3c018105 	lui	at,0x8105
800200bc:	24250884 	addiu	a1,at,2180
800200c0:	27a4009c 	addiu	a0,sp,156
800200c4:	afa40020 	sw	a0,32(sp)
800200c8:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
800200cc:	00000000 	nop
800200d0:	8fa40020 	lw	a0,32(sp)
800200d4:	0c00b558 	jal	8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>
800200d8:	00000000 	nop
800200dc:	8fa60030 	lw	a2,48(sp)
    print!("|_|  |_|  \\____/  |_____/\n");
800200e0:	3c018105 	lui	at,0x8105
800200e4:	242508a8 	addiu	a1,at,2216
800200e8:	27a400b4 	addiu	a0,sp,180
800200ec:	afa40024 	sw	a0,36(sp)
800200f0:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
800200f4:	00000000 	nop
800200f8:	8fa40024 	lw	a0,36(sp)
800200fc:	0c00b558 	jal	8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>
80020100:	00000000 	nop
80020104:	8fa60030 	lw	a2,48(sp)
    print!("\n");
80020108:	3c018105 	lui	at,0x8105
8002010c:	242508b0 	addiu	a1,at,2224
80020110:	27a400cc 	addiu	a0,sp,204
80020114:	afa40028 	sw	a0,40(sp)
80020118:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
8002011c:	00000000 	nop
80020120:	8fa40028 	lw	a0,40(sp)
80020124:	0c00b558 	jal	8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>
80020128:	00000000 	nop
8002012c:	8fa4002c 	lw	a0,44(sp)
80020130:	afa40038 	sw	a0,56(sp)
pub const UCOW: VirtAddr = VirtAddr::new(0x3fe000);
pub const UTEMP: VirtAddr = VirtAddr::new(0x3fd000);

#[inline(always)]
pub fn mem_init(mem_sz: usize) {
    page::page_init(mem_sz);
80020134:	0c00af95 	jal	8002be54 <_ZN8mos_65022mm4page9page_init17hc6872372700e52f1E>
80020138:	00000000 	nop
    proc::env_init();
8002013c:	0c00bbb7 	jal	8002eedc <_ZN8mos_65024proc8env_init17hde9c5fcd3b38afeeE>
80020140:	00000000 	nop
80020144:	8fa60030 	lw	a2,48(sp)
    proc::env_create(USER_ICODE, 1);
80020148:	3c018107 	lui	at,0x8107
8002014c:	8c242cfc 	lw	a0,11516(at)
80020150:	24212cfc 	addiu	at,at,11516
80020154:	8c250004 	lw	a1,4(at)
80020158:	0c00be48 	jal	8002f920 <_ZN8mos_65024proc10env_create17ha50f648f308180f3E>
8002015c:	00000000 	nop
80020160:	8fa60030 	lw	a2,48(sp)
    proc::env_create(FS_SERV, 1);
80020164:	3c01810a 	lui	at,0x810a
80020168:	8c24a1e8 	lw	a0,-24088(at)
8002016c:	2421a1e8 	addiu	at,at,-24088
80020170:	8c250004 	lw	a1,4(at)
80020174:	0c00be48 	jal	8002f920 <_ZN8mos_65024proc10env_create17ha50f648f308180f3E>
80020178:	00000000 	nop
8002017c:	8fa40030 	lw	a0,48(sp)
    sched::schedule(true);
80020180:	0c00b622 	jal	8002d888 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E>
80020184:	00000000 	nop
    ___avoid_fk_compiler_optimization();
80020188:	0c00d452 	jal	80035148 <_ZN8mos_65024trap33___avoid_fk_compiler_optimization17h93891e9e62e603d9E>
8002018c:	00000000 	nop
    dev::halt();
80020190:	0c00ae34 	jal	8002b8d0 <_ZN8mos_65023dev4halt17hd9ad84541a5942b7E>
80020194:	00000000 	nop

80020198 <_start>:
        arch::asm!(
80020198:	40806000 	mtc0	zero,c0_status
8002019c:	3c1d810a 	lui	sp,0x810a
800201a0:	27bd6000 	addiu	sp,sp,24576
800201a4:	00e02025 	move	a0,a3
800201a8:	08008000 	j	80020000 <_init>
800201ac:	00000000 	nop
800201b0:	0000000d 	break

800201b4 <_ZN119_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..non_null..NonNull$LT$T$GT$$GT$$GT$4from17h6c56bad5d9c3a2f0E>:
impl<T: ?Sized> From<NonNull<T>> for Unique<T> {
    /// Converts a `NonNull<T>` to a `Unique<T>`.
    ///
    /// This conversion is infallible since `NonNull` cannot be null.
    #[inline]
    fn from(pointer: NonNull<T>) -> Self {
800201b4:	27bdfff8 	addiu	sp,sp,-8
800201b8:	afa40004 	sw	a0,4(sp)
        Unique { pointer, _marker: PhantomData }
800201bc:	afa40000 	sw	a0,0(sp)
    }
800201c0:	8fa20000 	lw	v0,0(sp)
800201c4:	27bd0008 	addiu	sp,sp,8
800201c8:	03e00008 	jr	ra
800201cc:	00000000 	nop

800201d0 <_ZN119_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..non_null..NonNull$LT$T$GT$$GT$$GT$4from17h8ae7d9027108705dE>:
    fn from(pointer: NonNull<T>) -> Self {
800201d0:	27bdfff8 	addiu	sp,sp,-8
800201d4:	afa40004 	sw	a0,4(sp)
        Unique { pointer, _marker: PhantomData }
800201d8:	afa40000 	sw	a0,0(sp)
    }
800201dc:	8fa20000 	lw	v0,0(sp)
800201e0:	27bd0008 	addiu	sp,sp,8
800201e4:	03e00008 	jr	ra
800201e8:	00000000 	nop

800201ec <_ZN119_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..non_null..NonNull$LT$T$GT$$GT$$GT$4from17he4638395ef099ef7E>:
    fn from(pointer: NonNull<T>) -> Self {
800201ec:	27bdfff8 	addiu	sp,sp,-8
800201f0:	afa40004 	sw	a0,4(sp)
        Unique { pointer, _marker: PhantomData }
800201f4:	afa40000 	sw	a0,0(sp)
    }
800201f8:	8fa20000 	lw	v0,0(sp)
800201fc:	27bd0008 	addiu	sp,sp,8
80020200:	03e00008 	jr	ra
80020204:	00000000 	nop

80020208 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h12656e8f5824d73cE>:

#[unstable(feature = "try_trait_v2", issue = "84277")]
impl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>> for Result<T, F> {
    #[inline]
    #[track_caller]
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
80020208:	27bdffe0 	addiu	sp,sp,-32
8002020c:	afa40000 	sw	a0,0(sp)
80020210:	afa50004 	sw	a1,4(sp)
        match residual {
            Err(e) => Err(From::from(e)),
80020214:	8fa20000 	lw	v0,0(sp)
80020218:	8fa10004 	lw	at,4(sp)
8002021c:	afa20010 	sw	v0,16(sp)
80020220:	afa10014 	sw	at,20(sp)
80020224:	afa20018 	sw	v0,24(sp)
80020228:	afa1001c 	sw	at,28(sp)
8002022c:	afa20008 	sw	v0,8(sp)
80020230:	afa1000c 	sw	at,12(sp)
        }
    }
80020234:	8fa20008 	lw	v0,8(sp)
80020238:	8fa3000c 	lw	v1,12(sp)
8002023c:	27bd0020 	addiu	sp,sp,32
80020240:	03e00008 	jr	ra
80020244:	00000000 	nop

80020248 <_ZN3elf15load_elf_header17h929d6561fa3efc31E>:
/// # Example
/// ```rust
/// let pre_header = ElfIdent::try_load(data).unwrap();
/// let elf_header = load_elf_header::<ElfHeader32>(data, &pre_header).unwrap();
/// ```
pub fn load_elf_header<T>(data: &[u8], pre_header: &ElfIdent) -> Result<T, &'static str>
80020248:	27bdff60 	addiu	sp,sp,-160
8002024c:	afbf009c 	sw	ra,156(sp)
80020250:	afa7001c 	sw	a3,28(sp)
80020254:	afa40014 	sw	a0,20(sp)
80020258:	afa40018 	sw	a0,24(sp)
8002025c:	afa50088 	sw	a1,136(sp)
80020260:	afa6008c 	sw	a2,140(sp)
80020264:	afa70090 	sw	a3,144(sp)
80020268:	afa50094 	sw	a1,148(sp)
8002026c:	afa60098 	sw	a2,152(sp)
80020270:	27a40020 	addiu	a0,sp,32
where
    T: ElfHeader,
{
    let header = unsafe { core::ptr::read_unaligned(data.as_ptr() as *const T) };
80020274:	0c008807 	jal	8002201c <_ZN4core3ptr14read_unaligned17hc3e2ae47731af399E>
80020278:	00000000 	nop
8002027c:	8fa7001c 	lw	a3,28(sp)
    #[cfg(target_endian = "big")]
    if pre_header.data == ELF_LITTLE_ENDIAN {
        return Error("not a little endian elf file");
    }
    #[cfg(target_endian = "little")]
    if pre_header.data == ELF_BIG_ENDIAN {
80020280:	90e10005 	lbu	at,5(a3)
80020284:	24020002 	li	v0,2
80020288:	1022003b 	beq	at,v0,80020378 <_ZN3elf15load_elf_header17h929d6561fa3efc31E+0x130>
8002028c:	00000000 	nop
80020290:	080080a6 	j	80020298 <_ZN3elf15load_elf_header17h929d6561fa3efc31E+0x50>
80020294:	00000000 	nop
        return Err("not a big endian elf file");
    }
    Ok(header)
80020298:	8fa10014 	lw	at,20(sp)
8002029c:	8fa20050 	lw	v0,80(sp)
800202a0:	afa20084 	sw	v0,132(sp)
800202a4:	8fa2004c 	lw	v0,76(sp)
800202a8:	afa20080 	sw	v0,128(sp)
800202ac:	8fa20048 	lw	v0,72(sp)
800202b0:	afa2007c 	sw	v0,124(sp)
800202b4:	8fa20044 	lw	v0,68(sp)
800202b8:	afa20078 	sw	v0,120(sp)
800202bc:	8fa20040 	lw	v0,64(sp)
800202c0:	afa20074 	sw	v0,116(sp)
800202c4:	8fa2003c 	lw	v0,60(sp)
800202c8:	afa20070 	sw	v0,112(sp)
800202cc:	8fa20038 	lw	v0,56(sp)
800202d0:	afa2006c 	sw	v0,108(sp)
800202d4:	8fa20034 	lw	v0,52(sp)
800202d8:	afa20068 	sw	v0,104(sp)
800202dc:	8fa20030 	lw	v0,48(sp)
800202e0:	afa20064 	sw	v0,100(sp)
800202e4:	8fa2002c 	lw	v0,44(sp)
800202e8:	afa20060 	sw	v0,96(sp)
800202ec:	8fa20028 	lw	v0,40(sp)
800202f0:	afa2005c 	sw	v0,92(sp)
800202f4:	8fa20024 	lw	v0,36(sp)
800202f8:	afa20058 	sw	v0,88(sp)
800202fc:	8fa20020 	lw	v0,32(sp)
80020300:	afa20054 	sw	v0,84(sp)
80020304:	8fa20084 	lw	v0,132(sp)
80020308:	ac220034 	sw	v0,52(at)
8002030c:	8fa20080 	lw	v0,128(sp)
80020310:	ac220030 	sw	v0,48(at)
80020314:	8fa2007c 	lw	v0,124(sp)
80020318:	ac22002c 	sw	v0,44(at)
8002031c:	8fa20078 	lw	v0,120(sp)
80020320:	ac220028 	sw	v0,40(at)
80020324:	8fa20074 	lw	v0,116(sp)
80020328:	ac220024 	sw	v0,36(at)
8002032c:	8fa20070 	lw	v0,112(sp)
80020330:	ac220020 	sw	v0,32(at)
80020334:	8fa2006c 	lw	v0,108(sp)
80020338:	ac22001c 	sw	v0,28(at)
8002033c:	8fa20068 	lw	v0,104(sp)
80020340:	ac220018 	sw	v0,24(at)
80020344:	8fa20064 	lw	v0,100(sp)
80020348:	ac220014 	sw	v0,20(at)
8002034c:	8fa20060 	lw	v0,96(sp)
80020350:	ac220010 	sw	v0,16(at)
80020354:	8fa2005c 	lw	v0,92(sp)
80020358:	ac22000c 	sw	v0,12(at)
8002035c:	8fa20058 	lw	v0,88(sp)
80020360:	ac220008 	sw	v0,8(at)
80020364:	8fa20054 	lw	v0,84(sp)
80020368:	ac220004 	sw	v0,4(at)
8002036c:	ac200000 	sw	zero,0(at)
}
80020370:	080080e8 	j	800203a0 <_ZN3elf15load_elf_header17h929d6561fa3efc31E+0x158>
80020374:	00000000 	nop
        return Err("not a big endian elf file");
80020378:	8fa20014 	lw	v0,20(sp)
8002037c:	3c018105 	lui	at,0x8105
80020380:	2421e17c 	addiu	at,at,-7812
80020384:	ac410004 	sw	at,4(v0)
80020388:	24010019 	li	at,25
8002038c:	ac410008 	sw	at,8(v0)
80020390:	24010001 	li	at,1
80020394:	ac410000 	sw	at,0(v0)
}
80020398:	080080e8 	j	800203a0 <_ZN3elf15load_elf_header17h929d6561fa3efc31E+0x158>
8002039c:	00000000 	nop
800203a0:	8fa20018 	lw	v0,24(sp)
800203a4:	8fbf009c 	lw	ra,156(sp)
800203a8:	27bd00a0 	addiu	sp,sp,160
800203ac:	03e00008 	jr	ra
800203b0:	00000000 	nop

800203b4 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E>:
/// # Example
/// ```rust
/// let elf_header = load_elf_header::<ElfHeader32>(data, &pre_header).unwrap();
/// let program_headers = load_elf_program_headers::<ProgramHeader32>(data, &elf_header).unwrap();
/// ```
pub fn load_elf_program_headers<T>(
800203b4:	27bdfed0 	addiu	sp,sp,-304
800203b8:	afbf012c 	sw	ra,300(sp)
800203bc:	afa70044 	sw	a3,68(sp)
800203c0:	afa60030 	sw	a2,48(sp)
800203c4:	afa50034 	sw	a1,52(sp)
800203c8:	afa40038 	sw	a0,56(sp)
800203cc:	afa4003c 	sw	a0,60(sp)
800203d0:	8fa10140 	lw	at,320(sp)
800203d4:	afa10040 	sw	at,64(sp)
800203d8:	afa500d4 	sw	a1,212(sp)
800203dc:	afa600d8 	sw	a2,216(sp)
800203e0:	afa700dc 	sw	a3,220(sp)
800203e4:	afa100e0 	sw	at,224(sp)
800203e8:	24010000 	li	at,0
    elf_header: &dyn ElfHeader,
) -> Result<Vec<T>, &'static str>
where
    T: ProgramHeader,
{
    let mut program_headers: Vec<T> = Vec::new();
800203ec:	a3a000d3 	sb	zero,211(sp)
800203f0:	27a40058 	addiu	a0,sp,88
800203f4:	0c00a294 	jal	80028a50 <_ZN5alloc3vec12Vec$LT$T$GT$3new17h37505ab21e2811ebE>
800203f8:	00000000 	nop
800203fc:	8fa10040 	lw	at,64(sp)
80020400:	8fa40044 	lw	a0,68(sp)
80020404:	24020020 	li	v0,32
    let program_header_size = core::mem::size_of::<T>();
80020408:	afa200e4 	sw	v0,228(sp)
    let program_header_num = elf_header.get_program_header_num();
8002040c:	8c390024 	lw	t9,36(at)
80020410:	0320f809 	jalr	t9
80020414:	00000000 	nop
80020418:	8fa10040 	lw	at,64(sp)
8002041c:	8fa40044 	lw	a0,68(sp)
80020420:	afa2004c 	sw	v0,76(sp)
80020424:	00401825 	move	v1,v0
80020428:	afa30048 	sw	v1,72(sp)
8002042c:	afa200e8 	sw	v0,232(sp)
    let program_header_offset = elf_header.get_program_header_offset();
80020430:	8c390010 	lw	t9,16(at)
80020434:	0320f809 	jalr	t9
80020438:	00000000 	nop
8002043c:	00400825 	move	at,v0
80020440:	8fa2004c 	lw	v0,76(sp)
80020444:	00201825 	move	v1,at
80020448:	afa30050 	sw	v1,80(sp)
8002044c:	afa100ec 	sw	at,236(sp)
    let program_header_data = &data
        [program_header_offset..program_header_offset + program_header_size * program_header_num];
80020450:	00020940 	sll	at,v0,0x5
80020454:	afa10054 	sw	at,84(sp)
80020458:	7c41d000 	ext	at,v0,0x0,0x1b
8002045c:	1422000c 	bne	at,v0,80020490 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0xdc>
80020460:	00000000 	nop
80020464:	0800811b 	j	8002046c <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0xb8>
80020468:	00000000 	nop
8002046c:	8fa20050 	lw	v0,80(sp)
80020470:	8fa10054 	lw	at,84(sp)
80020474:	00410821 	addu	at,v0,at
80020478:	afa1002c 	sw	at,44(sp)
8002047c:	0022082b 	sltu	at,at,v0
80020480:	14200048 	bnez	at,800205a4 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x1f0>
80020484:	00000000 	nop
80020488:	08008128 	j	800204a0 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0xec>
8002048c:	00000000 	nop
80020490:	3c018105 	lui	at,0x8105
80020494:	2424e1c8 	addiu	a0,at,-7736
80020498:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002049c:	00000000 	nop
800204a0:	8fa30030 	lw	v1,48(sp)
800204a4:	8fa40034 	lw	a0,52(sp)
800204a8:	8fa1002c 	lw	at,44(sp)
800204ac:	8fa20050 	lw	v0,80(sp)
800204b0:	afa20064 	sw	v0,100(sp)
800204b4:	afa10068 	sw	at,104(sp)
800204b8:	8fa20064 	lw	v0,100(sp)
800204bc:	afa20024 	sw	v0,36(sp)
800204c0:	8fa10068 	lw	at,104(sp)
800204c4:	afa10028 	sw	at,40(sp)
800204c8:	afa4010c 	sw	a0,268(sp)
800204cc:	afa30110 	sw	v1,272(sp)
800204d0:	afa20114 	sw	v0,276(sp)
800204d4:	afa10118 	sw	at,280(sp)
800204d8:	afa2011c 	sw	v0,284(sp)
800204dc:	afa10120 	sw	at,288(sp)
800204e0:	afa40124 	sw	a0,292(sp)
800204e4:	afa30128 	sw	v1,296(sp)
        }
    }

    #[inline(always)]
    fn index(self, slice: &[T]) -> &[T] {
        if self.start > self.end {
800204e8:	0022082b 	sltu	at,at,v0
800204ec:	1420000a 	bnez	at,80020518 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x164>
800204f0:	00000000 	nop
800204f4:	0800813f 	j	800204fc <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x148>
800204f8:	00000000 	nop
            slice_index_order_fail(self.start, self.end);
        } else if self.end > slice.len() {
800204fc:	8fa10030 	lw	at,48(sp)
80020500:	8fa20028 	lw	v0,40(sp)
80020504:	0022082b 	sltu	at,at,v0
80020508:	14200009 	bnez	at,80020530 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x17c>
8002050c:	00000000 	nop
80020510:	08008152 	j	80020548 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x194>
80020514:	00000000 	nop
            slice_index_order_fail(self.start, self.end);
80020518:	8fa50028 	lw	a1,40(sp)
8002051c:	8fa40024 	lw	a0,36(sp)
80020520:	3c018105 	lui	at,0x8105
80020524:	2426e1e8 	addiu	a2,at,-7704
80020528:	0c010cbf 	jal	800432fc <_ZN4core5slice5index22slice_index_order_fail17h449e604cb79353f4E>
8002052c:	00000000 	nop
            slice_end_index_len_fail(self.end, slice.len());
80020530:	8fa50030 	lw	a1,48(sp)
80020534:	8fa40028 	lw	a0,40(sp)
80020538:	3c018105 	lui	at,0x8105
8002053c:	2426e1e8 	addiu	a2,at,-7704
80020540:	0c010c8d 	jal	80043234 <_ZN4core5slice5index24slice_end_index_len_fail17hc8473d7595779981E>
80020544:	00000000 	nop
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &*self.get_unchecked(slice) }
80020548:	8fa70030 	lw	a3,48(sp)
8002054c:	8fa60034 	lw	a2,52(sp)
80020550:	8fa50028 	lw	a1,40(sp)
80020554:	8fa40024 	lw	a0,36(sp)
80020558:	0c010df9 	jal	800437e4 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb3ac7c8e535d317cE>
8002055c:	00000000 	nop
80020560:	8fa10048 	lw	at,72(sp)
80020564:	00402025 	move	a0,v0
80020568:	afa4001c 	sw	a0,28(sp)
8002056c:	00602025 	move	a0,v1
80020570:	afa40020 	sw	a0,32(sp)
80020574:	afa200f0 	sw	v0,240(sp)
80020578:	afa300f4 	sw	v1,244(sp)
    for i in 0..program_header_num {
8002057c:	afa0006c 	sw	zero,108(sp)
80020580:	afa10070 	sw	at,112(sp)
80020584:	8fa4006c 	lw	a0,108(sp)
80020588:	8fa50070 	lw	a1,112(sp)
8002058c:	0c012cc7 	jal	8004b31c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
80020590:	00000000 	nop
80020594:	afa20074 	sw	v0,116(sp)
80020598:	afa30078 	sw	v1,120(sp)
8002059c:	0800816d 	j	800205b4 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x200>
800205a0:	00000000 	nop
        [program_header_offset..program_header_offset + program_header_size * program_header_num];
800205a4:	3c018105 	lui	at,0x8105
800205a8:	2424e1d8 	addiu	a0,at,-7720
800205ac:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800205b0:	00000000 	nop
800205b4:	27a40074 	addiu	a0,sp,116
    for i in 0..program_header_num {
800205b8:	0c012cbe 	jal	8004b2f8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
800205bc:	00000000 	nop
800205c0:	afa2007c 	sw	v0,124(sp)
800205c4:	afa30080 	sw	v1,128(sp)
800205c8:	8fa1007c 	lw	at,124(sp)
800205cc:	14200015 	bnez	at,80020624 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x270>
800205d0:	00000000 	nop
800205d4:	08008177 	j	800205dc <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x228>
800205d8:	00000000 	nop
        };
        if program_header.get_memsz() != 0 {
            program_headers.push(program_header);
        }
    }
    Ok(program_headers)
800205dc:	8fa2003c 	lw	v0,60(sp)
800205e0:	8fa30038 	lw	v1,56(sp)
800205e4:	8fa10060 	lw	at,96(sp)
800205e8:	afa100cc 	sw	at,204(sp)
800205ec:	8fa1005c 	lw	at,92(sp)
800205f0:	afa100c8 	sw	at,200(sp)
800205f4:	8fa10058 	lw	at,88(sp)
800205f8:	afa100c4 	sw	at,196(sp)
800205fc:	8fa100cc 	lw	at,204(sp)
80020600:	ac610008 	sw	at,8(v1)
80020604:	8fa100c8 	lw	at,200(sp)
80020608:	ac610004 	sw	at,4(v1)
8002060c:	8fa100c4 	lw	at,196(sp)
80020610:	ac610000 	sw	at,0(v1)
}
80020614:	8fbf012c 	lw	ra,300(sp)
80020618:	27bd0130 	addiu	sp,sp,304
8002061c:	03e00008 	jr	ra
80020620:	00000000 	nop
    for i in 0..program_header_num {
80020624:	8fa10020 	lw	at,32(sp)
80020628:	8fa3001c 	lw	v1,28(sp)
8002062c:	8fa20080 	lw	v0,128(sp)
80020630:	afa200f8 	sw	v0,248(sp)
80020634:	afa30104 	sw	v1,260(sp)
80020638:	afa10108 	sw	at,264(sp)
                    .offset(i as isize * program_header_size as isize) as *const T,
8002063c:	00020940 	sll	at,v0,0x5
80020640:	afa10018 	sw	at,24(sp)
80020644:	00010943 	sra	at,at,0x5
80020648:	14220015 	bne	at,v0,800206a0 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x2ec>
8002064c:	00000000 	nop
80020650:	08008196 	j	80020658 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x2a4>
80020654:	00000000 	nop
80020658:	8fa1001c 	lw	at,28(sp)
8002065c:	8fa20018 	lw	v0,24(sp)
80020660:	afa100fc 	sw	at,252(sp)
80020664:	afa20100 	sw	v0,256(sp)
    pub const unsafe fn offset(self, count: isize) -> *const T
    where
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `offset`.
        unsafe { intrinsics::offset(self, count) }
80020668:	00222821 	addu	a1,at,v0
8002066c:	27a40084 	addiu	a0,sp,132
80020670:	afa40014 	sw	a0,20(sp)
            core::ptr::read_unaligned(
80020674:	0c00879b 	jal	80021e6c <_ZN4core3ptr14read_unaligned17h2abecd1ddc5c8f5eE>
80020678:	00000000 	nop
8002067c:	8fa40014 	lw	a0,20(sp)
80020680:	24010001 	li	at,1
            )
80020684:	a3a100d3 	sb	at,211(sp)
        if program_header.get_memsz() != 0 {
80020688:	0c00ddf9 	jal	800377e4 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$9get_memsz17hfb2cd24d087e8cc9E>
8002068c:	00000000 	nop
80020690:	10400007 	beqz	v0,800206b0 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x2fc>
80020694:	00000000 	nop
80020698:	080081b2 	j	800206c8 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x314>
8002069c:	00000000 	nop
                    .offset(i as isize * program_header_size as isize) as *const T,
800206a0:	3c018105 	lui	at,0x8105
800206a4:	2424e1f8 	addiu	a0,at,-7688
800206a8:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
800206ac:	00000000 	nop
    }
800206b0:	93a100d3 	lbu	at,211(sp)
800206b4:	30210001 	andi	at,at,0x1
800206b8:	1420001f 	bnez	at,80020738 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x384>
800206bc:	00000000 	nop
800206c0:	080081ca 	j	80020728 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x374>
800206c4:	00000000 	nop
800206c8:	24010000 	li	at,0
            program_headers.push(program_header);
800206cc:	a3a000d3 	sb	zero,211(sp)
800206d0:	8fa100a0 	lw	at,160(sp)
800206d4:	afa100c0 	sw	at,192(sp)
800206d8:	8fa1009c 	lw	at,156(sp)
800206dc:	afa100bc 	sw	at,188(sp)
800206e0:	8fa10098 	lw	at,152(sp)
800206e4:	afa100b8 	sw	at,184(sp)
800206e8:	8fa10094 	lw	at,148(sp)
800206ec:	afa100b4 	sw	at,180(sp)
800206f0:	8fa10090 	lw	at,144(sp)
800206f4:	afa100b0 	sw	at,176(sp)
800206f8:	8fa1008c 	lw	at,140(sp)
800206fc:	afa100ac 	sw	at,172(sp)
80020700:	8fa10088 	lw	at,136(sp)
80020704:	afa100a8 	sw	at,168(sp)
80020708:	8fa10084 	lw	at,132(sp)
8002070c:	afa100a4 	sw	at,164(sp)
80020710:	27a40058 	addiu	a0,sp,88
80020714:	27a500a4 	addiu	a1,sp,164
80020718:	0c00a343 	jal	80028d0c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hf060dda13272c08dE>
8002071c:	00000000 	nop
80020720:	080081ac 	j	800206b0 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x2fc>
80020724:	00000000 	nop
80020728:	24010000 	li	at,0
    }
8002072c:	a3a000d3 	sb	zero,211(sp)
    for i in 0..program_header_num {
80020730:	0800816d 	j	800205b4 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x200>
80020734:	00000000 	nop
    }
80020738:	080081ca 	j	80020728 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E+0x374>
8002073c:	00000000 	nop

80020740 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hac02097cab3b6ee0E>:
macro_rules! fmt_refs {
    ($($tr:ident),*) => {
        $(
        #[stable(feature = "rust1", since = "1.0.0")]
        impl<T: ?Sized + $tr> $tr for &T {
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
80020740:	27bdffe0 	addiu	sp,sp,-32
80020744:	afbf001c 	sw	ra,28(sp)
80020748:	afa40014 	sw	a0,20(sp)
8002074c:	afa50018 	sw	a1,24(sp)
80020750:	8c840000 	lw	a0,0(a0)
80020754:	0c0104b1 	jal	800412c4 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h21f7f40895f3b40cE>
80020758:	00000000 	nop
8002075c:	8fbf001c 	lw	ra,28(sp)
80020760:	27bd0020 	addiu	sp,sp,32
80020764:	03e00008 	jr	ra
80020768:	00000000 	nop

8002076c <_ZN4core10intrinsics11write_bytes18precondition_check17h0cfe4849b5991fcdE>:
            // inlining the check. If it's `true`, it can inline it and get significantly better performance.
            #[rustc_no_mir_inline]
            #[inline]
            #[rustc_nounwind]
            #[rustc_const_unstable(feature = "const_ub_checks", issue = "none")]
            const fn precondition_check($($name:$ty),*) {
8002076c:	27bdffe0 	addiu	sp,sp,-32
80020770:	afbf001c 	sw	ra,28(sp)
80020774:	afa40014 	sw	a0,20(sp)
80020778:	afa50018 	sw	a1,24(sp)
            check_language_ub,
            "ptr::write_bytes requires that the destination pointer is aligned and non-null",
            (
                addr: *const () = dst as *const (),
                align: usize = align_of::<T>(),
            ) => ub_checks::is_aligned_and_not_null(addr, align)
8002077c:	0c009884 	jal	80026210 <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E>
80020780:	00000000 	nop
80020784:	14400008 	bnez	v0,800207a8 <_ZN4core10intrinsics11write_bytes18precondition_check17h0cfe4849b5991fcdE+0x3c>
80020788:	00000000 	nop
8002078c:	080081e5 	j	80020794 <_ZN4core10intrinsics11write_bytes18precondition_check17h0cfe4849b5991fcdE+0x28>
80020790:	00000000 	nop
                if !$e {
                    ::core::panicking::panic_nounwind(
80020794:	3c018105 	lui	at,0x8105
80020798:	2424e208 	addiu	a0,at,-7672
8002079c:	2405006f 	li	a1,111
800207a0:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800207a4:	00000000 	nop
                        concat!("unsafe precondition(s) violated: ", $message)
                    );
                }
            }
800207a8:	8fbf001c 	lw	ra,28(sp)
800207ac:	27bd0020 	addiu	sp,sp,32
800207b0:	03e00008 	jr	ra
800207b4:	00000000 	nop

800207b8 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17he2c349279c717cc2E>:
            const fn precondition_check($($name:$ty),*) {
800207b8:	27bdffc8 	addiu	sp,sp,-56
800207bc:	afbf0034 	sw	ra,52(sp)
800207c0:	afa70014 	sw	a3,20(sp)
800207c4:	afa60010 	sw	a2,16(sp)
800207c8:	00a00825 	move	at,a1
800207cc:	8fa50014 	lw	a1,20(sp)
800207d0:	afa10018 	sw	at,24(sp)
800207d4:	afa4001c 	sw	a0,28(sp)
800207d8:	8fa20048 	lw	v0,72(sp)
800207dc:	afa20020 	sw	v0,32(sp)
800207e0:	afa40024 	sw	a0,36(sp)
800207e4:	afa10028 	sw	at,40(sp)
800207e8:	afa6002c 	sw	a2,44(sp)
800207ec:	afa50030 	sw	a1,48(sp)
        ub_checks::is_aligned_and_not_null(src, align)
800207f0:	0c009884 	jal	80026210 <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E>
800207f4:	00000000 	nop
800207f8:	14400008 	bnez	v0,8002081c <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17he2c349279c717cc2E+0x64>
800207fc:	00000000 	nop
80020800:	08008202 	j	80020808 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17he2c349279c717cc2E+0x50>
80020804:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80020808:	3c018105 	lui	at,0x8105
8002080c:	2424e277 	addiu	a0,at,-7561
80020810:	240500a6 	li	a1,166
80020814:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80020818:	00000000 	nop
            && ub_checks::is_aligned_and_not_null(dst, align)
8002081c:	8fa50014 	lw	a1,20(sp)
80020820:	8fa40018 	lw	a0,24(sp)
80020824:	0c009884 	jal	80026210 <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E>
80020828:	00000000 	nop
8002082c:	1040fff6 	beqz	v0,80020808 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17he2c349279c717cc2E+0x50>
80020830:	00000000 	nop
80020834:	0800820f 	j	8002083c <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17he2c349279c717cc2E+0x84>
80020838:	00000000 	nop
            && ub_checks::is_nonoverlapping(src, dst, size, count)
8002083c:	8fa70020 	lw	a3,32(sp)
80020840:	8fa60010 	lw	a2,16(sp)
80020844:	8fa50018 	lw	a1,24(sp)
80020848:	8fa4001c 	lw	a0,28(sp)
8002084c:	0c00983c 	jal	800260f0 <_ZN4core9ub_checks17is_nonoverlapping17hffc5f77dfb9f6169E>
80020850:	00000000 	nop
80020854:	1040ffec 	beqz	v0,80020808 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17he2c349279c717cc2E+0x50>
80020858:	00000000 	nop
8002085c:	08008219 	j	80020864 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17he2c349279c717cc2E+0xac>
80020860:	00000000 	nop
            }
80020864:	8fbf0034 	lw	ra,52(sp)
80020868:	27bd0038 	addiu	sp,sp,56
8002086c:	03e00008 	jr	ra
80020870:	00000000 	nop

80020874 <_ZN4core10intrinsics4copy18precondition_check17hf82729f49408b871E>:
            const fn precondition_check($($name:$ty),*) {
80020874:	27bdffd8 	addiu	sp,sp,-40
80020878:	afbf0024 	sw	ra,36(sp)
8002087c:	afa60010 	sw	a2,16(sp)
80020880:	00a00825 	move	at,a1
80020884:	8fa50010 	lw	a1,16(sp)
80020888:	afa10014 	sw	at,20(sp)
8002088c:	afa40018 	sw	a0,24(sp)
80020890:	afa1001c 	sw	at,28(sp)
80020894:	afa50020 	sw	a1,32(sp)
            ub_checks::is_aligned_and_not_null(src, align)
80020898:	0c009884 	jal	80026210 <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E>
8002089c:	00000000 	nop
800208a0:	14400008 	bnez	v0,800208c4 <_ZN4core10intrinsics4copy18precondition_check17hf82729f49408b871E+0x50>
800208a4:	00000000 	nop
800208a8:	0800822c 	j	800208b0 <_ZN4core10intrinsics4copy18precondition_check17hf82729f49408b871E+0x3c>
800208ac:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800208b0:	3c018105 	lui	at,0x8105
800208b4:	2424e277 	addiu	a0,at,-7561
800208b8:	240500a6 	li	a1,166
800208bc:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800208c0:	00000000 	nop
                && ub_checks::is_aligned_and_not_null(dst, align)
800208c4:	8fa50010 	lw	a1,16(sp)
800208c8:	8fa40014 	lw	a0,20(sp)
800208cc:	0c009884 	jal	80026210 <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E>
800208d0:	00000000 	nop
800208d4:	1040fff6 	beqz	v0,800208b0 <_ZN4core10intrinsics4copy18precondition_check17hf82729f49408b871E+0x3c>
800208d8:	00000000 	nop
800208dc:	08008239 	j	800208e4 <_ZN4core10intrinsics4copy18precondition_check17hf82729f49408b871E+0x70>
800208e0:	00000000 	nop
            }
800208e4:	8fbf0024 	lw	ra,36(sp)
800208e8:	27bd0028 	addiu	sp,sp,40
800208ec:	03e00008 	jr	ra
800208f0:	00000000 	nop

800208f4 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E>:
    /// ```
    #[inline]
    #[must_use]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[cfg_attr(not(bootstrap), rustc_diagnostic_item = "cmp_partialord_ge")]
    fn ge(&self, other: &Rhs) -> bool {
800208f4:	27bdffe0 	addiu	sp,sp,-32
800208f8:	afbf001c 	sw	ra,28(sp)
800208fc:	afa40014 	sw	a0,20(sp)
80020900:	afa50018 	sw	a1,24(sp)
        matches!(self.partial_cmp(other), Some(Greater | Equal))
80020904:	0c00d8b5 	jal	800362d4 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h3a54b6aedd3b1eedE>
80020908:	00000000 	nop
8002090c:	a3a20013 	sb	v0,19(sp)
80020910:	93a10013 	lbu	at,19(sp)
80020914:	24020002 	li	v0,2
80020918:	1022000b 	beq	at,v0,80020948 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E+0x54>
8002091c:	00000000 	nop
80020920:	0800824a 	j	80020928 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E+0x34>
80020924:	00000000 	nop
80020928:	93a10013 	lbu	at,19(sp)
8002092c:	240200ff 	li	v0,255
80020930:	10220005 	beq	at,v0,80020948 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E+0x54>
80020934:	00000000 	nop
80020938:	08008250 	j	80020940 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E+0x4c>
8002093c:	00000000 	nop
80020940:	08008257 	j	8002095c <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E+0x68>
80020944:	00000000 	nop
80020948:	24010000 	li	at,0
8002094c:	a3a00012 	sb	zero,18(sp)
80020950:	0800825b 	j	8002096c <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E+0x78>
80020954:	00000000 	nop
    fn ge(&self, other: &Rhs) -> bool {
80020958:	0000000d 	break
8002095c:	24010001 	li	at,1
        matches!(self.partial_cmp(other), Some(Greater | Equal))
80020960:	a3a10012 	sb	at,18(sp)
80020964:	0800825b 	j	8002096c <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E+0x78>
80020968:	00000000 	nop
    }
8002096c:	93a10012 	lbu	at,18(sp)
80020970:	30220001 	andi	v0,at,0x1
80020974:	8fbf001c 	lw	ra,28(sp)
80020978:	27bd0020 	addiu	sp,sp,32
8002097c:	03e00008 	jr	ra
80020980:	00000000 	nop

80020984 <_ZN4core3cmp10PartialOrd2ge17ha603ce749c946243E>:
    fn ge(&self, other: &Rhs) -> bool {
80020984:	27bdffe0 	addiu	sp,sp,-32
80020988:	afbf001c 	sw	ra,28(sp)
8002098c:	afa40014 	sw	a0,20(sp)
80020990:	afa50018 	sw	a1,24(sp)
        matches!(self.partial_cmp(other), Some(Greater | Equal))
80020994:	0c00d8bf 	jal	800362fc <_ZN70_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h19dfa988bbe3451fE>
80020998:	00000000 	nop
8002099c:	a3a20013 	sb	v0,19(sp)
800209a0:	93a10013 	lbu	at,19(sp)
800209a4:	24020002 	li	v0,2
800209a8:	1022000b 	beq	at,v0,800209d8 <_ZN4core3cmp10PartialOrd2ge17ha603ce749c946243E+0x54>
800209ac:	00000000 	nop
800209b0:	0800826e 	j	800209b8 <_ZN4core3cmp10PartialOrd2ge17ha603ce749c946243E+0x34>
800209b4:	00000000 	nop
800209b8:	93a10013 	lbu	at,19(sp)
800209bc:	240200ff 	li	v0,255
800209c0:	10220005 	beq	at,v0,800209d8 <_ZN4core3cmp10PartialOrd2ge17ha603ce749c946243E+0x54>
800209c4:	00000000 	nop
800209c8:	08008274 	j	800209d0 <_ZN4core3cmp10PartialOrd2ge17ha603ce749c946243E+0x4c>
800209cc:	00000000 	nop
800209d0:	0800827b 	j	800209ec <_ZN4core3cmp10PartialOrd2ge17ha603ce749c946243E+0x68>
800209d4:	00000000 	nop
800209d8:	24010000 	li	at,0
800209dc:	a3a00012 	sb	zero,18(sp)
800209e0:	0800827f 	j	800209fc <_ZN4core3cmp10PartialOrd2ge17ha603ce749c946243E+0x78>
800209e4:	00000000 	nop
    fn ge(&self, other: &Rhs) -> bool {
800209e8:	0000000d 	break
800209ec:	24010001 	li	at,1
        matches!(self.partial_cmp(other), Some(Greater | Equal))
800209f0:	a3a10012 	sb	at,18(sp)
800209f4:	0800827f 	j	800209fc <_ZN4core3cmp10PartialOrd2ge17ha603ce749c946243E+0x78>
800209f8:	00000000 	nop
    }
800209fc:	93a10012 	lbu	at,18(sp)
80020a00:	30220001 	andi	v0,at,0x1
80020a04:	8fbf001c 	lw	ra,28(sp)
80020a08:	27bd0020 	addiu	sp,sp,32
80020a0c:	03e00008 	jr	ra
80020a10:	00000000 	nop

80020a14 <_ZN4core3cmp10PartialOrd2gt17hd797d3773830092dE>:
    fn gt(&self, other: &Rhs) -> bool {
80020a14:	27bdffe0 	addiu	sp,sp,-32
80020a18:	afbf001c 	sw	ra,28(sp)
80020a1c:	afa40014 	sw	a0,20(sp)
80020a20:	afa50018 	sw	a1,24(sp)
        matches!(self.partial_cmp(other), Some(Greater))
80020a24:	0c00d8b5 	jal	800362d4 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h3a54b6aedd3b1eedE>
80020a28:	00000000 	nop
80020a2c:	a3a20013 	sb	v0,19(sp)
80020a30:	93a10013 	lbu	at,19(sp)
80020a34:	24020002 	li	v0,2
80020a38:	1022000a 	beq	at,v0,80020a64 <_ZN4core3cmp10PartialOrd2gt17hd797d3773830092dE+0x50>
80020a3c:	00000000 	nop
80020a40:	08008292 	j	80020a48 <_ZN4core3cmp10PartialOrd2gt17hd797d3773830092dE+0x34>
80020a44:	00000000 	nop
80020a48:	93a10013 	lbu	at,19(sp)
80020a4c:	24020001 	li	v0,1
80020a50:	00220826 	xor	at,at,v0
80020a54:	2c210001 	sltiu	at,at,1
80020a58:	a3a10012 	sb	at,18(sp)
80020a5c:	0800829d 	j	80020a74 <_ZN4core3cmp10PartialOrd2gt17hd797d3773830092dE+0x60>
80020a60:	00000000 	nop
80020a64:	24010000 	li	at,0
80020a68:	a3a00012 	sb	zero,18(sp)
80020a6c:	0800829d 	j	80020a74 <_ZN4core3cmp10PartialOrd2gt17hd797d3773830092dE+0x60>
80020a70:	00000000 	nop
    }
80020a74:	93a10012 	lbu	at,18(sp)
80020a78:	30220001 	andi	v0,at,0x1
80020a7c:	8fbf001c 	lw	ra,28(sp)
80020a80:	27bd0020 	addiu	sp,sp,32
80020a84:	03e00008 	jr	ra
80020a88:	00000000 	nop

80020a8c <_ZN4core3cmp10PartialOrd2le17hd3787ea4b7b21dceE>:
    fn le(&self, other: &Rhs) -> bool {
80020a8c:	27bdffe0 	addiu	sp,sp,-32
80020a90:	afbf001c 	sw	ra,28(sp)
80020a94:	afa40014 	sw	a0,20(sp)
80020a98:	afa50018 	sw	a1,24(sp)
        matches!(self.partial_cmp(other), Some(Less | Equal))
80020a9c:	0c00d8bf 	jal	800362fc <_ZN70_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h19dfa988bbe3451fE>
80020aa0:	00000000 	nop
80020aa4:	a3a20013 	sb	v0,19(sp)
80020aa8:	93a10013 	lbu	at,19(sp)
80020aac:	24020002 	li	v0,2
80020ab0:	1022000b 	beq	at,v0,80020ae0 <_ZN4core3cmp10PartialOrd2le17hd3787ea4b7b21dceE+0x54>
80020ab4:	00000000 	nop
80020ab8:	080082b0 	j	80020ac0 <_ZN4core3cmp10PartialOrd2le17hd3787ea4b7b21dceE+0x34>
80020abc:	00000000 	nop
80020ac0:	93a10013 	lbu	at,19(sp)
80020ac4:	24210001 	addiu	at,at,1
80020ac8:	302100ff 	andi	at,at,0xff
80020acc:	2c210002 	sltiu	at,at,2
80020ad0:	14200008 	bnez	at,80020af4 <_ZN4core3cmp10PartialOrd2le17hd3787ea4b7b21dceE+0x68>
80020ad4:	00000000 	nop
80020ad8:	080082b8 	j	80020ae0 <_ZN4core3cmp10PartialOrd2le17hd3787ea4b7b21dceE+0x54>
80020adc:	00000000 	nop
80020ae0:	24010000 	li	at,0
80020ae4:	a3a00012 	sb	zero,18(sp)
80020ae8:	080082c1 	j	80020b04 <_ZN4core3cmp10PartialOrd2le17hd3787ea4b7b21dceE+0x78>
80020aec:	00000000 	nop
    fn le(&self, other: &Rhs) -> bool {
80020af0:	0000000d 	break
80020af4:	24010001 	li	at,1
        matches!(self.partial_cmp(other), Some(Less | Equal))
80020af8:	a3a10012 	sb	at,18(sp)
80020afc:	080082c1 	j	80020b04 <_ZN4core3cmp10PartialOrd2le17hd3787ea4b7b21dceE+0x78>
80020b00:	00000000 	nop
    }
80020b04:	93a10012 	lbu	at,18(sp)
80020b08:	30220001 	andi	v0,at,0x1
80020b0c:	8fbf001c 	lw	ra,28(sp)
80020b10:	27bd0020 	addiu	sp,sp,32
80020b14:	03e00008 	jr	ra
80020b18:	00000000 	nop

80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>:
    fn lt(&self, other: &Rhs) -> bool {
80020b1c:	27bdffe0 	addiu	sp,sp,-32
80020b20:	afbf001c 	sw	ra,28(sp)
80020b24:	afa40014 	sw	a0,20(sp)
80020b28:	afa50018 	sw	a1,24(sp)
        matches!(self.partial_cmp(other), Some(Less))
80020b2c:	0c00d8b5 	jal	800362d4 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h3a54b6aedd3b1eedE>
80020b30:	00000000 	nop
80020b34:	a3a20013 	sb	v0,19(sp)
80020b38:	93a10013 	lbu	at,19(sp)
80020b3c:	24020002 	li	v0,2
80020b40:	1022000a 	beq	at,v0,80020b6c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE+0x50>
80020b44:	00000000 	nop
80020b48:	080082d4 	j	80020b50 <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE+0x34>
80020b4c:	00000000 	nop
80020b50:	93a10013 	lbu	at,19(sp)
80020b54:	240200ff 	li	v0,255
80020b58:	00220826 	xor	at,at,v0
80020b5c:	2c210001 	sltiu	at,at,1
80020b60:	a3a10012 	sb	at,18(sp)
80020b64:	080082df 	j	80020b7c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE+0x60>
80020b68:	00000000 	nop
80020b6c:	24010000 	li	at,0
80020b70:	a3a00012 	sb	zero,18(sp)
80020b74:	080082df 	j	80020b7c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE+0x60>
80020b78:	00000000 	nop
    }
80020b7c:	93a10012 	lbu	at,18(sp)
80020b80:	30220001 	andi	v0,at,0x1
80020b84:	8fbf001c 	lw	ra,28(sp)
80020b88:	27bd0020 	addiu	sp,sp,32
80020b8c:	03e00008 	jr	ra
80020b90:	00000000 	nop

80020b94 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$11partial_cmp17hc8d86e4b06ea3c98E>:
    macro_rules! ord_impl {
        ($($t:ty)*) => ($(
            #[stable(feature = "rust1", since = "1.0.0")]
            impl PartialOrd for $t {
                #[inline]
                fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
80020b94:	27bdfff0 	addiu	sp,sp,-16
80020b98:	afa40008 	sw	a0,8(sp)
80020b9c:	afa5000c 	sw	a1,12(sp)
                    {
                        Some(self.cmp(other))
                    }
                    #[cfg(not(bootstrap))]
                    {
                        Some(crate::intrinsics::three_way_compare(*self, *other))
80020ba0:	8c820000 	lw	v0,0(a0)
80020ba4:	8ca30000 	lw	v1,0(a1)
80020ba8:	0062082b 	sltu	at,v1,v0
80020bac:	0043102b 	sltu	v0,v0,v1
80020bb0:	00220823 	subu	at,at,v0
80020bb4:	a3a10007 	sb	at,7(sp)
                    }
                }
80020bb8:	93a20007 	lbu	v0,7(sp)
80020bbc:	27bd0010 	addiu	sp,sp,16
80020bc0:	03e00008 	jr	ra
80020bc4:	00000000 	nop

80020bc8 <_ZN4core3cmp9PartialEq2ne17h5ebf5cdf63f836b1E>:
    fn ne(&self, other: &Rhs) -> bool {
80020bc8:	27bdffe0 	addiu	sp,sp,-32
80020bcc:	afbf001c 	sw	ra,28(sp)
80020bd0:	afa40014 	sw	a0,20(sp)
80020bd4:	afa50018 	sw	a1,24(sp)
        !self.eq(other)
80020bd8:	0c00d8ab 	jal	800362ac <_ZN69_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..cmp..PartialEq$GT$2eq17hb1e03b554bee2b27E>
80020bdc:	00000000 	nop
80020be0:	38420001 	xori	v0,v0,0x1
    }
80020be4:	8fbf001c 	lw	ra,28(sp)
80020be8:	27bd0020 	addiu	sp,sp,32
80020bec:	03e00008 	jr	ra
80020bf0:	00000000 	nop

80020bf4 <_ZN4core3cmp9PartialEq2ne17haf2bed79dacf06b9E>:
    fn ne(&self, other: &Rhs) -> bool {
80020bf4:	27bdffe0 	addiu	sp,sp,-32
80020bf8:	afbf001c 	sw	ra,28(sp)
80020bfc:	afa40014 	sw	a0,20(sp)
80020c00:	afa50018 	sw	a1,24(sp)
        !self.eq(other)
80020c04:	0c00dae4 	jal	80036b90 <_ZN66_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..cmp..PartialEq$GT$2eq17hac98e68293e6189dE>
80020c08:	00000000 	nop
80020c0c:	38420001 	xori	v0,v0,0x1
    }
80020c10:	8fbf001c 	lw	ra,28(sp)
80020c14:	27bd0020 	addiu	sp,sp,32
80020c18:	03e00008 	jr	ra
80020c1c:	00000000 	nop

80020c20 <_ZN4core3fmt5Write10write_char17hde1e6e317a246837E>:
    fn write_char(&mut self, c: char) -> Result {
80020c20:	27bdffd8 	addiu	sp,sp,-40
80020c24:	afbf0024 	sw	ra,36(sp)
80020c28:	afa50010 	sw	a1,16(sp)
80020c2c:	00800825 	move	at,a0
80020c30:	8fa40010 	lw	a0,16(sp)
80020c34:	afa10014 	sw	at,20(sp)
80020c38:	afa1001c 	sw	at,28(sp)
80020c3c:	afa40020 	sw	a0,32(sp)
        self.write_str(c.encode_utf8(&mut [0; 4]))
80020c40:	afa00018 	sw	zero,24(sp)
80020c44:	27a50018 	addiu	a1,sp,24
80020c48:	24060004 	li	a2,4
80020c4c:	0c0090b4 	jal	800242d0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h9656afd115dc9e1eE>
80020c50:	00000000 	nop
80020c54:	8fa40014 	lw	a0,20(sp)
80020c58:	00402825 	move	a1,v0
80020c5c:	00603025 	move	a2,v1
80020c60:	0c00b524 	jal	8002d490 <_ZN60_$LT$mos_6502..print..Stdout$u20$as$u20$core..fmt..Write$GT$9write_str17h4c8d431c420dedf3E>
80020c64:	00000000 	nop
    }
80020c68:	8fbf0024 	lw	ra,36(sp)
80020c6c:	27bd0028 	addiu	sp,sp,40
80020c70:	03e00008 	jr	ra
80020c74:	00000000 	nop

80020c78 <_ZN4core3fmt5Write9write_fmt17h0818b1b65ab6b254E>:
    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
80020c78:	27bdffd0 	addiu	sp,sp,-48
80020c7c:	afbf002c 	sw	ra,44(sp)
80020c80:	afa40010 	sw	a0,16(sp)
        self.spec_write_fmt(args)
80020c84:	8ca10014 	lw	at,20(a1)
80020c88:	afa10028 	sw	at,40(sp)
80020c8c:	8ca10010 	lw	at,16(a1)
80020c90:	afa10024 	sw	at,36(sp)
80020c94:	8ca1000c 	lw	at,12(a1)
80020c98:	afa10020 	sw	at,32(sp)
80020c9c:	8ca10008 	lw	at,8(a1)
80020ca0:	afa1001c 	sw	at,28(sp)
80020ca4:	8ca10004 	lw	at,4(a1)
80020ca8:	afa10018 	sw	at,24(sp)
80020cac:	8ca10000 	lw	at,0(a1)
80020cb0:	afa10014 	sw	at,20(sp)
80020cb4:	27a50014 	addiu	a1,sp,20
80020cb8:	0c00aaaf 	jal	8002aabc <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17ha3ee0caf6cd60073E>
80020cbc:	00000000 	nop
    }
80020cc0:	8fbf002c 	lw	ra,44(sp)
80020cc4:	27bd0030 	addiu	sp,sp,48
80020cc8:	03e00008 	jr	ra
80020ccc:	00000000 	nop

80020cd0 <_ZN4core3fmt9Arguments16new_v1_formatted17h95af8d970760495bE>:
    pub fn new_v1_formatted(
80020cd0:	27bdffd8 	addiu	sp,sp,-40
80020cd4:	00801025 	move	v0,a0
80020cd8:	8fa30040 	lw	v1,64(sp)
80020cdc:	8fa8003c 	lw	t0,60(sp)
80020ce0:	8fa10038 	lw	at,56(sp)
        _unsafe_arg: rt::UnsafeArg,
80020ce4:	afa5000c 	sw	a1,12(sp)
80020ce8:	afa60010 	sw	a2,16(sp)
80020cec:	afa70014 	sw	a3,20(sp)
80020cf0:	afa10018 	sw	at,24(sp)
80020cf4:	afa8001c 	sw	t0,28(sp)
80020cf8:	afa30020 	sw	v1,32(sp)
        Arguments { pieces, fmt: Some(fmt), args }
80020cfc:	afa80004 	sw	t0,4(sp)
80020d00:	afa30008 	sw	v1,8(sp)
80020d04:	ac850000 	sw	a1,0(a0)
80020d08:	ac860004 	sw	a2,4(a0)
80020d0c:	8fa50004 	lw	a1,4(sp)
80020d10:	8fa30008 	lw	v1,8(sp)
80020d14:	ac850010 	sw	a1,16(a0)
80020d18:	ac830014 	sw	v1,20(a0)
80020d1c:	ac870008 	sw	a3,8(a0)
80020d20:	ac81000c 	sw	at,12(a0)
80020d24:	27bd0028 	addiu	sp,sp,40
    }
80020d28:	03e00008 	jr	ra
80020d2c:	00000000 	nop

80020d30 <_ZN4core3fmt9Arguments23as_statically_known_str17h15c23d77fef37e8dE>:
    fn as_statically_known_str(&self) -> Option<&'static str> {
80020d30:	27bdffd0 	addiu	sp,sp,-48
80020d34:	afbf002c 	sw	ra,44(sp)
80020d38:	afa40024 	sw	a0,36(sp)
        let s = self.as_str();
80020d3c:	0c00836d 	jal	80020db4 <_ZN4core3fmt9Arguments6as_str17hfd29ae30d0774f9eE>
80020d40:	00000000 	nop
80020d44:	afa2001c 	sw	v0,28(sp)
80020d48:	afa30020 	sw	v1,32(sp)
80020d4c:	27a4001c 	addiu	a0,sp,28
        if core::intrinsics::is_val_statically_known(s.is_some()) { s } else { None }
80020d50:	0c00f933 	jal	8003e4cc <_ZN4core6option15Option$LT$T$GT$7is_some17hf03c679c9733e5acE>
80020d54:	00000000 	nop
80020d58:	24010000 	li	at,0
80020d5c:	a3a0002b 	sb	zero,43(sp)
80020d60:	93a1002b 	lbu	at,43(sp)
80020d64:	30210001 	andi	at,at,0x1
80020d68:	14200006 	bnez	at,80020d84 <_ZN4core3fmt9Arguments23as_statically_known_str17h15c23d77fef37e8dE+0x54>
80020d6c:	00000000 	nop
80020d70:	0800835e 	j	80020d78 <_ZN4core3fmt9Arguments23as_statically_known_str17h15c23d77fef37e8dE+0x48>
80020d74:	00000000 	nop
80020d78:	afa00014 	sw	zero,20(sp)
80020d7c:	08008367 	j	80020d9c <_ZN4core3fmt9Arguments23as_statically_known_str17h15c23d77fef37e8dE+0x6c>
80020d80:	00000000 	nop
80020d84:	8fa2001c 	lw	v0,28(sp)
80020d88:	8fa10020 	lw	at,32(sp)
80020d8c:	afa20014 	sw	v0,20(sp)
80020d90:	afa10018 	sw	at,24(sp)
80020d94:	08008367 	j	80020d9c <_ZN4core3fmt9Arguments23as_statically_known_str17h15c23d77fef37e8dE+0x6c>
80020d98:	00000000 	nop
    }
80020d9c:	8fa20014 	lw	v0,20(sp)
80020da0:	8fa30018 	lw	v1,24(sp)
80020da4:	8fbf002c 	lw	ra,44(sp)
80020da8:	27bd0030 	addiu	sp,sp,48
80020dac:	03e00008 	jr	ra
80020db0:	00000000 	nop

80020db4 <_ZN4core3fmt9Arguments6as_str17hfd29ae30d0774f9eE>:
    pub const fn as_str(&self) -> Option<&'static str> {
80020db4:	27bdffe0 	addiu	sp,sp,-32
80020db8:	00800825 	move	at,a0
80020dbc:	afa10018 	sw	at,24(sp)
        match (self.pieces, self.args) {
80020dc0:	8c240000 	lw	a0,0(at)
80020dc4:	8c230004 	lw	v1,4(at)
80020dc8:	8c220008 	lw	v0,8(at)
80020dcc:	8c21000c 	lw	at,12(at)
80020dd0:	afa40008 	sw	a0,8(sp)
80020dd4:	afa3000c 	sw	v1,12(sp)
80020dd8:	afa20010 	sw	v0,16(sp)
80020ddc:	afa10014 	sw	at,20(sp)
            ([], []) => Some(""),
80020de0:	8fa1000c 	lw	at,12(sp)
80020de4:	10200009 	beqz	at,80020e0c <_ZN4core3fmt9Arguments6as_str17hfd29ae30d0774f9eE+0x58>
80020de8:	00000000 	nop
80020dec:	0800837d 	j	80020df4 <_ZN4core3fmt9Arguments6as_str17hfd29ae30d0774f9eE+0x40>
80020df0:	00000000 	nop
            ([s], []) => Some(s),
80020df4:	8fa1000c 	lw	at,12(sp)
80020df8:	24020001 	li	v0,1
80020dfc:	1022000b 	beq	at,v0,80020e2c <_ZN4core3fmt9Arguments6as_str17hfd29ae30d0774f9eE+0x78>
80020e00:	00000000 	nop
80020e04:	08008388 	j	80020e20 <_ZN4core3fmt9Arguments6as_str17hfd29ae30d0774f9eE+0x6c>
80020e08:	00000000 	nop
            ([], []) => Some(""),
80020e0c:	8fa10014 	lw	at,20(sp)
80020e10:	10200018 	beqz	at,80020e74 <_ZN4core3fmt9Arguments6as_str17hfd29ae30d0774f9eE+0xc0>
80020e14:	00000000 	nop
80020e18:	08008388 	j	80020e20 <_ZN4core3fmt9Arguments6as_str17hfd29ae30d0774f9eE+0x6c>
80020e1c:	00000000 	nop
            _ => None,
80020e20:	afa00000 	sw	zero,0(sp)
80020e24:	08008398 	j	80020e60 <_ZN4core3fmt9Arguments6as_str17hfd29ae30d0774f9eE+0xac>
80020e28:	00000000 	nop
            ([s], []) => Some(s),
80020e2c:	8fa10014 	lw	at,20(sp)
80020e30:	1420fffb 	bnez	at,80020e20 <_ZN4core3fmt9Arguments6as_str17hfd29ae30d0774f9eE+0x6c>
80020e34:	00000000 	nop
80020e38:	08008390 	j	80020e40 <_ZN4core3fmt9Arguments6as_str17hfd29ae30d0774f9eE+0x8c>
80020e3c:	00000000 	nop
80020e40:	8fa10008 	lw	at,8(sp)
80020e44:	afa1001c 	sw	at,28(sp)
80020e48:	8c220000 	lw	v0,0(at)
80020e4c:	8c210004 	lw	at,4(at)
80020e50:	afa20000 	sw	v0,0(sp)
80020e54:	afa10004 	sw	at,4(sp)
80020e58:	08008398 	j	80020e60 <_ZN4core3fmt9Arguments6as_str17hfd29ae30d0774f9eE+0xac>
80020e5c:	00000000 	nop
    }
80020e60:	8fa20000 	lw	v0,0(sp)
80020e64:	8fa30004 	lw	v1,4(sp)
80020e68:	27bd0020 	addiu	sp,sp,32
80020e6c:	03e00008 	jr	ra
80020e70:	00000000 	nop
            ([], []) => Some(""),
80020e74:	3c018105 	lui	at,0x8105
80020e78:	2421e320 	addiu	at,at,-7392
80020e7c:	afa10000 	sw	at,0(sp)
80020e80:	afa00004 	sw	zero,4(sp)
80020e84:	08008398 	j	80020e60 <_ZN4core3fmt9Arguments6as_str17hfd29ae30d0774f9eE+0xac>
80020e88:	00000000 	nop

80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>:
    pub fn new_v1(pieces: &'a [&'static str], args: &'a [rt::Argument<'a>]) -> Arguments<'a> {
80020e8c:	27bdff98 	addiu	sp,sp,-104
80020e90:	afbf0064 	sw	ra,100(sp)
80020e94:	afa7001c 	sw	a3,28(sp)
80020e98:	afa60020 	sw	a2,32(sp)
80020e9c:	afa50024 	sw	a1,36(sp)
80020ea0:	afa40028 	sw	a0,40(sp)
80020ea4:	afa4002c 	sw	a0,44(sp)
80020ea8:	8fa10078 	lw	at,120(sp)
80020eac:	afa10030 	sw	at,48(sp)
80020eb0:	afa50054 	sw	a1,84(sp)
80020eb4:	afa60058 	sw	a2,88(sp)
80020eb8:	afa7005c 	sw	a3,92(sp)
80020ebc:	afa10060 	sw	at,96(sp)
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
80020ec0:	00c1082b 	sltu	at,a2,at
80020ec4:	1420000a 	bnez	at,80020ef0 <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E+0x64>
80020ec8:	00000000 	nop
80020ecc:	080083b5 	j	80020ed4 <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E+0x48>
80020ed0:	00000000 	nop
80020ed4:	8fa10030 	lw	at,48(sp)
80020ed8:	24210001 	addiu	at,at,1
80020edc:	afa10018 	sw	at,24(sp)
80020ee0:	10200016 	beqz	at,80020f3c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E+0xb0>
80020ee4:	00000000 	nop
80020ee8:	080083c8 	j	80020f20 <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E+0x94>
80020eec:	00000000 	nop
            panic!("invalid args");
80020ef0:	3c018105 	lui	at,0x8105
80020ef4:	2425e3ac 	addiu	a1,at,-7252
80020ef8:	27a40034 	addiu	a0,sp,52
80020efc:	afa40014 	sw	a0,20(sp)
80020f00:	24060001 	li	a2,1
80020f04:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80020f08:	00000000 	nop
80020f0c:	8fa40014 	lw	a0,20(sp)
80020f10:	3c018105 	lui	at,0x8105
80020f14:	2425e3b4 	addiu	a1,at,-7244
80020f18:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80020f1c:	00000000 	nop
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
80020f20:	8fa10018 	lw	at,24(sp)
80020f24:	8fa20020 	lw	v0,32(sp)
80020f28:	0022082b 	sltu	at,at,v0
80020f2c:	1420fff0 	bnez	at,80020ef0 <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E+0x64>
80020f30:	00000000 	nop
80020f34:	080083d3 	j	80020f4c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E+0xc0>
80020f38:	00000000 	nop
80020f3c:	3c018105 	lui	at,0x8105
80020f40:	2424e390 	addiu	a0,at,-7280
80020f44:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80020f48:	00000000 	nop
        Arguments { pieces, fmt: None, args }
80020f4c:	8fa2002c 	lw	v0,44(sp)
80020f50:	8fa10030 	lw	at,48(sp)
80020f54:	8fa30028 	lw	v1,40(sp)
80020f58:	8fa4001c 	lw	a0,28(sp)
80020f5c:	8fa50020 	lw	a1,32(sp)
80020f60:	8fa60024 	lw	a2,36(sp)
80020f64:	afa0004c 	sw	zero,76(sp)
80020f68:	ac660000 	sw	a2,0(v1)
80020f6c:	ac650004 	sw	a1,4(v1)
80020f70:	8fa6004c 	lw	a2,76(sp)
80020f74:	8fa50050 	lw	a1,80(sp)
80020f78:	ac660010 	sw	a2,16(v1)
80020f7c:	ac650014 	sw	a1,20(v1)
80020f80:	ac640008 	sw	a0,8(v1)
80020f84:	ac61000c 	sw	at,12(v1)
    }
80020f88:	8fbf0064 	lw	ra,100(sp)
80020f8c:	27bd0068 	addiu	sp,sp,104
80020f90:	03e00008 	jr	ra
80020f94:	00000000 	nop

80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>:
    pub const fn new_const(pieces: &'a [&'static str]) -> Self {
80020f98:	27bdffb0 	addiu	sp,sp,-80
80020f9c:	afbf004c 	sw	ra,76(sp)
80020fa0:	afa60014 	sw	a2,20(sp)
80020fa4:	afa50018 	sw	a1,24(sp)
80020fa8:	afa4001c 	sw	a0,28(sp)
80020fac:	afa40020 	sw	a0,32(sp)
80020fb0:	afa50044 	sw	a1,68(sp)
80020fb4:	afa60048 	sw	a2,72(sp)
        if pieces.len() > 1 {
80020fb8:	2cc10002 	sltiu	at,a2,2
80020fbc:	10200016 	beqz	at,80021018 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE+0x80>
80020fc0:	00000000 	nop
80020fc4:	080083f3 	j	80020fcc <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE+0x34>
80020fc8:	00000000 	nop
        Arguments { pieces, fmt: None, args: &[] }
80020fcc:	8fa20020 	lw	v0,32(sp)
80020fd0:	8fa1001c 	lw	at,28(sp)
80020fd4:	8fa30014 	lw	v1,20(sp)
80020fd8:	8fa40018 	lw	a0,24(sp)
80020fdc:	afa0003c 	sw	zero,60(sp)
80020fe0:	ac240000 	sw	a0,0(at)
80020fe4:	ac230004 	sw	v1,4(at)
80020fe8:	8fa4003c 	lw	a0,60(sp)
80020fec:	8fa30040 	lw	v1,64(sp)
80020ff0:	ac240010 	sw	a0,16(at)
80020ff4:	ac230014 	sw	v1,20(at)
80020ff8:	3c038105 	lui	v1,0x8105
80020ffc:	2463e320 	addiu	v1,v1,-7392
80021000:	ac230008 	sw	v1,8(at)
80021004:	ac20000c 	sw	zero,12(at)
    }
80021008:	8fbf004c 	lw	ra,76(sp)
8002100c:	27bd0050 	addiu	sp,sp,80
80021010:	03e00008 	jr	ra
80021014:	00000000 	nop
            panic!("invalid args");
80021018:	3c018105 	lui	at,0x8105
8002101c:	2425e3ac 	addiu	a1,at,-7252
80021020:	27a40024 	addiu	a0,sp,36
80021024:	afa40010 	sw	a0,16(sp)
80021028:	24060001 	li	a2,1
8002102c:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80021030:	00000000 	nop
80021034:	8fa40010 	lw	a0,16(sp)
80021038:	3c018105 	lui	at,0x8105
8002103c:	2425e3c4 	addiu	a1,at,-7228
80021040:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80021044:	00000000 	nop

80021048 <_ZN4core3mem15size_of_val_raw17h57e1f4a4c83b4398E>:
/// ```
#[inline]
#[must_use]
#[unstable(feature = "layout_for_ptr", issue = "69835")]
#[rustc_const_unstable(feature = "const_size_of_val_raw", issue = "46571")]
pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {
80021048:	27bdfff8 	addiu	sp,sp,-8
8002104c:	afa40000 	sw	a0,0(sp)
80021050:	24010020 	li	at,32
    // SAFETY: the caller must provide a valid raw pointer
    unsafe { intrinsics::size_of_val(val) }
80021054:	afa10004 	sw	at,4(sp)
80021058:	8fa20004 	lw	v0,4(sp)
8002105c:	27bd0008 	addiu	sp,sp,8
}
80021060:	03e00008 	jr	ra
80021064:	00000000 	nop

80021068 <_ZN4core3mem15size_of_val_raw17he9fa27894d6ccfaeE>:
pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {
80021068:	27bdfff8 	addiu	sp,sp,-8
8002106c:	afa40000 	sw	a0,0(sp)
80021070:	24011000 	li	at,4096
    unsafe { intrinsics::size_of_val(val) }
80021074:	afa10004 	sw	at,4(sp)
80021078:	8fa20004 	lw	v0,4(sp)
8002107c:	27bd0008 	addiu	sp,sp,8
}
80021080:	03e00008 	jr	ra
80021084:	00000000 	nop

80021088 <_ZN4core3mem15size_of_val_raw17hee75f81fe0159776E>:
pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {
80021088:	27bdfff8 	addiu	sp,sp,-8
8002108c:	afa40000 	sw	a0,0(sp)
80021090:	24010018 	li	at,24
    unsafe { intrinsics::size_of_val(val) }
80021094:	afa10004 	sw	at,4(sp)
80021098:	8fa20004 	lw	v0,4(sp)
8002109c:	27bd0008 	addiu	sp,sp,8
}
800210a0:	03e00008 	jr	ra
800210a4:	00000000 	nop

800210a8 <_ZN4core3mem16align_of_val_raw17h14a7253dec0945f6E>:
/// ```
#[inline]
#[must_use]
#[unstable(feature = "layout_for_ptr", issue = "69835")]
#[rustc_const_unstable(feature = "const_align_of_val_raw", issue = "46571")]
pub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {
800210a8:	27bdfff8 	addiu	sp,sp,-8
800210ac:	afa40000 	sw	a0,0(sp)
800210b0:	24011000 	li	at,4096
    // SAFETY: the caller must provide a valid raw pointer
    unsafe { intrinsics::min_align_of_val(val) }
800210b4:	afa10004 	sw	at,4(sp)
800210b8:	8fa20004 	lw	v0,4(sp)
800210bc:	27bd0008 	addiu	sp,sp,8
}
800210c0:	03e00008 	jr	ra
800210c4:	00000000 	nop

800210c8 <_ZN4core3mem16align_of_val_raw17h4f078d38f486f36fE>:
pub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {
800210c8:	27bdfff8 	addiu	sp,sp,-8
800210cc:	afa40000 	sw	a0,0(sp)
800210d0:	24010004 	li	at,4
    unsafe { intrinsics::min_align_of_val(val) }
800210d4:	afa10004 	sw	at,4(sp)
800210d8:	8fa20004 	lw	v0,4(sp)
800210dc:	27bd0008 	addiu	sp,sp,8
}
800210e0:	03e00008 	jr	ra
800210e4:	00000000 	nop

800210e8 <_ZN4core3mem16align_of_val_raw17h91a95405ebfded3cE>:
pub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {
800210e8:	27bdfff8 	addiu	sp,sp,-8
800210ec:	afa40000 	sw	a0,0(sp)
800210f0:	24010004 	li	at,4
    unsafe { intrinsics::min_align_of_val(val) }
800210f4:	afa10004 	sw	at,4(sp)
800210f8:	8fa20004 	lw	v0,4(sp)
800210fc:	27bd0008 	addiu	sp,sp,8
}
80021100:	03e00008 	jr	ra
80021104:	00000000 	nop

80021108 <_ZN4core3mem4drop17h0cd67011859f238fE>:
///
/// [`RefCell`]: crate::cell::RefCell
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[cfg_attr(not(test), rustc_diagnostic_item = "mem_drop")]
pub fn drop<T>(_x: T) {}
80021108:	27bdffe8 	addiu	sp,sp,-24
8002110c:	afbf0014 	sw	ra,20(sp)
80021110:	afa40010 	sw	a0,16(sp)
80021114:	27a40010 	addiu	a0,sp,16
80021118:	0c0086ba 	jal	80021ae8 <_ZN4core3ptr101drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17h9a20e3346397bf3eE>
8002111c:	00000000 	nop
80021120:	8fbf0014 	lw	ra,20(sp)
80021124:	27bd0018 	addiu	sp,sp,24
80021128:	03e00008 	jr	ra
8002112c:	00000000 	nop

80021130 <_ZN4core3mem4drop17h42ecfc0c85e47420E>:
80021130:	27bdffe8 	addiu	sp,sp,-24
80021134:	afbf0014 	sw	ra,20(sp)
80021138:	afa40010 	sw	a0,16(sp)
8002113c:	27a40010 	addiu	a0,sp,16
80021140:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
80021144:	00000000 	nop
80021148:	8fbf0014 	lw	ra,20(sp)
8002114c:	27bd0018 	addiu	sp,sp,24
80021150:	03e00008 	jr	ra
80021154:	00000000 	nop

80021158 <_ZN4core3mem4drop17h6a3effa89817325fE>:
80021158:	27bdffe8 	addiu	sp,sp,-24
8002115c:	afbf0014 	sw	ra,20(sp)
80021160:	afa40010 	sw	a0,16(sp)
80021164:	27a40010 	addiu	a0,sp,16
80021168:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
8002116c:	00000000 	nop
80021170:	8fbf0014 	lw	ra,20(sp)
80021174:	27bd0018 	addiu	sp,sp,24
80021178:	03e00008 	jr	ra
8002117c:	00000000 	nop

80021180 <_ZN4core3mem4drop17haab0c747908d560fE>:
80021180:	27bdffe8 	addiu	sp,sp,-24
80021184:	afbf0014 	sw	ra,20(sp)
80021188:	afa40010 	sw	a0,16(sp)
8002118c:	27a40010 	addiu	a0,sp,16
80021190:	0c008cff 	jal	800233fc <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17hde8d744f358f0af3E>
80021194:	00000000 	nop
80021198:	8fbf0014 	lw	ra,20(sp)
8002119c:	27bd0018 	addiu	sp,sp,24
800211a0:	03e00008 	jr	ra
800211a4:	00000000 	nop

800211a8 <_ZN4core3mem7replace17h0b7c6c9371424215E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
800211a8:	27bdffd0 	addiu	sp,sp,-48
800211ac:	afbf002c 	sw	ra,44(sp)
800211b0:	afa50018 	sw	a1,24(sp)
800211b4:	afa40014 	sw	a0,20(sp)
800211b8:	afa40020 	sw	a0,32(sp)
800211bc:	afa50024 	sw	a1,36(sp)
        let result = ptr::read(dest);
800211c0:	0c0089b4 	jal	800226d0 <_ZN4core3ptr4read17h05b8eba24dbfd7a1E>
800211c4:	00000000 	nop
800211c8:	8fa40014 	lw	a0,20(sp)
800211cc:	8fa50018 	lw	a1,24(sp)
800211d0:	afa2001c 	sw	v0,28(sp)
800211d4:	afa20028 	sw	v0,40(sp)
        ptr::write(dest, src);
800211d8:	0c008af6 	jal	80022bd8 <_ZN4core3ptr5write17h96be3a4cf9233055E>
800211dc:	00000000 	nop
800211e0:	8fa2001c 	lw	v0,28(sp)
}
800211e4:	8fbf002c 	lw	ra,44(sp)
800211e8:	27bd0030 	addiu	sp,sp,48
800211ec:	03e00008 	jr	ra
800211f0:	00000000 	nop

800211f4 <_ZN4core3mem7replace17h54079e6a897bed37E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
800211f4:	27bdffc0 	addiu	sp,sp,-64
800211f8:	afbf003c 	sw	ra,60(sp)
800211fc:	afa6001c 	sw	a2,28(sp)
80021200:	afa50018 	sw	a1,24(sp)
80021204:	afa40014 	sw	a0,20(sp)
80021208:	afa40028 	sw	a0,40(sp)
8002120c:	afa5002c 	sw	a1,44(sp)
80021210:	afa60030 	sw	a2,48(sp)
        let result = ptr::read(dest);
80021214:	0c0089ca 	jal	80022728 <_ZN4core3ptr4read17h06acc532f366dc96E>
80021218:	00000000 	nop
8002121c:	8fa40014 	lw	a0,20(sp)
80021220:	8fa50018 	lw	a1,24(sp)
80021224:	8fa6001c 	lw	a2,28(sp)
80021228:	afa20020 	sw	v0,32(sp)
8002122c:	afa30024 	sw	v1,36(sp)
80021230:	afa20034 	sw	v0,52(sp)
80021234:	afa30038 	sw	v1,56(sp)
        ptr::write(dest, src);
80021238:	0c008b93 	jal	80022e4c <_ZN4core3ptr5write17hec4f96b7c0a9fb2dE>
8002123c:	00000000 	nop
80021240:	8fa20020 	lw	v0,32(sp)
80021244:	8fa30024 	lw	v1,36(sp)
}
80021248:	8fbf003c 	lw	ra,60(sp)
8002124c:	27bd0040 	addiu	sp,sp,64
80021250:	03e00008 	jr	ra
80021254:	00000000 	nop

80021258 <_ZN4core3mem7replace17h5cad309988a5cbf6E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
80021258:	27bdffd0 	addiu	sp,sp,-48
8002125c:	afbf002c 	sw	ra,44(sp)
80021260:	afa50018 	sw	a1,24(sp)
80021264:	afa40014 	sw	a0,20(sp)
80021268:	afa40020 	sw	a0,32(sp)
8002126c:	afa50024 	sw	a1,36(sp)
        let result = ptr::read(dest);
80021270:	0c008a29 	jal	800228a4 <_ZN4core3ptr4read17haeaa39aafe044d3cE>
80021274:	00000000 	nop
80021278:	8fa40014 	lw	a0,20(sp)
8002127c:	8fa50018 	lw	a1,24(sp)
80021280:	afa2001c 	sw	v0,28(sp)
80021284:	afa20028 	sw	v0,40(sp)
        ptr::write(dest, src);
80021288:	0c008b7a 	jal	80022de8 <_ZN4core3ptr5write17he936630edff8f69aE>
8002128c:	00000000 	nop
80021290:	8fa2001c 	lw	v0,28(sp)
}
80021294:	8fbf002c 	lw	ra,44(sp)
80021298:	27bd0030 	addiu	sp,sp,48
8002129c:	03e00008 	jr	ra
800212a0:	00000000 	nop

800212a4 <_ZN4core3mem7replace17h693ed87c06f479adE>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
800212a4:	27bdffd0 	addiu	sp,sp,-48
800212a8:	afbf002c 	sw	ra,44(sp)
800212ac:	afa50018 	sw	a1,24(sp)
800212b0:	afa40014 	sw	a0,20(sp)
800212b4:	afa40020 	sw	a0,32(sp)
800212b8:	afa50024 	sw	a1,36(sp)
        let result = ptr::read(dest);
800212bc:	0c0089fd 	jal	800227f4 <_ZN4core3ptr4read17h224be9e3d8aa12f7E>
800212c0:	00000000 	nop
800212c4:	8fa40014 	lw	a0,20(sp)
800212c8:	8fa50018 	lw	a1,24(sp)
800212cc:	afa2001c 	sw	v0,28(sp)
800212d0:	afa20028 	sw	v0,40(sp)
        ptr::write(dest, src);
800212d4:	0c008bb0 	jal	80022ec0 <_ZN4core3ptr5write17hfa0c2ce5b65433fdE>
800212d8:	00000000 	nop
800212dc:	8fa2001c 	lw	v0,28(sp)
}
800212e0:	8fbf002c 	lw	ra,44(sp)
800212e4:	27bd0030 	addiu	sp,sp,48
800212e8:	03e00008 	jr	ra
800212ec:	00000000 	nop

800212f0 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h70082d581f30ecffE>:
        #[allow(unused_attributes)]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline]
        #[rustc_inherit_overflow_checks]
        pub const fn abs(self) -> Self {
800212f0:	27bdffe0 	addiu	sp,sp,-32
800212f4:	afa40010 	sw	a0,16(sp)
800212f8:	afa40018 	sw	a0,24(sp)
800212fc:	afa4001c 	sw	a0,28(sp)
            // Note that the #[rustc_inherit_overflow_checks] and #[inline]
            // above mean that the overflow semantics of the subtraction
            // depend on the crate we're being called from.
            if self.is_negative() {
80021300:	04800007 	bltz	a0,80021320 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h70082d581f30ecffE+0x30>
80021304:	00000000 	nop
80021308:	080084c4 	j	80021310 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h70082d581f30ecffE+0x20>
8002130c:	00000000 	nop
                -self
            } else {
                self
80021310:	8fa10010 	lw	at,16(sp)
80021314:	afa10014 	sw	at,20(sp)
            if self.is_negative() {
80021318:	080084ce 	j	80021338 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h70082d581f30ecffE+0x48>
8002131c:	00000000 	nop
80021320:	8fa10010 	lw	at,16(sp)
80021324:	3c028000 	lui	v0,0x8000
                -self
80021328:	1022000d 	beq	at,v0,80021360 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h70082d581f30ecffE+0x70>
8002132c:	00000000 	nop
80021330:	080084d2 	j	80021348 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h70082d581f30ecffE+0x58>
80021334:	00000000 	nop
            }
        }
80021338:	8fa20014 	lw	v0,20(sp)
8002133c:	27bd0020 	addiu	sp,sp,32
80021340:	03e00008 	jr	ra
80021344:	00000000 	nop
80021348:	8fa10010 	lw	at,16(sp)
8002134c:	24020000 	li	v0,0
                -self
80021350:	00010823 	negu	at,at
80021354:	afa10014 	sw	at,20(sp)
            if self.is_negative() {
80021358:	080084ce 	j	80021338 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h70082d581f30ecffE+0x48>
8002135c:	00000000 	nop
                -self
80021360:	3c018105 	lui	at,0x8105
80021364:	2424e444 	addiu	a0,at,-7100
80021368:	0c01242b 	jal	800490ac <_ZN4core9panicking11panic_const24panic_const_neg_overflow17h933ac1df2ff681f7E>
8002136c:	00000000 	nop

80021370 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17hf3e01b5f6dbf30e3E>:
        #[stable(feature = "rust1", since = "1.0.0")]
        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline]
        pub const fn checked_add(self, rhs: Self) -> Option<Self> {
80021370:	27bdffc8 	addiu	sp,sp,-56
80021374:	afa40010 	sw	a0,16(sp)
80021378:	afa50014 	sw	a1,20(sp)
8002137c:	afa40028 	sw	a0,40(sp)
80021380:	afa5002c 	sw	a1,44(sp)
        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline(always)]
        pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
            let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
80021384:	00851021 	addu	v0,a0,a1
80021388:	0044082b 	sltu	at,v0,a0
8002138c:	afa20030 	sw	v0,48(sp)
80021390:	a3a10037 	sb	at,55(sp)
            (a as Self, b)
80021394:	afa20020 	sw	v0,32(sp)
80021398:	a3a10024 	sb	at,36(sp)
        }
8002139c:	8fa20020 	lw	v0,32(sp)
800213a0:	afa20004 	sw	v0,4(sp)
800213a4:	93a10024 	lbu	at,36(sp)
            let (a, b) = self.overflowing_add(rhs);
800213a8:	afa20018 	sw	v0,24(sp)
800213ac:	30210001 	andi	at,at,0x1
800213b0:	a3a1001e 	sb	at,30(sp)
            if unlikely!(b) { None } else { Some(a) }
800213b4:	a3a1001f 	sb	at,31(sp)
800213b8:	93a1001f 	lbu	at,31(sp)
800213bc:	30210001 	andi	at,at,0x1
800213c0:	14200009 	bnez	at,800213e8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17hf3e01b5f6dbf30e3E+0x78>
800213c4:	00000000 	nop
800213c8:	080084f4 	j	800213d0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17hf3e01b5f6dbf30e3E+0x60>
800213cc:	00000000 	nop
800213d0:	8fa10004 	lw	at,4(sp)
800213d4:	afa1000c 	sw	at,12(sp)
800213d8:	24010001 	li	at,1
800213dc:	afa10008 	sw	at,8(sp)
800213e0:	080084fd 	j	800213f4 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17hf3e01b5f6dbf30e3E+0x84>
800213e4:	00000000 	nop
800213e8:	afa00008 	sw	zero,8(sp)
800213ec:	080084fd 	j	800213f4 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17hf3e01b5f6dbf30e3E+0x84>
800213f0:	00000000 	nop
        }
800213f4:	8fa20008 	lw	v0,8(sp)
800213f8:	8fa3000c 	lw	v1,12(sp)
800213fc:	27bd0038 	addiu	sp,sp,56
80021400:	03e00008 	jr	ra
80021404:	00000000 	nop

80021408 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h473bdee4731d0bddE>:
        pub const fn checked_div(self, rhs: Self) -> Option<Self> {
80021408:	27bdffe0 	addiu	sp,sp,-32
8002140c:	afa50004 	sw	a1,4(sp)
80021410:	afa40008 	sw	a0,8(sp)
80021414:	afa40014 	sw	a0,20(sp)
80021418:	afa50018 	sw	a1,24(sp)
            if unlikely!(rhs == 0) {
8002141c:	2ca10001 	sltiu	at,a1,1
80021420:	a3a1001f 	sb	at,31(sp)
80021424:	93a1001f 	lbu	at,31(sp)
80021428:	30210001 	andi	at,at,0x1
8002142c:	1420000d 	bnez	at,80021464 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h473bdee4731d0bddE+0x5c>
80021430:	00000000 	nop
80021434:	0800850f 	j	8002143c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h473bdee4731d0bddE+0x34>
80021438:	00000000 	nop
                Some(unsafe { intrinsics::unchecked_div(self, rhs) })
8002143c:	8fa10004 	lw	at,4(sp)
80021440:	8fa20008 	lw	v0,8(sp)
80021444:	0041001b 	divu	zero,v0,at
80021448:	002001f4 	teq	at,zero,0x7
8002144c:	00000812 	mflo	at
80021450:	afa10010 	sw	at,16(sp)
80021454:	24010001 	li	at,1
80021458:	afa1000c 	sw	at,12(sp)
            if unlikely!(rhs == 0) {
8002145c:	0800851c 	j	80021470 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h473bdee4731d0bddE+0x68>
80021460:	00000000 	nop
                None
80021464:	afa0000c 	sw	zero,12(sp)
            if unlikely!(rhs == 0) {
80021468:	0800851c 	j	80021470 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h473bdee4731d0bddE+0x68>
8002146c:	00000000 	nop
        }
80021470:	8fa2000c 	lw	v0,12(sp)
80021474:	8fa30010 	lw	v1,16(sp)
80021478:	27bd0020 	addiu	sp,sp,32
8002147c:	03e00008 	jr	ra
80021480:	00000000 	nop

80021484 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h7aabba6eba87af18E>:
        pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
80021484:	27bdffc8 	addiu	sp,sp,-56
80021488:	afa40010 	sw	a0,16(sp)
8002148c:	afa50014 	sw	a1,20(sp)
80021490:	afa40028 	sw	a0,40(sp)
80021494:	afa5002c 	sw	a1,44(sp)
        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        #[must_use = "this returns the result of the operation, \
                          without modifying the original"]
        #[inline(always)]
        pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
            let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
80021498:	00850019 	multu	a0,a1
8002149c:	00000810 	mfhi	at
800214a0:	0001082b 	sltu	at,zero,at
800214a4:	70851002 	mul	v0,a0,a1
800214a8:	afa20030 	sw	v0,48(sp)
800214ac:	a3a10037 	sb	at,55(sp)
            (a as Self, b)
800214b0:	afa20020 	sw	v0,32(sp)
800214b4:	a3a10024 	sb	at,36(sp)
        }
800214b8:	8fa20020 	lw	v0,32(sp)
800214bc:	afa20004 	sw	v0,4(sp)
800214c0:	93a10024 	lbu	at,36(sp)
            let (a, b) = self.overflowing_mul(rhs);
800214c4:	afa20018 	sw	v0,24(sp)
800214c8:	30210001 	andi	at,at,0x1
800214cc:	a3a1001e 	sb	at,30(sp)
            if unlikely!(b) { None } else { Some(a) }
800214d0:	a3a1001f 	sb	at,31(sp)
800214d4:	93a1001f 	lbu	at,31(sp)
800214d8:	30210001 	andi	at,at,0x1
800214dc:	14200009 	bnez	at,80021504 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h7aabba6eba87af18E+0x80>
800214e0:	00000000 	nop
800214e4:	0800853b 	j	800214ec <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h7aabba6eba87af18E+0x68>
800214e8:	00000000 	nop
800214ec:	8fa10004 	lw	at,4(sp)
800214f0:	afa1000c 	sw	at,12(sp)
800214f4:	24010001 	li	at,1
800214f8:	afa10008 	sw	at,8(sp)
800214fc:	08008544 	j	80021510 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h7aabba6eba87af18E+0x8c>
80021500:	00000000 	nop
80021504:	afa00008 	sw	zero,8(sp)
80021508:	08008544 	j	80021510 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h7aabba6eba87af18E+0x8c>
8002150c:	00000000 	nop
        }
80021510:	8fa20008 	lw	v0,8(sp)
80021514:	8fa3000c 	lw	v1,12(sp)
80021518:	27bd0038 	addiu	sp,sp,56
8002151c:	03e00008 	jr	ra
80021520:	00000000 	nop

80021524 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h0d35fbf6ee606438E>:
        pub const fn abs_diff(self, other: Self) -> Self {
80021524:	27bdffc8 	addiu	sp,sp,-56
80021528:	afbf0034 	sw	ra,52(sp)
8002152c:	afa50018 	sw	a1,24(sp)
80021530:	afa4001c 	sw	a0,28(sp)
80021534:	afa40024 	sw	a0,36(sp)
80021538:	afa50028 	sw	a1,40(sp)
8002153c:	24010001 	li	at,1
            if mem::size_of::<Self>() == 1 {
80021540:	1420000d 	bnez	at,80021578 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h0d35fbf6ee606438E+0x54>
80021544:	00000000 	nop
80021548:	08008554 	j	80021550 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h0d35fbf6ee606438E+0x2c>
8002154c:	00000000 	nop
80021550:	8fa1001c 	lw	at,28(sp)
80021554:	8fa20018 	lw	v0,24(sp)
80021558:	afa1002c 	sw	at,44(sp)
8002155c:	afa20030 	sw	v0,48(sp)
            intrinsics::wrapping_sub(self, rhs)
80021560:	00222023 	subu	a0,at,v0
                (self as i32).wrapping_sub(other as i32).abs() as Self
80021564:	0c0084bc 	jal	800212f0 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h70082d581f30ecffE>
80021568:	00000000 	nop
8002156c:	afa20020 	sw	v0,32(sp)
            if mem::size_of::<Self>() == 1 {
80021570:	08008565 	j	80021594 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h0d35fbf6ee606438E+0x70>
80021574:	00000000 	nop
                if self < other {
80021578:	8fa1001c 	lw	at,28(sp)
8002157c:	8fa20018 	lw	v0,24(sp)
80021580:	0022082b 	sltu	at,at,v0
80021584:	14200011 	bnez	at,800215cc <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h0d35fbf6ee606438E+0xa8>
80021588:	00000000 	nop
8002158c:	0800856a 	j	800215a8 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h0d35fbf6ee606438E+0x84>
80021590:	00000000 	nop
        }
80021594:	8fa20020 	lw	v0,32(sp)
80021598:	8fbf0034 	lw	ra,52(sp)
8002159c:	27bd0038 	addiu	sp,sp,56
800215a0:	03e00008 	jr	ra
800215a4:	00000000 	nop
                    self - other
800215a8:	8fa1001c 	lw	at,28(sp)
800215ac:	8fa20018 	lw	v0,24(sp)
800215b0:	00221823 	subu	v1,at,v0
800215b4:	afa30014 	sw	v1,20(sp)
800215b8:	0022082b 	sltu	at,at,v0
800215bc:	14200010 	bnez	at,80021600 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h0d35fbf6ee606438E+0xdc>
800215c0:	00000000 	nop
800215c4:	0800857c 	j	800215f0 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h0d35fbf6ee606438E+0xcc>
800215c8:	00000000 	nop
                    other - self
800215cc:	8fa10018 	lw	at,24(sp)
800215d0:	8fa2001c 	lw	v0,28(sp)
800215d4:	00221823 	subu	v1,at,v0
800215d8:	afa30010 	sw	v1,16(sp)
800215dc:	0022082b 	sltu	at,at,v0
800215e0:	1420000f 	bnez	at,80021620 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h0d35fbf6ee606438E+0xfc>
800215e4:	00000000 	nop
800215e8:	08008584 	j	80021610 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h0d35fbf6ee606438E+0xec>
800215ec:	00000000 	nop
                    self - other
800215f0:	8fa10014 	lw	at,20(sp)
800215f4:	afa10020 	sw	at,32(sp)
                if self < other {
800215f8:	08008565 	j	80021594 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h0d35fbf6ee606438E+0x70>
800215fc:	00000000 	nop
                    self - other
80021600:	3c018105 	lui	at,0x8105
80021604:	2424e454 	addiu	a0,at,-7084
80021608:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002160c:	00000000 	nop
                    other - self
80021610:	8fa10010 	lw	at,16(sp)
80021614:	afa10020 	sw	at,32(sp)
                if self < other {
80021618:	08008565 	j	80021594 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h0d35fbf6ee606438E+0x70>
8002161c:	00000000 	nop
                    other - self
80021620:	3c018105 	lui	at,0x8105
80021624:	2424e454 	addiu	a0,at,-7084
80021628:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002162c:	00000000 	nop

80021630 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h33b87ca3a7805b80E>:
        #[rustc_const_stable(feature = "int_roundings1", since = "1.73.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline]
        #[track_caller]
        pub const fn div_ceil(self, rhs: Self) -> Self {
80021630:	27bdffc8 	addiu	sp,sp,-56
80021634:	afa60018 	sw	a2,24(sp)
80021638:	afa5001c 	sw	a1,28(sp)
8002163c:	afa40020 	sw	a0,32(sp)
80021640:	afa40028 	sw	a0,40(sp)
80021644:	afa5002c 	sw	a1,44(sp)
            let d = self / rhs;
80021648:	10a0000e 	beqz	a1,80021684 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h33b87ca3a7805b80E+0x54>
8002164c:	00000000 	nop
80021650:	08008596 	j	80021658 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h33b87ca3a7805b80E+0x28>
80021654:	00000000 	nop
80021658:	8fa1001c 	lw	at,28(sp)
8002165c:	8fa20020 	lw	v0,32(sp)
80021660:	0041001b 	divu	zero,v0,at
80021664:	002001f4 	teq	at,zero,0x7
80021668:	00001012 	mflo	v0
8002166c:	afa20014 	sw	v0,20(sp)
80021670:	afa20030 	sw	v0,48(sp)
            let r = self % rhs;
80021674:	10200010 	beqz	at,800216b8 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h33b87ca3a7805b80E+0x88>
80021678:	00000000 	nop
8002167c:	080085a4 	j	80021690 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h33b87ca3a7805b80E+0x60>
80021680:	00000000 	nop
            let d = self / rhs;
80021684:	8fa40018 	lw	a0,24(sp)
80021688:	0c012455 	jal	80049154 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
8002168c:	00000000 	nop
            let r = self % rhs;
80021690:	8fa1001c 	lw	at,28(sp)
80021694:	8fa20020 	lw	v0,32(sp)
80021698:	0041001b 	divu	zero,v0,at
8002169c:	002001f4 	teq	at,zero,0x7
800216a0:	00000810 	mfhi	at
800216a4:	afa10034 	sw	at,52(sp)
            if r > 0 && rhs > 0 {
800216a8:	1420000a 	bnez	at,800216d4 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h33b87ca3a7805b80E+0xa4>
800216ac:	00000000 	nop
800216b0:	080085b1 	j	800216c4 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h33b87ca3a7805b80E+0x94>
800216b4:	00000000 	nop
            let r = self % rhs;
800216b8:	8fa40018 	lw	a0,24(sp)
800216bc:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
800216c0:	00000000 	nop
                d + 1
            } else {
                d
800216c4:	8fa10014 	lw	at,20(sp)
800216c8:	afa10024 	sw	at,36(sp)
            if r > 0 && rhs > 0 {
800216cc:	080085c1 	j	80021704 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h33b87ca3a7805b80E+0xd4>
800216d0:	00000000 	nop
800216d4:	8fa1001c 	lw	at,28(sp)
800216d8:	1020fffa 	beqz	at,800216c4 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h33b87ca3a7805b80E+0x94>
800216dc:	00000000 	nop
800216e0:	080085ba 	j	800216e8 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h33b87ca3a7805b80E+0xb8>
800216e4:	00000000 	nop
                d + 1
800216e8:	8fa10014 	lw	at,20(sp)
800216ec:	24210001 	addiu	at,at,1
800216f0:	afa10010 	sw	at,16(sp)
800216f4:	1020000b 	beqz	at,80021724 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h33b87ca3a7805b80E+0xf4>
800216f8:	00000000 	nop
800216fc:	080085c5 	j	80021714 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h33b87ca3a7805b80E+0xe4>
80021700:	00000000 	nop
            }
        }
80021704:	8fa20024 	lw	v0,36(sp)
80021708:	27bd0038 	addiu	sp,sp,56
8002170c:	03e00008 	jr	ra
80021710:	00000000 	nop
                d + 1
80021714:	8fa10010 	lw	at,16(sp)
80021718:	afa10024 	sw	at,36(sp)
            if r > 0 && rhs > 0 {
8002171c:	080085c1 	j	80021704 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h33b87ca3a7805b80E+0xd4>
80021720:	00000000 	nop
                d + 1
80021724:	8fa40018 	lw	a0,24(sp)
80021728:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002172c:	00000000 	nop

80021730 <_ZN4core3ops8function6FnOnce9call_once17h27a337e0a823b448E>:
    #[stable(feature = "fn_once_output", since = "1.12.0")]
    type Output;

    /// Performs the call operation.
    #[unstable(feature = "fn_traits", issue = "29625")]
    extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
80021730:	27bdffe0 	addiu	sp,sp,-32
80021734:	afbf001c 	sw	ra,28(sp)
80021738:	afa40010 	sw	a0,16(sp)
8002173c:	afa40014 	sw	a0,20(sp)

lazy_static! {
    pub static ref ENV_LIST: Spinlock<Vec<Env>> = Spinlock::new(Vec::with_capacity(NENV));
    pub static ref CUR_ENV: Spinlock<Option<EnvIndex>> = Spinlock::new(None);
    pub static ref ENV_FREE_LIST: Spinlock<DoubleLinkedList> =
        Spinlock::new(DoubleLinkedList::new());
80021740:	0c00d47f 	jal	800351fc <_ZN8mos_65024util16DoubleLinkedList3new17he553f0105c89739dE>
80021744:	00000000 	nop
80021748:	8fa40010 	lw	a0,16(sp)
8002174c:	00402825 	move	a1,v0
80021750:	00603025 	move	a2,v1
80021754:	0c00a017 	jal	8002805c <_ZN4sync4spin17Spinlock$LT$T$GT$3new17hb0fa3ee8a9cca089E>
80021758:	00000000 	nop
8002175c:	8fa20014 	lw	v0,20(sp)
80021760:	8fbf001c 	lw	ra,28(sp)
80021764:	27bd0020 	addiu	sp,sp,32
80021768:	03e00008 	jr	ra
8002176c:	00000000 	nop

80021770 <_ZN4core3ops8function6FnOnce9call_once17h40c79c36e78574d3E>:
80021770:	27bdffe0 	addiu	sp,sp,-32
80021774:	afbf001c 	sw	ra,28(sp)
80021778:	00800825 	move	at,a0
8002177c:	afa10014 	sw	at,20(sp)
80021780:	24050000 	li	a1,0
    pub static ref ENV_SCHED_LIST: Spinlock<DoubleLinkedList> =
        Spinlock::new(DoubleLinkedList::new());
    static ref ASID_BITMAP: Spinlock<Box<[u32; NASID / 32]>> =
        Spinlock::new(Box::new([0; NASID / 32]));
    static ref NEXT_ALLOC_ENV_ID: Spinlock<usize> = Spinlock::new(0);
80021784:	0c00e1b6 	jal	800386d8 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17hf480a4bd2a3353baE>
80021788:	00000000 	nop
8002178c:	8fa20014 	lw	v0,20(sp)
80021790:	8fbf001c 	lw	ra,28(sp)
80021794:	27bd0020 	addiu	sp,sp,32
80021798:	03e00008 	jr	ra
8002179c:	00000000 	nop

800217a0 <_ZN4core3ops8function6FnOnce9call_once17h583cea2a0a2f4f0dE>:
800217a0:	27bdffd0 	addiu	sp,sp,-48
800217a4:	afbf002c 	sw	ra,44(sp)
800217a8:	afa40010 	sw	a0,16(sp)
800217ac:	afa40018 	sw	a0,24(sp)
800217b0:	27a40020 	addiu	a0,sp,32
800217b4:	afa40014 	sw	a0,20(sp)
        }
    }
}

lazy_static! {
    pub static ref PAGES: Spinlock<Vec<Page>> = Spinlock::new(Vec::new());
800217b8:	0c00a29b 	jal	80028a6c <_ZN5alloc3vec12Vec$LT$T$GT$3new17h46fb7808c2195195E>
800217bc:	00000000 	nop
800217c0:	8fa40010 	lw	a0,16(sp)
800217c4:	8fa50014 	lw	a1,20(sp)
800217c8:	0c009fe7 	jal	80027f9c <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h5343ed1da1e3aa48E>
800217cc:	00000000 	nop
800217d0:	8fa20018 	lw	v0,24(sp)
800217d4:	8fbf002c 	lw	ra,44(sp)
800217d8:	27bd0030 	addiu	sp,sp,48
800217dc:	03e00008 	jr	ra
800217e0:	00000000 	nop

800217e4 <_ZN4core3ops8function6FnOnce9call_once17h5abed36604560700E>:
800217e4:	27bdffd8 	addiu	sp,sp,-40
800217e8:	afbf0024 	sw	ra,36(sp)
800217ec:	00800825 	move	at,a0
800217f0:	afa10014 	sw	at,20(sp)
    pub static ref CUR_ENV: Spinlock<Option<EnvIndex>> = Spinlock::new(None);
800217f4:	afa0001c 	sw	zero,28(sp)
800217f8:	8fa5001c 	lw	a1,28(sp)
800217fc:	8fa60020 	lw	a2,32(sp)
80021800:	0c009fc6 	jal	80027f18 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h3d84a9a41551445cE>
80021804:	00000000 	nop
80021808:	8fa20014 	lw	v0,20(sp)
8002180c:	8fbf0024 	lw	ra,36(sp)
80021810:	27bd0028 	addiu	sp,sp,40
80021814:	03e00008 	jr	ra
80021818:	00000000 	nop

8002181c <_ZN4core3ops8function6FnOnce9call_once17h7d06aec8dda95887E>:
8002181c:	27bdffc0 	addiu	sp,sp,-64
80021820:	afbf003c 	sw	ra,60(sp)
80021824:	afa40010 	sw	a0,16(sp)
80021828:	afa40014 	sw	a0,20(sp)
        Spinlock::new(Box::new([0; NASID / 32]));
8002182c:	afa00038 	sw	zero,56(sp)
80021830:	afa00034 	sw	zero,52(sp)
80021834:	afa00030 	sw	zero,48(sp)
80021838:	afa0002c 	sw	zero,44(sp)
8002183c:	afa00028 	sw	zero,40(sp)
80021840:	afa00024 	sw	zero,36(sp)
80021844:	afa00020 	sw	zero,32(sp)
80021848:	afa0001c 	sw	zero,28(sp)
8002184c:	24040020 	li	a0,32
80021850:	24050004 	li	a1,4
    #[stable(feature = "rust1", since = "1.0.0")]
    #[must_use]
    #[rustc_diagnostic_item = "box_new"]
    pub fn new(x: T) -> Self {
        #[rustc_box]
        Box::new(x)
80021854:	0c00a3a5 	jal	80028e94 <_ZN5alloc5alloc15exchange_malloc17h1392ccc4678b1d28E>
80021858:	00000000 	nop
8002185c:	8fa40010 	lw	a0,16(sp)
80021860:	00402825 	move	a1,v0
80021864:	8fa10038 	lw	at,56(sp)
80021868:	aca1001c 	sw	at,28(a1)
8002186c:	8fa10034 	lw	at,52(sp)
80021870:	aca10018 	sw	at,24(a1)
80021874:	8fa10030 	lw	at,48(sp)
80021878:	aca10014 	sw	at,20(a1)
8002187c:	8fa1002c 	lw	at,44(sp)
80021880:	aca10010 	sw	at,16(a1)
80021884:	8fa10028 	lw	at,40(sp)
80021888:	aca1000c 	sw	at,12(a1)
8002188c:	8fa10024 	lw	at,36(sp)
80021890:	aca10008 	sw	at,8(a1)
80021894:	8fa10020 	lw	at,32(sp)
80021898:	aca10004 	sw	at,4(a1)
8002189c:	8fa1001c 	lw	at,28(sp)
800218a0:	aca10000 	sw	at,0(a1)
800218a4:	0c00a038 	jal	800280e0 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17hdd67f4709cd887c8E>
800218a8:	00000000 	nop
800218ac:	8fa20014 	lw	v0,20(sp)
800218b0:	8fbf003c 	lw	ra,60(sp)
800218b4:	27bd0040 	addiu	sp,sp,64
800218b8:	03e00008 	jr	ra
800218bc:	00000000 	nop

800218c0 <_ZN4core3ops8function6FnOnce9call_once17h88430c379661bd7bE>:
800218c0:	27bdffd0 	addiu	sp,sp,-48
800218c4:	afbf002c 	sw	ra,44(sp)
800218c8:	afa40010 	sw	a0,16(sp)
800218cc:	afa40018 	sw	a0,24(sp)
800218d0:	27a40020 	addiu	a0,sp,32
800218d4:	afa40014 	sw	a0,20(sp)
800218d8:	24050400 	li	a1,1024
    pub static ref ENV_LIST: Spinlock<Vec<Env>> = Spinlock::new(Vec::with_capacity(NENV));
800218dc:	0c00a288 	jal	80028a20 <_ZN5alloc3vec12Vec$LT$T$GT$13with_capacity17h4cf7e88b602a5b42E>
800218e0:	00000000 	nop
800218e4:	8fa40010 	lw	a0,16(sp)
800218e8:	8fa50014 	lw	a1,20(sp)
800218ec:	0c009f8b 	jal	80027e2c <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h03838b86e5c05a01E>
800218f0:	00000000 	nop
800218f4:	8fa20018 	lw	v0,24(sp)
800218f8:	8fbf002c 	lw	ra,44(sp)
800218fc:	27bd0030 	addiu	sp,sp,48
80021900:	03e00008 	jr	ra
80021904:	00000000 	nop

80021908 <_ZN4core3ops8function6FnOnce9call_once17h9160c5964e0a8fa7E>:
80021908:	27bdffc8 	addiu	sp,sp,-56
8002190c:	afbf0034 	sw	ra,52(sp)
80021910:	afa40014 	sw	a0,20(sp)
80021914:	afa40018 	sw	a0,24(sp)
        self.base.add(MALTA_SERIAL_DATA).read_volatile()
    }
}

lazy_static! {
    pub static ref NS16550A: Ns16550a = Ns16550a::new(KSEG1.add(MALTA_SERIAL_BASE), 0);
80021918:	3c018105 	lui	at,0x8105
8002191c:	8c21f174 	lw	at,-3724(at)
80021920:	afa10024 	sw	at,36(sp)
80021924:	8fa10024 	lw	at,36(sp)
80021928:	afa10028 	sw	at,40(sp)
8002192c:	8fa40028 	lw	a0,40(sp)
80021930:	3c011800 	lui	at,0x1800
80021934:	342503f8 	ori	a1,at,0x3f8
80021938:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
8002193c:	00000000 	nop
80021940:	8fa40014 	lw	a0,20(sp)
80021944:	afa2002c 	sw	v0,44(sp)
80021948:	8fa1002c 	lw	at,44(sp)
8002194c:	afa10020 	sw	at,32(sp)
80021950:	8fa10020 	lw	at,32(sp)
80021954:	afa10030 	sw	at,48(sp)
80021958:	8fa50030 	lw	a1,48(sp)
8002195c:	24060000 	li	a2,0
80021960:	0c00adc2 	jal	8002b708 <_ZN8mos_65023dev4uart8Ns16550a3new17hccf97b46c8765e3aE>
80021964:	00000000 	nop
80021968:	8fa20018 	lw	v0,24(sp)
8002196c:	8fbf0034 	lw	ra,52(sp)
80021970:	27bd0038 	addiu	sp,sp,56
80021974:	03e00008 	jr	ra
80021978:	00000000 	nop

8002197c <_ZN4core3ops8function6FnOnce9call_once17haad3cc0b0a71d700E>:
8002197c:	27bdffe0 	addiu	sp,sp,-32
80021980:	afbf001c 	sw	ra,28(sp)
80021984:	afa40010 	sw	a0,16(sp)
80021988:	afa40014 	sw	a0,20(sp)
        Spinlock::new(DoubleLinkedList::new());
8002198c:	0c00d47f 	jal	800351fc <_ZN8mos_65024util16DoubleLinkedList3new17he553f0105c89739dE>
80021990:	00000000 	nop
80021994:	8fa40010 	lw	a0,16(sp)
80021998:	00402825 	move	a1,v0
8002199c:	00603025 	move	a2,v1
800219a0:	0c00a017 	jal	8002805c <_ZN4sync4spin17Spinlock$LT$T$GT$3new17hb0fa3ee8a9cca089E>
800219a4:	00000000 	nop
800219a8:	8fa20014 	lw	v0,20(sp)
800219ac:	8fbf001c 	lw	ra,28(sp)
800219b0:	27bd0020 	addiu	sp,sp,32
800219b4:	03e00008 	jr	ra
800219b8:	00000000 	nop

800219bc <_ZN4core3ops8function6FnOnce9call_once17hb529e93ef265a683E>:
800219bc:	27bdffe0 	addiu	sp,sp,-32
800219c0:	afbf001c 	sw	ra,28(sp)
800219c4:	afa40010 	sw	a0,16(sp)
800219c8:	afa40014 	sw	a0,20(sp)
    static ref PAGE_LIST: Spinlock<DoubleLinkedList> = Spinlock::new(DoubleLinkedList::new());
800219cc:	0c00d47f 	jal	800351fc <_ZN8mos_65024util16DoubleLinkedList3new17he553f0105c89739dE>
800219d0:	00000000 	nop
800219d4:	8fa40010 	lw	a0,16(sp)
800219d8:	00402825 	move	a1,v0
800219dc:	00603025 	move	a2,v1
800219e0:	0c00a017 	jal	8002805c <_ZN4sync4spin17Spinlock$LT$T$GT$3new17hb0fa3ee8a9cca089E>
800219e4:	00000000 	nop
800219e8:	8fa20014 	lw	v0,20(sp)
800219ec:	8fbf001c 	lw	ra,28(sp)
800219f0:	27bd0020 	addiu	sp,sp,32
800219f4:	03e00008 	jr	ra
800219f8:	00000000 	nop

800219fc <_ZN4core3ops8function6FnOnce9call_once17hd396e9a1ae475273E>:
800219fc:	27bdffe0 	addiu	sp,sp,-32
80021a00:	afbf001c 	sw	ra,28(sp)
use lazy_static::lazy_static;
use sync::spin::Spinlock;
pub struct Stdout;

lazy_static! {
    static ref STDOUT: Spinlock<Stdout> = Spinlock::new(Stdout {});
80021a04:	0c00a008 	jal	80028020 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h95f04facee59cb93E>
80021a08:	00000000 	nop
80021a0c:	a3a2001b 	sb	v0,27(sp)
80021a10:	93a1001b 	lbu	at,27(sp)
80021a14:	a3a1001a 	sb	at,26(sp)
    (@TAIL, $N:ident : $T:ty = $e:expr) => {
        impl $crate::__Deref for $N {
            type Target = $T;
            fn deref(&self) -> &$T {
                #[inline(always)]
                fn __static_ref_initialize() -> $T { $e }
80021a18:	93a1001a 	lbu	at,26(sp)
80021a1c:	a3a10019 	sb	at,25(sp)
80021a20:	93a10019 	lbu	at,25(sp)
80021a24:	a3a10017 	sb	at,23(sp)
80021a28:	93a20017 	lbu	v0,23(sp)
80021a2c:	8fbf001c 	lw	ra,28(sp)
80021a30:	27bd0020 	addiu	sp,sp,32
80021a34:	03e00008 	jr	ra
80021a38:	00000000 	nop

80021a3c <_ZN4core3ops8function6FnOnce9call_once17he563ebe18a5fea93E>:
80021a3c:	27bdd000 	addiu	sp,sp,-12288
80021a40:	afbf2ffc 	sw	ra,12284(sp)
80021a44:	afbe2ff8 	sw	s8,12280(sp)
80021a48:	03a0f025 	move	s8,sp
80021a4c:	2401f000 	li	at,-4096
80021a50:	03a1e824 	and	sp,sp,at
80021a54:	afa40ff0 	sw	a0,4080(sp)
80021a58:	afa40ff8 	sw	a0,4088(sp)
80021a5c:	27a41000 	addiu	a0,sp,4096
80021a60:	afa40fe8 	sw	a0,4072(sp)
    static ref PRE_PGTABLE: Spinlock<Box<Pgtable>> = Spinlock::new(Box::new(Pgtable::new()));
80021a64:	0c00b1b6 	jal	8002c6d8 <_ZN8mos_65022mm7pgtable7Pgtable3new17h89f38b321e07b39cE>
80021a68:	00000000 	nop
80021a6c:	24051000 	li	a1,4096
80021a70:	afa50fec 	sw	a1,4076(sp)
80021a74:	00a02025 	move	a0,a1
80021a78:	0c00a3a5 	jal	80028e94 <_ZN5alloc5alloc15exchange_malloc17h1392ccc4678b1d28E>
80021a7c:	00000000 	nop
80021a80:	8fa50fe8 	lw	a1,4072(sp)
80021a84:	8fa60fec 	lw	a2,4076(sp)
80021a88:	00402025 	move	a0,v0
80021a8c:	afa40ff4 	sw	a0,4084(sp)
80021a90:	0c00db4c 	jal	80036d30 <memcpy>
80021a94:	00000000 	nop
80021a98:	8fa40ff0 	lw	a0,4080(sp)
80021a9c:	8fa50ff4 	lw	a1,4084(sp)
80021aa0:	0c009fac 	jal	80027eb0 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h1e057bf7fb8fcc6cE>
80021aa4:	00000000 	nop
80021aa8:	8fa20ff8 	lw	v0,4088(sp)
80021aac:	03c0e825 	move	sp,s8
80021ab0:	8fbe2ff8 	lw	s8,12280(sp)
80021ab4:	8fbf2ffc 	lw	ra,12284(sp)
80021ab8:	27bd3000 	addiu	sp,sp,12288
80021abc:	03e00008 	jr	ra
80021ac0:	00000000 	nop

80021ac4 <_ZN4core3ptr100drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$17h782edfc004453577E>:
/// ```
#[stable(feature = "drop_in_place", since = "1.8.0")]
#[lang = "drop_in_place"]
#[allow(unconditional_recursion)]
#[rustc_diagnostic_item = "ptr_drop_in_place"]
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80021ac4:	27bdffe8 	addiu	sp,sp,-24
80021ac8:	afbf0014 	sw	ra,20(sp)
80021acc:	afa40010 	sw	a0,16(sp)
80021ad0:	0c008c71 	jal	800231c4 <_ZN4core3ptr70drop_in_place$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$17ha27294674f2d85aaE>
80021ad4:	00000000 	nop
80021ad8:	8fbf0014 	lw	ra,20(sp)
80021adc:	27bd0018 	addiu	sp,sp,24
80021ae0:	03e00008 	jr	ra
80021ae4:	00000000 	nop

80021ae8 <_ZN4core3ptr101drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17h9a20e3346397bf3eE>:
80021ae8:	27bdffe8 	addiu	sp,sp,-24
80021aec:	afbf0014 	sw	ra,20(sp)
80021af0:	afa40010 	sw	a0,16(sp)
80021af4:	0c00abb7 	jal	8002aedc <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17haa10a6ce16c7beedE>
80021af8:	00000000 	nop
80021afc:	8fbf0014 	lw	ra,20(sp)
80021b00:	27bd0018 	addiu	sp,sp,24
80021b04:	03e00008 	jr	ra
80021b08:	00000000 	nop

80021b0c <_ZN4core3ptr103drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$17h5accd6e7030a0657E>:
80021b0c:	27bdffe8 	addiu	sp,sp,-24
80021b10:	afbf0014 	sw	ra,20(sp)
80021b14:	afa40010 	sw	a0,16(sp)
80021b18:	0c00aba8 	jal	8002aea0 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h6f07e3cfa15af8e7E>
80021b1c:	00000000 	nop
80021b20:	8fbf0014 	lw	ra,20(sp)
80021b24:	27bd0018 	addiu	sp,sp,24
80021b28:	03e00008 	jr	ra
80021b2c:	00000000 	nop

80021b30 <_ZN4core3ptr104drop_in_place$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$17h249d5f178b92a790E>:
80021b30:	27bdffe8 	addiu	sp,sp,-24
80021b34:	afbf0014 	sw	ra,20(sp)
80021b38:	afa40010 	sw	a0,16(sp)
80021b3c:	0c0086d5 	jal	80021b54 <_ZN4core3ptr106drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$17h9d3ff48f1bf5cbccE>
80021b40:	00000000 	nop
80021b44:	8fbf0014 	lw	ra,20(sp)
80021b48:	27bd0018 	addiu	sp,sp,24
80021b4c:	03e00008 	jr	ra
80021b50:	00000000 	nop

80021b54 <_ZN4core3ptr106drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$17h9d3ff48f1bf5cbccE>:
80021b54:	27bdffe8 	addiu	sp,sp,-24
80021b58:	afbf0014 	sw	ra,20(sp)
80021b5c:	afa40010 	sw	a0,16(sp)
80021b60:	0c008cb2 	jal	800232c8 <_ZN4core3ptr76drop_in_place$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$17hb5d8d37fe3972aa7E>
80021b64:	00000000 	nop
80021b68:	8fbf0014 	lw	ra,20(sp)
80021b6c:	27bd0018 	addiu	sp,sp,24
80021b70:	03e00008 	jr	ra
80021b74:	00000000 	nop

80021b78 <_ZN4core3ptr109drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$$GT$17hf234cea20df3b98dE>:
80021b78:	27bdffe0 	addiu	sp,sp,-32
80021b7c:	afbf001c 	sw	ra,28(sp)
80021b80:	afa40014 	sw	a0,20(sp)
80021b84:	afa40018 	sw	a0,24(sp)
80021b88:	8c810000 	lw	at,0(a0)
80021b8c:	14200007 	bnez	at,80021bac <_ZN4core3ptr109drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$$GT$17hf234cea20df3b98dE+0x34>
80021b90:	00000000 	nop
80021b94:	080086e7 	j	80021b9c <_ZN4core3ptr109drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$$GT$17hf234cea20df3b98dE+0x24>
80021b98:	00000000 	nop
80021b9c:	8fbf001c 	lw	ra,28(sp)
80021ba0:	27bd0020 	addiu	sp,sp,32
80021ba4:	03e00008 	jr	ra
80021ba8:	00000000 	nop
80021bac:	8fa10014 	lw	at,20(sp)
80021bb0:	24240004 	addiu	a0,at,4
80021bb4:	0c008ced 	jal	800233b4 <_ZN4core3ptr81drop_in_place$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h7dd3cf384c6b64a9E>
80021bb8:	00000000 	nop
80021bbc:	080086e7 	j	80021b9c <_ZN4core3ptr109drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$$GT$17hf234cea20df3b98dE+0x24>
80021bc0:	00000000 	nop

80021bc4 <_ZN4core3ptr109drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$17h346a7ec989ca5186E>:
80021bc4:	27bdffe8 	addiu	sp,sp,-24
80021bc8:	afbf0014 	sw	ra,20(sp)
80021bcc:	afa40010 	sw	a0,16(sp)
80021bd0:	0c00abe3 	jal	8002af8c <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17heb7dad5803678a3dE>
80021bd4:	00000000 	nop
80021bd8:	8fbf0014 	lw	ra,20(sp)
80021bdc:	27bd0018 	addiu	sp,sp,24
80021be0:	03e00008 	jr	ra
80021be4:	00000000 	nop

80021be8 <_ZN4core3ptr119drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$$GT$17he02a00022a1e7e34E>:
80021be8:	27bdffe0 	addiu	sp,sp,-32
80021bec:	afbf001c 	sw	ra,28(sp)
80021bf0:	afa40014 	sw	a0,20(sp)
80021bf4:	afa40018 	sw	a0,24(sp)
80021bf8:	8c810000 	lw	at,0(a0)
80021bfc:	14200007 	bnez	at,80021c1c <_ZN4core3ptr119drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$$GT$17he02a00022a1e7e34E+0x34>
80021c00:	00000000 	nop
80021c04:	08008703 	j	80021c0c <_ZN4core3ptr119drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$$GT$17he02a00022a1e7e34E+0x24>
80021c08:	00000000 	nop
80021c0c:	8fbf001c 	lw	ra,28(sp)
80021c10:	27bd0020 	addiu	sp,sp,32
80021c14:	03e00008 	jr	ra
80021c18:	00000000 	nop
80021c1c:	8fa10014 	lw	at,20(sp)
80021c20:	24240004 	addiu	a0,at,4
80021c24:	0c008e06 	jal	80023818 <_ZN4core3ptr91drop_in_place$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17he75e188b59ecf565E>
80021c28:	00000000 	nop
80021c2c:	08008703 	j	80021c0c <_ZN4core3ptr119drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$$GT$17he02a00022a1e7e34E+0x24>
80021c30:	00000000 	nop

80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>:
80021c34:	27bdffe0 	addiu	sp,sp,-32
80021c38:	afbf001c 	sw	ra,28(sp)
80021c3c:	afa40014 	sw	a0,20(sp)
80021c40:	afa40018 	sw	a0,24(sp)
80021c44:	8c810000 	lw	at,0(a0)
80021c48:	14200007 	bnez	at,80021c68 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E+0x34>
80021c4c:	00000000 	nop
80021c50:	08008716 	j	80021c58 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E+0x24>
80021c54:	00000000 	nop
80021c58:	8fbf001c 	lw	ra,28(sp)
80021c5c:	27bd0020 	addiu	sp,sp,32
80021c60:	03e00008 	jr	ra
80021c64:	00000000 	nop
80021c68:	8fa40014 	lw	a0,20(sp)
80021c6c:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
80021c70:	00000000 	nop
80021c74:	08008716 	j	80021c58 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E+0x24>
80021c78:	00000000 	nop

80021c7c <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$$GT$17h01c9629ac4dcc992E>:
80021c7c:	27bdffe0 	addiu	sp,sp,-32
80021c80:	afbf001c 	sw	ra,28(sp)
80021c84:	afa40014 	sw	a0,20(sp)
80021c88:	afa40018 	sw	a0,24(sp)
80021c8c:	8c810000 	lw	at,0(a0)
80021c90:	14200007 	bnez	at,80021cb0 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$$GT$17h01c9629ac4dcc992E+0x34>
80021c94:	00000000 	nop
80021c98:	08008728 	j	80021ca0 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$$GT$17h01c9629ac4dcc992E+0x24>
80021c9c:	00000000 	nop
80021ca0:	8fbf001c 	lw	ra,28(sp)
80021ca4:	27bd0020 	addiu	sp,sp,32
80021ca8:	03e00008 	jr	ra
80021cac:	00000000 	nop
80021cb0:	8fa10014 	lw	at,20(sp)
80021cb4:	24240004 	addiu	a0,at,4
80021cb8:	0c008e21 	jal	80023884 <_ZN4core3ptr96drop_in_place$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17hc5893447d9b617eaE>
80021cbc:	00000000 	nop
80021cc0:	08008728 	j	80021ca0 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$$GT$17h01c9629ac4dcc992E+0x24>
80021cc4:	00000000 	nop

80021cc8 <_ZN4core3ptr126drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$$GT$17h333edefbed725738E>:
80021cc8:	27bdffe0 	addiu	sp,sp,-32
80021ccc:	afbf001c 	sw	ra,28(sp)
80021cd0:	afa40014 	sw	a0,20(sp)
80021cd4:	afa40018 	sw	a0,24(sp)
80021cd8:	8c810000 	lw	at,0(a0)
80021cdc:	14200007 	bnez	at,80021cfc <_ZN4core3ptr126drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$$GT$17h333edefbed725738E+0x34>
80021ce0:	00000000 	nop
80021ce4:	0800873b 	j	80021cec <_ZN4core3ptr126drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$$GT$17h333edefbed725738E+0x24>
80021ce8:	00000000 	nop
80021cec:	8fbf001c 	lw	ra,28(sp)
80021cf0:	27bd0020 	addiu	sp,sp,32
80021cf4:	03e00008 	jr	ra
80021cf8:	00000000 	nop
80021cfc:	8fa10014 	lw	at,20(sp)
80021d00:	24240004 	addiu	a0,at,4
80021d04:	0c008e3c 	jal	800238f0 <_ZN4core3ptr98drop_in_place$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$17hc54ba020a54e6bdcE>
80021d08:	00000000 	nop
80021d0c:	0800873b 	j	80021cec <_ZN4core3ptr126drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$$GT$17h333edefbed725738E+0x24>
80021d10:	00000000 	nop

80021d14 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$$GT$17h85ce9c0c5f7245aaE>:
80021d14:	27bdffe0 	addiu	sp,sp,-32
80021d18:	afbf001c 	sw	ra,28(sp)
80021d1c:	afa40014 	sw	a0,20(sp)
80021d20:	afa40018 	sw	a0,24(sp)
80021d24:	8c810000 	lw	at,0(a0)
80021d28:	14200007 	bnez	at,80021d48 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$$GT$17h85ce9c0c5f7245aaE+0x34>
80021d2c:	00000000 	nop
80021d30:	0800874e 	j	80021d38 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$$GT$17h85ce9c0c5f7245aaE+0x24>
80021d34:	00000000 	nop
80021d38:	8fbf001c 	lw	ra,28(sp)
80021d3c:	27bd0020 	addiu	sp,sp,32
80021d40:	03e00008 	jr	ra
80021d44:	00000000 	nop
80021d48:	8fa10014 	lw	at,20(sp)
80021d4c:	24240004 	addiu	a0,at,4
80021d50:	0c0086cc 	jal	80021b30 <_ZN4core3ptr104drop_in_place$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$17h249d5f178b92a790E>
80021d54:	00000000 	nop
80021d58:	0800874e 	j	80021d38 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$$GT$17h85ce9c0c5f7245aaE+0x24>
80021d5c:	00000000 	nop

80021d60 <_ZN4core3ptr13read_volatile17h190ef4300a716656E>:
/// ```
#[inline]
#[stable(feature = "volatile", since = "1.9.0")]
#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
#[rustc_diagnostic_item = "ptr_read_volatile"]
pub unsafe fn read_volatile<T>(src: *const T) -> T {
80021d60:	27bdffe0 	addiu	sp,sp,-32
80021d64:	afbf001c 	sw	ra,28(sp)
80021d68:	afa40010 	sw	a0,16(sp)
80021d6c:	afa40014 	sw	a0,20(sp)
    // SAFETY: the caller must uphold the safety contract for `volatile_load`.
    unsafe {
        ub_checks::assert_unsafe_precondition!(
80021d70:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80021d74:	00000000 	nop
80021d78:	1440000b 	bnez	v0,80021da8 <_ZN4core3ptr13read_volatile17h190ef4300a716656E+0x48>
80021d7c:	00000000 	nop
80021d80:	08008762 	j	80021d88 <_ZN4core3ptr13read_volatile17h190ef4300a716656E+0x28>
80021d84:	00000000 	nop
            (
                addr: *const () = src as *const (),
                align: usize = align_of::<T>(),
            ) => ub_checks::is_aligned_and_not_null(addr, align)
        );
        intrinsics::volatile_load(src)
80021d88:	8fa10010 	lw	at,16(sp)
80021d8c:	8c210000 	lw	at,0(at)
80021d90:	afa10018 	sw	at,24(sp)
80021d94:	8fa20018 	lw	v0,24(sp)
    }
}
80021d98:	8fbf001c 	lw	ra,28(sp)
80021d9c:	27bd0020 	addiu	sp,sp,32
80021da0:	03e00008 	jr	ra
80021da4:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80021da8:	8fa40010 	lw	a0,16(sp)
80021dac:	24050004 	li	a1,4
80021db0:	0c008788 	jal	80021e20 <_ZN4core3ptr13read_volatile18precondition_check17hd610d5ccc0f6d293E>
80021db4:	00000000 	nop
80021db8:	08008762 	j	80021d88 <_ZN4core3ptr13read_volatile17h190ef4300a716656E+0x28>
80021dbc:	00000000 	nop

80021dc0 <_ZN4core3ptr13read_volatile17h96270a3ce88bb200E>:
pub unsafe fn read_volatile<T>(src: *const T) -> T {
80021dc0:	27bdffe0 	addiu	sp,sp,-32
80021dc4:	afbf001c 	sw	ra,28(sp)
80021dc8:	afa40010 	sw	a0,16(sp)
80021dcc:	afa40014 	sw	a0,20(sp)
        ub_checks::assert_unsafe_precondition!(
80021dd0:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80021dd4:	00000000 	nop
80021dd8:	1440000b 	bnez	v0,80021e08 <_ZN4core3ptr13read_volatile17h96270a3ce88bb200E+0x48>
80021ddc:	00000000 	nop
80021de0:	0800877a 	j	80021de8 <_ZN4core3ptr13read_volatile17h96270a3ce88bb200E+0x28>
80021de4:	00000000 	nop
        intrinsics::volatile_load(src)
80021de8:	8fa10010 	lw	at,16(sp)
80021dec:	94210000 	lhu	at,0(at)
80021df0:	a7a1001a 	sh	at,26(sp)
}
80021df4:	97a2001a 	lhu	v0,26(sp)
80021df8:	8fbf001c 	lw	ra,28(sp)
80021dfc:	27bd0020 	addiu	sp,sp,32
80021e00:	03e00008 	jr	ra
80021e04:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80021e08:	8fa40010 	lw	a0,16(sp)
80021e0c:	24050002 	li	a1,2
80021e10:	0c008788 	jal	80021e20 <_ZN4core3ptr13read_volatile18precondition_check17hd610d5ccc0f6d293E>
80021e14:	00000000 	nop
80021e18:	0800877a 	j	80021de8 <_ZN4core3ptr13read_volatile17h96270a3ce88bb200E+0x28>
80021e1c:	00000000 	nop

80021e20 <_ZN4core3ptr13read_volatile18precondition_check17hd610d5ccc0f6d293E>:
            const fn precondition_check($($name:$ty),*) {
80021e20:	27bdffe0 	addiu	sp,sp,-32
80021e24:	afbf001c 	sw	ra,28(sp)
80021e28:	afa40014 	sw	a0,20(sp)
80021e2c:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80021e30:	0c009884 	jal	80026210 <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E>
80021e34:	00000000 	nop
80021e38:	14400008 	bnez	v0,80021e5c <_ZN4core3ptr13read_volatile18precondition_check17hd610d5ccc0f6d293E+0x3c>
80021e3c:	00000000 	nop
80021e40:	08008792 	j	80021e48 <_ZN4core3ptr13read_volatile18precondition_check17hd610d5ccc0f6d293E+0x28>
80021e44:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80021e48:	3c018105 	lui	at,0x8105
80021e4c:	2424e464 	addiu	a0,at,-7068
80021e50:	2405006e 	li	a1,110
80021e54:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80021e58:	00000000 	nop
            }
80021e5c:	8fbf001c 	lw	ra,28(sp)
80021e60:	27bd0020 	addiu	sp,sp,32
80021e64:	03e00008 	jr	ra
80021e68:	00000000 	nop

80021e6c <_ZN4core3ptr14read_unaligned17h2abecd1ddc5c8f5eE>:
pub const unsafe fn read_unaligned<T>(src: *const T) -> T {
80021e6c:	27bdff60 	addiu	sp,sp,-160
80021e70:	afbf009c 	sw	ra,156(sp)
80021e74:	afa5001c 	sw	a1,28(sp)
80021e78:	afa40020 	sw	a0,32(sp)
80021e7c:	afa40024 	sw	a0,36(sp)
80021e80:	afa50068 	sw	a1,104(sp)
80021e84:	27a10028 	addiu	at,sp,40
80021e88:	afa10078 	sw	at,120(sp)
80021e8c:	afa5006c 	sw	a1,108(sp)
80021e90:	afa10070 	sw	at,112(sp)
80021e94:	24010020 	li	at,32
80021e98:	afa10074 	sw	at,116(sp)
    ub_checks::assert_unsafe_precondition!(
80021e9c:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80021ea0:	00000000 	nop
80021ea4:	1040000e 	beqz	v0,80021ee0 <_ZN4core3ptr14read_unaligned17h2abecd1ddc5c8f5eE+0x74>
80021ea8:	00000000 	nop
80021eac:	080087ad 	j	80021eb4 <_ZN4core3ptr14read_unaligned17h2abecd1ddc5c8f5eE+0x48>
80021eb0:	00000000 	nop
80021eb4:	8fa4001c 	lw	a0,28(sp)
80021eb8:	03a01025 	move	v0,sp
80021ebc:	24010020 	li	at,32
80021ec0:	ac410010 	sw	at,16(v0)
80021ec4:	27a50028 	addiu	a1,sp,40
80021ec8:	24070001 	li	a3,1
80021ecc:	00e03025 	move	a2,a3
80021ed0:	0c0081ee 	jal	800207b8 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17he2c349279c717cc2E>
80021ed4:	00000000 	nop
80021ed8:	080087b8 	j	80021ee0 <_ZN4core3ptr14read_unaligned17h2abecd1ddc5c8f5eE+0x74>
80021edc:	00000000 	nop
80021ee0:	8fa20024 	lw	v0,36(sp)
80021ee4:	8fa30020 	lw	v1,32(sp)
80021ee8:	8fa4001c 	lw	a0,28(sp)
    unsafe { copy_nonoverlapping(src, dst, count) }
80021eec:	8881001f 	lwl	at,31(a0)
80021ef0:	9881001c 	lwr	at,28(a0)
80021ef4:	afa10044 	sw	at,68(sp)
80021ef8:	8881001b 	lwl	at,27(a0)
80021efc:	98810018 	lwr	at,24(a0)
80021f00:	afa10040 	sw	at,64(sp)
80021f04:	88810017 	lwl	at,23(a0)
80021f08:	98810014 	lwr	at,20(a0)
80021f0c:	afa1003c 	sw	at,60(sp)
80021f10:	88810013 	lwl	at,19(a0)
80021f14:	98810010 	lwr	at,16(a0)
80021f18:	afa10038 	sw	at,56(sp)
80021f1c:	8881000f 	lwl	at,15(a0)
80021f20:	9881000c 	lwr	at,12(a0)
80021f24:	afa10034 	sw	at,52(sp)
80021f28:	8881000b 	lwl	at,11(a0)
80021f2c:	98810008 	lwr	at,8(a0)
80021f30:	afa10030 	sw	at,48(sp)
80021f34:	88810007 	lwl	at,7(a0)
80021f38:	98810004 	lwr	at,4(a0)
80021f3c:	afa1002c 	sw	at,44(sp)
80021f40:	88810003 	lwl	at,3(a0)
80021f44:	98810000 	lwr	at,0(a0)
80021f48:	afa10028 	sw	at,40(sp)
        tmp.assume_init()
80021f4c:	8fa10044 	lw	at,68(sp)
80021f50:	afa10064 	sw	at,100(sp)
80021f54:	8fa10040 	lw	at,64(sp)
80021f58:	afa10060 	sw	at,96(sp)
80021f5c:	8fa1003c 	lw	at,60(sp)
80021f60:	afa1005c 	sw	at,92(sp)
80021f64:	8fa10038 	lw	at,56(sp)
80021f68:	afa10058 	sw	at,88(sp)
80021f6c:	8fa10034 	lw	at,52(sp)
80021f70:	afa10054 	sw	at,84(sp)
80021f74:	8fa10030 	lw	at,48(sp)
80021f78:	afa10050 	sw	at,80(sp)
80021f7c:	8fa1002c 	lw	at,44(sp)
80021f80:	afa1004c 	sw	at,76(sp)
80021f84:	8fa10028 	lw	at,40(sp)
80021f88:	afa10048 	sw	at,72(sp)
    pub const unsafe fn assume_init(self) -> T {
        // SAFETY: the caller must guarantee that `self` is initialized.
        // This also means that `self` must be a `value` variant.
        unsafe {
            intrinsics::assert_inhabited::<T>();
            ManuallyDrop::into_inner(self.value)
80021f8c:	8fa10064 	lw	at,100(sp)
80021f90:	afa10098 	sw	at,152(sp)
80021f94:	8fa10060 	lw	at,96(sp)
80021f98:	afa10094 	sw	at,148(sp)
80021f9c:	8fa1005c 	lw	at,92(sp)
80021fa0:	afa10090 	sw	at,144(sp)
80021fa4:	8fa10058 	lw	at,88(sp)
80021fa8:	afa1008c 	sw	at,140(sp)
80021fac:	8fa10054 	lw	at,84(sp)
80021fb0:	afa10088 	sw	at,136(sp)
80021fb4:	8fa10050 	lw	at,80(sp)
80021fb8:	afa10084 	sw	at,132(sp)
80021fbc:	8fa1004c 	lw	at,76(sp)
80021fc0:	afa10080 	sw	at,128(sp)
80021fc4:	8fa10048 	lw	at,72(sp)
80021fc8:	afa1007c 	sw	at,124(sp)
    /// ```
    #[stable(feature = "manually_drop", since = "1.20.0")]
    #[rustc_const_stable(feature = "const_manually_drop", since = "1.32.0")]
    #[inline(always)]
    pub const fn into_inner(slot: ManuallyDrop<T>) -> T {
        slot.value
80021fcc:	8fa10098 	lw	at,152(sp)
80021fd0:	ac61001c 	sw	at,28(v1)
80021fd4:	8fa10094 	lw	at,148(sp)
80021fd8:	ac610018 	sw	at,24(v1)
80021fdc:	8fa10090 	lw	at,144(sp)
80021fe0:	ac610014 	sw	at,20(v1)
80021fe4:	8fa1008c 	lw	at,140(sp)
80021fe8:	ac610010 	sw	at,16(v1)
80021fec:	8fa10088 	lw	at,136(sp)
80021ff0:	ac61000c 	sw	at,12(v1)
80021ff4:	8fa10084 	lw	at,132(sp)
80021ff8:	ac610008 	sw	at,8(v1)
80021ffc:	8fa10080 	lw	at,128(sp)
80022000:	ac610004 	sw	at,4(v1)
80022004:	8fa1007c 	lw	at,124(sp)
80022008:	ac610000 	sw	at,0(v1)
}
8002200c:	8fbf009c 	lw	ra,156(sp)
80022010:	27bd00a0 	addiu	sp,sp,160
80022014:	03e00008 	jr	ra
80022018:	00000000 	nop

8002201c <_ZN4core3ptr14read_unaligned17hc3e2ae47731af399E>:
pub const unsafe fn read_unaligned<T>(src: *const T) -> T {
8002201c:	27bdff28 	addiu	sp,sp,-216
80022020:	afbf00d4 	sw	ra,212(sp)
80022024:	afa50018 	sw	a1,24(sp)
80022028:	afa4001c 	sw	a0,28(sp)
8002202c:	afa40020 	sw	a0,32(sp)
80022030:	afa5008c 	sw	a1,140(sp)
80022034:	27a10024 	addiu	at,sp,36
80022038:	afa1009c 	sw	at,156(sp)
8002203c:	afa50090 	sw	a1,144(sp)
80022040:	afa10094 	sw	at,148(sp)
80022044:	24010034 	li	at,52
80022048:	afa10098 	sw	at,152(sp)
    ub_checks::assert_unsafe_precondition!(
8002204c:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80022050:	00000000 	nop
80022054:	1040000e 	beqz	v0,80022090 <_ZN4core3ptr14read_unaligned17hc3e2ae47731af399E+0x74>
80022058:	00000000 	nop
8002205c:	08008819 	j	80022064 <_ZN4core3ptr14read_unaligned17hc3e2ae47731af399E+0x48>
80022060:	00000000 	nop
80022064:	8fa40018 	lw	a0,24(sp)
80022068:	03a01025 	move	v0,sp
8002206c:	24010034 	li	at,52
80022070:	ac410010 	sw	at,16(v0)
80022074:	27a50024 	addiu	a1,sp,36
80022078:	24070001 	li	a3,1
8002207c:	00e03025 	move	a2,a3
80022080:	0c0081ee 	jal	800207b8 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17he2c349279c717cc2E>
80022084:	00000000 	nop
80022088:	08008824 	j	80022090 <_ZN4core3ptr14read_unaligned17hc3e2ae47731af399E+0x74>
8002208c:	00000000 	nop
80022090:	8fa20020 	lw	v0,32(sp)
80022094:	8fa3001c 	lw	v1,28(sp)
80022098:	8fa40018 	lw	a0,24(sp)
    unsafe { copy_nonoverlapping(src, dst, count) }
8002209c:	88810033 	lwl	at,51(a0)
800220a0:	98810030 	lwr	at,48(a0)
800220a4:	afa10054 	sw	at,84(sp)
800220a8:	8881002f 	lwl	at,47(a0)
800220ac:	9881002c 	lwr	at,44(a0)
800220b0:	afa10050 	sw	at,80(sp)
800220b4:	8881002b 	lwl	at,43(a0)
800220b8:	98810028 	lwr	at,40(a0)
800220bc:	afa1004c 	sw	at,76(sp)
800220c0:	88810027 	lwl	at,39(a0)
800220c4:	98810024 	lwr	at,36(a0)
800220c8:	afa10048 	sw	at,72(sp)
800220cc:	88810023 	lwl	at,35(a0)
800220d0:	98810020 	lwr	at,32(a0)
800220d4:	afa10044 	sw	at,68(sp)
800220d8:	8881001f 	lwl	at,31(a0)
800220dc:	9881001c 	lwr	at,28(a0)
800220e0:	afa10040 	sw	at,64(sp)
800220e4:	8881001b 	lwl	at,27(a0)
800220e8:	98810018 	lwr	at,24(a0)
800220ec:	afa1003c 	sw	at,60(sp)
800220f0:	88810017 	lwl	at,23(a0)
800220f4:	98810014 	lwr	at,20(a0)
800220f8:	afa10038 	sw	at,56(sp)
800220fc:	88810013 	lwl	at,19(a0)
80022100:	98810010 	lwr	at,16(a0)
80022104:	afa10034 	sw	at,52(sp)
80022108:	8881000f 	lwl	at,15(a0)
8002210c:	9881000c 	lwr	at,12(a0)
80022110:	afa10030 	sw	at,48(sp)
80022114:	8881000b 	lwl	at,11(a0)
80022118:	98810008 	lwr	at,8(a0)
8002211c:	afa1002c 	sw	at,44(sp)
80022120:	88810007 	lwl	at,7(a0)
80022124:	98810004 	lwr	at,4(a0)
80022128:	afa10028 	sw	at,40(sp)
8002212c:	88810003 	lwl	at,3(a0)
80022130:	98810000 	lwr	at,0(a0)
80022134:	afa10024 	sw	at,36(sp)
        tmp.assume_init()
80022138:	8fa10054 	lw	at,84(sp)
8002213c:	afa10088 	sw	at,136(sp)
80022140:	8fa10050 	lw	at,80(sp)
80022144:	afa10084 	sw	at,132(sp)
80022148:	8fa1004c 	lw	at,76(sp)
8002214c:	afa10080 	sw	at,128(sp)
80022150:	8fa10048 	lw	at,72(sp)
80022154:	afa1007c 	sw	at,124(sp)
80022158:	8fa10044 	lw	at,68(sp)
8002215c:	afa10078 	sw	at,120(sp)
80022160:	8fa10040 	lw	at,64(sp)
80022164:	afa10074 	sw	at,116(sp)
80022168:	8fa1003c 	lw	at,60(sp)
8002216c:	afa10070 	sw	at,112(sp)
80022170:	8fa10038 	lw	at,56(sp)
80022174:	afa1006c 	sw	at,108(sp)
80022178:	8fa10034 	lw	at,52(sp)
8002217c:	afa10068 	sw	at,104(sp)
80022180:	8fa10030 	lw	at,48(sp)
80022184:	afa10064 	sw	at,100(sp)
80022188:	8fa1002c 	lw	at,44(sp)
8002218c:	afa10060 	sw	at,96(sp)
80022190:	8fa10028 	lw	at,40(sp)
80022194:	afa1005c 	sw	at,92(sp)
80022198:	8fa10024 	lw	at,36(sp)
8002219c:	afa10058 	sw	at,88(sp)
800221a0:	8fa10088 	lw	at,136(sp)
800221a4:	afa100d0 	sw	at,208(sp)
800221a8:	8fa10084 	lw	at,132(sp)
800221ac:	afa100cc 	sw	at,204(sp)
800221b0:	8fa10080 	lw	at,128(sp)
800221b4:	afa100c8 	sw	at,200(sp)
800221b8:	8fa1007c 	lw	at,124(sp)
800221bc:	afa100c4 	sw	at,196(sp)
800221c0:	8fa10078 	lw	at,120(sp)
800221c4:	afa100c0 	sw	at,192(sp)
800221c8:	8fa10074 	lw	at,116(sp)
800221cc:	afa100bc 	sw	at,188(sp)
800221d0:	8fa10070 	lw	at,112(sp)
800221d4:	afa100b8 	sw	at,184(sp)
800221d8:	8fa1006c 	lw	at,108(sp)
800221dc:	afa100b4 	sw	at,180(sp)
800221e0:	8fa10068 	lw	at,104(sp)
800221e4:	afa100b0 	sw	at,176(sp)
800221e8:	8fa10064 	lw	at,100(sp)
800221ec:	afa100ac 	sw	at,172(sp)
800221f0:	8fa10060 	lw	at,96(sp)
800221f4:	afa100a8 	sw	at,168(sp)
800221f8:	8fa1005c 	lw	at,92(sp)
800221fc:	afa100a4 	sw	at,164(sp)
80022200:	8fa10058 	lw	at,88(sp)
80022204:	afa100a0 	sw	at,160(sp)
80022208:	8fa100d0 	lw	at,208(sp)
8002220c:	ac610030 	sw	at,48(v1)
80022210:	8fa100cc 	lw	at,204(sp)
80022214:	ac61002c 	sw	at,44(v1)
80022218:	8fa100c8 	lw	at,200(sp)
8002221c:	ac610028 	sw	at,40(v1)
80022220:	8fa100c4 	lw	at,196(sp)
80022224:	ac610024 	sw	at,36(v1)
80022228:	8fa100c0 	lw	at,192(sp)
8002222c:	ac610020 	sw	at,32(v1)
80022230:	8fa100bc 	lw	at,188(sp)
80022234:	ac61001c 	sw	at,28(v1)
80022238:	8fa100b8 	lw	at,184(sp)
8002223c:	ac610018 	sw	at,24(v1)
80022240:	8fa100b4 	lw	at,180(sp)
80022244:	ac610014 	sw	at,20(v1)
80022248:	8fa100b0 	lw	at,176(sp)
8002224c:	ac610010 	sw	at,16(v1)
80022250:	8fa100ac 	lw	at,172(sp)
80022254:	ac61000c 	sw	at,12(v1)
80022258:	8fa100a8 	lw	at,168(sp)
8002225c:	ac610008 	sw	at,8(v1)
80022260:	8fa100a4 	lw	at,164(sp)
80022264:	ac610004 	sw	at,4(v1)
80022268:	8fa100a0 	lw	at,160(sp)
8002226c:	ac610000 	sw	at,0(v1)
}
80022270:	8fbf00d4 	lw	ra,212(sp)
80022274:	27bd00d8 	addiu	sp,sp,216
80022278:	03e00008 	jr	ra
8002227c:	00000000 	nop

80022280 <_ZN4core3ptr14write_volatile17h370b8971546adc90E>:
/// ```
#[inline]
#[stable(feature = "volatile", since = "1.9.0")]
#[rustc_diagnostic_item = "ptr_write_volatile"]
#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
80022280:	27bdffd8 	addiu	sp,sp,-40
80022284:	afbf0024 	sw	ra,36(sp)
80022288:	afa40014 	sw	a0,20(sp)
8002228c:	00a00825 	move	at,a1
80022290:	afa10018 	sw	at,24(sp)
80022294:	afa4001c 	sw	a0,28(sp)
80022298:	a3a50023 	sb	a1,35(sp)
    // SAFETY: the caller must uphold the safety contract for `volatile_store`.
    unsafe {
        ub_checks::assert_unsafe_precondition!(
8002229c:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
800222a0:	00000000 	nop
800222a4:	1440000a 	bnez	v0,800222d0 <_ZN4core3ptr14write_volatile17h370b8971546adc90E+0x50>
800222a8:	00000000 	nop
800222ac:	080088ad 	j	800222b4 <_ZN4core3ptr14write_volatile17h370b8971546adc90E+0x34>
800222b0:	00000000 	nop
            (
                addr: *mut () = dst as *mut (),
                align: usize = align_of::<T>(),
            ) => ub_checks::is_aligned_and_not_null(addr, align)
        );
        intrinsics::volatile_store(dst, src);
800222b4:	8fa10018 	lw	at,24(sp)
800222b8:	8fa20014 	lw	v0,20(sp)
800222bc:	a0410000 	sb	at,0(v0)
    }
}
800222c0:	8fbf0024 	lw	ra,36(sp)
800222c4:	27bd0028 	addiu	sp,sp,40
800222c8:	03e00008 	jr	ra
800222cc:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800222d0:	8fa40014 	lw	a0,20(sp)
800222d4:	24050001 	li	a1,1
800222d8:	0c008906 	jal	80022418 <_ZN4core3ptr14write_volatile18precondition_check17h462af93c9dcc0b01E>
800222dc:	00000000 	nop
800222e0:	080088ad 	j	800222b4 <_ZN4core3ptr14write_volatile17h370b8971546adc90E+0x34>
800222e4:	00000000 	nop

800222e8 <_ZN4core3ptr14write_volatile17h3f8b8ee93eeaff38E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
800222e8:	27bdffd8 	addiu	sp,sp,-40
800222ec:	afbf0024 	sw	ra,36(sp)
800222f0:	afa40014 	sw	a0,20(sp)
800222f4:	00a00825 	move	at,a1
800222f8:	afa10018 	sw	at,24(sp)
800222fc:	afa4001c 	sw	a0,28(sp)
80022300:	a7a50022 	sh	a1,34(sp)
        ub_checks::assert_unsafe_precondition!(
80022304:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80022308:	00000000 	nop
8002230c:	1440000a 	bnez	v0,80022338 <_ZN4core3ptr14write_volatile17h3f8b8ee93eeaff38E+0x50>
80022310:	00000000 	nop
80022314:	080088c7 	j	8002231c <_ZN4core3ptr14write_volatile17h3f8b8ee93eeaff38E+0x34>
80022318:	00000000 	nop
        intrinsics::volatile_store(dst, src);
8002231c:	8fa10018 	lw	at,24(sp)
80022320:	8fa20014 	lw	v0,20(sp)
80022324:	a4410000 	sh	at,0(v0)
}
80022328:	8fbf0024 	lw	ra,36(sp)
8002232c:	27bd0028 	addiu	sp,sp,40
80022330:	03e00008 	jr	ra
80022334:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022338:	8fa40014 	lw	a0,20(sp)
8002233c:	24050002 	li	a1,2
80022340:	0c008906 	jal	80022418 <_ZN4core3ptr14write_volatile18precondition_check17h462af93c9dcc0b01E>
80022344:	00000000 	nop
80022348:	080088c7 	j	8002231c <_ZN4core3ptr14write_volatile17h3f8b8ee93eeaff38E+0x34>
8002234c:	00000000 	nop

80022350 <_ZN4core3ptr14write_volatile17h7e4c6947dbd2e062E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
80022350:	27bdffd8 	addiu	sp,sp,-40
80022354:	afbf0024 	sw	ra,36(sp)
80022358:	afa50014 	sw	a1,20(sp)
8002235c:	afa40018 	sw	a0,24(sp)
80022360:	afa4001c 	sw	a0,28(sp)
80022364:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80022368:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
8002236c:	00000000 	nop
80022370:	1440000a 	bnez	v0,8002239c <_ZN4core3ptr14write_volatile17h7e4c6947dbd2e062E+0x4c>
80022374:	00000000 	nop
80022378:	080088e0 	j	80022380 <_ZN4core3ptr14write_volatile17h7e4c6947dbd2e062E+0x30>
8002237c:	00000000 	nop
        intrinsics::volatile_store(dst, src);
80022380:	8fa10014 	lw	at,20(sp)
80022384:	8fa20018 	lw	v0,24(sp)
80022388:	ac410000 	sw	at,0(v0)
}
8002238c:	8fbf0024 	lw	ra,36(sp)
80022390:	27bd0028 	addiu	sp,sp,40
80022394:	03e00008 	jr	ra
80022398:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8002239c:	8fa40018 	lw	a0,24(sp)
800223a0:	24050004 	li	a1,4
800223a4:	0c008906 	jal	80022418 <_ZN4core3ptr14write_volatile18precondition_check17h462af93c9dcc0b01E>
800223a8:	00000000 	nop
800223ac:	080088e0 	j	80022380 <_ZN4core3ptr14write_volatile17h7e4c6947dbd2e062E+0x30>
800223b0:	00000000 	nop

800223b4 <_ZN4core3ptr14write_volatile17hac09a9cb33afc568E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
800223b4:	27bdffd8 	addiu	sp,sp,-40
800223b8:	afbf0024 	sw	ra,36(sp)
800223bc:	afa50014 	sw	a1,20(sp)
800223c0:	afa40018 	sw	a0,24(sp)
800223c4:	afa4001c 	sw	a0,28(sp)
800223c8:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
800223cc:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
800223d0:	00000000 	nop
800223d4:	1440000a 	bnez	v0,80022400 <_ZN4core3ptr14write_volatile17hac09a9cb33afc568E+0x4c>
800223d8:	00000000 	nop
800223dc:	080088f9 	j	800223e4 <_ZN4core3ptr14write_volatile17hac09a9cb33afc568E+0x30>
800223e0:	00000000 	nop
        intrinsics::volatile_store(dst, src);
800223e4:	8fa10014 	lw	at,20(sp)
800223e8:	8fa20018 	lw	v0,24(sp)
800223ec:	ac410000 	sw	at,0(v0)
}
800223f0:	8fbf0024 	lw	ra,36(sp)
800223f4:	27bd0028 	addiu	sp,sp,40
800223f8:	03e00008 	jr	ra
800223fc:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022400:	8fa40018 	lw	a0,24(sp)
80022404:	24050004 	li	a1,4
80022408:	0c008906 	jal	80022418 <_ZN4core3ptr14write_volatile18precondition_check17h462af93c9dcc0b01E>
8002240c:	00000000 	nop
80022410:	080088f9 	j	800223e4 <_ZN4core3ptr14write_volatile17hac09a9cb33afc568E+0x30>
80022414:	00000000 	nop

80022418 <_ZN4core3ptr14write_volatile18precondition_check17h462af93c9dcc0b01E>:
            const fn precondition_check($($name:$ty),*) {
80022418:	27bdffe0 	addiu	sp,sp,-32
8002241c:	afbf001c 	sw	ra,28(sp)
80022420:	afa40014 	sw	a0,20(sp)
80022424:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80022428:	0c009884 	jal	80026210 <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E>
8002242c:	00000000 	nop
80022430:	14400008 	bnez	v0,80022454 <_ZN4core3ptr14write_volatile18precondition_check17h462af93c9dcc0b01E+0x3c>
80022434:	00000000 	nop
80022438:	08008910 	j	80022440 <_ZN4core3ptr14write_volatile18precondition_check17h462af93c9dcc0b01E+0x28>
8002243c:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80022440:	3c018105 	lui	at,0x8105
80022444:	2424e4d2 	addiu	a0,at,-6958
80022448:	2405006f 	li	a1,111
8002244c:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80022450:	00000000 	nop
            }
80022454:	8fbf001c 	lw	ra,28(sp)
80022458:	27bd0020 	addiu	sp,sp,32
8002245c:	03e00008 	jr	ra
80022460:	00000000 	nop

80022464 <_ZN4core3ptr20slice_from_raw_parts17h448658fca1a13ca0E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
80022464:	27bdffe0 	addiu	sp,sp,-32
80022468:	afbf001c 	sw	ra,28(sp)
8002246c:	afa40010 	sw	a0,16(sp)
80022470:	afa50014 	sw	a1,20(sp)
80022474:	afa40018 	sw	a0,24(sp)
    from_raw_parts(data.cast(), len)
80022478:	0c008d11 	jal	80023444 <_ZN4core3ptr8metadata14from_raw_parts17h253aeea765640668E>
8002247c:	00000000 	nop
}
80022480:	8fbf001c 	lw	ra,28(sp)
80022484:	27bd0020 	addiu	sp,sp,32
80022488:	03e00008 	jr	ra
8002248c:	00000000 	nop

80022490 <_ZN4core3ptr20slice_from_raw_parts17h900b36b3642184ddE>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
80022490:	27bdffe0 	addiu	sp,sp,-32
80022494:	afbf001c 	sw	ra,28(sp)
80022498:	afa40010 	sw	a0,16(sp)
8002249c:	afa50014 	sw	a1,20(sp)
800224a0:	afa40018 	sw	a0,24(sp)
    from_raw_parts(data.cast(), len)
800224a4:	0c008d1f 	jal	8002347c <_ZN4core3ptr8metadata14from_raw_parts17hb165f491e8dde497E>
800224a8:	00000000 	nop
}
800224ac:	8fbf001c 	lw	ra,28(sp)
800224b0:	27bd0020 	addiu	sp,sp,32
800224b4:	03e00008 	jr	ra
800224b8:	00000000 	nop

800224bc <_ZN4core3ptr20slice_from_raw_parts17h9cb8f0b787b59141E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
800224bc:	27bdffe0 	addiu	sp,sp,-32
800224c0:	afbf001c 	sw	ra,28(sp)
800224c4:	afa40010 	sw	a0,16(sp)
800224c8:	afa50014 	sw	a1,20(sp)
800224cc:	afa40018 	sw	a0,24(sp)
    from_raw_parts(data.cast(), len)
800224d0:	0c008d2d 	jal	800234b4 <_ZN4core3ptr8metadata14from_raw_parts17hc8a2e5b04bc98435E>
800224d4:	00000000 	nop
}
800224d8:	8fbf001c 	lw	ra,28(sp)
800224dc:	27bd0020 	addiu	sp,sp,32
800224e0:	03e00008 	jr	ra
800224e4:	00000000 	nop

800224e8 <_ZN4core3ptr24slice_from_raw_parts_mut17h0f54a01f9708a325E>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
800224e8:	27bdffe0 	addiu	sp,sp,-32
800224ec:	afbf001c 	sw	ra,28(sp)
800224f0:	afa40010 	sw	a0,16(sp)
800224f4:	afa50014 	sw	a1,20(sp)
800224f8:	afa40018 	sw	a0,24(sp)
    from_raw_parts_mut(data.cast(), len)
800224fc:	0c008d49 	jal	80023524 <_ZN4core3ptr8metadata18from_raw_parts_mut17hbeaa5bd3264b098aE>
80022500:	00000000 	nop
}
80022504:	8fbf001c 	lw	ra,28(sp)
80022508:	27bd0020 	addiu	sp,sp,32
8002250c:	03e00008 	jr	ra
80022510:	00000000 	nop

80022514 <_ZN4core3ptr24slice_from_raw_parts_mut17h2c9e95a551204228E>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
80022514:	27bdffe0 	addiu	sp,sp,-32
80022518:	afbf001c 	sw	ra,28(sp)
8002251c:	afa40010 	sw	a0,16(sp)
80022520:	afa50014 	sw	a1,20(sp)
80022524:	afa40018 	sw	a0,24(sp)
    from_raw_parts_mut(data.cast(), len)
80022528:	0c008d57 	jal	8002355c <_ZN4core3ptr8metadata18from_raw_parts_mut17hfac957d53fd07a11E>
8002252c:	00000000 	nop
}
80022530:	8fbf001c 	lw	ra,28(sp)
80022534:	27bd0020 	addiu	sp,sp,32
80022538:	03e00008 	jr	ra
8002253c:	00000000 	nop

80022540 <_ZN4core3ptr24slice_from_raw_parts_mut17hca02b9559e76586fE>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
80022540:	27bdffe0 	addiu	sp,sp,-32
80022544:	afbf001c 	sw	ra,28(sp)
80022548:	afa40010 	sw	a0,16(sp)
8002254c:	afa50014 	sw	a1,20(sp)
80022550:	afa40018 	sw	a0,24(sp)
    from_raw_parts_mut(data.cast(), len)
80022554:	0c008d3b 	jal	800234ec <_ZN4core3ptr8metadata18from_raw_parts_mut17h5d3a87ccf089e343E>
80022558:	00000000 	nop
}
8002255c:	8fbf001c 	lw	ra,28(sp)
80022560:	27bd0020 	addiu	sp,sp,32
80022564:	03e00008 	jr	ra
80022568:	00000000 	nop

8002256c <_ZN4core3ptr28drop_in_place$LT$$RF$str$GT$17h37740d4e7ec95dfeE>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8002256c:	27bdfff8 	addiu	sp,sp,-8
80022570:	afa40004 	sw	a0,4(sp)
80022574:	27bd0008 	addiu	sp,sp,8
80022578:	03e00008 	jr	ra
8002257c:	00000000 	nop

80022580 <_ZN4core3ptr37drop_in_place$LT$core..fmt..Error$GT$17hc388c1a05402ea36E>:
80022580:	27bdfff8 	addiu	sp,sp,-8
80022584:	afa40004 	sw	a0,4(sp)
80022588:	27bd0008 	addiu	sp,sp,8
8002258c:	03e00008 	jr	ra
80022590:	00000000 	nop

80022594 <_ZN4core3ptr37drop_in_place$LT$elf..ElfHeader32$GT$17h58c4dd7ef8b8c875E>:
80022594:	27bdfff8 	addiu	sp,sp,-8
80022598:	afa40004 	sw	a0,4(sp)
8002259c:	27bd0008 	addiu	sp,sp,8
800225a0:	03e00008 	jr	ra
800225a4:	00000000 	nop

800225a8 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1151b3261df242b0E>:
800225a8:	27bdffe8 	addiu	sp,sp,-24
800225ac:	afbf0014 	sw	ra,20(sp)
800225b0:	afa40010 	sw	a0,16(sp)
800225b4:	0c00e3ba 	jal	80038ee8 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb39f41787bed263eE>
800225b8:	00000000 	nop
800225bc:	8fbf0014 	lw	ra,20(sp)
800225c0:	27bd0018 	addiu	sp,sp,24
800225c4:	03e00008 	jr	ra
800225c8:	00000000 	nop

800225cc <_ZN4core3ptr40drop_in_place$LT$mos_6502..proc..Env$GT$17h5009f075d1b50b01E>:
800225cc:	27bdffe0 	addiu	sp,sp,-32
800225d0:	afbf001c 	sw	ra,28(sp)
800225d4:	afa40014 	sw	a0,20(sp)
800225d8:	afa40018 	sw	a0,24(sp)
800225dc:	24840098 	addiu	a0,a0,152
800225e0:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
800225e4:	00000000 	nop
800225e8:	8fa40014 	lw	a0,20(sp)
800225ec:	248400b0 	addiu	a0,a0,176
800225f0:	0c008cb2 	jal	800232c8 <_ZN4core3ptr76drop_in_place$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$17hb5d8d37fe3972aa7E>
800225f4:	00000000 	nop
800225f8:	8fa40014 	lw	a0,20(sp)
800225fc:	248400b4 	addiu	a0,a0,180
80022600:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
80022604:	00000000 	nop
80022608:	8fbf001c 	lw	ra,28(sp)
8002260c:	27bd0020 	addiu	sp,sp,32
80022610:	03e00008 	jr	ra
80022614:	00000000 	nop

80022618 <_ZN4core3ptr42drop_in_place$LT$core..cell..BorrowRef$GT$17h4c72bdfe73fdbc9fE>:
80022618:	27bdffe8 	addiu	sp,sp,-24
8002261c:	afbf0014 	sw	ra,20(sp)
80022620:	afa40010 	sw	a0,16(sp)
80022624:	0c00a8e1 	jal	8002a384 <_ZN63_$LT$core..cell..BorrowRef$u20$as$u20$core..ops..drop..Drop$GT$4drop17h093b3d6f2f3ec926E>
80022628:	00000000 	nop
8002262c:	8fbf0014 	lw	ra,20(sp)
80022630:	27bd0018 	addiu	sp,sp,24
80022634:	03e00008 	jr	ra
80022638:	00000000 	nop

8002263c <_ZN4core3ptr44drop_in_place$LT$mos_6502..print..Stdout$GT$17ha91d80039696e096E>:
8002263c:	27bdfff8 	addiu	sp,sp,-8
80022640:	afa40004 	sw	a0,4(sp)
80022644:	27bd0008 	addiu	sp,sp,8
80022648:	03e00008 	jr	ra
8002264c:	00000000 	nop

80022650 <_ZN4core3ptr45drop_in_place$LT$core..cell..BorrowRefMut$GT$17h9ae5ebfb1aafb711E>:
80022650:	27bdffe8 	addiu	sp,sp,-24
80022654:	afbf0014 	sw	ra,20(sp)
80022658:	afa40010 	sw	a0,16(sp)
8002265c:	0c00a929 	jal	8002a4a4 <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae9109a4a489dcf0E>
80022660:	00000000 	nop
80022664:	8fbf0014 	lw	ra,20(sp)
80022668:	27bd0018 	addiu	sp,sp,24
8002266c:	03e00008 	jr	ra
80022670:	00000000 	nop

80022674 <_ZN4core3ptr45drop_in_place$LT$mos_6502..mm..page..Page$GT$17hd3b5869b1a72114bE>:
80022674:	27bdffe8 	addiu	sp,sp,-24
80022678:	afbf0014 	sw	ra,20(sp)
8002267c:	afa40010 	sw	a0,16(sp)
80022680:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
80022684:	00000000 	nop
80022688:	8fbf0014 	lw	ra,20(sp)
8002268c:	27bd0018 	addiu	sp,sp,24
80022690:	03e00008 	jr	ra
80022694:	00000000 	nop

80022698 <_ZN4core3ptr45drop_in_place$LT$mos_6502..util..ListNode$GT$17h54ee73ac0cf3d837E>:
80022698:	27bdffe0 	addiu	sp,sp,-32
8002269c:	afbf001c 	sw	ra,28(sp)
800226a0:	afa40014 	sw	a0,20(sp)
800226a4:	afa40018 	sw	a0,24(sp)
800226a8:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
800226ac:	00000000 	nop
800226b0:	8fa40014 	lw	a0,20(sp)
800226b4:	24840004 	addiu	a0,a0,4
800226b8:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
800226bc:	00000000 	nop
800226c0:	8fbf001c 	lw	ra,28(sp)
800226c4:	27bd0020 	addiu	sp,sp,32
800226c8:	03e00008 	jr	ra
800226cc:	00000000 	nop

800226d0 <_ZN4core3ptr4read17h05b8eba24dbfd7a1E>:
pub const unsafe fn read<T>(src: *const T) -> T {
800226d0:	27bdffe0 	addiu	sp,sp,-32
800226d4:	afbf001c 	sw	ra,28(sp)
800226d8:	afa40014 	sw	a0,20(sp)
800226dc:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
800226e0:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
800226e4:	00000000 	nop
800226e8:	14400009 	bnez	v0,80022710 <_ZN4core3ptr4read17h05b8eba24dbfd7a1E+0x40>
800226ec:	00000000 	nop
800226f0:	080089be 	j	800226f8 <_ZN4core3ptr4read17h05b8eba24dbfd7a1E+0x28>
800226f4:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
800226f8:	8fa10014 	lw	at,20(sp)
800226fc:	8c220000 	lw	v0,0(at)
}
80022700:	8fbf001c 	lw	ra,28(sp)
80022704:	27bd0020 	addiu	sp,sp,32
80022708:	03e00008 	jr	ra
8002270c:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022710:	8fa40014 	lw	a0,20(sp)
80022714:	24050004 	li	a1,4
80022718:	0c008a55 	jal	80022954 <_ZN4core3ptr4read18precondition_check17hbee6bec7bd9b3dc9E>
8002271c:	00000000 	nop
80022720:	080089be 	j	800226f8 <_ZN4core3ptr4read17h05b8eba24dbfd7a1E+0x28>
80022724:	00000000 	nop

80022728 <_ZN4core3ptr4read17h06acc532f366dc96E>:
pub const unsafe fn read<T>(src: *const T) -> T {
80022728:	27bdffe0 	addiu	sp,sp,-32
8002272c:	afbf001c 	sw	ra,28(sp)
80022730:	afa40014 	sw	a0,20(sp)
80022734:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80022738:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
8002273c:	00000000 	nop
80022740:	1440000a 	bnez	v0,8002276c <_ZN4core3ptr4read17h06acc532f366dc96E+0x44>
80022744:	00000000 	nop
80022748:	080089d4 	j	80022750 <_ZN4core3ptr4read17h06acc532f366dc96E+0x28>
8002274c:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
80022750:	8fa10014 	lw	at,20(sp)
80022754:	8c220000 	lw	v0,0(at)
80022758:	8c230004 	lw	v1,4(at)
}
8002275c:	8fbf001c 	lw	ra,28(sp)
80022760:	27bd0020 	addiu	sp,sp,32
80022764:	03e00008 	jr	ra
80022768:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8002276c:	8fa40014 	lw	a0,20(sp)
80022770:	24050004 	li	a1,4
80022774:	0c008a55 	jal	80022954 <_ZN4core3ptr4read18precondition_check17hbee6bec7bd9b3dc9E>
80022778:	00000000 	nop
8002277c:	080089d4 	j	80022750 <_ZN4core3ptr4read17h06acc532f366dc96E+0x28>
80022780:	00000000 	nop

80022784 <_ZN4core3ptr4read17h0b040c49a6041767E>:
pub const unsafe fn read<T>(src: *const T) -> T {
80022784:	27bdffd8 	addiu	sp,sp,-40
80022788:	afbf0024 	sw	ra,36(sp)
8002278c:	afa50014 	sw	a1,20(sp)
80022790:	afa40018 	sw	a0,24(sp)
80022794:	afa4001c 	sw	a0,28(sp)
80022798:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
8002279c:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
800227a0:	00000000 	nop
800227a4:	1440000d 	bnez	v0,800227dc <_ZN4core3ptr4read17h0b040c49a6041767E+0x58>
800227a8:	00000000 	nop
800227ac:	080089ed 	j	800227b4 <_ZN4core3ptr4read17h0b040c49a6041767E+0x30>
800227b0:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
800227b4:	8fa50014 	lw	a1,20(sp)
800227b8:	8fa40018 	lw	a0,24(sp)
800227bc:	24060098 	li	a2,152
800227c0:	0c00db4c 	jal	80036d30 <memcpy>
800227c4:	00000000 	nop
}
800227c8:	8fa2001c 	lw	v0,28(sp)
800227cc:	8fbf0024 	lw	ra,36(sp)
800227d0:	27bd0028 	addiu	sp,sp,40
800227d4:	03e00008 	jr	ra
800227d8:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800227dc:	8fa40014 	lw	a0,20(sp)
800227e0:	24050004 	li	a1,4
800227e4:	0c008a55 	jal	80022954 <_ZN4core3ptr4read18precondition_check17hbee6bec7bd9b3dc9E>
800227e8:	00000000 	nop
800227ec:	080089ed 	j	800227b4 <_ZN4core3ptr4read17h0b040c49a6041767E+0x30>
800227f0:	00000000 	nop

800227f4 <_ZN4core3ptr4read17h224be9e3d8aa12f7E>:
pub const unsafe fn read<T>(src: *const T) -> T {
800227f4:	27bdffe0 	addiu	sp,sp,-32
800227f8:	afbf001c 	sw	ra,28(sp)
800227fc:	afa40014 	sw	a0,20(sp)
80022800:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80022804:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80022808:	00000000 	nop
8002280c:	14400009 	bnez	v0,80022834 <_ZN4core3ptr4read17h224be9e3d8aa12f7E+0x40>
80022810:	00000000 	nop
80022814:	08008a07 	j	8002281c <_ZN4core3ptr4read17h224be9e3d8aa12f7E+0x28>
80022818:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
8002281c:	8fa10014 	lw	at,20(sp)
80022820:	8c220000 	lw	v0,0(at)
}
80022824:	8fbf001c 	lw	ra,28(sp)
80022828:	27bd0020 	addiu	sp,sp,32
8002282c:	03e00008 	jr	ra
80022830:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022834:	8fa40014 	lw	a0,20(sp)
80022838:	24050004 	li	a1,4
8002283c:	0c008a55 	jal	80022954 <_ZN4core3ptr4read18precondition_check17hbee6bec7bd9b3dc9E>
80022840:	00000000 	nop
80022844:	08008a07 	j	8002281c <_ZN4core3ptr4read17h224be9e3d8aa12f7E+0x28>
80022848:	00000000 	nop

8002284c <_ZN4core3ptr4read17h531425267a03d82aE>:
pub const unsafe fn read<T>(src: *const T) -> T {
8002284c:	27bdffe0 	addiu	sp,sp,-32
80022850:	afbf001c 	sw	ra,28(sp)
80022854:	afa40014 	sw	a0,20(sp)
80022858:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
8002285c:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80022860:	00000000 	nop
80022864:	14400009 	bnez	v0,8002288c <_ZN4core3ptr4read17h531425267a03d82aE+0x40>
80022868:	00000000 	nop
8002286c:	08008a1d 	j	80022874 <_ZN4core3ptr4read17h531425267a03d82aE+0x28>
80022870:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
80022874:	8fa10014 	lw	at,20(sp)
80022878:	8c220000 	lw	v0,0(at)
}
8002287c:	8fbf001c 	lw	ra,28(sp)
80022880:	27bd0020 	addiu	sp,sp,32
80022884:	03e00008 	jr	ra
80022888:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8002288c:	8fa40014 	lw	a0,20(sp)
80022890:	24050004 	li	a1,4
80022894:	0c008a55 	jal	80022954 <_ZN4core3ptr4read18precondition_check17hbee6bec7bd9b3dc9E>
80022898:	00000000 	nop
8002289c:	08008a1d 	j	80022874 <_ZN4core3ptr4read17h531425267a03d82aE+0x28>
800228a0:	00000000 	nop

800228a4 <_ZN4core3ptr4read17haeaa39aafe044d3cE>:
pub const unsafe fn read<T>(src: *const T) -> T {
800228a4:	27bdffe0 	addiu	sp,sp,-32
800228a8:	afbf001c 	sw	ra,28(sp)
800228ac:	afa40014 	sw	a0,20(sp)
800228b0:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
800228b4:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
800228b8:	00000000 	nop
800228bc:	14400009 	bnez	v0,800228e4 <_ZN4core3ptr4read17haeaa39aafe044d3cE+0x40>
800228c0:	00000000 	nop
800228c4:	08008a33 	j	800228cc <_ZN4core3ptr4read17haeaa39aafe044d3cE+0x28>
800228c8:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
800228cc:	8fa10014 	lw	at,20(sp)
800228d0:	8c220000 	lw	v0,0(at)
}
800228d4:	8fbf001c 	lw	ra,28(sp)
800228d8:	27bd0020 	addiu	sp,sp,32
800228dc:	03e00008 	jr	ra
800228e0:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800228e4:	8fa40014 	lw	a0,20(sp)
800228e8:	24050004 	li	a1,4
800228ec:	0c008a55 	jal	80022954 <_ZN4core3ptr4read18precondition_check17hbee6bec7bd9b3dc9E>
800228f0:	00000000 	nop
800228f4:	08008a33 	j	800228cc <_ZN4core3ptr4read17haeaa39aafe044d3cE+0x28>
800228f8:	00000000 	nop

800228fc <_ZN4core3ptr4read17hebccfee2ef12feb0E>:
pub const unsafe fn read<T>(src: *const T) -> T {
800228fc:	27bdffe0 	addiu	sp,sp,-32
80022900:	afbf001c 	sw	ra,28(sp)
80022904:	afa40014 	sw	a0,20(sp)
80022908:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
8002290c:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80022910:	00000000 	nop
80022914:	14400009 	bnez	v0,8002293c <_ZN4core3ptr4read17hebccfee2ef12feb0E+0x40>
80022918:	00000000 	nop
8002291c:	08008a49 	j	80022924 <_ZN4core3ptr4read17hebccfee2ef12feb0E+0x28>
80022920:	00000000 	nop
}
80022924:	8fa10014 	lw	at,20(sp)
80022928:	94220000 	lhu	v0,0(at)
8002292c:	8fbf001c 	lw	ra,28(sp)
80022930:	27bd0020 	addiu	sp,sp,32
80022934:	03e00008 	jr	ra
80022938:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8002293c:	8fa40014 	lw	a0,20(sp)
80022940:	24050002 	li	a1,2
80022944:	0c008a55 	jal	80022954 <_ZN4core3ptr4read18precondition_check17hbee6bec7bd9b3dc9E>
80022948:	00000000 	nop
8002294c:	08008a49 	j	80022924 <_ZN4core3ptr4read17hebccfee2ef12feb0E+0x28>
80022950:	00000000 	nop

80022954 <_ZN4core3ptr4read18precondition_check17hbee6bec7bd9b3dc9E>:
            const fn precondition_check($($name:$ty),*) {
80022954:	27bdffe0 	addiu	sp,sp,-32
80022958:	afbf001c 	sw	ra,28(sp)
8002295c:	afa40014 	sw	a0,20(sp)
80022960:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80022964:	0c009884 	jal	80026210 <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E>
80022968:	00000000 	nop
8002296c:	14400008 	bnez	v0,80022990 <_ZN4core3ptr4read18precondition_check17hbee6bec7bd9b3dc9E+0x3c>
80022970:	00000000 	nop
80022974:	08008a5f 	j	8002297c <_ZN4core3ptr4read18precondition_check17hbee6bec7bd9b3dc9E+0x28>
80022978:	00000000 	nop
                    ::core::panicking::panic_nounwind(
8002297c:	3c018105 	lui	at,0x8105
80022980:	2424e541 	addiu	a0,at,-6847
80022984:	24050065 	li	a1,101
80022988:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8002298c:	00000000 	nop
            }
80022990:	8fbf001c 	lw	ra,28(sp)
80022994:	27bd0020 	addiu	sp,sp,32
80022998:	03e00008 	jr	ra
8002299c:	00000000 	nop

800229a0 <_ZN4core3ptr50drop_in_place$LT$$u5b$mos_6502..proc..Env$u5d$$GT$17hd7e937c30dc1ae92E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
800229a0:	27bdffd8 	addiu	sp,sp,-40
800229a4:	afbf0024 	sw	ra,36(sp)
800229a8:	afa50010 	sw	a1,16(sp)
800229ac:	afa40014 	sw	a0,20(sp)
800229b0:	afa4001c 	sw	a0,28(sp)
800229b4:	afa50020 	sw	a1,32(sp)
800229b8:	afa00018 	sw	zero,24(sp)
800229bc:	08008a71 	j	800229c4 <_ZN4core3ptr50drop_in_place$LT$$u5b$mos_6502..proc..Env$u5d$$GT$17hd7e937c30dc1ae92E+0x24>
800229c0:	00000000 	nop
800229c4:	8fa20010 	lw	v0,16(sp)
800229c8:	8fa10018 	lw	at,24(sp)
800229cc:	10220011 	beq	at,v0,80022a14 <_ZN4core3ptr50drop_in_place$LT$$u5b$mos_6502..proc..Env$u5d$$GT$17hd7e937c30dc1ae92E+0x74>
800229d0:	00000000 	nop
800229d4:	08008a77 	j	800229dc <_ZN4core3ptr50drop_in_place$LT$$u5b$mos_6502..proc..Env$u5d$$GT$17hd7e937c30dc1ae92E+0x3c>
800229d8:	00000000 	nop
800229dc:	8fa20014 	lw	v0,20(sp)
800229e0:	8fa10018 	lw	at,24(sp)
800229e4:	00012080 	sll	a0,at,0x2
800229e8:	00011940 	sll	v1,at,0x5
800229ec:	00642021 	addu	a0,v1,a0
800229f0:	00011a00 	sll	v1,at,0x8
800229f4:	00641823 	subu	v1,v1,a0
800229f8:	00432021 	addu	a0,v0,v1
800229fc:	24210001 	addiu	at,at,1
80022a00:	afa10018 	sw	at,24(sp)
80022a04:	0c008973 	jal	800225cc <_ZN4core3ptr40drop_in_place$LT$mos_6502..proc..Env$GT$17h5009f075d1b50b01E>
80022a08:	00000000 	nop
80022a0c:	08008a71 	j	800229c4 <_ZN4core3ptr50drop_in_place$LT$$u5b$mos_6502..proc..Env$u5d$$GT$17hd7e937c30dc1ae92E+0x24>
80022a10:	00000000 	nop
80022a14:	8fbf0024 	lw	ra,36(sp)
80022a18:	27bd0028 	addiu	sp,sp,40
80022a1c:	03e00008 	jr	ra
80022a20:	00000000 	nop

80022a24 <_ZN4core3ptr53drop_in_place$LT$mos_6502..util..DoubleLinkedList$GT$17h37315ec4c416cc7bE>:
80022a24:	27bdffe0 	addiu	sp,sp,-32
80022a28:	afbf001c 	sw	ra,28(sp)
80022a2c:	afa40014 	sw	a0,20(sp)
80022a30:	afa40018 	sw	a0,24(sp)
80022a34:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80022a38:	00000000 	nop
80022a3c:	8fa40014 	lw	a0,20(sp)
80022a40:	24840004 	addiu	a0,a0,4
80022a44:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80022a48:	00000000 	nop
80022a4c:	8fbf001c 	lw	ra,28(sp)
80022a50:	27bd0020 	addiu	sp,sp,32
80022a54:	03e00008 	jr	ra
80022a58:	00000000 	nop

80022a5c <_ZN4core3ptr55drop_in_place$LT$$u5b$mos_6502..mm..page..Page$u5d$$GT$17h3983db740ad98d27E>:
80022a5c:	27bdffd8 	addiu	sp,sp,-40
80022a60:	afbf0024 	sw	ra,36(sp)
80022a64:	afa50010 	sw	a1,16(sp)
80022a68:	afa40014 	sw	a0,20(sp)
80022a6c:	afa4001c 	sw	a0,28(sp)
80022a70:	afa50020 	sw	a1,32(sp)
80022a74:	afa00018 	sw	zero,24(sp)
80022a78:	08008aa0 	j	80022a80 <_ZN4core3ptr55drop_in_place$LT$$u5b$mos_6502..mm..page..Page$u5d$$GT$17h3983db740ad98d27E+0x24>
80022a7c:	00000000 	nop
80022a80:	8fa20010 	lw	v0,16(sp)
80022a84:	8fa10018 	lw	at,24(sp)
80022a88:	1022000f 	beq	at,v0,80022ac8 <_ZN4core3ptr55drop_in_place$LT$$u5b$mos_6502..mm..page..Page$u5d$$GT$17h3983db740ad98d27E+0x6c>
80022a8c:	00000000 	nop
80022a90:	08008aa6 	j	80022a98 <_ZN4core3ptr55drop_in_place$LT$$u5b$mos_6502..mm..page..Page$u5d$$GT$17h3983db740ad98d27E+0x3c>
80022a94:	00000000 	nop
80022a98:	8fa20014 	lw	v0,20(sp)
80022a9c:	8fa10018 	lw	at,24(sp)
80022aa0:	00012080 	sll	a0,at,0x2
80022aa4:	000118c0 	sll	v1,at,0x3
80022aa8:	00641821 	addu	v1,v1,a0
80022aac:	00432021 	addu	a0,v0,v1
80022ab0:	24210001 	addiu	at,at,1
80022ab4:	afa10018 	sw	at,24(sp)
80022ab8:	0c00899d 	jal	80022674 <_ZN4core3ptr45drop_in_place$LT$mos_6502..mm..page..Page$GT$17hd3b5869b1a72114bE>
80022abc:	00000000 	nop
80022ac0:	08008aa0 	j	80022a80 <_ZN4core3ptr55drop_in_place$LT$$u5b$mos_6502..mm..page..Page$u5d$$GT$17h3983db740ad98d27E+0x24>
80022ac4:	00000000 	nop
80022ac8:	8fbf0024 	lw	ra,36(sp)
80022acc:	27bd0028 	addiu	sp,sp,40
80022ad0:	03e00008 	jr	ra
80022ad4:	00000000 	nop

80022ad8 <_ZN4core3ptr5write17h3358dcdb987c4b90E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022ad8:	27bdffe0 	addiu	sp,sp,-32
80022adc:	afbf001c 	sw	ra,28(sp)
80022ae0:	afa50010 	sw	a1,16(sp)
80022ae4:	afa40014 	sw	a0,20(sp)
80022ae8:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80022aec:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80022af0:	00000000 	nop
80022af4:	14400019 	bnez	v0,80022b5c <_ZN4core3ptr5write17h3358dcdb987c4b90E+0x84>
80022af8:	00000000 	nop
80022afc:	08008ac1 	j	80022b04 <_ZN4core3ptr5write17h3358dcdb987c4b90E+0x2c>
80022b00:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022b04:	8fa20014 	lw	v0,20(sp)
80022b08:	8fa10010 	lw	at,16(sp)
80022b0c:	8c23001c 	lw	v1,28(at)
80022b10:	ac43001c 	sw	v1,28(v0)
80022b14:	8c230018 	lw	v1,24(at)
80022b18:	ac430018 	sw	v1,24(v0)
80022b1c:	8c230014 	lw	v1,20(at)
80022b20:	ac430014 	sw	v1,20(v0)
80022b24:	8c230010 	lw	v1,16(at)
80022b28:	ac430010 	sw	v1,16(v0)
80022b2c:	8c23000c 	lw	v1,12(at)
80022b30:	ac43000c 	sw	v1,12(v0)
80022b34:	8c230008 	lw	v1,8(at)
80022b38:	ac430008 	sw	v1,8(v0)
80022b3c:	8c230004 	lw	v1,4(at)
80022b40:	ac430004 	sw	v1,4(v0)
80022b44:	8c210000 	lw	at,0(at)
80022b48:	ac410000 	sw	at,0(v0)
}
80022b4c:	8fbf001c 	lw	ra,28(sp)
80022b50:	27bd0020 	addiu	sp,sp,32
80022b54:	03e00008 	jr	ra
80022b58:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022b5c:	8fa40014 	lw	a0,20(sp)
80022b60:	24050004 	li	a1,4
80022b64:	0c008bc9 	jal	80022f24 <_ZN4core3ptr5write18precondition_check17h44e904ec3cd59b0eE>
80022b68:	00000000 	nop
80022b6c:	08008ac1 	j	80022b04 <_ZN4core3ptr5write17h3358dcdb987c4b90E+0x2c>
80022b70:	00000000 	nop

80022b74 <_ZN4core3ptr5write17h6acb17587e071514E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022b74:	27bdffd8 	addiu	sp,sp,-40
80022b78:	afbf0024 	sw	ra,36(sp)
80022b7c:	afa50014 	sw	a1,20(sp)
80022b80:	afa40018 	sw	a0,24(sp)
80022b84:	afa4001c 	sw	a0,28(sp)
80022b88:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80022b8c:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80022b90:	00000000 	nop
80022b94:	1440000a 	bnez	v0,80022bc0 <_ZN4core3ptr5write17h6acb17587e071514E+0x4c>
80022b98:	00000000 	nop
80022b9c:	08008ae9 	j	80022ba4 <_ZN4core3ptr5write17h6acb17587e071514E+0x30>
80022ba0:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022ba4:	8fa10014 	lw	at,20(sp)
80022ba8:	8fa20018 	lw	v0,24(sp)
80022bac:	ac410000 	sw	at,0(v0)
}
80022bb0:	8fbf0024 	lw	ra,36(sp)
80022bb4:	27bd0028 	addiu	sp,sp,40
80022bb8:	03e00008 	jr	ra
80022bbc:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022bc0:	8fa40018 	lw	a0,24(sp)
80022bc4:	24050004 	li	a1,4
80022bc8:	0c008bc9 	jal	80022f24 <_ZN4core3ptr5write18precondition_check17h44e904ec3cd59b0eE>
80022bcc:	00000000 	nop
80022bd0:	08008ae9 	j	80022ba4 <_ZN4core3ptr5write17h6acb17587e071514E+0x30>
80022bd4:	00000000 	nop

80022bd8 <_ZN4core3ptr5write17h96be3a4cf9233055E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022bd8:	27bdffd8 	addiu	sp,sp,-40
80022bdc:	afbf0024 	sw	ra,36(sp)
80022be0:	afa50014 	sw	a1,20(sp)
80022be4:	afa40018 	sw	a0,24(sp)
80022be8:	afa4001c 	sw	a0,28(sp)
80022bec:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80022bf0:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80022bf4:	00000000 	nop
80022bf8:	1440000a 	bnez	v0,80022c24 <_ZN4core3ptr5write17h96be3a4cf9233055E+0x4c>
80022bfc:	00000000 	nop
80022c00:	08008b02 	j	80022c08 <_ZN4core3ptr5write17h96be3a4cf9233055E+0x30>
80022c04:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022c08:	8fa10014 	lw	at,20(sp)
80022c0c:	8fa20018 	lw	v0,24(sp)
80022c10:	ac410000 	sw	at,0(v0)
}
80022c14:	8fbf0024 	lw	ra,36(sp)
80022c18:	27bd0028 	addiu	sp,sp,40
80022c1c:	03e00008 	jr	ra
80022c20:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022c24:	8fa40018 	lw	a0,24(sp)
80022c28:	24050004 	li	a1,4
80022c2c:	0c008bc9 	jal	80022f24 <_ZN4core3ptr5write18precondition_check17h44e904ec3cd59b0eE>
80022c30:	00000000 	nop
80022c34:	08008b02 	j	80022c08 <_ZN4core3ptr5write17h96be3a4cf9233055E+0x30>
80022c38:	00000000 	nop

80022c3c <_ZN4core3ptr5write17h9e21150fbb2771a5E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022c3c:	27bdffe0 	addiu	sp,sp,-32
80022c40:	afbf001c 	sw	ra,28(sp)
80022c44:	afa50010 	sw	a1,16(sp)
80022c48:	afa40014 	sw	a0,20(sp)
80022c4c:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80022c50:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80022c54:	00000000 	nop
80022c58:	1440000f 	bnez	v0,80022c98 <_ZN4core3ptr5write17h9e21150fbb2771a5E+0x5c>
80022c5c:	00000000 	nop
80022c60:	08008b1a 	j	80022c68 <_ZN4core3ptr5write17h9e21150fbb2771a5E+0x2c>
80022c64:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022c68:	8fa20014 	lw	v0,20(sp)
80022c6c:	8fa10010 	lw	at,16(sp)
80022c70:	8c230008 	lw	v1,8(at)
80022c74:	ac430008 	sw	v1,8(v0)
80022c78:	8c230004 	lw	v1,4(at)
80022c7c:	ac430004 	sw	v1,4(v0)
80022c80:	8c210000 	lw	at,0(at)
80022c84:	ac410000 	sw	at,0(v0)
}
80022c88:	8fbf001c 	lw	ra,28(sp)
80022c8c:	27bd0020 	addiu	sp,sp,32
80022c90:	03e00008 	jr	ra
80022c94:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022c98:	8fa40014 	lw	a0,20(sp)
80022c9c:	24050004 	li	a1,4
80022ca0:	0c008bc9 	jal	80022f24 <_ZN4core3ptr5write18precondition_check17h44e904ec3cd59b0eE>
80022ca4:	00000000 	nop
80022ca8:	08008b1a 	j	80022c68 <_ZN4core3ptr5write17h9e21150fbb2771a5E+0x2c>
80022cac:	00000000 	nop

80022cb0 <_ZN4core3ptr5write17ha785fe8d1cd612bbE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022cb0:	27bdffd8 	addiu	sp,sp,-40
80022cb4:	afbf0024 	sw	ra,36(sp)
80022cb8:	afa40014 	sw	a0,20(sp)
80022cbc:	00a00825 	move	at,a1
80022cc0:	afa10018 	sw	at,24(sp)
80022cc4:	afa4001c 	sw	a0,28(sp)
80022cc8:	a7a50022 	sh	a1,34(sp)
        ub_checks::assert_unsafe_precondition!(
80022ccc:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80022cd0:	00000000 	nop
80022cd4:	1440000a 	bnez	v0,80022d00 <_ZN4core3ptr5write17ha785fe8d1cd612bbE+0x50>
80022cd8:	00000000 	nop
80022cdc:	08008b39 	j	80022ce4 <_ZN4core3ptr5write17ha785fe8d1cd612bbE+0x34>
80022ce0:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022ce4:	8fa10018 	lw	at,24(sp)
80022ce8:	8fa20014 	lw	v0,20(sp)
80022cec:	a4410000 	sh	at,0(v0)
}
80022cf0:	8fbf0024 	lw	ra,36(sp)
80022cf4:	27bd0028 	addiu	sp,sp,40
80022cf8:	03e00008 	jr	ra
80022cfc:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022d00:	8fa40014 	lw	a0,20(sp)
80022d04:	24050002 	li	a1,2
80022d08:	0c008bc9 	jal	80022f24 <_ZN4core3ptr5write18precondition_check17h44e904ec3cd59b0eE>
80022d0c:	00000000 	nop
80022d10:	08008b39 	j	80022ce4 <_ZN4core3ptr5write17ha785fe8d1cd612bbE+0x34>
80022d14:	00000000 	nop

80022d18 <_ZN4core3ptr5write17hc5f7b59e715cbb46E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022d18:	27bdffe0 	addiu	sp,sp,-32
80022d1c:	afbf001c 	sw	ra,28(sp)
80022d20:	afa50010 	sw	a1,16(sp)
80022d24:	afa40014 	sw	a0,20(sp)
80022d28:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80022d2c:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80022d30:	00000000 	nop
80022d34:	1440000c 	bnez	v0,80022d68 <_ZN4core3ptr5write17hc5f7b59e715cbb46E+0x50>
80022d38:	00000000 	nop
80022d3c:	08008b51 	j	80022d44 <_ZN4core3ptr5write17hc5f7b59e715cbb46E+0x2c>
80022d40:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022d44:	8fa50010 	lw	a1,16(sp)
80022d48:	8fa40014 	lw	a0,20(sp)
80022d4c:	24060098 	li	a2,152
80022d50:	0c00db4c 	jal	80036d30 <memcpy>
80022d54:	00000000 	nop
}
80022d58:	8fbf001c 	lw	ra,28(sp)
80022d5c:	27bd0020 	addiu	sp,sp,32
80022d60:	03e00008 	jr	ra
80022d64:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022d68:	8fa40014 	lw	a0,20(sp)
80022d6c:	24050004 	li	a1,4
80022d70:	0c008bc9 	jal	80022f24 <_ZN4core3ptr5write18precondition_check17h44e904ec3cd59b0eE>
80022d74:	00000000 	nop
80022d78:	08008b51 	j	80022d44 <_ZN4core3ptr5write17hc5f7b59e715cbb46E+0x2c>
80022d7c:	00000000 	nop

80022d80 <_ZN4core3ptr5write17hdc528238244254aaE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022d80:	27bdffe0 	addiu	sp,sp,-32
80022d84:	afbf001c 	sw	ra,28(sp)
80022d88:	afa50010 	sw	a1,16(sp)
80022d8c:	afa40014 	sw	a0,20(sp)
80022d90:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80022d94:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80022d98:	00000000 	nop
80022d9c:	1440000c 	bnez	v0,80022dd0 <_ZN4core3ptr5write17hdc528238244254aaE+0x50>
80022da0:	00000000 	nop
80022da4:	08008b6b 	j	80022dac <_ZN4core3ptr5write17hdc528238244254aaE+0x2c>
80022da8:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022dac:	8fa50010 	lw	a1,16(sp)
80022db0:	8fa40014 	lw	a0,20(sp)
80022db4:	240600dc 	li	a2,220
80022db8:	0c00db4c 	jal	80036d30 <memcpy>
80022dbc:	00000000 	nop
}
80022dc0:	8fbf001c 	lw	ra,28(sp)
80022dc4:	27bd0020 	addiu	sp,sp,32
80022dc8:	03e00008 	jr	ra
80022dcc:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022dd0:	8fa40014 	lw	a0,20(sp)
80022dd4:	24050004 	li	a1,4
80022dd8:	0c008bc9 	jal	80022f24 <_ZN4core3ptr5write18precondition_check17h44e904ec3cd59b0eE>
80022ddc:	00000000 	nop
80022de0:	08008b6b 	j	80022dac <_ZN4core3ptr5write17hdc528238244254aaE+0x2c>
80022de4:	00000000 	nop

80022de8 <_ZN4core3ptr5write17he936630edff8f69aE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022de8:	27bdffd8 	addiu	sp,sp,-40
80022dec:	afbf0024 	sw	ra,36(sp)
80022df0:	afa50014 	sw	a1,20(sp)
80022df4:	afa40018 	sw	a0,24(sp)
80022df8:	afa4001c 	sw	a0,28(sp)
80022dfc:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80022e00:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80022e04:	00000000 	nop
80022e08:	1440000a 	bnez	v0,80022e34 <_ZN4core3ptr5write17he936630edff8f69aE+0x4c>
80022e0c:	00000000 	nop
80022e10:	08008b86 	j	80022e18 <_ZN4core3ptr5write17he936630edff8f69aE+0x30>
80022e14:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022e18:	8fa10014 	lw	at,20(sp)
80022e1c:	8fa20018 	lw	v0,24(sp)
80022e20:	ac410000 	sw	at,0(v0)
}
80022e24:	8fbf0024 	lw	ra,36(sp)
80022e28:	27bd0028 	addiu	sp,sp,40
80022e2c:	03e00008 	jr	ra
80022e30:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022e34:	8fa40018 	lw	a0,24(sp)
80022e38:	24050004 	li	a1,4
80022e3c:	0c008bc9 	jal	80022f24 <_ZN4core3ptr5write18precondition_check17h44e904ec3cd59b0eE>
80022e40:	00000000 	nop
80022e44:	08008b86 	j	80022e18 <_ZN4core3ptr5write17he936630edff8f69aE+0x30>
80022e48:	00000000 	nop

80022e4c <_ZN4core3ptr5write17hec4f96b7c0a9fb2dE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022e4c:	27bdffd0 	addiu	sp,sp,-48
80022e50:	afbf002c 	sw	ra,44(sp)
80022e54:	afa60014 	sw	a2,20(sp)
80022e58:	afa50018 	sw	a1,24(sp)
80022e5c:	afa4001c 	sw	a0,28(sp)
80022e60:	afa40020 	sw	a0,32(sp)
80022e64:	afa50024 	sw	a1,36(sp)
80022e68:	afa60028 	sw	a2,40(sp)
        ub_checks::assert_unsafe_precondition!(
80022e6c:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80022e70:	00000000 	nop
80022e74:	1440000c 	bnez	v0,80022ea8 <_ZN4core3ptr5write17hec4f96b7c0a9fb2dE+0x5c>
80022e78:	00000000 	nop
80022e7c:	08008ba1 	j	80022e84 <_ZN4core3ptr5write17hec4f96b7c0a9fb2dE+0x38>
80022e80:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022e84:	8fa10014 	lw	at,20(sp)
80022e88:	8fa2001c 	lw	v0,28(sp)
80022e8c:	8fa30018 	lw	v1,24(sp)
80022e90:	ac430000 	sw	v1,0(v0)
80022e94:	ac410004 	sw	at,4(v0)
}
80022e98:	8fbf002c 	lw	ra,44(sp)
80022e9c:	27bd0030 	addiu	sp,sp,48
80022ea0:	03e00008 	jr	ra
80022ea4:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022ea8:	8fa4001c 	lw	a0,28(sp)
80022eac:	24050004 	li	a1,4
80022eb0:	0c008bc9 	jal	80022f24 <_ZN4core3ptr5write18precondition_check17h44e904ec3cd59b0eE>
80022eb4:	00000000 	nop
80022eb8:	08008ba1 	j	80022e84 <_ZN4core3ptr5write17hec4f96b7c0a9fb2dE+0x38>
80022ebc:	00000000 	nop

80022ec0 <_ZN4core3ptr5write17hfa0c2ce5b65433fdE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022ec0:	27bdffd8 	addiu	sp,sp,-40
80022ec4:	afbf0024 	sw	ra,36(sp)
80022ec8:	afa50014 	sw	a1,20(sp)
80022ecc:	afa40018 	sw	a0,24(sp)
80022ed0:	afa4001c 	sw	a0,28(sp)
80022ed4:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80022ed8:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80022edc:	00000000 	nop
80022ee0:	1440000a 	bnez	v0,80022f0c <_ZN4core3ptr5write17hfa0c2ce5b65433fdE+0x4c>
80022ee4:	00000000 	nop
80022ee8:	08008bbc 	j	80022ef0 <_ZN4core3ptr5write17hfa0c2ce5b65433fdE+0x30>
80022eec:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022ef0:	8fa10014 	lw	at,20(sp)
80022ef4:	8fa20018 	lw	v0,24(sp)
80022ef8:	ac410000 	sw	at,0(v0)
}
80022efc:	8fbf0024 	lw	ra,36(sp)
80022f00:	27bd0028 	addiu	sp,sp,40
80022f04:	03e00008 	jr	ra
80022f08:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022f0c:	8fa40018 	lw	a0,24(sp)
80022f10:	24050004 	li	a1,4
80022f14:	0c008bc9 	jal	80022f24 <_ZN4core3ptr5write18precondition_check17h44e904ec3cd59b0eE>
80022f18:	00000000 	nop
80022f1c:	08008bbc 	j	80022ef0 <_ZN4core3ptr5write17hfa0c2ce5b65433fdE+0x30>
80022f20:	00000000 	nop

80022f24 <_ZN4core3ptr5write18precondition_check17h44e904ec3cd59b0eE>:
            const fn precondition_check($($name:$ty),*) {
80022f24:	27bdffe0 	addiu	sp,sp,-32
80022f28:	afbf001c 	sw	ra,28(sp)
80022f2c:	afa40014 	sw	a0,20(sp)
80022f30:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80022f34:	0c009884 	jal	80026210 <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E>
80022f38:	00000000 	nop
80022f3c:	14400008 	bnez	v0,80022f60 <_ZN4core3ptr5write18precondition_check17h44e904ec3cd59b0eE+0x3c>
80022f40:	00000000 	nop
80022f44:	08008bd3 	j	80022f4c <_ZN4core3ptr5write18precondition_check17h44e904ec3cd59b0eE+0x28>
80022f48:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80022f4c:	3c018105 	lui	at,0x8105
80022f50:	2424e5a6 	addiu	a0,at,-6746
80022f54:	24050066 	li	a1,102
80022f58:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80022f5c:	00000000 	nop
            }
80022f60:	8fbf001c 	lw	ra,28(sp)
80022f64:	27bd0020 	addiu	sp,sp,32
80022f68:	03e00008 	jr	ra
80022f6c:	00000000 	nop

80022f70 <_ZN4core3ptr63drop_in_place$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$17h6420080e7ed5943bE>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80022f70:	27bdffe0 	addiu	sp,sp,-32
80022f74:	afbf001c 	sw	ra,28(sp)
80022f78:	afa40014 	sw	a0,20(sp)
80022f7c:	afa40018 	sw	a0,24(sp)
80022f80:	0c00aa00 	jal	8002a800 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h679227b0c9f5868bE>
80022f84:	00000000 	nop
80022f88:	8fa40014 	lw	a0,20(sp)
80022f8c:	0c008c7a 	jal	800231e8 <_ZN4core3ptr70drop_in_place$LT$alloc..raw_vec..RawVec$LT$mos_6502..proc..Env$GT$$GT$17h3f7ef903e6b652c3E>
80022f90:	00000000 	nop
80022f94:	8fbf001c 	lw	ra,28(sp)
80022f98:	27bd0020 	addiu	sp,sp,32
80022f9c:	03e00008 	jr	ra
80022fa0:	00000000 	nop

80022fa4 <_ZN4core3ptr64drop_in_place$LT$alloc..vec..Vec$LT$elf..ProgramHeader32$GT$$GT$17hd81436ea93ea3ba5E>:
80022fa4:	27bdffe0 	addiu	sp,sp,-32
80022fa8:	afbf001c 	sw	ra,28(sp)
80022fac:	afa40014 	sw	a0,20(sp)
80022fb0:	afa40018 	sw	a0,24(sp)
80022fb4:	0c00a9f1 	jal	8002a7c4 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3ea7f030793babdcE>
80022fb8:	00000000 	nop
80022fbc:	8fa40014 	lw	a0,20(sp)
80022fc0:	0c008c83 	jal	8002320c <_ZN4core3ptr71drop_in_place$LT$alloc..raw_vec..RawVec$LT$elf..ProgramHeader32$GT$$GT$17hc7d32bccadf7a6c2E>
80022fc4:	00000000 	nop
80022fc8:	8fbf001c 	lw	ra,28(sp)
80022fcc:	27bd0020 	addiu	sp,sp,32
80022fd0:	03e00008 	jr	ra
80022fd4:	00000000 	nop

80022fd8 <_ZN4core3ptr68drop_in_place$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$17h802ad627b365b2bbE>:
80022fd8:	27bdffe0 	addiu	sp,sp,-32
80022fdc:	afbf001c 	sw	ra,28(sp)
80022fe0:	afa40014 	sw	a0,20(sp)
80022fe4:	afa40018 	sw	a0,24(sp)
80022fe8:	0c00aa13 	jal	8002a84c <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h8a1cce0b2d1bdf30E>
80022fec:	00000000 	nop
80022ff0:	8fa40014 	lw	a0,20(sp)
80022ff4:	0c008ca0 	jal	80023280 <_ZN4core3ptr75drop_in_place$LT$alloc..raw_vec..RawVec$LT$mos_6502..mm..page..Page$GT$$GT$17h0613cfabe36b9790E>
80022ff8:	00000000 	nop
80022ffc:	8fbf001c 	lw	ra,28(sp)
80023000:	27bd0020 	addiu	sp,sp,32
80023004:	03e00008 	jr	ra
80023008:	00000000 	nop

8002300c <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d4641e92d4d8a17E>:
8002300c:	27bdffe8 	addiu	sp,sp,-24
80023010:	afbf0014 	sw	ra,20(sp)
80023014:	afa40010 	sw	a0,16(sp)
80023018:	24840004 	addiu	a0,a0,4
8002301c:	0c008986 	jal	80022618 <_ZN4core3ptr42drop_in_place$LT$core..cell..BorrowRef$GT$17h4c72bdfe73fdbc9fE>
80023020:	00000000 	nop
80023024:	8fbf0014 	lw	ra,20(sp)
80023028:	27bd0018 	addiu	sp,sp,24
8002302c:	03e00008 	jr	ra
80023030:	00000000 	nop

80023034 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h95c47017133216e1E>:
    pub const fn cast<U>(self) -> Unique<U> {
80023034:	27bdffe0 	addiu	sp,sp,-32
80023038:	afbf001c 	sw	ra,28(sp)
8002303c:	afa40018 	sw	a0,24(sp)
        Unique { pointer: self.pointer.cast(), _marker: PhantomData }
80023040:	0c008dc7 	jal	8002371c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h6bf599961409530eE>
80023044:	00000000 	nop
80023048:	afa20014 	sw	v0,20(sp)
    }
8002304c:	8fa20014 	lw	v0,20(sp)
80023050:	8fbf001c 	lw	ra,28(sp)
80023054:	27bd0020 	addiu	sp,sp,32
80023058:	03e00008 	jr	ra
8002305c:	00000000 	nop

80023060 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hba7b2813133f40d9E>:
    pub const fn cast<U>(self) -> Unique<U> {
80023060:	27bdffe0 	addiu	sp,sp,-32
80023064:	afbf001c 	sw	ra,28(sp)
80023068:	afa40018 	sw	a0,24(sp)
        Unique { pointer: self.pointer.cast(), _marker: PhantomData }
8002306c:	0c008df3 	jal	800237cc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hf16a927142c9d252E>
80023070:	00000000 	nop
80023074:	afa20014 	sw	v0,20(sp)
    }
80023078:	8fa20014 	lw	v0,20(sp)
8002307c:	8fbf001c 	lw	ra,28(sp)
80023080:	27bd0020 	addiu	sp,sp,32
80023084:	03e00008 	jr	ra
80023088:	00000000 	nop

8002308c <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hbe1029b8b7dcd013E>:
    pub const fn cast<U>(self) -> Unique<U> {
8002308c:	27bdffe0 	addiu	sp,sp,-32
80023090:	afbf001c 	sw	ra,28(sp)
80023094:	afa40018 	sw	a0,24(sp)
        Unique { pointer: self.pointer.cast(), _marker: PhantomData }
80023098:	0c008dad 	jal	800236b4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h136225984f14e4d2E>
8002309c:	00000000 	nop
800230a0:	afa20014 	sw	v0,20(sp)
    }
800230a4:	8fa20014 	lw	v0,20(sp)
800230a8:	8fbf001c 	lw	ra,28(sp)
800230ac:	27bd0020 	addiu	sp,sp,32
800230b0:	03e00008 	jr	ra
800230b4:	00000000 	nop

800230b8 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hd71345260df4b0e8E>:
    pub const fn cast<U>(self) -> Unique<U> {
800230b8:	27bdffe0 	addiu	sp,sp,-32
800230bc:	afbf001c 	sw	ra,28(sp)
800230c0:	afa40018 	sw	a0,24(sp)
        Unique { pointer: self.pointer.cast(), _marker: PhantomData }
800230c4:	0c008dd9 	jal	80023764 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h7a8419fd78cfba42E>
800230c8:	00000000 	nop
800230cc:	afa20014 	sw	v0,20(sp)
    }
800230d0:	8fa20014 	lw	v0,20(sp)
800230d4:	8fbf001c 	lw	ra,28(sp)
800230d8:	27bd0020 	addiu	sp,sp,32
800230dc:	03e00008 	jr	ra
800230e0:	00000000 	nop

800230e4 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hea439526ba2b660aE>:
    pub const fn cast<U>(self) -> Unique<U> {
800230e4:	27bdffe0 	addiu	sp,sp,-32
800230e8:	afbf001c 	sw	ra,28(sp)
800230ec:	afa40018 	sw	a0,24(sp)
        Unique { pointer: self.pointer.cast(), _marker: PhantomData }
800230f0:	0c008deb 	jal	800237ac <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hdfa4597bab69b231E>
800230f4:	00000000 	nop
800230f8:	afa20014 	sw	v0,20(sp)
    }
800230fc:	8fa20014 	lw	v0,20(sp)
80023100:	8fbf001c 	lw	ra,28(sp)
80023104:	27bd0020 	addiu	sp,sp,32
80023108:	03e00008 	jr	ra
8002310c:	00000000 	nop

80023110 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h2becb047ac27694dE>:
    pub const fn as_ptr(self) -> *mut T {
80023110:	27bdfff8 	addiu	sp,sp,-8
80023114:	00801025 	move	v0,a0
80023118:	afa20000 	sw	v0,0(sp)
8002311c:	afa20004 	sw	v0,4(sp)
80023120:	27bd0008 	addiu	sp,sp,8
    }
80023124:	03e00008 	jr	ra
80023128:	00000000 	nop

8002312c <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h50321b64dfdca2dfE>:
    pub const fn as_ptr(self) -> *mut T {
8002312c:	27bdfff8 	addiu	sp,sp,-8
80023130:	00801025 	move	v0,a0
80023134:	afa20000 	sw	v0,0(sp)
80023138:	afa20004 	sw	v0,4(sp)
8002313c:	27bd0008 	addiu	sp,sp,8
    }
80023140:	03e00008 	jr	ra
80023144:	00000000 	nop

80023148 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h717033e60a03dc35E>:
    pub const fn as_ptr(self) -> *mut T {
80023148:	27bdfff8 	addiu	sp,sp,-8
8002314c:	00801025 	move	v0,a0
80023150:	afa20000 	sw	v0,0(sp)
80023154:	afa20004 	sw	v0,4(sp)
80023158:	27bd0008 	addiu	sp,sp,8
    }
8002315c:	03e00008 	jr	ra
80023160:	00000000 	nop

80023164 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h781c0940e9c9d438E>:
    pub const fn as_ptr(self) -> *mut T {
80023164:	27bdfff8 	addiu	sp,sp,-8
80023168:	00801025 	move	v0,a0
8002316c:	afa20000 	sw	v0,0(sp)
80023170:	afa20004 	sw	v0,4(sp)
80023174:	27bd0008 	addiu	sp,sp,8
    }
80023178:	03e00008 	jr	ra
8002317c:	00000000 	nop

80023180 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hed7aa36e9ce417dcE>:
    pub const fn as_ptr(self) -> *mut T {
80023180:	27bdfff8 	addiu	sp,sp,-8
80023184:	00801025 	move	v0,a0
80023188:	afa20000 	sw	v0,0(sp)
8002318c:	afa20004 	sw	v0,4(sp)
80023190:	27bd0008 	addiu	sp,sp,8
    }
80023194:	03e00008 	jr	ra
80023198:	00000000 	nop

8002319c <_ZN4core3ptr6unique15Unique$LT$T$GT$8dangling17hd57842846b6d472fE>:
    pub const fn dangling() -> Self {
8002319c:	27bdffe8 	addiu	sp,sp,-24
800231a0:	afbf0014 	sw	ra,20(sp)
        Unique { pointer: NonNull::dangling(), _marker: PhantomData }
800231a4:	0c008dfb 	jal	800237ec <_ZN4core3ptr8non_null16NonNull$LT$T$GT$8dangling17h6356eae8afd172b5E>
800231a8:	00000000 	nop
800231ac:	afa20010 	sw	v0,16(sp)
    }
800231b0:	8fa20010 	lw	v0,16(sp)
800231b4:	8fbf0014 	lw	ra,20(sp)
800231b8:	27bd0018 	addiu	sp,sp,24
800231bc:	03e00008 	jr	ra
800231c0:	00000000 	nop

800231c4 <_ZN4core3ptr70drop_in_place$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$17ha27294674f2d85aaE>:
800231c4:	27bdffe8 	addiu	sp,sp,-24
800231c8:	afbf0014 	sw	ra,20(sp)
800231cc:	afa40010 	sw	a0,16(sp)
800231d0:	0c00aa26 	jal	8002a898 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h96ce9dcea3ab691dE>
800231d4:	00000000 	nop
800231d8:	8fbf0014 	lw	ra,20(sp)
800231dc:	27bd0018 	addiu	sp,sp,24
800231e0:	03e00008 	jr	ra
800231e4:	00000000 	nop

800231e8 <_ZN4core3ptr70drop_in_place$LT$alloc..raw_vec..RawVec$LT$mos_6502..proc..Env$GT$$GT$17h3f7ef903e6b652c3E>:
800231e8:	27bdffe8 	addiu	sp,sp,-24
800231ec:	afbf0014 	sw	ra,20(sp)
800231f0:	afa40010 	sw	a0,16(sp)
800231f4:	0c00ac3b 	jal	8002b0ec <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd5112dc285590409E>
800231f8:	00000000 	nop
800231fc:	8fbf0014 	lw	ra,20(sp)
80023200:	27bd0018 	addiu	sp,sp,24
80023204:	03e00008 	jr	ra
80023208:	00000000 	nop

8002320c <_ZN4core3ptr71drop_in_place$LT$alloc..raw_vec..RawVec$LT$elf..ProgramHeader32$GT$$GT$17hc7d32bccadf7a6c2E>:
8002320c:	27bdffe8 	addiu	sp,sp,-24
80023210:	afbf0014 	sw	ra,20(sp)
80023214:	afa40010 	sw	a0,16(sp)
80023218:	0c00ac1e 	jal	8002b078 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcfa98516ac4eec91E>
8002321c:	00000000 	nop
80023220:	8fbf0014 	lw	ra,20(sp)
80023224:	27bd0018 	addiu	sp,sp,24
80023228:	03e00008 	jr	ra
8002322c:	00000000 	nop

80023230 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17h8c006c6811ce4a49E>:
80023230:	27bdffe8 	addiu	sp,sp,-24
80023234:	afbf0014 	sw	ra,20(sp)
80023238:	afa40010 	sw	a0,16(sp)
8002323c:	24840004 	addiu	a0,a0,4
80023240:	0c008994 	jal	80022650 <_ZN4core3ptr45drop_in_place$LT$core..cell..BorrowRefMut$GT$17h9ae5ebfb1aafb711E>
80023244:	00000000 	nop
80023248:	8fbf0014 	lw	ra,20(sp)
8002324c:	27bd0018 	addiu	sp,sp,24
80023250:	03e00008 	jr	ra
80023254:	00000000 	nop

80023258 <_ZN4core3ptr72drop_in_place$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$17h1e363c2b47fcb277E>:
80023258:	27bdffe8 	addiu	sp,sp,-24
8002325c:	afbf0014 	sw	ra,20(sp)
80023260:	afa40010 	sw	a0,16(sp)
80023264:	24840004 	addiu	a0,a0,4
80023268:	0c008ca9 	jal	800232a4 <_ZN4core3ptr75drop_in_place$LT$core..cell..UnsafeCell$LT$mos_6502..util..ListNode$GT$$GT$17hf85e3cc01669e184E>
8002326c:	00000000 	nop
80023270:	8fbf0014 	lw	ra,20(sp)
80023274:	27bd0018 	addiu	sp,sp,24
80023278:	03e00008 	jr	ra
8002327c:	00000000 	nop

80023280 <_ZN4core3ptr75drop_in_place$LT$alloc..raw_vec..RawVec$LT$mos_6502..mm..page..Page$GT$$GT$17h0613cfabe36b9790E>:
80023280:	27bdffe8 	addiu	sp,sp,-24
80023284:	afbf0014 	sw	ra,20(sp)
80023288:	afa40010 	sw	a0,16(sp)
8002328c:	0c00ac01 	jal	8002b004 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcb9be949c61c610dE>
80023290:	00000000 	nop
80023294:	8fbf0014 	lw	ra,20(sp)
80023298:	27bd0018 	addiu	sp,sp,24
8002329c:	03e00008 	jr	ra
800232a0:	00000000 	nop

800232a4 <_ZN4core3ptr75drop_in_place$LT$core..cell..UnsafeCell$LT$mos_6502..util..ListNode$GT$$GT$17hf85e3cc01669e184E>:
800232a4:	27bdffe8 	addiu	sp,sp,-24
800232a8:	afbf0014 	sw	ra,20(sp)
800232ac:	afa40010 	sw	a0,16(sp)
800232b0:	0c0089a6 	jal	80022698 <_ZN4core3ptr45drop_in_place$LT$mos_6502..util..ListNode$GT$17h54ee73ac0cf3d837E>
800232b4:	00000000 	nop
800232b8:	8fbf0014 	lw	ra,20(sp)
800232bc:	27bd0018 	addiu	sp,sp,24
800232c0:	03e00008 	jr	ra
800232c4:	00000000 	nop

800232c8 <_ZN4core3ptr76drop_in_place$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$17hb5d8d37fe3972aa7E>:
800232c8:	27bdffe8 	addiu	sp,sp,-24
800232cc:	afbf0014 	sw	ra,20(sp)
800232d0:	afa40010 	sw	a0,16(sp)
800232d4:	0c00aa50 	jal	8002a940 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hbfbc2a39ac570a22E>
800232d8:	00000000 	nop
800232dc:	8fbf0014 	lw	ra,20(sp)
800232e0:	27bd0018 	addiu	sp,sp,24
800232e4:	03e00008 	jr	ra
800232e8:	00000000 	nop

800232ec <_ZN4core3ptr77drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..print..Stdout$GT$$GT$17hbfe0b34b4470ca99E>:
800232ec:	27bdffe8 	addiu	sp,sp,-24
800232f0:	afbf0014 	sw	ra,20(sp)
800232f4:	afa40010 	sw	a0,16(sp)
800232f8:	0c00abc6 	jal	8002af18 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc9eb2f38d7fb0af7E>
800232fc:	00000000 	nop
80023300:	8fbf0014 	lw	ra,20(sp)
80023304:	27bd0018 	addiu	sp,sp,24
80023308:	03e00008 	jr	ra
8002330c:	00000000 	nop

80023310 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hdf97099e35e4f9ffE>:
    /// println!("{s:?}"); // It'll print: "[4, 2, 3]".
    /// ```
    #[stable(feature = "ptr_as_ref", since = "1.9.0")]
    #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
    #[inline]
    pub const unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
80023310:	27bdffe0 	addiu	sp,sp,-32
80023314:	afbf001c 	sw	ra,28(sp)
80023318:	afa40010 	sw	a0,16(sp)
8002331c:	afa40018 	sw	a0,24(sp)
        // SAFETY: the caller must guarantee that `self` is be valid for
        // a mutable reference if it isn't null.
        if self.is_null() { None } else { unsafe { Some(&mut *self) } }
80023320:	0c008ce2 	jal	80023388 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h66c96c3047c4905fE>
80023324:	00000000 	nop
80023328:	14400007 	bnez	v0,80023348 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hdf97099e35e4f9ffE+0x38>
8002332c:	00000000 	nop
80023330:	08008cce 	j	80023338 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hdf97099e35e4f9ffE+0x28>
80023334:	00000000 	nop
80023338:	8fa10010 	lw	at,16(sp)
8002333c:	afa10014 	sw	at,20(sp)
80023340:	08008cd5 	j	80023354 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hdf97099e35e4f9ffE+0x44>
80023344:	00000000 	nop
80023348:	afa00014 	sw	zero,20(sp)
8002334c:	08008cd5 	j	80023354 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hdf97099e35e4f9ffE+0x44>
80023350:	00000000 	nop
    }
80023354:	8fa20014 	lw	v0,20(sp)
80023358:	8fbf001c 	lw	ra,28(sp)
8002335c:	27bd0020 	addiu	sp,sp,32
80023360:	03e00008 	jr	ra
80023364:	00000000 	nop

80023368 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17h0593c9794f367bfbE>:
        fn runtime_impl(ptr: *mut u8) -> bool {
80023368:	27bdfff0 	addiu	sp,sp,-16
8002336c:	afa40004 	sw	a0,4(sp)
80023370:	afa40008 	sw	a0,8(sp)
80023374:	afa4000c 	sw	a0,12(sp)
            ptr.addr() == 0
80023378:	2c820001 	sltiu	v0,a0,1
8002337c:	27bd0010 	addiu	sp,sp,16
        }
80023380:	03e00008 	jr	ra
80023384:	00000000 	nop

80023388 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h66c96c3047c4905fE>:
    pub const fn is_null(self) -> bool {
80023388:	27bdffe0 	addiu	sp,sp,-32
8002338c:	afbf001c 	sw	ra,28(sp)
80023390:	afa40018 	sw	a0,24(sp)
        const_eval_select((self as *mut u8,), const_impl, runtime_impl)
80023394:	afa40014 	sw	a0,20(sp)
80023398:	8fa40014 	lw	a0,20(sp)
8002339c:	0c008cda 	jal	80023368 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17h0593c9794f367bfbE>
800233a0:	00000000 	nop
    }
800233a4:	8fbf001c 	lw	ra,28(sp)
800233a8:	27bd0020 	addiu	sp,sp,32
800233ac:	03e00008 	jr	ra
800233b0:	00000000 	nop

800233b4 <_ZN4core3ptr81drop_in_place$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h7dd3cf384c6b64a9E>:
800233b4:	27bdffe8 	addiu	sp,sp,-24
800233b8:	afbf0014 	sw	ra,20(sp)
800233bc:	afa40010 	sw	a0,16(sp)
800233c0:	0c008cf6 	jal	800233d8 <_ZN4core3ptr83drop_in_place$LT$core..cell..UnsafeCell$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h1836c461bc20fe60E>
800233c4:	00000000 	nop
800233c8:	8fbf0014 	lw	ra,20(sp)
800233cc:	27bd0018 	addiu	sp,sp,24
800233d0:	03e00008 	jr	ra
800233d4:	00000000 	nop

800233d8 <_ZN4core3ptr83drop_in_place$LT$core..cell..UnsafeCell$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h1836c461bc20fe60E>:
800233d8:	27bdffe8 	addiu	sp,sp,-24
800233dc:	afbf0014 	sw	ra,20(sp)
800233e0:	afa40010 	sw	a0,16(sp)
800233e4:	0c008a89 	jal	80022a24 <_ZN4core3ptr53drop_in_place$LT$mos_6502..util..DoubleLinkedList$GT$17h37315ec4c416cc7bE>
800233e8:	00000000 	nop
800233ec:	8fbf0014 	lw	ra,20(sp)
800233f0:	27bd0018 	addiu	sp,sp,24
800233f4:	03e00008 	jr	ra
800233f8:	00000000 	nop

800233fc <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17hde8d744f358f0af3E>:
800233fc:	27bdffe8 	addiu	sp,sp,-24
80023400:	afbf0014 	sw	ra,20(sp)
80023404:	afa40010 	sw	a0,16(sp)
80023408:	0c00abd4 	jal	8002af50 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd4e56e67a5137b0eE>
8002340c:	00000000 	nop
80023410:	8fbf0014 	lw	ra,20(sp)
80023414:	27bd0018 	addiu	sp,sp,24
80023418:	03e00008 	jr	ra
8002341c:	00000000 	nop

80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>:
80023420:	27bdffe8 	addiu	sp,sp,-24
80023424:	afbf0014 	sw	ra,20(sp)
80023428:	afa40010 	sw	a0,16(sp)
8002342c:	0c00ab99 	jal	8002ae64 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d4daa40a4419986E>
80023430:	00000000 	nop
80023434:	8fbf0014 	lw	ra,20(sp)
80023438:	27bd0018 	addiu	sp,sp,24
8002343c:	03e00008 	jr	ra
80023440:	00000000 	nop

80023444 <_ZN4core3ptr8metadata14from_raw_parts17h253aeea765640668E>:
///
/// [`slice::from_raw_parts`]: crate::slice::from_raw_parts
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts<T: ?Sized>(
80023444:	27bdffe8 	addiu	sp,sp,-24
80023448:	afa40010 	sw	a0,16(sp)
8002344c:	afa50014 	sw	a1,20(sp)
    metadata: <T as Pointee>::Metadata,
) -> *const T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
80023450:	afa40008 	sw	a0,8(sp)
80023454:	afa5000c 	sw	a1,12(sp)
80023458:	8fa20008 	lw	v0,8(sp)
8002345c:	8fa1000c 	lw	at,12(sp)
80023460:	afa20000 	sw	v0,0(sp)
80023464:	afa10004 	sw	at,4(sp)
80023468:	8fa20000 	lw	v0,0(sp)
8002346c:	8fa30004 	lw	v1,4(sp)
80023470:	27bd0018 	addiu	sp,sp,24
}
80023474:	03e00008 	jr	ra
80023478:	00000000 	nop

8002347c <_ZN4core3ptr8metadata14from_raw_parts17hb165f491e8dde497E>:
pub const fn from_raw_parts<T: ?Sized>(
8002347c:	27bdffe8 	addiu	sp,sp,-24
80023480:	afa40010 	sw	a0,16(sp)
80023484:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
80023488:	afa40008 	sw	a0,8(sp)
8002348c:	afa5000c 	sw	a1,12(sp)
80023490:	8fa20008 	lw	v0,8(sp)
80023494:	8fa1000c 	lw	at,12(sp)
80023498:	afa20000 	sw	v0,0(sp)
8002349c:	afa10004 	sw	at,4(sp)
800234a0:	8fa20000 	lw	v0,0(sp)
800234a4:	8fa30004 	lw	v1,4(sp)
800234a8:	27bd0018 	addiu	sp,sp,24
}
800234ac:	03e00008 	jr	ra
800234b0:	00000000 	nop

800234b4 <_ZN4core3ptr8metadata14from_raw_parts17hc8a2e5b04bc98435E>:
pub const fn from_raw_parts<T: ?Sized>(
800234b4:	27bdffe8 	addiu	sp,sp,-24
800234b8:	afa40010 	sw	a0,16(sp)
800234bc:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
800234c0:	afa40008 	sw	a0,8(sp)
800234c4:	afa5000c 	sw	a1,12(sp)
800234c8:	8fa20008 	lw	v0,8(sp)
800234cc:	8fa1000c 	lw	at,12(sp)
800234d0:	afa20000 	sw	v0,0(sp)
800234d4:	afa10004 	sw	at,4(sp)
800234d8:	8fa20000 	lw	v0,0(sp)
800234dc:	8fa30004 	lw	v1,4(sp)
800234e0:	27bd0018 	addiu	sp,sp,24
}
800234e4:	03e00008 	jr	ra
800234e8:	00000000 	nop

800234ec <_ZN4core3ptr8metadata18from_raw_parts_mut17h5d3a87ccf089e343E>:
///
/// See the documentation of [`from_raw_parts`] for more details.
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts_mut<T: ?Sized>(
800234ec:	27bdffe8 	addiu	sp,sp,-24
800234f0:	afa40010 	sw	a0,16(sp)
800234f4:	afa50014 	sw	a1,20(sp)
    metadata: <T as Pointee>::Metadata,
) -> *mut T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
800234f8:	afa40008 	sw	a0,8(sp)
800234fc:	afa5000c 	sw	a1,12(sp)
80023500:	8fa20008 	lw	v0,8(sp)
80023504:	8fa1000c 	lw	at,12(sp)
80023508:	afa20000 	sw	v0,0(sp)
8002350c:	afa10004 	sw	at,4(sp)
80023510:	8fa20000 	lw	v0,0(sp)
80023514:	8fa30004 	lw	v1,4(sp)
80023518:	27bd0018 	addiu	sp,sp,24
}
8002351c:	03e00008 	jr	ra
80023520:	00000000 	nop

80023524 <_ZN4core3ptr8metadata18from_raw_parts_mut17hbeaa5bd3264b098aE>:
pub const fn from_raw_parts_mut<T: ?Sized>(
80023524:	27bdffe8 	addiu	sp,sp,-24
80023528:	afa40010 	sw	a0,16(sp)
8002352c:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80023530:	afa40008 	sw	a0,8(sp)
80023534:	afa5000c 	sw	a1,12(sp)
80023538:	8fa20008 	lw	v0,8(sp)
8002353c:	8fa1000c 	lw	at,12(sp)
80023540:	afa20000 	sw	v0,0(sp)
80023544:	afa10004 	sw	at,4(sp)
80023548:	8fa20000 	lw	v0,0(sp)
8002354c:	8fa30004 	lw	v1,4(sp)
80023550:	27bd0018 	addiu	sp,sp,24
}
80023554:	03e00008 	jr	ra
80023558:	00000000 	nop

8002355c <_ZN4core3ptr8metadata18from_raw_parts_mut17hfac957d53fd07a11E>:
pub const fn from_raw_parts_mut<T: ?Sized>(
8002355c:	27bdffe8 	addiu	sp,sp,-24
80023560:	afa40010 	sw	a0,16(sp)
80023564:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80023568:	afa40008 	sw	a0,8(sp)
8002356c:	afa5000c 	sw	a1,12(sp)
80023570:	8fa20008 	lw	v0,8(sp)
80023574:	8fa1000c 	lw	at,12(sp)
80023578:	afa20000 	sw	v0,0(sp)
8002357c:	afa10004 	sw	at,4(sp)
80023580:	8fa20000 	lw	v0,0(sp)
80023584:	8fa30004 	lw	v1,4(sp)
80023588:	27bd0018 	addiu	sp,sp,24
}
8002358c:	03e00008 	jr	ra
80023590:	00000000 	nop

80023594 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h724b00e9bfde3be3E>:
    /// let ptr = unsafe { NonNull::<u32>::new_unchecked(std::ptr::null_mut()) };
    /// ```
    #[stable(feature = "nonnull", since = "1.25.0")]
    #[rustc_const_stable(feature = "const_nonnull_new_unchecked", since = "1.25.0")]
    #[inline]
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
80023594:	27bdffe0 	addiu	sp,sp,-32
80023598:	afbf001c 	sw	ra,28(sp)
8002359c:	afa40010 	sw	a0,16(sp)
800235a0:	afa40018 	sw	a0,24(sp)
        // SAFETY: the caller must guarantee that `ptr` is non-null.
        unsafe {
            assert_unsafe_precondition!(
800235a4:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
800235a8:	00000000 	nop
800235ac:	1440000a 	bnez	v0,800235d8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h724b00e9bfde3be3E+0x44>
800235b0:	00000000 	nop
800235b4:	08008d6f 	j	800235bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h724b00e9bfde3be3E+0x28>
800235b8:	00000000 	nop
                check_language_ub,
                "NonNull::new_unchecked requires that the pointer is non-null",
                (ptr: *mut () = ptr as *mut ()) => !ptr.is_null()
            );
            NonNull { pointer: ptr as _ }
800235bc:	8fa10010 	lw	at,16(sp)
800235c0:	afa10014 	sw	at,20(sp)
        }
    }
800235c4:	8fa20014 	lw	v0,20(sp)
800235c8:	8fbf001c 	lw	ra,28(sp)
800235cc:	27bd0020 	addiu	sp,sp,32
800235d0:	03e00008 	jr	ra
800235d4:	00000000 	nop
            assert_unsafe_precondition!(
800235d8:	8fa40010 	lw	a0,16(sp)
800235dc:	0c008d91 	jal	80023644 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h51ad7f3248ca87b3E>
800235e0:	00000000 	nop
800235e4:	08008d6f 	j	800235bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h724b00e9bfde3be3E+0x28>
800235e8:	00000000 	nop

800235ec <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h7bbe5a284200f65aE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
800235ec:	27bdffe0 	addiu	sp,sp,-32
800235f0:	afbf001c 	sw	ra,28(sp)
800235f4:	afa40010 	sw	a0,16(sp)
800235f8:	afa40018 	sw	a0,24(sp)
            assert_unsafe_precondition!(
800235fc:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80023600:	00000000 	nop
80023604:	1440000a 	bnez	v0,80023630 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h7bbe5a284200f65aE+0x44>
80023608:	00000000 	nop
8002360c:	08008d85 	j	80023614 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h7bbe5a284200f65aE+0x28>
80023610:	00000000 	nop
            NonNull { pointer: ptr as _ }
80023614:	8fa10010 	lw	at,16(sp)
80023618:	afa10014 	sw	at,20(sp)
    }
8002361c:	8fa20014 	lw	v0,20(sp)
80023620:	8fbf001c 	lw	ra,28(sp)
80023624:	27bd0020 	addiu	sp,sp,32
80023628:	03e00008 	jr	ra
8002362c:	00000000 	nop
            assert_unsafe_precondition!(
80023630:	8fa40010 	lw	a0,16(sp)
80023634:	0c008d91 	jal	80023644 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h51ad7f3248ca87b3E>
80023638:	00000000 	nop
8002363c:	08008d85 	j	80023614 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h7bbe5a284200f65aE+0x28>
80023640:	00000000 	nop

80023644 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h51ad7f3248ca87b3E>:
            const fn precondition_check($($name:$ty),*) {
80023644:	27bdffe8 	addiu	sp,sp,-24
80023648:	afbf0014 	sw	ra,20(sp)
8002364c:	afa40010 	sw	a0,16(sp)
                (ptr: *mut () = ptr as *mut ()) => !ptr.is_null()
80023650:	0c00e636 	jal	800398d8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h70d2a8f8e7d9a2d4E>
80023654:	00000000 	nop
80023658:	14400007 	bnez	v0,80023678 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h51ad7f3248ca87b3E+0x34>
8002365c:	00000000 	nop
80023660:	08008d9a 	j	80023668 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h51ad7f3248ca87b3E+0x24>
80023664:	00000000 	nop
            }
80023668:	8fbf0014 	lw	ra,20(sp)
8002366c:	27bd0018 	addiu	sp,sp,24
80023670:	03e00008 	jr	ra
80023674:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80023678:	3c018105 	lui	at,0x8105
8002367c:	2424e60c 	addiu	a0,at,-6644
80023680:	2405005d 	li	a1,93
80023684:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80023688:	00000000 	nop

8002368c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h11bca189ed734ee1E>:
    #[stable(feature = "nonnull_cast", since = "1.27.0")]
    #[rustc_const_stable(feature = "const_nonnull_cast", since = "1.36.0")]
    #[must_use = "this returns the result of the operation, \
                  without modifying the original"]
    #[inline]
    pub const fn cast<U>(self) -> NonNull<U> {
8002368c:	27bdffe8 	addiu	sp,sp,-24
80023690:	afa40008 	sw	a0,8(sp)
80023694:	afa5000c 	sw	a1,12(sp)
80023698:	afa40010 	sw	a0,16(sp)
8002369c:	afa50014 	sw	a1,20(sp)
        // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
800236a0:	afa40004 	sw	a0,4(sp)
    }
800236a4:	8fa20004 	lw	v0,4(sp)
800236a8:	27bd0018 	addiu	sp,sp,24
800236ac:	03e00008 	jr	ra
800236b0:	00000000 	nop

800236b4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h136225984f14e4d2E>:
    pub const fn cast<U>(self) -> NonNull<U> {
800236b4:	27bdfff0 	addiu	sp,sp,-16
800236b8:	afa40008 	sw	a0,8(sp)
800236bc:	afa4000c 	sw	a0,12(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
800236c0:	afa40004 	sw	a0,4(sp)
    }
800236c4:	8fa20004 	lw	v0,4(sp)
800236c8:	27bd0010 	addiu	sp,sp,16
800236cc:	03e00008 	jr	ra
800236d0:	00000000 	nop

800236d4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h2e0bb1d1b24dd1f0E>:
    pub const fn cast<U>(self) -> NonNull<U> {
800236d4:	27bdffe8 	addiu	sp,sp,-24
800236d8:	afa40008 	sw	a0,8(sp)
800236dc:	afa5000c 	sw	a1,12(sp)
800236e0:	afa40010 	sw	a0,16(sp)
800236e4:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
800236e8:	afa40004 	sw	a0,4(sp)
    }
800236ec:	8fa20004 	lw	v0,4(sp)
800236f0:	27bd0018 	addiu	sp,sp,24
800236f4:	03e00008 	jr	ra
800236f8:	00000000 	nop

800236fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h4c014cbb06bb9c2aE>:
    pub const fn cast<U>(self) -> NonNull<U> {
800236fc:	27bdfff0 	addiu	sp,sp,-16
80023700:	afa40008 	sw	a0,8(sp)
80023704:	afa4000c 	sw	a0,12(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80023708:	afa40004 	sw	a0,4(sp)
    }
8002370c:	8fa20004 	lw	v0,4(sp)
80023710:	27bd0010 	addiu	sp,sp,16
80023714:	03e00008 	jr	ra
80023718:	00000000 	nop

8002371c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h6bf599961409530eE>:
    pub const fn cast<U>(self) -> NonNull<U> {
8002371c:	27bdfff0 	addiu	sp,sp,-16
80023720:	afa40008 	sw	a0,8(sp)
80023724:	afa4000c 	sw	a0,12(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80023728:	afa40004 	sw	a0,4(sp)
    }
8002372c:	8fa20004 	lw	v0,4(sp)
80023730:	27bd0010 	addiu	sp,sp,16
80023734:	03e00008 	jr	ra
80023738:	00000000 	nop

8002373c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h716a65c70d91448aE>:
    pub const fn cast<U>(self) -> NonNull<U> {
8002373c:	27bdffe8 	addiu	sp,sp,-24
80023740:	afa40008 	sw	a0,8(sp)
80023744:	afa5000c 	sw	a1,12(sp)
80023748:	afa40010 	sw	a0,16(sp)
8002374c:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80023750:	afa40004 	sw	a0,4(sp)
    }
80023754:	8fa20004 	lw	v0,4(sp)
80023758:	27bd0018 	addiu	sp,sp,24
8002375c:	03e00008 	jr	ra
80023760:	00000000 	nop

80023764 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h7a8419fd78cfba42E>:
    pub const fn cast<U>(self) -> NonNull<U> {
80023764:	27bdfff0 	addiu	sp,sp,-16
80023768:	afa40008 	sw	a0,8(sp)
8002376c:	afa4000c 	sw	a0,12(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80023770:	afa40004 	sw	a0,4(sp)
    }
80023774:	8fa20004 	lw	v0,4(sp)
80023778:	27bd0010 	addiu	sp,sp,16
8002377c:	03e00008 	jr	ra
80023780:	00000000 	nop

80023784 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h7f9474a629996583E>:
    pub const fn cast<U>(self) -> NonNull<U> {
80023784:	27bdffe8 	addiu	sp,sp,-24
80023788:	afa40008 	sw	a0,8(sp)
8002378c:	afa5000c 	sw	a1,12(sp)
80023790:	afa40010 	sw	a0,16(sp)
80023794:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80023798:	afa40004 	sw	a0,4(sp)
    }
8002379c:	8fa20004 	lw	v0,4(sp)
800237a0:	27bd0018 	addiu	sp,sp,24
800237a4:	03e00008 	jr	ra
800237a8:	00000000 	nop

800237ac <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hdfa4597bab69b231E>:
    pub const fn cast<U>(self) -> NonNull<U> {
800237ac:	27bdfff0 	addiu	sp,sp,-16
800237b0:	afa40008 	sw	a0,8(sp)
800237b4:	afa4000c 	sw	a0,12(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
800237b8:	afa40004 	sw	a0,4(sp)
    }
800237bc:	8fa20004 	lw	v0,4(sp)
800237c0:	27bd0010 	addiu	sp,sp,16
800237c4:	03e00008 	jr	ra
800237c8:	00000000 	nop

800237cc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hf16a927142c9d252E>:
    pub const fn cast<U>(self) -> NonNull<U> {
800237cc:	27bdfff0 	addiu	sp,sp,-16
800237d0:	afa40008 	sw	a0,8(sp)
800237d4:	afa4000c 	sw	a0,12(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
800237d8:	afa40004 	sw	a0,4(sp)
    }
800237dc:	8fa20004 	lw	v0,4(sp)
800237e0:	27bd0010 	addiu	sp,sp,16
800237e4:	03e00008 	jr	ra
800237e8:	00000000 	nop

800237ec <_ZN4core3ptr8non_null16NonNull$LT$T$GT$8dangling17h6356eae8afd172b5E>:
    pub const fn dangling() -> Self {
800237ec:	27bdffe0 	addiu	sp,sp,-32
800237f0:	afbf001c 	sw	ra,28(sp)
800237f4:	24040004 	li	a0,4
800237f8:	afa40018 	sw	a0,24(sp)
            let ptr = crate::ptr::dangling_mut::<T>();
800237fc:	afa40014 	sw	a0,20(sp)
            NonNull::new_unchecked(ptr)
80023800:	0c008d7b 	jal	800235ec <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h7bbe5a284200f65aE>
80023804:	00000000 	nop
    }
80023808:	8fbf001c 	lw	ra,28(sp)
8002380c:	27bd0020 	addiu	sp,sp,32
80023810:	03e00008 	jr	ra
80023814:	00000000 	nop

80023818 <_ZN4core3ptr91drop_in_place$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17he75e188b59ecf565E>:
80023818:	27bdffe8 	addiu	sp,sp,-24
8002381c:	afbf0014 	sw	ra,20(sp)
80023820:	afa40010 	sw	a0,16(sp)
80023824:	0c008e18 	jal	80023860 <_ZN4core3ptr93drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17hb59a4cdc56e70ff1E>
80023828:	00000000 	nop
8002382c:	8fbf0014 	lw	ra,20(sp)
80023830:	27bd0018 	addiu	sp,sp,24
80023834:	03e00008 	jr	ra
80023838:	00000000 	nop

8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>:
8002383c:	27bdffe8 	addiu	sp,sp,-24
80023840:	afbf0014 	sw	ra,20(sp)
80023844:	afa40010 	sw	a0,16(sp)
80023848:	0c00a959 	jal	8002a564 <_ZN68_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h9aae573681cb7ef3E>
8002384c:	00000000 	nop
80023850:	8fbf0014 	lw	ra,20(sp)
80023854:	27bd0018 	addiu	sp,sp,24
80023858:	03e00008 	jr	ra
8002385c:	00000000 	nop

80023860 <_ZN4core3ptr93drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17hb59a4cdc56e70ff1E>:
80023860:	27bdffe8 	addiu	sp,sp,-24
80023864:	afbf0014 	sw	ra,20(sp)
80023868:	afa40010 	sw	a0,16(sp)
8002386c:	0c008bdc 	jal	80022f70 <_ZN4core3ptr63drop_in_place$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$17h6420080e7ed5943bE>
80023870:	00000000 	nop
80023874:	8fbf0014 	lw	ra,20(sp)
80023878:	27bd0018 	addiu	sp,sp,24
8002387c:	03e00008 	jr	ra
80023880:	00000000 	nop

80023884 <_ZN4core3ptr96drop_in_place$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17hc5893447d9b617eaE>:
80023884:	27bdffe8 	addiu	sp,sp,-24
80023888:	afbf0014 	sw	ra,20(sp)
8002388c:	afa40010 	sw	a0,16(sp)
80023890:	0c008e33 	jal	800238cc <_ZN4core3ptr98drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17hfcfe3f2ec80b2892E>
80023894:	00000000 	nop
80023898:	8fbf0014 	lw	ra,20(sp)
8002389c:	27bd0018 	addiu	sp,sp,24
800238a0:	03e00008 	jr	ra
800238a4:	00000000 	nop

800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>:
800238a8:	27bdffe8 	addiu	sp,sp,-24
800238ac:	afbf0014 	sw	ra,20(sp)
800238b0:	afa40010 	sw	a0,16(sp)
800238b4:	0c00abf2 	jal	8002afc8 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf158c34341107840E>
800238b8:	00000000 	nop
800238bc:	8fbf0014 	lw	ra,20(sp)
800238c0:	27bd0018 	addiu	sp,sp,24
800238c4:	03e00008 	jr	ra
800238c8:	00000000 	nop

800238cc <_ZN4core3ptr98drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17hfcfe3f2ec80b2892E>:
800238cc:	27bdffe8 	addiu	sp,sp,-24
800238d0:	afbf0014 	sw	ra,20(sp)
800238d4:	afa40010 	sw	a0,16(sp)
800238d8:	0c008bf6 	jal	80022fd8 <_ZN4core3ptr68drop_in_place$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$17h802ad627b365b2bbE>
800238dc:	00000000 	nop
800238e0:	8fbf0014 	lw	ra,20(sp)
800238e4:	27bd0018 	addiu	sp,sp,24
800238e8:	03e00008 	jr	ra
800238ec:	00000000 	nop

800238f0 <_ZN4core3ptr98drop_in_place$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$17hc54ba020a54e6bdcE>:
800238f0:	27bdffe8 	addiu	sp,sp,-24
800238f4:	afbf0014 	sw	ra,20(sp)
800238f8:	afa40010 	sw	a0,16(sp)
800238fc:	0c0086b1 	jal	80021ac4 <_ZN4core3ptr100drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$17h782edfc004453577E>
80023900:	00000000 	nop
80023904:	8fbf0014 	lw	ra,20(sp)
80023908:	27bd0018 	addiu	sp,sp,24
8002390c:	03e00008 	jr	ra
80023910:	00000000 	nop

80023914 <_ZN4core3ptr9alignment9Alignment13new_unchecked17hfaceacafb5b35effE>:
    /// Equivalently, it must be `1 << exp` for some `exp` in `0..usize::BITS`.
    /// It must *not* be zero.
    #[unstable(feature = "ptr_alignment_type", issue = "102070")]
    #[rustc_const_unstable(feature = "ptr_alignment_type", issue = "102070")]
    #[inline]
    pub const unsafe fn new_unchecked(align: usize) -> Self {
80023914:	27bdffe0 	addiu	sp,sp,-32
80023918:	afbf001c 	sw	ra,28(sp)
8002391c:	afa40014 	sw	a0,20(sp)
80023920:	afa40018 	sw	a0,24(sp)
        #[cfg(debug_assertions)]
        assert_unsafe_precondition!(
80023924:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80023928:	00000000 	nop
8002392c:	14400008 	bnez	v0,80023950 <_ZN4core3ptr9alignment9Alignment13new_unchecked17hfaceacafb5b35effE+0x3c>
80023930:	00000000 	nop
80023934:	08008e4f 	j	8002393c <_ZN4core3ptr9alignment9Alignment13new_unchecked17hfaceacafb5b35effE+0x28>
80023938:	00000000 	nop
        );

        // SAFETY: By precondition, this must be a power of two, and
        // our variants encompass all possible powers of two.
        unsafe { mem::transmute::<usize, Alignment>(align) }
    }
8002393c:	8fa20014 	lw	v0,20(sp)
80023940:	8fbf001c 	lw	ra,28(sp)
80023944:	27bd0020 	addiu	sp,sp,32
80023948:	03e00008 	jr	ra
8002394c:	00000000 	nop
        assert_unsafe_precondition!(
80023950:	8fa40014 	lw	a0,20(sp)
80023954:	0c008e59 	jal	80023964 <_ZN4core3ptr9alignment9Alignment13new_unchecked18precondition_check17hd495e414f33b955eE>
80023958:	00000000 	nop
8002395c:	08008e4f 	j	8002393c <_ZN4core3ptr9alignment9Alignment13new_unchecked17hfaceacafb5b35effE+0x28>
80023960:	00000000 	nop

80023964 <_ZN4core3ptr9alignment9Alignment13new_unchecked18precondition_check17hd495e414f33b955eE>:
            const fn precondition_check($($name:$ty),*) {
80023964:	27bdffe0 	addiu	sp,sp,-32
80023968:	afa40010 	sw	a0,16(sp)
8002396c:	afa40014 	sw	a0,20(sp)
80023970:	afa40018 	sw	a0,24(sp)
            intrinsics::ctpop(self as $ActualT) as u32
80023974:	00040842 	srl	at,a0,0x1
80023978:	3c025555 	lui	v0,0x5555
8002397c:	34425555 	ori	v0,v0,0x5555
80023980:	00220824 	and	at,at,v0
80023984:	00811023 	subu	v0,a0,at
80023988:	3c013333 	lui	at,0x3333
8002398c:	34233333 	ori	v1,at,0x3333
80023990:	00430824 	and	at,v0,v1
80023994:	00021082 	srl	v0,v0,0x2
80023998:	00431024 	and	v0,v0,v1
8002399c:	00220821 	addu	at,at,v0
800239a0:	00011102 	srl	v0,at,0x4
800239a4:	00220821 	addu	at,at,v0
800239a8:	3c020f0f 	lui	v0,0xf0f
800239ac:	34420f0f 	ori	v0,v0,0xf0f
800239b0:	00220824 	and	at,at,v0
800239b4:	00011200 	sll	v0,at,0x8
800239b8:	00411821 	addu	v1,v0,at
800239bc:	00011400 	sll	v0,at,0x10
800239c0:	00431021 	addu	v0,v0,v1
800239c4:	00010e00 	sll	at,at,0x18
800239c8:	00220821 	addu	at,at,v0
800239cc:	00010e02 	srl	at,at,0x18
800239d0:	afa1001c 	sw	at,28(sp)
800239d4:	8fa1001c 	lw	at,28(sp)
800239d8:	24020001 	li	v0,1
            (align: usize = align) => align.is_power_of_two()
800239dc:	10220008 	beq	at,v0,80023a00 <_ZN4core3ptr9alignment9Alignment13new_unchecked18precondition_check17hd495e414f33b955eE+0x9c>
800239e0:	00000000 	nop
800239e4:	08008e7b 	j	800239ec <_ZN4core3ptr9alignment9Alignment13new_unchecked18precondition_check17hd495e414f33b955eE+0x88>
800239e8:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800239ec:	3c018105 	lui	at,0x8105
800239f0:	2424e669 	addiu	a0,at,-6551
800239f4:	24050051 	li	a1,81
800239f8:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800239fc:	00000000 	nop
80023a00:	27bd0020 	addiu	sp,sp,32
            }
80023a04:	03e00008 	jr	ra
80023a08:	00000000 	nop

80023a0c <_ZN4core3ptr9alignment9Alignment2of17h6bd99603246e22c5E>:
    pub const fn of<T>() -> Self {
80023a0c:	27bdffe8 	addiu	sp,sp,-24
80023a10:	afbf0014 	sw	ra,20(sp)
80023a14:	24040004 	li	a0,4
        unsafe { Alignment::new_unchecked(mem::align_of::<T>()) }
80023a18:	0c008e45 	jal	80023914 <_ZN4core3ptr9alignment9Alignment13new_unchecked17hfaceacafb5b35effE>
80023a1c:	00000000 	nop
    }
80023a20:	8fbf0014 	lw	ra,20(sp)
80023a24:	27bd0018 	addiu	sp,sp,24
80023a28:	03e00008 	jr	ra
80023a2c:	00000000 	nop

80023a30 <_ZN4core3ptr9alignment9Alignment2of17hdf8d9656fb827c75E>:
    pub const fn of<T>() -> Self {
80023a30:	27bdffe8 	addiu	sp,sp,-24
80023a34:	afbf0014 	sw	ra,20(sp)
80023a38:	24040004 	li	a0,4
        unsafe { Alignment::new_unchecked(mem::align_of::<T>()) }
80023a3c:	0c008e45 	jal	80023914 <_ZN4core3ptr9alignment9Alignment13new_unchecked17hfaceacafb5b35effE>
80023a40:	00000000 	nop
    }
80023a44:	8fbf0014 	lw	ra,20(sp)
80023a48:	27bd0018 	addiu	sp,sp,24
80023a4c:	03e00008 	jr	ra
80023a50:	00000000 	nop

80023a54 <_ZN4core3ptr9alignment9Alignment2of17he7e87dc1376397cdE>:
    pub const fn of<T>() -> Self {
80023a54:	27bdffe8 	addiu	sp,sp,-24
80023a58:	afbf0014 	sw	ra,20(sp)
80023a5c:	24040004 	li	a0,4
        unsafe { Alignment::new_unchecked(mem::align_of::<T>()) }
80023a60:	0c008e45 	jal	80023914 <_ZN4core3ptr9alignment9Alignment13new_unchecked17hfaceacafb5b35effE>
80023a64:	00000000 	nop
    }
80023a68:	8fbf0014 	lw	ra,20(sp)
80023a6c:	27bd0018 	addiu	sp,sp,24
80023a70:	03e00008 	jr	ra
80023a74:	00000000 	nop

80023a78 <_ZN4core3ptr9alignment9Alignment8as_usize17h318212322bcdd0c1E>:

    /// Returns the alignment as a [`usize`].
    #[unstable(feature = "ptr_alignment_type", issue = "102070")]
    #[rustc_const_unstable(feature = "ptr_alignment_type", issue = "102070")]
    #[inline]
    pub const fn as_usize(self) -> usize {
80023a78:	27bdfff8 	addiu	sp,sp,-8
80023a7c:	afa40004 	sw	a0,4(sp)
        self.0 as usize
80023a80:	afa40000 	sw	a0,0(sp)
80023a84:	8fa20000 	lw	v0,0(sp)
80023a88:	27bd0008 	addiu	sp,sp,8
    }
80023a8c:	03e00008 	jr	ra
80023a90:	00000000 	nop

80023a94 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h741606ee0a847912E>:
    ///
    /// assert_eq!(None, chars.next());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn chars(&self) -> Chars<'_> {
80023a94:	27bdffd0 	addiu	sp,sp,-48
80023a98:	afbf002c 	sw	ra,44(sp)
80023a9c:	afa4001c 	sw	a0,28(sp)
80023aa0:	afa50020 	sw	a1,32(sp)
80023aa4:	afa40024 	sw	a0,36(sp)
80023aa8:	afa50028 	sw	a1,40(sp)
        Chars { iter: self.as_bytes().iter() }
80023aac:	0c01122d 	jal	800448b4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9fbf31f27946410E>
80023ab0:	00000000 	nop
80023ab4:	afa20014 	sw	v0,20(sp)
80023ab8:	afa30018 	sw	v1,24(sp)
    }
80023abc:	8fa20014 	lw	v0,20(sp)
80023ac0:	8fa30018 	lw	v1,24(sp)
80023ac4:	8fbf002c 	lw	ra,44(sp)
80023ac8:	27bd0030 	addiu	sp,sp,48
80023acc:	03e00008 	jr	ra
80023ad0:	00000000 	nop

80023ad4 <_ZN4core3str8converts23from_utf8_unchecked_mut17h9de36a7a7d4b6290E>:
#[inline]
#[must_use]
#[stable(feature = "str_mut_extras", since = "1.20.0")]
#[rustc_const_unstable(feature = "const_str_from_utf8_unchecked_mut", issue = "91005")]
#[rustc_diagnostic_item = "str_from_utf8_unchecked_mut"]
pub const unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {
80023ad4:	27bdfff8 	addiu	sp,sp,-8
80023ad8:	00a01825 	move	v1,a1
80023adc:	00801025 	move	v0,a0
80023ae0:	afa20000 	sw	v0,0(sp)
80023ae4:	afa30004 	sw	v1,4(sp)
80023ae8:	27bd0008 	addiu	sp,sp,8
    // SAFETY: the caller must guarantee that the bytes `v`
    // are valid UTF-8, thus the cast to `*mut str` is safe.
    // Also, the pointer dereference is safe because that pointer
    // comes from a reference which is guaranteed to be valid for writes.
    unsafe { &mut *(v as *mut [u8] as *mut str) }
}
80023aec:	03e00008 	jr	ra
80023af0:	00000000 	nop

80023af4 <_ZN4core4cell12BorrowRefMut3new17h8fca677a09a27ac4E>:
    }
}

impl<'b> BorrowRefMut<'b> {
    #[inline]
    fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
80023af4:	27bdffd8 	addiu	sp,sp,-40
80023af8:	afbf0024 	sw	ra,36(sp)
80023afc:	afa40014 	sw	a0,20(sp)
80023b00:	afa40020 	sw	a0,32(sp)
        // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
        // mutable reference, and so there must currently be no existing
        // references. Thus, while clone increments the mutable refcount, here
        // we explicitly only allow going from UNUSED to UNUSED - 1.
        match borrow.get() {
80023b04:	0c008eeb 	jal	80023bac <_ZN4core4cell13Cell$LT$T$GT$3get17hb03644952720e905E>
80023b08:	00000000 	nop
80023b0c:	1440000a 	bnez	v0,80023b38 <_ZN4core4cell12BorrowRefMut3new17h8fca677a09a27ac4E+0x44>
80023b10:	00000000 	nop
80023b14:	08008ec7 	j	80023b1c <_ZN4core4cell12BorrowRefMut3new17h8fca677a09a27ac4E+0x28>
80023b18:	00000000 	nop
80023b1c:	2401ffff 	li	at,-1
80023b20:	afa10010 	sw	at,16(sp)
80023b24:	24010000 	li	at,0
            UNUSED => {
                borrow.set(UNUSED - 1);
80023b28:	14000010 	bnez	zero,80023b6c <_ZN4core4cell12BorrowRefMut3new17h8fca677a09a27ac4E+0x78>
80023b2c:	00000000 	nop
80023b30:	08008ed1 	j	80023b44 <_ZN4core4cell12BorrowRefMut3new17h8fca677a09a27ac4E+0x50>
80023b34:	00000000 	nop
                Some(BorrowRefMut { borrow })
            }
            _ => None,
80023b38:	afa00018 	sw	zero,24(sp)
80023b3c:	08008edf 	j	80023b7c <_ZN4core4cell12BorrowRefMut3new17h8fca677a09a27ac4E+0x88>
80023b40:	00000000 	nop
                borrow.set(UNUSED - 1);
80023b44:	8fa40014 	lw	a0,20(sp)
80023b48:	8fa50010 	lw	a1,16(sp)
80023b4c:	0c008f10 	jal	80023c40 <_ZN4core4cell13Cell$LT$T$GT$3set17hd64a6e9ba6e83604E>
80023b50:	00000000 	nop
80023b54:	8fa10014 	lw	at,20(sp)
                Some(BorrowRefMut { borrow })
80023b58:	afa1001c 	sw	at,28(sp)
80023b5c:	8fa1001c 	lw	at,28(sp)
80023b60:	afa10018 	sw	at,24(sp)
80023b64:	08008edf 	j	80023b7c <_ZN4core4cell12BorrowRefMut3new17h8fca677a09a27ac4E+0x88>
80023b68:	00000000 	nop
                borrow.set(UNUSED - 1);
80023b6c:	3c018105 	lui	at,0x8105
80023b70:	2424e724 	addiu	a0,at,-6364
80023b74:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80023b78:	00000000 	nop
        }
    }
80023b7c:	8fa20018 	lw	v0,24(sp)
80023b80:	8fbf0024 	lw	ra,36(sp)
80023b84:	27bd0028 	addiu	sp,sp,40
80023b88:	03e00008 	jr	ra
80023b8c:	00000000 	nop

80023b90 <_ZN4core4cell13Cell$LT$T$GT$3get17h15b032da270adab1E>:
    pub fn get(&self) -> T {
80023b90:	27bdfff8 	addiu	sp,sp,-8
80023b94:	afa40000 	sw	a0,0(sp)
80023b98:	afa40004 	sw	a0,4(sp)
        unsafe { *self.value.get() }
80023b9c:	8c820000 	lw	v0,0(a0)
80023ba0:	27bd0008 	addiu	sp,sp,8
    }
80023ba4:	03e00008 	jr	ra
80023ba8:	00000000 	nop

80023bac <_ZN4core4cell13Cell$LT$T$GT$3get17hb03644952720e905E>:
    pub fn get(&self) -> T {
80023bac:	27bdfff8 	addiu	sp,sp,-8
80023bb0:	afa40000 	sw	a0,0(sp)
80023bb4:	afa40004 	sw	a0,4(sp)
        unsafe { *self.value.get() }
80023bb8:	8c820000 	lw	v0,0(a0)
80023bbc:	27bd0008 	addiu	sp,sp,8
    }
80023bc0:	03e00008 	jr	ra
80023bc4:	00000000 	nop

80023bc8 <_ZN4core4cell13Cell$LT$T$GT$3new17hca425acb9c31f2adE>:
    pub const fn new(value: T) -> Cell<T> {
80023bc8:	27bdfff0 	addiu	sp,sp,-16
80023bcc:	afa40004 	sw	a0,4(sp)
80023bd0:	afa4000c 	sw	a0,12(sp)
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "const_unsafe_cell_new", since = "1.32.0")]
    #[inline(always)]
    pub const fn new(value: T) -> UnsafeCell<T> {
        UnsafeCell { value }
80023bd4:	afa40008 	sw	a0,8(sp)
    }
80023bd8:	8fa10008 	lw	at,8(sp)
        Cell { value: UnsafeCell::new(value) }
80023bdc:	afa10000 	sw	at,0(sp)
    }
80023be0:	8fa20000 	lw	v0,0(sp)
80023be4:	27bd0010 	addiu	sp,sp,16
80023be8:	03e00008 	jr	ra
80023bec:	00000000 	nop

80023bf0 <_ZN4core4cell13Cell$LT$T$GT$3new17he60fa7228b378193E>:
    pub const fn new(value: T) -> Cell<T> {
80023bf0:	27bdfff0 	addiu	sp,sp,-16
80023bf4:	afa40004 	sw	a0,4(sp)
80023bf8:	afa4000c 	sw	a0,12(sp)
        UnsafeCell { value }
80023bfc:	afa40008 	sw	a0,8(sp)
    }
80023c00:	8fa10008 	lw	at,8(sp)
        Cell { value: UnsafeCell::new(value) }
80023c04:	afa10000 	sw	at,0(sp)
    }
80023c08:	8fa20000 	lw	v0,0(sp)
80023c0c:	27bd0010 	addiu	sp,sp,16
80023c10:	03e00008 	jr	ra
80023c14:	00000000 	nop

80023c18 <_ZN4core4cell13Cell$LT$T$GT$3set17h4ee035cbf7f1ed59E>:
    pub fn set(&self, val: T) {
80023c18:	27bdffe0 	addiu	sp,sp,-32
80023c1c:	afbf001c 	sw	ra,28(sp)
80023c20:	afa40014 	sw	a0,20(sp)
80023c24:	afa50018 	sw	a1,24(sp)
        self.replace(val);
80023c28:	0c008f25 	jal	80023c94 <_ZN4core4cell13Cell$LT$T$GT$7replace17hf097c831adb3f9c3E>
80023c2c:	00000000 	nop
    }
80023c30:	8fbf001c 	lw	ra,28(sp)
80023c34:	27bd0020 	addiu	sp,sp,32
80023c38:	03e00008 	jr	ra
80023c3c:	00000000 	nop

80023c40 <_ZN4core4cell13Cell$LT$T$GT$3set17hd64a6e9ba6e83604E>:
    pub fn set(&self, val: T) {
80023c40:	27bdffe0 	addiu	sp,sp,-32
80023c44:	afbf001c 	sw	ra,28(sp)
80023c48:	afa40014 	sw	a0,20(sp)
80023c4c:	afa50018 	sw	a1,24(sp)
        self.replace(val);
80023c50:	0c008f1a 	jal	80023c68 <_ZN4core4cell13Cell$LT$T$GT$7replace17h76613c7161b6f439E>
80023c54:	00000000 	nop
    }
80023c58:	8fbf001c 	lw	ra,28(sp)
80023c5c:	27bd0020 	addiu	sp,sp,32
80023c60:	03e00008 	jr	ra
80023c64:	00000000 	nop

80023c68 <_ZN4core4cell13Cell$LT$T$GT$7replace17h76613c7161b6f439E>:
    pub fn replace(&self, val: T) -> T {
80023c68:	27bdffe0 	addiu	sp,sp,-32
80023c6c:	afbf001c 	sw	ra,28(sp)
80023c70:	afa40010 	sw	a0,16(sp)
80023c74:	afa50014 	sw	a1,20(sp)
80023c78:	afa40018 	sw	a0,24(sp)
        mem::replace(unsafe { &mut *self.value.get() }, val)
80023c7c:	0c0084a9 	jal	800212a4 <_ZN4core3mem7replace17h693ed87c06f479adE>
80023c80:	00000000 	nop
    }
80023c84:	8fbf001c 	lw	ra,28(sp)
80023c88:	27bd0020 	addiu	sp,sp,32
80023c8c:	03e00008 	jr	ra
80023c90:	00000000 	nop

80023c94 <_ZN4core4cell13Cell$LT$T$GT$7replace17hf097c831adb3f9c3E>:
    pub fn replace(&self, val: T) -> T {
80023c94:	27bdffe0 	addiu	sp,sp,-32
80023c98:	afbf001c 	sw	ra,28(sp)
80023c9c:	afa40010 	sw	a0,16(sp)
80023ca0:	afa50014 	sw	a1,20(sp)
80023ca4:	afa40018 	sw	a0,24(sp)
        mem::replace(unsafe { &mut *self.value.get() }, val)
80023ca8:	0c00846a 	jal	800211a8 <_ZN4core3mem7replace17h0b7c6c9371424215E>
80023cac:	00000000 	nop
    }
80023cb0:	8fbf001c 	lw	ra,28(sp)
80023cb4:	27bd0020 	addiu	sp,sp,32
80023cb8:	03e00008 	jr	ra
80023cbc:	00000000 	nop

80023cc0 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE>:
    pub fn borrow_mut(&self) -> RefMut<'_, T> {
80023cc0:	27bdffd0 	addiu	sp,sp,-48
80023cc4:	afbf002c 	sw	ra,44(sp)
80023cc8:	afa50010 	sw	a1,16(sp)
            Err(err) => panic_already_borrowed(err),
80023ccc:	afa40020 	sw	a0,32(sp)
        match self.try_borrow_mut() {
80023cd0:	0c008f6f 	jal	80023dbc <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hb9e5754531b09e96E>
80023cd4:	00000000 	nop
80023cd8:	afa20018 	sw	v0,24(sp)
80023cdc:	afa3001c 	sw	v1,28(sp)
80023ce0:	8fa10018 	lw	at,24(sp)
80023ce4:	1020000b 	beqz	at,80023d14 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE+0x54>
80023ce8:	00000000 	nop
80023cec:	08008f3d 	j	80023cf4 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE+0x34>
80023cf0:	00000000 	nop
            Ok(b) => b,
80023cf4:	8fa20018 	lw	v0,24(sp)
80023cf8:	8fa3001c 	lw	v1,28(sp)
80023cfc:	afa20024 	sw	v0,36(sp)
80023d00:	afa30028 	sw	v1,40(sp)
    }
80023d04:	8fbf002c 	lw	ra,44(sp)
80023d08:	27bd0030 	addiu	sp,sp,48
80023d0c:	03e00008 	jr	ra
80023d10:	00000000 	nop
            Err(err) => panic_already_borrowed(err),
80023d14:	8fa40010 	lw	a0,16(sp)
80023d18:	0c00f433 	jal	8003d0cc <_ZN4core4cell22panic_already_borrowed17h5cddcb2dc4be68f9E>
80023d1c:	00000000 	nop

80023d20 <_ZN4core4cell16RefCell$LT$T$GT$10try_borrow17h8e3cf99b00dc25f0E>:
    pub fn try_borrow(&self) -> Result<Ref<'_, T>, BorrowError> {
80023d20:	27bdffc0 	addiu	sp,sp,-64
80023d24:	afbf003c 	sw	ra,60(sp)
80023d28:	afa40014 	sw	a0,20(sp)
80023d2c:	afa4002c 	sw	a0,44(sp)
        match BorrowRef::new(&self.borrow) {
80023d30:	0c008fc9 	jal	80023f24 <_ZN4core4cell9BorrowRef3new17h87a67a445f01bf5bE>
80023d34:	00000000 	nop
80023d38:	afa20020 	sw	v0,32(sp)
80023d3c:	8fa10020 	lw	at,32(sp)
80023d40:	14200006 	bnez	at,80023d5c <_ZN4core4cell16RefCell$LT$T$GT$10try_borrow17h8e3cf99b00dc25f0E+0x3c>
80023d44:	00000000 	nop
80023d48:	08008f54 	j	80023d50 <_ZN4core4cell16RefCell$LT$T$GT$10try_borrow17h8e3cf99b00dc25f0E+0x30>
80023d4c:	00000000 	nop
            None => Err(BorrowError {
80023d50:	afa00018 	sw	zero,24(sp)
            }),
80023d54:	08008f69 	j	80023da4 <_ZN4core4cell16RefCell$LT$T$GT$10try_borrow17h8e3cf99b00dc25f0E+0x84>
80023d58:	00000000 	nop
            Some(b) => {
80023d5c:	8fa10014 	lw	at,20(sp)
80023d60:	8fa20020 	lw	v0,32(sp)
80023d64:	afa20010 	sw	v0,16(sp)
80023d68:	afa20030 	sw	v0,48(sp)
                let value = unsafe { NonNull::new_unchecked(self.value.get()) };
80023d6c:	24240004 	addiu	a0,at,4
80023d70:	afa40038 	sw	a0,56(sp)
80023d74:	0c008d65 	jal	80023594 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h724b00e9bfde3be3E>
80023d78:	00000000 	nop
80023d7c:	8fa10010 	lw	at,16(sp)
80023d80:	afa20034 	sw	v0,52(sp)
                Ok(Ref { value, borrow: b })
80023d84:	afa20024 	sw	v0,36(sp)
80023d88:	afa10028 	sw	at,40(sp)
80023d8c:	8fa20024 	lw	v0,36(sp)
80023d90:	8fa10028 	lw	at,40(sp)
80023d94:	afa20018 	sw	v0,24(sp)
80023d98:	afa1001c 	sw	at,28(sp)
    }
80023d9c:	08008f69 	j	80023da4 <_ZN4core4cell16RefCell$LT$T$GT$10try_borrow17h8e3cf99b00dc25f0E+0x84>
80023da0:	00000000 	nop
80023da4:	8fa20018 	lw	v0,24(sp)
80023da8:	8fa3001c 	lw	v1,28(sp)
80023dac:	8fbf003c 	lw	ra,60(sp)
80023db0:	27bd0040 	addiu	sp,sp,64
80023db4:	03e00008 	jr	ra
80023db8:	00000000 	nop

80023dbc <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hb9e5754531b09e96E>:
    pub fn try_borrow_mut(&self) -> Result<RefMut<'_, T>, BorrowMutError> {
80023dbc:	27bdffc0 	addiu	sp,sp,-64
80023dc0:	afbf003c 	sw	ra,60(sp)
80023dc4:	afa40014 	sw	a0,20(sp)
80023dc8:	afa4002c 	sw	a0,44(sp)
        match BorrowRefMut::new(&self.borrow) {
80023dcc:	0c008ebd 	jal	80023af4 <_ZN4core4cell12BorrowRefMut3new17h8fca677a09a27ac4E>
80023dd0:	00000000 	nop
80023dd4:	afa20020 	sw	v0,32(sp)
80023dd8:	8fa10020 	lw	at,32(sp)
80023ddc:	14200006 	bnez	at,80023df8 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hb9e5754531b09e96E+0x3c>
80023de0:	00000000 	nop
80023de4:	08008f7b 	j	80023dec <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hb9e5754531b09e96E+0x30>
80023de8:	00000000 	nop
            None => Err(BorrowMutError {
80023dec:	afa00018 	sw	zero,24(sp)
            }),
80023df0:	08008f90 	j	80023e40 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hb9e5754531b09e96E+0x84>
80023df4:	00000000 	nop
            Some(b) => {
80023df8:	8fa10014 	lw	at,20(sp)
80023dfc:	8fa20020 	lw	v0,32(sp)
80023e00:	afa20010 	sw	v0,16(sp)
80023e04:	afa20030 	sw	v0,48(sp)
                let value = unsafe { NonNull::new_unchecked(self.value.get()) };
80023e08:	24240004 	addiu	a0,at,4
80023e0c:	afa40038 	sw	a0,56(sp)
80023e10:	0c008d65 	jal	80023594 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h724b00e9bfde3be3E>
80023e14:	00000000 	nop
80023e18:	8fa10010 	lw	at,16(sp)
80023e1c:	afa20034 	sw	v0,52(sp)
                Ok(RefMut { value, borrow: b, marker: PhantomData })
80023e20:	afa20024 	sw	v0,36(sp)
80023e24:	afa10028 	sw	at,40(sp)
80023e28:	8fa20024 	lw	v0,36(sp)
80023e2c:	8fa10028 	lw	at,40(sp)
80023e30:	afa20018 	sw	v0,24(sp)
80023e34:	afa1001c 	sw	at,28(sp)
    }
80023e38:	08008f90 	j	80023e40 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hb9e5754531b09e96E+0x84>
80023e3c:	00000000 	nop
80023e40:	8fa20018 	lw	v0,24(sp)
80023e44:	8fa3001c 	lw	v1,28(sp)
80023e48:	8fbf003c 	lw	ra,60(sp)
80023e4c:	27bd0040 	addiu	sp,sp,64
80023e50:	03e00008 	jr	ra
80023e54:	00000000 	nop

80023e58 <_ZN4core4cell16RefCell$LT$T$GT$3new17h0d8c0999d3a5c116E>:
    pub const fn new(value: T) -> RefCell<T> {
80023e58:	27bdffd8 	addiu	sp,sp,-40
80023e5c:	afbf0024 	sw	ra,36(sp)
80023e60:	afa40010 	sw	a0,16(sp)
80023e64:	afa40014 	sw	a0,20(sp)
        UnsafeCell { value }
80023e68:	8ca10008 	lw	at,8(a1)
80023e6c:	afa10020 	sw	at,32(sp)
80023e70:	8ca10004 	lw	at,4(a1)
80023e74:	afa1001c 	sw	at,28(sp)
80023e78:	8ca10000 	lw	at,0(a1)
80023e7c:	afa10018 	sw	at,24(sp)
80023e80:	24040000 	li	a0,0
            borrow: Cell::new(UNUSED),
80023e84:	0c008ef2 	jal	80023bc8 <_ZN4core4cell13Cell$LT$T$GT$3new17hca425acb9c31f2adE>
80023e88:	00000000 	nop
80023e8c:	8fa40010 	lw	a0,16(sp)
80023e90:	00400825 	move	at,v0
        RefCell {
80023e94:	8fa20014 	lw	v0,20(sp)
80023e98:	ac810000 	sw	at,0(a0)
80023e9c:	8fa10020 	lw	at,32(sp)
80023ea0:	ac81000c 	sw	at,12(a0)
80023ea4:	8fa1001c 	lw	at,28(sp)
80023ea8:	ac810008 	sw	at,8(a0)
80023eac:	8fa10018 	lw	at,24(sp)
80023eb0:	ac810004 	sw	at,4(a0)
    }
80023eb4:	8fbf0024 	lw	ra,36(sp)
80023eb8:	27bd0028 	addiu	sp,sp,40
80023ebc:	03e00008 	jr	ra
80023ec0:	00000000 	nop

80023ec4 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h31d02da70f533516E>:
    pub fn borrow(&self) -> Ref<'_, T> {
80023ec4:	27bdffd0 	addiu	sp,sp,-48
80023ec8:	afbf002c 	sw	ra,44(sp)
80023ecc:	afa50010 	sw	a1,16(sp)
            Err(err) => panic_already_mutably_borrowed(err),
80023ed0:	afa40020 	sw	a0,32(sp)
        match self.try_borrow() {
80023ed4:	0c008f48 	jal	80023d20 <_ZN4core4cell16RefCell$LT$T$GT$10try_borrow17h8e3cf99b00dc25f0E>
80023ed8:	00000000 	nop
80023edc:	afa20018 	sw	v0,24(sp)
80023ee0:	afa3001c 	sw	v1,28(sp)
80023ee4:	8fa10018 	lw	at,24(sp)
80023ee8:	1020000b 	beqz	at,80023f18 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h31d02da70f533516E+0x54>
80023eec:	00000000 	nop
80023ef0:	08008fbe 	j	80023ef8 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h31d02da70f533516E+0x34>
80023ef4:	00000000 	nop
            Ok(b) => b,
80023ef8:	8fa20018 	lw	v0,24(sp)
80023efc:	8fa3001c 	lw	v1,28(sp)
80023f00:	afa20024 	sw	v0,36(sp)
80023f04:	afa30028 	sw	v1,40(sp)
    }
80023f08:	8fbf002c 	lw	ra,44(sp)
80023f0c:	27bd0030 	addiu	sp,sp,48
80023f10:	03e00008 	jr	ra
80023f14:	00000000 	nop
            Err(err) => panic_already_mutably_borrowed(err),
80023f18:	8fa40010 	lw	a0,16(sp)
80023f1c:	0c00f450 	jal	8003d140 <_ZN4core4cell30panic_already_mutably_borrowed17h7c6bf9e42b40f6e0E>
80023f20:	00000000 	nop

80023f24 <_ZN4core4cell9BorrowRef3new17h87a67a445f01bf5bE>:
    fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
80023f24:	27bdffc8 	addiu	sp,sp,-56
80023f28:	afbf0034 	sw	ra,52(sp)
80023f2c:	afa40010 	sw	a0,16(sp)
80023f30:	afa40020 	sw	a0,32(sp)
        let b = borrow.get().wrapping_add(1);
80023f34:	0c008eeb 	jal	80023bac <_ZN4core4cell13Cell$LT$T$GT$3get17hb03644952720e905E>
80023f38:	00000000 	nop
80023f3c:	afa20028 	sw	v0,40(sp)
80023f40:	24010001 	li	at,1
80023f44:	afa1002c 	sw	at,44(sp)
            intrinsics::wrapping_add(self, rhs)
80023f48:	24410001 	addiu	at,v0,1
80023f4c:	afa10014 	sw	at,20(sp)
80023f50:	afa10024 	sw	at,36(sp)
80023f54:	afa10030 	sw	at,48(sp)
        if !is_reading(b) {
80023f58:	1c200006 	bgtz	at,80023f74 <_ZN4core4cell9BorrowRef3new17h87a67a445f01bf5bE+0x50>
80023f5c:	00000000 	nop
80023f60:	08008fda 	j	80023f68 <_ZN4core4cell9BorrowRef3new17h87a67a445f01bf5bE+0x44>
80023f64:	00000000 	nop
            None
80023f68:	afa00018 	sw	zero,24(sp)
        if !is_reading(b) {
80023f6c:	08008fe7 	j	80023f9c <_ZN4core4cell9BorrowRef3new17h87a67a445f01bf5bE+0x78>
80023f70:	00000000 	nop
            borrow.set(b);
80023f74:	8fa40010 	lw	a0,16(sp)
80023f78:	8fa50014 	lw	a1,20(sp)
80023f7c:	0c008f10 	jal	80023c40 <_ZN4core4cell13Cell$LT$T$GT$3set17hd64a6e9ba6e83604E>
80023f80:	00000000 	nop
80023f84:	8fa10010 	lw	at,16(sp)
            Some(BorrowRef { borrow })
80023f88:	afa1001c 	sw	at,28(sp)
80023f8c:	8fa1001c 	lw	at,28(sp)
80023f90:	afa10018 	sw	at,24(sp)
        if !is_reading(b) {
80023f94:	08008fe7 	j	80023f9c <_ZN4core4cell9BorrowRef3new17h87a67a445f01bf5bE+0x78>
80023f98:	00000000 	nop
    }
80023f9c:	8fa20018 	lw	v0,24(sp)
80023fa0:	8fbf0034 	lw	ra,52(sp)
80023fa4:	27bd0038 	addiu	sp,sp,56
80023fa8:	03e00008 	jr	ra
80023fac:	00000000 	nop

80023fb0 <_ZN4core4char7methods15encode_utf8_raw17h8ccc160576e54b11E>:
/// Panics if the buffer is not large enough.
/// A buffer of length four is large enough to encode any `char`.
#[unstable(feature = "char_internals", reason = "exposed only for libstd", issue = "none")]
#[doc(hidden)]
#[inline]
pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
80023fb0:	27bdff00 	addiu	sp,sp,-256
80023fb4:	afbf00fc 	sw	ra,252(sp)
80023fb8:	afa60024 	sw	a2,36(sp)
80023fbc:	afa50020 	sw	a1,32(sp)
80023fc0:	afa40030 	sw	a0,48(sp)
80023fc4:	afa5007c 	sw	a1,124(sp)
80023fc8:	afa60080 	sw	a2,128(sp)
    let len = len_utf8(code);
80023fcc:	8fa40030 	lw	a0,48(sp)
80023fd0:	0c0090c3 	jal	8002430c <_ZN4core4char7methods8len_utf817h5454631b3520b7ebE>
80023fd4:	00000000 	nop
80023fd8:	8fa40020 	lw	a0,32(sp)
80023fdc:	8fa50024 	lw	a1,36(sp)
80023fe0:	afa20034 	sw	v0,52(sp)
    match (len, &mut dst[..]) {
80023fe4:	8fa10034 	lw	at,52(sp)
80023fe8:	afa10028 	sw	at,40(sp)
80023fec:	afa400e8 	sw	a0,232(sp)
80023ff0:	afa500ec 	sw	a1,236(sp)
        index.index_mut(self)
80023ff4:	3c018105 	lui	at,0x8105
80023ff8:	2426e7a8 	addiu	a2,at,-6232
80023ffc:	0c010f93 	jal	80043e4c <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h0fbdbc71c20a79daE>
80024000:	00000000 	nop
80024004:	8fa10028 	lw	at,40(sp)
80024008:	afa10038 	sw	at,56(sp)
8002400c:	afa2003c 	sw	v0,60(sp)
80024010:	afa30040 	sw	v1,64(sp)
80024014:	8fa10038 	lw	at,56(sp)
80024018:	2421ffff 	addiu	at,at,-1
8002401c:	afa1002c 	sw	at,44(sp)
80024020:	2c210004 	sltiu	at,at,4
80024024:	10200008 	beqz	at,80024048 <_ZN4core4char7methods15encode_utf8_raw17h8ccc160576e54b11E+0x98>
80024028:	00000000 	nop
8002402c:	8fa1002c 	lw	at,44(sp)
80024030:	00010880 	sll	at,at,0x2
80024034:	3c028105 	lui	v0,0x8105
80024038:	00220821 	addu	at,at,v0
8002403c:	8c21e000 	lw	at,-8192(at)
80024040:	00200008 	jr	at
80024044:	00000000 	nop
80024048:	8fa20024 	lw	v0,36(sp)
8002404c:	27a30034 	addiu	v1,sp,52
80024050:	afa300b0 	sw	v1,176(sp)
80024054:	afa300d0 	sw	v1,208(sp)
80024058:	3c018005 	lui	at,0x8005
8002405c:	2421a0f4 	addiu	at,at,-24332
80024060:	afa100d4 	sw	at,212(sp)
        //     2. `&'b T` and `&'b Opaque` have the same memory layout
        //              (when `T` is `Sized`, as it is here)
        // `mem::transmute(f)` is safe since `fn(&T, &mut Formatter<'_>) -> Result`
        // and `fn(&Opaque, &mut Formatter<'_>) -> Result` have the same ABI
        // (as long as `T` is `Sized`)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80024064:	afa300c8 	sw	v1,200(sp)
80024068:	afa100cc 	sw	at,204(sp)
    }
8002406c:	8fa600c8 	lw	a2,200(sp)
80024070:	8fa500cc 	lw	a1,204(sp)
80024074:	27a40030 	addiu	a0,sp,48
80024078:	afa400b4 	sw	a0,180(sp)
8002407c:	afa400c0 	sw	a0,192(sp)
80024080:	3c038005 	lui	v1,0x8005
80024084:	24639778 	addiu	v1,v1,-26760
80024088:	afa300c4 	sw	v1,196(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002408c:	afa400b8 	sw	a0,184(sp)
80024090:	afa300bc 	sw	v1,188(sp)
    }
80024094:	8fa400b8 	lw	a0,184(sp)
80024098:	8fa300bc 	lw	v1,188(sp)
        }
        _ => panic!(
            "encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}",
            len,
            code,
            dst.len(),
8002409c:	afa20074 	sw	v0,116(sp)
800240a0:	27a20074 	addiu	v0,sp,116
800240a4:	afa200ac 	sw	v0,172(sp)
800240a8:	afa200e0 	sw	v0,224(sp)
800240ac:	afa100e4 	sw	at,228(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
800240b0:	afa200d8 	sw	v0,216(sp)
800240b4:	afa100dc 	sw	at,220(sp)
    }
800240b8:	8fa200d8 	lw	v0,216(sp)
800240bc:	8fa100dc 	lw	at,220(sp)
        _ => panic!(
800240c0:	afa6005c 	sw	a2,92(sp)
800240c4:	afa50060 	sw	a1,96(sp)
800240c8:	afa40064 	sw	a0,100(sp)
800240cc:	afa30068 	sw	v1,104(sp)
800240d0:	afa2006c 	sw	v0,108(sp)
800240d4:	afa10070 	sw	at,112(sp)
800240d8:	03a00825 	move	at,sp
800240dc:	24060003 	li	a2,3
800240e0:	ac260010 	sw	a2,16(at)
800240e4:	3c018105 	lui	at,0x8105
800240e8:	2425e804 	addiu	a1,at,-6140
800240ec:	27a40044 	addiu	a0,sp,68
800240f0:	afa4001c 	sw	a0,28(sp)
800240f4:	27a7005c 	addiu	a3,sp,92
800240f8:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
800240fc:	00000000 	nop
80024100:	8fa4001c 	lw	a0,28(sp)
80024104:	3c018105 	lui	at,0x8105
80024108:	2425e81c 	addiu	a1,at,-6116
8002410c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80024110:	00000000 	nop
        (1, [a, ..]) => {
80024114:	8fa10040 	lw	at,64(sp)
80024118:	14200015 	bnez	at,80024170 <_ZN4core4char7methods15encode_utf8_raw17h8ccc160576e54b11E+0x1c0>
8002411c:	00000000 	nop
80024120:	08009012 	j	80024048 <_ZN4core4char7methods15encode_utf8_raw17h8ccc160576e54b11E+0x98>
80024124:	00000000 	nop
        (2, [a, b, ..]) => {
80024128:	8fa10040 	lw	at,64(sp)
8002412c:	2c210002 	sltiu	at,at,2
80024130:	10200025 	beqz	at,800241c8 <_ZN4core4char7methods15encode_utf8_raw17h8ccc160576e54b11E+0x218>
80024134:	00000000 	nop
80024138:	08009012 	j	80024048 <_ZN4core4char7methods15encode_utf8_raw17h8ccc160576e54b11E+0x98>
8002413c:	00000000 	nop
        (3, [a, b, c, ..]) => {
80024140:	8fa10040 	lw	at,64(sp)
80024144:	2c210003 	sltiu	at,at,3
80024148:	1020002e 	beqz	at,80024204 <_ZN4core4char7methods15encode_utf8_raw17h8ccc160576e54b11E+0x254>
8002414c:	00000000 	nop
80024150:	08009012 	j	80024048 <_ZN4core4char7methods15encode_utf8_raw17h8ccc160576e54b11E+0x98>
80024154:	00000000 	nop
        (4, [a, b, c, d, ..]) => {
80024158:	8fa10040 	lw	at,64(sp)
8002415c:	2c210004 	sltiu	at,at,4
80024160:	1020003e 	beqz	at,8002425c <_ZN4core4char7methods15encode_utf8_raw17h8ccc160576e54b11E+0x2ac>
80024164:	00000000 	nop
80024168:	08009012 	j	80024048 <_ZN4core4char7methods15encode_utf8_raw17h8ccc160576e54b11E+0x98>
8002416c:	00000000 	nop
        (1, [a, ..]) => {
80024170:	8fa2003c 	lw	v0,60(sp)
80024174:	afa20084 	sw	v0,132(sp)
            *a = code as u8;
80024178:	8fa10030 	lw	at,48(sp)
8002417c:	a0410000 	sb	at,0(v0)
        }
80024180:	08009062 	j	80024188 <_ZN4core4char7methods15encode_utf8_raw17h8ccc160576e54b11E+0x1d8>
80024184:	00000000 	nop
        ),
    };
    &mut dst[..len]
80024188:	8fa60024 	lw	a2,36(sp)
8002418c:	8fa50020 	lw	a1,32(sp)
80024190:	8fa10034 	lw	at,52(sp)
80024194:	afa10078 	sw	at,120(sp)
80024198:	8fa40078 	lw	a0,120(sp)
8002419c:	afa500f0 	sw	a1,240(sp)
800241a0:	afa600f4 	sw	a2,244(sp)
800241a4:	afa400f8 	sw	a0,248(sp)
800241a8:	3c018105 	lui	at,0x8105
800241ac:	2427e7b8 	addiu	a3,at,-6216
800241b0:	0c010efb 	jal	80043bec <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h939accfbe24507e3E>
800241b4:	00000000 	nop
}
800241b8:	8fbf00fc 	lw	ra,252(sp)
800241bc:	27bd0100 	addiu	sp,sp,256
800241c0:	03e00008 	jr	ra
800241c4:	00000000 	nop
        (2, [a, b, ..]) => {
800241c8:	8fa3003c 	lw	v1,60(sp)
800241cc:	afa30088 	sw	v1,136(sp)
800241d0:	8fa2003c 	lw	v0,60(sp)
800241d4:	24410001 	addiu	at,v0,1
800241d8:	afa1008c 	sw	at,140(sp)
            *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
800241dc:	8fa10030 	lw	at,48(sp)
800241e0:	7c212180 	ext	at,at,0x6,0x5
800241e4:	342100c0 	ori	at,at,0xc0
800241e8:	a0610000 	sb	at,0(v1)
            *b = (code & 0x3F) as u8 | TAG_CONT;
800241ec:	93a10030 	lbu	at,48(sp)
800241f0:	3021003f 	andi	at,at,0x3f
800241f4:	34210080 	ori	at,at,0x80
800241f8:	a0410001 	sb	at,1(v0)
        }
800241fc:	08009062 	j	80024188 <_ZN4core4char7methods15encode_utf8_raw17h8ccc160576e54b11E+0x1d8>
80024200:	00000000 	nop
        (3, [a, b, c, ..]) => {
80024204:	8fa4003c 	lw	a0,60(sp)
80024208:	afa40090 	sw	a0,144(sp)
8002420c:	8fa3003c 	lw	v1,60(sp)
80024210:	24610001 	addiu	at,v1,1
80024214:	afa10094 	sw	at,148(sp)
80024218:	8fa2003c 	lw	v0,60(sp)
8002421c:	24410002 	addiu	at,v0,2
80024220:	afa10098 	sw	at,152(sp)
            *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
80024224:	8fa10030 	lw	at,48(sp)
80024228:	7c211b00 	ext	at,at,0xc,0x4
8002422c:	342100e0 	ori	at,at,0xe0
80024230:	a0810000 	sb	at,0(a0)
            *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
80024234:	8fa10030 	lw	at,48(sp)
80024238:	7c212980 	ext	at,at,0x6,0x6
8002423c:	34210080 	ori	at,at,0x80
80024240:	a0610001 	sb	at,1(v1)
            *c = (code & 0x3F) as u8 | TAG_CONT;
80024244:	93a10030 	lbu	at,48(sp)
80024248:	3021003f 	andi	at,at,0x3f
8002424c:	34210080 	ori	at,at,0x80
80024250:	a0410002 	sb	at,2(v0)
        }
80024254:	08009062 	j	80024188 <_ZN4core4char7methods15encode_utf8_raw17h8ccc160576e54b11E+0x1d8>
80024258:	00000000 	nop
        (4, [a, b, c, d, ..]) => {
8002425c:	8fa5003c 	lw	a1,60(sp)
80024260:	afa5009c 	sw	a1,156(sp)
80024264:	8fa4003c 	lw	a0,60(sp)
80024268:	24810001 	addiu	at,a0,1
8002426c:	afa100a0 	sw	at,160(sp)
80024270:	8fa3003c 	lw	v1,60(sp)
80024274:	24610002 	addiu	at,v1,2
80024278:	afa100a4 	sw	at,164(sp)
8002427c:	8fa2003c 	lw	v0,60(sp)
80024280:	24410003 	addiu	at,v0,3
80024284:	afa100a8 	sw	at,168(sp)
            *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
80024288:	8fa10030 	lw	at,48(sp)
8002428c:	7c211480 	ext	at,at,0x12,0x3
80024290:	342100f0 	ori	at,at,0xf0
80024294:	a0a10000 	sb	at,0(a1)
            *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
80024298:	8fa10030 	lw	at,48(sp)
8002429c:	7c212b00 	ext	at,at,0xc,0x6
800242a0:	34210080 	ori	at,at,0x80
800242a4:	a0810001 	sb	at,1(a0)
            *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
800242a8:	8fa10030 	lw	at,48(sp)
800242ac:	7c212980 	ext	at,at,0x6,0x6
800242b0:	34210080 	ori	at,at,0x80
800242b4:	a0610002 	sb	at,2(v1)
            *d = (code & 0x3F) as u8 | TAG_CONT;
800242b8:	93a10030 	lbu	at,48(sp)
800242bc:	3021003f 	andi	at,at,0x3f
800242c0:	34210080 	ori	at,at,0x80
800242c4:	a0410003 	sb	at,3(v0)
        }
800242c8:	08009062 	j	80024188 <_ZN4core4char7methods15encode_utf8_raw17h8ccc160576e54b11E+0x1d8>
800242cc:	00000000 	nop

800242d0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h9656afd115dc9e1eE>:
    pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {
800242d0:	27bdffe0 	addiu	sp,sp,-32
800242d4:	afbf001c 	sw	ra,28(sp)
800242d8:	afa40010 	sw	a0,16(sp)
800242dc:	afa50014 	sw	a1,20(sp)
800242e0:	afa60018 	sw	a2,24(sp)
        unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
800242e4:	0c008fec 	jal	80023fb0 <_ZN4core4char7methods15encode_utf8_raw17h8ccc160576e54b11E>
800242e8:	00000000 	nop
800242ec:	00402025 	move	a0,v0
800242f0:	00602825 	move	a1,v1
800242f4:	0c008eb5 	jal	80023ad4 <_ZN4core3str8converts23from_utf8_unchecked_mut17h9de36a7a7d4b6290E>
800242f8:	00000000 	nop
    }
800242fc:	8fbf001c 	lw	ra,28(sp)
80024300:	27bd0020 	addiu	sp,sp,32
80024304:	03e00008 	jr	ra
80024308:	00000000 	nop

8002430c <_ZN4core4char7methods8len_utf817h5454631b3520b7ebE>:
const fn len_utf8(code: u32) -> usize {
8002430c:	27bdfff0 	addiu	sp,sp,-16
80024310:	afa40004 	sw	a0,4(sp)
80024314:	afa4000c 	sw	a0,12(sp)
    if code < MAX_ONE_B {
80024318:	2c810080 	sltiu	at,a0,128
8002431c:	14200009 	bnez	at,80024344 <_ZN4core4char7methods8len_utf817h5454631b3520b7ebE+0x38>
80024320:	00000000 	nop
80024324:	080090cb 	j	8002432c <_ZN4core4char7methods8len_utf817h5454631b3520b7ebE+0x20>
80024328:	00000000 	nop
    } else if code < MAX_TWO_B {
8002432c:	8fa10004 	lw	at,4(sp)
80024330:	2c210800 	sltiu	at,at,2048
80024334:	1420000e 	bnez	at,80024370 <_ZN4core4char7methods8len_utf817h5454631b3520b7ebE+0x64>
80024338:	00000000 	nop
8002433c:	080090d5 	j	80024354 <_ZN4core4char7methods8len_utf817h5454631b3520b7ebE+0x48>
80024340:	00000000 	nop
80024344:	24010001 	li	at,1
        1
80024348:	afa10008 	sw	at,8(sp)
    if code < MAX_ONE_B {
8002434c:	080090e8 	j	800243a0 <_ZN4core4char7methods8len_utf817h5454631b3520b7ebE+0x94>
80024350:	00000000 	nop
80024354:	8fa10004 	lw	at,4(sp)
80024358:	3c020001 	lui	v0,0x1
    } else if code < MAX_THREE_B {
8002435c:	0022082b 	sltu	at,at,v0
80024360:	1420000b 	bnez	at,80024390 <_ZN4core4char7methods8len_utf817h5454631b3520b7ebE+0x84>
80024364:	00000000 	nop
80024368:	080090e0 	j	80024380 <_ZN4core4char7methods8len_utf817h5454631b3520b7ebE+0x74>
8002436c:	00000000 	nop
80024370:	24010002 	li	at,2
        2
80024374:	afa10008 	sw	at,8(sp)
    } else if code < MAX_TWO_B {
80024378:	080090e8 	j	800243a0 <_ZN4core4char7methods8len_utf817h5454631b3520b7ebE+0x94>
8002437c:	00000000 	nop
80024380:	24010004 	li	at,4
        4
80024384:	afa10008 	sw	at,8(sp)
    } else if code < MAX_THREE_B {
80024388:	080090e8 	j	800243a0 <_ZN4core4char7methods8len_utf817h5454631b3520b7ebE+0x94>
8002438c:	00000000 	nop
80024390:	24010003 	li	at,3
        3
80024394:	afa10008 	sw	at,8(sp)
    } else if code < MAX_THREE_B {
80024398:	080090e8 	j	800243a0 <_ZN4core4char7methods8len_utf817h5454631b3520b7ebE+0x94>
8002439c:	00000000 	nop
}
800243a0:	8fa20008 	lw	v0,8(sp)
800243a4:	27bd0010 	addiu	sp,sp,16
800243a8:	03e00008 	jr	ra
800243ac:	00000000 	nop

800243b0 <_ZN4core4hint16assert_unchecked18precondition_check17h80165d02f177c4d8E>:
            const fn precondition_check($($name:$ty),*) {
800243b0:	27bdffe8 	addiu	sp,sp,-24
800243b4:	a3a40017 	sb	a0,23(sp)
    // SAFETY: The caller promised `cond` is true.
    unsafe {
        ub_checks::assert_unsafe_precondition!(
            check_language_ub,
            "hint::assert_unchecked must never be called when the condition is false",
            (cond: bool = cond) => cond,
800243b8:	14800008 	bnez	a0,800243dc <_ZN4core4hint16assert_unchecked18precondition_check17h80165d02f177c4d8E+0x2c>
800243bc:	00000000 	nop
800243c0:	080090f2 	j	800243c8 <_ZN4core4hint16assert_unchecked18precondition_check17h80165d02f177c4d8E+0x18>
800243c4:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800243c8:	3c018105 	lui	at,0x8105
800243cc:	2424e82c 	addiu	a0,at,-6100
800243d0:	24050068 	li	a1,104
800243d4:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800243d8:	00000000 	nop
800243dc:	27bd0018 	addiu	sp,sp,24
            }
800243e0:	03e00008 	jr	ra
800243e4:	00000000 	nop

800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>:
pub const unsafe fn unreachable_unchecked() -> ! {
800243e8:	27bdffe8 	addiu	sp,sp,-24
800243ec:	afbf0014 	sw	ra,20(sp)
    ub_checks::assert_unsafe_precondition!(
800243f0:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
800243f4:	00000000 	nop
800243f8:	14400004 	bnez	v0,8002440c <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E+0x24>
800243fc:	00000000 	nop
80024400:	08009102 	j	80024408 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E+0x20>
80024404:	00000000 	nop
    unsafe { intrinsics::unreachable() }
80024408:	0000000d 	break
    ub_checks::assert_unsafe_precondition!(
8002440c:	0c009107 	jal	8002441c <_ZN4core4hint21unreachable_unchecked18precondition_check17h193a39f07e829b91E>
80024410:	00000000 	nop
80024414:	08009102 	j	80024408 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E+0x20>
80024418:	00000000 	nop

8002441c <_ZN4core4hint21unreachable_unchecked18precondition_check17h193a39f07e829b91E>:
            const fn precondition_check($($name:$ty),*) {
8002441c:	27bdfff0 	addiu	sp,sp,-16
        () => false
80024420:	0800910a 	j	80024428 <_ZN4core4hint21unreachable_unchecked18precondition_check17h193a39f07e829b91E+0xc>
80024424:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80024428:	3c018105 	lui	at,0x8105
8002442c:	2424e894 	addiu	a0,at,-5996
80024430:	24050052 	li	a1,82
80024434:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80024438:	00000000 	nop

8002443c <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h958998870562b869E>:
    #[inline]
    #[stable(feature = "extended_compare_and_swap", since = "1.10.0")]
    #[doc(alias = "compare_and_swap")]
    #[cfg(target_has_atomic = "8")]
    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
    pub fn compare_exchange(
8002443c:	27bdff80 	addiu	sp,sp,-128
80024440:	afbf007c 	sw	ra,124(sp)
80024444:	afa4001c 	sw	a0,28(sp)
80024448:	8fa10090 	lw	at,144(sp)
8002444c:	afa10020 	sw	at,32(sp)
80024450:	00e01025 	move	v0,a3
80024454:	afa20024 	sw	v0,36(sp)
80024458:	00c01025 	move	v0,a2
8002445c:	afa20028 	sw	v0,40(sp)
80024460:	00a01025 	move	v0,a1
80024464:	afa2002c 	sw	v0,44(sp)
80024468:	afa4006c 	sw	a0,108(sp)
8002446c:	a3a50072 	sb	a1,114(sp)
80024470:	a3a60073 	sb	a2,115(sp)
80024474:	a3a70074 	sb	a3,116(sp)
80024478:	a3a10075 	sb	at,117(sp)
        current: bool,
        new: bool,
        success: Ordering,
        failure: Ordering,
    ) -> Result<bool, bool> {
        if EMULATE_ATOMIC_BOOL {
8002447c:	08009121 	j	80024484 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h958998870562b869E+0x48>
80024480:	00000000 	nop
80024484:	8fa70024 	lw	a3,36(sp)
80024488:	8fa4001c 	lw	a0,28(sp)
8002448c:	8fa10028 	lw	at,40(sp)
80024490:	8fa2002c 	lw	v0,44(sp)
80024494:	8fa30020 	lw	v1,32(sp)
80024498:	afa40078 	sw	a0,120(sp)
            };
            if old == current { Ok(old) } else { Err(old) }
        } else {
            // SAFETY: data races are prevented by atomic intrinsics.
            match unsafe {
                atomic_compare_exchange(self.v.get(), current as u8, new as u8, success, failure)
8002449c:	03a02825 	move	a1,sp
800244a0:	aca30010 	sw	v1,16(a1)
800244a4:	30450001 	andi	a1,v0,0x1
800244a8:	30260001 	andi	a2,at,0x1
800244ac:	0c00ded4 	jal	80037b50 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE>
800244b0:	00000000 	nop
800244b4:	30410001 	andi	at,v0,0x1
800244b8:	a3a1006a 	sb	at,106(sp)
800244bc:	a3a3006b 	sb	v1,107(sp)
            match unsafe {
800244c0:	93a1006a 	lbu	at,106(sp)
800244c4:	30210001 	andi	at,at,0x1
800244c8:	1420000b 	bnez	at,800244f8 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h958998870562b869E+0xbc>
800244cc:	00000000 	nop
800244d0:	08009136 	j	800244d8 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h958998870562b869E+0x9c>
800244d4:	00000000 	nop
            } {
                Ok(x) => Ok(x != 0),
800244d8:	93a1006b 	lbu	at,107(sp)
800244dc:	a3a10076 	sb	at,118(sp)
800244e0:	0001082b 	sltu	at,zero,at
800244e4:	a3a10034 	sb	at,52(sp)
800244e8:	24010000 	li	at,0
800244ec:	a3a00033 	sb	zero,51(sp)
800244f0:	08009146 	j	80024518 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h958998870562b869E+0xdc>
800244f4:	00000000 	nop
                Err(x) => Err(x != 0),
800244f8:	93a1006b 	lbu	at,107(sp)
800244fc:	a3a10077 	sb	at,119(sp)
80024500:	0001082b 	sltu	at,zero,at
80024504:	a3a10034 	sb	at,52(sp)
80024508:	24010001 	li	at,1
8002450c:	a3a10033 	sb	at,51(sp)
80024510:	08009146 	j	80024518 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h958998870562b869E+0xdc>
80024514:	00000000 	nop
            }
        }
    }
80024518:	93a20033 	lbu	v0,51(sp)
8002451c:	93a30034 	lbu	v1,52(sp)
80024520:	8fbf007c 	lw	ra,124(sp)
80024524:	27bd0080 	addiu	sp,sp,128
80024528:	03e00008 	jr	ra
8002452c:	00000000 	nop

80024530 <_ZN4core4sync6atomic10AtomicBool3new17hc88a1eafe759e74aE>:
    pub const fn new(v: bool) -> AtomicBool {
80024530:	27bdfff8 	addiu	sp,sp,-8
80024534:	a3a40005 	sb	a0,5(sp)
80024538:	a3a40007 	sb	a0,7(sp)
        UnsafeCell { value }
8002453c:	a3a40006 	sb	a0,6(sp)
    }
80024540:	93a10006 	lbu	at,6(sp)
        AtomicBool { v: UnsafeCell::new(v as u8) }
80024544:	a3a10004 	sb	at,4(sp)
    }
80024548:	93a20004 	lbu	v0,4(sp)
8002454c:	27bd0008 	addiu	sp,sp,8
80024550:	03e00008 	jr	ra
80024554:	00000000 	nop

80024558 <_ZN4core4sync6atomic10AtomicBool5store17he1f0cbeead02a856E>:
    pub fn store(&self, val: bool, order: Ordering) {
80024558:	27bdffe0 	addiu	sp,sp,-32
8002455c:	afbf001c 	sw	ra,28(sp)
80024560:	afa40010 	sw	a0,16(sp)
80024564:	a3a50016 	sb	a1,22(sp)
80024568:	a3a60017 	sb	a2,23(sp)
8002456c:	afa40018 	sw	a0,24(sp)
            atomic_store(self.v.get(), val as u8, order);
80024570:	0c00de94 	jal	80037a50 <_ZN4core4sync6atomic12atomic_store17h780d1e615775873aE>
80024574:	00000000 	nop
    }
80024578:	8fbf001c 	lw	ra,28(sp)
8002457c:	27bd0020 	addiu	sp,sp,32
80024580:	03e00008 	jr	ra
80024584:	00000000 	nop

80024588 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE>:
                since = "1.50.0",
                note = "Use `compare_exchange` or `compare_exchange_weak` instead")
            ]
            #[$cfg_cas]
            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
            pub fn compare_and_swap(&self,
80024588:	27bdffb0 	addiu	sp,sp,-80
8002458c:	afbf004c 	sw	ra,76(sp)
80024590:	afa70024 	sw	a3,36(sp)
80024594:	afa60020 	sw	a2,32(sp)
80024598:	afa5001c 	sw	a1,28(sp)
8002459c:	00800825 	move	at,a0
800245a0:	8fa40024 	lw	a0,36(sp)
800245a4:	afa10018 	sw	at,24(sp)
800245a8:	afa10034 	sw	at,52(sp)
800245ac:	afa50038 	sw	a1,56(sp)
800245b0:	afa6003c 	sw	a2,60(sp)
800245b4:	a3a40043 	sb	a0,67(sp)
                                    new: $int_type,
                                    order: Ordering) -> $int_type {
                match self.compare_exchange(current,
                                            new,
                                            order,
                                            strongest_failure_ordering(order)) {
800245b8:	0c009379 	jal	80024de4 <_ZN4core4sync6atomic26strongest_failure_ordering17h768be279b8f53113E>
800245bc:	00000000 	nop
800245c0:	8fa40018 	lw	a0,24(sp)
800245c4:	8fa5001c 	lw	a1,28(sp)
800245c8:	8fa60020 	lw	a2,32(sp)
800245cc:	8fa70024 	lw	a3,36(sp)
                match self.compare_exchange(current,
800245d0:	03a00825 	move	at,sp
800245d4:	ac220010 	sw	v0,16(at)
800245d8:	0c00918e 	jal	80024638 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17hcd3d647a0de3ddc8E>
800245dc:	00000000 	nop
800245e0:	afa2002c 	sw	v0,44(sp)
800245e4:	afa30030 	sw	v1,48(sp)
800245e8:	8fa1002c 	lw	at,44(sp)
800245ec:	14200008 	bnez	at,80024610 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE+0x88>
800245f0:	00000000 	nop
800245f4:	0800917f 	j	800245fc <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE+0x74>
800245f8:	00000000 	nop
                    Ok(x) => x,
800245fc:	8fa10030 	lw	at,48(sp)
80024600:	afa10044 	sw	at,68(sp)
80024604:	afa10028 	sw	at,40(sp)
80024608:	08009189 	j	80024624 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE+0x9c>
8002460c:	00000000 	nop
                    Err(x) => x,
80024610:	8fa10030 	lw	at,48(sp)
80024614:	afa10048 	sw	at,72(sp)
80024618:	afa10028 	sw	at,40(sp)
8002461c:	08009189 	j	80024624 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE+0x9c>
80024620:	00000000 	nop
                }
            }
80024624:	8fa20028 	lw	v0,40(sp)
80024628:	8fbf004c 	lw	ra,76(sp)
8002462c:	27bd0050 	addiu	sp,sp,80
80024630:	03e00008 	jr	ra
80024634:	00000000 	nop

80024638 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17hcd3d647a0de3ddc8E>:
            /// ```
            #[inline]
            #[$stable_cxchg]
            #[$cfg_cas]
            #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
            pub fn compare_exchange(&self,
80024638:	27bdffd0 	addiu	sp,sp,-48
8002463c:	afbf002c 	sw	ra,44(sp)
80024640:	8fa10040 	lw	at,64(sp)
80024644:	afa40018 	sw	a0,24(sp)
80024648:	afa5001c 	sw	a1,28(sp)
8002464c:	afa60020 	sw	a2,32(sp)
80024650:	a3a70026 	sb	a3,38(sp)
80024654:	a3a10027 	sb	at,39(sp)
80024658:	afa40028 	sw	a0,40(sp)
                                    current: $int_type,
                                    new: $int_type,
                                    success: Ordering,
                                    failure: Ordering) -> Result<$int_type, $int_type> {
                // SAFETY: data races are prevented by atomic intrinsics.
                unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }
8002465c:	03a01025 	move	v0,sp
80024660:	ac410010 	sw	at,16(v0)
80024664:	0c0091b8 	jal	800246e0 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E>
80024668:	00000000 	nop
            }
8002466c:	8fbf002c 	lw	ra,44(sp)
80024670:	27bd0030 	addiu	sp,sp,48
80024674:	03e00008 	jr	ra
80024678:	00000000 	nop

8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>:
            pub fn load(&self, order: Ordering) -> $int_type {
8002467c:	27bdffe0 	addiu	sp,sp,-32
80024680:	afbf001c 	sw	ra,28(sp)
80024684:	afa40010 	sw	a0,16(sp)
80024688:	a3a50017 	sb	a1,23(sp)
8002468c:	afa40018 	sw	a0,24(sp)
                unsafe { atomic_load(self.v.get(), order) }
80024690:	0c00fe27 	jal	8003f89c <_ZN4core4sync6atomic11atomic_load17h79b9762b4806e280E>
80024694:	00000000 	nop
            }
80024698:	8fbf001c 	lw	ra,28(sp)
8002469c:	27bd0020 	addiu	sp,sp,32
800246a0:	03e00008 	jr	ra
800246a4:	00000000 	nop

800246a8 <_ZN4core4sync6atomic11AtomicUsize5store17heacd8522e5ea3cb1E>:
            pub fn store(&self, val: $int_type, order: Ordering) {
800246a8:	27bdffd8 	addiu	sp,sp,-40
800246ac:	afbf0024 	sw	ra,36(sp)
800246b0:	afa40014 	sw	a0,20(sp)
800246b4:	afa50018 	sw	a1,24(sp)
800246b8:	a3a6001f 	sb	a2,31(sp)
800246bc:	afa40020 	sw	a0,32(sp)
                unsafe { atomic_store(self.v.get(), val, order); }
800246c0:	0c00e37b 	jal	80038dec <_ZN4core4sync6atomic12atomic_store17h2e8cbebea0e987eaE>
800246c4:	00000000 	nop
            }
800246c8:	8fbf0024 	lw	ra,36(sp)
800246cc:	27bd0028 	addiu	sp,sp,40
800246d0:	03e00008 	jr	ra
800246d4:	00000000 	nop

800246d8 <_ZN4core4sync6atomic14spin_loop_hint17h56596ec2462f6e38E>:
#[inline]
#[stable(feature = "spin_loop_hint", since = "1.24.0")]
#[deprecated(since = "1.51.0", note = "use hint::spin_loop instead")]
pub fn spin_loop_hint() {
    spin_loop()
}
800246d8:	03e00008 	jr	ra
800246dc:	00000000 	nop

800246e0 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E>:
unsafe fn atomic_compare_exchange<T: Copy>(
800246e0:	27bdff60 	addiu	sp,sp,-160
800246e4:	afbf009c 	sw	ra,156(sp)
800246e8:	afa60030 	sw	a2,48(sp)
800246ec:	afa50034 	sw	a1,52(sp)
800246f0:	afa40038 	sw	a0,56(sp)
800246f4:	8fa100b0 	lw	at,176(sp)
800246f8:	afa40084 	sw	a0,132(sp)
800246fc:	afa50088 	sw	a1,136(sp)
80024700:	afa6008c 	sw	a2,140(sp)
80024704:	a3a70092 	sb	a3,146(sp)
80024708:	a3a10093 	sb	at,147(sp)
        match (success, failure) {
8002470c:	a3a70052 	sb	a3,82(sp)
80024710:	a3a10053 	sb	at,83(sp)
80024714:	93a10052 	lbu	at,82(sp)
80024718:	afa1003c 	sw	at,60(sp)
8002471c:	8fa1003c 	lw	at,60(sp)
80024720:	00010880 	sll	at,at,0x2
80024724:	3c028105 	lui	v0,0x8105
80024728:	00220821 	addu	at,at,v0
8002472c:	8c21e010 	lw	at,-8176(at)
80024730:	00200008 	jr	at
80024734:	00000000 	nop
80024738:	0000000d 	break
8002473c:	93a10053 	lbu	at,83(sp)
80024740:	afa1002c 	sw	at,44(sp)
80024744:	1020005d 	beqz	at,800248bc <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x1dc>
80024748:	00000000 	nop
8002474c:	080091d5 	j	80024754 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x74>
80024750:	00000000 	nop
80024754:	8fa1002c 	lw	at,44(sp)
80024758:	24020002 	li	v0,2
8002475c:	10220068 	beq	at,v0,80024900 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x220>
80024760:	00000000 	nop
80024764:	080091db 	j	8002476c <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x8c>
80024768:	00000000 	nop
8002476c:	8fa1002c 	lw	at,44(sp)
80024770:	24020004 	li	v0,4
80024774:	10220074 	beq	at,v0,80024948 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x268>
80024778:	00000000 	nop
8002477c:	08009229 	j	800248a4 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x1c4>
80024780:	00000000 	nop
80024784:	93a10053 	lbu	at,83(sp)
80024788:	afa10028 	sw	at,40(sp)
8002478c:	1020008b 	beqz	at,800249bc <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2dc>
80024790:	00000000 	nop
80024794:	080091e7 	j	8002479c <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0xbc>
80024798:	00000000 	nop
8002479c:	8fa10028 	lw	at,40(sp)
800247a0:	24020002 	li	v0,2
800247a4:	10220097 	beq	at,v0,80024a04 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x324>
800247a8:	00000000 	nop
800247ac:	080091ed 	j	800247b4 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0xd4>
800247b0:	00000000 	nop
800247b4:	8fa10028 	lw	at,40(sp)
800247b8:	24020004 	li	v0,4
800247bc:	102200a4 	beq	at,v0,80024a50 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x370>
800247c0:	00000000 	nop
800247c4:	08009229 	j	800248a4 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x1c4>
800247c8:	00000000 	nop
800247cc:	93a10053 	lbu	at,83(sp)
800247d0:	afa10024 	sw	at,36(sp)
800247d4:	102000b1 	beqz	at,80024a9c <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x3bc>
800247d8:	00000000 	nop
800247dc:	080091f9 	j	800247e4 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x104>
800247e0:	00000000 	nop
800247e4:	8fa10024 	lw	at,36(sp)
800247e8:	24020002 	li	v0,2
800247ec:	102200bd 	beq	at,v0,80024ae4 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x404>
800247f0:	00000000 	nop
800247f4:	080091ff 	j	800247fc <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x11c>
800247f8:	00000000 	nop
800247fc:	8fa10024 	lw	at,36(sp)
80024800:	24020004 	li	v0,4
80024804:	102200c9 	beq	at,v0,80024b2c <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x44c>
80024808:	00000000 	nop
8002480c:	08009229 	j	800248a4 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x1c4>
80024810:	00000000 	nop
80024814:	93a10053 	lbu	at,83(sp)
80024818:	afa10020 	sw	at,32(sp)
8002481c:	102000d6 	beqz	at,80024b78 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x498>
80024820:	00000000 	nop
80024824:	0800920b 	j	8002482c <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x14c>
80024828:	00000000 	nop
8002482c:	8fa10020 	lw	at,32(sp)
80024830:	24020002 	li	v0,2
80024834:	102200e3 	beq	at,v0,80024bc4 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x4e4>
80024838:	00000000 	nop
8002483c:	08009211 	j	80024844 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x164>
80024840:	00000000 	nop
80024844:	8fa10020 	lw	at,32(sp)
80024848:	24020004 	li	v0,4
8002484c:	102200f0 	beq	at,v0,80024c10 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x530>
80024850:	00000000 	nop
80024854:	08009229 	j	800248a4 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x1c4>
80024858:	00000000 	nop
8002485c:	93a10053 	lbu	at,83(sp)
80024860:	afa1001c 	sw	at,28(sp)
80024864:	102000fd 	beqz	at,80024c5c <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x57c>
80024868:	00000000 	nop
8002486c:	0800921d 	j	80024874 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x194>
80024870:	00000000 	nop
80024874:	8fa1001c 	lw	at,28(sp)
80024878:	24020002 	li	v0,2
8002487c:	1022010a 	beq	at,v0,80024ca8 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x5c8>
80024880:	00000000 	nop
80024884:	08009223 	j	8002488c <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x1ac>
80024888:	00000000 	nop
8002488c:	8fa1001c 	lw	at,28(sp)
80024890:	24020004 	li	v0,4
80024894:	10220117 	beq	at,v0,80024cf4 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x614>
80024898:	00000000 	nop
8002489c:	08009229 	j	800248a4 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x1c4>
800248a0:	00000000 	nop
800248a4:	93a10053 	lbu	at,83(sp)
800248a8:	24020001 	li	v0,1
800248ac:	10220135 	beq	at,v0,80024d84 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x6a4>
800248b0:	00000000 	nop
800248b4:	0800936d 	j	80024db4 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x6d4>
800248b8:	00000000 	nop
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed_relaxed(dst, old, new),
800248bc:	8fa10034 	lw	at,52(sp)
800248c0:	8fa60030 	lw	a2,48(sp)
800248c4:	8fa40038 	lw	a0,56(sp)
800248c8:	00202825 	move	a1,at
800248cc:	c0820000 	ll	v0,0(a0)
800248d0:	14450005 	bne	v0,a1,800248e8 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x208>
800248d4:	00000000 	nop
800248d8:	00c01825 	move	v1,a2
800248dc:	e0830000 	sc	v1,0(a0)
800248e0:	1060fffa 	beqz	v1,800248cc <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x1ec>
800248e4:	00000000 	nop
800248e8:	00410826 	xor	at,v0,at
800248ec:	2c210001 	sltiu	at,at,1
800248f0:	afa20048 	sw	v0,72(sp)
800248f4:	a3a1004c 	sb	at,76(sp)
800248f8:	08009265 	j	80024994 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2b4>
800248fc:	00000000 	nop
            (Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),
80024900:	8fa10034 	lw	at,52(sp)
80024904:	8fa60030 	lw	a2,48(sp)
80024908:	8fa40038 	lw	a0,56(sp)
8002490c:	00202825 	move	a1,at
80024910:	c0820000 	ll	v0,0(a0)
80024914:	14450005 	bne	v0,a1,8002492c <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x24c>
80024918:	00000000 	nop
8002491c:	00c01825 	move	v1,a2
80024920:	e0830000 	sc	v1,0(a0)
80024924:	1060fffa 	beqz	v1,80024910 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x230>
80024928:	00000000 	nop
8002492c:	00410826 	xor	at,v0,at
80024930:	2c210001 	sltiu	at,at,1
80024934:	0000000f 	sync
80024938:	afa20048 	sw	v0,72(sp)
8002493c:	a3a1004c 	sb	at,76(sp)
80024940:	08009265 	j	80024994 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2b4>
80024944:	00000000 	nop
            (Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),
80024948:	8fa10034 	lw	at,52(sp)
8002494c:	8fa60030 	lw	a2,48(sp)
80024950:	8fa40038 	lw	a0,56(sp)
80024954:	0000000f 	sync
80024958:	00202825 	move	a1,at
8002495c:	c0820000 	ll	v0,0(a0)
80024960:	14450005 	bne	v0,a1,80024978 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x298>
80024964:	00000000 	nop
80024968:	00c01825 	move	v1,a2
8002496c:	e0830000 	sc	v1,0(a0)
80024970:	1060fffa 	beqz	v1,8002495c <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x27c>
80024974:	00000000 	nop
80024978:	00410826 	xor	at,v0,at
8002497c:	2c210001 	sltiu	at,at,1
80024980:	0000000f 	sync
80024984:	afa20048 	sw	v0,72(sp)
80024988:	a3a1004c 	sb	at,76(sp)
8002498c:	08009265 	j	80024994 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2b4>
80024990:	00000000 	nop
    let (val, ok) = unsafe {
80024994:	8fa10048 	lw	at,72(sp)
80024998:	afa10018 	sw	at,24(sp)
8002499c:	afa10094 	sw	at,148(sp)
800249a0:	93a1004c 	lbu	at,76(sp)
800249a4:	30210001 	andi	at,at,0x1
800249a8:	a3a1009b 	sb	at,155(sp)
    if ok { Ok(val) } else { Err(val) }
800249ac:	142000ea 	bnez	at,80024d58 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x678>
800249b0:	00000000 	nop
800249b4:	08009350 	j	80024d40 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x660>
800249b8:	00000000 	nop
            (Release, Relaxed) => intrinsics::atomic_cxchg_release_relaxed(dst, old, new),
800249bc:	8fa10034 	lw	at,52(sp)
800249c0:	8fa60030 	lw	a2,48(sp)
800249c4:	8fa40038 	lw	a0,56(sp)
800249c8:	0000000f 	sync
800249cc:	00202825 	move	a1,at
800249d0:	c0820000 	ll	v0,0(a0)
800249d4:	14450005 	bne	v0,a1,800249ec <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x30c>
800249d8:	00000000 	nop
800249dc:	00c01825 	move	v1,a2
800249e0:	e0830000 	sc	v1,0(a0)
800249e4:	1060fffa 	beqz	v1,800249d0 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2f0>
800249e8:	00000000 	nop
800249ec:	00410826 	xor	at,v0,at
800249f0:	2c210001 	sltiu	at,at,1
800249f4:	afa20048 	sw	v0,72(sp)
800249f8:	a3a1004c 	sb	at,76(sp)
800249fc:	08009265 	j	80024994 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2b4>
80024a00:	00000000 	nop
            (Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),
80024a04:	8fa10034 	lw	at,52(sp)
80024a08:	8fa60030 	lw	a2,48(sp)
80024a0c:	8fa40038 	lw	a0,56(sp)
80024a10:	0000000f 	sync
80024a14:	00202825 	move	a1,at
80024a18:	c0820000 	ll	v0,0(a0)
80024a1c:	14450005 	bne	v0,a1,80024a34 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x354>
80024a20:	00000000 	nop
80024a24:	00c01825 	move	v1,a2
80024a28:	e0830000 	sc	v1,0(a0)
80024a2c:	1060fffa 	beqz	v1,80024a18 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x338>
80024a30:	00000000 	nop
80024a34:	00410826 	xor	at,v0,at
80024a38:	2c210001 	sltiu	at,at,1
80024a3c:	0000000f 	sync
80024a40:	afa20048 	sw	v0,72(sp)
80024a44:	a3a1004c 	sb	at,76(sp)
80024a48:	08009265 	j	80024994 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2b4>
80024a4c:	00000000 	nop
            (Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),
80024a50:	8fa10034 	lw	at,52(sp)
80024a54:	8fa60030 	lw	a2,48(sp)
80024a58:	8fa40038 	lw	a0,56(sp)
80024a5c:	0000000f 	sync
80024a60:	00202825 	move	a1,at
80024a64:	c0820000 	ll	v0,0(a0)
80024a68:	14450005 	bne	v0,a1,80024a80 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x3a0>
80024a6c:	00000000 	nop
80024a70:	00c01825 	move	v1,a2
80024a74:	e0830000 	sc	v1,0(a0)
80024a78:	1060fffa 	beqz	v1,80024a64 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x384>
80024a7c:	00000000 	nop
80024a80:	00410826 	xor	at,v0,at
80024a84:	2c210001 	sltiu	at,at,1
80024a88:	0000000f 	sync
80024a8c:	afa20048 	sw	v0,72(sp)
80024a90:	a3a1004c 	sb	at,76(sp)
80024a94:	08009265 	j	80024994 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2b4>
80024a98:	00000000 	nop
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),
80024a9c:	8fa10034 	lw	at,52(sp)
80024aa0:	8fa60030 	lw	a2,48(sp)
80024aa4:	8fa40038 	lw	a0,56(sp)
80024aa8:	00202825 	move	a1,at
80024aac:	c0820000 	ll	v0,0(a0)
80024ab0:	14450005 	bne	v0,a1,80024ac8 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x3e8>
80024ab4:	00000000 	nop
80024ab8:	00c01825 	move	v1,a2
80024abc:	e0830000 	sc	v1,0(a0)
80024ac0:	1060fffa 	beqz	v1,80024aac <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x3cc>
80024ac4:	00000000 	nop
80024ac8:	00410826 	xor	at,v0,at
80024acc:	2c210001 	sltiu	at,at,1
80024ad0:	0000000f 	sync
80024ad4:	afa20048 	sw	v0,72(sp)
80024ad8:	a3a1004c 	sb	at,76(sp)
80024adc:	08009265 	j	80024994 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2b4>
80024ae0:	00000000 	nop
            (Acquire, Acquire) => intrinsics::atomic_cxchg_acquire_acquire(dst, old, new),
80024ae4:	8fa10034 	lw	at,52(sp)
80024ae8:	8fa60030 	lw	a2,48(sp)
80024aec:	8fa40038 	lw	a0,56(sp)
80024af0:	00202825 	move	a1,at
80024af4:	c0820000 	ll	v0,0(a0)
80024af8:	14450005 	bne	v0,a1,80024b10 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x430>
80024afc:	00000000 	nop
80024b00:	00c01825 	move	v1,a2
80024b04:	e0830000 	sc	v1,0(a0)
80024b08:	1060fffa 	beqz	v1,80024af4 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x414>
80024b0c:	00000000 	nop
80024b10:	00410826 	xor	at,v0,at
80024b14:	2c210001 	sltiu	at,at,1
80024b18:	0000000f 	sync
80024b1c:	afa20048 	sw	v0,72(sp)
80024b20:	a3a1004c 	sb	at,76(sp)
80024b24:	08009265 	j	80024994 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2b4>
80024b28:	00000000 	nop
            (Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),
80024b2c:	8fa10034 	lw	at,52(sp)
80024b30:	8fa60030 	lw	a2,48(sp)
80024b34:	8fa40038 	lw	a0,56(sp)
80024b38:	0000000f 	sync
80024b3c:	00202825 	move	a1,at
80024b40:	c0820000 	ll	v0,0(a0)
80024b44:	14450005 	bne	v0,a1,80024b5c <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x47c>
80024b48:	00000000 	nop
80024b4c:	00c01825 	move	v1,a2
80024b50:	e0830000 	sc	v1,0(a0)
80024b54:	1060fffa 	beqz	v1,80024b40 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x460>
80024b58:	00000000 	nop
80024b5c:	00410826 	xor	at,v0,at
80024b60:	2c210001 	sltiu	at,at,1
80024b64:	0000000f 	sync
80024b68:	afa20048 	sw	v0,72(sp)
80024b6c:	a3a1004c 	sb	at,76(sp)
80024b70:	08009265 	j	80024994 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2b4>
80024b74:	00000000 	nop
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_relaxed(dst, old, new),
80024b78:	8fa10034 	lw	at,52(sp)
80024b7c:	8fa60030 	lw	a2,48(sp)
80024b80:	8fa40038 	lw	a0,56(sp)
80024b84:	0000000f 	sync
80024b88:	00202825 	move	a1,at
80024b8c:	c0820000 	ll	v0,0(a0)
80024b90:	14450005 	bne	v0,a1,80024ba8 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x4c8>
80024b94:	00000000 	nop
80024b98:	00c01825 	move	v1,a2
80024b9c:	e0830000 	sc	v1,0(a0)
80024ba0:	1060fffa 	beqz	v1,80024b8c <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x4ac>
80024ba4:	00000000 	nop
80024ba8:	00410826 	xor	at,v0,at
80024bac:	2c210001 	sltiu	at,at,1
80024bb0:	0000000f 	sync
80024bb4:	afa20048 	sw	v0,72(sp)
80024bb8:	a3a1004c 	sb	at,76(sp)
80024bbc:	08009265 	j	80024994 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2b4>
80024bc0:	00000000 	nop
            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel_acquire(dst, old, new),
80024bc4:	8fa10034 	lw	at,52(sp)
80024bc8:	8fa60030 	lw	a2,48(sp)
80024bcc:	8fa40038 	lw	a0,56(sp)
80024bd0:	0000000f 	sync
80024bd4:	00202825 	move	a1,at
80024bd8:	c0820000 	ll	v0,0(a0)
80024bdc:	14450005 	bne	v0,a1,80024bf4 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x514>
80024be0:	00000000 	nop
80024be4:	00c01825 	move	v1,a2
80024be8:	e0830000 	sc	v1,0(a0)
80024bec:	1060fffa 	beqz	v1,80024bd8 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x4f8>
80024bf0:	00000000 	nop
80024bf4:	00410826 	xor	at,v0,at
80024bf8:	2c210001 	sltiu	at,at,1
80024bfc:	0000000f 	sync
80024c00:	afa20048 	sw	v0,72(sp)
80024c04:	a3a1004c 	sb	at,76(sp)
80024c08:	08009265 	j	80024994 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2b4>
80024c0c:	00000000 	nop
            (AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),
80024c10:	8fa10034 	lw	at,52(sp)
80024c14:	8fa60030 	lw	a2,48(sp)
80024c18:	8fa40038 	lw	a0,56(sp)
80024c1c:	0000000f 	sync
80024c20:	00202825 	move	a1,at
80024c24:	c0820000 	ll	v0,0(a0)
80024c28:	14450005 	bne	v0,a1,80024c40 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x560>
80024c2c:	00000000 	nop
80024c30:	00c01825 	move	v1,a2
80024c34:	e0830000 	sc	v1,0(a0)
80024c38:	1060fffa 	beqz	v1,80024c24 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x544>
80024c3c:	00000000 	nop
80024c40:	00410826 	xor	at,v0,at
80024c44:	2c210001 	sltiu	at,at,1
80024c48:	0000000f 	sync
80024c4c:	afa20048 	sw	v0,72(sp)
80024c50:	a3a1004c 	sb	at,76(sp)
80024c54:	08009265 	j	80024994 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2b4>
80024c58:	00000000 	nop
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_seqcst_relaxed(dst, old, new),
80024c5c:	8fa10034 	lw	at,52(sp)
80024c60:	8fa60030 	lw	a2,48(sp)
80024c64:	8fa40038 	lw	a0,56(sp)
80024c68:	0000000f 	sync
80024c6c:	00202825 	move	a1,at
80024c70:	c0820000 	ll	v0,0(a0)
80024c74:	14450005 	bne	v0,a1,80024c8c <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x5ac>
80024c78:	00000000 	nop
80024c7c:	00c01825 	move	v1,a2
80024c80:	e0830000 	sc	v1,0(a0)
80024c84:	1060fffa 	beqz	v1,80024c70 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x590>
80024c88:	00000000 	nop
80024c8c:	00410826 	xor	at,v0,at
80024c90:	2c210001 	sltiu	at,at,1
80024c94:	0000000f 	sync
80024c98:	afa20048 	sw	v0,72(sp)
80024c9c:	a3a1004c 	sb	at,76(sp)
80024ca0:	08009265 	j	80024994 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2b4>
80024ca4:	00000000 	nop
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_seqcst_acquire(dst, old, new),
80024ca8:	8fa10034 	lw	at,52(sp)
80024cac:	8fa60030 	lw	a2,48(sp)
80024cb0:	8fa40038 	lw	a0,56(sp)
80024cb4:	0000000f 	sync
80024cb8:	00202825 	move	a1,at
80024cbc:	c0820000 	ll	v0,0(a0)
80024cc0:	14450005 	bne	v0,a1,80024cd8 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x5f8>
80024cc4:	00000000 	nop
80024cc8:	00c01825 	move	v1,a2
80024ccc:	e0830000 	sc	v1,0(a0)
80024cd0:	1060fffa 	beqz	v1,80024cbc <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x5dc>
80024cd4:	00000000 	nop
80024cd8:	00410826 	xor	at,v0,at
80024cdc:	2c210001 	sltiu	at,at,1
80024ce0:	0000000f 	sync
80024ce4:	afa20048 	sw	v0,72(sp)
80024ce8:	a3a1004c 	sb	at,76(sp)
80024cec:	08009265 	j	80024994 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2b4>
80024cf0:	00000000 	nop
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg_seqcst_seqcst(dst, old, new),
80024cf4:	8fa10034 	lw	at,52(sp)
80024cf8:	8fa60030 	lw	a2,48(sp)
80024cfc:	8fa40038 	lw	a0,56(sp)
80024d00:	0000000f 	sync
80024d04:	00202825 	move	a1,at
80024d08:	c0820000 	ll	v0,0(a0)
80024d0c:	14450005 	bne	v0,a1,80024d24 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x644>
80024d10:	00000000 	nop
80024d14:	00c01825 	move	v1,a2
80024d18:	e0830000 	sc	v1,0(a0)
80024d1c:	1060fffa 	beqz	v1,80024d08 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x628>
80024d20:	00000000 	nop
80024d24:	00410826 	xor	at,v0,at
80024d28:	2c210001 	sltiu	at,at,1
80024d2c:	0000000f 	sync
80024d30:	afa20048 	sw	v0,72(sp)
80024d34:	a3a1004c 	sb	at,76(sp)
80024d38:	08009265 	j	80024994 <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x2b4>
80024d3c:	00000000 	nop
    if ok { Ok(val) } else { Err(val) }
80024d40:	8fa10018 	lw	at,24(sp)
80024d44:	afa10044 	sw	at,68(sp)
80024d48:	24010001 	li	at,1
80024d4c:	afa10040 	sw	at,64(sp)
80024d50:	0800935b 	j	80024d6c <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x68c>
80024d54:	00000000 	nop
80024d58:	8fa10018 	lw	at,24(sp)
80024d5c:	afa10044 	sw	at,68(sp)
80024d60:	afa00040 	sw	zero,64(sp)
80024d64:	0800935b 	j	80024d6c <_ZN4core4sync6atomic23atomic_compare_exchange17h04457b5f7bb7a4d4E+0x68c>
80024d68:	00000000 	nop
}
80024d6c:	8fa20040 	lw	v0,64(sp)
80024d70:	8fa30044 	lw	v1,68(sp)
80024d74:	8fbf009c 	lw	ra,156(sp)
80024d78:	27bd00a0 	addiu	sp,sp,160
80024d7c:	03e00008 	jr	ra
80024d80:	00000000 	nop
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
80024d84:	3c018105 	lui	at,0x8105
80024d88:	2425e91c 	addiu	a1,at,-5860
80024d8c:	27a4006c 	addiu	a0,sp,108
80024d90:	afa40014 	sw	a0,20(sp)
80024d94:	24060001 	li	a2,1
80024d98:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80024d9c:	00000000 	nop
80024da0:	8fa40014 	lw	a0,20(sp)
80024da4:	3c018105 	lui	at,0x8105
80024da8:	2425e998 	addiu	a1,at,-5736
80024dac:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80024db0:	00000000 	nop
            (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
80024db4:	3c018105 	lui	at,0x8105
80024db8:	2425e9e8 	addiu	a1,at,-5656
80024dbc:	27a40054 	addiu	a0,sp,84
80024dc0:	afa40010 	sw	a0,16(sp)
80024dc4:	24060001 	li	a2,1
80024dc8:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80024dcc:	00000000 	nop
80024dd0:	8fa40010 	lw	a0,16(sp)
80024dd4:	3c018105 	lui	at,0x8105
80024dd8:	2425e9f0 	addiu	a1,at,-5648
80024ddc:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80024de0:	00000000 	nop

80024de4 <_ZN4core4sync6atomic26strongest_failure_ordering17h768be279b8f53113E>:
fn strongest_failure_ordering(order: Ordering) -> Ordering {
80024de4:	27bdfff8 	addiu	sp,sp,-8
80024de8:	a3a40006 	sb	a0,6(sp)
    match order {
80024dec:	93a10006 	lbu	at,6(sp)
80024df0:	afa10000 	sw	at,0(sp)
80024df4:	8fa10000 	lw	at,0(sp)
80024df8:	00010880 	sll	at,at,0x2
80024dfc:	3c028105 	lui	v0,0x8105
80024e00:	00220821 	addu	at,at,v0
80024e04:	8c21e024 	lw	at,-8156(at)
80024e08:	00200008 	jr	at
80024e0c:	00000000 	nop
80024e10:	0000000d 	break
80024e14:	24010000 	li	at,0
        Relaxed => Relaxed,
80024e18:	a3a00007 	sb	zero,7(sp)
80024e1c:	08009399 	j	80024e64 <_ZN4core4sync6atomic26strongest_failure_ordering17h768be279b8f53113E+0x80>
80024e20:	00000000 	nop
80024e24:	24010000 	li	at,0
        Release => Relaxed,
80024e28:	a3a00007 	sb	zero,7(sp)
80024e2c:	08009399 	j	80024e64 <_ZN4core4sync6atomic26strongest_failure_ordering17h768be279b8f53113E+0x80>
80024e30:	00000000 	nop
80024e34:	24010002 	li	at,2
        Acquire => Acquire,
80024e38:	a3a10007 	sb	at,7(sp)
80024e3c:	08009399 	j	80024e64 <_ZN4core4sync6atomic26strongest_failure_ordering17h768be279b8f53113E+0x80>
80024e40:	00000000 	nop
80024e44:	24010002 	li	at,2
        AcqRel => Acquire,
80024e48:	a3a10007 	sb	at,7(sp)
80024e4c:	08009399 	j	80024e64 <_ZN4core4sync6atomic26strongest_failure_ordering17h768be279b8f53113E+0x80>
80024e50:	00000000 	nop
80024e54:	24010004 	li	at,4
        SeqCst => SeqCst,
80024e58:	a3a10007 	sb	at,7(sp)
80024e5c:	08009399 	j	80024e64 <_ZN4core4sync6atomic26strongest_failure_ordering17h768be279b8f53113E+0x80>
80024e60:	00000000 	nop
}
80024e64:	93a20007 	lbu	v0,7(sp)
80024e68:	27bd0008 	addiu	sp,sp,8
80024e6c:	03e00008 	jr	ra
80024e70:	00000000 	nop

80024e74 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17hacc88cf31ff8ccc2E>:
    /// allocation error are encouraged to call the [`handle_alloc_error`] function,
    /// rather than directly invoking `panic!` or similar.
    ///
    /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html
    #[stable(feature = "global_alloc", since = "1.28.0")]
    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
80024e74:	27bdffc0 	addiu	sp,sp,-64
80024e78:	afbf003c 	sw	ra,60(sp)
80024e7c:	afa40010 	sw	a0,16(sp)
80024e80:	afa5001c 	sw	a1,28(sp)
80024e84:	afa60020 	sw	a2,32(sp)
80024e88:	afa40024 	sw	a0,36(sp)
80024e8c:	27a4001c 	addiu	a0,sp,28
        let size = layout.size();
80024e90:	0c009481 	jal	80025204 <_ZN4core5alloc6layout6Layout4size17h2e77e01e84646f95E>
80024e94:	00000000 	nop
80024e98:	8fa40010 	lw	a0,16(sp)
80024e9c:	00400825 	move	at,v0
80024ea0:	afa10014 	sw	at,20(sp)
80024ea4:	afa20028 	sw	v0,40(sp)
        // SAFETY: the safety contract for `alloc` must be upheld by the caller.
        let ptr = unsafe { self.alloc(layout) };
80024ea8:	8fa5001c 	lw	a1,28(sp)
80024eac:	8fa60020 	lw	a2,32(sp)
80024eb0:	0c00e212 	jal	80038848 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E>
80024eb4:	00000000 	nop
80024eb8:	00402025 	move	a0,v0
80024ebc:	00801025 	move	v0,a0
80024ec0:	afa20018 	sw	v0,24(sp)
80024ec4:	afa4002c 	sw	a0,44(sp)
        if !ptr.is_null() {
80024ec8:	0c00e62b 	jal	800398ac <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h15051cef55498a68E>
80024ecc:	00000000 	nop
80024ed0:	1440001c 	bnez	v0,80024f44 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17hacc88cf31ff8ccc2E+0xd0>
80024ed4:	00000000 	nop
80024ed8:	080093b8 	j	80024ee0 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17hacc88cf31ff8ccc2E+0x6c>
80024edc:	00000000 	nop
80024ee0:	8fa10014 	lw	at,20(sp)
80024ee4:	8fa20018 	lw	v0,24(sp)
80024ee8:	afa20030 	sw	v0,48(sp)
80024eec:	24020000 	li	v0,0
80024ef0:	a3a00037 	sb	zero,55(sp)
80024ef4:	afa10038 	sw	at,56(sp)
        ub_checks::assert_unsafe_precondition!(
80024ef8:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80024efc:	00000000 	nop
80024f00:	10400009 	beqz	v0,80024f28 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17hacc88cf31ff8ccc2E+0xb4>
80024f04:	00000000 	nop
80024f08:	080093c4 	j	80024f10 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17hacc88cf31ff8ccc2E+0x9c>
80024f0c:	00000000 	nop
80024f10:	8fa40018 	lw	a0,24(sp)
80024f14:	24050001 	li	a1,1
80024f18:	0c0081db 	jal	8002076c <_ZN4core10intrinsics11write_bytes18precondition_check17h0cfe4849b5991fcdE>
80024f1c:	00000000 	nop
80024f20:	080093ca 	j	80024f28 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17hacc88cf31ff8ccc2E+0xb4>
80024f24:	00000000 	nop
        );
        write_bytes(dst, val, count)
80024f28:	8fa60014 	lw	a2,20(sp)
80024f2c:	8fa40018 	lw	a0,24(sp)
80024f30:	24050000 	li	a1,0
80024f34:	0c00dba8 	jal	80036ea0 <memset>
80024f38:	00000000 	nop
            // SAFETY: as allocation succeeded, the region from `ptr`
            // of size `size` is guaranteed to be valid for writes.
            unsafe { ptr::write_bytes(ptr, 0, size) };
80024f3c:	080093d1 	j	80024f44 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17hacc88cf31ff8ccc2E+0xd0>
80024f40:	00000000 	nop
        }
        ptr
    }
80024f44:	8fa20018 	lw	v0,24(sp)
80024f48:	8fbf003c 	lw	ra,60(sp)
80024f4c:	27bd0040 	addiu	sp,sp,64
80024f50:	03e00008 	jr	ra
80024f54:	00000000 	nop

80024f58 <_ZN4core5alloc6global11GlobalAlloc7realloc17h5046b8705203023aE>:
    /// reallocation error are encouraged to call the [`handle_alloc_error`] function,
    /// rather than directly invoking `panic!` or similar.
    ///
    /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html
    #[stable(feature = "global_alloc", since = "1.28.0")]
    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
80024f58:	27bdffa8 	addiu	sp,sp,-88
80024f5c:	afbf0054 	sw	ra,84(sp)
80024f60:	afa5001c 	sw	a1,28(sp)
80024f64:	afa40024 	sw	a0,36(sp)
80024f68:	8fa10068 	lw	at,104(sp)
80024f6c:	afa10020 	sw	at,32(sp)
80024f70:	afa6002c 	sw	a2,44(sp)
80024f74:	afa70030 	sw	a3,48(sp)
80024f78:	afa40034 	sw	a0,52(sp)
80024f7c:	afa50038 	sw	a1,56(sp)
80024f80:	27a4002c 	addiu	a0,sp,44
        // SAFETY: the caller must ensure that the `new_size` does not overflow.
        // `layout.align()` comes from a `Layout` and is thus guaranteed to be valid.
        let new_layout = unsafe { Layout::from_size_align_unchecked(new_size, layout.align()) };
80024f84:	0c009487 	jal	8002521c <_ZN4core5alloc6layout6Layout5align17h7f1189006923f58aE>
80024f88:	00000000 	nop
80024f8c:	8fa40020 	lw	a0,32(sp)
80024f90:	00402825 	move	a1,v0
80024f94:	0c00946e 	jal	800251b8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hd800459f8b083671E>
80024f98:	00000000 	nop
80024f9c:	8fa40024 	lw	a0,36(sp)
80024fa0:	00402825 	move	a1,v0
80024fa4:	00603025 	move	a2,v1
80024fa8:	afa5003c 	sw	a1,60(sp)
80024fac:	afa60040 	sw	a2,64(sp)
        // SAFETY: the caller must ensure that `new_layout` is greater than zero.
        let new_ptr = unsafe { self.alloc(new_layout) };
80024fb0:	0c00e212 	jal	80038848 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E>
80024fb4:	00000000 	nop
80024fb8:	00402025 	move	a0,v0
80024fbc:	00801025 	move	v0,a0
80024fc0:	afa20028 	sw	v0,40(sp)
80024fc4:	afa40044 	sw	a0,68(sp)
        if !new_ptr.is_null() {
80024fc8:	0c00e62b 	jal	800398ac <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h15051cef55498a68E>
80024fcc:	00000000 	nop
80024fd0:	1440002f 	bnez	v0,80025090 <_ZN4core5alloc6global11GlobalAlloc7realloc17h5046b8705203023aE+0x138>
80024fd4:	00000000 	nop
80024fd8:	080093f8 	j	80024fe0 <_ZN4core5alloc6global11GlobalAlloc7realloc17h5046b8705203023aE+0x88>
80024fdc:	00000000 	nop
80024fe0:	27a4002c 	addiu	a0,sp,44
            // SAFETY: the previously allocated block cannot overlap the newly allocated block.
            // The safety contract for `dealloc` must be upheld by the caller.
            unsafe {
                ptr::copy_nonoverlapping(ptr, new_ptr, cmp::min(layout.size(), new_size));
80024fe4:	0c009481 	jal	80025204 <_ZN4core5alloc6layout6Layout4size17h2e77e01e84646f95E>
80024fe8:	00000000 	nop
80024fec:	8fa50020 	lw	a1,32(sp)
80024ff0:	00402025 	move	a0,v0
80024ff4:	0c00f21f 	jal	8003c87c <_ZN4core3cmp3min17hec05a35ccdb294eaE>
80024ff8:	00000000 	nop
80024ffc:	8fa3001c 	lw	v1,28(sp)
80025000:	8fa10028 	lw	at,40(sp)
80025004:	00402025 	move	a0,v0
80025008:	afa40018 	sw	a0,24(sp)
8002500c:	afa30048 	sw	v1,72(sp)
80025010:	afa1004c 	sw	at,76(sp)
80025014:	afa20050 	sw	v0,80(sp)
    ub_checks::assert_unsafe_precondition!(
80025018:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
8002501c:	00000000 	nop
80025020:	1040000e 	beqz	v0,8002505c <_ZN4core5alloc6global11GlobalAlloc7realloc17h5046b8705203023aE+0x104>
80025024:	00000000 	nop
80025028:	0800940c 	j	80025030 <_ZN4core5alloc6global11GlobalAlloc7realloc17h5046b8705203023aE+0xd8>
8002502c:	00000000 	nop
80025030:	8fa50028 	lw	a1,40(sp)
80025034:	8fa4001c 	lw	a0,28(sp)
80025038:	8fa10018 	lw	at,24(sp)
8002503c:	03a01025 	move	v0,sp
80025040:	ac410010 	sw	at,16(v0)
80025044:	24070001 	li	a3,1
80025048:	00e03025 	move	a2,a3
8002504c:	0c0081ee 	jal	800207b8 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17he2c349279c717cc2E>
80025050:	00000000 	nop
80025054:	08009417 	j	8002505c <_ZN4core5alloc6global11GlobalAlloc7realloc17h5046b8705203023aE+0x104>
80025058:	00000000 	nop
    unsafe { copy_nonoverlapping(src, dst, count) }
8002505c:	8fa5001c 	lw	a1,28(sp)
80025060:	8fa60018 	lw	a2,24(sp)
80025064:	8fa40028 	lw	a0,40(sp)
80025068:	0c00db4c 	jal	80036d30 <memcpy>
8002506c:	00000000 	nop
80025070:	8fa40024 	lw	a0,36(sp)
80025074:	8fa5001c 	lw	a1,28(sp)
                self.dealloc(ptr, layout);
80025078:	8fa6002c 	lw	a2,44(sp)
8002507c:	8fa70030 	lw	a3,48(sp)
80025080:	0c00e2e3 	jal	80038b8c <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17he4d103fab153b98fE>
80025084:	00000000 	nop
80025088:	08009424 	j	80025090 <_ZN4core5alloc6global11GlobalAlloc7realloc17h5046b8705203023aE+0x138>
8002508c:	00000000 	nop
            }
        }
        new_ptr
    }
80025090:	8fa20028 	lw	v0,40(sp)
80025094:	8fbf0054 	lw	ra,84(sp)
80025098:	27bd0058 	addiu	sp,sp,88
8002509c:	03e00008 	jr	ra
800250a0:	00000000 	nop

800250a4 <_ZN4core5alloc6layout6Layout13for_value_raw17h81da06574b7c1ef7E>:
    /// [trait object]: ../../book/ch17-02-trait-objects.html
    /// [extern type]: ../../unstable-book/language-features/extern-types.html
    #[unstable(feature = "layout_for_ptr", issue = "69835")]
    #[rustc_const_unstable(feature = "const_alloc_layout", issue = "67521")]
    #[must_use]
    pub const unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {
800250a4:	27bdffd0 	addiu	sp,sp,-48
800250a8:	afbf002c 	sw	ra,44(sp)
800250ac:	afa40010 	sw	a0,16(sp)
800250b0:	afa40020 	sw	a0,32(sp)
        // SAFETY: we pass along the prerequisites of these functions to the caller
        let (size, align) = unsafe { (mem::size_of_val_raw(t), mem::align_of_val_raw(t)) };
800250b4:	0c008412 	jal	80021048 <_ZN4core3mem15size_of_val_raw17h57e1f4a4c83b4398E>
800250b8:	00000000 	nop
800250bc:	8fa40010 	lw	a0,16(sp)
800250c0:	afa20014 	sw	v0,20(sp)
800250c4:	0c008432 	jal	800210c8 <_ZN4core3mem16align_of_val_raw17h4f078d38f486f36fE>
800250c8:	00000000 	nop
800250cc:	8fa10014 	lw	at,20(sp)
800250d0:	afa10018 	sw	at,24(sp)
800250d4:	afa2001c 	sw	v0,28(sp)
800250d8:	8fa40018 	lw	a0,24(sp)
800250dc:	afa40024 	sw	a0,36(sp)
800250e0:	8fa5001c 	lw	a1,28(sp)
800250e4:	afa50028 	sw	a1,40(sp)
        // SAFETY: see rationale in `new` for why this is using the unsafe variant
        unsafe { Layout::from_size_align_unchecked(size, align) }
800250e8:	0c00946e 	jal	800251b8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hd800459f8b083671E>
800250ec:	00000000 	nop
    }
800250f0:	8fbf002c 	lw	ra,44(sp)
800250f4:	27bd0030 	addiu	sp,sp,48
800250f8:	03e00008 	jr	ra
800250fc:	00000000 	nop

80025100 <_ZN4core5alloc6layout6Layout13for_value_raw17hbe5214bd70dd132fE>:
    pub const unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {
80025100:	27bdffd0 	addiu	sp,sp,-48
80025104:	afbf002c 	sw	ra,44(sp)
80025108:	afa40010 	sw	a0,16(sp)
8002510c:	afa40020 	sw	a0,32(sp)
        let (size, align) = unsafe { (mem::size_of_val_raw(t), mem::align_of_val_raw(t)) };
80025110:	0c008422 	jal	80021088 <_ZN4core3mem15size_of_val_raw17hee75f81fe0159776E>
80025114:	00000000 	nop
80025118:	8fa40010 	lw	a0,16(sp)
8002511c:	afa20014 	sw	v0,20(sp)
80025120:	0c00843a 	jal	800210e8 <_ZN4core3mem16align_of_val_raw17h91a95405ebfded3cE>
80025124:	00000000 	nop
80025128:	8fa10014 	lw	at,20(sp)
8002512c:	afa10018 	sw	at,24(sp)
80025130:	afa2001c 	sw	v0,28(sp)
80025134:	8fa40018 	lw	a0,24(sp)
80025138:	afa40024 	sw	a0,36(sp)
8002513c:	8fa5001c 	lw	a1,28(sp)
80025140:	afa50028 	sw	a1,40(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
80025144:	0c00946e 	jal	800251b8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hd800459f8b083671E>
80025148:	00000000 	nop
    }
8002514c:	8fbf002c 	lw	ra,44(sp)
80025150:	27bd0030 	addiu	sp,sp,48
80025154:	03e00008 	jr	ra
80025158:	00000000 	nop

8002515c <_ZN4core5alloc6layout6Layout13for_value_raw17hf9dd3319f0284991E>:
    pub const unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {
8002515c:	27bdffd0 	addiu	sp,sp,-48
80025160:	afbf002c 	sw	ra,44(sp)
80025164:	afa40010 	sw	a0,16(sp)
80025168:	afa40020 	sw	a0,32(sp)
        let (size, align) = unsafe { (mem::size_of_val_raw(t), mem::align_of_val_raw(t)) };
8002516c:	0c00841a 	jal	80021068 <_ZN4core3mem15size_of_val_raw17he9fa27894d6ccfaeE>
80025170:	00000000 	nop
80025174:	8fa40010 	lw	a0,16(sp)
80025178:	afa20014 	sw	v0,20(sp)
8002517c:	0c00842a 	jal	800210a8 <_ZN4core3mem16align_of_val_raw17h14a7253dec0945f6E>
80025180:	00000000 	nop
80025184:	8fa10014 	lw	at,20(sp)
80025188:	afa10018 	sw	at,24(sp)
8002518c:	afa2001c 	sw	v0,28(sp)
80025190:	8fa40018 	lw	a0,24(sp)
80025194:	afa40024 	sw	a0,36(sp)
80025198:	8fa5001c 	lw	a1,28(sp)
8002519c:	afa50028 	sw	a1,40(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
800251a0:	0c00946e 	jal	800251b8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hd800459f8b083671E>
800251a4:	00000000 	nop
    }
800251a8:	8fbf002c 	lw	ra,44(sp)
800251ac:	27bd0030 	addiu	sp,sp,48
800251b0:	03e00008 	jr	ra
800251b4:	00000000 	nop

800251b8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hd800459f8b083671E>:
    pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {
800251b8:	27bdffd0 	addiu	sp,sp,-48
800251bc:	afbf002c 	sw	ra,44(sp)
800251c0:	afa50014 	sw	a1,20(sp)
800251c4:	00800825 	move	at,a0
800251c8:	8fa40014 	lw	a0,20(sp)
800251cc:	afa10018 	sw	at,24(sp)
800251d0:	afa10024 	sw	at,36(sp)
800251d4:	afa40028 	sw	a0,40(sp)
        unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
800251d8:	0c008e45 	jal	80023914 <_ZN4core3ptr9alignment9Alignment13new_unchecked17hfaceacafb5b35effE>
800251dc:	00000000 	nop
800251e0:	8fa40018 	lw	a0,24(sp)
800251e4:	afa40020 	sw	a0,32(sp)
800251e8:	afa2001c 	sw	v0,28(sp)
    }
800251ec:	8fa2001c 	lw	v0,28(sp)
800251f0:	8fa30020 	lw	v1,32(sp)
800251f4:	8fbf002c 	lw	ra,44(sp)
800251f8:	27bd0030 	addiu	sp,sp,48
800251fc:	03e00008 	jr	ra
80025200:	00000000 	nop

80025204 <_ZN4core5alloc6layout6Layout4size17h2e77e01e84646f95E>:
    pub const fn size(&self) -> usize {
80025204:	27bdfff8 	addiu	sp,sp,-8
80025208:	afa40004 	sw	a0,4(sp)
        self.size
8002520c:	8c820004 	lw	v0,4(a0)
80025210:	27bd0008 	addiu	sp,sp,8
    }
80025214:	03e00008 	jr	ra
80025218:	00000000 	nop

8002521c <_ZN4core5alloc6layout6Layout5align17h7f1189006923f58aE>:
    pub const fn align(&self) -> usize {
8002521c:	27bdffe8 	addiu	sp,sp,-24
80025220:	afbf0014 	sw	ra,20(sp)
80025224:	afa40010 	sw	a0,16(sp)
        self.align.as_usize()
80025228:	8c840000 	lw	a0,0(a0)
8002522c:	0c008e9e 	jal	80023a78 <_ZN4core3ptr9alignment9Alignment8as_usize17h318212322bcdd0c1E>
80025230:	00000000 	nop
    }
80025234:	8fbf0014 	lw	ra,20(sp)
80025238:	27bd0018 	addiu	sp,sp,24
8002523c:	03e00008 	jr	ra
80025240:	00000000 	nop

80025244 <_ZN4core5alloc6layout6Layout5array17h027b76eb6a1ddc18E>:
    /// On arithmetic overflow or when the total size would exceed
    /// `isize::MAX`, returns `LayoutError`.
    #[stable(feature = "alloc_layout_manipulation", since = "1.44.0")]
    #[rustc_const_unstable(feature = "const_alloc_layout", issue = "67521")]
    #[inline]
    pub const fn array<T>(n: usize) -> Result<Self, LayoutError> {
80025244:	27bdffe0 	addiu	sp,sp,-32
80025248:	afbf001c 	sw	ra,28(sp)
8002524c:	afa40014 	sw	a0,20(sp)
80025250:	afa40018 	sw	a0,24(sp)
        // Reduce the amount of code we need to monomorphize per `T`.
        return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
80025254:	0c008e8c 	jal	80023a30 <_ZN4core3ptr9alignment9Alignment2of17hdf8d9656fb827c75E>
80025258:	00000000 	nop
8002525c:	8fa60014 	lw	a2,20(sp)
80025260:	00402825 	move	a1,v0
80025264:	24040020 	li	a0,32
80025268:	0c0094be 	jal	800252f8 <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E>
8002526c:	00000000 	nop
            // SAFETY: We just checked above that the `array_size` will not
            // exceed `isize::MAX` even when rounded up to the alignment.
            // And `Alignment` guarantees it's a power of two.
            unsafe { Ok(Layout::from_size_align_unchecked(array_size, align.as_usize())) }
        }
    }
80025270:	8fbf001c 	lw	ra,28(sp)
80025274:	27bd0020 	addiu	sp,sp,32
80025278:	03e00008 	jr	ra
8002527c:	00000000 	nop

80025280 <_ZN4core5alloc6layout6Layout5array17h46bf1e6439f9f622E>:
    pub const fn array<T>(n: usize) -> Result<Self, LayoutError> {
80025280:	27bdffe0 	addiu	sp,sp,-32
80025284:	afbf001c 	sw	ra,28(sp)
80025288:	afa40014 	sw	a0,20(sp)
8002528c:	afa40018 	sw	a0,24(sp)
        return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
80025290:	0c008e83 	jal	80023a0c <_ZN4core3ptr9alignment9Alignment2of17h6bd99603246e22c5E>
80025294:	00000000 	nop
80025298:	8fa60014 	lw	a2,20(sp)
8002529c:	00402825 	move	a1,v0
800252a0:	240400dc 	li	a0,220
800252a4:	0c0094be 	jal	800252f8 <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E>
800252a8:	00000000 	nop
    }
800252ac:	8fbf001c 	lw	ra,28(sp)
800252b0:	27bd0020 	addiu	sp,sp,32
800252b4:	03e00008 	jr	ra
800252b8:	00000000 	nop

800252bc <_ZN4core5alloc6layout6Layout5array17hda0510dcfb1a2029E>:
    pub const fn array<T>(n: usize) -> Result<Self, LayoutError> {
800252bc:	27bdffe0 	addiu	sp,sp,-32
800252c0:	afbf001c 	sw	ra,28(sp)
800252c4:	afa40014 	sw	a0,20(sp)
800252c8:	afa40018 	sw	a0,24(sp)
        return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
800252cc:	0c008e95 	jal	80023a54 <_ZN4core3ptr9alignment9Alignment2of17he7e87dc1376397cdE>
800252d0:	00000000 	nop
800252d4:	8fa60014 	lw	a2,20(sp)
800252d8:	00402825 	move	a1,v0
800252dc:	2404000c 	li	a0,12
800252e0:	0c0094be 	jal	800252f8 <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E>
800252e4:	00000000 	nop
    }
800252e8:	8fbf001c 	lw	ra,28(sp)
800252ec:	27bd0020 	addiu	sp,sp,32
800252f0:	03e00008 	jr	ra
800252f4:	00000000 	nop

800252f8 <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E>:
        const fn inner(
800252f8:	27bdffb0 	addiu	sp,sp,-80
800252fc:	afbf004c 	sw	ra,76(sp)
80025300:	afa6001c 	sw	a2,28(sp)
80025304:	afa50020 	sw	a1,32(sp)
80025308:	afa40024 	sw	a0,36(sp)
8002530c:	afa40030 	sw	a0,48(sp)
80025310:	afa50034 	sw	a1,52(sp)
80025314:	afa60038 	sw	a2,56(sp)
            if element_size != 0 && n > Layout::max_size_for_align(align) / element_size {
80025318:	14800015 	bnez	a0,80025370 <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E+0x78>
8002531c:	00000000 	nop
80025320:	080094ca 	j	80025328 <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E+0x30>
80025324:	00000000 	nop
80025328:	8fa40020 	lw	a0,32(sp)
8002532c:	8fa10024 	lw	at,36(sp)
80025330:	8fa2001c 	lw	v0,28(sp)
80025334:	afa10040 	sw	at,64(sp)
80025338:	afa20044 	sw	v0,68(sp)
            unsafe { intrinsics::unchecked_mul(self, rhs) }
8002533c:	70220802 	mul	at,at,v0
80025340:	afa10018 	sw	at,24(sp)
            let array_size = unsafe { element_size.unchecked_mul(n) };
80025344:	afa1003c 	sw	at,60(sp)
            unsafe { Ok(Layout::from_size_align_unchecked(array_size, align.as_usize())) }
80025348:	0c008e9e 	jal	80023a78 <_ZN4core3ptr9alignment9Alignment8as_usize17h318212322bcdd0c1E>
8002534c:	00000000 	nop
80025350:	8fa40018 	lw	a0,24(sp)
80025354:	00402825 	move	a1,v0
80025358:	0c00946e 	jal	800251b8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hd800459f8b083671E>
8002535c:	00000000 	nop
80025360:	afa20028 	sw	v0,40(sp)
80025364:	afa3002c 	sw	v1,44(sp)
        }
80025368:	0800950e 	j	80025438 <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E+0x140>
8002536c:	00000000 	nop
80025370:	8fa40020 	lw	a0,32(sp)
80025374:	afa40048 	sw	a0,72(sp)
        isize::MAX as usize - (align.as_usize() - 1)
80025378:	0c008e9e 	jal	80023a78 <_ZN4core3ptr9alignment9Alignment8as_usize17h318212322bcdd0c1E>
8002537c:	00000000 	nop
80025380:	2441ffff 	addiu	at,v0,-1
80025384:	afa10014 	sw	at,20(sp)
80025388:	1040000c 	beqz	v0,800253bc <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E+0xc4>
8002538c:	00000000 	nop
80025390:	080094e6 	j	80025398 <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E+0xa0>
80025394:	00000000 	nop
80025398:	8fa10014 	lw	at,20(sp)
8002539c:	3c027fff 	lui	v0,0x7fff
800253a0:	3442ffff 	ori	v0,v0,0xffff
800253a4:	00221026 	xor	v0,at,v0
800253a8:	afa20010 	sw	v0,16(sp)
800253ac:	04200007 	bltz	at,800253cc <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E+0xd4>
800253b0:	00000000 	nop
800253b4:	080094f7 	j	800253dc <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E+0xe4>
800253b8:	00000000 	nop
800253bc:	3c018105 	lui	at,0x8105
800253c0:	2424ea74 	addiu	a0,at,-5516
800253c4:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800253c8:	00000000 	nop
800253cc:	3c018105 	lui	at,0x8105
800253d0:	2424ea84 	addiu	a0,at,-5500
800253d4:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800253d8:	00000000 	nop
            if element_size != 0 && n > Layout::max_size_for_align(align) / element_size {
800253dc:	8fa10024 	lw	at,36(sp)
800253e0:	1020000e 	beqz	at,8002541c <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E+0x124>
800253e4:	00000000 	nop
800253e8:	080094fc 	j	800253f0 <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E+0xf8>
800253ec:	00000000 	nop
800253f0:	8fa2001c 	lw	v0,28(sp)
800253f4:	8fa10024 	lw	at,36(sp)
800253f8:	8fa30010 	lw	v1,16(sp)
800253fc:	0061001b 	divu	zero,v1,at
80025400:	002001f4 	teq	at,zero,0x7
80025404:	00000812 	mflo	at
80025408:	0022082b 	sltu	at,at,v0
8002540c:	14200007 	bnez	at,8002542c <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E+0x134>
80025410:	00000000 	nop
80025414:	080094ca 	j	80025328 <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E+0x30>
80025418:	00000000 	nop
8002541c:	3c018105 	lui	at,0x8105
80025420:	2424ea94 	addiu	a0,at,-5484
80025424:	0c012455 	jal	80049154 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
80025428:	00000000 	nop
                return Err(LayoutError);
8002542c:	afa00028 	sw	zero,40(sp)
        }
80025430:	0800950e 	j	80025438 <_ZN4core5alloc6layout6Layout5array5inner17h0b0cf9f8c6ea9545E+0x140>
80025434:	00000000 	nop
80025438:	8fa20028 	lw	v0,40(sp)
8002543c:	8fa3002c 	lw	v1,44(sp)
80025440:	8fbf004c 	lw	ra,76(sp)
80025444:	27bd0050 	addiu	sp,sp,80
80025448:	03e00008 	jr	ra
8002544c:	00000000 	nop

80025450 <_ZN4core5alloc6layout6Layout8dangling17h2988c399798180eeE>:
    pub const fn dangling(&self) -> NonNull<u8> {
80025450:	27bdffe0 	addiu	sp,sp,-32
80025454:	afbf001c 	sw	ra,28(sp)
80025458:	afa40014 	sw	a0,20(sp)
        unsafe { NonNull::new_unchecked(crate::ptr::without_provenance_mut::<u8>(self.align())) }
8002545c:	0c009487 	jal	8002521c <_ZN4core5alloc6layout6Layout5align17h7f1189006923f58aE>
80025460:	00000000 	nop
80025464:	00402025 	move	a0,v0
80025468:	afa40018 	sw	a0,24(sp)
8002546c:	0c00e65c 	jal	80039970 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h072c601e282e499eE>
80025470:	00000000 	nop
    }
80025474:	8fbf001c 	lw	ra,28(sp)
80025478:	27bd0020 	addiu	sp,sp,32
8002547c:	03e00008 	jr	ra
80025480:	00000000 	nop

80025484 <_ZN4core5clone5Clone10clone_from17h24db1af14c8b2dd8E>:
    /// `a.clone_from(&b)` is equivalent to `a = b.clone()` in functionality,
    /// but can be overridden to reuse the resources of `a` to avoid unnecessary
    /// allocations.
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    fn clone_from(&mut self, source: &Self) {
80025484:	27bdffd8 	addiu	sp,sp,-40
80025488:	afbf0024 	sw	ra,36(sp)
8002548c:	afa50010 	sw	a1,16(sp)
80025490:	00800825 	move	at,a0
80025494:	8fa40010 	lw	a0,16(sp)
80025498:	afa10014 	sw	at,20(sp)
8002549c:	afa1001c 	sw	at,28(sp)
800254a0:	afa40020 	sw	a0,32(sp)
        *self = source.clone()
800254a4:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
800254a8:	00000000 	nop
800254ac:	8fa40014 	lw	a0,20(sp)
800254b0:	afa20018 	sw	v0,24(sp)
800254b4:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
800254b8:	00000000 	nop
800254bc:	8fa40014 	lw	a0,20(sp)
800254c0:	8fa20018 	lw	v0,24(sp)
800254c4:	ac820000 	sw	v0,0(a0)
    }
800254c8:	8fbf0024 	lw	ra,36(sp)
800254cc:	27bd0028 	addiu	sp,sp,40
800254d0:	03e00008 	jr	ra
800254d4:	00000000 	nop

800254d8 <_ZN4core5panic8location8Location4file17h7156e14550adb105E>:
    /// ```
    #[must_use]
    #[stable(feature = "panic_hooks", since = "1.10.0")]
    #[rustc_const_stable(feature = "const_location_fields", since = "CURRENT_RUSTC_VERSION")]
    #[inline]
    pub const fn file(&self) -> &str {
800254d8:	27bdfff8 	addiu	sp,sp,-8
800254dc:	afa40004 	sw	a0,4(sp)
        self.file
800254e0:	8c820000 	lw	v0,0(a0)
800254e4:	8c830004 	lw	v1,4(a0)
800254e8:	27bd0008 	addiu	sp,sp,8
    }
800254ec:	03e00008 	jr	ra
800254f0:	00000000 	nop

800254f4 <_ZN4core5panic8location8Location4line17hb2e7d4ed10645cffE>:
    /// ```
    #[must_use]
    #[stable(feature = "panic_hooks", since = "1.10.0")]
    #[rustc_const_stable(feature = "const_location_fields", since = "CURRENT_RUSTC_VERSION")]
    #[inline]
    pub const fn line(&self) -> u32 {
800254f4:	27bdfff8 	addiu	sp,sp,-8
800254f8:	afa40004 	sw	a0,4(sp)
        self.line
800254fc:	8c820008 	lw	v0,8(a0)
80025500:	27bd0008 	addiu	sp,sp,8
    }
80025504:	03e00008 	jr	ra
80025508:	00000000 	nop

8002550c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hcf18c945e08f7b10E>:
    /// assert_eq!(iterator.next(), Some(&4));
    /// assert_eq!(iterator.next(), None);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn iter(&self) -> Iter<'_, T> {
8002550c:	27bdffe0 	addiu	sp,sp,-32
80025510:	afbf001c 	sw	ra,28(sp)
80025514:	afa40014 	sw	a0,20(sp)
80025518:	afa50018 	sw	a1,24(sp)
        Iter::new(self)
8002551c:	0c00961d 	jal	80025874 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hb726750aa1cad298E>
80025520:	00000000 	nop
    }
80025524:	8fbf001c 	lw	ra,28(sp)
80025528:	27bd0020 	addiu	sp,sp,32
8002552c:	03e00008 	jr	ra
80025530:	00000000 	nop

80025534 <_ZN4core5slice3raw14from_raw_parts17h95ed1e9c16ca20d7E>:
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_stable(feature = "const_slice_from_raw_parts", since = "1.64.0")]
#[must_use]
#[rustc_diagnostic_item = "slice_from_raw_parts"]
pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
80025534:	27bdffd8 	addiu	sp,sp,-40
80025538:	afbf0024 	sw	ra,36(sp)
8002553c:	afa50014 	sw	a1,20(sp)
80025540:	afa40018 	sw	a0,24(sp)
80025544:	afa4001c 	sw	a0,28(sp)
80025548:	afa50020 	sw	a1,32(sp)
    // SAFETY: the caller must uphold the safety contract for `from_raw_parts`.
    unsafe {
        ub_checks::assert_unsafe_precondition!(
8002554c:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80025550:	00000000 	nop
80025554:	1440000b 	bnez	v0,80025584 <_ZN4core5slice3raw14from_raw_parts17h95ed1e9c16ca20d7E+0x50>
80025558:	00000000 	nop
8002555c:	08009559 	j	80025564 <_ZN4core5slice3raw14from_raw_parts17h95ed1e9c16ca20d7E+0x30>
80025560:	00000000 	nop
                len: usize = len,
            ) =>
            ub_checks::is_aligned_and_not_null(data, align)
                && ub_checks::is_valid_allocation_size(size, len)
        );
        &*ptr::slice_from_raw_parts(data, len)
80025564:	8fa50014 	lw	a1,20(sp)
80025568:	8fa40018 	lw	a0,24(sp)
8002556c:	0c008924 	jal	80022490 <_ZN4core3ptr20slice_from_raw_parts17h900b36b3642184ddE>
80025570:	00000000 	nop
    }
}
80025574:	8fbf0024 	lw	ra,36(sp)
80025578:	27bd0028 	addiu	sp,sp,40
8002557c:	03e00008 	jr	ra
80025580:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80025584:	8fa70014 	lw	a3,20(sp)
80025588:	8fa40018 	lw	a0,24(sp)
8002558c:	24050020 	li	a1,32
80025590:	24060004 	li	a2,4
80025594:	0c0095a1 	jal	80025684 <_ZN4core5slice3raw14from_raw_parts18precondition_check17h4bc99608d45b453bE>
80025598:	00000000 	nop
8002559c:	08009559 	j	80025564 <_ZN4core5slice3raw14from_raw_parts17h95ed1e9c16ca20d7E+0x30>
800255a0:	00000000 	nop

800255a4 <_ZN4core5slice3raw14from_raw_parts17h99948c1205f16146E>:
pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
800255a4:	27bdffd8 	addiu	sp,sp,-40
800255a8:	afbf0024 	sw	ra,36(sp)
800255ac:	afa50014 	sw	a1,20(sp)
800255b0:	afa40018 	sw	a0,24(sp)
800255b4:	afa4001c 	sw	a0,28(sp)
800255b8:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
800255bc:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
800255c0:	00000000 	nop
800255c4:	1440000b 	bnez	v0,800255f4 <_ZN4core5slice3raw14from_raw_parts17h99948c1205f16146E+0x50>
800255c8:	00000000 	nop
800255cc:	08009575 	j	800255d4 <_ZN4core5slice3raw14from_raw_parts17h99948c1205f16146E+0x30>
800255d0:	00000000 	nop
        &*ptr::slice_from_raw_parts(data, len)
800255d4:	8fa50014 	lw	a1,20(sp)
800255d8:	8fa40018 	lw	a0,24(sp)
800255dc:	0c00892f 	jal	800224bc <_ZN4core3ptr20slice_from_raw_parts17h9cb8f0b787b59141E>
800255e0:	00000000 	nop
}
800255e4:	8fbf0024 	lw	ra,36(sp)
800255e8:	27bd0028 	addiu	sp,sp,40
800255ec:	03e00008 	jr	ra
800255f0:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800255f4:	8fa70014 	lw	a3,20(sp)
800255f8:	8fa40018 	lw	a0,24(sp)
800255fc:	240500dc 	li	a1,220
80025600:	24060004 	li	a2,4
80025604:	0c0095a1 	jal	80025684 <_ZN4core5slice3raw14from_raw_parts18precondition_check17h4bc99608d45b453bE>
80025608:	00000000 	nop
8002560c:	08009575 	j	800255d4 <_ZN4core5slice3raw14from_raw_parts17h99948c1205f16146E+0x30>
80025610:	00000000 	nop

80025614 <_ZN4core5slice3raw14from_raw_parts17hf3b43d6162730feeE>:
pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
80025614:	27bdffd8 	addiu	sp,sp,-40
80025618:	afbf0024 	sw	ra,36(sp)
8002561c:	afa50014 	sw	a1,20(sp)
80025620:	afa40018 	sw	a0,24(sp)
80025624:	afa4001c 	sw	a0,28(sp)
80025628:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
8002562c:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80025630:	00000000 	nop
80025634:	1440000b 	bnez	v0,80025664 <_ZN4core5slice3raw14from_raw_parts17hf3b43d6162730feeE+0x50>
80025638:	00000000 	nop
8002563c:	08009591 	j	80025644 <_ZN4core5slice3raw14from_raw_parts17hf3b43d6162730feeE+0x30>
80025640:	00000000 	nop
        &*ptr::slice_from_raw_parts(data, len)
80025644:	8fa50014 	lw	a1,20(sp)
80025648:	8fa40018 	lw	a0,24(sp)
8002564c:	0c008919 	jal	80022464 <_ZN4core3ptr20slice_from_raw_parts17h448658fca1a13ca0E>
80025650:	00000000 	nop
}
80025654:	8fbf0024 	lw	ra,36(sp)
80025658:	27bd0028 	addiu	sp,sp,40
8002565c:	03e00008 	jr	ra
80025660:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80025664:	8fa70014 	lw	a3,20(sp)
80025668:	8fa40018 	lw	a0,24(sp)
8002566c:	2405000c 	li	a1,12
80025670:	24060004 	li	a2,4
80025674:	0c0095a1 	jal	80025684 <_ZN4core5slice3raw14from_raw_parts18precondition_check17h4bc99608d45b453bE>
80025678:	00000000 	nop
8002567c:	08009591 	j	80025644 <_ZN4core5slice3raw14from_raw_parts17hf3b43d6162730feeE+0x30>
80025680:	00000000 	nop

80025684 <_ZN4core5slice3raw14from_raw_parts18precondition_check17h4bc99608d45b453bE>:
            const fn precondition_check($($name:$ty),*) {
80025684:	27bdffd0 	addiu	sp,sp,-48
80025688:	afbf002c 	sw	ra,44(sp)
8002568c:	afa70010 	sw	a3,16(sp)
80025690:	afa60014 	sw	a2,20(sp)
80025694:	00a00825 	move	at,a1
80025698:	8fa50014 	lw	a1,20(sp)
8002569c:	afa10018 	sw	at,24(sp)
800256a0:	afa4001c 	sw	a0,28(sp)
800256a4:	afa10020 	sw	at,32(sp)
800256a8:	afa50024 	sw	a1,36(sp)
800256ac:	afa70028 	sw	a3,40(sp)
            ub_checks::is_aligned_and_not_null(data, align)
800256b0:	0c009884 	jal	80026210 <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E>
800256b4:	00000000 	nop
800256b8:	14400008 	bnez	v0,800256dc <_ZN4core5slice3raw14from_raw_parts18precondition_check17h4bc99608d45b453bE+0x58>
800256bc:	00000000 	nop
800256c0:	080095b2 	j	800256c8 <_ZN4core5slice3raw14from_raw_parts18precondition_check17h4bc99608d45b453bE+0x44>
800256c4:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800256c8:	3c018105 	lui	at,0x8105
800256cc:	2424eaa4 	addiu	a0,at,-5468
800256d0:	240500a2 	li	a1,162
800256d4:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800256d8:	00000000 	nop
                && ub_checks::is_valid_allocation_size(size, len)
800256dc:	8fa50010 	lw	a1,16(sp)
800256e0:	8fa40018 	lw	a0,24(sp)
800256e4:	0c0098a1 	jal	80026284 <_ZN4core9ub_checks24is_valid_allocation_size17hc4dc761e8b6e68efE>
800256e8:	00000000 	nop
800256ec:	1040fff6 	beqz	v0,800256c8 <_ZN4core5slice3raw14from_raw_parts18precondition_check17h4bc99608d45b453bE+0x44>
800256f0:	00000000 	nop
800256f4:	080095bf 	j	800256fc <_ZN4core5slice3raw14from_raw_parts18precondition_check17h4bc99608d45b453bE+0x78>
800256f8:	00000000 	nop
            }
800256fc:	8fbf002c 	lw	ra,44(sp)
80025700:	27bd0030 	addiu	sp,sp,48
80025704:	03e00008 	jr	ra
80025708:	00000000 	nop

8002570c <_ZN4core5slice3raw18from_raw_parts_mut17h2bd1188a75bd702dE>:
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_slice_from_raw_parts_mut", issue = "67456")]
#[must_use]
#[rustc_diagnostic_item = "slice_from_raw_parts_mut"]
pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {
8002570c:	27bdffd8 	addiu	sp,sp,-40
80025710:	afbf0024 	sw	ra,36(sp)
80025714:	afa50014 	sw	a1,20(sp)
80025718:	afa40018 	sw	a0,24(sp)
8002571c:	afa4001c 	sw	a0,28(sp)
80025720:	afa50020 	sw	a1,32(sp)
    // SAFETY: the caller must uphold the safety contract for `from_raw_parts_mut`.
    unsafe {
        ub_checks::assert_unsafe_precondition!(
80025724:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80025728:	00000000 	nop
8002572c:	1440000b 	bnez	v0,8002575c <_ZN4core5slice3raw18from_raw_parts_mut17h2bd1188a75bd702dE+0x50>
80025730:	00000000 	nop
80025734:	080095cf 	j	8002573c <_ZN4core5slice3raw18from_raw_parts_mut17h2bd1188a75bd702dE+0x30>
80025738:	00000000 	nop
                len: usize = len,
            ) =>
            ub_checks::is_aligned_and_not_null(data, align)
                && ub_checks::is_valid_allocation_size(size, len)
        );
        &mut *ptr::slice_from_raw_parts_mut(data, len)
8002573c:	8fa50014 	lw	a1,20(sp)
80025740:	8fa40018 	lw	a0,24(sp)
80025744:	0c008950 	jal	80022540 <_ZN4core3ptr24slice_from_raw_parts_mut17hca02b9559e76586fE>
80025748:	00000000 	nop
    }
}
8002574c:	8fbf0024 	lw	ra,36(sp)
80025750:	27bd0028 	addiu	sp,sp,40
80025754:	03e00008 	jr	ra
80025758:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8002575c:	8fa70014 	lw	a3,20(sp)
80025760:	8fa40018 	lw	a0,24(sp)
80025764:	2405000c 	li	a1,12
80025768:	24060004 	li	a2,4
8002576c:	0c0095fb 	jal	800257ec <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h6a186ec74ff38e47E>
80025770:	00000000 	nop
80025774:	080095cf 	j	8002573c <_ZN4core5slice3raw18from_raw_parts_mut17h2bd1188a75bd702dE+0x30>
80025778:	00000000 	nop

8002577c <_ZN4core5slice3raw18from_raw_parts_mut17he8ac4134dd73e995E>:
pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {
8002577c:	27bdffd8 	addiu	sp,sp,-40
80025780:	afbf0024 	sw	ra,36(sp)
80025784:	afa50014 	sw	a1,20(sp)
80025788:	afa40018 	sw	a0,24(sp)
8002578c:	afa4001c 	sw	a0,28(sp)
80025790:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80025794:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80025798:	00000000 	nop
8002579c:	1440000b 	bnez	v0,800257cc <_ZN4core5slice3raw18from_raw_parts_mut17he8ac4134dd73e995E+0x50>
800257a0:	00000000 	nop
800257a4:	080095eb 	j	800257ac <_ZN4core5slice3raw18from_raw_parts_mut17he8ac4134dd73e995E+0x30>
800257a8:	00000000 	nop
        &mut *ptr::slice_from_raw_parts_mut(data, len)
800257ac:	8fa50014 	lw	a1,20(sp)
800257b0:	8fa40018 	lw	a0,24(sp)
800257b4:	0c00893a 	jal	800224e8 <_ZN4core3ptr24slice_from_raw_parts_mut17h0f54a01f9708a325E>
800257b8:	00000000 	nop
}
800257bc:	8fbf0024 	lw	ra,36(sp)
800257c0:	27bd0028 	addiu	sp,sp,40
800257c4:	03e00008 	jr	ra
800257c8:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800257cc:	8fa70014 	lw	a3,20(sp)
800257d0:	8fa40018 	lw	a0,24(sp)
800257d4:	240500dc 	li	a1,220
800257d8:	24060004 	li	a2,4
800257dc:	0c0095fb 	jal	800257ec <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h6a186ec74ff38e47E>
800257e0:	00000000 	nop
800257e4:	080095eb 	j	800257ac <_ZN4core5slice3raw18from_raw_parts_mut17he8ac4134dd73e995E+0x30>
800257e8:	00000000 	nop

800257ec <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h6a186ec74ff38e47E>:
            const fn precondition_check($($name:$ty),*) {
800257ec:	27bdffd0 	addiu	sp,sp,-48
800257f0:	afbf002c 	sw	ra,44(sp)
800257f4:	afa70010 	sw	a3,16(sp)
800257f8:	afa60014 	sw	a2,20(sp)
800257fc:	00a00825 	move	at,a1
80025800:	8fa50014 	lw	a1,20(sp)
80025804:	afa10018 	sw	at,24(sp)
80025808:	afa4001c 	sw	a0,28(sp)
8002580c:	afa10020 	sw	at,32(sp)
80025810:	afa50024 	sw	a1,36(sp)
80025814:	afa70028 	sw	a3,40(sp)
            ub_checks::is_aligned_and_not_null(data, align)
80025818:	0c009884 	jal	80026210 <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E>
8002581c:	00000000 	nop
80025820:	14400008 	bnez	v0,80025844 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h6a186ec74ff38e47E+0x58>
80025824:	00000000 	nop
80025828:	0800960c 	j	80025830 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h6a186ec74ff38e47E+0x44>
8002582c:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80025830:	3c018105 	lui	at,0x8105
80025834:	2424eb46 	addiu	a0,at,-5306
80025838:	240500a6 	li	a1,166
8002583c:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80025840:	00000000 	nop
                && ub_checks::is_valid_allocation_size(size, len)
80025844:	8fa50010 	lw	a1,16(sp)
80025848:	8fa40018 	lw	a0,24(sp)
8002584c:	0c0098a1 	jal	80026284 <_ZN4core9ub_checks24is_valid_allocation_size17hc4dc761e8b6e68efE>
80025850:	00000000 	nop
80025854:	1040fff6 	beqz	v0,80025830 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h6a186ec74ff38e47E+0x44>
80025858:	00000000 	nop
8002585c:	08009619 	j	80025864 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h6a186ec74ff38e47E+0x78>
80025860:	00000000 	nop
            }
80025864:	8fbf002c 	lw	ra,44(sp)
80025868:	27bd0030 	addiu	sp,sp,48
8002586c:	03e00008 	jr	ra
80025870:	00000000 	nop

80025874 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hb726750aa1cad298E>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Sync> Send for Iter<'_, T> {}

impl<'a, T> Iter<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a [T]) -> Self {
80025874:	27bdffb8 	addiu	sp,sp,-72
80025878:	afbf0044 	sw	ra,68(sp)
8002587c:	afa50014 	sw	a1,20(sp)
80025880:	afa40028 	sw	a0,40(sp)
80025884:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
80025888:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
8002588c:	0c00ad5c 	jal	8002b570 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hd705c77857c29e25E>
80025890:	00000000 	nop
80025894:	00402025 	move	a0,v0
80025898:	00602825 	move	a1,v1
8002589c:	0c008da3 	jal	8002368c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h11bca189ed734ee1E>
800258a0:	00000000 	nop
800258a4:	00400825 	move	at,v0
800258a8:	afa10018 	sw	at,24(sp)
800258ac:	afa20034 	sw	v0,52(sp)
        // SAFETY: Similar to `IterMut::new`.
        unsafe {
            let end_or_len =
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
800258b0:	0800962e 	j	800258b8 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hb726750aa1cad298E+0x44>
800258b4:	00000000 	nop
800258b8:	8fa10018 	lw	at,24(sp)
800258bc:	8fa20014 	lw	v0,20(sp)
800258c0:	afa10040 	sw	at,64(sp)
800258c4:	afa10038 	sw	at,56(sp)
800258c8:	afa2003c 	sw	v0,60(sp)
    pub const unsafe fn add(self, count: usize) -> Self
    where
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `offset`.
        unsafe { intrinsics::offset(self, count) }
800258cc:	00021140 	sll	v0,v0,0x5
800258d0:	00220821 	addu	at,at,v0
800258d4:	afa10024 	sw	at,36(sp)
800258d8:	08009638 	j	800258e0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hb726750aa1cad298E+0x6c>
800258dc:	00000000 	nop

            Self { ptr, end_or_len, _marker: PhantomData }
800258e0:	8fa20018 	lw	v0,24(sp)
800258e4:	8fa10024 	lw	at,36(sp)
800258e8:	afa2001c 	sw	v0,28(sp)
800258ec:	afa10020 	sw	at,32(sp)
        }
    }
800258f0:	8fa2001c 	lw	v0,28(sp)
800258f4:	8fa30020 	lw	v1,32(sp)
800258f8:	8fbf0044 	lw	ra,68(sp)
800258fc:	27bd0048 	addiu	sp,sp,72
80025900:	03e00008 	jr	ra
80025904:	00000000 	nop

80025908 <_ZN4core6option15Option$LT$T$GT$4take17h8fd090c9ed58132bE>:
    /// assert_eq!(y, None);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
    pub const fn take(&mut self) -> Option<T> {
80025908:	27bdffe0 	addiu	sp,sp,-32
8002590c:	afbf001c 	sw	ra,28(sp)
80025910:	afa40018 	sw	a0,24(sp)
        // FIXME replace `mem::replace` by `mem::take` when the latter is const ready
        mem::replace(self, None)
80025914:	afa00014 	sw	zero,20(sp)
80025918:	8fa50014 	lw	a1,20(sp)
8002591c:	0c008496 	jal	80021258 <_ZN4core3mem7replace17h5cad309988a5cbf6E>
80025920:	00000000 	nop
    }
80025924:	8fbf001c 	lw	ra,28(sp)
80025928:	27bd0020 	addiu	sp,sp,32
8002592c:	03e00008 	jr	ra
80025930:	00000000 	nop

80025934 <_ZN4core6option15Option$LT$T$GT$4take17hd31644464f00dc26E>:
    pub const fn take(&mut self) -> Option<T> {
80025934:	27bdffe0 	addiu	sp,sp,-32
80025938:	afbf001c 	sw	ra,28(sp)
8002593c:	afa40018 	sw	a0,24(sp)
        mem::replace(self, None)
80025940:	afa00010 	sw	zero,16(sp)
80025944:	8fa50010 	lw	a1,16(sp)
80025948:	8fa60014 	lw	a2,20(sp)
8002594c:	0c00847d 	jal	800211f4 <_ZN4core3mem7replace17h54079e6a897bed37E>
80025950:	00000000 	nop
    }
80025954:	8fbf001c 	lw	ra,28(sp)
80025958:	27bd0020 	addiu	sp,sp,32
8002595c:	03e00008 	jr	ra
80025960:	00000000 	nop

80025964 <_ZN4core6option15Option$LT$T$GT$5ok_or17h20655cc0ff61952eE>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
80025964:	27bdffd8 	addiu	sp,sp,-40
80025968:	afa70000 	sw	a3,0(sp)
8002596c:	afa60004 	sw	a2,4(sp)
80025970:	afa50008 	sw	a1,8(sp)
80025974:	afa4000c 	sw	a0,12(sp)
80025978:	afa40010 	sw	a0,16(sp)
8002597c:	afa60020 	sw	a2,32(sp)
80025980:	afa70024 	sw	a3,36(sp)
80025984:	24010000 	li	at,0
        match self {
80025988:	a3a0001f 	sb	zero,31(sp)
8002598c:	24010001 	li	at,1
80025990:	a3a1001f 	sb	at,31(sp)
80025994:	8ca10000 	lw	at,0(a1)
80025998:	1420000e 	bnez	at,800259d4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h20655cc0ff61952eE+0x70>
8002599c:	00000000 	nop
800259a0:	0800966a 	j	800259a8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h20655cc0ff61952eE+0x44>
800259a4:	00000000 	nop
800259a8:	8fa2000c 	lw	v0,12(sp)
800259ac:	8fa10000 	lw	at,0(sp)
800259b0:	8fa30004 	lw	v1,4(sp)
800259b4:	24040000 	li	a0,0
            None => Err(err),
800259b8:	a3a0001f 	sb	zero,31(sp)
800259bc:	ac430004 	sw	v1,4(v0)
800259c0:	ac410008 	sw	at,8(v0)
800259c4:	24010001 	li	at,1
800259c8:	ac410000 	sw	at,0(v0)
800259cc:	08009682 	j	80025a08 <_ZN4core6option15Option$LT$T$GT$5ok_or17h20655cc0ff61952eE+0xa4>
800259d0:	00000000 	nop
            Some(v) => Ok(v),
800259d4:	8fa1000c 	lw	at,12(sp)
800259d8:	8fa20008 	lw	v0,8(sp)
800259dc:	8c430008 	lw	v1,8(v0)
800259e0:	afa30018 	sw	v1,24(sp)
800259e4:	8c420004 	lw	v0,4(v0)
800259e8:	afa20014 	sw	v0,20(sp)
800259ec:	8fa20018 	lw	v0,24(sp)
800259f0:	ac220008 	sw	v0,8(at)
800259f4:	8fa20014 	lw	v0,20(sp)
800259f8:	ac220004 	sw	v0,4(at)
800259fc:	ac200000 	sw	zero,0(at)
80025a00:	08009682 	j	80025a08 <_ZN4core6option15Option$LT$T$GT$5ok_or17h20655cc0ff61952eE+0xa4>
80025a04:	00000000 	nop
    }
80025a08:	93a1001f 	lbu	at,31(sp)
80025a0c:	30210001 	andi	at,at,0x1
80025a10:	14200007 	bnez	at,80025a30 <_ZN4core6option15Option$LT$T$GT$5ok_or17h20655cc0ff61952eE+0xcc>
80025a14:	00000000 	nop
80025a18:	08009688 	j	80025a20 <_ZN4core6option15Option$LT$T$GT$5ok_or17h20655cc0ff61952eE+0xbc>
80025a1c:	00000000 	nop
80025a20:	8fa20010 	lw	v0,16(sp)
80025a24:	27bd0028 	addiu	sp,sp,40
80025a28:	03e00008 	jr	ra
80025a2c:	00000000 	nop
80025a30:	08009688 	j	80025a20 <_ZN4core6option15Option$LT$T$GT$5ok_or17h20655cc0ff61952eE+0xbc>
80025a34:	00000000 	nop

80025a38 <_ZN4core6option15Option$LT$T$GT$6as_mut17h4a122ed82a8f90e7E>:
    pub const fn as_mut(&mut self) -> Option<&mut T> {
80025a38:	27bdfff0 	addiu	sp,sp,-16
80025a3c:	afa40000 	sw	a0,0(sp)
80025a40:	afa40008 	sw	a0,8(sp)
        match *self {
80025a44:	8c810000 	lw	at,0(a0)
80025a48:	14200006 	bnez	at,80025a64 <_ZN4core6option15Option$LT$T$GT$6as_mut17h4a122ed82a8f90e7E+0x2c>
80025a4c:	00000000 	nop
80025a50:	08009696 	j	80025a58 <_ZN4core6option15Option$LT$T$GT$6as_mut17h4a122ed82a8f90e7E+0x20>
80025a54:	00000000 	nop
            None => None,
80025a58:	afa00004 	sw	zero,4(sp)
80025a5c:	0800969f 	j	80025a7c <_ZN4core6option15Option$LT$T$GT$6as_mut17h4a122ed82a8f90e7E+0x44>
80025a60:	00000000 	nop
            Some(ref mut x) => Some(x),
80025a64:	8fa10000 	lw	at,0(sp)
80025a68:	24210004 	addiu	at,at,4
80025a6c:	afa1000c 	sw	at,12(sp)
80025a70:	afa10004 	sw	at,4(sp)
80025a74:	0800969f 	j	80025a7c <_ZN4core6option15Option$LT$T$GT$6as_mut17h4a122ed82a8f90e7E+0x44>
80025a78:	00000000 	nop
    }
80025a7c:	8fa20004 	lw	v0,4(sp)
80025a80:	27bd0010 	addiu	sp,sp,16
80025a84:	03e00008 	jr	ra
80025a88:	00000000 	nop

80025a8c <_ZN4core6option15Option$LT$T$GT$6as_ref17h073087ce2459efe9E>:
    pub const fn as_ref(&self) -> Option<&T> {
80025a8c:	27bdfff0 	addiu	sp,sp,-16
80025a90:	afa40000 	sw	a0,0(sp)
80025a94:	afa40008 	sw	a0,8(sp)
        match *self {
80025a98:	8c810000 	lw	at,0(a0)
80025a9c:	14200006 	bnez	at,80025ab8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h073087ce2459efe9E+0x2c>
80025aa0:	00000000 	nop
80025aa4:	080096ab 	j	80025aac <_ZN4core6option15Option$LT$T$GT$6as_ref17h073087ce2459efe9E+0x20>
80025aa8:	00000000 	nop
            None => None,
80025aac:	afa00004 	sw	zero,4(sp)
80025ab0:	080096b4 	j	80025ad0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h073087ce2459efe9E+0x44>
80025ab4:	00000000 	nop
            Some(ref x) => Some(x),
80025ab8:	8fa10000 	lw	at,0(sp)
80025abc:	24210004 	addiu	at,at,4
80025ac0:	afa1000c 	sw	at,12(sp)
80025ac4:	afa10004 	sw	at,4(sp)
80025ac8:	080096b4 	j	80025ad0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h073087ce2459efe9E+0x44>
80025acc:	00000000 	nop
    }
80025ad0:	8fa20004 	lw	v0,4(sp)
80025ad4:	27bd0010 	addiu	sp,sp,16
80025ad8:	03e00008 	jr	ra
80025adc:	00000000 	nop

80025ae0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0c0c1f76e7cf98f6E>:
    pub const fn as_ref(&self) -> Option<&T> {
80025ae0:	27bdfff0 	addiu	sp,sp,-16
80025ae4:	afa40000 	sw	a0,0(sp)
80025ae8:	afa40008 	sw	a0,8(sp)
        match *self {
80025aec:	8c810000 	lw	at,0(a0)
80025af0:	14200006 	bnez	at,80025b0c <_ZN4core6option15Option$LT$T$GT$6as_ref17h0c0c1f76e7cf98f6E+0x2c>
80025af4:	00000000 	nop
80025af8:	080096c0 	j	80025b00 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0c0c1f76e7cf98f6E+0x20>
80025afc:	00000000 	nop
            None => None,
80025b00:	afa00004 	sw	zero,4(sp)
80025b04:	080096c9 	j	80025b24 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0c0c1f76e7cf98f6E+0x44>
80025b08:	00000000 	nop
            Some(ref x) => Some(x),
80025b0c:	8fa10000 	lw	at,0(sp)
80025b10:	24210004 	addiu	at,at,4
80025b14:	afa1000c 	sw	at,12(sp)
80025b18:	afa10004 	sw	at,4(sp)
80025b1c:	080096c9 	j	80025b24 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0c0c1f76e7cf98f6E+0x44>
80025b20:	00000000 	nop
    }
80025b24:	8fa20004 	lw	v0,4(sp)
80025b28:	27bd0010 	addiu	sp,sp,16
80025b2c:	03e00008 	jr	ra
80025b30:	00000000 	nop

80025b34 <_ZN4core6option15Option$LT$T$GT$6as_ref17h32e5cc6d676dccc7E>:
    pub const fn as_ref(&self) -> Option<&T> {
80025b34:	27bdfff0 	addiu	sp,sp,-16
80025b38:	afa40000 	sw	a0,0(sp)
80025b3c:	afa40008 	sw	a0,8(sp)
        match *self {
80025b40:	8c810000 	lw	at,0(a0)
80025b44:	14200006 	bnez	at,80025b60 <_ZN4core6option15Option$LT$T$GT$6as_ref17h32e5cc6d676dccc7E+0x2c>
80025b48:	00000000 	nop
80025b4c:	080096d5 	j	80025b54 <_ZN4core6option15Option$LT$T$GT$6as_ref17h32e5cc6d676dccc7E+0x20>
80025b50:	00000000 	nop
            None => None,
80025b54:	afa00004 	sw	zero,4(sp)
80025b58:	080096de 	j	80025b78 <_ZN4core6option15Option$LT$T$GT$6as_ref17h32e5cc6d676dccc7E+0x44>
80025b5c:	00000000 	nop
            Some(ref x) => Some(x),
80025b60:	8fa10000 	lw	at,0(sp)
80025b64:	24210004 	addiu	at,at,4
80025b68:	afa1000c 	sw	at,12(sp)
80025b6c:	afa10004 	sw	at,4(sp)
80025b70:	080096de 	j	80025b78 <_ZN4core6option15Option$LT$T$GT$6as_ref17h32e5cc6d676dccc7E+0x44>
80025b74:	00000000 	nop
    }
80025b78:	8fa20004 	lw	v0,4(sp)
80025b7c:	27bd0010 	addiu	sp,sp,16
80025b80:	03e00008 	jr	ra
80025b84:	00000000 	nop

80025b88 <_ZN4core6option15Option$LT$T$GT$6as_ref17h3b82b050f0e604a8E>:
    pub const fn as_ref(&self) -> Option<&T> {
80025b88:	27bdfff0 	addiu	sp,sp,-16
80025b8c:	afa40000 	sw	a0,0(sp)
80025b90:	afa40008 	sw	a0,8(sp)
        match *self {
80025b94:	8c810000 	lw	at,0(a0)
80025b98:	14200006 	bnez	at,80025bb4 <_ZN4core6option15Option$LT$T$GT$6as_ref17h3b82b050f0e604a8E+0x2c>
80025b9c:	00000000 	nop
80025ba0:	080096ea 	j	80025ba8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h3b82b050f0e604a8E+0x20>
80025ba4:	00000000 	nop
            None => None,
80025ba8:	afa00004 	sw	zero,4(sp)
80025bac:	080096f3 	j	80025bcc <_ZN4core6option15Option$LT$T$GT$6as_ref17h3b82b050f0e604a8E+0x44>
80025bb0:	00000000 	nop
            Some(ref x) => Some(x),
80025bb4:	8fa10000 	lw	at,0(sp)
80025bb8:	24210004 	addiu	at,at,4
80025bbc:	afa1000c 	sw	at,12(sp)
80025bc0:	afa10004 	sw	at,4(sp)
80025bc4:	080096f3 	j	80025bcc <_ZN4core6option15Option$LT$T$GT$6as_ref17h3b82b050f0e604a8E+0x44>
80025bc8:	00000000 	nop
    }
80025bcc:	8fa20004 	lw	v0,4(sp)
80025bd0:	27bd0010 	addiu	sp,sp,16
80025bd4:	03e00008 	jr	ra
80025bd8:	00000000 	nop

80025bdc <_ZN4core6option15Option$LT$T$GT$6as_ref17h4449a19ff293dcfeE>:
    pub const fn as_ref(&self) -> Option<&T> {
80025bdc:	27bdfff0 	addiu	sp,sp,-16
80025be0:	afa40000 	sw	a0,0(sp)
80025be4:	afa40008 	sw	a0,8(sp)
        match *self {
80025be8:	90810000 	lbu	at,0(a0)
80025bec:	30210001 	andi	at,at,0x1
80025bf0:	14200006 	bnez	at,80025c0c <_ZN4core6option15Option$LT$T$GT$6as_ref17h4449a19ff293dcfeE+0x30>
80025bf4:	00000000 	nop
80025bf8:	08009700 	j	80025c00 <_ZN4core6option15Option$LT$T$GT$6as_ref17h4449a19ff293dcfeE+0x24>
80025bfc:	00000000 	nop
            None => None,
80025c00:	afa00004 	sw	zero,4(sp)
80025c04:	08009709 	j	80025c24 <_ZN4core6option15Option$LT$T$GT$6as_ref17h4449a19ff293dcfeE+0x48>
80025c08:	00000000 	nop
            Some(ref x) => Some(x),
80025c0c:	8fa10000 	lw	at,0(sp)
80025c10:	24210001 	addiu	at,at,1
80025c14:	afa1000c 	sw	at,12(sp)
80025c18:	afa10004 	sw	at,4(sp)
80025c1c:	08009709 	j	80025c24 <_ZN4core6option15Option$LT$T$GT$6as_ref17h4449a19ff293dcfeE+0x48>
80025c20:	00000000 	nop
    }
80025c24:	8fa20004 	lw	v0,4(sp)
80025c28:	27bd0010 	addiu	sp,sp,16
80025c2c:	03e00008 	jr	ra
80025c30:	00000000 	nop

80025c34 <_ZN4core6option15Option$LT$T$GT$6as_ref17h89bfabd6147d3914E>:
    pub const fn as_ref(&self) -> Option<&T> {
80025c34:	27bdfff0 	addiu	sp,sp,-16
80025c38:	afa40000 	sw	a0,0(sp)
80025c3c:	afa40008 	sw	a0,8(sp)
        match *self {
80025c40:	8c810000 	lw	at,0(a0)
80025c44:	14200006 	bnez	at,80025c60 <_ZN4core6option15Option$LT$T$GT$6as_ref17h89bfabd6147d3914E+0x2c>
80025c48:	00000000 	nop
80025c4c:	08009715 	j	80025c54 <_ZN4core6option15Option$LT$T$GT$6as_ref17h89bfabd6147d3914E+0x20>
80025c50:	00000000 	nop
            None => None,
80025c54:	afa00004 	sw	zero,4(sp)
80025c58:	0800971e 	j	80025c78 <_ZN4core6option15Option$LT$T$GT$6as_ref17h89bfabd6147d3914E+0x44>
80025c5c:	00000000 	nop
            Some(ref x) => Some(x),
80025c60:	8fa10000 	lw	at,0(sp)
80025c64:	24210004 	addiu	at,at,4
80025c68:	afa1000c 	sw	at,12(sp)
80025c6c:	afa10004 	sw	at,4(sp)
80025c70:	0800971e 	j	80025c78 <_ZN4core6option15Option$LT$T$GT$6as_ref17h89bfabd6147d3914E+0x44>
80025c74:	00000000 	nop
    }
80025c78:	8fa20004 	lw	v0,4(sp)
80025c7c:	27bd0010 	addiu	sp,sp,16
80025c80:	03e00008 	jr	ra
80025c84:	00000000 	nop

80025c88 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb34c357efd858352E>:
    pub const fn as_ref(&self) -> Option<&T> {
80025c88:	27bdfff0 	addiu	sp,sp,-16
80025c8c:	afa40000 	sw	a0,0(sp)
80025c90:	afa40008 	sw	a0,8(sp)
        match *self {
80025c94:	8c810000 	lw	at,0(a0)
80025c98:	14200006 	bnez	at,80025cb4 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb34c357efd858352E+0x2c>
80025c9c:	00000000 	nop
80025ca0:	0800972a 	j	80025ca8 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb34c357efd858352E+0x20>
80025ca4:	00000000 	nop
            None => None,
80025ca8:	afa00004 	sw	zero,4(sp)
80025cac:	08009733 	j	80025ccc <_ZN4core6option15Option$LT$T$GT$6as_ref17hb34c357efd858352E+0x44>
80025cb0:	00000000 	nop
            Some(ref x) => Some(x),
80025cb4:	8fa10000 	lw	at,0(sp)
80025cb8:	24210004 	addiu	at,at,4
80025cbc:	afa1000c 	sw	at,12(sp)
80025cc0:	afa10004 	sw	at,4(sp)
80025cc4:	08009733 	j	80025ccc <_ZN4core6option15Option$LT$T$GT$6as_ref17hb34c357efd858352E+0x44>
80025cc8:	00000000 	nop
    }
80025ccc:	8fa20004 	lw	v0,4(sp)
80025cd0:	27bd0010 	addiu	sp,sp,16
80025cd4:	03e00008 	jr	ra
80025cd8:	00000000 	nop

80025cdc <_ZN4core6option15Option$LT$T$GT$6as_ref17hb84e0a029b252928E>:
    pub const fn as_ref(&self) -> Option<&T> {
80025cdc:	27bdfff0 	addiu	sp,sp,-16
80025ce0:	afa40000 	sw	a0,0(sp)
80025ce4:	afa40008 	sw	a0,8(sp)
        match *self {
80025ce8:	8c810000 	lw	at,0(a0)
80025cec:	14200006 	bnez	at,80025d08 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb84e0a029b252928E+0x2c>
80025cf0:	00000000 	nop
80025cf4:	0800973f 	j	80025cfc <_ZN4core6option15Option$LT$T$GT$6as_ref17hb84e0a029b252928E+0x20>
80025cf8:	00000000 	nop
            None => None,
80025cfc:	afa00004 	sw	zero,4(sp)
80025d00:	08009748 	j	80025d20 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb84e0a029b252928E+0x44>
80025d04:	00000000 	nop
            Some(ref x) => Some(x),
80025d08:	8fa10000 	lw	at,0(sp)
80025d0c:	24210004 	addiu	at,at,4
80025d10:	afa1000c 	sw	at,12(sp)
80025d14:	afa10004 	sw	at,4(sp)
80025d18:	08009748 	j	80025d20 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb84e0a029b252928E+0x44>
80025d1c:	00000000 	nop
    }
80025d20:	8fa20004 	lw	v0,4(sp)
80025d24:	27bd0010 	addiu	sp,sp,16
80025d28:	03e00008 	jr	ra
80025d2c:	00000000 	nop

80025d30 <_ZN4core6option15Option$LT$T$GT$6as_ref17hcb2c0a33bb56f570E>:
    pub const fn as_ref(&self) -> Option<&T> {
80025d30:	27bdfff0 	addiu	sp,sp,-16
80025d34:	afa40000 	sw	a0,0(sp)
80025d38:	afa40008 	sw	a0,8(sp)
        match *self {
80025d3c:	8c810000 	lw	at,0(a0)
80025d40:	14200006 	bnez	at,80025d5c <_ZN4core6option15Option$LT$T$GT$6as_ref17hcb2c0a33bb56f570E+0x2c>
80025d44:	00000000 	nop
80025d48:	08009754 	j	80025d50 <_ZN4core6option15Option$LT$T$GT$6as_ref17hcb2c0a33bb56f570E+0x20>
80025d4c:	00000000 	nop
            None => None,
80025d50:	afa00004 	sw	zero,4(sp)
80025d54:	0800975d 	j	80025d74 <_ZN4core6option15Option$LT$T$GT$6as_ref17hcb2c0a33bb56f570E+0x44>
80025d58:	00000000 	nop
            Some(ref x) => Some(x),
80025d5c:	8fa10000 	lw	at,0(sp)
80025d60:	24210004 	addiu	at,at,4
80025d64:	afa1000c 	sw	at,12(sp)
80025d68:	afa10004 	sw	at,4(sp)
80025d6c:	0800975d 	j	80025d74 <_ZN4core6option15Option$LT$T$GT$6as_ref17hcb2c0a33bb56f570E+0x44>
80025d70:	00000000 	nop
    }
80025d74:	8fa20004 	lw	v0,4(sp)
80025d78:	27bd0010 	addiu	sp,sp,16
80025d7c:	03e00008 	jr	ra
80025d80:	00000000 	nop

80025d84 <_ZN4core6option15Option$LT$T$GT$6as_ref17he359b4e988ff579bE>:
    pub const fn as_ref(&self) -> Option<&T> {
80025d84:	27bdfff0 	addiu	sp,sp,-16
80025d88:	afa40000 	sw	a0,0(sp)
80025d8c:	afa40008 	sw	a0,8(sp)
        match *self {
80025d90:	8c810000 	lw	at,0(a0)
80025d94:	14200006 	bnez	at,80025db0 <_ZN4core6option15Option$LT$T$GT$6as_ref17he359b4e988ff579bE+0x2c>
80025d98:	00000000 	nop
80025d9c:	08009769 	j	80025da4 <_ZN4core6option15Option$LT$T$GT$6as_ref17he359b4e988ff579bE+0x20>
80025da0:	00000000 	nop
            None => None,
80025da4:	afa00004 	sw	zero,4(sp)
80025da8:	08009771 	j	80025dc4 <_ZN4core6option15Option$LT$T$GT$6as_ref17he359b4e988ff579bE+0x40>
80025dac:	00000000 	nop
            Some(ref x) => Some(x),
80025db0:	8fa10000 	lw	at,0(sp)
80025db4:	afa1000c 	sw	at,12(sp)
80025db8:	afa10004 	sw	at,4(sp)
80025dbc:	08009771 	j	80025dc4 <_ZN4core6option15Option$LT$T$GT$6as_ref17he359b4e988ff579bE+0x40>
80025dc0:	00000000 	nop
    }
80025dc4:	8fa20004 	lw	v0,4(sp)
80025dc8:	27bd0010 	addiu	sp,sp,16
80025dcc:	03e00008 	jr	ra
80025dd0:	00000000 	nop

80025dd4 <_ZN4core6option15Option$LT$T$GT$6expect17hbdb64079f11363a0E>:
    pub const fn expect(self, msg: &str) -> T {
80025dd4:	27bdffd0 	addiu	sp,sp,-48
80025dd8:	afa70010 	sw	a3,16(sp)
80025ddc:	afa60014 	sw	a2,20(sp)
80025de0:	afa50018 	sw	a1,24(sp)
80025de4:	afa4001c 	sw	a0,28(sp)
80025de8:	afa40020 	sw	a0,32(sp)
80025dec:	8fa10040 	lw	at,64(sp)
80025df0:	afa10024 	sw	at,36(sp)
80025df4:	afa60028 	sw	a2,40(sp)
80025df8:	afa7002c 	sw	a3,44(sp)
        match self {
80025dfc:	8ca10000 	lw	at,0(a1)
80025e00:	14200008 	bnez	at,80025e24 <_ZN4core6option15Option$LT$T$GT$6expect17hbdb64079f11363a0E+0x50>
80025e04:	00000000 	nop
80025e08:	08009784 	j	80025e10 <_ZN4core6option15Option$LT$T$GT$6expect17hbdb64079f11363a0E+0x3c>
80025e0c:	00000000 	nop
            None => expect_failed(msg),
80025e10:	8fa60024 	lw	a2,36(sp)
80025e14:	8fa50010 	lw	a1,16(sp)
80025e18:	8fa40014 	lw	a0,20(sp)
80025e1c:	0c00fac0 	jal	8003eb00 <_ZN4core6option13expect_failed17h75c0aba452453316E>
80025e20:	00000000 	nop
            Some(val) => val,
80025e24:	8fa20020 	lw	v0,32(sp)
80025e28:	8fa3001c 	lw	v1,28(sp)
80025e2c:	8fa10018 	lw	at,24(sp)
80025e30:	8c240008 	lw	a0,8(at)
80025e34:	ac640004 	sw	a0,4(v1)
80025e38:	8c210004 	lw	at,4(at)
80025e3c:	ac610000 	sw	at,0(v1)
80025e40:	27bd0030 	addiu	sp,sp,48
    }
80025e44:	03e00008 	jr	ra
80025e48:	00000000 	nop

80025e4c <_ZN4core6option15Option$LT$T$GT$6expect17hf6026ccf2c3cb960E>:
    pub const fn expect(self, msg: &str) -> T {
80025e4c:	27bdffd0 	addiu	sp,sp,-48
80025e50:	afa70014 	sw	a3,20(sp)
80025e54:	afa60018 	sw	a2,24(sp)
80025e58:	afa5001c 	sw	a1,28(sp)
80025e5c:	afa40020 	sw	a0,32(sp)
80025e60:	afa50024 	sw	a1,36(sp)
80025e64:	afa60028 	sw	a2,40(sp)
        match self {
80025e68:	8fa10020 	lw	at,32(sp)
80025e6c:	14200008 	bnez	at,80025e90 <_ZN4core6option15Option$LT$T$GT$6expect17hf6026ccf2c3cb960E+0x44>
80025e70:	00000000 	nop
80025e74:	0800979f 	j	80025e7c <_ZN4core6option15Option$LT$T$GT$6expect17hf6026ccf2c3cb960E+0x30>
80025e78:	00000000 	nop
            None => expect_failed(msg),
80025e7c:	8fa60014 	lw	a2,20(sp)
80025e80:	8fa50018 	lw	a1,24(sp)
80025e84:	8fa4001c 	lw	a0,28(sp)
80025e88:	0c00fac0 	jal	8003eb00 <_ZN4core6option13expect_failed17h75c0aba452453316E>
80025e8c:	00000000 	nop
            Some(val) => val,
80025e90:	8fa20020 	lw	v0,32(sp)
80025e94:	afa2002c 	sw	v0,44(sp)
80025e98:	27bd0030 	addiu	sp,sp,48
    }
80025e9c:	03e00008 	jr	ra
80025ea0:	00000000 	nop

80025ea4 <_ZN4core6option15Option$LT$T$GT$7is_none17hafeb14e2054c522cE>:
    pub const fn is_none(&self) -> bool {
80025ea4:	27bdffe8 	addiu	sp,sp,-24
80025ea8:	afbf0014 	sw	ra,20(sp)
80025eac:	afa40010 	sw	a0,16(sp)
        !self.is_some()
80025eb0:	0c0097b3 	jal	80025ecc <_ZN4core6option15Option$LT$T$GT$7is_some17h3c4ca8f4cf6714d5E>
80025eb4:	00000000 	nop
80025eb8:	38420001 	xori	v0,v0,0x1
    }
80025ebc:	8fbf0014 	lw	ra,20(sp)
80025ec0:	27bd0018 	addiu	sp,sp,24
80025ec4:	03e00008 	jr	ra
80025ec8:	00000000 	nop

80025ecc <_ZN4core6option15Option$LT$T$GT$7is_some17h3c4ca8f4cf6714d5E>:
    pub const fn is_some(&self) -> bool {
80025ecc:	27bdfff8 	addiu	sp,sp,-8
80025ed0:	afa40004 	sw	a0,4(sp)
        matches!(*self, Some(_))
80025ed4:	8c810000 	lw	at,0(a0)
80025ed8:	10200007 	beqz	at,80025ef8 <_ZN4core6option15Option$LT$T$GT$7is_some17h3c4ca8f4cf6714d5E+0x2c>
80025edc:	00000000 	nop
80025ee0:	080097ba 	j	80025ee8 <_ZN4core6option15Option$LT$T$GT$7is_some17h3c4ca8f4cf6714d5E+0x1c>
80025ee4:	00000000 	nop
80025ee8:	24010001 	li	at,1
80025eec:	a3a10003 	sb	at,3(sp)
80025ef0:	080097c2 	j	80025f08 <_ZN4core6option15Option$LT$T$GT$7is_some17h3c4ca8f4cf6714d5E+0x3c>
80025ef4:	00000000 	nop
80025ef8:	24010000 	li	at,0
80025efc:	a3a00003 	sb	zero,3(sp)
80025f00:	080097c2 	j	80025f08 <_ZN4core6option15Option$LT$T$GT$7is_some17h3c4ca8f4cf6714d5E+0x3c>
80025f04:	00000000 	nop
    }
80025f08:	93a10003 	lbu	at,3(sp)
80025f0c:	30220001 	andi	v0,at,0x1
80025f10:	27bd0008 	addiu	sp,sp,8
80025f14:	03e00008 	jr	ra
80025f18:	00000000 	nop

80025f1c <_ZN4core6option15Option$LT$T$GT$7replace17hadd69fa9aa78b57cE>:
    /// assert_eq!(old, None);
    /// ```
    #[inline]
    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
    #[stable(feature = "option_replace", since = "1.31.0")]
    pub const fn replace(&mut self, value: T) -> Option<T> {
80025f1c:	27bdffd8 	addiu	sp,sp,-40
80025f20:	afbf0024 	sw	ra,36(sp)
80025f24:	afa4001c 	sw	a0,28(sp)
80025f28:	afa50020 	sw	a1,32(sp)
        mem::replace(self, Some(value))
80025f2c:	afa50018 	sw	a1,24(sp)
80025f30:	24010001 	li	at,1
80025f34:	afa10014 	sw	at,20(sp)
80025f38:	8fa50014 	lw	a1,20(sp)
80025f3c:	8fa60018 	lw	a2,24(sp)
80025f40:	0c00847d 	jal	800211f4 <_ZN4core3mem7replace17h54079e6a897bed37E>
80025f44:	00000000 	nop
    }
80025f48:	8fbf0024 	lw	ra,36(sp)
80025f4c:	27bd0028 	addiu	sp,sp,40
80025f50:	03e00008 	jr	ra
80025f54:	00000000 	nop

80025f58 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2799107765c1d5b7E>:
    pub const fn is_ok(&self) -> bool {
80025f58:	27bdfff8 	addiu	sp,sp,-8
80025f5c:	afa40004 	sw	a0,4(sp)
        matches!(*self, Ok(_))
80025f60:	8c810000 	lw	at,0(a0)
80025f64:	14200007 	bnez	at,80025f84 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2799107765c1d5b7E+0x2c>
80025f68:	00000000 	nop
80025f6c:	080097dd 	j	80025f74 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2799107765c1d5b7E+0x1c>
80025f70:	00000000 	nop
80025f74:	24010001 	li	at,1
80025f78:	a3a10003 	sb	at,3(sp)
80025f7c:	080097e5 	j	80025f94 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2799107765c1d5b7E+0x3c>
80025f80:	00000000 	nop
80025f84:	24010000 	li	at,0
80025f88:	a3a00003 	sb	zero,3(sp)
80025f8c:	080097e5 	j	80025f94 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2799107765c1d5b7E+0x3c>
80025f90:	00000000 	nop
    }
80025f94:	93a10003 	lbu	at,3(sp)
80025f98:	30220001 	andi	v0,at,0x1
80025f9c:	27bd0008 	addiu	sp,sp,8
80025fa0:	03e00008 	jr	ra
80025fa4:	00000000 	nop

80025fa8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h509b82d8130b07b7E>:
    pub fn expect(self, msg: &str) -> T
80025fa8:	27bdffc0 	addiu	sp,sp,-64
80025fac:	afa7001c 	sw	a3,28(sp)
80025fb0:	afa60020 	sw	a2,32(sp)
80025fb4:	afa50024 	sw	a1,36(sp)
80025fb8:	afa40028 	sw	a0,40(sp)
80025fbc:	afa50034 	sw	a1,52(sp)
80025fc0:	afa60038 	sw	a2,56(sp)
        match self {
80025fc4:	8c810000 	lw	at,0(a0)
80025fc8:	14200009 	bnez	at,80025ff0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h509b82d8130b07b7E+0x48>
80025fcc:	00000000 	nop
80025fd0:	080097f6 	j	80025fd8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h509b82d8130b07b7E+0x30>
80025fd4:	00000000 	nop
            Ok(t) => t,
80025fd8:	8fa10028 	lw	at,40(sp)
80025fdc:	8c220004 	lw	v0,4(at)
80025fe0:	afa2003c 	sw	v0,60(sp)
80025fe4:	27bd0040 	addiu	sp,sp,64
    }
80025fe8:	03e00008 	jr	ra
80025fec:	00000000 	nop
            Err(e) => unwrap_failed(msg, &e),
80025ff0:	8fa50020 	lw	a1,32(sp)
80025ff4:	8fa40024 	lw	a0,36(sp)
80025ff8:	8fa1001c 	lw	at,28(sp)
80025ffc:	8fa20028 	lw	v0,40(sp)
80026000:	8c430000 	lw	v1,0(v0)
80026004:	8c420004 	lw	v0,4(v0)
80026008:	afa3002c 	sw	v1,44(sp)
8002600c:	afa20030 	sw	v0,48(sp)
80026010:	03a01025 	move	v0,sp
80026014:	ac410010 	sw	at,16(v0)
80026018:	3c018105 	lui	at,0x8105
8002601c:	2427ebec 	addiu	a3,at,-5140
80026020:	27a6002c 	addiu	a2,sp,44
80026024:	0c00fdba 	jal	8003f6e8 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
80026028:	00000000 	nop

8002602c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hd2089bbef5d2693bE>:
    pub fn expect(self, msg: &str) -> T
8002602c:	27bdffc0 	addiu	sp,sp,-64
80026030:	afa70018 	sw	a3,24(sp)
80026034:	afa6001c 	sw	a2,28(sp)
80026038:	8fa10050 	lw	at,80(sp)
8002603c:	afa10020 	sw	at,32(sp)
80026040:	afa40024 	sw	a0,36(sp)
80026044:	afa50028 	sw	a1,40(sp)
80026048:	afa60038 	sw	a2,56(sp)
8002604c:	afa7003c 	sw	a3,60(sp)
        match self {
80026050:	8fa10024 	lw	at,36(sp)
80026054:	14200006 	bnez	at,80026070 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hd2089bbef5d2693bE+0x44>
80026058:	00000000 	nop
8002605c:	08009819 	j	80026064 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hd2089bbef5d2693bE+0x38>
80026060:	00000000 	nop
80026064:	27bd0040 	addiu	sp,sp,64
    }
80026068:	03e00008 	jr	ra
8002606c:	00000000 	nop
            Err(e) => unwrap_failed(msg, &e),
80026070:	8fa50018 	lw	a1,24(sp)
80026074:	8fa4001c 	lw	a0,28(sp)
80026078:	8fa10020 	lw	at,32(sp)
8002607c:	8fa30024 	lw	v1,36(sp)
80026080:	8fa20028 	lw	v0,40(sp)
80026084:	afa3002c 	sw	v1,44(sp)
80026088:	afa20030 	sw	v0,48(sp)
8002608c:	03a01025 	move	v0,sp
80026090:	ac410010 	sw	at,16(v0)
80026094:	3c018105 	lui	at,0x8105
80026098:	2427ebec 	addiu	a3,at,-5140
8002609c:	27a6002c 	addiu	a2,sp,44
800260a0:	0c00fdba 	jal	8003f6e8 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
800260a4:	00000000 	nop

800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>:
///
/// The intention is to not do that when running in the interpreter, as that one has its own
/// language UB checks which generally produce better errors.
#[rustc_const_unstable(feature = "const_ub_checks", issue = "none")]
#[inline]
pub(crate) const fn check_language_ub() -> bool {
800260a8:	27bdffe8 	addiu	sp,sp,-24
800260ac:	afbf0014 	sw	ra,20(sp)
        // Always disable UB checks.
        false
    }

    // Only used for UB checks so we may const_eval_select.
    intrinsics::ub_checks() && const_eval_select((), comptime, runtime)
800260b0:	0800982e 	j	800260b8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE+0x10>
800260b4:	00000000 	nop
800260b8:	0c009839 	jal	800260e4 <_ZN4core9ub_checks17check_language_ub7runtime17h016c36f1715f0b9cE>
800260bc:	00000000 	nop
800260c0:	a3a20013 	sb	v0,19(sp)
800260c4:	08009833 	j	800260cc <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE+0x24>
800260c8:	00000000 	nop
}
800260cc:	93a10013 	lbu	at,19(sp)
800260d0:	30220001 	andi	v0,at,0x1
800260d4:	8fbf0014 	lw	ra,20(sp)
800260d8:	27bd0018 	addiu	sp,sp,24
800260dc:	03e00008 	jr	ra
800260e0:	00000000 	nop

800260e4 <_ZN4core9ub_checks17check_language_ub7runtime17h016c36f1715f0b9cE>:
    fn runtime() -> bool {
800260e4:	24020001 	li	v0,1
    }
800260e8:	03e00008 	jr	ra
800260ec:	00000000 	nop

800260f0 <_ZN4core9ub_checks17is_nonoverlapping17hffc5f77dfb9f6169E>:
/// `count * size` do *not* overlap.
///
/// Note that in const-eval this function just returns `true` and therefore must
/// only be used with `assert_unsafe_precondition!`, similar to `is_aligned_and_not_null`.
#[inline]
pub(crate) const fn is_nonoverlapping(
800260f0:	27bdffc8 	addiu	sp,sp,-56
800260f4:	afbf0034 	sw	ra,52(sp)
800260f8:	afa40024 	sw	a0,36(sp)
800260fc:	afa50028 	sw	a1,40(sp)
80026100:	afa6002c 	sw	a2,44(sp)
80026104:	afa70030 	sw	a3,48(sp)
    const fn comptime(_: *const (), _: *const (), _: usize, _: usize) -> bool {
        true
    }

    // This is just for safety checks so we can const_eval_select.
    const_eval_select((src, dst, size, count), comptime, runtime)
80026108:	afa40014 	sw	a0,20(sp)
8002610c:	afa50018 	sw	a1,24(sp)
80026110:	afa6001c 	sw	a2,28(sp)
80026114:	afa70020 	sw	a3,32(sp)
80026118:	8fa40014 	lw	a0,20(sp)
8002611c:	8fa50018 	lw	a1,24(sp)
80026120:	8fa6001c 	lw	a2,28(sp)
80026124:	8fa70020 	lw	a3,32(sp)
80026128:	0c009850 	jal	80026140 <_ZN4core9ub_checks17is_nonoverlapping7runtime17h0c548d8ec3e43b99E>
8002612c:	00000000 	nop
}
80026130:	8fbf0034 	lw	ra,52(sp)
80026134:	27bd0038 	addiu	sp,sp,56
80026138:	03e00008 	jr	ra
8002613c:	00000000 	nop

80026140 <_ZN4core9ub_checks17is_nonoverlapping7runtime17h0c548d8ec3e43b99E>:
    fn runtime(src: *const (), dst: *const (), size: usize, count: usize) -> bool {
80026140:	27bdffa0 	addiu	sp,sp,-96
80026144:	afbf005c 	sw	ra,92(sp)
80026148:	afa70014 	sw	a3,20(sp)
8002614c:	afa60018 	sw	a2,24(sp)
80026150:	00a00825 	move	at,a1
80026154:	8fa50014 	lw	a1,20(sp)
80026158:	00801025 	move	v0,a0
8002615c:	8fa40018 	lw	a0,24(sp)
80026160:	afa2002c 	sw	v0,44(sp)
80026164:	afa10030 	sw	at,48(sp)
80026168:	afa40034 	sw	a0,52(sp)
8002616c:	afa50038 	sw	a1,56(sp)
80026170:	afa20050 	sw	v0,80(sp)
80026174:	afa20054 	sw	v0,84(sp)
        unsafe { mem::transmute(self.cast::<()>()) }
80026178:	00401825 	move	v1,v0
8002617c:	afa3001c 	sw	v1,28(sp)
        let src_usize = src.addr();
80026180:	afa2003c 	sw	v0,60(sp)
80026184:	afa1004c 	sw	at,76(sp)
80026188:	afa10058 	sw	at,88(sp)
8002618c:	00201025 	move	v0,at
80026190:	afa20020 	sw	v0,32(sp)
        let dst_usize = dst.addr();
80026194:	afa10040 	sw	at,64(sp)
        let Some(size) = size.checked_mul(count) else {
80026198:	0c008521 	jal	80021484 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h7aabba6eba87af18E>
8002619c:	00000000 	nop
800261a0:	afa20024 	sw	v0,36(sp)
800261a4:	afa30028 	sw	v1,40(sp)
800261a8:	8fa10024 	lw	at,36(sp)
800261ac:	24020001 	li	v0,1
800261b0:	14220012 	bne	at,v0,800261fc <_ZN4core9ub_checks17is_nonoverlapping7runtime17h0c548d8ec3e43b99E+0xbc>
800261b4:	00000000 	nop
800261b8:	08009870 	j	800261c0 <_ZN4core9ub_checks17is_nonoverlapping7runtime17h0c548d8ec3e43b99E+0x80>
800261bc:	00000000 	nop
800261c0:	8fa50020 	lw	a1,32(sp)
800261c4:	8fa4001c 	lw	a0,28(sp)
800261c8:	8fa10028 	lw	at,40(sp)
800261cc:	afa10010 	sw	at,16(sp)
800261d0:	afa10044 	sw	at,68(sp)
        let diff = src_usize.abs_diff(dst_usize);
800261d4:	0c008549 	jal	80021524 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h0d35fbf6ee606438E>
800261d8:	00000000 	nop
800261dc:	8fa10010 	lw	at,16(sp)
800261e0:	afa20048 	sw	v0,72(sp)
        diff >= size
800261e4:	0041082b 	sltu	at,v0,at
800261e8:	38220001 	xori	v0,at,0x1
    }
800261ec:	8fbf005c 	lw	ra,92(sp)
800261f0:	27bd0060 	addiu	sp,sp,96
800261f4:	03e00008 	jr	ra
800261f8:	00000000 	nop
            crate::panicking::panic_nounwind(
800261fc:	3c018105 	lui	at,0x8105
80026200:	2424ec38 	addiu	a0,at,-5064
80026204:	2405003d 	li	a1,61
80026208:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8002620c:	00000000 	nop

80026210 <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E>:
pub(crate) const fn is_aligned_and_not_null(ptr: *const (), align: usize) -> bool {
80026210:	27bdffd8 	addiu	sp,sp,-40
80026214:	afbf0024 	sw	ra,36(sp)
80026218:	afa50010 	sw	a1,16(sp)
8002621c:	afa40014 	sw	a0,20(sp)
80026220:	afa4001c 	sw	a0,28(sp)
80026224:	afa50020 	sw	a1,32(sp)
    !ptr.is_null() && ptr.is_aligned_to(align)
80026228:	0c00eec8 	jal	8003bb20 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h7332b93c4f97f066E>
8002622c:	00000000 	nop
80026230:	1440000a 	bnez	v0,8002625c <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E+0x4c>
80026234:	00000000 	nop
80026238:	08009890 	j	80026240 <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E+0x30>
8002623c:	00000000 	nop
80026240:	8fa50010 	lw	a1,16(sp)
80026244:	8fa40014 	lw	a0,20(sp)
80026248:	0c00ef1e 	jal	8003bc78 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to17hb855d440ce971e64E>
8002624c:	00000000 	nop
80026250:	a3a2001b 	sb	v0,27(sp)
80026254:	0800989b 	j	8002626c <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E+0x5c>
80026258:	00000000 	nop
8002625c:	24010000 	li	at,0
80026260:	a3a0001b 	sb	zero,27(sp)
80026264:	0800989b 	j	8002626c <_ZN4core9ub_checks23is_aligned_and_not_null17h39d8ec57af83b569E+0x5c>
80026268:	00000000 	nop
}
8002626c:	93a1001b 	lbu	at,27(sp)
80026270:	30220001 	andi	v0,at,0x1
80026274:	8fbf0024 	lw	ra,36(sp)
80026278:	27bd0028 	addiu	sp,sp,40
8002627c:	03e00008 	jr	ra
80026280:	00000000 	nop

80026284 <_ZN4core9ub_checks24is_valid_allocation_size17hc4dc761e8b6e68efE>:
pub(crate) const fn is_valid_allocation_size(size: usize, len: usize) -> bool {
80026284:	27bdffd8 	addiu	sp,sp,-40
80026288:	afa50014 	sw	a1,20(sp)
8002628c:	afa40018 	sw	a0,24(sp)
80026290:	afa40020 	sw	a0,32(sp)
80026294:	afa50024 	sw	a1,36(sp)
    let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
80026298:	14800007 	bnez	a0,800262b8 <_ZN4core9ub_checks24is_valid_allocation_size17hc4dc761e8b6e68efE+0x34>
8002629c:	00000000 	nop
800262a0:	080098aa 	j	800262a8 <_ZN4core9ub_checks24is_valid_allocation_size17hc4dc761e8b6e68efE+0x24>
800262a4:	00000000 	nop
800262a8:	2401ffff 	li	at,-1
800262ac:	afa1001c 	sw	at,28(sp)
800262b0:	080098b3 	j	800262cc <_ZN4core9ub_checks24is_valid_allocation_size17hc4dc761e8b6e68efE+0x48>
800262b4:	00000000 	nop
800262b8:	8fa10018 	lw	at,24(sp)
800262bc:	10200013 	beqz	at,8002630c <_ZN4core9ub_checks24is_valid_allocation_size17hc4dc761e8b6e68efE+0x88>
800262c0:	00000000 	nop
800262c4:	080098ba 	j	800262e8 <_ZN4core9ub_checks24is_valid_allocation_size17hc4dc761e8b6e68efE+0x64>
800262c8:	00000000 	nop
    len <= max_len
800262cc:	8fa20014 	lw	v0,20(sp)
800262d0:	8fa1001c 	lw	at,28(sp)
800262d4:	0022082b 	sltu	at,at,v0
800262d8:	38220001 	xori	v0,at,0x1
800262dc:	27bd0028 	addiu	sp,sp,40
}
800262e0:	03e00008 	jr	ra
800262e4:	00000000 	nop
800262e8:	8fa10018 	lw	at,24(sp)
800262ec:	3c027fff 	lui	v0,0x7fff
800262f0:	3442ffff 	ori	v0,v0,0xffff
    let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
800262f4:	0041001b 	divu	zero,v0,at
800262f8:	002001f4 	teq	at,zero,0x7
800262fc:	00000812 	mflo	at
80026300:	afa1001c 	sw	at,28(sp)
80026304:	080098b3 	j	800262cc <_ZN4core9ub_checks24is_valid_allocation_size17hc4dc761e8b6e68efE+0x48>
80026308:	00000000 	nop
8002630c:	3c018105 	lui	at,0x8105
80026310:	2424ece4 	addiu	a0,at,-4892
80026314:	0c012455 	jal	80049154 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
80026318:	00000000 	nop

8002631c <_ZN4spin4once13Once$LT$T$GT$9call_once17h0fdcb9bed0706c3dE>:
    /// fn expensive_computation() -> usize {
    ///     // ...
    /// # 2
    /// }
    /// ```
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
8002631c:	27bdffb8 	addiu	sp,sp,-72
80026320:	afbf0044 	sw	ra,68(sp)
80026324:	afa40018 	sw	a0,24(sp)
80026328:	afa40038 	sw	a0,56(sp)
8002632c:	24010000 	li	at,0
                // This next line is strictly an optimization
                return self.force_get();
            }
        }

        loop {
80026330:	a3a00037 	sb	zero,55(sp)
80026334:	24010001 	li	at,1
80026338:	a3a10037 	sb	at,55(sp)
8002633c:	24010004 	li	at,4
        let mut status = self.state.load(Ordering::SeqCst);
80026340:	a3a10026 	sb	at,38(sp)
80026344:	93a50026 	lbu	a1,38(sp)
80026348:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
8002634c:	00000000 	nop
80026350:	afa20020 	sw	v0,32(sp)
        if status == INCOMPLETE {
80026354:	8fa10020 	lw	at,32(sp)
80026358:	1020000f 	beqz	at,80026398 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0fdcb9bed0706c3dE+0x7c>
8002635c:	00000000 	nop
80026360:	080098da 	j	80026368 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0fdcb9bed0706c3dE+0x4c>
80026364:	00000000 	nop
            match status {
80026368:	8fa10020 	lw	at,32(sp)
8002636c:	afa10014 	sw	at,20(sp)
80026370:	2c210004 	sltiu	at,at,4
80026374:	1020003f 	beqz	at,80026474 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0fdcb9bed0706c3dE+0x158>
80026378:	00000000 	nop
8002637c:	8fa10014 	lw	at,20(sp)
80026380:	00010880 	sll	at,at,0x2
80026384:	3c028105 	lui	v0,0x8105
80026388:	00220821 	addu	at,at,v0
8002638c:	8c21e038 	lw	at,-8136(at)
80026390:	00200008 	jr	at
80026394:	00000000 	nop
80026398:	8fa40018 	lw	a0,24(sp)
8002639c:	24010004 	li	at,4
                                                 Ordering::SeqCst);
800263a0:	a3a10027 	sb	at,39(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
800263a4:	93a70027 	lbu	a3,39(sp)
800263a8:	24050000 	li	a1,0
800263ac:	24060001 	li	a2,1
800263b0:	0c009162 	jal	80024588 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE>
800263b4:	00000000 	nop
800263b8:	afa20020 	sw	v0,32(sp)
            if status == INCOMPLETE { // We init
800263bc:	8fa10020 	lw	at,32(sp)
800263c0:	1420ffe9 	bnez	at,80026368 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0fdcb9bed0706c3dE+0x4c>
800263c4:	00000000 	nop
800263c8:	080098f4 	j	800263d0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0fdcb9bed0706c3dE+0xb4>
800263cc:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
800263d0:	8fa10018 	lw	at,24(sp)
800263d4:	afa10028 	sw	at,40(sp)
800263d8:	24010001 	li	at,1
800263dc:	afa10010 	sw	at,16(sp)
800263e0:	a3a1002c 	sb	at,44(sp)
800263e4:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
800263e8:	a3a00037 	sb	zero,55(sp)
800263ec:	0c00867f 	jal	800219fc <_ZN4core3ops8function6FnOnce9call_once17hd396e9a1ae475273E>
800263f0:	00000000 	nop
800263f4:	8fa10010 	lw	at,16(sp)
800263f8:	8fa40018 	lw	a0,24(sp)
800263fc:	a3a2003f 	sb	v0,63(sp)
80026400:	93a2003f 	lbu	v0,63(sp)
80026404:	a3a20034 	sb	v0,52(sp)
80026408:	93a20034 	lbu	v0,52(sp)
8002640c:	a3a20033 	sb	v0,51(sp)
80026410:	a3a10032 	sb	at,50(sp)
80026414:	24810004 	addiu	at,a0,4
80026418:	afa10040 	sw	at,64(sp)
8002641c:	93a10033 	lbu	at,51(sp)
80026420:	a0810005 	sb	at,5(a0)
80026424:	93a10032 	lbu	at,50(sp)
80026428:	a0810004 	sb	at,4(a0)
                finish.panicked = false;
8002642c:	a3a0002c 	sb	zero,44(sp)
80026430:	24010002 	li	at,2
                status = COMPLETE;
80026434:	afa10020 	sw	at,32(sp)
                self.state.store(status, Ordering::SeqCst);
80026438:	8fa50020 	lw	a1,32(sp)
8002643c:	24010004 	li	at,4
80026440:	a3a10035 	sb	at,53(sp)
80026444:	93a60035 	lbu	a2,53(sp)
80026448:	0c0091aa 	jal	800246a8 <_ZN4core4sync6atomic11AtomicUsize5store17heacd8522e5ea3cb1E>
8002644c:	00000000 	nop
80026450:	8fa40018 	lw	a0,24(sp)
                return self.force_get();
80026454:	0c009f38 	jal	80027ce0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h84efd6c3338094b3E>
80026458:	00000000 	nop
8002645c:	afa2001c 	sw	v0,28(sp)
80026460:	27a40028 	addiu	a0,sp,40
            }
80026464:	0c00896a 	jal	800225a8 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1151b3261df242b0E>
80026468:	00000000 	nop
8002646c:	0800993e 	j	800264f8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0fdcb9bed0706c3dE+0x1dc>
80026470:	00000000 	nop
                    cpu_relax();
                    status = self.state.load(Ordering::SeqCst)
                },
                PANICKED => panic!("Once has panicked"),
                COMPLETE => return self.force_get(),
                _ => unsafe { unreachable() },
80026474:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
80026478:	00000000 	nop
                INCOMPLETE => unreachable!(),
8002647c:	3c018105 	lui	at,0x8105
80026480:	2424ecf4 	addiu	a0,at,-4876
80026484:	3c018105 	lui	at,0x8105
80026488:	2426ed70 	addiu	a2,at,-4752
8002648c:	24050028 	li	a1,40
80026490:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80026494:	00000000 	nop
                    cpu_relax();
80026498:	0c0091b6 	jal	800246d8 <_ZN4core4sync6atomic14spin_loop_hint17h56596ec2462f6e38E>
8002649c:	00000000 	nop
800264a0:	8fa40018 	lw	a0,24(sp)
800264a4:	24010004 	li	at,4
                    status = self.state.load(Ordering::SeqCst)
800264a8:	a3a10036 	sb	at,54(sp)
800264ac:	93a50036 	lbu	a1,54(sp)
800264b0:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
800264b4:	00000000 	nop
800264b8:	afa20020 	sw	v0,32(sp)
800264bc:	080098da 	j	80026368 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0fdcb9bed0706c3dE+0x4c>
800264c0:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
800264c4:	3c018105 	lui	at,0x8105
800264c8:	2424ed80 	addiu	a0,at,-4736
800264cc:	3c018105 	lui	at,0x8105
800264d0:	2426ed94 	addiu	a2,at,-4716
800264d4:	24050011 	li	a1,17
800264d8:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
800264dc:	00000000 	nop
                COMPLETE => return self.force_get(),
800264e0:	8fa40018 	lw	a0,24(sp)
800264e4:	0c009f38 	jal	80027ce0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h84efd6c3338094b3E>
800264e8:	00000000 	nop
800264ec:	afa2001c 	sw	v0,28(sp)
#![cfg_attr(target_arch = "mips", feature(asm_experimental_arch))]
800264f0:	0800993e 	j	800264f8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0fdcb9bed0706c3dE+0x1dc>
800264f4:	00000000 	nop
            }
        }
    }
800264f8:	93a10037 	lbu	at,55(sp)
800264fc:	30210001 	andi	at,at,0x1
80026500:	14200008 	bnez	at,80026524 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0fdcb9bed0706c3dE+0x208>
80026504:	00000000 	nop
80026508:	08009944 	j	80026510 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0fdcb9bed0706c3dE+0x1f4>
8002650c:	00000000 	nop
80026510:	8fa2001c 	lw	v0,28(sp)
80026514:	8fbf0044 	lw	ra,68(sp)
80026518:	27bd0048 	addiu	sp,sp,72
8002651c:	03e00008 	jr	ra
80026520:	00000000 	nop
80026524:	08009944 	j	80026510 <_ZN4spin4once13Once$LT$T$GT$9call_once17h0fdcb9bed0706c3dE+0x1f4>
80026528:	00000000 	nop

8002652c <_ZN4spin4once13Once$LT$T$GT$9call_once17h511ad42889be22c0E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
8002652c:	27bdff98 	addiu	sp,sp,-104
80026530:	afbf0064 	sw	ra,100(sp)
80026534:	afa40018 	sw	a0,24(sp)
80026538:	afa40058 	sw	a0,88(sp)
8002653c:	24010000 	li	at,0
        loop {
80026540:	a3a00057 	sb	zero,87(sp)
80026544:	24010001 	li	at,1
80026548:	a3a10057 	sb	at,87(sp)
8002654c:	24010004 	li	at,4
        let mut status = self.state.load(Ordering::SeqCst);
80026550:	a3a10026 	sb	at,38(sp)
80026554:	93a50026 	lbu	a1,38(sp)
80026558:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
8002655c:	00000000 	nop
80026560:	afa20020 	sw	v0,32(sp)
        if status == INCOMPLETE {
80026564:	8fa10020 	lw	at,32(sp)
80026568:	1020000f 	beqz	at,800265a8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h511ad42889be22c0E+0x7c>
8002656c:	00000000 	nop
80026570:	0800995e 	j	80026578 <_ZN4spin4once13Once$LT$T$GT$9call_once17h511ad42889be22c0E+0x4c>
80026574:	00000000 	nop
            match status {
80026578:	8fa10020 	lw	at,32(sp)
8002657c:	afa10014 	sw	at,20(sp)
80026580:	2c210004 	sltiu	at,at,4
80026584:	1020004c 	beqz	at,800266b8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h511ad42889be22c0E+0x18c>
80026588:	00000000 	nop
8002658c:	8fa10014 	lw	at,20(sp)
80026590:	00010880 	sll	at,at,0x2
80026594:	3c028105 	lui	v0,0x8105
80026598:	00220821 	addu	at,at,v0
8002659c:	8c21e048 	lw	at,-8120(at)
800265a0:	00200008 	jr	at
800265a4:	00000000 	nop
800265a8:	8fa40018 	lw	a0,24(sp)
800265ac:	24010004 	li	at,4
                                                 Ordering::SeqCst);
800265b0:	a3a10027 	sb	at,39(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
800265b4:	93a70027 	lbu	a3,39(sp)
800265b8:	24050000 	li	a1,0
800265bc:	24060001 	li	a2,1
800265c0:	0c009162 	jal	80024588 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE>
800265c4:	00000000 	nop
800265c8:	afa20020 	sw	v0,32(sp)
            if status == INCOMPLETE { // We init
800265cc:	8fa10020 	lw	at,32(sp)
800265d0:	1420ffe9 	bnez	at,80026578 <_ZN4spin4once13Once$LT$T$GT$9call_once17h511ad42889be22c0E+0x4c>
800265d4:	00000000 	nop
800265d8:	08009978 	j	800265e0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h511ad42889be22c0E+0xb4>
800265dc:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
800265e0:	8fa10018 	lw	at,24(sp)
800265e4:	afa10028 	sw	at,40(sp)
800265e8:	24010001 	li	at,1
800265ec:	afa10010 	sw	at,16(sp)
800265f0:	a3a1002c 	sb	at,44(sp)
800265f4:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
800265f8:	a3a00057 	sb	zero,87(sp)
800265fc:	27a40044 	addiu	a0,sp,68
80026600:	0c0085e8 	jal	800217a0 <_ZN4core3ops8function6FnOnce9call_once17h583cea2a0a2f4f0dE>
80026604:	00000000 	nop
80026608:	8fa20010 	lw	v0,16(sp)
8002660c:	8fa10018 	lw	at,24(sp)
80026610:	8fa30050 	lw	v1,80(sp)
80026614:	afa30040 	sw	v1,64(sp)
80026618:	8fa3004c 	lw	v1,76(sp)
8002661c:	afa3003c 	sw	v1,60(sp)
80026620:	8fa30048 	lw	v1,72(sp)
80026624:	afa30038 	sw	v1,56(sp)
80026628:	8fa30044 	lw	v1,68(sp)
8002662c:	afa30034 	sw	v1,52(sp)
80026630:	afa20030 	sw	v0,48(sp)
80026634:	24240004 	addiu	a0,at,4
80026638:	afa40060 	sw	a0,96(sp)
8002663c:	0c00871f 	jal	80021c7c <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$$GT$17h01c9629ac4dcc992E>
80026640:	00000000 	nop
80026644:	8fa40018 	lw	a0,24(sp)
80026648:	8fa10040 	lw	at,64(sp)
8002664c:	ac810014 	sw	at,20(a0)
80026650:	8fa1003c 	lw	at,60(sp)
80026654:	ac810010 	sw	at,16(a0)
80026658:	8fa10038 	lw	at,56(sp)
8002665c:	ac81000c 	sw	at,12(a0)
80026660:	8fa10034 	lw	at,52(sp)
80026664:	ac810008 	sw	at,8(a0)
80026668:	8fa10030 	lw	at,48(sp)
8002666c:	ac810004 	sw	at,4(a0)
                finish.panicked = false;
80026670:	a3a0002c 	sb	zero,44(sp)
80026674:	24010002 	li	at,2
                status = COMPLETE;
80026678:	afa10020 	sw	at,32(sp)
                self.state.store(status, Ordering::SeqCst);
8002667c:	8fa50020 	lw	a1,32(sp)
80026680:	24010004 	li	at,4
80026684:	a3a10055 	sb	at,85(sp)
80026688:	93a60055 	lbu	a2,85(sp)
8002668c:	0c0091aa 	jal	800246a8 <_ZN4core4sync6atomic11AtomicUsize5store17heacd8522e5ea3cb1E>
80026690:	00000000 	nop
80026694:	8fa40018 	lw	a0,24(sp)
                return self.force_get();
80026698:	0c009f23 	jal	80027c8c <_ZN4spin4once13Once$LT$T$GT$9force_get17h7e728543bab82297E>
8002669c:	00000000 	nop
800266a0:	afa2001c 	sw	v0,28(sp)
800266a4:	27a40028 	addiu	a0,sp,40
            }
800266a8:	0c00896a 	jal	800225a8 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1151b3261df242b0E>
800266ac:	00000000 	nop
800266b0:	080099cf 	j	8002673c <_ZN4spin4once13Once$LT$T$GT$9call_once17h511ad42889be22c0E+0x210>
800266b4:	00000000 	nop
                _ => unsafe { unreachable() },
800266b8:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
800266bc:	00000000 	nop
                INCOMPLETE => unreachable!(),
800266c0:	3c018105 	lui	at,0x8105
800266c4:	2424ecf4 	addiu	a0,at,-4876
800266c8:	3c018105 	lui	at,0x8105
800266cc:	2426ed70 	addiu	a2,at,-4752
800266d0:	24050028 	li	a1,40
800266d4:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
800266d8:	00000000 	nop
                    cpu_relax();
800266dc:	0c0091b6 	jal	800246d8 <_ZN4core4sync6atomic14spin_loop_hint17h56596ec2462f6e38E>
800266e0:	00000000 	nop
800266e4:	8fa40018 	lw	a0,24(sp)
800266e8:	24010004 	li	at,4
                    status = self.state.load(Ordering::SeqCst)
800266ec:	a3a10056 	sb	at,86(sp)
800266f0:	93a50056 	lbu	a1,86(sp)
800266f4:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
800266f8:	00000000 	nop
800266fc:	afa20020 	sw	v0,32(sp)
80026700:	0800995e 	j	80026578 <_ZN4spin4once13Once$LT$T$GT$9call_once17h511ad42889be22c0E+0x4c>
80026704:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
80026708:	3c018105 	lui	at,0x8105
8002670c:	2424ed80 	addiu	a0,at,-4736
80026710:	3c018105 	lui	at,0x8105
80026714:	2426ed94 	addiu	a2,at,-4716
80026718:	24050011 	li	a1,17
8002671c:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80026720:	00000000 	nop
                COMPLETE => return self.force_get(),
80026724:	8fa40018 	lw	a0,24(sp)
80026728:	0c009f23 	jal	80027c8c <_ZN4spin4once13Once$LT$T$GT$9force_get17h7e728543bab82297E>
8002672c:	00000000 	nop
80026730:	afa2001c 	sw	v0,28(sp)
80026734:	080099cf 	j	8002673c <_ZN4spin4once13Once$LT$T$GT$9call_once17h511ad42889be22c0E+0x210>
80026738:	00000000 	nop
    }
8002673c:	93a10057 	lbu	at,87(sp)
80026740:	30210001 	andi	at,at,0x1
80026744:	14200008 	bnez	at,80026768 <_ZN4spin4once13Once$LT$T$GT$9call_once17h511ad42889be22c0E+0x23c>
80026748:	00000000 	nop
8002674c:	080099d5 	j	80026754 <_ZN4spin4once13Once$LT$T$GT$9call_once17h511ad42889be22c0E+0x228>
80026750:	00000000 	nop
80026754:	8fa2001c 	lw	v0,28(sp)
80026758:	8fbf0064 	lw	ra,100(sp)
8002675c:	27bd0068 	addiu	sp,sp,104
80026760:	03e00008 	jr	ra
80026764:	00000000 	nop
80026768:	080099d5 	j	80026754 <_ZN4spin4once13Once$LT$T$GT$9call_once17h511ad42889be22c0E+0x228>
8002676c:	00000000 	nop

80026770 <_ZN4spin4once13Once$LT$T$GT$9call_once17h583ef0b10887ad4aE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80026770:	27bdffa8 	addiu	sp,sp,-88
80026774:	afbf0054 	sw	ra,84(sp)
80026778:	afa40018 	sw	a0,24(sp)
8002677c:	afa40048 	sw	a0,72(sp)
80026780:	24010000 	li	at,0
        loop {
80026784:	a3a00047 	sb	zero,71(sp)
80026788:	24010001 	li	at,1
8002678c:	a3a10047 	sb	at,71(sp)
80026790:	24010004 	li	at,4
        let mut status = self.state.load(Ordering::SeqCst);
80026794:	a3a10026 	sb	at,38(sp)
80026798:	93a50026 	lbu	a1,38(sp)
8002679c:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
800267a0:	00000000 	nop
800267a4:	afa20020 	sw	v0,32(sp)
        if status == INCOMPLETE {
800267a8:	8fa10020 	lw	at,32(sp)
800267ac:	1020000f 	beqz	at,800267ec <_ZN4spin4once13Once$LT$T$GT$9call_once17h583ef0b10887ad4aE+0x7c>
800267b0:	00000000 	nop
800267b4:	080099ef 	j	800267bc <_ZN4spin4once13Once$LT$T$GT$9call_once17h583ef0b10887ad4aE+0x4c>
800267b8:	00000000 	nop
            match status {
800267bc:	8fa10020 	lw	at,32(sp)
800267c0:	afa10014 	sw	at,20(sp)
800267c4:	2c210004 	sltiu	at,at,4
800267c8:	10200044 	beqz	at,800268dc <_ZN4spin4once13Once$LT$T$GT$9call_once17h583ef0b10887ad4aE+0x16c>
800267cc:	00000000 	nop
800267d0:	8fa10014 	lw	at,20(sp)
800267d4:	00010880 	sll	at,at,0x2
800267d8:	3c028105 	lui	v0,0x8105
800267dc:	00220821 	addu	at,at,v0
800267e0:	8c21e058 	lw	at,-8104(at)
800267e4:	00200008 	jr	at
800267e8:	00000000 	nop
800267ec:	8fa40018 	lw	a0,24(sp)
800267f0:	24010004 	li	at,4
                                                 Ordering::SeqCst);
800267f4:	a3a10027 	sb	at,39(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
800267f8:	93a70027 	lbu	a3,39(sp)
800267fc:	24050000 	li	a1,0
80026800:	24060001 	li	a2,1
80026804:	0c009162 	jal	80024588 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE>
80026808:	00000000 	nop
8002680c:	afa20020 	sw	v0,32(sp)
            if status == INCOMPLETE { // We init
80026810:	8fa10020 	lw	at,32(sp)
80026814:	1420ffe9 	bnez	at,800267bc <_ZN4spin4once13Once$LT$T$GT$9call_once17h583ef0b10887ad4aE+0x4c>
80026818:	00000000 	nop
8002681c:	08009a09 	j	80026824 <_ZN4spin4once13Once$LT$T$GT$9call_once17h583ef0b10887ad4aE+0xb4>
80026820:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
80026824:	8fa10018 	lw	at,24(sp)
80026828:	afa10028 	sw	at,40(sp)
8002682c:	24010001 	li	at,1
80026830:	afa10010 	sw	at,16(sp)
80026834:	a3a1002c 	sb	at,44(sp)
80026838:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
8002683c:	a3a00047 	sb	zero,71(sp)
80026840:	27a4003c 	addiu	a0,sp,60
80026844:	0c008607 	jal	8002181c <_ZN4core3ops8function6FnOnce9call_once17h7d06aec8dda95887E>
80026848:	00000000 	nop
8002684c:	8fa20010 	lw	v0,16(sp)
80026850:	8fa10018 	lw	at,24(sp)
80026854:	8fa30040 	lw	v1,64(sp)
80026858:	afa30038 	sw	v1,56(sp)
8002685c:	8fa3003c 	lw	v1,60(sp)
80026860:	afa30034 	sw	v1,52(sp)
80026864:	afa20030 	sw	v0,48(sp)
80026868:	24240004 	addiu	a0,at,4
8002686c:	afa40050 	sw	a0,80(sp)
80026870:	0c008732 	jal	80021cc8 <_ZN4core3ptr126drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$$GT$17h333edefbed725738E>
80026874:	00000000 	nop
80026878:	8fa40018 	lw	a0,24(sp)
8002687c:	8fa10038 	lw	at,56(sp)
80026880:	ac81000c 	sw	at,12(a0)
80026884:	8fa10034 	lw	at,52(sp)
80026888:	ac810008 	sw	at,8(a0)
8002688c:	8fa10030 	lw	at,48(sp)
80026890:	ac810004 	sw	at,4(a0)
                finish.panicked = false;
80026894:	a3a0002c 	sb	zero,44(sp)
80026898:	24010002 	li	at,2
                status = COMPLETE;
8002689c:	afa10020 	sw	at,32(sp)
                self.state.store(status, Ordering::SeqCst);
800268a0:	8fa50020 	lw	a1,32(sp)
800268a4:	24010004 	li	at,4
800268a8:	a3a10045 	sb	at,69(sp)
800268ac:	93a60045 	lbu	a2,69(sp)
800268b0:	0c0091aa 	jal	800246a8 <_ZN4core4sync6atomic11AtomicUsize5store17heacd8522e5ea3cb1E>
800268b4:	00000000 	nop
800268b8:	8fa40018 	lw	a0,24(sp)
                return self.force_get();
800268bc:	0c009f76 	jal	80027dd8 <_ZN4spin4once13Once$LT$T$GT$9force_get17hed6df867d1170511E>
800268c0:	00000000 	nop
800268c4:	afa2001c 	sw	v0,28(sp)
800268c8:	27a40028 	addiu	a0,sp,40
            }
800268cc:	0c00896a 	jal	800225a8 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1151b3261df242b0E>
800268d0:	00000000 	nop
800268d4:	08009a58 	j	80026960 <_ZN4spin4once13Once$LT$T$GT$9call_once17h583ef0b10887ad4aE+0x1f0>
800268d8:	00000000 	nop
                _ => unsafe { unreachable() },
800268dc:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
800268e0:	00000000 	nop
                INCOMPLETE => unreachable!(),
800268e4:	3c018105 	lui	at,0x8105
800268e8:	2424ecf4 	addiu	a0,at,-4876
800268ec:	3c018105 	lui	at,0x8105
800268f0:	2426ed70 	addiu	a2,at,-4752
800268f4:	24050028 	li	a1,40
800268f8:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
800268fc:	00000000 	nop
                    cpu_relax();
80026900:	0c0091b6 	jal	800246d8 <_ZN4core4sync6atomic14spin_loop_hint17h56596ec2462f6e38E>
80026904:	00000000 	nop
80026908:	8fa40018 	lw	a0,24(sp)
8002690c:	24010004 	li	at,4
                    status = self.state.load(Ordering::SeqCst)
80026910:	a3a10046 	sb	at,70(sp)
80026914:	93a50046 	lbu	a1,70(sp)
80026918:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
8002691c:	00000000 	nop
80026920:	afa20020 	sw	v0,32(sp)
80026924:	080099ef 	j	800267bc <_ZN4spin4once13Once$LT$T$GT$9call_once17h583ef0b10887ad4aE+0x4c>
80026928:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
8002692c:	3c018105 	lui	at,0x8105
80026930:	2424ed80 	addiu	a0,at,-4736
80026934:	3c018105 	lui	at,0x8105
80026938:	2426ed94 	addiu	a2,at,-4716
8002693c:	24050011 	li	a1,17
80026940:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80026944:	00000000 	nop
                COMPLETE => return self.force_get(),
80026948:	8fa40018 	lw	a0,24(sp)
8002694c:	0c009f76 	jal	80027dd8 <_ZN4spin4once13Once$LT$T$GT$9force_get17hed6df867d1170511E>
80026950:	00000000 	nop
80026954:	afa2001c 	sw	v0,28(sp)
80026958:	08009a58 	j	80026960 <_ZN4spin4once13Once$LT$T$GT$9call_once17h583ef0b10887ad4aE+0x1f0>
8002695c:	00000000 	nop
    }
80026960:	93a10047 	lbu	at,71(sp)
80026964:	30210001 	andi	at,at,0x1
80026968:	14200008 	bnez	at,8002698c <_ZN4spin4once13Once$LT$T$GT$9call_once17h583ef0b10887ad4aE+0x21c>
8002696c:	00000000 	nop
80026970:	08009a5e 	j	80026978 <_ZN4spin4once13Once$LT$T$GT$9call_once17h583ef0b10887ad4aE+0x208>
80026974:	00000000 	nop
80026978:	8fa2001c 	lw	v0,28(sp)
8002697c:	8fbf0054 	lw	ra,84(sp)
80026980:	27bd0058 	addiu	sp,sp,88
80026984:	03e00008 	jr	ra
80026988:	00000000 	nop
8002698c:	08009a5e 	j	80026978 <_ZN4spin4once13Once$LT$T$GT$9call_once17h583ef0b10887ad4aE+0x208>
80026990:	00000000 	nop

80026994 <_ZN4spin4once13Once$LT$T$GT$9call_once17h75fe320c5850c55aE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80026994:	27bdffa8 	addiu	sp,sp,-88
80026998:	afbf0054 	sw	ra,84(sp)
8002699c:	afa40018 	sw	a0,24(sp)
800269a0:	afa40048 	sw	a0,72(sp)
800269a4:	24010000 	li	at,0
        loop {
800269a8:	a3a00047 	sb	zero,71(sp)
800269ac:	24010001 	li	at,1
800269b0:	a3a10047 	sb	at,71(sp)
800269b4:	24010004 	li	at,4
        let mut status = self.state.load(Ordering::SeqCst);
800269b8:	a3a10026 	sb	at,38(sp)
800269bc:	93a50026 	lbu	a1,38(sp)
800269c0:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
800269c4:	00000000 	nop
800269c8:	afa20020 	sw	v0,32(sp)
        if status == INCOMPLETE {
800269cc:	8fa10020 	lw	at,32(sp)
800269d0:	1020000f 	beqz	at,80026a10 <_ZN4spin4once13Once$LT$T$GT$9call_once17h75fe320c5850c55aE+0x7c>
800269d4:	00000000 	nop
800269d8:	08009a78 	j	800269e0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h75fe320c5850c55aE+0x4c>
800269dc:	00000000 	nop
            match status {
800269e0:	8fa10020 	lw	at,32(sp)
800269e4:	afa10014 	sw	at,20(sp)
800269e8:	2c210004 	sltiu	at,at,4
800269ec:	10200041 	beqz	at,80026af4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h75fe320c5850c55aE+0x160>
800269f0:	00000000 	nop
800269f4:	8fa10014 	lw	at,20(sp)
800269f8:	00010880 	sll	at,at,0x2
800269fc:	3c028105 	lui	v0,0x8105
80026a00:	00220821 	addu	at,at,v0
80026a04:	8c21e068 	lw	at,-8088(at)
80026a08:	00200008 	jr	at
80026a0c:	00000000 	nop
80026a10:	8fa40018 	lw	a0,24(sp)
80026a14:	24010004 	li	at,4
                                                 Ordering::SeqCst);
80026a18:	a3a10027 	sb	at,39(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
80026a1c:	93a70027 	lbu	a3,39(sp)
80026a20:	24050000 	li	a1,0
80026a24:	24060001 	li	a2,1
80026a28:	0c009162 	jal	80024588 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE>
80026a2c:	00000000 	nop
80026a30:	afa20020 	sw	v0,32(sp)
            if status == INCOMPLETE { // We init
80026a34:	8fa10020 	lw	at,32(sp)
80026a38:	1420ffe9 	bnez	at,800269e0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h75fe320c5850c55aE+0x4c>
80026a3c:	00000000 	nop
80026a40:	08009a92 	j	80026a48 <_ZN4spin4once13Once$LT$T$GT$9call_once17h75fe320c5850c55aE+0xb4>
80026a44:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
80026a48:	8fa10018 	lw	at,24(sp)
80026a4c:	afa10028 	sw	at,40(sp)
80026a50:	24010001 	li	at,1
80026a54:	afa10010 	sw	at,16(sp)
80026a58:	a3a1002c 	sb	at,44(sp)
80026a5c:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
80026a60:	a3a00047 	sb	zero,71(sp)
80026a64:	27a4003c 	addiu	a0,sp,60
80026a68:	0c0085dc 	jal	80021770 <_ZN4core3ops8function6FnOnce9call_once17h40c79c36e78574d3E>
80026a6c:	00000000 	nop
80026a70:	8fa10010 	lw	at,16(sp)
80026a74:	8fa40018 	lw	a0,24(sp)
80026a78:	8fa20040 	lw	v0,64(sp)
80026a7c:	afa20038 	sw	v0,56(sp)
80026a80:	8fa2003c 	lw	v0,60(sp)
80026a84:	afa20034 	sw	v0,52(sp)
80026a88:	afa10030 	sw	at,48(sp)
80026a8c:	24810004 	addiu	at,a0,4
80026a90:	afa10050 	sw	at,80(sp)
80026a94:	8fa10038 	lw	at,56(sp)
80026a98:	ac81000c 	sw	at,12(a0)
80026a9c:	8fa10034 	lw	at,52(sp)
80026aa0:	ac810008 	sw	at,8(a0)
80026aa4:	8fa10030 	lw	at,48(sp)
80026aa8:	ac810004 	sw	at,4(a0)
                finish.panicked = false;
80026aac:	a3a0002c 	sb	zero,44(sp)
80026ab0:	24010002 	li	at,2
                status = COMPLETE;
80026ab4:	afa10020 	sw	at,32(sp)
                self.state.store(status, Ordering::SeqCst);
80026ab8:	8fa50020 	lw	a1,32(sp)
80026abc:	24010004 	li	at,4
80026ac0:	a3a10045 	sb	at,69(sp)
80026ac4:	93a60045 	lbu	a2,69(sp)
80026ac8:	0c0091aa 	jal	800246a8 <_ZN4core4sync6atomic11AtomicUsize5store17heacd8522e5ea3cb1E>
80026acc:	00000000 	nop
80026ad0:	8fa40018 	lw	a0,24(sp)
                return self.force_get();
80026ad4:	0c009ed0 	jal	80027b40 <_ZN4spin4once13Once$LT$T$GT$9force_get17h07b07a2a16fa23a8E>
80026ad8:	00000000 	nop
80026adc:	afa2001c 	sw	v0,28(sp)
80026ae0:	27a40028 	addiu	a0,sp,40
            }
80026ae4:	0c00896a 	jal	800225a8 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1151b3261df242b0E>
80026ae8:	00000000 	nop
80026aec:	08009ade 	j	80026b78 <_ZN4spin4once13Once$LT$T$GT$9call_once17h75fe320c5850c55aE+0x1e4>
80026af0:	00000000 	nop
                _ => unsafe { unreachable() },
80026af4:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
80026af8:	00000000 	nop
                INCOMPLETE => unreachable!(),
80026afc:	3c018105 	lui	at,0x8105
80026b00:	2424ecf4 	addiu	a0,at,-4876
80026b04:	3c018105 	lui	at,0x8105
80026b08:	2426ed70 	addiu	a2,at,-4752
80026b0c:	24050028 	li	a1,40
80026b10:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80026b14:	00000000 	nop
                    cpu_relax();
80026b18:	0c0091b6 	jal	800246d8 <_ZN4core4sync6atomic14spin_loop_hint17h56596ec2462f6e38E>
80026b1c:	00000000 	nop
80026b20:	8fa40018 	lw	a0,24(sp)
80026b24:	24010004 	li	at,4
                    status = self.state.load(Ordering::SeqCst)
80026b28:	a3a10046 	sb	at,70(sp)
80026b2c:	93a50046 	lbu	a1,70(sp)
80026b30:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
80026b34:	00000000 	nop
80026b38:	afa20020 	sw	v0,32(sp)
80026b3c:	08009a78 	j	800269e0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h75fe320c5850c55aE+0x4c>
80026b40:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
80026b44:	3c018105 	lui	at,0x8105
80026b48:	2424ed80 	addiu	a0,at,-4736
80026b4c:	3c018105 	lui	at,0x8105
80026b50:	2426ed94 	addiu	a2,at,-4716
80026b54:	24050011 	li	a1,17
80026b58:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80026b5c:	00000000 	nop
                COMPLETE => return self.force_get(),
80026b60:	8fa40018 	lw	a0,24(sp)
80026b64:	0c009ed0 	jal	80027b40 <_ZN4spin4once13Once$LT$T$GT$9force_get17h07b07a2a16fa23a8E>
80026b68:	00000000 	nop
80026b6c:	afa2001c 	sw	v0,28(sp)
80026b70:	08009ade 	j	80026b78 <_ZN4spin4once13Once$LT$T$GT$9call_once17h75fe320c5850c55aE+0x1e4>
80026b74:	00000000 	nop
    }
80026b78:	93a10047 	lbu	at,71(sp)
80026b7c:	30210001 	andi	at,at,0x1
80026b80:	14200008 	bnez	at,80026ba4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h75fe320c5850c55aE+0x210>
80026b84:	00000000 	nop
80026b88:	08009ae4 	j	80026b90 <_ZN4spin4once13Once$LT$T$GT$9call_once17h75fe320c5850c55aE+0x1fc>
80026b8c:	00000000 	nop
80026b90:	8fa2001c 	lw	v0,28(sp)
80026b94:	8fbf0054 	lw	ra,84(sp)
80026b98:	27bd0058 	addiu	sp,sp,88
80026b9c:	03e00008 	jr	ra
80026ba0:	00000000 	nop
80026ba4:	08009ae4 	j	80026b90 <_ZN4spin4once13Once$LT$T$GT$9call_once17h75fe320c5850c55aE+0x1fc>
80026ba8:	00000000 	nop

80026bac <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c511ddc7e3af3d6E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80026bac:	27bdff98 	addiu	sp,sp,-104
80026bb0:	afbf0064 	sw	ra,100(sp)
80026bb4:	afa40020 	sw	a0,32(sp)
80026bb8:	afa40058 	sw	a0,88(sp)
80026bbc:	24010000 	li	at,0
        loop {
80026bc0:	a3a00057 	sb	zero,87(sp)
80026bc4:	24010001 	li	at,1
80026bc8:	a3a10057 	sb	at,87(sp)
        let mut status = self.state.load(Ordering::SeqCst);
80026bcc:	24840010 	addiu	a0,a0,16
80026bd0:	24010004 	li	at,4
80026bd4:	a3a1002e 	sb	at,46(sp)
80026bd8:	93a5002e 	lbu	a1,46(sp)
80026bdc:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
80026be0:	00000000 	nop
80026be4:	afa20028 	sw	v0,40(sp)
        if status == INCOMPLETE {
80026be8:	8fa10028 	lw	at,40(sp)
80026bec:	1020000f 	beqz	at,80026c2c <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c511ddc7e3af3d6E+0x80>
80026bf0:	00000000 	nop
80026bf4:	08009aff 	j	80026bfc <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c511ddc7e3af3d6E+0x50>
80026bf8:	00000000 	nop
            match status {
80026bfc:	8fa10028 	lw	at,40(sp)
80026c00:	afa1001c 	sw	at,28(sp)
80026c04:	2c210004 	sltiu	at,at,4
80026c08:	1020004b 	beqz	at,80026d38 <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c511ddc7e3af3d6E+0x18c>
80026c0c:	00000000 	nop
80026c10:	8fa1001c 	lw	at,28(sp)
80026c14:	00010880 	sll	at,at,0x2
80026c18:	3c028105 	lui	v0,0x8105
80026c1c:	00220821 	addu	at,at,v0
80026c20:	8c21e078 	lw	at,-8072(at)
80026c24:	00200008 	jr	at
80026c28:	00000000 	nop
            status = self.state.compare_and_swap(INCOMPLETE,
80026c2c:	8fa10020 	lw	at,32(sp)
80026c30:	24240010 	addiu	a0,at,16
80026c34:	24010004 	li	at,4
                                                 Ordering::SeqCst);
80026c38:	a3a1002f 	sb	at,47(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
80026c3c:	93a7002f 	lbu	a3,47(sp)
80026c40:	24050000 	li	a1,0
80026c44:	24060001 	li	a2,1
80026c48:	0c009162 	jal	80024588 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE>
80026c4c:	00000000 	nop
80026c50:	afa20028 	sw	v0,40(sp)
            if status == INCOMPLETE { // We init
80026c54:	8fa10028 	lw	at,40(sp)
80026c58:	1420ffe8 	bnez	at,80026bfc <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c511ddc7e3af3d6E+0x50>
80026c5c:	00000000 	nop
80026c60:	08009b1a 	j	80026c68 <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c511ddc7e3af3d6E+0xbc>
80026c64:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
80026c68:	8fa10020 	lw	at,32(sp)
80026c6c:	24210010 	addiu	at,at,16
80026c70:	afa10018 	sw	at,24(sp)
80026c74:	afa10030 	sw	at,48(sp)
80026c78:	24010001 	li	at,1
80026c7c:	afa10014 	sw	at,20(sp)
80026c80:	a3a10034 	sb	at,52(sp)
80026c84:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
80026c88:	a3a00057 	sb	zero,87(sp)
80026c8c:	27a40048 	addiu	a0,sp,72
80026c90:	0c0085cc 	jal	80021730 <_ZN4core3ops8function6FnOnce9call_once17h27a337e0a823b448E>
80026c94:	00000000 	nop
80026c98:	8fa10014 	lw	at,20(sp)
80026c9c:	8fa40020 	lw	a0,32(sp)
80026ca0:	8fa20050 	lw	v0,80(sp)
80026ca4:	afa20044 	sw	v0,68(sp)
80026ca8:	8fa2004c 	lw	v0,76(sp)
80026cac:	afa20040 	sw	v0,64(sp)
80026cb0:	8fa20048 	lw	v0,72(sp)
80026cb4:	afa2003c 	sw	v0,60(sp)
80026cb8:	afa10038 	sw	at,56(sp)
80026cbc:	afa40060 	sw	a0,96(sp)
80026cc0:	0c0086de 	jal	80021b78 <_ZN4core3ptr109drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$$GT$17hf234cea20df3b98dE>
80026cc4:	00000000 	nop
80026cc8:	8fa40018 	lw	a0,24(sp)
80026ccc:	8fa20020 	lw	v0,32(sp)
80026cd0:	8fa10044 	lw	at,68(sp)
80026cd4:	ac41000c 	sw	at,12(v0)
80026cd8:	8fa10040 	lw	at,64(sp)
80026cdc:	ac410008 	sw	at,8(v0)
80026ce0:	8fa1003c 	lw	at,60(sp)
80026ce4:	ac410004 	sw	at,4(v0)
80026ce8:	8fa10038 	lw	at,56(sp)
80026cec:	ac410000 	sw	at,0(v0)
                finish.panicked = false;
80026cf0:	a3a00034 	sb	zero,52(sp)
80026cf4:	24010002 	li	at,2
                status = COMPLETE;
80026cf8:	afa10028 	sw	at,40(sp)
                self.state.store(status, Ordering::SeqCst);
80026cfc:	8fa50028 	lw	a1,40(sp)
80026d00:	24010004 	li	at,4
80026d04:	a3a10055 	sb	at,85(sp)
80026d08:	93a60055 	lbu	a2,85(sp)
80026d0c:	0c0091aa 	jal	800246a8 <_ZN4core4sync6atomic11AtomicUsize5store17heacd8522e5ea3cb1E>
80026d10:	00000000 	nop
80026d14:	8fa40020 	lw	a0,32(sp)
                return self.force_get();
80026d18:	0c009ee5 	jal	80027b94 <_ZN4spin4once13Once$LT$T$GT$9force_get17h45feb14326e5514eE>
80026d1c:	00000000 	nop
80026d20:	afa20024 	sw	v0,36(sp)
80026d24:	27a40030 	addiu	a0,sp,48
            }
80026d28:	0c00896a 	jal	800225a8 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1151b3261df242b0E>
80026d2c:	00000000 	nop
80026d30:	08009b70 	j	80026dc0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c511ddc7e3af3d6E+0x214>
80026d34:	00000000 	nop
                _ => unsafe { unreachable() },
80026d38:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
80026d3c:	00000000 	nop
                INCOMPLETE => unreachable!(),
80026d40:	3c018105 	lui	at,0x8105
80026d44:	2424ecf4 	addiu	a0,at,-4876
80026d48:	3c018105 	lui	at,0x8105
80026d4c:	2426ed70 	addiu	a2,at,-4752
80026d50:	24050028 	li	a1,40
80026d54:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80026d58:	00000000 	nop
                    cpu_relax();
80026d5c:	0c0091b6 	jal	800246d8 <_ZN4core4sync6atomic14spin_loop_hint17h56596ec2462f6e38E>
80026d60:	00000000 	nop
80026d64:	8fa10020 	lw	at,32(sp)
                    status = self.state.load(Ordering::SeqCst)
80026d68:	24240010 	addiu	a0,at,16
80026d6c:	24010004 	li	at,4
80026d70:	a3a10056 	sb	at,86(sp)
80026d74:	93a50056 	lbu	a1,86(sp)
80026d78:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
80026d7c:	00000000 	nop
80026d80:	afa20028 	sw	v0,40(sp)
80026d84:	08009aff 	j	80026bfc <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c511ddc7e3af3d6E+0x50>
80026d88:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
80026d8c:	3c018105 	lui	at,0x8105
80026d90:	2424ed80 	addiu	a0,at,-4736
80026d94:	3c018105 	lui	at,0x8105
80026d98:	2426ed94 	addiu	a2,at,-4716
80026d9c:	24050011 	li	a1,17
80026da0:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80026da4:	00000000 	nop
                COMPLETE => return self.force_get(),
80026da8:	8fa40020 	lw	a0,32(sp)
80026dac:	0c009ee5 	jal	80027b94 <_ZN4spin4once13Once$LT$T$GT$9force_get17h45feb14326e5514eE>
80026db0:	00000000 	nop
80026db4:	afa20024 	sw	v0,36(sp)
80026db8:	08009b70 	j	80026dc0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c511ddc7e3af3d6E+0x214>
80026dbc:	00000000 	nop
    }
80026dc0:	93a10057 	lbu	at,87(sp)
80026dc4:	30210001 	andi	at,at,0x1
80026dc8:	14200008 	bnez	at,80026dec <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c511ddc7e3af3d6E+0x240>
80026dcc:	00000000 	nop
80026dd0:	08009b76 	j	80026dd8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c511ddc7e3af3d6E+0x22c>
80026dd4:	00000000 	nop
80026dd8:	8fa20024 	lw	v0,36(sp)
80026ddc:	8fbf0064 	lw	ra,100(sp)
80026de0:	27bd0068 	addiu	sp,sp,104
80026de4:	03e00008 	jr	ra
80026de8:	00000000 	nop
80026dec:	08009b76 	j	80026dd8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c511ddc7e3af3d6E+0x22c>
80026df0:	00000000 	nop

80026df4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9619ea8b91702cb4E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80026df4:	27bdff98 	addiu	sp,sp,-104
80026df8:	afbf0064 	sw	ra,100(sp)
80026dfc:	afa40020 	sw	a0,32(sp)
80026e00:	afa40058 	sw	a0,88(sp)
80026e04:	24010000 	li	at,0
        loop {
80026e08:	a3a00057 	sb	zero,87(sp)
80026e0c:	24010001 	li	at,1
80026e10:	a3a10057 	sb	at,87(sp)
        let mut status = self.state.load(Ordering::SeqCst);
80026e14:	24840010 	addiu	a0,a0,16
80026e18:	24010004 	li	at,4
80026e1c:	a3a1002e 	sb	at,46(sp)
80026e20:	93a5002e 	lbu	a1,46(sp)
80026e24:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
80026e28:	00000000 	nop
80026e2c:	afa20028 	sw	v0,40(sp)
        if status == INCOMPLETE {
80026e30:	8fa10028 	lw	at,40(sp)
80026e34:	1020000f 	beqz	at,80026e74 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9619ea8b91702cb4E+0x80>
80026e38:	00000000 	nop
80026e3c:	08009b91 	j	80026e44 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9619ea8b91702cb4E+0x50>
80026e40:	00000000 	nop
            match status {
80026e44:	8fa10028 	lw	at,40(sp)
80026e48:	afa1001c 	sw	at,28(sp)
80026e4c:	2c210004 	sltiu	at,at,4
80026e50:	10200048 	beqz	at,80026f74 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9619ea8b91702cb4E+0x180>
80026e54:	00000000 	nop
80026e58:	8fa1001c 	lw	at,28(sp)
80026e5c:	00010880 	sll	at,at,0x2
80026e60:	3c028105 	lui	v0,0x8105
80026e64:	00220821 	addu	at,at,v0
80026e68:	8c21e088 	lw	at,-8056(at)
80026e6c:	00200008 	jr	at
80026e70:	00000000 	nop
            status = self.state.compare_and_swap(INCOMPLETE,
80026e74:	8fa10020 	lw	at,32(sp)
80026e78:	24240010 	addiu	a0,at,16
80026e7c:	24010004 	li	at,4
                                                 Ordering::SeqCst);
80026e80:	a3a1002f 	sb	at,47(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
80026e84:	93a7002f 	lbu	a3,47(sp)
80026e88:	24050000 	li	a1,0
80026e8c:	24060001 	li	a2,1
80026e90:	0c009162 	jal	80024588 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE>
80026e94:	00000000 	nop
80026e98:	afa20028 	sw	v0,40(sp)
            if status == INCOMPLETE { // We init
80026e9c:	8fa10028 	lw	at,40(sp)
80026ea0:	1420ffe8 	bnez	at,80026e44 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9619ea8b91702cb4E+0x50>
80026ea4:	00000000 	nop
80026ea8:	08009bac 	j	80026eb0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9619ea8b91702cb4E+0xbc>
80026eac:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
80026eb0:	8fa10020 	lw	at,32(sp)
80026eb4:	24210010 	addiu	at,at,16
80026eb8:	afa10018 	sw	at,24(sp)
80026ebc:	afa10030 	sw	at,48(sp)
80026ec0:	24010001 	li	at,1
80026ec4:	afa10014 	sw	at,20(sp)
80026ec8:	a3a10034 	sb	at,52(sp)
80026ecc:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
80026ed0:	a3a00057 	sb	zero,87(sp)
80026ed4:	27a40048 	addiu	a0,sp,72
80026ed8:	0c0085f9 	jal	800217e4 <_ZN4core3ops8function6FnOnce9call_once17h5abed36604560700E>
80026edc:	00000000 	nop
80026ee0:	8fa10014 	lw	at,20(sp)
80026ee4:	8fa40018 	lw	a0,24(sp)
80026ee8:	8fa20020 	lw	v0,32(sp)
80026eec:	8fa30050 	lw	v1,80(sp)
80026ef0:	afa30044 	sw	v1,68(sp)
80026ef4:	8fa3004c 	lw	v1,76(sp)
80026ef8:	afa30040 	sw	v1,64(sp)
80026efc:	8fa30048 	lw	v1,72(sp)
80026f00:	afa3003c 	sw	v1,60(sp)
80026f04:	afa10038 	sw	at,56(sp)
80026f08:	afa20060 	sw	v0,96(sp)
80026f0c:	8fa10044 	lw	at,68(sp)
80026f10:	ac41000c 	sw	at,12(v0)
80026f14:	8fa10040 	lw	at,64(sp)
80026f18:	ac410008 	sw	at,8(v0)
80026f1c:	8fa1003c 	lw	at,60(sp)
80026f20:	ac410004 	sw	at,4(v0)
80026f24:	8fa10038 	lw	at,56(sp)
80026f28:	ac410000 	sw	at,0(v0)
                finish.panicked = false;
80026f2c:	a3a00034 	sb	zero,52(sp)
80026f30:	24010002 	li	at,2
                status = COMPLETE;
80026f34:	afa10028 	sw	at,40(sp)
                self.state.store(status, Ordering::SeqCst);
80026f38:	8fa50028 	lw	a1,40(sp)
80026f3c:	24010004 	li	at,4
80026f40:	a3a10055 	sb	at,85(sp)
80026f44:	93a60055 	lbu	a2,85(sp)
80026f48:	0c0091aa 	jal	800246a8 <_ZN4core4sync6atomic11AtomicUsize5store17heacd8522e5ea3cb1E>
80026f4c:	00000000 	nop
80026f50:	8fa40020 	lw	a0,32(sp)
                return self.force_get();
80026f54:	0c009f62 	jal	80027d88 <_ZN4spin4once13Once$LT$T$GT$9force_get17hab9e064ffb0c1835E>
80026f58:	00000000 	nop
80026f5c:	afa20024 	sw	v0,36(sp)
80026f60:	27a40030 	addiu	a0,sp,48
            }
80026f64:	0c00896a 	jal	800225a8 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1151b3261df242b0E>
80026f68:	00000000 	nop
80026f6c:	08009bff 	j	80026ffc <_ZN4spin4once13Once$LT$T$GT$9call_once17h9619ea8b91702cb4E+0x208>
80026f70:	00000000 	nop
                _ => unsafe { unreachable() },
80026f74:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
80026f78:	00000000 	nop
                INCOMPLETE => unreachable!(),
80026f7c:	3c018105 	lui	at,0x8105
80026f80:	2424ecf4 	addiu	a0,at,-4876
80026f84:	3c018105 	lui	at,0x8105
80026f88:	2426ed70 	addiu	a2,at,-4752
80026f8c:	24050028 	li	a1,40
80026f90:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80026f94:	00000000 	nop
                    cpu_relax();
80026f98:	0c0091b6 	jal	800246d8 <_ZN4core4sync6atomic14spin_loop_hint17h56596ec2462f6e38E>
80026f9c:	00000000 	nop
80026fa0:	8fa10020 	lw	at,32(sp)
                    status = self.state.load(Ordering::SeqCst)
80026fa4:	24240010 	addiu	a0,at,16
80026fa8:	24010004 	li	at,4
80026fac:	a3a10056 	sb	at,86(sp)
80026fb0:	93a50056 	lbu	a1,86(sp)
80026fb4:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
80026fb8:	00000000 	nop
80026fbc:	afa20028 	sw	v0,40(sp)
80026fc0:	08009b91 	j	80026e44 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9619ea8b91702cb4E+0x50>
80026fc4:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
80026fc8:	3c018105 	lui	at,0x8105
80026fcc:	2424ed80 	addiu	a0,at,-4736
80026fd0:	3c018105 	lui	at,0x8105
80026fd4:	2426ed94 	addiu	a2,at,-4716
80026fd8:	24050011 	li	a1,17
80026fdc:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80026fe0:	00000000 	nop
                COMPLETE => return self.force_get(),
80026fe4:	8fa40020 	lw	a0,32(sp)
80026fe8:	0c009f62 	jal	80027d88 <_ZN4spin4once13Once$LT$T$GT$9force_get17hab9e064ffb0c1835E>
80026fec:	00000000 	nop
80026ff0:	afa20024 	sw	v0,36(sp)
80026ff4:	08009bff 	j	80026ffc <_ZN4spin4once13Once$LT$T$GT$9call_once17h9619ea8b91702cb4E+0x208>
80026ff8:	00000000 	nop
    }
80026ffc:	93a10057 	lbu	at,87(sp)
80027000:	30210001 	andi	at,at,0x1
80027004:	14200008 	bnez	at,80027028 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9619ea8b91702cb4E+0x234>
80027008:	00000000 	nop
8002700c:	08009c05 	j	80027014 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9619ea8b91702cb4E+0x220>
80027010:	00000000 	nop
80027014:	8fa20024 	lw	v0,36(sp)
80027018:	8fbf0064 	lw	ra,100(sp)
8002701c:	27bd0068 	addiu	sp,sp,104
80027020:	03e00008 	jr	ra
80027024:	00000000 	nop
80027028:	08009c05 	j	80027014 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9619ea8b91702cb4E+0x220>
8002702c:	00000000 	nop

80027030 <_ZN4spin4once13Once$LT$T$GT$9call_once17haa234e89728fd629E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80027030:	27bdff98 	addiu	sp,sp,-104
80027034:	afbf0064 	sw	ra,100(sp)
80027038:	afa40018 	sw	a0,24(sp)
8002703c:	afa40058 	sw	a0,88(sp)
80027040:	24010000 	li	at,0
        loop {
80027044:	a3a00057 	sb	zero,87(sp)
80027048:	24010001 	li	at,1
8002704c:	a3a10057 	sb	at,87(sp)
80027050:	24010004 	li	at,4
        let mut status = self.state.load(Ordering::SeqCst);
80027054:	a3a10026 	sb	at,38(sp)
80027058:	93a50026 	lbu	a1,38(sp)
8002705c:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
80027060:	00000000 	nop
80027064:	afa20020 	sw	v0,32(sp)
        if status == INCOMPLETE {
80027068:	8fa10020 	lw	at,32(sp)
8002706c:	1020000f 	beqz	at,800270ac <_ZN4spin4once13Once$LT$T$GT$9call_once17haa234e89728fd629E+0x7c>
80027070:	00000000 	nop
80027074:	08009c1f 	j	8002707c <_ZN4spin4once13Once$LT$T$GT$9call_once17haa234e89728fd629E+0x4c>
80027078:	00000000 	nop
            match status {
8002707c:	8fa10020 	lw	at,32(sp)
80027080:	afa10014 	sw	at,20(sp)
80027084:	2c210004 	sltiu	at,at,4
80027088:	1020004c 	beqz	at,800271bc <_ZN4spin4once13Once$LT$T$GT$9call_once17haa234e89728fd629E+0x18c>
8002708c:	00000000 	nop
80027090:	8fa10014 	lw	at,20(sp)
80027094:	00010880 	sll	at,at,0x2
80027098:	3c028105 	lui	v0,0x8105
8002709c:	00220821 	addu	at,at,v0
800270a0:	8c21e098 	lw	at,-8040(at)
800270a4:	00200008 	jr	at
800270a8:	00000000 	nop
800270ac:	8fa40018 	lw	a0,24(sp)
800270b0:	24010004 	li	at,4
                                                 Ordering::SeqCst);
800270b4:	a3a10027 	sb	at,39(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
800270b8:	93a70027 	lbu	a3,39(sp)
800270bc:	24050000 	li	a1,0
800270c0:	24060001 	li	a2,1
800270c4:	0c009162 	jal	80024588 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE>
800270c8:	00000000 	nop
800270cc:	afa20020 	sw	v0,32(sp)
            if status == INCOMPLETE { // We init
800270d0:	8fa10020 	lw	at,32(sp)
800270d4:	1420ffe9 	bnez	at,8002707c <_ZN4spin4once13Once$LT$T$GT$9call_once17haa234e89728fd629E+0x4c>
800270d8:	00000000 	nop
800270dc:	08009c39 	j	800270e4 <_ZN4spin4once13Once$LT$T$GT$9call_once17haa234e89728fd629E+0xb4>
800270e0:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
800270e4:	8fa10018 	lw	at,24(sp)
800270e8:	afa10028 	sw	at,40(sp)
800270ec:	24010001 	li	at,1
800270f0:	afa10010 	sw	at,16(sp)
800270f4:	a3a1002c 	sb	at,44(sp)
800270f8:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
800270fc:	a3a00057 	sb	zero,87(sp)
80027100:	27a40044 	addiu	a0,sp,68
80027104:	0c008630 	jal	800218c0 <_ZN4core3ops8function6FnOnce9call_once17h88430c379661bd7bE>
80027108:	00000000 	nop
8002710c:	8fa20010 	lw	v0,16(sp)
80027110:	8fa10018 	lw	at,24(sp)
80027114:	8fa30050 	lw	v1,80(sp)
80027118:	afa30040 	sw	v1,64(sp)
8002711c:	8fa3004c 	lw	v1,76(sp)
80027120:	afa3003c 	sw	v1,60(sp)
80027124:	8fa30048 	lw	v1,72(sp)
80027128:	afa30038 	sw	v1,56(sp)
8002712c:	8fa30044 	lw	v1,68(sp)
80027130:	afa30034 	sw	v1,52(sp)
80027134:	afa20030 	sw	v0,48(sp)
80027138:	24240004 	addiu	a0,at,4
8002713c:	afa40060 	sw	a0,96(sp)
80027140:	0c0086fa 	jal	80021be8 <_ZN4core3ptr119drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$$GT$17he02a00022a1e7e34E>
80027144:	00000000 	nop
80027148:	8fa40018 	lw	a0,24(sp)
8002714c:	8fa10040 	lw	at,64(sp)
80027150:	ac810014 	sw	at,20(a0)
80027154:	8fa1003c 	lw	at,60(sp)
80027158:	ac810010 	sw	at,16(a0)
8002715c:	8fa10038 	lw	at,56(sp)
80027160:	ac81000c 	sw	at,12(a0)
80027164:	8fa10034 	lw	at,52(sp)
80027168:	ac810008 	sw	at,8(a0)
8002716c:	8fa10030 	lw	at,48(sp)
80027170:	ac810004 	sw	at,4(a0)
                finish.panicked = false;
80027174:	a3a0002c 	sb	zero,44(sp)
80027178:	24010002 	li	at,2
                status = COMPLETE;
8002717c:	afa10020 	sw	at,32(sp)
                self.state.store(status, Ordering::SeqCst);
80027180:	8fa50020 	lw	a1,32(sp)
80027184:	24010004 	li	at,4
80027188:	a3a10055 	sb	at,85(sp)
8002718c:	93a60055 	lbu	a2,85(sp)
80027190:	0c0091aa 	jal	800246a8 <_ZN4core4sync6atomic11AtomicUsize5store17heacd8522e5ea3cb1E>
80027194:	00000000 	nop
80027198:	8fa40018 	lw	a0,24(sp)
                return self.force_get();
8002719c:	0c009f0e 	jal	80027c38 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f97986ec55da604E>
800271a0:	00000000 	nop
800271a4:	afa2001c 	sw	v0,28(sp)
800271a8:	27a40028 	addiu	a0,sp,40
            }
800271ac:	0c00896a 	jal	800225a8 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1151b3261df242b0E>
800271b0:	00000000 	nop
800271b4:	08009c90 	j	80027240 <_ZN4spin4once13Once$LT$T$GT$9call_once17haa234e89728fd629E+0x210>
800271b8:	00000000 	nop
                _ => unsafe { unreachable() },
800271bc:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
800271c0:	00000000 	nop
                INCOMPLETE => unreachable!(),
800271c4:	3c018105 	lui	at,0x8105
800271c8:	2424ecf4 	addiu	a0,at,-4876
800271cc:	3c018105 	lui	at,0x8105
800271d0:	2426ed70 	addiu	a2,at,-4752
800271d4:	24050028 	li	a1,40
800271d8:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
800271dc:	00000000 	nop
                    cpu_relax();
800271e0:	0c0091b6 	jal	800246d8 <_ZN4core4sync6atomic14spin_loop_hint17h56596ec2462f6e38E>
800271e4:	00000000 	nop
800271e8:	8fa40018 	lw	a0,24(sp)
800271ec:	24010004 	li	at,4
                    status = self.state.load(Ordering::SeqCst)
800271f0:	a3a10056 	sb	at,86(sp)
800271f4:	93a50056 	lbu	a1,86(sp)
800271f8:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
800271fc:	00000000 	nop
80027200:	afa20020 	sw	v0,32(sp)
80027204:	08009c1f 	j	8002707c <_ZN4spin4once13Once$LT$T$GT$9call_once17haa234e89728fd629E+0x4c>
80027208:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
8002720c:	3c018105 	lui	at,0x8105
80027210:	2424ed80 	addiu	a0,at,-4736
80027214:	3c018105 	lui	at,0x8105
80027218:	2426ed94 	addiu	a2,at,-4716
8002721c:	24050011 	li	a1,17
80027220:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80027224:	00000000 	nop
                COMPLETE => return self.force_get(),
80027228:	8fa40018 	lw	a0,24(sp)
8002722c:	0c009f0e 	jal	80027c38 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f97986ec55da604E>
80027230:	00000000 	nop
80027234:	afa2001c 	sw	v0,28(sp)
80027238:	08009c90 	j	80027240 <_ZN4spin4once13Once$LT$T$GT$9call_once17haa234e89728fd629E+0x210>
8002723c:	00000000 	nop
    }
80027240:	93a10057 	lbu	at,87(sp)
80027244:	30210001 	andi	at,at,0x1
80027248:	14200008 	bnez	at,8002726c <_ZN4spin4once13Once$LT$T$GT$9call_once17haa234e89728fd629E+0x23c>
8002724c:	00000000 	nop
80027250:	08009c96 	j	80027258 <_ZN4spin4once13Once$LT$T$GT$9call_once17haa234e89728fd629E+0x228>
80027254:	00000000 	nop
80027258:	8fa2001c 	lw	v0,28(sp)
8002725c:	8fbf0064 	lw	ra,100(sp)
80027260:	27bd0068 	addiu	sp,sp,104
80027264:	03e00008 	jr	ra
80027268:	00000000 	nop
8002726c:	08009c96 	j	80027258 <_ZN4spin4once13Once$LT$T$GT$9call_once17haa234e89728fd629E+0x228>
80027270:	00000000 	nop

80027274 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbe9b390bdffbf4ecE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80027274:	27bdffa8 	addiu	sp,sp,-88
80027278:	afbf0054 	sw	ra,84(sp)
8002727c:	afa40018 	sw	a0,24(sp)
80027280:	afa40048 	sw	a0,72(sp)
80027284:	24010000 	li	at,0
        loop {
80027288:	a3a00047 	sb	zero,71(sp)
8002728c:	24010001 	li	at,1
80027290:	a3a10047 	sb	at,71(sp)
80027294:	24010004 	li	at,4
        let mut status = self.state.load(Ordering::SeqCst);
80027298:	a3a10026 	sb	at,38(sp)
8002729c:	93a50026 	lbu	a1,38(sp)
800272a0:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
800272a4:	00000000 	nop
800272a8:	afa20020 	sw	v0,32(sp)
        if status == INCOMPLETE {
800272ac:	8fa10020 	lw	at,32(sp)
800272b0:	1020000f 	beqz	at,800272f0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbe9b390bdffbf4ecE+0x7c>
800272b4:	00000000 	nop
800272b8:	08009cb0 	j	800272c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbe9b390bdffbf4ecE+0x4c>
800272bc:	00000000 	nop
            match status {
800272c0:	8fa10020 	lw	at,32(sp)
800272c4:	afa10014 	sw	at,20(sp)
800272c8:	2c210004 	sltiu	at,at,4
800272cc:	10200041 	beqz	at,800273d4 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbe9b390bdffbf4ecE+0x160>
800272d0:	00000000 	nop
800272d4:	8fa10014 	lw	at,20(sp)
800272d8:	00010880 	sll	at,at,0x2
800272dc:	3c028105 	lui	v0,0x8105
800272e0:	00220821 	addu	at,at,v0
800272e4:	8c21e0a8 	lw	at,-8024(at)
800272e8:	00200008 	jr	at
800272ec:	00000000 	nop
800272f0:	8fa40018 	lw	a0,24(sp)
800272f4:	24010004 	li	at,4
                                                 Ordering::SeqCst);
800272f8:	a3a10027 	sb	at,39(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
800272fc:	93a70027 	lbu	a3,39(sp)
80027300:	24050000 	li	a1,0
80027304:	24060001 	li	a2,1
80027308:	0c009162 	jal	80024588 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE>
8002730c:	00000000 	nop
80027310:	afa20020 	sw	v0,32(sp)
            if status == INCOMPLETE { // We init
80027314:	8fa10020 	lw	at,32(sp)
80027318:	1420ffe9 	bnez	at,800272c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbe9b390bdffbf4ecE+0x4c>
8002731c:	00000000 	nop
80027320:	08009cca 	j	80027328 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbe9b390bdffbf4ecE+0xb4>
80027324:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
80027328:	8fa10018 	lw	at,24(sp)
8002732c:	afa10028 	sw	at,40(sp)
80027330:	24010001 	li	at,1
80027334:	afa10010 	sw	at,16(sp)
80027338:	a3a1002c 	sb	at,44(sp)
8002733c:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
80027340:	a3a00047 	sb	zero,71(sp)
80027344:	27a4003c 	addiu	a0,sp,60
80027348:	0c008642 	jal	80021908 <_ZN4core3ops8function6FnOnce9call_once17h9160c5964e0a8fa7E>
8002734c:	00000000 	nop
80027350:	8fa10010 	lw	at,16(sp)
80027354:	8fa40018 	lw	a0,24(sp)
80027358:	8fa20040 	lw	v0,64(sp)
8002735c:	afa20038 	sw	v0,56(sp)
80027360:	8fa2003c 	lw	v0,60(sp)
80027364:	afa20034 	sw	v0,52(sp)
80027368:	afa10030 	sw	at,48(sp)
8002736c:	24810004 	addiu	at,a0,4
80027370:	afa10050 	sw	at,80(sp)
80027374:	8fa10038 	lw	at,56(sp)
80027378:	ac81000c 	sw	at,12(a0)
8002737c:	8fa10034 	lw	at,52(sp)
80027380:	ac810008 	sw	at,8(a0)
80027384:	8fa10030 	lw	at,48(sp)
80027388:	ac810004 	sw	at,4(a0)
                finish.panicked = false;
8002738c:	a3a0002c 	sb	zero,44(sp)
80027390:	24010002 	li	at,2
                status = COMPLETE;
80027394:	afa10020 	sw	at,32(sp)
                self.state.store(status, Ordering::SeqCst);
80027398:	8fa50020 	lw	a1,32(sp)
8002739c:	24010004 	li	at,4
800273a0:	a3a10045 	sb	at,69(sp)
800273a4:	93a60045 	lbu	a2,69(sp)
800273a8:	0c0091aa 	jal	800246a8 <_ZN4core4sync6atomic11AtomicUsize5store17heacd8522e5ea3cb1E>
800273ac:	00000000 	nop
800273b0:	8fa40018 	lw	a0,24(sp)
                return self.force_get();
800273b4:	0c009ef9 	jal	80027be4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5a8e78403b1eb6cdE>
800273b8:	00000000 	nop
800273bc:	afa2001c 	sw	v0,28(sp)
800273c0:	27a40028 	addiu	a0,sp,40
            }
800273c4:	0c00896a 	jal	800225a8 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1151b3261df242b0E>
800273c8:	00000000 	nop
800273cc:	08009d16 	j	80027458 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbe9b390bdffbf4ecE+0x1e4>
800273d0:	00000000 	nop
                _ => unsafe { unreachable() },
800273d4:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
800273d8:	00000000 	nop
                INCOMPLETE => unreachable!(),
800273dc:	3c018105 	lui	at,0x8105
800273e0:	2424ecf4 	addiu	a0,at,-4876
800273e4:	3c018105 	lui	at,0x8105
800273e8:	2426ed70 	addiu	a2,at,-4752
800273ec:	24050028 	li	a1,40
800273f0:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
800273f4:	00000000 	nop
                    cpu_relax();
800273f8:	0c0091b6 	jal	800246d8 <_ZN4core4sync6atomic14spin_loop_hint17h56596ec2462f6e38E>
800273fc:	00000000 	nop
80027400:	8fa40018 	lw	a0,24(sp)
80027404:	24010004 	li	at,4
                    status = self.state.load(Ordering::SeqCst)
80027408:	a3a10046 	sb	at,70(sp)
8002740c:	93a50046 	lbu	a1,70(sp)
80027410:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
80027414:	00000000 	nop
80027418:	afa20020 	sw	v0,32(sp)
8002741c:	08009cb0 	j	800272c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbe9b390bdffbf4ecE+0x4c>
80027420:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
80027424:	3c018105 	lui	at,0x8105
80027428:	2424ed80 	addiu	a0,at,-4736
8002742c:	3c018105 	lui	at,0x8105
80027430:	2426ed94 	addiu	a2,at,-4716
80027434:	24050011 	li	a1,17
80027438:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
8002743c:	00000000 	nop
                COMPLETE => return self.force_get(),
80027440:	8fa40018 	lw	a0,24(sp)
80027444:	0c009ef9 	jal	80027be4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5a8e78403b1eb6cdE>
80027448:	00000000 	nop
8002744c:	afa2001c 	sw	v0,28(sp)
80027450:	08009d16 	j	80027458 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbe9b390bdffbf4ecE+0x1e4>
80027454:	00000000 	nop
    }
80027458:	93a10047 	lbu	at,71(sp)
8002745c:	30210001 	andi	at,at,0x1
80027460:	14200008 	bnez	at,80027484 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbe9b390bdffbf4ecE+0x210>
80027464:	00000000 	nop
80027468:	08009d1c 	j	80027470 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbe9b390bdffbf4ecE+0x1fc>
8002746c:	00000000 	nop
80027470:	8fa2001c 	lw	v0,28(sp)
80027474:	8fbf0054 	lw	ra,84(sp)
80027478:	27bd0058 	addiu	sp,sp,88
8002747c:	03e00008 	jr	ra
80027480:	00000000 	nop
80027484:	08009d1c 	j	80027470 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbe9b390bdffbf4ecE+0x1fc>
80027488:	00000000 	nop

8002748c <_ZN4spin4once13Once$LT$T$GT$9call_once17hd32804fda2adadf6E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
8002748c:	27bdff98 	addiu	sp,sp,-104
80027490:	afbf0064 	sw	ra,100(sp)
80027494:	afa40020 	sw	a0,32(sp)
80027498:	afa40058 	sw	a0,88(sp)
8002749c:	24010000 	li	at,0
        loop {
800274a0:	a3a00057 	sb	zero,87(sp)
800274a4:	24010001 	li	at,1
800274a8:	a3a10057 	sb	at,87(sp)
        let mut status = self.state.load(Ordering::SeqCst);
800274ac:	24840010 	addiu	a0,a0,16
800274b0:	24010004 	li	at,4
800274b4:	a3a1002e 	sb	at,46(sp)
800274b8:	93a5002e 	lbu	a1,46(sp)
800274bc:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
800274c0:	00000000 	nop
800274c4:	afa20028 	sw	v0,40(sp)
        if status == INCOMPLETE {
800274c8:	8fa10028 	lw	at,40(sp)
800274cc:	1020000f 	beqz	at,8002750c <_ZN4spin4once13Once$LT$T$GT$9call_once17hd32804fda2adadf6E+0x80>
800274d0:	00000000 	nop
800274d4:	08009d37 	j	800274dc <_ZN4spin4once13Once$LT$T$GT$9call_once17hd32804fda2adadf6E+0x50>
800274d8:	00000000 	nop
            match status {
800274dc:	8fa10028 	lw	at,40(sp)
800274e0:	afa1001c 	sw	at,28(sp)
800274e4:	2c210004 	sltiu	at,at,4
800274e8:	1020004b 	beqz	at,80027618 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd32804fda2adadf6E+0x18c>
800274ec:	00000000 	nop
800274f0:	8fa1001c 	lw	at,28(sp)
800274f4:	00010880 	sll	at,at,0x2
800274f8:	3c028105 	lui	v0,0x8105
800274fc:	00220821 	addu	at,at,v0
80027500:	8c21e0b8 	lw	at,-8008(at)
80027504:	00200008 	jr	at
80027508:	00000000 	nop
            status = self.state.compare_and_swap(INCOMPLETE,
8002750c:	8fa10020 	lw	at,32(sp)
80027510:	24240010 	addiu	a0,at,16
80027514:	24010004 	li	at,4
                                                 Ordering::SeqCst);
80027518:	a3a1002f 	sb	at,47(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
8002751c:	93a7002f 	lbu	a3,47(sp)
80027520:	24050000 	li	a1,0
80027524:	24060001 	li	a2,1
80027528:	0c009162 	jal	80024588 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE>
8002752c:	00000000 	nop
80027530:	afa20028 	sw	v0,40(sp)
            if status == INCOMPLETE { // We init
80027534:	8fa10028 	lw	at,40(sp)
80027538:	1420ffe8 	bnez	at,800274dc <_ZN4spin4once13Once$LT$T$GT$9call_once17hd32804fda2adadf6E+0x50>
8002753c:	00000000 	nop
80027540:	08009d52 	j	80027548 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd32804fda2adadf6E+0xbc>
80027544:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
80027548:	8fa10020 	lw	at,32(sp)
8002754c:	24210010 	addiu	at,at,16
80027550:	afa10018 	sw	at,24(sp)
80027554:	afa10030 	sw	at,48(sp)
80027558:	24010001 	li	at,1
8002755c:	afa10014 	sw	at,20(sp)
80027560:	a3a10034 	sb	at,52(sp)
80027564:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
80027568:	a3a00057 	sb	zero,87(sp)
8002756c:	27a40048 	addiu	a0,sp,72
80027570:	0c00865f 	jal	8002197c <_ZN4core3ops8function6FnOnce9call_once17haad3cc0b0a71d700E>
80027574:	00000000 	nop
80027578:	8fa10014 	lw	at,20(sp)
8002757c:	8fa40020 	lw	a0,32(sp)
80027580:	8fa20050 	lw	v0,80(sp)
80027584:	afa20044 	sw	v0,68(sp)
80027588:	8fa2004c 	lw	v0,76(sp)
8002758c:	afa20040 	sw	v0,64(sp)
80027590:	8fa20048 	lw	v0,72(sp)
80027594:	afa2003c 	sw	v0,60(sp)
80027598:	afa10038 	sw	at,56(sp)
8002759c:	afa40060 	sw	a0,96(sp)
800275a0:	0c0086de 	jal	80021b78 <_ZN4core3ptr109drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$$GT$17hf234cea20df3b98dE>
800275a4:	00000000 	nop
800275a8:	8fa40018 	lw	a0,24(sp)
800275ac:	8fa20020 	lw	v0,32(sp)
800275b0:	8fa10044 	lw	at,68(sp)
800275b4:	ac41000c 	sw	at,12(v0)
800275b8:	8fa10040 	lw	at,64(sp)
800275bc:	ac410008 	sw	at,8(v0)
800275c0:	8fa1003c 	lw	at,60(sp)
800275c4:	ac410004 	sw	at,4(v0)
800275c8:	8fa10038 	lw	at,56(sp)
800275cc:	ac410000 	sw	at,0(v0)
                finish.panicked = false;
800275d0:	a3a00034 	sb	zero,52(sp)
800275d4:	24010002 	li	at,2
                status = COMPLETE;
800275d8:	afa10028 	sw	at,40(sp)
                self.state.store(status, Ordering::SeqCst);
800275dc:	8fa50028 	lw	a1,40(sp)
800275e0:	24010004 	li	at,4
800275e4:	a3a10055 	sb	at,85(sp)
800275e8:	93a60055 	lbu	a2,85(sp)
800275ec:	0c0091aa 	jal	800246a8 <_ZN4core4sync6atomic11AtomicUsize5store17heacd8522e5ea3cb1E>
800275f0:	00000000 	nop
800275f4:	8fa40020 	lw	a0,32(sp)
                return self.force_get();
800275f8:	0c009ee5 	jal	80027b94 <_ZN4spin4once13Once$LT$T$GT$9force_get17h45feb14326e5514eE>
800275fc:	00000000 	nop
80027600:	afa20024 	sw	v0,36(sp)
80027604:	27a40030 	addiu	a0,sp,48
            }
80027608:	0c00896a 	jal	800225a8 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1151b3261df242b0E>
8002760c:	00000000 	nop
80027610:	08009da8 	j	800276a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd32804fda2adadf6E+0x214>
80027614:	00000000 	nop
                _ => unsafe { unreachable() },
80027618:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
8002761c:	00000000 	nop
                INCOMPLETE => unreachable!(),
80027620:	3c018105 	lui	at,0x8105
80027624:	2424ecf4 	addiu	a0,at,-4876
80027628:	3c018105 	lui	at,0x8105
8002762c:	2426ed70 	addiu	a2,at,-4752
80027630:	24050028 	li	a1,40
80027634:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80027638:	00000000 	nop
                    cpu_relax();
8002763c:	0c0091b6 	jal	800246d8 <_ZN4core4sync6atomic14spin_loop_hint17h56596ec2462f6e38E>
80027640:	00000000 	nop
80027644:	8fa10020 	lw	at,32(sp)
                    status = self.state.load(Ordering::SeqCst)
80027648:	24240010 	addiu	a0,at,16
8002764c:	24010004 	li	at,4
80027650:	a3a10056 	sb	at,86(sp)
80027654:	93a50056 	lbu	a1,86(sp)
80027658:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
8002765c:	00000000 	nop
80027660:	afa20028 	sw	v0,40(sp)
80027664:	08009d37 	j	800274dc <_ZN4spin4once13Once$LT$T$GT$9call_once17hd32804fda2adadf6E+0x50>
80027668:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
8002766c:	3c018105 	lui	at,0x8105
80027670:	2424ed80 	addiu	a0,at,-4736
80027674:	3c018105 	lui	at,0x8105
80027678:	2426ed94 	addiu	a2,at,-4716
8002767c:	24050011 	li	a1,17
80027680:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80027684:	00000000 	nop
                COMPLETE => return self.force_get(),
80027688:	8fa40020 	lw	a0,32(sp)
8002768c:	0c009ee5 	jal	80027b94 <_ZN4spin4once13Once$LT$T$GT$9force_get17h45feb14326e5514eE>
80027690:	00000000 	nop
80027694:	afa20024 	sw	v0,36(sp)
80027698:	08009da8 	j	800276a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd32804fda2adadf6E+0x214>
8002769c:	00000000 	nop
    }
800276a0:	93a10057 	lbu	at,87(sp)
800276a4:	30210001 	andi	at,at,0x1
800276a8:	14200008 	bnez	at,800276cc <_ZN4spin4once13Once$LT$T$GT$9call_once17hd32804fda2adadf6E+0x240>
800276ac:	00000000 	nop
800276b0:	08009dae 	j	800276b8 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd32804fda2adadf6E+0x22c>
800276b4:	00000000 	nop
800276b8:	8fa20024 	lw	v0,36(sp)
800276bc:	8fbf0064 	lw	ra,100(sp)
800276c0:	27bd0068 	addiu	sp,sp,104
800276c4:	03e00008 	jr	ra
800276c8:	00000000 	nop
800276cc:	08009dae 	j	800276b8 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd32804fda2adadf6E+0x22c>
800276d0:	00000000 	nop

800276d4 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd765ca15fdbe217eE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
800276d4:	27bdffa8 	addiu	sp,sp,-88
800276d8:	afbf0054 	sw	ra,84(sp)
800276dc:	afa40018 	sw	a0,24(sp)
800276e0:	afa40048 	sw	a0,72(sp)
800276e4:	24010000 	li	at,0
        loop {
800276e8:	a3a00047 	sb	zero,71(sp)
800276ec:	24010001 	li	at,1
800276f0:	a3a10047 	sb	at,71(sp)
800276f4:	24010004 	li	at,4
        let mut status = self.state.load(Ordering::SeqCst);
800276f8:	a3a10026 	sb	at,38(sp)
800276fc:	93a50026 	lbu	a1,38(sp)
80027700:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
80027704:	00000000 	nop
80027708:	afa20020 	sw	v0,32(sp)
        if status == INCOMPLETE {
8002770c:	8fa10020 	lw	at,32(sp)
80027710:	1020000f 	beqz	at,80027750 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd765ca15fdbe217eE+0x7c>
80027714:	00000000 	nop
80027718:	08009dc8 	j	80027720 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd765ca15fdbe217eE+0x4c>
8002771c:	00000000 	nop
            match status {
80027720:	8fa10020 	lw	at,32(sp)
80027724:	afa10014 	sw	at,20(sp)
80027728:	2c210004 	sltiu	at,at,4
8002772c:	10200044 	beqz	at,80027840 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd765ca15fdbe217eE+0x16c>
80027730:	00000000 	nop
80027734:	8fa10014 	lw	at,20(sp)
80027738:	00010880 	sll	at,at,0x2
8002773c:	3c028105 	lui	v0,0x8105
80027740:	00220821 	addu	at,at,v0
80027744:	8c21e0c8 	lw	at,-7992(at)
80027748:	00200008 	jr	at
8002774c:	00000000 	nop
80027750:	8fa40018 	lw	a0,24(sp)
80027754:	24010004 	li	at,4
                                                 Ordering::SeqCst);
80027758:	a3a10027 	sb	at,39(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
8002775c:	93a70027 	lbu	a3,39(sp)
80027760:	24050000 	li	a1,0
80027764:	24060001 	li	a2,1
80027768:	0c009162 	jal	80024588 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE>
8002776c:	00000000 	nop
80027770:	afa20020 	sw	v0,32(sp)
            if status == INCOMPLETE { // We init
80027774:	8fa10020 	lw	at,32(sp)
80027778:	1420ffe9 	bnez	at,80027720 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd765ca15fdbe217eE+0x4c>
8002777c:	00000000 	nop
80027780:	08009de2 	j	80027788 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd765ca15fdbe217eE+0xb4>
80027784:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
80027788:	8fa10018 	lw	at,24(sp)
8002778c:	afa10028 	sw	at,40(sp)
80027790:	24010001 	li	at,1
80027794:	afa10010 	sw	at,16(sp)
80027798:	a3a1002c 	sb	at,44(sp)
8002779c:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
800277a0:	a3a00047 	sb	zero,71(sp)
800277a4:	27a4003c 	addiu	a0,sp,60
800277a8:	0c00868f 	jal	80021a3c <_ZN4core3ops8function6FnOnce9call_once17he563ebe18a5fea93E>
800277ac:	00000000 	nop
800277b0:	8fa20010 	lw	v0,16(sp)
800277b4:	8fa10018 	lw	at,24(sp)
800277b8:	8fa30040 	lw	v1,64(sp)
800277bc:	afa30038 	sw	v1,56(sp)
800277c0:	8fa3003c 	lw	v1,60(sp)
800277c4:	afa30034 	sw	v1,52(sp)
800277c8:	afa20030 	sw	v0,48(sp)
800277cc:	24240004 	addiu	a0,at,4
800277d0:	afa40050 	sw	a0,80(sp)
800277d4:	0c008745 	jal	80021d14 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$$GT$17h85ce9c0c5f7245aaE>
800277d8:	00000000 	nop
800277dc:	8fa40018 	lw	a0,24(sp)
800277e0:	8fa10038 	lw	at,56(sp)
800277e4:	ac81000c 	sw	at,12(a0)
800277e8:	8fa10034 	lw	at,52(sp)
800277ec:	ac810008 	sw	at,8(a0)
800277f0:	8fa10030 	lw	at,48(sp)
800277f4:	ac810004 	sw	at,4(a0)
                finish.panicked = false;
800277f8:	a3a0002c 	sb	zero,44(sp)
800277fc:	24010002 	li	at,2
                status = COMPLETE;
80027800:	afa10020 	sw	at,32(sp)
                self.state.store(status, Ordering::SeqCst);
80027804:	8fa50020 	lw	a1,32(sp)
80027808:	24010004 	li	at,4
8002780c:	a3a10045 	sb	at,69(sp)
80027810:	93a60045 	lbu	a2,69(sp)
80027814:	0c0091aa 	jal	800246a8 <_ZN4core4sync6atomic11AtomicUsize5store17heacd8522e5ea3cb1E>
80027818:	00000000 	nop
8002781c:	8fa40018 	lw	a0,24(sp)
                return self.force_get();
80027820:	0c009f4d 	jal	80027d34 <_ZN4spin4once13Once$LT$T$GT$9force_get17h86081b76dcd7a1e4E>
80027824:	00000000 	nop
80027828:	afa2001c 	sw	v0,28(sp)
8002782c:	27a40028 	addiu	a0,sp,40
            }
80027830:	0c00896a 	jal	800225a8 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1151b3261df242b0E>
80027834:	00000000 	nop
80027838:	08009e31 	j	800278c4 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd765ca15fdbe217eE+0x1f0>
8002783c:	00000000 	nop
                _ => unsafe { unreachable() },
80027840:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
80027844:	00000000 	nop
                INCOMPLETE => unreachable!(),
80027848:	3c018105 	lui	at,0x8105
8002784c:	2424ecf4 	addiu	a0,at,-4876
80027850:	3c018105 	lui	at,0x8105
80027854:	2426ed70 	addiu	a2,at,-4752
80027858:	24050028 	li	a1,40
8002785c:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80027860:	00000000 	nop
                    cpu_relax();
80027864:	0c0091b6 	jal	800246d8 <_ZN4core4sync6atomic14spin_loop_hint17h56596ec2462f6e38E>
80027868:	00000000 	nop
8002786c:	8fa40018 	lw	a0,24(sp)
80027870:	24010004 	li	at,4
                    status = self.state.load(Ordering::SeqCst)
80027874:	a3a10046 	sb	at,70(sp)
80027878:	93a50046 	lbu	a1,70(sp)
8002787c:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
80027880:	00000000 	nop
80027884:	afa20020 	sw	v0,32(sp)
80027888:	08009dc8 	j	80027720 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd765ca15fdbe217eE+0x4c>
8002788c:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
80027890:	3c018105 	lui	at,0x8105
80027894:	2424ed80 	addiu	a0,at,-4736
80027898:	3c018105 	lui	at,0x8105
8002789c:	2426ed94 	addiu	a2,at,-4716
800278a0:	24050011 	li	a1,17
800278a4:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
800278a8:	00000000 	nop
                COMPLETE => return self.force_get(),
800278ac:	8fa40018 	lw	a0,24(sp)
800278b0:	0c009f4d 	jal	80027d34 <_ZN4spin4once13Once$LT$T$GT$9force_get17h86081b76dcd7a1e4E>
800278b4:	00000000 	nop
800278b8:	afa2001c 	sw	v0,28(sp)
800278bc:	08009e31 	j	800278c4 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd765ca15fdbe217eE+0x1f0>
800278c0:	00000000 	nop
    }
800278c4:	93a10047 	lbu	at,71(sp)
800278c8:	30210001 	andi	at,at,0x1
800278cc:	14200008 	bnez	at,800278f0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd765ca15fdbe217eE+0x21c>
800278d0:	00000000 	nop
800278d4:	08009e37 	j	800278dc <_ZN4spin4once13Once$LT$T$GT$9call_once17hd765ca15fdbe217eE+0x208>
800278d8:	00000000 	nop
800278dc:	8fa2001c 	lw	v0,28(sp)
800278e0:	8fbf0054 	lw	ra,84(sp)
800278e4:	27bd0058 	addiu	sp,sp,88
800278e8:	03e00008 	jr	ra
800278ec:	00000000 	nop
800278f0:	08009e37 	j	800278dc <_ZN4spin4once13Once$LT$T$GT$9call_once17hd765ca15fdbe217eE+0x208>
800278f4:	00000000 	nop

800278f8 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfc55c03056823b74E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
800278f8:	27bdff98 	addiu	sp,sp,-104
800278fc:	afbf0064 	sw	ra,100(sp)
80027900:	afa40020 	sw	a0,32(sp)
80027904:	afa40058 	sw	a0,88(sp)
80027908:	24010000 	li	at,0
        loop {
8002790c:	a3a00057 	sb	zero,87(sp)
80027910:	24010001 	li	at,1
80027914:	a3a10057 	sb	at,87(sp)
        let mut status = self.state.load(Ordering::SeqCst);
80027918:	24840010 	addiu	a0,a0,16
8002791c:	24010004 	li	at,4
80027920:	a3a1002e 	sb	at,46(sp)
80027924:	93a5002e 	lbu	a1,46(sp)
80027928:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
8002792c:	00000000 	nop
80027930:	afa20028 	sw	v0,40(sp)
        if status == INCOMPLETE {
80027934:	8fa10028 	lw	at,40(sp)
80027938:	1020000f 	beqz	at,80027978 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfc55c03056823b74E+0x80>
8002793c:	00000000 	nop
80027940:	08009e52 	j	80027948 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfc55c03056823b74E+0x50>
80027944:	00000000 	nop
            match status {
80027948:	8fa10028 	lw	at,40(sp)
8002794c:	afa1001c 	sw	at,28(sp)
80027950:	2c210004 	sltiu	at,at,4
80027954:	1020004b 	beqz	at,80027a84 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfc55c03056823b74E+0x18c>
80027958:	00000000 	nop
8002795c:	8fa1001c 	lw	at,28(sp)
80027960:	00010880 	sll	at,at,0x2
80027964:	3c028105 	lui	v0,0x8105
80027968:	00220821 	addu	at,at,v0
8002796c:	8c21e0d8 	lw	at,-7976(at)
80027970:	00200008 	jr	at
80027974:	00000000 	nop
            status = self.state.compare_and_swap(INCOMPLETE,
80027978:	8fa10020 	lw	at,32(sp)
8002797c:	24240010 	addiu	a0,at,16
80027980:	24010004 	li	at,4
                                                 Ordering::SeqCst);
80027984:	a3a1002f 	sb	at,47(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
80027988:	93a7002f 	lbu	a3,47(sp)
8002798c:	24050000 	li	a1,0
80027990:	24060001 	li	a2,1
80027994:	0c009162 	jal	80024588 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h1749582c5450ceadE>
80027998:	00000000 	nop
8002799c:	afa20028 	sw	v0,40(sp)
            if status == INCOMPLETE { // We init
800279a0:	8fa10028 	lw	at,40(sp)
800279a4:	1420ffe8 	bnez	at,80027948 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfc55c03056823b74E+0x50>
800279a8:	00000000 	nop
800279ac:	08009e6d 	j	800279b4 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfc55c03056823b74E+0xbc>
800279b0:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
800279b4:	8fa10020 	lw	at,32(sp)
800279b8:	24210010 	addiu	at,at,16
800279bc:	afa10018 	sw	at,24(sp)
800279c0:	afa10030 	sw	at,48(sp)
800279c4:	24010001 	li	at,1
800279c8:	afa10014 	sw	at,20(sp)
800279cc:	a3a10034 	sb	at,52(sp)
800279d0:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
800279d4:	a3a00057 	sb	zero,87(sp)
800279d8:	27a40048 	addiu	a0,sp,72
800279dc:	0c00866f 	jal	800219bc <_ZN4core3ops8function6FnOnce9call_once17hb529e93ef265a683E>
800279e0:	00000000 	nop
800279e4:	8fa10014 	lw	at,20(sp)
800279e8:	8fa40020 	lw	a0,32(sp)
800279ec:	8fa20050 	lw	v0,80(sp)
800279f0:	afa20044 	sw	v0,68(sp)
800279f4:	8fa2004c 	lw	v0,76(sp)
800279f8:	afa20040 	sw	v0,64(sp)
800279fc:	8fa20048 	lw	v0,72(sp)
80027a00:	afa2003c 	sw	v0,60(sp)
80027a04:	afa10038 	sw	at,56(sp)
80027a08:	afa40060 	sw	a0,96(sp)
80027a0c:	0c0086de 	jal	80021b78 <_ZN4core3ptr109drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$$GT$17hf234cea20df3b98dE>
80027a10:	00000000 	nop
80027a14:	8fa40018 	lw	a0,24(sp)
80027a18:	8fa20020 	lw	v0,32(sp)
80027a1c:	8fa10044 	lw	at,68(sp)
80027a20:	ac41000c 	sw	at,12(v0)
80027a24:	8fa10040 	lw	at,64(sp)
80027a28:	ac410008 	sw	at,8(v0)
80027a2c:	8fa1003c 	lw	at,60(sp)
80027a30:	ac410004 	sw	at,4(v0)
80027a34:	8fa10038 	lw	at,56(sp)
80027a38:	ac410000 	sw	at,0(v0)
                finish.panicked = false;
80027a3c:	a3a00034 	sb	zero,52(sp)
80027a40:	24010002 	li	at,2
                status = COMPLETE;
80027a44:	afa10028 	sw	at,40(sp)
                self.state.store(status, Ordering::SeqCst);
80027a48:	8fa50028 	lw	a1,40(sp)
80027a4c:	24010004 	li	at,4
80027a50:	a3a10055 	sb	at,85(sp)
80027a54:	93a60055 	lbu	a2,85(sp)
80027a58:	0c0091aa 	jal	800246a8 <_ZN4core4sync6atomic11AtomicUsize5store17heacd8522e5ea3cb1E>
80027a5c:	00000000 	nop
80027a60:	8fa40020 	lw	a0,32(sp)
                return self.force_get();
80027a64:	0c009ee5 	jal	80027b94 <_ZN4spin4once13Once$LT$T$GT$9force_get17h45feb14326e5514eE>
80027a68:	00000000 	nop
80027a6c:	afa20024 	sw	v0,36(sp)
80027a70:	27a40030 	addiu	a0,sp,48
            }
80027a74:	0c00896a 	jal	800225a8 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h1151b3261df242b0E>
80027a78:	00000000 	nop
80027a7c:	08009ec3 	j	80027b0c <_ZN4spin4once13Once$LT$T$GT$9call_once17hfc55c03056823b74E+0x214>
80027a80:	00000000 	nop
                _ => unsafe { unreachable() },
80027a84:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
80027a88:	00000000 	nop
                INCOMPLETE => unreachable!(),
80027a8c:	3c018105 	lui	at,0x8105
80027a90:	2424ecf4 	addiu	a0,at,-4876
80027a94:	3c018105 	lui	at,0x8105
80027a98:	2426ed70 	addiu	a2,at,-4752
80027a9c:	24050028 	li	a1,40
80027aa0:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80027aa4:	00000000 	nop
                    cpu_relax();
80027aa8:	0c0091b6 	jal	800246d8 <_ZN4core4sync6atomic14spin_loop_hint17h56596ec2462f6e38E>
80027aac:	00000000 	nop
80027ab0:	8fa10020 	lw	at,32(sp)
                    status = self.state.load(Ordering::SeqCst)
80027ab4:	24240010 	addiu	a0,at,16
80027ab8:	24010004 	li	at,4
80027abc:	a3a10056 	sb	at,86(sp)
80027ac0:	93a50056 	lbu	a1,86(sp)
80027ac4:	0c00919f 	jal	8002467c <_ZN4core4sync6atomic11AtomicUsize4load17he0711acf6b612feaE>
80027ac8:	00000000 	nop
80027acc:	afa20028 	sw	v0,40(sp)
80027ad0:	08009e52 	j	80027948 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfc55c03056823b74E+0x50>
80027ad4:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
80027ad8:	3c018105 	lui	at,0x8105
80027adc:	2424ed80 	addiu	a0,at,-4736
80027ae0:	3c018105 	lui	at,0x8105
80027ae4:	2426ed94 	addiu	a2,at,-4716
80027ae8:	24050011 	li	a1,17
80027aec:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80027af0:	00000000 	nop
                COMPLETE => return self.force_get(),
80027af4:	8fa40020 	lw	a0,32(sp)
80027af8:	0c009ee5 	jal	80027b94 <_ZN4spin4once13Once$LT$T$GT$9force_get17h45feb14326e5514eE>
80027afc:	00000000 	nop
80027b00:	afa20024 	sw	v0,36(sp)
80027b04:	08009ec3 	j	80027b0c <_ZN4spin4once13Once$LT$T$GT$9call_once17hfc55c03056823b74E+0x214>
80027b08:	00000000 	nop
    }
80027b0c:	93a10057 	lbu	at,87(sp)
80027b10:	30210001 	andi	at,at,0x1
80027b14:	14200008 	bnez	at,80027b38 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfc55c03056823b74E+0x240>
80027b18:	00000000 	nop
80027b1c:	08009ec9 	j	80027b24 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfc55c03056823b74E+0x22c>
80027b20:	00000000 	nop
80027b24:	8fa20024 	lw	v0,36(sp)
80027b28:	8fbf0064 	lw	ra,100(sp)
80027b2c:	27bd0068 	addiu	sp,sp,104
80027b30:	03e00008 	jr	ra
80027b34:	00000000 	nop
80027b38:	08009ec9 	j	80027b24 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfc55c03056823b74E+0x22c>
80027b3c:	00000000 	nop

80027b40 <_ZN4spin4once13Once$LT$T$GT$9force_get17h07b07a2a16fa23a8E>:
    fn force_get<'a>(&'a self) -> &'a T {
80027b40:	27bdffd8 	addiu	sp,sp,-40
80027b44:	afbf0024 	sw	ra,36(sp)
80027b48:	afa40018 	sw	a0,24(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027b4c:	24840004 	addiu	a0,a0,4
80027b50:	afa40020 	sw	a0,32(sp)
80027b54:	0c0096a3 	jal	80025a8c <_ZN4core6option15Option$LT$T$GT$6as_ref17h073087ce2459efe9E>
80027b58:	00000000 	nop
80027b5c:	afa20014 	sw	v0,20(sp)
80027b60:	8fa10014 	lw	at,20(sp)
80027b64:	14200005 	bnez	at,80027b7c <_ZN4spin4once13Once$LT$T$GT$9force_get17h07b07a2a16fa23a8E+0x3c>
80027b68:	00000000 	nop
80027b6c:	08009edd 	j	80027b74 <_ZN4spin4once13Once$LT$T$GT$9force_get17h07b07a2a16fa23a8E+0x34>
80027b70:	00000000 	nop
            None    => unsafe { unreachable() },
80027b74:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
80027b78:	00000000 	nop
            Some(p) => p,
80027b7c:	8fa20014 	lw	v0,20(sp)
80027b80:	afa2001c 	sw	v0,28(sp)
    }
80027b84:	8fbf0024 	lw	ra,36(sp)
80027b88:	27bd0028 	addiu	sp,sp,40
80027b8c:	03e00008 	jr	ra
80027b90:	00000000 	nop

80027b94 <_ZN4spin4once13Once$LT$T$GT$9force_get17h45feb14326e5514eE>:
    fn force_get<'a>(&'a self) -> &'a T {
80027b94:	27bdffd8 	addiu	sp,sp,-40
80027b98:	afbf0024 	sw	ra,36(sp)
80027b9c:	afa40018 	sw	a0,24(sp)
80027ba0:	afa40020 	sw	a0,32(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027ba4:	0c009737 	jal	80025cdc <_ZN4core6option15Option$LT$T$GT$6as_ref17hb84e0a029b252928E>
80027ba8:	00000000 	nop
80027bac:	afa20014 	sw	v0,20(sp)
80027bb0:	8fa10014 	lw	at,20(sp)
80027bb4:	14200005 	bnez	at,80027bcc <_ZN4spin4once13Once$LT$T$GT$9force_get17h45feb14326e5514eE+0x38>
80027bb8:	00000000 	nop
80027bbc:	08009ef1 	j	80027bc4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h45feb14326e5514eE+0x30>
80027bc0:	00000000 	nop
            None    => unsafe { unreachable() },
80027bc4:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
80027bc8:	00000000 	nop
            Some(p) => p,
80027bcc:	8fa20014 	lw	v0,20(sp)
80027bd0:	afa2001c 	sw	v0,28(sp)
    }
80027bd4:	8fbf0024 	lw	ra,36(sp)
80027bd8:	27bd0028 	addiu	sp,sp,40
80027bdc:	03e00008 	jr	ra
80027be0:	00000000 	nop

80027be4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5a8e78403b1eb6cdE>:
    fn force_get<'a>(&'a self) -> &'a T {
80027be4:	27bdffd8 	addiu	sp,sp,-40
80027be8:	afbf0024 	sw	ra,36(sp)
80027bec:	afa40018 	sw	a0,24(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027bf0:	24840004 	addiu	a0,a0,4
80027bf4:	afa40020 	sw	a0,32(sp)
80027bf8:	0c009722 	jal	80025c88 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb34c357efd858352E>
80027bfc:	00000000 	nop
80027c00:	afa20014 	sw	v0,20(sp)
80027c04:	8fa10014 	lw	at,20(sp)
80027c08:	14200005 	bnez	at,80027c20 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5a8e78403b1eb6cdE+0x3c>
80027c0c:	00000000 	nop
80027c10:	08009f06 	j	80027c18 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5a8e78403b1eb6cdE+0x34>
80027c14:	00000000 	nop
            None    => unsafe { unreachable() },
80027c18:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
80027c1c:	00000000 	nop
            Some(p) => p,
80027c20:	8fa20014 	lw	v0,20(sp)
80027c24:	afa2001c 	sw	v0,28(sp)
    }
80027c28:	8fbf0024 	lw	ra,36(sp)
80027c2c:	27bd0028 	addiu	sp,sp,40
80027c30:	03e00008 	jr	ra
80027c34:	00000000 	nop

80027c38 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f97986ec55da604E>:
    fn force_get<'a>(&'a self) -> &'a T {
80027c38:	27bdffd8 	addiu	sp,sp,-40
80027c3c:	afbf0024 	sw	ra,36(sp)
80027c40:	afa40018 	sw	a0,24(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027c44:	24840004 	addiu	a0,a0,4
80027c48:	afa40020 	sw	a0,32(sp)
80027c4c:	0c00974c 	jal	80025d30 <_ZN4core6option15Option$LT$T$GT$6as_ref17hcb2c0a33bb56f570E>
80027c50:	00000000 	nop
80027c54:	afa20014 	sw	v0,20(sp)
80027c58:	8fa10014 	lw	at,20(sp)
80027c5c:	14200005 	bnez	at,80027c74 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f97986ec55da604E+0x3c>
80027c60:	00000000 	nop
80027c64:	08009f1b 	j	80027c6c <_ZN4spin4once13Once$LT$T$GT$9force_get17h5f97986ec55da604E+0x34>
80027c68:	00000000 	nop
            None    => unsafe { unreachable() },
80027c6c:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
80027c70:	00000000 	nop
            Some(p) => p,
80027c74:	8fa20014 	lw	v0,20(sp)
80027c78:	afa2001c 	sw	v0,28(sp)
    }
80027c7c:	8fbf0024 	lw	ra,36(sp)
80027c80:	27bd0028 	addiu	sp,sp,40
80027c84:	03e00008 	jr	ra
80027c88:	00000000 	nop

80027c8c <_ZN4spin4once13Once$LT$T$GT$9force_get17h7e728543bab82297E>:
    fn force_get<'a>(&'a self) -> &'a T {
80027c8c:	27bdffd8 	addiu	sp,sp,-40
80027c90:	afbf0024 	sw	ra,36(sp)
80027c94:	afa40018 	sw	a0,24(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027c98:	24840004 	addiu	a0,a0,4
80027c9c:	afa40020 	sw	a0,32(sp)
80027ca0:	0c00970d 	jal	80025c34 <_ZN4core6option15Option$LT$T$GT$6as_ref17h89bfabd6147d3914E>
80027ca4:	00000000 	nop
80027ca8:	afa20014 	sw	v0,20(sp)
80027cac:	8fa10014 	lw	at,20(sp)
80027cb0:	14200005 	bnez	at,80027cc8 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7e728543bab82297E+0x3c>
80027cb4:	00000000 	nop
80027cb8:	08009f30 	j	80027cc0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h7e728543bab82297E+0x34>
80027cbc:	00000000 	nop
            None    => unsafe { unreachable() },
80027cc0:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
80027cc4:	00000000 	nop
            Some(p) => p,
80027cc8:	8fa20014 	lw	v0,20(sp)
80027ccc:	afa2001c 	sw	v0,28(sp)
    }
80027cd0:	8fbf0024 	lw	ra,36(sp)
80027cd4:	27bd0028 	addiu	sp,sp,40
80027cd8:	03e00008 	jr	ra
80027cdc:	00000000 	nop

80027ce0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h84efd6c3338094b3E>:
    fn force_get<'a>(&'a self) -> &'a T {
80027ce0:	27bdffd8 	addiu	sp,sp,-40
80027ce4:	afbf0024 	sw	ra,36(sp)
80027ce8:	afa40018 	sw	a0,24(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027cec:	24840004 	addiu	a0,a0,4
80027cf0:	afa40020 	sw	a0,32(sp)
80027cf4:	0c0096f7 	jal	80025bdc <_ZN4core6option15Option$LT$T$GT$6as_ref17h4449a19ff293dcfeE>
80027cf8:	00000000 	nop
80027cfc:	afa20014 	sw	v0,20(sp)
80027d00:	8fa10014 	lw	at,20(sp)
80027d04:	14200005 	bnez	at,80027d1c <_ZN4spin4once13Once$LT$T$GT$9force_get17h84efd6c3338094b3E+0x3c>
80027d08:	00000000 	nop
80027d0c:	08009f45 	j	80027d14 <_ZN4spin4once13Once$LT$T$GT$9force_get17h84efd6c3338094b3E+0x34>
80027d10:	00000000 	nop
            None    => unsafe { unreachable() },
80027d14:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
80027d18:	00000000 	nop
            Some(p) => p,
80027d1c:	8fa20014 	lw	v0,20(sp)
80027d20:	afa2001c 	sw	v0,28(sp)
    }
80027d24:	8fbf0024 	lw	ra,36(sp)
80027d28:	27bd0028 	addiu	sp,sp,40
80027d2c:	03e00008 	jr	ra
80027d30:	00000000 	nop

80027d34 <_ZN4spin4once13Once$LT$T$GT$9force_get17h86081b76dcd7a1e4E>:
    fn force_get<'a>(&'a self) -> &'a T {
80027d34:	27bdffd8 	addiu	sp,sp,-40
80027d38:	afbf0024 	sw	ra,36(sp)
80027d3c:	afa40018 	sw	a0,24(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027d40:	24840004 	addiu	a0,a0,4
80027d44:	afa40020 	sw	a0,32(sp)
80027d48:	0c0096b8 	jal	80025ae0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0c0c1f76e7cf98f6E>
80027d4c:	00000000 	nop
80027d50:	afa20014 	sw	v0,20(sp)
80027d54:	8fa10014 	lw	at,20(sp)
80027d58:	14200005 	bnez	at,80027d70 <_ZN4spin4once13Once$LT$T$GT$9force_get17h86081b76dcd7a1e4E+0x3c>
80027d5c:	00000000 	nop
80027d60:	08009f5a 	j	80027d68 <_ZN4spin4once13Once$LT$T$GT$9force_get17h86081b76dcd7a1e4E+0x34>
80027d64:	00000000 	nop
            None    => unsafe { unreachable() },
80027d68:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
80027d6c:	00000000 	nop
            Some(p) => p,
80027d70:	8fa20014 	lw	v0,20(sp)
80027d74:	afa2001c 	sw	v0,28(sp)
    }
80027d78:	8fbf0024 	lw	ra,36(sp)
80027d7c:	27bd0028 	addiu	sp,sp,40
80027d80:	03e00008 	jr	ra
80027d84:	00000000 	nop

80027d88 <_ZN4spin4once13Once$LT$T$GT$9force_get17hab9e064ffb0c1835E>:
    fn force_get<'a>(&'a self) -> &'a T {
80027d88:	27bdffd8 	addiu	sp,sp,-40
80027d8c:	afbf0024 	sw	ra,36(sp)
80027d90:	afa40018 	sw	a0,24(sp)
80027d94:	afa40020 	sw	a0,32(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027d98:	0c0096cd 	jal	80025b34 <_ZN4core6option15Option$LT$T$GT$6as_ref17h32e5cc6d676dccc7E>
80027d9c:	00000000 	nop
80027da0:	afa20014 	sw	v0,20(sp)
80027da4:	8fa10014 	lw	at,20(sp)
80027da8:	14200005 	bnez	at,80027dc0 <_ZN4spin4once13Once$LT$T$GT$9force_get17hab9e064ffb0c1835E+0x38>
80027dac:	00000000 	nop
80027db0:	08009f6e 	j	80027db8 <_ZN4spin4once13Once$LT$T$GT$9force_get17hab9e064ffb0c1835E+0x30>
80027db4:	00000000 	nop
            None    => unsafe { unreachable() },
80027db8:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
80027dbc:	00000000 	nop
            Some(p) => p,
80027dc0:	8fa20014 	lw	v0,20(sp)
80027dc4:	afa2001c 	sw	v0,28(sp)
    }
80027dc8:	8fbf0024 	lw	ra,36(sp)
80027dcc:	27bd0028 	addiu	sp,sp,40
80027dd0:	03e00008 	jr	ra
80027dd4:	00000000 	nop

80027dd8 <_ZN4spin4once13Once$LT$T$GT$9force_get17hed6df867d1170511E>:
    fn force_get<'a>(&'a self) -> &'a T {
80027dd8:	27bdffd8 	addiu	sp,sp,-40
80027ddc:	afbf0024 	sw	ra,36(sp)
80027de0:	afa40018 	sw	a0,24(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027de4:	24840004 	addiu	a0,a0,4
80027de8:	afa40020 	sw	a0,32(sp)
80027dec:	0c0096e2 	jal	80025b88 <_ZN4core6option15Option$LT$T$GT$6as_ref17h3b82b050f0e604a8E>
80027df0:	00000000 	nop
80027df4:	afa20014 	sw	v0,20(sp)
80027df8:	8fa10014 	lw	at,20(sp)
80027dfc:	14200005 	bnez	at,80027e14 <_ZN4spin4once13Once$LT$T$GT$9force_get17hed6df867d1170511E+0x3c>
80027e00:	00000000 	nop
80027e04:	08009f83 	j	80027e0c <_ZN4spin4once13Once$LT$T$GT$9force_get17hed6df867d1170511E+0x34>
80027e08:	00000000 	nop
            None    => unsafe { unreachable() },
80027e0c:	0c0090fa 	jal	800243e8 <_ZN4core4hint21unreachable_unchecked17h5538a591372b23c1E>
80027e10:	00000000 	nop
            Some(p) => p,
80027e14:	8fa20014 	lw	v0,20(sp)
80027e18:	afa2001c 	sw	v0,28(sp)
    }
80027e1c:	8fbf0024 	lw	ra,36(sp)
80027e20:	27bd0028 	addiu	sp,sp,40
80027e24:	03e00008 	jr	ra
80027e28:	00000000 	nop

80027e2c <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h03838b86e5c05a01E>:
unsafe impl<T> Sync for Spinlock<T> {}

unsafe impl<T> Send for Spinlock<T> {}

impl<T> Spinlock<T> {
    pub const fn new(data: T) -> Self {
80027e2c:	27bdffc8 	addiu	sp,sp,-56
80027e30:	afbf0034 	sw	ra,52(sp)
80027e34:	afa50014 	sw	a1,20(sp)
80027e38:	afa40018 	sw	a0,24(sp)
80027e3c:	afa4001c 	sw	a0,28(sp)
80027e40:	24040000 	li	a0,0
        Spinlock {
            lock: AtomicBool::new(false),
80027e44:	0c00914c 	jal	80024530 <_ZN4core4sync6atomic10AtomicBool3new17hc88a1eafe759e74aE>
80027e48:	00000000 	nop
80027e4c:	8fa50014 	lw	a1,20(sp)
80027e50:	8fa40018 	lw	a0,24(sp)
80027e54:	00400825 	move	at,v0
80027e58:	8fa2001c 	lw	v0,28(sp)
80027e5c:	a3a10033 	sb	at,51(sp)
80027e60:	93a10033 	lbu	at,51(sp)
80027e64:	a3a10023 	sb	at,35(sp)
        UnsafeCell { value }
80027e68:	8ca10008 	lw	at,8(a1)
80027e6c:	afa1002c 	sw	at,44(sp)
80027e70:	8ca10004 	lw	at,4(a1)
80027e74:	afa10028 	sw	at,40(sp)
80027e78:	8ca10000 	lw	at,0(a1)
80027e7c:	afa10024 	sw	at,36(sp)
        Spinlock {
80027e80:	93a10023 	lbu	at,35(sp)
80027e84:	a081000c 	sb	at,12(a0)
80027e88:	8fa1002c 	lw	at,44(sp)
80027e8c:	ac810008 	sw	at,8(a0)
80027e90:	8fa10028 	lw	at,40(sp)
80027e94:	ac810004 	sw	at,4(a0)
80027e98:	8fa10024 	lw	at,36(sp)
80027e9c:	ac810000 	sw	at,0(a0)
            data: UnsafeCell::new(data),
        }
    }
80027ea0:	8fbf0034 	lw	ra,52(sp)
80027ea4:	27bd0038 	addiu	sp,sp,56
80027ea8:	03e00008 	jr	ra
80027eac:	00000000 	nop

80027eb0 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h1e057bf7fb8fcc6cE>:
    pub const fn new(data: T) -> Self {
80027eb0:	27bdffc8 	addiu	sp,sp,-56
80027eb4:	afbf0034 	sw	ra,52(sp)
80027eb8:	afa50014 	sw	a1,20(sp)
80027ebc:	afa40018 	sw	a0,24(sp)
80027ec0:	afa4001c 	sw	a0,28(sp)
80027ec4:	afa50024 	sw	a1,36(sp)
80027ec8:	24040000 	li	a0,0
            lock: AtomicBool::new(false),
80027ecc:	0c00914c 	jal	80024530 <_ZN4core4sync6atomic10AtomicBool3new17hc88a1eafe759e74aE>
80027ed0:	00000000 	nop
80027ed4:	8fa50014 	lw	a1,20(sp)
80027ed8:	8fa40018 	lw	a0,24(sp)
80027edc:	00400825 	move	at,v0
80027ee0:	8fa2001c 	lw	v0,28(sp)
80027ee4:	a3a1002b 	sb	at,43(sp)
80027ee8:	93a1002b 	lbu	at,43(sp)
80027eec:	a3a10023 	sb	at,35(sp)
80027ef0:	afa50030 	sw	a1,48(sp)
80027ef4:	afa5002c 	sw	a1,44(sp)
    }
80027ef8:	8fa1002c 	lw	at,44(sp)
        Spinlock {
80027efc:	93a30023 	lbu	v1,35(sp)
80027f00:	a0830004 	sb	v1,4(a0)
80027f04:	ac810000 	sw	at,0(a0)
    }
80027f08:	8fbf0034 	lw	ra,52(sp)
80027f0c:	27bd0038 	addiu	sp,sp,56
80027f10:	03e00008 	jr	ra
80027f14:	00000000 	nop

80027f18 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h3d84a9a41551445cE>:
    pub const fn new(data: T) -> Self {
80027f18:	27bdffb8 	addiu	sp,sp,-72
80027f1c:	afbf0044 	sw	ra,68(sp)
80027f20:	afa60018 	sw	a2,24(sp)
80027f24:	afa50014 	sw	a1,20(sp)
80027f28:	afa4001c 	sw	a0,28(sp)
80027f2c:	afa40020 	sw	a0,32(sp)
80027f30:	afa50028 	sw	a1,40(sp)
80027f34:	afa6002c 	sw	a2,44(sp)
80027f38:	24040000 	li	a0,0
            lock: AtomicBool::new(false),
80027f3c:	0c00914c 	jal	80024530 <_ZN4core4sync6atomic10AtomicBool3new17hc88a1eafe759e74aE>
80027f40:	00000000 	nop
80027f44:	8fa50014 	lw	a1,20(sp)
80027f48:	8fa60018 	lw	a2,24(sp)
80027f4c:	8fa4001c 	lw	a0,28(sp)
80027f50:	00400825 	move	at,v0
80027f54:	8fa20020 	lw	v0,32(sp)
80027f58:	a3a10033 	sb	at,51(sp)
80027f5c:	93a10033 	lbu	at,51(sp)
80027f60:	a3a10027 	sb	at,39(sp)
80027f64:	afa5003c 	sw	a1,60(sp)
80027f68:	afa60040 	sw	a2,64(sp)
        UnsafeCell { value }
80027f6c:	afa50034 	sw	a1,52(sp)
80027f70:	afa60038 	sw	a2,56(sp)
    }
80027f74:	8fa30034 	lw	v1,52(sp)
80027f78:	8fa10038 	lw	at,56(sp)
        Spinlock {
80027f7c:	93a50027 	lbu	a1,39(sp)
80027f80:	a0850008 	sb	a1,8(a0)
80027f84:	ac830000 	sw	v1,0(a0)
80027f88:	ac810004 	sw	at,4(a0)
    }
80027f8c:	8fbf0044 	lw	ra,68(sp)
80027f90:	27bd0048 	addiu	sp,sp,72
80027f94:	03e00008 	jr	ra
80027f98:	00000000 	nop

80027f9c <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h5343ed1da1e3aa48E>:
    pub const fn new(data: T) -> Self {
80027f9c:	27bdffc8 	addiu	sp,sp,-56
80027fa0:	afbf0034 	sw	ra,52(sp)
80027fa4:	afa50014 	sw	a1,20(sp)
80027fa8:	afa40018 	sw	a0,24(sp)
80027fac:	afa4001c 	sw	a0,28(sp)
80027fb0:	24040000 	li	a0,0
            lock: AtomicBool::new(false),
80027fb4:	0c00914c 	jal	80024530 <_ZN4core4sync6atomic10AtomicBool3new17hc88a1eafe759e74aE>
80027fb8:	00000000 	nop
80027fbc:	8fa50014 	lw	a1,20(sp)
80027fc0:	8fa40018 	lw	a0,24(sp)
80027fc4:	00400825 	move	at,v0
80027fc8:	8fa2001c 	lw	v0,28(sp)
80027fcc:	a3a10033 	sb	at,51(sp)
80027fd0:	93a10033 	lbu	at,51(sp)
80027fd4:	a3a10023 	sb	at,35(sp)
        UnsafeCell { value }
80027fd8:	8ca10008 	lw	at,8(a1)
80027fdc:	afa1002c 	sw	at,44(sp)
80027fe0:	8ca10004 	lw	at,4(a1)
80027fe4:	afa10028 	sw	at,40(sp)
80027fe8:	8ca10000 	lw	at,0(a1)
80027fec:	afa10024 	sw	at,36(sp)
        Spinlock {
80027ff0:	93a10023 	lbu	at,35(sp)
80027ff4:	a081000c 	sb	at,12(a0)
80027ff8:	8fa1002c 	lw	at,44(sp)
80027ffc:	ac810008 	sw	at,8(a0)
80028000:	8fa10028 	lw	at,40(sp)
80028004:	ac810004 	sw	at,4(a0)
80028008:	8fa10024 	lw	at,36(sp)
8002800c:	ac810000 	sw	at,0(a0)
    }
80028010:	8fbf0034 	lw	ra,52(sp)
80028014:	27bd0038 	addiu	sp,sp,56
80028018:	03e00008 	jr	ra
8002801c:	00000000 	nop

80028020 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h95f04facee59cb93E>:
    pub const fn new(data: T) -> Self {
80028020:	27bdffe8 	addiu	sp,sp,-24
80028024:	afbf0014 	sw	ra,20(sp)
80028028:	24040000 	li	a0,0
            lock: AtomicBool::new(false),
8002802c:	0c00914c 	jal	80024530 <_ZN4core4sync6atomic10AtomicBool3new17hc88a1eafe759e74aE>
80028030:	00000000 	nop
80028034:	a3a20013 	sb	v0,19(sp)
80028038:	93a10013 	lbu	at,19(sp)
8002803c:	a3a10011 	sb	at,17(sp)
        Spinlock {
80028040:	93a10011 	lbu	at,17(sp)
80028044:	a3a10010 	sb	at,16(sp)
    }
80028048:	93a20010 	lbu	v0,16(sp)
8002804c:	8fbf0014 	lw	ra,20(sp)
80028050:	27bd0018 	addiu	sp,sp,24
80028054:	03e00008 	jr	ra
80028058:	00000000 	nop

8002805c <_ZN4sync4spin17Spinlock$LT$T$GT$3new17hb0fa3ee8a9cca089E>:
    pub const fn new(data: T) -> Self {
8002805c:	27bdffb8 	addiu	sp,sp,-72
80028060:	afbf0044 	sw	ra,68(sp)
80028064:	afa60018 	sw	a2,24(sp)
80028068:	afa50014 	sw	a1,20(sp)
8002806c:	afa4001c 	sw	a0,28(sp)
80028070:	afa40020 	sw	a0,32(sp)
80028074:	afa50028 	sw	a1,40(sp)
80028078:	afa6002c 	sw	a2,44(sp)
8002807c:	24040000 	li	a0,0
            lock: AtomicBool::new(false),
80028080:	0c00914c 	jal	80024530 <_ZN4core4sync6atomic10AtomicBool3new17hc88a1eafe759e74aE>
80028084:	00000000 	nop
80028088:	8fa50014 	lw	a1,20(sp)
8002808c:	8fa60018 	lw	a2,24(sp)
80028090:	8fa4001c 	lw	a0,28(sp)
80028094:	00400825 	move	at,v0
80028098:	8fa20020 	lw	v0,32(sp)
8002809c:	a3a10033 	sb	at,51(sp)
800280a0:	93a10033 	lbu	at,51(sp)
800280a4:	a3a10027 	sb	at,39(sp)
800280a8:	afa5003c 	sw	a1,60(sp)
800280ac:	afa60040 	sw	a2,64(sp)
800280b0:	afa50034 	sw	a1,52(sp)
800280b4:	afa60038 	sw	a2,56(sp)
    }
800280b8:	8fa30034 	lw	v1,52(sp)
800280bc:	8fa10038 	lw	at,56(sp)
        Spinlock {
800280c0:	93a50027 	lbu	a1,39(sp)
800280c4:	a0850008 	sb	a1,8(a0)
800280c8:	ac830000 	sw	v1,0(a0)
800280cc:	ac810004 	sw	at,4(a0)
    }
800280d0:	8fbf0044 	lw	ra,68(sp)
800280d4:	27bd0048 	addiu	sp,sp,72
800280d8:	03e00008 	jr	ra
800280dc:	00000000 	nop

800280e0 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17hdd67f4709cd887c8E>:
    pub const fn new(data: T) -> Self {
800280e0:	27bdffc8 	addiu	sp,sp,-56
800280e4:	afbf0034 	sw	ra,52(sp)
800280e8:	afa50014 	sw	a1,20(sp)
800280ec:	afa40018 	sw	a0,24(sp)
800280f0:	afa4001c 	sw	a0,28(sp)
800280f4:	afa50024 	sw	a1,36(sp)
800280f8:	24040000 	li	a0,0
            lock: AtomicBool::new(false),
800280fc:	0c00914c 	jal	80024530 <_ZN4core4sync6atomic10AtomicBool3new17hc88a1eafe759e74aE>
80028100:	00000000 	nop
80028104:	8fa50014 	lw	a1,20(sp)
80028108:	8fa40018 	lw	a0,24(sp)
8002810c:	00400825 	move	at,v0
80028110:	8fa2001c 	lw	v0,28(sp)
80028114:	a3a1002b 	sb	at,43(sp)
80028118:	93a1002b 	lbu	at,43(sp)
8002811c:	a3a10023 	sb	at,35(sp)
80028120:	afa50030 	sw	a1,48(sp)
        UnsafeCell { value }
80028124:	afa5002c 	sw	a1,44(sp)
    }
80028128:	8fa1002c 	lw	at,44(sp)
        Spinlock {
8002812c:	93a30023 	lbu	v1,35(sp)
80028130:	a0830004 	sb	v1,4(a0)
80028134:	ac810000 	sw	at,0(a0)
    }
80028138:	8fbf0034 	lw	ra,52(sp)
8002813c:	27bd0038 	addiu	sp,sp,56
80028140:	03e00008 	jr	ra
80028144:	00000000 	nop

80028148 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0aafc755bded502eE>:

    pub fn lock(&self) -> SpinlockGuard<T> {
80028148:	27bdffd0 	addiu	sp,sp,-48
8002814c:	afbf002c 	sw	ra,44(sp)
80028150:	afa4001c 	sw	a0,28(sp)
80028154:	afa40028 	sw	a0,40(sp)
        // mips32::int::disable_timer_interrupt();
        loop {
80028158:	0800a058 	j	80028160 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0aafc755bded502eE+0x18>
8002815c:	00000000 	nop
            match self
80028160:	8fa1001c 	lw	at,28(sp)
80028164:	24240004 	addiu	a0,at,4
80028168:	24010002 	li	at,2
                .lock
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
8002816c:	a3a10026 	sb	at,38(sp)
80028170:	a3a10027 	sb	at,39(sp)
            match self
80028174:	93a70026 	lbu	a3,38(sp)
80028178:	93a10027 	lbu	at,39(sp)
8002817c:	03a01025 	move	v0,sp
80028180:	ac410010 	sw	at,16(v0)
80028184:	24050000 	li	a1,0
80028188:	24060001 	li	a2,1
8002818c:	0c00910f 	jal	8002443c <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h958998870562b869E>
80028190:	00000000 	nop
80028194:	30410001 	andi	at,v0,0x1
80028198:	a3a10024 	sb	at,36(sp)
8002819c:	a3a30025 	sb	v1,37(sp)
800281a0:	93a10024 	lbu	at,36(sp)
800281a4:	30210001 	andi	at,at,0x1
800281a8:	1420000a 	bnez	at,800281d4 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0aafc755bded502eE+0x8c>
800281ac:	00000000 	nop
800281b0:	0800a06e 	j	800281b8 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0aafc755bded502eE+0x70>
800281b4:	00000000 	nop
                    core::hint::spin_loop();
                }
            }
        }
        // mips32::int::enable_timer_interrupt();
        SpinlockGuard { lock: self }
800281b8:	8fa1001c 	lw	at,28(sp)
800281bc:	afa10020 	sw	at,32(sp)
    }
800281c0:	8fa20020 	lw	v0,32(sp)
800281c4:	8fbf002c 	lw	ra,44(sp)
800281c8:	27bd0030 	addiu	sp,sp,48
800281cc:	03e00008 	jr	ra
800281d0:	00000000 	nop
                    core::hint::spin_loop();
800281d4:	0800a058 	j	80028160 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0aafc755bded502eE+0x18>
800281d8:	00000000 	nop

800281dc <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0ef92e8e38bfe963E>:
    pub fn lock(&self) -> SpinlockGuard<T> {
800281dc:	27bdffd0 	addiu	sp,sp,-48
800281e0:	afbf002c 	sw	ra,44(sp)
800281e4:	afa4001c 	sw	a0,28(sp)
800281e8:	afa40028 	sw	a0,40(sp)
        loop {
800281ec:	0800a07d 	j	800281f4 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0ef92e8e38bfe963E+0x18>
800281f0:	00000000 	nop
            match self
800281f4:	8fa1001c 	lw	at,28(sp)
800281f8:	2424000c 	addiu	a0,at,12
800281fc:	24010002 	li	at,2
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
80028200:	a3a10026 	sb	at,38(sp)
80028204:	a3a10027 	sb	at,39(sp)
            match self
80028208:	93a70026 	lbu	a3,38(sp)
8002820c:	93a10027 	lbu	at,39(sp)
80028210:	03a01025 	move	v0,sp
80028214:	ac410010 	sw	at,16(v0)
80028218:	24050000 	li	a1,0
8002821c:	24060001 	li	a2,1
80028220:	0c00910f 	jal	8002443c <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h958998870562b869E>
80028224:	00000000 	nop
80028228:	30410001 	andi	at,v0,0x1
8002822c:	a3a10024 	sb	at,36(sp)
80028230:	a3a30025 	sb	v1,37(sp)
80028234:	93a10024 	lbu	at,36(sp)
80028238:	30210001 	andi	at,at,0x1
8002823c:	1420000a 	bnez	at,80028268 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0ef92e8e38bfe963E+0x8c>
80028240:	00000000 	nop
80028244:	0800a093 	j	8002824c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0ef92e8e38bfe963E+0x70>
80028248:	00000000 	nop
        SpinlockGuard { lock: self }
8002824c:	8fa1001c 	lw	at,28(sp)
80028250:	afa10020 	sw	at,32(sp)
    }
80028254:	8fa20020 	lw	v0,32(sp)
80028258:	8fbf002c 	lw	ra,44(sp)
8002825c:	27bd0030 	addiu	sp,sp,48
80028260:	03e00008 	jr	ra
80028264:	00000000 	nop
                    core::hint::spin_loop();
80028268:	0800a07d 	j	800281f4 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0ef92e8e38bfe963E+0x18>
8002826c:	00000000 	nop

80028270 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E>:
    pub fn lock(&self) -> SpinlockGuard<T> {
80028270:	27bdffd0 	addiu	sp,sp,-48
80028274:	afbf002c 	sw	ra,44(sp)
80028278:	afa4001c 	sw	a0,28(sp)
8002827c:	afa40028 	sw	a0,40(sp)
        loop {
80028280:	0800a0a2 	j	80028288 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E+0x18>
80028284:	00000000 	nop
            match self
80028288:	8fa1001c 	lw	at,28(sp)
8002828c:	24240008 	addiu	a0,at,8
80028290:	24010002 	li	at,2
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
80028294:	a3a10026 	sb	at,38(sp)
80028298:	a3a10027 	sb	at,39(sp)
            match self
8002829c:	93a70026 	lbu	a3,38(sp)
800282a0:	93a10027 	lbu	at,39(sp)
800282a4:	03a01025 	move	v0,sp
800282a8:	ac410010 	sw	at,16(v0)
800282ac:	24050000 	li	a1,0
800282b0:	24060001 	li	a2,1
800282b4:	0c00910f 	jal	8002443c <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h958998870562b869E>
800282b8:	00000000 	nop
800282bc:	30410001 	andi	at,v0,0x1
800282c0:	a3a10024 	sb	at,36(sp)
800282c4:	a3a30025 	sb	v1,37(sp)
800282c8:	93a10024 	lbu	at,36(sp)
800282cc:	30210001 	andi	at,at,0x1
800282d0:	1420000a 	bnez	at,800282fc <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E+0x8c>
800282d4:	00000000 	nop
800282d8:	0800a0b8 	j	800282e0 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E+0x70>
800282dc:	00000000 	nop
        SpinlockGuard { lock: self }
800282e0:	8fa1001c 	lw	at,28(sp)
800282e4:	afa10020 	sw	at,32(sp)
    }
800282e8:	8fa20020 	lw	v0,32(sp)
800282ec:	8fbf002c 	lw	ra,44(sp)
800282f0:	27bd0030 	addiu	sp,sp,48
800282f4:	03e00008 	jr	ra
800282f8:	00000000 	nop
                    core::hint::spin_loop();
800282fc:	0800a0a2 	j	80028288 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E+0x18>
80028300:	00000000 	nop

80028304 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h68584dfc84a2f97fE>:
    pub fn lock(&self) -> SpinlockGuard<T> {
80028304:	27bdffd0 	addiu	sp,sp,-48
80028308:	afbf002c 	sw	ra,44(sp)
8002830c:	afa4001c 	sw	a0,28(sp)
80028310:	afa40028 	sw	a0,40(sp)
        loop {
80028314:	0800a0c7 	j	8002831c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h68584dfc84a2f97fE+0x18>
80028318:	00000000 	nop
8002831c:	8fa4001c 	lw	a0,28(sp)
80028320:	24010002 	li	at,2
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
80028324:	a3a10026 	sb	at,38(sp)
80028328:	a3a10027 	sb	at,39(sp)
            match self
8002832c:	93a70026 	lbu	a3,38(sp)
80028330:	93a10027 	lbu	at,39(sp)
80028334:	03a01025 	move	v0,sp
80028338:	ac410010 	sw	at,16(v0)
8002833c:	24050000 	li	a1,0
80028340:	24060001 	li	a2,1
80028344:	0c00910f 	jal	8002443c <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h958998870562b869E>
80028348:	00000000 	nop
8002834c:	30410001 	andi	at,v0,0x1
80028350:	a3a10024 	sb	at,36(sp)
80028354:	a3a30025 	sb	v1,37(sp)
80028358:	93a10024 	lbu	at,36(sp)
8002835c:	30210001 	andi	at,at,0x1
80028360:	1420000a 	bnez	at,8002838c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h68584dfc84a2f97fE+0x88>
80028364:	00000000 	nop
80028368:	0800a0dc 	j	80028370 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h68584dfc84a2f97fE+0x6c>
8002836c:	00000000 	nop
        SpinlockGuard { lock: self }
80028370:	8fa1001c 	lw	at,28(sp)
80028374:	afa10020 	sw	at,32(sp)
    }
80028378:	8fa20020 	lw	v0,32(sp)
8002837c:	8fbf002c 	lw	ra,44(sp)
80028380:	27bd0030 	addiu	sp,sp,48
80028384:	03e00008 	jr	ra
80028388:	00000000 	nop
                    core::hint::spin_loop();
8002838c:	0800a0c7 	j	8002831c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h68584dfc84a2f97fE+0x18>
80028390:	00000000 	nop

80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>:
    pub fn lock(&self) -> SpinlockGuard<T> {
80028394:	27bdffd0 	addiu	sp,sp,-48
80028398:	afbf002c 	sw	ra,44(sp)
8002839c:	afa4001c 	sw	a0,28(sp)
800283a0:	afa40028 	sw	a0,40(sp)
        loop {
800283a4:	0800a0eb 	j	800283ac <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE+0x18>
800283a8:	00000000 	nop
            match self
800283ac:	8fa1001c 	lw	at,28(sp)
800283b0:	24240008 	addiu	a0,at,8
800283b4:	24010002 	li	at,2
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
800283b8:	a3a10026 	sb	at,38(sp)
800283bc:	a3a10027 	sb	at,39(sp)
            match self
800283c0:	93a70026 	lbu	a3,38(sp)
800283c4:	93a10027 	lbu	at,39(sp)
800283c8:	03a01025 	move	v0,sp
800283cc:	ac410010 	sw	at,16(v0)
800283d0:	24050000 	li	a1,0
800283d4:	24060001 	li	a2,1
800283d8:	0c00910f 	jal	8002443c <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h958998870562b869E>
800283dc:	00000000 	nop
800283e0:	30410001 	andi	at,v0,0x1
800283e4:	a3a10024 	sb	at,36(sp)
800283e8:	a3a30025 	sb	v1,37(sp)
800283ec:	93a10024 	lbu	at,36(sp)
800283f0:	30210001 	andi	at,at,0x1
800283f4:	1420000a 	bnez	at,80028420 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE+0x8c>
800283f8:	00000000 	nop
800283fc:	0800a101 	j	80028404 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE+0x70>
80028400:	00000000 	nop
        SpinlockGuard { lock: self }
80028404:	8fa1001c 	lw	at,28(sp)
80028408:	afa10020 	sw	at,32(sp)
    }
8002840c:	8fa20020 	lw	v0,32(sp)
80028410:	8fbf002c 	lw	ra,44(sp)
80028414:	27bd0030 	addiu	sp,sp,48
80028418:	03e00008 	jr	ra
8002841c:	00000000 	nop
                    core::hint::spin_loop();
80028420:	0800a0eb 	j	800283ac <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE+0x18>
80028424:	00000000 	nop

80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>:
    pub fn lock(&self) -> SpinlockGuard<T> {
80028428:	27bdffd0 	addiu	sp,sp,-48
8002842c:	afbf002c 	sw	ra,44(sp)
80028430:	afa4001c 	sw	a0,28(sp)
80028434:	afa40028 	sw	a0,40(sp)
        loop {
80028438:	0800a110 	j	80028440 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE+0x18>
8002843c:	00000000 	nop
            match self
80028440:	8fa1001c 	lw	at,28(sp)
80028444:	2424000c 	addiu	a0,at,12
80028448:	24010002 	li	at,2
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
8002844c:	a3a10026 	sb	at,38(sp)
80028450:	a3a10027 	sb	at,39(sp)
            match self
80028454:	93a70026 	lbu	a3,38(sp)
80028458:	93a10027 	lbu	at,39(sp)
8002845c:	03a01025 	move	v0,sp
80028460:	ac410010 	sw	at,16(v0)
80028464:	24050000 	li	a1,0
80028468:	24060001 	li	a2,1
8002846c:	0c00910f 	jal	8002443c <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h958998870562b869E>
80028470:	00000000 	nop
80028474:	30410001 	andi	at,v0,0x1
80028478:	a3a10024 	sb	at,36(sp)
8002847c:	a3a30025 	sb	v1,37(sp)
80028480:	93a10024 	lbu	at,36(sp)
80028484:	30210001 	andi	at,at,0x1
80028488:	1420000a 	bnez	at,800284b4 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE+0x8c>
8002848c:	00000000 	nop
80028490:	0800a126 	j	80028498 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE+0x70>
80028494:	00000000 	nop
        SpinlockGuard { lock: self }
80028498:	8fa1001c 	lw	at,28(sp)
8002849c:	afa10020 	sw	at,32(sp)
    }
800284a0:	8fa20020 	lw	v0,32(sp)
800284a4:	8fbf002c 	lw	ra,44(sp)
800284a8:	27bd0030 	addiu	sp,sp,48
800284ac:	03e00008 	jr	ra
800284b0:	00000000 	nop
                    core::hint::spin_loop();
800284b4:	0800a110 	j	80028440 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE+0x18>
800284b8:	00000000 	nop

800284bc <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hae82e6dd53aa81afE>:
    pub fn lock(&self) -> SpinlockGuard<T> {
800284bc:	27bdffd0 	addiu	sp,sp,-48
800284c0:	afbf002c 	sw	ra,44(sp)
800284c4:	afa4001c 	sw	a0,28(sp)
800284c8:	afa40028 	sw	a0,40(sp)
        loop {
800284cc:	0800a135 	j	800284d4 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hae82e6dd53aa81afE+0x18>
800284d0:	00000000 	nop
            match self
800284d4:	8fa1001c 	lw	at,28(sp)
800284d8:	24240004 	addiu	a0,at,4
800284dc:	24010002 	li	at,2
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
800284e0:	a3a10026 	sb	at,38(sp)
800284e4:	a3a10027 	sb	at,39(sp)
            match self
800284e8:	93a70026 	lbu	a3,38(sp)
800284ec:	93a10027 	lbu	at,39(sp)
800284f0:	03a01025 	move	v0,sp
800284f4:	ac410010 	sw	at,16(v0)
800284f8:	24050000 	li	a1,0
800284fc:	24060001 	li	a2,1
80028500:	0c00910f 	jal	8002443c <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h958998870562b869E>
80028504:	00000000 	nop
80028508:	30410001 	andi	at,v0,0x1
8002850c:	a3a10024 	sb	at,36(sp)
80028510:	a3a30025 	sb	v1,37(sp)
80028514:	93a10024 	lbu	at,36(sp)
80028518:	30210001 	andi	at,at,0x1
8002851c:	1420000a 	bnez	at,80028548 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hae82e6dd53aa81afE+0x8c>
80028520:	00000000 	nop
80028524:	0800a14b 	j	8002852c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hae82e6dd53aa81afE+0x70>
80028528:	00000000 	nop
        SpinlockGuard { lock: self }
8002852c:	8fa1001c 	lw	at,28(sp)
80028530:	afa10020 	sw	at,32(sp)
    }
80028534:	8fa20020 	lw	v0,32(sp)
80028538:	8fbf002c 	lw	ra,44(sp)
8002853c:	27bd0030 	addiu	sp,sp,48
80028540:	03e00008 	jr	ra
80028544:	00000000 	nop
                    core::hint::spin_loop();
80028548:	0800a135 	j	800284d4 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hae82e6dd53aa81afE+0x18>
8002854c:	00000000 	nop

80028550 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0013e0edbe0f49f5E>:
    ///
    /// That is, this conversion is whatever the implementation of
    /// <code>[From]&lt;T&gt; for U</code> chooses to do.
    #[inline]
    #[track_caller]
    fn into(self) -> U {
80028550:	27bdffe8 	addiu	sp,sp,-24
80028554:	afbf0014 	sw	ra,20(sp)
80028558:	afa40010 	sw	a0,16(sp)
        U::from(self)
8002855c:	0c00b7e4 	jal	8002df90 <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h52e5b04f9f6c250dE>
80028560:	00000000 	nop
    }
80028564:	8fbf0014 	lw	ra,20(sp)
80028568:	27bd0018 	addiu	sp,sp,24
8002856c:	03e00008 	jr	ra
80028570:	00000000 	nop

80028574 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h17656a36cc061ea7E>:
    fn into(self) -> U {
80028574:	27bdfff8 	addiu	sp,sp,-8
80028578:	a3a40006 	sb	a0,6(sp)
8002857c:	a3a40007 	sb	a0,7(sp)
            // Rustdocs on the impl block show a "[+] show undocumented items" toggle.
            // Rustdocs on functions do not.
            #[doc = $doc]
            #[inline(always)]
            fn from(small: $Small) -> Self {
                small as Self
80028580:	308200ff 	andi	v0,a0,0xff
80028584:	27bd0008 	addiu	sp,sp,8
    }
80028588:	03e00008 	jr	ra
8002858c:	00000000 	nop

80028590 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6d9b2e3e75ed018fE>:
    fn into(self) -> U {
80028590:	27bdffe8 	addiu	sp,sp,-24
80028594:	afbf0014 	sw	ra,20(sp)
80028598:	afa40010 	sw	a0,16(sp)
        U::from(self)
8002859c:	0c00b154 	jal	8002c550 <_ZN85_$LT$mos_6502..mm..pgtable..Permssion$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17hd92ecfd8b39a57f5E>
800285a0:	00000000 	nop
    }
800285a4:	8fbf0014 	lw	ra,20(sp)
800285a8:	27bd0018 	addiu	sp,sp,24
800285ac:	03e00008 	jr	ra
800285b0:	00000000 	nop

800285b4 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6e0fe35b4ecbef46E>:
    fn into(self) -> U {
800285b4:	27bdffe0 	addiu	sp,sp,-32
800285b8:	afbf001c 	sw	ra,28(sp)
800285bc:	afa40014 	sw	a0,20(sp)
800285c0:	8fa10014 	lw	at,20(sp)
800285c4:	afa10010 	sw	at,16(sp)
        U::from(self)
800285c8:	8fa10010 	lw	at,16(sp)
800285cc:	afa10018 	sw	at,24(sp)
800285d0:	8fa40018 	lw	a0,24(sp)
800285d4:	0c00ae4e 	jal	8002b938 <_ZN8mos_65022mm4addr100_$LT$impl$u20$core..convert..From$LT$mos_6502..mm..addr..VirtAddr$GT$$u20$for$u20$$BP$mut$u20$u8$GT$4from17h94cdde96531b8f83E>
800285d8:	00000000 	nop
    }
800285dc:	8fbf001c 	lw	ra,28(sp)
800285e0:	27bd0020 	addiu	sp,sp,32
800285e4:	03e00008 	jr	ra
800285e8:	00000000 	nop

800285ec <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h7c2bae688c333c46E>:
    fn into(self) -> U {
800285ec:	27bdffe0 	addiu	sp,sp,-32
800285f0:	afbf001c 	sw	ra,28(sp)
800285f4:	afa40014 	sw	a0,20(sp)
        U::from(self)
800285f8:	0c00af03 	jal	8002bc0c <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h3e418a96ab495ffdE>
800285fc:	00000000 	nop
80028600:	afa20018 	sw	v0,24(sp)
80028604:	8fa10018 	lw	at,24(sp)
80028608:	afa10010 	sw	at,16(sp)
    }
8002860c:	8fa20010 	lw	v0,16(sp)
80028610:	8fbf001c 	lw	ra,28(sp)
80028614:	27bd0020 	addiu	sp,sp,32
80028618:	03e00008 	jr	ra
8002861c:	00000000 	nop

80028620 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h9420ff84c4f782caE>:
    fn into(self) -> U {
80028620:	27bdffe0 	addiu	sp,sp,-32
80028624:	afbf001c 	sw	ra,28(sp)
80028628:	afa40014 	sw	a0,20(sp)
        U::from(self)
8002862c:	0c00af0f 	jal	8002bc3c <_ZN81_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h35d26bde8ffa8759E>
80028630:	00000000 	nop
80028634:	afa20018 	sw	v0,24(sp)
80028638:	8fa10018 	lw	at,24(sp)
8002863c:	afa10010 	sw	at,16(sp)
    }
80028640:	8fa20010 	lw	v0,16(sp)
80028644:	8fbf001c 	lw	ra,28(sp)
80028648:	27bd0020 	addiu	sp,sp,32
8002864c:	03e00008 	jr	ra
80028650:	00000000 	nop

80028654 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h950601929f6994a6E>:
    fn into(self) -> U {
80028654:	27bdffe8 	addiu	sp,sp,-24
80028658:	afbf0014 	sw	ra,20(sp)
8002865c:	afa40010 	sw	a0,16(sp)
        U::from(self)
80028660:	0c00adbb 	jal	8002b6ec <_ZN98_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h33637e9815f1d4c3E>
80028664:	00000000 	nop
    }
80028668:	8fbf0014 	lw	ra,20(sp)
8002866c:	27bd0018 	addiu	sp,sp,24
80028670:	03e00008 	jr	ra
80028674:	00000000 	nop

80028678 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hd126ae0f23650c4dE>:
    fn into(self) -> U {
80028678:	27bdffe0 	addiu	sp,sp,-32
8002867c:	afbf001c 	sw	ra,28(sp)
80028680:	afa40014 	sw	a0,20(sp)
80028684:	8fa10014 	lw	at,20(sp)
80028688:	afa10010 	sw	at,16(sp)
        U::from(self)
8002868c:	8fa10010 	lw	at,16(sp)
80028690:	afa10018 	sw	at,24(sp)
80028694:	8fa40018 	lw	a0,24(sp)
80028698:	0c00af1c 	jal	8002bc70 <_ZN8mos_65022mm4addr91_$LT$impl$u20$core..convert..From$LT$mos_6502..mm..addr..VirtAddr$GT$$u20$for$u20$usize$GT$4from17hc202def1533f7ccbE>
8002869c:	00000000 	nop
    }
800286a0:	8fbf001c 	lw	ra,28(sp)
800286a4:	27bd0020 	addiu	sp,sp,32
800286a8:	03e00008 	jr	ra
800286ac:	00000000 	nop

800286b0 <_ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17hfe8d664b2c764c88E>:
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
800286b0:	27bdffe0 	addiu	sp,sp,-32
800286b4:	afbf001c 	sw	ra,28(sp)
800286b8:	afa50010 	sw	a1,16(sp)
800286bc:	00800825 	move	at,a0
800286c0:	8fa40010 	lw	a0,16(sp)
800286c4:	afa10014 	sw	at,20(sp)
800286c8:	afa40018 	sw	a0,24(sp)
800286cc:	3c018105 	lui	at,0x8105
800286d0:	2425eda4 	addiu	a1,at,-4700
800286d4:	24060005 	li	a2,5
800286d8:	0c010a61 	jal	80042984 <_ZN4core3fmt9Formatter9write_str17h2077d209297f8673E>
800286dc:	00000000 	nop
800286e0:	8fbf001c 	lw	ra,28(sp)
800286e4:	27bd0020 	addiu	sp,sp,32
800286e8:	03e00008 	jr	ra
800286ec:	00000000 	nop

800286f0 <_ZN59_$LT$alloc..alloc..Global$u20$as$u20$core..clone..Clone$GT$5clone17h797a6757223e2564E>:
/// if there is one, or the `std` crate’s default.
///
/// Note: while this type is unstable, the functionality it provides can be
/// accessed through the [free functions in `alloc`](self#functions).
#[unstable(feature = "allocator_api", issue = "32838")]
#[derive(Copy, Clone, Default, Debug)]
800286f0:	27bdfff8 	addiu	sp,sp,-8
800286f4:	afa40004 	sw	a0,4(sp)
800286f8:	27bd0008 	addiu	sp,sp,8
800286fc:	03e00008 	jr	ra
80028700:	00000000 	nop

80028704 <_ZN5alloc2rc10RcInnerPtr10dec_strong17h54f7cdd86893b794E>:
            abort();
        }
    }

    #[inline]
    fn dec_strong(&self) {
80028704:	27bdffd8 	addiu	sp,sp,-40
80028708:	afbf0024 	sw	ra,36(sp)
8002870c:	afa40014 	sw	a0,20(sp)
80028710:	afa4001c 	sw	a0,28(sp)
80028714:	afa40020 	sw	a0,32(sp)
        self.strong_ref().set(self.strong() - 1);
80028718:	0c00a216 	jal	80028858 <_ZN5alloc2rc10RcInnerPtr6strong17he0227700128eb508E>
8002871c:	00000000 	nop
80028720:	2441ffff 	addiu	at,v0,-1
80028724:	afa10018 	sw	at,24(sp)
80028728:	1040000b 	beqz	v0,80028758 <_ZN5alloc2rc10RcInnerPtr10dec_strong17h54f7cdd86893b794E+0x54>
8002872c:	00000000 	nop
80028730:	0800a1ce 	j	80028738 <_ZN5alloc2rc10RcInnerPtr10dec_strong17h54f7cdd86893b794E+0x34>
80028734:	00000000 	nop
80028738:	8fa50018 	lw	a1,24(sp)
8002873c:	8fa40014 	lw	a0,20(sp)
80028740:	0c008f06 	jal	80023c18 <_ZN4core4cell13Cell$LT$T$GT$3set17h4ee035cbf7f1ed59E>
80028744:	00000000 	nop
    }
80028748:	8fbf0024 	lw	ra,36(sp)
8002874c:	27bd0028 	addiu	sp,sp,40
80028750:	03e00008 	jr	ra
80028754:	00000000 	nop
        self.strong_ref().set(self.strong() - 1);
80028758:	3c018105 	lui	at,0x8105
8002875c:	2424ee14 	addiu	a0,at,-4588
80028760:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80028764:	00000000 	nop

80028768 <_ZN5alloc2rc10RcInnerPtr10inc_strong17h2c1a1a0d4120e18aE>:
    fn inc_strong(&self) {
80028768:	27bdffb8 	addiu	sp,sp,-72
8002876c:	afbf0044 	sw	ra,68(sp)
80028770:	afa40018 	sw	a0,24(sp)
80028774:	afa40024 	sw	a0,36(sp)
        let strong = self.strong();
80028778:	0c00a216 	jal	80028858 <_ZN5alloc2rc10RcInnerPtr6strong17he0227700128eb508E>
8002877c:	00000000 	nop
80028780:	00400825 	move	at,v0
80028784:	afa1001c 	sw	at,28(sp)
80028788:	afa20028 	sw	v0,40(sp)
            hint::assert_unchecked(strong != 0);
8002878c:	0002082b 	sltu	at,zero,v0
80028790:	afa10020 	sw	at,32(sp)
80028794:	a3a1003f 	sb	at,63(sp)
        ub_checks::assert_unsafe_precondition!(
80028798:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
8002879c:	00000000 	nop
800287a0:	10400009 	beqz	v0,800287c8 <_ZN5alloc2rc10RcInnerPtr10inc_strong17h2c1a1a0d4120e18aE+0x60>
800287a4:	00000000 	nop
800287a8:	0800a1ec 	j	800287b0 <_ZN5alloc2rc10RcInnerPtr10inc_strong17h2c1a1a0d4120e18aE+0x48>
800287ac:	00000000 	nop
800287b0:	8fa10020 	lw	at,32(sp)
800287b4:	30240001 	andi	a0,at,0x1
800287b8:	0c0090ec 	jal	800243b0 <_ZN4core4hint16assert_unchecked18precondition_check17h80165d02f177c4d8E>
800287bc:	00000000 	nop
800287c0:	0800a1f2 	j	800287c8 <_ZN5alloc2rc10RcInnerPtr10inc_strong17h2c1a1a0d4120e18aE+0x60>
800287c4:	00000000 	nop
800287c8:	8fa40018 	lw	a0,24(sp)
800287cc:	8fa1001c 	lw	at,28(sp)
800287d0:	afa10034 	sw	at,52(sp)
800287d4:	24020001 	li	v0,1
800287d8:	afa20038 	sw	v0,56(sp)
            intrinsics::wrapping_add(self, rhs)
800287dc:	24250001 	addiu	a1,at,1
800287e0:	afa50014 	sw	a1,20(sp)
        let strong = strong.wrapping_add(1);
800287e4:	afa5002c 	sw	a1,44(sp)
800287e8:	afa40040 	sw	a0,64(sp)
        self.strong_ref().set(strong);
800287ec:	0c008f06 	jal	80023c18 <_ZN4core4cell13Cell$LT$T$GT$3set17h4ee035cbf7f1ed59E>
800287f0:	00000000 	nop
800287f4:	8fa10014 	lw	at,20(sp)
        if core::intrinsics::unlikely(strong == 0) {
800287f8:	2c210001 	sltiu	at,at,1
800287fc:	a3a10033 	sb	at,51(sp)
80028800:	93a10033 	lbu	at,51(sp)
80028804:	30210001 	andi	at,at,0x1
80028808:	14200007 	bnez	at,80028828 <_ZN5alloc2rc10RcInnerPtr10inc_strong17h2c1a1a0d4120e18aE+0xc0>
8002880c:	00000000 	nop
80028810:	0800a206 	j	80028818 <_ZN5alloc2rc10RcInnerPtr10inc_strong17h2c1a1a0d4120e18aE+0xb0>
80028814:	00000000 	nop
    }
80028818:	8fbf0044 	lw	ra,68(sp)
8002881c:	27bd0048 	addiu	sp,sp,72
80028820:	03e00008 	jr	ra
80028824:	00000000 	nop
            abort();
80028828:	0000000d 	break

8002882c <_ZN5alloc2rc10RcInnerPtr4weak17h59fab429a7e359ebE>:

    #[inline]
    fn weak(&self) -> usize {
8002882c:	27bdffe0 	addiu	sp,sp,-32
80028830:	afbf001c 	sw	ra,28(sp)
80028834:	afa40014 	sw	a0,20(sp)
80028838:	afa40018 	sw	a0,24(sp)
}

impl<T: ?Sized> RcInnerPtr for RcBox<T> {
    #[inline(always)]
    fn weak_ref(&self) -> &Cell<usize> {
        &self.weak
8002883c:	24840004 	addiu	a0,a0,4
        self.weak_ref().get()
80028840:	0c008ee4 	jal	80023b90 <_ZN4core4cell13Cell$LT$T$GT$3get17h15b032da270adab1E>
80028844:	00000000 	nop
    }
80028848:	8fbf001c 	lw	ra,28(sp)
8002884c:	27bd0020 	addiu	sp,sp,32
80028850:	03e00008 	jr	ra
80028854:	00000000 	nop

80028858 <_ZN5alloc2rc10RcInnerPtr6strong17he0227700128eb508E>:
    fn strong(&self) -> usize {
80028858:	27bdffe0 	addiu	sp,sp,-32
8002885c:	afbf001c 	sw	ra,28(sp)
80028860:	afa40014 	sw	a0,20(sp)
80028864:	afa40018 	sw	a0,24(sp)
        self.strong_ref().get()
80028868:	0c008ee4 	jal	80023b90 <_ZN4core4cell13Cell$LT$T$GT$3get17h15b032da270adab1E>
8002886c:	00000000 	nop
    }
80028870:	8fbf001c 	lw	ra,28(sp)
80028874:	27bd0020 	addiu	sp,sp,32
80028878:	03e00008 	jr	ra
8002887c:	00000000 	nop

80028880 <_ZN5alloc2rc10RcInnerPtr8dec_weak17hcd8b5c39ee0e31b2E>:
    fn dec_weak(&self) {
80028880:	27bdffd8 	addiu	sp,sp,-40
80028884:	afbf0024 	sw	ra,36(sp)
80028888:	afa4001c 	sw	a0,28(sp)
8002888c:	afa40020 	sw	a0,32(sp)
        &self.weak
80028890:	24810004 	addiu	at,a0,4
80028894:	afa10014 	sw	at,20(sp)
        self.weak_ref().set(self.weak() - 1);
80028898:	0c00a20b 	jal	8002882c <_ZN5alloc2rc10RcInnerPtr4weak17h59fab429a7e359ebE>
8002889c:	00000000 	nop
800288a0:	2441ffff 	addiu	at,v0,-1
800288a4:	afa10018 	sw	at,24(sp)
800288a8:	1040000b 	beqz	v0,800288d8 <_ZN5alloc2rc10RcInnerPtr8dec_weak17hcd8b5c39ee0e31b2E+0x58>
800288ac:	00000000 	nop
800288b0:	0800a22e 	j	800288b8 <_ZN5alloc2rc10RcInnerPtr8dec_weak17hcd8b5c39ee0e31b2E+0x38>
800288b4:	00000000 	nop
800288b8:	8fa50018 	lw	a1,24(sp)
800288bc:	8fa40014 	lw	a0,20(sp)
800288c0:	0c008f06 	jal	80023c18 <_ZN4core4cell13Cell$LT$T$GT$3set17h4ee035cbf7f1ed59E>
800288c4:	00000000 	nop
    }
800288c8:	8fbf0024 	lw	ra,36(sp)
800288cc:	27bd0028 	addiu	sp,sp,40
800288d0:	03e00008 	jr	ra
800288d4:	00000000 	nop
        self.weak_ref().set(self.weak() - 1);
800288d8:	3c018105 	lui	at,0x8105
800288dc:	2424ee24 	addiu	a0,at,-4572
800288e0:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800288e4:	00000000 	nop

800288e8 <_ZN5alloc2rc11Rc$LT$T$GT$10from_inner17h2de84b2e1d97e858E>:
    unsafe fn from_inner(ptr: NonNull<RcBox<T>>) -> Self {
800288e8:	27bdffe8 	addiu	sp,sp,-24
800288ec:	afbf0014 	sw	ra,20(sp)
800288f0:	afa40010 	sw	a0,16(sp)
        unsafe { Self::from_inner_in(ptr, Global) }
800288f4:	0c00a279 	jal	800289e4 <_ZN5alloc2rc15Rc$LT$T$C$A$GT$13from_inner_in17he0632643cbaa8ef7E>
800288f8:	00000000 	nop
    }
800288fc:	8fbf0014 	lw	ra,20(sp)
80028900:	27bd0018 	addiu	sp,sp,24
80028904:	03e00008 	jr	ra
80028908:	00000000 	nop

8002890c <_ZN5alloc2rc11Rc$LT$T$GT$3new17h1f0944bf899dca9bE>:
    pub fn new(value: T) -> Rc<T> {
8002890c:	27bdffc8 	addiu	sp,sp,-56
80028910:	afbf0034 	sw	ra,52(sp)
80028914:	afa40018 	sw	a0,24(sp)
80028918:	24040001 	li	a0,1
8002891c:	afa40010 	sw	a0,16(sp)
                Box::leak(Box::new(RcBox { strong: Cell::new(1), weak: Cell::new(1), value }))
80028920:	0c008efc 	jal	80023bf0 <_ZN4core4cell13Cell$LT$T$GT$3new17he60fa7228b378193E>
80028924:	00000000 	nop
80028928:	8fa40010 	lw	a0,16(sp)
8002892c:	afa20014 	sw	v0,20(sp)
80028930:	0c008efc 	jal	80023bf0 <_ZN4core4cell13Cell$LT$T$GT$3new17he60fa7228b378193E>
80028934:	00000000 	nop
80028938:	8fa10014 	lw	at,20(sp)
8002893c:	8fa40018 	lw	a0,24(sp)
80028940:	afa1001c 	sw	at,28(sp)
80028944:	afa20020 	sw	v0,32(sp)
80028948:	8c81000c 	lw	at,12(a0)
8002894c:	afa10030 	sw	at,48(sp)
80028950:	8c810008 	lw	at,8(a0)
80028954:	afa1002c 	sw	at,44(sp)
80028958:	8c810004 	lw	at,4(a0)
8002895c:	afa10028 	sw	at,40(sp)
80028960:	8c810000 	lw	at,0(a0)
80028964:	afa10024 	sw	at,36(sp)
80028968:	24040018 	li	a0,24
8002896c:	24050004 	li	a1,4
80028970:	0c00a3a5 	jal	80028e94 <_ZN5alloc5alloc15exchange_malloc17h1392ccc4678b1d28E>
80028974:	00000000 	nop
80028978:	00402025 	move	a0,v0
8002897c:	8fa10030 	lw	at,48(sp)
80028980:	ac810014 	sw	at,20(a0)
80028984:	8fa1002c 	lw	at,44(sp)
80028988:	ac810010 	sw	at,16(a0)
8002898c:	8fa10028 	lw	at,40(sp)
80028990:	ac81000c 	sw	at,12(a0)
80028994:	8fa10024 	lw	at,36(sp)
80028998:	ac810008 	sw	at,8(a0)
8002899c:	8fa10020 	lw	at,32(sp)
800289a0:	ac810004 	sw	at,4(a0)
800289a4:	8fa1001c 	lw	at,28(sp)
800289a8:	ac810000 	sw	at,0(a0)
800289ac:	0c00a469 	jal	800291a4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h47a0d5edbe5c4fcaE>
800289b0:	00000000 	nop
800289b4:	00402025 	move	a0,v0
800289b8:	3c018105 	lui	at,0x8105
800289bc:	2425ee34 	addiu	a1,at,-4556
800289c0:	0c00a195 	jal	80028654 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h950601929f6994a6E>
800289c4:	00000000 	nop
800289c8:	00402025 	move	a0,v0
            Self::from_inner(
800289cc:	0c00a23a 	jal	800288e8 <_ZN5alloc2rc11Rc$LT$T$GT$10from_inner17h2de84b2e1d97e858E>
800289d0:	00000000 	nop
    }
800289d4:	8fbf0034 	lw	ra,52(sp)
800289d8:	27bd0038 	addiu	sp,sp,56
800289dc:	03e00008 	jr	ra
800289e0:	00000000 	nop

800289e4 <_ZN5alloc2rc15Rc$LT$T$C$A$GT$13from_inner_in17he0632643cbaa8ef7E>:
    unsafe fn from_inner_in(ptr: NonNull<RcBox<T>>, alloc: A) -> Self {
800289e4:	27bdfff0 	addiu	sp,sp,-16
800289e8:	afa40008 	sw	a0,8(sp)
        Self { ptr, phantom: PhantomData, alloc }
800289ec:	afa40004 	sw	a0,4(sp)
    }
800289f0:	8fa20004 	lw	v0,4(sp)
800289f4:	27bd0010 	addiu	sp,sp,16
800289f8:	03e00008 	jr	ra
800289fc:	00000000 	nop

80028a00 <_ZN5alloc2rc15Rc$LT$T$C$A$GT$17get_mut_unchecked17hdca037b0946a672fE>:
    pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {
80028a00:	27bdfff8 	addiu	sp,sp,-8
80028a04:	afa40000 	sw	a0,0(sp)
        unsafe { &mut (*this.ptr.as_ptr()).value }
80028a08:	8c810000 	lw	at,0(a0)
80028a0c:	afa10004 	sw	at,4(sp)
80028a10:	24220008 	addiu	v0,at,8
80028a14:	27bd0008 	addiu	sp,sp,8
    }
80028a18:	03e00008 	jr	ra
80028a1c:	00000000 	nop

80028a20 <_ZN5alloc3vec12Vec$LT$T$GT$13with_capacity17h4cf7e88b602a5b42E>:
    /// ```
    #[cfg(not(no_global_oom_handling))]
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[must_use]
    pub fn with_capacity(capacity: usize) -> Self {
80028a20:	27bdffe0 	addiu	sp,sp,-32
80028a24:	afbf001c 	sw	ra,28(sp)
80028a28:	00800825 	move	at,a0
80028a2c:	afa10014 	sw	at,20(sp)
80028a30:	afa50018 	sw	a1,24(sp)
        Self::with_capacity_in(capacity, Global)
80028a34:	0c00a2bd 	jal	80028af4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$16with_capacity_in17hc634e5966b8de2f9E>
80028a38:	00000000 	nop
80028a3c:	8fa20014 	lw	v0,20(sp)
    }
80028a40:	8fbf001c 	lw	ra,28(sp)
80028a44:	27bd0020 	addiu	sp,sp,32
80028a48:	03e00008 	jr	ra
80028a4c:	00000000 	nop

80028a50 <_ZN5alloc3vec12Vec$LT$T$GT$3new17h37505ab21e2811ebE>:
    pub const fn new() -> Self {
80028a50:	00801025 	move	v0,a0
        Vec { buf: RawVec::NEW, len: 0 }
80028a54:	ac800000 	sw	zero,0(a0)
80028a58:	24010004 	li	at,4
80028a5c:	ac810004 	sw	at,4(a0)
80028a60:	ac800008 	sw	zero,8(a0)
    }
80028a64:	03e00008 	jr	ra
80028a68:	00000000 	nop

80028a6c <_ZN5alloc3vec12Vec$LT$T$GT$3new17h46fb7808c2195195E>:
    pub const fn new() -> Self {
80028a6c:	00801025 	move	v0,a0
        Vec { buf: RawVec::NEW, len: 0 }
80028a70:	ac800000 	sw	zero,0(a0)
80028a74:	24010004 	li	at,4
80028a78:	ac810004 	sw	at,4(a0)
80028a7c:	ac800008 	sw	zero,8(a0)
    }
80028a80:	03e00008 	jr	ra
80028a84:	00000000 	nop

80028a88 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2573061870b0bc35E>:
    /// [`as_mut_ptr`]: Vec::as_mut_ptr
    /// [`as_ptr`]: Vec::as_ptr
    #[stable(feature = "vec_as_ptr", since = "1.37.0")]
    #[rustc_never_returns_null_ptr]
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
80028a88:	27bdffe8 	addiu	sp,sp,-24
80028a8c:	afbf0014 	sw	ra,20(sp)
80028a90:	afa40010 	sw	a0,16(sp)
        // We shadow the slice method of the same name to avoid going through
        // `deref_mut`, which creates an intermediate reference.
        self.buf.ptr()
80028a94:	0c00a84b 	jal	8002a12c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17hec5e6711045aa626E>
80028a98:	00000000 	nop
    }
80028a9c:	8fbf0014 	lw	ra,20(sp)
80028aa0:	27bd0018 	addiu	sp,sp,24
80028aa4:	03e00008 	jr	ra
80028aa8:	00000000 	nop

80028aac <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2c3a5f7f8f93f5daE>:
    pub fn as_mut_ptr(&mut self) -> *mut T {
80028aac:	27bdffe8 	addiu	sp,sp,-24
80028ab0:	afbf0014 	sw	ra,20(sp)
80028ab4:	afa40010 	sw	a0,16(sp)
        self.buf.ptr()
80028ab8:	0c00a841 	jal	8002a104 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17he4175b2aeb18ad4fE>
80028abc:	00000000 	nop
    }
80028ac0:	8fbf0014 	lw	ra,20(sp)
80028ac4:	27bd0018 	addiu	sp,sp,24
80028ac8:	03e00008 	jr	ra
80028acc:	00000000 	nop

80028ad0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h9786e2b221aaa450E>:
    pub fn as_mut_ptr(&mut self) -> *mut T {
80028ad0:	27bdffe8 	addiu	sp,sp,-24
80028ad4:	afbf0014 	sw	ra,20(sp)
80028ad8:	afa40010 	sw	a0,16(sp)
        self.buf.ptr()
80028adc:	0c00a837 	jal	8002a0dc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h0d09177d9d493e1eE>
80028ae0:	00000000 	nop
    }
80028ae4:	8fbf0014 	lw	ra,20(sp)
80028ae8:	27bd0018 	addiu	sp,sp,24
80028aec:	03e00008 	jr	ra
80028af0:	00000000 	nop

80028af4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$16with_capacity_in17hc634e5966b8de2f9E>:
    pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
80028af4:	27bdffd8 	addiu	sp,sp,-40
80028af8:	afbf0024 	sw	ra,36(sp)
80028afc:	afa50010 	sw	a1,16(sp)
80028b00:	00800825 	move	at,a0
80028b04:	8fa40010 	lw	a0,16(sp)
80028b08:	afa10014 	sw	at,20(sp)
80028b0c:	afa10018 	sw	at,24(sp)
80028b10:	afa4001c 	sw	a0,28(sp)
        Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
80028b14:	0c00a819 	jal	8002a064 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16with_capacity_in17hc60f1203557174d3E>
80028b18:	00000000 	nop
80028b1c:	8fa40014 	lw	a0,20(sp)
80028b20:	00400825 	move	at,v0
80028b24:	8fa20018 	lw	v0,24(sp)
80028b28:	ac810000 	sw	at,0(a0)
80028b2c:	ac830004 	sw	v1,4(a0)
80028b30:	ac800008 	sw	zero,8(a0)
    }
80028b34:	8fbf0024 	lw	ra,36(sp)
80028b38:	27bd0028 	addiu	sp,sp,40
80028b3c:	03e00008 	jr	ra
80028b40:	00000000 	nop

80028b44 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h7a0a56d8b611abe1E>:
    /// assert_eq!(a.len(), 3);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_confusables("length", "size")]
    pub fn len(&self) -> usize {
80028b44:	27bdfff8 	addiu	sp,sp,-8
80028b48:	afa40004 	sw	a0,4(sp)
        self.len
80028b4c:	8c820008 	lw	v0,8(a0)
80028b50:	27bd0008 	addiu	sp,sp,8
    }
80028b54:	03e00008 	jr	ra
80028b58:	00000000 	nop

80028b5c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h7103cdc97f8d785cE>:
    pub fn push(&mut self, value: T) {
80028b5c:	27bdffc8 	addiu	sp,sp,-56
80028b60:	afbf0034 	sw	ra,52(sp)
80028b64:	afa50014 	sw	a1,20(sp)
80028b68:	afa40018 	sw	a0,24(sp)
80028b6c:	afa4001c 	sw	a0,28(sp)
        if self.len == self.buf.capacity() {
80028b70:	8c810008 	lw	at,8(a0)
80028b74:	afa40030 	sw	a0,48(sp)
    /// Gets the capacity of the allocation.
    ///
    /// This will always be `usize::MAX` if `T` is zero-sized.
    #[inline(always)]
    pub fn capacity(&self) -> usize {
        if T::IS_ZST { usize::MAX } else { self.cap.0 }
80028b78:	8c820000 	lw	v0,0(a0)
80028b7c:	afa2002c 	sw	v0,44(sp)
    }
80028b80:	8fa2002c 	lw	v0,44(sp)
80028b84:	1022001a 	beq	at,v0,80028bf0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h7103cdc97f8d785cE+0x94>
80028b88:	00000000 	nop
80028b8c:	0800a2e5 	j	80028b94 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h7103cdc97f8d785cE+0x38>
80028b90:	00000000 	nop
            let end = self.as_mut_ptr().add(self.len);
80028b94:	8fa40018 	lw	a0,24(sp)
80028b98:	0c00a2b4 	jal	80028ad0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h9786e2b221aaa450E>
80028b9c:	00000000 	nop
80028ba0:	8fa50014 	lw	a1,20(sp)
80028ba4:	8fa10018 	lw	at,24(sp)
80028ba8:	8c210008 	lw	at,8(at)
80028bac:	afa20024 	sw	v0,36(sp)
80028bb0:	afa10028 	sw	at,40(sp)
80028bb4:	00011880 	sll	v1,at,0x2
80028bb8:	000108c0 	sll	at,at,0x3
80028bbc:	00230821 	addu	at,at,v1
80028bc0:	00412021 	addu	a0,v0,at
80028bc4:	afa40020 	sw	a0,32(sp)
            ptr::write(end, value);
80028bc8:	0c008b0f 	jal	80022c3c <_ZN4core3ptr5write17h9e21150fbb2771a5E>
80028bcc:	00000000 	nop
80028bd0:	8fa10018 	lw	at,24(sp)
            self.len += 1;
80028bd4:	8c210008 	lw	at,8(at)
80028bd8:	24210001 	addiu	at,at,1
80028bdc:	afa10010 	sw	at,16(sp)
80028be0:	1020000f 	beqz	at,80028c20 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h7103cdc97f8d785cE+0xc4>
80028be4:	00000000 	nop
80028be8:	0800a301 	j	80028c04 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h7103cdc97f8d785cE+0xa8>
80028bec:	00000000 	nop
            self.buf.grow_one();
80028bf0:	8fa40018 	lw	a0,24(sp)
80028bf4:	0c00a895 	jal	8002a254 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hdeeb03b248ec99bdE>
80028bf8:	00000000 	nop
80028bfc:	0800a2e5 	j	80028b94 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h7103cdc97f8d785cE+0x38>
80028c00:	00000000 	nop
            self.len += 1;
80028c04:	8fa10010 	lw	at,16(sp)
80028c08:	8fa20018 	lw	v0,24(sp)
80028c0c:	ac410008 	sw	at,8(v0)
    }
80028c10:	8fbf0034 	lw	ra,52(sp)
80028c14:	27bd0038 	addiu	sp,sp,56
80028c18:	03e00008 	jr	ra
80028c1c:	00000000 	nop
            self.len += 1;
80028c20:	3c018105 	lui	at,0x8105
80028c24:	2424eeb4 	addiu	a0,at,-4428
80028c28:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80028c2c:	00000000 	nop

80028c30 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h769fc00e12228b06E>:
    pub fn push(&mut self, value: T) {
80028c30:	27bdffc8 	addiu	sp,sp,-56
80028c34:	afbf0034 	sw	ra,52(sp)
80028c38:	afa50014 	sw	a1,20(sp)
80028c3c:	afa40018 	sw	a0,24(sp)
80028c40:	afa4001c 	sw	a0,28(sp)
        if self.len == self.buf.capacity() {
80028c44:	8c810008 	lw	at,8(a0)
80028c48:	afa40030 	sw	a0,48(sp)
        if T::IS_ZST { usize::MAX } else { self.cap.0 }
80028c4c:	8c820000 	lw	v0,0(a0)
80028c50:	afa2002c 	sw	v0,44(sp)
    }
80028c54:	8fa2002c 	lw	v0,44(sp)
80028c58:	1022001c 	beq	at,v0,80028ccc <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h769fc00e12228b06E+0x9c>
80028c5c:	00000000 	nop
80028c60:	0800a31a 	j	80028c68 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h769fc00e12228b06E+0x38>
80028c64:	00000000 	nop
            let end = self.as_mut_ptr().add(self.len);
80028c68:	8fa40018 	lw	a0,24(sp)
80028c6c:	0c00a2a2 	jal	80028a88 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2573061870b0bc35E>
80028c70:	00000000 	nop
80028c74:	8fa50014 	lw	a1,20(sp)
80028c78:	8fa10018 	lw	at,24(sp)
80028c7c:	8c210008 	lw	at,8(at)
80028c80:	afa20024 	sw	v0,36(sp)
80028c84:	afa10028 	sw	at,40(sp)
80028c88:	00012080 	sll	a0,at,0x2
80028c8c:	00011940 	sll	v1,at,0x5
80028c90:	00641821 	addu	v1,v1,a0
80028c94:	00010a00 	sll	at,at,0x8
80028c98:	00230823 	subu	at,at,v1
80028c9c:	00412021 	addu	a0,v0,at
80028ca0:	afa40020 	sw	a0,32(sp)
            ptr::write(end, value);
80028ca4:	0c008b60 	jal	80022d80 <_ZN4core3ptr5write17hdc528238244254aaE>
80028ca8:	00000000 	nop
80028cac:	8fa10018 	lw	at,24(sp)
            self.len += 1;
80028cb0:	8c210008 	lw	at,8(at)
80028cb4:	24210001 	addiu	at,at,1
80028cb8:	afa10010 	sw	at,16(sp)
80028cbc:	1020000f 	beqz	at,80028cfc <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h769fc00e12228b06E+0xcc>
80028cc0:	00000000 	nop
80028cc4:	0800a338 	j	80028ce0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h769fc00e12228b06E+0xb0>
80028cc8:	00000000 	nop
            self.buf.grow_one();
80028ccc:	8fa40018 	lw	a0,24(sp)
80028cd0:	0c00a861 	jal	8002a184 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h41e044b9158dd496E>
80028cd4:	00000000 	nop
80028cd8:	0800a31a 	j	80028c68 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h769fc00e12228b06E+0x38>
80028cdc:	00000000 	nop
            self.len += 1;
80028ce0:	8fa10010 	lw	at,16(sp)
80028ce4:	8fa20018 	lw	v0,24(sp)
80028ce8:	ac410008 	sw	at,8(v0)
    }
80028cec:	8fbf0034 	lw	ra,52(sp)
80028cf0:	27bd0038 	addiu	sp,sp,56
80028cf4:	03e00008 	jr	ra
80028cf8:	00000000 	nop
            self.len += 1;
80028cfc:	3c018105 	lui	at,0x8105
80028d00:	2424eeb4 	addiu	a0,at,-4428
80028d04:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80028d08:	00000000 	nop

80028d0c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hf060dda13272c08dE>:
    pub fn push(&mut self, value: T) {
80028d0c:	27bdffc8 	addiu	sp,sp,-56
80028d10:	afbf0034 	sw	ra,52(sp)
80028d14:	afa50014 	sw	a1,20(sp)
80028d18:	afa40018 	sw	a0,24(sp)
80028d1c:	afa4001c 	sw	a0,28(sp)
        if self.len == self.buf.capacity() {
80028d20:	8c810008 	lw	at,8(a0)
80028d24:	afa40030 	sw	a0,48(sp)
        if T::IS_ZST { usize::MAX } else { self.cap.0 }
80028d28:	8c820000 	lw	v0,0(a0)
80028d2c:	afa2002c 	sw	v0,44(sp)
    }
80028d30:	8fa2002c 	lw	v0,44(sp)
80028d34:	10220018 	beq	at,v0,80028d98 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hf060dda13272c08dE+0x8c>
80028d38:	00000000 	nop
80028d3c:	0800a351 	j	80028d44 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hf060dda13272c08dE+0x38>
80028d40:	00000000 	nop
            let end = self.as_mut_ptr().add(self.len);
80028d44:	8fa40018 	lw	a0,24(sp)
80028d48:	0c00a2ab 	jal	80028aac <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2c3a5f7f8f93f5daE>
80028d4c:	00000000 	nop
80028d50:	8fa50014 	lw	a1,20(sp)
80028d54:	8fa10018 	lw	at,24(sp)
80028d58:	8c210008 	lw	at,8(at)
80028d5c:	afa20024 	sw	v0,36(sp)
80028d60:	afa10028 	sw	at,40(sp)
80028d64:	00010940 	sll	at,at,0x5
80028d68:	00412021 	addu	a0,v0,at
80028d6c:	afa40020 	sw	a0,32(sp)
            ptr::write(end, value);
80028d70:	0c008ab6 	jal	80022ad8 <_ZN4core3ptr5write17h3358dcdb987c4b90E>
80028d74:	00000000 	nop
80028d78:	8fa10018 	lw	at,24(sp)
            self.len += 1;
80028d7c:	8c210008 	lw	at,8(at)
80028d80:	24210001 	addiu	at,at,1
80028d84:	afa10010 	sw	at,16(sp)
80028d88:	1020000f 	beqz	at,80028dc8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hf060dda13272c08dE+0xbc>
80028d8c:	00000000 	nop
80028d90:	0800a36b 	j	80028dac <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hf060dda13272c08dE+0xa0>
80028d94:	00000000 	nop
            self.buf.grow_one();
80028d98:	8fa40018 	lw	a0,24(sp)
80028d9c:	0c00a87b 	jal	8002a1ec <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h7bd9119c9c053733E>
80028da0:	00000000 	nop
80028da4:	0800a351 	j	80028d44 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hf060dda13272c08dE+0x38>
80028da8:	00000000 	nop
            self.len += 1;
80028dac:	8fa10010 	lw	at,16(sp)
80028db0:	8fa20018 	lw	v0,24(sp)
80028db4:	ac410008 	sw	at,8(v0)
    }
80028db8:	8fbf0034 	lw	ra,52(sp)
80028dbc:	27bd0038 	addiu	sp,sp,56
80028dc0:	03e00008 	jr	ra
80028dc4:	00000000 	nop
            self.len += 1;
80028dc8:	3c018105 	lui	at,0x8105
80028dcc:	2424eeb4 	addiu	a0,at,-4428
80028dd0:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80028dd4:	00000000 	nop

80028dd8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h6676a07ce57b7a28E>:
    pub fn as_ptr(&self) -> *const T {
80028dd8:	27bdffe8 	addiu	sp,sp,-24
80028ddc:	afbf0014 	sw	ra,20(sp)
80028de0:	afa40010 	sw	a0,16(sp)
        self.buf.ptr()
80028de4:	0c00a837 	jal	8002a0dc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h0d09177d9d493e1eE>
80028de8:	00000000 	nop
    }
80028dec:	8fbf0014 	lw	ra,20(sp)
80028df0:	27bd0018 	addiu	sp,sp,24
80028df4:	03e00008 	jr	ra
80028df8:	00000000 	nop

80028dfc <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h7e63d8e2445a4f11E>:
    pub fn as_ptr(&self) -> *const T {
80028dfc:	27bdffe8 	addiu	sp,sp,-24
80028e00:	afbf0014 	sw	ra,20(sp)
80028e04:	afa40010 	sw	a0,16(sp)
        self.buf.ptr()
80028e08:	0c00a841 	jal	8002a104 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17he4175b2aeb18ad4fE>
80028e0c:	00000000 	nop
    }
80028e10:	8fbf0014 	lw	ra,20(sp)
80028e14:	27bd0018 	addiu	sp,sp,24
80028e18:	03e00008 	jr	ra
80028e1c:	00000000 	nop

80028e20 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hf8f1e446fd2f3a4dE>:
    pub fn as_ptr(&self) -> *const T {
80028e20:	27bdffe8 	addiu	sp,sp,-24
80028e24:	afbf0014 	sw	ra,20(sp)
80028e28:	afa40010 	sw	a0,16(sp)
        self.buf.ptr()
80028e2c:	0c00a84b 	jal	8002a12c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17hec5e6711045aa626E>
80028e30:	00000000 	nop
    }
80028e34:	8fbf0014 	lw	ra,20(sp)
80028e38:	27bd0018 	addiu	sp,sp,24
80028e3c:	03e00008 	jr	ra
80028e40:	00000000 	nop

80028e44 <_ZN5alloc5alloc12alloc_zeroed17h8adb90d2b6b18578E>:
/// }
/// ```
#[stable(feature = "global_alloc", since = "1.28.0")]
#[must_use = "losing the pointer will leak memory"]
#[inline]
pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
80028e44:	27bdffd8 	addiu	sp,sp,-40
80028e48:	afbf0024 	sw	ra,36(sp)
80028e4c:	afa4001c 	sw	a0,28(sp)
80028e50:	afa50020 	sw	a1,32(sp)
80028e54:	27a4001c 	addiu	a0,sp,28
80028e58:	afa40014 	sw	a0,20(sp)
    unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
80028e5c:	0c009481 	jal	80025204 <_ZN4core5alloc6layout6Layout4size17h2e77e01e84646f95E>
80028e60:	00000000 	nop
80028e64:	8fa40014 	lw	a0,20(sp)
80028e68:	afa20018 	sw	v0,24(sp)
80028e6c:	0c009487 	jal	8002521c <_ZN4core5alloc6layout6Layout5align17h7f1189006923f58aE>
80028e70:	00000000 	nop
80028e74:	8fa40018 	lw	a0,24(sp)
80028e78:	00402825 	move	a1,v0
80028e7c:	0c00dac8 	jal	80036b20 <__rust_alloc_zeroed>
80028e80:	00000000 	nop
}
80028e84:	8fbf0024 	lw	ra,36(sp)
80028e88:	27bd0028 	addiu	sp,sp,40
80028e8c:	03e00008 	jr	ra
80028e90:	00000000 	nop

80028e94 <_ZN5alloc5alloc15exchange_malloc17h1392ccc4678b1d28E>:

/// The allocator for unique pointers.
#[cfg(all(not(no_global_oom_handling), not(test)))]
#[lang = "exchange_malloc"]
#[inline]
unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {
80028e94:	27bdffc0 	addiu	sp,sp,-64
80028e98:	afbf003c 	sw	ra,60(sp)
80028e9c:	afa40024 	sw	a0,36(sp)
80028ea0:	afa50028 	sw	a1,40(sp)
    let layout = unsafe { Layout::from_size_align_unchecked(size, align) };
80028ea4:	0c00946e 	jal	800251b8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hd800459f8b083671E>
80028ea8:	00000000 	nop
80028eac:	00402825 	move	a1,v0
80028eb0:	00603025 	move	a2,v1
80028eb4:	00a01025 	move	v0,a1
80028eb8:	afa20014 	sw	v0,20(sp)
80028ebc:	00c01825 	move	v1,a2
80028ec0:	afa30018 	sw	v1,24(sp)
80028ec4:	afa5002c 	sw	a1,44(sp)
80028ec8:	afa60030 	sw	a2,48(sp)
    match Global.allocate(layout) {
80028ecc:	3c018105 	lui	at,0x8105
80028ed0:	2424e320 	addiu	a0,at,-7392
80028ed4:	0c00a8d5 	jal	8002a354 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h60f604df2057896cE>
80028ed8:	00000000 	nop
80028edc:	afa2001c 	sw	v0,28(sp)
80028ee0:	afa30020 	sw	v1,32(sp)
80028ee4:	8fa1001c 	lw	at,28(sp)
80028ee8:	1020000d 	beqz	at,80028f20 <_ZN5alloc5alloc15exchange_malloc17h1392ccc4678b1d28E+0x8c>
80028eec:	00000000 	nop
80028ef0:	0800a3be 	j	80028ef8 <_ZN5alloc5alloc15exchange_malloc17h1392ccc4678b1d28E+0x64>
80028ef4:	00000000 	nop
        Ok(ptr) => ptr.as_mut_ptr(),
80028ef8:	8fa4001c 	lw	a0,28(sp)
80028efc:	8fa50020 	lw	a1,32(sp)
80028f00:	afa40034 	sw	a0,52(sp)
80028f04:	afa50038 	sw	a1,56(sp)
80028f08:	0c00e69c 	jal	80039a70 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h334546e067f56e32E>
80028f0c:	00000000 	nop
        Err(_) => handle_alloc_error(layout),
    }
}
80028f10:	8fbf003c 	lw	ra,60(sp)
80028f14:	27bd0040 	addiu	sp,sp,64
80028f18:	03e00008 	jr	ra
80028f1c:	00000000 	nop
        Err(_) => handle_alloc_error(layout),
80028f20:	8fa50018 	lw	a1,24(sp)
80028f24:	8fa40014 	lw	a0,20(sp)
80028f28:	0c00ec3f 	jal	8003b0fc <_ZN5alloc5alloc18handle_alloc_error17h19617bae871f3d42E>
80028f2c:	00000000 	nop

80028f30 <_ZN5alloc5alloc5alloc17h0ed5887f9478560eE>:
pub unsafe fn alloc(layout: Layout) -> *mut u8 {
80028f30:	27bdffd8 	addiu	sp,sp,-40
80028f34:	afbf0024 	sw	ra,36(sp)
80028f38:	afa4001c 	sw	a0,28(sp)
80028f3c:	afa50020 	sw	a1,32(sp)
        core::ptr::read_volatile(&__rust_no_alloc_shim_is_unstable);
80028f40:	3c018105 	lui	at,0x8105
80028f44:	2424d0cc 	addiu	a0,at,-12084
80028f48:	0c00e576 	jal	800395d8 <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E>
80028f4c:	00000000 	nop
80028f50:	27a4001c 	addiu	a0,sp,28
80028f54:	afa40014 	sw	a0,20(sp)
        __rust_alloc(layout.size(), layout.align())
80028f58:	0c009481 	jal	80025204 <_ZN4core5alloc6layout6Layout4size17h2e77e01e84646f95E>
80028f5c:	00000000 	nop
80028f60:	8fa40014 	lw	a0,20(sp)
80028f64:	afa20018 	sw	v0,24(sp)
80028f68:	0c009487 	jal	8002521c <_ZN4core5alloc6layout6Layout5align17h7f1189006923f58aE>
80028f6c:	00000000 	nop
80028f70:	8fa40018 	lw	a0,24(sp)
80028f74:	00402825 	move	a1,v0
80028f78:	0c00da81 	jal	80036a04 <__rust_alloc>
80028f7c:	00000000 	nop
}
80028f80:	8fbf0024 	lw	ra,36(sp)
80028f84:	27bd0028 	addiu	sp,sp,40
80028f88:	03e00008 	jr	ra
80028f8c:	00000000 	nop

80028f90 <_ZN5alloc5alloc6Global10alloc_impl17hd9d11e451cd0f840E>:
    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {
80028f90:	27bdffb8 	addiu	sp,sp,-72
80028f94:	afbf0044 	sw	ra,68(sp)
80028f98:	00e00825 	move	at,a3
80028f9c:	afa10010 	sw	at,16(sp)
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
80028fa0:	afa5001c 	sw	a1,28(sp)
80028fa4:	afa60020 	sw	a2,32(sp)
80028fa8:	afa40034 	sw	a0,52(sp)
80028fac:	a3a7003b 	sb	a3,59(sp)
80028fb0:	27a4001c 	addiu	a0,sp,28
        match layout.size() {
80028fb4:	0c009481 	jal	80025204 <_ZN4core5alloc6layout6Layout4size17h2e77e01e84646f95E>
80028fb8:	00000000 	nop
80028fbc:	00400825 	move	at,v0
80028fc0:	afa10014 	sw	at,20(sp)
80028fc4:	afa2003c 	sw	v0,60(sp)
80028fc8:	1440000e 	bnez	v0,80029004 <_ZN5alloc5alloc6Global10alloc_impl17hd9d11e451cd0f840E+0x74>
80028fcc:	00000000 	nop
80028fd0:	0800a3f6 	j	80028fd8 <_ZN5alloc5alloc6Global10alloc_impl17hd9d11e451cd0f840E+0x48>
80028fd4:	00000000 	nop
80028fd8:	27a4001c 	addiu	a0,sp,28
            0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
80028fdc:	0c009514 	jal	80025450 <_ZN4core5alloc6layout6Layout8dangling17h2988c399798180eeE>
80028fe0:	00000000 	nop
80028fe4:	00402025 	move	a0,v0
80028fe8:	24050000 	li	a1,0
80028fec:	0c00e6b1 	jal	80039ac4 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h25684dcbb1a3276fE>
80028ff0:	00000000 	nop
80028ff4:	afa20024 	sw	v0,36(sp)
80028ff8:	afa30028 	sw	v1,40(sp)
80028ffc:	0800a407 	j	8002901c <_ZN5alloc5alloc6Global10alloc_impl17hd9d11e451cd0f840E+0x8c>
80029000:	00000000 	nop
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
80029004:	8fa10010 	lw	at,16(sp)
80029008:	30210001 	andi	at,at,0x1
8002900c:	14200010 	bnez	at,80029050 <_ZN5alloc5alloc6Global10alloc_impl17hd9d11e451cd0f840E+0xc0>
80029010:	00000000 	nop
80029014:	0800a40d 	j	80029034 <_ZN5alloc5alloc6Global10alloc_impl17hd9d11e451cd0f840E+0xa4>
80029018:	00000000 	nop
    }
8002901c:	8fa20024 	lw	v0,36(sp)
80029020:	8fa30028 	lw	v1,40(sp)
80029024:	8fbf0044 	lw	ra,68(sp)
80029028:	27bd0048 	addiu	sp,sp,72
8002902c:	03e00008 	jr	ra
80029030:	00000000 	nop
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
80029034:	8fa4001c 	lw	a0,28(sp)
80029038:	8fa50020 	lw	a1,32(sp)
8002903c:	0c00a3cc 	jal	80028f30 <_ZN5alloc5alloc5alloc17h0ed5887f9478560eE>
80029040:	00000000 	nop
80029044:	afa2002c 	sw	v0,44(sp)
80029048:	0800a41b 	j	8002906c <_ZN5alloc5alloc6Global10alloc_impl17hd9d11e451cd0f840E+0xdc>
8002904c:	00000000 	nop
80029050:	8fa4001c 	lw	a0,28(sp)
80029054:	8fa50020 	lw	a1,32(sp)
80029058:	0c00a391 	jal	80028e44 <_ZN5alloc5alloc12alloc_zeroed17h8adb90d2b6b18578E>
8002905c:	00000000 	nop
80029060:	afa2002c 	sw	v0,44(sp)
80029064:	0800a41b 	j	8002906c <_ZN5alloc5alloc6Global10alloc_impl17hd9d11e451cd0f840E+0xdc>
80029068:	00000000 	nop
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
8002906c:	8fa4002c 	lw	a0,44(sp)
80029070:	0c00e684 	jal	80039a10 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E>
80029074:	00000000 	nop
80029078:	00402025 	move	a0,v0
8002907c:	0c00e6f2 	jal	80039bc8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE>
80029080:	00000000 	nop
80029084:	00402025 	move	a0,v0
80029088:	0c00e8db 	jal	8003a36c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE>
8002908c:	00000000 	nop
80029090:	afa20030 	sw	v0,48(sp)
80029094:	8fa10030 	lw	at,48(sp)
80029098:	1020000c 	beqz	at,800290cc <_ZN5alloc5alloc6Global10alloc_impl17hd9d11e451cd0f840E+0x13c>
8002909c:	00000000 	nop
800290a0:	0800a42a 	j	800290a8 <_ZN5alloc5alloc6Global10alloc_impl17hd9d11e451cd0f840E+0x118>
800290a4:	00000000 	nop
800290a8:	8fa50014 	lw	a1,20(sp)
800290ac:	8fa40030 	lw	a0,48(sp)
800290b0:	afa40040 	sw	a0,64(sp)
                Ok(NonNull::slice_from_raw_parts(ptr, size))
800290b4:	0c00e6b1 	jal	80039ac4 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h25684dcbb1a3276fE>
800290b8:	00000000 	nop
800290bc:	afa20024 	sw	v0,36(sp)
800290c0:	afa30028 	sw	v1,40(sp)
            },
800290c4:	0800a407 	j	8002901c <_ZN5alloc5alloc6Global10alloc_impl17hd9d11e451cd0f840E+0x8c>
800290c8:	00000000 	nop
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
800290cc:	3c018105 	lui	at,0x8105
800290d0:	2424ef30 	addiu	a0,at,-4304
800290d4:	0c00e425 	jal	80039094 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hb6ff685e17a0e3feE>
800290d8:	00000000 	nop
800290dc:	afa20024 	sw	v0,36(sp)
800290e0:	afa30028 	sw	v1,40(sp)
800290e4:	0800a407 	j	8002901c <_ZN5alloc5alloc6Global10alloc_impl17hd9d11e451cd0f840E+0x8c>
800290e8:	00000000 	nop

800290ec <_ZN5alloc5alloc7dealloc17h9cec2fc442e76755E>:
pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {
800290ec:	27bdffd0 	addiu	sp,sp,-48
800290f0:	afbf002c 	sw	ra,44(sp)
800290f4:	afa40018 	sw	a0,24(sp)
800290f8:	afa50020 	sw	a1,32(sp)
800290fc:	afa60024 	sw	a2,36(sp)
80029100:	afa40028 	sw	a0,40(sp)
80029104:	27a40020 	addiu	a0,sp,32
80029108:	afa40014 	sw	a0,20(sp)
    unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
8002910c:	0c009481 	jal	80025204 <_ZN4core5alloc6layout6Layout4size17h2e77e01e84646f95E>
80029110:	00000000 	nop
80029114:	8fa40014 	lw	a0,20(sp)
80029118:	afa2001c 	sw	v0,28(sp)
8002911c:	0c009487 	jal	8002521c <_ZN4core5alloc6layout6Layout5align17h7f1189006923f58aE>
80029120:	00000000 	nop
80029124:	8fa40018 	lw	a0,24(sp)
80029128:	8fa5001c 	lw	a1,28(sp)
8002912c:	00403025 	move	a2,v0
80029130:	0c00da91 	jal	80036a44 <__rust_dealloc>
80029134:	00000000 	nop
}
80029138:	8fbf002c 	lw	ra,44(sp)
8002913c:	27bd0030 	addiu	sp,sp,48
80029140:	03e00008 	jr	ra
80029144:	00000000 	nop

80029148 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h2667bb582f51cff6E>:
    /// ```
    ///
    /// [memory layout]: self#memory-layout
    #[unstable(feature = "allocator_api", issue = "32838")]
    #[inline]
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
80029148:	27bdffc0 	addiu	sp,sp,-64
8002914c:	afbf003c 	sw	ra,60(sp)
80029150:	afa40020 	sw	a0,32(sp)
80029154:	afa40030 	sw	a0,48(sp)
        ManuallyDrop { value }
80029158:	afa4002c 	sw	a0,44(sp)
    }
8002915c:	8fa1002c 	lw	at,44(sp)
        let mut b = mem::ManuallyDrop::new(b);
80029160:	afa1001c 	sw	at,28(sp)
80029164:	27a1001c 	addiu	at,sp,28
80029168:	afa10038 	sw	at,56(sp)
        // We carefully get the raw pointer out in a way that Miri's aliasing model understands what
        // is happening: using the primitive "deref" of `Box`.
        let ptr = addr_of_mut!(**b);
8002916c:	8fa2001c 	lw	v0,28(sp)
80029170:	afa20014 	sw	v0,20(sp)
80029174:	afa20028 	sw	v0,40(sp)
80029178:	afa10034 	sw	at,52(sp)
        let alloc = unsafe { ptr::read(&b.1) };
8002917c:	24240004 	addiu	a0,at,4
80029180:	0c00e5c9 	jal	80039724 <_ZN4core3ptr4read17h0aafdd8ed9711880E>
80029184:	00000000 	nop
80029188:	8fa10014 	lw	at,20(sp)
        (ptr, alloc)
8002918c:	afa10018 	sw	at,24(sp)
    }
80029190:	8fa20018 	lw	v0,24(sp)
80029194:	8fbf003c 	lw	ra,60(sp)
80029198:	27bd0040 	addiu	sp,sp,64
8002919c:	03e00008 	jr	ra
800291a0:	00000000 	nop

800291a4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h47a0d5edbe5c4fcaE>:
    /// static_ref[0] = 4;
    /// assert_eq!(*static_ref, [4, 2, 3]);
    /// ```
    #[stable(feature = "box_leak", since = "1.26.0")]
    #[inline]
    pub fn leak<'a>(b: Self) -> &'a mut T
800291a4:	27bdffe8 	addiu	sp,sp,-24
800291a8:	afbf0014 	sw	ra,20(sp)
800291ac:	afa40010 	sw	a0,16(sp)
    where
        A: 'a,
    {
        unsafe { &mut *Box::into_raw(b) }
800291b0:	0c00a472 	jal	800291c8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h296aded1d881b6d2E>
800291b4:	00000000 	nop
    }
800291b8:	8fbf0014 	lw	ra,20(sp)
800291bc:	27bd0018 	addiu	sp,sp,24
800291c0:	03e00008 	jr	ra
800291c4:	00000000 	nop

800291c8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h296aded1d881b6d2E>:
    pub fn into_raw(b: Self) -> *mut T {
800291c8:	27bdffe8 	addiu	sp,sp,-24
800291cc:	afbf0014 	sw	ra,20(sp)
800291d0:	afa40010 	sw	a0,16(sp)
        Self::into_raw_with_allocator(b).0
800291d4:	0c00a452 	jal	80029148 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h2667bb582f51cff6E>
800291d8:	00000000 	nop
    }
800291dc:	8fbf0014 	lw	ra,20(sp)
800291e0:	27bd0018 	addiu	sp,sp,24
800291e4:	03e00008 	jr	ra
800291e8:	00000000 	nop

800291ec <_ZN5alloc7raw_vec11alloc_guard17h65e64a8e143de38fE>:
// On 64-bit we just need to check for overflow since trying to allocate
// `> isize::MAX` bytes will surely fail. On 32-bit and 16-bit we need to add
// an extra guard for this in case we're running on a platform which can use
// all 4GB in user-space, e.g., PAE or x32.
#[inline]
fn alloc_guard(alloc_size: usize) -> Result<(), TryReserveError> {
800291ec:	27bdffd0 	addiu	sp,sp,-48
800291f0:	afbf002c 	sw	ra,44(sp)
800291f4:	afa40014 	sw	a0,20(sp)
800291f8:	afa40028 	sw	a0,40(sp)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
800291fc:	0800a481 	j	80029204 <_ZN5alloc7raw_vec11alloc_guard17h65e64a8e143de38fE+0x18>
80029200:	00000000 	nop
80029204:	8fa10014 	lw	at,20(sp)
80029208:	04200008 	bltz	at,8002922c <_ZN5alloc7raw_vec11alloc_guard17h65e64a8e143de38fE+0x40>
8002920c:	00000000 	nop
80029210:	0800a486 	j	80029218 <_ZN5alloc7raw_vec11alloc_guard17h65e64a8e143de38fE+0x2c>
80029214:	00000000 	nop
80029218:	3c018000 	lui	at,0x8000
8002921c:	34210001 	ori	at,at,0x1
        Err(CapacityOverflow.into())
    } else {
        Ok(())
80029220:	afa10018 	sw	at,24(sp)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
80029224:	0800a496 	j	80029258 <_ZN5alloc7raw_vec11alloc_guard17h65e64a8e143de38fE+0x6c>
80029228:	00000000 	nop
        Err(CapacityOverflow.into())
8002922c:	afa00020 	sw	zero,32(sp)
80029230:	8fa40020 	lw	a0,32(sp)
80029234:	8fa50024 	lw	a1,36(sp)
80029238:	3c018105 	lui	at,0x8105
8002923c:	2426efb0 	addiu	a2,at,-4176
80029240:	0c00e83a 	jal	8003a0e8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h48d30d11e82a5204E>
80029244:	00000000 	nop
80029248:	afa20018 	sw	v0,24(sp)
8002924c:	afa3001c 	sw	v1,28(sp)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
80029250:	0800a496 	j	80029258 <_ZN5alloc7raw_vec11alloc_guard17h65e64a8e143de38fE+0x6c>
80029254:	00000000 	nop
    }
}
80029258:	8fa20018 	lw	v0,24(sp)
8002925c:	8fa3001c 	lw	v1,28(sp)
80029260:	8fbf002c 	lw	ra,44(sp)
80029264:	27bd0030 	addiu	sp,sp,48
80029268:	03e00008 	jr	ra
8002926c:	00000000 	nop

80029270 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h27a3c206fb502628E>:
    fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
80029270:	27bdffb0 	addiu	sp,sp,-80
80029274:	afbf004c 	sw	ra,76(sp)
80029278:	afa50018 	sw	a1,24(sp)
8002927c:	afa4001c 	sw	a0,28(sp)
80029280:	afa40020 	sw	a0,32(sp)
80029284:	afa50030 	sw	a1,48(sp)
        if T::IS_ZST || self.cap.0 == 0 {
80029288:	0800a4a4 	j	80029290 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h27a3c206fb502628E+0x20>
8002928c:	00000000 	nop
80029290:	8fa10018 	lw	at,24(sp)
80029294:	8c210000 	lw	at,0(at)
80029298:	14200007 	bnez	at,800292b8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h27a3c206fb502628E+0x48>
8002929c:	00000000 	nop
800292a0:	0800a4aa 	j	800292a8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h27a3c206fb502628E+0x38>
800292a4:	00000000 	nop
            None
800292a8:	8fa1001c 	lw	at,28(sp)
800292ac:	ac200004 	sw	zero,4(at)
        if T::IS_ZST || self.cap.0 == 0 {
800292b0:	0800a4d5 	j	80029354 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h27a3c206fb502628E+0xe4>
800292b4:	00000000 	nop
800292b8:	8fa10018 	lw	at,24(sp)
800292bc:	24050004 	li	a1,4
                let align = mem::align_of::<T>();
800292c0:	afa50034 	sw	a1,52(sp)
                let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
800292c4:	8c210000 	lw	at,0(at)
800292c8:	24020020 	li	v0,32
800292cc:	afa20044 	sw	v0,68(sp)
800292d0:	afa10048 	sw	at,72(sp)
            unsafe { intrinsics::unchecked_mul(self, rhs) }
800292d4:	00012140 	sll	a0,at,0x5
800292d8:	afa40038 	sw	a0,56(sp)
                let layout = Layout::from_size_align_unchecked(size, align);
800292dc:	0c00946e 	jal	800251b8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hd800459f8b083671E>
800292e0:	00000000 	nop
800292e4:	8fa10018 	lw	at,24(sp)
800292e8:	afa20010 	sw	v0,16(sp)
800292ec:	afa30014 	sw	v1,20(sp)
800292f0:	afa2003c 	sw	v0,60(sp)
800292f4:	afa30040 	sw	v1,64(sp)
                Some((self.ptr.cast().into(), layout))
800292f8:	8c240004 	lw	a0,4(at)
800292fc:	0c008c0d 	jal	80023034 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h95c47017133216e1E>
80029300:	00000000 	nop
80029304:	00402025 	move	a0,v0
80029308:	3c018105 	lui	at,0x8105
8002930c:	2425efc0 	addiu	a1,at,-4160
80029310:	0c00e844 	jal	8003a110 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hd5655c75390c7c35E>
80029314:	00000000 	nop
80029318:	8fa10010 	lw	at,16(sp)
8002931c:	8fa30014 	lw	v1,20(sp)
80029320:	00402025 	move	a0,v0
80029324:	8fa2001c 	lw	v0,28(sp)
80029328:	afa40024 	sw	a0,36(sp)
8002932c:	afa10028 	sw	at,40(sp)
80029330:	afa3002c 	sw	v1,44(sp)
80029334:	8fa1002c 	lw	at,44(sp)
80029338:	ac410008 	sw	at,8(v0)
8002933c:	8fa10028 	lw	at,40(sp)
80029340:	ac410004 	sw	at,4(v0)
80029344:	8fa10024 	lw	at,36(sp)
80029348:	ac410000 	sw	at,0(v0)
        if T::IS_ZST || self.cap.0 == 0 {
8002934c:	0800a4d5 	j	80029354 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h27a3c206fb502628E+0xe4>
80029350:	00000000 	nop
    }
80029354:	8fa20020 	lw	v0,32(sp)
80029358:	8fbf004c 	lw	ra,76(sp)
8002935c:	27bd0050 	addiu	sp,sp,80
80029360:	03e00008 	jr	ra
80029364:	00000000 	nop

80029368 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc7cfe38df20e1407E>:
    fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
80029368:	27bdffb0 	addiu	sp,sp,-80
8002936c:	afbf004c 	sw	ra,76(sp)
80029370:	afa50018 	sw	a1,24(sp)
80029374:	afa4001c 	sw	a0,28(sp)
80029378:	afa40020 	sw	a0,32(sp)
8002937c:	afa50030 	sw	a1,48(sp)
        if T::IS_ZST || self.cap.0 == 0 {
80029380:	0800a4e2 	j	80029388 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc7cfe38df20e1407E+0x20>
80029384:	00000000 	nop
80029388:	8fa10018 	lw	at,24(sp)
8002938c:	8c210000 	lw	at,0(at)
80029390:	14200007 	bnez	at,800293b0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc7cfe38df20e1407E+0x48>
80029394:	00000000 	nop
80029398:	0800a4e8 	j	800293a0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc7cfe38df20e1407E+0x38>
8002939c:	00000000 	nop
            None
800293a0:	8fa1001c 	lw	at,28(sp)
800293a4:	ac200004 	sw	zero,4(at)
        if T::IS_ZST || self.cap.0 == 0 {
800293a8:	0800a515 	j	80029454 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc7cfe38df20e1407E+0xec>
800293ac:	00000000 	nop
800293b0:	8fa10018 	lw	at,24(sp)
800293b4:	24050004 	li	a1,4
                let align = mem::align_of::<T>();
800293b8:	afa50034 	sw	a1,52(sp)
                let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
800293bc:	8c210000 	lw	at,0(at)
800293c0:	2402000c 	li	v0,12
800293c4:	afa20044 	sw	v0,68(sp)
800293c8:	afa10048 	sw	at,72(sp)
800293cc:	00011080 	sll	v0,at,0x2
800293d0:	000108c0 	sll	at,at,0x3
800293d4:	00222021 	addu	a0,at,v0
800293d8:	afa40038 	sw	a0,56(sp)
                let layout = Layout::from_size_align_unchecked(size, align);
800293dc:	0c00946e 	jal	800251b8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hd800459f8b083671E>
800293e0:	00000000 	nop
800293e4:	8fa10018 	lw	at,24(sp)
800293e8:	afa20010 	sw	v0,16(sp)
800293ec:	afa30014 	sw	v1,20(sp)
800293f0:	afa2003c 	sw	v0,60(sp)
800293f4:	afa30040 	sw	v1,64(sp)
                Some((self.ptr.cast().into(), layout))
800293f8:	8c240004 	lw	a0,4(at)
800293fc:	0c008c18 	jal	80023060 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hba7b2813133f40d9E>
80029400:	00000000 	nop
80029404:	00402025 	move	a0,v0
80029408:	3c018105 	lui	at,0x8105
8002940c:	2425efc0 	addiu	a1,at,-4160
80029410:	0c00e844 	jal	8003a110 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hd5655c75390c7c35E>
80029414:	00000000 	nop
80029418:	8fa10010 	lw	at,16(sp)
8002941c:	8fa30014 	lw	v1,20(sp)
80029420:	00402025 	move	a0,v0
80029424:	8fa2001c 	lw	v0,28(sp)
80029428:	afa40024 	sw	a0,36(sp)
8002942c:	afa10028 	sw	at,40(sp)
80029430:	afa3002c 	sw	v1,44(sp)
80029434:	8fa1002c 	lw	at,44(sp)
80029438:	ac410008 	sw	at,8(v0)
8002943c:	8fa10028 	lw	at,40(sp)
80029440:	ac410004 	sw	at,4(v0)
80029444:	8fa10024 	lw	at,36(sp)
80029448:	ac410000 	sw	at,0(v0)
        if T::IS_ZST || self.cap.0 == 0 {
8002944c:	0800a515 	j	80029454 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc7cfe38df20e1407E+0xec>
80029450:	00000000 	nop
    }
80029454:	8fa20020 	lw	v0,32(sp)
80029458:	8fbf004c 	lw	ra,76(sp)
8002945c:	27bd0050 	addiu	sp,sp,80
80029460:	03e00008 	jr	ra
80029464:	00000000 	nop

80029468 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17he1e87957f41610f6E>:
    fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
80029468:	27bdffb0 	addiu	sp,sp,-80
8002946c:	afbf004c 	sw	ra,76(sp)
80029470:	afa50018 	sw	a1,24(sp)
80029474:	afa4001c 	sw	a0,28(sp)
80029478:	afa40020 	sw	a0,32(sp)
8002947c:	afa50030 	sw	a1,48(sp)
        if T::IS_ZST || self.cap.0 == 0 {
80029480:	0800a522 	j	80029488 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17he1e87957f41610f6E+0x20>
80029484:	00000000 	nop
80029488:	8fa10018 	lw	at,24(sp)
8002948c:	8c210000 	lw	at,0(at)
80029490:	14200007 	bnez	at,800294b0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17he1e87957f41610f6E+0x48>
80029494:	00000000 	nop
80029498:	0800a528 	j	800294a0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17he1e87957f41610f6E+0x38>
8002949c:	00000000 	nop
            None
800294a0:	8fa1001c 	lw	at,28(sp)
800294a4:	ac200004 	sw	zero,4(at)
        if T::IS_ZST || self.cap.0 == 0 {
800294a8:	0800a557 	j	8002955c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17he1e87957f41610f6E+0xf4>
800294ac:	00000000 	nop
800294b0:	8fa10018 	lw	at,24(sp)
800294b4:	24050004 	li	a1,4
                let align = mem::align_of::<T>();
800294b8:	afa50034 	sw	a1,52(sp)
                let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
800294bc:	8c210000 	lw	at,0(at)
800294c0:	240200dc 	li	v0,220
800294c4:	afa20044 	sw	v0,68(sp)
800294c8:	afa10048 	sw	at,72(sp)
800294cc:	00011880 	sll	v1,at,0x2
800294d0:	00011140 	sll	v0,at,0x5
800294d4:	00431021 	addu	v0,v0,v1
800294d8:	00010a00 	sll	at,at,0x8
800294dc:	00222023 	subu	a0,at,v0
800294e0:	afa40038 	sw	a0,56(sp)
                let layout = Layout::from_size_align_unchecked(size, align);
800294e4:	0c00946e 	jal	800251b8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hd800459f8b083671E>
800294e8:	00000000 	nop
800294ec:	8fa10018 	lw	at,24(sp)
800294f0:	afa20010 	sw	v0,16(sp)
800294f4:	afa30014 	sw	v1,20(sp)
800294f8:	afa2003c 	sw	v0,60(sp)
800294fc:	afa30040 	sw	v1,64(sp)
                Some((self.ptr.cast().into(), layout))
80029500:	8c240004 	lw	a0,4(at)
80029504:	0c008c23 	jal	8002308c <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hbe1029b8b7dcd013E>
80029508:	00000000 	nop
8002950c:	00402025 	move	a0,v0
80029510:	3c018105 	lui	at,0x8105
80029514:	2425efc0 	addiu	a1,at,-4160
80029518:	0c00e844 	jal	8003a110 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hd5655c75390c7c35E>
8002951c:	00000000 	nop
80029520:	8fa10010 	lw	at,16(sp)
80029524:	8fa30014 	lw	v1,20(sp)
80029528:	00402025 	move	a0,v0
8002952c:	8fa2001c 	lw	v0,28(sp)
80029530:	afa40024 	sw	a0,36(sp)
80029534:	afa10028 	sw	at,40(sp)
80029538:	afa3002c 	sw	v1,44(sp)
8002953c:	8fa1002c 	lw	at,44(sp)
80029540:	ac410008 	sw	at,8(v0)
80029544:	8fa10028 	lw	at,40(sp)
80029548:	ac410004 	sw	at,4(v0)
8002954c:	8fa10024 	lw	at,36(sp)
80029550:	ac410000 	sw	at,0(v0)
        if T::IS_ZST || self.cap.0 == 0 {
80029554:	0800a557 	j	8002955c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17he1e87957f41610f6E+0xf4>
80029558:	00000000 	nop
    }
8002955c:	8fa20020 	lw	v0,32(sp)
80029560:	8fbf004c 	lw	ra,76(sp)
80029564:	27bd0050 	addiu	sp,sp,80
80029568:	03e00008 	jr	ra
8002956c:	00000000 	nop

80029570 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h25cfefad1b33b072E>:
    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
80029570:	27bdff30 	addiu	sp,sp,-208
80029574:	afbf00cc 	sw	ra,204(sp)
80029578:	afa6003c 	sw	a2,60(sp)
8002957c:	afa50040 	sw	a1,64(sp)
80029580:	afa40044 	sw	a0,68(sp)
80029584:	afa40094 	sw	a0,148(sp)
80029588:	afa50098 	sw	a1,152(sp)
8002958c:	afa6009c 	sw	a2,156(sp)
        debug_assert!(additional > 0);
80029590:	0800a566 	j	80029598 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h25cfefad1b33b072E+0x28>
80029594:	00000000 	nop
80029598:	8fa1003c 	lw	at,60(sp)
8002959c:	1420000a 	bnez	at,800295c8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h25cfefad1b33b072E+0x58>
800295a0:	00000000 	nop
800295a4:	0800a56b 	j	800295ac <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h25cfefad1b33b072E+0x3c>
800295a8:	00000000 	nop
800295ac:	3c018105 	lui	at,0x8105
800295b0:	2424efd0 	addiu	a0,at,-4144
800295b4:	3c018105 	lui	at,0x8105
800295b8:	2426f050 	addiu	a2,at,-4016
800295bc:	24050020 	li	a1,32
800295c0:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
800295c4:	00000000 	nop
        if T::IS_ZST {
800295c8:	0800a574 	j	800295d0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h25cfefad1b33b072E+0x60>
800295cc:	00000000 	nop
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
800295d0:	8fa5003c 	lw	a1,60(sp)
800295d4:	8fa40040 	lw	a0,64(sp)
800295d8:	0c0084dc 	jal	80021370 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17hf3e01b5f6dbf30e3E>
800295dc:	00000000 	nop
800295e0:	00402825 	move	a1,v0
800295e4:	00603025 	move	a2,v1
800295e8:	afa00068 	sw	zero,104(sp)
800295ec:	8fa70068 	lw	a3,104(sp)
800295f0:	8fa1006c 	lw	at,108(sp)
800295f4:	03a01025 	move	v0,sp
800295f8:	ac410010 	sw	at,16(v0)
800295fc:	27a40060 	addiu	a0,sp,96
80029600:	afa40038 	sw	a0,56(sp)
80029604:	0c00e713 	jal	80039c4c <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E>
80029608:	00000000 	nop
8002960c:	8fa50038 	lw	a1,56(sp)
80029610:	27a40058 	addiu	a0,sp,88
80029614:	0c00e894 	jal	8003a250 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E>
80029618:	00000000 	nop
8002961c:	8fa10058 	lw	at,88(sp)
80029620:	3c028000 	lui	v0,0x8000
80029624:	34420001 	ori	v0,v0,0x1
80029628:	1422000f 	bne	at,v0,80029668 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h25cfefad1b33b072E+0xf8>
8002962c:	00000000 	nop
80029630:	0800a58e 	j	80029638 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h25cfefad1b33b072E+0xc8>
80029634:	00000000 	nop
80029638:	8fa10044 	lw	at,68(sp)
8002963c:	8fa2005c 	lw	v0,92(sp)
80029640:	afa20030 	sw	v0,48(sp)
80029644:	afa200a0 	sw	v0,160(sp)
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029648:	8c220000 	lw	v0,0(at)
8002964c:	00420821 	addu	at,v0,v0
80029650:	afa10034 	sw	at,52(sp)
80029654:	0022082b 	sltu	at,at,v0
80029658:	1420003b 	bnez	at,80029748 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h25cfefad1b33b072E+0x1d8>
8002965c:	00000000 	nop
80029660:	0800a5a6 	j	80029698 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h25cfefad1b33b072E+0x128>
80029664:	00000000 	nop
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80029668:	8fa40058 	lw	a0,88(sp)
8002966c:	8fa5005c 	lw	a1,92(sp)
80029670:	afa400c4 	sw	a0,196(sp)
80029674:	afa500c8 	sw	a1,200(sp)
80029678:	3c018105 	lui	at,0x8105
8002967c:	2426f080 	addiu	a2,at,-3968
80029680:	0c00e402 	jal	80039008 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h76db6800faa68b03E>
80029684:	00000000 	nop
80029688:	afa20048 	sw	v0,72(sp)
8002968c:	afa3004c 	sw	v1,76(sp)
80029690:	0800a5ef 	j	800297bc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h25cfefad1b33b072E+0x24c>
80029694:	00000000 	nop
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029698:	8fa50030 	lw	a1,48(sp)
8002969c:	8fa40034 	lw	a0,52(sp)
800296a0:	0c00f268 	jal	8003c9a0 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>
800296a4:	00000000 	nop
800296a8:	00402825 	move	a1,v0
800296ac:	afa500a4 	sw	a1,164(sp)
800296b0:	24040004 	li	a0,4
        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
800296b4:	0c00f268 	jal	8003c9a0 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>
800296b8:	00000000 	nop
800296bc:	00402025 	move	a0,v0
800296c0:	00801025 	move	v0,a0
800296c4:	afa2001c 	sw	v0,28(sp)
800296c8:	afa400a8 	sw	a0,168(sp)
        let new_layout = Layout::array::<T>(cap);
800296cc:	0c0094a0 	jal	80025280 <_ZN4core5alloc6layout6Layout5array17h46bf1e6439f9f622E>
800296d0:	00000000 	nop
800296d4:	8fa50044 	lw	a1,68(sp)
800296d8:	afa20020 	sw	v0,32(sp)
800296dc:	afa30024 	sw	v1,36(sp)
800296e0:	afa200ac 	sw	v0,172(sp)
800296e4:	afa300b0 	sw	v1,176(sp)
800296e8:	27a40088 	addiu	a0,sp,136
800296ec:	afa40028 	sw	a0,40(sp)
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
800296f0:	0c00a51a 	jal	80029468 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17he1e87957f41610f6E>
800296f4:	00000000 	nop
800296f8:	8fa10044 	lw	at,68(sp)
800296fc:	8fa50020 	lw	a1,32(sp)
80029700:	8fa60024 	lw	a2,36(sp)
80029704:	8fa70028 	lw	a3,40(sp)
80029708:	24210008 	addiu	at,at,8
8002970c:	03a01025 	move	v0,sp
80029710:	ac410010 	sw	at,16(v0)
80029714:	27a4007c 	addiu	a0,sp,124
80029718:	afa4002c 	sw	a0,44(sp)
8002971c:	0c00e924 	jal	8003a490 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E>
80029720:	00000000 	nop
80029724:	8fa5002c 	lw	a1,44(sp)
80029728:	27a40070 	addiu	a0,sp,112
8002972c:	0c00e8ee 	jal	8003a3b8 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E>
80029730:	00000000 	nop
80029734:	8fa10070 	lw	at,112(sp)
80029738:	10200007 	beqz	at,80029758 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h25cfefad1b33b072E+0x1e8>
8002973c:	00000000 	nop
80029740:	0800a5e3 	j	8002978c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h25cfefad1b33b072E+0x21c>
80029744:	00000000 	nop
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029748:	3c018105 	lui	at,0x8105
8002974c:	2424f060 	addiu	a0,at,-4000
80029750:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
80029754:	00000000 	nop
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80029758:	8fa7001c 	lw	a3,28(sp)
8002975c:	8fa40044 	lw	a0,68(sp)
80029760:	8fa50074 	lw	a1,116(sp)
80029764:	8fa60078 	lw	a2,120(sp)
80029768:	afa500b4 	sw	a1,180(sp)
8002976c:	afa600b8 	sw	a2,184(sp)
        unsafe { self.set_ptr_and_cap(ptr, cap) };
80029770:	0c00a727 	jal	80029c9c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17h1c9e5fa81b22a741E>
80029774:	00000000 	nop
80029778:	3c018000 	lui	at,0x8000
8002977c:	34210001 	ori	at,at,0x1
        Ok(())
80029780:	afa10048 	sw	at,72(sp)
    }
80029784:	0800a5ef 	j	800297bc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h25cfefad1b33b072E+0x24c>
80029788:	00000000 	nop
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
8002978c:	8fa40074 	lw	a0,116(sp)
80029790:	8fa50078 	lw	a1,120(sp)
80029794:	afa400bc 	sw	a0,188(sp)
80029798:	afa500c0 	sw	a1,192(sp)
8002979c:	3c018105 	lui	at,0x8105
800297a0:	2426f070 	addiu	a2,at,-3984
800297a4:	0c00e3db 	jal	80038f6c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h491e696a56edf9eeE>
800297a8:	00000000 	nop
800297ac:	afa20048 	sw	v0,72(sp)
800297b0:	afa3004c 	sw	v1,76(sp)
800297b4:	0800a5ef 	j	800297bc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h25cfefad1b33b072E+0x24c>
800297b8:	00000000 	nop
    }
800297bc:	8fa20048 	lw	v0,72(sp)
800297c0:	8fa3004c 	lw	v1,76(sp)
800297c4:	8fbf00cc 	lw	ra,204(sp)
800297c8:	27bd00d0 	addiu	sp,sp,208
800297cc:	03e00008 	jr	ra
800297d0:	00000000 	nop

800297d4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h77b5f2c95bbad9c1E>:
    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
800297d4:	27bdff30 	addiu	sp,sp,-208
800297d8:	afbf00cc 	sw	ra,204(sp)
800297dc:	afa6003c 	sw	a2,60(sp)
800297e0:	afa50040 	sw	a1,64(sp)
800297e4:	afa40044 	sw	a0,68(sp)
800297e8:	afa40094 	sw	a0,148(sp)
800297ec:	afa50098 	sw	a1,152(sp)
800297f0:	afa6009c 	sw	a2,156(sp)
        debug_assert!(additional > 0);
800297f4:	0800a5ff 	j	800297fc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h77b5f2c95bbad9c1E+0x28>
800297f8:	00000000 	nop
800297fc:	8fa1003c 	lw	at,60(sp)
80029800:	1420000a 	bnez	at,8002982c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h77b5f2c95bbad9c1E+0x58>
80029804:	00000000 	nop
80029808:	0800a604 	j	80029810 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h77b5f2c95bbad9c1E+0x3c>
8002980c:	00000000 	nop
80029810:	3c018105 	lui	at,0x8105
80029814:	2424efd0 	addiu	a0,at,-4144
80029818:	3c018105 	lui	at,0x8105
8002981c:	2426f050 	addiu	a2,at,-4016
80029820:	24050020 	li	a1,32
80029824:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80029828:	00000000 	nop
        if T::IS_ZST {
8002982c:	0800a60d 	j	80029834 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h77b5f2c95bbad9c1E+0x60>
80029830:	00000000 	nop
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80029834:	8fa5003c 	lw	a1,60(sp)
80029838:	8fa40040 	lw	a0,64(sp)
8002983c:	0c0084dc 	jal	80021370 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17hf3e01b5f6dbf30e3E>
80029840:	00000000 	nop
80029844:	00402825 	move	a1,v0
80029848:	00603025 	move	a2,v1
8002984c:	afa00068 	sw	zero,104(sp)
80029850:	8fa70068 	lw	a3,104(sp)
80029854:	8fa1006c 	lw	at,108(sp)
80029858:	03a01025 	move	v0,sp
8002985c:	ac410010 	sw	at,16(v0)
80029860:	27a40060 	addiu	a0,sp,96
80029864:	afa40038 	sw	a0,56(sp)
80029868:	0c00e713 	jal	80039c4c <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E>
8002986c:	00000000 	nop
80029870:	8fa50038 	lw	a1,56(sp)
80029874:	27a40058 	addiu	a0,sp,88
80029878:	0c00e894 	jal	8003a250 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E>
8002987c:	00000000 	nop
80029880:	8fa10058 	lw	at,88(sp)
80029884:	3c028000 	lui	v0,0x8000
80029888:	34420001 	ori	v0,v0,0x1
8002988c:	1422000f 	bne	at,v0,800298cc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h77b5f2c95bbad9c1E+0xf8>
80029890:	00000000 	nop
80029894:	0800a627 	j	8002989c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h77b5f2c95bbad9c1E+0xc8>
80029898:	00000000 	nop
8002989c:	8fa10044 	lw	at,68(sp)
800298a0:	8fa2005c 	lw	v0,92(sp)
800298a4:	afa20030 	sw	v0,48(sp)
800298a8:	afa200a0 	sw	v0,160(sp)
        let cap = cmp::max(self.cap.0 * 2, required_cap);
800298ac:	8c220000 	lw	v0,0(at)
800298b0:	00420821 	addu	at,v0,v0
800298b4:	afa10034 	sw	at,52(sp)
800298b8:	0022082b 	sltu	at,at,v0
800298bc:	1420003b 	bnez	at,800299ac <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h77b5f2c95bbad9c1E+0x1d8>
800298c0:	00000000 	nop
800298c4:	0800a63f 	j	800298fc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h77b5f2c95bbad9c1E+0x128>
800298c8:	00000000 	nop
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
800298cc:	8fa40058 	lw	a0,88(sp)
800298d0:	8fa5005c 	lw	a1,92(sp)
800298d4:	afa400c4 	sw	a0,196(sp)
800298d8:	afa500c8 	sw	a1,200(sp)
800298dc:	3c018105 	lui	at,0x8105
800298e0:	2426f080 	addiu	a2,at,-3968
800298e4:	0c00e402 	jal	80039008 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h76db6800faa68b03E>
800298e8:	00000000 	nop
800298ec:	afa20048 	sw	v0,72(sp)
800298f0:	afa3004c 	sw	v1,76(sp)
800298f4:	0800a688 	j	80029a20 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h77b5f2c95bbad9c1E+0x24c>
800298f8:	00000000 	nop
        let cap = cmp::max(self.cap.0 * 2, required_cap);
800298fc:	8fa50030 	lw	a1,48(sp)
80029900:	8fa40034 	lw	a0,52(sp)
80029904:	0c00f268 	jal	8003c9a0 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>
80029908:	00000000 	nop
8002990c:	00402825 	move	a1,v0
80029910:	afa500a4 	sw	a1,164(sp)
80029914:	24040004 	li	a0,4
        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
80029918:	0c00f268 	jal	8003c9a0 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>
8002991c:	00000000 	nop
80029920:	00402025 	move	a0,v0
80029924:	00801025 	move	v0,a0
80029928:	afa2001c 	sw	v0,28(sp)
8002992c:	afa400a8 	sw	a0,168(sp)
        let new_layout = Layout::array::<T>(cap);
80029930:	0c0094af 	jal	800252bc <_ZN4core5alloc6layout6Layout5array17hda0510dcfb1a2029E>
80029934:	00000000 	nop
80029938:	8fa50044 	lw	a1,68(sp)
8002993c:	afa20020 	sw	v0,32(sp)
80029940:	afa30024 	sw	v1,36(sp)
80029944:	afa200ac 	sw	v0,172(sp)
80029948:	afa300b0 	sw	v1,176(sp)
8002994c:	27a40088 	addiu	a0,sp,136
80029950:	afa40028 	sw	a0,40(sp)
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80029954:	0c00a4da 	jal	80029368 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc7cfe38df20e1407E>
80029958:	00000000 	nop
8002995c:	8fa10044 	lw	at,68(sp)
80029960:	8fa50020 	lw	a1,32(sp)
80029964:	8fa60024 	lw	a2,36(sp)
80029968:	8fa70028 	lw	a3,40(sp)
8002996c:	24210008 	addiu	at,at,8
80029970:	03a01025 	move	v0,sp
80029974:	ac410010 	sw	at,16(v0)
80029978:	27a4007c 	addiu	a0,sp,124
8002997c:	afa4002c 	sw	a0,44(sp)
80029980:	0c00e924 	jal	8003a490 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E>
80029984:	00000000 	nop
80029988:	8fa5002c 	lw	a1,44(sp)
8002998c:	27a40070 	addiu	a0,sp,112
80029990:	0c00e8ee 	jal	8003a3b8 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E>
80029994:	00000000 	nop
80029998:	8fa10070 	lw	at,112(sp)
8002999c:	10200007 	beqz	at,800299bc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h77b5f2c95bbad9c1E+0x1e8>
800299a0:	00000000 	nop
800299a4:	0800a67c 	j	800299f0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h77b5f2c95bbad9c1E+0x21c>
800299a8:	00000000 	nop
        let cap = cmp::max(self.cap.0 * 2, required_cap);
800299ac:	3c018105 	lui	at,0x8105
800299b0:	2424f060 	addiu	a0,at,-4000
800299b4:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
800299b8:	00000000 	nop
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
800299bc:	8fa7001c 	lw	a3,28(sp)
800299c0:	8fa40044 	lw	a0,68(sp)
800299c4:	8fa50074 	lw	a1,116(sp)
800299c8:	8fa60078 	lw	a2,120(sp)
800299cc:	afa500b4 	sw	a1,180(sp)
800299d0:	afa600b8 	sw	a2,184(sp)
        unsafe { self.set_ptr_and_cap(ptr, cap) };
800299d4:	0c00a744 	jal	80029d10 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17h2b8096012af24dedE>
800299d8:	00000000 	nop
800299dc:	3c018000 	lui	at,0x8000
800299e0:	34210001 	ori	at,at,0x1
        Ok(())
800299e4:	afa10048 	sw	at,72(sp)
    }
800299e8:	0800a688 	j	80029a20 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h77b5f2c95bbad9c1E+0x24c>
800299ec:	00000000 	nop
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
800299f0:	8fa40074 	lw	a0,116(sp)
800299f4:	8fa50078 	lw	a1,120(sp)
800299f8:	afa400bc 	sw	a0,188(sp)
800299fc:	afa500c0 	sw	a1,192(sp)
80029a00:	3c018105 	lui	at,0x8105
80029a04:	2426f070 	addiu	a2,at,-3984
80029a08:	0c00e3db 	jal	80038f6c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h491e696a56edf9eeE>
80029a0c:	00000000 	nop
80029a10:	afa20048 	sw	v0,72(sp)
80029a14:	afa3004c 	sw	v1,76(sp)
80029a18:	0800a688 	j	80029a20 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h77b5f2c95bbad9c1E+0x24c>
80029a1c:	00000000 	nop
    }
80029a20:	8fa20048 	lw	v0,72(sp)
80029a24:	8fa3004c 	lw	v1,76(sp)
80029a28:	8fbf00cc 	lw	ra,204(sp)
80029a2c:	27bd00d0 	addiu	sp,sp,208
80029a30:	03e00008 	jr	ra
80029a34:	00000000 	nop

80029a38 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7ac8e44b19d9282cE>:
    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
80029a38:	27bdff30 	addiu	sp,sp,-208
80029a3c:	afbf00cc 	sw	ra,204(sp)
80029a40:	afa6003c 	sw	a2,60(sp)
80029a44:	afa50040 	sw	a1,64(sp)
80029a48:	afa40044 	sw	a0,68(sp)
80029a4c:	afa40094 	sw	a0,148(sp)
80029a50:	afa50098 	sw	a1,152(sp)
80029a54:	afa6009c 	sw	a2,156(sp)
        debug_assert!(additional > 0);
80029a58:	0800a698 	j	80029a60 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7ac8e44b19d9282cE+0x28>
80029a5c:	00000000 	nop
80029a60:	8fa1003c 	lw	at,60(sp)
80029a64:	1420000a 	bnez	at,80029a90 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7ac8e44b19d9282cE+0x58>
80029a68:	00000000 	nop
80029a6c:	0800a69d 	j	80029a74 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7ac8e44b19d9282cE+0x3c>
80029a70:	00000000 	nop
80029a74:	3c018105 	lui	at,0x8105
80029a78:	2424efd0 	addiu	a0,at,-4144
80029a7c:	3c018105 	lui	at,0x8105
80029a80:	2426f050 	addiu	a2,at,-4016
80029a84:	24050020 	li	a1,32
80029a88:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80029a8c:	00000000 	nop
        if T::IS_ZST {
80029a90:	0800a6a6 	j	80029a98 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7ac8e44b19d9282cE+0x60>
80029a94:	00000000 	nop
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80029a98:	8fa5003c 	lw	a1,60(sp)
80029a9c:	8fa40040 	lw	a0,64(sp)
80029aa0:	0c0084dc 	jal	80021370 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17hf3e01b5f6dbf30e3E>
80029aa4:	00000000 	nop
80029aa8:	00402825 	move	a1,v0
80029aac:	00603025 	move	a2,v1
80029ab0:	afa00068 	sw	zero,104(sp)
80029ab4:	8fa70068 	lw	a3,104(sp)
80029ab8:	8fa1006c 	lw	at,108(sp)
80029abc:	03a01025 	move	v0,sp
80029ac0:	ac410010 	sw	at,16(v0)
80029ac4:	27a40060 	addiu	a0,sp,96
80029ac8:	afa40038 	sw	a0,56(sp)
80029acc:	0c00e713 	jal	80039c4c <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E>
80029ad0:	00000000 	nop
80029ad4:	8fa50038 	lw	a1,56(sp)
80029ad8:	27a40058 	addiu	a0,sp,88
80029adc:	0c00e894 	jal	8003a250 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E>
80029ae0:	00000000 	nop
80029ae4:	8fa10058 	lw	at,88(sp)
80029ae8:	3c028000 	lui	v0,0x8000
80029aec:	34420001 	ori	v0,v0,0x1
80029af0:	1422000f 	bne	at,v0,80029b30 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7ac8e44b19d9282cE+0xf8>
80029af4:	00000000 	nop
80029af8:	0800a6c0 	j	80029b00 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7ac8e44b19d9282cE+0xc8>
80029afc:	00000000 	nop
80029b00:	8fa10044 	lw	at,68(sp)
80029b04:	8fa2005c 	lw	v0,92(sp)
80029b08:	afa20030 	sw	v0,48(sp)
80029b0c:	afa200a0 	sw	v0,160(sp)
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029b10:	8c220000 	lw	v0,0(at)
80029b14:	00420821 	addu	at,v0,v0
80029b18:	afa10034 	sw	at,52(sp)
80029b1c:	0022082b 	sltu	at,at,v0
80029b20:	1420003b 	bnez	at,80029c10 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7ac8e44b19d9282cE+0x1d8>
80029b24:	00000000 	nop
80029b28:	0800a6d8 	j	80029b60 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7ac8e44b19d9282cE+0x128>
80029b2c:	00000000 	nop
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80029b30:	8fa40058 	lw	a0,88(sp)
80029b34:	8fa5005c 	lw	a1,92(sp)
80029b38:	afa400c4 	sw	a0,196(sp)
80029b3c:	afa500c8 	sw	a1,200(sp)
80029b40:	3c018105 	lui	at,0x8105
80029b44:	2426f080 	addiu	a2,at,-3968
80029b48:	0c00e402 	jal	80039008 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h76db6800faa68b03E>
80029b4c:	00000000 	nop
80029b50:	afa20048 	sw	v0,72(sp)
80029b54:	afa3004c 	sw	v1,76(sp)
80029b58:	0800a721 	j	80029c84 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7ac8e44b19d9282cE+0x24c>
80029b5c:	00000000 	nop
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029b60:	8fa50030 	lw	a1,48(sp)
80029b64:	8fa40034 	lw	a0,52(sp)
80029b68:	0c00f268 	jal	8003c9a0 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>
80029b6c:	00000000 	nop
80029b70:	00402825 	move	a1,v0
80029b74:	afa500a4 	sw	a1,164(sp)
80029b78:	24040004 	li	a0,4
        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
80029b7c:	0c00f268 	jal	8003c9a0 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>
80029b80:	00000000 	nop
80029b84:	00402025 	move	a0,v0
80029b88:	00801025 	move	v0,a0
80029b8c:	afa2001c 	sw	v0,28(sp)
80029b90:	afa400a8 	sw	a0,168(sp)
        let new_layout = Layout::array::<T>(cap);
80029b94:	0c009491 	jal	80025244 <_ZN4core5alloc6layout6Layout5array17h027b76eb6a1ddc18E>
80029b98:	00000000 	nop
80029b9c:	8fa50044 	lw	a1,68(sp)
80029ba0:	afa20020 	sw	v0,32(sp)
80029ba4:	afa30024 	sw	v1,36(sp)
80029ba8:	afa200ac 	sw	v0,172(sp)
80029bac:	afa300b0 	sw	v1,176(sp)
80029bb0:	27a40088 	addiu	a0,sp,136
80029bb4:	afa40028 	sw	a0,40(sp)
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80029bb8:	0c00a49c 	jal	80029270 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h27a3c206fb502628E>
80029bbc:	00000000 	nop
80029bc0:	8fa10044 	lw	at,68(sp)
80029bc4:	8fa50020 	lw	a1,32(sp)
80029bc8:	8fa60024 	lw	a2,36(sp)
80029bcc:	8fa70028 	lw	a3,40(sp)
80029bd0:	24210008 	addiu	at,at,8
80029bd4:	03a01025 	move	v0,sp
80029bd8:	ac410010 	sw	at,16(v0)
80029bdc:	27a4007c 	addiu	a0,sp,124
80029be0:	afa4002c 	sw	a0,44(sp)
80029be4:	0c00e924 	jal	8003a490 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E>
80029be8:	00000000 	nop
80029bec:	8fa5002c 	lw	a1,44(sp)
80029bf0:	27a40070 	addiu	a0,sp,112
80029bf4:	0c00e8ee 	jal	8003a3b8 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E>
80029bf8:	00000000 	nop
80029bfc:	8fa10070 	lw	at,112(sp)
80029c00:	10200007 	beqz	at,80029c20 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7ac8e44b19d9282cE+0x1e8>
80029c04:	00000000 	nop
80029c08:	0800a715 	j	80029c54 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7ac8e44b19d9282cE+0x21c>
80029c0c:	00000000 	nop
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029c10:	3c018105 	lui	at,0x8105
80029c14:	2424f060 	addiu	a0,at,-4000
80029c18:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
80029c1c:	00000000 	nop
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80029c20:	8fa7001c 	lw	a3,28(sp)
80029c24:	8fa40044 	lw	a0,68(sp)
80029c28:	8fa50074 	lw	a1,116(sp)
80029c2c:	8fa60078 	lw	a2,120(sp)
80029c30:	afa500b4 	sw	a1,180(sp)
80029c34:	afa600b8 	sw	a2,184(sp)
        unsafe { self.set_ptr_and_cap(ptr, cap) };
80029c38:	0c00a761 	jal	80029d84 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17h629ee8cc82e37378E>
80029c3c:	00000000 	nop
80029c40:	3c018000 	lui	at,0x8000
80029c44:	34210001 	ori	at,at,0x1
        Ok(())
80029c48:	afa10048 	sw	at,72(sp)
    }
80029c4c:	0800a721 	j	80029c84 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7ac8e44b19d9282cE+0x24c>
80029c50:	00000000 	nop
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80029c54:	8fa40074 	lw	a0,116(sp)
80029c58:	8fa50078 	lw	a1,120(sp)
80029c5c:	afa400bc 	sw	a0,188(sp)
80029c60:	afa500c0 	sw	a1,192(sp)
80029c64:	3c018105 	lui	at,0x8105
80029c68:	2426f070 	addiu	a2,at,-3984
80029c6c:	0c00e3db 	jal	80038f6c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h491e696a56edf9eeE>
80029c70:	00000000 	nop
80029c74:	afa20048 	sw	v0,72(sp)
80029c78:	afa3004c 	sw	v1,76(sp)
80029c7c:	0800a721 	j	80029c84 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7ac8e44b19d9282cE+0x24c>
80029c80:	00000000 	nop
    }
80029c84:	8fa20048 	lw	v0,72(sp)
80029c88:	8fa3004c 	lw	v1,76(sp)
80029c8c:	8fbf00cc 	lw	ra,204(sp)
80029c90:	27bd00d0 	addiu	sp,sp,208
80029c94:	03e00008 	jr	ra
80029c98:	00000000 	nop

80029c9c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17h1c9e5fa81b22a741E>:
    unsafe fn set_ptr_and_cap(&mut self, ptr: NonNull<[u8]>, cap: usize) {
80029c9c:	27bdffc8 	addiu	sp,sp,-56
80029ca0:	afbf0034 	sw	ra,52(sp)
80029ca4:	afa70018 	sw	a3,24(sp)
80029ca8:	afa60010 	sw	a2,16(sp)
80029cac:	00a00825 	move	at,a1
80029cb0:	8fa50010 	lw	a1,16(sp)
80029cb4:	afa10014 	sw	at,20(sp)
80029cb8:	00800825 	move	at,a0
80029cbc:	8fa40014 	lw	a0,20(sp)
80029cc0:	afa1001c 	sw	at,28(sp)
80029cc4:	afa10024 	sw	at,36(sp)
80029cc8:	afa40028 	sw	a0,40(sp)
80029ccc:	afa5002c 	sw	a1,44(sp)
80029cd0:	afa70030 	sw	a3,48(sp)
        self.ptr = Unique::from(ptr.cast());
80029cd4:	0c008dcf 	jal	8002373c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h716a65c70d91448aE>
80029cd8:	00000000 	nop
80029cdc:	00402025 	move	a0,v0
80029ce0:	0c00806d 	jal	800201b4 <_ZN119_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..non_null..NonNull$LT$T$GT$$GT$$GT$4from17h6c56bad5d9c3a2f0E>
80029ce4:	00000000 	nop
80029ce8:	8fa70018 	lw	a3,24(sp)
80029cec:	8fa4001c 	lw	a0,28(sp)
80029cf0:	ac820004 	sw	v0,4(a0)
        self.cap = unsafe { Cap(cap) };
80029cf4:	afa70020 	sw	a3,32(sp)
80029cf8:	8fa10020 	lw	at,32(sp)
80029cfc:	ac810000 	sw	at,0(a0)
    }
80029d00:	8fbf0034 	lw	ra,52(sp)
80029d04:	27bd0038 	addiu	sp,sp,56
80029d08:	03e00008 	jr	ra
80029d0c:	00000000 	nop

80029d10 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17h2b8096012af24dedE>:
    unsafe fn set_ptr_and_cap(&mut self, ptr: NonNull<[u8]>, cap: usize) {
80029d10:	27bdffc8 	addiu	sp,sp,-56
80029d14:	afbf0034 	sw	ra,52(sp)
80029d18:	afa70018 	sw	a3,24(sp)
80029d1c:	afa60010 	sw	a2,16(sp)
80029d20:	00a00825 	move	at,a1
80029d24:	8fa50010 	lw	a1,16(sp)
80029d28:	afa10014 	sw	at,20(sp)
80029d2c:	00800825 	move	at,a0
80029d30:	8fa40014 	lw	a0,20(sp)
80029d34:	afa1001c 	sw	at,28(sp)
80029d38:	afa10024 	sw	at,36(sp)
80029d3c:	afa40028 	sw	a0,40(sp)
80029d40:	afa5002c 	sw	a1,44(sp)
80029d44:	afa70030 	sw	a3,48(sp)
        self.ptr = Unique::from(ptr.cast());
80029d48:	0c008db5 	jal	800236d4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h2e0bb1d1b24dd1f0E>
80029d4c:	00000000 	nop
80029d50:	00402025 	move	a0,v0
80029d54:	0c00807b 	jal	800201ec <_ZN119_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..non_null..NonNull$LT$T$GT$$GT$$GT$4from17he4638395ef099ef7E>
80029d58:	00000000 	nop
80029d5c:	8fa70018 	lw	a3,24(sp)
80029d60:	8fa4001c 	lw	a0,28(sp)
80029d64:	ac820004 	sw	v0,4(a0)
        self.cap = unsafe { Cap(cap) };
80029d68:	afa70020 	sw	a3,32(sp)
80029d6c:	8fa10020 	lw	at,32(sp)
80029d70:	ac810000 	sw	at,0(a0)
    }
80029d74:	8fbf0034 	lw	ra,52(sp)
80029d78:	27bd0038 	addiu	sp,sp,56
80029d7c:	03e00008 	jr	ra
80029d80:	00000000 	nop

80029d84 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17h629ee8cc82e37378E>:
    unsafe fn set_ptr_and_cap(&mut self, ptr: NonNull<[u8]>, cap: usize) {
80029d84:	27bdffc8 	addiu	sp,sp,-56
80029d88:	afbf0034 	sw	ra,52(sp)
80029d8c:	afa70018 	sw	a3,24(sp)
80029d90:	afa60010 	sw	a2,16(sp)
80029d94:	00a00825 	move	at,a1
80029d98:	8fa50010 	lw	a1,16(sp)
80029d9c:	afa10014 	sw	at,20(sp)
80029da0:	00800825 	move	at,a0
80029da4:	8fa40014 	lw	a0,20(sp)
80029da8:	afa1001c 	sw	at,28(sp)
80029dac:	afa10024 	sw	at,36(sp)
80029db0:	afa40028 	sw	a0,40(sp)
80029db4:	afa5002c 	sw	a1,44(sp)
80029db8:	afa70030 	sw	a3,48(sp)
        self.ptr = Unique::from(ptr.cast());
80029dbc:	0c008de1 	jal	80023784 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h7f9474a629996583E>
80029dc0:	00000000 	nop
80029dc4:	00402025 	move	a0,v0
80029dc8:	0c008074 	jal	800201d0 <_ZN119_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..non_null..NonNull$LT$T$GT$$GT$$GT$4from17h8ae7d9027108705dE>
80029dcc:	00000000 	nop
80029dd0:	8fa70018 	lw	a3,24(sp)
80029dd4:	8fa4001c 	lw	a0,28(sp)
80029dd8:	ac820004 	sw	v0,4(a0)
        self.cap = unsafe { Cap(cap) };
80029ddc:	afa70020 	sw	a3,32(sp)
80029de0:	8fa10020 	lw	at,32(sp)
80029de4:	ac810000 	sw	at,0(a0)
    }
80029de8:	8fbf0034 	lw	ra,52(sp)
80029dec:	27bd0038 	addiu	sp,sp,56
80029df0:	03e00008 	jr	ra
80029df4:	00000000 	nop

80029df8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E>:
    fn try_allocate_in(
80029df8:	27bdff80 	addiu	sp,sp,-128
80029dfc:	afbf007c 	sw	ra,124(sp)
80029e00:	afa50014 	sw	a1,20(sp)
80029e04:	afa40018 	sw	a0,24(sp)
80029e08:	afa4001c 	sw	a0,28(sp)
80029e0c:	a3a60022 	sb	a2,34(sp)
80029e10:	afa50060 	sw	a1,96(sp)
        if T::IS_ZST || capacity == 0 {
80029e14:	0800a787 	j	80029e1c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x24>
80029e18:	00000000 	nop
80029e1c:	8fa10014 	lw	at,20(sp)
80029e20:	1420000b 	bnez	at,80029e50 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x58>
80029e24:	00000000 	nop
80029e28:	0800a78c 	j	80029e30 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x38>
80029e2c:	00000000 	nop
            Ok(Self::new_in(alloc))
80029e30:	0c00a855 	jal	8002a154 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6new_in17hea0890971f05edd9E>
80029e34:	00000000 	nop
80029e38:	8fa10018 	lw	at,24(sp)
80029e3c:	ac220004 	sw	v0,4(at)
80029e40:	ac230008 	sw	v1,8(at)
80029e44:	ac200000 	sw	zero,0(at)
        if T::IS_ZST || capacity == 0 {
80029e48:	0800a814 	j	8002a050 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x258>
80029e4c:	00000000 	nop
            let layout = match Layout::array::<T>(capacity) {
80029e50:	8fa40014 	lw	a0,20(sp)
80029e54:	0c0094a0 	jal	80025280 <_ZN4core5alloc6layout6Layout5array17h46bf1e6439f9f622E>
80029e58:	00000000 	nop
80029e5c:	afa2002c 	sw	v0,44(sp)
80029e60:	afa30030 	sw	v1,48(sp)
80029e64:	8fa1002c 	lw	at,44(sp)
80029e68:	10200018 	beqz	at,80029ecc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0xd4>
80029e6c:	00000000 	nop
80029e70:	0800a79e 	j	80029e78 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x80>
80029e74:	00000000 	nop
                Ok(layout) => layout,
80029e78:	8fa2002c 	lw	v0,44(sp)
80029e7c:	8fa10030 	lw	at,48(sp)
80029e80:	afa20064 	sw	v0,100(sp)
80029e84:	afa10068 	sw	at,104(sp)
80029e88:	afa20024 	sw	v0,36(sp)
80029e8c:	afa10028 	sw	at,40(sp)
80029e90:	27a40024 	addiu	a0,sp,36
            if let Err(err) = alloc_guard(layout.size()) {
80029e94:	0c009481 	jal	80025204 <_ZN4core5alloc6layout6Layout4size17h2e77e01e84646f95E>
80029e98:	00000000 	nop
80029e9c:	00402025 	move	a0,v0
80029ea0:	0c00a47b 	jal	800291ec <_ZN5alloc7raw_vec11alloc_guard17h65e64a8e143de38fE>
80029ea4:	00000000 	nop
80029ea8:	afa2003c 	sw	v0,60(sp)
80029eac:	afa30040 	sw	v1,64(sp)
80029eb0:	8fa1003c 	lw	at,60(sp)
80029eb4:	3c028000 	lui	v0,0x8000
80029eb8:	34420001 	ori	v0,v0,0x1
80029ebc:	14220012 	bne	at,v0,80029f08 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x110>
80029ec0:	00000000 	nop
80029ec4:	0800a7cd 	j	80029f34 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x13c>
80029ec8:	00000000 	nop
                Err(_) => return Err(CapacityOverflow.into()),
80029ecc:	afa00034 	sw	zero,52(sp)
80029ed0:	8fa40034 	lw	a0,52(sp)
80029ed4:	8fa50038 	lw	a1,56(sp)
80029ed8:	3c018105 	lui	at,0x8105
80029edc:	2426f0a0 	addiu	a2,at,-3936
80029ee0:	0c00e83a 	jal	8003a0e8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h48d30d11e82a5204E>
80029ee4:	00000000 	nop
80029ee8:	00400825 	move	at,v0
80029eec:	8fa20018 	lw	v0,24(sp)
80029ef0:	ac410004 	sw	at,4(v0)
80029ef4:	ac430008 	sw	v1,8(v0)
80029ef8:	24010001 	li	at,1
80029efc:	ac410000 	sw	at,0(v0)
80029f00:	0800a7d3 	j	80029f4c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x154>
80029f04:	00000000 	nop
            if let Err(err) = alloc_guard(layout.size()) {
80029f08:	8fa20018 	lw	v0,24(sp)
80029f0c:	8fa3003c 	lw	v1,60(sp)
80029f10:	8fa10040 	lw	at,64(sp)
80029f14:	afa3006c 	sw	v1,108(sp)
80029f18:	afa10070 	sw	at,112(sp)
                return Err(err);
80029f1c:	ac430004 	sw	v1,4(v0)
80029f20:	ac410008 	sw	at,8(v0)
80029f24:	24010001 	li	at,1
80029f28:	ac410000 	sw	at,0(v0)
80029f2c:	0800a7d3 	j	80029f4c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x154>
80029f30:	00000000 	nop
            let result = match init {
80029f34:	93a10022 	lbu	at,34(sp)
80029f38:	30210001 	andi	at,at,0x1
80029f3c:	10200005 	beqz	at,80029f54 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x15c>
80029f40:	00000000 	nop
80029f44:	0800a7de 	j	80029f78 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x180>
80029f48:	00000000 	nop
    }
80029f4c:	0800a814 	j	8002a050 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x258>
80029f50:	00000000 	nop
                AllocInit::Uninitialized => alloc.allocate(layout),
80029f54:	8fa50024 	lw	a1,36(sp)
80029f58:	8fa60028 	lw	a2,40(sp)
80029f5c:	27a40023 	addiu	a0,sp,35
80029f60:	0c00a8d5 	jal	8002a354 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h60f604df2057896cE>
80029f64:	00000000 	nop
80029f68:	afa20044 	sw	v0,68(sp)
80029f6c:	afa30048 	sw	v1,72(sp)
80029f70:	0800a7e7 	j	80029f9c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x1a4>
80029f74:	00000000 	nop
                AllocInit::Zeroed => alloc.allocate_zeroed(layout),
80029f78:	8fa50024 	lw	a1,36(sp)
80029f7c:	8fa60028 	lw	a2,40(sp)
80029f80:	27a40023 	addiu	a0,sp,35
80029f84:	0c00a8c9 	jal	8002a324 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h3e3ed1c378f6fb10E>
80029f88:	00000000 	nop
80029f8c:	afa20044 	sw	v0,68(sp)
80029f90:	afa30048 	sw	v1,72(sp)
80029f94:	0800a7e7 	j	80029f9c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x1a4>
80029f98:	00000000 	nop
            let ptr = match result {
80029f9c:	8fa10044 	lw	at,68(sp)
80029fa0:	10200019 	beqz	at,8002a008 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x210>
80029fa4:	00000000 	nop
80029fa8:	0800a7ec 	j	80029fb0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x1b8>
80029fac:	00000000 	nop
                Ok(ptr) => ptr,
80029fb0:	8fa40044 	lw	a0,68(sp)
80029fb4:	8fa50048 	lw	a1,72(sp)
80029fb8:	afa40074 	sw	a0,116(sp)
80029fbc:	afa50078 	sw	a1,120(sp)
            Ok(Self { ptr: Unique::from(ptr.cast()), cap: unsafe { Cap(capacity) }, alloc })
80029fc0:	0c008dcf 	jal	8002373c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h716a65c70d91448aE>
80029fc4:	00000000 	nop
80029fc8:	00402025 	move	a0,v0
80029fcc:	0c00806d 	jal	800201b4 <_ZN119_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..non_null..NonNull$LT$T$GT$$GT$$GT$4from17h6c56bad5d9c3a2f0E>
80029fd0:	00000000 	nop
80029fd4:	8fa30014 	lw	v1,20(sp)
80029fd8:	8fa10018 	lw	at,24(sp)
80029fdc:	afa3005c 	sw	v1,92(sp)
80029fe0:	afa20058 	sw	v0,88(sp)
80029fe4:	8fa2005c 	lw	v0,92(sp)
80029fe8:	afa20054 	sw	v0,84(sp)
80029fec:	8fa30054 	lw	v1,84(sp)
80029ff0:	8fa20058 	lw	v0,88(sp)
80029ff4:	ac230004 	sw	v1,4(at)
80029ff8:	ac220008 	sw	v0,8(at)
80029ffc:	ac200000 	sw	zero,0(at)
        if T::IS_ZST || capacity == 0 {
8002a000:	0800a814 	j	8002a050 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x258>
8002a004:	00000000 	nop
                Err(_) => return Err(AllocError { layout, non_exhaustive: () }.into()),
8002a008:	8fa20024 	lw	v0,36(sp)
8002a00c:	8fa10028 	lw	at,40(sp)
8002a010:	afa2004c 	sw	v0,76(sp)
8002a014:	afa10050 	sw	at,80(sp)
8002a018:	8fa4004c 	lw	a0,76(sp)
8002a01c:	8fa50050 	lw	a1,80(sp)
8002a020:	3c018105 	lui	at,0x8105
8002a024:	2426f090 	addiu	a2,at,-3952
8002a028:	0c00e83a 	jal	8003a0e8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h48d30d11e82a5204E>
8002a02c:	00000000 	nop
8002a030:	00400825 	move	at,v0
8002a034:	8fa20018 	lw	v0,24(sp)
8002a038:	ac410004 	sw	at,4(v0)
8002a03c:	ac430008 	sw	v1,8(v0)
8002a040:	24010001 	li	at,1
8002a044:	ac410000 	sw	at,0(v0)
8002a048:	0800a7d3 	j	80029f4c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E+0x154>
8002a04c:	00000000 	nop
    }
8002a050:	8fa2001c 	lw	v0,28(sp)
8002a054:	8fbf007c 	lw	ra,124(sp)
8002a058:	27bd0080 	addiu	sp,sp,128
8002a05c:	03e00008 	jr	ra
8002a060:	00000000 	nop

8002a064 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16with_capacity_in17hc60f1203557174d3E>:
    pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
8002a064:	27bdffc0 	addiu	sp,sp,-64
8002a068:	afbf003c 	sw	ra,60(sp)
8002a06c:	00802825 	move	a1,a0
8002a070:	afa50024 	sw	a1,36(sp)
8002a074:	24010000 	li	at,0
        match Self::try_allocate_in(capacity, AllocInit::Uninitialized, alloc) {
8002a078:	a3a00023 	sb	zero,35(sp)
8002a07c:	93a10023 	lbu	at,35(sp)
8002a080:	30260001 	andi	a2,at,0x1
8002a084:	27a40014 	addiu	a0,sp,20
8002a088:	0c00a77e 	jal	80029df8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h830b085021426883E>
8002a08c:	00000000 	nop
8002a090:	8fa10014 	lw	at,20(sp)
8002a094:	1420000b 	bnez	at,8002a0c4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16with_capacity_in17hc60f1203557174d3E+0x60>
8002a098:	00000000 	nop
8002a09c:	0800a829 	j	8002a0a4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16with_capacity_in17hc60f1203557174d3E+0x40>
8002a0a0:	00000000 	nop
            Ok(res) => res,
8002a0a4:	8fa20018 	lw	v0,24(sp)
8002a0a8:	8fa3001c 	lw	v1,28(sp)
8002a0ac:	afa2002c 	sw	v0,44(sp)
8002a0b0:	afa30030 	sw	v1,48(sp)
    }
8002a0b4:	8fbf003c 	lw	ra,60(sp)
8002a0b8:	27bd0040 	addiu	sp,sp,64
8002a0bc:	03e00008 	jr	ra
8002a0c0:	00000000 	nop
            Err(err) => handle_error(err),
8002a0c4:	8fa40018 	lw	a0,24(sp)
8002a0c8:	8fa5001c 	lw	a1,28(sp)
8002a0cc:	afa40034 	sw	a0,52(sp)
8002a0d0:	afa50038 	sw	a1,56(sp)
8002a0d4:	0c00e9f7 	jal	8003a7dc <_ZN5alloc7raw_vec12handle_error17hfb0478db9ca6b296E>
8002a0d8:	00000000 	nop

8002a0dc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h0d09177d9d493e1eE>:
    pub fn ptr(&self) -> *mut T {
8002a0dc:	27bdffe8 	addiu	sp,sp,-24
8002a0e0:	afbf0014 	sw	ra,20(sp)
8002a0e4:	afa40010 	sw	a0,16(sp)
        self.ptr.as_ptr()
8002a0e8:	8c840004 	lw	a0,4(a0)
8002a0ec:	0c008c60 	jal	80023180 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hed7aa36e9ce417dcE>
8002a0f0:	00000000 	nop
    }
8002a0f4:	8fbf0014 	lw	ra,20(sp)
8002a0f8:	27bd0018 	addiu	sp,sp,24
8002a0fc:	03e00008 	jr	ra
8002a100:	00000000 	nop

8002a104 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17he4175b2aeb18ad4fE>:
    pub fn ptr(&self) -> *mut T {
8002a104:	27bdffe8 	addiu	sp,sp,-24
8002a108:	afbf0014 	sw	ra,20(sp)
8002a10c:	afa40010 	sw	a0,16(sp)
        self.ptr.as_ptr()
8002a110:	8c840004 	lw	a0,4(a0)
8002a114:	0c008c44 	jal	80023110 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h2becb047ac27694dE>
8002a118:	00000000 	nop
    }
8002a11c:	8fbf0014 	lw	ra,20(sp)
8002a120:	27bd0018 	addiu	sp,sp,24
8002a124:	03e00008 	jr	ra
8002a128:	00000000 	nop

8002a12c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17hec5e6711045aa626E>:
    pub fn ptr(&self) -> *mut T {
8002a12c:	27bdffe8 	addiu	sp,sp,-24
8002a130:	afbf0014 	sw	ra,20(sp)
8002a134:	afa40010 	sw	a0,16(sp)
        self.ptr.as_ptr()
8002a138:	8c840004 	lw	a0,4(a0)
8002a13c:	0c008c52 	jal	80023148 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h717033e60a03dc35E>
8002a140:	00000000 	nop
    }
8002a144:	8fbf0014 	lw	ra,20(sp)
8002a148:	27bd0018 	addiu	sp,sp,24
8002a14c:	03e00008 	jr	ra
8002a150:	00000000 	nop

8002a154 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6new_in17hea0890971f05edd9E>:
    pub const fn new_in(alloc: A) -> Self {
8002a154:	27bdffe0 	addiu	sp,sp,-32
8002a158:	afbf001c 	sw	ra,28(sp)
        Self { ptr: Unique::dangling(), cap: Cap::ZERO, alloc }
8002a15c:	0c008c67 	jal	8002319c <_ZN4core3ptr6unique15Unique$LT$T$GT$8dangling17hd57842846b6d472fE>
8002a160:	00000000 	nop
8002a164:	afa20014 	sw	v0,20(sp)
8002a168:	afa00010 	sw	zero,16(sp)
    }
8002a16c:	8fa20010 	lw	v0,16(sp)
8002a170:	8fa30014 	lw	v1,20(sp)
8002a174:	8fbf001c 	lw	ra,28(sp)
8002a178:	27bd0020 	addiu	sp,sp,32
8002a17c:	03e00008 	jr	ra
8002a180:	00000000 	nop

8002a184 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h41e044b9158dd496E>:
    pub fn grow_one(&mut self) {
8002a184:	27bdffd8 	addiu	sp,sp,-40
8002a188:	afbf0024 	sw	ra,36(sp)
8002a18c:	afa40018 	sw	a0,24(sp)
        if let Err(err) = self.grow_amortized(self.cap.0, 1) {
8002a190:	8c850000 	lw	a1,0(a0)
8002a194:	24060001 	li	a2,1
8002a198:	0c00a55c 	jal	80029570 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h25cfefad1b33b072E>
8002a19c:	00000000 	nop
8002a1a0:	afa20010 	sw	v0,16(sp)
8002a1a4:	afa30014 	sw	v1,20(sp)
8002a1a8:	8fa10010 	lw	at,16(sp)
8002a1ac:	3c028000 	lui	v0,0x8000
8002a1b0:	34420001 	ori	v0,v0,0x1
8002a1b4:	10220009 	beq	at,v0,8002a1dc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h41e044b9158dd496E+0x58>
8002a1b8:	00000000 	nop
8002a1bc:	0800a871 	j	8002a1c4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h41e044b9158dd496E+0x40>
8002a1c0:	00000000 	nop
8002a1c4:	8fa40010 	lw	a0,16(sp)
8002a1c8:	8fa50014 	lw	a1,20(sp)
8002a1cc:	afa4001c 	sw	a0,28(sp)
8002a1d0:	afa50020 	sw	a1,32(sp)
            handle_error(err);
8002a1d4:	0c00e9f7 	jal	8003a7dc <_ZN5alloc7raw_vec12handle_error17hfb0478db9ca6b296E>
8002a1d8:	00000000 	nop
    }
8002a1dc:	8fbf0024 	lw	ra,36(sp)
8002a1e0:	27bd0028 	addiu	sp,sp,40
8002a1e4:	03e00008 	jr	ra
8002a1e8:	00000000 	nop

8002a1ec <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h7bd9119c9c053733E>:
    pub fn grow_one(&mut self) {
8002a1ec:	27bdffd8 	addiu	sp,sp,-40
8002a1f0:	afbf0024 	sw	ra,36(sp)
8002a1f4:	afa40018 	sw	a0,24(sp)
        if let Err(err) = self.grow_amortized(self.cap.0, 1) {
8002a1f8:	8c850000 	lw	a1,0(a0)
8002a1fc:	24060001 	li	a2,1
8002a200:	0c00a68e 	jal	80029a38 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7ac8e44b19d9282cE>
8002a204:	00000000 	nop
8002a208:	afa20010 	sw	v0,16(sp)
8002a20c:	afa30014 	sw	v1,20(sp)
8002a210:	8fa10010 	lw	at,16(sp)
8002a214:	3c028000 	lui	v0,0x8000
8002a218:	34420001 	ori	v0,v0,0x1
8002a21c:	10220009 	beq	at,v0,8002a244 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h7bd9119c9c053733E+0x58>
8002a220:	00000000 	nop
8002a224:	0800a88b 	j	8002a22c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h7bd9119c9c053733E+0x40>
8002a228:	00000000 	nop
8002a22c:	8fa40010 	lw	a0,16(sp)
8002a230:	8fa50014 	lw	a1,20(sp)
8002a234:	afa4001c 	sw	a0,28(sp)
8002a238:	afa50020 	sw	a1,32(sp)
            handle_error(err);
8002a23c:	0c00e9f7 	jal	8003a7dc <_ZN5alloc7raw_vec12handle_error17hfb0478db9ca6b296E>
8002a240:	00000000 	nop
    }
8002a244:	8fbf0024 	lw	ra,36(sp)
8002a248:	27bd0028 	addiu	sp,sp,40
8002a24c:	03e00008 	jr	ra
8002a250:	00000000 	nop

8002a254 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hdeeb03b248ec99bdE>:
    pub fn grow_one(&mut self) {
8002a254:	27bdffd8 	addiu	sp,sp,-40
8002a258:	afbf0024 	sw	ra,36(sp)
8002a25c:	afa40018 	sw	a0,24(sp)
        if let Err(err) = self.grow_amortized(self.cap.0, 1) {
8002a260:	8c850000 	lw	a1,0(a0)
8002a264:	24060001 	li	a2,1
8002a268:	0c00a5f5 	jal	800297d4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h77b5f2c95bbad9c1E>
8002a26c:	00000000 	nop
8002a270:	afa20010 	sw	v0,16(sp)
8002a274:	afa30014 	sw	v1,20(sp)
8002a278:	8fa10010 	lw	at,16(sp)
8002a27c:	3c028000 	lui	v0,0x8000
8002a280:	34420001 	ori	v0,v0,0x1
8002a284:	10220009 	beq	at,v0,8002a2ac <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hdeeb03b248ec99bdE+0x58>
8002a288:	00000000 	nop
8002a28c:	0800a8a5 	j	8002a294 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hdeeb03b248ec99bdE+0x40>
8002a290:	00000000 	nop
8002a294:	8fa40010 	lw	a0,16(sp)
8002a298:	8fa50014 	lw	a1,20(sp)
8002a29c:	afa4001c 	sw	a0,28(sp)
8002a2a0:	afa50020 	sw	a1,32(sp)
            handle_error(err);
8002a2a4:	0c00e9f7 	jal	8003a7dc <_ZN5alloc7raw_vec12handle_error17hfb0478db9ca6b296E>
8002a2a8:	00000000 	nop
    }
8002a2ac:	8fbf0024 	lw	ra,36(sp)
8002a2b0:	27bd0028 	addiu	sp,sp,40
8002a2b4:	03e00008 	jr	ra
8002a2b8:	00000000 	nop

8002a2bc <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h67f0c0ff29e53613E>:
    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {
8002a2bc:	27bdffd0 	addiu	sp,sp,-48
8002a2c0:	afbf002c 	sw	ra,44(sp)
8002a2c4:	afa50014 	sw	a1,20(sp)
8002a2c8:	afa60018 	sw	a2,24(sp)
8002a2cc:	afa7001c 	sw	a3,28(sp)
8002a2d0:	afa40020 	sw	a0,32(sp)
8002a2d4:	afa50024 	sw	a1,36(sp)
8002a2d8:	27a40018 	addiu	a0,sp,24
        if layout.size() != 0 {
8002a2dc:	0c009481 	jal	80025204 <_ZN4core5alloc6layout6Layout4size17h2e77e01e84646f95E>
8002a2e0:	00000000 	nop
8002a2e4:	14400007 	bnez	v0,8002a304 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h67f0c0ff29e53613E+0x48>
8002a2e8:	00000000 	nop
8002a2ec:	0800a8bd 	j	8002a2f4 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h67f0c0ff29e53613E+0x38>
8002a2f0:	00000000 	nop
    }
8002a2f4:	8fbf002c 	lw	ra,44(sp)
8002a2f8:	27bd0030 	addiu	sp,sp,48
8002a2fc:	03e00008 	jr	ra
8002a300:	00000000 	nop
8002a304:	8fa40014 	lw	a0,20(sp)
8002a308:	afa40028 	sw	a0,40(sp)
            unsafe { dealloc(ptr.as_ptr(), layout) }
8002a30c:	8fa50018 	lw	a1,24(sp)
8002a310:	8fa6001c 	lw	a2,28(sp)
8002a314:	0c00a43b 	jal	800290ec <_ZN5alloc5alloc7dealloc17h9cec2fc442e76755E>
8002a318:	00000000 	nop
8002a31c:	0800a8bd 	j	8002a2f4 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h67f0c0ff29e53613E+0x38>
8002a320:	00000000 	nop

8002a324 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h3e3ed1c378f6fb10E>:
    fn allocate_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
8002a324:	27bdffe0 	addiu	sp,sp,-32
8002a328:	afbf001c 	sw	ra,28(sp)
8002a32c:	afa40010 	sw	a0,16(sp)
8002a330:	afa50014 	sw	a1,20(sp)
8002a334:	afa60018 	sw	a2,24(sp)
8002a338:	24070001 	li	a3,1
        self.alloc_impl(layout, true)
8002a33c:	0c00a3e4 	jal	80028f90 <_ZN5alloc5alloc6Global10alloc_impl17hd9d11e451cd0f840E>
8002a340:	00000000 	nop
    }
8002a344:	8fbf001c 	lw	ra,28(sp)
8002a348:	27bd0020 	addiu	sp,sp,32
8002a34c:	03e00008 	jr	ra
8002a350:	00000000 	nop

8002a354 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h60f604df2057896cE>:
    fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
8002a354:	27bdffe0 	addiu	sp,sp,-32
8002a358:	afbf001c 	sw	ra,28(sp)
8002a35c:	afa40010 	sw	a0,16(sp)
8002a360:	afa50014 	sw	a1,20(sp)
8002a364:	afa60018 	sw	a2,24(sp)
8002a368:	24070000 	li	a3,0
        self.alloc_impl(layout, false)
8002a36c:	0c00a3e4 	jal	80028f90 <_ZN5alloc5alloc6Global10alloc_impl17hd9d11e451cd0f840E>
8002a370:	00000000 	nop
    }
8002a374:	8fbf001c 	lw	ra,28(sp)
8002a378:	27bd0020 	addiu	sp,sp,32
8002a37c:	03e00008 	jr	ra
8002a380:	00000000 	nop

8002a384 <_ZN63_$LT$core..cell..BorrowRef$u20$as$u20$core..ops..drop..Drop$GT$4drop17h093b3d6f2f3ec926E>:
    fn drop(&mut self) {
8002a384:	27bdffd0 	addiu	sp,sp,-48
8002a388:	afbf002c 	sw	ra,44(sp)
8002a38c:	afa40018 	sw	a0,24(sp)
8002a390:	afa40020 	sw	a0,32(sp)
        let borrow = self.borrow.get();
8002a394:	8c840000 	lw	a0,0(a0)
8002a398:	0c008eeb 	jal	80023bac <_ZN4core4cell13Cell$LT$T$GT$3get17hb03644952720e905E>
8002a39c:	00000000 	nop
8002a3a0:	00400825 	move	at,v0
8002a3a4:	afa1001c 	sw	at,28(sp)
8002a3a8:	afa20024 	sw	v0,36(sp)
        debug_assert!(is_reading(borrow));
8002a3ac:	0800a8ed 	j	8002a3b4 <_ZN63_$LT$core..cell..BorrowRef$u20$as$u20$core..ops..drop..Drop$GT$4drop17h093b3d6f2f3ec926E+0x30>
8002a3b0:	00000000 	nop
8002a3b4:	8fa1001c 	lw	at,28(sp)
8002a3b8:	afa10028 	sw	at,40(sp)
8002a3bc:	1c20000a 	bgtz	at,8002a3e8 <_ZN63_$LT$core..cell..BorrowRef$u20$as$u20$core..ops..drop..Drop$GT$4drop17h093b3d6f2f3ec926E+0x64>
8002a3c0:	00000000 	nop
8002a3c4:	0800a8f3 	j	8002a3cc <_ZN63_$LT$core..cell..BorrowRef$u20$as$u20$core..ops..drop..Drop$GT$4drop17h093b3d6f2f3ec926E+0x48>
8002a3c8:	00000000 	nop
8002a3cc:	3c018105 	lui	at,0x8105
8002a3d0:	2424f0b0 	addiu	a0,at,-3920
8002a3d4:	3c018105 	lui	at,0x8105
8002a3d8:	2426f0d4 	addiu	a2,at,-3884
8002a3dc:	24050024 	li	a1,36
8002a3e0:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
8002a3e4:	00000000 	nop
        self.borrow.set(borrow - 1);
8002a3e8:	8fa2001c 	lw	v0,28(sp)
8002a3ec:	8fa10018 	lw	at,24(sp)
8002a3f0:	8c210000 	lw	at,0(at)
8002a3f4:	afa10010 	sw	at,16(sp)
8002a3f8:	2441ffff 	addiu	at,v0,-1
8002a3fc:	afa10014 	sw	at,20(sp)
8002a400:	0022082a 	slt	at,at,v0
8002a404:	1020000b 	beqz	at,8002a434 <_ZN63_$LT$core..cell..BorrowRef$u20$as$u20$core..ops..drop..Drop$GT$4drop17h093b3d6f2f3ec926E+0xb0>
8002a408:	00000000 	nop
8002a40c:	0800a905 	j	8002a414 <_ZN63_$LT$core..cell..BorrowRef$u20$as$u20$core..ops..drop..Drop$GT$4drop17h093b3d6f2f3ec926E+0x90>
8002a410:	00000000 	nop
8002a414:	8fa50014 	lw	a1,20(sp)
8002a418:	8fa40010 	lw	a0,16(sp)
8002a41c:	0c008f10 	jal	80023c40 <_ZN4core4cell13Cell$LT$T$GT$3set17hd64a6e9ba6e83604E>
8002a420:	00000000 	nop
    }
8002a424:	8fbf002c 	lw	ra,44(sp)
8002a428:	27bd0030 	addiu	sp,sp,48
8002a42c:	03e00008 	jr	ra
8002a430:	00000000 	nop
        self.borrow.set(borrow - 1);
8002a434:	3c018105 	lui	at,0x8105
8002a438:	2424f0e4 	addiu	a0,at,-3868
8002a43c:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002a440:	00000000 	nop

8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>:
    fn clone(&self) -> Self {
8002a444:	27bdffd0 	addiu	sp,sp,-48
8002a448:	afbf002c 	sw	ra,44(sp)
8002a44c:	afa40010 	sw	a0,16(sp)
8002a450:	afa40018 	sw	a0,24(sp)
8002a454:	afa4001c 	sw	a0,28(sp)
8002a458:	afa40020 	sw	a0,32(sp)
        unsafe { &*self.as_ptr().cast_const() }
8002a45c:	8c840000 	lw	a0,0(a0)
8002a460:	afa40028 	sw	a0,40(sp)
8002a464:	afa40024 	sw	a0,36(sp)
            self.inner().inc_strong();
8002a468:	0c00a1da 	jal	80028768 <_ZN5alloc2rc10RcInnerPtr10inc_strong17h2c1a1a0d4120e18aE>
8002a46c:	00000000 	nop
8002a470:	8fa40010 	lw	a0,16(sp)
            Self::from_inner_in(self.ptr, self.alloc.clone())
8002a474:	8c810000 	lw	at,0(a0)
8002a478:	afa10014 	sw	at,20(sp)
8002a47c:	24840004 	addiu	a0,a0,4
8002a480:	0c00a1bc 	jal	800286f0 <_ZN59_$LT$alloc..alloc..Global$u20$as$u20$core..clone..Clone$GT$5clone17h797a6757223e2564E>
8002a484:	00000000 	nop
8002a488:	8fa40014 	lw	a0,20(sp)
8002a48c:	0c00a279 	jal	800289e4 <_ZN5alloc2rc15Rc$LT$T$C$A$GT$13from_inner_in17he0632643cbaa8ef7E>
8002a490:	00000000 	nop
    }
8002a494:	8fbf002c 	lw	ra,44(sp)
8002a498:	27bd0030 	addiu	sp,sp,48
8002a49c:	03e00008 	jr	ra
8002a4a0:	00000000 	nop

8002a4a4 <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae9109a4a489dcf0E>:
    fn drop(&mut self) {
8002a4a4:	27bdffd0 	addiu	sp,sp,-48
8002a4a8:	afbf002c 	sw	ra,44(sp)
8002a4ac:	afa40018 	sw	a0,24(sp)
8002a4b0:	afa40020 	sw	a0,32(sp)
        let borrow = self.borrow.get();
8002a4b4:	8c840000 	lw	a0,0(a0)
8002a4b8:	0c008eeb 	jal	80023bac <_ZN4core4cell13Cell$LT$T$GT$3get17hb03644952720e905E>
8002a4bc:	00000000 	nop
8002a4c0:	00400825 	move	at,v0
8002a4c4:	afa1001c 	sw	at,28(sp)
8002a4c8:	afa20024 	sw	v0,36(sp)
        debug_assert!(is_writing(borrow));
8002a4cc:	0800a935 	j	8002a4d4 <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae9109a4a489dcf0E+0x30>
8002a4d0:	00000000 	nop
8002a4d4:	8fa1001c 	lw	at,28(sp)
8002a4d8:	afa10028 	sw	at,40(sp)
8002a4dc:	0420000a 	bltz	at,8002a508 <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae9109a4a489dcf0E+0x64>
8002a4e0:	00000000 	nop
8002a4e4:	0800a93b 	j	8002a4ec <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae9109a4a489dcf0E+0x48>
8002a4e8:	00000000 	nop
8002a4ec:	3c018105 	lui	at,0x8105
8002a4f0:	2424f0f4 	addiu	a0,at,-3852
8002a4f4:	3c018105 	lui	at,0x8105
8002a4f8:	2426f118 	addiu	a2,at,-3816
8002a4fc:	24050024 	li	a1,36
8002a500:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
8002a504:	00000000 	nop
        self.borrow.set(borrow + 1);
8002a508:	8fa2001c 	lw	v0,28(sp)
8002a50c:	8fa10018 	lw	at,24(sp)
8002a510:	8c210000 	lw	at,0(at)
8002a514:	afa10010 	sw	at,16(sp)
8002a518:	24410001 	addiu	at,v0,1
8002a51c:	afa10014 	sw	at,20(sp)
8002a520:	0022082a 	slt	at,at,v0
8002a524:	1420000b 	bnez	at,8002a554 <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae9109a4a489dcf0E+0xb0>
8002a528:	00000000 	nop
8002a52c:	0800a94d 	j	8002a534 <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae9109a4a489dcf0E+0x90>
8002a530:	00000000 	nop
8002a534:	8fa50014 	lw	a1,20(sp)
8002a538:	8fa40010 	lw	a0,16(sp)
8002a53c:	0c008f10 	jal	80023c40 <_ZN4core4cell13Cell$LT$T$GT$3set17hd64a6e9ba6e83604E>
8002a540:	00000000 	nop
    }
8002a544:	8fbf002c 	lw	ra,44(sp)
8002a548:	27bd0030 	addiu	sp,sp,48
8002a54c:	03e00008 	jr	ra
8002a550:	00000000 	nop
        self.borrow.set(borrow + 1);
8002a554:	3c018105 	lui	at,0x8105
8002a558:	2424f128 	addiu	a0,at,-3800
8002a55c:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002a560:	00000000 	nop

8002a564 <_ZN68_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h9aae573681cb7ef3E>:
    fn drop(&mut self) {
8002a564:	27bdff98 	addiu	sp,sp,-104
8002a568:	afbf0064 	sw	ra,100(sp)
8002a56c:	afa40018 	sw	a0,24(sp)
8002a570:	afa4001c 	sw	a0,28(sp)
8002a574:	afa40054 	sw	a0,84(sp)
8002a578:	afa40058 	sw	a0,88(sp)
8002a57c:	8c840000 	lw	a0,0(a0)
8002a580:	afa40060 	sw	a0,96(sp)
8002a584:	afa4005c 	sw	a0,92(sp)
            self.inner().dec_strong();
8002a588:	0c00a1c1 	jal	80028704 <_ZN5alloc2rc10RcInnerPtr10dec_strong17h54f7cdd86893b794E>
8002a58c:	00000000 	nop
8002a590:	8fa40018 	lw	a0,24(sp)
8002a594:	afa40044 	sw	a0,68(sp)
8002a598:	afa40048 	sw	a0,72(sp)
8002a59c:	8c840000 	lw	a0,0(a0)
8002a5a0:	afa40050 	sw	a0,80(sp)
8002a5a4:	afa4004c 	sw	a0,76(sp)
            if self.inner().strong() == 0 {
8002a5a8:	0c00a216 	jal	80028858 <_ZN5alloc2rc10RcInnerPtr6strong17he0227700128eb508E>
8002a5ac:	00000000 	nop
8002a5b0:	1440001d 	bnez	v0,8002a628 <_ZN68_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h9aae573681cb7ef3E+0xc4>
8002a5b4:	00000000 	nop
8002a5b8:	0800a970 	j	8002a5c0 <_ZN68_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h9aae573681cb7ef3E+0x5c>
8002a5bc:	00000000 	nop
                ptr::drop_in_place(Self::get_mut_unchecked(self));
8002a5c0:	8fa40018 	lw	a0,24(sp)
8002a5c4:	0c00a280 	jal	80028a00 <_ZN5alloc2rc15Rc$LT$T$C$A$GT$17get_mut_unchecked17hdca037b0946a672fE>
8002a5c8:	00000000 	nop
8002a5cc:	00402025 	move	a0,v0
8002a5d0:	0c008c96 	jal	80023258 <_ZN4core3ptr72drop_in_place$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$17h1e363c2b47fcb277E>
8002a5d4:	00000000 	nop
8002a5d8:	8fa10018 	lw	at,24(sp)
8002a5dc:	afa10034 	sw	at,52(sp)
8002a5e0:	afa10038 	sw	at,56(sp)
8002a5e4:	8c240000 	lw	a0,0(at)
8002a5e8:	afa40040 	sw	a0,64(sp)
8002a5ec:	afa4003c 	sw	a0,60(sp)
                self.inner().dec_weak();
8002a5f0:	0c00a220 	jal	80028880 <_ZN5alloc2rc10RcInnerPtr8dec_weak17hcd8b5c39ee0e31b2E>
8002a5f4:	00000000 	nop
8002a5f8:	8fa10018 	lw	at,24(sp)
8002a5fc:	afa10024 	sw	at,36(sp)
8002a600:	afa10028 	sw	at,40(sp)
8002a604:	8c240000 	lw	a0,0(at)
8002a608:	afa40030 	sw	a0,48(sp)
8002a60c:	afa4002c 	sw	a0,44(sp)
                if self.inner().weak() == 0 {
8002a610:	0c00a20b 	jal	8002882c <_ZN5alloc2rc10RcInnerPtr4weak17h59fab429a7e359ebE>
8002a614:	00000000 	nop
8002a618:	10400007 	beqz	v0,8002a638 <_ZN68_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h9aae573681cb7ef3E+0xd4>
8002a61c:	00000000 	nop
8002a620:	0800a98a 	j	8002a628 <_ZN68_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h9aae573681cb7ef3E+0xc4>
8002a624:	00000000 	nop
    }
8002a628:	8fbf0064 	lw	ra,100(sp)
8002a62c:	27bd0068 	addiu	sp,sp,104
8002a630:	03e00008 	jr	ra
8002a634:	00000000 	nop
                    self.alloc
8002a638:	8fa10018 	lw	at,24(sp)
8002a63c:	24220004 	addiu	v0,at,4
8002a640:	afa20010 	sw	v0,16(sp)
                        .deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()));
8002a644:	8c240000 	lw	a0,0(at)
8002a648:	0c008dbf 	jal	800236fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h4c014cbb06bb9c2aE>
8002a64c:	00000000 	nop
8002a650:	8fa10018 	lw	at,24(sp)
8002a654:	afa20014 	sw	v0,20(sp)
8002a658:	8c240000 	lw	a0,0(at)
8002a65c:	afa40020 	sw	a0,32(sp)
8002a660:	0c009440 	jal	80025100 <_ZN4core5alloc6layout6Layout13for_value_raw17hbe5214bd70dd132fE>
8002a664:	00000000 	nop
8002a668:	8fa40010 	lw	a0,16(sp)
8002a66c:	8fa50014 	lw	a1,20(sp)
8002a670:	00403025 	move	a2,v0
8002a674:	00603825 	move	a3,v1
                    self.alloc
8002a678:	0c00a8af 	jal	8002a2bc <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h67f0c0ff29e53613E>
8002a67c:	00000000 	nop
8002a680:	0800a98a 	j	8002a628 <_ZN68_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h9aae573681cb7ef3E+0xc4>
8002a684:	00000000 	nop

8002a688 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h12904436a148d5f6E>:
    fn deref(&self) -> &T {
8002a688:	27bdfff0 	addiu	sp,sp,-16
8002a68c:	afa40000 	sw	a0,0(sp)
8002a690:	afa40004 	sw	a0,4(sp)
8002a694:	8c820000 	lw	v0,0(a0)
8002a698:	afa2000c 	sw	v0,12(sp)
8002a69c:	afa20008 	sw	v0,8(sp)
8002a6a0:	27bd0010 	addiu	sp,sp,16
    }
8002a6a4:	03e00008 	jr	ra
8002a6a8:	00000000 	nop

8002a6ac <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17h6d82a43283a3f258E>:
            None => None,
        }
    }

    #[inline]
    fn clone_from(&mut self, source: &Self) {
8002a6ac:	27bdffc0 	addiu	sp,sp,-64
8002a6b0:	afbf003c 	sw	ra,60(sp)
8002a6b4:	afa40024 	sw	a0,36(sp)
8002a6b8:	afa50028 	sw	a1,40(sp)
        match (self, source) {
8002a6bc:	afa4001c 	sw	a0,28(sp)
8002a6c0:	afa50020 	sw	a1,32(sp)
8002a6c4:	8fa1001c 	lw	at,28(sp)
8002a6c8:	8c210000 	lw	at,0(at)
8002a6cc:	10200009 	beqz	at,8002a6f4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17h6d82a43283a3f258E+0x48>
8002a6d0:	00000000 	nop
8002a6d4:	0800a9b7 	j	8002a6dc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17h6d82a43283a3f258E+0x30>
8002a6d8:	00000000 	nop
8002a6dc:	8fa10020 	lw	at,32(sp)
8002a6e0:	8c210000 	lw	at,0(at)
8002a6e4:	14200013 	bnez	at,8002a734 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17h6d82a43283a3f258E+0x88>
8002a6e8:	00000000 	nop
8002a6ec:	0800a9bd 	j	8002a6f4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17h6d82a43283a3f258E+0x48>
8002a6f0:	00000000 	nop
            (Some(to), Some(from)) => to.clone_from(from),
            (to, from) => *to = from.clone(),
8002a6f4:	8fa1001c 	lw	at,28(sp)
8002a6f8:	afa10014 	sw	at,20(sp)
8002a6fc:	afa10034 	sw	at,52(sp)
8002a700:	8fa40020 	lw	a0,32(sp)
8002a704:	afa40038 	sw	a0,56(sp)
8002a708:	0c00a9d9 	jal	8002a764 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7ab004467531be1eE>
8002a70c:	00000000 	nop
8002a710:	8fa40014 	lw	a0,20(sp)
8002a714:	afa20018 	sw	v0,24(sp)
8002a718:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
8002a71c:	00000000 	nop
8002a720:	8fa10014 	lw	at,20(sp)
8002a724:	8fa20018 	lw	v0,24(sp)
8002a728:	ac220000 	sw	v0,0(at)
8002a72c:	0800a9d5 	j	8002a754 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17h6d82a43283a3f258E+0xa8>
8002a730:	00000000 	nop
            (Some(to), Some(from)) => to.clone_from(from),
8002a734:	8fa4001c 	lw	a0,28(sp)
8002a738:	afa4002c 	sw	a0,44(sp)
8002a73c:	8fa50020 	lw	a1,32(sp)
8002a740:	afa50030 	sw	a1,48(sp)
8002a744:	0c009521 	jal	80025484 <_ZN4core5clone5Clone10clone_from17h24db1af14c8b2dd8E>
8002a748:	00000000 	nop
8002a74c:	0800a9d5 	j	8002a754 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17h6d82a43283a3f258E+0xa8>
8002a750:	00000000 	nop
        }
    }
8002a754:	8fbf003c 	lw	ra,60(sp)
8002a758:	27bd0040 	addiu	sp,sp,64
8002a75c:	03e00008 	jr	ra
8002a760:	00000000 	nop

8002a764 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7ab004467531be1eE>:
    fn clone(&self) -> Self {
8002a764:	27bdffd8 	addiu	sp,sp,-40
8002a768:	afbf0024 	sw	ra,36(sp)
8002a76c:	afa40014 	sw	a0,20(sp)
8002a770:	afa4001c 	sw	a0,28(sp)
        match self {
8002a774:	8c810000 	lw	at,0(a0)
8002a778:	14200006 	bnez	at,8002a794 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7ab004467531be1eE+0x30>
8002a77c:	00000000 	nop
8002a780:	0800a9e2 	j	8002a788 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7ab004467531be1eE+0x24>
8002a784:	00000000 	nop
            None => None,
8002a788:	afa00018 	sw	zero,24(sp)
8002a78c:	0800a9ec 	j	8002a7b0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7ab004467531be1eE+0x4c>
8002a790:	00000000 	nop
            Some(x) => Some(x.clone()),
8002a794:	8fa40014 	lw	a0,20(sp)
8002a798:	afa40020 	sw	a0,32(sp)
8002a79c:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
8002a7a0:	00000000 	nop
8002a7a4:	afa20018 	sw	v0,24(sp)
8002a7a8:	0800a9ec 	j	8002a7b0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7ab004467531be1eE+0x4c>
8002a7ac:	00000000 	nop
    }
8002a7b0:	8fa20018 	lw	v0,24(sp)
8002a7b4:	8fbf0024 	lw	ra,36(sp)
8002a7b8:	27bd0028 	addiu	sp,sp,40
8002a7bc:	03e00008 	jr	ra
8002a7c0:	00000000 	nop

8002a7c4 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3ea7f030793babdcE>:
    }
}

#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
    fn drop(&mut self) {
8002a7c4:	27bdffe0 	addiu	sp,sp,-32
8002a7c8:	afbf001c 	sw	ra,28(sp)
8002a7cc:	afa40014 	sw	a0,20(sp)
8002a7d0:	afa40018 	sw	a0,24(sp)
        unsafe {
            // use drop for [T]
            // use a raw slice to refer to the elements of the vector as weakest necessary type;
            // could avoid questions of validity in certain cases
            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
8002a7d4:	0c00a2ab 	jal	80028aac <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2c3a5f7f8f93f5daE>
8002a7d8:	00000000 	nop
8002a7dc:	8fa10014 	lw	at,20(sp)
8002a7e0:	00402025 	move	a0,v0
8002a7e4:	8c250008 	lw	a1,8(at)
8002a7e8:	0c008945 	jal	80022514 <_ZN4core3ptr24slice_from_raw_parts_mut17h2c9e95a551204228E>
8002a7ec:	00000000 	nop
        }
        // RawVec handles deallocation
    }
8002a7f0:	8fbf001c 	lw	ra,28(sp)
8002a7f4:	27bd0020 	addiu	sp,sp,32
8002a7f8:	03e00008 	jr	ra
8002a7fc:	00000000 	nop

8002a800 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h679227b0c9f5868bE>:
    fn drop(&mut self) {
8002a800:	27bdffe0 	addiu	sp,sp,-32
8002a804:	afbf001c 	sw	ra,28(sp)
8002a808:	afa40014 	sw	a0,20(sp)
8002a80c:	afa40018 	sw	a0,24(sp)
            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
8002a810:	0c00a2a2 	jal	80028a88 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2573061870b0bc35E>
8002a814:	00000000 	nop
8002a818:	8fa10014 	lw	at,20(sp)
8002a81c:	00402025 	move	a0,v0
8002a820:	8c250008 	lw	a1,8(at)
8002a824:	0c00893a 	jal	800224e8 <_ZN4core3ptr24slice_from_raw_parts_mut17h0f54a01f9708a325E>
8002a828:	00000000 	nop
8002a82c:	00402025 	move	a0,v0
8002a830:	00602825 	move	a1,v1
8002a834:	0c008a68 	jal	800229a0 <_ZN4core3ptr50drop_in_place$LT$$u5b$mos_6502..proc..Env$u5d$$GT$17hd7e937c30dc1ae92E>
8002a838:	00000000 	nop
    }
8002a83c:	8fbf001c 	lw	ra,28(sp)
8002a840:	27bd0020 	addiu	sp,sp,32
8002a844:	03e00008 	jr	ra
8002a848:	00000000 	nop

8002a84c <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h8a1cce0b2d1bdf30E>:
    fn drop(&mut self) {
8002a84c:	27bdffe0 	addiu	sp,sp,-32
8002a850:	afbf001c 	sw	ra,28(sp)
8002a854:	afa40014 	sw	a0,20(sp)
8002a858:	afa40018 	sw	a0,24(sp)
            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
8002a85c:	0c00a2b4 	jal	80028ad0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h9786e2b221aaa450E>
8002a860:	00000000 	nop
8002a864:	8fa10014 	lw	at,20(sp)
8002a868:	00402025 	move	a0,v0
8002a86c:	8c250008 	lw	a1,8(at)
8002a870:	0c008950 	jal	80022540 <_ZN4core3ptr24slice_from_raw_parts_mut17hca02b9559e76586fE>
8002a874:	00000000 	nop
8002a878:	00402025 	move	a0,v0
8002a87c:	00602825 	move	a1,v1
8002a880:	0c008a97 	jal	80022a5c <_ZN4core3ptr55drop_in_place$LT$$u5b$mos_6502..mm..page..Page$u5d$$GT$17h3983db740ad98d27E>
8002a884:	00000000 	nop
    }
8002a888:	8fbf001c 	lw	ra,28(sp)
8002a88c:	27bd0020 	addiu	sp,sp,32
8002a890:	03e00008 	jr	ra
8002a894:	00000000 	nop

8002a898 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h96ce9dcea3ab691dE>:
}

#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<#[may_dangle] T: ?Sized, A: Allocator> Drop for Box<T, A> {
    #[inline]
    fn drop(&mut self) {
8002a898:	27bdffd0 	addiu	sp,sp,-48
8002a89c:	afbf002c 	sw	ra,44(sp)
8002a8a0:	afa40014 	sw	a0,20(sp)
8002a8a4:	afa40024 	sw	a0,36(sp)
        // the T in the Box is dropped by the compiler before the destructor is run

        let ptr = self.0;
8002a8a8:	8c840000 	lw	a0,0(a0)
8002a8ac:	afa40018 	sw	a0,24(sp)
8002a8b0:	afa40028 	sw	a0,40(sp)

        unsafe {
            let layout = Layout::for_value_raw(ptr.as_ptr());
8002a8b4:	0c008c4b 	jal	8002312c <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h50321b64dfdca2dfE>
8002a8b8:	00000000 	nop
8002a8bc:	00402025 	move	a0,v0
8002a8c0:	0c009429 	jal	800250a4 <_ZN4core5alloc6layout6Layout13for_value_raw17h81da06574b7c1ef7E>
8002a8c4:	00000000 	nop
8002a8c8:	afa2001c 	sw	v0,28(sp)
8002a8cc:	afa30020 	sw	v1,32(sp)
8002a8d0:	27a4001c 	addiu	a0,sp,28
            if layout.size() != 0 {
8002a8d4:	0c009481 	jal	80025204 <_ZN4core5alloc6layout6Layout4size17h2e77e01e84646f95E>
8002a8d8:	00000000 	nop
8002a8dc:	14400007 	bnez	v0,8002a8fc <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h96ce9dcea3ab691dE+0x64>
8002a8e0:	00000000 	nop
8002a8e4:	0800aa3b 	j	8002a8ec <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h96ce9dcea3ab691dE+0x54>
8002a8e8:	00000000 	nop
                self.1.deallocate(From::from(ptr.cast()), layout);
            }
        }
    }
8002a8ec:	8fbf002c 	lw	ra,44(sp)
8002a8f0:	27bd0030 	addiu	sp,sp,48
8002a8f4:	03e00008 	jr	ra
8002a8f8:	00000000 	nop
                self.1.deallocate(From::from(ptr.cast()), layout);
8002a8fc:	8fa40018 	lw	a0,24(sp)
8002a900:	8fa10014 	lw	at,20(sp)
8002a904:	24210004 	addiu	at,at,4
8002a908:	afa10010 	sw	at,16(sp)
8002a90c:	0c008c2e 	jal	800230b8 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hd71345260df4b0e8E>
8002a910:	00000000 	nop
8002a914:	00402025 	move	a0,v0
8002a918:	0c00e3d2 	jal	80038f48 <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17hdecfcf5c197a58d9E>
8002a91c:	00000000 	nop
8002a920:	8fa40010 	lw	a0,16(sp)
8002a924:	00402825 	move	a1,v0
8002a928:	8fa6001c 	lw	a2,28(sp)
8002a92c:	8fa70020 	lw	a3,32(sp)
8002a930:	0c00a8af 	jal	8002a2bc <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h67f0c0ff29e53613E>
8002a934:	00000000 	nop
8002a938:	0800aa3b 	j	8002a8ec <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h96ce9dcea3ab691dE+0x54>
8002a93c:	00000000 	nop

8002a940 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hbfbc2a39ac570a22E>:
    fn drop(&mut self) {
8002a940:	27bdffd0 	addiu	sp,sp,-48
8002a944:	afbf002c 	sw	ra,44(sp)
8002a948:	afa40014 	sw	a0,20(sp)
8002a94c:	afa40024 	sw	a0,36(sp)
        let ptr = self.0;
8002a950:	8c840000 	lw	a0,0(a0)
8002a954:	afa40018 	sw	a0,24(sp)
8002a958:	afa40028 	sw	a0,40(sp)
            let layout = Layout::for_value_raw(ptr.as_ptr());
8002a95c:	0c008c59 	jal	80023164 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h781c0940e9c9d438E>
8002a960:	00000000 	nop
8002a964:	00402025 	move	a0,v0
8002a968:	0c009457 	jal	8002515c <_ZN4core5alloc6layout6Layout13for_value_raw17hf9dd3319f0284991E>
8002a96c:	00000000 	nop
8002a970:	afa2001c 	sw	v0,28(sp)
8002a974:	afa30020 	sw	v1,32(sp)
8002a978:	27a4001c 	addiu	a0,sp,28
            if layout.size() != 0 {
8002a97c:	0c009481 	jal	80025204 <_ZN4core5alloc6layout6Layout4size17h2e77e01e84646f95E>
8002a980:	00000000 	nop
8002a984:	14400007 	bnez	v0,8002a9a4 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hbfbc2a39ac570a22E+0x64>
8002a988:	00000000 	nop
8002a98c:	0800aa65 	j	8002a994 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hbfbc2a39ac570a22E+0x54>
8002a990:	00000000 	nop
    }
8002a994:	8fbf002c 	lw	ra,44(sp)
8002a998:	27bd0030 	addiu	sp,sp,48
8002a99c:	03e00008 	jr	ra
8002a9a0:	00000000 	nop
                self.1.deallocate(From::from(ptr.cast()), layout);
8002a9a4:	8fa40018 	lw	a0,24(sp)
8002a9a8:	8fa10014 	lw	at,20(sp)
8002a9ac:	24210004 	addiu	at,at,4
8002a9b0:	afa10010 	sw	at,16(sp)
8002a9b4:	0c008c39 	jal	800230e4 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hea439526ba2b660aE>
8002a9b8:	00000000 	nop
8002a9bc:	00402025 	move	a0,v0
8002a9c0:	0c00e3d2 	jal	80038f48 <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17hdecfcf5c197a58d9E>
8002a9c4:	00000000 	nop
8002a9c8:	8fa40010 	lw	a0,16(sp)
8002a9cc:	00402825 	move	a1,v0
8002a9d0:	8fa6001c 	lw	a2,28(sp)
8002a9d4:	8fa70020 	lw	a3,32(sp)
8002a9d8:	0c00a8af 	jal	8002a2bc <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h67f0c0ff29e53613E>
8002a9dc:	00000000 	nop
8002a9e0:	0800aa65 	j	8002a994 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hbfbc2a39ac570a22E+0x54>
8002a9e4:	00000000 	nop

8002a9e8 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc097d1264b07be5aE>:
    fn deref(&self) -> &[T] {
8002a9e8:	27bdffe0 	addiu	sp,sp,-32
8002a9ec:	afbf001c 	sw	ra,28(sp)
8002a9f0:	afa40014 	sw	a0,20(sp)
8002a9f4:	afa40018 	sw	a0,24(sp)
        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
8002a9f8:	0c00a388 	jal	80028e20 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hf8f1e446fd2f3a4dE>
8002a9fc:	00000000 	nop
8002aa00:	8fa10014 	lw	at,20(sp)
8002aa04:	00402025 	move	a0,v0
8002aa08:	8c250008 	lw	a1,8(at)
8002aa0c:	0c009569 	jal	800255a4 <_ZN4core5slice3raw14from_raw_parts17h99948c1205f16146E>
8002aa10:	00000000 	nop
    }
8002aa14:	8fbf001c 	lw	ra,28(sp)
8002aa18:	27bd0020 	addiu	sp,sp,32
8002aa1c:	03e00008 	jr	ra
8002aa20:	00000000 	nop

8002aa24 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hce81096ff6a9d188E>:
    fn deref(&self) -> &[T] {
8002aa24:	27bdffe0 	addiu	sp,sp,-32
8002aa28:	afbf001c 	sw	ra,28(sp)
8002aa2c:	afa40014 	sw	a0,20(sp)
8002aa30:	afa40018 	sw	a0,24(sp)
        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
8002aa34:	0c00a37f 	jal	80028dfc <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h7e63d8e2445a4f11E>
8002aa38:	00000000 	nop
8002aa3c:	8fa10014 	lw	at,20(sp)
8002aa40:	00402025 	move	a0,v0
8002aa44:	8c250008 	lw	a1,8(at)
8002aa48:	0c00954d 	jal	80025534 <_ZN4core5slice3raw14from_raw_parts17h95ed1e9c16ca20d7E>
8002aa4c:	00000000 	nop
    }
8002aa50:	8fbf001c 	lw	ra,28(sp)
8002aa54:	27bd0020 	addiu	sp,sp,32
8002aa58:	03e00008 	jr	ra
8002aa5c:	00000000 	nop

8002aa60 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd0111c3eef3b679dE>:
    fn deref(&self) -> &[T] {
8002aa60:	27bdffe0 	addiu	sp,sp,-32
8002aa64:	afbf001c 	sw	ra,28(sp)
8002aa68:	afa40014 	sw	a0,20(sp)
8002aa6c:	afa40018 	sw	a0,24(sp)
        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
8002aa70:	0c00a376 	jal	80028dd8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h6676a07ce57b7a28E>
8002aa74:	00000000 	nop
8002aa78:	8fa10014 	lw	at,20(sp)
8002aa7c:	00402025 	move	a0,v0
8002aa80:	8c250008 	lw	a1,8(at)
8002aa84:	0c009585 	jal	80025614 <_ZN4core5slice3raw14from_raw_parts17hf3b43d6162730feeE>
8002aa88:	00000000 	nop
    }
8002aa8c:	8fbf001c 	lw	ra,28(sp)
8002aa90:	27bd0020 	addiu	sp,sp,32
8002aa94:	03e00008 	jr	ra
8002aa98:	00000000 	nop

8002aa9c <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf189c7d970994794E>:
    fn deref_mut(&mut self) -> &mut T {
8002aa9c:	27bdfff0 	addiu	sp,sp,-16
8002aaa0:	afa40004 	sw	a0,4(sp)
8002aaa4:	afa40008 	sw	a0,8(sp)
        unsafe { &mut *self.as_ptr() }
8002aaa8:	8c820000 	lw	v0,0(a0)
8002aaac:	afa2000c 	sw	v0,12(sp)
8002aab0:	27bd0010 	addiu	sp,sp,16
    }
8002aab4:	03e00008 	jr	ra
8002aab8:	00000000 	nop

8002aabc <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17ha3ee0caf6cd60073E>:
            fn spec_write_fmt(self, args: Arguments<'_>) -> Result {
8002aabc:	27bdffb0 	addiu	sp,sp,-80
8002aac0:	afbf004c 	sw	ra,76(sp)
8002aac4:	afa50014 	sw	a1,20(sp)
8002aac8:	00800825 	move	at,a0
8002aacc:	8fa40014 	lw	a0,20(sp)
8002aad0:	afa10018 	sw	at,24(sp)
8002aad4:	afa10040 	sw	at,64(sp)
                if let Some(s) = args.as_statically_known_str() {
8002aad8:	0c00834c 	jal	80020d30 <_ZN4core3fmt9Arguments23as_statically_known_str17h15c23d77fef37e8dE>
8002aadc:	00000000 	nop
8002aae0:	afa20020 	sw	v0,32(sp)
8002aae4:	afa30024 	sw	v1,36(sp)
8002aae8:	8fa10020 	lw	at,32(sp)
8002aaec:	1020000d 	beqz	at,8002ab24 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17ha3ee0caf6cd60073E+0x68>
8002aaf0:	00000000 	nop
8002aaf4:	0800aabf 	j	8002aafc <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17ha3ee0caf6cd60073E+0x40>
8002aaf8:	00000000 	nop
8002aafc:	8fa40018 	lw	a0,24(sp)
8002ab00:	8fa50020 	lw	a1,32(sp)
8002ab04:	8fa60024 	lw	a2,36(sp)
8002ab08:	afa50044 	sw	a1,68(sp)
8002ab0c:	afa60048 	sw	a2,72(sp)
                    self.write_str(s)
8002ab10:	0c00b524 	jal	8002d490 <_ZN60_$LT$mos_6502..print..Stdout$u20$as$u20$core..fmt..Write$GT$9write_str17h4c8d431c420dedf3E>
8002ab14:	00000000 	nop
8002ab18:	a3a2001f 	sb	v0,31(sp)
8002ab1c:	0800aadf 	j	8002ab7c <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17ha3ee0caf6cd60073E+0xc0>
8002ab20:	00000000 	nop
                    write(self, args)
8002ab24:	8fa40018 	lw	a0,24(sp)
8002ab28:	8fa10014 	lw	at,20(sp)
8002ab2c:	8c220014 	lw	v0,20(at)
8002ab30:	afa2003c 	sw	v0,60(sp)
8002ab34:	8c220010 	lw	v0,16(at)
8002ab38:	afa20038 	sw	v0,56(sp)
8002ab3c:	8c22000c 	lw	v0,12(at)
8002ab40:	afa20034 	sw	v0,52(sp)
8002ab44:	8c220008 	lw	v0,8(at)
8002ab48:	afa20030 	sw	v0,48(sp)
8002ab4c:	8c220004 	lw	v0,4(at)
8002ab50:	afa2002c 	sw	v0,44(sp)
8002ab54:	8c210000 	lw	at,0(at)
8002ab58:	afa10028 	sw	at,40(sp)
8002ab5c:	3c018105 	lui	at,0x8105
8002ab60:	2425f138 	addiu	a1,at,-3784
8002ab64:	27a60028 	addiu	a2,sp,40
8002ab68:	0c0104cb 	jal	8004132c <_ZN4core3fmt5write17h6036e54969122141E>
8002ab6c:	00000000 	nop
8002ab70:	a3a2001f 	sb	v0,31(sp)
8002ab74:	0800aadf 	j	8002ab7c <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17ha3ee0caf6cd60073E+0xc0>
8002ab78:	00000000 	nop
            }
8002ab7c:	93a1001f 	lbu	at,31(sp)
8002ab80:	30220001 	andi	v0,at,0x1
8002ab84:	8fbf004c 	lw	ra,76(sp)
8002ab88:	27bd0050 	addiu	sp,sp,80
8002ab8c:	03e00008 	jr	ra
8002ab90:	00000000 	nop

8002ab94 <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h39ea7f5274b4693bE>:
    fn deref_mut(&mut self) -> &mut [T] {
8002ab94:	27bdffe0 	addiu	sp,sp,-32
8002ab98:	afbf001c 	sw	ra,28(sp)
8002ab9c:	afa40014 	sw	a0,20(sp)
8002aba0:	afa40018 	sw	a0,24(sp)
        unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
8002aba4:	0c00a2b4 	jal	80028ad0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h9786e2b221aaa450E>
8002aba8:	00000000 	nop
8002abac:	8fa10014 	lw	at,20(sp)
8002abb0:	00402025 	move	a0,v0
8002abb4:	8c250008 	lw	a1,8(at)
8002abb8:	0c0095c3 	jal	8002570c <_ZN4core5slice3raw18from_raw_parts_mut17h2bd1188a75bd702dE>
8002abbc:	00000000 	nop
    }
8002abc0:	8fbf001c 	lw	ra,28(sp)
8002abc4:	27bd0020 	addiu	sp,sp,32
8002abc8:	03e00008 	jr	ra
8002abcc:	00000000 	nop

8002abd0 <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc7f3352224ecbc79E>:
    fn deref_mut(&mut self) -> &mut [T] {
8002abd0:	27bdffe0 	addiu	sp,sp,-32
8002abd4:	afbf001c 	sw	ra,28(sp)
8002abd8:	afa40014 	sw	a0,20(sp)
8002abdc:	afa40018 	sw	a0,24(sp)
        unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
8002abe0:	0c00a2a2 	jal	80028a88 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2573061870b0bc35E>
8002abe4:	00000000 	nop
8002abe8:	8fa10014 	lw	at,20(sp)
8002abec:	00402025 	move	a0,v0
8002abf0:	8c250008 	lw	a1,8(at)
8002abf4:	0c0095df 	jal	8002577c <_ZN4core5slice3raw18from_raw_parts_mut17he8ac4134dd73e995E>
8002abf8:	00000000 	nop
    }
8002abfc:	8fbf001c 	lw	ra,28(sp)
8002ac00:	27bd0020 	addiu	sp,sp,32
8002ac04:	03e00008 	jr	ra
8002ac08:	00000000 	nop

8002ac0c <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h2ba1196ec0920da0E>:
    fn from_output(output: Self::Output) -> Self {
        Some(output)
    }

    #[inline]
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8002ac0c:	27bdfff0 	addiu	sp,sp,-16
8002ac10:	afa40004 	sw	a0,4(sp)
        match self {
8002ac14:	8fa10004 	lw	at,4(sp)
8002ac18:	14200006 	bnez	at,8002ac34 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h2ba1196ec0920da0E+0x28>
8002ac1c:	00000000 	nop
8002ac20:	0800ab0a 	j	8002ac28 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h2ba1196ec0920da0E+0x1c>
8002ac24:	00000000 	nop
            Some(v) => ControlFlow::Continue(v),
            None => ControlFlow::Break(None),
8002ac28:	afa00008 	sw	zero,8(sp)
8002ac2c:	0800ab12 	j	8002ac48 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h2ba1196ec0920da0E+0x3c>
8002ac30:	00000000 	nop
            Some(v) => ControlFlow::Continue(v),
8002ac34:	8fa10004 	lw	at,4(sp)
8002ac38:	afa1000c 	sw	at,12(sp)
8002ac3c:	afa10008 	sw	at,8(sp)
        }
    }
8002ac40:	0800ab12 	j	8002ac48 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h2ba1196ec0920da0E+0x3c>
8002ac44:	00000000 	nop
8002ac48:	8fa20008 	lw	v0,8(sp)
8002ac4c:	27bd0010 	addiu	sp,sp,16
8002ac50:	03e00008 	jr	ra
8002ac54:	00000000 	nop

8002ac58 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hef932e867b5d3f3dE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8002ac58:	27bdfff0 	addiu	sp,sp,-16
8002ac5c:	afa40004 	sw	a0,4(sp)
        match self {
8002ac60:	8fa10004 	lw	at,4(sp)
8002ac64:	14200006 	bnez	at,8002ac80 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hef932e867b5d3f3dE+0x28>
8002ac68:	00000000 	nop
8002ac6c:	0800ab1d 	j	8002ac74 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hef932e867b5d3f3dE+0x1c>
8002ac70:	00000000 	nop
            None => ControlFlow::Break(None),
8002ac74:	afa00008 	sw	zero,8(sp)
8002ac78:	0800ab25 	j	8002ac94 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hef932e867b5d3f3dE+0x3c>
8002ac7c:	00000000 	nop
            Some(v) => ControlFlow::Continue(v),
8002ac80:	8fa10004 	lw	at,4(sp)
8002ac84:	afa1000c 	sw	at,12(sp)
8002ac88:	afa10008 	sw	at,8(sp)
    }
8002ac8c:	0800ab25 	j	8002ac94 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hef932e867b5d3f3dE+0x3c>
8002ac90:	00000000 	nop
8002ac94:	8fa20008 	lw	v0,8(sp)
8002ac98:	27bd0010 	addiu	sp,sp,16
8002ac9c:	03e00008 	jr	ra
8002aca0:	00000000 	nop

8002aca4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h1412c43485cabfe1E>:
    fn index(self, slice: &[T]) -> &T {
8002aca4:	27bdffd0 	addiu	sp,sp,-48
8002aca8:	afa70014 	sw	a3,20(sp)
8002acac:	afa60018 	sw	a2,24(sp)
8002acb0:	afa5001c 	sw	a1,28(sp)
8002acb4:	afa40020 	sw	a0,32(sp)
8002acb8:	afa40024 	sw	a0,36(sp)
8002acbc:	afa50028 	sw	a1,40(sp)
8002acc0:	afa6002c 	sw	a2,44(sp)
        &(*slice)[self]
8002acc4:	0086082b 	sltu	at,a0,a2
8002acc8:	1020000c 	beqz	at,8002acfc <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h1412c43485cabfe1E+0x58>
8002accc:	00000000 	nop
8002acd0:	0800ab36 	j	8002acd8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h1412c43485cabfe1E+0x34>
8002acd4:	00000000 	nop
8002acd8:	8fa1001c 	lw	at,28(sp)
8002acdc:	8fa20020 	lw	v0,32(sp)
8002ace0:	00021880 	sll	v1,v0,0x2
8002ace4:	000210c0 	sll	v0,v0,0x3
8002ace8:	00431021 	addu	v0,v0,v1
8002acec:	00221021 	addu	v0,at,v0
8002acf0:	27bd0030 	addiu	sp,sp,48
    }
8002acf4:	03e00008 	jr	ra
8002acf8:	00000000 	nop
        &(*slice)[self]
8002acfc:	8fa60014 	lw	a2,20(sp)
8002ad00:	8fa50018 	lw	a1,24(sp)
8002ad04:	8fa40020 	lw	a0,32(sp)
8002ad08:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002ad0c:	00000000 	nop

8002ad10 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hd6c73a183ccb3269E>:
    fn index(self, slice: &[T]) -> &T {
8002ad10:	27bdffd0 	addiu	sp,sp,-48
8002ad14:	afa70014 	sw	a3,20(sp)
8002ad18:	afa60018 	sw	a2,24(sp)
8002ad1c:	afa5001c 	sw	a1,28(sp)
8002ad20:	afa40020 	sw	a0,32(sp)
8002ad24:	afa40024 	sw	a0,36(sp)
8002ad28:	afa50028 	sw	a1,40(sp)
8002ad2c:	afa6002c 	sw	a2,44(sp)
        &(*slice)[self]
8002ad30:	0086082b 	sltu	at,a0,a2
8002ad34:	1020000e 	beqz	at,8002ad70 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hd6c73a183ccb3269E+0x60>
8002ad38:	00000000 	nop
8002ad3c:	0800ab51 	j	8002ad44 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hd6c73a183ccb3269E+0x34>
8002ad40:	00000000 	nop
8002ad44:	8fa1001c 	lw	at,28(sp)
8002ad48:	8fa20020 	lw	v0,32(sp)
8002ad4c:	00022080 	sll	a0,v0,0x2
8002ad50:	00021940 	sll	v1,v0,0x5
8002ad54:	00641821 	addu	v1,v1,a0
8002ad58:	00021200 	sll	v0,v0,0x8
8002ad5c:	00431023 	subu	v0,v0,v1
8002ad60:	00221021 	addu	v0,at,v0
8002ad64:	27bd0030 	addiu	sp,sp,48
    }
8002ad68:	03e00008 	jr	ra
8002ad6c:	00000000 	nop
        &(*slice)[self]
8002ad70:	8fa60014 	lw	a2,20(sp)
8002ad74:	8fa50018 	lw	a1,24(sp)
8002ad78:	8fa40020 	lw	a0,32(sp)
8002ad7c:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002ad80:	00000000 	nop

8002ad84 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h08e4e5c5e7a76d86E>:
    fn index_mut(self, slice: &mut [T]) -> &mut T {
8002ad84:	27bdffd0 	addiu	sp,sp,-48
8002ad88:	afa70014 	sw	a3,20(sp)
8002ad8c:	afa60018 	sw	a2,24(sp)
8002ad90:	afa5001c 	sw	a1,28(sp)
8002ad94:	afa40020 	sw	a0,32(sp)
8002ad98:	afa40024 	sw	a0,36(sp)
8002ad9c:	afa50028 	sw	a1,40(sp)
8002ada0:	afa6002c 	sw	a2,44(sp)
        &mut (*slice)[self]
8002ada4:	0086082b 	sltu	at,a0,a2
8002ada8:	1020000e 	beqz	at,8002ade4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h08e4e5c5e7a76d86E+0x60>
8002adac:	00000000 	nop
8002adb0:	0800ab6e 	j	8002adb8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h08e4e5c5e7a76d86E+0x34>
8002adb4:	00000000 	nop
8002adb8:	8fa1001c 	lw	at,28(sp)
8002adbc:	8fa20020 	lw	v0,32(sp)
8002adc0:	00022080 	sll	a0,v0,0x2
8002adc4:	00021940 	sll	v1,v0,0x5
8002adc8:	00641821 	addu	v1,v1,a0
8002adcc:	00021200 	sll	v0,v0,0x8
8002add0:	00431023 	subu	v0,v0,v1
8002add4:	00221021 	addu	v0,at,v0
8002add8:	27bd0030 	addiu	sp,sp,48
    }
8002addc:	03e00008 	jr	ra
8002ade0:	00000000 	nop
        &mut (*slice)[self]
8002ade4:	8fa60014 	lw	a2,20(sp)
8002ade8:	8fa50018 	lw	a1,24(sp)
8002adec:	8fa40020 	lw	a0,32(sp)
8002adf0:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002adf4:	00000000 	nop

8002adf8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h1268b0651e737403E>:
    fn index_mut(self, slice: &mut [T]) -> &mut T {
8002adf8:	27bdffd0 	addiu	sp,sp,-48
8002adfc:	afa70014 	sw	a3,20(sp)
8002ae00:	afa60018 	sw	a2,24(sp)
8002ae04:	afa5001c 	sw	a1,28(sp)
8002ae08:	afa40020 	sw	a0,32(sp)
8002ae0c:	afa40024 	sw	a0,36(sp)
8002ae10:	afa50028 	sw	a1,40(sp)
8002ae14:	afa6002c 	sw	a2,44(sp)
        &mut (*slice)[self]
8002ae18:	0086082b 	sltu	at,a0,a2
8002ae1c:	1020000c 	beqz	at,8002ae50 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h1268b0651e737403E+0x58>
8002ae20:	00000000 	nop
8002ae24:	0800ab8b 	j	8002ae2c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h1268b0651e737403E+0x34>
8002ae28:	00000000 	nop
8002ae2c:	8fa1001c 	lw	at,28(sp)
8002ae30:	8fa20020 	lw	v0,32(sp)
8002ae34:	00021880 	sll	v1,v0,0x2
8002ae38:	000210c0 	sll	v0,v0,0x3
8002ae3c:	00431021 	addu	v0,v0,v1
8002ae40:	00221021 	addu	v0,at,v0
8002ae44:	27bd0030 	addiu	sp,sp,48
    }
8002ae48:	03e00008 	jr	ra
8002ae4c:	00000000 	nop
        &mut (*slice)[self]
8002ae50:	8fa60014 	lw	a2,20(sp)
8002ae54:	8fa50018 	lw	a1,24(sp)
8002ae58:	8fa40020 	lw	a0,32(sp)
8002ae5c:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002ae60:	00000000 	nop

8002ae64 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d4daa40a4419986E>:
pub struct SpinlockGuard<'a, T> {
    lock: &'a Spinlock<T>,
}

impl<'a, T> Drop for SpinlockGuard<'a, T> {
    fn drop(&mut self) {
8002ae64:	27bdffe0 	addiu	sp,sp,-32
8002ae68:	afbf001c 	sw	ra,28(sp)
8002ae6c:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8002ae70:	8c810000 	lw	at,0(a0)
8002ae74:	24240008 	addiu	a0,at,8
8002ae78:	24010001 	li	at,1
8002ae7c:	a3a10017 	sb	at,23(sp)
8002ae80:	93a60017 	lbu	a2,23(sp)
8002ae84:	24050000 	li	a1,0
8002ae88:	0c009156 	jal	80024558 <_ZN4core4sync6atomic10AtomicBool5store17he1f0cbeead02a856E>
8002ae8c:	00000000 	nop
    }
8002ae90:	8fbf001c 	lw	ra,28(sp)
8002ae94:	27bd0020 	addiu	sp,sp,32
8002ae98:	03e00008 	jr	ra
8002ae9c:	00000000 	nop

8002aea0 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h6f07e3cfa15af8e7E>:
    fn drop(&mut self) {
8002aea0:	27bdffe0 	addiu	sp,sp,-32
8002aea4:	afbf001c 	sw	ra,28(sp)
8002aea8:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8002aeac:	8c810000 	lw	at,0(a0)
8002aeb0:	24240004 	addiu	a0,at,4
8002aeb4:	24010001 	li	at,1
8002aeb8:	a3a10017 	sb	at,23(sp)
8002aebc:	93a60017 	lbu	a2,23(sp)
8002aec0:	24050000 	li	a1,0
8002aec4:	0c009156 	jal	80024558 <_ZN4core4sync6atomic10AtomicBool5store17he1f0cbeead02a856E>
8002aec8:	00000000 	nop
    }
8002aecc:	8fbf001c 	lw	ra,28(sp)
8002aed0:	27bd0020 	addiu	sp,sp,32
8002aed4:	03e00008 	jr	ra
8002aed8:	00000000 	nop

8002aedc <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17haa10a6ce16c7beedE>:
    fn drop(&mut self) {
8002aedc:	27bdffe0 	addiu	sp,sp,-32
8002aee0:	afbf001c 	sw	ra,28(sp)
8002aee4:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8002aee8:	8c810000 	lw	at,0(a0)
8002aeec:	2424000c 	addiu	a0,at,12
8002aef0:	24010001 	li	at,1
8002aef4:	a3a10017 	sb	at,23(sp)
8002aef8:	93a60017 	lbu	a2,23(sp)
8002aefc:	24050000 	li	a1,0
8002af00:	0c009156 	jal	80024558 <_ZN4core4sync6atomic10AtomicBool5store17he1f0cbeead02a856E>
8002af04:	00000000 	nop
    }
8002af08:	8fbf001c 	lw	ra,28(sp)
8002af0c:	27bd0020 	addiu	sp,sp,32
8002af10:	03e00008 	jr	ra
8002af14:	00000000 	nop

8002af18 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc9eb2f38d7fb0af7E>:
    fn drop(&mut self) {
8002af18:	27bdffe0 	addiu	sp,sp,-32
8002af1c:	afbf001c 	sw	ra,28(sp)
8002af20:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8002af24:	8c840000 	lw	a0,0(a0)
8002af28:	24010001 	li	at,1
8002af2c:	a3a10017 	sb	at,23(sp)
8002af30:	93a60017 	lbu	a2,23(sp)
8002af34:	24050000 	li	a1,0
8002af38:	0c009156 	jal	80024558 <_ZN4core4sync6atomic10AtomicBool5store17he1f0cbeead02a856E>
8002af3c:	00000000 	nop
    }
8002af40:	8fbf001c 	lw	ra,28(sp)
8002af44:	27bd0020 	addiu	sp,sp,32
8002af48:	03e00008 	jr	ra
8002af4c:	00000000 	nop

8002af50 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd4e56e67a5137b0eE>:
    fn drop(&mut self) {
8002af50:	27bdffe0 	addiu	sp,sp,-32
8002af54:	afbf001c 	sw	ra,28(sp)
8002af58:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8002af5c:	8c810000 	lw	at,0(a0)
8002af60:	24240008 	addiu	a0,at,8
8002af64:	24010001 	li	at,1
8002af68:	a3a10017 	sb	at,23(sp)
8002af6c:	93a60017 	lbu	a2,23(sp)
8002af70:	24050000 	li	a1,0
8002af74:	0c009156 	jal	80024558 <_ZN4core4sync6atomic10AtomicBool5store17he1f0cbeead02a856E>
8002af78:	00000000 	nop
    }
8002af7c:	8fbf001c 	lw	ra,28(sp)
8002af80:	27bd0020 	addiu	sp,sp,32
8002af84:	03e00008 	jr	ra
8002af88:	00000000 	nop

8002af8c <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17heb7dad5803678a3dE>:
    fn drop(&mut self) {
8002af8c:	27bdffe0 	addiu	sp,sp,-32
8002af90:	afbf001c 	sw	ra,28(sp)
8002af94:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8002af98:	8c810000 	lw	at,0(a0)
8002af9c:	24240004 	addiu	a0,at,4
8002afa0:	24010001 	li	at,1
8002afa4:	a3a10017 	sb	at,23(sp)
8002afa8:	93a60017 	lbu	a2,23(sp)
8002afac:	24050000 	li	a1,0
8002afb0:	0c009156 	jal	80024558 <_ZN4core4sync6atomic10AtomicBool5store17he1f0cbeead02a856E>
8002afb4:	00000000 	nop
    }
8002afb8:	8fbf001c 	lw	ra,28(sp)
8002afbc:	27bd0020 	addiu	sp,sp,32
8002afc0:	03e00008 	jr	ra
8002afc4:	00000000 	nop

8002afc8 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf158c34341107840E>:
    fn drop(&mut self) {
8002afc8:	27bdffe0 	addiu	sp,sp,-32
8002afcc:	afbf001c 	sw	ra,28(sp)
8002afd0:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8002afd4:	8c810000 	lw	at,0(a0)
8002afd8:	2424000c 	addiu	a0,at,12
8002afdc:	24010001 	li	at,1
8002afe0:	a3a10017 	sb	at,23(sp)
8002afe4:	93a60017 	lbu	a2,23(sp)
8002afe8:	24050000 	li	a1,0
8002afec:	0c009156 	jal	80024558 <_ZN4core4sync6atomic10AtomicBool5store17he1f0cbeead02a856E>
8002aff0:	00000000 	nop
    }
8002aff4:	8fbf001c 	lw	ra,28(sp)
8002aff8:	27bd0020 	addiu	sp,sp,32
8002affc:	03e00008 	jr	ra
8002b000:	00000000 	nop

8002b004 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcb9be949c61c610dE>:
    fn drop(&mut self) {
8002b004:	27bdffc8 	addiu	sp,sp,-56
8002b008:	afbf0034 	sw	ra,52(sp)
8002b00c:	00802825 	move	a1,a0
8002b010:	afa50014 	sw	a1,20(sp)
8002b014:	afa50024 	sw	a1,36(sp)
8002b018:	27a40018 	addiu	a0,sp,24
        if let Some((ptr, layout)) = self.current_memory() {
8002b01c:	0c00a4da 	jal	80029368 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc7cfe38df20e1407E>
8002b020:	00000000 	nop
8002b024:	8fa1001c 	lw	at,28(sp)
8002b028:	1020000f 	beqz	at,8002b068 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcb9be949c61c610dE+0x64>
8002b02c:	00000000 	nop
8002b030:	0800ac0e 	j	8002b038 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcb9be949c61c610dE+0x34>
8002b034:	00000000 	nop
8002b038:	8fa10014 	lw	at,20(sp)
8002b03c:	8fa50018 	lw	a1,24(sp)
8002b040:	afa50028 	sw	a1,40(sp)
8002b044:	8fa6001c 	lw	a2,28(sp)
8002b048:	8fa70020 	lw	a3,32(sp)
8002b04c:	afa6002c 	sw	a2,44(sp)
8002b050:	afa70030 	sw	a3,48(sp)
            unsafe { self.alloc.deallocate(ptr, layout) }
8002b054:	24240008 	addiu	a0,at,8
8002b058:	0c00a8af 	jal	8002a2bc <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h67f0c0ff29e53613E>
8002b05c:	00000000 	nop
8002b060:	0800ac1a 	j	8002b068 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcb9be949c61c610dE+0x64>
8002b064:	00000000 	nop
    }
8002b068:	8fbf0034 	lw	ra,52(sp)
8002b06c:	27bd0038 	addiu	sp,sp,56
8002b070:	03e00008 	jr	ra
8002b074:	00000000 	nop

8002b078 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcfa98516ac4eec91E>:
    fn drop(&mut self) {
8002b078:	27bdffc8 	addiu	sp,sp,-56
8002b07c:	afbf0034 	sw	ra,52(sp)
8002b080:	00802825 	move	a1,a0
8002b084:	afa50014 	sw	a1,20(sp)
8002b088:	afa50024 	sw	a1,36(sp)
8002b08c:	27a40018 	addiu	a0,sp,24
        if let Some((ptr, layout)) = self.current_memory() {
8002b090:	0c00a49c 	jal	80029270 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h27a3c206fb502628E>
8002b094:	00000000 	nop
8002b098:	8fa1001c 	lw	at,28(sp)
8002b09c:	1020000f 	beqz	at,8002b0dc <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcfa98516ac4eec91E+0x64>
8002b0a0:	00000000 	nop
8002b0a4:	0800ac2b 	j	8002b0ac <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcfa98516ac4eec91E+0x34>
8002b0a8:	00000000 	nop
8002b0ac:	8fa10014 	lw	at,20(sp)
8002b0b0:	8fa50018 	lw	a1,24(sp)
8002b0b4:	afa50028 	sw	a1,40(sp)
8002b0b8:	8fa6001c 	lw	a2,28(sp)
8002b0bc:	8fa70020 	lw	a3,32(sp)
8002b0c0:	afa6002c 	sw	a2,44(sp)
8002b0c4:	afa70030 	sw	a3,48(sp)
            unsafe { self.alloc.deallocate(ptr, layout) }
8002b0c8:	24240008 	addiu	a0,at,8
8002b0cc:	0c00a8af 	jal	8002a2bc <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h67f0c0ff29e53613E>
8002b0d0:	00000000 	nop
8002b0d4:	0800ac37 	j	8002b0dc <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcfa98516ac4eec91E+0x64>
8002b0d8:	00000000 	nop
    }
8002b0dc:	8fbf0034 	lw	ra,52(sp)
8002b0e0:	27bd0038 	addiu	sp,sp,56
8002b0e4:	03e00008 	jr	ra
8002b0e8:	00000000 	nop

8002b0ec <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd5112dc285590409E>:
    fn drop(&mut self) {
8002b0ec:	27bdffc8 	addiu	sp,sp,-56
8002b0f0:	afbf0034 	sw	ra,52(sp)
8002b0f4:	00802825 	move	a1,a0
8002b0f8:	afa50014 	sw	a1,20(sp)
8002b0fc:	afa50024 	sw	a1,36(sp)
8002b100:	27a40018 	addiu	a0,sp,24
        if let Some((ptr, layout)) = self.current_memory() {
8002b104:	0c00a51a 	jal	80029468 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17he1e87957f41610f6E>
8002b108:	00000000 	nop
8002b10c:	8fa1001c 	lw	at,28(sp)
8002b110:	1020000f 	beqz	at,8002b150 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd5112dc285590409E+0x64>
8002b114:	00000000 	nop
8002b118:	0800ac48 	j	8002b120 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd5112dc285590409E+0x34>
8002b11c:	00000000 	nop
8002b120:	8fa10014 	lw	at,20(sp)
8002b124:	8fa50018 	lw	a1,24(sp)
8002b128:	afa50028 	sw	a1,40(sp)
8002b12c:	8fa6001c 	lw	a2,28(sp)
8002b130:	8fa70020 	lw	a3,32(sp)
8002b134:	afa6002c 	sw	a2,44(sp)
8002b138:	afa70030 	sw	a3,48(sp)
            unsafe { self.alloc.deallocate(ptr, layout) }
8002b13c:	24240008 	addiu	a0,at,8
8002b140:	0c00a8af 	jal	8002a2bc <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h67f0c0ff29e53613E>
8002b144:	00000000 	nop
8002b148:	0800ac54 	j	8002b150 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd5112dc285590409E+0x64>
8002b14c:	00000000 	nop
    }
8002b150:	8fbf0034 	lw	ra,52(sp)
8002b154:	27bd0038 	addiu	sp,sp,56
8002b158:	03e00008 	jr	ra
8002b15c:	00000000 	nop

8002b160 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc5215e40e494db12E>:

#[stable(feature = "nonnull", since = "1.25.0")]
impl<T: ?Sized> PartialEq for NonNull<T> {
    #[inline]
    #[allow(ambiguous_wide_pointer_comparisons)]
    fn eq(&self, other: &Self) -> bool {
8002b160:	27bdfff0 	addiu	sp,sp,-16
8002b164:	afa40000 	sw	a0,0(sp)
8002b168:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
8002b16c:	8c810000 	lw	at,0(a0)
8002b170:	afa1000c 	sw	at,12(sp)
8002b174:	8ca20000 	lw	v0,0(a1)
8002b178:	afa20008 	sw	v0,8(sp)
8002b17c:	00220826 	xor	at,at,v0
8002b180:	2c220001 	sltiu	v0,at,1
8002b184:	27bd0010 	addiu	sp,sp,16
    }
8002b188:	03e00008 	jr	ra
8002b18c:	00000000 	nop

8002b190 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0744fe67849772c7E>:
}

impl<'a, T> core::ops::Deref for SpinlockGuard<'a, T> {
    type Target = T;

    fn deref(&self) -> &T {
8002b190:	27bdfff8 	addiu	sp,sp,-8
8002b194:	afa40000 	sw	a0,0(sp)
        unsafe { &*self.lock.data.get() }
8002b198:	8c820000 	lw	v0,0(a0)
8002b19c:	afa20004 	sw	v0,4(sp)
8002b1a0:	27bd0008 	addiu	sp,sp,8
    }
8002b1a4:	03e00008 	jr	ra
8002b1a8:	00000000 	nop

8002b1ac <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h249085e6f7b5f4d4E>:
    fn deref(&self) -> &T {
8002b1ac:	27bdfff8 	addiu	sp,sp,-8
8002b1b0:	afa40000 	sw	a0,0(sp)
        unsafe { &*self.lock.data.get() }
8002b1b4:	8c820000 	lw	v0,0(a0)
8002b1b8:	afa20004 	sw	v0,4(sp)
8002b1bc:	27bd0008 	addiu	sp,sp,8
    }
8002b1c0:	03e00008 	jr	ra
8002b1c4:	00000000 	nop

8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>:
    fn deref(&self) -> &T {
8002b1c8:	27bdfff8 	addiu	sp,sp,-8
8002b1cc:	afa40000 	sw	a0,0(sp)
        unsafe { &*self.lock.data.get() }
8002b1d0:	8c820000 	lw	v0,0(a0)
8002b1d4:	afa20004 	sw	v0,4(sp)
8002b1d8:	27bd0008 	addiu	sp,sp,8
    }
8002b1dc:	03e00008 	jr	ra
8002b1e0:	00000000 	nop

8002b1e4 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h990db7d0b83dd2d1E>:
    fn deref(&self) -> &T {
8002b1e4:	27bdfff8 	addiu	sp,sp,-8
8002b1e8:	afa40000 	sw	a0,0(sp)
        unsafe { &*self.lock.data.get() }
8002b1ec:	8c820000 	lw	v0,0(a0)
8002b1f0:	afa20004 	sw	v0,4(sp)
8002b1f4:	27bd0008 	addiu	sp,sp,8
    }
8002b1f8:	03e00008 	jr	ra
8002b1fc:	00000000 	nop

8002b200 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9a07ed8296fc0677E>:
    fn deref(&self) -> &T {
8002b200:	27bdfff8 	addiu	sp,sp,-8
8002b204:	afa40000 	sw	a0,0(sp)
        unsafe { &*self.lock.data.get() }
8002b208:	8c820000 	lw	v0,0(a0)
8002b20c:	afa20004 	sw	v0,4(sp)
8002b210:	27bd0008 	addiu	sp,sp,8
    }
8002b214:	03e00008 	jr	ra
8002b218:	00000000 	nop

8002b21c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hee1c49d3edbc34e7E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8002b21c:	27bdffd8 	addiu	sp,sp,-40
8002b220:	afa50004 	sw	a1,4(sp)
8002b224:	afa40008 	sw	a0,8(sp)
8002b228:	afa4000c 	sw	a0,12(sp)
        match self {
8002b22c:	8ca10000 	lw	at,0(a1)
8002b230:	14200010 	bnez	at,8002b274 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hee1c49d3edbc34e7E+0x58>
8002b234:	00000000 	nop
8002b238:	0800ac90 	j	8002b240 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hee1c49d3edbc34e7E+0x24>
8002b23c:	00000000 	nop
            Ok(v) => ControlFlow::Continue(v),
8002b240:	8fa10008 	lw	at,8(sp)
8002b244:	8fa20004 	lw	v0,4(sp)
8002b248:	8c430008 	lw	v1,8(v0)
8002b24c:	afa30014 	sw	v1,20(sp)
8002b250:	8c420004 	lw	v0,4(v0)
8002b254:	afa20010 	sw	v0,16(sp)
8002b258:	8fa20014 	lw	v0,20(sp)
8002b25c:	ac220008 	sw	v0,8(at)
8002b260:	8fa20010 	lw	v0,16(sp)
8002b264:	ac220004 	sw	v0,4(at)
8002b268:	ac200000 	sw	zero,0(at)
8002b26c:	0800acad 	j	8002b2b4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hee1c49d3edbc34e7E+0x98>
8002b270:	00000000 	nop
            Err(e) => ControlFlow::Break(Err(e)),
8002b274:	8fa20008 	lw	v0,8(sp)
8002b278:	8fa10004 	lw	at,4(sp)
8002b27c:	8c230004 	lw	v1,4(at)
8002b280:	8c210008 	lw	at,8(at)
8002b284:	afa30020 	sw	v1,32(sp)
8002b288:	afa10024 	sw	at,36(sp)
8002b28c:	afa30018 	sw	v1,24(sp)
8002b290:	afa1001c 	sw	at,28(sp)
8002b294:	8fa30018 	lw	v1,24(sp)
8002b298:	8fa1001c 	lw	at,28(sp)
8002b29c:	ac430004 	sw	v1,4(v0)
8002b2a0:	ac410008 	sw	at,8(v0)
8002b2a4:	24010001 	li	at,1
8002b2a8:	ac410000 	sw	at,0(v0)
8002b2ac:	0800acad 	j	8002b2b4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hee1c49d3edbc34e7E+0x98>
8002b2b0:	00000000 	nop
    }
8002b2b4:	8fa2000c 	lw	v0,12(sp)
8002b2b8:	27bd0028 	addiu	sp,sp,40
8002b2bc:	03e00008 	jr	ra
8002b2c0:	00000000 	nop

8002b2c4 <_ZN80_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..convert..AsMut$LT$T$GT$$GT$6as_mut17hf2adafd58e1895b3E>:
    }
}

#[stable(since = "1.5.0", feature = "smart_ptr_as_ref")]
impl<T: ?Sized, A: Allocator> AsMut<T> for Box<T, A> {
    fn as_mut(&mut self) -> &mut T {
8002b2c4:	27bdfff8 	addiu	sp,sp,-8
8002b2c8:	afa40004 	sw	a0,4(sp)
        &mut **self
8002b2cc:	8c820000 	lw	v0,0(a0)
8002b2d0:	27bd0008 	addiu	sp,sp,8
    }
8002b2d4:	03e00008 	jr	ra
8002b2d8:	00000000 	nop

8002b2dc <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17h1efe2423da4fad43E>:
    fn index(&self, index: I) -> &Self::Output {
8002b2dc:	27bdffd0 	addiu	sp,sp,-48
8002b2e0:	afbf002c 	sw	ra,44(sp)
8002b2e4:	afa60014 	sw	a2,20(sp)
8002b2e8:	afa50010 	sw	a1,16(sp)
8002b2ec:	afa40018 	sw	a0,24(sp)
8002b2f0:	afa5001c 	sw	a1,28(sp)
        Index::index(&**self, index)
8002b2f4:	0c00aa98 	jal	8002aa60 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd0111c3eef3b679dE>
8002b2f8:	00000000 	nop
8002b2fc:	8fa40010 	lw	a0,16(sp)
8002b300:	8fa70014 	lw	a3,20(sp)
8002b304:	00402825 	move	a1,v0
8002b308:	00603025 	move	a2,v1
8002b30c:	afa50020 	sw	a1,32(sp)
8002b310:	afa60024 	sw	a2,36(sp)
8002b314:	afa40028 	sw	a0,40(sp)
        index.index(self)
8002b318:	0c00ab29 	jal	8002aca4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h1412c43485cabfe1E>
8002b31c:	00000000 	nop
    }
8002b320:	8fbf002c 	lw	ra,44(sp)
8002b324:	27bd0030 	addiu	sp,sp,48
8002b328:	03e00008 	jr	ra
8002b32c:	00000000 	nop

8002b330 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hba386fd63984b7c3E>:
    fn index(&self, index: I) -> &Self::Output {
8002b330:	27bdffd0 	addiu	sp,sp,-48
8002b334:	afbf002c 	sw	ra,44(sp)
8002b338:	afa60014 	sw	a2,20(sp)
8002b33c:	afa50010 	sw	a1,16(sp)
8002b340:	afa40018 	sw	a0,24(sp)
8002b344:	afa5001c 	sw	a1,28(sp)
        Index::index(&**self, index)
8002b348:	0c00aa7a 	jal	8002a9e8 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc097d1264b07be5aE>
8002b34c:	00000000 	nop
8002b350:	8fa40010 	lw	a0,16(sp)
8002b354:	8fa70014 	lw	a3,20(sp)
8002b358:	00402825 	move	a1,v0
8002b35c:	00603025 	move	a2,v1
8002b360:	afa50020 	sw	a1,32(sp)
8002b364:	afa60024 	sw	a2,36(sp)
8002b368:	afa40028 	sw	a0,40(sp)
8002b36c:	0c00ab44 	jal	8002ad10 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hd6c73a183ccb3269E>
8002b370:	00000000 	nop
    }
8002b374:	8fbf002c 	lw	ra,44(sp)
8002b378:	27bd0030 	addiu	sp,sp,48
8002b37c:	03e00008 	jr	ra
8002b380:	00000000 	nop

8002b384 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa39a42a7fde5133E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<'a> Iterator for Chars<'a> {
    type Item = char;

    #[inline]
    fn next(&mut self) -> Option<char> {
8002b384:	27bdffe8 	addiu	sp,sp,-24
8002b388:	afbf0014 	sw	ra,20(sp)
8002b38c:	afa40010 	sw	a0,16(sp)
        // SAFETY: `str` invariant says `self.iter` is a valid UTF-8 string and
        // the resulting `ch` is a valid Unicode Scalar Value.
        unsafe { next_code_point(&mut self.iter).map(|ch| char::from_u32_unchecked(ch)) }
8002b390:	0c011a06 	jal	80046818 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E>
8002b394:	00000000 	nop
8002b398:	00402025 	move	a0,v0
8002b39c:	00602825 	move	a1,v1
8002b3a0:	0c00fa19 	jal	8003e864 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE>
8002b3a4:	00000000 	nop
    }
8002b3a8:	8fbf0014 	lw	ra,20(sp)
8002b3ac:	27bd0018 	addiu	sp,sp,24
8002b3b0:	03e00008 	jr	ra
8002b3b4:	00000000 	nop

8002b3b8 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4853a853a285a493E>:
}

impl<'a, T> core::ops::DerefMut for SpinlockGuard<'a, T> {
    fn deref_mut(&mut self) -> &mut T {
8002b3b8:	27bdfff8 	addiu	sp,sp,-8
8002b3bc:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
8002b3c0:	8c820000 	lw	v0,0(a0)
8002b3c4:	afa20004 	sw	v0,4(sp)
8002b3c8:	27bd0008 	addiu	sp,sp,8
    }
8002b3cc:	03e00008 	jr	ra
8002b3d0:	00000000 	nop

8002b3d4 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h566805ffd1d6c0b4E>:
    fn deref_mut(&mut self) -> &mut T {
8002b3d4:	27bdfff8 	addiu	sp,sp,-8
8002b3d8:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
8002b3dc:	8c820000 	lw	v0,0(a0)
8002b3e0:	afa20004 	sw	v0,4(sp)
8002b3e4:	27bd0008 	addiu	sp,sp,8
    }
8002b3e8:	03e00008 	jr	ra
8002b3ec:	00000000 	nop

8002b3f0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h60973401acba378fE>:
    fn deref_mut(&mut self) -> &mut T {
8002b3f0:	27bdfff8 	addiu	sp,sp,-8
8002b3f4:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
8002b3f8:	8c820000 	lw	v0,0(a0)
8002b3fc:	afa20004 	sw	v0,4(sp)
8002b400:	27bd0008 	addiu	sp,sp,8
    }
8002b404:	03e00008 	jr	ra
8002b408:	00000000 	nop

8002b40c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h76ed05f90ab52878E>:
    fn deref_mut(&mut self) -> &mut T {
8002b40c:	27bdfff8 	addiu	sp,sp,-8
8002b410:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
8002b414:	8c810000 	lw	at,0(a0)
8002b418:	24220001 	addiu	v0,at,1
8002b41c:	afa20004 	sw	v0,4(sp)
8002b420:	27bd0008 	addiu	sp,sp,8
    }
8002b424:	03e00008 	jr	ra
8002b428:	00000000 	nop

8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>:
    fn deref_mut(&mut self) -> &mut T {
8002b42c:	27bdfff8 	addiu	sp,sp,-8
8002b430:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
8002b434:	8c820000 	lw	v0,0(a0)
8002b438:	afa20004 	sw	v0,4(sp)
8002b43c:	27bd0008 	addiu	sp,sp,8
    }
8002b440:	03e00008 	jr	ra
8002b444:	00000000 	nop

8002b448 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbc3557afe01bc7bfE>:
    fn deref_mut(&mut self) -> &mut T {
8002b448:	27bdfff8 	addiu	sp,sp,-8
8002b44c:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
8002b450:	8c820000 	lw	v0,0(a0)
8002b454:	afa20004 	sw	v0,4(sp)
8002b458:	27bd0008 	addiu	sp,sp,8
    }
8002b45c:	03e00008 	jr	ra
8002b460:	00000000 	nop

8002b464 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hdb38b7a74b019393E>:
    fn deref_mut(&mut self) -> &mut T {
8002b464:	27bdfff8 	addiu	sp,sp,-8
8002b468:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
8002b46c:	8c820000 	lw	v0,0(a0)
8002b470:	afa20004 	sw	v0,4(sp)
8002b474:	27bd0008 	addiu	sp,sp,8
    }
8002b478:	03e00008 	jr	ra
8002b47c:	00000000 	nop

8002b480 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h7acaf1c5a51d7e6cE>:
    fn index_mut(&mut self, index: I) -> &mut Self::Output {
8002b480:	27bdffd0 	addiu	sp,sp,-48
8002b484:	afbf002c 	sw	ra,44(sp)
8002b488:	afa60014 	sw	a2,20(sp)
8002b48c:	afa50010 	sw	a1,16(sp)
8002b490:	afa40018 	sw	a0,24(sp)
8002b494:	afa5001c 	sw	a1,28(sp)
        IndexMut::index_mut(&mut **self, index)
8002b498:	0c00aae5 	jal	8002ab94 <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h39ea7f5274b4693bE>
8002b49c:	00000000 	nop
8002b4a0:	8fa40010 	lw	a0,16(sp)
8002b4a4:	8fa70014 	lw	a3,20(sp)
8002b4a8:	00402825 	move	a1,v0
8002b4ac:	00603025 	move	a2,v1
8002b4b0:	afa50020 	sw	a1,32(sp)
8002b4b4:	afa60024 	sw	a2,36(sp)
8002b4b8:	afa40028 	sw	a0,40(sp)
        index.index_mut(self)
8002b4bc:	0c00ab7e 	jal	8002adf8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h1268b0651e737403E>
8002b4c0:	00000000 	nop
    }
8002b4c4:	8fbf002c 	lw	ra,44(sp)
8002b4c8:	27bd0030 	addiu	sp,sp,48
8002b4cc:	03e00008 	jr	ra
8002b4d0:	00000000 	nop

8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>:
    fn index_mut(&mut self, index: I) -> &mut Self::Output {
8002b4d4:	27bdffd0 	addiu	sp,sp,-48
8002b4d8:	afbf002c 	sw	ra,44(sp)
8002b4dc:	afa60014 	sw	a2,20(sp)
8002b4e0:	afa50010 	sw	a1,16(sp)
8002b4e4:	afa40018 	sw	a0,24(sp)
8002b4e8:	afa5001c 	sw	a1,28(sp)
        IndexMut::index_mut(&mut **self, index)
8002b4ec:	0c00aaf4 	jal	8002abd0 <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc7f3352224ecbc79E>
8002b4f0:	00000000 	nop
8002b4f4:	8fa40010 	lw	a0,16(sp)
8002b4f8:	8fa70014 	lw	a3,20(sp)
8002b4fc:	00402825 	move	a1,v0
8002b500:	00603025 	move	a2,v1
8002b504:	afa50020 	sw	a1,32(sp)
8002b508:	afa60024 	sw	a2,36(sp)
8002b50c:	afa40028 	sw	a0,40(sp)
8002b510:	0c00ab61 	jal	8002ad84 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h08e4e5c5e7a76d86E>
8002b514:	00000000 	nop
    }
8002b518:	8fbf002c 	lw	ra,44(sp)
8002b51c:	27bd0030 	addiu	sp,sp,48
8002b520:	03e00008 	jr	ra
8002b524:	00000000 	nop

8002b528 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h89213f14b212d7bdE>:
}

#[unstable(feature = "try_trait_v2", issue = "84277")]
impl<T> ops::FromResidual for Option<T> {
    #[inline]
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
8002b528:	27bdfff0 	addiu	sp,sp,-16
        match residual {
            None => None,
8002b52c:	afa00008 	sw	zero,8(sp)
        }
    }
8002b530:	8fa20008 	lw	v0,8(sp)
8002b534:	27bd0010 	addiu	sp,sp,16
8002b538:	03e00008 	jr	ra
8002b53c:	00000000 	nop

8002b540 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17hbf51053ba657039bE>:
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
8002b540:	27bdfff8 	addiu	sp,sp,-8
8002b544:	00801025 	move	v0,a0
            None => None,
8002b548:	ac800000 	sw	zero,0(a0)
8002b54c:	27bd0008 	addiu	sp,sp,8
    }
8002b550:	03e00008 	jr	ra
8002b554:	00000000 	nop

8002b558 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17ha536a7d54990d56bE>:
    }

    /**
    Get the flags value of this flag.
    */
    pub const fn value(&self) -> &B {
8002b558:	27bdfff8 	addiu	sp,sp,-8
8002b55c:	afa40004 	sw	a0,4(sp)
        &self.value
8002b560:	24820008 	addiu	v0,a0,8
8002b564:	27bd0008 	addiu	sp,sp,8
    }
8002b568:	03e00008 	jr	ra
8002b56c:	00000000 	nop

8002b570 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hd705c77857c29e25E>:
impl<T: ?Sized> From<&T> for NonNull<T> {
    /// Converts a `&T` to a `NonNull<T>`.
    ///
    /// This conversion is safe and infallible since references cannot be null.
    #[inline]
    fn from(reference: &T) -> Self {
8002b570:	27bdfff0 	addiu	sp,sp,-16
8002b574:	afa40008 	sw	a0,8(sp)
8002b578:	afa5000c 	sw	a1,12(sp)
        // SAFETY: A reference cannot be null.
        unsafe { NonNull { pointer: reference as *const T } }
8002b57c:	afa40000 	sw	a0,0(sp)
8002b580:	afa50004 	sw	a1,4(sp)
    }
8002b584:	8fa20000 	lw	v0,0(sp)
8002b588:	8fa30004 	lw	v1,4(sp)
8002b58c:	27bd0010 	addiu	sp,sp,16
8002b590:	03e00008 	jr	ra
8002b594:	00000000 	nop

8002b598 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11ae3e1e711e5b4cE>:
        #[stable(feature = "rust1", since = "1.0.0")]
        impl<'a, T> Iterator for $name<'a, T> {
            type Item = $elem;

            #[inline]
            fn next(&mut self) -> Option<$elem> {
8002b598:	27bdffa0 	addiu	sp,sp,-96
8002b59c:	afbf005c 	sw	ra,92(sp)
8002b5a0:	afa40014 	sw	a0,20(sp)
8002b5a4:	afa40028 	sw	a0,40(sp)
                // could be implemented with slices, but this avoids bounds checks

                // SAFETY: The call to `next_unchecked!` is
                // safe since we check if the iterator is empty first.
                unsafe {
                    if is_empty!(self) {
8002b5a8:	0800ad6c 	j	8002b5b0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11ae3e1e711e5b4cE+0x18>
8002b5ac:	00000000 	nop
8002b5b0:	8fa40014 	lw	a0,20(sp)
8002b5b4:	24810004 	addiu	at,a0,4
8002b5b8:	afa10038 	sw	at,56(sp)
8002b5bc:	8c810004 	lw	at,4(a0)
8002b5c0:	afa10020 	sw	at,32(sp)
8002b5c4:	27a50020 	addiu	a1,sp,32
8002b5c8:	0c00ac58 	jal	8002b160 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc5215e40e494db12E>
8002b5cc:	00000000 	nop
8002b5d0:	a3a2001f 	sb	v0,31(sp)
8002b5d4:	0800ad77 	j	8002b5dc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11ae3e1e711e5b4cE+0x44>
8002b5d8:	00000000 	nop
8002b5dc:	93a1001f 	lbu	at,31(sp)
8002b5e0:	30210001 	andi	at,at,0x1
8002b5e4:	1420001c 	bnez	at,8002b658 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11ae3e1e711e5b4cE+0xc0>
8002b5e8:	00000000 	nop
8002b5ec:	0800ad7d 	j	8002b5f4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11ae3e1e711e5b4cE+0x5c>
8002b5f0:	00000000 	nop
8002b5f4:	8fa30014 	lw	v1,20(sp)
8002b5f8:	afa3003c 	sw	v1,60(sp)
8002b5fc:	24040001 	li	a0,1
8002b600:	afa40040 	sw	a0,64(sp)
                let old = self.ptr;
8002b604:	8c610000 	lw	at,0(v1)
8002b608:	afa10044 	sw	at,68(sp)
                    if_zst!(mut self,
8002b60c:	24620004 	addiu	v0,v1,4
8002b610:	afa2004c 	sw	v0,76(sp)
8002b614:	afa20048 	sw	v0,72(sp)
                        _end => self.ptr = self.ptr.add(offset),
8002b618:	8c620000 	lw	v0,0(v1)
8002b61c:	afa20054 	sw	v0,84(sp)
8002b620:	afa40058 	sw	a0,88(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8002b624:	24420020 	addiu	v0,v0,32
8002b628:	afa20050 	sw	v0,80(sp)
    }
8002b62c:	8fa20050 	lw	v0,80(sp)
8002b630:	ac620000 	sw	v0,0(v1)
                        None
                    } else {
                        Some(next_unchecked!(self))
8002b634:	afa10024 	sw	at,36(sp)
8002b638:	27a10024 	addiu	at,sp,36
8002b63c:	afa1002c 	sw	at,44(sp)
        unsafe { &*self.as_ptr().cast_const() }
8002b640:	8fa10024 	lw	at,36(sp)
8002b644:	afa10034 	sw	at,52(sp)
8002b648:	afa10030 	sw	at,48(sp)
8002b64c:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
8002b650:	0800ad99 	j	8002b664 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11ae3e1e711e5b4cE+0xcc>
8002b654:	00000000 	nop
                        None
8002b658:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
8002b65c:	0800ad99 	j	8002b664 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11ae3e1e711e5b4cE+0xcc>
8002b660:	00000000 	nop
                    }
                }
            }
8002b664:	8fa20018 	lw	v0,24(sp)
8002b668:	8fbf005c 	lw	ra,92(sp)
8002b66c:	27bd0060 	addiu	sp,sp,96
8002b670:	03e00008 	jr	ra
8002b674:	00000000 	nop

8002b678 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17h067ed799e8abcf6bE>:

            // We override the default implementation, which uses `try_fold`,
            // because this simple implementation generates less LLVM IR and is
            // faster to compile.
            #[inline]
            fn for_each<F>(mut self, mut f: F)
8002b678:	27bdffd0 	addiu	sp,sp,-48
8002b67c:	afbf002c 	sw	ra,44(sp)
8002b680:	afa60014 	sw	a2,20(sp)
8002b684:	afa40018 	sw	a0,24(sp)
8002b688:	afa5001c 	sw	a1,28(sp)
            where
                Self: Sized,
                F: FnMut(Self::Item),
            {
                while let Some(x) = self.next() {
8002b68c:	0800ada5 	j	8002b694 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17h067ed799e8abcf6bE+0x1c>
8002b690:	00000000 	nop
8002b694:	27a40018 	addiu	a0,sp,24
8002b698:	0c00ad66 	jal	8002b598 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11ae3e1e711e5b4cE>
8002b69c:	00000000 	nop
8002b6a0:	afa20020 	sw	v0,32(sp)
8002b6a4:	8fa10020 	lw	at,32(sp)
8002b6a8:	1020000c 	beqz	at,8002b6dc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17h067ed799e8abcf6bE+0x64>
8002b6ac:	00000000 	nop
8002b6b0:	0800adae 	j	8002b6b8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17h067ed799e8abcf6bE+0x40>
8002b6b4:	00000000 	nop
8002b6b8:	8fa40014 	lw	a0,20(sp)
8002b6bc:	8fa10020 	lw	at,32(sp)
8002b6c0:	afa10028 	sw	at,40(sp)
                    f(x);
8002b6c4:	afa10024 	sw	at,36(sp)
8002b6c8:	8fa50024 	lw	a1,36(sp)
8002b6cc:	0c00b980 	jal	8002e600 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE>
8002b6d0:	00000000 	nop
8002b6d4:	0800ada5 	j	8002b694 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17h067ed799e8abcf6bE+0x1c>
8002b6d8:	00000000 	nop
                }
            }
8002b6dc:	8fbf002c 	lw	ra,44(sp)
8002b6e0:	27bd0030 	addiu	sp,sp,48
8002b6e4:	03e00008 	jr	ra
8002b6e8:	00000000 	nop

8002b6ec <_ZN98_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h33637e9815f1d4c3E>:
    fn from(reference: &mut T) -> Self {
8002b6ec:	27bdfff8 	addiu	sp,sp,-8
8002b6f0:	afa40004 	sw	a0,4(sp)
        unsafe { NonNull { pointer: reference as *mut T } }
8002b6f4:	afa40000 	sw	a0,0(sp)
    }
8002b6f8:	8fa20000 	lw	v0,0(sp)
8002b6fc:	27bd0008 	addiu	sp,sp,8
8002b700:	03e00008 	jr	ra
8002b704:	00000000 	nop

8002b708 <_ZN8mos_65023dev4uart8Ns16550a3new17hccf97b46c8765e3aE>:
    pub const fn new(base: VirtAddr, size: usize) -> Self {
8002b708:	27bdfff0 	addiu	sp,sp,-16
8002b70c:	00801025 	move	v0,a0
8002b710:	afa50008 	sw	a1,8(sp)
8002b714:	8fa10008 	lw	at,8(sp)
8002b718:	afa10004 	sw	at,4(sp)
8002b71c:	afa6000c 	sw	a2,12(sp)
        Ns16550a { base, size }
8002b720:	8fa10004 	lw	at,4(sp)
8002b724:	ac810000 	sw	at,0(a0)
8002b728:	ac860004 	sw	a2,4(a0)
8002b72c:	27bd0010 	addiu	sp,sp,16
    }
8002b730:	03e00008 	jr	ra
8002b734:	00000000 	nop

8002b738 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17h5172dafc15c6e4dbE>:
    fn putchar(&self, c: u32) {
8002b738:	27bdffb0 	addiu	sp,sp,-80
8002b73c:	afbf004c 	sw	ra,76(sp)
8002b740:	afa50010 	sw	a1,16(sp)
8002b744:	afa40014 	sw	a0,20(sp)
8002b748:	afa40028 	sw	a0,40(sp)
8002b74c:	afa5002c 	sw	a1,44(sp)
        while self.base.add(MALTA_SERIAL_LSR).read_volatile::<u8>() & MALTA_SERIAL_THR_EMPTY == 0 {}
8002b750:	0800add6 	j	8002b758 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17h5172dafc15c6e4dbE+0x20>
8002b754:	00000000 	nop
8002b758:	8fa10014 	lw	at,20(sp)
8002b75c:	8c210000 	lw	at,0(at)
8002b760:	afa1001c 	sw	at,28(sp)
8002b764:	8fa1001c 	lw	at,28(sp)
8002b768:	afa10030 	sw	at,48(sp)
8002b76c:	8fa40030 	lw	a0,48(sp)
8002b770:	24050005 	li	a1,5
8002b774:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
8002b778:	00000000 	nop
8002b77c:	afa20034 	sw	v0,52(sp)
8002b780:	8fa10034 	lw	at,52(sp)
8002b784:	afa10018 	sw	at,24(sp)
8002b788:	27a10018 	addiu	at,sp,24
8002b78c:	afa10048 	sw	at,72(sp)
        assert!(self.raw % align_of::<T>() == 0);
        unsafe { ptr::read(self.raw as *const T) }
    }
    #[inline(always)]
    pub fn read_volatile<T>(&self) -> T {
        unsafe { ptr::read_volatile(self.raw as *const T) }
8002b790:	8fa40018 	lw	a0,24(sp)
8002b794:	0c00e576 	jal	800395d8 <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E>
8002b798:	00000000 	nop
8002b79c:	30410020 	andi	at,v0,0x20
8002b7a0:	1020ffed 	beqz	at,8002b758 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17h5172dafc15c6e4dbE+0x20>
8002b7a4:	00000000 	nop
8002b7a8:	0800adec 	j	8002b7b0 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17h5172dafc15c6e4dbE+0x78>
8002b7ac:	00000000 	nop
        self.base.add(MALTA_SERIAL_DATA).write_volatile(c as u8);
8002b7b0:	8fa10014 	lw	at,20(sp)
8002b7b4:	8c210000 	lw	at,0(at)
8002b7b8:	afa10024 	sw	at,36(sp)
8002b7bc:	8fa10024 	lw	at,36(sp)
8002b7c0:	afa10038 	sw	at,56(sp)
8002b7c4:	8fa40038 	lw	a0,56(sp)
8002b7c8:	24050000 	li	a1,0
8002b7cc:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
8002b7d0:	00000000 	nop
8002b7d4:	8fa50010 	lw	a1,16(sp)
8002b7d8:	afa2003c 	sw	v0,60(sp)
8002b7dc:	8fa1003c 	lw	at,60(sp)
8002b7e0:	afa10020 	sw	at,32(sp)
8002b7e4:	27a10020 	addiu	at,sp,32
8002b7e8:	afa10040 	sw	at,64(sp)
8002b7ec:	a3a50047 	sb	a1,71(sp)
            ptr::write_volatile(self.raw as *mut T, src);
8002b7f0:	8fa40020 	lw	a0,32(sp)
8002b7f4:	0c0088a0 	jal	80022280 <_ZN4core3ptr14write_volatile17h370b8971546adc90E>
8002b7f8:	00000000 	nop
    }
8002b7fc:	8fbf004c 	lw	ra,76(sp)
8002b800:	27bd0050 	addiu	sp,sp,80
8002b804:	03e00008 	jr	ra
8002b808:	00000000 	nop

8002b80c <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7getchar17hf32a0d9e3844dc36E>:
    fn getchar(&self) -> u32 {
8002b80c:	27bdffb8 	addiu	sp,sp,-72
8002b810:	afbf0044 	sw	ra,68(sp)
8002b814:	afa40014 	sw	a0,20(sp)
8002b818:	afa40028 	sw	a0,40(sp)
        while self.base.add(MALTA_SERIAL_LSR).read_volatile::<u8>() & MALTA_SERIAL_DATA_READY == 0 {
8002b81c:	0800ae09 	j	8002b824 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7getchar17hf32a0d9e3844dc36E+0x18>
8002b820:	00000000 	nop
8002b824:	8fa10014 	lw	at,20(sp)
8002b828:	8c210000 	lw	at,0(at)
8002b82c:	afa1001c 	sw	at,28(sp)
8002b830:	8fa1001c 	lw	at,28(sp)
8002b834:	afa1002c 	sw	at,44(sp)
8002b838:	8fa4002c 	lw	a0,44(sp)
8002b83c:	24050005 	li	a1,5
8002b840:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
8002b844:	00000000 	nop
8002b848:	afa20030 	sw	v0,48(sp)
8002b84c:	8fa10030 	lw	at,48(sp)
8002b850:	afa10018 	sw	at,24(sp)
8002b854:	27a10018 	addiu	at,sp,24
8002b858:	afa1003c 	sw	at,60(sp)
        unsafe { ptr::read_volatile(self.raw as *const T) }
8002b85c:	8fa40018 	lw	a0,24(sp)
8002b860:	0c00e576 	jal	800395d8 <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E>
8002b864:	00000000 	nop
8002b868:	30410001 	andi	at,v0,0x1
8002b86c:	1020ffed 	beqz	at,8002b824 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7getchar17hf32a0d9e3844dc36E+0x18>
8002b870:	00000000 	nop
8002b874:	0800ae1f 	j	8002b87c <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7getchar17hf32a0d9e3844dc36E+0x70>
8002b878:	00000000 	nop
        self.base.add(MALTA_SERIAL_DATA).read_volatile()
8002b87c:	8fa10014 	lw	at,20(sp)
8002b880:	8c210000 	lw	at,0(at)
8002b884:	afa10024 	sw	at,36(sp)
8002b888:	8fa10024 	lw	at,36(sp)
8002b88c:	afa10034 	sw	at,52(sp)
8002b890:	8fa40034 	lw	a0,52(sp)
8002b894:	24050000 	li	a1,0
8002b898:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
8002b89c:	00000000 	nop
8002b8a0:	afa20038 	sw	v0,56(sp)
8002b8a4:	8fa10038 	lw	at,56(sp)
8002b8a8:	afa10020 	sw	at,32(sp)
8002b8ac:	27a10020 	addiu	at,sp,32
8002b8b0:	afa10040 	sw	at,64(sp)
8002b8b4:	8fa40020 	lw	a0,32(sp)
8002b8b8:	0c008758 	jal	80021d60 <_ZN4core3ptr13read_volatile17h190ef4300a716656E>
8002b8bc:	00000000 	nop
    }
8002b8c0:	8fbf0044 	lw	ra,68(sp)
8002b8c4:	27bd0048 	addiu	sp,sp,72
8002b8c8:	03e00008 	jr	ra
8002b8cc:	00000000 	nop

8002b8d0 <_ZN8mos_65023dev4halt17hd9ad84541a5942b7E>:
pub mod uart;
use crate::mm::addr::VirtAddr;
const MALTA_FPGA_HALT: VirtAddr = VirtAddr::new(0xbf000000 + 0x500);

pub fn halt() -> ! {
8002b8d0:	27bdffb8 	addiu	sp,sp,-72
8002b8d4:	afbf0044 	sw	ra,68(sp)
8002b8d8:	3c018105 	lui	at,0x8105
8002b8dc:	2421f150 	addiu	at,at,-3760
8002b8e0:	afa1003c 	sw	at,60(sp)
8002b8e4:	24050042 	li	a1,66
8002b8e8:	afa50040 	sw	a1,64(sp)
8002b8ec:	3c01bf00 	lui	at,0xbf00
8002b8f0:	34240500 	ori	a0,at,0x500
            ptr::write_volatile(self.raw as *mut T, src);
8002b8f4:	0c0088ed 	jal	800223b4 <_ZN4core3ptr14write_volatile17hac09a9cb33afc568E>
8002b8f8:	00000000 	nop
    MALTA_FPGA_HALT.write_volatile(0x42);
    unreachable!("halt failed.\n");
8002b8fc:	03a00825 	move	at,sp
8002b900:	ac200010 	sw	zero,16(at)
8002b904:	3c018105 	lui	at,0x8105
8002b908:	2425f1bc 	addiu	a1,at,-3652
8002b90c:	27a40020 	addiu	a0,sp,32
8002b910:	afa4001c 	sw	a0,28(sp)
8002b914:	24060001 	li	a2,1
8002b918:	27a70038 	addiu	a3,sp,56
8002b91c:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
8002b920:	00000000 	nop
8002b924:	8fa4001c 	lw	a0,28(sp)
8002b928:	3c018105 	lui	at,0x8105
8002b92c:	2425f1d8 	addiu	a1,at,-3624
8002b930:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002b934:	00000000 	nop

8002b938 <_ZN8mos_65022mm4addr100_$LT$impl$u20$core..convert..From$LT$mos_6502..mm..addr..VirtAddr$GT$$u20$for$u20$$BP$mut$u20$u8$GT$4from17h94cdde96531b8f83E>:
    fn from(va: VirtAddr) -> Self {
8002b938:	27bdfff8 	addiu	sp,sp,-8
8002b93c:	afa40004 	sw	a0,4(sp)
8002b940:	8fa10004 	lw	at,4(sp)
8002b944:	afa10000 	sw	at,0(sp)
        va.raw as *mut u8
8002b948:	8fa20000 	lw	v0,0(sp)
8002b94c:	27bd0008 	addiu	sp,sp,8
    }
8002b950:	03e00008 	jr	ra
8002b954:	00000000 	nop

8002b958 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Sub$GT$3sub17hbee2a7e528d5ebe9E>:
    fn sub(self, rhs: VirtAddr) -> Self::Output {
8002b958:	27bdffd8 	addiu	sp,sp,-40
8002b95c:	afa40018 	sw	a0,24(sp)
8002b960:	8fa10018 	lw	at,24(sp)
8002b964:	afa10014 	sw	at,20(sp)
8002b968:	afa50020 	sw	a1,32(sp)
8002b96c:	8fa10020 	lw	at,32(sp)
8002b970:	afa1001c 	sw	at,28(sp)
            raw: self.raw - rhs.raw,
8002b974:	8fa10014 	lw	at,20(sp)
8002b978:	8fa2001c 	lw	v0,28(sp)
8002b97c:	00221823 	subu	v1,at,v0
8002b980:	afa30010 	sw	v1,16(sp)
8002b984:	0022082b 	sltu	at,at,v0
8002b988:	14200009 	bnez	at,8002b9b0 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Sub$GT$3sub17hbee2a7e528d5ebe9E+0x58>
8002b98c:	00000000 	nop
8002b990:	0800ae66 	j	8002b998 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Sub$GT$3sub17hbee2a7e528d5ebe9E+0x40>
8002b994:	00000000 	nop
        VirtAddr {
8002b998:	8fa10010 	lw	at,16(sp)
8002b99c:	afa10024 	sw	at,36(sp)
    }
8002b9a0:	8fa20024 	lw	v0,36(sp)
8002b9a4:	27bd0028 	addiu	sp,sp,40
8002b9a8:	03e00008 	jr	ra
8002b9ac:	00000000 	nop
            raw: self.raw - rhs.raw,
8002b9b0:	3c018105 	lui	at,0x8105
8002b9b4:	2424f1fc 	addiu	a0,at,-3588
8002b9b8:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002b9bc:	00000000 	nop

8002b9c0 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..bit..BitOr$LT$usize$GT$$GT$5bitor17hc0b66c4d128ae0eeE>:
    fn bitor(self, rhs: usize) -> Self::Output {
8002b9c0:	27bdfff0 	addiu	sp,sp,-16
8002b9c4:	afa40008 	sw	a0,8(sp)
8002b9c8:	8fa10008 	lw	at,8(sp)
8002b9cc:	afa10004 	sw	at,4(sp)
8002b9d0:	afa5000c 	sw	a1,12(sp)
        self.raw | rhs
8002b9d4:	8fa10004 	lw	at,4(sp)
8002b9d8:	00251025 	or	v0,at,a1
8002b9dc:	27bd0010 	addiu	sp,sp,16
    }
8002b9e0:	03e00008 	jr	ra
8002b9e4:	00000000 	nop

8002b9e8 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17h58289ad5784f53c4E>:
    fn rem(self, rhs: usize) -> Self::Output {
8002b9e8:	27bdffd8 	addiu	sp,sp,-40
8002b9ec:	afa50014 	sw	a1,20(sp)
8002b9f0:	afa40020 	sw	a0,32(sp)
8002b9f4:	8fa10020 	lw	at,32(sp)
8002b9f8:	afa1001c 	sw	at,28(sp)
8002b9fc:	afa50024 	sw	a1,36(sp)
        self.raw % rhs
8002ba00:	8fa1001c 	lw	at,28(sp)
8002ba04:	afa10018 	sw	at,24(sp)
8002ba08:	10a0000b 	beqz	a1,8002ba38 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17h58289ad5784f53c4E+0x50>
8002ba0c:	00000000 	nop
8002ba10:	0800ae86 	j	8002ba18 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17h58289ad5784f53c4E+0x30>
8002ba14:	00000000 	nop
8002ba18:	8fa10014 	lw	at,20(sp)
8002ba1c:	8fa20018 	lw	v0,24(sp)
8002ba20:	0041001b 	divu	zero,v0,at
8002ba24:	002001f4 	teq	at,zero,0x7
8002ba28:	00001010 	mfhi	v0
8002ba2c:	27bd0028 	addiu	sp,sp,40
    }
8002ba30:	03e00008 	jr	ra
8002ba34:	00000000 	nop
        self.raw % rhs
8002ba38:	3c018105 	lui	at,0x8105
8002ba3c:	2424f20c 	addiu	a0,at,-3572
8002ba40:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
8002ba44:	00000000 	nop

8002ba48 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17h187d6858e05b6d9bE>:
    fn rem(self, rhs: usize) -> Self::Output {
8002ba48:	27bdffd8 	addiu	sp,sp,-40
8002ba4c:	afa50014 	sw	a1,20(sp)
8002ba50:	afa40020 	sw	a0,32(sp)
8002ba54:	8fa10020 	lw	at,32(sp)
8002ba58:	afa1001c 	sw	at,28(sp)
8002ba5c:	afa50024 	sw	a1,36(sp)
        self.raw % rhs
8002ba60:	8fa1001c 	lw	at,28(sp)
8002ba64:	afa10018 	sw	at,24(sp)
8002ba68:	10a0000b 	beqz	a1,8002ba98 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17h187d6858e05b6d9bE+0x50>
8002ba6c:	00000000 	nop
8002ba70:	0800ae9e 	j	8002ba78 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17h187d6858e05b6d9bE+0x30>
8002ba74:	00000000 	nop
8002ba78:	8fa10014 	lw	at,20(sp)
8002ba7c:	8fa20018 	lw	v0,24(sp)
8002ba80:	0041001b 	divu	zero,v0,at
8002ba84:	002001f4 	teq	at,zero,0x7
8002ba88:	00001010 	mfhi	v0
8002ba8c:	27bd0028 	addiu	sp,sp,40
    }
8002ba90:	03e00008 	jr	ra
8002ba94:	00000000 	nop
        self.raw % rhs
8002ba98:	3c018105 	lui	at,0x8105
8002ba9c:	2424f21c 	addiu	a0,at,-3556
8002baa0:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
8002baa4:	00000000 	nop

8002baa8 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17h799630bd0af6cd94E>:
    fn add(self, other: usize) -> Self::Output {
8002baa8:	27bdffd0 	addiu	sp,sp,-48
8002baac:	afbf002c 	sw	ra,44(sp)
8002bab0:	afa40020 	sw	a0,32(sp)
8002bab4:	8fa10020 	lw	at,32(sp)
8002bab8:	afa1001c 	sw	at,28(sp)
8002babc:	afa50028 	sw	a1,40(sp)
            raw: self
8002bac0:	8fa4001c 	lw	a0,28(sp)
8002bac4:	0c0084dc 	jal	80021370 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17hf3e01b5f6dbf30e3E>
8002bac8:	00000000 	nop
8002bacc:	00402025 	move	a0,v0
8002bad0:	00602825 	move	a1,v1
8002bad4:	3c018105 	lui	at,0x8105
8002bad8:	2421f244 	addiu	at,at,-3516
8002badc:	03a01025 	move	v0,sp
8002bae0:	ac410010 	sw	at,16(v0)
8002bae4:	3c018105 	lui	at,0x8105
8002bae8:	2426f22c 	addiu	a2,at,-3540
8002baec:	24070018 	li	a3,24
8002baf0:	0c00e744 	jal	80039d10 <_ZN4core6option15Option$LT$T$GT$6expect17h537867a9d3760452E>
8002baf4:	00000000 	nop
        PhysAddr {
8002baf8:	afa20024 	sw	v0,36(sp)
    }
8002bafc:	8fa20024 	lw	v0,36(sp)
8002bb00:	8fbf002c 	lw	ra,44(sp)
8002bb04:	27bd0030 	addiu	sp,sp,48
8002bb08:	03e00008 	jr	ra
8002bb0c:	00000000 	nop

8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>:
    fn add(self, other: usize) -> Self::Output {
8002bb10:	27bdffd0 	addiu	sp,sp,-48
8002bb14:	afbf002c 	sw	ra,44(sp)
8002bb18:	afa40020 	sw	a0,32(sp)
8002bb1c:	8fa10020 	lw	at,32(sp)
8002bb20:	afa1001c 	sw	at,28(sp)
8002bb24:	afa50028 	sw	a1,40(sp)
            raw: self
8002bb28:	8fa4001c 	lw	a0,28(sp)
8002bb2c:	0c0084dc 	jal	80021370 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17hf3e01b5f6dbf30e3E>
8002bb30:	00000000 	nop
8002bb34:	00402025 	move	a0,v0
8002bb38:	00602825 	move	a1,v1
8002bb3c:	3c018105 	lui	at,0x8105
8002bb40:	2421f26c 	addiu	at,at,-3476
8002bb44:	03a01025 	move	v0,sp
8002bb48:	ac410010 	sw	at,16(v0)
8002bb4c:	3c018105 	lui	at,0x8105
8002bb50:	2426f254 	addiu	a2,at,-3500
8002bb54:	24070018 	li	a3,24
8002bb58:	0c00e744 	jal	80039d10 <_ZN4core6option15Option$LT$T$GT$6expect17h537867a9d3760452E>
8002bb5c:	00000000 	nop
        VirtAddr {
8002bb60:	afa20024 	sw	v0,36(sp)
    }
8002bb64:	8fa20024 	lw	v0,36(sp)
8002bb68:	8fbf002c 	lw	ra,44(sp)
8002bb6c:	27bd0030 	addiu	sp,sp,48
8002bb70:	03e00008 	jr	ra
8002bb74:	00000000 	nop

8002bb78 <_ZN8mos_65022mm4addr8PhysAddr3new17h05e0c95f30bb0c30E>:
        pa.raw as *mut u8
    }
}

impl PhysAddr {
    pub const fn new(raw: usize) -> Self {
8002bb78:	27bdfff8 	addiu	sp,sp,-8
8002bb7c:	afa40004 	sw	a0,4(sp)
        PhysAddr { raw }
8002bb80:	afa40000 	sw	a0,0(sp)
    }
8002bb84:	8fa20000 	lw	v0,0(sp)
8002bb88:	27bd0008 	addiu	sp,sp,8
8002bb8c:	03e00008 	jr	ra
8002bb90:	00000000 	nop

8002bb94 <_ZN8mos_65022mm4addr8PhysAddr4zero17h5d43c11597d3ca40E>:
    pub const fn zero() -> Self {
8002bb94:	27bdfff8 	addiu	sp,sp,-8
        PhysAddr { raw: 0 }
8002bb98:	afa00004 	sw	zero,4(sp)
    }
8002bb9c:	8fa20004 	lw	v0,4(sp)
8002bba0:	27bd0008 	addiu	sp,sp,8
8002bba4:	03e00008 	jr	ra
8002bba8:	00000000 	nop

8002bbac <_ZN8mos_65022mm4addr8PhysAddr10align_down17hc2ad02b55f9469b2E>:
    pub fn align_up(&self, l: usize) -> Self {
        Self {
            raw: (self.raw + l - 1) & !(l - 1),
        }
    }
    pub fn align_down(&self, l: usize) -> Self {
8002bbac:	27bdffd8 	addiu	sp,sp,-40
8002bbb0:	afa40020 	sw	a0,32(sp)
8002bbb4:	afa50024 	sw	a1,36(sp)
        Self {
            raw: self.raw & !(l - 1),
8002bbb8:	8c810000 	lw	at,0(a0)
8002bbbc:	afa10014 	sw	at,20(sp)
8002bbc0:	24a1ffff 	addiu	at,a1,-1
8002bbc4:	afa10018 	sw	at,24(sp)
8002bbc8:	10a0000c 	beqz	a1,8002bbfc <_ZN8mos_65022mm4addr8PhysAddr10align_down17hc2ad02b55f9469b2E+0x50>
8002bbcc:	00000000 	nop
8002bbd0:	0800aef6 	j	8002bbd8 <_ZN8mos_65022mm4addr8PhysAddr10align_down17hc2ad02b55f9469b2E+0x2c>
8002bbd4:	00000000 	nop
8002bbd8:	8fa10014 	lw	at,20(sp)
8002bbdc:	8fa20018 	lw	v0,24(sp)
8002bbe0:	00401027 	nor	v0,v0,zero
8002bbe4:	00220824 	and	at,at,v0
        Self {
8002bbe8:	afa1001c 	sw	at,28(sp)
        }
    }
8002bbec:	8fa2001c 	lw	v0,28(sp)
8002bbf0:	27bd0028 	addiu	sp,sp,40
8002bbf4:	03e00008 	jr	ra
8002bbf8:	00000000 	nop
            raw: self.raw & !(l - 1),
8002bbfc:	3c018105 	lui	at,0x8105
8002bc00:	2424f2f0 	addiu	a0,at,-3344
8002bc04:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002bc08:	00000000 	nop

8002bc0c <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h3e418a96ab495ffdE>:
        unsafe { ptr::read_volatile(self.raw as *const T) }
    }
}

impl From<usize> for VirtAddr {
    fn from(raw: usize) -> Self {
8002bc0c:	27bdffe8 	addiu	sp,sp,-24
8002bc10:	afa40008 	sw	a0,8(sp)
8002bc14:	afa40014 	sw	a0,20(sp)
        VirtAddr { raw }
8002bc18:	afa40010 	sw	a0,16(sp)
    }
8002bc1c:	8fa10010 	lw	at,16(sp)
        VirtAddr::new(raw)
8002bc20:	afa1000c 	sw	at,12(sp)
8002bc24:	8fa1000c 	lw	at,12(sp)
8002bc28:	afa10004 	sw	at,4(sp)
    }
8002bc2c:	8fa20004 	lw	v0,4(sp)
8002bc30:	27bd0018 	addiu	sp,sp,24
8002bc34:	03e00008 	jr	ra
8002bc38:	00000000 	nop

8002bc3c <_ZN81_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h35d26bde8ffa8759E>:
}

impl From<usize> for PhysAddr {
    fn from(raw: usize) -> Self {
8002bc3c:	27bdffe0 	addiu	sp,sp,-32
8002bc40:	afbf001c 	sw	ra,28(sp)
8002bc44:	afa40014 	sw	a0,20(sp)
        PhysAddr::new(raw)
8002bc48:	0c00aede 	jal	8002bb78 <_ZN8mos_65022mm4addr8PhysAddr3new17h05e0c95f30bb0c30E>
8002bc4c:	00000000 	nop
8002bc50:	afa20018 	sw	v0,24(sp)
8002bc54:	8fa10018 	lw	at,24(sp)
8002bc58:	afa10010 	sw	at,16(sp)
    }
8002bc5c:	8fa20010 	lw	v0,16(sp)
8002bc60:	8fbf001c 	lw	ra,28(sp)
8002bc64:	27bd0020 	addiu	sp,sp,32
8002bc68:	03e00008 	jr	ra
8002bc6c:	00000000 	nop

8002bc70 <_ZN8mos_65022mm4addr91_$LT$impl$u20$core..convert..From$LT$mos_6502..mm..addr..VirtAddr$GT$$u20$for$u20$usize$GT$4from17hc202def1533f7ccbE>:
}

impl From<VirtAddr> for usize {
    fn from(va: VirtAddr) -> Self {
8002bc70:	27bdfff8 	addiu	sp,sp,-8
8002bc74:	afa40004 	sw	a0,4(sp)
8002bc78:	8fa10004 	lw	at,4(sp)
8002bc7c:	afa10000 	sw	at,0(sp)
        va.raw
8002bc80:	8fa20000 	lw	v0,0(sp)
8002bc84:	27bd0008 	addiu	sp,sp,8
    }
8002bc88:	03e00008 	jr	ra
8002bc8c:	00000000 	nop

8002bc90 <_ZN8mos_65022mm4addr9kva_to_pa17hbce4a505e0faf2e7E>:
    fn from(pa: PhysAddr) -> Self {
        pa.raw
    }
}

pub fn kva_to_pa(va: VirtAddr) -> PhysAddr {
8002bc90:	27bdffd0 	addiu	sp,sp,-48
8002bc94:	afbf002c 	sw	ra,44(sp)
8002bc98:	afa4001c 	sw	a0,28(sp)
8002bc9c:	8fa1001c 	lw	at,28(sp)
8002bca0:	afa10018 	sw	at,24(sp)
    PhysAddr::new(va.raw - KSEG0.raw)
8002bca4:	8fa10018 	lw	at,24(sp)
8002bca8:	3c028105 	lui	v0,0x8105
8002bcac:	8c42f154 	lw	v0,-3756(v0)
8002bcb0:	afa20024 	sw	v0,36(sp)
8002bcb4:	8fa20024 	lw	v0,36(sp)
8002bcb8:	00221823 	subu	v1,at,v0
8002bcbc:	afa30014 	sw	v1,20(sp)
8002bcc0:	0022082b 	sltu	at,at,v0
8002bcc4:	1420000e 	bnez	at,8002bd00 <_ZN8mos_65022mm4addr9kva_to_pa17hbce4a505e0faf2e7E+0x70>
8002bcc8:	00000000 	nop
8002bccc:	0800af35 	j	8002bcd4 <_ZN8mos_65022mm4addr9kva_to_pa17hbce4a505e0faf2e7E+0x44>
8002bcd0:	00000000 	nop
8002bcd4:	8fa40014 	lw	a0,20(sp)
8002bcd8:	0c00aede 	jal	8002bb78 <_ZN8mos_65022mm4addr8PhysAddr3new17h05e0c95f30bb0c30E>
8002bcdc:	00000000 	nop
8002bce0:	afa20028 	sw	v0,40(sp)
8002bce4:	8fa10028 	lw	at,40(sp)
8002bce8:	afa10020 	sw	at,32(sp)
}
8002bcec:	8fa20020 	lw	v0,32(sp)
8002bcf0:	8fbf002c 	lw	ra,44(sp)
8002bcf4:	27bd0030 	addiu	sp,sp,48
8002bcf8:	03e00008 	jr	ra
8002bcfc:	00000000 	nop
    PhysAddr::new(va.raw - KSEG0.raw)
8002bd00:	3c018105 	lui	at,0x8105
8002bd04:	2424f430 	addiu	a0,at,-3024
8002bd08:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002bd0c:	00000000 	nop

8002bd10 <_ZN8mos_65022mm4addr9pa_to_kva17h2cbb9d7cedc35302E>:

pub fn pa_to_kva(pa: PhysAddr) -> VirtAddr {
8002bd10:	27bdffd0 	addiu	sp,sp,-48
8002bd14:	afa40018 	sw	a0,24(sp)
8002bd18:	8fa10018 	lw	at,24(sp)
8002bd1c:	afa10014 	sw	at,20(sp)
    VirtAddr::new(pa.raw + KSEG0.raw)
8002bd20:	8fa20014 	lw	v0,20(sp)
8002bd24:	3c018105 	lui	at,0x8105
8002bd28:	8c21f154 	lw	at,-3756(at)
8002bd2c:	afa10020 	sw	at,32(sp)
8002bd30:	8fa10020 	lw	at,32(sp)
8002bd34:	00410821 	addu	at,v0,at
8002bd38:	afa10010 	sw	at,16(sp)
8002bd3c:	0022082b 	sltu	at,at,v0
8002bd40:	1420000e 	bnez	at,8002bd7c <_ZN8mos_65022mm4addr9pa_to_kva17h2cbb9d7cedc35302E+0x6c>
8002bd44:	00000000 	nop
8002bd48:	0800af54 	j	8002bd50 <_ZN8mos_65022mm4addr9pa_to_kva17h2cbb9d7cedc35302E+0x40>
8002bd4c:	00000000 	nop
8002bd50:	8fa10010 	lw	at,16(sp)
8002bd54:	afa1002c 	sw	at,44(sp)
        VirtAddr { raw }
8002bd58:	afa10028 	sw	at,40(sp)
    }
8002bd5c:	8fa10028 	lw	at,40(sp)
    VirtAddr::new(pa.raw + KSEG0.raw)
8002bd60:	afa10024 	sw	at,36(sp)
8002bd64:	8fa10024 	lw	at,36(sp)
8002bd68:	afa1001c 	sw	at,28(sp)
}
8002bd6c:	8fa2001c 	lw	v0,28(sp)
8002bd70:	27bd0030 	addiu	sp,sp,48
8002bd74:	03e00008 	jr	ra
8002bd78:	00000000 	nop
    VirtAddr::new(pa.raw + KSEG0.raw)
8002bd7c:	3c018105 	lui	at,0x8105
8002bd80:	2424f440 	addiu	a0,at,-3008
8002bd84:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002bd88:	00000000 	nop

8002bd8c <_ZN8mos_65022mm4page4Page3new17h716c05c94e0a3b80E>:
    pub fn new(idx: usize) -> Self {
8002bd8c:	27bdffa8 	addiu	sp,sp,-88
8002bd90:	afbf0054 	sw	ra,84(sp)
8002bd94:	afa50020 	sw	a1,32(sp)
8002bd98:	afa40010 	sw	a0,16(sp)
8002bd9c:	afa40014 	sw	a0,20(sp)
8002bda0:	afa5004c 	sw	a1,76(sp)
8002bda4:	27a4003c 	addiu	a0,sp,60
8002bda8:	afa40018 	sw	a0,24(sp)
            p_link: Rc::new(RefCell::new(ListNode::new(idx))),
8002bdac:	0c00d472 	jal	800351c8 <_ZN8mos_65024util8ListNode3new17h3bddddc7683b78d9E>
8002bdb0:	00000000 	nop
8002bdb4:	8fa50018 	lw	a1,24(sp)
8002bdb8:	27a4002c 	addiu	a0,sp,44
8002bdbc:	afa4001c 	sw	a0,28(sp)
8002bdc0:	0c008f96 	jal	80023e58 <_ZN4core4cell16RefCell$LT$T$GT$3new17h0d8c0999d3a5c116E>
8002bdc4:	00000000 	nop
8002bdc8:	8fa4001c 	lw	a0,28(sp)
8002bdcc:	0c00a243 	jal	8002890c <_ZN5alloc2rc11Rc$LT$T$GT$3new17h1f0944bf899dca9bE>
8002bdd0:	00000000 	nop
8002bdd4:	8fa50020 	lw	a1,32(sp)
8002bdd8:	afa20024 	sw	v0,36(sp)
            p_pa: PhysAddr::new(idx * PAGE_SIZE),
8002bddc:	00050b00 	sll	at,a1,0xc
8002bde0:	afa10028 	sw	at,40(sp)
8002bde4:	7ca19800 	ext	at,a1,0x0,0x14
8002bde8:	14250016 	bne	at,a1,8002be44 <_ZN8mos_65022mm4page4Page3new17h716c05c94e0a3b80E+0xb8>
8002bdec:	00000000 	nop
8002bdf0:	0800af7e 	j	8002bdf8 <_ZN8mos_65022mm4page4Page3new17h716c05c94e0a3b80E+0x6c>
8002bdf4:	00000000 	nop
8002bdf8:	8fa40028 	lw	a0,40(sp)
8002bdfc:	0c00aede 	jal	8002bb78 <_ZN8mos_65022mm4addr8PhysAddr3new17h05e0c95f30bb0c30E>
8002be00:	00000000 	nop
8002be04:	8fa30024 	lw	v1,36(sp)
8002be08:	8fa10010 	lw	at,16(sp)
8002be0c:	00402025 	move	a0,v0
8002be10:	8fa20014 	lw	v0,20(sp)
8002be14:	afa40050 	sw	a0,80(sp)
8002be18:	8fa40050 	lw	a0,80(sp)
8002be1c:	afa40048 	sw	a0,72(sp)
        Self {
8002be20:	ac230000 	sw	v1,0(at)
8002be24:	8fa30048 	lw	v1,72(sp)
8002be28:	ac230004 	sw	v1,4(at)
8002be2c:	24030000 	li	v1,0
8002be30:	a4200008 	sh	zero,8(at)
    }
8002be34:	8fbf0054 	lw	ra,84(sp)
8002be38:	27bd0058 	addiu	sp,sp,88
8002be3c:	03e00008 	jr	ra
8002be40:	00000000 	nop
            p_pa: PhysAddr::new(idx * PAGE_SIZE),
8002be44:	3c018105 	lui	at,0x8105
8002be48:	2424f464 	addiu	a0,at,-2972
8002be4c:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002be50:	00000000 	nop

8002be54 <_ZN8mos_65022mm4page9page_init17hc6872372700e52f1E>:

extern "C" {
    pub static stack_end: usize;
}

pub(super) fn page_init(mem_sz: usize) {
8002be54:	27bdff78 	addiu	sp,sp,-136
8002be58:	afbf0084 	sw	ra,132(sp)
8002be5c:	afa40060 	sw	a0,96(sp)
    let count = mem_sz / PAGE_SIZE;
8002be60:	00040b02 	srl	at,a0,0xc
8002be64:	afa1001c 	sw	at,28(sp)
8002be68:	afa10064 	sw	at,100(sp)
    let mut pages = PAGES.lock();
8002be6c:	3c018105 	lui	at,0x8105
8002be70:	242408b8 	addiu	a0,at,2232
8002be74:	0c00d8c9 	jal	80036324 <_ZN69_$LT$mos_6502..mm..page..PAGES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hac3480edc21cc44bE>
8002be78:	00000000 	nop
8002be7c:	00402025 	move	a0,v0
8002be80:	0c00a077 	jal	800281dc <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0ef92e8e38bfe963E>
8002be84:	00000000 	nop
8002be88:	afa20020 	sw	v0,32(sp)
    let mut page_list = PAGE_LIST.lock();
8002be8c:	3c018105 	lui	at,0x8105
8002be90:	242408b8 	addiu	a0,at,2232
8002be94:	0c00d8d5 	jal	80036354 <_ZN73_$LT$mos_6502..mm..page..PAGE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbb3f532e7bbd7eecE>
8002be98:	00000000 	nop
8002be9c:	00402025 	move	a0,v0
8002bea0:	0c00a09c 	jal	80028270 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E>
8002bea4:	00000000 	nop
8002bea8:	8fa1001c 	lw	at,28(sp)
8002beac:	afa20024 	sw	v0,36(sp)
8002beb0:	3c02810a 	lui	v0,0x810a
8002beb4:	24426000 	addiu	v0,v0,24576
8002beb8:	afa20080 	sw	v0,128(sp)
        VirtAddr { raw }
8002bebc:	afa2007c 	sw	v0,124(sp)
    }
8002bec0:	8fa2007c 	lw	v0,124(sp)
    let kernel_end = unsafe { VirtAddr::new(&stack_end as *const usize as usize) };
8002bec4:	afa20068 	sw	v0,104(sp)
8002bec8:	8fa20068 	lw	v0,104(sp)
8002becc:	afa20028 	sw	v0,40(sp)
    for i in 0..count {
8002bed0:	afa0002c 	sw	zero,44(sp)
8002bed4:	afa10030 	sw	at,48(sp)
8002bed8:	8fa4002c 	lw	a0,44(sp)
8002bedc:	8fa50030 	lw	a1,48(sp)
8002bee0:	0c012cc7 	jal	8004b31c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
8002bee4:	00000000 	nop
8002bee8:	afa20034 	sw	v0,52(sp)
8002beec:	afa30038 	sw	v1,56(sp)
8002bef0:	0800afbe 	j	8002bef8 <_ZN8mos_65022mm4page9page_init17hc6872372700e52f1E+0xa4>
8002bef4:	00000000 	nop
8002bef8:	27a40034 	addiu	a0,sp,52
8002befc:	0c012cbe 	jal	8004b2f8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
8002bf00:	00000000 	nop
8002bf04:	afa2003c 	sw	v0,60(sp)
8002bf08:	afa30040 	sw	v1,64(sp)
8002bf0c:	8fa1003c 	lw	at,60(sp)
8002bf10:	1420000d 	bnez	at,8002bf48 <_ZN8mos_65022mm4page9page_init17hc6872372700e52f1E+0xf4>
8002bf14:	00000000 	nop
8002bf18:	0800afc8 	j	8002bf20 <_ZN8mos_65022mm4page9page_init17hc6872372700e52f1E+0xcc>
8002bf1c:	00000000 	nop
8002bf20:	27a40024 	addiu	a0,sp,36
        } else {
            page.p_ref = 1;
        }
        pages.push(page);
    }
}
8002bf24:	0c008cff 	jal	800233fc <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17hde8d744f358f0af3E>
8002bf28:	00000000 	nop
8002bf2c:	27a40020 	addiu	a0,sp,32
8002bf30:	0c0086ba 	jal	80021ae8 <_ZN4core3ptr101drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17h9a20e3346397bf3eE>
8002bf34:	00000000 	nop
8002bf38:	8fbf0084 	lw	ra,132(sp)
8002bf3c:	27bd0088 	addiu	sp,sp,136
8002bf40:	03e00008 	jr	ra
8002bf44:	00000000 	nop
    for i in 0..count {
8002bf48:	8fa50040 	lw	a1,64(sp)
8002bf4c:	afa50014 	sw	a1,20(sp)
8002bf50:	afa5006c 	sw	a1,108(sp)
8002bf54:	27a40044 	addiu	a0,sp,68
        let mut page = Page::new(i);
8002bf58:	0c00af63 	jal	8002bd8c <_ZN8mos_65022mm4page4Page3new17h716c05c94e0a3b80E>
8002bf5c:	00000000 	nop
8002bf60:	8fa20014 	lw	v0,20(sp)
        if KSEG0.add(i * PAGE_SIZE) >= kernel_end {
8002bf64:	00020b00 	sll	at,v0,0xc
8002bf68:	afa10018 	sw	at,24(sp)
8002bf6c:	7c419800 	ext	at,v0,0x0,0x14
8002bf70:	14220017 	bne	at,v0,8002bfd0 <_ZN8mos_65022mm4page9page_init17hc6872372700e52f1E+0x17c>
8002bf74:	00000000 	nop
8002bf78:	0800afe0 	j	8002bf80 <_ZN8mos_65022mm4page9page_init17hc6872372700e52f1E+0x12c>
8002bf7c:	00000000 	nop
8002bf80:	8fa50018 	lw	a1,24(sp)
8002bf84:	3c018105 	lui	at,0x8105
8002bf88:	8c21f154 	lw	at,-3756(at)
8002bf8c:	afa10070 	sw	at,112(sp)
8002bf90:	8fa10070 	lw	at,112(sp)
8002bf94:	afa10074 	sw	at,116(sp)
8002bf98:	8fa40074 	lw	a0,116(sp)
8002bf9c:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
8002bfa0:	00000000 	nop
8002bfa4:	afa20078 	sw	v0,120(sp)
8002bfa8:	8fa10078 	lw	at,120(sp)
8002bfac:	afa10050 	sw	at,80(sp)
8002bfb0:	27a40050 	addiu	a0,sp,80
8002bfb4:	27a50028 	addiu	a1,sp,40
8002bfb8:	0c00823d 	jal	800208f4 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E>
8002bfbc:	00000000 	nop
8002bfc0:	1440000b 	bnez	v0,8002bff0 <_ZN8mos_65022mm4page9page_init17hc6872372700e52f1E+0x19c>
8002bfc4:	00000000 	nop
8002bfc8:	0800aff8 	j	8002bfe0 <_ZN8mos_65022mm4page9page_init17hc6872372700e52f1E+0x18c>
8002bfcc:	00000000 	nop
8002bfd0:	3c018105 	lui	at,0x8105
8002bfd4:	2424f474 	addiu	a0,at,-2956
8002bfd8:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002bfdc:	00000000 	nop
8002bfe0:	24010001 	li	at,1
            page.p_ref = 1;
8002bfe4:	a7a1004c 	sh	at,76(sp)
        if KSEG0.add(i * PAGE_SIZE) >= kernel_end {
8002bfe8:	0800b009 	j	8002c024 <_ZN8mos_65022mm4page9page_init17hc6872372700e52f1E+0x1d0>
8002bfec:	00000000 	nop
8002bff0:	27a40024 	addiu	a0,sp,36
            page_list.push(page.p_link.clone());
8002bff4:	0c00ad19 	jal	8002b464 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hdb38b7a74b019393E>
8002bff8:	00000000 	nop
8002bffc:	afa20010 	sw	v0,16(sp)
8002c000:	27a40044 	addiu	a0,sp,68
8002c004:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
8002c008:	00000000 	nop
8002c00c:	8fa40010 	lw	a0,16(sp)
8002c010:	00402825 	move	a1,v0
8002c014:	0c00d591 	jal	80035644 <_ZN8mos_65024util16DoubleLinkedList4push17hb8d2053113fa2c42E>
8002c018:	00000000 	nop
8002c01c:	0800b009 	j	8002c024 <_ZN8mos_65022mm4page9page_init17hc6872372700e52f1E+0x1d0>
8002c020:	00000000 	nop
8002c024:	27a40020 	addiu	a0,sp,32
        pages.push(page);
8002c028:	0c00acee 	jal	8002b3b8 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4853a853a285a493E>
8002c02c:	00000000 	nop
8002c030:	00402025 	move	a0,v0
8002c034:	8fa1004c 	lw	at,76(sp)
8002c038:	afa1005c 	sw	at,92(sp)
8002c03c:	8fa10048 	lw	at,72(sp)
8002c040:	afa10058 	sw	at,88(sp)
8002c044:	8fa10044 	lw	at,68(sp)
8002c048:	afa10054 	sw	at,84(sp)
8002c04c:	27a50054 	addiu	a1,sp,84
8002c050:	0c00a2d7 	jal	80028b5c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h7103cdc97f8d785cE>
8002c054:	00000000 	nop
8002c058:	0800afbe 	j	8002bef8 <_ZN8mos_65022mm4page9page_init17hc6872372700e52f1E+0xa4>
8002c05c:	00000000 	nop

8002c060 <_ZN8mos_65022mm4page10page_alloc17ha4107379511cc364E>:
#[inline(always)]
pub fn get_page_index_by_kvaddr(kvaddr: VirtAddr) -> Option<PageIndex> {
    kvaddr.sub(KSEG0).raw.checked_div(PAGE_SIZE)
}

pub fn page_alloc() -> Option<(PageIndex, PhysAddr)> {
8002c060:	27bdff68 	addiu	sp,sp,-152
8002c064:	afbf0094 	sw	ra,148(sp)
8002c068:	afa40024 	sw	a0,36(sp)
8002c06c:	afa40028 	sw	a0,40(sp)
    let mut page_list = PAGE_LIST.lock();
8002c070:	3c018105 	lui	at,0x8105
8002c074:	242408b8 	addiu	a0,at,2232
8002c078:	0c00d8d5 	jal	80036354 <_ZN73_$LT$mos_6502..mm..page..PAGE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbb3f532e7bbd7eecE>
8002c07c:	00000000 	nop
8002c080:	00402025 	move	a0,v0
8002c084:	0c00a09c 	jal	80028270 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E>
8002c088:	00000000 	nop
8002c08c:	afa20030 	sw	v0,48(sp)
    let mut pages = PAGES.lock();
8002c090:	3c018105 	lui	at,0x8105
8002c094:	242408b8 	addiu	a0,at,2232
8002c098:	0c00d8c9 	jal	80036324 <_ZN69_$LT$mos_6502..mm..page..PAGES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hac3480edc21cc44bE>
8002c09c:	00000000 	nop
8002c0a0:	00402025 	move	a0,v0
8002c0a4:	0c00a077 	jal	800281dc <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0ef92e8e38bfe963E>
8002c0a8:	00000000 	nop
8002c0ac:	afa20034 	sw	v0,52(sp)
8002c0b0:	27a40030 	addiu	a0,sp,48
    let node = page_list.pop()?;
8002c0b4:	0c00ad19 	jal	8002b464 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hdb38b7a74b019393E>
8002c0b8:	00000000 	nop
8002c0bc:	00402025 	move	a0,v0
8002c0c0:	0c00d758 	jal	80035d60 <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E>
8002c0c4:	00000000 	nop
8002c0c8:	00402025 	move	a0,v0
8002c0cc:	0c00ab16 	jal	8002ac58 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hef932e867b5d3f3dE>
8002c0d0:	00000000 	nop
8002c0d4:	afa2003c 	sw	v0,60(sp)
8002c0d8:	8fa1003c 	lw	at,60(sp)
8002c0dc:	1020006d 	beqz	at,8002c294 <_ZN8mos_65022mm4page10page_alloc17ha4107379511cc364E+0x234>
8002c0e0:	00000000 	nop
8002c0e4:	0800b03b 	j	8002c0ec <_ZN8mos_65022mm4page10page_alloc17ha4107379511cc364E+0x8c>
8002c0e8:	00000000 	nop
8002c0ec:	8fa1003c 	lw	at,60(sp)
8002c0f0:	afa1005c 	sw	at,92(sp)
8002c0f4:	afa10038 	sw	at,56(sp)
8002c0f8:	27a10038 	addiu	at,sp,56
8002c0fc:	afa10080 	sw	at,128(sp)
8002c100:	afa10084 	sw	at,132(sp)
8002c104:	afa10088 	sw	at,136(sp)
        unsafe { &*self.as_ptr().cast_const() }
8002c108:	8fa10038 	lw	at,56(sp)
8002c10c:	afa10090 	sw	at,144(sp)
8002c110:	afa1008c 	sw	at,140(sp)
        &self.inner().value
8002c114:	24240008 	addiu	a0,at,8
    let idx = node.borrow().idx;
8002c118:	3c018105 	lui	at,0x8105
8002c11c:	2425f484 	addiu	a1,at,-2940
8002c120:	0c008fb1 	jal	80023ec4 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h31d02da70f533516E>
8002c124:	00000000 	nop
8002c128:	afa20040 	sw	v0,64(sp)
8002c12c:	afa30044 	sw	v1,68(sp)
8002c130:	27a40040 	addiu	a0,sp,64
8002c134:	afa40014 	sw	a0,20(sp)
8002c138:	0c00a9a2 	jal	8002a688 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h12904436a148d5f6E>
8002c13c:	00000000 	nop
8002c140:	8fa40014 	lw	a0,20(sp)
8002c144:	8c410008 	lw	at,8(v0)
8002c148:	afa10018 	sw	at,24(sp)
8002c14c:	afa10060 	sw	at,96(sp)
8002c150:	0c008c03 	jal	8002300c <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d4641e92d4d8a17E>
8002c154:	00000000 	nop
8002c158:	27a40034 	addiu	a0,sp,52
    let page = &mut pages[idx];
8002c15c:	0c00acee 	jal	8002b3b8 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4853a853a285a493E>
8002c160:	00000000 	nop
8002c164:	8fa50018 	lw	a1,24(sp)
8002c168:	00402025 	move	a0,v0
8002c16c:	3c018105 	lui	at,0x8105
8002c170:	2426f494 	addiu	a2,at,-2924
8002c174:	0c00ad20 	jal	8002b480 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h7acaf1c5a51d7e6cE>
8002c178:	00000000 	nop
8002c17c:	00400825 	move	at,v0
8002c180:	afa1001c 	sw	at,28(sp)
8002c184:	afa20064 	sw	v0,100(sp)
    unsafe {
        ptr::write_bytes::<u8>(pa_to_kva(page.p_pa).into(), 0, PAGE_SIZE);
8002c188:	8c410004 	lw	at,4(v0)
8002c18c:	afa1004c 	sw	at,76(sp)
8002c190:	8fa1004c 	lw	at,76(sp)
8002c194:	afa10068 	sw	at,104(sp)
8002c198:	8fa40068 	lw	a0,104(sp)
8002c19c:	0c00af44 	jal	8002bd10 <_ZN8mos_65022mm4addr9pa_to_kva17h2cbb9d7cedc35302E>
8002c1a0:	00000000 	nop
8002c1a4:	afa2006c 	sw	v0,108(sp)
8002c1a8:	8fa1006c 	lw	at,108(sp)
8002c1ac:	afa10048 	sw	at,72(sp)
8002c1b0:	8fa10048 	lw	at,72(sp)
8002c1b4:	afa10070 	sw	at,112(sp)
8002c1b8:	8fa40070 	lw	a0,112(sp)
8002c1bc:	3c018105 	lui	at,0x8105
8002c1c0:	2425f4a4 	addiu	a1,at,-2908
8002c1c4:	0c00a16d 	jal	800285b4 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6e0fe35b4ecbef46E>
8002c1c8:	00000000 	nop
8002c1cc:	00400825 	move	at,v0
8002c1d0:	afa10020 	sw	at,32(sp)
8002c1d4:	afa20074 	sw	v0,116(sp)
8002c1d8:	24010000 	li	at,0
8002c1dc:	a3a0007b 	sb	zero,123(sp)
8002c1e0:	24011000 	li	at,4096
8002c1e4:	afa1007c 	sw	at,124(sp)
        ub_checks::assert_unsafe_precondition!(
8002c1e8:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
8002c1ec:	00000000 	nop
8002c1f0:	10400009 	beqz	v0,8002c218 <_ZN8mos_65022mm4page10page_alloc17ha4107379511cc364E+0x1b8>
8002c1f4:	00000000 	nop
8002c1f8:	0800b080 	j	8002c200 <_ZN8mos_65022mm4page10page_alloc17ha4107379511cc364E+0x1a0>
8002c1fc:	00000000 	nop
8002c200:	8fa40020 	lw	a0,32(sp)
8002c204:	24050001 	li	a1,1
8002c208:	0c0081db 	jal	8002076c <_ZN4core10intrinsics11write_bytes18precondition_check17h0cfe4849b5991fcdE>
8002c20c:	00000000 	nop
8002c210:	0800b086 	j	8002c218 <_ZN8mos_65022mm4page10page_alloc17ha4107379511cc364E+0x1b8>
8002c214:	00000000 	nop
        write_bytes(dst, val, count)
8002c218:	8fa40020 	lw	a0,32(sp)
8002c21c:	24050000 	li	a1,0
8002c220:	24061000 	li	a2,4096
8002c224:	0c00dba8 	jal	80036ea0 <memset>
8002c228:	00000000 	nop
8002c22c:	8fa4001c 	lw	a0,28(sp)
8002c230:	8fa30018 	lw	v1,24(sp)
8002c234:	8fa20024 	lw	v0,36(sp)
8002c238:	24010001 	li	at,1
    }
    page.p_ref = 1;
8002c23c:	a4810008 	sh	at,8(a0)
    Some((idx, page.p_pa))
8002c240:	8c840004 	lw	a0,4(a0)
8002c244:	afa40058 	sw	a0,88(sp)
8002c248:	afa30050 	sw	v1,80(sp)
8002c24c:	8fa30058 	lw	v1,88(sp)
8002c250:	afa30054 	sw	v1,84(sp)
8002c254:	8fa30054 	lw	v1,84(sp)
8002c258:	ac430008 	sw	v1,8(v0)
8002c25c:	8fa30050 	lw	v1,80(sp)
8002c260:	ac430004 	sw	v1,4(v0)
8002c264:	ac410000 	sw	at,0(v0)
8002c268:	27a40038 	addiu	a0,sp,56
}
8002c26c:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
8002c270:	00000000 	nop
8002c274:	27a40034 	addiu	a0,sp,52
8002c278:	0c0086ba 	jal	80021ae8 <_ZN4core3ptr101drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17h9a20e3346397bf3eE>
8002c27c:	00000000 	nop
8002c280:	27a40030 	addiu	a0,sp,48
8002c284:	0c008cff 	jal	800233fc <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17hde8d744f358f0af3E>
8002c288:	00000000 	nop
8002c28c:	0800b0b0 	j	8002c2c0 <_ZN8mos_65022mm4page10page_alloc17ha4107379511cc364E+0x260>
8002c290:	00000000 	nop
    let node = page_list.pop()?;
8002c294:	8fa40024 	lw	a0,36(sp)
8002c298:	0c00ad50 	jal	8002b540 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17hbf51053ba657039bE>
8002c29c:	00000000 	nop
8002c2a0:	27a40034 	addiu	a0,sp,52
}
8002c2a4:	0c0086ba 	jal	80021ae8 <_ZN4core3ptr101drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17h9a20e3346397bf3eE>
8002c2a8:	00000000 	nop
8002c2ac:	27a40030 	addiu	a0,sp,48
8002c2b0:	0c008cff 	jal	800233fc <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17hde8d744f358f0af3E>
8002c2b4:	00000000 	nop
8002c2b8:	0800b0b0 	j	8002c2c0 <_ZN8mos_65022mm4page10page_alloc17ha4107379511cc364E+0x260>
8002c2bc:	00000000 	nop
8002c2c0:	8fa20028 	lw	v0,40(sp)
8002c2c4:	8fbf0094 	lw	ra,148(sp)
8002c2c8:	27bd0098 	addiu	sp,sp,152
8002c2cc:	03e00008 	jr	ra
8002c2d0:	00000000 	nop

8002c2d4 <_ZN8mos_65022mm4page11page_incref17hd9cc7671dca686beE>:

pub fn page_incref(pno: PageIndex) {
8002c2d4:	27bdffd0 	addiu	sp,sp,-48
8002c2d8:	afbf002c 	sw	ra,44(sp)
8002c2dc:	afa40014 	sw	a0,20(sp)
8002c2e0:	afa40024 	sw	a0,36(sp)
    let mut locked_pages = PAGES.lock();
8002c2e4:	3c018105 	lui	at,0x8105
8002c2e8:	242408b8 	addiu	a0,at,2232
8002c2ec:	0c00d8c9 	jal	80036324 <_ZN69_$LT$mos_6502..mm..page..PAGES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hac3480edc21cc44bE>
8002c2f0:	00000000 	nop
8002c2f4:	00402025 	move	a0,v0
8002c2f8:	0c00a077 	jal	800281dc <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0ef92e8e38bfe963E>
8002c2fc:	00000000 	nop
8002c300:	afa20020 	sw	v0,32(sp)
8002c304:	27a40020 	addiu	a0,sp,32
    let page = &mut locked_pages[pno];
8002c308:	0c00acee 	jal	8002b3b8 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4853a853a285a493E>
8002c30c:	00000000 	nop
8002c310:	8fa50014 	lw	a1,20(sp)
8002c314:	00402025 	move	a0,v0
8002c318:	3c018105 	lui	at,0x8105
8002c31c:	2426f4b4 	addiu	a2,at,-2892
8002c320:	0c00ad20 	jal	8002b480 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h7acaf1c5a51d7e6cE>
8002c324:	00000000 	nop
8002c328:	00400825 	move	at,v0
8002c32c:	afa10018 	sw	at,24(sp)
8002c330:	afa20028 	sw	v0,40(sp)
    page.p_ref += 1;
8002c334:	94410008 	lhu	at,8(v0)
8002c338:	24220001 	addiu	v0,at,1
8002c33c:	afa2001c 	sw	v0,28(sp)
8002c340:	3041ffff 	andi	at,v0,0xffff
8002c344:	1422000d 	bne	at,v0,8002c37c <_ZN8mos_65022mm4page11page_incref17hd9cc7671dca686beE+0xa8>
8002c348:	00000000 	nop
8002c34c:	0800b0d5 	j	8002c354 <_ZN8mos_65022mm4page11page_incref17hd9cc7671dca686beE+0x80>
8002c350:	00000000 	nop
8002c354:	8fa1001c 	lw	at,28(sp)
8002c358:	8fa20018 	lw	v0,24(sp)
8002c35c:	a4410008 	sh	at,8(v0)
8002c360:	27a40020 	addiu	a0,sp,32
}
8002c364:	0c0086ba 	jal	80021ae8 <_ZN4core3ptr101drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17h9a20e3346397bf3eE>
8002c368:	00000000 	nop
8002c36c:	8fbf002c 	lw	ra,44(sp)
8002c370:	27bd0030 	addiu	sp,sp,48
8002c374:	03e00008 	jr	ra
8002c378:	00000000 	nop
    page.p_ref += 1;
8002c37c:	3c018105 	lui	at,0x8105
8002c380:	2424f4c4 	addiu	a0,at,-2876
8002c384:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002c388:	00000000 	nop

8002c38c <_ZN8mos_65022mm4page11page_decref17h261540825c48b6f2E>:

pub fn page_decref(p: PageIndex) {
8002c38c:	27bdffc8 	addiu	sp,sp,-56
8002c390:	afbf0034 	sw	ra,52(sp)
8002c394:	afa4001c 	sw	a0,28(sp)
8002c398:	afa40030 	sw	a0,48(sp)
    let mut pages = PAGES.lock();
8002c39c:	3c018105 	lui	at,0x8105
8002c3a0:	242408b8 	addiu	a0,at,2232
8002c3a4:	0c00d8c9 	jal	80036324 <_ZN69_$LT$mos_6502..mm..page..PAGES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hac3480edc21cc44bE>
8002c3a8:	00000000 	nop
8002c3ac:	00402025 	move	a0,v0
8002c3b0:	0c00a077 	jal	800281dc <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0ef92e8e38bfe963E>
8002c3b4:	00000000 	nop
8002c3b8:	afa20028 	sw	v0,40(sp)
8002c3bc:	27a40028 	addiu	a0,sp,40
    pages[p].p_ref -= 1;
8002c3c0:	0c00acee 	jal	8002b3b8 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4853a853a285a493E>
8002c3c4:	00000000 	nop
8002c3c8:	8fa5001c 	lw	a1,28(sp)
8002c3cc:	00402025 	move	a0,v0
8002c3d0:	3c018105 	lui	at,0x8105
8002c3d4:	2426f4d4 	addiu	a2,at,-2860
8002c3d8:	0c00ad20 	jal	8002b480 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h7acaf1c5a51d7e6cE>
8002c3dc:	00000000 	nop
8002c3e0:	00400825 	move	at,v0
8002c3e4:	afa10020 	sw	at,32(sp)
8002c3e8:	94410008 	lhu	at,8(v0)
8002c3ec:	2422ffff 	addiu	v0,at,-1
8002c3f0:	afa20024 	sw	v0,36(sp)
8002c3f4:	10200014 	beqz	at,8002c448 <_ZN8mos_65022mm4page11page_decref17h261540825c48b6f2E+0xbc>
8002c3f8:	00000000 	nop
8002c3fc:	0800b101 	j	8002c404 <_ZN8mos_65022mm4page11page_decref17h261540825c48b6f2E+0x78>
8002c400:	00000000 	nop
8002c404:	8fa10024 	lw	at,36(sp)
8002c408:	8fa20020 	lw	v0,32(sp)
8002c40c:	a4410008 	sh	at,8(v0)
8002c410:	27a40028 	addiu	a0,sp,40
    if pages[p].p_ref == 0 {
8002c414:	0c00ac6b 	jal	8002b1ac <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h249085e6f7b5f4d4E>
8002c418:	00000000 	nop
8002c41c:	8fa5001c 	lw	a1,28(sp)
8002c420:	00402025 	move	a0,v0
8002c424:	3c018105 	lui	at,0x8105
8002c428:	2426f4f4 	addiu	a2,at,-2828
8002c42c:	0c00acb7 	jal	8002b2dc <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17h1efe2423da4fad43E>
8002c430:	00000000 	nop
8002c434:	94410008 	lhu	at,8(v0)
8002c438:	10200007 	beqz	at,8002c458 <_ZN8mos_65022mm4page11page_decref17h261540825c48b6f2E+0xcc>
8002c43c:	00000000 	nop
8002c440:	0800b138 	j	8002c4e0 <_ZN8mos_65022mm4page11page_decref17h261540825c48b6f2E+0x154>
8002c444:	00000000 	nop
    pages[p].p_ref -= 1;
8002c448:	3c018105 	lui	at,0x8105
8002c44c:	2424f4e4 	addiu	a0,at,-2844
8002c450:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002c454:	00000000 	nop
        let mut page_list = PAGE_LIST.lock();
8002c458:	3c018105 	lui	at,0x8105
8002c45c:	242408b8 	addiu	a0,at,2232
8002c460:	0c00d8d5 	jal	80036354 <_ZN73_$LT$mos_6502..mm..page..PAGE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbb3f532e7bbd7eecE>
8002c464:	00000000 	nop
8002c468:	00402025 	move	a0,v0
8002c46c:	0c00a09c 	jal	80028270 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E>
8002c470:	00000000 	nop
8002c474:	afa2002c 	sw	v0,44(sp)
8002c478:	27a4002c 	addiu	a0,sp,44
8002c47c:	afa40018 	sw	a0,24(sp)
        page_list.push(pages[p].p_link.clone());
8002c480:	0c00ad19 	jal	8002b464 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hdb38b7a74b019393E>
8002c484:	00000000 	nop
8002c488:	afa20014 	sw	v0,20(sp)
8002c48c:	27a40028 	addiu	a0,sp,40
8002c490:	0c00ac6b 	jal	8002b1ac <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h249085e6f7b5f4d4E>
8002c494:	00000000 	nop
8002c498:	8fa5001c 	lw	a1,28(sp)
8002c49c:	00402025 	move	a0,v0
8002c4a0:	3c018105 	lui	at,0x8105
8002c4a4:	2426f504 	addiu	a2,at,-2812
8002c4a8:	0c00acb7 	jal	8002b2dc <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17h1efe2423da4fad43E>
8002c4ac:	00000000 	nop
8002c4b0:	00402025 	move	a0,v0
8002c4b4:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
8002c4b8:	00000000 	nop
8002c4bc:	8fa40014 	lw	a0,20(sp)
8002c4c0:	00402825 	move	a1,v0
8002c4c4:	0c00d591 	jal	80035644 <_ZN8mos_65024util16DoubleLinkedList4push17hb8d2053113fa2c42E>
8002c4c8:	00000000 	nop
8002c4cc:	8fa40018 	lw	a0,24(sp)
    }
8002c4d0:	0c008cff 	jal	800233fc <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17hde8d744f358f0af3E>
8002c4d4:	00000000 	nop
8002c4d8:	0800b138 	j	8002c4e0 <_ZN8mos_65022mm4page11page_decref17h261540825c48b6f2E+0x154>
8002c4dc:	00000000 	nop
8002c4e0:	27a40028 	addiu	a0,sp,40
}
8002c4e4:	0c0086ba 	jal	80021ae8 <_ZN4core3ptr101drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17h9a20e3346397bf3eE>
8002c4e8:	00000000 	nop
8002c4ec:	8fbf0034 	lw	ra,52(sp)
8002c4f0:	27bd0038 	addiu	sp,sp,56
8002c4f4:	03e00008 	jr	ra
8002c4f8:	00000000 	nop

8002c4fc <_ZN118_$LT$mos_6502..mm..pgtable..PgtableEntry$u20$as$u20$core..ops..bit..BitAnd$LT$mos_6502..mm..pgtable..Permssion$GT$$GT$6bitand17h9439d41fda5ad670E>:
    pub raw_entry: usize,
}

impl BitAnd<Permssion> for PgtableEntry {
    type Output = bool;
    fn bitand(self, rhs: Permssion) -> bool {
8002c4fc:	27bdffd8 	addiu	sp,sp,-40
8002c500:	afbf0024 	sw	ra,36(sp)
8002c504:	afa4001c 	sw	a0,28(sp)
8002c508:	8fa1001c 	lw	at,28(sp)
8002c50c:	afa10018 	sw	at,24(sp)
8002c510:	afa50020 	sw	a1,32(sp)
8002c514:	27a40018 	addiu	a0,sp,24
        self.get() & rhs.bits() != 0
8002c518:	0c00b1b0 	jal	8002c6c0 <_ZN8mos_65022mm7pgtable12PgtableEntry3get17h3aa0ce291a4c8eabE>
8002c51c:	00000000 	nop
8002c520:	afa20014 	sw	v0,20(sp)
8002c524:	27a40020 	addiu	a0,sp,32
8002c528:	0c00da57 	jal	8003695c <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17h9f25740f31cdf213E>
8002c52c:	00000000 	nop
8002c530:	00400825 	move	at,v0
8002c534:	8fa20014 	lw	v0,20(sp)
8002c538:	00410824 	and	at,v0,at
8002c53c:	0001102b 	sltu	v0,zero,at
    }
8002c540:	8fbf0024 	lw	ra,36(sp)
8002c544:	27bd0028 	addiu	sp,sp,40
8002c548:	03e00008 	jr	ra
8002c54c:	00000000 	nop

8002c550 <_ZN85_$LT$mos_6502..mm..pgtable..Permssion$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17hd92ecfd8b39a57f5E>:
        value.bits()
    }
}

impl From<usize> for Permssion {
    fn from(value: usize) -> Self {
8002c550:	27bdffe8 	addiu	sp,sp,-24
8002c554:	afbf0014 	sw	ra,20(sp)
8002c558:	afa40010 	sw	a0,16(sp)
        Permssion::from_bits_truncate(value)
8002c55c:	0c00da60 	jal	80036980 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$18from_bits_truncate17hd28644c07229a8bfE>
8002c560:	00000000 	nop
    }
8002c564:	8fbf0014 	lw	ra,20(sp)
8002c568:	27bd0018 	addiu	sp,sp,24
8002c56c:	03e00008 	jr	ra
8002c570:	00000000 	nop

8002c574 <_ZN8mos_65022mm7pgtable12PgtableEntry3new17h5934cf04df7cce53E>:
}

impl PgtableEntry {
    pub const fn new() -> Self {
8002c574:	27bdfff8 	addiu	sp,sp,-8
        PgtableEntry { raw_entry: 0 }
8002c578:	afa00004 	sw	zero,4(sp)
    }
8002c57c:	8fa20004 	lw	v0,4(sp)
8002c580:	27bd0008 	addiu	sp,sp,8
8002c584:	03e00008 	jr	ra
8002c588:	00000000 	nop

8002c58c <_ZN8mos_65022mm7pgtable12PgtableEntry3kva17h0d61192521dc2eccE>:
    pub fn kva(&self) -> VirtAddr {
8002c58c:	27bdffd8 	addiu	sp,sp,-40
8002c590:	afbf0024 	sw	ra,36(sp)
8002c594:	afa4001c 	sw	a0,28(sp)
        VirtAddr::from((self.raw_entry & 0xfffff000) + KSEG0.raw)
8002c598:	8c810000 	lw	at,0(a0)
8002c59c:	2402f000 	li	v0,-4096
8002c5a0:	00221024 	and	v0,at,v0
8002c5a4:	3c018105 	lui	at,0x8105
8002c5a8:	8c21f154 	lw	at,-3756(at)
8002c5ac:	afa10018 	sw	at,24(sp)
8002c5b0:	8fa10018 	lw	at,24(sp)
8002c5b4:	00410821 	addu	at,v0,at
8002c5b8:	afa10010 	sw	at,16(sp)
8002c5bc:	0022082b 	sltu	at,at,v0
8002c5c0:	1420000e 	bnez	at,8002c5fc <_ZN8mos_65022mm7pgtable12PgtableEntry3kva17h0d61192521dc2eccE+0x70>
8002c5c4:	00000000 	nop
8002c5c8:	0800b174 	j	8002c5d0 <_ZN8mos_65022mm7pgtable12PgtableEntry3kva17h0d61192521dc2eccE+0x44>
8002c5cc:	00000000 	nop
8002c5d0:	8fa40010 	lw	a0,16(sp)
8002c5d4:	0c00af03 	jal	8002bc0c <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h3e418a96ab495ffdE>
8002c5d8:	00000000 	nop
8002c5dc:	afa20020 	sw	v0,32(sp)
8002c5e0:	8fa10020 	lw	at,32(sp)
8002c5e4:	afa10014 	sw	at,20(sp)
    }
8002c5e8:	8fa20014 	lw	v0,20(sp)
8002c5ec:	8fbf0024 	lw	ra,36(sp)
8002c5f0:	27bd0028 	addiu	sp,sp,40
8002c5f4:	03e00008 	jr	ra
8002c5f8:	00000000 	nop
        VirtAddr::from((self.raw_entry & 0xfffff000) + KSEG0.raw)
8002c5fc:	3c018105 	lui	at,0x8105
8002c600:	2424f528 	addiu	a0,at,-2776
8002c604:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002c608:	00000000 	nop

8002c60c <_ZN8mos_65022mm7pgtable12PgtableEntry3set17he1a2392412c78be3E>:

    pub fn set(&mut self, pa: PhysAddr, flags: &Permssion) {
8002c60c:	27bdffc0 	addiu	sp,sp,-64
8002c610:	afbf003c 	sw	ra,60(sp)
8002c614:	afa60014 	sw	a2,20(sp)
8002c618:	afa40018 	sw	a0,24(sp)
8002c61c:	afa50020 	sw	a1,32(sp)
8002c620:	8fa10020 	lw	at,32(sp)
8002c624:	afa1001c 	sw	at,28(sp)
8002c628:	afa40024 	sw	a0,36(sp)
8002c62c:	afa60028 	sw	a2,40(sp)
        assert!(pa % PAGE_SIZE == 0);
8002c630:	8fa1001c 	lw	at,28(sp)
8002c634:	afa1002c 	sw	at,44(sp)
8002c638:	8fa1002c 	lw	at,44(sp)
8002c63c:	afa10030 	sw	at,48(sp)
8002c640:	8fa40030 	lw	a0,48(sp)
8002c644:	24051000 	li	a1,4096
8002c648:	0c00ae7a 	jal	8002b9e8 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17h58289ad5784f53c4E>
8002c64c:	00000000 	nop
8002c650:	14400014 	bnez	v0,8002c6a4 <_ZN8mos_65022mm7pgtable12PgtableEntry3set17he1a2392412c78be3E+0x98>
8002c654:	00000000 	nop
8002c658:	0800b198 	j	8002c660 <_ZN8mos_65022mm7pgtable12PgtableEntry3set17he1a2392412c78be3E+0x54>
8002c65c:	00000000 	nop
        self.raw_entry = pa | flags.bits();
8002c660:	8fa40014 	lw	a0,20(sp)
8002c664:	0c00da57 	jal	8003695c <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17h9f25740f31cdf213E>
8002c668:	00000000 	nop
8002c66c:	00402825 	move	a1,v0
8002c670:	8fa1001c 	lw	at,28(sp)
8002c674:	afa10034 	sw	at,52(sp)
8002c678:	8fa10034 	lw	at,52(sp)
8002c67c:	afa10038 	sw	at,56(sp)
8002c680:	8fa40038 	lw	a0,56(sp)
8002c684:	0c00ae70 	jal	8002b9c0 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..bit..BitOr$LT$usize$GT$$GT$5bitor17hc0b66c4d128ae0eeE>
8002c688:	00000000 	nop
8002c68c:	8fa10018 	lw	at,24(sp)
8002c690:	ac220000 	sw	v0,0(at)
    }
8002c694:	8fbf003c 	lw	ra,60(sp)
8002c698:	27bd0040 	addiu	sp,sp,64
8002c69c:	03e00008 	jr	ra
8002c6a0:	00000000 	nop
        assert!(pa % PAGE_SIZE == 0);
8002c6a4:	3c018105 	lui	at,0x8105
8002c6a8:	2424f538 	addiu	a0,at,-2760
8002c6ac:	3c018105 	lui	at,0x8105
8002c6b0:	2426f560 	addiu	a2,at,-2720
8002c6b4:	24050025 	li	a1,37
8002c6b8:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
8002c6bc:	00000000 	nop

8002c6c0 <_ZN8mos_65022mm7pgtable12PgtableEntry3get17h3aa0ce291a4c8eabE>:

    pub fn get(&self) -> usize {
8002c6c0:	27bdfff8 	addiu	sp,sp,-8
8002c6c4:	afa40004 	sw	a0,4(sp)
        self.raw_entry
8002c6c8:	8c820000 	lw	v0,0(a0)
8002c6cc:	27bd0008 	addiu	sp,sp,8
    }
8002c6d0:	03e00008 	jr	ra
8002c6d4:	00000000 	nop

8002c6d8 <_ZN8mos_65022mm7pgtable7Pgtable3new17h89f38b321e07b39cE>:
}

impl Pgtable {
    pub const fn new() -> Self {
8002c6d8:	27bdefd0 	addiu	sp,sp,-4144
8002c6dc:	afbf102c 	sw	ra,4140(sp)
8002c6e0:	afa40018 	sw	a0,24(sp)
8002c6e4:	afa4001c 	sw	a0,28(sp)
        Pgtable {
            entries: [PgtableEntry::new(); 1024],
8002c6e8:	0c00b15d 	jal	8002c574 <_ZN8mos_65022mm7pgtable12PgtableEntry3new17h5934cf04df7cce53E>
8002c6ec:	00000000 	nop
8002c6f0:	afa21028 	sw	v0,4136(sp)
8002c6f4:	8fa11028 	lw	at,4136(sp)
8002c6f8:	afa11024 	sw	at,4132(sp)
8002c6fc:	24010000 	li	at,0
8002c700:	afa10020 	sw	at,32(sp)
8002c704:	0800b1c3 	j	8002c70c <_ZN8mos_65022mm7pgtable7Pgtable3new17h89f38b321e07b39cE+0x34>
8002c708:	00000000 	nop
8002c70c:	8fa10020 	lw	at,32(sp)
8002c710:	afa10014 	sw	at,20(sp)
8002c714:	2c210400 	sltiu	at,at,1024
8002c718:	1020000d 	beqz	at,8002c750 <_ZN8mos_65022mm7pgtable7Pgtable3new17h89f38b321e07b39cE+0x78>
8002c71c:	00000000 	nop
8002c720:	0800b1ca 	j	8002c728 <_ZN8mos_65022mm7pgtable7Pgtable3new17h89f38b321e07b39cE+0x50>
8002c724:	00000000 	nop
8002c728:	8fa10014 	lw	at,20(sp)
8002c72c:	00011880 	sll	v1,at,0x2
8002c730:	27a20024 	addiu	v0,sp,36
8002c734:	00431821 	addu	v1,v0,v1
8002c738:	8fa21024 	lw	v0,4132(sp)
8002c73c:	ac620000 	sw	v0,0(v1)
8002c740:	24210001 	addiu	at,at,1
8002c744:	afa10020 	sw	at,32(sp)
8002c748:	0800b1c3 	j	8002c70c <_ZN8mos_65022mm7pgtable7Pgtable3new17h89f38b321e07b39cE+0x34>
8002c74c:	00000000 	nop
        Pgtable {
8002c750:	8fa40018 	lw	a0,24(sp)
8002c754:	27a50024 	addiu	a1,sp,36
8002c758:	24061000 	li	a2,4096
8002c75c:	0c00db4c 	jal	80036d30 <memcpy>
8002c760:	00000000 	nop
        }
    }
8002c764:	8fa2001c 	lw	v0,28(sp)
8002c768:	8fbf102c 	lw	ra,4140(sp)
8002c76c:	27bd1030 	addiu	sp,sp,4144
8002c770:	03e00008 	jr	ra
8002c774:	00000000 	nop

8002c778 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E>:
    pub fn map_va_to_pa(
8002c778:	27bdfe70 	addiu	sp,sp,-400
8002c77c:	afbf018c 	sw	ra,396(sp)
8002c780:	afa70058 	sw	a3,88(sp)
8002c784:	afa4005c 	sw	a0,92(sp)
8002c788:	8fa201a8 	lw	v0,424(sp)
8002c78c:	afa20060 	sw	v0,96(sp)
8002c790:	8fa101a4 	lw	at,420(sp)
8002c794:	afa10064 	sw	at,100(sp)
8002c798:	8fa101a0 	lw	at,416(sp)
8002c79c:	afa5006c 	sw	a1,108(sp)
8002c7a0:	8fa3006c 	lw	v1,108(sp)
8002c7a4:	afa30068 	sw	v1,104(sp)
8002c7a8:	afa60074 	sw	a2,116(sp)
8002c7ac:	8fa30074 	lw	v1,116(sp)
8002c7b0:	afa30070 	sw	v1,112(sp)
8002c7b4:	afa400f4 	sw	a0,244(sp)
8002c7b8:	afa700f8 	sw	a3,248(sp)
8002c7bc:	a3a200ff 	sb	v0,255(sp)
        asid: usize,
        count: usize,
        flags: &Permssion,
        reset: bool,
    ) -> Result<(), &'static str> {
        for i in 0..count {
8002c7c0:	afa00080 	sw	zero,128(sp)
8002c7c4:	afa10084 	sw	at,132(sp)
8002c7c8:	8fa40080 	lw	a0,128(sp)
8002c7cc:	8fa50084 	lw	a1,132(sp)
8002c7d0:	0c012cc7 	jal	8004b31c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
8002c7d4:	00000000 	nop
8002c7d8:	afa20088 	sw	v0,136(sp)
8002c7dc:	afa3008c 	sw	v1,140(sp)
8002c7e0:	0800b1fa 	j	8002c7e8 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x70>
8002c7e4:	00000000 	nop
8002c7e8:	27a40088 	addiu	a0,sp,136
8002c7ec:	0c012cbe 	jal	8004b2f8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
8002c7f0:	00000000 	nop
8002c7f4:	afa20090 	sw	v0,144(sp)
8002c7f8:	afa30094 	sw	v1,148(sp)
8002c7fc:	8fa10090 	lw	at,144(sp)
8002c800:	14200006 	bnez	at,8002c81c <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0xa4>
8002c804:	00000000 	nop
8002c808:	0800b204 	j	8002c810 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x98>
8002c80c:	00000000 	nop
                tpa.align_down(PAGE_SIZE),
                &(*flags | Permssion::PTE_V | Permssion::PTE_C_CACHEABLE),
            );
            tlb_invalidate(tva.into(), asid);
        }
        Ok(())
8002c810:	afa00078 	sw	zero,120(sp)
    }
8002c814:	0800b22d 	j	8002c8b4 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x13c>
8002c818:	00000000 	nop
        for i in 0..count {
8002c81c:	8fa10094 	lw	at,148(sp)
8002c820:	afa10100 	sw	at,256(sp)
            let tva = va.add(i << PAGE_SHIFT);
8002c824:	00012b00 	sll	a1,at,0xc
8002c828:	afa5004c 	sw	a1,76(sp)
8002c82c:	8fa10068 	lw	at,104(sp)
8002c830:	afa10104 	sw	at,260(sp)
8002c834:	8fa10104 	lw	at,260(sp)
8002c838:	afa10108 	sw	at,264(sp)
8002c83c:	8fa40108 	lw	a0,264(sp)
8002c840:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
8002c844:	00000000 	nop
8002c848:	8fa5004c 	lw	a1,76(sp)
8002c84c:	afa2010c 	sw	v0,268(sp)
8002c850:	8fa1010c 	lw	at,268(sp)
8002c854:	afa10098 	sw	at,152(sp)
            let tpa = pa.add(i << PAGE_SHIFT);
8002c858:	8fa10070 	lw	at,112(sp)
8002c85c:	afa10110 	sw	at,272(sp)
8002c860:	8fa10110 	lw	at,272(sp)
8002c864:	afa10114 	sw	at,276(sp)
8002c868:	8fa40114 	lw	a0,276(sp)
8002c86c:	0c00aeaa 	jal	8002baa8 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17h799630bd0af6cd94E>
8002c870:	00000000 	nop
8002c874:	afa20118 	sw	v0,280(sp)
8002c878:	8fa10118 	lw	at,280(sp)
8002c87c:	afa1009c 	sw	at,156(sp)
8002c880:	27a10098 	addiu	at,sp,152
8002c884:	afa10168 	sw	at,360(sp)
        self.raw >> PAGE_SHIFT
8002c888:	8fa10098 	lw	at,152(sp)
8002c88c:	00011302 	srl	v0,at,0xc
8002c890:	afa20050 	sw	v0,80(sp)
            let vpn = tva.get_vpn();
8002c894:	afa2011c 	sw	v0,284(sp)
            if !(self.entries[vpn >> 10] & Permssion::PTE_V) {
8002c898:	00010d82 	srl	at,at,0x16
8002c89c:	afa10054 	sw	at,84(sp)
8002c8a0:	2c210400 	sltiu	at,at,1024
8002c8a4:	14200009 	bnez	at,8002c8cc <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x154>
8002c8a8:	00000000 	nop
8002c8ac:	0800b243 	j	8002c90c <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x194>
8002c8b0:	00000000 	nop
    }
8002c8b4:	8fa20078 	lw	v0,120(sp)
8002c8b8:	8fa3007c 	lw	v1,124(sp)
8002c8bc:	8fbf018c 	lw	ra,396(sp)
8002c8c0:	27bd0190 	addiu	sp,sp,400
8002c8c4:	03e00008 	jr	ra
8002c8c8:	00000000 	nop
            if !(self.entries[vpn >> 10] & Permssion::PTE_V) {
8002c8cc:	8fa1005c 	lw	at,92(sp)
8002c8d0:	8fa20054 	lw	v0,84(sp)
8002c8d4:	00021080 	sll	v0,v0,0x2
8002c8d8:	00220821 	addu	at,at,v0
8002c8dc:	8c210000 	lw	at,0(at)
8002c8e0:	afa100a0 	sw	at,160(sp)
8002c8e4:	8fa100a0 	lw	at,160(sp)
8002c8e8:	afa10120 	sw	at,288(sp)
8002c8ec:	8fa40120 	lw	a0,288(sp)
8002c8f0:	24050080 	li	a1,128
8002c8f4:	0c00b13f 	jal	8002c4fc <_ZN118_$LT$mos_6502..mm..pgtable..PgtableEntry$u20$as$u20$core..ops..bit..BitAnd$LT$mos_6502..mm..pgtable..Permssion$GT$$GT$6bitand17h9439d41fda5ad670E>
8002c8f8:	00000000 	nop
8002c8fc:	1440001e 	bnez	v0,8002c978 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x200>
8002c900:	00000000 	nop
8002c904:	0800b249 	j	8002c924 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x1ac>
8002c908:	00000000 	nop
8002c90c:	8fa40054 	lw	a0,84(sp)
8002c910:	3c018105 	lui	at,0x8105
8002c914:	2426f570 	addiu	a2,at,-2704
8002c918:	24050400 	li	a1,1024
8002c91c:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002c920:	00000000 	nop
8002c924:	27a400c0 	addiu	a0,sp,192
8002c928:	afa40044 	sw	a0,68(sp)
                let (_, page_pa) = page_alloc().ok_or("No more pages")?;
8002c92c:	0c00b018 	jal	8002c060 <_ZN8mos_65022mm4page10page_alloc17ha4107379511cc364E>
8002c930:	00000000 	nop
8002c934:	8fa50044 	lw	a1,68(sp)
8002c938:	3c018105 	lui	at,0x8105
8002c93c:	2426f580 	addiu	a2,at,-2688
8002c940:	27a400b4 	addiu	a0,sp,180
8002c944:	afa40048 	sw	a0,72(sp)
8002c948:	2407000d 	li	a3,13
8002c94c:	0c009659 	jal	80025964 <_ZN4core6option15Option$LT$T$GT$5ok_or17h20655cc0ff61952eE>
8002c950:	00000000 	nop
8002c954:	8fa50048 	lw	a1,72(sp)
8002c958:	27a400a8 	addiu	a0,sp,168
8002c95c:	0c00ac87 	jal	8002b21c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hee1c49d3edbc34e7E>
8002c960:	00000000 	nop
8002c964:	8fa100a8 	lw	at,168(sp)
8002c968:	1020000b 	beqz	at,8002c998 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x220>
8002c96c:	00000000 	nop
8002c970:	0800b274 	j	8002c9d0 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x258>
8002c974:	00000000 	nop
                unsafe { &mut *(self.entries[vpn >> 10].kva().raw as *mut Pgtable) };
8002c978:	8fa10050 	lw	at,80(sp)
8002c97c:	00010a82 	srl	at,at,0xa
8002c980:	afa10040 	sw	at,64(sp)
8002c984:	2c210400 	sltiu	at,at,1024
8002c988:	1420003d 	bnez	at,8002ca80 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x308>
8002c98c:	00000000 	nop
8002c990:	0800b2b4 	j	8002cad0 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x358>
8002c994:	00000000 	nop
                let (_, page_pa) = page_alloc().ok_or("No more pages")?;
8002c998:	8fa10050 	lw	at,80(sp)
8002c99c:	8fa200b0 	lw	v0,176(sp)
8002c9a0:	afa200d0 	sw	v0,208(sp)
8002c9a4:	8fa200ac 	lw	v0,172(sp)
8002c9a8:	afa200cc 	sw	v0,204(sp)
8002c9ac:	8fa200d0 	lw	v0,208(sp)
8002c9b0:	afa200a4 	sw	v0,164(sp)
                self.entries[vpn >> 10].set(
8002c9b4:	00010a82 	srl	at,at,0xa
8002c9b8:	afa1003c 	sw	at,60(sp)
8002c9bc:	2c210400 	sltiu	at,at,1024
8002c9c0:	1420000f 	bnez	at,8002ca00 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x288>
8002c9c4:	00000000 	nop
8002c9c8:	0800b29a 	j	8002ca68 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x2f0>
8002c9cc:	00000000 	nop
                let (_, page_pa) = page_alloc().ok_or("No more pages")?;
8002c9d0:	8fa400ac 	lw	a0,172(sp)
8002c9d4:	8fa500b0 	lw	a1,176(sp)
8002c9d8:	afa4012c 	sw	a0,300(sp)
8002c9dc:	afa50130 	sw	a1,304(sp)
8002c9e0:	3c018105 	lui	at,0x8105
8002c9e4:	2426f5a0 	addiu	a2,at,-2656
8002c9e8:	0c008082 	jal	80020208 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h12656e8f5824d73cE>
8002c9ec:	00000000 	nop
8002c9f0:	afa20078 	sw	v0,120(sp)
8002c9f4:	afa3007c 	sw	v1,124(sp)
8002c9f8:	0800b22d 	j	8002c8b4 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x13c>
8002c9fc:	00000000 	nop
                self.entries[vpn >> 10].set(
8002ca00:	8fa10064 	lw	at,100(sp)
8002ca04:	8fa2005c 	lw	v0,92(sp)
8002ca08:	8fa3003c 	lw	v1,60(sp)
8002ca0c:	00031880 	sll	v1,v1,0x2
8002ca10:	00431021 	addu	v0,v0,v1
8002ca14:	afa20038 	sw	v0,56(sp)
                    &(*flags | Permssion::PTE_V | Permssion::PTE_C_CACHEABLE),
8002ca18:	8c240000 	lw	a0,0(at)
8002ca1c:	24050080 	li	a1,128
8002ca20:	0c00da77 	jal	800369dc <_ZN8mos_65022mm7pgtable1_84_$LT$impl$u20$core..ops..bit..BitOr$u20$for$u20$mos_6502..mm..pgtable..Permssion$GT$5bitor17h0a6b0ebea1abfc81E>
8002ca24:	00000000 	nop
8002ca28:	00402025 	move	a0,v0
8002ca2c:	24050600 	li	a1,1536
8002ca30:	0c00da77 	jal	800369dc <_ZN8mos_65022mm7pgtable1_84_$LT$impl$u20$core..ops..bit..BitOr$u20$for$u20$mos_6502..mm..pgtable..Permssion$GT$5bitor17h0a6b0ebea1abfc81E>
8002ca34:	00000000 	nop
8002ca38:	8fa40038 	lw	a0,56(sp)
8002ca3c:	afa200d4 	sw	v0,212(sp)
                self.entries[vpn >> 10].set(
8002ca40:	8fa100a4 	lw	at,164(sp)
8002ca44:	afa10124 	sw	at,292(sp)
8002ca48:	8fa10124 	lw	at,292(sp)
8002ca4c:	afa10128 	sw	at,296(sp)
8002ca50:	8fa50128 	lw	a1,296(sp)
8002ca54:	27a600d4 	addiu	a2,sp,212
8002ca58:	0c00b183 	jal	8002c60c <_ZN8mos_65022mm7pgtable12PgtableEntry3set17he1a2392412c78be3E>
8002ca5c:	00000000 	nop
8002ca60:	0800b25e 	j	8002c978 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x200>
8002ca64:	00000000 	nop
8002ca68:	8fa4003c 	lw	a0,60(sp)
8002ca6c:	3c018105 	lui	at,0x8105
8002ca70:	2426f590 	addiu	a2,at,-2672
8002ca74:	24050400 	li	a1,1024
8002ca78:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002ca7c:	00000000 	nop
                unsafe { &mut *(self.entries[vpn >> 10].kva().raw as *mut Pgtable) };
8002ca80:	8fa1005c 	lw	at,92(sp)
8002ca84:	8fa20040 	lw	v0,64(sp)
8002ca88:	00021080 	sll	v0,v0,0x2
8002ca8c:	00222021 	addu	a0,at,v0
8002ca90:	0c00b163 	jal	8002c58c <_ZN8mos_65022mm7pgtable12PgtableEntry3kva17h0d61192521dc2eccE>
8002ca94:	00000000 	nop
8002ca98:	8fa10050 	lw	at,80(sp)
8002ca9c:	afa20134 	sw	v0,308(sp)
8002caa0:	8fa20134 	lw	v0,308(sp)
8002caa4:	afa200d8 	sw	v0,216(sp)
8002caa8:	8fa200d8 	lw	v0,216(sp)
8002caac:	afa20030 	sw	v0,48(sp)
8002cab0:	afa20138 	sw	v0,312(sp)
            if pgd.entries[vpn & 0x3ff] & Permssion::PTE_V {
8002cab4:	302103ff 	andi	at,at,0x3ff
8002cab8:	afa10034 	sw	at,52(sp)
8002cabc:	2c210400 	sltiu	at,at,1024
8002cac0:	14200009 	bnez	at,8002cae8 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x370>
8002cac4:	00000000 	nop
8002cac8:	0800b2ca 	j	8002cb28 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x3b0>
8002cacc:	00000000 	nop
                unsafe { &mut *(self.entries[vpn >> 10].kva().raw as *mut Pgtable) };
8002cad0:	8fa40040 	lw	a0,64(sp)
8002cad4:	3c018105 	lui	at,0x8105
8002cad8:	2426f5b0 	addiu	a2,at,-2640
8002cadc:	24050400 	li	a1,1024
8002cae0:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002cae4:	00000000 	nop
            if pgd.entries[vpn & 0x3ff] & Permssion::PTE_V {
8002cae8:	8fa10030 	lw	at,48(sp)
8002caec:	8fa20034 	lw	v0,52(sp)
8002caf0:	00021080 	sll	v0,v0,0x2
8002caf4:	00220821 	addu	at,at,v0
8002caf8:	8c210000 	lw	at,0(at)
8002cafc:	afa100dc 	sw	at,220(sp)
8002cb00:	8fa100dc 	lw	at,220(sp)
8002cb04:	afa1013c 	sw	at,316(sp)
8002cb08:	8fa4013c 	lw	a0,316(sp)
8002cb0c:	24050080 	li	a1,128
8002cb10:	0c00b13f 	jal	8002c4fc <_ZN118_$LT$mos_6502..mm..pgtable..PgtableEntry$u20$as$u20$core..ops..bit..BitAnd$LT$mos_6502..mm..pgtable..Permssion$GT$$GT$6bitand17h9439d41fda5ad670E>
8002cb14:	00000000 	nop
8002cb18:	14400011 	bnez	v0,8002cb60 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x3e8>
8002cb1c:	00000000 	nop
8002cb20:	0800b2d0 	j	8002cb40 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x3c8>
8002cb24:	00000000 	nop
8002cb28:	8fa40034 	lw	a0,52(sp)
8002cb2c:	3c018105 	lui	at,0x8105
8002cb30:	2426f5c0 	addiu	a2,at,-2624
8002cb34:	24050400 	li	a1,1024
8002cb38:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002cb3c:	00000000 	nop
            pgd.entries[vpn & 0x3ff].set(
8002cb40:	8fa10050 	lw	at,80(sp)
8002cb44:	302103ff 	andi	at,at,0x3ff
8002cb48:	afa1002c 	sw	at,44(sp)
8002cb4c:	2c210400 	sltiu	at,at,1024
8002cb50:	1420006b 	bnez	at,8002cd00 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x588>
8002cb54:	00000000 	nop
8002cb58:	0800b379 	j	8002cde4 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x66c>
8002cb5c:	00000000 	nop
                if reset {
8002cb60:	8fa10060 	lw	at,96(sp)
8002cb64:	30210001 	andi	at,at,0x1
8002cb68:	1420000a 	bnez	at,8002cb94 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x41c>
8002cb6c:	00000000 	nop
8002cb70:	0800b2de 	j	8002cb78 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x400>
8002cb74:	00000000 	nop
                    return Err("Page already mapped");
8002cb78:	3c018105 	lui	at,0x8105
8002cb7c:	2421f5d0 	addiu	at,at,-2608
8002cb80:	afa10078 	sw	at,120(sp)
8002cb84:	24010013 	li	at,19
8002cb88:	afa1007c 	sw	at,124(sp)
8002cb8c:	0800b22d 	j	8002c8b4 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x13c>
8002cb90:	00000000 	nop
                        get_page_index_by_kvaddr(pgd.entries[vpn & 0x3ff].kva())
8002cb94:	8fa10050 	lw	at,80(sp)
8002cb98:	302103ff 	andi	at,at,0x3ff
8002cb9c:	afa10028 	sw	at,40(sp)
8002cba0:	2c210400 	sltiu	at,at,1024
8002cba4:	10200050 	beqz	at,8002cce8 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x570>
8002cba8:	00000000 	nop
8002cbac:	0800b2ed 	j	8002cbb4 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x43c>
8002cbb0:	00000000 	nop
8002cbb4:	8fa10030 	lw	at,48(sp)
8002cbb8:	8fa20028 	lw	v0,40(sp)
8002cbbc:	00021080 	sll	v0,v0,0x2
8002cbc0:	00222021 	addu	a0,at,v0
8002cbc4:	0c00b163 	jal	8002c58c <_ZN8mos_65022mm7pgtable12PgtableEntry3kva17h0d61192521dc2eccE>
8002cbc8:	00000000 	nop
8002cbcc:	afa20140 	sw	v0,320(sp)
8002cbd0:	8fa10140 	lw	at,320(sp)
8002cbd4:	afa100e0 	sw	at,224(sp)
8002cbd8:	8fa100e0 	lw	at,224(sp)
8002cbdc:	afa10144 	sw	at,324(sp)
8002cbe0:	8fa10144 	lw	at,324(sp)
8002cbe4:	afa10170 	sw	at,368(sp)
8002cbe8:	8fa10170 	lw	at,368(sp)
8002cbec:	afa1016c 	sw	at,364(sp)
    kvaddr.sub(KSEG0).raw.checked_div(PAGE_SIZE)
8002cbf0:	8fa1016c 	lw	at,364(sp)
8002cbf4:	afa10178 	sw	at,376(sp)
8002cbf8:	8fa10178 	lw	at,376(sp)
8002cbfc:	afa1017c 	sw	at,380(sp)
8002cc00:	8fa4017c 	lw	a0,380(sp)
8002cc04:	3c018105 	lui	at,0x8105
8002cc08:	8c21f154 	lw	at,-3756(at)
8002cc0c:	afa10180 	sw	at,384(sp)
8002cc10:	8fa10180 	lw	at,384(sp)
8002cc14:	afa10184 	sw	at,388(sp)
8002cc18:	8fa50184 	lw	a1,388(sp)
8002cc1c:	0c00ae56 	jal	8002b958 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Sub$GT$3sub17hbee2a7e528d5ebe9E>
8002cc20:	00000000 	nop
8002cc24:	afa20188 	sw	v0,392(sp)
8002cc28:	8fa10188 	lw	at,392(sp)
8002cc2c:	afa10174 	sw	at,372(sp)
8002cc30:	8fa40174 	lw	a0,372(sp)
8002cc34:	24051000 	li	a1,4096
8002cc38:	0c008502 	jal	80021408 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h473bdee4731d0bddE>
8002cc3c:	00000000 	nop
8002cc40:	00402025 	move	a0,v0
8002cc44:	00602825 	move	a1,v1
8002cc48:	3c018105 	lui	at,0x8105
8002cc4c:	2421f618 	addiu	at,at,-2536
8002cc50:	03a01025 	move	v0,sp
8002cc54:	ac410010 	sw	at,16(v0)
8002cc58:	3c018105 	lui	at,0x8105
8002cc5c:	2426f5f4 	addiu	a2,at,-2572
8002cc60:	24070023 	li	a3,35
8002cc64:	0c00e744 	jal	80039d10 <_ZN4core6option15Option$LT$T$GT$6expect17h537867a9d3760452E>
8002cc68:	00000000 	nop
8002cc6c:	00402025 	move	a0,v0
                    page_decref(
8002cc70:	0c00b0e3 	jal	8002c38c <_ZN8mos_65022mm4page11page_decref17h261540825c48b6f2E>
8002cc74:	00000000 	nop
                    tlb_invalidate(tva.into(), asid);
8002cc78:	8fa10098 	lw	at,152(sp)
8002cc7c:	afa100e4 	sw	at,228(sp)
8002cc80:	8fa100e4 	lw	at,228(sp)
8002cc84:	afa10148 	sw	at,328(sp)
8002cc88:	8fa40148 	lw	a0,328(sp)
8002cc8c:	3c018105 	lui	at,0x8105
8002cc90:	2425f628 	addiu	a1,at,-2520
8002cc94:	0c00a19e 	jal	80028678 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hd126ae0f23650c4dE>
8002cc98:	00000000 	nop
8002cc9c:	8fa10058 	lw	at,88(sp)
8002cca0:	afa20024 	sw	v0,36(sp)
8002cca4:	afa20160 	sw	v0,352(sp)
8002cca8:	afa10164 	sw	at,356(sp)
8002ccac:	2404000c 	li	a0,12
8002ccb0:	24050000 	li	a1,0
}

#[inline(always)]
pub fn tlb_invalidate(va: usize, asid: usize) {
    unsafe {
        tlb_out((va & !gen_mask(PAGE_SHIFT, 0)) | (asid & (NASID - 1)));
8002ccb4:	0c00e2fc 	jal	80038bf0 <_ZN6mips323tlb8gen_mask17h8ecb12b4ecadd0edE>
8002ccb8:	00000000 	nop
8002ccbc:	8fa10024 	lw	at,36(sp)
8002ccc0:	00401825 	move	v1,v0
8002ccc4:	8fa20058 	lw	v0,88(sp)
8002ccc8:	00601827 	nor	v1,v1,zero
8002cccc:	00230824 	and	at,at,v1
8002ccd0:	304200ff 	andi	v0,v0,0xff
8002ccd4:	00222025 	or	a0,at,v0
8002ccd8:	0c00e2ec 	jal	80038bb0 <tlb_out>
8002ccdc:	00000000 	nop
8002cce0:	0800b2d0 	j	8002cb40 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x3c8>
8002cce4:	00000000 	nop
                        get_page_index_by_kvaddr(pgd.entries[vpn & 0x3ff].kva())
8002cce8:	8fa40028 	lw	a0,40(sp)
8002ccec:	3c018105 	lui	at,0x8105
8002ccf0:	2426f5e4 	addiu	a2,at,-2588
8002ccf4:	24050400 	li	a1,1024
8002ccf8:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002ccfc:	00000000 	nop
            pgd.entries[vpn & 0x3ff].set(
8002cd00:	8fa10030 	lw	at,48(sp)
8002cd04:	8fa2002c 	lw	v0,44(sp)
8002cd08:	00021080 	sll	v0,v0,0x2
8002cd0c:	00220821 	addu	at,at,v0
8002cd10:	afa1001c 	sw	at,28(sp)
8002cd14:	27a4009c 	addiu	a0,sp,156
8002cd18:	24051000 	li	a1,4096
                tpa.align_down(PAGE_SIZE),
8002cd1c:	0c00aeeb 	jal	8002bbac <_ZN8mos_65022mm4addr8PhysAddr10align_down17hc2ad02b55f9469b2E>
8002cd20:	00000000 	nop
8002cd24:	8fa10064 	lw	at,100(sp)
8002cd28:	afa2014c 	sw	v0,332(sp)
8002cd2c:	8fa2014c 	lw	v0,332(sp)
8002cd30:	afa200e8 	sw	v0,232(sp)
                &(*flags | Permssion::PTE_V | Permssion::PTE_C_CACHEABLE),
8002cd34:	8c240000 	lw	a0,0(at)
8002cd38:	24050080 	li	a1,128
8002cd3c:	0c00da77 	jal	800369dc <_ZN8mos_65022mm7pgtable1_84_$LT$impl$u20$core..ops..bit..BitOr$u20$for$u20$mos_6502..mm..pgtable..Permssion$GT$5bitor17h0a6b0ebea1abfc81E>
8002cd40:	00000000 	nop
8002cd44:	00402025 	move	a0,v0
8002cd48:	24050600 	li	a1,1536
8002cd4c:	0c00da77 	jal	800369dc <_ZN8mos_65022mm7pgtable1_84_$LT$impl$u20$core..ops..bit..BitOr$u20$for$u20$mos_6502..mm..pgtable..Permssion$GT$5bitor17h0a6b0ebea1abfc81E>
8002cd50:	00000000 	nop
8002cd54:	8fa4001c 	lw	a0,28(sp)
8002cd58:	afa200ec 	sw	v0,236(sp)
            pgd.entries[vpn & 0x3ff].set(
8002cd5c:	8fa100e8 	lw	at,232(sp)
8002cd60:	afa10150 	sw	at,336(sp)
8002cd64:	8fa50150 	lw	a1,336(sp)
8002cd68:	27a600ec 	addiu	a2,sp,236
8002cd6c:	0c00b183 	jal	8002c60c <_ZN8mos_65022mm7pgtable12PgtableEntry3set17he1a2392412c78be3E>
8002cd70:	00000000 	nop
            tlb_invalidate(tva.into(), asid);
8002cd74:	8fa10098 	lw	at,152(sp)
8002cd78:	afa100f0 	sw	at,240(sp)
8002cd7c:	8fa100f0 	lw	at,240(sp)
8002cd80:	afa10154 	sw	at,340(sp)
8002cd84:	8fa40154 	lw	a0,340(sp)
8002cd88:	3c018105 	lui	at,0x8105
8002cd8c:	2425f648 	addiu	a1,at,-2488
8002cd90:	0c00a19e 	jal	80028678 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hd126ae0f23650c4dE>
8002cd94:	00000000 	nop
8002cd98:	8fa10058 	lw	at,88(sp)
8002cd9c:	afa20020 	sw	v0,32(sp)
8002cda0:	afa20158 	sw	v0,344(sp)
8002cda4:	afa1015c 	sw	at,348(sp)
8002cda8:	2404000c 	li	a0,12
8002cdac:	24050000 	li	a1,0
8002cdb0:	0c00e2fc 	jal	80038bf0 <_ZN6mips323tlb8gen_mask17h8ecb12b4ecadd0edE>
8002cdb4:	00000000 	nop
8002cdb8:	8fa10020 	lw	at,32(sp)
8002cdbc:	00401825 	move	v1,v0
8002cdc0:	8fa20058 	lw	v0,88(sp)
8002cdc4:	00601827 	nor	v1,v1,zero
8002cdc8:	00230824 	and	at,at,v1
8002cdcc:	304200ff 	andi	v0,v0,0xff
8002cdd0:	00222025 	or	a0,at,v0
8002cdd4:	0c00e2ec 	jal	80038bb0 <tlb_out>
8002cdd8:	00000000 	nop
8002cddc:	0800b1fa 	j	8002c7e8 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E+0x70>
8002cde0:	00000000 	nop
            pgd.entries[vpn & 0x3ff].set(
8002cde4:	8fa4002c 	lw	a0,44(sp)
8002cde8:	3c018105 	lui	at,0x8105
8002cdec:	2426f638 	addiu	a2,at,-2504
8002cdf0:	24050400 	li	a1,1024
8002cdf4:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002cdf8:	00000000 	nop

8002cdfc <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE>:
    pub fn unmap_va(&mut self, va: VirtAddr, asid: usize) -> Result<(), &'static str> {
8002cdfc:	27bdff28 	addiu	sp,sp,-216
8002ce00:	afbf00d4 	sw	ra,212(sp)
8002ce04:	afa60038 	sw	a2,56(sp)
8002ce08:	afa4003c 	sw	a0,60(sp)
8002ce0c:	afa5004c 	sw	a1,76(sp)
8002ce10:	8fa1004c 	lw	at,76(sp)
8002ce14:	afa10048 	sw	at,72(sp)
8002ce18:	afa40074 	sw	a0,116(sp)
8002ce1c:	afa60078 	sw	a2,120(sp)
8002ce20:	27a10048 	addiu	at,sp,72
8002ce24:	afa100b0 	sw	at,176(sp)
8002ce28:	8fa10048 	lw	at,72(sp)
8002ce2c:	00011302 	srl	v0,at,0xc
8002ce30:	afa20040 	sw	v0,64(sp)
        let vpn = va.get_vpn();
8002ce34:	afa2007c 	sw	v0,124(sp)
        // self.entries[vpn].set(0, &Permssion::empty());
        if !(self.entries[vpn >> 10] & Permssion::PTE_V) {
8002ce38:	00010d82 	srl	at,at,0x16
8002ce3c:	afa10044 	sw	at,68(sp)
8002ce40:	2c210400 	sltiu	at,at,1024
8002ce44:	10200013 	beqz	at,8002ce94 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0x98>
8002ce48:	00000000 	nop
8002ce4c:	0800b395 	j	8002ce54 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0x58>
8002ce50:	00000000 	nop
8002ce54:	8fa1003c 	lw	at,60(sp)
8002ce58:	8fa20044 	lw	v0,68(sp)
8002ce5c:	00021080 	sll	v0,v0,0x2
8002ce60:	00220821 	addu	at,at,v0
8002ce64:	8c210000 	lw	at,0(at)
8002ce68:	afa10058 	sw	at,88(sp)
8002ce6c:	8fa10058 	lw	at,88(sp)
8002ce70:	afa10080 	sw	at,128(sp)
8002ce74:	8fa40080 	lw	a0,128(sp)
8002ce78:	24050080 	li	a1,128
8002ce7c:	0c00b13f 	jal	8002c4fc <_ZN118_$LT$mos_6502..mm..pgtable..PgtableEntry$u20$as$u20$core..ops..bit..BitAnd$LT$mos_6502..mm..pgtable..Permssion$GT$$GT$6bitand17h9439d41fda5ad670E>
8002ce80:	00000000 	nop
8002ce84:	14400010 	bnez	v0,8002cec8 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0xcc>
8002ce88:	00000000 	nop
8002ce8c:	0800b3ab 	j	8002ceac <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0xb0>
8002ce90:	00000000 	nop
8002ce94:	8fa40044 	lw	a0,68(sp)
8002ce98:	3c018105 	lui	at,0x8105
8002ce9c:	2426f658 	addiu	a2,at,-2472
8002cea0:	24050400 	li	a1,1024
8002cea4:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002cea8:	00000000 	nop
            return Err("the page is not mapped");
8002ceac:	3c018105 	lui	at,0x8105
8002ceb0:	2421f668 	addiu	at,at,-2456
8002ceb4:	afa10050 	sw	at,80(sp)
8002ceb8:	24010016 	li	at,22
8002cebc:	afa10054 	sw	at,84(sp)
8002cec0:	0800b3ba 	j	8002cee8 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0xec>
8002cec4:	00000000 	nop
        }
        let pgd: &mut Pgtable =
            unsafe { &mut *(self.entries[vpn >> 10].kva().raw as *mut Pgtable) };
8002cec8:	8fa10040 	lw	at,64(sp)
8002cecc:	00010a82 	srl	at,at,0xa
8002ced0:	afa10034 	sw	at,52(sp)
8002ced4:	2c210400 	sltiu	at,at,1024
8002ced8:	14200009 	bnez	at,8002cf00 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0x104>
8002cedc:	00000000 	nop
8002cee0:	0800b3d4 	j	8002cf50 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0x154>
8002cee4:	00000000 	nop
        let pg = pgd.entries[vpn & 0x3ff].kva();
        page_decref(get_page_index_by_kvaddr(pg).expect("The mapped memory should be a page."));
        pgd.entries[vpn & 0x3ff].set(PhysAddr::new(0), &Permssion::empty());
        tlb_invalidate(va.into(), asid);
        Ok(())
    }
8002cee8:	8fa20050 	lw	v0,80(sp)
8002ceec:	8fa30054 	lw	v1,84(sp)
8002cef0:	8fbf00d4 	lw	ra,212(sp)
8002cef4:	27bd00d8 	addiu	sp,sp,216
8002cef8:	03e00008 	jr	ra
8002cefc:	00000000 	nop
            unsafe { &mut *(self.entries[vpn >> 10].kva().raw as *mut Pgtable) };
8002cf00:	8fa1003c 	lw	at,60(sp)
8002cf04:	8fa20034 	lw	v0,52(sp)
8002cf08:	00021080 	sll	v0,v0,0x2
8002cf0c:	00222021 	addu	a0,at,v0
8002cf10:	0c00b163 	jal	8002c58c <_ZN8mos_65022mm7pgtable12PgtableEntry3kva17h0d61192521dc2eccE>
8002cf14:	00000000 	nop
8002cf18:	8fa10040 	lw	at,64(sp)
8002cf1c:	afa20084 	sw	v0,132(sp)
8002cf20:	8fa20084 	lw	v0,132(sp)
8002cf24:	afa2005c 	sw	v0,92(sp)
8002cf28:	8fa2005c 	lw	v0,92(sp)
8002cf2c:	afa2002c 	sw	v0,44(sp)
8002cf30:	afa20088 	sw	v0,136(sp)
        if !(pgd.entries[vpn & 0x3ff] & Permssion::PTE_V) {
8002cf34:	302103ff 	andi	at,at,0x3ff
8002cf38:	afa10030 	sw	at,48(sp)
8002cf3c:	2c210400 	sltiu	at,at,1024
8002cf40:	14200009 	bnez	at,8002cf68 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0x16c>
8002cf44:	00000000 	nop
8002cf48:	0800b3ea 	j	8002cfa8 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0x1ac>
8002cf4c:	00000000 	nop
            unsafe { &mut *(self.entries[vpn >> 10].kva().raw as *mut Pgtable) };
8002cf50:	8fa40034 	lw	a0,52(sp)
8002cf54:	3c018105 	lui	at,0x8105
8002cf58:	2426f680 	addiu	a2,at,-2432
8002cf5c:	24050400 	li	a1,1024
8002cf60:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002cf64:	00000000 	nop
        if !(pgd.entries[vpn & 0x3ff] & Permssion::PTE_V) {
8002cf68:	8fa1002c 	lw	at,44(sp)
8002cf6c:	8fa20030 	lw	v0,48(sp)
8002cf70:	00021080 	sll	v0,v0,0x2
8002cf74:	00220821 	addu	at,at,v0
8002cf78:	8c210000 	lw	at,0(at)
8002cf7c:	afa10060 	sw	at,96(sp)
8002cf80:	8fa10060 	lw	at,96(sp)
8002cf84:	afa1008c 	sw	at,140(sp)
8002cf88:	8fa4008c 	lw	a0,140(sp)
8002cf8c:	24050080 	li	a1,128
8002cf90:	0c00b13f 	jal	8002c4fc <_ZN118_$LT$mos_6502..mm..pgtable..PgtableEntry$u20$as$u20$core..ops..bit..BitAnd$LT$mos_6502..mm..pgtable..Permssion$GT$$GT$6bitand17h9439d41fda5ad670E>
8002cf94:	00000000 	nop
8002cf98:	14400010 	bnez	v0,8002cfdc <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0x1e0>
8002cf9c:	00000000 	nop
8002cfa0:	0800b3f0 	j	8002cfc0 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0x1c4>
8002cfa4:	00000000 	nop
8002cfa8:	8fa40030 	lw	a0,48(sp)
8002cfac:	3c018105 	lui	at,0x8105
8002cfb0:	2426f690 	addiu	a2,at,-2416
8002cfb4:	24050400 	li	a1,1024
8002cfb8:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002cfbc:	00000000 	nop
            return Err("the page is not mapped");
8002cfc0:	3c018105 	lui	at,0x8105
8002cfc4:	2421f668 	addiu	at,at,-2456
8002cfc8:	afa10050 	sw	at,80(sp)
8002cfcc:	24010016 	li	at,22
8002cfd0:	afa10054 	sw	at,84(sp)
8002cfd4:	0800b3ba 	j	8002cee8 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0xec>
8002cfd8:	00000000 	nop
        let pg = pgd.entries[vpn & 0x3ff].kva();
8002cfdc:	8fa10040 	lw	at,64(sp)
8002cfe0:	302103ff 	andi	at,at,0x3ff
8002cfe4:	afa10028 	sw	at,40(sp)
8002cfe8:	2c210400 	sltiu	at,at,1024
8002cfec:	1020003e 	beqz	at,8002d0e8 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0x2ec>
8002cff0:	00000000 	nop
8002cff4:	0800b3ff 	j	8002cffc <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0x200>
8002cff8:	00000000 	nop
8002cffc:	8fa1002c 	lw	at,44(sp)
8002d000:	8fa20028 	lw	v0,40(sp)
8002d004:	00021080 	sll	v0,v0,0x2
8002d008:	00222021 	addu	a0,at,v0
8002d00c:	0c00b163 	jal	8002c58c <_ZN8mos_65022mm7pgtable12PgtableEntry3kva17h0d61192521dc2eccE>
8002d010:	00000000 	nop
8002d014:	afa20090 	sw	v0,144(sp)
8002d018:	8fa10090 	lw	at,144(sp)
8002d01c:	afa10064 	sw	at,100(sp)
        page_decref(get_page_index_by_kvaddr(pg).expect("The mapped memory should be a page."));
8002d020:	8fa10064 	lw	at,100(sp)
8002d024:	afa10094 	sw	at,148(sp)
8002d028:	8fa10094 	lw	at,148(sp)
8002d02c:	afa10098 	sw	at,152(sp)
8002d030:	8fa10098 	lw	at,152(sp)
8002d034:	afa100b8 	sw	at,184(sp)
8002d038:	8fa100b8 	lw	at,184(sp)
8002d03c:	afa100b4 	sw	at,180(sp)
8002d040:	8fa100b4 	lw	at,180(sp)
8002d044:	afa100c0 	sw	at,192(sp)
8002d048:	8fa100c0 	lw	at,192(sp)
8002d04c:	afa100c4 	sw	at,196(sp)
8002d050:	8fa400c4 	lw	a0,196(sp)
8002d054:	3c018105 	lui	at,0x8105
8002d058:	8c21f154 	lw	at,-3756(at)
8002d05c:	afa100c8 	sw	at,200(sp)
8002d060:	8fa100c8 	lw	at,200(sp)
8002d064:	afa100cc 	sw	at,204(sp)
8002d068:	8fa500cc 	lw	a1,204(sp)
8002d06c:	0c00ae56 	jal	8002b958 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Sub$GT$3sub17hbee2a7e528d5ebe9E>
8002d070:	00000000 	nop
8002d074:	afa200d0 	sw	v0,208(sp)
8002d078:	8fa100d0 	lw	at,208(sp)
8002d07c:	afa100bc 	sw	at,188(sp)
8002d080:	8fa400bc 	lw	a0,188(sp)
8002d084:	24051000 	li	a1,4096
8002d088:	0c008502 	jal	80021408 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h473bdee4731d0bddE>
8002d08c:	00000000 	nop
8002d090:	00402025 	move	a0,v0
8002d094:	00602825 	move	a1,v1
8002d098:	3c018105 	lui	at,0x8105
8002d09c:	2421f6b0 	addiu	at,at,-2384
8002d0a0:	03a01025 	move	v0,sp
8002d0a4:	ac410010 	sw	at,16(v0)
8002d0a8:	3c018105 	lui	at,0x8105
8002d0ac:	2426f5f4 	addiu	a2,at,-2572
8002d0b0:	24070023 	li	a3,35
8002d0b4:	0c00e744 	jal	80039d10 <_ZN4core6option15Option$LT$T$GT$6expect17h537867a9d3760452E>
8002d0b8:	00000000 	nop
8002d0bc:	00402025 	move	a0,v0
8002d0c0:	0c00b0e3 	jal	8002c38c <_ZN8mos_65022mm4page11page_decref17h261540825c48b6f2E>
8002d0c4:	00000000 	nop
8002d0c8:	8fa10040 	lw	at,64(sp)
        pgd.entries[vpn & 0x3ff].set(PhysAddr::new(0), &Permssion::empty());
8002d0cc:	302103ff 	andi	at,at,0x3ff
8002d0d0:	afa10024 	sw	at,36(sp)
8002d0d4:	2c210400 	sltiu	at,at,1024
8002d0d8:	14200009 	bnez	at,8002d100 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0x304>
8002d0dc:	00000000 	nop
8002d0e0:	0800b473 	j	8002d1cc <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0x3d0>
8002d0e4:	00000000 	nop
        let pg = pgd.entries[vpn & 0x3ff].kva();
8002d0e8:	8fa40028 	lw	a0,40(sp)
8002d0ec:	3c018105 	lui	at,0x8105
8002d0f0:	2426f6a0 	addiu	a2,at,-2400
8002d0f4:	24050400 	li	a1,1024
8002d0f8:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002d0fc:	00000000 	nop
        pgd.entries[vpn & 0x3ff].set(PhysAddr::new(0), &Permssion::empty());
8002d100:	8fa1002c 	lw	at,44(sp)
8002d104:	8fa20024 	lw	v0,36(sp)
8002d108:	00021080 	sll	v0,v0,0x2
8002d10c:	00220821 	addu	at,at,v0
8002d110:	afa10018 	sw	at,24(sp)
8002d114:	24040000 	li	a0,0
8002d118:	afa4001c 	sw	a0,28(sp)
8002d11c:	0c00aede 	jal	8002bb78 <_ZN8mos_65022mm4addr8PhysAddr3new17h05e0c95f30bb0c30E>
8002d120:	00000000 	nop
8002d124:	afa2009c 	sw	v0,156(sp)
8002d128:	8fa1009c 	lw	at,156(sp)
8002d12c:	afa10068 	sw	at,104(sp)
8002d130:	0c00da4d 	jal	80036934 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$5empty17h6c50405d2ff863beE>
8002d134:	00000000 	nop
8002d138:	8fa40018 	lw	a0,24(sp)
8002d13c:	afa2006c 	sw	v0,108(sp)
8002d140:	8fa10068 	lw	at,104(sp)
8002d144:	afa100a0 	sw	at,160(sp)
8002d148:	8fa500a0 	lw	a1,160(sp)
8002d14c:	27a6006c 	addiu	a2,sp,108
8002d150:	0c00b183 	jal	8002c60c <_ZN8mos_65022mm7pgtable12PgtableEntry3set17he1a2392412c78be3E>
8002d154:	00000000 	nop
        tlb_invalidate(va.into(), asid);
8002d158:	8fa10048 	lw	at,72(sp)
8002d15c:	afa10070 	sw	at,112(sp)
8002d160:	8fa10070 	lw	at,112(sp)
8002d164:	afa100a4 	sw	at,164(sp)
8002d168:	8fa400a4 	lw	a0,164(sp)
8002d16c:	3c018105 	lui	at,0x8105
8002d170:	2425f6d0 	addiu	a1,at,-2352
8002d174:	0c00a19e 	jal	80028678 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hd126ae0f23650c4dE>
8002d178:	00000000 	nop
8002d17c:	8fa5001c 	lw	a1,28(sp)
8002d180:	8fa10038 	lw	at,56(sp)
8002d184:	afa20020 	sw	v0,32(sp)
8002d188:	afa200a8 	sw	v0,168(sp)
8002d18c:	afa100ac 	sw	at,172(sp)
8002d190:	2404000c 	li	a0,12
8002d194:	0c00e2fc 	jal	80038bf0 <_ZN6mips323tlb8gen_mask17h8ecb12b4ecadd0edE>
8002d198:	00000000 	nop
8002d19c:	8fa10020 	lw	at,32(sp)
8002d1a0:	00401825 	move	v1,v0
8002d1a4:	8fa20038 	lw	v0,56(sp)
8002d1a8:	00601827 	nor	v1,v1,zero
8002d1ac:	00230824 	and	at,at,v1
8002d1b0:	304200ff 	andi	v0,v0,0xff
8002d1b4:	00222025 	or	a0,at,v0
8002d1b8:	0c00e2ec 	jal	80038bb0 <tlb_out>
8002d1bc:	00000000 	nop
        Ok(())
8002d1c0:	afa00050 	sw	zero,80(sp)
    }
8002d1c4:	0800b3ba 	j	8002cee8 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE+0xec>
8002d1c8:	00000000 	nop
        pgd.entries[vpn & 0x3ff].set(PhysAddr::new(0), &Permssion::empty());
8002d1cc:	8fa40024 	lw	a0,36(sp)
8002d1d0:	3c018105 	lui	at,0x8105
8002d1d4:	2426f6c0 	addiu	a2,at,-2368
8002d1d8:	24050400 	li	a1,1024
8002d1dc:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002d1e0:	00000000 	nop

8002d1e4 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE>:

    pub fn va_to_pa(&self, va: VirtAddr) -> Option<(&PgtableEntry, PhysAddr)> {
8002d1e4:	27bdff80 	addiu	sp,sp,-128
8002d1e8:	afbf007c 	sw	ra,124(sp)
8002d1ec:	afa50028 	sw	a1,40(sp)
8002d1f0:	afa4002c 	sw	a0,44(sp)
8002d1f4:	afa40030 	sw	a0,48(sp)
8002d1f8:	afa60040 	sw	a2,64(sp)
8002d1fc:	8fa10040 	lw	at,64(sp)
8002d200:	afa1003c 	sw	at,60(sp)
8002d204:	afa5005c 	sw	a1,92(sp)
8002d208:	27a1003c 	addiu	at,sp,60
8002d20c:	afa10078 	sw	at,120(sp)
8002d210:	8fa1003c 	lw	at,60(sp)
8002d214:	00011302 	srl	v0,at,0xc
8002d218:	afa20034 	sw	v0,52(sp)
        let vpn = va.get_vpn();
8002d21c:	afa20060 	sw	v0,96(sp)
        if !(self.entries[vpn >> 10] & Permssion::PTE_V) {
8002d220:	00010d82 	srl	at,at,0x16
8002d224:	afa10038 	sw	at,56(sp)
8002d228:	2c210400 	sltiu	at,at,1024
8002d22c:	10200013 	beqz	at,8002d27c <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0x98>
8002d230:	00000000 	nop
8002d234:	0800b48f 	j	8002d23c <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0x58>
8002d238:	00000000 	nop
8002d23c:	8fa10028 	lw	at,40(sp)
8002d240:	8fa20038 	lw	v0,56(sp)
8002d244:	00021080 	sll	v0,v0,0x2
8002d248:	00220821 	addu	at,at,v0
8002d24c:	8c210000 	lw	at,0(at)
8002d250:	afa10044 	sw	at,68(sp)
8002d254:	8fa10044 	lw	at,68(sp)
8002d258:	afa10064 	sw	at,100(sp)
8002d25c:	8fa40064 	lw	a0,100(sp)
8002d260:	24050080 	li	a1,128
8002d264:	0c00b13f 	jal	8002c4fc <_ZN118_$LT$mos_6502..mm..pgtable..PgtableEntry$u20$as$u20$core..ops..bit..BitAnd$LT$mos_6502..mm..pgtable..Permssion$GT$$GT$6bitand17h9439d41fda5ad670E>
8002d268:	00000000 	nop
8002d26c:	1440000d 	bnez	v0,8002d2a4 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0xc0>
8002d270:	00000000 	nop
8002d274:	0800b4a5 	j	8002d294 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0xb0>
8002d278:	00000000 	nop
8002d27c:	8fa40038 	lw	a0,56(sp)
8002d280:	3c018105 	lui	at,0x8105
8002d284:	2426f6e0 	addiu	a2,at,-2336
8002d288:	24050400 	li	a1,1024
8002d28c:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002d290:	00000000 	nop
            return None;
8002d294:	8fa1002c 	lw	at,44(sp)
8002d298:	ac200000 	sw	zero,0(at)
8002d29c:	0800b4b1 	j	8002d2c4 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0xe0>
8002d2a0:	00000000 	nop
        }
        let pgd: &Pgtable = unsafe { &*(self.entries[vpn >> 10].kva().raw as *const Pgtable) };
8002d2a4:	8fa10034 	lw	at,52(sp)
8002d2a8:	00010a82 	srl	at,at,0xa
8002d2ac:	afa10024 	sw	at,36(sp)
8002d2b0:	2c210400 	sltiu	at,at,1024
8002d2b4:	14200008 	bnez	at,8002d2d8 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0xf4>
8002d2b8:	00000000 	nop
8002d2bc:	0800b4ca 	j	8002d328 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0x144>
8002d2c0:	00000000 	nop
            PhysAddr::from(
                (pgd.entries[vpn & 0x3ff].raw_entry & !(PAGE_SIZE - 1))
                    | (va.raw & (PAGE_SIZE - 1)),
            ),
        ))
    }
8002d2c4:	8fa20030 	lw	v0,48(sp)
8002d2c8:	8fbf007c 	lw	ra,124(sp)
8002d2cc:	27bd0080 	addiu	sp,sp,128
8002d2d0:	03e00008 	jr	ra
8002d2d4:	00000000 	nop
        let pgd: &Pgtable = unsafe { &*(self.entries[vpn >> 10].kva().raw as *const Pgtable) };
8002d2d8:	8fa10028 	lw	at,40(sp)
8002d2dc:	8fa20024 	lw	v0,36(sp)
8002d2e0:	00021080 	sll	v0,v0,0x2
8002d2e4:	00222021 	addu	a0,at,v0
8002d2e8:	0c00b163 	jal	8002c58c <_ZN8mos_65022mm7pgtable12PgtableEntry3kva17h0d61192521dc2eccE>
8002d2ec:	00000000 	nop
8002d2f0:	8fa10034 	lw	at,52(sp)
8002d2f4:	afa20068 	sw	v0,104(sp)
8002d2f8:	8fa20068 	lw	v0,104(sp)
8002d2fc:	afa20048 	sw	v0,72(sp)
8002d300:	8fa20048 	lw	v0,72(sp)
8002d304:	afa2001c 	sw	v0,28(sp)
8002d308:	afa2006c 	sw	v0,108(sp)
        if !(pgd.entries[vpn & 0x3ff] & Permssion::PTE_V) {
8002d30c:	302103ff 	andi	at,at,0x3ff
8002d310:	afa10020 	sw	at,32(sp)
8002d314:	2c210400 	sltiu	at,at,1024
8002d318:	14200009 	bnez	at,8002d340 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0x15c>
8002d31c:	00000000 	nop
8002d320:	0800b4e0 	j	8002d380 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0x19c>
8002d324:	00000000 	nop
        let pgd: &Pgtable = unsafe { &*(self.entries[vpn >> 10].kva().raw as *const Pgtable) };
8002d328:	8fa40024 	lw	a0,36(sp)
8002d32c:	3c018105 	lui	at,0x8105
8002d330:	2426f6f0 	addiu	a2,at,-2320
8002d334:	24050400 	li	a1,1024
8002d338:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002d33c:	00000000 	nop
        if !(pgd.entries[vpn & 0x3ff] & Permssion::PTE_V) {
8002d340:	8fa1001c 	lw	at,28(sp)
8002d344:	8fa20020 	lw	v0,32(sp)
8002d348:	00021080 	sll	v0,v0,0x2
8002d34c:	00220821 	addu	at,at,v0
8002d350:	8c210000 	lw	at,0(at)
8002d354:	afa1004c 	sw	at,76(sp)
8002d358:	8fa1004c 	lw	at,76(sp)
8002d35c:	afa10070 	sw	at,112(sp)
8002d360:	8fa40070 	lw	a0,112(sp)
8002d364:	24050080 	li	a1,128
8002d368:	0c00b13f 	jal	8002c4fc <_ZN118_$LT$mos_6502..mm..pgtable..PgtableEntry$u20$as$u20$core..ops..bit..BitAnd$LT$mos_6502..mm..pgtable..Permssion$GT$$GT$6bitand17h9439d41fda5ad670E>
8002d36c:	00000000 	nop
8002d370:	1440000d 	bnez	v0,8002d3a8 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0x1c4>
8002d374:	00000000 	nop
8002d378:	0800b4e6 	j	8002d398 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0x1b4>
8002d37c:	00000000 	nop
8002d380:	8fa40020 	lw	a0,32(sp)
8002d384:	3c018105 	lui	at,0x8105
8002d388:	2426f700 	addiu	a2,at,-2304
8002d38c:	24050400 	li	a1,1024
8002d390:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002d394:	00000000 	nop
            return None;
8002d398:	8fa1002c 	lw	at,44(sp)
8002d39c:	ac200000 	sw	zero,0(at)
8002d3a0:	0800b4b1 	j	8002d2c4 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0xe0>
8002d3a4:	00000000 	nop
            &pgd.entries[vpn & 0x3ff],
8002d3a8:	8fa10034 	lw	at,52(sp)
8002d3ac:	302103ff 	andi	at,at,0x3ff
8002d3b0:	afa10018 	sw	at,24(sp)
8002d3b4:	2c210400 	sltiu	at,at,1024
8002d3b8:	10200010 	beqz	at,8002d3fc <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0x218>
8002d3bc:	00000000 	nop
8002d3c0:	0800b4f2 	j	8002d3c8 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0x1e4>
8002d3c4:	00000000 	nop
8002d3c8:	8fa10034 	lw	at,52(sp)
8002d3cc:	8fa2001c 	lw	v0,28(sp)
8002d3d0:	8fa30018 	lw	v1,24(sp)
8002d3d4:	00031880 	sll	v1,v1,0x2
8002d3d8:	00431021 	addu	v0,v0,v1
8002d3dc:	afa20010 	sw	v0,16(sp)
                (pgd.entries[vpn & 0x3ff].raw_entry & !(PAGE_SIZE - 1))
8002d3e0:	302103ff 	andi	at,at,0x3ff
8002d3e4:	afa10014 	sw	at,20(sp)
8002d3e8:	2c210400 	sltiu	at,at,1024
8002d3ec:	14200009 	bnez	at,8002d414 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0x230>
8002d3f0:	00000000 	nop
8002d3f4:	0800b51e 	j	8002d478 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0x294>
8002d3f8:	00000000 	nop
            &pgd.entries[vpn & 0x3ff],
8002d3fc:	8fa40018 	lw	a0,24(sp)
8002d400:	3c018105 	lui	at,0x8105
8002d404:	2426f710 	addiu	a2,at,-2288
8002d408:	24050400 	li	a1,1024
8002d40c:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002d410:	00000000 	nop
                (pgd.entries[vpn & 0x3ff].raw_entry & !(PAGE_SIZE - 1))
8002d414:	8fa1001c 	lw	at,28(sp)
8002d418:	8fa20014 	lw	v0,20(sp)
8002d41c:	00021080 	sll	v0,v0,0x2
8002d420:	00220821 	addu	at,at,v0
8002d424:	8c240000 	lw	a0,0(at)
                    | (va.raw & (PAGE_SIZE - 1)),
8002d428:	8fa1003c 	lw	at,60(sp)
8002d42c:	30210fff 	andi	at,at,0xfff
                (pgd.entries[vpn & 0x3ff].raw_entry & !(PAGE_SIZE - 1))
8002d430:	7c245804 	ins	a0,at,0x0,0xc
            PhysAddr::from(
8002d434:	0c00af0f 	jal	8002bc3c <_ZN81_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h35d26bde8ffa8759E>
8002d438:	00000000 	nop
8002d43c:	8fa10010 	lw	at,16(sp)
8002d440:	00401825 	move	v1,v0
8002d444:	8fa2002c 	lw	v0,44(sp)
8002d448:	afa30074 	sw	v1,116(sp)
8002d44c:	8fa30074 	lw	v1,116(sp)
8002d450:	afa30058 	sw	v1,88(sp)
        Some((
8002d454:	afa10050 	sw	at,80(sp)
8002d458:	8fa10058 	lw	at,88(sp)
8002d45c:	afa10054 	sw	at,84(sp)
8002d460:	8fa10054 	lw	at,84(sp)
8002d464:	ac410004 	sw	at,4(v0)
8002d468:	8fa10050 	lw	at,80(sp)
8002d46c:	ac410000 	sw	at,0(v0)
    }
8002d470:	0800b4b1 	j	8002d2c4 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE+0xe0>
8002d474:	00000000 	nop
                (pgd.entries[vpn & 0x3ff].raw_entry & !(PAGE_SIZE - 1))
8002d478:	8fa40014 	lw	a0,20(sp)
8002d47c:	3c018105 	lui	at,0x8105
8002d480:	2426f720 	addiu	a2,at,-2272
8002d484:	24050400 	li	a1,1024
8002d488:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002d48c:	00000000 	nop

8002d490 <_ZN60_$LT$mos_6502..print..Stdout$u20$as$u20$core..fmt..Write$GT$9write_str17h4c8d431c420dedf3E>:
}

impl fmt::Write for Stdout {
    fn write_str(&mut self, s: &str) -> fmt::Result {
8002d490:	27bdffc0 	addiu	sp,sp,-64
8002d494:	afbf003c 	sw	ra,60(sp)
8002d498:	afa60014 	sw	a2,20(sp)
8002d49c:	00a00825 	move	at,a1
8002d4a0:	8fa50014 	lw	a1,20(sp)
8002d4a4:	afa10018 	sw	at,24(sp)
8002d4a8:	00800825 	move	at,a0
8002d4ac:	8fa40018 	lw	a0,24(sp)
8002d4b0:	afa1002c 	sw	at,44(sp)
8002d4b4:	afa40030 	sw	a0,48(sp)
8002d4b8:	afa50034 	sw	a1,52(sp)
        for c in s.chars() {
8002d4bc:	0c008ea5 	jal	80023a94 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h741606ee0a847912E>
8002d4c0:	00000000 	nop
8002d4c4:	00402025 	move	a0,v0
8002d4c8:	00602825 	move	a1,v1
8002d4cc:	0c00f848 	jal	8003e120 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17heb520da55e95499cE>
8002d4d0:	00000000 	nop
8002d4d4:	afa20020 	sw	v0,32(sp)
8002d4d8:	afa30024 	sw	v1,36(sp)
8002d4dc:	0800b539 	j	8002d4e4 <_ZN60_$LT$mos_6502..print..Stdout$u20$as$u20$core..fmt..Write$GT$9write_str17h4c8d431c420dedf3E+0x54>
8002d4e0:	00000000 	nop
8002d4e4:	27a40020 	addiu	a0,sp,32
8002d4e8:	0c00ace1 	jal	8002b384 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa39a42a7fde5133E>
8002d4ec:	00000000 	nop
8002d4f0:	afa20028 	sw	v0,40(sp)
8002d4f4:	8fa10028 	lw	at,40(sp)
8002d4f8:	3c020011 	lui	v0,0x11
8002d4fc:	1422000b 	bne	at,v0,8002d52c <_ZN60_$LT$mos_6502..print..Stdout$u20$as$u20$core..fmt..Write$GT$9write_str17h4c8d431c420dedf3E+0x9c>
8002d500:	00000000 	nop
8002d504:	0800b543 	j	8002d50c <_ZN60_$LT$mos_6502..print..Stdout$u20$as$u20$core..fmt..Write$GT$9write_str17h4c8d431c420dedf3E+0x7c>
8002d508:	00000000 	nop
8002d50c:	24010000 	li	at,0
            NS16550A.putchar(c as u32);
        }
        Ok(())
8002d510:	a3a0001f 	sb	zero,31(sp)
    }
8002d514:	93a1001f 	lbu	at,31(sp)
8002d518:	30220001 	andi	v0,at,0x1
8002d51c:	8fbf003c 	lw	ra,60(sp)
8002d520:	27bd0040 	addiu	sp,sp,64
8002d524:	03e00008 	jr	ra
8002d528:	00000000 	nop
        for c in s.chars() {
8002d52c:	8fa10028 	lw	at,40(sp)
8002d530:	afa10010 	sw	at,16(sp)
8002d534:	afa10038 	sw	at,56(sp)
            NS16550A.putchar(c as u32);
8002d538:	3c018105 	lui	at,0x8105
8002d53c:	242408b8 	addiu	a0,at,2232
8002d540:	0c00d89f 	jal	8003627c <_ZN73_$LT$mos_6502..dev..uart..NS16550A$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bec3ccd73d84f44E>
8002d544:	00000000 	nop
8002d548:	8fa50010 	lw	a1,16(sp)
8002d54c:	00402025 	move	a0,v0
8002d550:	0c00adce 	jal	8002b738 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17h5172dafc15c6e4dbE>
8002d554:	00000000 	nop
8002d558:	0800b539 	j	8002d4e4 <_ZN60_$LT$mos_6502..print..Stdout$u20$as$u20$core..fmt..Write$GT$9write_str17h4c8d431c420dedf3E+0x54>
8002d55c:	00000000 	nop

8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>:
}

pub fn _print(args: fmt::Arguments) {
8002d560:	27bdffc0 	addiu	sp,sp,-64
8002d564:	afbf003c 	sw	ra,60(sp)
8002d568:	afa40018 	sw	a0,24(sp)
    STDOUT.lock().write_fmt(args).unwrap();
8002d56c:	3c018105 	lui	at,0x8105
8002d570:	24240960 	addiu	a0,at,2400
8002d574:	0c00dad8 	jal	80036b60 <_ZN67_$LT$mos_6502..print..STDOUT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2135b7e7df2b704cE>
8002d578:	00000000 	nop
8002d57c:	00402025 	move	a0,v0
8002d580:	0c00a0c1 	jal	80028304 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h68584dfc84a2f97fE>
8002d584:	00000000 	nop
8002d588:	afa2001c 	sw	v0,28(sp)
8002d58c:	27a4001c 	addiu	a0,sp,28
8002d590:	0c00ad03 	jal	8002b40c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h76ed05f90ab52878E>
8002d594:	00000000 	nop
8002d598:	8fa10018 	lw	at,24(sp)
8002d59c:	00402025 	move	a0,v0
8002d5a0:	8c220014 	lw	v0,20(at)
8002d5a4:	afa20034 	sw	v0,52(sp)
8002d5a8:	8c220010 	lw	v0,16(at)
8002d5ac:	afa20030 	sw	v0,48(sp)
8002d5b0:	8c22000c 	lw	v0,12(at)
8002d5b4:	afa2002c 	sw	v0,44(sp)
8002d5b8:	8c220008 	lw	v0,8(at)
8002d5bc:	afa20028 	sw	v0,40(sp)
8002d5c0:	8c220004 	lw	v0,4(at)
8002d5c4:	afa20024 	sw	v0,36(sp)
8002d5c8:	8c210000 	lw	at,0(at)
8002d5cc:	afa10020 	sw	at,32(sp)
8002d5d0:	27a50020 	addiu	a1,sp,32
8002d5d4:	0c00831e 	jal	80020c78 <_ZN4core3fmt5Write9write_fmt17h0818b1b65ab6b254E>
8002d5d8:	00000000 	nop
8002d5dc:	a3a2003a 	sb	v0,58(sp)
        match self {
8002d5e0:	93a1003a 	lbu	at,58(sp)
8002d5e4:	30210001 	andi	at,at,0x1
8002d5e8:	1020000f 	beqz	at,8002d628 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E+0xc8>
8002d5ec:	00000000 	nop
8002d5f0:	0800b57e 	j	8002d5f8 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E+0x98>
8002d5f4:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002d5f8:	3c018105 	lui	at,0x8105
8002d5fc:	2421f740 	addiu	at,at,-2240
8002d600:	03a01025 	move	v0,sp
8002d604:	ac410010 	sw	at,16(v0)
8002d608:	3c018105 	lui	at,0x8105
8002d60c:	2424ebfc 	addiu	a0,at,-5124
8002d610:	3c018105 	lui	at,0x8105
8002d614:	2427ec28 	addiu	a3,at,-5080
8002d618:	2405002b 	li	a1,43
8002d61c:	27a6003b 	addiu	a2,sp,59
8002d620:	0c00fdba 	jal	8003f6e8 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002d624:	00000000 	nop
8002d628:	27a4001c 	addiu	a0,sp,28
8002d62c:	0c008cbb 	jal	800232ec <_ZN4core3ptr77drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..print..Stdout$GT$$GT$17hbfe0b34b4470ca99E>
8002d630:	00000000 	nop
}
8002d634:	8fbf003c 	lw	ra,60(sp)
8002d638:	27bd0040 	addiu	sp,sp,64
8002d63c:	03e00008 	jr	ra
8002d640:	00000000 	nop

8002d644 <rust_begin_unwind>:
        $crate::print!(concat!($fmt, "\n"), $($arg)*);
    };
}

#[panic_handler]
fn panic(info: &panic::PanicInfo) -> ! {
8002d644:	27bdfef0 	addiu	sp,sp,-272
8002d648:	afbf010c 	sw	ra,268(sp)
8002d64c:	afa40038 	sw	a0,56(sp)
8002d650:	afa400a4 	sw	a0,164(sp)
    if let Some(location) = info.location() {
8002d654:	0c00fb50 	jal	8003ed40 <_ZN4core5panic10panic_info9PanicInfo8location17hd53a7358fb18b234E>
8002d658:	00000000 	nop
8002d65c:	afa2003c 	sw	v0,60(sp)
8002d660:	8fa1003c 	lw	at,60(sp)
8002d664:	1020005a 	beqz	at,8002d7d0 <rust_begin_unwind+0x18c>
8002d668:	00000000 	nop
8002d66c:	0800b59d 	j	8002d674 <rust_begin_unwind+0x30>
8002d670:	00000000 	nop
8002d674:	8fa4003c 	lw	a0,60(sp)
8002d678:	afa40024 	sw	a0,36(sp)
8002d67c:	afa400a8 	sw	a0,168(sp)
        println!(
            "Panic at {}:{} {}",
            location.file(),
8002d680:	0c009536 	jal	800254d8 <_ZN4core5panic8location8Location4file17h7156e14550adb105E>
8002d684:	00000000 	nop
8002d688:	8fa40024 	lw	a0,36(sp)
8002d68c:	afa20070 	sw	v0,112(sp)
8002d690:	afa30074 	sw	v1,116(sp)
8002d694:	27a20070 	addiu	v0,sp,112
8002d698:	afa200b8 	sw	v0,184(sp)
8002d69c:	afa200c4 	sw	v0,196(sp)
8002d6a0:	3c018005 	lui	at,0x8005
8002d6a4:	2421a1fc 	addiu	at,at,-24068
8002d6a8:	afa100c8 	sw	at,200(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002d6ac:	afa200bc 	sw	v0,188(sp)
8002d6b0:	afa100c0 	sw	at,192(sp)
    }
8002d6b4:	8fa100bc 	lw	at,188(sp)
8002d6b8:	afa10028 	sw	at,40(sp)
8002d6bc:	8fa100c0 	lw	at,192(sp)
8002d6c0:	afa1002c 	sw	at,44(sp)
            location.line(),
8002d6c4:	0c00953d 	jal	800254f4 <_ZN4core5panic8location8Location4line17hb2e7d4ed10645cffE>
8002d6c8:	00000000 	nop
8002d6cc:	8fa40038 	lw	a0,56(sp)
8002d6d0:	afa20078 	sw	v0,120(sp)
8002d6d4:	27a20078 	addiu	v0,sp,120
8002d6d8:	afa200b4 	sw	v0,180(sp)
8002d6dc:	afa200f4 	sw	v0,244(sp)
8002d6e0:	3c018005 	lui	at,0x8005
8002d6e4:	2421a050 	addiu	at,at,-24496
8002d6e8:	afa100f8 	sw	at,248(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002d6ec:	afa200ec 	sw	v0,236(sp)
8002d6f0:	afa100f0 	sw	at,240(sp)
    }
8002d6f4:	8fa100ec 	lw	at,236(sp)
8002d6f8:	afa10030 	sw	at,48(sp)
8002d6fc:	8fa100f0 	lw	at,240(sp)
8002d700:	afa10034 	sw	at,52(sp)
            info.message().unwrap()
8002d704:	0c00fb4a 	jal	8003ed28 <_ZN4core5panic10panic_info9PanicInfo7message17h276618d293c608e9E>
8002d708:	00000000 	nop
8002d70c:	afa20104 	sw	v0,260(sp)
        match self {
8002d710:	8fa10104 	lw	at,260(sp)
8002d714:	14200007 	bnez	at,8002d734 <rust_begin_unwind+0xf0>
8002d718:	00000000 	nop
8002d71c:	0800b5c9 	j	8002d724 <rust_begin_unwind+0xe0>
8002d720:	00000000 	nop
            None => unwrap_failed(),
8002d724:	3c018105 	lui	at,0x8105
8002d728:	2424f77c 	addiu	a0,at,-2180
8002d72c:	0c00fab9 	jal	8003eae4 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
8002d730:	00000000 	nop
            Some(val) => val,
8002d734:	8fa30034 	lw	v1,52(sp)
8002d738:	8fa40030 	lw	a0,48(sp)
8002d73c:	8fa5002c 	lw	a1,44(sp)
8002d740:	8fa60028 	lw	a2,40(sp)
8002d744:	8fa10104 	lw	at,260(sp)
8002d748:	afa10108 	sw	at,264(sp)
8002d74c:	afa1007c 	sw	at,124(sp)
8002d750:	27a2007c 	addiu	v0,sp,124
8002d754:	afa200b0 	sw	v0,176(sp)
8002d758:	afa200d4 	sw	v0,212(sp)
8002d75c:	3c018002 	lui	at,0x8002
8002d760:	24210740 	addiu	at,at,1856
8002d764:	afa100d8 	sw	at,216(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002d768:	afa200cc 	sw	v0,204(sp)
8002d76c:	afa100d0 	sw	at,208(sp)
    }
8002d770:	8fa200cc 	lw	v0,204(sp)
8002d774:	8fa100d0 	lw	at,208(sp)
        println!(
8002d778:	afa60058 	sw	a2,88(sp)
8002d77c:	afa5005c 	sw	a1,92(sp)
8002d780:	afa40060 	sw	a0,96(sp)
8002d784:	afa30064 	sw	v1,100(sp)
8002d788:	afa20068 	sw	v0,104(sp)
8002d78c:	afa1006c 	sw	at,108(sp)
8002d790:	03a01025 	move	v0,sp
8002d794:	24010003 	li	at,3
8002d798:	ac410010 	sw	at,16(v0)
8002d79c:	3c018105 	lui	at,0x8105
8002d7a0:	2425f75c 	addiu	a1,at,-2212
8002d7a4:	27a40040 	addiu	a0,sp,64
8002d7a8:	afa40020 	sw	a0,32(sp)
8002d7ac:	24060004 	li	a2,4
8002d7b0:	27a70058 	addiu	a3,sp,88
8002d7b4:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
8002d7b8:	00000000 	nop
8002d7bc:	8fa40020 	lw	a0,32(sp)
8002d7c0:	0c00b558 	jal	8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>
8002d7c4:	00000000 	nop
8002d7c8:	0800b620 	j	8002d880 <rust_begin_unwind+0x23c>
8002d7cc:	00000000 	nop
        );
    } else {
        println!("Panic at unknown location: {}", info.message().unwrap());
8002d7d0:	8fa40038 	lw	a0,56(sp)
8002d7d4:	0c00fb4a 	jal	8003ed28 <_ZN4core5panic10panic_info9PanicInfo7message17h276618d293c608e9E>
8002d7d8:	00000000 	nop
8002d7dc:	afa200fc 	sw	v0,252(sp)
        match self {
8002d7e0:	8fa100fc 	lw	at,252(sp)
8002d7e4:	14200007 	bnez	at,8002d804 <rust_begin_unwind+0x1c0>
8002d7e8:	00000000 	nop
8002d7ec:	0800b5fd 	j	8002d7f4 <rust_begin_unwind+0x1b0>
8002d7f0:	00000000 	nop
            None => unwrap_failed(),
8002d7f4:	3c018105 	lui	at,0x8105
8002d7f8:	2424f7b8 	addiu	a0,at,-2120
8002d7fc:	0c00fab9 	jal	8003eae4 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
8002d800:	00000000 	nop
            Some(val) => val,
8002d804:	8fa100fc 	lw	at,252(sp)
8002d808:	afa10100 	sw	at,256(sp)
8002d80c:	afa100a0 	sw	at,160(sp)
8002d810:	27a200a0 	addiu	v0,sp,160
8002d814:	afa200ac 	sw	v0,172(sp)
8002d818:	afa200e4 	sw	v0,228(sp)
8002d81c:	3c018002 	lui	at,0x8002
8002d820:	24210740 	addiu	at,at,1856
8002d824:	afa100e8 	sw	at,232(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002d828:	afa200dc 	sw	v0,220(sp)
8002d82c:	afa100e0 	sw	at,224(sp)
    }
8002d830:	8fa200dc 	lw	v0,220(sp)
8002d834:	8fa100e0 	lw	at,224(sp)
8002d838:	afa20098 	sw	v0,152(sp)
8002d83c:	afa1009c 	sw	at,156(sp)
8002d840:	03a01025 	move	v0,sp
8002d844:	24010001 	li	at,1
8002d848:	ac410010 	sw	at,16(v0)
8002d84c:	3c018105 	lui	at,0x8105
8002d850:	2425f7a8 	addiu	a1,at,-2136
8002d854:	27a40080 	addiu	a0,sp,128
8002d858:	afa4001c 	sw	a0,28(sp)
8002d85c:	24060002 	li	a2,2
8002d860:	27a70098 	addiu	a3,sp,152
8002d864:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
8002d868:	00000000 	nop
8002d86c:	8fa4001c 	lw	a0,28(sp)
8002d870:	0c00b558 	jal	8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>
8002d874:	00000000 	nop
8002d878:	0800b620 	j	8002d880 <rust_begin_unwind+0x23c>
8002d87c:	00000000 	nop
    }
    dev::halt();
8002d880:	0c00ae34 	jal	8002b8d0 <_ZN8mos_65023dev4halt17hd9ad84541a5942b7E>
8002d884:	00000000 	nop

8002d888 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E>:

extern "C" {
    fn env_pop_tf(tf: &Trapframe, asid: usize);
}

pub fn schedule(y: bool) {
8002d888:	27bdfd98 	addiu	sp,sp,-616
8002d88c:	afbf0264 	sw	ra,612(sp)
8002d890:	00800825 	move	at,a0
8002d894:	afa10068 	sw	at,104(sp)
8002d898:	a3a401cf 	sb	a0,463(sp)

    let mut locked_curenv_idx = CUR_ENV.lock();
8002d89c:	3c018105 	lui	at,0x8105
8002d8a0:	24240960 	addiu	a0,at,2400
8002d8a4:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
8002d8a8:	00000000 	nop
8002d8ac:	00402025 	move	a0,v0
8002d8b0:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
8002d8b4:	00000000 	nop
8002d8b8:	afa20070 	sw	v0,112(sp)
    let mut locked_env_list = ENV_LIST.lock();
8002d8bc:	3c018105 	lui	at,0x8105
8002d8c0:	24240960 	addiu	a0,at,2400
8002d8c4:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
8002d8c8:	00000000 	nop
8002d8cc:	00402025 	move	a0,v0
8002d8d0:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
8002d8d4:	00000000 	nop
8002d8d8:	afa20074 	sw	v0,116(sp)
    let mut locked_env_sched_list = ENV_SCHED_LIST.lock();
8002d8dc:	3c018105 	lui	at,0x8105
8002d8e0:	24240960 	addiu	a0,at,2400
8002d8e4:	0c00db14 	jal	80036c50 <_ZN74_$LT$mos_6502..proc..ENV_SCHED_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb461aaf754aa1f00E>
8002d8e8:	00000000 	nop
8002d8ec:	00402025 	move	a0,v0
8002d8f0:	0c00a09c 	jal	80028270 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E>
8002d8f4:	00000000 	nop
8002d8f8:	afa20078 	sw	v0,120(sp)
8002d8fc:	27a40070 	addiu	a0,sp,112
    let env_run_idx = if let Some(curenv_idx) = &mut *locked_curenv_idx {
8002d900:	0c00acf5 	jal	8002b3d4 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h566805ffd1d6c0b4E>
8002d904:	00000000 	nop
8002d908:	00400825 	move	at,v0
8002d90c:	afa1006c 	sw	at,108(sp)
8002d910:	8c410000 	lw	at,0(v0)
8002d914:	24020001 	li	v0,1
8002d918:	1422001d 	bne	at,v0,8002d990 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x108>
8002d91c:	00000000 	nop
8002d920:	0800b64a 	j	8002d928 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0xa0>
8002d924:	00000000 	nop
8002d928:	8fa1006c 	lw	at,108(sp)
8002d92c:	24210004 	addiu	at,at,4
8002d930:	afa1005c 	sw	at,92(sp)
8002d934:	afa101d0 	sw	at,464(sp)
8002d938:	27a40074 	addiu	a0,sp,116
        let curenv = &mut locked_env_list[*curenv_idx];
8002d93c:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
8002d940:	00000000 	nop
8002d944:	8fa1006c 	lw	at,108(sp)
8002d948:	00402025 	move	a0,v0
8002d94c:	8c250004 	lw	a1,4(at)
8002d950:	3c018105 	lui	at,0x8105
8002d954:	2426f7dc 	addiu	a2,at,-2084
8002d958:	0c00ad35 	jal	8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>
8002d95c:	00000000 	nop
8002d960:	00400825 	move	at,v0
8002d964:	afa10060 	sw	at,96(sp)
8002d968:	afa201d4 	sw	v0,468(sp)
        unsafe {
            curenv.env_tf =
                VirtAddr::from(&stack_end as *const usize as usize - size_of::<Trapframe>())
8002d96c:	3c01810a 	lui	at,0x810a
8002d970:	24216000 	addiu	at,at,24576
8002d974:	2422ff68 	addiu	v0,at,-152
8002d978:	afa20064 	sw	v0,100(sp)
8002d97c:	2c210098 	sltiu	at,at,152
8002d980:	142000a9 	bnez	at,8002dc28 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x3a0>
8002d984:	00000000 	nop
8002d988:	0800b6da 	j	8002db68 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x2e0>
8002d98c:	00000000 	nop
8002d990:	27a40078 	addiu	a0,sp,120
        } else {
            curenv.setup_for_run();
            *curenv_idx
        }
    } else {
        let new_sched_env_idx = locked_env_sched_list
8002d994:	0c00ad19 	jal	8002b464 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hdb38b7a74b019393E>
8002d998:	00000000 	nop
8002d99c:	00402025 	move	a0,v0
8002d9a0:	0c00d758 	jal	80035d60 <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E>
8002d9a4:	00000000 	nop
8002d9a8:	00402025 	move	a0,v0
8002d9ac:	3c018105 	lui	at,0x8105
8002d9b0:	2425f7fc 	addiu	a1,at,-2052
8002d9b4:	3c018105 	lui	at,0x8105
8002d9b8:	2427f83c 	addiu	a3,at,-1988
8002d9bc:	2406000e 	li	a2,14
8002d9c0:	0c009793 	jal	80025e4c <_ZN4core6option15Option$LT$T$GT$6expect17hf6026ccf2c3cb960E>
8002d9c4:	00000000 	nop
8002d9c8:	afa20130 	sw	v0,304(sp)
8002d9cc:	27a10130 	addiu	at,sp,304
8002d9d0:	afa10050 	sw	at,80(sp)
8002d9d4:	afa101e8 	sw	at,488(sp)
8002d9d8:	afa101ec 	sw	at,492(sp)
8002d9dc:	afa101f0 	sw	at,496(sp)
8002d9e0:	8fa10130 	lw	at,304(sp)
8002d9e4:	afa101f8 	sw	at,504(sp)
8002d9e8:	afa101f4 	sw	at,500(sp)
8002d9ec:	24240008 	addiu	a0,at,8
8002d9f0:	3c018105 	lui	at,0x8105
8002d9f4:	2425f84c 	addiu	a1,at,-1972
8002d9f8:	0c008fb1 	jal	80023ec4 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h31d02da70f533516E>
8002d9fc:	00000000 	nop
8002da00:	afa20128 	sw	v0,296(sp)
8002da04:	afa3012c 	sw	v1,300(sp)
8002da08:	27a40128 	addiu	a0,sp,296
8002da0c:	afa4004c 	sw	a0,76(sp)
8002da10:	0c00a9a2 	jal	8002a688 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h12904436a148d5f6E>
8002da14:	00000000 	nop
8002da18:	8fa4004c 	lw	a0,76(sp)
8002da1c:	8c410008 	lw	at,8(v0)
8002da20:	afa10054 	sw	at,84(sp)
8002da24:	afa101e0 	sw	at,480(sp)
            .pop()
            .expect("No env to run.")
            .borrow()
            .idx;
8002da28:	0c008c03 	jal	8002300c <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d4641e92d4d8a17E>
8002da2c:	00000000 	nop
8002da30:	8fa40050 	lw	a0,80(sp)
8002da34:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
8002da38:	00000000 	nop
8002da3c:	27a40070 	addiu	a0,sp,112
        locked_curenv_idx.replace(new_sched_env_idx);
8002da40:	0c00acf5 	jal	8002b3d4 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h566805ffd1d6c0b4E>
8002da44:	00000000 	nop
8002da48:	8fa50054 	lw	a1,84(sp)
8002da4c:	00402025 	move	a0,v0
8002da50:	0c0097c7 	jal	80025f1c <_ZN4core6option15Option$LT$T$GT$7replace17hadd69fa9aa78b57cE>
8002da54:	00000000 	nop
8002da58:	27a40074 	addiu	a0,sp,116
        get_idx_by_envid(locked_env_list[new_sched_env_idx].setup_for_run())
8002da5c:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
8002da60:	00000000 	nop
8002da64:	8fa50054 	lw	a1,84(sp)
8002da68:	00402025 	move	a0,v0
8002da6c:	3c018105 	lui	at,0x8105
8002da70:	2426f85c 	addiu	a2,at,-1956
8002da74:	0c00ad35 	jal	8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>
8002da78:	00000000 	nop
8002da7c:	00402025 	move	a0,v0
8002da80:	0c00b88d 	jal	8002e234 <_ZN8mos_65024proc3Env13setup_for_run17h1393c6a5e486a41eE>
8002da84:	00000000 	nop
8002da88:	00400825 	move	at,v0
8002da8c:	afa10058 	sw	at,88(sp)
8002da90:	afa20234 	sw	v0,564(sp)
    map_pre_pgdir(envs.as_ptr());
}

#[inline(always)]
pub fn get_idx_by_envid(envid: usize) -> EnvIndex {
    if envid == 0 {
8002da94:	14400016 	bnez	v0,8002daf0 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x268>
8002da98:	00000000 	nop
8002da9c:	0800b6a9 	j	8002daa4 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x21c>
8002daa0:	00000000 	nop
        let cur_env = CUR_ENV.lock();
8002daa4:	3c018105 	lui	at,0x8105
8002daa8:	24240960 	addiu	a0,at,2400
8002daac:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
8002dab0:	00000000 	nop
8002dab4:	00402025 	move	a0,v0
8002dab8:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
8002dabc:	00000000 	nop
8002dac0:	afa20218 	sw	v0,536(sp)
8002dac4:	27a40218 	addiu	a0,sp,536
        if let Some(idx) = *cur_env {
8002dac8:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
8002dacc:	00000000 	nop
8002dad0:	00400825 	move	at,v0
8002dad4:	afa10048 	sw	at,72(sp)
8002dad8:	8c410000 	lw	at,0(v0)
8002dadc:	24020001 	li	v0,1
8002dae0:	10220008 	beq	at,v0,8002db04 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x27c>
8002dae4:	00000000 	nop
8002dae8:	0800b6ca 	j	8002db28 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x2a0>
8002daec:	00000000 	nop
            return idx;
        } else {
            panic!("No current env.\n");
        }
    }
    envid & (NENV - 1)
8002daf0:	8fa10058 	lw	at,88(sp)
8002daf4:	302103ff 	andi	at,at,0x3ff
8002daf8:	afa10214 	sw	at,532(sp)
}
8002dafc:	0800b6d6 	j	8002db58 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x2d0>
8002db00:	00000000 	nop
        if let Some(idx) = *cur_env {
8002db04:	8fa10048 	lw	at,72(sp)
8002db08:	8c210004 	lw	at,4(at)
8002db0c:	afa10238 	sw	at,568(sp)
            return idx;
8002db10:	afa10214 	sw	at,532(sp)
8002db14:	27a40218 	addiu	a0,sp,536
    }
8002db18:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
8002db1c:	00000000 	nop
8002db20:	0800b6d6 	j	8002db58 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x2d0>
8002db24:	00000000 	nop
            panic!("No current env.\n");
8002db28:	3c018105 	lui	at,0x8105
8002db2c:	2425fa88 	addiu	a1,at,-1400
8002db30:	27a4021c 	addiu	a0,sp,540
8002db34:	afa40044 	sw	a0,68(sp)
8002db38:	24060001 	li	a2,1
8002db3c:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
8002db40:	00000000 	nop
8002db44:	8fa40044 	lw	a0,68(sp)
8002db48:	3c018105 	lui	at,0x8105
8002db4c:	2425fa90 	addiu	a1,at,-1392
8002db50:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002db54:	00000000 	nop
}
8002db58:	8fa10214 	lw	at,532(sp)
8002db5c:	afa1007c 	sw	at,124(sp)
8002db60:	0800b730 	j	8002dcc0 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x438>
8002db64:	00000000 	nop
                VirtAddr::from(&stack_end as *const usize as usize - size_of::<Trapframe>())
8002db68:	8fa40064 	lw	a0,100(sp)
8002db6c:	0c00af03 	jal	8002bc0c <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h3e418a96ab495ffdE>
8002db70:	00000000 	nop
8002db74:	afa201d8 	sw	v0,472(sp)
8002db78:	8fa101d8 	lw	at,472(sp)
8002db7c:	afa10118 	sw	at,280(sp)
8002db80:	27a10118 	addiu	at,sp,280
8002db84:	afa10210 	sw	at,528(sp)
        assert!(self.raw % align_of::<T>() == 0);
8002db88:	8fa10118 	lw	at,280(sp)
8002db8c:	afa10040 	sw	at,64(sp)
8002db90:	24010000 	li	at,0
8002db94:	14000009 	bnez	zero,8002dbbc <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x334>
8002db98:	00000000 	nop
8002db9c:	0800b6e9 	j	8002dba4 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x31c>
8002dba0:	00000000 	nop
8002dba4:	8fa10040 	lw	at,64(sp)
8002dba8:	30210003 	andi	at,at,0x3
8002dbac:	1020000e 	beqz	at,8002dbe8 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x360>
8002dbb0:	00000000 	nop
8002dbb4:	0800b6f3 	j	8002dbcc <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x344>
8002dbb8:	00000000 	nop
8002dbbc:	3c018105 	lui	at,0x8105
8002dbc0:	2424f2d0 	addiu	a0,at,-3376
8002dbc4:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
8002dbc8:	00000000 	nop
8002dbcc:	3c018105 	lui	at,0x8105
8002dbd0:	2424f28c 	addiu	a0,at,-3444
8002dbd4:	3c018105 	lui	at,0x8105
8002dbd8:	2426f2e0 	addiu	a2,at,-3360
8002dbdc:	24050031 	li	a1,49
8002dbe0:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
8002dbe4:	00000000 	nop
        unsafe { ptr::read(self.raw as *const T) }
8002dbe8:	8fa50118 	lw	a1,280(sp)
8002dbec:	27a40080 	addiu	a0,sp,128
8002dbf0:	afa4003c 	sw	a0,60(sp)
8002dbf4:	0c0089e1 	jal	80022784 <_ZN4core3ptr4read17h0b040c49a6041767E>
8002dbf8:	00000000 	nop
8002dbfc:	8fa40060 	lw	a0,96(sp)
8002dc00:	8fa5003c 	lw	a1,60(sp)
8002dc04:	24060098 	li	a2,152
            curenv.env_tf =
8002dc08:	0c00db4c 	jal	80036d30 <memcpy>
8002dc0c:	00000000 	nop
8002dc10:	8fa10068 	lw	at,104(sp)
        if y || curenv.env_cur_runs <= 0 || curenv.env_status != EnvStatus::Runnable {
8002dc14:	30210001 	andi	at,at,0x1
8002dc18:	1420000d 	bnez	at,8002dc50 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x3c8>
8002dc1c:	00000000 	nop
8002dc20:	0800b70e 	j	8002dc38 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x3b0>
8002dc24:	00000000 	nop
                VirtAddr::from(&stack_end as *const usize as usize - size_of::<Trapframe>())
8002dc28:	3c018105 	lui	at,0x8105
8002dc2c:	2424f7ec 	addiu	a0,at,-2068
8002dc30:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002dc34:	00000000 	nop
        if y || curenv.env_cur_runs <= 0 || curenv.env_status != EnvStatus::Runnable {
8002dc38:	8fa10060 	lw	at,96(sp)
8002dc3c:	8c2100b8 	lw	at,184(at)
8002dc40:	1c20000d 	bgtz	at,8002dc78 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x3f0>
8002dc44:	00000000 	nop
8002dc48:	0800b714 	j	8002dc50 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x3c8>
8002dc4c:	00000000 	nop
            if curenv.env_status == EnvStatus::Runnable {
8002dc50:	8fa10060 	lw	at,96(sp)
8002dc54:	242400ac 	addiu	a0,at,172
8002dc58:	3c018105 	lui	at,0x8105
8002dc5c:	2425f158 	addiu	a1,at,-3752
8002dc60:	0c00dae4 	jal	80036b90 <_ZN66_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..cmp..PartialEq$GT$2eq17hac98e68293e6189dE>
8002dc64:	00000000 	nop
8002dc68:	144000b8 	bnez	v0,8002df4c <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x6c4>
8002dc6c:	00000000 	nop
8002dc70:	0800b75d 	j	8002dd74 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x4ec>
8002dc74:	00000000 	nop
        if y || curenv.env_cur_runs <= 0 || curenv.env_status != EnvStatus::Runnable {
8002dc78:	8fa10060 	lw	at,96(sp)
8002dc7c:	242400ac 	addiu	a0,at,172
8002dc80:	3c018105 	lui	at,0x8105
8002dc84:	2425f158 	addiu	a1,at,-3752
8002dc88:	0c0082fd 	jal	80020bf4 <_ZN4core3cmp9PartialEq2ne17haf2bed79dacf06b9E>
8002dc8c:	00000000 	nop
8002dc90:	1440ffef 	bnez	v0,8002dc50 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x3c8>
8002dc94:	00000000 	nop
8002dc98:	0800b728 	j	8002dca0 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x418>
8002dc9c:	00000000 	nop
            curenv.setup_for_run();
8002dca0:	8fa40060 	lw	a0,96(sp)
8002dca4:	0c00b88d 	jal	8002e234 <_ZN8mos_65024proc3Env13setup_for_run17h1393c6a5e486a41eE>
8002dca8:	00000000 	nop
8002dcac:	8fa1005c 	lw	at,92(sp)
            *curenv_idx
8002dcb0:	8c210000 	lw	at,0(at)
8002dcb4:	afa1007c 	sw	at,124(sp)
        if y || curenv.env_cur_runs <= 0 || curenv.env_status != EnvStatus::Runnable {
8002dcb8:	0800b730 	j	8002dcc0 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x438>
8002dcbc:	00000000 	nop
8002dcc0:	27a40074 	addiu	a0,sp,116
8002dcc4:	afa40030 	sw	a0,48(sp)
    };
    let env_asid = locked_env_list[env_run_idx].env_asid;
8002dcc8:	0c00ac79 	jal	8002b1e4 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h990db7d0b83dd2d1E>
8002dccc:	00000000 	nop
8002dcd0:	00402025 	move	a0,v0
8002dcd4:	8fa5007c 	lw	a1,124(sp)
8002dcd8:	3c018105 	lui	at,0x8105
8002dcdc:	2426f86c 	addiu	a2,at,-1940
8002dce0:	0c00accc 	jal	8002b330 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hba386fd63984b7c3E>
8002dce4:	00000000 	nop
8002dce8:	8fa40030 	lw	a0,48(sp)
8002dcec:	8c4100a4 	lw	at,164(v0)
8002dcf0:	afa10038 	sw	at,56(sp)
8002dcf4:	afa101e4 	sw	at,484(sp)
    let env_tf = locked_env_list[env_run_idx].env_tf;
8002dcf8:	0c00ac79 	jal	8002b1e4 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h990db7d0b83dd2d1E>
8002dcfc:	00000000 	nop
8002dd00:	00402025 	move	a0,v0
8002dd04:	8fa5007c 	lw	a1,124(sp)
8002dd08:	3c018105 	lui	at,0x8105
8002dd0c:	2426f87c 	addiu	a2,at,-1924
8002dd10:	0c00accc 	jal	8002b330 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hba386fd63984b7c3E>
8002dd14:	00000000 	nop
8002dd18:	00402825 	move	a1,v0
8002dd1c:	27a40134 	addiu	a0,sp,308
8002dd20:	afa40034 	sw	a0,52(sp)
8002dd24:	24060098 	li	a2,152
8002dd28:	0c00db4c 	jal	80036d30 <memcpy>
8002dd2c:	00000000 	nop
    // println!("[schedule]  env_run_idx: {}", env_run_idx);
    drop(locked_curenv_idx);
8002dd30:	8fa40070 	lw	a0,112(sp)
8002dd34:	0c008456 	jal	80021158 <_ZN4core3mem4drop17h6a3effa89817325fE>
8002dd38:	00000000 	nop
    drop(locked_env_list);
8002dd3c:	8fa40074 	lw	a0,116(sp)
8002dd40:	0c00844c 	jal	80021130 <_ZN4core3mem4drop17h42ecfc0c85e47420E>
8002dd44:	00000000 	nop
    drop(locked_env_sched_list);
8002dd48:	8fa40078 	lw	a0,120(sp)
8002dd4c:	0c008460 	jal	80021180 <_ZN4core3mem4drop17haab0c747908d560fE>
8002dd50:	00000000 	nop
8002dd54:	8fa40034 	lw	a0,52(sp)
8002dd58:	8fa50038 	lw	a1,56(sp)
    unsafe {
        env_pop_tf(&env_tf, env_asid);
8002dd5c:	0c00dbf4 	jal	80036fd0 <env_pop_tf>
8002dd60:	00000000 	nop
    }
}
8002dd64:	8fbf0264 	lw	ra,612(sp)
8002dd68:	27bd0268 	addiu	sp,sp,616
8002dd6c:	03e00008 	jr	ra
8002dd70:	00000000 	nop
8002dd74:	27a40078 	addiu	a0,sp,120
            let new_sched_env_idx = locked_env_sched_list
8002dd78:	0c00ad19 	jal	8002b464 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hdb38b7a74b019393E>
8002dd7c:	00000000 	nop
8002dd80:	00402025 	move	a0,v0
8002dd84:	0c00d758 	jal	80035d60 <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E>
8002dd88:	00000000 	nop
8002dd8c:	00402025 	move	a0,v0
8002dd90:	3c018105 	lui	at,0x8105
8002dd94:	2425f7fc 	addiu	a1,at,-2052
8002dd98:	3c018105 	lui	at,0x8105
8002dd9c:	2427f80c 	addiu	a3,at,-2036
8002dda0:	2406000e 	li	a2,14
8002dda4:	0c009793 	jal	80025e4c <_ZN4core6option15Option$LT$T$GT$6expect17hf6026ccf2c3cb960E>
8002dda8:	00000000 	nop
8002ddac:	afa20124 	sw	v0,292(sp)
8002ddb0:	27a10124 	addiu	at,sp,292
8002ddb4:	afa10024 	sw	at,36(sp)
8002ddb8:	afa101fc 	sw	at,508(sp)
8002ddbc:	afa10200 	sw	at,512(sp)
8002ddc0:	afa10204 	sw	at,516(sp)
8002ddc4:	8fa10124 	lw	at,292(sp)
8002ddc8:	afa1020c 	sw	at,524(sp)
8002ddcc:	afa10208 	sw	at,520(sp)
8002ddd0:	24240008 	addiu	a0,at,8
8002ddd4:	3c018105 	lui	at,0x8105
8002ddd8:	2425f81c 	addiu	a1,at,-2020
8002dddc:	0c008fb1 	jal	80023ec4 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h31d02da70f533516E>
8002dde0:	00000000 	nop
8002dde4:	afa2011c 	sw	v0,284(sp)
8002dde8:	afa30120 	sw	v1,288(sp)
8002ddec:	27a4011c 	addiu	a0,sp,284
8002ddf0:	afa40020 	sw	a0,32(sp)
8002ddf4:	0c00a9a2 	jal	8002a688 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h12904436a148d5f6E>
8002ddf8:	00000000 	nop
8002ddfc:	8fa40020 	lw	a0,32(sp)
8002de00:	8c410008 	lw	at,8(v0)
8002de04:	afa10028 	sw	at,40(sp)
8002de08:	afa101dc 	sw	at,476(sp)
                .idx;
8002de0c:	0c008c03 	jal	8002300c <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d4641e92d4d8a17E>
8002de10:	00000000 	nop
8002de14:	8fa40024 	lw	a0,36(sp)
8002de18:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
8002de1c:	00000000 	nop
8002de20:	27a40070 	addiu	a0,sp,112
            locked_curenv_idx.replace(new_sched_env_idx);
8002de24:	0c00acf5 	jal	8002b3d4 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h566805ffd1d6c0b4E>
8002de28:	00000000 	nop
8002de2c:	8fa50028 	lw	a1,40(sp)
8002de30:	00402025 	move	a0,v0
8002de34:	0c0097c7 	jal	80025f1c <_ZN4core6option15Option$LT$T$GT$7replace17hadd69fa9aa78b57cE>
8002de38:	00000000 	nop
8002de3c:	27a40074 	addiu	a0,sp,116
            get_idx_by_envid(locked_env_list[new_sched_env_idx].setup_for_run())
8002de40:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
8002de44:	00000000 	nop
8002de48:	8fa50028 	lw	a1,40(sp)
8002de4c:	00402025 	move	a0,v0
8002de50:	3c018105 	lui	at,0x8105
8002de54:	2426f82c 	addiu	a2,at,-2004
8002de58:	0c00ad35 	jal	8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>
8002de5c:	00000000 	nop
8002de60:	00402025 	move	a0,v0
8002de64:	0c00b88d 	jal	8002e234 <_ZN8mos_65024proc3Env13setup_for_run17h1393c6a5e486a41eE>
8002de68:	00000000 	nop
8002de6c:	00400825 	move	at,v0
8002de70:	afa1002c 	sw	at,44(sp)
8002de74:	afa2025c 	sw	v0,604(sp)
    if envid == 0 {
8002de78:	14400016 	bnez	v0,8002ded4 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x64c>
8002de7c:	00000000 	nop
8002de80:	0800b7a2 	j	8002de88 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x600>
8002de84:	00000000 	nop
        let cur_env = CUR_ENV.lock();
8002de88:	3c018105 	lui	at,0x8105
8002de8c:	24240960 	addiu	a0,at,2400
8002de90:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
8002de94:	00000000 	nop
8002de98:	00402025 	move	a0,v0
8002de9c:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
8002dea0:	00000000 	nop
8002dea4:	afa20240 	sw	v0,576(sp)
8002dea8:	27a40240 	addiu	a0,sp,576
        if let Some(idx) = *cur_env {
8002deac:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
8002deb0:	00000000 	nop
8002deb4:	00400825 	move	at,v0
8002deb8:	afa1001c 	sw	at,28(sp)
8002debc:	8c410000 	lw	at,0(v0)
8002dec0:	24020001 	li	v0,1
8002dec4:	10220008 	beq	at,v0,8002dee8 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x660>
8002dec8:	00000000 	nop
8002decc:	0800b7c3 	j	8002df0c <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x684>
8002ded0:	00000000 	nop
    envid & (NENV - 1)
8002ded4:	8fa1002c 	lw	at,44(sp)
8002ded8:	302103ff 	andi	at,at,0x3ff
8002dedc:	afa1023c 	sw	at,572(sp)
}
8002dee0:	0800b7cf 	j	8002df3c <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x6b4>
8002dee4:	00000000 	nop
        if let Some(idx) = *cur_env {
8002dee8:	8fa1001c 	lw	at,28(sp)
8002deec:	8c210004 	lw	at,4(at)
8002def0:	afa10260 	sw	at,608(sp)
            return idx;
8002def4:	afa1023c 	sw	at,572(sp)
8002def8:	27a40240 	addiu	a0,sp,576
    }
8002defc:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
8002df00:	00000000 	nop
8002df04:	0800b7cf 	j	8002df3c <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x6b4>
8002df08:	00000000 	nop
            panic!("No current env.\n");
8002df0c:	3c018105 	lui	at,0x8105
8002df10:	2425fa88 	addiu	a1,at,-1400
8002df14:	27a40244 	addiu	a0,sp,580
8002df18:	afa40018 	sw	a0,24(sp)
8002df1c:	24060001 	li	a2,1
8002df20:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
8002df24:	00000000 	nop
8002df28:	8fa40018 	lw	a0,24(sp)
8002df2c:	3c018105 	lui	at,0x8105
8002df30:	2425fa90 	addiu	a1,at,-1392
8002df34:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002df38:	00000000 	nop
}
8002df3c:	8fa1023c 	lw	at,572(sp)
8002df40:	afa1007c 	sw	at,124(sp)
8002df44:	0800b730 	j	8002dcc0 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x438>
8002df48:	00000000 	nop
8002df4c:	27a40078 	addiu	a0,sp,120
                locked_env_sched_list.insert_to_tail(curenv.env_sched_link.clone());
8002df50:	0c00ad19 	jal	8002b464 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hdb38b7a74b019393E>
8002df54:	00000000 	nop
8002df58:	8fa10060 	lw	at,96(sp)
8002df5c:	afa20014 	sw	v0,20(sp)
8002df60:	242400b4 	addiu	a0,at,180
8002df64:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
8002df68:	00000000 	nop
8002df6c:	8fa40014 	lw	a0,20(sp)
8002df70:	00402825 	move	a1,v0
8002df74:	0c00d48b 	jal	8003522c <_ZN8mos_65024util16DoubleLinkedList14insert_to_tail17h289aeba59114fbe3E>
8002df78:	00000000 	nop
8002df7c:	8fa20060 	lw	v0,96(sp)
                curenv.env_cur_runs = curenv.env_pri as isize;
8002df80:	8c4100bc 	lw	at,188(v0)
8002df84:	ac4100b8 	sw	at,184(v0)
            if curenv.env_status == EnvStatus::Runnable {
8002df88:	0800b75d 	j	8002dd74 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E+0x4ec>
8002df8c:	00000000 	nop

8002df90 <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h52e5b04f9f6c250dE>:
    fn from(value: usize) -> Self {
8002df90:	27bdffc0 	addiu	sp,sp,-64
8002df94:	afbf003c 	sw	ra,60(sp)
8002df98:	afa40018 	sw	a0,24(sp)
8002df9c:	afa40038 	sw	a0,56(sp)
        match value {
8002dfa0:	1080001b 	beqz	a0,8002e010 <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h52e5b04f9f6c250dE+0x80>
8002dfa4:	00000000 	nop
8002dfa8:	0800b7ec 	j	8002dfb0 <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h52e5b04f9f6c250dE+0x20>
8002dfac:	00000000 	nop
8002dfb0:	8fa10018 	lw	at,24(sp)
8002dfb4:	24020001 	li	v0,1
8002dfb8:	10220018 	beq	at,v0,8002e01c <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h52e5b04f9f6c250dE+0x8c>
8002dfbc:	00000000 	nop
8002dfc0:	0800b7f2 	j	8002dfc8 <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h52e5b04f9f6c250dE+0x38>
8002dfc4:	00000000 	nop
8002dfc8:	8fa10018 	lw	at,24(sp)
8002dfcc:	24020002 	li	v0,2
8002dfd0:	10220016 	beq	at,v0,8002e02c <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h52e5b04f9f6c250dE+0x9c>
8002dfd4:	00000000 	nop
8002dfd8:	0800b7f8 	j	8002dfe0 <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h52e5b04f9f6c250dE+0x50>
8002dfdc:	00000000 	nop
            _ => panic!("Invalid EnvStatus.\n"),
8002dfe0:	3c018105 	lui	at,0x8105
8002dfe4:	2425f8a0 	addiu	a1,at,-1888
8002dfe8:	27a40020 	addiu	a0,sp,32
8002dfec:	afa40014 	sw	a0,20(sp)
8002dff0:	24060001 	li	a2,1
8002dff4:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
8002dff8:	00000000 	nop
8002dffc:	8fa40014 	lw	a0,20(sp)
8002e000:	3c018105 	lui	at,0x8105
8002e004:	2425f8bc 	addiu	a1,at,-1860
8002e008:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002e00c:	00000000 	nop
            0 => EnvStatus::Free,
8002e010:	afa0001c 	sw	zero,28(sp)
8002e014:	0800b80f 	j	8002e03c <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h52e5b04f9f6c250dE+0xac>
8002e018:	00000000 	nop
8002e01c:	24010001 	li	at,1
            1 => EnvStatus::Runnable,
8002e020:	afa1001c 	sw	at,28(sp)
8002e024:	0800b80f 	j	8002e03c <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h52e5b04f9f6c250dE+0xac>
8002e028:	00000000 	nop
8002e02c:	24010002 	li	at,2
            2 => EnvStatus::NotRunnable,
8002e030:	afa1001c 	sw	at,28(sp)
8002e034:	0800b80f 	j	8002e03c <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h52e5b04f9f6c250dE+0xac>
8002e038:	00000000 	nop
    }
8002e03c:	8fa2001c 	lw	v0,28(sp)
8002e040:	8fbf003c 	lw	ra,60(sp)
8002e044:	27bd0040 	addiu	sp,sp,64
8002e048:	03e00008 	jr	ra
8002e04c:	00000000 	nop

8002e050 <_ZN8mos_65024proc3Env3new17h2aeae23127005cc0E>:
    pub fn new(idx: usize) -> Self {
8002e050:	27bdd000 	addiu	sp,sp,-12288
8002e054:	afbf2ffc 	sw	ra,12284(sp)
8002e058:	afbe2ff8 	sw	s8,12280(sp)
8002e05c:	03a0f025 	move	s8,sp
8002e060:	2401f000 	li	at,-4096
8002e064:	03a1e824 	and	sp,sp,at
8002e068:	afa50f1c 	sw	a1,3868(sp)
8002e06c:	afa40f3c 	sw	a0,3900(sp)
8002e070:	afa40f40 	sw	a0,3904(sp)
8002e074:	afa52f68 	sw	a1,12136(sp)
8002e078:	27a42f78 	addiu	a0,sp,12152
8002e07c:	afa40f04 	sw	a0,3844(sp)
8002e080:	24050000 	li	a1,0
8002e084:	24060080 	li	a2,128
8002e088:	afa60f08 	sw	a2,3848(sp)

impl Trapframe {
    #[inline(always)]
    pub const fn new() -> Self {
        Self {
            regs: [0; 32],
8002e08c:	0c00dba8 	jal	80036ea0 <memset>
8002e090:	00000000 	nop
8002e094:	8fa50f04 	lw	a1,3844(sp)
8002e098:	8fa60f08 	lw	a2,3848(sp)
8002e09c:	27a40f44 	addiu	a0,sp,3908
8002e0a0:	afa40f28 	sw	a0,3880(sp)
        Self {
8002e0a4:	0c00db4c 	jal	80036d30 <memcpy>
8002e0a8:	00000000 	nop
8002e0ac:	8fa50f1c 	lw	a1,3868(sp)
8002e0b0:	afa00fc4 	sw	zero,4036(sp)
8002e0b4:	afa00fc8 	sw	zero,4040(sp)
8002e0b8:	afa00fcc 	sw	zero,4044(sp)
8002e0bc:	afa00fd0 	sw	zero,4048(sp)
8002e0c0:	afa00fd4 	sw	zero,4052(sp)
8002e0c4:	afa00fd8 	sw	zero,4056(sp)
8002e0c8:	27a40fec 	addiu	a0,sp,4076
8002e0cc:	afa40f0c 	sw	a0,3852(sp)
            env_link: Rc::new(RefCell::new(ListNode::new(idx))),
8002e0d0:	0c00d472 	jal	800351c8 <_ZN8mos_65024util8ListNode3new17h3bddddc7683b78d9E>
8002e0d4:	00000000 	nop
8002e0d8:	8fa50f0c 	lw	a1,3852(sp)
8002e0dc:	27a40fdc 	addiu	a0,sp,4060
8002e0e0:	afa40f10 	sw	a0,3856(sp)
8002e0e4:	0c008f96 	jal	80023e58 <_ZN4core4cell16RefCell$LT$T$GT$3new17h0d8c0999d3a5c116E>
8002e0e8:	00000000 	nop
8002e0ec:	8fa40f10 	lw	a0,3856(sp)
8002e0f0:	0c00a243 	jal	8002890c <_ZN5alloc2rc11Rc$LT$T$GT$3new17h1f0944bf899dca9bE>
8002e0f4:	00000000 	nop
8002e0f8:	afa20f2c 	sw	v0,3884(sp)
            env_padding1: [0; 4],
8002e0fc:	afa00ff8 	sw	zero,4088(sp)
            env_status: EnvStatus::Free,
8002e100:	afa00ffc 	sw	zero,4092(sp)
8002e104:	27a41000 	addiu	a0,sp,4096
8002e108:	afa40f14 	sw	a0,3860(sp)
            env_pgdir: Box::new(Pgtable::new()),
8002e10c:	0c00b1b6 	jal	8002c6d8 <_ZN8mos_65022mm7pgtable7Pgtable3new17h89f38b321e07b39cE>
8002e110:	00000000 	nop
8002e114:	24051000 	li	a1,4096
8002e118:	afa50f18 	sw	a1,3864(sp)
        Box::new(x)
8002e11c:	00a02025 	move	a0,a1
8002e120:	0c00a3a5 	jal	80028e94 <_ZN5alloc5alloc15exchange_malloc17h1392ccc4678b1d28E>
8002e124:	00000000 	nop
8002e128:	8fa50f14 	lw	a1,3860(sp)
8002e12c:	8fa60f18 	lw	a2,3864(sp)
8002e130:	00402025 	move	a0,v0
8002e134:	afa40f30 	sw	a0,3888(sp)
8002e138:	0c00db4c 	jal	80036d30 <memcpy>
8002e13c:	00000000 	nop
8002e140:	8fa50f1c 	lw	a1,3868(sp)
8002e144:	27a42f58 	addiu	a0,sp,12120
8002e148:	afa40f20 	sw	a0,3872(sp)
            env_sched_link: Rc::new(RefCell::new(ListNode::new(idx))),
8002e14c:	0c00d472 	jal	800351c8 <_ZN8mos_65024util8ListNode3new17h3bddddc7683b78d9E>
8002e150:	00000000 	nop
8002e154:	8fa50f20 	lw	a1,3872(sp)
8002e158:	27a42f48 	addiu	a0,sp,12104
8002e15c:	afa40f24 	sw	a0,3876(sp)
8002e160:	0c008f96 	jal	80023e58 <_ZN4core4cell16RefCell$LT$T$GT$3new17h0d8c0999d3a5c116E>
8002e164:	00000000 	nop
8002e168:	8fa40f24 	lw	a0,3876(sp)
8002e16c:	0c00a243 	jal	8002890c <_ZN5alloc2rc11Rc$LT$T$GT$3new17h1f0944bf899dca9bE>
8002e170:	00000000 	nop
8002e174:	afa20f34 	sw	v0,3892(sp)
8002e178:	afa02f74 	sw	zero,12148(sp)
        VirtAddr { raw }
8002e17c:	afa02f70 	sw	zero,12144(sp)
    }
8002e180:	8fa12f70 	lw	at,12144(sp)
            env_ipc_dstva: VirtAddr::new(0),
8002e184:	afa12f6c 	sw	at,12140(sp)
8002e188:	8fa12f6c 	lw	at,12140(sp)
8002e18c:	afa12f64 	sw	at,12132(sp)
            env_ipc_perm: Permssion::empty(),
8002e190:	0c00da4d 	jal	80036934 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$5empty17h6c50405d2ff863beE>
8002e194:	00000000 	nop
8002e198:	8fa50f28 	lw	a1,3880(sp)
8002e19c:	8fa40f3c 	lw	a0,3900(sp)
8002e1a0:	afa20f38 	sw	v0,3896(sp)
8002e1a4:	24060098 	li	a2,152
        Self {
8002e1a8:	0c00db4c 	jal	80036d30 <memcpy>
8002e1ac:	00000000 	nop
8002e1b0:	8fa60f2c 	lw	a2,3884(sp)
8002e1b4:	8fa50f30 	lw	a1,3888(sp)
8002e1b8:	8fa30f34 	lw	v1,3892(sp)
8002e1bc:	8fa10f38 	lw	at,3896(sp)
8002e1c0:	8fa40f3c 	lw	a0,3900(sp)
8002e1c4:	8fa20f40 	lw	v0,3904(sp)
8002e1c8:	ac860098 	sw	a2,152(a0)
8002e1cc:	8fa60ff8 	lw	a2,4088(sp)
8002e1d0:	a886009f 	swl	a2,159(a0)
8002e1d4:	b886009c 	swr	a2,156(a0)
8002e1d8:	ac8000a0 	sw	zero,160(a0)
8002e1dc:	ac8000a4 	sw	zero,164(a0)
8002e1e0:	ac8000a8 	sw	zero,168(a0)
8002e1e4:	8fa60ffc 	lw	a2,4092(sp)
8002e1e8:	ac8600ac 	sw	a2,172(a0)
8002e1ec:	ac8500b0 	sw	a1,176(a0)
8002e1f0:	ac8300b4 	sw	v1,180(a0)
8002e1f4:	ac8000b8 	sw	zero,184(a0)
8002e1f8:	ac8000bc 	sw	zero,188(a0)
8002e1fc:	ac8000c0 	sw	zero,192(a0)
8002e200:	ac8000c4 	sw	zero,196(a0)
8002e204:	ac8000c8 	sw	zero,200(a0)
8002e208:	8fa32f64 	lw	v1,12132(sp)
8002e20c:	ac8300cc 	sw	v1,204(a0)
8002e210:	ac8100d0 	sw	at,208(a0)
8002e214:	ac8000d4 	sw	zero,212(a0)
8002e218:	ac8000d8 	sw	zero,216(a0)
    }
8002e21c:	03c0e825 	move	sp,s8
8002e220:	8fbe2ff8 	lw	s8,12280(sp)
8002e224:	8fbf2ffc 	lw	ra,12284(sp)
8002e228:	27bd3000 	addiu	sp,sp,12288
8002e22c:	03e00008 	jr	ra
8002e230:	00000000 	nop

8002e234 <_ZN8mos_65024proc3Env13setup_for_run17h1393c6a5e486a41eE>:
    pub fn setup_for_run(&mut self) -> usize {
8002e234:	27bdffe0 	addiu	sp,sp,-32
8002e238:	afa40014 	sw	a0,20(sp)
8002e23c:	afa4001c 	sw	a0,28(sp)
        self.env_cur_runs -= 1;
8002e240:	8c8200b8 	lw	v0,184(a0)
8002e244:	2441ffff 	addiu	at,v0,-1
8002e248:	afa10018 	sw	at,24(sp)
8002e24c:	0022082a 	slt	at,at,v0
8002e250:	1020000d 	beqz	at,8002e288 <_ZN8mos_65024proc3Env13setup_for_run17h1393c6a5e486a41eE+0x54>
8002e254:	00000000 	nop
8002e258:	0800b898 	j	8002e260 <_ZN8mos_65024proc3Env13setup_for_run17h1393c6a5e486a41eE+0x2c>
8002e25c:	00000000 	nop
8002e260:	8fa10014 	lw	at,20(sp)
8002e264:	8fa20018 	lw	v0,24(sp)
8002e268:	ac2200b8 	sw	v0,184(at)
        self.env_runs += 1;
8002e26c:	8c2100d8 	lw	at,216(at)
8002e270:	24210001 	addiu	at,at,1
8002e274:	afa10010 	sw	at,16(sp)
8002e278:	1020000e 	beqz	at,8002e2b4 <_ZN8mos_65024proc3Env13setup_for_run17h1393c6a5e486a41eE+0x80>
8002e27c:	00000000 	nop
8002e280:	0800b8a6 	j	8002e298 <_ZN8mos_65024proc3Env13setup_for_run17h1393c6a5e486a41eE+0x64>
8002e284:	00000000 	nop
        self.env_cur_runs -= 1;
8002e288:	3c018105 	lui	at,0x8105
8002e28c:	2424f8cc 	addiu	a0,at,-1844
8002e290:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002e294:	00000000 	nop
        self.env_runs += 1;
8002e298:	8fa10014 	lw	at,20(sp)
8002e29c:	8fa20010 	lw	v0,16(sp)
8002e2a0:	ac2200d8 	sw	v0,216(at)
        self.env_id
8002e2a4:	8c2200a0 	lw	v0,160(at)
8002e2a8:	27bd0020 	addiu	sp,sp,32
    }
8002e2ac:	03e00008 	jr	ra
8002e2b0:	00000000 	nop
        self.env_runs += 1;
8002e2b4:	3c018105 	lui	at,0x8105
8002e2b8:	2424f8dc 	addiu	a0,at,-1828
8002e2bc:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002e2c0:	00000000 	nop

8002e2c4 <_ZN8mos_65024proc3Env6create17h168a6349cac0e288E>:
    pub fn create(&mut self, elf_data: &[u8]) {
8002e2c4:	27bdfed8 	addiu	sp,sp,-296
8002e2c8:	afbf0124 	sw	ra,292(sp)
8002e2cc:	afa60028 	sw	a2,40(sp)
8002e2d0:	afa5002c 	sw	a1,44(sp)
8002e2d4:	afa40030 	sw	a0,48(sp)
8002e2d8:	afa400f0 	sw	a0,240(sp)
8002e2dc:	afa500f4 	sw	a1,244(sp)
8002e2e0:	afa600f8 	sw	a2,248(sp)
8002e2e4:	27a40044 	addiu	a0,sp,68
        let elf_ident = elf::ElfIdent::try_load(elf_data).unwrap();
8002e2e8:	0c00dd79 	jal	800375e4 <_ZN3elf8ElfIdent8try_load17h26e2e1735a220c10E>
8002e2ec:	00000000 	nop
        match self {
8002e2f0:	93a10044 	lbu	at,68(sp)
8002e2f4:	30210001 	andi	at,at,0x1
8002e2f8:	10200013 	beqz	at,8002e348 <_ZN8mos_65024proc3Env6create17h168a6349cac0e288E+0x84>
8002e2fc:	00000000 	nop
8002e300:	0800b8c2 	j	8002e308 <_ZN8mos_65024proc3Env6create17h168a6349cac0e288E+0x44>
8002e304:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002e308:	8fa20048 	lw	v0,72(sp)
8002e30c:	8fa1004c 	lw	at,76(sp)
8002e310:	afa200fc 	sw	v0,252(sp)
8002e314:	afa10100 	sw	at,256(sp)
8002e318:	3c018105 	lui	at,0x8105
8002e31c:	2421f8ec 	addiu	at,at,-1812
8002e320:	03a01025 	move	v0,sp
8002e324:	ac410010 	sw	at,16(v0)
8002e328:	3c018105 	lui	at,0x8105
8002e32c:	2424ebfc 	addiu	a0,at,-5124
8002e330:	3c018105 	lui	at,0x8105
8002e334:	2427ebec 	addiu	a3,at,-5140
8002e338:	2405002b 	li	a1,43
8002e33c:	27a600fc 	addiu	a2,sp,252
8002e340:	0c00fdba 	jal	8003f6e8 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002e344:	00000000 	nop
8002e348:	8fa60028 	lw	a2,40(sp)
8002e34c:	8fa5002c 	lw	a1,44(sp)
            Ok(t) => t,
8002e350:	8ba10054 	lwl	at,84(sp)
8002e354:	9ba10051 	lwr	at,81(sp)
8002e358:	afa10040 	sw	at,64(sp)
8002e35c:	8ba10050 	lwl	at,80(sp)
8002e360:	9ba1004d 	lwr	at,77(sp)
8002e364:	afa1003c 	sw	at,60(sp)
8002e368:	8ba1004c 	lwl	at,76(sp)
8002e36c:	9ba10049 	lwr	at,73(sp)
8002e370:	afa10038 	sw	at,56(sp)
8002e374:	8ba10048 	lwl	at,72(sp)
8002e378:	9ba10045 	lwr	at,69(sp)
8002e37c:	afa10034 	sw	at,52(sp)
8002e380:	27a4008c 	addiu	a0,sp,140
8002e384:	27a70034 	addiu	a3,sp,52
        let elf_header = elf::load_elf_header::<elf::ElfHeader32>(elf_data, &elf_ident).unwrap();
8002e388:	0c008092 	jal	80020248 <_ZN3elf15load_elf_header17h929d6561fa3efc31E>
8002e38c:	00000000 	nop
        match self {
8002e390:	8fa1008c 	lw	at,140(sp)
8002e394:	10200013 	beqz	at,8002e3e4 <_ZN8mos_65024proc3Env6create17h168a6349cac0e288E+0x120>
8002e398:	00000000 	nop
8002e39c:	0800b8e9 	j	8002e3a4 <_ZN8mos_65024proc3Env6create17h168a6349cac0e288E+0xe0>
8002e3a0:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002e3a4:	8fa20090 	lw	v0,144(sp)
8002e3a8:	8fa10094 	lw	at,148(sp)
8002e3ac:	afa20104 	sw	v0,260(sp)
8002e3b0:	afa10108 	sw	at,264(sp)
8002e3b4:	3c018105 	lui	at,0x8105
8002e3b8:	2421f8fc 	addiu	at,at,-1796
8002e3bc:	03a01025 	move	v0,sp
8002e3c0:	ac410010 	sw	at,16(v0)
8002e3c4:	3c018105 	lui	at,0x8105
8002e3c8:	2424ebfc 	addiu	a0,at,-5124
8002e3cc:	3c018105 	lui	at,0x8105
8002e3d0:	2427ebec 	addiu	a3,at,-5140
8002e3d4:	2405002b 	li	a1,43
8002e3d8:	27a60104 	addiu	a2,sp,260
8002e3dc:	0c00fdba 	jal	8003f6e8 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002e3e0:	00000000 	nop
            Ok(t) => t,
8002e3e4:	8fa60028 	lw	a2,40(sp)
8002e3e8:	8fa5002c 	lw	a1,44(sp)
8002e3ec:	8fa100c0 	lw	at,192(sp)
8002e3f0:	afa10088 	sw	at,136(sp)
8002e3f4:	8fa100bc 	lw	at,188(sp)
8002e3f8:	afa10084 	sw	at,132(sp)
8002e3fc:	8fa100b8 	lw	at,184(sp)
8002e400:	afa10080 	sw	at,128(sp)
8002e404:	8fa100b4 	lw	at,180(sp)
8002e408:	afa1007c 	sw	at,124(sp)
8002e40c:	8fa100b0 	lw	at,176(sp)
8002e410:	afa10078 	sw	at,120(sp)
8002e414:	8fa100ac 	lw	at,172(sp)
8002e418:	afa10074 	sw	at,116(sp)
8002e41c:	8fa100a8 	lw	at,168(sp)
8002e420:	afa10070 	sw	at,112(sp)
8002e424:	8fa100a4 	lw	at,164(sp)
8002e428:	afa1006c 	sw	at,108(sp)
8002e42c:	8fa100a0 	lw	at,160(sp)
8002e430:	afa10068 	sw	at,104(sp)
8002e434:	8fa1009c 	lw	at,156(sp)
8002e438:	afa10064 	sw	at,100(sp)
8002e43c:	8fa10098 	lw	at,152(sp)
8002e440:	afa10060 	sw	at,96(sp)
8002e444:	8fa10094 	lw	at,148(sp)
8002e448:	afa1005c 	sw	at,92(sp)
8002e44c:	8fa10090 	lw	at,144(sp)
8002e450:	afa10058 	sw	at,88(sp)
            elf::load_elf_program_headers::<elf::ProgramHeader32>(elf_data, &elf_header).unwrap();
8002e454:	3c018105 	lui	at,0x8105
8002e458:	2421f90c 	addiu	at,at,-1780
8002e45c:	03a01025 	move	v0,sp
8002e460:	ac410010 	sw	at,16(v0)
8002e464:	27a400d0 	addiu	a0,sp,208
8002e468:	27a70058 	addiu	a3,sp,88
8002e46c:	0c0080ed 	jal	800203b4 <_ZN3elf24load_elf_program_headers17h2eeadaf6236b52d9E>
8002e470:	00000000 	nop
        match self {
8002e474:	8fa100d0 	lw	at,208(sp)
8002e478:	3c028000 	lui	v0,0x8000
8002e47c:	14220013 	bne	at,v0,8002e4cc <_ZN8mos_65024proc3Env6create17h168a6349cac0e288E+0x208>
8002e480:	00000000 	nop
8002e484:	0800b923 	j	8002e48c <_ZN8mos_65024proc3Env6create17h168a6349cac0e288E+0x1c8>
8002e488:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002e48c:	8fa200d4 	lw	v0,212(sp)
8002e490:	8fa100d8 	lw	at,216(sp)
8002e494:	afa2010c 	sw	v0,268(sp)
8002e498:	afa10110 	sw	at,272(sp)
8002e49c:	3c018105 	lui	at,0x8105
8002e4a0:	2421f938 	addiu	at,at,-1736
8002e4a4:	03a01025 	move	v0,sp
8002e4a8:	ac410010 	sw	at,16(v0)
8002e4ac:	3c018105 	lui	at,0x8105
8002e4b0:	2424ebfc 	addiu	a0,at,-5124
8002e4b4:	3c018105 	lui	at,0x8105
8002e4b8:	2427ebec 	addiu	a3,at,-5140
8002e4bc:	2405002b 	li	a1,43
8002e4c0:	27a6010c 	addiu	a2,sp,268
8002e4c4:	0c00fdba 	jal	8003f6e8 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002e4c8:	00000000 	nop
            Ok(t) => t,
8002e4cc:	8fa100d8 	lw	at,216(sp)
8002e4d0:	afa100cc 	sw	at,204(sp)
8002e4d4:	8fa100d4 	lw	at,212(sp)
8002e4d8:	afa100c8 	sw	at,200(sp)
8002e4dc:	8fa100d0 	lw	at,208(sp)
8002e4e0:	afa100c4 	sw	at,196(sp)
8002e4e4:	27a400c4 	addiu	a0,sp,196
        elf_program_headers.iter().for_each(|ph| {
8002e4e8:	0c00aa89 	jal	8002aa24 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hce81096ff6a9d188E>
8002e4ec:	00000000 	nop
8002e4f0:	00402025 	move	a0,v0
8002e4f4:	00602825 	move	a1,v1
8002e4f8:	0c009543 	jal	8002550c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hcf18c945e08f7b10E>
8002e4fc:	00000000 	nop
8002e500:	8fa10028 	lw	at,40(sp)
8002e504:	00402025 	move	a0,v0
8002e508:	8fa2002c 	lw	v0,44(sp)
8002e50c:	00602825 	move	a1,v1
8002e510:	8fa30030 	lw	v1,48(sp)
8002e514:	246600a4 	addiu	a2,v1,164
8002e518:	246300b0 	addiu	v1,v1,176
8002e51c:	afa600dc 	sw	a2,220(sp)
8002e520:	afa300e0 	sw	v1,224(sp)
8002e524:	afa200e4 	sw	v0,228(sp)
8002e528:	afa100e8 	sw	at,232(sp)
8002e52c:	27a600dc 	addiu	a2,sp,220
8002e530:	0c00ad9e 	jal	8002b678 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17h067ed799e8abcf6bE>
8002e534:	00000000 	nop
8002e538:	27a40058 	addiu	a0,sp,88
        self.env_tf.set_epc(elf_header.get_entry());
8002e53c:	0c00ddbd 	jal	800376f4 <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$9get_entry17h0a3ae17a333176ceE>
8002e540:	00000000 	nop
8002e544:	8fa10030 	lw	at,48(sp)
8002e548:	afa1011c 	sw	at,284(sp)
8002e54c:	afa20120 	sw	v0,288(sp)
    pub fn set_status(&mut self, status: usize) {
        self.status = status;
    }
    #[inline(always)]
    pub fn set_epc(&mut self, epc: usize) {
        self.epc = epc;
8002e550:	ac220094 	sw	v0,148(at)
        self.env_tf.regs[29] = USTACKTOP.raw - size_of::<usize>() * 2;
8002e554:	3c018105 	lui	at,0x8105
8002e558:	8c21f15c 	lw	at,-3748(at)
8002e55c:	afa100ec 	sw	at,236(sp)
8002e560:	8fa100ec 	lw	at,236(sp)
8002e564:	afa10020 	sw	at,32(sp)
8002e568:	24010008 	li	at,8
8002e56c:	afa10024 	sw	at,36(sp)
8002e570:	24010000 	li	at,0
8002e574:	1400000c 	bnez	zero,8002e5a8 <_ZN8mos_65024proc3Env6create17h168a6349cac0e288E+0x2e4>
8002e578:	00000000 	nop
8002e57c:	0800b961 	j	8002e584 <_ZN8mos_65024proc3Env6create17h168a6349cac0e288E+0x2c0>
8002e580:	00000000 	nop
8002e584:	8fa10020 	lw	at,32(sp)
8002e588:	8fa20024 	lw	v0,36(sp)
8002e58c:	00221823 	subu	v1,at,v0
8002e590:	afa3001c 	sw	v1,28(sp)
8002e594:	0022082b 	sltu	at,at,v0
8002e598:	14200015 	bnez	at,8002e5f0 <_ZN8mos_65024proc3Env6create17h168a6349cac0e288E+0x32c>
8002e59c:	00000000 	nop
8002e5a0:	0800b96e 	j	8002e5b8 <_ZN8mos_65024proc3Env6create17h168a6349cac0e288E+0x2f4>
8002e5a4:	00000000 	nop
8002e5a8:	3c018105 	lui	at,0x8105
8002e5ac:	2424f948 	addiu	a0,at,-1720
8002e5b0:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002e5b4:	00000000 	nop
8002e5b8:	8fa20030 	lw	v0,48(sp)
8002e5bc:	8fa1001c 	lw	at,28(sp)
8002e5c0:	ac410074 	sw	at,116(v0)
8002e5c4:	afa20114 	sw	v0,276(sp)
8002e5c8:	34018013 	li	at,0x8013
8002e5cc:	afa10118 	sw	at,280(sp)
        self.status = status;
8002e5d0:	ac410080 	sw	at,128(v0)
8002e5d4:	27a400c4 	addiu	a0,sp,196
    }
8002e5d8:	0c008be9 	jal	80022fa4 <_ZN4core3ptr64drop_in_place$LT$alloc..vec..Vec$LT$elf..ProgramHeader32$GT$$GT$17hd81436ea93ea3ba5E>
8002e5dc:	00000000 	nop
8002e5e0:	8fbf0124 	lw	ra,292(sp)
8002e5e4:	27bd0128 	addiu	sp,sp,296
8002e5e8:	03e00008 	jr	ra
8002e5ec:	00000000 	nop
        self.env_tf.regs[29] = USTACKTOP.raw - size_of::<usize>() * 2;
8002e5f0:	3c018105 	lui	at,0x8105
8002e5f4:	2424f958 	addiu	a0,at,-1704
8002e5f8:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002e5fc:	00000000 	nop

8002e600 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE>:
        elf_program_headers.iter().for_each(|ph| {
8002e600:	27bdfee0 	addiu	sp,sp,-288
8002e604:	afbf011c 	sw	ra,284(sp)
8002e608:	afa5005c 	sw	a1,92(sp)
8002e60c:	00800825 	move	at,a0
8002e610:	8fa4005c 	lw	a0,92(sp)
8002e614:	afa10060 	sw	at,96(sp)
8002e618:	afa100a4 	sw	at,164(sp)
8002e61c:	afa400a8 	sw	a0,168(sp)
            if ph.get_type() != elf::PT_LOAD {
8002e620:	0c00dde1 	jal	80037784 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$8get_type17h9b03f961e4fd3778E>
8002e624:	00000000 	nop
8002e628:	24010001 	li	at,1
8002e62c:	14410029 	bne	v0,at,8002e6d4 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0xd4>
8002e630:	00000000 	nop
8002e634:	0800b98f 	j	8002e63c <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x3c>
8002e638:	00000000 	nop
            let va = VirtAddr::new(ph.get_vaddr());
8002e63c:	8fa4005c 	lw	a0,92(sp)
8002e640:	0c00dded 	jal	800377b4 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$9get_vaddr17hc5412ead21e5bcdeE>
8002e644:	00000000 	nop
8002e648:	8fa4005c 	lw	a0,92(sp)
8002e64c:	afa20118 	sw	v0,280(sp)
        VirtAddr { raw }
8002e650:	afa20114 	sw	v0,276(sp)
    }
8002e654:	8fa10114 	lw	at,276(sp)
8002e658:	afa100ac 	sw	at,172(sp)
8002e65c:	8fa100ac 	lw	at,172(sp)
8002e660:	afa10064 	sw	at,100(sp)
            let memsz = ph.get_memsz();
8002e664:	0c00ddf9 	jal	800377e4 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$9get_memsz17hfb2cd24d087e8cc9E>
8002e668:	00000000 	nop
8002e66c:	8fa4005c 	lw	a0,92(sp)
8002e670:	00400825 	move	at,v0
8002e674:	afa10050 	sw	at,80(sp)
8002e678:	afa200b0 	sw	v0,176(sp)
            let file_offset = ph.get_offset();
8002e67c:	0c00dde7 	jal	8003779c <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$10get_offset17h45a757a961e3a8d3E>
8002e680:	00000000 	nop
8002e684:	8fa4005c 	lw	a0,92(sp)
8002e688:	00400825 	move	at,v0
8002e68c:	afa10054 	sw	at,84(sp)
8002e690:	afa200b4 	sw	v0,180(sp)
            let file_sz = ph.get_filesz();
8002e694:	0c00ddf3 	jal	800377cc <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$10get_filesz17hd60e41e25cbcff0fE>
8002e698:	00000000 	nop
8002e69c:	00400825 	move	at,v0
8002e6a0:	afa10058 	sw	at,88(sp)
8002e6a4:	afa200b8 	sw	v0,184(sp)
            let mut perm = Permssion::empty();
8002e6a8:	0c00da4d 	jal	80036934 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$5empty17h6c50405d2ff863beE>
8002e6ac:	00000000 	nop
8002e6b0:	8fa4005c 	lw	a0,92(sp)
8002e6b4:	afa20068 	sw	v0,104(sp)
            if ph.get_flags() & elf::PF_W == elf::PF_W {
8002e6b8:	0c00ddff 	jal	800377fc <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$9get_flags17hd6dd65113dbed91cE>
8002e6bc:	00000000 	nop
8002e6c0:	30410002 	andi	at,v0,0x2
8002e6c4:	14200017 	bnez	at,8002e724 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x124>
8002e6c8:	00000000 	nop
8002e6cc:	0800b9b9 	j	8002e6e4 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0xe4>
8002e6d0:	00000000 	nop
        });
8002e6d4:	8fbf011c 	lw	ra,284(sp)
8002e6d8:	27bd0120 	addiu	sp,sp,288
8002e6dc:	03e00008 	jr	ra
8002e6e0:	00000000 	nop
            for i in 0..memsz.div_ceil(PAGE_SIZE) {
8002e6e4:	8fa40050 	lw	a0,80(sp)
8002e6e8:	3c018105 	lui	at,0x8105
8002e6ec:	2426f968 	addiu	a2,at,-1688
8002e6f0:	24051000 	li	a1,4096
8002e6f4:	0c00858c 	jal	80021630 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h33b87ca3a7805b80E>
8002e6f8:	00000000 	nop
8002e6fc:	afa0006c 	sw	zero,108(sp)
8002e700:	afa20070 	sw	v0,112(sp)
8002e704:	8fa4006c 	lw	a0,108(sp)
8002e708:	8fa50070 	lw	a1,112(sp)
8002e70c:	0c012cc7 	jal	8004b31c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
8002e710:	00000000 	nop
8002e714:	afa20074 	sw	v0,116(sp)
8002e718:	afa30078 	sw	v1,120(sp)
8002e71c:	0800b9cd 	j	8002e734 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x134>
8002e720:	00000000 	nop
8002e724:	24010100 	li	at,256
                perm = Permssion::PTE_D;
8002e728:	afa10068 	sw	at,104(sp)
            if ph.get_flags() & elf::PF_W == elf::PF_W {
8002e72c:	0800b9b9 	j	8002e6e4 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0xe4>
8002e730:	00000000 	nop
8002e734:	27a40074 	addiu	a0,sp,116
            for i in 0..memsz.div_ceil(PAGE_SIZE) {
8002e738:	0c012cbe 	jal	8004b2f8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
8002e73c:	00000000 	nop
8002e740:	afa2007c 	sw	v0,124(sp)
8002e744:	afa30080 	sw	v1,128(sp)
8002e748:	8fa1007c 	lw	at,124(sp)
8002e74c:	1020ffe1 	beqz	at,8002e6d4 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0xd4>
8002e750:	00000000 	nop
8002e754:	0800b9d7 	j	8002e75c <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x15c>
8002e758:	00000000 	nop
8002e75c:	8fa10080 	lw	at,128(sp)
8002e760:	afa1004c 	sw	at,76(sp)
8002e764:	afa100bc 	sw	at,188(sp)
8002e768:	27a40090 	addiu	a0,sp,144
                let (_, page_pa) = page_alloc().unwrap();
8002e76c:	0c00b018 	jal	8002c060 <_ZN8mos_65022mm4page10page_alloc17ha4107379511cc364E>
8002e770:	00000000 	nop
        match self {
8002e774:	8fa10090 	lw	at,144(sp)
8002e778:	14200007 	bnez	at,8002e798 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x198>
8002e77c:	00000000 	nop
8002e780:	0800b9e2 	j	8002e788 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x188>
8002e784:	00000000 	nop
            None => unwrap_failed(),
8002e788:	3c018105 	lui	at,0x8105
8002e78c:	2424f978 	addiu	a0,at,-1672
8002e790:	0c00fab9 	jal	8003eae4 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
8002e794:	00000000 	nop
            Some(val) => val,
8002e798:	8fa10060 	lw	at,96(sp)
8002e79c:	8fa20098 	lw	v0,152(sp)
8002e7a0:	afa2008c 	sw	v0,140(sp)
8002e7a4:	8fa20094 	lw	v0,148(sp)
8002e7a8:	afa20088 	sw	v0,136(sp)
8002e7ac:	8fa2008c 	lw	v0,140(sp)
8002e7b0:	afa20084 	sw	v0,132(sp)
                self.env_pgdir
8002e7b4:	8c240004 	lw	a0,4(at)
8002e7b8:	0c00acb1 	jal	8002b2c4 <_ZN80_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..convert..AsMut$LT$T$GT$$GT$6as_mut17hf2adafd58e1895b3E>
8002e7bc:	00000000 	nop
8002e7c0:	00400825 	move	at,v0
8002e7c4:	8fa2004c 	lw	v0,76(sp)
8002e7c8:	afa10044 	sw	at,68(sp)
                        va.add(i * PAGE_SIZE),
8002e7cc:	00020b00 	sll	at,v0,0xc
8002e7d0:	afa10048 	sw	at,72(sp)
8002e7d4:	7c419800 	ext	at,v0,0x0,0x14
8002e7d8:	14220041 	bne	at,v0,8002e8e0 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x2e0>
8002e7dc:	00000000 	nop
8002e7e0:	0800b9fa 	j	8002e7e8 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x1e8>
8002e7e4:	00000000 	nop
8002e7e8:	8fa50048 	lw	a1,72(sp)
8002e7ec:	8fa10064 	lw	at,100(sp)
8002e7f0:	afa100c0 	sw	at,192(sp)
8002e7f4:	8fa100c0 	lw	at,192(sp)
8002e7f8:	afa100c4 	sw	at,196(sp)
8002e7fc:	8fa400c4 	lw	a0,196(sp)
8002e800:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
8002e804:	00000000 	nop
8002e808:	8fa10060 	lw	at,96(sp)
8002e80c:	8fa40044 	lw	a0,68(sp)
8002e810:	afa200c8 	sw	v0,200(sp)
8002e814:	8fa200c8 	lw	v0,200(sp)
8002e818:	afa2009c 	sw	v0,156(sp)
                        self.env_asid,
8002e81c:	8c210000 	lw	at,0(at)
8002e820:	8c270000 	lw	a3,0(at)
                self.env_pgdir
8002e824:	8fa1009c 	lw	at,156(sp)
8002e828:	afa100cc 	sw	at,204(sp)
8002e82c:	8fa500cc 	lw	a1,204(sp)
8002e830:	8fa10084 	lw	at,132(sp)
8002e834:	afa100d0 	sw	at,208(sp)
8002e838:	8fa100d0 	lw	at,208(sp)
8002e83c:	afa100d4 	sw	at,212(sp)
8002e840:	8fa600d4 	lw	a2,212(sp)
8002e844:	03a00825 	move	at,sp
8002e848:	27a20068 	addiu	v0,sp,104
8002e84c:	ac220014 	sw	v0,20(at)
8002e850:	24020001 	li	v0,1
8002e854:	ac220010 	sw	v0,16(at)
8002e858:	ac200018 	sw	zero,24(at)
8002e85c:	0c00b1de 	jal	8002c778 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E>
8002e860:	00000000 	nop
8002e864:	afa20104 	sw	v0,260(sp)
8002e868:	afa30108 	sw	v1,264(sp)
        match self {
8002e86c:	8fa10104 	lw	at,260(sp)
8002e870:	10200013 	beqz	at,8002e8c0 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x2c0>
8002e874:	00000000 	nop
8002e878:	0800ba20 	j	8002e880 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x280>
8002e87c:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002e880:	8fa20104 	lw	v0,260(sp)
8002e884:	8fa10108 	lw	at,264(sp)
8002e888:	afa2010c 	sw	v0,268(sp)
8002e88c:	afa10110 	sw	at,272(sp)
8002e890:	3c018105 	lui	at,0x8105
8002e894:	2421f998 	addiu	at,at,-1640
8002e898:	03a01025 	move	v0,sp
8002e89c:	ac410010 	sw	at,16(v0)
8002e8a0:	3c018105 	lui	at,0x8105
8002e8a4:	2424ebfc 	addiu	a0,at,-5124
8002e8a8:	3c018105 	lui	at,0x8105
8002e8ac:	2427ebec 	addiu	a3,at,-5140
8002e8b0:	2405002b 	li	a1,43
8002e8b4:	27a6010c 	addiu	a2,sp,268
8002e8b8:	0c00fdba 	jal	8003f6e8 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002e8bc:	00000000 	nop
                    if i * PAGE_SIZE < file_sz {
8002e8c0:	8fa2004c 	lw	v0,76(sp)
8002e8c4:	00020b00 	sll	at,v0,0xc
8002e8c8:	afa10040 	sw	at,64(sp)
8002e8cc:	7c419800 	ext	at,v0,0x0,0x14
8002e8d0:	1422000e 	bne	at,v0,8002e90c <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x30c>
8002e8d4:	00000000 	nop
8002e8d8:	0800ba3c 	j	8002e8f0 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x2f0>
8002e8dc:	00000000 	nop
                        va.add(i * PAGE_SIZE),
8002e8e0:	3c018105 	lui	at,0x8105
8002e8e4:	2424f988 	addiu	a0,at,-1656
8002e8e8:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002e8ec:	00000000 	nop
                    if i * PAGE_SIZE < file_sz {
8002e8f0:	8fa10040 	lw	at,64(sp)
8002e8f4:	8fa20058 	lw	v0,88(sp)
8002e8f8:	0022082b 	sltu	at,at,v0
8002e8fc:	14200007 	bnez	at,8002e91c <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x31c>
8002e900:	00000000 	nop
8002e904:	0800b9cd 	j	8002e734 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x134>
8002e908:	00000000 	nop
8002e90c:	3c018105 	lui	at,0x8105
8002e910:	2424f9a8 	addiu	a0,at,-1624
8002e914:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002e918:	00000000 	nop
                            elf_data.as_ptr().add(file_offset + i * PAGE_SIZE),
8002e91c:	8fa2004c 	lw	v0,76(sp)
8002e920:	8fa10060 	lw	at,96(sp)
8002e924:	8c230008 	lw	v1,8(at)
8002e928:	afa30038 	sw	v1,56(sp)
8002e92c:	8c21000c 	lw	at,12(at)
8002e930:	afa300fc 	sw	v1,252(sp)
8002e934:	afa10100 	sw	at,256(sp)
8002e938:	00020b00 	sll	at,v0,0xc
8002e93c:	afa1003c 	sw	at,60(sp)
8002e940:	7c419800 	ext	at,v0,0x0,0x14
8002e944:	1422000c 	bne	at,v0,8002e978 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x378>
8002e948:	00000000 	nop
8002e94c:	0800ba55 	j	8002e954 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x354>
8002e950:	00000000 	nop
8002e954:	8fa20054 	lw	v0,84(sp)
8002e958:	8fa1003c 	lw	at,60(sp)
8002e95c:	00410821 	addu	at,v0,at
8002e960:	afa10034 	sw	at,52(sp)
8002e964:	0022082b 	sltu	at,at,v0
8002e968:	14200028 	bnez	at,8002ea0c <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x40c>
8002e96c:	00000000 	nop
8002e970:	0800ba62 	j	8002e988 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x388>
8002e974:	00000000 	nop
8002e978:	3c018105 	lui	at,0x8105
8002e97c:	2424f9b8 	addiu	a0,at,-1608
8002e980:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002e984:	00000000 	nop
8002e988:	8fa10038 	lw	at,56(sp)
8002e98c:	8fa20034 	lw	v0,52(sp)
8002e990:	afa100f4 	sw	at,244(sp)
8002e994:	afa200f8 	sw	v0,248(sp)
    pub const unsafe fn add(self, count: usize) -> Self
    where
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `offset`.
        unsafe { intrinsics::offset(self, count) }
8002e998:	00220821 	addu	at,at,v0
8002e99c:	afa10028 	sw	at,40(sp)
                            pa_to_kva(page_pa).into(),
8002e9a0:	8fa10084 	lw	at,132(sp)
8002e9a4:	afa100d8 	sw	at,216(sp)
8002e9a8:	8fa100d8 	lw	at,216(sp)
8002e9ac:	afa100dc 	sw	at,220(sp)
8002e9b0:	8fa400dc 	lw	a0,220(sp)
8002e9b4:	0c00af44 	jal	8002bd10 <_ZN8mos_65022mm4addr9pa_to_kva17h2cbb9d7cedc35302E>
8002e9b8:	00000000 	nop
8002e9bc:	afa200e0 	sw	v0,224(sp)
8002e9c0:	8fa100e0 	lw	at,224(sp)
8002e9c4:	afa100a0 	sw	at,160(sp)
8002e9c8:	8fa100a0 	lw	at,160(sp)
8002e9cc:	afa100e4 	sw	at,228(sp)
8002e9d0:	8fa400e4 	lw	a0,228(sp)
8002e9d4:	3c018105 	lui	at,0x8105
8002e9d8:	2425f9d8 	addiu	a1,at,-1576
8002e9dc:	0c00a16d 	jal	800285b4 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6e0fe35b4ecbef46E>
8002e9e0:	00000000 	nop
8002e9e4:	00400825 	move	at,v0
8002e9e8:	8fa2004c 	lw	v0,76(sp)
8002e9ec:	afa1002c 	sw	at,44(sp)
                            core::cmp::min(PAGE_SIZE, file_sz - i * PAGE_SIZE),
8002e9f0:	00020b00 	sll	at,v0,0xc
8002e9f4:	afa10030 	sw	at,48(sp)
8002e9f8:	7c419800 	ext	at,v0,0x0,0x14
8002e9fc:	14220010 	bne	at,v0,8002ea40 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x440>
8002ea00:	00000000 	nop
8002ea04:	0800ba87 	j	8002ea1c <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x41c>
8002ea08:	00000000 	nop
                            elf_data.as_ptr().add(file_offset + i * PAGE_SIZE),
8002ea0c:	3c018105 	lui	at,0x8105
8002ea10:	2424f9c8 	addiu	a0,at,-1592
8002ea14:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002ea18:	00000000 	nop
                            core::cmp::min(PAGE_SIZE, file_sz - i * PAGE_SIZE),
8002ea1c:	8fa10058 	lw	at,88(sp)
8002ea20:	8fa20030 	lw	v0,48(sp)
8002ea24:	00221823 	subu	v1,at,v0
8002ea28:	afa30024 	sw	v1,36(sp)
8002ea2c:	0022082b 	sltu	at,at,v0
8002ea30:	14200026 	bnez	at,8002eacc <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x4cc>
8002ea34:	00000000 	nop
8002ea38:	0800ba94 	j	8002ea50 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x450>
8002ea3c:	00000000 	nop
8002ea40:	3c018105 	lui	at,0x8105
8002ea44:	2424f9e8 	addiu	a0,at,-1560
8002ea48:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002ea4c:	00000000 	nop
8002ea50:	8fa50024 	lw	a1,36(sp)
8002ea54:	24041000 	li	a0,4096
8002ea58:	0c00f21f 	jal	8003c87c <_ZN4core3cmp3min17hec05a35ccdb294eaE>
8002ea5c:	00000000 	nop
8002ea60:	8fa30028 	lw	v1,40(sp)
8002ea64:	8fa1002c 	lw	at,44(sp)
8002ea68:	00402025 	move	a0,v0
8002ea6c:	afa40020 	sw	a0,32(sp)
8002ea70:	afa300e8 	sw	v1,232(sp)
8002ea74:	afa100ec 	sw	at,236(sp)
8002ea78:	afa200f0 	sw	v0,240(sp)
        ub_checks::assert_unsafe_precondition!(
8002ea7c:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
8002ea80:	00000000 	nop
8002ea84:	1040000a 	beqz	v0,8002eab0 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x4b0>
8002ea88:	00000000 	nop
8002ea8c:	0800baa5 	j	8002ea94 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x494>
8002ea90:	00000000 	nop
8002ea94:	8fa5002c 	lw	a1,44(sp)
8002ea98:	8fa40028 	lw	a0,40(sp)
8002ea9c:	24060001 	li	a2,1
8002eaa0:	0c00821d 	jal	80020874 <_ZN4core10intrinsics4copy18precondition_check17hf82729f49408b871E>
8002eaa4:	00000000 	nop
8002eaa8:	0800baac 	j	8002eab0 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x4b0>
8002eaac:	00000000 	nop
        copy(src, dst, count)
8002eab0:	8fa60020 	lw	a2,32(sp)
8002eab4:	8fa50028 	lw	a1,40(sp)
8002eab8:	8fa4002c 	lw	a0,44(sp)
8002eabc:	0c00d830 	jal	800360c0 <memmove>
8002eac0:	00000000 	nop
                        core::ptr::copy(
8002eac4:	0800b9cd 	j	8002e734 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hbbeaf1d1fb66f4edE+0x134>
8002eac8:	00000000 	nop
                            core::cmp::min(PAGE_SIZE, file_sz - i * PAGE_SIZE),
8002eacc:	3c018105 	lui	at,0x8105
8002ead0:	2424f9f8 	addiu	a0,at,-1544
8002ead4:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002ead8:	00000000 	nop

8002eadc <_ZN8mos_65024proc3Env9get_envid17h66218a728e681990E>:
    pub fn get_envid(&self) -> usize {
8002eadc:	27bdfff8 	addiu	sp,sp,-8
8002eae0:	afa40004 	sw	a0,4(sp)
        self.env_id
8002eae4:	8c8200a0 	lw	v0,160(a0)
8002eae8:	27bd0008 	addiu	sp,sp,8
    }
8002eaec:	03e00008 	jr	ra
8002eaf0:	00000000 	nop

8002eaf4 <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E>:
fn map_pre_pgdir(envs: *const Env) {
8002eaf4:	27bdff38 	addiu	sp,sp,-200
8002eaf8:	afbf00c4 	sw	ra,196(sp)
8002eafc:	afa40044 	sw	a0,68(sp)
8002eb00:	afa40068 	sw	a0,104(sp)
    let mut pre_pgtable = PRE_PGTABLE.lock();
8002eb04:	3c018105 	lui	at,0x8105
8002eb08:	24240960 	addiu	a0,at,2400
8002eb0c:	0c00db38 	jal	80036ce0 <_ZN71_$LT$mos_6502..proc..PRE_PGTABLE$u20$as$u20$core..ops..deref..Deref$GT$5deref17h26227155109f16b6E>
8002eb10:	00000000 	nop
8002eb14:	00402025 	move	a0,v0
8002eb18:	0c00a052 	jal	80028148 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0aafc755bded502eE>
8002eb1c:	00000000 	nop
8002eb20:	afa20050 	sw	v0,80(sp)
8002eb24:	27a40050 	addiu	a0,sp,80
    pre_pgtable
8002eb28:	0c00ad12 	jal	8002b448 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbc3557afe01bc7bfE>
8002eb2c:	00000000 	nop
8002eb30:	8fa40044 	lw	a0,68(sp)
8002eb34:	8c410000 	lw	at,0(v0)
8002eb38:	afa10048 	sw	at,72(sp)
            kva_to_pa(VirtAddr::from(envs as usize)),
8002eb3c:	0c00af03 	jal	8002bc0c <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h3e418a96ab495ffdE>
8002eb40:	00000000 	nop
8002eb44:	afa2006c 	sw	v0,108(sp)
8002eb48:	8fa1006c 	lw	at,108(sp)
8002eb4c:	afa10058 	sw	at,88(sp)
8002eb50:	8fa10058 	lw	at,88(sp)
8002eb54:	afa10070 	sw	at,112(sp)
8002eb58:	8fa40070 	lw	a0,112(sp)
8002eb5c:	0c00af24 	jal	8002bc90 <_ZN8mos_65022mm4addr9kva_to_pa17hbce4a505e0faf2e7E>
8002eb60:	00000000 	nop
8002eb64:	afa20074 	sw	v0,116(sp)
8002eb68:	8fa10074 	lw	at,116(sp)
8002eb6c:	afa10054 	sw	at,84(sp)
8002eb70:	3c010003 	lui	at,0x3
8002eb74:	34217000 	ori	at,at,0x7000
8002eb78:	afa1004c 	sw	at,76(sp)
8002eb7c:	24010000 	li	at,0
            (NENV * size_of::<Env>() + PAGE_SIZE - 1) / PAGE_SIZE,
8002eb80:	1400000b 	bnez	zero,8002ebb0 <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0xbc>
8002eb84:	00000000 	nop
8002eb88:	0800bae4 	j	8002eb90 <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0x9c>
8002eb8c:	00000000 	nop
8002eb90:	8fa2004c 	lw	v0,76(sp)
8002eb94:	24411000 	addiu	at,v0,4096
8002eb98:	afa10040 	sw	at,64(sp)
8002eb9c:	0022082b 	sltu	at,at,v0
8002eba0:	1420000e 	bnez	at,8002ebdc <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0xe8>
8002eba4:	00000000 	nop
8002eba8:	0800baf0 	j	8002ebc0 <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0xcc>
8002ebac:	00000000 	nop
8002ebb0:	3c018105 	lui	at,0x8105
8002ebb4:	2424fa08 	addiu	a0,at,-1528
8002ebb8:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002ebbc:	00000000 	nop
8002ebc0:	8fa10040 	lw	at,64(sp)
8002ebc4:	2422ffff 	addiu	v0,at,-1
8002ebc8:	afa2003c 	sw	v0,60(sp)
8002ebcc:	10200070 	beqz	at,8002ed90 <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0x29c>
8002ebd0:	00000000 	nop
8002ebd4:	0800bafb 	j	8002ebec <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0xf8>
8002ebd8:	00000000 	nop
8002ebdc:	3c018105 	lui	at,0x8105
8002ebe0:	2424fa08 	addiu	a0,at,-1528
8002ebe4:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002ebe8:	00000000 	nop
8002ebec:	8fa40048 	lw	a0,72(sp)
8002ebf0:	8fa1003c 	lw	at,60(sp)
8002ebf4:	00010b02 	srl	at,at,0xc
    pre_pgtable
8002ebf8:	3c028105 	lui	v0,0x8105
8002ebfc:	8c42f164 	lw	v0,-3740(v0)
8002ec00:	afa20078 	sw	v0,120(sp)
8002ec04:	8fa20078 	lw	v0,120(sp)
8002ec08:	afa2007c 	sw	v0,124(sp)
8002ec0c:	8fa5007c 	lw	a1,124(sp)
8002ec10:	8fa20054 	lw	v0,84(sp)
8002ec14:	afa20080 	sw	v0,128(sp)
8002ec18:	8fa60080 	lw	a2,128(sp)
8002ec1c:	03a01025 	move	v0,sp
8002ec20:	24030001 	li	v1,1
8002ec24:	ac430018 	sw	v1,24(v0)
8002ec28:	3c038105 	lui	v1,0x8105
8002ec2c:	2463f160 	addiu	v1,v1,-3744
8002ec30:	ac430014 	sw	v1,20(v0)
8002ec34:	ac410010 	sw	at,16(v0)
8002ec38:	24070000 	li	a3,0
8002ec3c:	0c00b1de 	jal	8002c778 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E>
8002ec40:	00000000 	nop
8002ec44:	afa200b4 	sw	v0,180(sp)
8002ec48:	afa300b8 	sw	v1,184(sp)
        match self {
8002ec4c:	8fa100b4 	lw	at,180(sp)
8002ec50:	10200013 	beqz	at,8002eca0 <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0x1ac>
8002ec54:	00000000 	nop
8002ec58:	0800bb18 	j	8002ec60 <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0x16c>
8002ec5c:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002ec60:	8fa200b4 	lw	v0,180(sp)
8002ec64:	8fa100b8 	lw	at,184(sp)
8002ec68:	afa200bc 	sw	v0,188(sp)
8002ec6c:	afa100c0 	sw	at,192(sp)
8002ec70:	3c018105 	lui	at,0x8105
8002ec74:	2421fa28 	addiu	at,at,-1496
8002ec78:	03a01025 	move	v0,sp
8002ec7c:	ac410010 	sw	at,16(v0)
8002ec80:	3c018105 	lui	at,0x8105
8002ec84:	2424ebfc 	addiu	a0,at,-5124
8002ec88:	3c018105 	lui	at,0x8105
8002ec8c:	2427ebec 	addiu	a3,at,-5140
8002ec90:	2405002b 	li	a1,43
8002ec94:	27a600bc 	addiu	a2,sp,188
8002ec98:	0c00fdba 	jal	8003f6e8 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002ec9c:	00000000 	nop
    let locked_pages = PAGES.lock();
8002eca0:	3c018105 	lui	at,0x8105
8002eca4:	242408b8 	addiu	a0,at,2232
8002eca8:	0c00d8c9 	jal	80036324 <_ZN69_$LT$mos_6502..mm..page..PAGES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hac3480edc21cc44bE>
8002ecac:	00000000 	nop
8002ecb0:	00402025 	move	a0,v0
8002ecb4:	0c00a077 	jal	800281dc <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0ef92e8e38bfe963E>
8002ecb8:	00000000 	nop
8002ecbc:	afa2005c 	sw	v0,92(sp)
8002ecc0:	27a4005c 	addiu	a0,sp,92
8002ecc4:	afa40028 	sw	a0,40(sp)
    let pages_len = locked_pages.len();
8002ecc8:	0c00ac6b 	jal	8002b1ac <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h249085e6f7b5f4d4E>
8002eccc:	00000000 	nop
8002ecd0:	00402025 	move	a0,v0
8002ecd4:	0c00a2d1 	jal	80028b44 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h7a0a56d8b611abe1E>
8002ecd8:	00000000 	nop
8002ecdc:	8fa40028 	lw	a0,40(sp)
8002ece0:	afa20034 	sw	v0,52(sp)
8002ece4:	afa20084 	sw	v0,132(sp)
    let pages_vaddr = locked_pages.as_ptr() as usize;
8002ece8:	0c00ac6b 	jal	8002b1ac <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h249085e6f7b5f4d4E>
8002ecec:	00000000 	nop
8002ecf0:	00402025 	move	a0,v0
8002ecf4:	0c00a376 	jal	80028dd8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h6676a07ce57b7a28E>
8002ecf8:	00000000 	nop
8002ecfc:	afa2002c 	sw	v0,44(sp)
8002ed00:	afa20088 	sw	v0,136(sp)
    drop(locked_pages);
8002ed04:	8fa4005c 	lw	a0,92(sp)
8002ed08:	0c008442 	jal	80021108 <_ZN4core3mem4drop17h0cd67011859f238fE>
8002ed0c:	00000000 	nop
8002ed10:	27a40050 	addiu	a0,sp,80
    pre_pgtable
8002ed14:	0c00ad12 	jal	8002b448 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbc3557afe01bc7bfE>
8002ed18:	00000000 	nop
8002ed1c:	8fa4002c 	lw	a0,44(sp)
8002ed20:	8c410000 	lw	at,0(v0)
8002ed24:	afa10030 	sw	at,48(sp)
            kva_to_pa(VirtAddr::from(pages_vaddr)),
8002ed28:	0c00af03 	jal	8002bc0c <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h3e418a96ab495ffdE>
8002ed2c:	00000000 	nop
8002ed30:	afa2008c 	sw	v0,140(sp)
8002ed34:	8fa1008c 	lw	at,140(sp)
8002ed38:	afa10064 	sw	at,100(sp)
8002ed3c:	8fa10064 	lw	at,100(sp)
8002ed40:	afa10090 	sw	at,144(sp)
8002ed44:	8fa40090 	lw	a0,144(sp)
8002ed48:	0c00af24 	jal	8002bc90 <_ZN8mos_65022mm4addr9kva_to_pa17hbce4a505e0faf2e7E>
8002ed4c:	00000000 	nop
8002ed50:	00400825 	move	at,v0
8002ed54:	8fa20034 	lw	v0,52(sp)
8002ed58:	afa10094 	sw	at,148(sp)
8002ed5c:	8fa10094 	lw	at,148(sp)
8002ed60:	afa10060 	sw	at,96(sp)
            (pages_len * size_of::<Page>() + PAGE_SIZE - 1) / PAGE_SIZE,
8002ed64:	00021880 	sll	v1,v0,0x2
8002ed68:	000208c0 	sll	at,v0,0x3
8002ed6c:	00230821 	addu	at,at,v1
8002ed70:	afa10038 	sw	at,56(sp)
8002ed74:	2401000c 	li	at,12
8002ed78:	00410019 	multu	v0,at
8002ed7c:	00000810 	mfhi	at
8002ed80:	1420000f 	bnez	at,8002edc0 <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0x2cc>
8002ed84:	00000000 	nop
8002ed88:	0800bb68 	j	8002eda0 <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0x2ac>
8002ed8c:	00000000 	nop
            (NENV * size_of::<Env>() + PAGE_SIZE - 1) / PAGE_SIZE,
8002ed90:	3c018105 	lui	at,0x8105
8002ed94:	2424fa18 	addiu	a0,at,-1512
8002ed98:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002ed9c:	00000000 	nop
            (pages_len * size_of::<Page>() + PAGE_SIZE - 1) / PAGE_SIZE,
8002eda0:	8fa20038 	lw	v0,56(sp)
8002eda4:	24411000 	addiu	at,v0,4096
8002eda8:	afa10024 	sw	at,36(sp)
8002edac:	0022082b 	sltu	at,at,v0
8002edb0:	1420000e 	bnez	at,8002edec <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0x2f8>
8002edb4:	00000000 	nop
8002edb8:	0800bb74 	j	8002edd0 <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0x2dc>
8002edbc:	00000000 	nop
8002edc0:	3c018105 	lui	at,0x8105
8002edc4:	2424fa38 	addiu	a0,at,-1480
8002edc8:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002edcc:	00000000 	nop
8002edd0:	8fa10024 	lw	at,36(sp)
8002edd4:	2422ffff 	addiu	v0,at,-1
8002edd8:	afa20020 	sw	v0,32(sp)
8002eddc:	1020003b 	beqz	at,8002eecc <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0x3d8>
8002ede0:	00000000 	nop
8002ede4:	0800bb7f 	j	8002edfc <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0x308>
8002ede8:	00000000 	nop
8002edec:	3c018105 	lui	at,0x8105
8002edf0:	2424fa38 	addiu	a0,at,-1480
8002edf4:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002edf8:	00000000 	nop
8002edfc:	8fa40030 	lw	a0,48(sp)
8002ee00:	8fa10020 	lw	at,32(sp)
8002ee04:	00010b02 	srl	at,at,0xc
    pre_pgtable
8002ee08:	3c028105 	lui	v0,0x8105
8002ee0c:	8c42f168 	lw	v0,-3736(v0)
8002ee10:	afa20098 	sw	v0,152(sp)
8002ee14:	8fa20098 	lw	v0,152(sp)
8002ee18:	afa2009c 	sw	v0,156(sp)
8002ee1c:	8fa5009c 	lw	a1,156(sp)
8002ee20:	8fa20060 	lw	v0,96(sp)
8002ee24:	afa200a0 	sw	v0,160(sp)
8002ee28:	8fa600a0 	lw	a2,160(sp)
8002ee2c:	03a01025 	move	v0,sp
8002ee30:	24030001 	li	v1,1
8002ee34:	ac430018 	sw	v1,24(v0)
8002ee38:	3c038105 	lui	v1,0x8105
8002ee3c:	2463f160 	addiu	v1,v1,-3744
8002ee40:	ac430014 	sw	v1,20(v0)
8002ee44:	ac410010 	sw	at,16(v0)
8002ee48:	24070000 	li	a3,0
8002ee4c:	0c00b1de 	jal	8002c778 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E>
8002ee50:	00000000 	nop
8002ee54:	afa200a4 	sw	v0,164(sp)
8002ee58:	afa300a8 	sw	v1,168(sp)
        match self {
8002ee5c:	8fa100a4 	lw	at,164(sp)
8002ee60:	10200013 	beqz	at,8002eeb0 <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0x3bc>
8002ee64:	00000000 	nop
8002ee68:	0800bb9c 	j	8002ee70 <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E+0x37c>
8002ee6c:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002ee70:	8fa200a4 	lw	v0,164(sp)
8002ee74:	8fa100a8 	lw	at,168(sp)
8002ee78:	afa200ac 	sw	v0,172(sp)
8002ee7c:	afa100b0 	sw	at,176(sp)
8002ee80:	3c018105 	lui	at,0x8105
8002ee84:	2421fa58 	addiu	at,at,-1448
8002ee88:	03a01025 	move	v0,sp
8002ee8c:	ac410010 	sw	at,16(v0)
8002ee90:	3c018105 	lui	at,0x8105
8002ee94:	2424ebfc 	addiu	a0,at,-5124
8002ee98:	3c018105 	lui	at,0x8105
8002ee9c:	2427ebec 	addiu	a3,at,-5140
8002eea0:	2405002b 	li	a1,43
8002eea4:	27a600ac 	addiu	a2,sp,172
8002eea8:	0c00fdba 	jal	8003f6e8 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002eeac:	00000000 	nop
8002eeb0:	27a40050 	addiu	a0,sp,80
}
8002eeb4:	0c0086f1 	jal	80021bc4 <_ZN4core3ptr109drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$17h346a7ec989ca5186E>
8002eeb8:	00000000 	nop
8002eebc:	8fbf00c4 	lw	ra,196(sp)
8002eec0:	27bd00c8 	addiu	sp,sp,200
8002eec4:	03e00008 	jr	ra
8002eec8:	00000000 	nop
            (pages_len * size_of::<Page>() + PAGE_SIZE - 1) / PAGE_SIZE,
8002eecc:	3c018105 	lui	at,0x8105
8002eed0:	2424fa48 	addiu	a0,at,-1464
8002eed4:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002eed8:	00000000 	nop

8002eedc <_ZN8mos_65024proc8env_init17hde9c5fcd3b38afeeE>:
pub fn env_init() {
8002eedc:	27bdfdf8 	addiu	sp,sp,-520
8002eee0:	afbf0204 	sw	ra,516(sp)
    let mut envs = ENV_LIST.lock();
8002eee4:	3c018105 	lui	at,0x8105
8002eee8:	24240960 	addiu	a0,at,2400
8002eeec:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
8002eef0:	00000000 	nop
8002eef4:	00402025 	move	a0,v0
8002eef8:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
8002eefc:	00000000 	nop
8002ef00:	afa20028 	sw	v0,40(sp)
    let mut env_free_list = ENV_FREE_LIST.lock();
8002ef04:	3c018105 	lui	at,0x8105
8002ef08:	24240960 	addiu	a0,at,2400
8002ef0c:	0c00db08 	jal	80036c20 <_ZN73_$LT$mos_6502..proc..ENV_FREE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf688f55e10c51cccE>
8002ef10:	00000000 	nop
8002ef14:	00402025 	move	a0,v0
8002ef18:	0c00a09c 	jal	80028270 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E>
8002ef1c:	00000000 	nop
8002ef20:	afa2002c 	sw	v0,44(sp)
    for i in 0..NENV {
8002ef24:	afa00030 	sw	zero,48(sp)
8002ef28:	24010400 	li	at,1024
8002ef2c:	afa10034 	sw	at,52(sp)
8002ef30:	8fa40030 	lw	a0,48(sp)
8002ef34:	8fa50034 	lw	a1,52(sp)
8002ef38:	0c012cc7 	jal	8004b31c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
8002ef3c:	00000000 	nop
8002ef40:	afa20038 	sw	v0,56(sp)
8002ef44:	afa3003c 	sw	v1,60(sp)
8002ef48:	0800bbd4 	j	8002ef50 <_ZN8mos_65024proc8env_init17hde9c5fcd3b38afeeE+0x74>
8002ef4c:	00000000 	nop
8002ef50:	27a40038 	addiu	a0,sp,56
8002ef54:	0c012cbe 	jal	8004b2f8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
8002ef58:	00000000 	nop
8002ef5c:	afa20040 	sw	v0,64(sp)
8002ef60:	afa30044 	sw	v1,68(sp)
8002ef64:	8fa10040 	lw	at,64(sp)
8002ef68:	14200017 	bnez	at,8002efc8 <_ZN8mos_65024proc8env_init17hde9c5fcd3b38afeeE+0xec>
8002ef6c:	00000000 	nop
8002ef70:	0800bbde 	j	8002ef78 <_ZN8mos_65024proc8env_init17hde9c5fcd3b38afeeE+0x9c>
8002ef74:	00000000 	nop
8002ef78:	27a40028 	addiu	a0,sp,40
8002ef7c:	afa40024 	sw	a0,36(sp)
    map_pre_pgdir(envs.as_ptr());
8002ef80:	0c00ac79 	jal	8002b1e4 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h990db7d0b83dd2d1E>
8002ef84:	00000000 	nop
8002ef88:	00402025 	move	a0,v0
8002ef8c:	0c00a388 	jal	80028e20 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hf8f1e446fd2f3a4dE>
8002ef90:	00000000 	nop
8002ef94:	00402025 	move	a0,v0
8002ef98:	0c00babd 	jal	8002eaf4 <_ZN8mos_65024proc13map_pre_pgdir17ha0ca273a7146bf48E>
8002ef9c:	00000000 	nop
8002efa0:	27a4002c 	addiu	a0,sp,44
}
8002efa4:	0c008cff 	jal	800233fc <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17hde8d744f358f0af3E>
8002efa8:	00000000 	nop
8002efac:	8fa40024 	lw	a0,36(sp)
8002efb0:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
8002efb4:	00000000 	nop
8002efb8:	8fbf0204 	lw	ra,516(sp)
8002efbc:	27bd0208 	addiu	sp,sp,520
8002efc0:	03e00008 	jr	ra
8002efc4:	00000000 	nop
    for i in 0..NENV {
8002efc8:	8fa50044 	lw	a1,68(sp)
8002efcc:	afa50200 	sw	a1,512(sp)
8002efd0:	27a40048 	addiu	a0,sp,72
8002efd4:	afa40018 	sw	a0,24(sp)
        let env = Env::new(i);
8002efd8:	0c00b814 	jal	8002e050 <_ZN8mos_65024proc3Env3new17h2aeae23127005cc0E>
8002efdc:	00000000 	nop
8002efe0:	27a4002c 	addiu	a0,sp,44
        env_free_list.push(env.env_link.clone());
8002efe4:	0c00ad19 	jal	8002b464 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hdb38b7a74b019393E>
8002efe8:	00000000 	nop
8002efec:	8fa10018 	lw	at,24(sp)
8002eff0:	afa20014 	sw	v0,20(sp)
8002eff4:	24240098 	addiu	a0,at,152
8002eff8:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
8002effc:	00000000 	nop
8002f000:	8fa40014 	lw	a0,20(sp)
8002f004:	00402825 	move	a1,v0
8002f008:	0c00d591 	jal	80035644 <_ZN8mos_65024util16DoubleLinkedList4push17hb8d2053113fa2c42E>
8002f00c:	00000000 	nop
8002f010:	27a40028 	addiu	a0,sp,40
        envs.push(env);
8002f014:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
8002f018:	00000000 	nop
8002f01c:	8fa50018 	lw	a1,24(sp)
8002f020:	afa2001c 	sw	v0,28(sp)
8002f024:	27a40124 	addiu	a0,sp,292
8002f028:	afa40020 	sw	a0,32(sp)
8002f02c:	240600dc 	li	a2,220
8002f030:	0c00db4c 	jal	80036d30 <memcpy>
8002f034:	00000000 	nop
8002f038:	8fa4001c 	lw	a0,28(sp)
8002f03c:	8fa50020 	lw	a1,32(sp)
8002f040:	0c00a30c 	jal	80028c30 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h769fc00e12228b06E>
8002f044:	00000000 	nop
8002f048:	0800bbd4 	j	8002ef50 <_ZN8mos_65024proc8env_init17hde9c5fcd3b38afeeE+0x74>
8002f04c:	00000000 	nop

8002f050 <_ZN8mos_65024proc7mkenvid17hc3dcd6c3977e3369E>:

fn mkenvid(idx: usize) -> usize {
8002f050:	27bdffc8 	addiu	sp,sp,-56
8002f054:	afbf0034 	sw	ra,52(sp)
8002f058:	afa4001c 	sw	a0,28(sp)
8002f05c:	afa4002c 	sw	a0,44(sp)
    let mut locked_next_env_id = NEXT_ALLOC_ENV_ID.lock();
8002f060:	3c018105 	lui	at,0x8105
8002f064:	24240960 	addiu	a0,at,2400
8002f068:	0c00db2c 	jal	80036cb0 <_ZN77_$LT$mos_6502..proc..NEXT_ALLOC_ENV_ID$u20$as$u20$core..ops..deref..Deref$GT$5deref17hadfb331e843d9749E>
8002f06c:	00000000 	nop
8002f070:	00402025 	move	a0,v0
8002f074:	0c00e1d0 	jal	80038740 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8fd649a1255731a2E>
8002f078:	00000000 	nop
8002f07c:	afa20028 	sw	v0,40(sp)
8002f080:	27a40028 	addiu	a0,sp,40
    *locked_next_env_id += 1;
8002f084:	0c00e20b 	jal	8003882c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h8aca9b297df029fcE>
8002f088:	00000000 	nop
8002f08c:	00400825 	move	at,v0
8002f090:	afa10020 	sw	at,32(sp)
8002f094:	8c410000 	lw	at,0(v0)
8002f098:	24210001 	addiu	at,at,1
8002f09c:	afa10024 	sw	at,36(sp)
8002f0a0:	10200013 	beqz	at,8002f0f0 <_ZN8mos_65024proc7mkenvid17hc3dcd6c3977e3369E+0xa0>
8002f0a4:	00000000 	nop
8002f0a8:	0800bc2c 	j	8002f0b0 <_ZN8mos_65024proc7mkenvid17hc3dcd6c3977e3369E+0x60>
8002f0ac:	00000000 	nop
8002f0b0:	8fa10024 	lw	at,36(sp)
8002f0b4:	8fa20020 	lw	v0,32(sp)
8002f0b8:	ac410000 	sw	at,0(v0)
8002f0bc:	27a40028 	addiu	a0,sp,40
    let ret = *locked_next_env_id;
8002f0c0:	0c00e204 	jal	80038810 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17he438bcd96f87568eE>
8002f0c4:	00000000 	nop
8002f0c8:	8c410000 	lw	at,0(v0)
8002f0cc:	afa10014 	sw	at,20(sp)
8002f0d0:	afa10030 	sw	at,48(sp)
8002f0d4:	2401000b 	li	at,11
8002f0d8:	afa10018 	sw	at,24(sp)
8002f0dc:	24010000 	li	at,0
    ret << (1 + LOG2NENV) | idx
8002f0e0:	1400000d 	bnez	zero,8002f118 <_ZN8mos_65024proc7mkenvid17hc3dcd6c3977e3369E+0xc8>
8002f0e4:	00000000 	nop
8002f0e8:	0800bc40 	j	8002f100 <_ZN8mos_65024proc7mkenvid17hc3dcd6c3977e3369E+0xb0>
8002f0ec:	00000000 	nop
    *locked_next_env_id += 1;
8002f0f0:	3c018105 	lui	at,0x8105
8002f0f4:	2424faa0 	addiu	a0,at,-1376
8002f0f8:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002f0fc:	00000000 	nop
    ret << (1 + LOG2NENV) | idx
8002f100:	8fa10018 	lw	at,24(sp)
8002f104:	2c210020 	sltiu	at,at,32
8002f108:	14200007 	bnez	at,8002f128 <_ZN8mos_65024proc7mkenvid17hc3dcd6c3977e3369E+0xd8>
8002f10c:	00000000 	nop
8002f110:	0800bc58 	j	8002f160 <_ZN8mos_65024proc7mkenvid17hc3dcd6c3977e3369E+0x110>
8002f114:	00000000 	nop
8002f118:	3c018105 	lui	at,0x8105
8002f11c:	2424fab0 	addiu	a0,at,-1360
8002f120:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002f124:	00000000 	nop
8002f128:	8fa2001c 	lw	v0,28(sp)
8002f12c:	8fa10014 	lw	at,20(sp)
8002f130:	8fa30018 	lw	v1,24(sp)
8002f134:	00610804 	sllv	at,at,v1
8002f138:	00220825 	or	at,at,v0
8002f13c:	afa10010 	sw	at,16(sp)
8002f140:	27a40028 	addiu	a0,sp,40
}
8002f144:	0c00de31 	jal	800378c4 <_ZN4core3ptr59drop_in_place$LT$sync..spin..SpinlockGuard$LT$usize$GT$$GT$17h40a63510b9d9c889E>
8002f148:	00000000 	nop
8002f14c:	8fa20010 	lw	v0,16(sp)
8002f150:	8fbf0034 	lw	ra,52(sp)
8002f154:	27bd0038 	addiu	sp,sp,56
8002f158:	03e00008 	jr	ra
8002f15c:	00000000 	nop
    ret << (1 + LOG2NENV) | idx
8002f160:	3c018105 	lui	at,0x8105
8002f164:	2424fac0 	addiu	a0,at,-1344
8002f168:	0c012447 	jal	8004911c <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h6a79b323d0787a78E>
8002f16c:	00000000 	nop

8002f170 <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E>:

fn asid_alloc() -> Result<usize, &'static str> {
8002f170:	27bdff88 	addiu	sp,sp,-120
8002f174:	afbf0074 	sw	ra,116(sp)
8002f178:	afa40044 	sw	a0,68(sp)
8002f17c:	afa40048 	sw	a0,72(sp)
    let mut locked_asid_bitmap = ASID_BITMAP.lock();
8002f180:	3c018105 	lui	at,0x8105
8002f184:	24240960 	addiu	a0,at,2400
8002f188:	0c00db20 	jal	80036c80 <_ZN71_$LT$mos_6502..proc..ASID_BITMAP$u20$as$u20$core..ops..deref..Deref$GT$5deref17h698b9ee06e439253E>
8002f18c:	00000000 	nop
8002f190:	00402025 	move	a0,v0
8002f194:	0c00a12f 	jal	800284bc <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hae82e6dd53aa81afE>
8002f198:	00000000 	nop
8002f19c:	afa2004c 	sw	v0,76(sp)
8002f1a0:	24010001 	li	at,1
    for i in 1..NASID {
8002f1a4:	afa10050 	sw	at,80(sp)
8002f1a8:	24010100 	li	at,256
8002f1ac:	afa10054 	sw	at,84(sp)
8002f1b0:	8fa40050 	lw	a0,80(sp)
8002f1b4:	8fa50054 	lw	a1,84(sp)
8002f1b8:	0c012cc7 	jal	8004b31c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
8002f1bc:	00000000 	nop
8002f1c0:	afa20058 	sw	v0,88(sp)
8002f1c4:	afa3005c 	sw	v1,92(sp)
8002f1c8:	0800bc74 	j	8002f1d0 <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x60>
8002f1cc:	00000000 	nop
8002f1d0:	27a40058 	addiu	a0,sp,88
8002f1d4:	0c012cbe 	jal	8004b2f8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
8002f1d8:	00000000 	nop
8002f1dc:	afa20060 	sw	v0,96(sp)
8002f1e0:	afa30064 	sw	v1,100(sp)
8002f1e4:	8fa10060 	lw	at,96(sp)
8002f1e8:	1420000e 	bnez	at,8002f224 <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0xb4>
8002f1ec:	00000000 	nop
8002f1f0:	0800bc7e 	j	8002f1f8 <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x88>
8002f1f4:	00000000 	nop
        if locked_asid_bitmap[index] & (1 << inner) == 0 {
            locked_asid_bitmap[index] |= 1 << inner;
            return Ok(i);
        }
    }
    Err("No more free asid.")
8002f1f8:	8fa20044 	lw	v0,68(sp)
8002f1fc:	3c018105 	lui	at,0x8105
8002f200:	2421fad0 	addiu	at,at,-1328
8002f204:	ac410000 	sw	at,0(v0)
8002f208:	24010012 	li	at,18
8002f20c:	ac410004 	sw	at,4(v0)
8002f210:	27a4004c 	addiu	a0,sp,76
}
8002f214:	0c0086c3 	jal	80021b0c <_ZN4core3ptr103drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$17h5accd6e7030a0657E>
8002f218:	00000000 	nop
8002f21c:	0800bc9c 	j	8002f270 <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x100>
8002f220:	00000000 	nop
    for i in 1..NASID {
8002f224:	8fa10064 	lw	at,100(sp)
8002f228:	afa10034 	sw	at,52(sp)
8002f22c:	afa10068 	sw	at,104(sp)
        let index = i >> 5;
8002f230:	00011142 	srl	v0,at,0x5
8002f234:	afa2003c 	sw	v0,60(sp)
8002f238:	afa2006c 	sw	v0,108(sp)
        let inner = i & 31;
8002f23c:	3021001f 	andi	at,at,0x1f
8002f240:	afa10038 	sw	at,56(sp)
8002f244:	afa10070 	sw	at,112(sp)
8002f248:	27a4004c 	addiu	a0,sp,76
        if locked_asid_bitmap[index] & (1 << inner) == 0 {
8002f24c:	0c00ac64 	jal	8002b190 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0744fe67849772c7E>
8002f250:	00000000 	nop
8002f254:	8fa1003c 	lw	at,60(sp)
8002f258:	afa20040 	sw	v0,64(sp)
8002f25c:	2c210008 	sltiu	at,at,8
8002f260:	14200008 	bnez	at,8002f284 <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x114>
8002f264:	00000000 	nop
8002f268:	0800bcab 	j	8002f2ac <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x13c>
8002f26c:	00000000 	nop
}
8002f270:	8fa20048 	lw	v0,72(sp)
8002f274:	8fbf0074 	lw	ra,116(sp)
8002f278:	27bd0078 	addiu	sp,sp,120
8002f27c:	03e00008 	jr	ra
8002f280:	00000000 	nop
        if locked_asid_bitmap[index] & (1 << inner) == 0 {
8002f284:	8fa10040 	lw	at,64(sp)
8002f288:	8c210000 	lw	at,0(at)
8002f28c:	afa1002c 	sw	at,44(sp)
8002f290:	00201025 	move	v0,at
8002f294:	afa20030 	sw	v0,48(sp)
8002f298:	30210003 	andi	at,at,0x3
8002f29c:	10200009 	beqz	at,8002f2c4 <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x154>
8002f2a0:	00000000 	nop
8002f2a4:	0800bcbd 	j	8002f2f4 <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x184>
8002f2a8:	00000000 	nop
8002f2ac:	8fa4003c 	lw	a0,60(sp)
8002f2b0:	3c018105 	lui	at,0x8105
8002f2b4:	2426fae4 	addiu	a2,at,-1308
8002f2b8:	24050008 	li	a1,8
8002f2bc:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002f2c0:	00000000 	nop
8002f2c4:	8fa10038 	lw	at,56(sp)
8002f2c8:	8fa20030 	lw	v0,48(sp)
8002f2cc:	8fa3003c 	lw	v1,60(sp)
8002f2d0:	00031880 	sll	v1,v1,0x2
8002f2d4:	00431021 	addu	v0,v0,v1
8002f2d8:	8c420000 	lw	v0,0(v0)
8002f2dc:	afa20028 	sw	v0,40(sp)
8002f2e0:	2c210020 	sltiu	at,at,32
8002f2e4:	14200009 	bnez	at,8002f30c <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x19c>
8002f2e8:	00000000 	nop
8002f2ec:	0800bccb 	j	8002f32c <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x1bc>
8002f2f0:	00000000 	nop
8002f2f4:	8fa5002c 	lw	a1,44(sp)
8002f2f8:	3c018105 	lui	at,0x8105
8002f2fc:	2426fae4 	addiu	a2,at,-1308
8002f300:	24040004 	li	a0,4
8002f304:	0c00fc13 	jal	8003f04c <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
8002f308:	00000000 	nop
8002f30c:	8fa10028 	lw	at,40(sp)
8002f310:	8fa20038 	lw	v0,56(sp)
8002f314:	00410806 	srlv	at,at,v0
8002f318:	30210001 	andi	at,at,0x1
8002f31c:	10200007 	beqz	at,8002f33c <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x1cc>
8002f320:	00000000 	nop
8002f324:	0800bc74 	j	8002f1d0 <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x60>
8002f328:	00000000 	nop
8002f32c:	3c018105 	lui	at,0x8105
8002f330:	2424faf4 	addiu	a0,at,-1292
8002f334:	0c012447 	jal	8004911c <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h6a79b323d0787a78E>
8002f338:	00000000 	nop
            locked_asid_bitmap[index] |= 1 << inner;
8002f33c:	8fa10038 	lw	at,56(sp)
8002f340:	2c210020 	sltiu	at,at,32
8002f344:	10200011 	beqz	at,8002f38c <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x21c>
8002f348:	00000000 	nop
8002f34c:	0800bcd5 	j	8002f354 <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x1e4>
8002f350:	00000000 	nop
8002f354:	8fa20038 	lw	v0,56(sp)
8002f358:	24010001 	li	at,1
8002f35c:	00410804 	sllv	at,at,v0
8002f360:	afa10020 	sw	at,32(sp)
8002f364:	27a4004c 	addiu	a0,sp,76
8002f368:	0c00acfc 	jal	8002b3f0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h60973401acba378fE>
8002f36c:	00000000 	nop
8002f370:	8fa1003c 	lw	at,60(sp)
8002f374:	afa20024 	sw	v0,36(sp)
8002f378:	2c210008 	sltiu	at,at,8
8002f37c:	14200007 	bnez	at,8002f39c <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x22c>
8002f380:	00000000 	nop
8002f384:	0800bcf3 	j	8002f3cc <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x25c>
8002f388:	00000000 	nop
8002f38c:	3c018105 	lui	at,0x8105
8002f390:	2424fb04 	addiu	a0,at,-1276
8002f394:	0c012447 	jal	8004911c <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h6a79b323d0787a78E>
8002f398:	00000000 	nop
8002f39c:	8fa10024 	lw	at,36(sp)
8002f3a0:	8c210000 	lw	at,0(at)
8002f3a4:	afa10014 	sw	at,20(sp)
8002f3a8:	00201025 	move	v0,at
8002f3ac:	afa20018 	sw	v0,24(sp)
8002f3b0:	00201025 	move	v0,at
8002f3b4:	afa2001c 	sw	v0,28(sp)
8002f3b8:	30210003 	andi	at,at,0x3
8002f3bc:	10200009 	beqz	at,8002f3e4 <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x274>
8002f3c0:	00000000 	nop
8002f3c4:	0800bd01 	j	8002f404 <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x294>
8002f3c8:	00000000 	nop
8002f3cc:	8fa4003c 	lw	a0,60(sp)
8002f3d0:	3c018105 	lui	at,0x8105
8002f3d4:	2426fb14 	addiu	a2,at,-1260
8002f3d8:	24050008 	li	a1,8
8002f3dc:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002f3e0:	00000000 	nop
8002f3e4:	8fa10018 	lw	at,24(sp)
8002f3e8:	00201025 	move	v0,at
8002f3ec:	afa20010 	sw	v0,16(sp)
8002f3f0:	30210003 	andi	at,at,0x3
8002f3f4:	10200009 	beqz	at,8002f41c <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x2ac>
8002f3f8:	00000000 	nop
8002f3fc:	0800bd1a 	j	8002f468 <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x2f8>
8002f400:	00000000 	nop
8002f404:	8fa50014 	lw	a1,20(sp)
8002f408:	3c018105 	lui	at,0x8105
8002f40c:	2426fb14 	addiu	a2,at,-1260
8002f410:	24040004 	li	a0,4
8002f414:	0c00fc13 	jal	8003f04c <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
8002f418:	00000000 	nop
8002f41c:	8fa10044 	lw	at,68(sp)
8002f420:	8fa20034 	lw	v0,52(sp)
8002f424:	8fa50020 	lw	a1,32(sp)
8002f428:	8fa3001c 	lw	v1,28(sp)
8002f42c:	8fa40018 	lw	a0,24(sp)
8002f430:	8fa6003c 	lw	a2,60(sp)
8002f434:	00063080 	sll	a2,a2,0x2
8002f438:	00862021 	addu	a0,a0,a2
8002f43c:	00661821 	addu	v1,v1,a2
8002f440:	8c630000 	lw	v1,0(v1)
8002f444:	00651825 	or	v1,v1,a1
8002f448:	ac830000 	sw	v1,0(a0)
            return Ok(i);
8002f44c:	ac220004 	sw	v0,4(at)
8002f450:	ac200000 	sw	zero,0(at)
8002f454:	27a4004c 	addiu	a0,sp,76
}
8002f458:	0c0086c3 	jal	80021b0c <_ZN4core3ptr103drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$17h5accd6e7030a0657E>
8002f45c:	00000000 	nop
8002f460:	0800bc9c 	j	8002f270 <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E+0x100>
8002f464:	00000000 	nop
            locked_asid_bitmap[index] |= 1 << inner;
8002f468:	8fa50010 	lw	a1,16(sp)
8002f46c:	3c018105 	lui	at,0x8105
8002f470:	2426fb14 	addiu	a2,at,-1260
8002f474:	24040004 	li	a0,4
8002f478:	0c00fc13 	jal	8003f04c <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
8002f47c:	00000000 	nop

8002f480 <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E>:

pub fn env_alloc(
8002f480:	27bdff00 	addiu	sp,sp,-256
8002f484:	afbf00fc 	sw	ra,252(sp)
8002f488:	afa70040 	sw	a3,64(sp)
8002f48c:	afa60060 	sw	a2,96(sp)
8002f490:	afa50044 	sw	a1,68(sp)
8002f494:	afa40048 	sw	a0,72(sp)
8002f498:	afa4004c 	sw	a0,76(sp)
8002f49c:	8fa10114 	lw	at,276(sp)
8002f4a0:	afa10050 	sw	at,80(sp)
8002f4a4:	8fa10110 	lw	at,272(sp)
8002f4a8:	afa10054 	sw	at,84(sp)
8002f4ac:	afa500a8 	sw	a1,168(sp)
8002f4b0:	afa600ac 	sw	a2,172(sp)
8002f4b4:	afa700b0 	sw	a3,176(sp)
8002f4b8:	afa100b4 	sw	at,180(sp)
    env_list: &mut [Env],
    parent_id: Option<usize>,
    pri: usize,
) -> Result<EnvIndex, &'static str> {
    let node = ENV_FREE_LIST.lock().pop().expect("No more free env.");
8002f4bc:	3c018105 	lui	at,0x8105
8002f4c0:	24240960 	addiu	a0,at,2400
8002f4c4:	0c00db08 	jal	80036c20 <_ZN73_$LT$mos_6502..proc..ENV_FREE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf688f55e10c51cccE>
8002f4c8:	00000000 	nop
8002f4cc:	00402025 	move	a0,v0
8002f4d0:	0c00a09c 	jal	80028270 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E>
8002f4d4:	00000000 	nop
8002f4d8:	afa2006c 	sw	v0,108(sp)
8002f4dc:	27a4006c 	addiu	a0,sp,108
8002f4e0:	afa40058 	sw	a0,88(sp)
8002f4e4:	0c00ad19 	jal	8002b464 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hdb38b7a74b019393E>
8002f4e8:	00000000 	nop
8002f4ec:	00402025 	move	a0,v0
8002f4f0:	0c00d758 	jal	80035d60 <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E>
8002f4f4:	00000000 	nop
8002f4f8:	00402025 	move	a0,v0
8002f4fc:	3c018105 	lui	at,0x8105
8002f500:	2425fb24 	addiu	a1,at,-1244
8002f504:	3c018105 	lui	at,0x8105
8002f508:	2427fb38 	addiu	a3,at,-1224
8002f50c:	24060011 	li	a2,17
8002f510:	0c009793 	jal	80025e4c <_ZN4core6option15Option$LT$T$GT$6expect17hf6026ccf2c3cb960E>
8002f514:	00000000 	nop
8002f518:	8fa40058 	lw	a0,88(sp)
8002f51c:	afa20068 	sw	v0,104(sp)
8002f520:	0c008cff 	jal	800233fc <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17hde8d744f358f0af3E>
8002f524:	00000000 	nop
8002f528:	27a10068 	addiu	at,sp,104
8002f52c:	afa100dc 	sw	at,220(sp)
8002f530:	afa100e0 	sw	at,224(sp)
8002f534:	afa100e4 	sw	at,228(sp)
8002f538:	8fa10068 	lw	at,104(sp)
8002f53c:	afa100ec 	sw	at,236(sp)
8002f540:	afa100e8 	sw	at,232(sp)
8002f544:	24240008 	addiu	a0,at,8
    let idx = node.borrow().idx;
8002f548:	3c018105 	lui	at,0x8105
8002f54c:	2425fb48 	addiu	a1,at,-1208
8002f550:	0c008fb1 	jal	80023ec4 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h31d02da70f533516E>
8002f554:	00000000 	nop
8002f558:	afa20070 	sw	v0,112(sp)
8002f55c:	afa30074 	sw	v1,116(sp)
8002f560:	27a40070 	addiu	a0,sp,112
8002f564:	afa4005c 	sw	a0,92(sp)
8002f568:	0c00a9a2 	jal	8002a688 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h12904436a148d5f6E>
8002f56c:	00000000 	nop
8002f570:	8fa4005c 	lw	a0,92(sp)
8002f574:	8c410008 	lw	at,8(v0)
8002f578:	afa10064 	sw	at,100(sp)
8002f57c:	afa100b8 	sw	at,184(sp)
8002f580:	0c008c03 	jal	8002300c <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d4641e92d4d8a17E>
8002f584:	00000000 	nop
8002f588:	8fa60060 	lw	a2,96(sp)
8002f58c:	8fa10064 	lw	at,100(sp)
    let env = &mut env_list[idx];
8002f590:	0026082b 	sltu	at,at,a2
8002f594:	10200049 	beqz	at,8002f6bc <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x23c>
8002f598:	00000000 	nop
8002f59c:	0800bd69 	j	8002f5a4 <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x124>
8002f5a0:	00000000 	nop
8002f5a4:	8fa40064 	lw	a0,100(sp)
8002f5a8:	8fa10044 	lw	at,68(sp)
8002f5ac:	00041880 	sll	v1,a0,0x2
8002f5b0:	00041140 	sll	v0,a0,0x5
8002f5b4:	00431821 	addu	v1,v0,v1
8002f5b8:	00041200 	sll	v0,a0,0x8
8002f5bc:	00431023 	subu	v0,v0,v1
8002f5c0:	00221021 	addu	v0,at,v0
8002f5c4:	afa2003c 	sw	v0,60(sp)
8002f5c8:	afa200bc 	sw	v0,188(sp)
8002f5cc:	24010001 	li	at,1
    env.env_status = EnvStatus::Runnable;
8002f5d0:	afa10078 	sw	at,120(sp)
8002f5d4:	8fa10078 	lw	at,120(sp)
8002f5d8:	ac4100ac 	sw	at,172(v0)
    env.env_id = mkenvid(idx);
8002f5dc:	0c00bc14 	jal	8002f050 <_ZN8mos_65024proc7mkenvid17hc3dcd6c3977e3369E>
8002f5e0:	00000000 	nop
8002f5e4:	8fa1003c 	lw	at,60(sp)
8002f5e8:	ac2200a0 	sw	v0,160(at)
8002f5ec:	27a4007c 	addiu	a0,sp,124
8002f5f0:	afa40038 	sw	a0,56(sp)
    env.env_asid = asid_alloc().expect("No more free asid.");
8002f5f4:	0c00bc5c 	jal	8002f170 <_ZN8mos_65024proc10asid_alloc17hae6ce0facd06fdd7E>
8002f5f8:	00000000 	nop
8002f5fc:	8fa40038 	lw	a0,56(sp)
8002f600:	3c018105 	lui	at,0x8105
8002f604:	2425fad0 	addiu	a1,at,-1328
8002f608:	3c018105 	lui	at,0x8105
8002f60c:	2427fb68 	addiu	a3,at,-1176
8002f610:	24060012 	li	a2,18
8002f614:	0c0097ea 	jal	80025fa8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h509b82d8130b07b7E>
8002f618:	00000000 	nop
8002f61c:	8fa40040 	lw	a0,64(sp)
8002f620:	8fa50054 	lw	a1,84(sp)
8002f624:	8fa1003c 	lw	at,60(sp)
8002f628:	ac2200a4 	sw	v0,164(at)
8002f62c:	24060000 	li	a2,0
    env.env_parent_id = parent_id.unwrap_or(0);
8002f630:	0c00f9ad 	jal	8003e6b4 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE>
8002f634:	00000000 	nop
8002f638:	8fa10050 	lw	at,80(sp)
8002f63c:	00401825 	move	v1,v0
8002f640:	8fa2003c 	lw	v0,60(sp)
8002f644:	ac4300a8 	sw	v1,168(v0)
    env.env_runs = 0;
8002f648:	ac4000d8 	sw	zero,216(v0)
    env.env_pri = pri;
8002f64c:	ac4100bc 	sw	at,188(v0)
    env.env_cur_runs = pri as isize;
8002f650:	ac4100b8 	sw	at,184(v0)
    let pre_table = PRE_PGTABLE.lock();
8002f654:	3c018105 	lui	at,0x8105
8002f658:	24240960 	addiu	a0,at,2400
8002f65c:	0c00db38 	jal	80036ce0 <_ZN71_$LT$mos_6502..proc..PRE_PGTABLE$u20$as$u20$core..ops..deref..Deref$GT$5deref17h26227155109f16b6E>
8002f660:	00000000 	nop
8002f664:	00402025 	move	a0,v0
8002f668:	0c00a052 	jal	80028148 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h0aafc755bded502eE>
8002f66c:	00000000 	nop
8002f670:	afa20084 	sw	v0,132(sp)
8002f674:	3c018105 	lui	at,0x8105
8002f678:	2421f164 	addiu	at,at,-3740
8002f67c:	afa100f8 	sw	at,248(sp)
8002f680:	3c018105 	lui	at,0x8105
8002f684:	2421f16c 	addiu	at,at,-3732
8002f688:	afa100f4 	sw	at,244(sp)
8002f68c:	240101fd 	li	at,509
    for i in (UTOP.get_vpn() >> 10)..(UVPT.get_vpn() >> 10) {
8002f690:	afa10088 	sw	at,136(sp)
8002f694:	240101ff 	li	at,511
8002f698:	afa1008c 	sw	at,140(sp)
8002f69c:	8fa40088 	lw	a0,136(sp)
8002f6a0:	8fa5008c 	lw	a1,140(sp)
8002f6a4:	0c012cc7 	jal	8004b31c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
8002f6a8:	00000000 	nop
8002f6ac:	afa20090 	sw	v0,144(sp)
8002f6b0:	afa30094 	sw	v1,148(sp)
8002f6b4:	0800bdb5 	j	8002f6d4 <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x254>
8002f6b8:	00000000 	nop
    let env = &mut env_list[idx];
8002f6bc:	8fa50060 	lw	a1,96(sp)
8002f6c0:	8fa40064 	lw	a0,100(sp)
8002f6c4:	3c018105 	lui	at,0x8105
8002f6c8:	2426fb58 	addiu	a2,at,-1192
8002f6cc:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002f6d0:	00000000 	nop
8002f6d4:	27a40090 	addiu	a0,sp,144
    for i in (UTOP.get_vpn() >> 10)..(UVPT.get_vpn() >> 10) {
8002f6d8:	0c012cbe 	jal	8004b2f8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
8002f6dc:	00000000 	nop
8002f6e0:	afa20098 	sw	v0,152(sp)
8002f6e4:	afa3009c 	sw	v1,156(sp)
8002f6e8:	8fa10098 	lw	at,152(sp)
8002f6ec:	1420000d 	bnez	at,8002f724 <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x2a4>
8002f6f0:	00000000 	nop
8002f6f4:	0800bdbf 	j	8002f6fc <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x27c>
8002f6f8:	00000000 	nop
8002f6fc:	3c018105 	lui	at,0x8105
8002f700:	2421f16c 	addiu	at,at,-3732
8002f704:	afa100f0 	sw	at,240(sp)
8002f708:	240101ff 	li	at,511
8002f70c:	afa10034 	sw	at,52(sp)
8002f710:	24010001 	li	at,1
        env.env_pgdir.entries[i].raw_entry = pre_table.entries[i].raw_entry;
    }
    env.env_pgdir.entries[UVPT.get_vpn() >> 10].set(
8002f714:	14200010 	bnez	at,8002f758 <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x2d8>
8002f718:	00000000 	nop
8002f71c:	0800be03 	j	8002f80c <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x38c>
8002f720:	00000000 	nop
    for i in (UTOP.get_vpn() >> 10)..(UVPT.get_vpn() >> 10) {
8002f724:	8fa1009c 	lw	at,156(sp)
8002f728:	afa1002c 	sw	at,44(sp)
8002f72c:	afa100d0 	sw	at,208(sp)
8002f730:	27a40084 	addiu	a0,sp,132
        env.env_pgdir.entries[i].raw_entry = pre_table.entries[i].raw_entry;
8002f734:	0c00ac80 	jal	8002b200 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9a07ed8296fc0677E>
8002f738:	00000000 	nop
8002f73c:	8fa1002c 	lw	at,44(sp)
8002f740:	afa20030 	sw	v0,48(sp)
8002f744:	2c210400 	sltiu	at,at,1024
8002f748:	14200036 	bnez	at,8002f824 <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x3a4>
8002f74c:	00000000 	nop
8002f750:	0800be13 	j	8002f84c <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x3cc>
8002f754:	00000000 	nop
    env.env_pgdir.entries[UVPT.get_vpn() >> 10].set(
8002f758:	8fa10034 	lw	at,52(sp)
8002f75c:	8fa2003c 	lw	v0,60(sp)
8002f760:	8c4400b0 	lw	a0,176(v0)
8002f764:	00010880 	sll	at,at,0x2
8002f768:	00810821 	addu	at,a0,at
8002f76c:	afa10028 	sw	at,40(sp)
8002f770:	afa400d4 	sw	a0,212(sp)
8002f774:	24010400 	li	at,1024
8002f778:	afa100d8 	sw	at,216(sp)
        kva_to_pa(VirtAddr::from(env.env_pgdir.entries.as_ptr() as usize)),
8002f77c:	0c00af03 	jal	8002bc0c <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h3e418a96ab495ffdE>
8002f780:	00000000 	nop
8002f784:	afa200c0 	sw	v0,192(sp)
8002f788:	8fa100c0 	lw	at,192(sp)
8002f78c:	afa100a4 	sw	at,164(sp)
8002f790:	8fa100a4 	lw	at,164(sp)
8002f794:	afa100c4 	sw	at,196(sp)
8002f798:	8fa400c4 	lw	a0,196(sp)
8002f79c:	0c00af24 	jal	8002bc90 <_ZN8mos_65022mm4addr9kva_to_pa17hbce4a505e0faf2e7E>
8002f7a0:	00000000 	nop
8002f7a4:	8fa40028 	lw	a0,40(sp)
8002f7a8:	afa200c8 	sw	v0,200(sp)
8002f7ac:	8fa100c8 	lw	at,200(sp)
8002f7b0:	afa100a0 	sw	at,160(sp)
    env.env_pgdir.entries[UVPT.get_vpn() >> 10].set(
8002f7b4:	8fa100a0 	lw	at,160(sp)
8002f7b8:	afa100cc 	sw	at,204(sp)
8002f7bc:	8fa500cc 	lw	a1,204(sp)
8002f7c0:	3c018105 	lui	at,0x8105
8002f7c4:	2426f170 	addiu	a2,at,-3728
8002f7c8:	0c00b183 	jal	8002c60c <_ZN8mos_65022mm7pgtable12PgtableEntry3set17he1a2392412c78be3E>
8002f7cc:	00000000 	nop
8002f7d0:	8fa20064 	lw	v0,100(sp)
8002f7d4:	8fa10048 	lw	at,72(sp)
        &Permssion::PTE_V,
    );
    Ok(idx)
8002f7d8:	ac220004 	sw	v0,4(at)
8002f7dc:	ac200000 	sw	zero,0(at)
8002f7e0:	27a40084 	addiu	a0,sp,132
}
8002f7e4:	0c0086f1 	jal	80021bc4 <_ZN4core3ptr109drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$17h346a7ec989ca5186E>
8002f7e8:	00000000 	nop
8002f7ec:	27a40068 	addiu	a0,sp,104
8002f7f0:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
8002f7f4:	00000000 	nop
8002f7f8:	8fa2004c 	lw	v0,76(sp)
8002f7fc:	8fbf00fc 	lw	ra,252(sp)
8002f800:	27bd0100 	addiu	sp,sp,256
8002f804:	03e00008 	jr	ra
8002f808:	00000000 	nop
    env.env_pgdir.entries[UVPT.get_vpn() >> 10].set(
8002f80c:	8fa40034 	lw	a0,52(sp)
8002f810:	3c018105 	lui	at,0x8105
8002f814:	2426fb78 	addiu	a2,at,-1160
8002f818:	24050400 	li	a1,1024
8002f81c:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002f820:	00000000 	nop
        env.env_pgdir.entries[i].raw_entry = pre_table.entries[i].raw_entry;
8002f824:	8fa10030 	lw	at,48(sp)
8002f828:	8c210000 	lw	at,0(at)
8002f82c:	afa10020 	sw	at,32(sp)
8002f830:	00201025 	move	v0,at
8002f834:	afa20024 	sw	v0,36(sp)
8002f838:	30210fff 	andi	at,at,0xfff
8002f83c:	10200009 	beqz	at,8002f864 <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x3e4>
8002f840:	00000000 	nop
8002f844:	0800be24 	j	8002f890 <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x410>
8002f848:	00000000 	nop
8002f84c:	8fa4002c 	lw	a0,44(sp)
8002f850:	3c018105 	lui	at,0x8105
8002f854:	2426fb88 	addiu	a2,at,-1144
8002f858:	24050400 	li	a1,1024
8002f85c:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002f860:	00000000 	nop
8002f864:	8fa1002c 	lw	at,44(sp)
8002f868:	8fa20024 	lw	v0,36(sp)
8002f86c:	00011880 	sll	v1,at,0x2
8002f870:	00431021 	addu	v0,v0,v1
8002f874:	8c420000 	lw	v0,0(v0)
8002f878:	afa2001c 	sw	v0,28(sp)
8002f87c:	2c210400 	sltiu	at,at,1024
8002f880:	14200009 	bnez	at,8002f8a8 <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x428>
8002f884:	00000000 	nop
8002f888:	0800be34 	j	8002f8d0 <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x450>
8002f88c:	00000000 	nop
8002f890:	8fa50020 	lw	a1,32(sp)
8002f894:	3c018105 	lui	at,0x8105
8002f898:	2426fb88 	addiu	a2,at,-1144
8002f89c:	24041000 	li	a0,4096
8002f8a0:	0c00fc13 	jal	8003f04c <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
8002f8a4:	00000000 	nop
8002f8a8:	8fa1003c 	lw	at,60(sp)
8002f8ac:	8c2100b0 	lw	at,176(at)
8002f8b0:	afa10014 	sw	at,20(sp)
8002f8b4:	00201025 	move	v0,at
8002f8b8:	afa20018 	sw	v0,24(sp)
8002f8bc:	30210fff 	andi	at,at,0xfff
8002f8c0:	10200009 	beqz	at,8002f8e8 <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x468>
8002f8c4:	00000000 	nop
8002f8c8:	0800be42 	j	8002f908 <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x488>
8002f8cc:	00000000 	nop
8002f8d0:	8fa4002c 	lw	a0,44(sp)
8002f8d4:	3c018105 	lui	at,0x8105
8002f8d8:	2426fb98 	addiu	a2,at,-1128
8002f8dc:	24050400 	li	a1,1024
8002f8e0:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002f8e4:	00000000 	nop
8002f8e8:	8fa1001c 	lw	at,28(sp)
8002f8ec:	8fa20018 	lw	v0,24(sp)
8002f8f0:	8fa3002c 	lw	v1,44(sp)
8002f8f4:	00031880 	sll	v1,v1,0x2
8002f8f8:	00431021 	addu	v0,v0,v1
8002f8fc:	ac410000 	sw	at,0(v0)
    for i in (UTOP.get_vpn() >> 10)..(UVPT.get_vpn() >> 10) {
8002f900:	0800bdb5 	j	8002f6d4 <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E+0x254>
8002f904:	00000000 	nop
        env.env_pgdir.entries[i].raw_entry = pre_table.entries[i].raw_entry;
8002f908:	8fa50014 	lw	a1,20(sp)
8002f90c:	3c018105 	lui	at,0x8105
8002f910:	2426fb98 	addiu	a2,at,-1128
8002f914:	24041000 	li	a0,4096
8002f918:	0c00fc13 	jal	8003f04c <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
8002f91c:	00000000 	nop

8002f920 <_ZN8mos_65024proc10env_create17ha50f648f308180f3E>:

#[allow(dead_code)]
pub const DEFAULT_PRIO: usize = 1;

pub fn env_create(elf_data: &[u8], pri: usize) {
8002f920:	27bdff90 	addiu	sp,sp,-112
8002f924:	afbf006c 	sw	ra,108(sp)
8002f928:	afa60034 	sw	a2,52(sp)
8002f92c:	afa5002c 	sw	a1,44(sp)
8002f930:	afa40030 	sw	a0,48(sp)
8002f934:	afa40050 	sw	a0,80(sp)
8002f938:	afa50054 	sw	a1,84(sp)
8002f93c:	afa60058 	sw	a2,88(sp)
    let mut locked_env_list = ENV_LIST.lock();
8002f940:	3c018105 	lui	at,0x8105
8002f944:	24240960 	addiu	a0,at,2400
8002f948:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
8002f94c:	00000000 	nop
8002f950:	00402025 	move	a0,v0
8002f954:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
8002f958:	00000000 	nop
8002f95c:	afa20038 	sw	v0,56(sp)
    let mut env_sched_list = ENV_SCHED_LIST.lock();
8002f960:	3c018105 	lui	at,0x8105
8002f964:	24240960 	addiu	a0,at,2400
8002f968:	0c00db14 	jal	80036c50 <_ZN74_$LT$mos_6502..proc..ENV_SCHED_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb461aaf754aa1f00E>
8002f96c:	00000000 	nop
8002f970:	00402025 	move	a0,v0
8002f974:	0c00a09c 	jal	80028270 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E>
8002f978:	00000000 	nop
8002f97c:	afa2003c 	sw	v0,60(sp)
8002f980:	27a40038 	addiu	a0,sp,56
    let env_idx = env_alloc(&mut locked_env_list, None, pri).unwrap();
8002f984:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
8002f988:	00000000 	nop
8002f98c:	00402025 	move	a0,v0
8002f990:	0c00aaf4 	jal	8002abd0 <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc7f3352224ecbc79E>
8002f994:	00000000 	nop
8002f998:	00402825 	move	a1,v0
8002f99c:	00603025 	move	a2,v1
8002f9a0:	8fa30034 	lw	v1,52(sp)
8002f9a4:	afa00048 	sw	zero,72(sp)
8002f9a8:	8fa70048 	lw	a3,72(sp)
8002f9ac:	8fa1004c 	lw	at,76(sp)
8002f9b0:	03a01025 	move	v0,sp
8002f9b4:	ac430014 	sw	v1,20(v0)
8002f9b8:	ac410010 	sw	at,16(v0)
8002f9bc:	27a40040 	addiu	a0,sp,64
8002f9c0:	0c00bd20 	jal	8002f480 <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E>
8002f9c4:	00000000 	nop
        match self {
8002f9c8:	8fa10040 	lw	at,64(sp)
8002f9cc:	10200013 	beqz	at,8002fa1c <_ZN8mos_65024proc10env_create17ha50f648f308180f3E+0xfc>
8002f9d0:	00000000 	nop
8002f9d4:	0800be77 	j	8002f9dc <_ZN8mos_65024proc10env_create17ha50f648f308180f3E+0xbc>
8002f9d8:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002f9dc:	8fa20040 	lw	v0,64(sp)
8002f9e0:	8fa10044 	lw	at,68(sp)
8002f9e4:	afa20060 	sw	v0,96(sp)
8002f9e8:	afa10064 	sw	at,100(sp)
8002f9ec:	3c018105 	lui	at,0x8105
8002f9f0:	2421fba8 	addiu	at,at,-1112
8002f9f4:	03a01025 	move	v0,sp
8002f9f8:	ac410010 	sw	at,16(v0)
8002f9fc:	3c018105 	lui	at,0x8105
8002fa00:	2424ebfc 	addiu	a0,at,-5124
8002fa04:	3c018105 	lui	at,0x8105
8002fa08:	2427ebec 	addiu	a3,at,-5140
8002fa0c:	2405002b 	li	a1,43
8002fa10:	27a60060 	addiu	a2,sp,96
8002fa14:	0c00fdba 	jal	8003f6e8 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002fa18:	00000000 	nop
            Ok(t) => t,
8002fa1c:	8fa10044 	lw	at,68(sp)
8002fa20:	afa1001c 	sw	at,28(sp)
8002fa24:	afa10068 	sw	at,104(sp)
8002fa28:	afa1005c 	sw	at,92(sp)
8002fa2c:	27a40038 	addiu	a0,sp,56
8002fa30:	afa40028 	sw	a0,40(sp)
    locked_env_list[env_idx].create(elf_data);
8002fa34:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
8002fa38:	00000000 	nop
8002fa3c:	8fa5001c 	lw	a1,28(sp)
8002fa40:	00402025 	move	a0,v0
8002fa44:	3c018105 	lui	at,0x8105
8002fa48:	2426fbb8 	addiu	a2,at,-1096
8002fa4c:	0c00ad35 	jal	8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>
8002fa50:	00000000 	nop
8002fa54:	8fa50030 	lw	a1,48(sp)
8002fa58:	8fa6002c 	lw	a2,44(sp)
8002fa5c:	00402025 	move	a0,v0
8002fa60:	0c00b8b1 	jal	8002e2c4 <_ZN8mos_65024proc3Env6create17h168a6349cac0e288E>
8002fa64:	00000000 	nop
8002fa68:	27a4003c 	addiu	a0,sp,60
8002fa6c:	afa40024 	sw	a0,36(sp)
    env_sched_list.insert_to_head(locked_env_list[env_idx].env_sched_link.clone());
8002fa70:	0c00ad19 	jal	8002b464 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hdb38b7a74b019393E>
8002fa74:	00000000 	nop
8002fa78:	8fa40028 	lw	a0,40(sp)
8002fa7c:	afa20020 	sw	v0,32(sp)
8002fa80:	0c00ac79 	jal	8002b1e4 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h990db7d0b83dd2d1E>
8002fa84:	00000000 	nop
8002fa88:	8fa5001c 	lw	a1,28(sp)
8002fa8c:	00402025 	move	a0,v0
8002fa90:	3c018105 	lui	at,0x8105
8002fa94:	2426fbc8 	addiu	a2,at,-1080
8002fa98:	0c00accc 	jal	8002b330 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hba386fd63984b7c3E>
8002fa9c:	00000000 	nop
8002faa0:	244400b4 	addiu	a0,v0,180
8002faa4:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
8002faa8:	00000000 	nop
8002faac:	8fa40020 	lw	a0,32(sp)
8002fab0:	00402825 	move	a1,v0
8002fab4:	0c00d50f 	jal	8003543c <_ZN8mos_65024util16DoubleLinkedList14insert_to_head17he04e3b5f63e49db2E>
8002fab8:	00000000 	nop
8002fabc:	8fa40024 	lw	a0,36(sp)
}
8002fac0:	0c008cff 	jal	800233fc <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17hde8d744f358f0af3E>
8002fac4:	00000000 	nop
8002fac8:	8fa40028 	lw	a0,40(sp)
8002facc:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
8002fad0:	00000000 	nop
8002fad4:	8fbf006c 	lw	ra,108(sp)
8002fad8:	27bd0070 	addiu	sp,sp,112
8002fadc:	03e00008 	jr	ra
8002fae0:	00000000 	nop

8002fae4 <_ZN8mos_65024trap3int12do_interrupt17he68757a120f1237dE>:
use mips32::{
    cp0::{sr, ST_IE, ST_IM7},
    Reg,
};

pub(super) fn do_interrupt(trapframe: &mut Trapframe) {
8002fae4:	27bdffa0 	addiu	sp,sp,-96
8002fae8:	afbf005c 	sw	ra,92(sp)
8002faec:	afa40040 	sw	a0,64(sp)
8002faf0:	afa40058 	sw	a0,88(sp)
        self.cause
8002faf4:	8c810090 	lw	at,144(a0)
    let cause = trapframe.get_cause();
8002faf8:	afa1001c 	sw	at,28(sp)
    if cause & ST_IM7 != 0 {
8002fafc:	93a1001d 	lbu	at,29(sp)
8002fb00:	30210080 	andi	at,at,0x80
8002fb04:	1420001e 	bnez	at,8002fb80 <_ZN8mos_65024trap3int12do_interrupt17he68757a120f1237dE+0x9c>
8002fb08:	00000000 	nop
8002fb0c:	0800bec5 	j	8002fb14 <_ZN8mos_65024trap3int12do_interrupt17he68757a120f1237dE+0x30>
8002fb10:	00000000 	nop
8002fb14:	27a2001c 	addiu	v0,sp,28
8002fb18:	afa20044 	sw	v0,68(sp)
8002fb1c:	afa20050 	sw	v0,80(sp)
8002fb20:	3c018005 	lui	at,0x8005
8002fb24:	24219698 	addiu	at,at,-26984
8002fb28:	afa10054 	sw	at,84(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002fb2c:	afa20048 	sw	v0,72(sp)
8002fb30:	afa1004c 	sw	at,76(sp)
    }
8002fb34:	8fa20048 	lw	v0,72(sp)
8002fb38:	8fa1004c 	lw	at,76(sp)
        schedule(false);
    } else {
        panic!("do_interrupt: unexpected interrupt, cause: {:x}", cause);
8002fb3c:	afa20038 	sw	v0,56(sp)
8002fb40:	afa1003c 	sw	at,60(sp)
8002fb44:	03a00825 	move	at,sp
8002fb48:	24060001 	li	a2,1
8002fb4c:	ac260010 	sw	a2,16(at)
8002fb50:	3c018105 	lui	at,0x8105
8002fb54:	2425fc04 	addiu	a1,at,-1020
8002fb58:	27a40020 	addiu	a0,sp,32
8002fb5c:	afa40018 	sw	a0,24(sp)
8002fb60:	27a70038 	addiu	a3,sp,56
8002fb64:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
8002fb68:	00000000 	nop
8002fb6c:	8fa40018 	lw	a0,24(sp)
8002fb70:	3c018105 	lui	at,0x8105
8002fb74:	2425fc20 	addiu	a1,at,-992
8002fb78:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002fb7c:	00000000 	nop
8002fb80:	24040000 	li	a0,0
        schedule(false);
8002fb84:	0c00b622 	jal	8002d888 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E>
8002fb88:	00000000 	nop
    } 
}
8002fb8c:	8fbf005c 	lw	ra,92(sp)
8002fb90:	27bd0060 	addiu	sp,sp,96
8002fb94:	03e00008 	jr	ra
8002fb98:	00000000 	nop

8002fb9c <_ZN8mos_65024trap7syscall11sys_putchar17h0ae356c6c3dd4be5E>:
const SYS_IPC_RECV: usize = 14;
const SYS_CGETC: usize = 15;
const SYS_WRITE_DEV: usize = 16;
const SYS_READ_DEV: usize = 17;

fn sys_putchar(c: u32) -> i32 {
8002fb9c:	27bdffe0 	addiu	sp,sp,-32
8002fba0:	afbf001c 	sw	ra,28(sp)
8002fba4:	afa40014 	sw	a0,20(sp)
8002fba8:	afa40018 	sw	a0,24(sp)
    NS16550A.putchar(c);
8002fbac:	3c018105 	lui	at,0x8105
8002fbb0:	242408b8 	addiu	a0,at,2232
8002fbb4:	0c00d89f 	jal	8003627c <_ZN73_$LT$mos_6502..dev..uart..NS16550A$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bec3ccd73d84f44E>
8002fbb8:	00000000 	nop
8002fbbc:	8fa50014 	lw	a1,20(sp)
8002fbc0:	00402025 	move	a0,v0
8002fbc4:	0c00adce 	jal	8002b738 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17h5172dafc15c6e4dbE>
8002fbc8:	00000000 	nop
8002fbcc:	24020000 	li	v0,0
    0
}
8002fbd0:	8fbf001c 	lw	ra,28(sp)
8002fbd4:	27bd0020 	addiu	sp,sp,32
8002fbd8:	03e00008 	jr	ra
8002fbdc:	00000000 	nop

8002fbe0 <_ZN8mos_65024trap7syscall14sys_print_cons17h12929b6bbc15e9adE>:

fn sys_print_cons(s: VirtAddr, num: usize) -> i32 {
8002fbe0:	27bdffa8 	addiu	sp,sp,-88
8002fbe4:	afbf0054 	sw	ra,84(sp)
8002fbe8:	afa4001c 	sw	a0,28(sp)
8002fbec:	8fa1001c 	lw	at,28(sp)
8002fbf0:	afa10018 	sw	at,24(sp)
8002fbf4:	afa5003c 	sw	a1,60(sp)
    for i in 0..num {
8002fbf8:	afa00020 	sw	zero,32(sp)
8002fbfc:	afa50024 	sw	a1,36(sp)
8002fc00:	8fa40020 	lw	a0,32(sp)
8002fc04:	8fa50024 	lw	a1,36(sp)
8002fc08:	0c012cc7 	jal	8004b31c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
8002fc0c:	00000000 	nop
8002fc10:	afa20028 	sw	v0,40(sp)
8002fc14:	afa3002c 	sw	v1,44(sp)
8002fc18:	0800bf08 	j	8002fc20 <_ZN8mos_65024trap7syscall14sys_print_cons17h12929b6bbc15e9adE+0x40>
8002fc1c:	00000000 	nop
8002fc20:	27a40028 	addiu	a0,sp,40
8002fc24:	0c012cbe 	jal	8004b2f8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
8002fc28:	00000000 	nop
8002fc2c:	afa20030 	sw	v0,48(sp)
8002fc30:	afa30034 	sw	v1,52(sp)
8002fc34:	8fa10030 	lw	at,48(sp)
8002fc38:	14200008 	bnez	at,8002fc5c <_ZN8mos_65024trap7syscall14sys_print_cons17h12929b6bbc15e9adE+0x7c>
8002fc3c:	00000000 	nop
8002fc40:	0800bf12 	j	8002fc48 <_ZN8mos_65024trap7syscall14sys_print_cons17h12929b6bbc15e9adE+0x68>
8002fc44:	00000000 	nop
8002fc48:	24020000 	li	v0,0
        NS16550A.putchar(s.add(i).read::<u8>() as u32);
    }
    0
}
8002fc4c:	8fbf0054 	lw	ra,84(sp)
8002fc50:	27bd0058 	addiu	sp,sp,88
8002fc54:	03e00008 	jr	ra
8002fc58:	00000000 	nop
    for i in 0..num {
8002fc5c:	8fa10034 	lw	at,52(sp)
8002fc60:	afa10010 	sw	at,16(sp)
8002fc64:	afa10040 	sw	at,64(sp)
        NS16550A.putchar(s.add(i).read::<u8>() as u32);
8002fc68:	3c018105 	lui	at,0x8105
8002fc6c:	242408b8 	addiu	a0,at,2232
8002fc70:	0c00d89f 	jal	8003627c <_ZN73_$LT$mos_6502..dev..uart..NS16550A$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bec3ccd73d84f44E>
8002fc74:	00000000 	nop
8002fc78:	8fa50010 	lw	a1,16(sp)
8002fc7c:	afa20014 	sw	v0,20(sp)
8002fc80:	8fa10018 	lw	at,24(sp)
8002fc84:	afa10044 	sw	at,68(sp)
8002fc88:	8fa10044 	lw	at,68(sp)
8002fc8c:	afa10048 	sw	at,72(sp)
8002fc90:	8fa40048 	lw	a0,72(sp)
8002fc94:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
8002fc98:	00000000 	nop
8002fc9c:	afa2004c 	sw	v0,76(sp)
8002fca0:	8fa1004c 	lw	at,76(sp)
8002fca4:	afa10038 	sw	at,56(sp)
8002fca8:	27a10038 	addiu	at,sp,56
8002fcac:	afa10050 	sw	at,80(sp)
8002fcb0:	24010001 	li	at,1
        assert!(self.raw % align_of::<T>() == 0);
8002fcb4:	14200007 	bnez	at,8002fcd4 <_ZN8mos_65024trap7syscall14sys_print_cons17h12929b6bbc15e9adE+0xf4>
8002fcb8:	00000000 	nop
8002fcbc:	0800bf31 	j	8002fcc4 <_ZN8mos_65024trap7syscall14sys_print_cons17h12929b6bbc15e9adE+0xe4>
8002fcc0:	00000000 	nop
8002fcc4:	3c018105 	lui	at,0x8105
8002fcc8:	2424f2d0 	addiu	a0,at,-3376
8002fccc:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
8002fcd0:	00000000 	nop
        unsafe { ptr::read(self.raw as *const T) }
8002fcd4:	8fa40038 	lw	a0,56(sp)
8002fcd8:	0c00f00b 	jal	8003c02c <_ZN4core3ptr4read17h577826971f2136a4E>
8002fcdc:	00000000 	nop
8002fce0:	8fa40014 	lw	a0,20(sp)
8002fce4:	304500ff 	andi	a1,v0,0xff
8002fce8:	0c00adce 	jal	8002b738 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17h5172dafc15c6e4dbE>
8002fcec:	00000000 	nop
8002fcf0:	0800bf08 	j	8002fc20 <_ZN8mos_65024trap7syscall14sys_print_cons17h12929b6bbc15e9adE+0x40>
8002fcf4:	00000000 	nop

8002fcf8 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E>:

extern "C" fn sys_write_dev(va: VirtAddr, pa: PhysAddr, len: usize) -> i32 {
8002fcf8:	27bdff00 	addiu	sp,sp,-256
8002fcfc:	afbf00fc 	sw	ra,252(sp)
8002fd00:	afa60038 	sw	a2,56(sp)
8002fd04:	afa40040 	sw	a0,64(sp)
8002fd08:	8fa10040 	lw	at,64(sp)
8002fd0c:	afa1003c 	sw	at,60(sp)
8002fd10:	afa50048 	sw	a1,72(sp)
8002fd14:	8fa10048 	lw	at,72(sp)
8002fd18:	afa10044 	sw	at,68(sp)
8002fd1c:	afa60070 	sw	a2,112(sp)
    if is_illegal_va_range(va, len) || is_illegal_dev_range(pa, len) || va % len != 0 {
8002fd20:	8fa1003c 	lw	at,60(sp)
8002fd24:	afa10050 	sw	at,80(sp)
8002fd28:	8fa10050 	lw	at,80(sp)
8002fd2c:	afa10074 	sw	at,116(sp)
8002fd30:	8fa10074 	lw	at,116(sp)
8002fd34:	afa100d0 	sw	at,208(sp)
8002fd38:	8fa100d0 	lw	at,208(sp)
8002fd3c:	afa100cc 	sw	at,204(sp)
8002fd40:	afa600e8 	sw	a2,232(sp)
    true
}

#[inline(always)]
fn is_illegal_va_range(va: VirtAddr, len: usize) -> bool {
    if len == 0 {
8002fd44:	14c00007 	bnez	a2,8002fd64 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x6c>
8002fd48:	00000000 	nop
8002fd4c:	0800bf55 	j	8002fd54 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x5c>
8002fd50:	00000000 	nop
8002fd54:	24010000 	li	at,0
        return false;
8002fd58:	a3a000d7 	sb	zero,215(sp)
    }
    (va + len) < va || va < UTEMP || (va + len) > UTOP
}
8002fd5c:	0800bf8c 	j	8002fe30 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x138>
8002fd60:	00000000 	nop
    (va + len) < va || va < UTEMP || (va + len) > UTOP
8002fd64:	8fa50038 	lw	a1,56(sp)
8002fd68:	8fa100cc 	lw	at,204(sp)
8002fd6c:	afa100dc 	sw	at,220(sp)
8002fd70:	8fa100dc 	lw	at,220(sp)
8002fd74:	afa100ec 	sw	at,236(sp)
8002fd78:	8fa400ec 	lw	a0,236(sp)
8002fd7c:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
8002fd80:	00000000 	nop
8002fd84:	afa200f0 	sw	v0,240(sp)
8002fd88:	8fa100f0 	lw	at,240(sp)
8002fd8c:	afa100d8 	sw	at,216(sp)
8002fd90:	27a400d8 	addiu	a0,sp,216
8002fd94:	27a500cc 	addiu	a1,sp,204
8002fd98:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
8002fd9c:	00000000 	nop
8002fda0:	1440000c 	bnez	v0,8002fdd4 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0xdc>
8002fda4:	00000000 	nop
8002fda8:	0800bf6c 	j	8002fdb0 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0xb8>
8002fdac:	00000000 	nop
8002fdb0:	3c018105 	lui	at,0x8105
8002fdb4:	2425f180 	addiu	a1,at,-3712
8002fdb8:	27a400cc 	addiu	a0,sp,204
8002fdbc:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
8002fdc0:	00000000 	nop
8002fdc4:	10400007 	beqz	v0,8002fde4 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0xec>
8002fdc8:	00000000 	nop
8002fdcc:	0800bf75 	j	8002fdd4 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0xdc>
8002fdd0:	00000000 	nop
8002fdd4:	24010001 	li	at,1
8002fdd8:	a3a100d7 	sb	at,215(sp)
8002fddc:	0800bf8c 	j	8002fe30 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x138>
8002fde0:	00000000 	nop
8002fde4:	8fa50038 	lw	a1,56(sp)
8002fde8:	8fa100cc 	lw	at,204(sp)
8002fdec:	afa100e4 	sw	at,228(sp)
8002fdf0:	8fa100e4 	lw	at,228(sp)
8002fdf4:	afa100f4 	sw	at,244(sp)
8002fdf8:	8fa400f4 	lw	a0,244(sp)
8002fdfc:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
8002fe00:	00000000 	nop
8002fe04:	afa200f8 	sw	v0,248(sp)
8002fe08:	8fa100f8 	lw	at,248(sp)
8002fe0c:	afa100e0 	sw	at,224(sp)
8002fe10:	3c018105 	lui	at,0x8105
8002fe14:	2425f164 	addiu	a1,at,-3740
8002fe18:	27a400e0 	addiu	a0,sp,224
8002fe1c:	0c008285 	jal	80020a14 <_ZN4core3cmp10PartialOrd2gt17hd797d3773830092dE>
8002fe20:	00000000 	nop
8002fe24:	a3a200d7 	sb	v0,215(sp)
8002fe28:	0800bf8c 	j	8002fe30 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x138>
8002fe2c:	00000000 	nop
}
8002fe30:	93a100d7 	lbu	at,215(sp)
8002fe34:	30210001 	andi	at,at,0x1
    if is_illegal_va_range(va, len) || is_illegal_dev_range(pa, len) || va % len != 0 {
8002fe38:	1420000f 	bnez	at,8002fe78 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x180>
8002fe3c:	00000000 	nop
8002fe40:	0800bf92 	j	8002fe48 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x150>
8002fe44:	00000000 	nop
8002fe48:	8fa50038 	lw	a1,56(sp)
8002fe4c:	8fa10044 	lw	at,68(sp)
8002fe50:	afa10078 	sw	at,120(sp)
8002fe54:	8fa10078 	lw	at,120(sp)
8002fe58:	afa1007c 	sw	at,124(sp)
8002fe5c:	8fa4007c 	lw	a0,124(sp)
8002fe60:	0c00cc15 	jal	80033054 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E>
8002fe64:	00000000 	nop
8002fe68:	10400007 	beqz	v0,8002fe88 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x190>
8002fe6c:	00000000 	nop
8002fe70:	0800bf9e 	j	8002fe78 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x180>
8002fe74:	00000000 	nop
8002fe78:	2401fffd 	li	at,-3
        return -E_INVAL;
8002fe7c:	afa1004c 	sw	at,76(sp)
8002fe80:	0800c0be 	j	800302f8 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x600>
8002fe84:	00000000 	nop
    if is_illegal_va_range(va, len) || is_illegal_dev_range(pa, len) || va % len != 0 {
8002fe88:	8fa50038 	lw	a1,56(sp)
8002fe8c:	8fa1003c 	lw	at,60(sp)
8002fe90:	afa10054 	sw	at,84(sp)
8002fe94:	8fa10054 	lw	at,84(sp)
8002fe98:	afa10080 	sw	at,128(sp)
8002fe9c:	8fa40080 	lw	a0,128(sp)
8002fea0:	0c00ae92 	jal	8002ba48 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17h187d6858e05b6d9bE>
8002fea4:	00000000 	nop
8002fea8:	1440fff3 	bnez	v0,8002fe78 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x180>
8002feac:	00000000 	nop
8002feb0:	0800bfae 	j	8002feb8 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x1c0>
8002feb4:	00000000 	nop
8002feb8:	8fa10038 	lw	at,56(sp)
8002febc:	24020004 	li	v0,4
    if len == 4 {
8002fec0:	14220062 	bne	at,v0,8003004c <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x354>
8002fec4:	00000000 	nop
8002fec8:	0800bfb4 	j	8002fed0 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x1d8>
8002fecc:	00000000 	nop
        pa.add(KSEG1.raw).write_volatile::<u32>(va.read::<u32>());
8002fed0:	3c018105 	lui	at,0x8105
8002fed4:	8c21f174 	lw	at,-3724(at)
8002fed8:	afa1005c 	sw	at,92(sp)
8002fedc:	8fa5005c 	lw	a1,92(sp)
8002fee0:	8fa10044 	lw	at,68(sp)
8002fee4:	afa10084 	sw	at,132(sp)
8002fee8:	8fa10084 	lw	at,132(sp)
8002feec:	afa10088 	sw	at,136(sp)
8002fef0:	8fa40088 	lw	a0,136(sp)
8002fef4:	0c00aeaa 	jal	8002baa8 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17h799630bd0af6cd94E>
8002fef8:	00000000 	nop
8002fefc:	afa2008c 	sw	v0,140(sp)
8002ff00:	8fa1008c 	lw	at,140(sp)
8002ff04:	afa10058 	sw	at,88(sp)
8002ff08:	27a1003c 	addiu	at,sp,60
8002ff0c:	afa100a8 	sw	at,168(sp)
        assert!(self.raw % align_of::<T>() == 0);
8002ff10:	8fa1003c 	lw	at,60(sp)
8002ff14:	afa10034 	sw	at,52(sp)
8002ff18:	24010000 	li	at,0
8002ff1c:	14000009 	bnez	zero,8002ff44 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x24c>
8002ff20:	00000000 	nop
8002ff24:	0800bfcb 	j	8002ff2c <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x234>
8002ff28:	00000000 	nop
8002ff2c:	8fa10034 	lw	at,52(sp)
8002ff30:	30210003 	andi	at,at,0x3
8002ff34:	1020000e 	beqz	at,8002ff70 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x278>
8002ff38:	00000000 	nop
8002ff3c:	0800bfd5 	j	8002ff54 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x25c>
8002ff40:	00000000 	nop
8002ff44:	3c018105 	lui	at,0x8105
8002ff48:	2424f2d0 	addiu	a0,at,-3376
8002ff4c:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
8002ff50:	00000000 	nop
8002ff54:	3c018105 	lui	at,0x8105
8002ff58:	2424f28c 	addiu	a0,at,-3444
8002ff5c:	3c018105 	lui	at,0x8105
8002ff60:	2426f2e0 	addiu	a2,at,-3360
8002ff64:	24050031 	li	a1,49
8002ff68:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
8002ff6c:	00000000 	nop
        unsafe { ptr::read(self.raw as *const T) }
8002ff70:	8fa4003c 	lw	a0,60(sp)
8002ff74:	0c008a13 	jal	8002284c <_ZN4core3ptr4read17h531425267a03d82aE>
8002ff78:	00000000 	nop
8002ff7c:	00400825 	move	at,v0
8002ff80:	afa1002c 	sw	at,44(sp)
8002ff84:	27a10058 	addiu	at,sp,88
8002ff88:	afa100bc 	sw	at,188(sp)
8002ff8c:	afa200c0 	sw	v0,192(sp)
            assert!(self.raw % align_of::<T>() == 0 && self.raw % core::mem::size_of::<T>() == 0);
8002ff90:	8fa10058 	lw	at,88(sp)
8002ff94:	afa10030 	sw	at,48(sp)
8002ff98:	24010000 	li	at,0
8002ff9c:	14000009 	bnez	zero,8002ffc4 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x2cc>
8002ffa0:	00000000 	nop
8002ffa4:	0800bfeb 	j	8002ffac <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x2b4>
8002ffa8:	00000000 	nop
8002ffac:	8fa10030 	lw	at,48(sp)
8002ffb0:	30210003 	andi	at,at,0x3
8002ffb4:	10200007 	beqz	at,8002ffd4 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x2dc>
8002ffb8:	00000000 	nop
8002ffbc:	0800bffc 	j	8002fff0 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x2f8>
8002ffc0:	00000000 	nop
8002ffc4:	3c018105 	lui	at,0x8105
8002ffc8:	2424f300 	addiu	a0,at,-3328
8002ffcc:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
8002ffd0:	00000000 	nop
8002ffd4:	8fa10058 	lw	at,88(sp)
8002ffd8:	afa10028 	sw	at,40(sp)
8002ffdc:	24010000 	li	at,0
8002ffe0:	14000010 	bnez	zero,80030024 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x32c>
8002ffe4:	00000000 	nop
8002ffe8:	0800c003 	j	8003000c <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x314>
8002ffec:	00000000 	nop
8002fff0:	3c018105 	lui	at,0x8105
8002fff4:	2424f320 	addiu	a0,at,-3296
8002fff8:	3c018105 	lui	at,0x8105
8002fffc:	2426f380 	addiu	a2,at,-3200
80030000:	2405005e 	li	a1,94
80030004:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80030008:	00000000 	nop
8003000c:	8fa10028 	lw	at,40(sp)
80030010:	30210003 	andi	at,at,0x3
80030014:	10200007 	beqz	at,80030034 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x33c>
80030018:	00000000 	nop
8003001c:	0800bffc 	j	8002fff0 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x2f8>
80030020:	00000000 	nop
80030024:	3c018105 	lui	at,0x8105
80030028:	2424f310 	addiu	a0,at,-3312
8003002c:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80030030:	00000000 	nop
            ptr::write_volatile(self.raw as *mut T, src);
80030034:	8fa5002c 	lw	a1,44(sp)
80030038:	8fa40058 	lw	a0,88(sp)
8003003c:	0c0088d4 	jal	80022350 <_ZN4core3ptr14write_volatile17h7e4c6947dbd2e062E>
80030040:	00000000 	nop
80030044:	0800c019 	j	80030064 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x36c>
80030048:	00000000 	nop
8003004c:	8fa10038 	lw	at,56(sp)
80030050:	24020002 	li	v0,2
    } else if len == 2 {
80030054:	10220006 	beq	at,v0,80030070 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x378>
80030058:	00000000 	nop
8003005c:	0800c07b 	j	800301ec <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x4f4>
80030060:	00000000 	nop
    0
80030064:	afa0004c 	sw	zero,76(sp)
}
80030068:	0800c0be 	j	800302f8 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x600>
8003006c:	00000000 	nop
        pa.add(KSEG1.raw).write_volatile::<u16>(va.read::<u16>());
80030070:	3c018105 	lui	at,0x8105
80030074:	8c21f174 	lw	at,-3724(at)
80030078:	afa10064 	sw	at,100(sp)
8003007c:	8fa50064 	lw	a1,100(sp)
80030080:	8fa10044 	lw	at,68(sp)
80030084:	afa10090 	sw	at,144(sp)
80030088:	8fa10090 	lw	at,144(sp)
8003008c:	afa10094 	sw	at,148(sp)
80030090:	8fa40094 	lw	a0,148(sp)
80030094:	0c00aeaa 	jal	8002baa8 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17h799630bd0af6cd94E>
80030098:	00000000 	nop
8003009c:	afa20098 	sw	v0,152(sp)
800300a0:	8fa10098 	lw	at,152(sp)
800300a4:	afa10060 	sw	at,96(sp)
800300a8:	27a1003c 	addiu	at,sp,60
800300ac:	afa100ac 	sw	at,172(sp)
        assert!(self.raw % align_of::<T>() == 0);
800300b0:	8fa1003c 	lw	at,60(sp)
800300b4:	afa10024 	sw	at,36(sp)
800300b8:	24010000 	li	at,0
800300bc:	14000009 	bnez	zero,800300e4 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x3ec>
800300c0:	00000000 	nop
800300c4:	0800c033 	j	800300cc <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x3d4>
800300c8:	00000000 	nop
800300cc:	8fa10024 	lw	at,36(sp)
800300d0:	30210001 	andi	at,at,0x1
800300d4:	1020000e 	beqz	at,80030110 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x418>
800300d8:	00000000 	nop
800300dc:	0800c03d 	j	800300f4 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x3fc>
800300e0:	00000000 	nop
800300e4:	3c018105 	lui	at,0x8105
800300e8:	2424f2d0 	addiu	a0,at,-3376
800300ec:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
800300f0:	00000000 	nop
800300f4:	3c018105 	lui	at,0x8105
800300f8:	2424f28c 	addiu	a0,at,-3444
800300fc:	3c018105 	lui	at,0x8105
80030100:	2426f2e0 	addiu	a2,at,-3360
80030104:	24050031 	li	a1,49
80030108:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
8003010c:	00000000 	nop
        unsafe { ptr::read(self.raw as *const T) }
80030110:	8fa4003c 	lw	a0,60(sp)
80030114:	0c008a3f 	jal	800228fc <_ZN4core3ptr4read17hebccfee2ef12feb0E>
80030118:	00000000 	nop
8003011c:	00400825 	move	at,v0
80030120:	afa1001c 	sw	at,28(sp)
80030124:	27a10060 	addiu	at,sp,96
80030128:	afa100b4 	sw	at,180(sp)
8003012c:	a7a200ba 	sh	v0,186(sp)
            assert!(self.raw % align_of::<T>() == 0 && self.raw % core::mem::size_of::<T>() == 0);
80030130:	8fa10060 	lw	at,96(sp)
80030134:	afa10020 	sw	at,32(sp)
80030138:	24010000 	li	at,0
8003013c:	14000009 	bnez	zero,80030164 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x46c>
80030140:	00000000 	nop
80030144:	0800c053 	j	8003014c <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x454>
80030148:	00000000 	nop
8003014c:	8fa10020 	lw	at,32(sp)
80030150:	30210001 	andi	at,at,0x1
80030154:	10200007 	beqz	at,80030174 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x47c>
80030158:	00000000 	nop
8003015c:	0800c064 	j	80030190 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x498>
80030160:	00000000 	nop
80030164:	3c018105 	lui	at,0x8105
80030168:	2424f300 	addiu	a0,at,-3328
8003016c:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80030170:	00000000 	nop
80030174:	8fa10060 	lw	at,96(sp)
80030178:	afa10018 	sw	at,24(sp)
8003017c:	24010000 	li	at,0
80030180:	14000010 	bnez	zero,800301c4 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x4cc>
80030184:	00000000 	nop
80030188:	0800c06b 	j	800301ac <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x4b4>
8003018c:	00000000 	nop
80030190:	3c018105 	lui	at,0x8105
80030194:	2424f320 	addiu	a0,at,-3296
80030198:	3c018105 	lui	at,0x8105
8003019c:	2426f380 	addiu	a2,at,-3200
800301a0:	2405005e 	li	a1,94
800301a4:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
800301a8:	00000000 	nop
800301ac:	8fa10018 	lw	at,24(sp)
800301b0:	30210001 	andi	at,at,0x1
800301b4:	10200007 	beqz	at,800301d4 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x4dc>
800301b8:	00000000 	nop
800301bc:	0800c064 	j	80030190 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x498>
800301c0:	00000000 	nop
800301c4:	3c018105 	lui	at,0x8105
800301c8:	2424f310 	addiu	a0,at,-3312
800301cc:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
800301d0:	00000000 	nop
            ptr::write_volatile(self.raw as *mut T, src);
800301d4:	8fa5001c 	lw	a1,28(sp)
800301d8:	8fa40060 	lw	a0,96(sp)
800301dc:	0c0088ba 	jal	800222e8 <_ZN4core3ptr14write_volatile17h3f8b8ee93eeaff38E>
800301e0:	00000000 	nop
800301e4:	0800c019 	j	80030064 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x36c>
800301e8:	00000000 	nop
800301ec:	8fa10038 	lw	at,56(sp)
800301f0:	24020001 	li	v0,1
    } else if len == 1 {
800301f4:	1422003c 	bne	at,v0,800302e8 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x5f0>
800301f8:	00000000 	nop
800301fc:	0800c081 	j	80030204 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x50c>
80030200:	00000000 	nop
        pa.add(KSEG1.raw).write_volatile::<u8>(va.read::<u8>());
80030204:	3c018105 	lui	at,0x8105
80030208:	8c21f174 	lw	at,-3724(at)
8003020c:	afa1006c 	sw	at,108(sp)
80030210:	8fa5006c 	lw	a1,108(sp)
80030214:	8fa10044 	lw	at,68(sp)
80030218:	afa1009c 	sw	at,156(sp)
8003021c:	8fa1009c 	lw	at,156(sp)
80030220:	afa100a0 	sw	at,160(sp)
80030224:	8fa400a0 	lw	a0,160(sp)
80030228:	0c00aeaa 	jal	8002baa8 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17h799630bd0af6cd94E>
8003022c:	00000000 	nop
80030230:	afa200a4 	sw	v0,164(sp)
80030234:	8fa100a4 	lw	at,164(sp)
80030238:	afa10068 	sw	at,104(sp)
8003023c:	27a1003c 	addiu	at,sp,60
80030240:	afa100b0 	sw	at,176(sp)
80030244:	24010001 	li	at,1
        assert!(self.raw % align_of::<T>() == 0);
80030248:	14200007 	bnez	at,80030268 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x570>
8003024c:	00000000 	nop
80030250:	0800c096 	j	80030258 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x560>
80030254:	00000000 	nop
80030258:	3c018105 	lui	at,0x8105
8003025c:	2424f2d0 	addiu	a0,at,-3376
80030260:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80030264:	00000000 	nop
        unsafe { ptr::read(self.raw as *const T) }
80030268:	8fa4003c 	lw	a0,60(sp)
8003026c:	0c00f00b 	jal	8003c02c <_ZN4core3ptr4read17h577826971f2136a4E>
80030270:	00000000 	nop
80030274:	00400825 	move	at,v0
80030278:	afa10014 	sw	at,20(sp)
8003027c:	27a10068 	addiu	at,sp,104
80030280:	afa100c4 	sw	at,196(sp)
80030284:	a3a200cb 	sb	v0,203(sp)
80030288:	24010000 	li	at,0
            assert!(self.raw % align_of::<T>() == 0 && self.raw % core::mem::size_of::<T>() == 0);
8003028c:	14000008 	bnez	zero,800302b0 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x5b8>
80030290:	00000000 	nop
80030294:	0800c0a7 	j	8003029c <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x5a4>
80030298:	00000000 	nop
8003029c:	24010000 	li	at,0
800302a0:	14000007 	bnez	zero,800302c0 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x5c8>
800302a4:	00000000 	nop
800302a8:	0800c0b4 	j	800302d0 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x5d8>
800302ac:	00000000 	nop
800302b0:	3c018105 	lui	at,0x8105
800302b4:	2424f300 	addiu	a0,at,-3328
800302b8:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
800302bc:	00000000 	nop
800302c0:	3c018105 	lui	at,0x8105
800302c4:	2424f310 	addiu	a0,at,-3312
800302c8:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
800302cc:	00000000 	nop
            ptr::write_volatile(self.raw as *mut T, src);
800302d0:	8fa50014 	lw	a1,20(sp)
800302d4:	8fa40068 	lw	a0,104(sp)
800302d8:	0c0088a0 	jal	80022280 <_ZN4core3ptr14write_volatile17h370b8971546adc90E>
800302dc:	00000000 	nop
800302e0:	0800c019 	j	80030064 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x36c>
800302e4:	00000000 	nop
800302e8:	2401fffd 	li	at,-3
        return -E_INVAL;
800302ec:	afa1004c 	sw	at,76(sp)
800302f0:	0800c0be 	j	800302f8 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E+0x600>
800302f4:	00000000 	nop
}
800302f8:	8fa2004c 	lw	v0,76(sp)
800302fc:	8fbf00fc 	lw	ra,252(sp)
80030300:	27bd0100 	addiu	sp,sp,256
80030304:	03e00008 	jr	ra
80030308:	00000000 	nop

8003030c <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE>:
extern "C" fn sys_read_dev(va: VirtAddr, pa: PhysAddr, len: usize) -> i32 {
8003030c:	27bdff00 	addiu	sp,sp,-256
80030310:	afbf00fc 	sw	ra,252(sp)
80030314:	afa60038 	sw	a2,56(sp)
80030318:	afa40040 	sw	a0,64(sp)
8003031c:	8fa10040 	lw	at,64(sp)
80030320:	afa1003c 	sw	at,60(sp)
80030324:	afa50048 	sw	a1,72(sp)
80030328:	8fa10048 	lw	at,72(sp)
8003032c:	afa10044 	sw	at,68(sp)
80030330:	afa60070 	sw	a2,112(sp)
    if is_illegal_va_range(va, len) || is_illegal_dev_range(pa, len) || va % len != 0 {
80030334:	8fa1003c 	lw	at,60(sp)
80030338:	afa10050 	sw	at,80(sp)
8003033c:	8fa10050 	lw	at,80(sp)
80030340:	afa10074 	sw	at,116(sp)
80030344:	8fa10074 	lw	at,116(sp)
80030348:	afa100d0 	sw	at,208(sp)
8003034c:	8fa100d0 	lw	at,208(sp)
80030350:	afa100cc 	sw	at,204(sp)
80030354:	afa600e8 	sw	a2,232(sp)
    if len == 0 {
80030358:	14c00007 	bnez	a2,80030378 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x6c>
8003035c:	00000000 	nop
80030360:	0800c0da 	j	80030368 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x5c>
80030364:	00000000 	nop
80030368:	24010000 	li	at,0
        return false;
8003036c:	a3a000d7 	sb	zero,215(sp)
}
80030370:	0800c111 	j	80030444 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x138>
80030374:	00000000 	nop
    (va + len) < va || va < UTEMP || (va + len) > UTOP
80030378:	8fa50038 	lw	a1,56(sp)
8003037c:	8fa100cc 	lw	at,204(sp)
80030380:	afa100dc 	sw	at,220(sp)
80030384:	8fa100dc 	lw	at,220(sp)
80030388:	afa100ec 	sw	at,236(sp)
8003038c:	8fa400ec 	lw	a0,236(sp)
80030390:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
80030394:	00000000 	nop
80030398:	afa200f0 	sw	v0,240(sp)
8003039c:	8fa100f0 	lw	at,240(sp)
800303a0:	afa100d8 	sw	at,216(sp)
800303a4:	27a400d8 	addiu	a0,sp,216
800303a8:	27a500cc 	addiu	a1,sp,204
800303ac:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
800303b0:	00000000 	nop
800303b4:	1440000c 	bnez	v0,800303e8 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0xdc>
800303b8:	00000000 	nop
800303bc:	0800c0f1 	j	800303c4 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0xb8>
800303c0:	00000000 	nop
800303c4:	3c018105 	lui	at,0x8105
800303c8:	2425f180 	addiu	a1,at,-3712
800303cc:	27a400cc 	addiu	a0,sp,204
800303d0:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
800303d4:	00000000 	nop
800303d8:	10400007 	beqz	v0,800303f8 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0xec>
800303dc:	00000000 	nop
800303e0:	0800c0fa 	j	800303e8 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0xdc>
800303e4:	00000000 	nop
800303e8:	24010001 	li	at,1
800303ec:	a3a100d7 	sb	at,215(sp)
800303f0:	0800c111 	j	80030444 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x138>
800303f4:	00000000 	nop
800303f8:	8fa50038 	lw	a1,56(sp)
800303fc:	8fa100cc 	lw	at,204(sp)
80030400:	afa100e4 	sw	at,228(sp)
80030404:	8fa100e4 	lw	at,228(sp)
80030408:	afa100f4 	sw	at,244(sp)
8003040c:	8fa400f4 	lw	a0,244(sp)
80030410:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
80030414:	00000000 	nop
80030418:	afa200f8 	sw	v0,248(sp)
8003041c:	8fa100f8 	lw	at,248(sp)
80030420:	afa100e0 	sw	at,224(sp)
80030424:	3c018105 	lui	at,0x8105
80030428:	2425f164 	addiu	a1,at,-3740
8003042c:	27a400e0 	addiu	a0,sp,224
80030430:	0c008285 	jal	80020a14 <_ZN4core3cmp10PartialOrd2gt17hd797d3773830092dE>
80030434:	00000000 	nop
80030438:	a3a200d7 	sb	v0,215(sp)
8003043c:	0800c111 	j	80030444 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x138>
80030440:	00000000 	nop
}
80030444:	93a100d7 	lbu	at,215(sp)
80030448:	30210001 	andi	at,at,0x1
    if is_illegal_va_range(va, len) || is_illegal_dev_range(pa, len) || va % len != 0 {
8003044c:	1420000f 	bnez	at,8003048c <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x180>
80030450:	00000000 	nop
80030454:	0800c117 	j	8003045c <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x150>
80030458:	00000000 	nop
8003045c:	8fa50038 	lw	a1,56(sp)
80030460:	8fa10044 	lw	at,68(sp)
80030464:	afa10078 	sw	at,120(sp)
80030468:	8fa10078 	lw	at,120(sp)
8003046c:	afa1007c 	sw	at,124(sp)
80030470:	8fa4007c 	lw	a0,124(sp)
80030474:	0c00cc15 	jal	80033054 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E>
80030478:	00000000 	nop
8003047c:	10400007 	beqz	v0,8003049c <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x190>
80030480:	00000000 	nop
80030484:	0800c123 	j	8003048c <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x180>
80030488:	00000000 	nop
8003048c:	2401fffd 	li	at,-3
        return -E_INVAL;
80030490:	afa1004c 	sw	at,76(sp)
80030494:	0800c243 	j	8003090c <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x600>
80030498:	00000000 	nop
    if is_illegal_va_range(va, len) || is_illegal_dev_range(pa, len) || va % len != 0 {
8003049c:	8fa50038 	lw	a1,56(sp)
800304a0:	8fa1003c 	lw	at,60(sp)
800304a4:	afa10054 	sw	at,84(sp)
800304a8:	8fa10054 	lw	at,84(sp)
800304ac:	afa10080 	sw	at,128(sp)
800304b0:	8fa40080 	lw	a0,128(sp)
800304b4:	0c00ae92 	jal	8002ba48 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17h187d6858e05b6d9bE>
800304b8:	00000000 	nop
800304bc:	1440fff3 	bnez	v0,8003048c <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x180>
800304c0:	00000000 	nop
800304c4:	0800c133 	j	800304cc <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x1c0>
800304c8:	00000000 	nop
800304cc:	8fa10038 	lw	at,56(sp)
800304d0:	24020004 	li	v0,4
    if len == 4 {
800304d4:	14220062 	bne	at,v0,80030660 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x354>
800304d8:	00000000 	nop
800304dc:	0800c139 	j	800304e4 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x1d8>
800304e0:	00000000 	nop
        va.write::<u32>(pa.add(KSEG1.raw).read_volatile::<u32>());
800304e4:	3c018105 	lui	at,0x8105
800304e8:	8c21f174 	lw	at,-3724(at)
800304ec:	afa1005c 	sw	at,92(sp)
800304f0:	8fa5005c 	lw	a1,92(sp)
800304f4:	8fa10044 	lw	at,68(sp)
800304f8:	afa10084 	sw	at,132(sp)
800304fc:	8fa10084 	lw	at,132(sp)
80030500:	afa10088 	sw	at,136(sp)
80030504:	8fa40088 	lw	a0,136(sp)
80030508:	0c00aeaa 	jal	8002baa8 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17h799630bd0af6cd94E>
8003050c:	00000000 	nop
80030510:	afa2008c 	sw	v0,140(sp)
80030514:	8fa1008c 	lw	at,140(sp)
80030518:	afa10058 	sw	at,88(sp)
8003051c:	27a10058 	addiu	at,sp,88
80030520:	afa100c0 	sw	at,192(sp)
            self.raw % core::mem::align_of::<T>() == 0 && self.raw % core::mem::size_of::<T>() == 0
80030524:	8fa10058 	lw	at,88(sp)
80030528:	afa10034 	sw	at,52(sp)
8003052c:	24010000 	li	at,0
80030530:	14000009 	bnez	zero,80030558 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x24c>
80030534:	00000000 	nop
80030538:	0800c150 	j	80030540 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x234>
8003053c:	00000000 	nop
80030540:	8fa10034 	lw	at,52(sp)
80030544:	30210003 	andi	at,at,0x3
80030548:	10200007 	beqz	at,80030568 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x25c>
8003054c:	00000000 	nop
80030550:	0800c161 	j	80030584 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x278>
80030554:	00000000 	nop
80030558:	3c018105 	lui	at,0x8105
8003055c:	2424f390 	addiu	a0,at,-3184
80030560:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80030564:	00000000 	nop
80030568:	8fa10058 	lw	at,88(sp)
8003056c:	afa10030 	sw	at,48(sp)
80030570:	24010000 	li	at,0
80030574:	14000010 	bnez	zero,800305b8 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x2ac>
80030578:	00000000 	nop
8003057c:	0800c168 	j	800305a0 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x294>
80030580:	00000000 	nop
        assert!(
80030584:	3c018105 	lui	at,0x8105
80030588:	2424f3b0 	addiu	a0,at,-3152
8003058c:	3c018105 	lui	at,0x8105
80030590:	2426f420 	addiu	a2,at,-3040
80030594:	2405006d 	li	a1,109
80030598:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
8003059c:	00000000 	nop
            self.raw % core::mem::align_of::<T>() == 0 && self.raw % core::mem::size_of::<T>() == 0
800305a0:	8fa10030 	lw	at,48(sp)
800305a4:	30210003 	andi	at,at,0x3
800305a8:	10200007 	beqz	at,800305c8 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x2bc>
800305ac:	00000000 	nop
800305b0:	0800c161 	j	80030584 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x278>
800305b4:	00000000 	nop
800305b8:	3c018105 	lui	at,0x8105
800305bc:	2424f3a0 	addiu	a0,at,-3168
800305c0:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
800305c4:	00000000 	nop
        unsafe { ptr::read_volatile(self.raw as *const T) }
800305c8:	8fa40058 	lw	a0,88(sp)
800305cc:	0c008758 	jal	80021d60 <_ZN4core3ptr13read_volatile17h190ef4300a716656E>
800305d0:	00000000 	nop
800305d4:	00400825 	move	at,v0
800305d8:	afa10028 	sw	at,40(sp)
800305dc:	27a1003c 	addiu	at,sp,60
800305e0:	afa100b0 	sw	at,176(sp)
800305e4:	afa200b4 	sw	v0,180(sp)
            assert!(self.raw % align_of::<T>() == 0);
800305e8:	8fa1003c 	lw	at,60(sp)
800305ec:	afa1002c 	sw	at,44(sp)
800305f0:	24010000 	li	at,0
800305f4:	14000009 	bnez	zero,8003061c <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x310>
800305f8:	00000000 	nop
800305fc:	0800c181 	j	80030604 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x2f8>
80030600:	00000000 	nop
80030604:	8fa1002c 	lw	at,44(sp)
80030608:	30210003 	andi	at,at,0x3
8003060c:	1020000e 	beqz	at,80030648 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x33c>
80030610:	00000000 	nop
80030614:	0800c18b 	j	8003062c <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x320>
80030618:	00000000 	nop
8003061c:	3c018105 	lui	at,0x8105
80030620:	2424f27c 	addiu	a0,at,-3460
80030624:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80030628:	00000000 	nop
8003062c:	3c018105 	lui	at,0x8105
80030630:	2424f28c 	addiu	a0,at,-3444
80030634:	3c018105 	lui	at,0x8105
80030638:	2426f2c0 	addiu	a2,at,-3392
8003063c:	24050031 	li	a1,49
80030640:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80030644:	00000000 	nop
            ptr::write(self.raw as *mut T, src);
80030648:	8fa50028 	lw	a1,40(sp)
8003064c:	8fa4003c 	lw	a0,60(sp)
80030650:	0c008add 	jal	80022b74 <_ZN4core3ptr5write17h6acb17587e071514E>
80030654:	00000000 	nop
80030658:	0800c19e 	j	80030678 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x36c>
8003065c:	00000000 	nop
80030660:	8fa10038 	lw	at,56(sp)
80030664:	24020002 	li	v0,2
    } else if len == 2 {
80030668:	10220006 	beq	at,v0,80030684 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x378>
8003066c:	00000000 	nop
80030670:	0800c200 	j	80030800 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x4f4>
80030674:	00000000 	nop
    0
80030678:	afa0004c 	sw	zero,76(sp)
}
8003067c:	0800c243 	j	8003090c <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x600>
80030680:	00000000 	nop
        va.write::<u16>(pa.add(KSEG1.raw).read_volatile::<u16>());
80030684:	3c018105 	lui	at,0x8105
80030688:	8c21f174 	lw	at,-3724(at)
8003068c:	afa10064 	sw	at,100(sp)
80030690:	8fa50064 	lw	a1,100(sp)
80030694:	8fa10044 	lw	at,68(sp)
80030698:	afa10090 	sw	at,144(sp)
8003069c:	8fa10090 	lw	at,144(sp)
800306a0:	afa10094 	sw	at,148(sp)
800306a4:	8fa40094 	lw	a0,148(sp)
800306a8:	0c00aeaa 	jal	8002baa8 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17h799630bd0af6cd94E>
800306ac:	00000000 	nop
800306b0:	afa20098 	sw	v0,152(sp)
800306b4:	8fa10098 	lw	at,152(sp)
800306b8:	afa10060 	sw	at,96(sp)
800306bc:	27a10060 	addiu	at,sp,96
800306c0:	afa100c4 	sw	at,196(sp)
            self.raw % core::mem::align_of::<T>() == 0 && self.raw % core::mem::size_of::<T>() == 0
800306c4:	8fa10060 	lw	at,96(sp)
800306c8:	afa10024 	sw	at,36(sp)
800306cc:	24010000 	li	at,0
800306d0:	14000009 	bnez	zero,800306f8 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x3ec>
800306d4:	00000000 	nop
800306d8:	0800c1b8 	j	800306e0 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x3d4>
800306dc:	00000000 	nop
800306e0:	8fa10024 	lw	at,36(sp)
800306e4:	30210001 	andi	at,at,0x1
800306e8:	10200007 	beqz	at,80030708 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x3fc>
800306ec:	00000000 	nop
800306f0:	0800c1c9 	j	80030724 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x418>
800306f4:	00000000 	nop
800306f8:	3c018105 	lui	at,0x8105
800306fc:	2424f390 	addiu	a0,at,-3184
80030700:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80030704:	00000000 	nop
80030708:	8fa10060 	lw	at,96(sp)
8003070c:	afa10020 	sw	at,32(sp)
80030710:	24010000 	li	at,0
80030714:	14000010 	bnez	zero,80030758 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x44c>
80030718:	00000000 	nop
8003071c:	0800c1d0 	j	80030740 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x434>
80030720:	00000000 	nop
        assert!(
80030724:	3c018105 	lui	at,0x8105
80030728:	2424f3b0 	addiu	a0,at,-3152
8003072c:	3c018105 	lui	at,0x8105
80030730:	2426f420 	addiu	a2,at,-3040
80030734:	2405006d 	li	a1,109
80030738:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
8003073c:	00000000 	nop
            self.raw % core::mem::align_of::<T>() == 0 && self.raw % core::mem::size_of::<T>() == 0
80030740:	8fa10020 	lw	at,32(sp)
80030744:	30210001 	andi	at,at,0x1
80030748:	10200007 	beqz	at,80030768 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x45c>
8003074c:	00000000 	nop
80030750:	0800c1c9 	j	80030724 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x418>
80030754:	00000000 	nop
80030758:	3c018105 	lui	at,0x8105
8003075c:	2424f3a0 	addiu	a0,at,-3168
80030760:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80030764:	00000000 	nop
        unsafe { ptr::read_volatile(self.raw as *const T) }
80030768:	8fa40060 	lw	a0,96(sp)
8003076c:	0c008770 	jal	80021dc0 <_ZN4core3ptr13read_volatile17h96270a3ce88bb200E>
80030770:	00000000 	nop
80030774:	00400825 	move	at,v0
80030778:	afa10018 	sw	at,24(sp)
8003077c:	27a1003c 	addiu	at,sp,60
80030780:	afa100b8 	sw	at,184(sp)
80030784:	a7a200be 	sh	v0,190(sp)
            assert!(self.raw % align_of::<T>() == 0);
80030788:	8fa1003c 	lw	at,60(sp)
8003078c:	afa1001c 	sw	at,28(sp)
80030790:	24010000 	li	at,0
80030794:	14000009 	bnez	zero,800307bc <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x4b0>
80030798:	00000000 	nop
8003079c:	0800c1e9 	j	800307a4 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x498>
800307a0:	00000000 	nop
800307a4:	8fa1001c 	lw	at,28(sp)
800307a8:	30210001 	andi	at,at,0x1
800307ac:	1020000e 	beqz	at,800307e8 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x4dc>
800307b0:	00000000 	nop
800307b4:	0800c1f3 	j	800307cc <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x4c0>
800307b8:	00000000 	nop
800307bc:	3c018105 	lui	at,0x8105
800307c0:	2424f27c 	addiu	a0,at,-3460
800307c4:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
800307c8:	00000000 	nop
800307cc:	3c018105 	lui	at,0x8105
800307d0:	2424f28c 	addiu	a0,at,-3444
800307d4:	3c018105 	lui	at,0x8105
800307d8:	2426f2c0 	addiu	a2,at,-3392
800307dc:	24050031 	li	a1,49
800307e0:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
800307e4:	00000000 	nop
            ptr::write(self.raw as *mut T, src);
800307e8:	8fa50018 	lw	a1,24(sp)
800307ec:	8fa4003c 	lw	a0,60(sp)
800307f0:	0c008b2c 	jal	80022cb0 <_ZN4core3ptr5write17ha785fe8d1cd612bbE>
800307f4:	00000000 	nop
800307f8:	0800c19e 	j	80030678 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x36c>
800307fc:	00000000 	nop
80030800:	8fa10038 	lw	at,56(sp)
80030804:	24020001 	li	v0,1
    } else if len == 1 {
80030808:	1422003c 	bne	at,v0,800308fc <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x5f0>
8003080c:	00000000 	nop
80030810:	0800c206 	j	80030818 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x50c>
80030814:	00000000 	nop
        va.write::<u8>(pa.add(KSEG1.raw).read_volatile::<u8>());
80030818:	3c018105 	lui	at,0x8105
8003081c:	8c21f174 	lw	at,-3724(at)
80030820:	afa1006c 	sw	at,108(sp)
80030824:	8fa5006c 	lw	a1,108(sp)
80030828:	8fa10044 	lw	at,68(sp)
8003082c:	afa1009c 	sw	at,156(sp)
80030830:	8fa1009c 	lw	at,156(sp)
80030834:	afa100a0 	sw	at,160(sp)
80030838:	8fa400a0 	lw	a0,160(sp)
8003083c:	0c00aeaa 	jal	8002baa8 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17h799630bd0af6cd94E>
80030840:	00000000 	nop
80030844:	afa200a4 	sw	v0,164(sp)
80030848:	8fa100a4 	lw	at,164(sp)
8003084c:	afa10068 	sw	at,104(sp)
80030850:	27a10068 	addiu	at,sp,104
80030854:	afa100c8 	sw	at,200(sp)
80030858:	24010000 	li	at,0
            self.raw % core::mem::align_of::<T>() == 0 && self.raw % core::mem::size_of::<T>() == 0
8003085c:	14000008 	bnez	zero,80030880 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x574>
80030860:	00000000 	nop
80030864:	0800c21b 	j	8003086c <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x560>
80030868:	00000000 	nop
8003086c:	24010000 	li	at,0
80030870:	14000007 	bnez	zero,80030890 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x584>
80030874:	00000000 	nop
80030878:	0800c228 	j	800308a0 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x594>
8003087c:	00000000 	nop
80030880:	3c018105 	lui	at,0x8105
80030884:	2424f390 	addiu	a0,at,-3184
80030888:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
8003088c:	00000000 	nop
80030890:	3c018105 	lui	at,0x8105
80030894:	2424f3a0 	addiu	a0,at,-3168
80030898:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
8003089c:	00000000 	nop
        unsafe { ptr::read_volatile(self.raw as *const T) }
800308a0:	8fa40068 	lw	a0,104(sp)
800308a4:	0c00e576 	jal	800395d8 <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E>
800308a8:	00000000 	nop
800308ac:	00400825 	move	at,v0
800308b0:	afa10014 	sw	at,20(sp)
800308b4:	27a1003c 	addiu	at,sp,60
800308b8:	afa100a8 	sw	at,168(sp)
800308bc:	a3a200af 	sb	v0,175(sp)
800308c0:	24010001 	li	at,1
            assert!(self.raw % align_of::<T>() == 0);
800308c4:	14200007 	bnez	at,800308e4 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x5d8>
800308c8:	00000000 	nop
800308cc:	0800c235 	j	800308d4 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x5c8>
800308d0:	00000000 	nop
800308d4:	3c018105 	lui	at,0x8105
800308d8:	2424f27c 	addiu	a0,at,-3460
800308dc:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
800308e0:	00000000 	nop
            ptr::write(self.raw as *mut T, src);
800308e4:	8fa50014 	lw	a1,20(sp)
800308e8:	8fa4003c 	lw	a0,60(sp)
800308ec:	0c00e5f0 	jal	800397c0 <_ZN4core3ptr5write17heb431dbdaac243d9E>
800308f0:	00000000 	nop
800308f4:	0800c19e 	j	80030678 <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x36c>
800308f8:	00000000 	nop
800308fc:	2401fffd 	li	at,-3
        return -E_INVAL;
80030900:	afa1004c 	sw	at,76(sp)
80030904:	0800c243 	j	8003090c <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE+0x600>
80030908:	00000000 	nop
}
8003090c:	8fa2004c 	lw	v0,76(sp)
80030910:	8fbf00fc 	lw	ra,252(sp)
80030914:	27bd0100 	addiu	sp,sp,256
80030918:	03e00008 	jr	ra
8003091c:	00000000 	nop

80030920 <_ZN8mos_65024trap7syscall12sys_getenvid17h4a64675d732814f4E>:
fn sys_getenvid() -> i32 {
80030920:	27bdffd0 	addiu	sp,sp,-48
80030924:	afbf002c 	sw	ra,44(sp)
    let mut envid: usize = 0;
80030928:	afa0001c 	sw	zero,28(sp)
    let locked_cur_env_idx = CUR_ENV.lock();
8003092c:	3c018105 	lui	at,0x8105
80030930:	24240960 	addiu	a0,at,2400
80030934:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
80030938:	00000000 	nop
8003093c:	00402025 	move	a0,v0
80030940:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
80030944:	00000000 	nop
80030948:	afa20020 	sw	v0,32(sp)
    let locked_envs = ENV_LIST.lock();
8003094c:	3c018105 	lui	at,0x8105
80030950:	24240960 	addiu	a0,at,2400
80030954:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
80030958:	00000000 	nop
8003095c:	00402025 	move	a0,v0
80030960:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
80030964:	00000000 	nop
80030968:	afa20024 	sw	v0,36(sp)
8003096c:	27a40020 	addiu	a0,sp,32
    if let Some(env_idx) = *locked_cur_env_idx {
80030970:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
80030974:	00000000 	nop
80030978:	00400825 	move	at,v0
8003097c:	afa10018 	sw	at,24(sp)
80030980:	8c410000 	lw	at,0(v0)
80030984:	24020001 	li	v0,1
80030988:	14220016 	bne	at,v0,800309e4 <_ZN8mos_65024trap7syscall12sys_getenvid17h4a64675d732814f4E+0xc4>
8003098c:	00000000 	nop
80030990:	0800c266 	j	80030998 <_ZN8mos_65024trap7syscall12sys_getenvid17h4a64675d732814f4E+0x78>
80030994:	00000000 	nop
80030998:	8fa10018 	lw	at,24(sp)
8003099c:	8c210004 	lw	at,4(at)
800309a0:	afa10014 	sw	at,20(sp)
800309a4:	afa10028 	sw	at,40(sp)
800309a8:	27a40024 	addiu	a0,sp,36
        envid = locked_envs[env_idx].get_envid();
800309ac:	0c00ac79 	jal	8002b1e4 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h990db7d0b83dd2d1E>
800309b0:	00000000 	nop
800309b4:	8fa50014 	lw	a1,20(sp)
800309b8:	00402025 	move	a0,v0
800309bc:	3c018105 	lui	at,0x8105
800309c0:	2426fc48 	addiu	a2,at,-952
800309c4:	0c00accc 	jal	8002b330 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hba386fd63984b7c3E>
800309c8:	00000000 	nop
800309cc:	00402025 	move	a0,v0
800309d0:	0c00bab7 	jal	8002eadc <_ZN8mos_65024proc3Env9get_envid17h66218a728e681990E>
800309d4:	00000000 	nop
800309d8:	afa2001c 	sw	v0,28(sp)
    if let Some(env_idx) = *locked_cur_env_idx {
800309dc:	0800c279 	j	800309e4 <_ZN8mos_65024trap7syscall12sys_getenvid17h4a64675d732814f4E+0xc4>
800309e0:	00000000 	nop
    envid as i32
800309e4:	8fa1001c 	lw	at,28(sp)
800309e8:	afa10010 	sw	at,16(sp)
800309ec:	27a40024 	addiu	a0,sp,36
}
800309f0:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
800309f4:	00000000 	nop
800309f8:	27a40020 	addiu	a0,sp,32
800309fc:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
80030a00:	00000000 	nop
80030a04:	8fa20010 	lw	v0,16(sp)
80030a08:	8fbf002c 	lw	ra,44(sp)
80030a0c:	27bd0030 	addiu	sp,sp,48
80030a10:	03e00008 	jr	ra
80030a14:	00000000 	nop

80030a18 <_ZN8mos_65024trap7syscall9sys_yield17h2c157241bba6d750E>:
fn sys_yield() -> ! {
80030a18:	27bdffc0 	addiu	sp,sp,-64
80030a1c:	afbf003c 	sw	ra,60(sp)
80030a20:	24040001 	li	a0,1
80030a24:	afa40018 	sw	a0,24(sp)
    schedule(true);
80030a28:	0c00b622 	jal	8002d888 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E>
80030a2c:	00000000 	nop
80030a30:	8fa60018 	lw	a2,24(sp)
    unreachable!("sys_yield");
80030a34:	03a00825 	move	at,sp
80030a38:	ac200010 	sw	zero,16(at)
80030a3c:	3c018105 	lui	at,0x8105
80030a40:	2425fc8c 	addiu	a1,at,-884
80030a44:	27a40020 	addiu	a0,sp,32
80030a48:	afa4001c 	sw	a0,28(sp)
80030a4c:	27a70038 	addiu	a3,sp,56
80030a50:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
80030a54:	00000000 	nop
80030a58:	8fa4001c 	lw	a0,28(sp)
80030a5c:	3c018105 	lui	at,0x8105
80030a60:	2425fc94 	addiu	a1,at,-876
80030a64:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80030a68:	00000000 	nop

80030a6c <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE>:
fn sys_env_destroy(envid: usize) -> i32 {
80030a6c:	27bdff60 	addiu	sp,sp,-160
80030a70:	afbf009c 	sw	ra,156(sp)
80030a74:	afa4003c 	sw	a0,60(sp)
80030a78:	afa40058 	sw	a0,88(sp)
80030a7c:	24010000 	li	at,0
    let idx = get_idx_by_envid(envid);
80030a80:	a3a00057 	sb	zero,87(sp)
80030a84:	a3a00056 	sb	zero,86(sp)
80030a88:	afa40094 	sw	a0,148(sp)
    if envid == 0 {
80030a8c:	14800016 	bnez	a0,80030ae8 <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x7c>
80030a90:	00000000 	nop
80030a94:	0800c2a7 	j	80030a9c <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x30>
80030a98:	00000000 	nop
        let cur_env = CUR_ENV.lock();
80030a9c:	3c018105 	lui	at,0x8105
80030aa0:	24240960 	addiu	a0,at,2400
80030aa4:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
80030aa8:	00000000 	nop
80030aac:	00402025 	move	a0,v0
80030ab0:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
80030ab4:	00000000 	nop
80030ab8:	afa20078 	sw	v0,120(sp)
80030abc:	27a40078 	addiu	a0,sp,120
        if let Some(idx) = *cur_env {
80030ac0:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
80030ac4:	00000000 	nop
80030ac8:	00400825 	move	at,v0
80030acc:	afa10038 	sw	at,56(sp)
80030ad0:	8c410000 	lw	at,0(v0)
80030ad4:	24020001 	li	v0,1
80030ad8:	10220008 	beq	at,v0,80030afc <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x90>
80030adc:	00000000 	nop
80030ae0:	0800c2c8 	j	80030b20 <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0xb4>
80030ae4:	00000000 	nop
    envid & (NENV - 1)
80030ae8:	8fa1003c 	lw	at,60(sp)
80030aec:	302103ff 	andi	at,at,0x3ff
80030af0:	afa10074 	sw	at,116(sp)
}
80030af4:	0800c2d4 	j	80030b50 <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0xe4>
80030af8:	00000000 	nop
        if let Some(idx) = *cur_env {
80030afc:	8fa10038 	lw	at,56(sp)
80030b00:	8c210004 	lw	at,4(at)
80030b04:	afa10098 	sw	at,152(sp)
            return idx;
80030b08:	afa10074 	sw	at,116(sp)
80030b0c:	27a40078 	addiu	a0,sp,120
    }
80030b10:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
80030b14:	00000000 	nop
80030b18:	0800c2d4 	j	80030b50 <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0xe4>
80030b1c:	00000000 	nop
            panic!("No current env.\n");
80030b20:	3c018105 	lui	at,0x8105
80030b24:	2425fa88 	addiu	a1,at,-1400
80030b28:	27a4007c 	addiu	a0,sp,124
80030b2c:	afa40034 	sw	a0,52(sp)
80030b30:	24060001 	li	a2,1
80030b34:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80030b38:	00000000 	nop
80030b3c:	8fa40034 	lw	a0,52(sp)
80030b40:	3c018105 	lui	at,0x8105
80030b44:	2425fa90 	addiu	a1,at,-1392
80030b48:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80030b4c:	00000000 	nop
}
80030b50:	8fa10074 	lw	at,116(sp)
80030b54:	afa10014 	sw	at,20(sp)
80030b58:	afa1005c 	sw	at,92(sp)
    let mut env_list = ENV_LIST.lock();
80030b5c:	3c018105 	lui	at,0x8105
80030b60:	24240960 	addiu	a0,at,2400
80030b64:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
80030b68:	00000000 	nop
80030b6c:	00402025 	move	a0,v0
80030b70:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
80030b74:	00000000 	nop
80030b78:	afa20040 	sw	v0,64(sp)
80030b7c:	24010001 	li	at,1
80030b80:	afa1002c 	sw	at,44(sp)
80030b84:	a3a10057 	sb	at,87(sp)
80030b88:	27a40040 	addiu	a0,sp,64
    let env: &mut Env = &mut env_list[idx];
80030b8c:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
80030b90:	00000000 	nop
80030b94:	8fa50014 	lw	a1,20(sp)
80030b98:	00402025 	move	a0,v0
80030b9c:	3c018105 	lui	at,0x8105
80030ba0:	2426fca4 	addiu	a2,at,-860
80030ba4:	0c00ad35 	jal	8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>
80030ba8:	00000000 	nop
80030bac:	afa20020 	sw	v0,32(sp)
80030bb0:	afa20060 	sw	v0,96(sp)
    env.env_status = EnvStatus::Free;
80030bb4:	afa00044 	sw	zero,68(sp)
80030bb8:	8fa10044 	lw	at,68(sp)
80030bbc:	ac4100ac 	sw	at,172(v0)
    ENV_SCHED_LIST.lock().remove(env.env_sched_link.clone());
80030bc0:	3c018105 	lui	at,0x8105
80030bc4:	24240960 	addiu	a0,at,2400
80030bc8:	0c00db14 	jal	80036c50 <_ZN74_$LT$mos_6502..proc..ENV_SCHED_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb461aaf754aa1f00E>
80030bcc:	00000000 	nop
80030bd0:	00402025 	move	a0,v0
80030bd4:	0c00a09c 	jal	80028270 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E>
80030bd8:	00000000 	nop
80030bdc:	afa20048 	sw	v0,72(sp)
80030be0:	27a40048 	addiu	a0,sp,72
80030be4:	afa4001c 	sw	a0,28(sp)
80030be8:	0c00ad19 	jal	8002b464 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hdb38b7a74b019393E>
80030bec:	00000000 	nop
80030bf0:	00400825 	move	at,v0
80030bf4:	8fa20020 	lw	v0,32(sp)
80030bf8:	afa10018 	sw	at,24(sp)
80030bfc:	244400b4 	addiu	a0,v0,180
80030c00:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
80030c04:	00000000 	nop
80030c08:	8fa40018 	lw	a0,24(sp)
80030c0c:	00402825 	move	a1,v0
80030c10:	0c00d615 	jal	80035854 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E>
80030c14:	00000000 	nop
80030c18:	8fa4001c 	lw	a0,28(sp)
80030c1c:	0c008cff 	jal	800233fc <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17hde8d744f358f0af3E>
80030c20:	00000000 	nop
    ENV_FREE_LIST.lock().push(env.env_link.clone());
80030c24:	3c018105 	lui	at,0x8105
80030c28:	24240960 	addiu	a0,at,2400
80030c2c:	0c00db08 	jal	80036c20 <_ZN73_$LT$mos_6502..proc..ENV_FREE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf688f55e10c51cccE>
80030c30:	00000000 	nop
80030c34:	00402025 	move	a0,v0
80030c38:	0c00a09c 	jal	80028270 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E>
80030c3c:	00000000 	nop
80030c40:	afa2004c 	sw	v0,76(sp)
80030c44:	27a4004c 	addiu	a0,sp,76
80030c48:	afa40028 	sw	a0,40(sp)
80030c4c:	0c00ad19 	jal	8002b464 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hdb38b7a74b019393E>
80030c50:	00000000 	nop
80030c54:	00400825 	move	at,v0
80030c58:	8fa20020 	lw	v0,32(sp)
80030c5c:	afa10024 	sw	at,36(sp)
80030c60:	24440098 	addiu	a0,v0,152
80030c64:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
80030c68:	00000000 	nop
80030c6c:	8fa40024 	lw	a0,36(sp)
80030c70:	00402825 	move	a1,v0
80030c74:	0c00d591 	jal	80035644 <_ZN8mos_65024util16DoubleLinkedList4push17hb8d2053113fa2c42E>
80030c78:	00000000 	nop
80030c7c:	8fa40028 	lw	a0,40(sp)
80030c80:	0c008cff 	jal	800233fc <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17hde8d744f358f0af3E>
80030c84:	00000000 	nop
    let mut curenv = CUR_ENV.lock();
80030c88:	3c018105 	lui	at,0x8105
80030c8c:	24240960 	addiu	a0,at,2400
80030c90:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
80030c94:	00000000 	nop
80030c98:	00402025 	move	a0,v0
80030c9c:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
80030ca0:	00000000 	nop
80030ca4:	8fa1002c 	lw	at,44(sp)
80030ca8:	afa20050 	sw	v0,80(sp)
80030cac:	a3a10056 	sb	at,86(sp)
80030cb0:	27a40050 	addiu	a0,sp,80
    if let Some(curidx) = *curenv {
80030cb4:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
80030cb8:	00000000 	nop
80030cbc:	00400825 	move	at,v0
80030cc0:	8fa2002c 	lw	v0,44(sp)
80030cc4:	00201825 	move	v1,at
80030cc8:	afa30030 	sw	v1,48(sp)
80030ccc:	8c210000 	lw	at,0(at)
80030cd0:	1422000b 	bne	at,v0,80030d00 <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x294>
80030cd4:	00000000 	nop
80030cd8:	0800c338 	j	80030ce0 <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x274>
80030cdc:	00000000 	nop
80030ce0:	8fa20014 	lw	v0,20(sp)
80030ce4:	8fa10030 	lw	at,48(sp)
80030ce8:	8c210004 	lw	at,4(at)
80030cec:	afa10064 	sw	at,100(sp)
        if curidx == idx {
80030cf0:	10220009 	beq	at,v0,80030d18 <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x2ac>
80030cf4:	00000000 	nop
80030cf8:	0800c340 	j	80030d00 <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x294>
80030cfc:	00000000 	nop
}
80030d00:	93a10056 	lbu	at,86(sp)
80030d04:	30210001 	andi	at,at,0x1
80030d08:	1420002c 	bnez	at,80030dbc <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x350>
80030d0c:	00000000 	nop
80030d10:	0800c367 	j	80030d9c <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x330>
80030d14:	00000000 	nop
80030d18:	27a40050 	addiu	a0,sp,80
            curenv.take().unwrap();
80030d1c:	0c00acf5 	jal	8002b3d4 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h566805ffd1d6c0b4E>
80030d20:	00000000 	nop
80030d24:	00402025 	move	a0,v0
80030d28:	0c00964d 	jal	80025934 <_ZN4core6option15Option$LT$T$GT$4take17hd31644464f00dc26E>
80030d2c:	00000000 	nop
80030d30:	afa20068 	sw	v0,104(sp)
80030d34:	afa3006c 	sw	v1,108(sp)
        match self {
80030d38:	8fa10068 	lw	at,104(sp)
80030d3c:	14200007 	bnez	at,80030d5c <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x2f0>
80030d40:	00000000 	nop
80030d44:	0800c353 	j	80030d4c <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x2e0>
80030d48:	00000000 	nop
            None => unwrap_failed(),
80030d4c:	3c018105 	lui	at,0x8105
80030d50:	2424fcb4 	addiu	a0,at,-844
80030d54:	0c00fab9 	jal	8003eae4 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
80030d58:	00000000 	nop
            Some(val) => val,
80030d5c:	8fa1006c 	lw	at,108(sp)
80030d60:	afa10070 	sw	at,112(sp)
80030d64:	24010000 	li	at,0
            drop(curenv);
80030d68:	a3a00056 	sb	zero,86(sp)
80030d6c:	8fa40050 	lw	a0,80(sp)
80030d70:	0c008456 	jal	80021158 <_ZN4core3mem4drop17h6a3effa89817325fE>
80030d74:	00000000 	nop
            drop(env_list);
80030d78:	a3a00057 	sb	zero,87(sp)
80030d7c:	8fa40040 	lw	a0,64(sp)
80030d80:	0c00844c 	jal	80021130 <_ZN4core3mem4drop17h42ecfc0c85e47420E>
80030d84:	00000000 	nop
80030d88:	24040001 	li	a0,1
            schedule(true);
80030d8c:	0c00b622 	jal	8002d888 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E>
80030d90:	00000000 	nop
80030d94:	0800c340 	j	80030d00 <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x294>
80030d98:	00000000 	nop
80030d9c:	24010000 	li	at,0
}
80030da0:	a3a00056 	sb	zero,86(sp)
80030da4:	93a10057 	lbu	at,87(sp)
80030da8:	30210001 	andi	at,at,0x1
80030dac:	1420000e 	bnez	at,80030de8 <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x37c>
80030db0:	00000000 	nop
80030db4:	0800c374 	j	80030dd0 <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x364>
80030db8:	00000000 	nop
80030dbc:	27a40050 	addiu	a0,sp,80
80030dc0:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
80030dc4:	00000000 	nop
80030dc8:	0800c367 	j	80030d9c <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x330>
80030dcc:	00000000 	nop
80030dd0:	24020000 	li	v0,0
80030dd4:	a3a00057 	sb	zero,87(sp)
80030dd8:	8fbf009c 	lw	ra,156(sp)
80030ddc:	27bd00a0 	addiu	sp,sp,160
80030de0:	03e00008 	jr	ra
80030de4:	00000000 	nop
80030de8:	27a40040 	addiu	a0,sp,64
80030dec:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
80030df0:	00000000 	nop
80030df4:	0800c374 	j	80030dd0 <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE+0x364>
80030df8:	00000000 	nop

80030dfc <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17h73671846a93957a7E>:
fn sys_set_tlb_mod_entry(envid: usize, func: usize) -> i32 {
80030dfc:	27bdff98 	addiu	sp,sp,-104
80030e00:	afbf0064 	sw	ra,100(sp)
80030e04:	afa50024 	sw	a1,36(sp)
80030e08:	afa40028 	sw	a0,40(sp)
80030e0c:	afa40030 	sw	a0,48(sp)
80030e10:	afa50034 	sw	a1,52(sp)
80030e14:	afa4005c 	sw	a0,92(sp)
    if envid == 0 {
80030e18:	14800016 	bnez	a0,80030e74 <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17h73671846a93957a7E+0x78>
80030e1c:	00000000 	nop
80030e20:	0800c38a 	j	80030e28 <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17h73671846a93957a7E+0x2c>
80030e24:	00000000 	nop
        let cur_env = CUR_ENV.lock();
80030e28:	3c018105 	lui	at,0x8105
80030e2c:	24240960 	addiu	a0,at,2400
80030e30:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
80030e34:	00000000 	nop
80030e38:	00402025 	move	a0,v0
80030e3c:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
80030e40:	00000000 	nop
80030e44:	afa20040 	sw	v0,64(sp)
80030e48:	27a40040 	addiu	a0,sp,64
        if let Some(idx) = *cur_env {
80030e4c:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
80030e50:	00000000 	nop
80030e54:	00400825 	move	at,v0
80030e58:	afa10020 	sw	at,32(sp)
80030e5c:	8c410000 	lw	at,0(v0)
80030e60:	24020001 	li	v0,1
80030e64:	10220008 	beq	at,v0,80030e88 <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17h73671846a93957a7E+0x8c>
80030e68:	00000000 	nop
80030e6c:	0800c3ab 	j	80030eac <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17h73671846a93957a7E+0xb0>
80030e70:	00000000 	nop
    envid & (NENV - 1)
80030e74:	8fa10028 	lw	at,40(sp)
80030e78:	302103ff 	andi	at,at,0x3ff
80030e7c:	afa1003c 	sw	at,60(sp)
}
80030e80:	0800c3b7 	j	80030edc <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17h73671846a93957a7E+0xe0>
80030e84:	00000000 	nop
        if let Some(idx) = *cur_env {
80030e88:	8fa10020 	lw	at,32(sp)
80030e8c:	8c210004 	lw	at,4(at)
80030e90:	afa10060 	sw	at,96(sp)
            return idx;
80030e94:	afa1003c 	sw	at,60(sp)
80030e98:	27a40040 	addiu	a0,sp,64
    }
80030e9c:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
80030ea0:	00000000 	nop
80030ea4:	0800c3b7 	j	80030edc <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17h73671846a93957a7E+0xe0>
80030ea8:	00000000 	nop
            panic!("No current env.\n");
80030eac:	3c018105 	lui	at,0x8105
80030eb0:	2425fa88 	addiu	a1,at,-1400
80030eb4:	27a40044 	addiu	a0,sp,68
80030eb8:	afa4001c 	sw	a0,28(sp)
80030ebc:	24060001 	li	a2,1
80030ec0:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80030ec4:	00000000 	nop
80030ec8:	8fa4001c 	lw	a0,28(sp)
80030ecc:	3c018105 	lui	at,0x8105
80030ed0:	2425fa90 	addiu	a1,at,-1392
80030ed4:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80030ed8:	00000000 	nop
}
80030edc:	8fa1003c 	lw	at,60(sp)
80030ee0:	afa10014 	sw	at,20(sp)
    let idx = get_idx_by_envid(envid);
80030ee4:	afa10038 	sw	at,56(sp)
    let mut envs = ENV_LIST.lock();
80030ee8:	3c018105 	lui	at,0x8105
80030eec:	24240960 	addiu	a0,at,2400
80030ef0:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
80030ef4:	00000000 	nop
80030ef8:	00402025 	move	a0,v0
80030efc:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
80030f00:	00000000 	nop
80030f04:	afa2002c 	sw	v0,44(sp)
80030f08:	27a4002c 	addiu	a0,sp,44
80030f0c:	afa40018 	sw	a0,24(sp)
    envs[idx].env_user_tlb_mod_entry = func;
80030f10:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
80030f14:	00000000 	nop
80030f18:	8fa50014 	lw	a1,20(sp)
80030f1c:	00402025 	move	a0,v0
80030f20:	3c018105 	lui	at,0x8105
80030f24:	2426fcc4 	addiu	a2,at,-828
80030f28:	0c00ad35 	jal	8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>
80030f2c:	00000000 	nop
80030f30:	8fa10024 	lw	at,36(sp)
80030f34:	8fa40018 	lw	a0,24(sp)
80030f38:	ac4100d4 	sw	at,212(v0)
}
80030f3c:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
80030f40:	00000000 	nop
80030f44:	24020000 	li	v0,0
80030f48:	8fbf0064 	lw	ra,100(sp)
80030f4c:	27bd0068 	addiu	sp,sp,104
80030f50:	03e00008 	jr	ra
80030f54:	00000000 	nop

80030f58 <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E>:
fn sys_mem_alloc(envid: usize, va: VirtAddr, perm: Permssion) -> i32 {
80030f58:	27bdff30 	addiu	sp,sp,-208
80030f5c:	afbf00cc 	sw	ra,204(sp)
80030f60:	afa40038 	sw	a0,56(sp)
80030f64:	afa50040 	sw	a1,64(sp)
80030f68:	8fa10040 	lw	at,64(sp)
80030f6c:	afa1003c 	sw	at,60(sp)
80030f70:	afa60044 	sw	a2,68(sp)
80030f74:	afa40070 	sw	a0,112(sp)
    if is_illegal_va(va) {
80030f78:	8fa1003c 	lw	at,60(sp)
80030f7c:	afa10074 	sw	at,116(sp)
80030f80:	8fa10074 	lw	at,116(sp)
80030f84:	afa10078 	sw	at,120(sp)
80030f88:	8fa10078 	lw	at,120(sp)
80030f8c:	afa100c4 	sw	at,196(sp)
80030f90:	8fa100c4 	lw	at,196(sp)
80030f94:	afa100c0 	sw	at,192(sp)
    va < UTEMP || va >= UTOP
80030f98:	3c018105 	lui	at,0x8105
80030f9c:	2425f180 	addiu	a1,at,-3712
80030fa0:	27a400c0 	addiu	a0,sp,192
80030fa4:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
80030fa8:	00000000 	nop
80030fac:	1440000b 	bnez	v0,80030fdc <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x84>
80030fb0:	00000000 	nop
80030fb4:	0800c3ef 	j	80030fbc <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x64>
80030fb8:	00000000 	nop
80030fbc:	3c018105 	lui	at,0x8105
80030fc0:	2425f164 	addiu	a1,at,-3740
80030fc4:	27a400c0 	addiu	a0,sp,192
80030fc8:	0c00823d 	jal	800208f4 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E>
80030fcc:	00000000 	nop
80030fd0:	a3a200cb 	sb	v0,203(sp)
80030fd4:	0800c3fb 	j	80030fec <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x94>
80030fd8:	00000000 	nop
80030fdc:	24010001 	li	at,1
80030fe0:	a3a100cb 	sb	at,203(sp)
80030fe4:	0800c3fb 	j	80030fec <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x94>
80030fe8:	00000000 	nop
}
80030fec:	93a100cb 	lbu	at,203(sp)
80030ff0:	30210001 	andi	at,at,0x1
    if is_illegal_va(va) {
80030ff4:	1420007e 	bnez	at,800311f0 <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x298>
80030ff8:	00000000 	nop
80030ffc:	0800c401 	j	80031004 <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0xac>
80031000:	00000000 	nop
80031004:	8fa10038 	lw	at,56(sp)
80031008:	afa100b8 	sw	at,184(sp)
    if envid == 0 {
8003100c:	14200016 	bnez	at,80031068 <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x110>
80031010:	00000000 	nop
80031014:	0800c407 	j	8003101c <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0xc4>
80031018:	00000000 	nop
        let cur_env = CUR_ENV.lock();
8003101c:	3c018105 	lui	at,0x8105
80031020:	24240960 	addiu	a0,at,2400
80031024:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
80031028:	00000000 	nop
8003102c:	00402025 	move	a0,v0
80031030:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
80031034:	00000000 	nop
80031038:	afa2009c 	sw	v0,156(sp)
8003103c:	27a4009c 	addiu	a0,sp,156
        if let Some(idx) = *cur_env {
80031040:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
80031044:	00000000 	nop
80031048:	00400825 	move	at,v0
8003104c:	afa10034 	sw	at,52(sp)
80031050:	8c410000 	lw	at,0(v0)
80031054:	24020001 	li	v0,1
80031058:	10220008 	beq	at,v0,8003107c <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x124>
8003105c:	00000000 	nop
80031060:	0800c428 	j	800310a0 <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x148>
80031064:	00000000 	nop
    envid & (NENV - 1)
80031068:	8fa10038 	lw	at,56(sp)
8003106c:	302103ff 	andi	at,at,0x3ff
80031070:	afa10098 	sw	at,152(sp)
}
80031074:	0800c434 	j	800310d0 <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x178>
80031078:	00000000 	nop
        if let Some(idx) = *cur_env {
8003107c:	8fa10034 	lw	at,52(sp)
80031080:	8c210004 	lw	at,4(at)
80031084:	afa100bc 	sw	at,188(sp)
            return idx;
80031088:	afa10098 	sw	at,152(sp)
8003108c:	27a4009c 	addiu	a0,sp,156
    }
80031090:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
80031094:	00000000 	nop
80031098:	0800c434 	j	800310d0 <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x178>
8003109c:	00000000 	nop
            panic!("No current env.\n");
800310a0:	3c018105 	lui	at,0x8105
800310a4:	2425fa88 	addiu	a1,at,-1400
800310a8:	27a400a0 	addiu	a0,sp,160
800310ac:	afa40030 	sw	a0,48(sp)
800310b0:	24060001 	li	a2,1
800310b4:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
800310b8:	00000000 	nop
800310bc:	8fa40030 	lw	a0,48(sp)
800310c0:	3c018105 	lui	at,0x8105
800310c4:	2425fa90 	addiu	a1,at,-1392
800310c8:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800310cc:	00000000 	nop
}
800310d0:	8fa10098 	lw	at,152(sp)
800310d4:	afa10020 	sw	at,32(sp)
    let idx = get_idx_by_envid(envid);
800310d8:	afa1007c 	sw	at,124(sp)
    let mut envs = ENV_LIST.lock();
800310dc:	3c018105 	lui	at,0x8105
800310e0:	24240960 	addiu	a0,at,2400
800310e4:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
800310e8:	00000000 	nop
800310ec:	00402025 	move	a0,v0
800310f0:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
800310f4:	00000000 	nop
800310f8:	afa2004c 	sw	v0,76(sp)
800310fc:	27a4004c 	addiu	a0,sp,76
    let env = &mut envs[idx];
80031100:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
80031104:	00000000 	nop
80031108:	8fa50020 	lw	a1,32(sp)
8003110c:	00402025 	move	a0,v0
80031110:	3c018105 	lui	at,0x8105
80031114:	2426fcd4 	addiu	a2,at,-812
80031118:	0c00ad35 	jal	8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>
8003111c:	00000000 	nop
80031120:	afa20028 	sw	v0,40(sp)
80031124:	afa20080 	sw	v0,128(sp)
80031128:	27a4005c 	addiu	a0,sp,92
8003112c:	afa40024 	sw	a0,36(sp)
    let (page_idx, page_pa) = page_alloc().expect("sys_mem_alloc: page_alloc failed");
80031130:	0c00b018 	jal	8002c060 <_ZN8mos_65022mm4page10page_alloc17ha4107379511cc364E>
80031134:	00000000 	nop
80031138:	8fa50024 	lw	a1,36(sp)
8003113c:	3c018105 	lui	at,0x8105
80031140:	2421fce4 	addiu	at,at,-796
80031144:	03a01025 	move	v0,sp
80031148:	ac410010 	sw	at,16(v0)
8003114c:	3c018105 	lui	at,0x8105
80031150:	2426eff0 	addiu	a2,at,-4112
80031154:	27a40054 	addiu	a0,sp,84
80031158:	24070020 	li	a3,32
8003115c:	0c009775 	jal	80025dd4 <_ZN4core6option15Option$LT$T$GT$6expect17hbdb64079f11363a0E>
80031160:	00000000 	nop
80031164:	8fa20028 	lw	v0,40(sp)
80031168:	8fa10054 	lw	at,84(sp)
8003116c:	afa1002c 	sw	at,44(sp)
80031170:	afa10084 	sw	at,132(sp)
80031174:	8fa10058 	lw	at,88(sp)
80031178:	afa10050 	sw	at,80(sp)
    let result = env
8003117c:	8c4400b0 	lw	a0,176(v0)
        .map_va_to_pa(va, page_pa, env.env_asid, 1, &perm, false);
80031180:	8c4700a4 	lw	a3,164(v0)
    let result = env
80031184:	8fa1003c 	lw	at,60(sp)
80031188:	afa10088 	sw	at,136(sp)
8003118c:	8fa10088 	lw	at,136(sp)
80031190:	afa1008c 	sw	at,140(sp)
80031194:	8fa5008c 	lw	a1,140(sp)
80031198:	8fa10050 	lw	at,80(sp)
8003119c:	afa10090 	sw	at,144(sp)
800311a0:	8fa10090 	lw	at,144(sp)
800311a4:	afa10094 	sw	at,148(sp)
800311a8:	8fa60094 	lw	a2,148(sp)
800311ac:	03a00825 	move	at,sp
800311b0:	27a20044 	addiu	v0,sp,68
800311b4:	ac220014 	sw	v0,20(at)
800311b8:	24020001 	li	v0,1
800311bc:	ac220010 	sw	v0,16(at)
800311c0:	ac200018 	sw	zero,24(at)
800311c4:	0c00b1de 	jal	8002c778 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E>
800311c8:	00000000 	nop
800311cc:	afa20068 	sw	v0,104(sp)
800311d0:	afa3006c 	sw	v1,108(sp)
800311d4:	27a40068 	addiu	a0,sp,104
    if result.is_ok() {
800311d8:	0c0097d6 	jal	80025f58 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2799107765c1d5b7E>
800311dc:	00000000 	nop
800311e0:	1440000e 	bnez	v0,8003121c <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x2c4>
800311e4:	00000000 	nop
800311e8:	0800c480 	j	80031200 <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x2a8>
800311ec:	00000000 	nop
800311f0:	2401fffd 	li	at,-3
        return -E_INVAL;
800311f4:	afa10048 	sw	at,72(sp)
}
800311f8:	0800c48f 	j	8003123c <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x2e4>
800311fc:	00000000 	nop
        page_decref(page_idx);
80031200:	8fa4002c 	lw	a0,44(sp)
80031204:	0c00b0e3 	jal	8002c38c <_ZN8mos_65022mm4page11page_decref17h261540825c48b6f2E>
80031208:	00000000 	nop
8003120c:	2401fffd 	li	at,-3
        -E_INVAL
80031210:	afa10048 	sw	at,72(sp)
    if result.is_ok() {
80031214:	0800c48a 	j	80031228 <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x2d0>
80031218:	00000000 	nop
        0
8003121c:	afa00048 	sw	zero,72(sp)
    if result.is_ok() {
80031220:	0800c48a 	j	80031228 <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x2d0>
80031224:	00000000 	nop
80031228:	27a4004c 	addiu	a0,sp,76
}
8003122c:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
80031230:	00000000 	nop
80031234:	0800c48f 	j	8003123c <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E+0x2e4>
80031238:	00000000 	nop
8003123c:	8fa20048 	lw	v0,72(sp)
80031240:	8fbf00cc 	lw	ra,204(sp)
80031244:	27bd00d0 	addiu	sp,sp,208
80031248:	03e00008 	jr	ra
8003124c:	00000000 	nop

80031250 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E>:
fn sys_mem_map(
80031250:	27bdfe98 	addiu	sp,sp,-360
80031254:	afbf0164 	sw	ra,356(sp)
80031258:	afa60044 	sw	a2,68(sp)
8003125c:	afa40048 	sw	a0,72(sp)
80031260:	8fa10178 	lw	at,376(sp)
80031264:	afa50050 	sw	a1,80(sp)
80031268:	8fa10050 	lw	at,80(sp)
8003126c:	afa1004c 	sw	at,76(sp)
80031270:	afa70058 	sw	a3,88(sp)
80031274:	8fa10058 	lw	at,88(sp)
80031278:	afa10054 	sw	at,84(sp)
8003127c:	afa4007c 	sw	a0,124(sp)
80031280:	afa60080 	sw	a2,128(sp)
    if is_illegal_va(srcva) || is_illegal_va(dstva) {
80031284:	8fa1004c 	lw	at,76(sp)
80031288:	afa10084 	sw	at,132(sp)
8003128c:	8fa10084 	lw	at,132(sp)
80031290:	afa10088 	sw	at,136(sp)
80031294:	8fa10088 	lw	at,136(sp)
80031298:	afa1015c 	sw	at,348(sp)
8003129c:	8fa1015c 	lw	at,348(sp)
800312a0:	afa10158 	sw	at,344(sp)
    va < UTEMP || va >= UTOP
800312a4:	3c018105 	lui	at,0x8105
800312a8:	2425f180 	addiu	a1,at,-3712
800312ac:	27a40158 	addiu	a0,sp,344
800312b0:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
800312b4:	00000000 	nop
800312b8:	1440000b 	bnez	v0,800312e8 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x98>
800312bc:	00000000 	nop
800312c0:	0800c4b2 	j	800312c8 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x78>
800312c4:	00000000 	nop
800312c8:	3c018105 	lui	at,0x8105
800312cc:	2425f164 	addiu	a1,at,-3740
800312d0:	27a40158 	addiu	a0,sp,344
800312d4:	0c00823d 	jal	800208f4 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E>
800312d8:	00000000 	nop
800312dc:	a3a20163 	sb	v0,355(sp)
800312e0:	0800c4be 	j	800312f8 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0xa8>
800312e4:	00000000 	nop
800312e8:	24010001 	li	at,1
800312ec:	a3a10163 	sb	at,355(sp)
800312f0:	0800c4be 	j	800312f8 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0xa8>
800312f4:	00000000 	nop
}
800312f8:	93a10163 	lbu	at,355(sp)
800312fc:	30210001 	andi	at,at,0x1
    if is_illegal_va(srcva) || is_illegal_va(dstva) {
80031300:	14200026 	bnez	at,8003139c <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x14c>
80031304:	00000000 	nop
80031308:	0800c4c4 	j	80031310 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0xc0>
8003130c:	00000000 	nop
80031310:	8fa10054 	lw	at,84(sp)
80031314:	afa1008c 	sw	at,140(sp)
80031318:	8fa1008c 	lw	at,140(sp)
8003131c:	afa10090 	sw	at,144(sp)
80031320:	8fa10090 	lw	at,144(sp)
80031324:	afa10150 	sw	at,336(sp)
80031328:	8fa10150 	lw	at,336(sp)
8003132c:	afa1014c 	sw	at,332(sp)
    va < UTEMP || va >= UTOP
80031330:	3c018105 	lui	at,0x8105
80031334:	2425f180 	addiu	a1,at,-3712
80031338:	27a4014c 	addiu	a0,sp,332
8003133c:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
80031340:	00000000 	nop
80031344:	1440000b 	bnez	v0,80031374 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x124>
80031348:	00000000 	nop
8003134c:	0800c4d5 	j	80031354 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x104>
80031350:	00000000 	nop
80031354:	3c018105 	lui	at,0x8105
80031358:	2425f164 	addiu	a1,at,-3740
8003135c:	27a4014c 	addiu	a0,sp,332
80031360:	0c00823d 	jal	800208f4 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E>
80031364:	00000000 	nop
80031368:	a3a20157 	sb	v0,343(sp)
8003136c:	0800c4e1 	j	80031384 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x134>
80031370:	00000000 	nop
80031374:	24010001 	li	at,1
80031378:	a3a10157 	sb	at,343(sp)
8003137c:	0800c4e1 	j	80031384 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x134>
80031380:	00000000 	nop
}
80031384:	93a10157 	lbu	at,343(sp)
80031388:	30210001 	andi	at,at,0x1
    if is_illegal_va(srcva) || is_illegal_va(dstva) {
8003138c:	10200007 	beqz	at,800313ac <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x15c>
80031390:	00000000 	nop
80031394:	0800c4e7 	j	8003139c <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x14c>
80031398:	00000000 	nop
8003139c:	2401fffd 	li	at,-3
        return -E_INVAL;
800313a0:	afa1005c 	sw	at,92(sp)
800313a4:	0800c5ee 	j	800317b8 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x568>
800313a8:	00000000 	nop
800313ac:	8fa10048 	lw	at,72(sp)
800313b0:	afa10144 	sw	at,324(sp)
    if envid == 0 {
800313b4:	14200016 	bnez	at,80031410 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x1c0>
800313b8:	00000000 	nop
800313bc:	0800c4f1 	j	800313c4 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x174>
800313c0:	00000000 	nop
        let cur_env = CUR_ENV.lock();
800313c4:	3c018105 	lui	at,0x8105
800313c8:	24240960 	addiu	a0,at,2400
800313cc:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
800313d0:	00000000 	nop
800313d4:	00402025 	move	a0,v0
800313d8:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
800313dc:	00000000 	nop
800313e0:	afa20128 	sw	v0,296(sp)
800313e4:	27a40128 	addiu	a0,sp,296
        if let Some(idx) = *cur_env {
800313e8:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
800313ec:	00000000 	nop
800313f0:	00400825 	move	at,v0
800313f4:	afa10040 	sw	at,64(sp)
800313f8:	8c410000 	lw	at,0(v0)
800313fc:	24020001 	li	v0,1
80031400:	10220008 	beq	at,v0,80031424 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x1d4>
80031404:	00000000 	nop
80031408:	0800c512 	j	80031448 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x1f8>
8003140c:	00000000 	nop
    envid & (NENV - 1)
80031410:	8fa10048 	lw	at,72(sp)
80031414:	302103ff 	andi	at,at,0x3ff
80031418:	afa10124 	sw	at,292(sp)
}
8003141c:	0800c51e 	j	80031478 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x228>
80031420:	00000000 	nop
        if let Some(idx) = *cur_env {
80031424:	8fa10040 	lw	at,64(sp)
80031428:	8c210004 	lw	at,4(at)
8003142c:	afa10148 	sw	at,328(sp)
            return idx;
80031430:	afa10124 	sw	at,292(sp)
80031434:	27a40128 	addiu	a0,sp,296
    }
80031438:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
8003143c:	00000000 	nop
80031440:	0800c51e 	j	80031478 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x228>
80031444:	00000000 	nop
            panic!("No current env.\n");
80031448:	3c018105 	lui	at,0x8105
8003144c:	2425fa88 	addiu	a1,at,-1400
80031450:	27a4012c 	addiu	a0,sp,300
80031454:	afa4003c 	sw	a0,60(sp)
80031458:	24060001 	li	a2,1
8003145c:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80031460:	00000000 	nop
80031464:	8fa4003c 	lw	a0,60(sp)
80031468:	3c018105 	lui	at,0x8105
8003146c:	2425fa90 	addiu	a1,at,-1392
80031470:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80031474:	00000000 	nop
}
80031478:	8fa10044 	lw	at,68(sp)
8003147c:	8fa20124 	lw	v0,292(sp)
80031480:	afa20038 	sw	v0,56(sp)
    let srcidx = get_idx_by_envid(srcid);
80031484:	afa20094 	sw	v0,148(sp)
80031488:	afa1011c 	sw	at,284(sp)
    if envid == 0 {
8003148c:	14200016 	bnez	at,800314e8 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x298>
80031490:	00000000 	nop
80031494:	0800c527 	j	8003149c <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x24c>
80031498:	00000000 	nop
        let cur_env = CUR_ENV.lock();
8003149c:	3c018105 	lui	at,0x8105
800314a0:	24240960 	addiu	a0,at,2400
800314a4:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
800314a8:	00000000 	nop
800314ac:	00402025 	move	a0,v0
800314b0:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
800314b4:	00000000 	nop
800314b8:	afa20100 	sw	v0,256(sp)
800314bc:	27a40100 	addiu	a0,sp,256
        if let Some(idx) = *cur_env {
800314c0:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
800314c4:	00000000 	nop
800314c8:	00400825 	move	at,v0
800314cc:	afa10034 	sw	at,52(sp)
800314d0:	8c410000 	lw	at,0(v0)
800314d4:	24020001 	li	v0,1
800314d8:	10220008 	beq	at,v0,800314fc <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x2ac>
800314dc:	00000000 	nop
800314e0:	0800c548 	j	80031520 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x2d0>
800314e4:	00000000 	nop
    envid & (NENV - 1)
800314e8:	8fa10044 	lw	at,68(sp)
800314ec:	302103ff 	andi	at,at,0x3ff
800314f0:	afa100fc 	sw	at,252(sp)
}
800314f4:	0800c554 	j	80031550 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x300>
800314f8:	00000000 	nop
        if let Some(idx) = *cur_env {
800314fc:	8fa10034 	lw	at,52(sp)
80031500:	8c210004 	lw	at,4(at)
80031504:	afa10120 	sw	at,288(sp)
            return idx;
80031508:	afa100fc 	sw	at,252(sp)
8003150c:	27a40100 	addiu	a0,sp,256
    }
80031510:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
80031514:	00000000 	nop
80031518:	0800c554 	j	80031550 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x300>
8003151c:	00000000 	nop
            panic!("No current env.\n");
80031520:	3c018105 	lui	at,0x8105
80031524:	2425fa88 	addiu	a1,at,-1400
80031528:	27a40104 	addiu	a0,sp,260
8003152c:	afa40030 	sw	a0,48(sp)
80031530:	24060001 	li	a2,1
80031534:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80031538:	00000000 	nop
8003153c:	8fa40030 	lw	a0,48(sp)
80031540:	3c018105 	lui	at,0x8105
80031544:	2425fa90 	addiu	a1,at,-1392
80031548:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003154c:	00000000 	nop
}
80031550:	8fa100fc 	lw	at,252(sp)
80031554:	afa1002c 	sw	at,44(sp)
    let dstidx = get_idx_by_envid(dstid);
80031558:	afa10098 	sw	at,152(sp)
    let mut envs = ENV_LIST.lock();
8003155c:	3c018105 	lui	at,0x8105
80031560:	24240960 	addiu	a0,at,2400
80031564:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
80031568:	00000000 	nop
8003156c:	00402025 	move	a0,v0
80031570:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
80031574:	00000000 	nop
80031578:	afa20060 	sw	v0,96(sp)
8003157c:	27a40060 	addiu	a0,sp,96
        let srcenv = &envs[srcidx];
80031580:	0c00ac79 	jal	8002b1e4 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h990db7d0b83dd2d1E>
80031584:	00000000 	nop
80031588:	8fa50038 	lw	a1,56(sp)
8003158c:	00402025 	move	a0,v0
80031590:	3c018105 	lui	at,0x8105
80031594:	2426fcf4 	addiu	a2,at,-780
80031598:	0c00accc 	jal	8002b330 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hba386fd63984b7c3E>
8003159c:	00000000 	nop
800315a0:	afa2009c 	sw	v0,156(sp)
        match srcenv.env_pgdir.va_to_pa(srcva) {
800315a4:	8c4500b0 	lw	a1,176(v0)
800315a8:	8fa1004c 	lw	at,76(sp)
800315ac:	afa100a0 	sw	at,160(sp)
800315b0:	8fa100a0 	lw	at,160(sp)
800315b4:	afa100a4 	sw	at,164(sp)
800315b8:	8fa600a4 	lw	a2,164(sp)
800315bc:	27a40064 	addiu	a0,sp,100
800315c0:	0c00b479 	jal	8002d1e4 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE>
800315c4:	00000000 	nop
800315c8:	8fa10064 	lw	at,100(sp)
800315cc:	10200064 	beqz	at,80031760 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x510>
800315d0:	00000000 	nop
800315d4:	0800c577 	j	800315dc <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x38c>
800315d8:	00000000 	nop
            Some((_, pa)) => pa,
800315dc:	8fa10068 	lw	at,104(sp)
800315e0:	afa1006c 	sw	at,108(sp)
800315e4:	27a40060 	addiu	a0,sp,96
    let dstenv = &mut envs[dstidx];
800315e8:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
800315ec:	00000000 	nop
800315f0:	8fa5002c 	lw	a1,44(sp)
800315f4:	00402025 	move	a0,v0
800315f8:	3c018105 	lui	at,0x8105
800315fc:	2426fd04 	addiu	a2,at,-764
80031600:	0c00ad35 	jal	8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>
80031604:	00000000 	nop
80031608:	00400825 	move	at,v0
8003160c:	afa10028 	sw	at,40(sp)
80031610:	afa200a8 	sw	v0,168(sp)
    let idx = get_page_index_by_kvaddr(pa_to_kva(pa)).unwrap();
80031614:	8fa1006c 	lw	at,108(sp)
80031618:	afa100ac 	sw	at,172(sp)
8003161c:	8fa100ac 	lw	at,172(sp)
80031620:	afa100b0 	sw	at,176(sp)
80031624:	8fa400b0 	lw	a0,176(sp)
80031628:	0c00af44 	jal	8002bd10 <_ZN8mos_65022mm4addr9pa_to_kva17h2cbb9d7cedc35302E>
8003162c:	00000000 	nop
80031630:	afa200b4 	sw	v0,180(sp)
80031634:	8fa100b4 	lw	at,180(sp)
80031638:	afa10070 	sw	at,112(sp)
8003163c:	8fa10070 	lw	at,112(sp)
80031640:	afa100b8 	sw	at,184(sp)
80031644:	8fa100b8 	lw	at,184(sp)
80031648:	afa100e0 	sw	at,224(sp)
8003164c:	8fa100e0 	lw	at,224(sp)
80031650:	afa100dc 	sw	at,220(sp)
80031654:	8fa100dc 	lw	at,220(sp)
80031658:	afa100e8 	sw	at,232(sp)
8003165c:	8fa100e8 	lw	at,232(sp)
80031660:	afa100ec 	sw	at,236(sp)
80031664:	8fa400ec 	lw	a0,236(sp)
80031668:	3c018105 	lui	at,0x8105
8003166c:	8c21f154 	lw	at,-3756(at)
80031670:	afa100f0 	sw	at,240(sp)
80031674:	8fa100f0 	lw	at,240(sp)
80031678:	afa100f4 	sw	at,244(sp)
8003167c:	8fa500f4 	lw	a1,244(sp)
80031680:	0c00ae56 	jal	8002b958 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Sub$GT$3sub17hbee2a7e528d5ebe9E>
80031684:	00000000 	nop
80031688:	afa200f8 	sw	v0,248(sp)
8003168c:	8fa100f8 	lw	at,248(sp)
80031690:	afa100e4 	sw	at,228(sp)
80031694:	8fa400e4 	lw	a0,228(sp)
80031698:	24051000 	li	a1,4096
8003169c:	0c008502 	jal	80021408 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h473bdee4731d0bddE>
800316a0:	00000000 	nop
800316a4:	afa200d0 	sw	v0,208(sp)
800316a8:	afa300d4 	sw	v1,212(sp)
        match self {
800316ac:	8fa100d0 	lw	at,208(sp)
800316b0:	14200007 	bnez	at,800316d0 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x480>
800316b4:	00000000 	nop
800316b8:	0800c5b0 	j	800316c0 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x470>
800316bc:	00000000 	nop
            None => unwrap_failed(),
800316c0:	3c018105 	lui	at,0x8105
800316c4:	2424fd14 	addiu	a0,at,-748
800316c8:	0c00fab9 	jal	8003eae4 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
800316cc:	00000000 	nop
            Some(val) => val,
800316d0:	8fa400d4 	lw	a0,212(sp)
800316d4:	afa40024 	sw	a0,36(sp)
800316d8:	afa400d8 	sw	a0,216(sp)
800316dc:	afa400bc 	sw	a0,188(sp)
    page_incref(idx);
800316e0:	0c00b0b5 	jal	8002c2d4 <_ZN8mos_65022mm4page11page_incref17hd9cc7671dca686beE>
800316e4:	00000000 	nop
800316e8:	8fa10028 	lw	at,40(sp)
    let result = dstenv
800316ec:	8c2400b0 	lw	a0,176(at)
        .map_va_to_pa(dstva, pa, dstenv.env_asid, 1, &flags, true);
800316f0:	8c2700a4 	lw	a3,164(at)
    let result = dstenv
800316f4:	8fa10054 	lw	at,84(sp)
800316f8:	afa100c0 	sw	at,192(sp)
800316fc:	8fa100c0 	lw	at,192(sp)
80031700:	afa100c4 	sw	at,196(sp)
80031704:	8fa500c4 	lw	a1,196(sp)
80031708:	8fa1006c 	lw	at,108(sp)
8003170c:	afa100c8 	sw	at,200(sp)
80031710:	8fa100c8 	lw	at,200(sp)
80031714:	afa100cc 	sw	at,204(sp)
80031718:	8fa600cc 	lw	a2,204(sp)
8003171c:	03a01025 	move	v0,sp
80031720:	24010001 	li	at,1
80031724:	ac410018 	sw	at,24(v0)
80031728:	27a30178 	addiu	v1,sp,376
8003172c:	ac430014 	sw	v1,20(v0)
80031730:	ac410010 	sw	at,16(v0)
80031734:	0c00b1de 	jal	8002c778 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E>
80031738:	00000000 	nop
8003173c:	afa20074 	sw	v0,116(sp)
80031740:	afa30078 	sw	v1,120(sp)
80031744:	27a40074 	addiu	a0,sp,116
    if result.is_ok() {
80031748:	0c0097d6 	jal	80025f58 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2799107765c1d5b7E>
8003174c:	00000000 	nop
80031750:	14400011 	bnez	v0,80031798 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x548>
80031754:	00000000 	nop
80031758:	0800c5df 	j	8003177c <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x52c>
8003175c:	00000000 	nop
80031760:	2401fffd 	li	at,-3
            _ => return -E_INVAL,
80031764:	afa1005c 	sw	at,92(sp)
80031768:	27a40060 	addiu	a0,sp,96
}
8003176c:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
80031770:	00000000 	nop
80031774:	0800c5ee 	j	800317b8 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x568>
80031778:	00000000 	nop
        page_decref(idx);
8003177c:	8fa40024 	lw	a0,36(sp)
80031780:	0c00b0e3 	jal	8002c38c <_ZN8mos_65022mm4page11page_decref17h261540825c48b6f2E>
80031784:	00000000 	nop
80031788:	2401fffd 	li	at,-3
        -E_INVAL
8003178c:	afa1005c 	sw	at,92(sp)
    if result.is_ok() {
80031790:	0800c5e9 	j	800317a4 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x554>
80031794:	00000000 	nop
        0
80031798:	afa0005c 	sw	zero,92(sp)
    if result.is_ok() {
8003179c:	0800c5e9 	j	800317a4 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x554>
800317a0:	00000000 	nop
800317a4:	27a40060 	addiu	a0,sp,96
}
800317a8:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
800317ac:	00000000 	nop
800317b0:	0800c5ee 	j	800317b8 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E+0x568>
800317b4:	00000000 	nop
800317b8:	8fa2005c 	lw	v0,92(sp)
800317bc:	8fbf0164 	lw	ra,356(sp)
800317c0:	27bd0168 	addiu	sp,sp,360
800317c4:	03e00008 	jr	ra
800317c8:	00000000 	nop

800317cc <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E>:
fn sys_mem_unmap(envid: EnvIndex, va: VirtAddr) -> i32 {
800317cc:	27bdff78 	addiu	sp,sp,-136
800317d0:	afbf0084 	sw	ra,132(sp)
800317d4:	afa40020 	sw	a0,32(sp)
800317d8:	afa50028 	sw	a1,40(sp)
800317dc:	8fa10028 	lw	at,40(sp)
800317e0:	afa10024 	sw	at,36(sp)
800317e4:	afa40034 	sw	a0,52(sp)
    if is_illegal_va(va) {
800317e8:	8fa10024 	lw	at,36(sp)
800317ec:	afa10038 	sw	at,56(sp)
800317f0:	8fa10038 	lw	at,56(sp)
800317f4:	afa1003c 	sw	at,60(sp)
800317f8:	8fa1003c 	lw	at,60(sp)
800317fc:	afa1007c 	sw	at,124(sp)
80031800:	8fa1007c 	lw	at,124(sp)
80031804:	afa10078 	sw	at,120(sp)
    va < UTEMP || va >= UTOP
80031808:	3c018105 	lui	at,0x8105
8003180c:	2425f180 	addiu	a1,at,-3712
80031810:	27a40078 	addiu	a0,sp,120
80031814:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
80031818:	00000000 	nop
8003181c:	1440000b 	bnez	v0,8003184c <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E+0x80>
80031820:	00000000 	nop
80031824:	0800c60b 	j	8003182c <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E+0x60>
80031828:	00000000 	nop
8003182c:	3c018105 	lui	at,0x8105
80031830:	2425f164 	addiu	a1,at,-3740
80031834:	27a40078 	addiu	a0,sp,120
80031838:	0c00823d 	jal	800208f4 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E>
8003183c:	00000000 	nop
80031840:	a3a20083 	sb	v0,131(sp)
80031844:	0800c617 	j	8003185c <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E+0x90>
80031848:	00000000 	nop
8003184c:	24010001 	li	at,1
80031850:	a3a10083 	sb	at,131(sp)
80031854:	0800c617 	j	8003185c <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E+0x90>
80031858:	00000000 	nop
}
8003185c:	93a10083 	lbu	at,131(sp)
80031860:	30210001 	andi	at,at,0x1
    if is_illegal_va(va) {
80031864:	1420005b 	bnez	at,800319d4 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E+0x208>
80031868:	00000000 	nop
8003186c:	0800c61d 	j	80031874 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E+0xa8>
80031870:	00000000 	nop
80031874:	8fa10020 	lw	at,32(sp)
80031878:	afa10070 	sw	at,112(sp)
    if envid == 0 {
8003187c:	14200016 	bnez	at,800318d8 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E+0x10c>
80031880:	00000000 	nop
80031884:	0800c623 	j	8003188c <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E+0xc0>
80031888:	00000000 	nop
        let cur_env = CUR_ENV.lock();
8003188c:	3c018105 	lui	at,0x8105
80031890:	24240960 	addiu	a0,at,2400
80031894:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
80031898:	00000000 	nop
8003189c:	00402025 	move	a0,v0
800318a0:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
800318a4:	00000000 	nop
800318a8:	afa20054 	sw	v0,84(sp)
800318ac:	27a40054 	addiu	a0,sp,84
        if let Some(idx) = *cur_env {
800318b0:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
800318b4:	00000000 	nop
800318b8:	00400825 	move	at,v0
800318bc:	afa1001c 	sw	at,28(sp)
800318c0:	8c410000 	lw	at,0(v0)
800318c4:	24020001 	li	v0,1
800318c8:	10220008 	beq	at,v0,800318ec <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E+0x120>
800318cc:	00000000 	nop
800318d0:	0800c644 	j	80031910 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E+0x144>
800318d4:	00000000 	nop
    envid & (NENV - 1)
800318d8:	8fa10020 	lw	at,32(sp)
800318dc:	302103ff 	andi	at,at,0x3ff
800318e0:	afa10050 	sw	at,80(sp)
}
800318e4:	0800c650 	j	80031940 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E+0x174>
800318e8:	00000000 	nop
        if let Some(idx) = *cur_env {
800318ec:	8fa1001c 	lw	at,28(sp)
800318f0:	8c210004 	lw	at,4(at)
800318f4:	afa10074 	sw	at,116(sp)
            return idx;
800318f8:	afa10050 	sw	at,80(sp)
800318fc:	27a40054 	addiu	a0,sp,84
    }
80031900:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
80031904:	00000000 	nop
80031908:	0800c650 	j	80031940 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E+0x174>
8003190c:	00000000 	nop
            panic!("No current env.\n");
80031910:	3c018105 	lui	at,0x8105
80031914:	2425fa88 	addiu	a1,at,-1400
80031918:	27a40058 	addiu	a0,sp,88
8003191c:	afa40018 	sw	a0,24(sp)
80031920:	24060001 	li	a2,1
80031924:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80031928:	00000000 	nop
8003192c:	8fa40018 	lw	a0,24(sp)
80031930:	3c018105 	lui	at,0x8105
80031934:	2425fa90 	addiu	a1,at,-1392
80031938:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003193c:	00000000 	nop
}
80031940:	8fa10050 	lw	at,80(sp)
80031944:	afa10010 	sw	at,16(sp)
    let idx = get_idx_by_envid(envid);
80031948:	afa10040 	sw	at,64(sp)
    let mut envs = ENV_LIST.lock();
8003194c:	3c018105 	lui	at,0x8105
80031950:	24240960 	addiu	a0,at,2400
80031954:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
80031958:	00000000 	nop
8003195c:	00402025 	move	a0,v0
80031960:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
80031964:	00000000 	nop
80031968:	afa20030 	sw	v0,48(sp)
8003196c:	27a40030 	addiu	a0,sp,48
80031970:	afa40014 	sw	a0,20(sp)
    let env = &mut envs[idx];
80031974:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
80031978:	00000000 	nop
8003197c:	8fa50010 	lw	a1,16(sp)
80031980:	00402025 	move	a0,v0
80031984:	3c018105 	lui	at,0x8105
80031988:	2426fd24 	addiu	a2,at,-732
8003198c:	0c00ad35 	jal	8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>
80031990:	00000000 	nop
80031994:	afa20044 	sw	v0,68(sp)
    let _ = env.env_pgdir.unmap_va(va, env.env_asid);
80031998:	8c4400b0 	lw	a0,176(v0)
8003199c:	8c4600a4 	lw	a2,164(v0)
800319a0:	8fa10024 	lw	at,36(sp)
800319a4:	afa10048 	sw	at,72(sp)
800319a8:	8fa10048 	lw	at,72(sp)
800319ac:	afa1004c 	sw	at,76(sp)
800319b0:	8fa5004c 	lw	a1,76(sp)
800319b4:	0c00b37f 	jal	8002cdfc <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17ha0de6625ec0d606dE>
800319b8:	00000000 	nop
800319bc:	8fa40014 	lw	a0,20(sp)
    0
800319c0:	afa0002c 	sw	zero,44(sp)
}
800319c4:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
800319c8:	00000000 	nop
800319cc:	0800c679 	j	800319e4 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E+0x218>
800319d0:	00000000 	nop
800319d4:	2401fffd 	li	at,-3
        return -E_INVAL;
800319d8:	afa1002c 	sw	at,44(sp)
}
800319dc:	0800c679 	j	800319e4 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E+0x218>
800319e0:	00000000 	nop
800319e4:	8fa2002c 	lw	v0,44(sp)
800319e8:	8fbf0084 	lw	ra,132(sp)
800319ec:	27bd0088 	addiu	sp,sp,136
800319f0:	03e00008 	jr	ra
800319f4:	00000000 	nop

800319f8 <_ZN8mos_65024trap7syscall11sys_exofork17h7c1598ebac5dd5a6E>:
fn sys_exofork() -> i32 {
800319f8:	27bdff58 	addiu	sp,sp,-168
800319fc:	afbf00a4 	sw	ra,164(sp)
    let mut locked_env_list = ENV_LIST.lock();
80031a00:	3c018105 	lui	at,0x8105
80031a04:	24240960 	addiu	a0,at,2400
80031a08:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
80031a0c:	00000000 	nop
80031a10:	00402025 	move	a0,v0
80031a14:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
80031a18:	00000000 	nop
80031a1c:	afa2004c 	sw	v0,76(sp)
    let locked_curenv_idx = CUR_ENV.lock();
80031a20:	3c018105 	lui	at,0x8105
80031a24:	24240960 	addiu	a0,at,2400
80031a28:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
80031a2c:	00000000 	nop
80031a30:	00402025 	move	a0,v0
80031a34:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
80031a38:	00000000 	nop
80031a3c:	afa20050 	sw	v0,80(sp)
80031a40:	27a40050 	addiu	a0,sp,80
    let curenv_idx = if let Some(idx) = *locked_curenv_idx {
80031a44:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
80031a48:	00000000 	nop
80031a4c:	00400825 	move	at,v0
80031a50:	afa10048 	sw	at,72(sp)
80031a54:	8c410000 	lw	at,0(v0)
80031a58:	24020001 	li	v0,1
80031a5c:	1422004d 	bne	at,v0,80031b94 <_ZN8mos_65024trap7syscall11sys_exofork17h7c1598ebac5dd5a6E+0x19c>
80031a60:	00000000 	nop
80031a64:	0800c69b 	j	80031a6c <_ZN8mos_65024trap7syscall11sys_exofork17h7c1598ebac5dd5a6E+0x74>
80031a68:	00000000 	nop
80031a6c:	8fa10048 	lw	at,72(sp)
80031a70:	8c210004 	lw	at,4(at)
80031a74:	afa10028 	sw	at,40(sp)
80031a78:	afa10080 	sw	at,128(sp)
80031a7c:	27a4004c 	addiu	a0,sp,76
80031a80:	afa40038 	sw	a0,56(sp)
    let curenv = &locked_env_list[curenv_idx];
80031a84:	0c00ac79 	jal	8002b1e4 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h990db7d0b83dd2d1E>
80031a88:	00000000 	nop
80031a8c:	8fa50028 	lw	a1,40(sp)
80031a90:	00402025 	move	a0,v0
80031a94:	3c018105 	lui	at,0x8105
80031a98:	2426fd34 	addiu	a2,at,-716
80031a9c:	0c00accc 	jal	8002b330 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hba386fd63984b7c3E>
80031aa0:	00000000 	nop
80031aa4:	8fa40038 	lw	a0,56(sp)
80031aa8:	afa20084 	sw	v0,132(sp)
    let parent_env_id = curenv.env_id;
80031aac:	8c4100a0 	lw	at,160(v0)
80031ab0:	afa1002c 	sw	at,44(sp)
80031ab4:	afa10088 	sw	at,136(sp)
    let parent_pri = curenv.env_pri;
80031ab8:	8c4100bc 	lw	at,188(v0)
80031abc:	afa10030 	sw	at,48(sp)
80031ac0:	afa1008c 	sw	at,140(sp)
    let idx = proc::env_alloc(&mut locked_env_list, Some(parent_env_id), parent_pri)
80031ac4:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
80031ac8:	00000000 	nop
80031acc:	00402025 	move	a0,v0
80031ad0:	0c00aaf4 	jal	8002abd0 <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc7f3352224ecbc79E>
80031ad4:	00000000 	nop
80031ad8:	8fa1002c 	lw	at,44(sp)
80031adc:	00402825 	move	a1,v0
80031ae0:	00603025 	move	a2,v1
80031ae4:	8fa30030 	lw	v1,48(sp)
80031ae8:	afa10078 	sw	at,120(sp)
80031aec:	24010001 	li	at,1
80031af0:	afa10074 	sw	at,116(sp)
80031af4:	8fa70074 	lw	a3,116(sp)
80031af8:	8fa10078 	lw	at,120(sp)
80031afc:	03a01025 	move	v0,sp
80031b00:	ac430014 	sw	v1,20(v0)
80031b04:	ac410010 	sw	at,16(v0)
80031b08:	27a4006c 	addiu	a0,sp,108
80031b0c:	afa40034 	sw	a0,52(sp)
80031b10:	0c00bd20 	jal	8002f480 <_ZN8mos_65024proc9env_alloc17h2929de90cd23b3e8E>
80031b14:	00000000 	nop
80031b18:	8fa40034 	lw	a0,52(sp)
80031b1c:	3c018105 	lui	at,0x8105
80031b20:	2425fd44 	addiu	a1,at,-700
80031b24:	3c018105 	lui	at,0x8105
80031b28:	2427fd64 	addiu	a3,at,-668
80031b2c:	2406001d 	li	a2,29
80031b30:	0c0097ea 	jal	80025fa8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h509b82d8130b07b7E>
80031b34:	00000000 	nop
80031b38:	8fa40038 	lw	a0,56(sp)
80031b3c:	afa2003c 	sw	v0,60(sp)
80031b40:	afa20090 	sw	v0,144(sp)
    let new_env = &mut locked_env_list[idx];
80031b44:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
80031b48:	00000000 	nop
80031b4c:	8fa5003c 	lw	a1,60(sp)
80031b50:	00402025 	move	a0,v0
80031b54:	3c018105 	lui	at,0x8105
80031b58:	2426fd74 	addiu	a2,at,-652
80031b5c:	0c00ad35 	jal	8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>
80031b60:	00000000 	nop
80031b64:	00400825 	move	at,v0
80031b68:	afa10040 	sw	at,64(sp)
80031b6c:	afa20094 	sw	v0,148(sp)
            (&stack_end as *const usize as usize - size_of::<Trapframe>()) as *const Trapframe,
80031b70:	3c01810a 	lui	at,0x810a
80031b74:	24216000 	addiu	at,at,24576
80031b78:	2422ff68 	addiu	v0,at,-152
80031b7c:	afa20044 	sw	v0,68(sp)
80031b80:	2c210098 	sltiu	at,at,152
80031b84:	1420003c 	bnez	at,80031c78 <_ZN8mos_65024trap7syscall11sys_exofork17h7c1598ebac5dd5a6E+0x280>
80031b88:	00000000 	nop
80031b8c:	0800c6f1 	j	80031bc4 <_ZN8mos_65024trap7syscall11sys_exofork17h7c1598ebac5dd5a6E+0x1cc>
80031b90:	00000000 	nop
        panic!("sys_exofork: no curenv");
80031b94:	3c018105 	lui	at,0x8105
80031b98:	2425fdac 	addiu	a1,at,-596
80031b9c:	27a40054 	addiu	a0,sp,84
80031ba0:	afa40024 	sw	a0,36(sp)
80031ba4:	24060001 	li	a2,1
80031ba8:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80031bac:	00000000 	nop
80031bb0:	8fa40024 	lw	a0,36(sp)
80031bb4:	3c018105 	lui	at,0x8105
80031bb8:	2425fdb4 	addiu	a1,at,-588
80031bbc:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80031bc0:	00000000 	nop
            (&stack_end as *const usize as usize - size_of::<Trapframe>()) as *const Trapframe,
80031bc4:	8fa10040 	lw	at,64(sp)
80031bc8:	8fa20044 	lw	v0,68(sp)
80031bcc:	00401825 	move	v1,v0
80031bd0:	afa30020 	sw	v1,32(sp)
80031bd4:	afa20098 	sw	v0,152(sp)
80031bd8:	afa1009c 	sw	at,156(sp)
80031bdc:	24010001 	li	at,1
80031be0:	afa100a0 	sw	at,160(sp)
        ub_checks::assert_unsafe_precondition!(
80031be4:	0c00982a 	jal	800260a8 <_ZN4core9ub_checks17check_language_ub17h457d77ba932f5d8eE>
80031be8:	00000000 	nop
80031bec:	1040000a 	beqz	v0,80031c18 <_ZN8mos_65024trap7syscall11sys_exofork17h7c1598ebac5dd5a6E+0x220>
80031bf0:	00000000 	nop
80031bf4:	0800c6ff 	j	80031bfc <_ZN8mos_65024trap7syscall11sys_exofork17h7c1598ebac5dd5a6E+0x204>
80031bf8:	00000000 	nop
80031bfc:	8fa50040 	lw	a1,64(sp)
80031c00:	8fa40020 	lw	a0,32(sp)
80031c04:	24060004 	li	a2,4
80031c08:	0c00821d 	jal	80020874 <_ZN4core10intrinsics4copy18precondition_check17hf82729f49408b871E>
80031c0c:	00000000 	nop
80031c10:	0800c706 	j	80031c18 <_ZN8mos_65024trap7syscall11sys_exofork17h7c1598ebac5dd5a6E+0x220>
80031c14:	00000000 	nop
        copy(src, dst, count)
80031c18:	8fa40040 	lw	a0,64(sp)
80031c1c:	8fa50020 	lw	a1,32(sp)
80031c20:	24060098 	li	a2,152
80031c24:	0c00d830 	jal	800360c0 <memmove>
80031c28:	00000000 	nop
80031c2c:	8fa10040 	lw	at,64(sp)
    new_env.env_tf.regs[2] = 0;
80031c30:	ac200008 	sw	zero,8(at)
80031c34:	24020002 	li	v0,2
    new_env.env_status = EnvStatus::NotRunnable;
80031c38:	afa2007c 	sw	v0,124(sp)
80031c3c:	8fa2007c 	lw	v0,124(sp)
80031c40:	ac2200ac 	sw	v0,172(at)
    new_env.env_id as i32
80031c44:	8c2100a0 	lw	at,160(at)
80031c48:	afa1001c 	sw	at,28(sp)
80031c4c:	27a40050 	addiu	a0,sp,80
}
80031c50:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
80031c54:	00000000 	nop
80031c58:	27a4004c 	addiu	a0,sp,76
80031c5c:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
80031c60:	00000000 	nop
80031c64:	8fa2001c 	lw	v0,28(sp)
80031c68:	8fbf00a4 	lw	ra,164(sp)
80031c6c:	27bd00a8 	addiu	sp,sp,168
80031c70:	03e00008 	jr	ra
80031c74:	00000000 	nop
            (&stack_end as *const usize as usize - size_of::<Trapframe>()) as *const Trapframe,
80031c78:	3c018105 	lui	at,0x8105
80031c7c:	2424fd84 	addiu	a0,at,-636
80031c80:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80031c84:	00000000 	nop

80031c88 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E>:
fn sys_set_env_status(envid: usize, status: EnvStatus) -> i32 {
80031c88:	27bdff80 	addiu	sp,sp,-128
80031c8c:	afbf007c 	sw	ra,124(sp)
80031c90:	afa40034 	sw	a0,52(sp)
80031c94:	afa50038 	sw	a1,56(sp)
80031c98:	afa4004c 	sw	a0,76(sp)
    if status != EnvStatus::Free
80031c9c:	3c018105 	lui	at,0x8105
80031ca0:	2425f178 	addiu	a1,at,-3720
80031ca4:	27a40038 	addiu	a0,sp,56
80031ca8:	0c0082fd 	jal	80020bf4 <_ZN4core3cmp9PartialEq2ne17haf2bed79dacf06b9E>
80031cac:	00000000 	nop
80031cb0:	14400053 	bnez	v0,80031e00 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x178>
80031cb4:	00000000 	nop
80031cb8:	0800c730 	j	80031cc0 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x38>
80031cbc:	00000000 	nop
80031cc0:	8fa10034 	lw	at,52(sp)
80031cc4:	afa10074 	sw	at,116(sp)
    if envid == 0 {
80031cc8:	14200016 	bnez	at,80031d24 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x9c>
80031ccc:	00000000 	nop
80031cd0:	0800c736 	j	80031cd8 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x50>
80031cd4:	00000000 	nop
        let cur_env = CUR_ENV.lock();
80031cd8:	3c018105 	lui	at,0x8105
80031cdc:	24240960 	addiu	a0,at,2400
80031ce0:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
80031ce4:	00000000 	nop
80031ce8:	00402025 	move	a0,v0
80031cec:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
80031cf0:	00000000 	nop
80031cf4:	afa20058 	sw	v0,88(sp)
80031cf8:	27a40058 	addiu	a0,sp,88
        if let Some(idx) = *cur_env {
80031cfc:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
80031d00:	00000000 	nop
80031d04:	00400825 	move	at,v0
80031d08:	afa10030 	sw	at,48(sp)
80031d0c:	8c410000 	lw	at,0(v0)
80031d10:	24020001 	li	v0,1
80031d14:	10220008 	beq	at,v0,80031d38 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0xb0>
80031d18:	00000000 	nop
80031d1c:	0800c757 	j	80031d5c <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0xd4>
80031d20:	00000000 	nop
    envid & (NENV - 1)
80031d24:	8fa10034 	lw	at,52(sp)
80031d28:	302103ff 	andi	at,at,0x3ff
80031d2c:	afa10054 	sw	at,84(sp)
}
80031d30:	0800c763 	j	80031d8c <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x104>
80031d34:	00000000 	nop
        if let Some(idx) = *cur_env {
80031d38:	8fa10030 	lw	at,48(sp)
80031d3c:	8c210004 	lw	at,4(at)
80031d40:	afa10078 	sw	at,120(sp)
            return idx;
80031d44:	afa10054 	sw	at,84(sp)
80031d48:	27a40058 	addiu	a0,sp,88
    }
80031d4c:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
80031d50:	00000000 	nop
80031d54:	0800c763 	j	80031d8c <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x104>
80031d58:	00000000 	nop
            panic!("No current env.\n");
80031d5c:	3c018105 	lui	at,0x8105
80031d60:	2425fa88 	addiu	a1,at,-1400
80031d64:	27a4005c 	addiu	a0,sp,92
80031d68:	afa4002c 	sw	a0,44(sp)
80031d6c:	24060001 	li	a2,1
80031d70:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80031d74:	00000000 	nop
80031d78:	8fa4002c 	lw	a0,44(sp)
80031d7c:	3c018105 	lui	at,0x8105
80031d80:	2425fa90 	addiu	a1,at,-1392
80031d84:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80031d88:	00000000 	nop
}
80031d8c:	8fa10054 	lw	at,84(sp)
80031d90:	afa10028 	sw	at,40(sp)
    let idx = get_idx_by_envid(envid);
80031d94:	afa10050 	sw	at,80(sp)
    let mut envs = ENV_LIST.lock();
80031d98:	3c018105 	lui	at,0x8105
80031d9c:	24240960 	addiu	a0,at,2400
80031da0:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
80031da4:	00000000 	nop
80031da8:	00402025 	move	a0,v0
80031dac:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
80031db0:	00000000 	nop
80031db4:	afa20040 	sw	v0,64(sp)
80031db8:	27a40040 	addiu	a0,sp,64
    if envs[idx].env_status != EnvStatus::Runnable && status == EnvStatus::Runnable {
80031dbc:	0c00ac79 	jal	8002b1e4 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h990db7d0b83dd2d1E>
80031dc0:	00000000 	nop
80031dc4:	8fa50028 	lw	a1,40(sp)
80031dc8:	00402025 	move	a0,v0
80031dcc:	3c018105 	lui	at,0x8105
80031dd0:	2426fdc4 	addiu	a2,at,-572
80031dd4:	0c00accc 	jal	8002b330 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hba386fd63984b7c3E>
80031dd8:	00000000 	nop
80031ddc:	244400ac 	addiu	a0,v0,172
80031de0:	3c018105 	lui	at,0x8105
80031de4:	2425f158 	addiu	a1,at,-3752
80031de8:	0c0082fd 	jal	80020bf4 <_ZN4core3cmp9PartialEq2ne17haf2bed79dacf06b9E>
80031dec:	00000000 	nop
80031df0:	1440002b 	bnez	v0,80031ea0 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x218>
80031df4:	00000000 	nop
80031df8:	0800c796 	j	80031e58 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x1d0>
80031dfc:	00000000 	nop
        && status != EnvStatus::Runnable
80031e00:	3c018105 	lui	at,0x8105
80031e04:	2425f158 	addiu	a1,at,-3752
80031e08:	27a40038 	addiu	a0,sp,56
80031e0c:	0c0082fd 	jal	80020bf4 <_ZN4core3cmp9PartialEq2ne17haf2bed79dacf06b9E>
80031e10:	00000000 	nop
80031e14:	1040ffaa 	beqz	v0,80031cc0 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x38>
80031e18:	00000000 	nop
80031e1c:	0800c789 	j	80031e24 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x19c>
80031e20:	00000000 	nop
        && status != EnvStatus::NotRunnable
80031e24:	3c018105 	lui	at,0x8105
80031e28:	2425f17c 	addiu	a1,at,-3716
80031e2c:	27a40038 	addiu	a0,sp,56
80031e30:	0c0082fd 	jal	80020bf4 <_ZN4core3cmp9PartialEq2ne17haf2bed79dacf06b9E>
80031e34:	00000000 	nop
80031e38:	1040ffa1 	beqz	v0,80031cc0 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x38>
80031e3c:	00000000 	nop
80031e40:	0800c792 	j	80031e48 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x1c0>
80031e44:	00000000 	nop
80031e48:	2401fffd 	li	at,-3
        return -E_INVAL;
80031e4c:	afa1003c 	sw	at,60(sp)
}
80031e50:	0800c812 	j	80032048 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x3c0>
80031e54:	00000000 	nop
80031e58:	27a40040 	addiu	a0,sp,64
    } else if envs[idx].env_status == EnvStatus::Runnable && status != EnvStatus::Runnable {
80031e5c:	0c00ac79 	jal	8002b1e4 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h990db7d0b83dd2d1E>
80031e60:	00000000 	nop
80031e64:	8fa50028 	lw	a1,40(sp)
80031e68:	00402025 	move	a0,v0
80031e6c:	3c018105 	lui	at,0x8105
80031e70:	2426fdd4 	addiu	a2,at,-556
80031e74:	0c00accc 	jal	8002b330 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hba386fd63984b7c3E>
80031e78:	00000000 	nop
80031e7c:	244400ac 	addiu	a0,v0,172
80031e80:	3c018105 	lui	at,0x8105
80031e84:	2425f158 	addiu	a1,at,-3752
80031e88:	0c00dae4 	jal	80036b90 <_ZN66_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..cmp..PartialEq$GT$2eq17hac98e68293e6189dE>
80031e8c:	00000000 	nop
80031e90:	14400042 	bnez	v0,80031f9c <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x314>
80031e94:	00000000 	nop
80031e98:	0800c7d3 	j	80031f4c <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x2c4>
80031e9c:	00000000 	nop
    if envs[idx].env_status != EnvStatus::Runnable && status == EnvStatus::Runnable {
80031ea0:	3c018105 	lui	at,0x8105
80031ea4:	2425f158 	addiu	a1,at,-3752
80031ea8:	27a40038 	addiu	a0,sp,56
80031eac:	0c00dae4 	jal	80036b90 <_ZN66_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..cmp..PartialEq$GT$2eq17hac98e68293e6189dE>
80031eb0:	00000000 	nop
80031eb4:	1040ffe8 	beqz	v0,80031e58 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x1d0>
80031eb8:	00000000 	nop
80031ebc:	0800c7b1 	j	80031ec4 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x23c>
80031ec0:	00000000 	nop
        let mut env_sched_list = ENV_SCHED_LIST.lock();
80031ec4:	3c018105 	lui	at,0x8105
80031ec8:	24240960 	addiu	a0,at,2400
80031ecc:	0c00db14 	jal	80036c50 <_ZN74_$LT$mos_6502..proc..ENV_SCHED_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb461aaf754aa1f00E>
80031ed0:	00000000 	nop
80031ed4:	00402025 	move	a0,v0
80031ed8:	0c00a09c 	jal	80028270 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E>
80031edc:	00000000 	nop
80031ee0:	afa20044 	sw	v0,68(sp)
80031ee4:	27a40044 	addiu	a0,sp,68
80031ee8:	afa40024 	sw	a0,36(sp)
        env_sched_list.insert_to_tail(envs[idx].env_sched_link.clone());
80031eec:	0c00ad19 	jal	8002b464 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hdb38b7a74b019393E>
80031ef0:	00000000 	nop
80031ef4:	afa20020 	sw	v0,32(sp)
80031ef8:	27a40040 	addiu	a0,sp,64
80031efc:	0c00ac79 	jal	8002b1e4 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h990db7d0b83dd2d1E>
80031f00:	00000000 	nop
80031f04:	8fa50028 	lw	a1,40(sp)
80031f08:	00402025 	move	a0,v0
80031f0c:	3c018105 	lui	at,0x8105
80031f10:	2426fdf4 	addiu	a2,at,-524
80031f14:	0c00accc 	jal	8002b330 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hba386fd63984b7c3E>
80031f18:	00000000 	nop
80031f1c:	244400b4 	addiu	a0,v0,180
80031f20:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
80031f24:	00000000 	nop
80031f28:	8fa40020 	lw	a0,32(sp)
80031f2c:	00402825 	move	a1,v0
80031f30:	0c00d48b 	jal	8003522c <_ZN8mos_65024util16DoubleLinkedList14insert_to_tail17h289aeba59114fbe3E>
80031f34:	00000000 	nop
80031f38:	8fa40024 	lw	a0,36(sp)
    } else if envs[idx].env_status == EnvStatus::Runnable && status != EnvStatus::Runnable {
80031f3c:	0c008cff 	jal	800233fc <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17hde8d744f358f0af3E>
80031f40:	00000000 	nop
80031f44:	0800c7d3 	j	80031f4c <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x2c4>
80031f48:	00000000 	nop
    envs[idx].env_status = status;
80031f4c:	8fa10038 	lw	at,56(sp)
80031f50:	afa10018 	sw	at,24(sp)
80031f54:	27a40040 	addiu	a0,sp,64
80031f58:	afa4001c 	sw	a0,28(sp)
80031f5c:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
80031f60:	00000000 	nop
80031f64:	8fa50028 	lw	a1,40(sp)
80031f68:	00402025 	move	a0,v0
80031f6c:	3c018105 	lui	at,0x8105
80031f70:	2426fe04 	addiu	a2,at,-508
80031f74:	0c00ad35 	jal	8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>
80031f78:	00000000 	nop
80031f7c:	8fa10018 	lw	at,24(sp)
80031f80:	8fa4001c 	lw	a0,28(sp)
80031f84:	ac4100ac 	sw	at,172(v0)
    0
80031f88:	afa0003c 	sw	zero,60(sp)
}
80031f8c:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
80031f90:	00000000 	nop
80031f94:	0800c812 	j	80032048 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x3c0>
80031f98:	00000000 	nop
    } else if envs[idx].env_status == EnvStatus::Runnable && status != EnvStatus::Runnable {
80031f9c:	3c018105 	lui	at,0x8105
80031fa0:	2425f158 	addiu	a1,at,-3752
80031fa4:	27a40038 	addiu	a0,sp,56
80031fa8:	0c0082fd 	jal	80020bf4 <_ZN4core3cmp9PartialEq2ne17haf2bed79dacf06b9E>
80031fac:	00000000 	nop
80031fb0:	1040ffe6 	beqz	v0,80031f4c <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x2c4>
80031fb4:	00000000 	nop
80031fb8:	0800c7f0 	j	80031fc0 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x338>
80031fbc:	00000000 	nop
        let mut env_sched_list = ENV_SCHED_LIST.lock();
80031fc0:	3c018105 	lui	at,0x8105
80031fc4:	24240960 	addiu	a0,at,2400
80031fc8:	0c00db14 	jal	80036c50 <_ZN74_$LT$mos_6502..proc..ENV_SCHED_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb461aaf754aa1f00E>
80031fcc:	00000000 	nop
80031fd0:	00402025 	move	a0,v0
80031fd4:	0c00a09c 	jal	80028270 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E>
80031fd8:	00000000 	nop
80031fdc:	afa20048 	sw	v0,72(sp)
80031fe0:	27a40048 	addiu	a0,sp,72
80031fe4:	afa40014 	sw	a0,20(sp)
        env_sched_list.remove(envs[idx].env_sched_link.clone());
80031fe8:	0c00ad19 	jal	8002b464 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hdb38b7a74b019393E>
80031fec:	00000000 	nop
80031ff0:	afa20010 	sw	v0,16(sp)
80031ff4:	27a40040 	addiu	a0,sp,64
80031ff8:	0c00ac79 	jal	8002b1e4 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h990db7d0b83dd2d1E>
80031ffc:	00000000 	nop
80032000:	8fa50028 	lw	a1,40(sp)
80032004:	00402025 	move	a0,v0
80032008:	3c018105 	lui	at,0x8105
8003200c:	2426fde4 	addiu	a2,at,-540
80032010:	0c00accc 	jal	8002b330 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hba386fd63984b7c3E>
80032014:	00000000 	nop
80032018:	244400b4 	addiu	a0,v0,180
8003201c:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
80032020:	00000000 	nop
80032024:	8fa40010 	lw	a0,16(sp)
80032028:	00402825 	move	a1,v0
8003202c:	0c00d615 	jal	80035854 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E>
80032030:	00000000 	nop
80032034:	8fa40014 	lw	a0,20(sp)
    }
80032038:	0c008cff 	jal	800233fc <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17hde8d744f358f0af3E>
8003203c:	00000000 	nop
80032040:	0800c7d3 	j	80031f4c <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E+0x2c4>
80032044:	00000000 	nop
}
80032048:	8fa2003c 	lw	v0,60(sp)
8003204c:	8fbf007c 	lw	ra,124(sp)
80032050:	27bd0080 	addiu	sp,sp,128
80032054:	03e00008 	jr	ra
80032058:	00000000 	nop

8003205c <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E>:
fn sys_set_trapframe(envid: usize, tf: *const Trapframe) -> i32 {
8003205c:	27bdfdd8 	addiu	sp,sp,-552
80032060:	afbf0224 	sw	ra,548(sp)
80032064:	afa50048 	sw	a1,72(sp)
80032068:	00800825 	move	at,a0
8003206c:	8fa40048 	lw	a0,72(sp)
80032070:	afa1004c 	sw	at,76(sp)
80032074:	afa101ac 	sw	at,428(sp)
80032078:	afa401b0 	sw	a0,432(sp)
    if is_illegal_va_range((tf as usize).into(), size_of::<Trapframe>()) {
8003207c:	3c018105 	lui	at,0x8105
80032080:	2425fe14 	addiu	a1,at,-492
80032084:	0c00a17b 	jal	800285ec <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h7c2bae688c333c46E>
80032088:	00000000 	nop
8003208c:	afa201b4 	sw	v0,436(sp)
80032090:	8fa101b4 	lw	at,436(sp)
80032094:	afa10054 	sw	at,84(sp)
80032098:	8fa10054 	lw	at,84(sp)
8003209c:	afa101b8 	sw	at,440(sp)
800320a0:	8fa101b8 	lw	at,440(sp)
800320a4:	afa101f8 	sw	at,504(sp)
800320a8:	8fa101f8 	lw	at,504(sp)
800320ac:	afa101f4 	sw	at,500(sp)
800320b0:	24050098 	li	a1,152
800320b4:	afa50210 	sw	a1,528(sp)
    (va + len) < va || va < UTEMP || (va + len) > UTOP
800320b8:	8fa101f4 	lw	at,500(sp)
800320bc:	afa10204 	sw	at,516(sp)
800320c0:	8fa10204 	lw	at,516(sp)
800320c4:	afa10214 	sw	at,532(sp)
800320c8:	8fa40214 	lw	a0,532(sp)
800320cc:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
800320d0:	00000000 	nop
800320d4:	afa20218 	sw	v0,536(sp)
800320d8:	8fa10218 	lw	at,536(sp)
800320dc:	afa10200 	sw	at,512(sp)
800320e0:	27a40200 	addiu	a0,sp,512
800320e4:	27a501f4 	addiu	a1,sp,500
800320e8:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
800320ec:	00000000 	nop
800320f0:	1440000c 	bnez	v0,80032124 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0xc8>
800320f4:	00000000 	nop
800320f8:	0800c840 	j	80032100 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0xa4>
800320fc:	00000000 	nop
80032100:	3c018105 	lui	at,0x8105
80032104:	2425f180 	addiu	a1,at,-3712
80032108:	27a401f4 	addiu	a0,sp,500
8003210c:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
80032110:	00000000 	nop
80032114:	10400007 	beqz	v0,80032134 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0xd8>
80032118:	00000000 	nop
8003211c:	0800c849 	j	80032124 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0xc8>
80032120:	00000000 	nop
80032124:	24010001 	li	at,1
80032128:	a3a101ff 	sb	at,511(sp)
8003212c:	0800c860 	j	80032180 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x124>
80032130:	00000000 	nop
80032134:	8fa101f4 	lw	at,500(sp)
80032138:	afa1020c 	sw	at,524(sp)
8003213c:	8fa1020c 	lw	at,524(sp)
80032140:	afa1021c 	sw	at,540(sp)
80032144:	8fa4021c 	lw	a0,540(sp)
80032148:	24050098 	li	a1,152
8003214c:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
80032150:	00000000 	nop
80032154:	afa20220 	sw	v0,544(sp)
80032158:	8fa10220 	lw	at,544(sp)
8003215c:	afa10208 	sw	at,520(sp)
80032160:	3c018105 	lui	at,0x8105
80032164:	2425f164 	addiu	a1,at,-3740
80032168:	27a40208 	addiu	a0,sp,520
8003216c:	0c008285 	jal	80020a14 <_ZN4core3cmp10PartialOrd2gt17hd797d3773830092dE>
80032170:	00000000 	nop
80032174:	a3a201ff 	sb	v0,511(sp)
80032178:	0800c860 	j	80032180 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x124>
8003217c:	00000000 	nop
}
80032180:	93a101ff 	lbu	at,511(sp)
80032184:	30210001 	andi	at,at,0x1
    if is_illegal_va_range((tf as usize).into(), size_of::<Trapframe>()) {
80032188:	14200054 	bnez	at,800322dc <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x280>
8003218c:	00000000 	nop
80032190:	0800c866 	j	80032198 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x13c>
80032194:	00000000 	nop
80032198:	8fa1004c 	lw	at,76(sp)
8003219c:	afa101ec 	sw	at,492(sp)
    if envid == 0 {
800321a0:	14200016 	bnez	at,800321fc <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x1a0>
800321a4:	00000000 	nop
800321a8:	0800c86c 	j	800321b0 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x154>
800321ac:	00000000 	nop
        let cur_env = CUR_ENV.lock();
800321b0:	3c018105 	lui	at,0x8105
800321b4:	24240960 	addiu	a0,at,2400
800321b8:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
800321bc:	00000000 	nop
800321c0:	00402025 	move	a0,v0
800321c4:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
800321c8:	00000000 	nop
800321cc:	afa201d0 	sw	v0,464(sp)
800321d0:	27a401d0 	addiu	a0,sp,464
        if let Some(idx) = *cur_env {
800321d4:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
800321d8:	00000000 	nop
800321dc:	00400825 	move	at,v0
800321e0:	afa10044 	sw	at,68(sp)
800321e4:	8c410000 	lw	at,0(v0)
800321e8:	24020001 	li	v0,1
800321ec:	10220008 	beq	at,v0,80032210 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x1b4>
800321f0:	00000000 	nop
800321f4:	0800c88d 	j	80032234 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x1d8>
800321f8:	00000000 	nop
    envid & (NENV - 1)
800321fc:	8fa1004c 	lw	at,76(sp)
80032200:	302103ff 	andi	at,at,0x3ff
80032204:	afa101cc 	sw	at,460(sp)
}
80032208:	0800c899 	j	80032264 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x208>
8003220c:	00000000 	nop
        if let Some(idx) = *cur_env {
80032210:	8fa10044 	lw	at,68(sp)
80032214:	8c210004 	lw	at,4(at)
80032218:	afa101f0 	sw	at,496(sp)
            return idx;
8003221c:	afa101cc 	sw	at,460(sp)
80032220:	27a401d0 	addiu	a0,sp,464
    }
80032224:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
80032228:	00000000 	nop
8003222c:	0800c899 	j	80032264 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x208>
80032230:	00000000 	nop
            panic!("No current env.\n");
80032234:	3c018105 	lui	at,0x8105
80032238:	2425fa88 	addiu	a1,at,-1400
8003223c:	27a401d4 	addiu	a0,sp,468
80032240:	afa40040 	sw	a0,64(sp)
80032244:	24060001 	li	a2,1
80032248:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
8003224c:	00000000 	nop
80032250:	8fa40040 	lw	a0,64(sp)
80032254:	3c018105 	lui	at,0x8105
80032258:	2425fa90 	addiu	a1,at,-1392
8003225c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80032260:	00000000 	nop
}
80032264:	8fa101cc 	lw	at,460(sp)
80032268:	afa10038 	sw	at,56(sp)
    let idx = get_idx_by_envid(envid);
8003226c:	afa101bc 	sw	at,444(sp)
    let mut envs = ENV_LIST.lock();
80032270:	3c018105 	lui	at,0x8105
80032274:	24240960 	addiu	a0,at,2400
80032278:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
8003227c:	00000000 	nop
80032280:	00402025 	move	a0,v0
80032284:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
80032288:	00000000 	nop
8003228c:	afa20058 	sw	v0,88(sp)
    let curenv_idx = CUR_ENV.lock();
80032290:	3c018105 	lui	at,0x8105
80032294:	24240960 	addiu	a0,at,2400
80032298:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
8003229c:	00000000 	nop
800322a0:	00402025 	move	a0,v0
800322a4:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
800322a8:	00000000 	nop
800322ac:	afa2005c 	sw	v0,92(sp)
800322b0:	27a4005c 	addiu	a0,sp,92
        if let Some(curidx) = *curenv_idx {
800322b4:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
800322b8:	00000000 	nop
800322bc:	00400825 	move	at,v0
800322c0:	afa1003c 	sw	at,60(sp)
800322c4:	8c410000 	lw	at,0(v0)
800322c8:	24020001 	li	v0,1
800322cc:	10220007 	beq	at,v0,800322ec <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x290>
800322d0:	00000000 	nop
800322d4:	0800c8c3 	j	8003230c <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x2b0>
800322d8:	00000000 	nop
800322dc:	2401fffd 	li	at,-3
        return -E_INVAL;
800322e0:	afa10050 	sw	at,80(sp)
800322e4:	0800c934 	j	800324d0 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x474>
800322e8:	00000000 	nop
        if let Some(curidx) = *curenv_idx {
800322ec:	8fa20038 	lw	v0,56(sp)
800322f0:	8fa1003c 	lw	at,60(sp)
800322f4:	8c210004 	lw	at,4(at)
800322f8:	afa101c0 	sw	at,448(sp)
            if curidx != idx {
800322fc:	14220018 	bne	at,v0,80032360 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x304>
80032300:	00000000 	nop
80032304:	0800c8cf 	j	8003233c <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x2e0>
80032308:	00000000 	nop
            panic!("sys_set_trapframe: no curenv");
8003230c:	3c018105 	lui	at,0x8105
80032310:	2425fe90 	addiu	a1,at,-368
80032314:	27a40194 	addiu	a0,sp,404
80032318:	afa40034 	sw	a0,52(sp)
8003231c:	24060001 	li	a2,1
80032320:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80032324:	00000000 	nop
80032328:	8fa40034 	lw	a0,52(sp)
8003232c:	3c018105 	lui	at,0x8105
80032330:	2425fe98 	addiu	a1,at,-360
80032334:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80032338:	00000000 	nop
                VirtAddr::from(&stack_end as *const usize as usize - size_of::<Trapframe>())
8003233c:	3c01810a 	lui	at,0x810a
80032340:	24216000 	addiu	at,at,24576
80032344:	2422ff68 	addiu	v0,at,-152
80032348:	afa20030 	sw	v0,48(sp)
8003234c:	2c210098 	sltiu	at,at,152
80032350:	14200019 	bnez	at,800323b8 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x35c>
80032354:	00000000 	nop
80032358:	0800c8e0 	j	80032380 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x324>
8003235c:	00000000 	nop
                envs[idx].env_tf = *tf;
80032360:	8fa10048 	lw	at,72(sp)
80032364:	00201025 	move	v0,at
80032368:	afa2002c 	sw	v0,44(sp)
8003236c:	30210003 	andi	at,at,0x3
80032370:	1020005c 	beqz	at,800324e4 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x488>
80032374:	00000000 	nop
80032378:	0800c958 	j	80032560 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x504>
8003237c:	00000000 	nop
                VirtAddr::from(&stack_end as *const usize as usize - size_of::<Trapframe>())
80032380:	8fa40030 	lw	a0,48(sp)
80032384:	0c00af03 	jal	8002bc0c <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h3e418a96ab495ffdE>
80032388:	00000000 	nop
8003238c:	8fa10048 	lw	at,72(sp)
80032390:	afa201c4 	sw	v0,452(sp)
80032394:	8fa201c4 	lw	v0,452(sp)
80032398:	afa200f8 	sw	v0,248(sp)
                    .write::<Trapframe>(*tf);
8003239c:	00201025 	move	v0,at
800323a0:	afa20028 	sw	v0,40(sp)
800323a4:	30210003 	andi	at,at,0x3
800323a8:	10200007 	beqz	at,800323c8 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x36c>
800323ac:	00000000 	nop
800323b0:	0800c91d 	j	80032474 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x418>
800323b4:	00000000 	nop
                VirtAddr::from(&stack_end as *const usize as usize - size_of::<Trapframe>())
800323b8:	3c018105 	lui	at,0x8105
800323bc:	2424fe24 	addiu	a0,at,-476
800323c0:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800323c4:	00000000 	nop
                    .write::<Trapframe>(*tf);
800323c8:	8fa50048 	lw	a1,72(sp)
800323cc:	27a400fc 	addiu	a0,sp,252
800323d0:	24060098 	li	a2,152
800323d4:	0c00db4c 	jal	80036d30 <memcpy>
800323d8:	00000000 	nop
800323dc:	27a100f8 	addiu	at,sp,248
800323e0:	afa101c8 	sw	at,456(sp)
            assert!(self.raw % align_of::<T>() == 0);
800323e4:	8fa100f8 	lw	at,248(sp)
800323e8:	afa10024 	sw	at,36(sp)
800323ec:	24010000 	li	at,0
800323f0:	14000009 	bnez	zero,80032418 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x3bc>
800323f4:	00000000 	nop
800323f8:	0800c900 	j	80032400 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x3a4>
800323fc:	00000000 	nop
80032400:	8fa10024 	lw	at,36(sp)
80032404:	30210003 	andi	at,at,0x3
80032408:	1020000e 	beqz	at,80032444 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x3e8>
8003240c:	00000000 	nop
80032410:	0800c90a 	j	80032428 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x3cc>
80032414:	00000000 	nop
80032418:	3c018105 	lui	at,0x8105
8003241c:	2424f27c 	addiu	a0,at,-3460
80032420:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80032424:	00000000 	nop
80032428:	3c018105 	lui	at,0x8105
8003242c:	2424f28c 	addiu	a0,at,-3444
80032430:	3c018105 	lui	at,0x8105
80032434:	2426f2c0 	addiu	a2,at,-3392
80032438:	24050031 	li	a1,49
8003243c:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80032440:	00000000 	nop
            ptr::write(self.raw as *mut T, src);
80032444:	8fa400f8 	lw	a0,248(sp)
80032448:	27a500fc 	addiu	a1,sp,252
8003244c:	0c008b46 	jal	80022d18 <_ZN4core3ptr5write17hc5f7b59e715cbb46E>
80032450:	00000000 	nop
80032454:	8fa10048 	lw	at,72(sp)
                return (*tf).regs[2] as i32;
80032458:	00201025 	move	v0,at
8003245c:	afa20020 	sw	v0,32(sp)
80032460:	30210003 	andi	at,at,0x3
80032464:	10200009 	beqz	at,8003248c <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x430>
80032468:	00000000 	nop
8003246c:	0800c92e 	j	800324b8 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x45c>
80032470:	00000000 	nop
                    .write::<Trapframe>(*tf);
80032474:	8fa50028 	lw	a1,40(sp)
80032478:	3c018105 	lui	at,0x8105
8003247c:	2426fe34 	addiu	a2,at,-460
80032480:	24040004 	li	a0,4
80032484:	0c00fc13 	jal	8003f04c <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
80032488:	00000000 	nop
                return (*tf).regs[2] as i32;
8003248c:	8fa10048 	lw	at,72(sp)
80032490:	8c210008 	lw	at,8(at)
80032494:	afa10050 	sw	at,80(sp)
80032498:	27a4005c 	addiu	a0,sp,92
}
8003249c:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
800324a0:	00000000 	nop
800324a4:	27a40058 	addiu	a0,sp,88
800324a8:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
800324ac:	00000000 	nop
800324b0:	0800c934 	j	800324d0 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x474>
800324b4:	00000000 	nop
                return (*tf).regs[2] as i32;
800324b8:	8fa50020 	lw	a1,32(sp)
800324bc:	3c018105 	lui	at,0x8105
800324c0:	2426fe44 	addiu	a2,at,-444
800324c4:	24040004 	li	a0,4
800324c8:	0c00fc13 	jal	8003f04c <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
800324cc:	00000000 	nop
}
800324d0:	8fa20050 	lw	v0,80(sp)
800324d4:	8fbf0224 	lw	ra,548(sp)
800324d8:	27bd0228 	addiu	sp,sp,552
800324dc:	03e00008 	jr	ra
800324e0:	00000000 	nop
                envs[idx].env_tf = *tf;
800324e4:	8fa50048 	lw	a1,72(sp)
800324e8:	27a40060 	addiu	a0,sp,96
800324ec:	afa40014 	sw	a0,20(sp)
800324f0:	24060098 	li	a2,152
800324f4:	afa60018 	sw	a2,24(sp)
800324f8:	0c00db4c 	jal	80036d30 <memcpy>
800324fc:	00000000 	nop
80032500:	27a40058 	addiu	a0,sp,88
80032504:	afa4001c 	sw	a0,28(sp)
80032508:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
8003250c:	00000000 	nop
80032510:	8fa50038 	lw	a1,56(sp)
80032514:	00402025 	move	a0,v0
80032518:	3c018105 	lui	at,0x8105
8003251c:	2426fe64 	addiu	a2,at,-412
80032520:	0c00ad35 	jal	8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>
80032524:	00000000 	nop
80032528:	8fa50014 	lw	a1,20(sp)
8003252c:	8fa60018 	lw	a2,24(sp)
80032530:	00402025 	move	a0,v0
80032534:	0c00db4c 	jal	80036d30 <memcpy>
80032538:	00000000 	nop
    0
8003253c:	afa00050 	sw	zero,80(sp)
80032540:	27a4005c 	addiu	a0,sp,92
}
80032544:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
80032548:	00000000 	nop
8003254c:	8fa4001c 	lw	a0,28(sp)
80032550:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
80032554:	00000000 	nop
80032558:	0800c934 	j	800324d0 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E+0x474>
8003255c:	00000000 	nop
                envs[idx].env_tf = *tf;
80032560:	8fa5002c 	lw	a1,44(sp)
80032564:	3c018105 	lui	at,0x8105
80032568:	2426fe54 	addiu	a2,at,-428
8003256c:	24040004 	li	a0,4
80032570:	0c00fc13 	jal	8003f04c <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
80032574:	00000000 	nop

80032578 <_ZN8mos_65024trap7syscall9sys_panic17ha54279af19ac30d9E>:
fn sys_panic(msg: VirtAddr) -> ! {
80032578:	27bdffa0 	addiu	sp,sp,-96
8003257c:	afbf005c 	sw	ra,92(sp)
80032580:	afa40024 	sw	a0,36(sp)
80032584:	8fa10024 	lw	at,36(sp)
80032588:	afa10020 	sw	at,32(sp)
    let mut i = 0;
8003258c:	afa00028 	sw	zero,40(sp)
    print!("user panic: ");
80032590:	3c018105 	lui	at,0x8105
80032594:	2425feb4 	addiu	a1,at,-332
80032598:	27a4002c 	addiu	a0,sp,44
8003259c:	afa4001c 	sw	a0,28(sp)
800325a0:	24060001 	li	a2,1
800325a4:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
800325a8:	00000000 	nop
800325ac:	8fa4001c 	lw	a0,28(sp)
800325b0:	0c00b558 	jal	8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>
800325b4:	00000000 	nop
800325b8:	0800c970 	j	800325c0 <_ZN8mos_65024trap7syscall9sys_panic17ha54279af19ac30d9E+0x48>
800325bc:	00000000 	nop
        ch = msg.add(i).read::<u8>().into();
800325c0:	8fa50028 	lw	a1,40(sp)
800325c4:	8fa10020 	lw	at,32(sp)
800325c8:	afa10048 	sw	at,72(sp)
800325cc:	8fa10048 	lw	at,72(sp)
800325d0:	afa1004c 	sw	at,76(sp)
800325d4:	8fa4004c 	lw	a0,76(sp)
800325d8:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
800325dc:	00000000 	nop
800325e0:	afa20050 	sw	v0,80(sp)
800325e4:	8fa10050 	lw	at,80(sp)
800325e8:	afa10044 	sw	at,68(sp)
800325ec:	27a10044 	addiu	at,sp,68
800325f0:	afa10058 	sw	at,88(sp)
800325f4:	24010001 	li	at,1
        assert!(self.raw % align_of::<T>() == 0);
800325f8:	14200007 	bnez	at,80032618 <_ZN8mos_65024trap7syscall9sys_panic17ha54279af19ac30d9E+0xa0>
800325fc:	00000000 	nop
80032600:	0800c982 	j	80032608 <_ZN8mos_65024trap7syscall9sys_panic17ha54279af19ac30d9E+0x90>
80032604:	00000000 	nop
80032608:	3c018105 	lui	at,0x8105
8003260c:	2424f2d0 	addiu	a0,at,-3376
80032610:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80032614:	00000000 	nop
        unsafe { ptr::read(self.raw as *const T) }
80032618:	8fa40044 	lw	a0,68(sp)
8003261c:	0c00f00b 	jal	8003c02c <_ZN4core3ptr4read17h577826971f2136a4E>
80032620:	00000000 	nop
80032624:	00402025 	move	a0,v0
80032628:	3c018105 	lui	at,0x8105
8003262c:	2425febc 	addiu	a1,at,-324
80032630:	0c00a15d 	jal	80028574 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h17656a36cc061ea7E>
80032634:	00000000 	nop
80032638:	00400825 	move	at,v0
8003263c:	afa10018 	sw	at,24(sp)
80032640:	afa20054 	sw	v0,84(sp)
        if ch == 0 {
80032644:	14400005 	bnez	v0,8003265c <_ZN8mos_65024trap7syscall9sys_panic17ha54279af19ac30d9E+0xe4>
80032648:	00000000 	nop
8003264c:	0800c995 	j	80032654 <_ZN8mos_65024trap7syscall9sys_panic17ha54279af19ac30d9E+0xdc>
80032650:	00000000 	nop
    dev::halt();
80032654:	0c00ae34 	jal	8002b8d0 <_ZN8mos_65023dev4halt17hd9ad84541a5942b7E>
80032658:	00000000 	nop
        NS16550A.putchar(ch);
8003265c:	3c018105 	lui	at,0x8105
80032660:	242408b8 	addiu	a0,at,2232
80032664:	0c00d89f 	jal	8003627c <_ZN73_$LT$mos_6502..dev..uart..NS16550A$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bec3ccd73d84f44E>
80032668:	00000000 	nop
8003266c:	8fa50018 	lw	a1,24(sp)
80032670:	00402025 	move	a0,v0
80032674:	0c00adce 	jal	8002b738 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17h5172dafc15c6e4dbE>
80032678:	00000000 	nop
        i += 1;
8003267c:	8fa10028 	lw	at,40(sp)
80032680:	24210001 	addiu	at,at,1
80032684:	afa10014 	sw	at,20(sp)
80032688:	10200007 	beqz	at,800326a8 <_ZN8mos_65024trap7syscall9sys_panic17ha54279af19ac30d9E+0x130>
8003268c:	00000000 	nop
80032690:	0800c9a6 	j	80032698 <_ZN8mos_65024trap7syscall9sys_panic17ha54279af19ac30d9E+0x120>
80032694:	00000000 	nop
80032698:	8fa10014 	lw	at,20(sp)
8003269c:	afa10028 	sw	at,40(sp)
    loop {
800326a0:	0800c970 	j	800325c0 <_ZN8mos_65024trap7syscall9sys_panic17ha54279af19ac30d9E+0x48>
800326a4:	00000000 	nop
        i += 1;
800326a8:	3c018105 	lui	at,0x8105
800326ac:	2424fecc 	addiu	a0,at,-308
800326b0:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800326b4:	00000000 	nop

800326b8 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE>:
fn sys_ipc_recv(dstva: VirtAddr) -> i32 {
800326b8:	27bdff70 	addiu	sp,sp,-144
800326bc:	afbf008c 	sw	ra,140(sp)
800326c0:	afa40028 	sw	a0,40(sp)
800326c4:	8fa10028 	lw	at,40(sp)
800326c8:	afa10024 	sw	at,36(sp)
        VirtAddr { raw: 0 }
800326cc:	afa0007c 	sw	zero,124(sp)
    }
800326d0:	8fa1007c 	lw	at,124(sp)
    if dstva != VirtAddr::zero() && is_illegal_va(dstva) {
800326d4:	afa10060 	sw	at,96(sp)
800326d8:	8fa10060 	lw	at,96(sp)
800326dc:	afa10030 	sw	at,48(sp)
800326e0:	27a40024 	addiu	a0,sp,36
800326e4:	27a50030 	addiu	a1,sp,48
800326e8:	0c0082f2 	jal	80020bc8 <_ZN4core3cmp9PartialEq2ne17h5ebf5cdf63f836b1E>
800326ec:	00000000 	nop
800326f0:	1440001e 	bnez	v0,8003276c <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0xb4>
800326f4:	00000000 	nop
800326f8:	0800c9c0 	j	80032700 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0x48>
800326fc:	00000000 	nop
    let mut locked_env_list = ENV_LIST.lock();
80032700:	3c018105 	lui	at,0x8105
80032704:	24240960 	addiu	a0,at,2400
80032708:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
8003270c:	00000000 	nop
80032710:	00402025 	move	a0,v0
80032714:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
80032718:	00000000 	nop
8003271c:	afa20038 	sw	v0,56(sp)
    let locked_curenv_id = CUR_ENV.lock();
80032720:	3c018105 	lui	at,0x8105
80032724:	24240960 	addiu	a0,at,2400
80032728:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
8003272c:	00000000 	nop
80032730:	00402025 	move	a0,v0
80032734:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
80032738:	00000000 	nop
8003273c:	afa2003c 	sw	v0,60(sp)
80032740:	27a4003c 	addiu	a0,sp,60
    if let Some(curidx) = *locked_curenv_id {
80032744:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
80032748:	00000000 	nop
8003274c:	00400825 	move	at,v0
80032750:	afa10020 	sw	at,32(sp)
80032754:	8c410000 	lw	at,0(v0)
80032758:	24020001 	li	v0,1
8003275c:	1022002a 	beq	at,v0,80032808 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0x150>
80032760:	00000000 	nop
80032764:	0800ca29 	j	800328a4 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0x1ec>
80032768:	00000000 	nop
    if dstva != VirtAddr::zero() && is_illegal_va(dstva) {
8003276c:	8fa10024 	lw	at,36(sp)
80032770:	afa10034 	sw	at,52(sp)
80032774:	8fa10034 	lw	at,52(sp)
80032778:	afa10064 	sw	at,100(sp)
8003277c:	8fa10064 	lw	at,100(sp)
80032780:	afa10084 	sw	at,132(sp)
80032784:	8fa10084 	lw	at,132(sp)
80032788:	afa10080 	sw	at,128(sp)
    va < UTEMP || va >= UTOP
8003278c:	3c018105 	lui	at,0x8105
80032790:	2425f180 	addiu	a1,at,-3712
80032794:	27a40080 	addiu	a0,sp,128
80032798:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
8003279c:	00000000 	nop
800327a0:	1440000b 	bnez	v0,800327d0 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0x118>
800327a4:	00000000 	nop
800327a8:	0800c9ec 	j	800327b0 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0xf8>
800327ac:	00000000 	nop
800327b0:	3c018105 	lui	at,0x8105
800327b4:	2425f164 	addiu	a1,at,-3740
800327b8:	27a40080 	addiu	a0,sp,128
800327bc:	0c00823d 	jal	800208f4 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E>
800327c0:	00000000 	nop
800327c4:	a3a2008b 	sb	v0,139(sp)
800327c8:	0800c9f8 	j	800327e0 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0x128>
800327cc:	00000000 	nop
800327d0:	24010001 	li	at,1
800327d4:	a3a1008b 	sb	at,139(sp)
800327d8:	0800c9f8 	j	800327e0 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0x128>
800327dc:	00000000 	nop
}
800327e0:	93a1008b 	lbu	at,139(sp)
800327e4:	30210001 	andi	at,at,0x1
    if dstva != VirtAddr::zero() && is_illegal_va(dstva) {
800327e8:	1020ffc5 	beqz	at,80032700 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0x48>
800327ec:	00000000 	nop
800327f0:	0800c9fe 	j	800327f8 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0x140>
800327f4:	00000000 	nop
800327f8:	2401fffd 	li	at,-3
        return -E_INVAL;
800327fc:	afa1002c 	sw	at,44(sp)
}
80032800:	0800ca50 	j	80032940 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0x288>
80032804:	00000000 	nop
    if let Some(curidx) = *locked_curenv_id {
80032808:	8fa10020 	lw	at,32(sp)
8003280c:	8c210004 	lw	at,4(at)
80032810:	afa10018 	sw	at,24(sp)
80032814:	afa10068 	sw	at,104(sp)
80032818:	27a40038 	addiu	a0,sp,56
        let curenv = &mut locked_env_list[curidx];
8003281c:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
80032820:	00000000 	nop
80032824:	8fa50018 	lw	a1,24(sp)
80032828:	00402025 	move	a0,v0
8003282c:	3c018105 	lui	at,0x8105
80032830:	2426fedc 	addiu	a2,at,-292
80032834:	0c00ad35 	jal	8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>
80032838:	00000000 	nop
8003283c:	afa2006c 	sw	v0,108(sp)
        curenv.env_ipc_dstva = dstva;
80032840:	8fa10024 	lw	at,36(sp)
80032844:	afa10040 	sw	at,64(sp)
80032848:	8fa10040 	lw	at,64(sp)
8003284c:	ac4100cc 	sw	at,204(v0)
80032850:	24010001 	li	at,1
        curenv.env_ipc_recving = 1;
80032854:	ac4100c8 	sw	at,200(v0)
80032858:	24010002 	li	at,2
        curenv.env_status = EnvStatus::NotRunnable;
8003285c:	afa10044 	sw	at,68(sp)
80032860:	8fa10044 	lw	at,68(sp)
80032864:	ac4100ac 	sw	at,172(v0)
        drop(locked_curenv_id);
80032868:	8fa4003c 	lw	a0,60(sp)
8003286c:	0c008456 	jal	80021158 <_ZN4core3mem4drop17h6a3effa89817325fE>
80032870:	00000000 	nop
        drop(locked_env_list);
80032874:	8fa40038 	lw	a0,56(sp)
80032878:	0c00844c 	jal	80021130 <_ZN4core3mem4drop17h42ecfc0c85e47420E>
8003287c:	00000000 	nop
            ((&stack_end as *const usize as usize - size_of::<Trapframe>()) as *mut Trapframe)
80032880:	3c01810a 	lui	at,0x810a
80032884:	24216000 	addiu	at,at,24576
80032888:	2422ff68 	addiu	v0,at,-152
8003288c:	afa2001c 	sw	v0,28(sp)
80032890:	2c210098 	sltiu	at,at,152
80032894:	14200026 	bnez	at,80032930 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0x278>
80032898:	00000000 	nop
8003289c:	0800ca35 	j	800328d4 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0x21c>
800328a0:	00000000 	nop
        panic!("sys_ipc_recv: no curenv");
800328a4:	3c018105 	lui	at,0x8105
800328a8:	2425ff24 	addiu	a1,at,-220
800328ac:	27a40048 	addiu	a0,sp,72
800328b0:	afa40014 	sw	a0,20(sp)
800328b4:	24060001 	li	a2,1
800328b8:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
800328bc:	00000000 	nop
800328c0:	8fa40014 	lw	a0,20(sp)
800328c4:	3c018105 	lui	at,0x8105
800328c8:	2425ff2c 	addiu	a1,at,-212
800328cc:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800328d0:	00000000 	nop
            ((&stack_end as *const usize as usize - size_of::<Trapframe>()) as *mut Trapframe)
800328d4:	8fa4001c 	lw	a0,28(sp)
800328d8:	0c008cc4 	jal	80023310 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hdf97099e35e4f9ffE>
800328dc:	00000000 	nop
800328e0:	afa20074 	sw	v0,116(sp)
        match self {
800328e4:	8fa10074 	lw	at,116(sp)
800328e8:	14200007 	bnez	at,80032908 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0x250>
800328ec:	00000000 	nop
800328f0:	0800ca3e 	j	800328f8 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0x240>
800328f4:	00000000 	nop
            None => unwrap_failed(),
800328f8:	3c018105 	lui	at,0x8105
800328fc:	2424fefc 	addiu	a0,at,-260
80032900:	0c00fab9 	jal	8003eae4 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
80032904:	00000000 	nop
            Some(val) => val,
80032908:	8fa10074 	lw	at,116(sp)
8003290c:	afa10078 	sw	at,120(sp)
80032910:	afa10070 	sw	at,112(sp)
        tf.regs[2] = 0;
80032914:	ac200008 	sw	zero,8(at)
80032918:	24040001 	li	a0,1
        schedule(true);
8003291c:	0c00b622 	jal	8002d888 <_ZN8mos_65024proc5sched8schedule17ha0f133002d5afd42E>
80032920:	00000000 	nop
    0
80032924:	afa0002c 	sw	zero,44(sp)
}
80032928:	0800ca50 	j	80032940 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE+0x288>
8003292c:	00000000 	nop
            ((&stack_end as *const usize as usize - size_of::<Trapframe>()) as *mut Trapframe)
80032930:	3c018105 	lui	at,0x8105
80032934:	2424feec 	addiu	a0,at,-276
80032938:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003293c:	00000000 	nop
}
80032940:	8fa2002c 	lw	v0,44(sp)
80032944:	8fbf008c 	lw	ra,140(sp)
80032948:	27bd0090 	addiu	sp,sp,144
8003294c:	03e00008 	jr	ra
80032950:	00000000 	nop

80032954 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E>:
fn sys_ipc_try_send(envid: usize, val: usize, srcva: VirtAddr, perm: Permssion) -> i32 {
80032954:	27bdfe80 	addiu	sp,sp,-384
80032958:	afbf017c 	sw	ra,380(sp)
8003295c:	afa50048 	sw	a1,72(sp)
80032960:	afa4004c 	sw	a0,76(sp)
80032964:	afa60054 	sw	a2,84(sp)
80032968:	8fa10054 	lw	at,84(sp)
8003296c:	afa10050 	sw	at,80(sp)
80032970:	afa70058 	sw	a3,88(sp)
80032974:	afa400cc 	sw	a0,204(sp)
80032978:	afa500d0 	sw	a1,208(sp)
        VirtAddr { raw: 0 }
8003297c:	afa00124 	sw	zero,292(sp)
    }
80032980:	8fa10124 	lw	at,292(sp)
    if srcva != VirtAddr::zero() && is_illegal_va(srcva) {
80032984:	afa100d4 	sw	at,212(sp)
80032988:	8fa100d4 	lw	at,212(sp)
8003298c:	afa10060 	sw	at,96(sp)
80032990:	27a40050 	addiu	a0,sp,80
80032994:	27a50060 	addiu	a1,sp,96
80032998:	0c0082f2 	jal	80020bc8 <_ZN4core3cmp9PartialEq2ne17h5ebf5cdf63f836b1E>
8003299c:	00000000 	nop
800329a0:	14400026 	bnez	v0,80032a3c <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0xe8>
800329a4:	00000000 	nop
800329a8:	0800ca6c 	j	800329b0 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x5c>
800329ac:	00000000 	nop
    let mut locked_env_list = ENV_LIST.lock();
800329b0:	3c018105 	lui	at,0x8105
800329b4:	24240960 	addiu	a0,at,2400
800329b8:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
800329bc:	00000000 	nop
800329c0:	00402025 	move	a0,v0
800329c4:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
800329c8:	00000000 	nop
800329cc:	afa20068 	sw	v0,104(sp)
    let mut locked_env_sched_list = ENV_SCHED_LIST.lock();
800329d0:	3c018105 	lui	at,0x8105
800329d4:	24240960 	addiu	a0,at,2400
800329d8:	0c00db14 	jal	80036c50 <_ZN74_$LT$mos_6502..proc..ENV_SCHED_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb461aaf754aa1f00E>
800329dc:	00000000 	nop
800329e0:	00402025 	move	a0,v0
800329e4:	0c00a09c 	jal	80028270 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h10e12ef946c83883E>
800329e8:	00000000 	nop
800329ec:	afa2006c 	sw	v0,108(sp)
    let locked_curenv_id = CUR_ENV.lock();
800329f0:	3c018105 	lui	at,0x8105
800329f4:	24240960 	addiu	a0,at,2400
800329f8:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
800329fc:	00000000 	nop
80032a00:	00402025 	move	a0,v0
80032a04:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
80032a08:	00000000 	nop
80032a0c:	afa20070 	sw	v0,112(sp)
80032a10:	27a40070 	addiu	a0,sp,112
    let (curenv_id, pa) = if let Some(idx) = *locked_curenv_id {
80032a14:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
80032a18:	00000000 	nop
80032a1c:	00400825 	move	at,v0
80032a20:	afa10044 	sw	at,68(sp)
80032a24:	8c410000 	lw	at,0(v0)
80032a28:	24020001 	li	v0,1
80032a2c:	1022002a 	beq	at,v0,80032ad8 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x184>
80032a30:	00000000 	nop
80032a34:	0800cac7 	j	80032b1c <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x1c8>
80032a38:	00000000 	nop
    if srcva != VirtAddr::zero() && is_illegal_va(srcva) {
80032a3c:	8fa10050 	lw	at,80(sp)
80032a40:	afa10064 	sw	at,100(sp)
80032a44:	8fa10064 	lw	at,100(sp)
80032a48:	afa100d8 	sw	at,216(sp)
80032a4c:	8fa100d8 	lw	at,216(sp)
80032a50:	afa10174 	sw	at,372(sp)
80032a54:	8fa10174 	lw	at,372(sp)
80032a58:	afa10170 	sw	at,368(sp)
    va < UTEMP || va >= UTOP
80032a5c:	3c018105 	lui	at,0x8105
80032a60:	2425f180 	addiu	a1,at,-3712
80032a64:	27a40170 	addiu	a0,sp,368
80032a68:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
80032a6c:	00000000 	nop
80032a70:	1440000b 	bnez	v0,80032aa0 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x14c>
80032a74:	00000000 	nop
80032a78:	0800caa0 	j	80032a80 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x12c>
80032a7c:	00000000 	nop
80032a80:	3c018105 	lui	at,0x8105
80032a84:	2425f164 	addiu	a1,at,-3740
80032a88:	27a40170 	addiu	a0,sp,368
80032a8c:	0c00823d 	jal	800208f4 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E>
80032a90:	00000000 	nop
80032a94:	a3a2017b 	sb	v0,379(sp)
80032a98:	0800caac 	j	80032ab0 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x15c>
80032a9c:	00000000 	nop
80032aa0:	24010001 	li	at,1
80032aa4:	a3a1017b 	sb	at,379(sp)
80032aa8:	0800caac 	j	80032ab0 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x15c>
80032aac:	00000000 	nop
}
80032ab0:	93a1017b 	lbu	at,379(sp)
80032ab4:	30210001 	andi	at,at,0x1
    if srcva != VirtAddr::zero() && is_illegal_va(srcva) {
80032ab8:	1020ffbd 	beqz	at,800329b0 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x5c>
80032abc:	00000000 	nop
80032ac0:	0800cab2 	j	80032ac8 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x174>
80032ac4:	00000000 	nop
80032ac8:	2401fffd 	li	at,-3
        return -E_INVAL;
80032acc:	afa1005c 	sw	at,92(sp)
80032ad0:	0800cbf9 	j	80032fe4 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x690>
80032ad4:	00000000 	nop
    let (curenv_id, pa) = if let Some(idx) = *locked_curenv_id {
80032ad8:	8fa10044 	lw	at,68(sp)
80032adc:	8c210004 	lw	at,4(at)
80032ae0:	afa10040 	sw	at,64(sp)
80032ae4:	afa100dc 	sw	at,220(sp)
        VirtAddr { raw: 0 }
80032ae8:	afa00120 	sw	zero,288(sp)
    }
80032aec:	8fa10120 	lw	at,288(sp)
        let pa = if srcva != VirtAddr::zero() {
80032af0:	afa100e0 	sw	at,224(sp)
80032af4:	8fa100e0 	lw	at,224(sp)
80032af8:	afa10084 	sw	at,132(sp)
80032afc:	27a40050 	addiu	a0,sp,80
80032b00:	27a50084 	addiu	a1,sp,132
80032b04:	0c0082f2 	jal	80020bc8 <_ZN4core3cmp9PartialEq2ne17h5ebf5cdf63f836b1E>
80032b08:	00000000 	nop
80032b0c:	14400016 	bnez	v0,80032b68 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x214>
80032b10:	00000000 	nop
80032b14:	0800cad3 	j	80032b4c <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x1f8>
80032b18:	00000000 	nop
        panic!("sys_ipc_try_send: no curenv");
80032b1c:	3c018105 	lui	at,0x8105
80032b20:	2425ffb8 	addiu	a1,at,-72
80032b24:	27a4009c 	addiu	a0,sp,156
80032b28:	afa4003c 	sw	a0,60(sp)
80032b2c:	24060001 	li	a2,1
80032b30:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80032b34:	00000000 	nop
80032b38:	8fa4003c 	lw	a0,60(sp)
80032b3c:	3c018105 	lui	at,0x8105
80032b40:	2425ffc0 	addiu	a1,at,-64
80032b44:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80032b48:	00000000 	nop
            PhysAddr::zero()
80032b4c:	0c00aee5 	jal	8002bb94 <_ZN8mos_65022mm4addr8PhysAddr4zero17h5d43c11597d3ca40E>
80032b50:	00000000 	nop
80032b54:	afa200e4 	sw	v0,228(sp)
80032b58:	8fa100e4 	lw	at,228(sp)
80032b5c:	afa10080 	sw	at,128(sp)
80032b60:	0800caf1 	j	80032bc4 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x270>
80032b64:	00000000 	nop
80032b68:	27a40068 	addiu	a0,sp,104
            if let Some((_, page_pa)) = locked_env_list[idx].env_pgdir.va_to_pa(srcva) {
80032b6c:	0c00ac79 	jal	8002b1e4 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h990db7d0b83dd2d1E>
80032b70:	00000000 	nop
80032b74:	8fa50040 	lw	a1,64(sp)
80032b78:	00402025 	move	a0,v0
80032b7c:	3c018105 	lui	at,0x8105
80032b80:	2426ff3c 	addiu	a2,at,-196
80032b84:	0c00accc 	jal	8002b330 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hba386fd63984b7c3E>
80032b88:	00000000 	nop
80032b8c:	8c4500b0 	lw	a1,176(v0)
80032b90:	8fa10050 	lw	at,80(sp)
80032b94:	afa10090 	sw	at,144(sp)
80032b98:	8fa10090 	lw	at,144(sp)
80032b9c:	afa100e8 	sw	at,232(sp)
80032ba0:	8fa600e8 	lw	a2,232(sp)
80032ba4:	27a40088 	addiu	a0,sp,136
80032ba8:	0c00b479 	jal	8002d1e4 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE>
80032bac:	00000000 	nop
80032bb0:	8fa10088 	lw	at,136(sp)
80032bb4:	1420005e 	bnez	at,80032d30 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x3dc>
80032bb8:	00000000 	nop
80032bbc:	0800cb52 	j	80032d48 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x3f4>
80032bc0:	00000000 	nop
80032bc4:	27a40068 	addiu	a0,sp,104
        (locked_env_list[idx].env_id, pa)
80032bc8:	0c00ac79 	jal	8002b1e4 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h990db7d0b83dd2d1E>
80032bcc:	00000000 	nop
80032bd0:	8fa50040 	lw	a1,64(sp)
80032bd4:	00402025 	move	a0,v0
80032bd8:	3c018105 	lui	at,0x8105
80032bdc:	2426ff4c 	addiu	a2,at,-180
80032be0:	0c00accc 	jal	8002b330 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hba386fd63984b7c3E>
80032be4:	00000000 	nop
80032be8:	8fa1004c 	lw	at,76(sp)
80032bec:	8c4200a0 	lw	v0,160(v0)
80032bf0:	8fa30080 	lw	v1,128(sp)
80032bf4:	afa30098 	sw	v1,152(sp)
80032bf8:	afa20078 	sw	v0,120(sp)
80032bfc:	8fa20098 	lw	v0,152(sp)
80032c00:	afa2007c 	sw	v0,124(sp)
    let (curenv_id, pa) = if let Some(idx) = *locked_curenv_id {
80032c04:	8fa20078 	lw	v0,120(sp)
80032c08:	afa20038 	sw	v0,56(sp)
80032c0c:	afa200ec 	sw	v0,236(sp)
80032c10:	8fa2007c 	lw	v0,124(sp)
80032c14:	afa20074 	sw	v0,116(sp)
80032c18:	afa10168 	sw	at,360(sp)
    if envid == 0 {
80032c1c:	14200016 	bnez	at,80032c78 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x324>
80032c20:	00000000 	nop
80032c24:	0800cb0b 	j	80032c2c <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x2d8>
80032c28:	00000000 	nop
        let cur_env = CUR_ENV.lock();
80032c2c:	3c018105 	lui	at,0x8105
80032c30:	24240960 	addiu	a0,at,2400
80032c34:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
80032c38:	00000000 	nop
80032c3c:	00402025 	move	a0,v0
80032c40:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
80032c44:	00000000 	nop
80032c48:	afa2014c 	sw	v0,332(sp)
80032c4c:	27a4014c 	addiu	a0,sp,332
        if let Some(idx) = *cur_env {
80032c50:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
80032c54:	00000000 	nop
80032c58:	00400825 	move	at,v0
80032c5c:	afa10034 	sw	at,52(sp)
80032c60:	8c410000 	lw	at,0(v0)
80032c64:	24020001 	li	v0,1
80032c68:	10220008 	beq	at,v0,80032c8c <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x338>
80032c6c:	00000000 	nop
80032c70:	0800cb2c 	j	80032cb0 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x35c>
80032c74:	00000000 	nop
    envid & (NENV - 1)
80032c78:	8fa1004c 	lw	at,76(sp)
80032c7c:	302103ff 	andi	at,at,0x3ff
80032c80:	afa10148 	sw	at,328(sp)
}
80032c84:	0800cb38 	j	80032ce0 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x38c>
80032c88:	00000000 	nop
        if let Some(idx) = *cur_env {
80032c8c:	8fa10034 	lw	at,52(sp)
80032c90:	8c210004 	lw	at,4(at)
80032c94:	afa1016c 	sw	at,364(sp)
            return idx;
80032c98:	afa10148 	sw	at,328(sp)
80032c9c:	27a4014c 	addiu	a0,sp,332
    }
80032ca0:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
80032ca4:	00000000 	nop
80032ca8:	0800cb38 	j	80032ce0 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x38c>
80032cac:	00000000 	nop
            panic!("No current env.\n");
80032cb0:	3c018105 	lui	at,0x8105
80032cb4:	2425fa88 	addiu	a1,at,-1400
80032cb8:	27a40150 	addiu	a0,sp,336
80032cbc:	afa40030 	sw	a0,48(sp)
80032cc0:	24060001 	li	a2,1
80032cc4:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80032cc8:	00000000 	nop
80032ccc:	8fa40030 	lw	a0,48(sp)
80032cd0:	3c018105 	lui	at,0x8105
80032cd4:	2425fa90 	addiu	a1,at,-1392
80032cd8:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80032cdc:	00000000 	nop
}
80032ce0:	8fa10148 	lw	at,328(sp)
80032ce4:	afa10028 	sw	at,40(sp)
    let idx = get_idx_by_envid(envid);
80032ce8:	afa100f0 	sw	at,240(sp)
80032cec:	27a40068 	addiu	a0,sp,104
    let env: &mut Env = &mut locked_env_list[idx];
80032cf0:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
80032cf4:	00000000 	nop
80032cf8:	8fa50028 	lw	a1,40(sp)
80032cfc:	00402025 	move	a0,v0
80032d00:	3c018105 	lui	at,0x8105
80032d04:	2426ff5c 	addiu	a2,at,-164
80032d08:	0c00ad35 	jal	8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>
80032d0c:	00000000 	nop
80032d10:	00400825 	move	at,v0
80032d14:	afa1002c 	sw	at,44(sp)
80032d18:	afa200f4 	sw	v0,244(sp)
    if env.env_ipc_recving == 0 {
80032d1c:	8c4100c8 	lw	at,200(v0)
80032d20:	1020000d 	beqz	at,80032d58 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x404>
80032d24:	00000000 	nop
80032d28:	0800cb5a 	j	80032d68 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x414>
80032d2c:	00000000 	nop
            if let Some((_, page_pa)) = locked_env_list[idx].env_pgdir.va_to_pa(srcva) {
80032d30:	8fa1008c 	lw	at,140(sp)
80032d34:	afa10094 	sw	at,148(sp)
                page_pa
80032d38:	8fa10094 	lw	at,148(sp)
80032d3c:	afa10080 	sw	at,128(sp)
        let pa = if srcva != VirtAddr::zero() {
80032d40:	0800caf1 	j	80032bc4 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x270>
80032d44:	00000000 	nop
80032d48:	2401fffd 	li	at,-3
                return -E_INVAL;
80032d4c:	afa1005c 	sw	at,92(sp)
80032d50:	0800cb7d 	j	80032df4 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x4a0>
80032d54:	00000000 	nop
80032d58:	2401fff9 	li	at,-7
        return -E_IPC_NOT_RECV;
80032d5c:	afa1005c 	sw	at,92(sp)
80032d60:	0800cb7d 	j	80032df4 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x4a0>
80032d64:	00000000 	nop
    env.env_ipc_value = val;
80032d68:	8fa2002c 	lw	v0,44(sp)
80032d6c:	8fa10038 	lw	at,56(sp)
80032d70:	8fa30048 	lw	v1,72(sp)
80032d74:	ac4300c0 	sw	v1,192(v0)
    env.env_ipc_from = curenv_id;
80032d78:	ac4100c4 	sw	at,196(v0)
    env.env_ipc_recving = 0;
80032d7c:	ac4000c8 	sw	zero,200(v0)
80032d80:	24010001 	li	at,1
    env.env_status = EnvStatus::Runnable;
80032d84:	afa100b4 	sw	at,180(sp)
80032d88:	8fa100b4 	lw	at,180(sp)
80032d8c:	ac4100ac 	sw	at,172(v0)
80032d90:	27a4006c 	addiu	a0,sp,108
    locked_env_sched_list.insert_to_tail(env.env_sched_link.clone());
80032d94:	0c00ad19 	jal	8002b464 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hdb38b7a74b019393E>
80032d98:	00000000 	nop
80032d9c:	8fa1002c 	lw	at,44(sp)
80032da0:	afa20024 	sw	v0,36(sp)
80032da4:	242400b4 	addiu	a0,at,180
80032da8:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
80032dac:	00000000 	nop
80032db0:	8fa40024 	lw	a0,36(sp)
80032db4:	00402825 	move	a1,v0
80032db8:	0c00d48b 	jal	8003522c <_ZN8mos_65024util16DoubleLinkedList14insert_to_tail17h289aeba59114fbe3E>
80032dbc:	00000000 	nop
        VirtAddr { raw: 0 }
80032dc0:	afa0011c 	sw	zero,284(sp)
    }
80032dc4:	8fa1011c 	lw	at,284(sp)
    if srcva == VirtAddr::zero() {
80032dc8:	afa100f8 	sw	at,248(sp)
80032dcc:	8fa100f8 	lw	at,248(sp)
80032dd0:	afa100b8 	sw	at,184(sp)
80032dd4:	27a40050 	addiu	a0,sp,80
80032dd8:	27a500b8 	addiu	a1,sp,184
80032ddc:	0c00d8ab 	jal	800362ac <_ZN69_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..cmp..PartialEq$GT$2eq17hb1e03b554bee2b27E>
80032de0:	00000000 	nop
80032de4:	14400067 	bnez	v0,80032f84 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x630>
80032de8:	00000000 	nop
80032dec:	0800cb88 	j	80032e20 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x4cc>
80032df0:	00000000 	nop
80032df4:	27a40070 	addiu	a0,sp,112
}
80032df8:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
80032dfc:	00000000 	nop
80032e00:	27a4006c 	addiu	a0,sp,108
80032e04:	0c008cff 	jal	800233fc <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17hde8d744f358f0af3E>
80032e08:	00000000 	nop
80032e0c:	27a40068 	addiu	a0,sp,104
80032e10:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
80032e14:	00000000 	nop
80032e18:	0800cbf9 	j	80032fe4 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x690>
80032e1c:	00000000 	nop
    env.env_ipc_perm = perm | Permssion::PTE_V;
80032e20:	8fa40058 	lw	a0,88(sp)
80032e24:	24050080 	li	a1,128
80032e28:	0c00da77 	jal	800369dc <_ZN8mos_65022mm7pgtable1_84_$LT$impl$u20$core..ops..bit..BitOr$u20$for$u20$mos_6502..mm..pgtable..Permssion$GT$5bitor17h0a6b0ebea1abfc81E>
80032e2c:	00000000 	nop
80032e30:	8fa1002c 	lw	at,44(sp)
80032e34:	ac2200d0 	sw	v0,208(at)
    let idx = get_page_index_by_kvaddr(pa_to_kva(pa)).expect("sys_ipc_try_send: page_incref");
80032e38:	8fa10074 	lw	at,116(sp)
80032e3c:	afa100fc 	sw	at,252(sp)
80032e40:	8fa100fc 	lw	at,252(sp)
80032e44:	afa10100 	sw	at,256(sp)
80032e48:	8fa40100 	lw	a0,256(sp)
80032e4c:	0c00af44 	jal	8002bd10 <_ZN8mos_65022mm4addr9pa_to_kva17h2cbb9d7cedc35302E>
80032e50:	00000000 	nop
80032e54:	afa20104 	sw	v0,260(sp)
80032e58:	8fa10104 	lw	at,260(sp)
80032e5c:	afa100bc 	sw	at,188(sp)
80032e60:	8fa100bc 	lw	at,188(sp)
80032e64:	afa10108 	sw	at,264(sp)
80032e68:	8fa10108 	lw	at,264(sp)
80032e6c:	afa1012c 	sw	at,300(sp)
80032e70:	8fa1012c 	lw	at,300(sp)
80032e74:	afa10128 	sw	at,296(sp)
80032e78:	8fa10128 	lw	at,296(sp)
80032e7c:	afa10134 	sw	at,308(sp)
80032e80:	8fa10134 	lw	at,308(sp)
80032e84:	afa10138 	sw	at,312(sp)
80032e88:	8fa40138 	lw	a0,312(sp)
80032e8c:	3c018105 	lui	at,0x8105
80032e90:	8c21f154 	lw	at,-3756(at)
80032e94:	afa1013c 	sw	at,316(sp)
80032e98:	8fa1013c 	lw	at,316(sp)
80032e9c:	afa10140 	sw	at,320(sp)
80032ea0:	8fa50140 	lw	a1,320(sp)
80032ea4:	0c00ae56 	jal	8002b958 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Sub$GT$3sub17hbee2a7e528d5ebe9E>
80032ea8:	00000000 	nop
80032eac:	afa20144 	sw	v0,324(sp)
80032eb0:	8fa10144 	lw	at,324(sp)
80032eb4:	afa10130 	sw	at,304(sp)
80032eb8:	8fa40130 	lw	a0,304(sp)
80032ebc:	24051000 	li	a1,4096
80032ec0:	0c008502 	jal	80021408 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h473bdee4731d0bddE>
80032ec4:	00000000 	nop
80032ec8:	00402025 	move	a0,v0
80032ecc:	00602825 	move	a1,v1
80032ed0:	3c018105 	lui	at,0x8105
80032ed4:	2421ff8c 	addiu	at,at,-116
80032ed8:	03a01025 	move	v0,sp
80032edc:	ac410010 	sw	at,16(v0)
80032ee0:	3c018105 	lui	at,0x8105
80032ee4:	2426ff6c 	addiu	a2,at,-148
80032ee8:	2407001d 	li	a3,29
80032eec:	0c00e744 	jal	80039d10 <_ZN4core6option15Option$LT$T$GT$6expect17h537867a9d3760452E>
80032ef0:	00000000 	nop
80032ef4:	00402025 	move	a0,v0
80032ef8:	00801025 	move	v0,a0
80032efc:	afa20020 	sw	v0,32(sp)
80032f00:	afa4010c 	sw	a0,268(sp)
    page_incref(idx);
80032f04:	0c00b0b5 	jal	8002c2d4 <_ZN8mos_65022mm4page11page_incref17hd9cc7671dca686beE>
80032f08:	00000000 	nop
80032f0c:	8fa1002c 	lw	at,44(sp)
    let result = env
80032f10:	8c2400b0 	lw	a0,176(at)
        .map_va_to_pa(env.env_ipc_dstva, pa, env.env_asid, 1, &perm, false);
80032f14:	8c2200cc 	lw	v0,204(at)
80032f18:	afa200c8 	sw	v0,200(sp)
80032f1c:	8c2700a4 	lw	a3,164(at)
    let result = env
80032f20:	8fa100c8 	lw	at,200(sp)
80032f24:	afa10110 	sw	at,272(sp)
80032f28:	8fa50110 	lw	a1,272(sp)
80032f2c:	8fa10074 	lw	at,116(sp)
80032f30:	afa10114 	sw	at,276(sp)
80032f34:	8fa10114 	lw	at,276(sp)
80032f38:	afa10118 	sw	at,280(sp)
80032f3c:	8fa60118 	lw	a2,280(sp)
80032f40:	03a00825 	move	at,sp
80032f44:	27a20058 	addiu	v0,sp,88
80032f48:	ac220014 	sw	v0,20(at)
80032f4c:	24020001 	li	v0,1
80032f50:	ac220010 	sw	v0,16(at)
80032f54:	ac200018 	sw	zero,24(at)
80032f58:	0c00b1de 	jal	8002c778 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E>
80032f5c:	00000000 	nop
80032f60:	afa200c0 	sw	v0,192(sp)
80032f64:	afa300c4 	sw	v1,196(sp)
80032f68:	27a400c0 	addiu	a0,sp,192
    if result.is_ok() {
80032f6c:	0c0097d6 	jal	80025f58 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2799107765c1d5b7E>
80032f70:	00000000 	nop
80032f74:	1440000d 	bnez	v0,80032fac <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x658>
80032f78:	00000000 	nop
80032f7c:	0800cbe4 	j	80032f90 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x63c>
80032f80:	00000000 	nop
        return 0;
80032f84:	afa0005c 	sw	zero,92(sp)
80032f88:	0800cb7d 	j	80032df4 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x4a0>
80032f8c:	00000000 	nop
        page_decref(idx);
80032f90:	8fa40020 	lw	a0,32(sp)
80032f94:	0c00b0e3 	jal	8002c38c <_ZN8mos_65022mm4page11page_decref17h261540825c48b6f2E>
80032f98:	00000000 	nop
80032f9c:	2401fffd 	li	at,-3
        -E_INVAL
80032fa0:	afa1005c 	sw	at,92(sp)
    if result.is_ok() {
80032fa4:	0800cbee 	j	80032fb8 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x664>
80032fa8:	00000000 	nop
        0
80032fac:	afa0005c 	sw	zero,92(sp)
    if result.is_ok() {
80032fb0:	0800cbee 	j	80032fb8 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x664>
80032fb4:	00000000 	nop
80032fb8:	27a40070 	addiu	a0,sp,112
}
80032fbc:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
80032fc0:	00000000 	nop
80032fc4:	27a4006c 	addiu	a0,sp,108
80032fc8:	0c008cff 	jal	800233fc <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17hde8d744f358f0af3E>
80032fcc:	00000000 	nop
80032fd0:	27a40068 	addiu	a0,sp,104
80032fd4:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
80032fd8:	00000000 	nop
80032fdc:	0800cbf9 	j	80032fe4 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E+0x690>
80032fe0:	00000000 	nop
80032fe4:	8fa2005c 	lw	v0,92(sp)
80032fe8:	8fbf017c 	lw	ra,380(sp)
80032fec:	27bd0180 	addiu	sp,sp,384
80032ff0:	03e00008 	jr	ra
80032ff4:	00000000 	nop

80032ff8 <_ZN8mos_65024trap7syscall9sys_cgetc17h24cd7c0624611c91E>:
fn sys_cgetc() -> i32 {
80032ff8:	27bdffe0 	addiu	sp,sp,-32
80032ffc:	afbf001c 	sw	ra,28(sp)
    loop {
80033000:	0800cc02 	j	80033008 <_ZN8mos_65024trap7syscall9sys_cgetc17h24cd7c0624611c91E+0x10>
80033004:	00000000 	nop
        ch = NS16550A.getchar();
80033008:	3c018105 	lui	at,0x8105
8003300c:	242408b8 	addiu	a0,at,2232
80033010:	0c00d89f 	jal	8003627c <_ZN73_$LT$mos_6502..dev..uart..NS16550A$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bec3ccd73d84f44E>
80033014:	00000000 	nop
80033018:	00402025 	move	a0,v0
8003301c:	0c00ae03 	jal	8002b80c <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7getchar17hf32a0d9e3844dc36E>
80033020:	00000000 	nop
80033024:	00400825 	move	at,v0
80033028:	afa10014 	sw	at,20(sp)
8003302c:	afa20018 	sw	v0,24(sp)
        if ch != 0 {
80033030:	1040fff5 	beqz	v0,80033008 <_ZN8mos_65024trap7syscall9sys_cgetc17h24cd7c0624611c91E+0x10>
80033034:	00000000 	nop
80033038:	0800cc10 	j	80033040 <_ZN8mos_65024trap7syscall9sys_cgetc17h24cd7c0624611c91E+0x48>
8003303c:	00000000 	nop
}
80033040:	8fa20014 	lw	v0,20(sp)
80033044:	8fbf001c 	lw	ra,28(sp)
80033048:	27bd0020 	addiu	sp,sp,32
8003304c:	03e00008 	jr	ra
80033050:	00000000 	nop

80033054 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E>:
fn is_illegal_dev_range(pa: PhysAddr, len: usize) -> bool {
80033054:	27bdff90 	addiu	sp,sp,-112
80033058:	afbf006c 	sw	ra,108(sp)
8003305c:	afa50018 	sw	a1,24(sp)
80033060:	afa40020 	sw	a0,32(sp)
80033064:	8fa10020 	lw	at,32(sp)
80033068:	afa1001c 	sw	at,28(sp)
8003306c:	afa50048 	sw	a1,72(sp)
    if (pa % 4 != 0 && len != 1 && len != 2) || (pa % 2 != 0 && len != 1) {
80033070:	8fa1001c 	lw	at,28(sp)
80033074:	afa1004c 	sw	at,76(sp)
80033078:	8fa1004c 	lw	at,76(sp)
8003307c:	afa10050 	sw	at,80(sp)
80033080:	8fa40050 	lw	a0,80(sp)
80033084:	24050004 	li	a1,4
80033088:	0c00ae7a 	jal	8002b9e8 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17h58289ad5784f53c4E>
8003308c:	00000000 	nop
80033090:	1440000f 	bnez	v0,800330d0 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x7c>
80033094:	00000000 	nop
80033098:	0800cc28 	j	800330a0 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x4c>
8003309c:	00000000 	nop
800330a0:	8fa1001c 	lw	at,28(sp)
800330a4:	afa10054 	sw	at,84(sp)
800330a8:	8fa10054 	lw	at,84(sp)
800330ac:	afa10058 	sw	at,88(sp)
800330b0:	8fa40058 	lw	a0,88(sp)
800330b4:	24050002 	li	a1,2
800330b8:	0c00ae7a 	jal	8002b9e8 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17h58289ad5784f53c4E>
800330bc:	00000000 	nop
800330c0:	10400013 	beqz	v0,80033110 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0xbc>
800330c4:	00000000 	nop
800330c8:	0800cc5c 	j	80033170 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x11c>
800330cc:	00000000 	nop
800330d0:	8fa10018 	lw	at,24(sp)
800330d4:	24020001 	li	v0,1
800330d8:	1022fff1 	beq	at,v0,800330a0 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x4c>
800330dc:	00000000 	nop
800330e0:	0800cc3a 	j	800330e8 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x94>
800330e4:	00000000 	nop
800330e8:	8fa10018 	lw	at,24(sp)
800330ec:	24020002 	li	v0,2
800330f0:	1022ffeb 	beq	at,v0,800330a0 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x4c>
800330f4:	00000000 	nop
800330f8:	0800cc40 	j	80033100 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0xac>
800330fc:	00000000 	nop
80033100:	24010001 	li	at,1
        return true;
80033104:	a3a10027 	sb	at,39(sp)
80033108:	0800cc78 	j	800331e0 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x18c>
8003310c:	00000000 	nop
    let target_start: PhysAddr = pa;
80033110:	8fa50018 	lw	a1,24(sp)
80033114:	8fa1001c 	lw	at,28(sp)
80033118:	afa10028 	sw	at,40(sp)
    let target_end: PhysAddr = pa + len;
8003311c:	8fa1001c 	lw	at,28(sp)
80033120:	afa1005c 	sw	at,92(sp)
80033124:	8fa1005c 	lw	at,92(sp)
80033128:	afa10060 	sw	at,96(sp)
8003312c:	8fa40060 	lw	a0,96(sp)
80033130:	0c00aeaa 	jal	8002baa8 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17h799630bd0af6cd94E>
80033134:	00000000 	nop
80033138:	afa20064 	sw	v0,100(sp)
8003313c:	8fa10064 	lw	at,100(sp)
80033140:	afa1002c 	sw	at,44(sp)
    for i in 0..VALID_ADDR_SPACE_NUM {
80033144:	afa00030 	sw	zero,48(sp)
80033148:	24010002 	li	at,2
8003314c:	afa10034 	sw	at,52(sp)
80033150:	8fa40030 	lw	a0,48(sp)
80033154:	8fa50034 	lw	a1,52(sp)
80033158:	0c012cc7 	jal	8004b31c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
8003315c:	00000000 	nop
80033160:	afa20038 	sw	v0,56(sp)
80033164:	afa3003c 	sw	v1,60(sp)
80033168:	0800cc62 	j	80033188 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x134>
8003316c:	00000000 	nop
80033170:	8fa10018 	lw	at,24(sp)
80033174:	24020001 	li	v0,1
    if (pa % 4 != 0 && len != 1 && len != 2) || (pa % 2 != 0 && len != 1) {
80033178:	1022ffe5 	beq	at,v0,80033110 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0xbc>
8003317c:	00000000 	nop
80033180:	0800cc40 	j	80033100 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0xac>
80033184:	00000000 	nop
80033188:	27a40038 	addiu	a0,sp,56
    for i in 0..VALID_ADDR_SPACE_NUM {
8003318c:	0c012cbe 	jal	8004b2f8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
80033190:	00000000 	nop
80033194:	afa20040 	sw	v0,64(sp)
80033198:	afa30044 	sw	v1,68(sp)
8003319c:	8fa10040 	lw	at,64(sp)
800331a0:	14200007 	bnez	at,800331c0 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x16c>
800331a4:	00000000 	nop
800331a8:	0800cc6c 	j	800331b0 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x15c>
800331ac:	00000000 	nop
800331b0:	24010001 	li	at,1
    true
800331b4:	a3a10027 	sb	at,39(sp)
}
800331b8:	0800cc78 	j	800331e0 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x18c>
800331bc:	00000000 	nop
    for i in 0..VALID_ADDR_SPACE_NUM {
800331c0:	8fa10044 	lw	at,68(sp)
800331c4:	afa10014 	sw	at,20(sp)
800331c8:	afa10068 	sw	at,104(sp)
        if target_start >= VALID_ADDR_START[i] && target_end <= VALID_ADDR_END[i] {
800331cc:	2c210002 	sltiu	at,at,2
800331d0:	14200009 	bnez	at,800331f8 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x1a4>
800331d4:	00000000 	nop
800331d8:	0800cc8a 	j	80033228 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x1d4>
800331dc:	00000000 	nop
}
800331e0:	93a10027 	lbu	at,39(sp)
800331e4:	30220001 	andi	v0,at,0x1
800331e8:	8fbf006c 	lw	ra,108(sp)
800331ec:	27bd0070 	addiu	sp,sp,112
800331f0:	03e00008 	jr	ra
800331f4:	00000000 	nop
        if target_start >= VALID_ADDR_START[i] && target_end <= VALID_ADDR_END[i] {
800331f8:	8fa10014 	lw	at,20(sp)
800331fc:	00011080 	sll	v0,at,0x2
80033200:	3c018105 	lui	at,0x8105
80033204:	2421ffe0 	addiu	at,at,-32
80033208:	00222821 	addu	a1,at,v0
8003320c:	27a40028 	addiu	a0,sp,40
80033210:	0c008261 	jal	80020984 <_ZN4core3cmp10PartialOrd2ge17ha603ce749c946243E>
80033214:	00000000 	nop
80033218:	14400009 	bnez	v0,80033240 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x1ec>
8003321c:	00000000 	nop
80033220:	0800cc62 	j	80033188 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x134>
80033224:	00000000 	nop
80033228:	8fa40014 	lw	a0,20(sp)
8003322c:	3c018105 	lui	at,0x8105
80033230:	2426ffd0 	addiu	a2,at,-48
80033234:	24050002 	li	a1,2
80033238:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8003323c:	00000000 	nop
80033240:	8fa10014 	lw	at,20(sp)
80033244:	2c210002 	sltiu	at,at,2
80033248:	1020000f 	beqz	at,80033288 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x234>
8003324c:	00000000 	nop
80033250:	0800cc96 	j	80033258 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x204>
80033254:	00000000 	nop
80033258:	8fa10014 	lw	at,20(sp)
8003325c:	00011080 	sll	v0,at,0x2
80033260:	3c018105 	lui	at,0x8105
80033264:	2421ffe8 	addiu	at,at,-24
80033268:	00222821 	addu	a1,at,v0
8003326c:	27a4002c 	addiu	a0,sp,44
80033270:	0c0082a3 	jal	80020a8c <_ZN4core3cmp10PartialOrd2le17hd3787ea4b7b21dceE>
80033274:	00000000 	nop
80033278:	14400009 	bnez	v0,800332a0 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x24c>
8003327c:	00000000 	nop
80033280:	0800cc62 	j	80033188 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x134>
80033284:	00000000 	nop
80033288:	8fa40014 	lw	a0,20(sp)
8003328c:	3c018105 	lui	at,0x8105
80033290:	2426fff0 	addiu	a2,at,-16
80033294:	24050002 	li	a1,2
80033298:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8003329c:	00000000 	nop
800332a0:	24010000 	li	at,0
            return false;
800332a4:	a3a00027 	sb	zero,39(sp)
800332a8:	0800cc78 	j	800331e0 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17hcdc1a369a919e721E+0x18c>
800332ac:	00000000 	nop

800332b0 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE>:

pub fn do_syscall(trapframe: &mut Trapframe) {
800332b0:	27bdfe88 	addiu	sp,sp,-376
800332b4:	afbf0174 	sw	ra,372(sp)
800332b8:	afa4003c 	sw	a0,60(sp)
800332bc:	afa40078 	sw	a0,120(sp)
    // println!("do_syscall: epc: {:#x},syscall number: {:#x}", trapframe.epc,trapframe.regs[4]);
    trapframe.epc += 4;
800332c0:	8c820094 	lw	v0,148(a0)
800332c4:	24410004 	addiu	at,v0,4
800332c8:	afa10040 	sw	at,64(sp)
800332cc:	0022082b 	sltu	at,at,v0
800332d0:	14200012 	bnez	at,8003331c <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x6c>
800332d4:	00000000 	nop
800332d8:	0800ccb8 	j	800332e0 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x30>
800332dc:	00000000 	nop
800332e0:	8fa1003c 	lw	at,60(sp)
800332e4:	8fa20040 	lw	v0,64(sp)
800332e8:	ac220094 	sw	v0,148(at)
    let ret: i32 = match trapframe.regs[4] {
800332ec:	8c210010 	lw	at,16(at)
800332f0:	afa10038 	sw	at,56(sp)
800332f4:	2c210012 	sltiu	at,at,18
800332f8:	1020000c 	beqz	at,8003332c <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x7c>
800332fc:	00000000 	nop
80033300:	8fa10038 	lw	at,56(sp)
80033304:	00010880 	sll	at,at,0x2
80033308:	3c028105 	lui	v0,0x8105
8003330c:	00220821 	addu	at,at,v0
80033310:	8c21e0e8 	lw	at,-7960(at)
80033314:	00200008 	jr	at
80033318:	00000000 	nop
    trapframe.epc += 4;
8003331c:	3c018105 	lui	at,0x8105
80033320:	24240000 	addiu	a0,at,0
80033324:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80033328:	00000000 	nop
8003332c:	2401fffd 	li	at,-3
        SYS_READ_DEV => sys_read_dev(
            trapframe.get_arg0().into(),
            trapframe.get_arg1().into(),
            trapframe.get_arg2(),
        ),
        _ => -E_INVAL,
80033330:	afa10044 	sw	at,68(sp)
80033334:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
80033338:	00000000 	nop
        SYS_CGETC => sys_cgetc(),
8003333c:	0c00cbfe 	jal	80032ff8 <_ZN8mos_65024trap7syscall9sys_cgetc17h24cd7c0624611c91E>
80033340:	00000000 	nop
80033344:	afa20044 	sw	v0,68(sp)
80033348:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
8003334c:	00000000 	nop
80033350:	8fa1003c 	lw	at,60(sp)
80033354:	afa10110 	sw	at,272(sp)
        self.regs[5]
80033358:	8c240014 	lw	a0,20(at)
        SYS_PUTCHAR => sys_putchar(trapframe.get_arg0() as u32),
8003335c:	0c00bee7 	jal	8002fb9c <_ZN8mos_65024trap7syscall11sys_putchar17h0ae356c6c3dd4be5E>
80033360:	00000000 	nop
80033364:	afa20044 	sw	v0,68(sp)
80033368:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
8003336c:	00000000 	nop
80033370:	8fa1003c 	lw	at,60(sp)
80033374:	afa1010c 	sw	at,268(sp)
80033378:	8c240014 	lw	a0,20(at)
        SYS_PRINT_CONS => sys_print_cons(trapframe.get_arg0().into(), trapframe.get_arg1()),
8003337c:	3c018105 	lui	at,0x8105
80033380:	24250010 	addiu	a1,at,16
80033384:	0c00a17b 	jal	800285ec <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h7c2bae688c333c46E>
80033388:	00000000 	nop
8003338c:	8fa1003c 	lw	at,60(sp)
80033390:	afa2007c 	sw	v0,124(sp)
80033394:	8fa2007c 	lw	v0,124(sp)
80033398:	afa20048 	sw	v0,72(sp)
8003339c:	afa10138 	sw	at,312(sp)
        self.regs[6]
800333a0:	8c250018 	lw	a1,24(at)
800333a4:	8fa10048 	lw	at,72(sp)
800333a8:	afa10080 	sw	at,128(sp)
800333ac:	8fa40080 	lw	a0,128(sp)
800333b0:	0c00bef8 	jal	8002fbe0 <_ZN8mos_65024trap7syscall14sys_print_cons17h12929b6bbc15e9adE>
800333b4:	00000000 	nop
800333b8:	afa20044 	sw	v0,68(sp)
800333bc:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
800333c0:	00000000 	nop
        SYS_GETENVID => sys_getenvid(),
800333c4:	0c00c248 	jal	80030920 <_ZN8mos_65024trap7syscall12sys_getenvid17h4a64675d732814f4E>
800333c8:	00000000 	nop
800333cc:	afa20044 	sw	v0,68(sp)
800333d0:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
800333d4:	00000000 	nop
        SYS_YIELD => sys_yield(),
800333d8:	0c00c286 	jal	80030a18 <_ZN8mos_65024trap7syscall9sys_yield17h2c157241bba6d750E>
800333dc:	00000000 	nop
800333e0:	8fa1003c 	lw	at,60(sp)
800333e4:	afa10108 	sw	at,264(sp)
        self.regs[5]
800333e8:	8c240014 	lw	a0,20(at)
        SYS_ENV_DESTROY => sys_env_destroy(trapframe.get_arg0()),
800333ec:	0c00c29b 	jal	80030a6c <_ZN8mos_65024trap7syscall15sys_env_destroy17h851b479324bd97feE>
800333f0:	00000000 	nop
800333f4:	afa20044 	sw	v0,68(sp)
800333f8:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
800333fc:	00000000 	nop
80033400:	8fa1003c 	lw	at,60(sp)
80033404:	afa10104 	sw	at,260(sp)
80033408:	8c240014 	lw	a0,20(at)
8003340c:	afa10134 	sw	at,308(sp)
        self.regs[6]
80033410:	8c250018 	lw	a1,24(at)
        SYS_SET_TLB_MOD_ENTRY => sys_set_tlb_mod_entry(trapframe.get_arg0(), trapframe.get_arg1()),
80033414:	0c00c37f 	jal	80030dfc <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17h73671846a93957a7E>
80033418:	00000000 	nop
8003341c:	afa20044 	sw	v0,68(sp)
80033420:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
80033424:	00000000 	nop
80033428:	8fa1003c 	lw	at,60(sp)
8003342c:	afa10100 	sw	at,256(sp)
        self.regs[5]
80033430:	8c220014 	lw	v0,20(at)
80033434:	afa20034 	sw	v0,52(sp)
80033438:	afa10130 	sw	at,304(sp)
        self.regs[6]
8003343c:	8c240018 	lw	a0,24(at)
            trapframe.get_arg1().into(),
80033440:	3c018105 	lui	at,0x8105
80033444:	24250020 	addiu	a1,at,32
80033448:	0c00a17b 	jal	800285ec <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h7c2bae688c333c46E>
8003344c:	00000000 	nop
80033450:	8fa1003c 	lw	at,60(sp)
80033454:	afa20084 	sw	v0,132(sp)
80033458:	8fa20084 	lw	v0,132(sp)
8003345c:	afa2004c 	sw	v0,76(sp)
80033460:	afa1014c 	sw	at,332(sp)
        self.regs[7]
80033464:	8c24001c 	lw	a0,28(at)
            trapframe.get_arg2().into(),
80033468:	3c018105 	lui	at,0x8105
8003346c:	24250030 	addiu	a1,at,48
80033470:	0c00a164 	jal	80028590 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6d9b2e3e75ed018fE>
80033474:	00000000 	nop
80033478:	8fa40034 	lw	a0,52(sp)
8003347c:	00403025 	move	a2,v0
        SYS_MEM_ALLOC => sys_mem_alloc(
80033480:	8fa1004c 	lw	at,76(sp)
80033484:	afa10088 	sw	at,136(sp)
80033488:	8fa50088 	lw	a1,136(sp)
8003348c:	0c00c3d6 	jal	80030f58 <_ZN8mos_65024trap7syscall13sys_mem_alloc17he4803ec4a34e6df8E>
80033490:	00000000 	nop
80033494:	afa20044 	sw	v0,68(sp)
80033498:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
8003349c:	00000000 	nop
800334a0:	8fa1003c 	lw	at,60(sp)
800334a4:	afa100fc 	sw	at,252(sp)
        self.regs[5]
800334a8:	8c220014 	lw	v0,20(at)
800334ac:	afa2002c 	sw	v0,44(sp)
800334b0:	afa1012c 	sw	at,300(sp)
        self.regs[6]
800334b4:	8c240018 	lw	a0,24(at)
            trapframe.get_arg1().into(),
800334b8:	3c018105 	lui	at,0x8105
800334bc:	24250040 	addiu	a1,at,64
800334c0:	0c00a17b 	jal	800285ec <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h7c2bae688c333c46E>
800334c4:	00000000 	nop
800334c8:	8fa1003c 	lw	at,60(sp)
800334cc:	afa2008c 	sw	v0,140(sp)
800334d0:	8fa2008c 	lw	v0,140(sp)
800334d4:	afa20050 	sw	v0,80(sp)
800334d8:	afa10148 	sw	at,328(sp)
        self.regs[7]
800334dc:	8c22001c 	lw	v0,28(at)
800334e0:	afa20030 	sw	v0,48(sp)
800334e4:	afa1015c 	sw	at,348(sp)
        unsafe { ptr::read_unaligned((self.regs[29] as *const usize).offset(4)) }
800334e8:	8c210074 	lw	at,116(at)
800334ec:	afa10160 	sw	at,352(sp)
800334f0:	24020004 	li	v0,4
800334f4:	afa20164 	sw	v0,356(sp)
        unsafe { intrinsics::offset(self, count) }
800334f8:	24240010 	addiu	a0,at,16
800334fc:	0c00e5a1 	jal	80039684 <_ZN4core3ptr14read_unaligned17h5e374c90726d2edbE>
80033500:	00000000 	nop
80033504:	00402025 	move	a0,v0
            trapframe.get_arg3().into(),
80033508:	3c018105 	lui	at,0x8105
8003350c:	24250050 	addiu	a1,at,80
80033510:	0c00a17b 	jal	800285ec <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h7c2bae688c333c46E>
80033514:	00000000 	nop
80033518:	8fa1003c 	lw	at,60(sp)
8003351c:	afa20090 	sw	v0,144(sp)
80033520:	8fa20090 	lw	v0,144(sp)
80033524:	afa20054 	sw	v0,84(sp)
80033528:	afa10168 	sw	at,360(sp)
        unsafe { ptr::read_unaligned((self.regs[29] as *const usize).offset(5)) }
8003352c:	8c210074 	lw	at,116(at)
80033530:	afa1016c 	sw	at,364(sp)
80033534:	24020005 	li	v0,5
80033538:	afa20170 	sw	v0,368(sp)
8003353c:	24240014 	addiu	a0,at,20
80033540:	0c00e5a1 	jal	80039684 <_ZN4core3ptr14read_unaligned17h5e374c90726d2edbE>
80033544:	00000000 	nop
80033548:	00402025 	move	a0,v0
            trapframe.get_arg4().into(),
8003354c:	3c018105 	lui	at,0x8105
80033550:	24250060 	addiu	a1,at,96
80033554:	0c00a164 	jal	80028590 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6d9b2e3e75ed018fE>
80033558:	00000000 	nop
8003355c:	8fa4002c 	lw	a0,44(sp)
80033560:	8fa60030 	lw	a2,48(sp)
        SYS_MEM_MAP => sys_mem_map(
80033564:	8fa10050 	lw	at,80(sp)
80033568:	afa10094 	sw	at,148(sp)
8003356c:	8fa50094 	lw	a1,148(sp)
80033570:	8fa10054 	lw	at,84(sp)
80033574:	afa10098 	sw	at,152(sp)
80033578:	8fa70098 	lw	a3,152(sp)
8003357c:	03a00825 	move	at,sp
80033580:	ac220010 	sw	v0,16(at)
80033584:	0c00c494 	jal	80031250 <_ZN8mos_65024trap7syscall11sys_mem_map17hbe61aef4e3f61e11E>
80033588:	00000000 	nop
8003358c:	afa20044 	sw	v0,68(sp)
80033590:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
80033594:	00000000 	nop
80033598:	8fa1003c 	lw	at,60(sp)
8003359c:	afa100f8 	sw	at,248(sp)
        self.regs[5]
800335a0:	8c220014 	lw	v0,20(at)
800335a4:	afa20028 	sw	v0,40(sp)
800335a8:	afa10128 	sw	at,296(sp)
        self.regs[6]
800335ac:	8c240018 	lw	a0,24(at)
        SYS_MEM_UNMAP => sys_mem_unmap(trapframe.get_arg0(), trapframe.get_arg1().into()),
800335b0:	3c018105 	lui	at,0x8105
800335b4:	24250070 	addiu	a1,at,112
800335b8:	0c00a17b 	jal	800285ec <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h7c2bae688c333c46E>
800335bc:	00000000 	nop
800335c0:	8fa40028 	lw	a0,40(sp)
800335c4:	afa2009c 	sw	v0,156(sp)
800335c8:	8fa1009c 	lw	at,156(sp)
800335cc:	afa10058 	sw	at,88(sp)
800335d0:	8fa10058 	lw	at,88(sp)
800335d4:	afa100a0 	sw	at,160(sp)
800335d8:	8fa500a0 	lw	a1,160(sp)
800335dc:	0c00c5f3 	jal	800317cc <_ZN8mos_65024trap7syscall13sys_mem_unmap17h75e80d60bcc426d7E>
800335e0:	00000000 	nop
800335e4:	afa20044 	sw	v0,68(sp)
800335e8:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
800335ec:	00000000 	nop
        SYS_EXOFORK => sys_exofork(),
800335f0:	0c00c67e 	jal	800319f8 <_ZN8mos_65024trap7syscall11sys_exofork17h7c1598ebac5dd5a6E>
800335f4:	00000000 	nop
800335f8:	afa20044 	sw	v0,68(sp)
800335fc:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
80033600:	00000000 	nop
80033604:	8fa1003c 	lw	at,60(sp)
80033608:	afa100f4 	sw	at,244(sp)
        self.regs[5]
8003360c:	8c220014 	lw	v0,20(at)
80033610:	afa20024 	sw	v0,36(sp)
80033614:	afa10124 	sw	at,292(sp)
        self.regs[6]
80033618:	8c240018 	lw	a0,24(at)
        SYS_SET_ENV_STATUS => sys_set_env_status(trapframe.get_arg0(), trapframe.get_arg1().into()),
8003361c:	3c018105 	lui	at,0x8105
80033620:	24250080 	addiu	a1,at,128
80033624:	0c00a154 	jal	80028550 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0013e0edbe0f49f5E>
80033628:	00000000 	nop
8003362c:	8fa40024 	lw	a0,36(sp)
80033630:	00402825 	move	a1,v0
80033634:	0c00c722 	jal	80031c88 <_ZN8mos_65024trap7syscall18sys_set_env_status17h11b34c695bdc5a97E>
80033638:	00000000 	nop
8003363c:	afa20044 	sw	v0,68(sp)
80033640:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
80033644:	00000000 	nop
80033648:	8fa1003c 	lw	at,60(sp)
8003364c:	afa100f0 	sw	at,240(sp)
        self.regs[5]
80033650:	8c240014 	lw	a0,20(at)
80033654:	afa10120 	sw	at,288(sp)
        self.regs[6]
80033658:	8c250018 	lw	a1,24(at)
            sys_set_trapframe(trapframe.get_arg0(), trapframe.get_arg1() as *mut Trapframe)
8003365c:	0c00c817 	jal	8003205c <_ZN8mos_65024trap7syscall17sys_set_trapframe17hb2a94419d95775e1E>
80033660:	00000000 	nop
80033664:	afa20044 	sw	v0,68(sp)
80033668:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
8003366c:	00000000 	nop
80033670:	8fa1003c 	lw	at,60(sp)
80033674:	afa100ec 	sw	at,236(sp)
        self.regs[5]
80033678:	8c240014 	lw	a0,20(at)
        SYS_PANIC => sys_panic(trapframe.get_arg0().into()),
8003367c:	3c018105 	lui	at,0x8105
80033680:	24250090 	addiu	a1,at,144
80033684:	0c00a17b 	jal	800285ec <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h7c2bae688c333c46E>
80033688:	00000000 	nop
8003368c:	afa200a4 	sw	v0,164(sp)
80033690:	8fa100a4 	lw	at,164(sp)
80033694:	afa1005c 	sw	at,92(sp)
80033698:	8fa1005c 	lw	at,92(sp)
8003369c:	afa100a8 	sw	at,168(sp)
800336a0:	8fa400a8 	lw	a0,168(sp)
800336a4:	0c00c95e 	jal	80032578 <_ZN8mos_65024trap7syscall9sys_panic17ha54279af19ac30d9E>
800336a8:	00000000 	nop
800336ac:	8fa1003c 	lw	at,60(sp)
800336b0:	afa100e8 	sw	at,232(sp)
800336b4:	8c240014 	lw	a0,20(at)
        SYS_IPC_RECV => sys_ipc_recv(trapframe.get_arg0().into()),
800336b8:	3c018105 	lui	at,0x8105
800336bc:	242500a0 	addiu	a1,at,160
800336c0:	0c00a17b 	jal	800285ec <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h7c2bae688c333c46E>
800336c4:	00000000 	nop
800336c8:	afa200ac 	sw	v0,172(sp)
800336cc:	8fa100ac 	lw	at,172(sp)
800336d0:	afa10060 	sw	at,96(sp)
800336d4:	8fa10060 	lw	at,96(sp)
800336d8:	afa100b0 	sw	at,176(sp)
800336dc:	8fa400b0 	lw	a0,176(sp)
800336e0:	0c00c9ae 	jal	800326b8 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h3c0a064cb33f463cE>
800336e4:	00000000 	nop
800336e8:	afa20044 	sw	v0,68(sp)
800336ec:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
800336f0:	00000000 	nop
800336f4:	8fa1003c 	lw	at,60(sp)
800336f8:	afa100e4 	sw	at,228(sp)
800336fc:	8c220014 	lw	v0,20(at)
80033700:	afa2001c 	sw	v0,28(sp)
80033704:	afa1011c 	sw	at,284(sp)
        self.regs[6]
80033708:	8c220018 	lw	v0,24(at)
8003370c:	afa20020 	sw	v0,32(sp)
80033710:	afa10144 	sw	at,324(sp)
        self.regs[7]
80033714:	8c24001c 	lw	a0,28(at)
            trapframe.get_arg2().into(),
80033718:	3c018105 	lui	at,0x8105
8003371c:	242500b0 	addiu	a1,at,176
80033720:	0c00a17b 	jal	800285ec <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h7c2bae688c333c46E>
80033724:	00000000 	nop
80033728:	8fa1003c 	lw	at,60(sp)
8003372c:	afa200b4 	sw	v0,180(sp)
80033730:	8fa200b4 	lw	v0,180(sp)
80033734:	afa20064 	sw	v0,100(sp)
80033738:	afa10150 	sw	at,336(sp)
        unsafe { ptr::read_unaligned((self.regs[29] as *const usize).offset(4)) }
8003373c:	8c210074 	lw	at,116(at)
80033740:	afa10154 	sw	at,340(sp)
80033744:	24020004 	li	v0,4
80033748:	afa20158 	sw	v0,344(sp)
8003374c:	24240010 	addiu	a0,at,16
80033750:	0c00e5a1 	jal	80039684 <_ZN4core3ptr14read_unaligned17h5e374c90726d2edbE>
80033754:	00000000 	nop
80033758:	00402025 	move	a0,v0
            trapframe.get_arg3().into(),
8003375c:	3c018105 	lui	at,0x8105
80033760:	242500c0 	addiu	a1,at,192
80033764:	0c00a164 	jal	80028590 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6d9b2e3e75ed018fE>
80033768:	00000000 	nop
8003376c:	8fa4001c 	lw	a0,28(sp)
80033770:	8fa50020 	lw	a1,32(sp)
80033774:	00403825 	move	a3,v0
        SYS_IPC_TRY_SEND => sys_ipc_try_send(
80033778:	8fa10064 	lw	at,100(sp)
8003377c:	afa100b8 	sw	at,184(sp)
80033780:	8fa600b8 	lw	a2,184(sp)
80033784:	0c00ca55 	jal	80032954 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17h68cbfdffda175e54E>
80033788:	00000000 	nop
8003378c:	afa20044 	sw	v0,68(sp)
80033790:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
80033794:	00000000 	nop
80033798:	8fa1003c 	lw	at,60(sp)
8003379c:	afa100e0 	sw	at,224(sp)
        self.regs[5]
800337a0:	8c240014 	lw	a0,20(at)
            trapframe.get_arg0().into(),
800337a4:	3c018105 	lui	at,0x8105
800337a8:	242500d0 	addiu	a1,at,208
800337ac:	0c00a17b 	jal	800285ec <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h7c2bae688c333c46E>
800337b0:	00000000 	nop
800337b4:	8fa1003c 	lw	at,60(sp)
800337b8:	afa200bc 	sw	v0,188(sp)
800337bc:	8fa200bc 	lw	v0,188(sp)
800337c0:	afa20068 	sw	v0,104(sp)
800337c4:	afa10118 	sw	at,280(sp)
        self.regs[6]
800337c8:	8c240018 	lw	a0,24(at)
            trapframe.get_arg1().into(),
800337cc:	3c018105 	lui	at,0x8105
800337d0:	242500e0 	addiu	a1,at,224
800337d4:	0c00a188 	jal	80028620 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h9420ff84c4f782caE>
800337d8:	00000000 	nop
800337dc:	8fa1003c 	lw	at,60(sp)
800337e0:	afa200c0 	sw	v0,192(sp)
800337e4:	8fa200c0 	lw	v0,192(sp)
800337e8:	afa2006c 	sw	v0,108(sp)
800337ec:	afa10140 	sw	at,320(sp)
        self.regs[7]
800337f0:	8c26001c 	lw	a2,28(at)
        SYS_WRITE_DEV => sys_write_dev(
800337f4:	8fa10068 	lw	at,104(sp)
800337f8:	afa100c4 	sw	at,196(sp)
800337fc:	8fa400c4 	lw	a0,196(sp)
80033800:	8fa1006c 	lw	at,108(sp)
80033804:	afa100c8 	sw	at,200(sp)
80033808:	8fa500c8 	lw	a1,200(sp)
8003380c:	0c00bf3e 	jal	8002fcf8 <_ZN8mos_65024trap7syscall13sys_write_dev17hd228cadbe80cc427E>
80033810:	00000000 	nop
80033814:	afa20044 	sw	v0,68(sp)
80033818:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
8003381c:	00000000 	nop
80033820:	8fa1003c 	lw	at,60(sp)
80033824:	afa100dc 	sw	at,220(sp)
        self.regs[5]
80033828:	8c240014 	lw	a0,20(at)
            trapframe.get_arg0().into(),
8003382c:	3c018105 	lui	at,0x8105
80033830:	242500f0 	addiu	a1,at,240
80033834:	0c00a17b 	jal	800285ec <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h7c2bae688c333c46E>
80033838:	00000000 	nop
8003383c:	8fa1003c 	lw	at,60(sp)
80033840:	afa200cc 	sw	v0,204(sp)
80033844:	8fa200cc 	lw	v0,204(sp)
80033848:	afa20070 	sw	v0,112(sp)
8003384c:	afa10114 	sw	at,276(sp)
        self.regs[6]
80033850:	8c240018 	lw	a0,24(at)
            trapframe.get_arg1().into(),
80033854:	3c018105 	lui	at,0x8105
80033858:	24250100 	addiu	a1,at,256
8003385c:	0c00a188 	jal	80028620 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h9420ff84c4f782caE>
80033860:	00000000 	nop
80033864:	8fa1003c 	lw	at,60(sp)
80033868:	afa200d0 	sw	v0,208(sp)
8003386c:	8fa200d0 	lw	v0,208(sp)
80033870:	afa20074 	sw	v0,116(sp)
80033874:	afa1013c 	sw	at,316(sp)
        self.regs[7]
80033878:	8c26001c 	lw	a2,28(at)
        SYS_READ_DEV => sys_read_dev(
8003387c:	8fa10070 	lw	at,112(sp)
80033880:	afa100d4 	sw	at,212(sp)
80033884:	8fa400d4 	lw	a0,212(sp)
80033888:	8fa10074 	lw	at,116(sp)
8003388c:	afa100d8 	sw	at,216(sp)
80033890:	8fa500d8 	lw	a1,216(sp)
80033894:	0c00c0c3 	jal	8003030c <_ZN8mos_65024trap7syscall12sys_read_dev17h86d158e51f5a9dbeE>
80033898:	00000000 	nop
8003389c:	afa20044 	sw	v0,68(sp)
800338a0:	0800ce2a 	j	800338a8 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE+0x5f8>
800338a4:	00000000 	nop
    };
    trapframe.regs[2] = ret as usize;
800338a8:	8fa2003c 	lw	v0,60(sp)
800338ac:	8fa10044 	lw	at,68(sp)
800338b0:	ac410008 	sw	at,8(v0)
}
800338b4:	8fbf0174 	lw	ra,372(sp)
800338b8:	27bd0178 	addiu	sp,sp,376
800338bc:	03e00008 	jr	ra
800338c0:	00000000 	nop

800338c4 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE>:
    trap::trapframe,
};
use core::{mem::size_of, ops::Add};
use mips32::{cp0, Reg};

pub(super) fn do_tlb_mod(trapframe: &mut trapframe::Trapframe) {
800338c4:	27bdfac0 	addiu	sp,sp,-1344
800338c8:	afbf053c 	sw	ra,1340(sp)
800338cc:	00801025 	move	v0,a0
800338d0:	afa20064 	sw	v0,100(sp)
800338d4:	afa20384 	sw	v0,900(sp)
    println!(
800338d8:	24430094 	addiu	v1,v0,148
800338dc:	afa304e0 	sw	v1,1248(sp)
800338e0:	afa304ec 	sw	v1,1260(sp)
800338e4:	3c018005 	lui	at,0x8005
800338e8:	24219698 	addiu	at,at,-26984
800338ec:	afa10050 	sw	at,80(sp)
800338f0:	afa104f0 	sw	at,1264(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
800338f4:	afa304e4 	sw	v1,1252(sp)
800338f8:	afa104e8 	sw	at,1256(sp)
    }
800338fc:	8fa804e4 	lw	t0,1252(sp)
80033900:	8fa704e8 	lw	a3,1256(sp)
80033904:	2443008c 	addiu	v1,v0,140
80033908:	afa304dc 	sw	v1,1244(sp)
8003390c:	afa304fc 	sw	v1,1276(sp)
80033910:	afa10500 	sw	at,1280(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80033914:	afa304f4 	sw	v1,1268(sp)
80033918:	afa104f8 	sw	at,1272(sp)
    }
8003391c:	8fa604f4 	lw	a2,1268(sp)
80033920:	8fa504f8 	lw	a1,1272(sp)
        "do_tlb_mod,the original epc is {:#x},the badbadddr is {:#x},tf is {:#x},reg[29] is {:#x}",
        trapframe.epc, trapframe.badvaddr,trapframe as *const trapframe::Trapframe as usize,trapframe.regs[29]
80033924:	afa200a4 	sw	v0,164(sp)
80033928:	27a300a4 	addiu	v1,sp,164
8003392c:	afa304d8 	sw	v1,1240(sp)
80033930:	afa3050c 	sw	v1,1292(sp)
80033934:	afa10510 	sw	at,1296(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80033938:	afa30504 	sw	v1,1284(sp)
8003393c:	afa10508 	sw	at,1288(sp)
    }
80033940:	8fa40504 	lw	a0,1284(sp)
80033944:	8fa30508 	lw	v1,1288(sp)
    println!(
80033948:	24420074 	addiu	v0,v0,116
8003394c:	afa204d4 	sw	v0,1236(sp)
80033950:	afa2051c 	sw	v0,1308(sp)
80033954:	afa10520 	sw	at,1312(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80033958:	afa20514 	sw	v0,1300(sp)
8003395c:	afa10518 	sw	at,1304(sp)
    }
80033960:	8fa20514 	lw	v0,1300(sp)
80033964:	8fa10518 	lw	at,1304(sp)
80033968:	afa80084 	sw	t0,132(sp)
8003396c:	afa70088 	sw	a3,136(sp)
80033970:	afa6008c 	sw	a2,140(sp)
80033974:	afa50090 	sw	a1,144(sp)
80033978:	afa40094 	sw	a0,148(sp)
8003397c:	afa30098 	sw	v1,152(sp)
80033980:	afa2009c 	sw	v0,156(sp)
80033984:	afa100a0 	sw	at,160(sp)
80033988:	24080003 	li	t0,3
8003398c:	a3a8014b 	sb	t0,331(sp)
80033990:	24020002 	li	v0,2
80033994:	afa20054 	sw	v0,84(sp)
80033998:	afa2014c 	sw	v0,332(sp)
8003399c:	afa20154 	sw	v0,340(sp)
800339a0:	93a9014b 	lbu	t1,331(sp)
800339a4:	8fa6014c 	lw	a2,332(sp)
800339a8:	8fa50150 	lw	a1,336(sp)
800339ac:	8fa40154 	lw	a0,340(sp)
800339b0:	8fa30158 	lw	v1,344(sp)
800339b4:	afa004b0 	sw	zero,1200(sp)
800339b8:	24070020 	li	a3,32
800339bc:	afa70058 	sw	a3,88(sp)
800339c0:	afa704b4 	sw	a3,1204(sp)
800339c4:	a3a904bb 	sb	t1,1211(sp)
800339c8:	24010004 	li	at,4
800339cc:	afa1005c 	sw	at,92(sp)
800339d0:	afa104bc 	sw	at,1212(sp)
800339d4:	afa604c0 	sw	a2,1216(sp)
800339d8:	afa504c4 	sw	a1,1220(sp)
800339dc:	afa404c8 	sw	a0,1224(sp)
800339e0:	afa304cc 	sw	v1,1228(sp)
        Self { position, fill, align, flags, precision, width }
800339e4:	afa0013c 	sw	zero,316(sp)
800339e8:	afa70138 	sw	a3,312(sp)
800339ec:	a3a90144 	sb	t1,324(sp)
800339f0:	afa10140 	sw	at,320(sp)
800339f4:	afa60128 	sw	a2,296(sp)
800339f8:	afa5012c 	sw	a1,300(sp)
800339fc:	afa40130 	sw	a0,304(sp)
80033a00:	afa30134 	sw	v1,308(sp)
80033a04:	a3a8017f 	sb	t0,383(sp)
80033a08:	afa20180 	sw	v0,384(sp)
80033a0c:	afa20188 	sw	v0,392(sp)
80033a10:	93a9017f 	lbu	t1,383(sp)
80033a14:	8fa60180 	lw	a2,384(sp)
80033a18:	8fa50184 	lw	a1,388(sp)
80033a1c:	8fa40188 	lw	a0,392(sp)
80033a20:	8fa3018c 	lw	v1,396(sp)
80033a24:	240a0001 	li	t2,1
80033a28:	afaa0490 	sw	t2,1168(sp)
80033a2c:	afa70494 	sw	a3,1172(sp)
80033a30:	a3a9049b 	sb	t1,1179(sp)
80033a34:	afa1049c 	sw	at,1180(sp)
80033a38:	afa604a0 	sw	a2,1184(sp)
80033a3c:	afa504a4 	sw	a1,1188(sp)
80033a40:	afa404a8 	sw	a0,1192(sp)
80033a44:	afa304ac 	sw	v1,1196(sp)
80033a48:	afaa0170 	sw	t2,368(sp)
80033a4c:	afa7016c 	sw	a3,364(sp)
80033a50:	a3a90178 	sb	t1,376(sp)
80033a54:	afa10174 	sw	at,372(sp)
80033a58:	afa6015c 	sw	a2,348(sp)
80033a5c:	afa50160 	sw	a1,352(sp)
80033a60:	afa40164 	sw	a0,356(sp)
80033a64:	afa30168 	sw	v1,360(sp)
80033a68:	a3a801b3 	sb	t0,435(sp)
80033a6c:	afa201b4 	sw	v0,436(sp)
80033a70:	afa201bc 	sw	v0,444(sp)
80033a74:	93a901b3 	lbu	t1,435(sp)
80033a78:	8fa601b4 	lw	a2,436(sp)
80033a7c:	8fa501b8 	lw	a1,440(sp)
80033a80:	8fa401bc 	lw	a0,444(sp)
80033a84:	8fa301c0 	lw	v1,448(sp)
80033a88:	afa20470 	sw	v0,1136(sp)
80033a8c:	afa70474 	sw	a3,1140(sp)
80033a90:	a3a9047b 	sb	t1,1147(sp)
80033a94:	afa1047c 	sw	at,1148(sp)
80033a98:	afa60480 	sw	a2,1152(sp)
80033a9c:	afa50484 	sw	a1,1156(sp)
80033aa0:	afa40488 	sw	a0,1160(sp)
80033aa4:	afa3048c 	sw	v1,1164(sp)
80033aa8:	afa201a4 	sw	v0,420(sp)
80033aac:	afa701a0 	sw	a3,416(sp)
80033ab0:	a3a901ac 	sb	t1,428(sp)
80033ab4:	afa101a8 	sw	at,424(sp)
80033ab8:	afa60190 	sw	a2,400(sp)
80033abc:	afa50194 	sw	a1,404(sp)
80033ac0:	afa40198 	sw	a0,408(sp)
80033ac4:	afa3019c 	sw	v1,412(sp)
80033ac8:	a3a801e7 	sb	t0,487(sp)
80033acc:	afa201e8 	sw	v0,488(sp)
80033ad0:	afa201f0 	sw	v0,496(sp)
80033ad4:	93a601e7 	lbu	a2,487(sp)
80033ad8:	8fa501e8 	lw	a1,488(sp)
80033adc:	8fa401ec 	lw	a0,492(sp)
80033ae0:	8fa301f0 	lw	v1,496(sp)
80033ae4:	8fa201f4 	lw	v0,500(sp)
80033ae8:	afa80450 	sw	t0,1104(sp)
80033aec:	afa70454 	sw	a3,1108(sp)
80033af0:	a3a6045b 	sb	a2,1115(sp)
80033af4:	afa1045c 	sw	at,1116(sp)
80033af8:	afa50460 	sw	a1,1120(sp)
80033afc:	afa40464 	sw	a0,1124(sp)
80033b00:	afa30468 	sw	v1,1128(sp)
80033b04:	afa2046c 	sw	v0,1132(sp)
80033b08:	afa801d8 	sw	t0,472(sp)
80033b0c:	afa701d4 	sw	a3,468(sp)
80033b10:	a3a601e0 	sb	a2,480(sp)
80033b14:	afa101dc 	sw	at,476(sp)
80033b18:	afa501c4 	sw	a1,452(sp)
80033b1c:	afa401c8 	sw	a0,456(sp)
80033b20:	afa301cc 	sw	v1,460(sp)
80033b24:	afa201d0 	sw	v0,464(sp)
80033b28:	8fa20144 	lw	v0,324(sp)
80033b2c:	afa200c4 	sw	v0,196(sp)
80033b30:	8fa20140 	lw	v0,320(sp)
80033b34:	afa200c0 	sw	v0,192(sp)
80033b38:	8fa2013c 	lw	v0,316(sp)
80033b3c:	afa200bc 	sw	v0,188(sp)
80033b40:	8fa20138 	lw	v0,312(sp)
80033b44:	afa200b8 	sw	v0,184(sp)
80033b48:	8fa20134 	lw	v0,308(sp)
80033b4c:	afa200b4 	sw	v0,180(sp)
80033b50:	8fa20130 	lw	v0,304(sp)
80033b54:	afa200b0 	sw	v0,176(sp)
80033b58:	8fa2012c 	lw	v0,300(sp)
80033b5c:	afa200ac 	sw	v0,172(sp)
80033b60:	8fa20128 	lw	v0,296(sp)
80033b64:	afa200a8 	sw	v0,168(sp)
80033b68:	8fa20178 	lw	v0,376(sp)
80033b6c:	afa200e4 	sw	v0,228(sp)
80033b70:	8fa20174 	lw	v0,372(sp)
80033b74:	afa200e0 	sw	v0,224(sp)
80033b78:	8fa20170 	lw	v0,368(sp)
80033b7c:	afa200dc 	sw	v0,220(sp)
80033b80:	8fa2016c 	lw	v0,364(sp)
80033b84:	afa200d8 	sw	v0,216(sp)
80033b88:	8fa20168 	lw	v0,360(sp)
80033b8c:	afa200d4 	sw	v0,212(sp)
80033b90:	8fa20164 	lw	v0,356(sp)
80033b94:	afa200d0 	sw	v0,208(sp)
80033b98:	8fa20160 	lw	v0,352(sp)
80033b9c:	afa200cc 	sw	v0,204(sp)
80033ba0:	8fa2015c 	lw	v0,348(sp)
80033ba4:	afa200c8 	sw	v0,200(sp)
80033ba8:	8fa201ac 	lw	v0,428(sp)
80033bac:	afa20104 	sw	v0,260(sp)
80033bb0:	8fa201a8 	lw	v0,424(sp)
80033bb4:	afa20100 	sw	v0,256(sp)
80033bb8:	8fa201a4 	lw	v0,420(sp)
80033bbc:	afa200fc 	sw	v0,252(sp)
80033bc0:	8fa201a0 	lw	v0,416(sp)
80033bc4:	afa200f8 	sw	v0,248(sp)
80033bc8:	8fa2019c 	lw	v0,412(sp)
80033bcc:	afa200f4 	sw	v0,244(sp)
80033bd0:	8fa20198 	lw	v0,408(sp)
80033bd4:	afa200f0 	sw	v0,240(sp)
80033bd8:	8fa20194 	lw	v0,404(sp)
80033bdc:	afa200ec 	sw	v0,236(sp)
80033be0:	8fa20190 	lw	v0,400(sp)
80033be4:	afa200e8 	sw	v0,232(sp)
80033be8:	8fa201e0 	lw	v0,480(sp)
80033bec:	afa20124 	sw	v0,292(sp)
80033bf0:	8fa201dc 	lw	v0,476(sp)
80033bf4:	afa20120 	sw	v0,288(sp)
80033bf8:	8fa201d8 	lw	v0,472(sp)
80033bfc:	afa2011c 	sw	v0,284(sp)
80033c00:	8fa201d4 	lw	v0,468(sp)
80033c04:	afa20118 	sw	v0,280(sp)
80033c08:	8fa201d0 	lw	v0,464(sp)
80033c0c:	afa20114 	sw	v0,276(sp)
80033c10:	8fa201cc 	lw	v0,460(sp)
80033c14:	afa20110 	sw	v0,272(sp)
80033c18:	8fa201c8 	lw	v0,456(sp)
80033c1c:	afa2010c 	sw	v0,268(sp)
80033c20:	8fa201c4 	lw	v0,452(sp)
80033c24:	afa20108 	sw	v0,264(sp)
80033c28:	03a01025 	move	v0,sp
80033c2c:	ac410018 	sw	at,24(v0)
80033c30:	27a300a8 	addiu	v1,sp,168
80033c34:	ac430014 	sw	v1,20(v0)
80033c38:	ac410010 	sw	at,16(v0)
80033c3c:	3c018105 	lui	at,0x8105
80033c40:	24250154 	addiu	a1,at,340
80033c44:	27a4006c 	addiu	a0,sp,108
80033c48:	afa40060 	sw	a0,96(sp)
80033c4c:	24060005 	li	a2,5
80033c50:	27a70084 	addiu	a3,sp,132
80033c54:	0c008334 	jal	80020cd0 <_ZN4core3fmt9Arguments16new_v1_formatted17h95af8d970760495bE>
80033c58:	00000000 	nop
80033c5c:	8fa40060 	lw	a0,96(sp)
80033c60:	0c00b558 	jal	8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>
80033c64:	00000000 	nop
80033c68:	8fa40064 	lw	a0,100(sp)
    );
    let tmp_tf = VirtAddr::from(trapframe as *const trapframe::Trapframe as usize)
80033c6c:	0c00af03 	jal	8002bc0c <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h3e418a96ab495ffdE>
80033c70:	00000000 	nop
80033c74:	afa20388 	sw	v0,904(sp)
80033c78:	8fa10388 	lw	at,904(sp)
80033c7c:	afa10290 	sw	at,656(sp)
80033c80:	27a10290 	addiu	at,sp,656
80033c84:	afa10538 	sw	at,1336(sp)
        assert!(self.raw % align_of::<T>() == 0);
80033c88:	8fa10290 	lw	at,656(sp)
80033c8c:	afa10068 	sw	at,104(sp)
80033c90:	24010000 	li	at,0
80033c94:	14000009 	bnez	zero,80033cbc <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x3f8>
80033c98:	00000000 	nop
80033c9c:	0800cf29 	j	80033ca4 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x3e0>
80033ca0:	00000000 	nop
80033ca4:	8fa10068 	lw	at,104(sp)
80033ca8:	30210003 	andi	at,at,0x3
80033cac:	1020000e 	beqz	at,80033ce8 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x424>
80033cb0:	00000000 	nop
80033cb4:	0800cf33 	j	80033ccc <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x408>
80033cb8:	00000000 	nop
80033cbc:	3c018105 	lui	at,0x8105
80033cc0:	2424f2d0 	addiu	a0,at,-3376
80033cc4:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80033cc8:	00000000 	nop
80033ccc:	3c018105 	lui	at,0x8105
80033cd0:	2424f28c 	addiu	a0,at,-3444
80033cd4:	3c018105 	lui	at,0x8105
80033cd8:	2426f2e0 	addiu	a2,at,-3360
80033cdc:	24050031 	li	a1,49
80033ce0:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80033ce4:	00000000 	nop
        unsafe { ptr::read(self.raw as *const T) }
80033ce8:	8fa50290 	lw	a1,656(sp)
80033cec:	27a401f8 	addiu	a0,sp,504
80033cf0:	0c0089e1 	jal	80022784 <_ZN4core3ptr4read17h0b040c49a6041767E>
80033cf4:	00000000 	nop
        .read::<trapframe::Trapframe>();
    println!("the tmp_tf is copied");
80033cf8:	3c018105 	lui	at,0x8105
80033cfc:	24250194 	addiu	a1,at,404
80033d00:	27a40294 	addiu	a0,sp,660
80033d04:	afa4004c 	sw	a0,76(sp)
80033d08:	24060001 	li	a2,1
80033d0c:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80033d10:	00000000 	nop
80033d14:	8fa4004c 	lw	a0,76(sp)
80033d18:	0c00b558 	jal	8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>
80033d1c:	00000000 	nop
80033d20:	8fa10064 	lw	at,100(sp)
    if trapframe.regs[29] < USTACKTOP.raw || trapframe.regs[29] >= UXSTACKTOP.raw {
80033d24:	8c210074 	lw	at,116(at)
80033d28:	3c028105 	lui	v0,0x8105
80033d2c:	8c42f15c 	lw	v0,-3748(v0)
80033d30:	afa202ac 	sw	v0,684(sp)
80033d34:	8fa202ac 	lw	v0,684(sp)
80033d38:	0022082b 	sltu	at,at,v0
80033d3c:	1420000e 	bnez	at,80033d78 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x4b4>
80033d40:	00000000 	nop
80033d44:	0800cf53 	j	80033d4c <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x488>
80033d48:	00000000 	nop
80033d4c:	8fa10064 	lw	at,100(sp)
80033d50:	8c210074 	lw	at,116(at)
80033d54:	3c028105 	lui	v0,0x8105
80033d58:	8c42f164 	lw	v0,-3740(v0)
80033d5c:	afa202b0 	sw	v0,688(sp)
80033d60:	8fa202b0 	lw	v0,688(sp)
80033d64:	0022082b 	sltu	at,at,v0
80033d68:	1420000b 	bnez	at,80033d98 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x4d4>
80033d6c:	00000000 	nop
80033d70:	0800cf5e 	j	80033d78 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x4b4>
80033d74:	00000000 	nop
        trapframe.regs[29] = UXSTACKTOP.raw;
80033d78:	8fa20064 	lw	v0,100(sp)
80033d7c:	3c018105 	lui	at,0x8105
80033d80:	8c21f164 	lw	at,-3740(at)
80033d84:	afa102b4 	sw	at,692(sp)
80033d88:	8fa102b4 	lw	at,692(sp)
80033d8c:	ac410074 	sw	at,116(v0)
    if trapframe.regs[29] < USTACKTOP.raw || trapframe.regs[29] >= UXSTACKTOP.raw {
80033d90:	0800cf66 	j	80033d98 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x4d4>
80033d94:	00000000 	nop
    }
    println!("the tf is copied,the trapframe's reg[29] is {:#x}",trapframe.regs[29]);
80033d98:	8fa10064 	lw	at,100(sp)
80033d9c:	24220074 	addiu	v0,at,116
80033da0:	afa204d0 	sw	v0,1232(sp)
80033da4:	afa2052c 	sw	v0,1324(sp)
80033da8:	3c018005 	lui	at,0x8005
80033dac:	24219698 	addiu	at,at,-26984
80033db0:	afa10530 	sw	at,1328(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80033db4:	afa20524 	sw	v0,1316(sp)
80033db8:	afa10528 	sw	at,1320(sp)
    }
80033dbc:	8fa20524 	lw	v0,1316(sp)
80033dc0:	8fa10528 	lw	at,1320(sp)
80033dc4:	afa202d0 	sw	v0,720(sp)
80033dc8:	afa102d4 	sw	at,724(sp)
80033dcc:	24010003 	li	at,3
80033dd0:	a3a1031b 	sb	at,795(sp)
80033dd4:	24060002 	li	a2,2
80033dd8:	afa6031c 	sw	a2,796(sp)
80033ddc:	afa60324 	sw	a2,804(sp)
80033de0:	93a7031b 	lbu	a3,795(sp)
80033de4:	8fa4031c 	lw	a0,796(sp)
80033de8:	8fa30320 	lw	v1,800(sp)
80033dec:	8fa20324 	lw	v0,804(sp)
80033df0:	8fa10328 	lw	at,808(sp)
80033df4:	afa00430 	sw	zero,1072(sp)
80033df8:	24080020 	li	t0,32
80033dfc:	afa80434 	sw	t0,1076(sp)
80033e00:	a3a7043b 	sb	a3,1083(sp)
80033e04:	24050004 	li	a1,4
80033e08:	afa5043c 	sw	a1,1084(sp)
80033e0c:	afa40440 	sw	a0,1088(sp)
80033e10:	afa30444 	sw	v1,1092(sp)
80033e14:	afa20448 	sw	v0,1096(sp)
80033e18:	afa1044c 	sw	at,1100(sp)
        Self { position, fill, align, flags, precision, width }
80033e1c:	afa0030c 	sw	zero,780(sp)
80033e20:	afa80308 	sw	t0,776(sp)
80033e24:	a3a70314 	sb	a3,788(sp)
80033e28:	afa50310 	sw	a1,784(sp)
80033e2c:	afa402f8 	sw	a0,760(sp)
80033e30:	afa302fc 	sw	v1,764(sp)
80033e34:	afa20300 	sw	v0,768(sp)
80033e38:	afa10304 	sw	at,772(sp)
80033e3c:	8fa10314 	lw	at,788(sp)
80033e40:	afa102f4 	sw	at,756(sp)
80033e44:	8fa10310 	lw	at,784(sp)
80033e48:	afa102f0 	sw	at,752(sp)
80033e4c:	8fa1030c 	lw	at,780(sp)
80033e50:	afa102ec 	sw	at,748(sp)
80033e54:	8fa10308 	lw	at,776(sp)
80033e58:	afa102e8 	sw	at,744(sp)
80033e5c:	8fa10304 	lw	at,772(sp)
80033e60:	afa102e4 	sw	at,740(sp)
80033e64:	8fa10300 	lw	at,768(sp)
80033e68:	afa102e0 	sw	at,736(sp)
80033e6c:	8fa102fc 	lw	at,764(sp)
80033e70:	afa102dc 	sw	at,732(sp)
80033e74:	8fa102f8 	lw	at,760(sp)
80033e78:	afa102d8 	sw	at,728(sp)
80033e7c:	03a01025 	move	v0,sp
80033e80:	24010001 	li	at,1
80033e84:	ac410018 	sw	at,24(v0)
80033e88:	27a302d8 	addiu	v1,sp,728
80033e8c:	ac430014 	sw	v1,20(v0)
80033e90:	ac410010 	sw	at,16(v0)
80033e94:	3c018105 	lui	at,0x8105
80033e98:	242501c8 	addiu	a1,at,456
80033e9c:	27a402b8 	addiu	a0,sp,696
80033ea0:	afa40044 	sw	a0,68(sp)
80033ea4:	27a702d0 	addiu	a3,sp,720
80033ea8:	0c008334 	jal	80020cd0 <_ZN4core3fmt9Arguments16new_v1_formatted17h95af8d970760495bE>
80033eac:	00000000 	nop
80033eb0:	8fa40044 	lw	a0,68(sp)
80033eb4:	0c00b558 	jal	8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>
80033eb8:	00000000 	nop
80033ebc:	8fa10064 	lw	at,100(sp)
    trapframe.regs[29] -= size_of::<trapframe::Trapframe>();
80033ec0:	8c210074 	lw	at,116(at)
80033ec4:	2422ff68 	addiu	v0,at,-152
80033ec8:	afa20048 	sw	v0,72(sp)
80033ecc:	2c210098 	sltiu	at,at,152
80033ed0:	1420004d 	bnez	at,80034008 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x744>
80033ed4:	00000000 	nop
80033ed8:	0800cfb8 	j	80033ee0 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x61c>
80033edc:	00000000 	nop
80033ee0:	8fa10064 	lw	at,100(sp)
80033ee4:	8fa20048 	lw	v0,72(sp)
80033ee8:	ac220074 	sw	v0,116(at)

    VirtAddr::from(trapframe.regs[29]).write(tmp_tf);
80033eec:	8c240074 	lw	a0,116(at)
80033ef0:	0c00af03 	jal	8002bc0c <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h3e418a96ab495ffdE>
80033ef4:	00000000 	nop
80033ef8:	afa2038c 	sw	v0,908(sp)
80033efc:	8fa1038c 	lw	at,908(sp)
80033f00:	afa1032c 	sw	at,812(sp)
80033f04:	27a40390 	addiu	a0,sp,912
80033f08:	27a501f8 	addiu	a1,sp,504
80033f0c:	24060098 	li	a2,152
80033f10:	0c00db4c 	jal	80036d30 <memcpy>
80033f14:	00000000 	nop
80033f18:	27a1032c 	addiu	at,sp,812
80033f1c:	afa10534 	sw	at,1332(sp)
            assert!(self.raw % align_of::<T>() == 0);
80033f20:	8fa1032c 	lw	at,812(sp)
80033f24:	afa10040 	sw	at,64(sp)
80033f28:	24010000 	li	at,0
80033f2c:	14000009 	bnez	zero,80033f54 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x690>
80033f30:	00000000 	nop
80033f34:	0800cfcf 	j	80033f3c <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x678>
80033f38:	00000000 	nop
80033f3c:	8fa10040 	lw	at,64(sp)
80033f40:	30210003 	andi	at,at,0x3
80033f44:	1020000e 	beqz	at,80033f80 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x6bc>
80033f48:	00000000 	nop
80033f4c:	0800cfd9 	j	80033f64 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x6a0>
80033f50:	00000000 	nop
80033f54:	3c018105 	lui	at,0x8105
80033f58:	2424f27c 	addiu	a0,at,-3460
80033f5c:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80033f60:	00000000 	nop
80033f64:	3c018105 	lui	at,0x8105
80033f68:	2424f28c 	addiu	a0,at,-3444
80033f6c:	3c018105 	lui	at,0x8105
80033f70:	2426f2c0 	addiu	a2,at,-3392
80033f74:	24050031 	li	a1,49
80033f78:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80033f7c:	00000000 	nop
            ptr::write(self.raw as *mut T, src);
80033f80:	8fa4032c 	lw	a0,812(sp)
80033f84:	27a50390 	addiu	a1,sp,912
80033f88:	0c008b46 	jal	80022d18 <_ZN4core3ptr5write17hc5f7b59e715cbb46E>
80033f8c:	00000000 	nop
    println!("the original tf is copied");
80033f90:	3c018105 	lui	at,0x8105
80033f94:	24250218 	addiu	a1,at,536
80033f98:	27a40330 	addiu	a0,sp,816
80033f9c:	afa4003c 	sw	a0,60(sp)
80033fa0:	24060001 	li	a2,1
80033fa4:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80033fa8:	00000000 	nop
80033fac:	8fa4003c 	lw	a0,60(sp)
80033fb0:	0c00b558 	jal	8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>
80033fb4:	00000000 	nop
    let curenv = {
        match CUR_ENV.lock().as_mut() {
80033fb8:	3c018105 	lui	at,0x8105
80033fbc:	24240960 	addiu	a0,at,2400
80033fc0:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
80033fc4:	00000000 	nop
80033fc8:	00402025 	move	a0,v0
80033fcc:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
80033fd0:	00000000 	nop
80033fd4:	afa2034c 	sw	v0,844(sp)
80033fd8:	27a4034c 	addiu	a0,sp,844
80033fdc:	0c00acf5 	jal	8002b3d4 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h566805ffd1d6c0b4E>
80033fe0:	00000000 	nop
80033fe4:	00402025 	move	a0,v0
80033fe8:	0c00968e 	jal	80025a38 <_ZN4core6option15Option$LT$T$GT$6as_mut17h4a122ed82a8f90e7E>
80033fec:	00000000 	nop
80033ff0:	afa20348 	sw	v0,840(sp)
80033ff4:	8fa10348 	lw	at,840(sp)
80033ff8:	10200007 	beqz	at,80034018 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x754>
80033ffc:	00000000 	nop
80034000:	0800d012 	j	80034048 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x784>
80034004:	00000000 	nop
    trapframe.regs[29] -= size_of::<trapframe::Trapframe>();
80034008:	3c018105 	lui	at,0x8105
8003400c:	242401ec 	addiu	a0,at,492
80034010:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80034014:	00000000 	nop
            Some(idx) => &ENV_LIST.lock()[*idx],
            None => panic!("do_tlb_mod: no env to run"),
80034018:	3c018105 	lui	at,0x8105
8003401c:	2425023c 	addiu	a1,at,572
80034020:	27a40354 	addiu	a0,sp,852
80034024:	afa40038 	sw	a0,56(sp)
80034028:	24060001 	li	a2,1
8003402c:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
80034030:	00000000 	nop
80034034:	8fa40038 	lw	a0,56(sp)
80034038:	3c018105 	lui	at,0x8105
8003403c:	24250244 	addiu	a1,at,580
80034040:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80034044:	00000000 	nop
            Some(idx) => &ENV_LIST.lock()[*idx],
80034048:	8fa10348 	lw	at,840(sp)
8003404c:	afa1002c 	sw	at,44(sp)
80034050:	afa10428 	sw	at,1064(sp)
80034054:	3c018105 	lui	at,0x8105
80034058:	24240960 	addiu	a0,at,2400
8003405c:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
80034060:	00000000 	nop
80034064:	00402025 	move	a0,v0
80034068:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
8003406c:	00000000 	nop
80034070:	afa20350 	sw	v0,848(sp)
80034074:	27a40350 	addiu	a0,sp,848
80034078:	0c00ac79 	jal	8002b1e4 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h990db7d0b83dd2d1E>
8003407c:	00000000 	nop
80034080:	8fa1002c 	lw	at,44(sp)
80034084:	00402025 	move	a0,v0
80034088:	8c250000 	lw	a1,0(at)
8003408c:	3c018105 	lui	at,0x8105
80034090:	24260254 	addiu	a2,at,596
80034094:	0c00accc 	jal	8002b330 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hba386fd63984b7c3E>
80034098:	00000000 	nop
8003409c:	afa20034 	sw	v0,52(sp)
800340a0:	00400825 	move	at,v0
800340a4:	afa10030 	sw	at,48(sp)
800340a8:	afa2042c 	sw	v0,1068(sp)
800340ac:	27a4034c 	addiu	a0,sp,844
        }
    };
800340b0:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
800340b4:	00000000 	nop
800340b8:	8fa20034 	lw	v0,52(sp)
    if curenv.env_user_tlb_mod_entry == 0 {
800340bc:	8c4100d4 	lw	at,212(v0)
800340c0:	1420000f 	bnez	at,80034100 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x83c>
800340c4:	00000000 	nop
800340c8:	0800d034 	j	800340d0 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x80c>
800340cc:	00000000 	nop
        panic!("TLB Mod but no user handler registered.");
800340d0:	3c018105 	lui	at,0x8105
800340d4:	2425028c 	addiu	a1,at,652
800340d8:	27a4036c 	addiu	a0,sp,876
800340dc:	afa40028 	sw	a0,40(sp)
800340e0:	24060001 	li	a2,1
800340e4:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
800340e8:	00000000 	nop
800340ec:	8fa40028 	lw	a0,40(sp)
800340f0:	3c018105 	lui	at,0x8105
800340f4:	24250294 	addiu	a1,at,660
800340f8:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800340fc:	00000000 	nop
    }
    // println!("tf is {},the param tf is {:#x}",tmp_tf,trapframe as *const trapframe::Trapframe as usize);
    trapframe.regs[4] = trapframe.regs[29];
80034100:	8fa10064 	lw	at,100(sp)
80034104:	8c220074 	lw	v0,116(at)
80034108:	ac220010 	sw	v0,16(at)
    trapframe.regs[29] -= size_of::<usize>();
8003410c:	8c210074 	lw	at,116(at)
80034110:	2422fffc 	addiu	v0,at,-4
80034114:	afa20024 	sw	v0,36(sp)
80034118:	2c210004 	sltiu	at,at,4
8003411c:	14200010 	bnez	at,80034160 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x89c>
80034120:	00000000 	nop
80034124:	0800d04b 	j	8003412c <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE+0x868>
80034128:	00000000 	nop
8003412c:	8fa20064 	lw	v0,100(sp)
80034130:	8fa10030 	lw	at,48(sp)
80034134:	8fa30024 	lw	v1,36(sp)
80034138:	ac430074 	sw	v1,116(v0)
    trapframe.epc = curenv.env_user_tlb_mod_entry;
8003413c:	8c2100d4 	lw	at,212(at)
80034140:	ac410094 	sw	at,148(v0)
80034144:	27a40350 	addiu	a0,sp,848
}
80034148:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
8003414c:	00000000 	nop
80034150:	8fbf053c 	lw	ra,1340(sp)
80034154:	27bd0540 	addiu	sp,sp,1344
80034158:	03e00008 	jr	ra
8003415c:	00000000 	nop
    trapframe.regs[29] -= size_of::<usize>();
80034160:	3c018105 	lui	at,0x8105
80034164:	242402a4 	addiu	a0,at,676
80034168:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003416c:	00000000 	nop

80034170 <_ZN8mos_65024trap3tlb7do_tlbs17h764dab62a98e2513E>:

pub(super) fn do_tlbs(trapframe: &mut trapframe::Trapframe) {
80034170:	27bdffe8 	addiu	sp,sp,-24
80034174:	afbf0014 	sw	ra,20(sp)
80034178:	afa40010 	sw	a0,16(sp)
    do_tlb_refill(trapframe);
8003417c:	0c00d194 	jal	80034650 <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE>
80034180:	00000000 	nop
}
80034184:	8fbf0014 	lw	ra,20(sp)
80034188:	27bd0018 	addiu	sp,sp,24
8003418c:	03e00008 	jr	ra
80034190:	00000000 	nop

80034194 <_ZN8mos_65024trap3tlb7do_tlbl17h5302882b139de5caE>:

pub(super) fn do_tlbl(trapframe: &mut trapframe::Trapframe) {
80034194:	27bdffe8 	addiu	sp,sp,-24
80034198:	afbf0014 	sw	ra,20(sp)
8003419c:	afa40010 	sw	a0,16(sp)
    do_tlb_refill(trapframe);
800341a0:	0c00d194 	jal	80034650 <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE>
800341a4:	00000000 	nop
}
800341a8:	8fbf0014 	lw	ra,20(sp)
800341ac:	27bd0018 	addiu	sp,sp,24
800341b0:	03e00008 	jr	ra
800341b4:	00000000 	nop

800341b8 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E>:

fn passive_alloc(env: &mut Env, va: VirtAddr) -> Result<(), &'static str> {
800341b8:	27bdfeb0 	addiu	sp,sp,-336
800341bc:	afbf014c 	sw	ra,332(sp)
800341c0:	afa40030 	sw	a0,48(sp)
800341c4:	afa50038 	sw	a1,56(sp)
800341c8:	8fa10038 	lw	at,56(sp)
800341cc:	afa10034 	sw	at,52(sp)
800341d0:	afa400f4 	sw	a0,244(sp)
    if va < UTEMP {
800341d4:	3c018105 	lui	at,0x8105
800341d8:	2425f180 	addiu	a1,at,-3712
800341dc:	27a40034 	addiu	a0,sp,52
800341e0:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
800341e4:	00000000 	nop
800341e8:	1440000c 	bnez	v0,8003421c <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x64>
800341ec:	00000000 	nop
800341f0:	0800d07e 	j	800341f8 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x40>
800341f4:	00000000 	nop
        return Err("passive_alloc: va < UTEMP");
    }
    if va >= USTACKTOP && va < USTACKTOP.add(2 * PTMAP) {
800341f8:	3c018105 	lui	at,0x8105
800341fc:	2425f15c 	addiu	a1,at,-3748
80034200:	27a40034 	addiu	a0,sp,52
80034204:	0c00823d 	jal	800208f4 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E>
80034208:	00000000 	nop
8003420c:	14400013 	bnez	v0,8003425c <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0xa4>
80034210:	00000000 	nop
80034214:	0800d08e 	j	80034238 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x80>
80034218:	00000000 	nop
        return Err("passive_alloc: va < UTEMP");
8003421c:	3c018105 	lui	at,0x8105
80034220:	242103a4 	addiu	at,at,932
80034224:	afa1003c 	sw	at,60(sp)
80034228:	24010019 	li	at,25
8003422c:	afa10040 	sw	at,64(sp)
80034230:	0800d18e 	j	80034638 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x480>
80034234:	00000000 	nop
        return Err("passive_alloc: va >= USTACKTOP && va < UXSTACKTOP");
    }
    if va >= UENVS && va < UPAGES {
80034238:	3c018105 	lui	at,0x8105
8003423c:	2425f164 	addiu	a1,at,-3740
80034240:	27a40034 	addiu	a0,sp,52
80034244:	0c00823d 	jal	800208f4 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E>
80034248:	00000000 	nop
8003424c:	14400032 	bnez	v0,80034318 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x160>
80034250:	00000000 	nop
80034254:	0800d0bd 	j	800342f4 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x13c>
80034258:	00000000 	nop
8003425c:	24012000 	li	at,8192
80034260:	afa1002c 	sw	at,44(sp)
80034264:	24010000 	li	at,0
    if va >= USTACKTOP && va < USTACKTOP.add(2 * PTMAP) {
80034268:	14000017 	bnez	zero,800342c8 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x110>
8003426c:	00000000 	nop
80034270:	0800d09e 	j	80034278 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0xc0>
80034274:	00000000 	nop
80034278:	8fa5002c 	lw	a1,44(sp)
8003427c:	3c018105 	lui	at,0x8105
80034280:	8c21f15c 	lw	at,-3748(at)
80034284:	afa100f8 	sw	at,248(sp)
80034288:	8fa100f8 	lw	at,248(sp)
8003428c:	afa100fc 	sw	at,252(sp)
80034290:	8fa400fc 	lw	a0,252(sp)
80034294:	0c00aec4 	jal	8002bb10 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17he2a65ed6f05af776E>
80034298:	00000000 	nop
8003429c:	afa20100 	sw	v0,256(sp)
800342a0:	8fa10100 	lw	at,256(sp)
800342a4:	afa10044 	sw	at,68(sp)
800342a8:	27a40034 	addiu	a0,sp,52
800342ac:	27a50044 	addiu	a1,sp,68
800342b0:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
800342b4:	00000000 	nop
800342b8:	14400007 	bnez	v0,800342d8 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x120>
800342bc:	00000000 	nop
800342c0:	0800d08e 	j	80034238 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x80>
800342c4:	00000000 	nop
800342c8:	3c018105 	lui	at,0x8105
800342cc:	242402b4 	addiu	a0,at,692
800342d0:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
800342d4:	00000000 	nop
        return Err("passive_alloc: va >= USTACKTOP && va < UXSTACKTOP");
800342d8:	3c018105 	lui	at,0x8105
800342dc:	24210373 	addiu	at,at,883
800342e0:	afa1003c 	sw	at,60(sp)
800342e4:	24010031 	li	at,49
800342e8:	afa10040 	sw	at,64(sp)
800342ec:	0800d18e 	j	80034638 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x480>
800342f0:	00000000 	nop
        return Err("passive_alloc: va >= UENVS && va < UPAGES");
    }
    if va >= UPAGES && va < UVPT {
800342f4:	3c018105 	lui	at,0x8105
800342f8:	2425f168 	addiu	a1,at,-3736
800342fc:	27a40034 	addiu	a0,sp,52
80034300:	0c00823d 	jal	800208f4 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E>
80034304:	00000000 	nop
80034308:	1440001c 	bnez	v0,8003437c <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x1c4>
8003430c:	00000000 	nop
80034310:	0800d0d6 	j	80034358 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x1a0>
80034314:	00000000 	nop
    if va >= UENVS && va < UPAGES {
80034318:	3c018105 	lui	at,0x8105
8003431c:	2425f168 	addiu	a1,at,-3736
80034320:	27a40034 	addiu	a0,sp,52
80034324:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
80034328:	00000000 	nop
8003432c:	1040fff1 	beqz	v0,800342f4 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x13c>
80034330:	00000000 	nop
80034334:	0800d0cf 	j	8003433c <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x184>
80034338:	00000000 	nop
        return Err("passive_alloc: va >= UENVS && va < UPAGES");
8003433c:	3c018105 	lui	at,0x8105
80034340:	2421034a 	addiu	at,at,842
80034344:	afa1003c 	sw	at,60(sp)
80034348:	24010029 	li	at,41
8003434c:	afa10040 	sw	at,64(sp)
80034350:	0800d18e 	j	80034638 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x480>
80034354:	00000000 	nop
        return Err("passive_alloc: va >= UPAGES && va < UVPT");
    }
    if va >= KSEG0 {
80034358:	3c018105 	lui	at,0x8105
8003435c:	2425f154 	addiu	a1,at,-3756
80034360:	27a40034 	addiu	a0,sp,52
80034364:	0c00823d 	jal	800208f4 <_ZN4core3cmp10PartialOrd2ge17h934201394ea15395E>
80034368:	00000000 	nop
8003436c:	14400028 	bnez	v0,80034410 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x258>
80034370:	00000000 	nop
80034374:	0800d0ef 	j	800343bc <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x204>
80034378:	00000000 	nop
    if va >= UPAGES && va < UVPT {
8003437c:	3c018105 	lui	at,0x8105
80034380:	2425f16c 	addiu	a1,at,-3732
80034384:	27a40034 	addiu	a0,sp,52
80034388:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
8003438c:	00000000 	nop
80034390:	1040fff1 	beqz	v0,80034358 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x1a0>
80034394:	00000000 	nop
80034398:	0800d0e8 	j	800343a0 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x1e8>
8003439c:	00000000 	nop
        return Err("passive_alloc: va >= UPAGES && va < UVPT");
800343a0:	3c018105 	lui	at,0x8105
800343a4:	24210322 	addiu	at,at,802
800343a8:	afa1003c 	sw	at,60(sp)
800343ac:	24010028 	li	at,40
800343b0:	afa10040 	sw	at,64(sp)
800343b4:	0800d18e 	j	80034638 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x480>
800343b8:	00000000 	nop
800343bc:	27a40064 	addiu	a0,sp,100
800343c0:	afa40024 	sw	a0,36(sp)
        return Err("passive_alloc: va >= KSEG0");
    }
    let (_, page_pa) = page_alloc().ok_or("No more pages")?;
800343c4:	0c00b018 	jal	8002c060 <_ZN8mos_65022mm4page10page_alloc17ha4107379511cc364E>
800343c8:	00000000 	nop
800343cc:	8fa50024 	lw	a1,36(sp)
800343d0:	3c018105 	lui	at,0x8105
800343d4:	2426f580 	addiu	a2,at,-2688
800343d8:	27a40058 	addiu	a0,sp,88
800343dc:	afa40028 	sw	a0,40(sp)
800343e0:	2407000d 	li	a3,13
800343e4:	0c009659 	jal	80025964 <_ZN4core6option15Option$LT$T$GT$5ok_or17h20655cc0ff61952eE>
800343e8:	00000000 	nop
800343ec:	8fa50028 	lw	a1,40(sp)
800343f0:	27a4004c 	addiu	a0,sp,76
800343f4:	0c00ac87 	jal	8002b21c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hee1c49d3edbc34e7E>
800343f8:	00000000 	nop
800343fc:	8fa1004c 	lw	at,76(sp)
80034400:	1020000a 	beqz	at,8003442c <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x274>
80034404:	00000000 	nop
80034408:	0800d11d 	j	80034474 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x2bc>
8003440c:	00000000 	nop
        return Err("passive_alloc: va >= KSEG0");
80034410:	3c018105 	lui	at,0x8105
80034414:	24210308 	addiu	at,at,776
80034418:	afa1003c 	sw	at,60(sp)
8003441c:	2401001a 	li	at,26
80034420:	afa10040 	sw	at,64(sp)
80034424:	0800d18e 	j	80034638 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x480>
80034428:	00000000 	nop
    let (_, page_pa) = page_alloc().ok_or("No more pages")?;
8003442c:	8fa10054 	lw	at,84(sp)
80034430:	afa10074 	sw	at,116(sp)
80034434:	8fa10050 	lw	at,80(sp)
80034438:	afa10070 	sw	at,112(sp)
8003443c:	8fa10074 	lw	at,116(sp)
80034440:	afa10048 	sw	at,72(sp)
    let mut perm = Permssion::empty();
80034444:	0c00da4d 	jal	80036934 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$5empty17h6c50405d2ff863beE>
80034448:	00000000 	nop
8003444c:	afa20078 	sw	v0,120(sp)
    if va < UTOP {
80034450:	3c018105 	lui	at,0x8105
80034454:	2425f164 	addiu	a1,at,-3740
80034458:	27a40034 	addiu	a0,sp,52
8003445c:	0c0082c7 	jal	80020b1c <_ZN4core3cmp10PartialOrd2lt17h5778ce1ec120167bE>
80034460:	00000000 	nop
80034464:	14400028 	bnez	v0,80034508 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x350>
80034468:	00000000 	nop
8003446c:	0800d129 	j	800344a4 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x2ec>
80034470:	00000000 	nop
    let (_, page_pa) = page_alloc().ok_or("No more pages")?;
80034474:	8fa40050 	lw	a0,80(sp)
80034478:	8fa50054 	lw	a1,84(sp)
8003447c:	afa40110 	sw	a0,272(sp)
80034480:	afa50114 	sw	a1,276(sp)
80034484:	3c018105 	lui	at,0x8105
80034488:	242602f8 	addiu	a2,at,760
8003448c:	0c008082 	jal	80020208 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h12656e8f5824d73cE>
80034490:	00000000 	nop
80034494:	afa2003c 	sw	v0,60(sp)
80034498:	afa30040 	sw	v1,64(sp)
8003449c:	0800d18e 	j	80034638 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x480>
800344a0:	00000000 	nop
        println!("passive_alloc: va < UTOP,the va is {:#x}",va.raw);
        perm = Permssion::PTE_D;
    }
    env.env_pgdir
800344a4:	8fa10030 	lw	at,48(sp)
800344a8:	8c2400b0 	lw	a0,176(at)
        .map_va_to_pa(va, page_pa, env.env_asid, 1, &perm, false)
800344ac:	8fa20034 	lw	v0,52(sp)
800344b0:	afa200f0 	sw	v0,240(sp)
800344b4:	8c2700a4 	lw	a3,164(at)
    env.env_pgdir
800344b8:	8fa100f0 	lw	at,240(sp)
800344bc:	afa10104 	sw	at,260(sp)
800344c0:	8fa50104 	lw	a1,260(sp)
800344c4:	8fa10048 	lw	at,72(sp)
800344c8:	afa10108 	sw	at,264(sp)
800344cc:	8fa10108 	lw	at,264(sp)
800344d0:	afa1010c 	sw	at,268(sp)
800344d4:	8fa6010c 	lw	a2,268(sp)
800344d8:	03a00825 	move	at,sp
800344dc:	27a20078 	addiu	v0,sp,120
800344e0:	ac220014 	sw	v0,20(at)
800344e4:	24020001 	li	v0,1
800344e8:	ac220010 	sw	v0,16(at)
800344ec:	ac200018 	sw	zero,24(at)
800344f0:	0c00b1de 	jal	8002c778 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h1f013c783864eca7E>
800344f4:	00000000 	nop
800344f8:	afa2003c 	sw	v0,60(sp)
800344fc:	afa30040 	sw	v1,64(sp)
80034500:	0800d18e 	j	80034638 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x480>
80034504:	00000000 	nop
80034508:	27a20034 	addiu	v0,sp,52
8003450c:	afa20138 	sw	v0,312(sp)
80034510:	afa20144 	sw	v0,324(sp)
80034514:	3c018005 	lui	at,0x8005
80034518:	24219698 	addiu	at,at,-26984
8003451c:	afa10148 	sw	at,328(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80034520:	afa2013c 	sw	v0,316(sp)
80034524:	afa10140 	sw	at,320(sp)
    }
80034528:	8fa2013c 	lw	v0,316(sp)
8003452c:	8fa10140 	lw	at,320(sp)
        println!("passive_alloc: va < UTOP,the va is {:#x}",va.raw);
80034530:	afa20094 	sw	v0,148(sp)
80034534:	afa10098 	sw	at,152(sp)
80034538:	24010003 	li	at,3
8003453c:	a3a100df 	sb	at,223(sp)
80034540:	24060002 	li	a2,2
80034544:	afa600e0 	sw	a2,224(sp)
80034548:	afa600e8 	sw	a2,232(sp)
8003454c:	93a700df 	lbu	a3,223(sp)
80034550:	8fa400e0 	lw	a0,224(sp)
80034554:	8fa300e4 	lw	v1,228(sp)
80034558:	8fa200e8 	lw	v0,232(sp)
8003455c:	8fa100ec 	lw	at,236(sp)
80034560:	afa00118 	sw	zero,280(sp)
80034564:	24080020 	li	t0,32
80034568:	afa8011c 	sw	t0,284(sp)
8003456c:	a3a70123 	sb	a3,291(sp)
80034570:	24050004 	li	a1,4
80034574:	afa50124 	sw	a1,292(sp)
80034578:	afa40128 	sw	a0,296(sp)
8003457c:	afa3012c 	sw	v1,300(sp)
80034580:	afa20130 	sw	v0,304(sp)
80034584:	afa10134 	sw	at,308(sp)
        Self { position, fill, align, flags, precision, width }
80034588:	afa000d0 	sw	zero,208(sp)
8003458c:	afa800cc 	sw	t0,204(sp)
80034590:	a3a700d8 	sb	a3,216(sp)
80034594:	afa500d4 	sw	a1,212(sp)
80034598:	afa400bc 	sw	a0,188(sp)
8003459c:	afa300c0 	sw	v1,192(sp)
800345a0:	afa200c4 	sw	v0,196(sp)
800345a4:	afa100c8 	sw	at,200(sp)
800345a8:	8fa100d8 	lw	at,216(sp)
800345ac:	afa100b8 	sw	at,184(sp)
800345b0:	8fa100d4 	lw	at,212(sp)
800345b4:	afa100b4 	sw	at,180(sp)
800345b8:	8fa100d0 	lw	at,208(sp)
800345bc:	afa100b0 	sw	at,176(sp)
800345c0:	8fa100cc 	lw	at,204(sp)
800345c4:	afa100ac 	sw	at,172(sp)
800345c8:	8fa100c8 	lw	at,200(sp)
800345cc:	afa100a8 	sw	at,168(sp)
800345d0:	8fa100c4 	lw	at,196(sp)
800345d4:	afa100a4 	sw	at,164(sp)
800345d8:	8fa100c0 	lw	at,192(sp)
800345dc:	afa100a0 	sw	at,160(sp)
800345e0:	8fa100bc 	lw	at,188(sp)
800345e4:	afa1009c 	sw	at,156(sp)
800345e8:	03a01025 	move	v0,sp
800345ec:	24010001 	li	at,1
800345f0:	ac410018 	sw	at,24(v0)
800345f4:	27a3009c 	addiu	v1,sp,156
800345f8:	ac430014 	sw	v1,20(v0)
800345fc:	ac410010 	sw	at,16(v0)
80034600:	3c018105 	lui	at,0x8105
80034604:	242502e8 	addiu	a1,at,744
80034608:	27a4007c 	addiu	a0,sp,124
8003460c:	afa40020 	sw	a0,32(sp)
80034610:	27a70094 	addiu	a3,sp,148
80034614:	0c008334 	jal	80020cd0 <_ZN4core3fmt9Arguments16new_v1_formatted17h95af8d970760495bE>
80034618:	00000000 	nop
8003461c:	8fa40020 	lw	a0,32(sp)
80034620:	0c00b558 	jal	8002d560 <_ZN8mos_65025print6_print17h8848bf6d923e74f1E>
80034624:	00000000 	nop
80034628:	24010100 	li	at,256
        perm = Permssion::PTE_D;
8003462c:	afa10078 	sw	at,120(sp)
    if va < UTOP {
80034630:	0800d129 	j	800344a4 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E+0x2ec>
80034634:	00000000 	nop
}
80034638:	8fa2003c 	lw	v0,60(sp)
8003463c:	8fa30040 	lw	v1,64(sp)
80034640:	8fbf014c 	lw	ra,332(sp)
80034644:	27bd0150 	addiu	sp,sp,336
80034648:	03e00008 	jr	ra
8003464c:	00000000 	nop

80034650 <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE>:

fn do_tlb_refill(trapframe: &mut trapframe::Trapframe) {
80034650:	27bdff28 	addiu	sp,sp,-216
80034654:	afbf00d4 	sw	ra,212(sp)
80034658:	afa40080 	sw	a0,128(sp)
    let badvaddr = trapframe.badvaddr;
8003465c:	8c82008c 	lw	v0,140(a0)
80034660:	afa2003c 	sw	v0,60(sp)
80034664:	afa20084 	sw	v0,132(sp)
    let asid = trapframe.hi & 0xff;
80034668:	90810084 	lbu	at,132(a0)
8003466c:	afa10040 	sw	at,64(sp)
80034670:	afa10088 	sw	at,136(sp)
80034674:	afa200c4 	sw	v0,196(sp)
80034678:	afa100c8 	sw	at,200(sp)
8003467c:	2404000c 	li	a0,12
80034680:	24050000 	li	a1,0
80034684:	0c00e2fc 	jal	80038bf0 <_ZN6mips323tlb8gen_mask17h8ecb12b4ecadd0edE>
80034688:	00000000 	nop
8003468c:	8fa1003c 	lw	at,60(sp)
80034690:	00401825 	move	v1,v0
80034694:	8fa20040 	lw	v0,64(sp)
80034698:	00601827 	nor	v1,v1,zero
8003469c:	00230824 	and	at,at,v1
800346a0:	00222025 	or	a0,at,v0
800346a4:	0c00e2ec 	jal	80038bb0 <tlb_out>
800346a8:	00000000 	nop
    mips32::tlb::tlb_invalidate(badvaddr, asid);
    let cur_env_idx = CUR_ENV.lock();
800346ac:	3c018105 	lui	at,0x8105
800346b0:	24240960 	addiu	a0,at,2400
800346b4:	0c00dafc 	jal	80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>
800346b8:	00000000 	nop
800346bc:	00402025 	move	a0,v0
800346c0:	0c00a0e5 	jal	80028394 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h6f674c69b8db7fcbE>
800346c4:	00000000 	nop
800346c8:	afa20048 	sw	v0,72(sp)
800346cc:	27a40048 	addiu	a0,sp,72
    let curenvidx = match *cur_env_idx {
800346d0:	0c00ac72 	jal	8002b1c8 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d85be5d9839aac1E>
800346d4:	00000000 	nop
800346d8:	00400825 	move	at,v0
800346dc:	afa10044 	sw	at,68(sp)
800346e0:	8c410000 	lw	at,0(v0)
800346e4:	1420000f 	bnez	at,80034724 <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0xd4>
800346e8:	00000000 	nop
800346ec:	0800d1bd 	j	800346f4 <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0xa4>
800346f0:	00000000 	nop
        Some(idx) => idx,
        None => panic!("do_tlb_refill: no env to run"),
800346f4:	3c018105 	lui	at,0x8105
800346f8:	242503dc 	addiu	a1,at,988
800346fc:	27a4004c 	addiu	a0,sp,76
80034700:	afa40038 	sw	a0,56(sp)
80034704:	24060001 	li	a2,1
80034708:	0c0083e6 	jal	80020f98 <_ZN4core3fmt9Arguments9new_const17h23afd0b39d4cb1acE>
8003470c:	00000000 	nop
80034710:	8fa40038 	lw	a0,56(sp)
80034714:	3c018105 	lui	at,0x8105
80034718:	242503e4 	addiu	a1,at,996
8003471c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80034720:	00000000 	nop
        Some(idx) => idx,
80034724:	8fa10044 	lw	at,68(sp)
80034728:	8c210004 	lw	at,4(at)
8003472c:	afa10030 	sw	at,48(sp)
80034730:	afa1008c 	sw	at,140(sp)
    };
    let curenv = &mut ENV_LIST.lock()[curenvidx];
80034734:	3c018105 	lui	at,0x8105
80034738:	24240960 	addiu	a0,at,2400
8003473c:	0c00daf0 	jal	80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>
80034740:	00000000 	nop
80034744:	00402025 	move	a0,v0
80034748:	0c00a10a 	jal	80028428 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17ha86fa021a87dea2eE>
8003474c:	00000000 	nop
80034750:	afa20064 	sw	v0,100(sp)
80034754:	27a40064 	addiu	a0,sp,100
80034758:	0c00ad0b 	jal	8002b42c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h924165c5d4b711f7E>
8003475c:	00000000 	nop
80034760:	8fa50030 	lw	a1,48(sp)
80034764:	00402025 	move	a0,v0
80034768:	3c018105 	lui	at,0x8105
8003476c:	242603f4 	addiu	a2,at,1012
80034770:	0c00ad35 	jal	8002b4d4 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hef5134ea4c4dd69aE>
80034774:	00000000 	nop
80034778:	00400825 	move	at,v0
8003477c:	afa10034 	sw	at,52(sp)
80034780:	afa20090 	sw	v0,144(sp)
    let ptentry: &PgtableEntry;
    loop {
80034784:	0800d1e3 	j	8003478c <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0x13c>
80034788:	00000000 	nop
        match curenv.env_pgdir.va_to_pa(VirtAddr::from(badvaddr)) {
8003478c:	8fa4003c 	lw	a0,60(sp)
80034790:	8fa10034 	lw	at,52(sp)
80034794:	8c2100b0 	lw	at,176(at)
80034798:	afa1002c 	sw	at,44(sp)
8003479c:	0c00af03 	jal	8002bc0c <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h3e418a96ab495ffdE>
800347a0:	00000000 	nop
800347a4:	8fa5002c 	lw	a1,44(sp)
800347a8:	afa20094 	sw	v0,148(sp)
800347ac:	8fa10094 	lw	at,148(sp)
800347b0:	afa10070 	sw	at,112(sp)
800347b4:	8fa10070 	lw	at,112(sp)
800347b8:	afa10098 	sw	at,152(sp)
800347bc:	8fa60098 	lw	a2,152(sp)
800347c0:	27a40068 	addiu	a0,sp,104
800347c4:	0c00b479 	jal	8002d1e4 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h54667732fe5a06aaE>
800347c8:	00000000 	nop
800347cc:	8fa10068 	lw	at,104(sp)
800347d0:	1420001c 	bnez	at,80034844 <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0x1f4>
800347d4:	00000000 	nop
800347d8:	0800d1f8 	j	800347e0 <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0x190>
800347dc:	00000000 	nop
            Some((p, _)) => {
                ptentry = p;
                break;
            }
            None => {
                passive_alloc(curenv, VirtAddr::from(badvaddr))
800347e0:	8fa4003c 	lw	a0,60(sp)
800347e4:	0c00af03 	jal	8002bc0c <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h3e418a96ab495ffdE>
800347e8:	00000000 	nop
800347ec:	8fa40034 	lw	a0,52(sp)
800347f0:	afa2009c 	sw	v0,156(sp)
800347f4:	8fa1009c 	lw	at,156(sp)
800347f8:	afa10074 	sw	at,116(sp)
800347fc:	8fa10074 	lw	at,116(sp)
80034800:	afa100a0 	sw	at,160(sp)
80034804:	8fa500a0 	lw	a1,160(sp)
80034808:	0c00d06e 	jal	800341b8 <_ZN8mos_65024trap3tlb13passive_alloc17hab704bf7ea455bb7E>
8003480c:	00000000 	nop
80034810:	00402025 	move	a0,v0
80034814:	00602825 	move	a1,v1
80034818:	3c018105 	lui	at,0x8105
8003481c:	24210428 	addiu	at,at,1064
80034820:	03a01025 	move	v0,sp
80034824:	ac410010 	sw	at,16(v0)
80034828:	3c018105 	lui	at,0x8105
8003482c:	24260404 	addiu	a2,at,1028
80034830:	24070023 	li	a3,35
80034834:	0c00980b 	jal	8002602c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hd2089bbef5d2693bE>
80034838:	00000000 	nop
8003483c:	0800d1e3 	j	8003478c <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0x13c>
80034840:	00000000 	nop
            Some((p, _)) => {
80034844:	8fa10068 	lw	at,104(sp)
80034848:	afa100a4 	sw	at,164(sp)
8003484c:	2402fff8 	li	v0,-8
                    .expect("do_tlb_refill: passive_alloc failed");
            }
        };
    }
    let ppte = ptentry as *const PgtableEntry as usize & !0x7;
80034850:	00222024 	and	a0,at,v0
80034854:	afa40024 	sw	a0,36(sp)
80034858:	afa400a8 	sw	a0,168(sp)
    let lo0 = VirtAddr::from(ppte).read::<usize>() >> 6;
8003485c:	0c00af03 	jal	8002bc0c <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h3e418a96ab495ffdE>
80034860:	00000000 	nop
80034864:	afa200ac 	sw	v0,172(sp)
80034868:	8fa100ac 	lw	at,172(sp)
8003486c:	afa10078 	sw	at,120(sp)
80034870:	27a10078 	addiu	at,sp,120
80034874:	afa100d0 	sw	at,208(sp)
        assert!(self.raw % align_of::<T>() == 0);
80034878:	8fa10078 	lw	at,120(sp)
8003487c:	afa10028 	sw	at,40(sp)
80034880:	24010000 	li	at,0
80034884:	14000009 	bnez	zero,800348ac <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0x25c>
80034888:	00000000 	nop
8003488c:	0800d225 	j	80034894 <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0x244>
80034890:	00000000 	nop
80034894:	8fa10028 	lw	at,40(sp)
80034898:	30210003 	andi	at,at,0x3
8003489c:	1020000e 	beqz	at,800348d8 <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0x288>
800348a0:	00000000 	nop
800348a4:	0800d22f 	j	800348bc <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0x26c>
800348a8:	00000000 	nop
800348ac:	3c018105 	lui	at,0x8105
800348b0:	2424f2d0 	addiu	a0,at,-3376
800348b4:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
800348b8:	00000000 	nop
800348bc:	3c018105 	lui	at,0x8105
800348c0:	2424f28c 	addiu	a0,at,-3444
800348c4:	3c018105 	lui	at,0x8105
800348c8:	2426f2e0 	addiu	a2,at,-3360
800348cc:	24050031 	li	a1,49
800348d0:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
800348d4:	00000000 	nop
        unsafe { ptr::read(self.raw as *const T) }
800348d8:	8fa40078 	lw	a0,120(sp)
800348dc:	0c0089b4 	jal	800226d0 <_ZN4core3ptr4read17h05b8eba24dbfd7a1E>
800348e0:	00000000 	nop
800348e4:	00400825 	move	at,v0
800348e8:	8fa20024 	lw	v0,36(sp)
800348ec:	00010982 	srl	at,at,0x6
800348f0:	afa1001c 	sw	at,28(sp)
800348f4:	afa100b0 	sw	at,176(sp)
    let lo1 = VirtAddr::from(ppte + size_of::<PgtableEntry>()).read::<usize>() >> 6;
800348f8:	24410004 	addiu	at,v0,4
800348fc:	afa10020 	sw	at,32(sp)
80034900:	0022082b 	sltu	at,at,v0
80034904:	14200039 	bnez	at,800349ec <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0x39c>
80034908:	00000000 	nop
8003490c:	0800d245 	j	80034914 <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0x2c4>
80034910:	00000000 	nop
80034914:	8fa40020 	lw	a0,32(sp)
80034918:	0c00af03 	jal	8002bc0c <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h3e418a96ab495ffdE>
8003491c:	00000000 	nop
80034920:	afa200b4 	sw	v0,180(sp)
80034924:	8fa100b4 	lw	at,180(sp)
80034928:	afa1007c 	sw	at,124(sp)
8003492c:	27a1007c 	addiu	at,sp,124
80034930:	afa100cc 	sw	at,204(sp)
        assert!(self.raw % align_of::<T>() == 0);
80034934:	8fa1007c 	lw	at,124(sp)
80034938:	afa10018 	sw	at,24(sp)
8003493c:	24010000 	li	at,0
80034940:	14000009 	bnez	zero,80034968 <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0x318>
80034944:	00000000 	nop
80034948:	0800d254 	j	80034950 <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0x300>
8003494c:	00000000 	nop
80034950:	8fa10018 	lw	at,24(sp)
80034954:	30210003 	andi	at,at,0x3
80034958:	1020000e 	beqz	at,80034994 <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0x344>
8003495c:	00000000 	nop
80034960:	0800d25e 	j	80034978 <_ZN8mos_65024trap3tlb13do_tlb_refill17h303540f69ec06c3dE+0x328>
80034964:	00000000 	nop
80034968:	3c018105 	lui	at,0x8105
8003496c:	2424f2d0 	addiu	a0,at,-3376
80034970:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80034974:	00000000 	nop
80034978:	3c018105 	lui	at,0x8105
8003497c:	2424f28c 	addiu	a0,at,-3444
80034980:	3c018105 	lui	at,0x8105
80034984:	2426f2e0 	addiu	a2,at,-3360
80034988:	24050031 	li	a1,49
8003498c:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
80034990:	00000000 	nop
        unsafe { ptr::read(self.raw as *const T) }
80034994:	8fa4007c 	lw	a0,124(sp)
80034998:	0c0089b4 	jal	800226d0 <_ZN4core3ptr4read17h05b8eba24dbfd7a1E>
8003499c:	00000000 	nop
800349a0:	00400825 	move	at,v0
800349a4:	8fa2001c 	lw	v0,28(sp)
800349a8:	00010982 	srl	at,at,0x6
800349ac:	afa100b8 	sw	at,184(sp)
800349b0:	afa200bc 	sw	v0,188(sp)
                _ret
            }
            #[inline(always)]
            fn write(val: usize) {
                unsafe {
                    asm!(concat!(".set noat\nmtc0 {}, ",$no,"\n.set at\n"),in(reg) val,options(nomem,nostack));
800349b4:	40821000 	mtc0	v0,c0_entrylo0
800349b8:	afa100c0 	sw	at,192(sp)
800349bc:	40811800 	mtc0	at,c0_entrylo1
arch::global_asm!(include_str!("./tlb.S"));

#[inline(always)]
pub fn tlbwr() {
    unsafe {
        arch::asm!("tlbwr");
800349c0:	42000006 	tlbwr
800349c4:	27a40064 	addiu	a0,sp,100
    cp0::entrylo0::write(lo0);
    cp0::entrylo1::write(lo1);
    mips32::tlb::tlbwr();
}
800349c8:	0c008e2a 	jal	800238a8 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9634b2ec9797ad88E>
800349cc:	00000000 	nop
800349d0:	27a40048 	addiu	a0,sp,72
800349d4:	0c008d08 	jal	80023420 <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h36a8f664befc7732E>
800349d8:	00000000 	nop
800349dc:	8fbf00d4 	lw	ra,212(sp)
800349e0:	27bd00d8 	addiu	sp,sp,216
800349e4:	03e00008 	jr	ra
800349e8:	00000000 	nop
    let lo1 = VirtAddr::from(ppte + size_of::<PgtableEntry>()).read::<usize>() >> 6;
800349ec:	3c018105 	lui	at,0x8105
800349f0:	24240438 	addiu	a0,at,1080
800349f4:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800349f8:	00000000 	nop

800349fc <_ZN8mos_65024trap6do_c2e17h53c0b2b7d5a8b8a6E>:
#[no_mangle]
pub fn trap_init() {
    int::enable_interrupt();
}

fn do_c2e(trapframe: &mut trapframe::Trapframe) {
800349fc:	27bdffa8 	addiu	sp,sp,-88
80034a00:	afbf0054 	sw	ra,84(sp)
80034a04:	afa4003c 	sw	a0,60(sp)
    panic!("Coprocessor 2 exception: {:x}", trapframe.epc);
80034a08:	24820094 	addiu	v0,a0,148
80034a0c:	afa20040 	sw	v0,64(sp)
80034a10:	afa2004c 	sw	v0,76(sp)
80034a14:	3c018005 	lui	at,0x8005
80034a18:	24219698 	addiu	at,at,-26984
80034a1c:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80034a20:	afa20044 	sw	v0,68(sp)
80034a24:	afa10048 	sw	at,72(sp)
    }
80034a28:	8fa20044 	lw	v0,68(sp)
80034a2c:	8fa10048 	lw	at,72(sp)
80034a30:	afa20034 	sw	v0,52(sp)
80034a34:	afa10038 	sw	at,56(sp)
80034a38:	03a00825 	move	at,sp
80034a3c:	24060001 	li	a2,1
80034a40:	ac260010 	sw	a2,16(at)
80034a44:	3c018105 	lui	at,0x8105
80034a48:	24250464 	addiu	a1,at,1124
80034a4c:	27a4001c 	addiu	a0,sp,28
80034a50:	afa40018 	sw	a0,24(sp)
80034a54:	27a70034 	addiu	a3,sp,52
80034a58:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
80034a5c:	00000000 	nop
80034a60:	8fa40018 	lw	a0,24(sp)
80034a64:	3c018105 	lui	at,0x8105
80034a68:	24250480 	addiu	a1,at,1152
80034a6c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80034a70:	00000000 	nop

80034a74 <_ZN8mos_65024trap6do_fpe17h1d57aeb0d8d8078eE>:
}

fn do_fpe(trapframe: &mut trapframe::Trapframe) {
80034a74:	27bdffa8 	addiu	sp,sp,-88
80034a78:	afbf0054 	sw	ra,84(sp)
80034a7c:	afa4003c 	sw	a0,60(sp)
    panic!("Floating point exception: {:x}", trapframe.epc);
80034a80:	24820094 	addiu	v0,a0,148
80034a84:	afa20040 	sw	v0,64(sp)
80034a88:	afa2004c 	sw	v0,76(sp)
80034a8c:	3c018005 	lui	at,0x8005
80034a90:	24219698 	addiu	at,at,-26984
80034a94:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80034a98:	afa20044 	sw	v0,68(sp)
80034a9c:	afa10048 	sw	at,72(sp)
    }
80034aa0:	8fa20044 	lw	v0,68(sp)
80034aa4:	8fa10048 	lw	at,72(sp)
80034aa8:	afa20034 	sw	v0,52(sp)
80034aac:	afa10038 	sw	at,56(sp)
80034ab0:	03a00825 	move	at,sp
80034ab4:	24060001 	li	a2,1
80034ab8:	ac260010 	sw	a2,16(at)
80034abc:	3c018105 	lui	at,0x8105
80034ac0:	242504ac 	addiu	a1,at,1196
80034ac4:	27a4001c 	addiu	a0,sp,28
80034ac8:	afa40018 	sw	a0,24(sp)
80034acc:	27a70034 	addiu	a3,sp,52
80034ad0:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
80034ad4:	00000000 	nop
80034ad8:	8fa40018 	lw	a0,24(sp)
80034adc:	3c018105 	lui	at,0x8105
80034ae0:	242504b4 	addiu	a1,at,1204
80034ae4:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80034ae8:	00000000 	nop

80034aec <_ZN8mos_65024trap7do_trap17h199d5a76b7f1ca70E>:
}

fn do_trap(trapframe: &mut trapframe::Trapframe) {
80034aec:	27bdffa8 	addiu	sp,sp,-88
80034af0:	afbf0054 	sw	ra,84(sp)
80034af4:	afa4003c 	sw	a0,60(sp)
    panic!("Trap exception: {:x}", trapframe.epc);
80034af8:	24820094 	addiu	v0,a0,148
80034afc:	afa20040 	sw	v0,64(sp)
80034b00:	afa2004c 	sw	v0,76(sp)
80034b04:	3c018005 	lui	at,0x8005
80034b08:	24219698 	addiu	at,at,-26984
80034b0c:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80034b10:	afa20044 	sw	v0,68(sp)
80034b14:	afa10048 	sw	at,72(sp)
    }
80034b18:	8fa20044 	lw	v0,68(sp)
80034b1c:	8fa10048 	lw	at,72(sp)
80034b20:	afa20034 	sw	v0,52(sp)
80034b24:	afa10038 	sw	at,56(sp)
80034b28:	03a00825 	move	at,sp
80034b2c:	24060001 	li	a2,1
80034b30:	ac260010 	sw	a2,16(at)
80034b34:	3c018105 	lui	at,0x8105
80034b38:	242504c4 	addiu	a1,at,1220
80034b3c:	27a4001c 	addiu	a0,sp,28
80034b40:	afa40018 	sw	a0,24(sp)
80034b44:	27a70034 	addiu	a3,sp,52
80034b48:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
80034b4c:	00000000 	nop
80034b50:	8fa40018 	lw	a0,24(sp)
80034b54:	3c018105 	lui	at,0x8105
80034b58:	242504cc 	addiu	a1,at,1228
80034b5c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80034b60:	00000000 	nop

80034b64 <_ZN8mos_65024trap5do_ov17hb248954da3ef2294E>:
}

fn do_ov(trapframe: &mut trapframe::Trapframe) {
80034b64:	27bdffa8 	addiu	sp,sp,-88
80034b68:	afbf0054 	sw	ra,84(sp)
80034b6c:	afa4003c 	sw	a0,60(sp)
    panic!("Overflow exception: {:x}", trapframe.epc);
80034b70:	24820094 	addiu	v0,a0,148
80034b74:	afa20040 	sw	v0,64(sp)
80034b78:	afa2004c 	sw	v0,76(sp)
80034b7c:	3c018005 	lui	at,0x8005
80034b80:	24219698 	addiu	at,at,-26984
80034b84:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80034b88:	afa20044 	sw	v0,68(sp)
80034b8c:	afa10048 	sw	at,72(sp)
    }
80034b90:	8fa20044 	lw	v0,68(sp)
80034b94:	8fa10048 	lw	at,72(sp)
80034b98:	afa20034 	sw	v0,52(sp)
80034b9c:	afa10038 	sw	at,56(sp)
80034ba0:	03a00825 	move	at,sp
80034ba4:	24060001 	li	a2,1
80034ba8:	ac260010 	sw	a2,16(at)
80034bac:	3c018105 	lui	at,0x8105
80034bb0:	242504f0 	addiu	a1,at,1264
80034bb4:	27a4001c 	addiu	a0,sp,28
80034bb8:	afa40018 	sw	a0,24(sp)
80034bbc:	27a70034 	addiu	a3,sp,52
80034bc0:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
80034bc4:	00000000 	nop
80034bc8:	8fa40018 	lw	a0,24(sp)
80034bcc:	3c018105 	lui	at,0x8105
80034bd0:	242504f8 	addiu	a1,at,1272
80034bd4:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80034bd8:	00000000 	nop

80034bdc <_ZN8mos_65024trap6do_cpu17h669e2c41f662f292E>:
}

fn do_cpu(trapframe: &mut trapframe::Trapframe) {
80034bdc:	27bdffa8 	addiu	sp,sp,-88
80034be0:	afbf0054 	sw	ra,84(sp)
80034be4:	afa4003c 	sw	a0,60(sp)
    panic!("Coprocessor unusable exception: {:x}", trapframe.epc);
80034be8:	24820094 	addiu	v0,a0,148
80034bec:	afa20040 	sw	v0,64(sp)
80034bf0:	afa2004c 	sw	v0,76(sp)
80034bf4:	3c018005 	lui	at,0x8005
80034bf8:	24219698 	addiu	at,at,-26984
80034bfc:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80034c00:	afa20044 	sw	v0,68(sp)
80034c04:	afa10048 	sw	at,72(sp)
    }
80034c08:	8fa20044 	lw	v0,68(sp)
80034c0c:	8fa10048 	lw	at,72(sp)
80034c10:	afa20034 	sw	v0,52(sp)
80034c14:	afa10038 	sw	at,56(sp)
80034c18:	03a00825 	move	at,sp
80034c1c:	24060001 	li	a2,1
80034c20:	ac260010 	sw	a2,16(at)
80034c24:	3c018105 	lui	at,0x8105
80034c28:	24250508 	addiu	a1,at,1288
80034c2c:	27a4001c 	addiu	a0,sp,28
80034c30:	afa40018 	sw	a0,24(sp)
80034c34:	27a70034 	addiu	a3,sp,52
80034c38:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
80034c3c:	00000000 	nop
80034c40:	8fa40018 	lw	a0,24(sp)
80034c44:	3c018105 	lui	at,0x8105
80034c48:	24250510 	addiu	a1,at,1296
80034c4c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80034c50:	00000000 	nop

80034c54 <_ZN8mos_65024trap5do_ri17hea9082b93dbfd2c2E>:
}

fn do_ri(trapframe: &mut trapframe::Trapframe) {
80034c54:	27bdffa8 	addiu	sp,sp,-88
80034c58:	afbf0054 	sw	ra,84(sp)
80034c5c:	afa4003c 	sw	a0,60(sp)
    panic!("Reserved instruction exception: {:x}", trapframe.epc);
80034c60:	24820094 	addiu	v0,a0,148
80034c64:	afa20040 	sw	v0,64(sp)
80034c68:	afa2004c 	sw	v0,76(sp)
80034c6c:	3c018005 	lui	at,0x8005
80034c70:	24219698 	addiu	at,at,-26984
80034c74:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80034c78:	afa20044 	sw	v0,68(sp)
80034c7c:	afa10048 	sw	at,72(sp)
    }
80034c80:	8fa20044 	lw	v0,68(sp)
80034c84:	8fa10048 	lw	at,72(sp)
80034c88:	afa20034 	sw	v0,52(sp)
80034c8c:	afa10038 	sw	at,56(sp)
80034c90:	03a00825 	move	at,sp
80034c94:	24060001 	li	a2,1
80034c98:	ac260010 	sw	a2,16(at)
80034c9c:	3c018105 	lui	at,0x8105
80034ca0:	24250520 	addiu	a1,at,1312
80034ca4:	27a4001c 	addiu	a0,sp,28
80034ca8:	afa40018 	sw	a0,24(sp)
80034cac:	27a70034 	addiu	a3,sp,52
80034cb0:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
80034cb4:	00000000 	nop
80034cb8:	8fa40018 	lw	a0,24(sp)
80034cbc:	3c018105 	lui	at,0x8105
80034cc0:	24250528 	addiu	a1,at,1320
80034cc4:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80034cc8:	00000000 	nop

80034ccc <_ZN8mos_65024trap5do_bp17hb0d34e9a61137399E>:
}

fn do_bp(trapframe: &mut trapframe::Trapframe) {
80034ccc:	27bdffa8 	addiu	sp,sp,-88
80034cd0:	afbf0054 	sw	ra,84(sp)
80034cd4:	afa4003c 	sw	a0,60(sp)
    panic!("Breakpoint exception: {:x}", trapframe.epc);
80034cd8:	24820094 	addiu	v0,a0,148
80034cdc:	afa20040 	sw	v0,64(sp)
80034ce0:	afa2004c 	sw	v0,76(sp)
80034ce4:	3c018005 	lui	at,0x8005
80034ce8:	24219698 	addiu	at,at,-26984
80034cec:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80034cf0:	afa20044 	sw	v0,68(sp)
80034cf4:	afa10048 	sw	at,72(sp)
    }
80034cf8:	8fa20044 	lw	v0,68(sp)
80034cfc:	8fa10048 	lw	at,72(sp)
80034d00:	afa20034 	sw	v0,52(sp)
80034d04:	afa10038 	sw	at,56(sp)
80034d08:	03a00825 	move	at,sp
80034d0c:	24060001 	li	a2,1
80034d10:	ac260010 	sw	a2,16(at)
80034d14:	3c018105 	lui	at,0x8105
80034d18:	24250550 	addiu	a1,at,1360
80034d1c:	27a4001c 	addiu	a0,sp,28
80034d20:	afa40018 	sw	a0,24(sp)
80034d24:	27a70034 	addiu	a3,sp,52
80034d28:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
80034d2c:	00000000 	nop
80034d30:	8fa40018 	lw	a0,24(sp)
80034d34:	3c018105 	lui	at,0x8105
80034d38:	24250558 	addiu	a1,at,1368
80034d3c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80034d40:	00000000 	nop

80034d44 <_ZN8mos_65024trap6do_dbe17h45e022f6889696f3E>:
}

fn do_dbe(trapframe: &mut trapframe::Trapframe) {
80034d44:	27bdffa8 	addiu	sp,sp,-88
80034d48:	afbf0054 	sw	ra,84(sp)
80034d4c:	afa4003c 	sw	a0,60(sp)
    panic!("Data bus error exception: {:x}", trapframe.badvaddr);
80034d50:	2482008c 	addiu	v0,a0,140
80034d54:	afa20040 	sw	v0,64(sp)
80034d58:	afa2004c 	sw	v0,76(sp)
80034d5c:	3c018005 	lui	at,0x8005
80034d60:	24219698 	addiu	at,at,-26984
80034d64:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80034d68:	afa20044 	sw	v0,68(sp)
80034d6c:	afa10048 	sw	at,72(sp)
    }
80034d70:	8fa20044 	lw	v0,68(sp)
80034d74:	8fa10048 	lw	at,72(sp)
80034d78:	afa20034 	sw	v0,52(sp)
80034d7c:	afa10038 	sw	at,56(sp)
80034d80:	03a00825 	move	at,sp
80034d84:	24060001 	li	a2,1
80034d88:	ac260010 	sw	a2,16(at)
80034d8c:	3c018105 	lui	at,0x8105
80034d90:	24250584 	addiu	a1,at,1412
80034d94:	27a4001c 	addiu	a0,sp,28
80034d98:	afa40018 	sw	a0,24(sp)
80034d9c:	27a70034 	addiu	a3,sp,52
80034da0:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
80034da4:	00000000 	nop
80034da8:	8fa40018 	lw	a0,24(sp)
80034dac:	3c018105 	lui	at,0x8105
80034db0:	2425058c 	addiu	a1,at,1420
80034db4:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80034db8:	00000000 	nop

80034dbc <_ZN8mos_65024trap6do_ibe17h2251229580175792E>:
}

fn do_ibe(trapframe: &mut trapframe::Trapframe) {
80034dbc:	27bdffa8 	addiu	sp,sp,-88
80034dc0:	afbf0054 	sw	ra,84(sp)
80034dc4:	afa4003c 	sw	a0,60(sp)
    panic!("Instruction bus error exception: {:x}", trapframe.badvaddr);
80034dc8:	2482008c 	addiu	v0,a0,140
80034dcc:	afa20040 	sw	v0,64(sp)
80034dd0:	afa2004c 	sw	v0,76(sp)
80034dd4:	3c018005 	lui	at,0x8005
80034dd8:	24219698 	addiu	at,at,-26984
80034ddc:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80034de0:	afa20044 	sw	v0,68(sp)
80034de4:	afa10048 	sw	at,72(sp)
    }
80034de8:	8fa20044 	lw	v0,68(sp)
80034dec:	8fa10048 	lw	at,72(sp)
80034df0:	afa20034 	sw	v0,52(sp)
80034df4:	afa10038 	sw	at,56(sp)
80034df8:	03a00825 	move	at,sp
80034dfc:	24060001 	li	a2,1
80034e00:	ac260010 	sw	a2,16(at)
80034e04:	3c018105 	lui	at,0x8105
80034e08:	242505c0 	addiu	a1,at,1472
80034e0c:	27a4001c 	addiu	a0,sp,28
80034e10:	afa40018 	sw	a0,24(sp)
80034e14:	27a70034 	addiu	a3,sp,52
80034e18:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
80034e1c:	00000000 	nop
80034e20:	8fa40018 	lw	a0,24(sp)
80034e24:	3c018105 	lui	at,0x8105
80034e28:	242505c8 	addiu	a1,at,1480
80034e2c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80034e30:	00000000 	nop

80034e34 <_ZN8mos_65024trap7do_ades17hdda1a54754375b56E>:
}

fn do_ades(trapframe: &mut trapframe::Trapframe) {
80034e34:	27bdffa8 	addiu	sp,sp,-88
80034e38:	afbf0054 	sw	ra,84(sp)
80034e3c:	afa4003c 	sw	a0,60(sp)
    panic!("Address error exception: {:x}", trapframe.badvaddr);
80034e40:	2482008c 	addiu	v0,a0,140
80034e44:	afa20040 	sw	v0,64(sp)
80034e48:	afa2004c 	sw	v0,76(sp)
80034e4c:	3c018005 	lui	at,0x8005
80034e50:	24219698 	addiu	at,at,-26984
80034e54:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80034e58:	afa20044 	sw	v0,68(sp)
80034e5c:	afa10048 	sw	at,72(sp)
    }
80034e60:	8fa20044 	lw	v0,68(sp)
80034e64:	8fa10048 	lw	at,72(sp)
80034e68:	afa20034 	sw	v0,52(sp)
80034e6c:	afa10038 	sw	at,56(sp)
80034e70:	03a00825 	move	at,sp
80034e74:	24060001 	li	a2,1
80034e78:	ac260010 	sw	a2,16(at)
80034e7c:	3c018105 	lui	at,0x8105
80034e80:	242505f4 	addiu	a1,at,1524
80034e84:	27a4001c 	addiu	a0,sp,28
80034e88:	afa40018 	sw	a0,24(sp)
80034e8c:	27a70034 	addiu	a3,sp,52
80034e90:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
80034e94:	00000000 	nop
80034e98:	8fa40018 	lw	a0,24(sp)
80034e9c:	3c018105 	lui	at,0x8105
80034ea0:	242505fc 	addiu	a1,at,1532
80034ea4:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80034ea8:	00000000 	nop

80034eac <_ZN8mos_65024trap7do_adel17ha9c8c0c181fd2ba8E>:
}

fn do_adel(trapframe: &mut trapframe::Trapframe) {
80034eac:	27bdffa8 	addiu	sp,sp,-88
80034eb0:	afbf0054 	sw	ra,84(sp)
80034eb4:	afa4003c 	sw	a0,60(sp)
    panic!("Address error exception: {:x}", trapframe.badvaddr);
80034eb8:	2482008c 	addiu	v0,a0,140
80034ebc:	afa20040 	sw	v0,64(sp)
80034ec0:	afa2004c 	sw	v0,76(sp)
80034ec4:	3c018005 	lui	at,0x8005
80034ec8:	24219698 	addiu	at,at,-26984
80034ecc:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80034ed0:	afa20044 	sw	v0,68(sp)
80034ed4:	afa10048 	sw	at,72(sp)
    }
80034ed8:	8fa20044 	lw	v0,68(sp)
80034edc:	8fa10048 	lw	at,72(sp)
80034ee0:	afa20034 	sw	v0,52(sp)
80034ee4:	afa10038 	sw	at,56(sp)
80034ee8:	03a00825 	move	at,sp
80034eec:	24060001 	li	a2,1
80034ef0:	ac260010 	sw	a2,16(at)
80034ef4:	3c018105 	lui	at,0x8105
80034ef8:	242505f4 	addiu	a1,at,1524
80034efc:	27a4001c 	addiu	a0,sp,28
80034f00:	afa40018 	sw	a0,24(sp)
80034f04:	27a70034 	addiu	a3,sp,52
80034f08:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
80034f0c:	00000000 	nop
80034f10:	8fa40018 	lw	a0,24(sp)
80034f14:	3c018105 	lui	at,0x8105
80034f18:	2425060c 	addiu	a1,at,1548
80034f1c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80034f20:	00000000 	nop

80034f24 <_ZN8mos_65024trap20do_unknown_exception17h824f8e0e5c65ddb4E>:
}

fn do_unknown_exception(trapframe: &mut trapframe::Trapframe) {
80034f24:	27bdffa8 	addiu	sp,sp,-88
80034f28:	afbf0054 	sw	ra,84(sp)
80034f2c:	afa4003c 	sw	a0,60(sp)
    panic!("Unknown exception: {:x}", trapframe.cause);
80034f30:	24820090 	addiu	v0,a0,144
80034f34:	afa20040 	sw	v0,64(sp)
80034f38:	afa2004c 	sw	v0,76(sp)
80034f3c:	3c018005 	lui	at,0x8005
80034f40:	24219698 	addiu	at,at,-26984
80034f44:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80034f48:	afa20044 	sw	v0,68(sp)
80034f4c:	afa10048 	sw	at,72(sp)
    }
80034f50:	8fa20044 	lw	v0,68(sp)
80034f54:	8fa10048 	lw	at,72(sp)
80034f58:	afa20034 	sw	v0,52(sp)
80034f5c:	afa10038 	sw	at,56(sp)
80034f60:	03a00825 	move	at,sp
80034f64:	24060001 	li	a2,1
80034f68:	ac260010 	sw	a2,16(at)
80034f6c:	3c018105 	lui	at,0x8105
80034f70:	24250630 	addiu	a1,at,1584
80034f74:	27a4001c 	addiu	a0,sp,28
80034f78:	afa40018 	sw	a0,24(sp)
80034f7c:	27a70034 	addiu	a3,sp,52
80034f80:	0c0083a3 	jal	80020e8c <_ZN4core3fmt9Arguments6new_v117h2515ac58ce171ae4E>
80034f84:	00000000 	nop
80034f88:	8fa40018 	lw	a0,24(sp)
80034f8c:	3c018105 	lui	at,0x8105
80034f90:	24250638 	addiu	a1,at,1592
80034f94:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80034f98:	00000000 	nop

80034f9c <trap_handler>:
    fn exc_gen_entry();
    fn tlb_miss_entry();
}

#[no_mangle]
extern "C" fn trap_handler(trapframe: &mut trapframe::Trapframe) {
80034f9c:	27bdffd8 	addiu	sp,sp,-40
80034fa0:	afbf0024 	sw	ra,36(sp)
80034fa4:	afa40014 	sw	a0,20(sp)
80034fa8:	afa4001c 	sw	a0,28(sp)
    let cause = (trapframe.cause >> 2) & 0x1f;
80034fac:	8c810090 	lw	at,144(a0)
80034fb0:	7c212080 	ext	at,at,0x2,0x5
80034fb4:	afa10018 	sw	at,24(sp)
80034fb8:	afa10020 	sw	at,32(sp)
    match cause {
80034fbc:	2c210013 	sltiu	at,at,19
80034fc0:	10200008 	beqz	at,80034fe4 <trap_handler+0x48>
80034fc4:	00000000 	nop
80034fc8:	8fa10018 	lw	at,24(sp)
80034fcc:	00010880 	sll	at,at,0x2
80034fd0:	3c028105 	lui	v0,0x8105
80034fd4:	00220821 	addu	at,at,v0
80034fd8:	8c21e130 	lw	at,-7888(at)
80034fdc:	00200008 	jr	at
80034fe0:	00000000 	nop
        EXC_CODE_CPU => do_cpu(trapframe),
        EXC_CODE_OV => do_ov(trapframe),
        EXC_CODE_TRAP => do_trap(trapframe),
        EXC_CODE_FPE => do_fpe(trapframe),
        EXC_CODE_C2E => do_c2e(trapframe),
        _ => do_unknown_exception(trapframe),
80034fe4:	8fa40014 	lw	a0,20(sp)
80034fe8:	0c00d3c9 	jal	80034f24 <_ZN8mos_65024trap20do_unknown_exception17h824f8e0e5c65ddb4E>
80034fec:	00000000 	nop
80034ff0:	0800d44e 	j	80035138 <trap_handler+0x19c>
80034ff4:	00000000 	nop
        EXC_CODE_INT => int::do_interrupt(trapframe),
80034ff8:	8fa40014 	lw	a0,20(sp)
80034ffc:	0c00beb9 	jal	8002fae4 <_ZN8mos_65024trap3int12do_interrupt17he68757a120f1237dE>
80035000:	00000000 	nop
80035004:	0800d44e 	j	80035138 <trap_handler+0x19c>
80035008:	00000000 	nop
        EXC_CODE_MOD => tlb::do_tlb_mod(trapframe),
8003500c:	8fa40014 	lw	a0,20(sp)
80035010:	0c00ce31 	jal	800338c4 <_ZN8mos_65024trap3tlb10do_tlb_mod17h466faf428bdeea6cE>
80035014:	00000000 	nop
80035018:	0800d44e 	j	80035138 <trap_handler+0x19c>
8003501c:	00000000 	nop
        EXC_CODE_TLBL => tlb::do_tlbl(trapframe),
80035020:	8fa40014 	lw	a0,20(sp)
80035024:	0c00d065 	jal	80034194 <_ZN8mos_65024trap3tlb7do_tlbl17h5302882b139de5caE>
80035028:	00000000 	nop
8003502c:	0800d44e 	j	80035138 <trap_handler+0x19c>
80035030:	00000000 	nop
        EXC_CODE_TLBS => tlb::do_tlbs(trapframe),
80035034:	8fa40014 	lw	a0,20(sp)
80035038:	0c00d05c 	jal	80034170 <_ZN8mos_65024trap3tlb7do_tlbs17h764dab62a98e2513E>
8003503c:	00000000 	nop
80035040:	0800d44e 	j	80035138 <trap_handler+0x19c>
80035044:	00000000 	nop
        EXC_CODE_ADEL => do_adel(trapframe),
80035048:	8fa40014 	lw	a0,20(sp)
8003504c:	0c00d3ab 	jal	80034eac <_ZN8mos_65024trap7do_adel17ha9c8c0c181fd2ba8E>
80035050:	00000000 	nop
80035054:	0800d44e 	j	80035138 <trap_handler+0x19c>
80035058:	00000000 	nop
        EXC_CODE_ADES => do_ades(trapframe),
8003505c:	8fa40014 	lw	a0,20(sp)
80035060:	0c00d38d 	jal	80034e34 <_ZN8mos_65024trap7do_ades17hdda1a54754375b56E>
80035064:	00000000 	nop
80035068:	0800d44e 	j	80035138 <trap_handler+0x19c>
8003506c:	00000000 	nop
        EXC_CODE_IBE => do_ibe(trapframe),
80035070:	8fa40014 	lw	a0,20(sp)
80035074:	0c00d36f 	jal	80034dbc <_ZN8mos_65024trap6do_ibe17h2251229580175792E>
80035078:	00000000 	nop
8003507c:	0800d44e 	j	80035138 <trap_handler+0x19c>
80035080:	00000000 	nop
        EXC_CODE_DBE => do_dbe(trapframe),
80035084:	8fa40014 	lw	a0,20(sp)
80035088:	0c00d351 	jal	80034d44 <_ZN8mos_65024trap6do_dbe17h45e022f6889696f3E>
8003508c:	00000000 	nop
80035090:	0800d44e 	j	80035138 <trap_handler+0x19c>
80035094:	00000000 	nop
        EXC_CODE_SYS => syscall::do_syscall(trapframe),
80035098:	8fa40014 	lw	a0,20(sp)
8003509c:	0c00ccac 	jal	800332b0 <_ZN8mos_65024trap7syscall10do_syscall17hed92c036b16deb8fE>
800350a0:	00000000 	nop
800350a4:	0800d44e 	j	80035138 <trap_handler+0x19c>
800350a8:	00000000 	nop
        EXC_CODE_BP => do_bp(trapframe),
800350ac:	8fa40014 	lw	a0,20(sp)
800350b0:	0c00d333 	jal	80034ccc <_ZN8mos_65024trap5do_bp17hb0d34e9a61137399E>
800350b4:	00000000 	nop
800350b8:	0800d44e 	j	80035138 <trap_handler+0x19c>
800350bc:	00000000 	nop
        EXC_CODE_RI => do_ri(trapframe),
800350c0:	8fa40014 	lw	a0,20(sp)
800350c4:	0c00d315 	jal	80034c54 <_ZN8mos_65024trap5do_ri17hea9082b93dbfd2c2E>
800350c8:	00000000 	nop
800350cc:	0800d44e 	j	80035138 <trap_handler+0x19c>
800350d0:	00000000 	nop
        EXC_CODE_CPU => do_cpu(trapframe),
800350d4:	8fa40014 	lw	a0,20(sp)
800350d8:	0c00d2f7 	jal	80034bdc <_ZN8mos_65024trap6do_cpu17h669e2c41f662f292E>
800350dc:	00000000 	nop
800350e0:	0800d44e 	j	80035138 <trap_handler+0x19c>
800350e4:	00000000 	nop
        EXC_CODE_OV => do_ov(trapframe),
800350e8:	8fa40014 	lw	a0,20(sp)
800350ec:	0c00d2d9 	jal	80034b64 <_ZN8mos_65024trap5do_ov17hb248954da3ef2294E>
800350f0:	00000000 	nop
800350f4:	0800d44e 	j	80035138 <trap_handler+0x19c>
800350f8:	00000000 	nop
        EXC_CODE_TRAP => do_trap(trapframe),
800350fc:	8fa40014 	lw	a0,20(sp)
80035100:	0c00d2bb 	jal	80034aec <_ZN8mos_65024trap7do_trap17h199d5a76b7f1ca70E>
80035104:	00000000 	nop
80035108:	0800d44e 	j	80035138 <trap_handler+0x19c>
8003510c:	00000000 	nop
        EXC_CODE_FPE => do_fpe(trapframe),
80035110:	8fa40014 	lw	a0,20(sp)
80035114:	0c00d29d 	jal	80034a74 <_ZN8mos_65024trap6do_fpe17h1d57aeb0d8d8078eE>
80035118:	00000000 	nop
8003511c:	0800d44e 	j	80035138 <trap_handler+0x19c>
80035120:	00000000 	nop
        EXC_CODE_C2E => do_c2e(trapframe),
80035124:	8fa40014 	lw	a0,20(sp)
80035128:	0c00d27f 	jal	800349fc <_ZN8mos_65024trap6do_c2e17h53c0b2b7d5a8b8a6E>
8003512c:	00000000 	nop
80035130:	0800d44e 	j	80035138 <trap_handler+0x19c>
80035134:	00000000 	nop
    }
}
80035138:	8fbf0024 	lw	ra,36(sp)
8003513c:	27bd0028 	addiu	sp,sp,40
80035140:	03e00008 	jr	ra
80035144:	00000000 	nop

80035148 <_ZN8mos_65024trap33___avoid_fk_compiler_optimization17h93891e9e62e603d9E>:

// acutally this function will never be called, just to avoid the compiler optimization
// fk rust optimization
pub fn ___avoid_fk_compiler_optimization() {
80035148:	27bdfec8 	addiu	sp,sp,-312
8003514c:	afbf0134 	sw	ra,308(sp)
80035150:	27a400b4 	addiu	a0,sp,180
80035154:	afa40010 	sw	a0,16(sp)
80035158:	24050000 	li	a1,0
8003515c:	24060080 	li	a2,128
80035160:	afa60014 	sw	a2,20(sp)
            regs: [0; 32],
80035164:	0c00dba8 	jal	80036ea0 <memset>
80035168:	00000000 	nop
8003516c:	8fa50010 	lw	a1,16(sp)
80035170:	8fa60014 	lw	a2,20(sp)
80035174:	27a4001c 	addiu	a0,sp,28
80035178:	afa40018 	sw	a0,24(sp)
        Self {
8003517c:	0c00db4c 	jal	80036d30 <memcpy>
80035180:	00000000 	nop
80035184:	8fa40018 	lw	a0,24(sp)
80035188:	afa0009c 	sw	zero,156(sp)
8003518c:	afa000a0 	sw	zero,160(sp)
80035190:	afa000a4 	sw	zero,164(sp)
80035194:	afa000a8 	sw	zero,168(sp)
80035198:	afa000ac 	sw	zero,172(sp)
8003519c:	afa000b0 	sw	zero,176(sp)
    //! just to call it to avoid the compiler optimization
    unsafe {
        trap_handler(&mut trapframe::Trapframe::new());
800351a0:	0c00d3e7 	jal	80034f9c <trap_handler>
800351a4:	00000000 	nop
        exc_gen_entry();
800351a8:	0c000060 	jal	80000180 <exc_gen_entry>
800351ac:	00000000 	nop
        tlb_miss_entry();
800351b0:	0c000000 	jal	80000000 <tlb_miss_entry>
800351b4:	00000000 	nop
    }
}
800351b8:	8fbf0134 	lw	ra,308(sp)
800351bc:	27bd0138 	addiu	sp,sp,312
800351c0:	03e00008 	jr	ra
800351c4:	00000000 	nop

800351c8 <_ZN8mos_65024util8ListNode3new17h3bddddc7683b78d9E>:
    pub head: Option<Rc<RefCell<ListNode>>>,
    pub tail: Option<Rc<RefCell<ListNode>>>,
}

impl ListNode {
    pub const fn new(idx: usize) -> Self {
800351c8:	27bdfff0 	addiu	sp,sp,-16
800351cc:	00801025 	move	v0,a0
800351d0:	afa5000c 	sw	a1,12(sp)
        Self {
            next: None,
800351d4:	afa00004 	sw	zero,4(sp)
            prev: None,
800351d8:	afa00008 	sw	zero,8(sp)
        Self {
800351dc:	8fa10004 	lw	at,4(sp)
800351e0:	ac810000 	sw	at,0(a0)
800351e4:	8fa10008 	lw	at,8(sp)
800351e8:	ac810004 	sw	at,4(a0)
800351ec:	ac850008 	sw	a1,8(a0)
800351f0:	27bd0010 	addiu	sp,sp,16
            idx,
        }
    }
800351f4:	03e00008 	jr	ra
800351f8:	00000000 	nop

800351fc <_ZN8mos_65024util16DoubleLinkedList3new17he553f0105c89739dE>:
}

impl DoubleLinkedList {
    pub const fn new() -> Self {
800351fc:	27bdfff0 	addiu	sp,sp,-16
        Self {
            head: None,
80035200:	afa00008 	sw	zero,8(sp)
            tail: None,
80035204:	afa0000c 	sw	zero,12(sp)
        Self {
80035208:	8fa10008 	lw	at,8(sp)
8003520c:	afa10000 	sw	at,0(sp)
80035210:	8fa1000c 	lw	at,12(sp)
80035214:	afa10004 	sw	at,4(sp)
        }
    }
80035218:	8fa20000 	lw	v0,0(sp)
8003521c:	8fa30004 	lw	v1,4(sp)
80035220:	27bd0010 	addiu	sp,sp,16
80035224:	03e00008 	jr	ra
80035228:	00000000 	nop

8003522c <_ZN8mos_65024util16DoubleLinkedList14insert_to_tail17h289aeba59114fbe3E>:
    pub fn insert_to_tail(&mut self, node: Rc<RefCell<ListNode>>) {
8003522c:	27bdff70 	addiu	sp,sp,-144
80035230:	afbf008c 	sw	ra,140(sp)
80035234:	afa40028 	sw	a0,40(sp)
80035238:	afa5002c 	sw	a1,44(sp)
8003523c:	afa40058 	sw	a0,88(sp)
        if self.head.is_none() {
80035240:	0c0097a9 	jal	80025ea4 <_ZN4core6option15Option$LT$T$GT$7is_none17hafeb14e2054c522cE>
80035244:	00000000 	nop
80035248:	14400064 	bnez	v0,800353dc <_ZN8mos_65024util16DoubleLinkedList14insert_to_tail17h289aeba59114fbe3E+0x1b0>
8003524c:	00000000 	nop
80035250:	0800d496 	j	80035258 <_ZN8mos_65024util16DoubleLinkedList14insert_to_tail17h289aeba59114fbe3E+0x2c>
80035254:	00000000 	nop
            self.head = Some(node.clone());
            self.tail = Some(node);
        } else {
            let tail = self.tail.take().unwrap();
80035258:	8fa10028 	lw	at,40(sp)
8003525c:	24240004 	addiu	a0,at,4
80035260:	0c009642 	jal	80025908 <_ZN4core6option15Option$LT$T$GT$4take17h8fd090c9ed58132bE>
80035264:	00000000 	nop
80035268:	afa2005c 	sw	v0,92(sp)
        match self {
8003526c:	8fa1005c 	lw	at,92(sp)
80035270:	14200007 	bnez	at,80035290 <_ZN8mos_65024util16DoubleLinkedList14insert_to_tail17h289aeba59114fbe3E+0x64>
80035274:	00000000 	nop
80035278:	0800d4a0 	j	80035280 <_ZN8mos_65024util16DoubleLinkedList14insert_to_tail17h289aeba59114fbe3E+0x54>
8003527c:	00000000 	nop
            None => unwrap_failed(),
80035280:	3c018105 	lui	at,0x8105
80035284:	24240658 	addiu	a0,at,1624
80035288:	0c00fab9 	jal	8003eae4 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
8003528c:	00000000 	nop
            Some(val) => val,
80035290:	8fa1005c 	lw	at,92(sp)
80035294:	afa10060 	sw	at,96(sp)
80035298:	afa10038 	sw	at,56(sp)
8003529c:	27a4002c 	addiu	a0,sp,44
800352a0:	afa40018 	sw	a0,24(sp)
            tail.borrow_mut().next = Some(node.clone());
800352a4:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
800352a8:	00000000 	nop
800352ac:	afa2003c 	sw	v0,60(sp)
800352b0:	27a10038 	addiu	at,sp,56
800352b4:	afa10024 	sw	at,36(sp)
800352b8:	afa10078 	sw	at,120(sp)
800352bc:	afa1007c 	sw	at,124(sp)
800352c0:	afa10080 	sw	at,128(sp)
800352c4:	8fa10038 	lw	at,56(sp)
800352c8:	afa10088 	sw	at,136(sp)
800352cc:	afa10084 	sw	at,132(sp)
800352d0:	24240008 	addiu	a0,at,8
800352d4:	3c018105 	lui	at,0x8105
800352d8:	24250668 	addiu	a1,at,1640
800352dc:	0c008f30 	jal	80023cc0 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE>
800352e0:	00000000 	nop
800352e4:	afa20040 	sw	v0,64(sp)
800352e8:	afa30044 	sw	v1,68(sp)
800352ec:	27a40040 	addiu	a0,sp,64
800352f0:	afa40014 	sw	a0,20(sp)
800352f4:	0c00aaa7 	jal	8002aa9c <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf189c7d970994794E>
800352f8:	00000000 	nop
800352fc:	00402025 	move	a0,v0
80035300:	afa40010 	sw	a0,16(sp)
80035304:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035308:	00000000 	nop
8003530c:	8fa20010 	lw	v0,16(sp)
80035310:	8fa40014 	lw	a0,20(sp)
80035314:	8fa1003c 	lw	at,60(sp)
80035318:	ac410000 	sw	at,0(v0)
8003531c:	0c008c8c 	jal	80023230 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17h8c006c6811ce4a49E>
80035320:	00000000 	nop
80035324:	8fa40024 	lw	a0,36(sp)
            node.borrow_mut().prev = Some(tail.clone());
80035328:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
8003532c:	00000000 	nop
80035330:	8fa10018 	lw	at,24(sp)
80035334:	afa20048 	sw	v0,72(sp)
80035338:	afa10064 	sw	at,100(sp)
8003533c:	afa10068 	sw	at,104(sp)
80035340:	afa1006c 	sw	at,108(sp)
80035344:	8fa1002c 	lw	at,44(sp)
80035348:	afa10074 	sw	at,116(sp)
8003534c:	afa10070 	sw	at,112(sp)
80035350:	24240008 	addiu	a0,at,8
80035354:	3c018105 	lui	at,0x8105
80035358:	24250678 	addiu	a1,at,1656
8003535c:	0c008f30 	jal	80023cc0 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE>
80035360:	00000000 	nop
80035364:	afa2004c 	sw	v0,76(sp)
80035368:	afa30050 	sw	v1,80(sp)
8003536c:	27a4004c 	addiu	a0,sp,76
80035370:	afa40020 	sw	a0,32(sp)
80035374:	0c00aaa7 	jal	8002aa9c <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf189c7d970994794E>
80035378:	00000000 	nop
8003537c:	afa2001c 	sw	v0,28(sp)
80035380:	24440004 	addiu	a0,v0,4
80035384:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035388:	00000000 	nop
8003538c:	8fa2001c 	lw	v0,28(sp)
80035390:	8fa40020 	lw	a0,32(sp)
80035394:	8fa10048 	lw	at,72(sp)
80035398:	ac410004 	sw	at,4(v0)
8003539c:	0c008c8c 	jal	80023230 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17h8c006c6811ce4a49E>
800353a0:	00000000 	nop
800353a4:	8fa10028 	lw	at,40(sp)
            self.tail = Some(node);
800353a8:	8fa2002c 	lw	v0,44(sp)
800353ac:	afa20054 	sw	v0,84(sp)
800353b0:	24240004 	addiu	a0,at,4
800353b4:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
800353b8:	00000000 	nop
800353bc:	8fa20028 	lw	v0,40(sp)
800353c0:	8fa40024 	lw	a0,36(sp)
800353c4:	8fa10054 	lw	at,84(sp)
800353c8:	ac410004 	sw	at,4(v0)
        }
800353cc:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
800353d0:	00000000 	nop
800353d4:	0800d50b 	j	8003542c <_ZN8mos_65024util16DoubleLinkedList14insert_to_tail17h289aeba59114fbe3E+0x200>
800353d8:	00000000 	nop
800353dc:	27a4002c 	addiu	a0,sp,44
            self.head = Some(node.clone());
800353e0:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
800353e4:	00000000 	nop
800353e8:	8fa40028 	lw	a0,40(sp)
800353ec:	afa20030 	sw	v0,48(sp)
800353f0:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
800353f4:	00000000 	nop
800353f8:	8fa10028 	lw	at,40(sp)
800353fc:	8fa20030 	lw	v0,48(sp)
80035400:	ac220000 	sw	v0,0(at)
            self.tail = Some(node);
80035404:	8fa2002c 	lw	v0,44(sp)
80035408:	afa20034 	sw	v0,52(sp)
8003540c:	24240004 	addiu	a0,at,4
80035410:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035414:	00000000 	nop
80035418:	8fa20028 	lw	v0,40(sp)
8003541c:	8fa10034 	lw	at,52(sp)
80035420:	ac410004 	sw	at,4(v0)
        if self.head.is_none() {
80035424:	0800d50b 	j	8003542c <_ZN8mos_65024util16DoubleLinkedList14insert_to_tail17h289aeba59114fbe3E+0x200>
80035428:	00000000 	nop
    }
8003542c:	8fbf008c 	lw	ra,140(sp)
80035430:	27bd0090 	addiu	sp,sp,144
80035434:	03e00008 	jr	ra
80035438:	00000000 	nop

8003543c <_ZN8mos_65024util16DoubleLinkedList14insert_to_head17he04e3b5f63e49db2E>:
    pub fn insert_to_head(&mut self, node: Rc<RefCell<ListNode>>) {
8003543c:	27bdff70 	addiu	sp,sp,-144
80035440:	afbf008c 	sw	ra,140(sp)
80035444:	afa40028 	sw	a0,40(sp)
80035448:	afa5002c 	sw	a1,44(sp)
8003544c:	afa40058 	sw	a0,88(sp)
        if self.head.is_none() {
80035450:	0c0097a9 	jal	80025ea4 <_ZN4core6option15Option$LT$T$GT$7is_none17hafeb14e2054c522cE>
80035454:	00000000 	nop
80035458:	14400062 	bnez	v0,800355e4 <_ZN8mos_65024util16DoubleLinkedList14insert_to_head17he04e3b5f63e49db2E+0x1a8>
8003545c:	00000000 	nop
80035460:	0800d51a 	j	80035468 <_ZN8mos_65024util16DoubleLinkedList14insert_to_head17he04e3b5f63e49db2E+0x2c>
80035464:	00000000 	nop
            self.head = Some(node.clone());
            self.tail = Some(node);
        } else {
            let head = self.head.take().unwrap();
80035468:	8fa40028 	lw	a0,40(sp)
8003546c:	0c009642 	jal	80025908 <_ZN4core6option15Option$LT$T$GT$4take17h8fd090c9ed58132bE>
80035470:	00000000 	nop
80035474:	afa2005c 	sw	v0,92(sp)
        match self {
80035478:	8fa1005c 	lw	at,92(sp)
8003547c:	14200007 	bnez	at,8003549c <_ZN8mos_65024util16DoubleLinkedList14insert_to_head17he04e3b5f63e49db2E+0x60>
80035480:	00000000 	nop
80035484:	0800d523 	j	8003548c <_ZN8mos_65024util16DoubleLinkedList14insert_to_head17he04e3b5f63e49db2E+0x50>
80035488:	00000000 	nop
            None => unwrap_failed(),
8003548c:	3c018105 	lui	at,0x8105
80035490:	24240688 	addiu	a0,at,1672
80035494:	0c00fab9 	jal	8003eae4 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
80035498:	00000000 	nop
            Some(val) => val,
8003549c:	8fa1005c 	lw	at,92(sp)
800354a0:	afa10060 	sw	at,96(sp)
800354a4:	afa10038 	sw	at,56(sp)
800354a8:	27a4002c 	addiu	a0,sp,44
800354ac:	afa40018 	sw	a0,24(sp)
            head.borrow_mut().prev = Some(node.clone());
800354b0:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
800354b4:	00000000 	nop
800354b8:	afa2003c 	sw	v0,60(sp)
800354bc:	27a10038 	addiu	at,sp,56
800354c0:	afa10024 	sw	at,36(sp)
800354c4:	afa10078 	sw	at,120(sp)
800354c8:	afa1007c 	sw	at,124(sp)
800354cc:	afa10080 	sw	at,128(sp)
800354d0:	8fa10038 	lw	at,56(sp)
800354d4:	afa10088 	sw	at,136(sp)
800354d8:	afa10084 	sw	at,132(sp)
800354dc:	24240008 	addiu	a0,at,8
800354e0:	3c018105 	lui	at,0x8105
800354e4:	24250698 	addiu	a1,at,1688
800354e8:	0c008f30 	jal	80023cc0 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE>
800354ec:	00000000 	nop
800354f0:	afa20040 	sw	v0,64(sp)
800354f4:	afa30044 	sw	v1,68(sp)
800354f8:	27a40040 	addiu	a0,sp,64
800354fc:	afa40014 	sw	a0,20(sp)
80035500:	0c00aaa7 	jal	8002aa9c <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf189c7d970994794E>
80035504:	00000000 	nop
80035508:	afa20010 	sw	v0,16(sp)
8003550c:	24440004 	addiu	a0,v0,4
80035510:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035514:	00000000 	nop
80035518:	8fa20010 	lw	v0,16(sp)
8003551c:	8fa40014 	lw	a0,20(sp)
80035520:	8fa1003c 	lw	at,60(sp)
80035524:	ac410004 	sw	at,4(v0)
80035528:	0c008c8c 	jal	80023230 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17h8c006c6811ce4a49E>
8003552c:	00000000 	nop
80035530:	8fa40024 	lw	a0,36(sp)
            node.borrow_mut().next = Some(head.clone());
80035534:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
80035538:	00000000 	nop
8003553c:	8fa10018 	lw	at,24(sp)
80035540:	afa20048 	sw	v0,72(sp)
80035544:	afa10064 	sw	at,100(sp)
80035548:	afa10068 	sw	at,104(sp)
8003554c:	afa1006c 	sw	at,108(sp)
80035550:	8fa1002c 	lw	at,44(sp)
80035554:	afa10074 	sw	at,116(sp)
80035558:	afa10070 	sw	at,112(sp)
8003555c:	24240008 	addiu	a0,at,8
80035560:	3c018105 	lui	at,0x8105
80035564:	242506a8 	addiu	a1,at,1704
80035568:	0c008f30 	jal	80023cc0 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE>
8003556c:	00000000 	nop
80035570:	afa2004c 	sw	v0,76(sp)
80035574:	afa30050 	sw	v1,80(sp)
80035578:	27a4004c 	addiu	a0,sp,76
8003557c:	afa40020 	sw	a0,32(sp)
80035580:	0c00aaa7 	jal	8002aa9c <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf189c7d970994794E>
80035584:	00000000 	nop
80035588:	00402025 	move	a0,v0
8003558c:	afa4001c 	sw	a0,28(sp)
80035590:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035594:	00000000 	nop
80035598:	8fa2001c 	lw	v0,28(sp)
8003559c:	8fa40020 	lw	a0,32(sp)
800355a0:	8fa10048 	lw	at,72(sp)
800355a4:	ac410000 	sw	at,0(v0)
800355a8:	0c008c8c 	jal	80023230 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17h8c006c6811ce4a49E>
800355ac:	00000000 	nop
800355b0:	8fa40028 	lw	a0,40(sp)
            self.head = Some(node);
800355b4:	8fa1002c 	lw	at,44(sp)
800355b8:	afa10054 	sw	at,84(sp)
800355bc:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
800355c0:	00000000 	nop
800355c4:	8fa20028 	lw	v0,40(sp)
800355c8:	8fa40024 	lw	a0,36(sp)
800355cc:	8fa10054 	lw	at,84(sp)
800355d0:	ac410000 	sw	at,0(v0)
        }
800355d4:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
800355d8:	00000000 	nop
800355dc:	0800d58d 	j	80035634 <_ZN8mos_65024util16DoubleLinkedList14insert_to_head17he04e3b5f63e49db2E+0x1f8>
800355e0:	00000000 	nop
800355e4:	27a4002c 	addiu	a0,sp,44
            self.head = Some(node.clone());
800355e8:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
800355ec:	00000000 	nop
800355f0:	8fa40028 	lw	a0,40(sp)
800355f4:	afa20030 	sw	v0,48(sp)
800355f8:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
800355fc:	00000000 	nop
80035600:	8fa10028 	lw	at,40(sp)
80035604:	8fa20030 	lw	v0,48(sp)
80035608:	ac220000 	sw	v0,0(at)
            self.tail = Some(node);
8003560c:	8fa2002c 	lw	v0,44(sp)
80035610:	afa20034 	sw	v0,52(sp)
80035614:	24240004 	addiu	a0,at,4
80035618:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
8003561c:	00000000 	nop
80035620:	8fa20028 	lw	v0,40(sp)
80035624:	8fa10034 	lw	at,52(sp)
80035628:	ac410004 	sw	at,4(v0)
        if self.head.is_none() {
8003562c:	0800d58d 	j	80035634 <_ZN8mos_65024util16DoubleLinkedList14insert_to_head17he04e3b5f63e49db2E+0x1f8>
80035630:	00000000 	nop
    }
80035634:	8fbf008c 	lw	ra,140(sp)
80035638:	27bd0090 	addiu	sp,sp,144
8003563c:	03e00008 	jr	ra
80035640:	00000000 	nop

80035644 <_ZN8mos_65024util16DoubleLinkedList4push17hb8d2053113fa2c42E>:
    pub fn push(&mut self, node: Rc<RefCell<ListNode>>) {
80035644:	27bdff70 	addiu	sp,sp,-144
80035648:	afbf008c 	sw	ra,140(sp)
8003564c:	afa40028 	sw	a0,40(sp)
80035650:	afa5002c 	sw	a1,44(sp)
80035654:	afa40058 	sw	a0,88(sp)
        if self.head.is_none() {
80035658:	0c0097a9 	jal	80025ea4 <_ZN4core6option15Option$LT$T$GT$7is_none17hafeb14e2054c522cE>
8003565c:	00000000 	nop
80035660:	14400064 	bnez	v0,800357f4 <_ZN8mos_65024util16DoubleLinkedList4push17hb8d2053113fa2c42E+0x1b0>
80035664:	00000000 	nop
80035668:	0800d59c 	j	80035670 <_ZN8mos_65024util16DoubleLinkedList4push17hb8d2053113fa2c42E+0x2c>
8003566c:	00000000 	nop
            self.head = Some(node.clone());
            self.tail = Some(node);
        } else {
            let tail = self.tail.take().unwrap();
80035670:	8fa10028 	lw	at,40(sp)
80035674:	24240004 	addiu	a0,at,4
80035678:	0c009642 	jal	80025908 <_ZN4core6option15Option$LT$T$GT$4take17h8fd090c9ed58132bE>
8003567c:	00000000 	nop
80035680:	afa2005c 	sw	v0,92(sp)
        match self {
80035684:	8fa1005c 	lw	at,92(sp)
80035688:	14200007 	bnez	at,800356a8 <_ZN8mos_65024util16DoubleLinkedList4push17hb8d2053113fa2c42E+0x64>
8003568c:	00000000 	nop
80035690:	0800d5a6 	j	80035698 <_ZN8mos_65024util16DoubleLinkedList4push17hb8d2053113fa2c42E+0x54>
80035694:	00000000 	nop
            None => unwrap_failed(),
80035698:	3c018105 	lui	at,0x8105
8003569c:	242406b8 	addiu	a0,at,1720
800356a0:	0c00fab9 	jal	8003eae4 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
800356a4:	00000000 	nop
            Some(val) => val,
800356a8:	8fa1005c 	lw	at,92(sp)
800356ac:	afa10060 	sw	at,96(sp)
800356b0:	afa10038 	sw	at,56(sp)
800356b4:	27a4002c 	addiu	a0,sp,44
800356b8:	afa40018 	sw	a0,24(sp)
            tail.borrow_mut().next = Some(node.clone());
800356bc:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
800356c0:	00000000 	nop
800356c4:	afa2003c 	sw	v0,60(sp)
800356c8:	27a10038 	addiu	at,sp,56
800356cc:	afa10024 	sw	at,36(sp)
800356d0:	afa10078 	sw	at,120(sp)
800356d4:	afa1007c 	sw	at,124(sp)
800356d8:	afa10080 	sw	at,128(sp)
800356dc:	8fa10038 	lw	at,56(sp)
800356e0:	afa10088 	sw	at,136(sp)
800356e4:	afa10084 	sw	at,132(sp)
800356e8:	24240008 	addiu	a0,at,8
800356ec:	3c018105 	lui	at,0x8105
800356f0:	242506c8 	addiu	a1,at,1736
800356f4:	0c008f30 	jal	80023cc0 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE>
800356f8:	00000000 	nop
800356fc:	afa20040 	sw	v0,64(sp)
80035700:	afa30044 	sw	v1,68(sp)
80035704:	27a40040 	addiu	a0,sp,64
80035708:	afa40014 	sw	a0,20(sp)
8003570c:	0c00aaa7 	jal	8002aa9c <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf189c7d970994794E>
80035710:	00000000 	nop
80035714:	00402025 	move	a0,v0
80035718:	afa40010 	sw	a0,16(sp)
8003571c:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035720:	00000000 	nop
80035724:	8fa20010 	lw	v0,16(sp)
80035728:	8fa40014 	lw	a0,20(sp)
8003572c:	8fa1003c 	lw	at,60(sp)
80035730:	ac410000 	sw	at,0(v0)
80035734:	0c008c8c 	jal	80023230 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17h8c006c6811ce4a49E>
80035738:	00000000 	nop
8003573c:	8fa40024 	lw	a0,36(sp)
            node.borrow_mut().prev = Some(tail.clone());
80035740:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
80035744:	00000000 	nop
80035748:	8fa10018 	lw	at,24(sp)
8003574c:	afa20048 	sw	v0,72(sp)
80035750:	afa10064 	sw	at,100(sp)
80035754:	afa10068 	sw	at,104(sp)
80035758:	afa1006c 	sw	at,108(sp)
8003575c:	8fa1002c 	lw	at,44(sp)
80035760:	afa10074 	sw	at,116(sp)
80035764:	afa10070 	sw	at,112(sp)
80035768:	24240008 	addiu	a0,at,8
8003576c:	3c018105 	lui	at,0x8105
80035770:	242506d8 	addiu	a1,at,1752
80035774:	0c008f30 	jal	80023cc0 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE>
80035778:	00000000 	nop
8003577c:	afa2004c 	sw	v0,76(sp)
80035780:	afa30050 	sw	v1,80(sp)
80035784:	27a4004c 	addiu	a0,sp,76
80035788:	afa40020 	sw	a0,32(sp)
8003578c:	0c00aaa7 	jal	8002aa9c <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf189c7d970994794E>
80035790:	00000000 	nop
80035794:	afa2001c 	sw	v0,28(sp)
80035798:	24440004 	addiu	a0,v0,4
8003579c:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
800357a0:	00000000 	nop
800357a4:	8fa2001c 	lw	v0,28(sp)
800357a8:	8fa40020 	lw	a0,32(sp)
800357ac:	8fa10048 	lw	at,72(sp)
800357b0:	ac410004 	sw	at,4(v0)
800357b4:	0c008c8c 	jal	80023230 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17h8c006c6811ce4a49E>
800357b8:	00000000 	nop
800357bc:	8fa10028 	lw	at,40(sp)
            self.tail = Some(node);
800357c0:	8fa2002c 	lw	v0,44(sp)
800357c4:	afa20054 	sw	v0,84(sp)
800357c8:	24240004 	addiu	a0,at,4
800357cc:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
800357d0:	00000000 	nop
800357d4:	8fa20028 	lw	v0,40(sp)
800357d8:	8fa40024 	lw	a0,36(sp)
800357dc:	8fa10054 	lw	at,84(sp)
800357e0:	ac410004 	sw	at,4(v0)
        }
800357e4:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
800357e8:	00000000 	nop
800357ec:	0800d611 	j	80035844 <_ZN8mos_65024util16DoubleLinkedList4push17hb8d2053113fa2c42E+0x200>
800357f0:	00000000 	nop
800357f4:	27a4002c 	addiu	a0,sp,44
            self.head = Some(node.clone());
800357f8:	0c00a911 	jal	8002a444 <_ZN65_$LT$alloc..rc..Rc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hc26a7788442d1e16E>
800357fc:	00000000 	nop
80035800:	8fa40028 	lw	a0,40(sp)
80035804:	afa20030 	sw	v0,48(sp)
80035808:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
8003580c:	00000000 	nop
80035810:	8fa10028 	lw	at,40(sp)
80035814:	8fa20030 	lw	v0,48(sp)
80035818:	ac220000 	sw	v0,0(at)
            self.tail = Some(node);
8003581c:	8fa2002c 	lw	v0,44(sp)
80035820:	afa20034 	sw	v0,52(sp)
80035824:	24240004 	addiu	a0,at,4
80035828:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
8003582c:	00000000 	nop
80035830:	8fa20028 	lw	v0,40(sp)
80035834:	8fa10034 	lw	at,52(sp)
80035838:	ac410004 	sw	at,4(v0)
        if self.head.is_none() {
8003583c:	0800d611 	j	80035844 <_ZN8mos_65024util16DoubleLinkedList4push17hb8d2053113fa2c42E+0x200>
80035840:	00000000 	nop
    }
80035844:	8fbf008c 	lw	ra,140(sp)
80035848:	27bd0090 	addiu	sp,sp,144
8003584c:	03e00008 	jr	ra
80035850:	00000000 	nop

80035854 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E>:
    pub fn remove(&mut self, node: Rc<RefCell<ListNode>>) {
80035854:	27bdfed8 	addiu	sp,sp,-296
80035858:	afbf0124 	sw	ra,292(sp)
8003585c:	afa40038 	sw	a0,56(sp)
80035860:	afa50048 	sw	a1,72(sp)
80035864:	afa400a8 	sw	a0,168(sp)
80035868:	24010000 	li	at,0
        let prev = node.borrow().prev.clone();
8003586c:	a3a000a6 	sb	zero,166(sp)
80035870:	a3a000a7 	sb	zero,167(sp)
80035874:	27a10048 	addiu	at,sp,72
80035878:	afa10040 	sw	at,64(sp)
8003587c:	afa10110 	sw	at,272(sp)
80035880:	afa10114 	sw	at,276(sp)
80035884:	afa10118 	sw	at,280(sp)
80035888:	8fa10048 	lw	at,72(sp)
8003588c:	afa10120 	sw	at,288(sp)
80035890:	afa1011c 	sw	at,284(sp)
80035894:	24240008 	addiu	a0,at,8
80035898:	3c018105 	lui	at,0x8105
8003589c:	242506e8 	addiu	a1,at,1768
800358a0:	0c008fb1 	jal	80023ec4 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h31d02da70f533516E>
800358a4:	00000000 	nop
800358a8:	afa20050 	sw	v0,80(sp)
800358ac:	afa30054 	sw	v1,84(sp)
800358b0:	27a40050 	addiu	a0,sp,80
800358b4:	afa4003c 	sw	a0,60(sp)
800358b8:	0c00a9a2 	jal	8002a688 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h12904436a148d5f6E>
800358bc:	00000000 	nop
800358c0:	24440004 	addiu	a0,v0,4
800358c4:	0c00a9d9 	jal	8002a764 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7ab004467531be1eE>
800358c8:	00000000 	nop
800358cc:	8fa4003c 	lw	a0,60(sp)
800358d0:	afa2004c 	sw	v0,76(sp)
800358d4:	0c008c03 	jal	8002300c <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d4641e92d4d8a17E>
800358d8:	00000000 	nop
800358dc:	8fa10040 	lw	at,64(sp)
800358e0:	afa100fc 	sw	at,252(sp)
800358e4:	afa10100 	sw	at,256(sp)
800358e8:	afa10104 	sw	at,260(sp)
800358ec:	8fa10048 	lw	at,72(sp)
800358f0:	afa1010c 	sw	at,268(sp)
800358f4:	afa10108 	sw	at,264(sp)
800358f8:	24240008 	addiu	a0,at,8
        let next = node.borrow().next.clone();
800358fc:	3c018105 	lui	at,0x8105
80035900:	242506f8 	addiu	a1,at,1784
80035904:	0c008fb1 	jal	80023ec4 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h31d02da70f533516E>
80035908:	00000000 	nop
8003590c:	afa2005c 	sw	v0,92(sp)
80035910:	afa30060 	sw	v1,96(sp)
80035914:	27a4005c 	addiu	a0,sp,92
80035918:	afa40044 	sw	a0,68(sp)
8003591c:	0c00a9a2 	jal	8002a688 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h12904436a148d5f6E>
80035920:	00000000 	nop
80035924:	00402025 	move	a0,v0
80035928:	0c00a9d9 	jal	8002a764 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7ab004467531be1eE>
8003592c:	00000000 	nop
80035930:	8fa40044 	lw	a0,68(sp)
80035934:	afa20058 	sw	v0,88(sp)
80035938:	0c008c03 	jal	8002300c <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d4641e92d4d8a17E>
8003593c:	00000000 	nop
80035940:	27a4004c 	addiu	a0,sp,76
        if prev.clone().is_none() && next.clone().is_none() {
80035944:	0c00a9d9 	jal	8002a764 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7ab004467531be1eE>
80035948:	00000000 	nop
8003594c:	afa20064 	sw	v0,100(sp)
80035950:	27a40064 	addiu	a0,sp,100
80035954:	0c0097a9 	jal	80025ea4 <_ZN4core6option15Option$LT$T$GT$7is_none17hafeb14e2054c522cE>
80035958:	00000000 	nop
8003595c:	14400008 	bnez	v0,80035980 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x12c>
80035960:	00000000 	nop
80035964:	0800d65b 	j	8003596c <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x118>
80035968:	00000000 	nop
8003596c:	27a40064 	addiu	a0,sp,100
80035970:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035974:	00000000 	nop
80035978:	0800d66e 	j	800359b8 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x164>
8003597c:	00000000 	nop
80035980:	27a40064 	addiu	a0,sp,100
80035984:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035988:	00000000 	nop
8003598c:	27a40058 	addiu	a0,sp,88
80035990:	0c00a9d9 	jal	8002a764 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7ab004467531be1eE>
80035994:	00000000 	nop
80035998:	afa20068 	sw	v0,104(sp)
8003599c:	27a40068 	addiu	a0,sp,104
800359a0:	0c0097a9 	jal	80025ea4 <_ZN4core6option15Option$LT$T$GT$7is_none17hafeb14e2054c522cE>
800359a4:	00000000 	nop
800359a8:	14400013 	bnez	v0,800359f8 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x1a4>
800359ac:	00000000 	nop
800359b0:	0800d679 	j	800359e4 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x190>
800359b4:	00000000 	nop
800359b8:	27a4004c 	addiu	a0,sp,76
            return;
        }
        if let Some(prev) = prev.clone() {
800359bc:	0c00a9d9 	jal	8002a764 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7ab004467531be1eE>
800359c0:	00000000 	nop
800359c4:	afa2006c 	sw	v0,108(sp)
800359c8:	24010001 	li	at,1
800359cc:	a3a100a6 	sb	at,166(sp)
800359d0:	8fa1006c 	lw	at,108(sp)
800359d4:	14200016 	bnez	at,80035a30 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x1dc>
800359d8:	00000000 	nop
800359dc:	0800d6af 	j	80035abc <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x268>
800359e0:	00000000 	nop
800359e4:	27a40068 	addiu	a0,sp,104
        if prev.clone().is_none() && next.clone().is_none() {
800359e8:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
800359ec:	00000000 	nop
800359f0:	0800d66e 	j	800359b8 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x164>
800359f4:	00000000 	nop
800359f8:	27a40068 	addiu	a0,sp,104
800359fc:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035a00:	00000000 	nop
80035a04:	27a40058 	addiu	a0,sp,88
        } else {
            self.tail.clone_from(&prev);
        }
        node.borrow_mut().next = None;
        node.borrow_mut().prev = None;
    }
80035a08:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035a0c:	00000000 	nop
80035a10:	27a4004c 	addiu	a0,sp,76
80035a14:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035a18:	00000000 	nop
80035a1c:	27a40048 	addiu	a0,sp,72
80035a20:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
80035a24:	00000000 	nop
80035a28:	0800d754 	j	80035d50 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x4fc>
80035a2c:	00000000 	nop
80035a30:	24010000 	li	at,0
        if let Some(prev) = prev.clone() {
80035a34:	a3a000a6 	sb	zero,166(sp)
80035a38:	8fa1006c 	lw	at,108(sp)
80035a3c:	afa10070 	sw	at,112(sp)
80035a40:	27a10070 	addiu	at,sp,112
80035a44:	afa10034 	sw	at,52(sp)
80035a48:	afa100e8 	sw	at,232(sp)
80035a4c:	afa100ec 	sw	at,236(sp)
80035a50:	afa100f0 	sw	at,240(sp)
80035a54:	8fa10070 	lw	at,112(sp)
80035a58:	afa100f8 	sw	at,248(sp)
80035a5c:	afa100f4 	sw	at,244(sp)
80035a60:	24240008 	addiu	a0,at,8
            prev.borrow_mut().next.clone_from(&next);
80035a64:	3c018105 	lui	at,0x8105
80035a68:	24250708 	addiu	a1,at,1800
80035a6c:	0c008f30 	jal	80023cc0 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE>
80035a70:	00000000 	nop
80035a74:	afa20074 	sw	v0,116(sp)
80035a78:	afa30078 	sw	v1,120(sp)
80035a7c:	27a40074 	addiu	a0,sp,116
80035a80:	afa40030 	sw	a0,48(sp)
80035a84:	0c00aaa7 	jal	8002aa9c <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf189c7d970994794E>
80035a88:	00000000 	nop
80035a8c:	00402025 	move	a0,v0
80035a90:	27a50058 	addiu	a1,sp,88
80035a94:	0c00a9ab 	jal	8002a6ac <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17h6d82a43283a3f258E>
80035a98:	00000000 	nop
80035a9c:	8fa40030 	lw	a0,48(sp)
80035aa0:	0c008c8c 	jal	80023230 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17h8c006c6811ce4a49E>
80035aa4:	00000000 	nop
80035aa8:	8fa40034 	lw	a0,52(sp)
        } else {
80035aac:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
80035ab0:	00000000 	nop
80035ab4:	0800d6b5 	j	80035ad4 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x280>
80035ab8:	00000000 	nop
            self.head.clone_from(&next);
80035abc:	8fa40038 	lw	a0,56(sp)
80035ac0:	27a50058 	addiu	a1,sp,88
80035ac4:	0c00a9ab 	jal	8002a6ac <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17h6d82a43283a3f258E>
80035ac8:	00000000 	nop
80035acc:	0800d6b5 	j	80035ad4 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x280>
80035ad0:	00000000 	nop
        }
80035ad4:	8fa1006c 	lw	at,108(sp)
80035ad8:	10200009 	beqz	at,80035b00 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x2ac>
80035adc:	00000000 	nop
80035ae0:	0800d6ba 	j	80035ae8 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x294>
80035ae4:	00000000 	nop
80035ae8:	93a100a6 	lbu	at,166(sp)
80035aec:	30210001 	andi	at,at,0x1
80035af0:	14200010 	bnez	at,80035b34 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x2e0>
80035af4:	00000000 	nop
80035af8:	0800d6c0 	j	80035b00 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x2ac>
80035afc:	00000000 	nop
80035b00:	24010000 	li	at,0
80035b04:	a3a000a6 	sb	zero,166(sp)
80035b08:	27a40058 	addiu	a0,sp,88
        if let Some(next) = next.clone() {
80035b0c:	0c00a9d9 	jal	8002a764 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7ab004467531be1eE>
80035b10:	00000000 	nop
80035b14:	afa2007c 	sw	v0,124(sp)
80035b18:	24010001 	li	at,1
80035b1c:	a3a100a7 	sb	at,167(sp)
80035b20:	8fa1007c 	lw	at,124(sp)
80035b24:	14200008 	bnez	at,80035b48 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x2f4>
80035b28:	00000000 	nop
80035b2c:	0800d6f5 	j	80035bd4 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x380>
80035b30:	00000000 	nop
80035b34:	27a4006c 	addiu	a0,sp,108
        }
80035b38:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
80035b3c:	00000000 	nop
80035b40:	0800d6c0 	j	80035b00 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x2ac>
80035b44:	00000000 	nop
80035b48:	24010000 	li	at,0
        if let Some(next) = next.clone() {
80035b4c:	a3a000a7 	sb	zero,167(sp)
80035b50:	8fa1007c 	lw	at,124(sp)
80035b54:	afa10080 	sw	at,128(sp)
80035b58:	27a10080 	addiu	at,sp,128
80035b5c:	afa1002c 	sw	at,44(sp)
80035b60:	afa100d4 	sw	at,212(sp)
80035b64:	afa100d8 	sw	at,216(sp)
80035b68:	afa100dc 	sw	at,220(sp)
80035b6c:	8fa10080 	lw	at,128(sp)
80035b70:	afa100e4 	sw	at,228(sp)
80035b74:	afa100e0 	sw	at,224(sp)
80035b78:	24240008 	addiu	a0,at,8
            next.borrow_mut().prev.clone_from(&prev);
80035b7c:	3c018105 	lui	at,0x8105
80035b80:	24250718 	addiu	a1,at,1816
80035b84:	0c008f30 	jal	80023cc0 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE>
80035b88:	00000000 	nop
80035b8c:	afa20084 	sw	v0,132(sp)
80035b90:	afa30088 	sw	v1,136(sp)
80035b94:	27a40084 	addiu	a0,sp,132
80035b98:	afa40028 	sw	a0,40(sp)
80035b9c:	0c00aaa7 	jal	8002aa9c <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf189c7d970994794E>
80035ba0:	00000000 	nop
80035ba4:	24440004 	addiu	a0,v0,4
80035ba8:	27a5004c 	addiu	a1,sp,76
80035bac:	0c00a9ab 	jal	8002a6ac <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17h6d82a43283a3f258E>
80035bb0:	00000000 	nop
80035bb4:	8fa40028 	lw	a0,40(sp)
80035bb8:	0c008c8c 	jal	80023230 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17h8c006c6811ce4a49E>
80035bbc:	00000000 	nop
80035bc0:	8fa4002c 	lw	a0,44(sp)
        } else {
80035bc4:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
80035bc8:	00000000 	nop
80035bcc:	0800d6fc 	j	80035bf0 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x39c>
80035bd0:	00000000 	nop
            self.tail.clone_from(&prev);
80035bd4:	8fa10038 	lw	at,56(sp)
80035bd8:	24240004 	addiu	a0,at,4
80035bdc:	27a5004c 	addiu	a1,sp,76
80035be0:	0c00a9ab 	jal	8002a6ac <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17h6d82a43283a3f258E>
80035be4:	00000000 	nop
80035be8:	0800d6fc 	j	80035bf0 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x39c>
80035bec:	00000000 	nop
        }
80035bf0:	8fa1007c 	lw	at,124(sp)
80035bf4:	10200009 	beqz	at,80035c1c <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x3c8>
80035bf8:	00000000 	nop
80035bfc:	0800d701 	j	80035c04 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x3b0>
80035c00:	00000000 	nop
80035c04:	93a100a7 	lbu	at,167(sp)
80035c08:	30210001 	andi	at,at,0x1
80035c0c:	1420004b 	bnez	at,80035d3c <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x4e8>
80035c10:	00000000 	nop
80035c14:	0800d707 	j	80035c1c <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x3c8>
80035c18:	00000000 	nop
80035c1c:	24010000 	li	at,0
80035c20:	a3a000a7 	sb	zero,167(sp)
        node.borrow_mut().next = None;
80035c24:	afa0008c 	sw	zero,140(sp)
80035c28:	27a10048 	addiu	at,sp,72
80035c2c:	afa10024 	sw	at,36(sp)
80035c30:	afa100c0 	sw	at,192(sp)
80035c34:	afa100c4 	sw	at,196(sp)
80035c38:	afa100c8 	sw	at,200(sp)
80035c3c:	8fa10048 	lw	at,72(sp)
80035c40:	afa100d0 	sw	at,208(sp)
80035c44:	afa100cc 	sw	at,204(sp)
80035c48:	24240008 	addiu	a0,at,8
80035c4c:	3c018105 	lui	at,0x8105
80035c50:	24250728 	addiu	a1,at,1832
80035c54:	0c008f30 	jal	80023cc0 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE>
80035c58:	00000000 	nop
80035c5c:	afa20090 	sw	v0,144(sp)
80035c60:	afa30094 	sw	v1,148(sp)
80035c64:	27a40090 	addiu	a0,sp,144
80035c68:	afa40018 	sw	a0,24(sp)
80035c6c:	0c00aaa7 	jal	8002aa9c <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf189c7d970994794E>
80035c70:	00000000 	nop
80035c74:	00402025 	move	a0,v0
80035c78:	afa40014 	sw	a0,20(sp)
80035c7c:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035c80:	00000000 	nop
80035c84:	8fa20014 	lw	v0,20(sp)
80035c88:	8fa40018 	lw	a0,24(sp)
80035c8c:	8fa1008c 	lw	at,140(sp)
80035c90:	ac410000 	sw	at,0(v0)
80035c94:	0c008c8c 	jal	80023230 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17h8c006c6811ce4a49E>
80035c98:	00000000 	nop
80035c9c:	8fa10024 	lw	at,36(sp)
        node.borrow_mut().prev = None;
80035ca0:	afa00098 	sw	zero,152(sp)
80035ca4:	afa100ac 	sw	at,172(sp)
80035ca8:	afa100b0 	sw	at,176(sp)
80035cac:	afa100b4 	sw	at,180(sp)
80035cb0:	8fa10048 	lw	at,72(sp)
80035cb4:	afa100bc 	sw	at,188(sp)
80035cb8:	afa100b8 	sw	at,184(sp)
80035cbc:	24240008 	addiu	a0,at,8
80035cc0:	3c018105 	lui	at,0x8105
80035cc4:	24250738 	addiu	a1,at,1848
80035cc8:	0c008f30 	jal	80023cc0 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE>
80035ccc:	00000000 	nop
80035cd0:	afa2009c 	sw	v0,156(sp)
80035cd4:	afa300a0 	sw	v1,160(sp)
80035cd8:	27a4009c 	addiu	a0,sp,156
80035cdc:	afa40020 	sw	a0,32(sp)
80035ce0:	0c00aaa7 	jal	8002aa9c <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf189c7d970994794E>
80035ce4:	00000000 	nop
80035ce8:	afa2001c 	sw	v0,28(sp)
80035cec:	24440004 	addiu	a0,v0,4
80035cf0:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035cf4:	00000000 	nop
80035cf8:	8fa2001c 	lw	v0,28(sp)
80035cfc:	8fa40020 	lw	a0,32(sp)
80035d00:	8fa10098 	lw	at,152(sp)
80035d04:	ac410004 	sw	at,4(v0)
80035d08:	0c008c8c 	jal	80023230 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17h8c006c6811ce4a49E>
80035d0c:	00000000 	nop
80035d10:	27a40058 	addiu	a0,sp,88
    }
80035d14:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035d18:	00000000 	nop
80035d1c:	27a4004c 	addiu	a0,sp,76
80035d20:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035d24:	00000000 	nop
80035d28:	8fa40024 	lw	a0,36(sp)
80035d2c:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
80035d30:	00000000 	nop
80035d34:	0800d754 	j	80035d50 <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x4fc>
80035d38:	00000000 	nop
80035d3c:	27a4007c 	addiu	a0,sp,124
        }
80035d40:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
80035d44:	00000000 	nop
80035d48:	0800d707 	j	80035c1c <_ZN8mos_65024util16DoubleLinkedList6remove17h2dfb12254ca130b1E+0x3c8>
80035d4c:	00000000 	nop
    }
80035d50:	8fbf0124 	lw	ra,292(sp)
80035d54:	27bd0128 	addiu	sp,sp,296
80035d58:	03e00008 	jr	ra
80035d5c:	00000000 	nop

80035d60 <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E>:
    pub fn pop(&mut self) -> Option<Rc<RefCell<ListNode>>> {
80035d60:	27bdff18 	addiu	sp,sp,-232
80035d64:	afbf00e4 	sw	ra,228(sp)
80035d68:	afa4002c 	sw	a0,44(sp)
        self.head.as_ref()?;
80035d6c:	afa40084 	sw	a0,132(sp)
80035d70:	24010000 	li	at,0
80035d74:	a3a00083 	sb	zero,131(sp)
80035d78:	0c009761 	jal	80025d84 <_ZN4core6option15Option$LT$T$GT$6as_ref17he359b4e988ff579bE>
80035d7c:	00000000 	nop
80035d80:	00402025 	move	a0,v0
80035d84:	0c00ab03 	jal	8002ac0c <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h2ba1196ec0920da0E>
80035d88:	00000000 	nop
80035d8c:	afa20038 	sw	v0,56(sp)
80035d90:	8fa10038 	lw	at,56(sp)
80035d94:	10200031 	beqz	at,80035e5c <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E+0xfc>
80035d98:	00000000 	nop
80035d9c:	0800d769 	j	80035da4 <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E+0x44>
80035da0:	00000000 	nop
80035da4:	8fa4002c 	lw	a0,44(sp)
80035da8:	8fa10038 	lw	at,56(sp)
80035dac:	afa10088 	sw	at,136(sp)
        let head = self.head.take().unwrap();
80035db0:	0c009642 	jal	80025908 <_ZN4core6option15Option$LT$T$GT$4take17h8fd090c9ed58132bE>
80035db4:	00000000 	nop
80035db8:	afa2008c 	sw	v0,140(sp)
        match self {
80035dbc:	8fa1008c 	lw	at,140(sp)
80035dc0:	14200007 	bnez	at,80035de0 <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E+0x80>
80035dc4:	00000000 	nop
80035dc8:	0800d774 	j	80035dd0 <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E+0x70>
80035dcc:	00000000 	nop
            None => unwrap_failed(),
80035dd0:	3c018105 	lui	at,0x8105
80035dd4:	24240748 	addiu	a0,at,1864
80035dd8:	0c00fab9 	jal	8003eae4 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
80035ddc:	00000000 	nop
            Some(val) => val,
80035de0:	8fa1008c 	lw	at,140(sp)
80035de4:	afa10090 	sw	at,144(sp)
80035de8:	afa1003c 	sw	at,60(sp)
80035dec:	27a1003c 	addiu	at,sp,60
80035df0:	afa100d0 	sw	at,208(sp)
80035df4:	afa100d4 	sw	at,212(sp)
80035df8:	afa100d8 	sw	at,216(sp)
80035dfc:	8fa1003c 	lw	at,60(sp)
80035e00:	afa100e0 	sw	at,224(sp)
80035e04:	afa100dc 	sw	at,220(sp)
80035e08:	24240008 	addiu	a0,at,8
        if let Some(next) = head.borrow().next.clone() {
80035e0c:	3c018105 	lui	at,0x8105
80035e10:	24250758 	addiu	a1,at,1880
80035e14:	0c008fb1 	jal	80023ec4 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h31d02da70f533516E>
80035e18:	00000000 	nop
80035e1c:	afa20044 	sw	v0,68(sp)
80035e20:	afa30048 	sw	v1,72(sp)
80035e24:	27a40044 	addiu	a0,sp,68
80035e28:	0c00a9a2 	jal	8002a688 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h12904436a148d5f6E>
80035e2c:	00000000 	nop
80035e30:	00402025 	move	a0,v0
80035e34:	0c00a9d9 	jal	8002a764 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7ab004467531be1eE>
80035e38:	00000000 	nop
80035e3c:	afa20040 	sw	v0,64(sp)
80035e40:	24010001 	li	at,1
80035e44:	a3a10083 	sb	at,131(sp)
80035e48:	8fa10040 	lw	at,64(sp)
80035e4c:	14200008 	bnez	at,80035e70 <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E+0x110>
80035e50:	00000000 	nop
80035e54:	0800d7c7 	j	80035f1c <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E+0x1bc>
80035e58:	00000000 	nop
        self.head.as_ref()?;
80035e5c:	0c00ad4a 	jal	8002b528 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h89213f14b212d7bdE>
80035e60:	00000000 	nop
80035e64:	afa20034 	sw	v0,52(sp)
80035e68:	0800d82b 	j	800360ac <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E+0x34c>
80035e6c:	00000000 	nop
80035e70:	24010000 	li	at,0
        if let Some(next) = head.borrow().next.clone() {
80035e74:	a3a00083 	sb	zero,131(sp)
80035e78:	8fa10040 	lw	at,64(sp)
80035e7c:	afa1004c 	sw	at,76(sp)
            next.borrow_mut().prev = None;
80035e80:	afa00050 	sw	zero,80(sp)
80035e84:	27a1004c 	addiu	at,sp,76
80035e88:	afa100bc 	sw	at,188(sp)
80035e8c:	afa100c0 	sw	at,192(sp)
80035e90:	afa100c4 	sw	at,196(sp)
80035e94:	8fa1004c 	lw	at,76(sp)
80035e98:	afa100cc 	sw	at,204(sp)
80035e9c:	afa100c8 	sw	at,200(sp)
80035ea0:	24240008 	addiu	a0,at,8
80035ea4:	3c018105 	lui	at,0x8105
80035ea8:	24250768 	addiu	a1,at,1896
80035eac:	0c008f30 	jal	80023cc0 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE>
80035eb0:	00000000 	nop
80035eb4:	afa20054 	sw	v0,84(sp)
80035eb8:	afa30058 	sw	v1,88(sp)
80035ebc:	27a40054 	addiu	a0,sp,84
80035ec0:	afa40028 	sw	a0,40(sp)
80035ec4:	0c00aaa7 	jal	8002aa9c <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf189c7d970994794E>
80035ec8:	00000000 	nop
80035ecc:	afa20024 	sw	v0,36(sp)
80035ed0:	24440004 	addiu	a0,v0,4
80035ed4:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035ed8:	00000000 	nop
80035edc:	8fa20024 	lw	v0,36(sp)
80035ee0:	8fa40028 	lw	a0,40(sp)
80035ee4:	8fa10050 	lw	at,80(sp)
80035ee8:	ac410004 	sw	at,4(v0)
80035eec:	0c008c8c 	jal	80023230 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17h8c006c6811ce4a49E>
80035ef0:	00000000 	nop
80035ef4:	8fa4002c 	lw	a0,44(sp)
            self.head = Some(next);
80035ef8:	8fa1004c 	lw	at,76(sp)
80035efc:	afa1005c 	sw	at,92(sp)
80035f00:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035f04:	00000000 	nop
80035f08:	8fa2002c 	lw	v0,44(sp)
80035f0c:	8fa1005c 	lw	at,92(sp)
80035f10:	ac410000 	sw	at,0(v0)
        if let Some(next) = head.borrow().next.clone() {
80035f14:	0800d7d7 	j	80035f5c <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E+0x1fc>
80035f18:	00000000 	nop
        } else {
            self.tail = None;
80035f1c:	8fa1002c 	lw	at,44(sp)
80035f20:	afa00060 	sw	zero,96(sp)
80035f24:	24240004 	addiu	a0,at,4
80035f28:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035f2c:	00000000 	nop
80035f30:	8fa4002c 	lw	a0,44(sp)
80035f34:	8fa10060 	lw	at,96(sp)
80035f38:	ac810004 	sw	at,4(a0)
            self.head = None;
80035f3c:	afa00064 	sw	zero,100(sp)
80035f40:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035f44:	00000000 	nop
80035f48:	8fa2002c 	lw	v0,44(sp)
80035f4c:	8fa10064 	lw	at,100(sp)
80035f50:	ac410000 	sw	at,0(v0)
        if let Some(next) = head.borrow().next.clone() {
80035f54:	0800d7d7 	j	80035f5c <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E+0x1fc>
80035f58:	00000000 	nop
        }
80035f5c:	8fa10040 	lw	at,64(sp)
80035f60:	10200009 	beqz	at,80035f88 <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E+0x228>
80035f64:	00000000 	nop
80035f68:	0800d7dc 	j	80035f70 <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E+0x210>
80035f6c:	00000000 	nop
80035f70:	93a10083 	lbu	at,131(sp)
80035f74:	30210001 	andi	at,at,0x1
80035f78:	14200047 	bnez	at,80036098 <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E+0x338>
80035f7c:	00000000 	nop
80035f80:	0800d7e2 	j	80035f88 <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E+0x228>
80035f84:	00000000 	nop
80035f88:	27a40044 	addiu	a0,sp,68
80035f8c:	0c008c03 	jal	8002300c <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d4641e92d4d8a17E>
80035f90:	00000000 	nop
80035f94:	24010000 	li	at,0
80035f98:	a3a00083 	sb	zero,131(sp)
        head.borrow_mut().next = None;
80035f9c:	afa00068 	sw	zero,104(sp)
80035fa0:	27a1003c 	addiu	at,sp,60
80035fa4:	afa10018 	sw	at,24(sp)
80035fa8:	afa100a8 	sw	at,168(sp)
80035fac:	afa100ac 	sw	at,172(sp)
80035fb0:	afa100b0 	sw	at,176(sp)
80035fb4:	8fa1003c 	lw	at,60(sp)
80035fb8:	afa100b8 	sw	at,184(sp)
80035fbc:	afa100b4 	sw	at,180(sp)
80035fc0:	24240008 	addiu	a0,at,8
80035fc4:	3c018105 	lui	at,0x8105
80035fc8:	24250778 	addiu	a1,at,1912
80035fcc:	0c008f30 	jal	80023cc0 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE>
80035fd0:	00000000 	nop
80035fd4:	afa2006c 	sw	v0,108(sp)
80035fd8:	afa30070 	sw	v1,112(sp)
80035fdc:	27a4006c 	addiu	a0,sp,108
80035fe0:	afa40014 	sw	a0,20(sp)
80035fe4:	0c00aaa7 	jal	8002aa9c <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf189c7d970994794E>
80035fe8:	00000000 	nop
80035fec:	00402025 	move	a0,v0
80035ff0:	afa40010 	sw	a0,16(sp)
80035ff4:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
80035ff8:	00000000 	nop
80035ffc:	8fa20010 	lw	v0,16(sp)
80036000:	8fa40014 	lw	a0,20(sp)
80036004:	8fa10068 	lw	at,104(sp)
80036008:	ac410000 	sw	at,0(v0)
8003600c:	0c008c8c 	jal	80023230 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17h8c006c6811ce4a49E>
80036010:	00000000 	nop
80036014:	8fa10018 	lw	at,24(sp)
        head.borrow_mut().prev = None;
80036018:	afa00074 	sw	zero,116(sp)
8003601c:	afa10094 	sw	at,148(sp)
80036020:	afa10098 	sw	at,152(sp)
80036024:	afa1009c 	sw	at,156(sp)
80036028:	8fa1003c 	lw	at,60(sp)
8003602c:	afa100a4 	sw	at,164(sp)
80036030:	afa100a0 	sw	at,160(sp)
80036034:	24240008 	addiu	a0,at,8
80036038:	3c018105 	lui	at,0x8105
8003603c:	24250788 	addiu	a1,at,1928
80036040:	0c008f30 	jal	80023cc0 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h545807dca4e5bebbE>
80036044:	00000000 	nop
80036048:	afa20078 	sw	v0,120(sp)
8003604c:	afa3007c 	sw	v1,124(sp)
80036050:	27a40078 	addiu	a0,sp,120
80036054:	afa40020 	sw	a0,32(sp)
80036058:	0c00aaa7 	jal	8002aa9c <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf189c7d970994794E>
8003605c:	00000000 	nop
80036060:	afa2001c 	sw	v0,28(sp)
80036064:	24440004 	addiu	a0,v0,4
80036068:	0c00870d 	jal	80021c34 <_ZN4core3ptr121drop_in_place$LT$core..option..Option$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hbfc7f77425337e77E>
8003606c:	00000000 	nop
80036070:	8fa2001c 	lw	v0,28(sp)
80036074:	8fa40020 	lw	a0,32(sp)
80036078:	8fa10074 	lw	at,116(sp)
8003607c:	ac410004 	sw	at,4(v0)
80036080:	0c008c8c 	jal	80023230 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17h8c006c6811ce4a49E>
80036084:	00000000 	nop
        Some(head)
80036088:	8fa1003c 	lw	at,60(sp)
8003608c:	afa10034 	sw	at,52(sp)
    }
80036090:	0800d82b 	j	800360ac <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E+0x34c>
80036094:	00000000 	nop
80036098:	27a40040 	addiu	a0,sp,64
        }
8003609c:	0c008e0f 	jal	8002383c <_ZN4core3ptr93drop_in_place$LT$alloc..rc..Rc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h017fae5d755217ccE>
800360a0:	00000000 	nop
800360a4:	0800d7e2 	j	80035f88 <_ZN8mos_65024util16DoubleLinkedList3pop17hd4d1aa8f94a985c4E+0x228>
800360a8:	00000000 	nop
    }
800360ac:	8fa20034 	lw	v0,52(sp)
800360b0:	8fbf00e4 	lw	ra,228(sp)
800360b4:	27bd00e8 	addiu	sp,sp,232
800360b8:	03e00008 	jr	ra
800360bc:	00000000 	nop

800360c0 <memmove>:
    }
    0
}

#[no_mangle]
extern "C" fn memmove(dst: *mut u8, src: *const u8, n: usize) -> *mut u8 {
800360c0:	27bdffa0 	addiu	sp,sp,-96
800360c4:	afa60024 	sw	a2,36(sp)
800360c8:	afa50028 	sw	a1,40(sp)
800360cc:	afa4002c 	sw	a0,44(sp)
800360d0:	afa40034 	sw	a0,52(sp)
800360d4:	afa50038 	sw	a1,56(sp)
800360d8:	afa6003c 	sw	a2,60(sp)
    let mut i = 0;
800360dc:	afa00030 	sw	zero,48(sp)
    if dst < src as *mut u8 {
800360e0:	0085082b 	sltu	at,a0,a1
800360e4:	14200007 	bnez	at,80036104 <memmove+0x44>
800360e8:	00000000 	nop
800360ec:	0800d83d 	j	800360f4 <memmove+0x34>
800360f0:	00000000 	nop
                *dst.add(i) = *src.add(i);
            }
            i += 1;
        }
    } else {
        i = n;
800360f4:	8fa10024 	lw	at,36(sp)
800360f8:	afa10030 	sw	at,48(sp)
        while i > 0 {
800360fc:	0800d848 	j	80036120 <memmove+0x60>
80036100:	00000000 	nop
        while i < n {
80036104:	8fa20024 	lw	v0,36(sp)
80036108:	8fa10030 	lw	at,48(sp)
8003610c:	0022082b 	sltu	at,at,v0
80036110:	1420003f 	bnez	at,80036210 <memmove+0x150>
80036114:	00000000 	nop
80036118:	0800d84d 	j	80036134 <memmove+0x74>
8003611c:	00000000 	nop
        while i > 0 {
80036120:	8fa10030 	lw	at,48(sp)
80036124:	14200007 	bnez	at,80036144 <memmove+0x84>
80036128:	00000000 	nop
8003612c:	0800d84d 	j	80036134 <memmove+0x74>
80036130:	00000000 	nop
            }
            i -= 1;
        }
    }
    dst
}
80036134:	8fa2002c 	lw	v0,44(sp)
80036138:	27bd0060 	addiu	sp,sp,96
8003613c:	03e00008 	jr	ra
80036140:	00000000 	nop
                *dst.add(i - 1) = *src.add(i - 1);
80036144:	8fa10030 	lw	at,48(sp)
80036148:	2422ffff 	addiu	v0,at,-1
8003614c:	afa20020 	sw	v0,32(sp)
80036150:	10200011 	beqz	at,80036198 <memmove+0xd8>
80036154:	00000000 	nop
80036158:	0800d858 	j	80036160 <memmove+0xa0>
8003615c:	00000000 	nop
80036160:	8fa10028 	lw	at,40(sp)
80036164:	8fa20020 	lw	v0,32(sp)
80036168:	afa10058 	sw	at,88(sp)
8003616c:	afa2005c 	sw	v0,92(sp)
        unsafe { intrinsics::offset(self, count) }
80036170:	00220821 	addu	at,at,v0
80036174:	90210000 	lbu	at,0(at)
80036178:	afa10018 	sw	at,24(sp)
8003617c:	8fa10030 	lw	at,48(sp)
80036180:	2422ffff 	addiu	v0,at,-1
80036184:	afa2001c 	sw	v0,28(sp)
80036188:	10200015 	beqz	at,800361e0 <memmove+0x120>
8003618c:	00000000 	nop
80036190:	0800d86a 	j	800361a8 <memmove+0xe8>
80036194:	00000000 	nop
80036198:	3c018105 	lui	at,0x8105
8003619c:	24240798 	addiu	a0,at,1944
800361a0:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800361a4:	00000000 	nop
800361a8:	8fa10018 	lw	at,24(sp)
800361ac:	8fa2002c 	lw	v0,44(sp)
800361b0:	8fa3001c 	lw	v1,28(sp)
800361b4:	afa20048 	sw	v0,72(sp)
800361b8:	afa3004c 	sw	v1,76(sp)
800361bc:	00431021 	addu	v0,v0,v1
800361c0:	a0410000 	sb	at,0(v0)
            i -= 1;
800361c4:	8fa10030 	lw	at,48(sp)
800361c8:	2422ffff 	addiu	v0,at,-1
800361cc:	afa20014 	sw	v0,20(sp)
800361d0:	1020000b 	beqz	at,80036200 <memmove+0x140>
800361d4:	00000000 	nop
800361d8:	0800d87c 	j	800361f0 <memmove+0x130>
800361dc:	00000000 	nop
                *dst.add(i - 1) = *src.add(i - 1);
800361e0:	3c018105 	lui	at,0x8105
800361e4:	242407a8 	addiu	a0,at,1960
800361e8:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800361ec:	00000000 	nop
            i -= 1;
800361f0:	8fa10014 	lw	at,20(sp)
800361f4:	afa10030 	sw	at,48(sp)
        while i > 0 {
800361f8:	0800d848 	j	80036120 <memmove+0x60>
800361fc:	00000000 	nop
            i -= 1;
80036200:	3c018105 	lui	at,0x8105
80036204:	242407b8 	addiu	a0,at,1976
80036208:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003620c:	00000000 	nop
                *dst.add(i) = *src.add(i);
80036210:	8fa2002c 	lw	v0,44(sp)
80036214:	8fa10028 	lw	at,40(sp)
80036218:	8fa30030 	lw	v1,48(sp)
8003621c:	afa10050 	sw	at,80(sp)
80036220:	afa30054 	sw	v1,84(sp)
80036224:	00230821 	addu	at,at,v1
80036228:	90210000 	lbu	at,0(at)
8003622c:	8fa30030 	lw	v1,48(sp)
80036230:	afa20040 	sw	v0,64(sp)
80036234:	afa30044 	sw	v1,68(sp)
80036238:	00431021 	addu	v0,v0,v1
8003623c:	a0410000 	sb	at,0(v0)
            i += 1;
80036240:	8fa10030 	lw	at,48(sp)
80036244:	24210001 	addiu	at,at,1
80036248:	afa10010 	sw	at,16(sp)
8003624c:	10200007 	beqz	at,8003626c <memmove+0x1ac>
80036250:	00000000 	nop
80036254:	0800d897 	j	8003625c <memmove+0x19c>
80036258:	00000000 	nop
8003625c:	8fa10010 	lw	at,16(sp)
80036260:	afa10030 	sw	at,48(sp)
        while i < n {
80036264:	0800d841 	j	80036104 <memmove+0x44>
80036268:	00000000 	nop
            i += 1;
8003626c:	3c018105 	lui	at,0x8105
80036270:	242407c8 	addiu	a0,at,1992
80036274:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80036278:	00000000 	nop

8003627c <_ZN73_$LT$mos_6502..dev..uart..NS16550A$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bec3ccd73d84f44E>:
            fn deref(&self) -> &$T {
8003627c:	27bdffe0 	addiu	sp,sp,-32
80036280:	afbf001c 	sw	ra,28(sp)
80036284:	afa40014 	sw	a0,20(sp)
80036288:	3c018005 	lui	at,0x8005
8003628c:	2424d000 	addiu	a0,at,-12288
80036290:	afa40018 	sw	a0,24(sp)

    #[inline(always)]
    pub fn get<F>(&'static self, builder: F) -> &T
        where F: FnOnce() -> T
    {
        self.0.call_once(builder)
80036294:	0c009c9d 	jal	80027274 <_ZN4spin4once13Once$LT$T$GT$9call_once17hbe9b390bdffbf4ecE>
80036298:	00000000 	nop
                fn __stability() -> &'static $T {
                    __lazy_static_create!(LAZY, $T);
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
8003629c:	8fbf001c 	lw	ra,28(sp)
800362a0:	27bd0020 	addiu	sp,sp,32
800362a4:	03e00008 	jr	ra
800362a8:	00000000 	nop

800362ac <_ZN69_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..cmp..PartialEq$GT$2eq17hb1e03b554bee2b27E>:
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy)]
800362ac:	27bdfff8 	addiu	sp,sp,-8
800362b0:	afa40000 	sw	a0,0(sp)
800362b4:	afa50004 	sw	a1,4(sp)
    pub raw: usize,
800362b8:	8c810000 	lw	at,0(a0)
800362bc:	8ca20000 	lw	v0,0(a1)
800362c0:	00220826 	xor	at,at,v0
800362c4:	2c220001 	sltiu	v0,at,1
800362c8:	27bd0008 	addiu	sp,sp,8
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy)]
800362cc:	03e00008 	jr	ra
800362d0:	00000000 	nop

800362d4 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h3a54b6aedd3b1eedE>:
800362d4:	27bdffe0 	addiu	sp,sp,-32
800362d8:	afbf001c 	sw	ra,28(sp)
800362dc:	afa40014 	sw	a0,20(sp)
800362e0:	afa50018 	sw	a1,24(sp)
    pub raw: usize,
800362e4:	0c0082e5 	jal	80020b94 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$11partial_cmp17hc8d86e4b06ea3c98E>
800362e8:	00000000 	nop
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy)]
800362ec:	8fbf001c 	lw	ra,28(sp)
800362f0:	27bd0020 	addiu	sp,sp,32
800362f4:	03e00008 	jr	ra
800362f8:	00000000 	nop

800362fc <_ZN70_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h19dfa988bbe3451fE>:
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy)]
800362fc:	27bdffe0 	addiu	sp,sp,-32
80036300:	afbf001c 	sw	ra,28(sp)
80036304:	afa40014 	sw	a0,20(sp)
80036308:	afa50018 	sw	a1,24(sp)
    pub raw: usize,
8003630c:	0c0082e5 	jal	80020b94 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$11partial_cmp17hc8d86e4b06ea3c98E>
80036310:	00000000 	nop
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy)]
80036314:	8fbf001c 	lw	ra,28(sp)
80036318:	27bd0020 	addiu	sp,sp,32
8003631c:	03e00008 	jr	ra
80036320:	00000000 	nop

80036324 <_ZN69_$LT$mos_6502..mm..page..PAGES$u20$as$u20$core..ops..deref..Deref$GT$5deref17hac3480edc21cc44bE>:
            fn deref(&self) -> &$T {
80036324:	27bdffe0 	addiu	sp,sp,-32
80036328:	afbf001c 	sw	ra,28(sp)
8003632c:	afa40014 	sw	a0,20(sp)
80036330:	3c018005 	lui	at,0x8005
80036334:	2424d010 	addiu	a0,at,-12272
80036338:	afa40018 	sw	a0,24(sp)
8003633c:	0c00994b 	jal	8002652c <_ZN4spin4once13Once$LT$T$GT$9call_once17h511ad42889be22c0E>
80036340:	00000000 	nop
            }
80036344:	8fbf001c 	lw	ra,28(sp)
80036348:	27bd0020 	addiu	sp,sp,32
8003634c:	03e00008 	jr	ra
80036350:	00000000 	nop

80036354 <_ZN73_$LT$mos_6502..mm..page..PAGE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbb3f532e7bbd7eecE>:
            fn deref(&self) -> &$T {
80036354:	27bdffe0 	addiu	sp,sp,-32
80036358:	afbf001c 	sw	ra,28(sp)
8003635c:	afa40014 	sw	a0,20(sp)
80036360:	3c018005 	lui	at,0x8005
80036364:	2424d028 	addiu	a0,at,-12248
80036368:	afa40018 	sw	a0,24(sp)
8003636c:	0c009e3e 	jal	800278f8 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfc55c03056823b74E>
80036370:	00000000 	nop
            }
80036374:	8fbf001c 	lw	ra,28(sp)
80036378:	27bd0020 	addiu	sp,sp,32
8003637c:	03e00008 	jr	ra
80036380:	00000000 	nop

80036384 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags5empty17hb3cb012822dd7221E>:
    ) => {
        #[allow(dead_code, deprecated, unused_attributes)]
        impl $PublicBitFlags {
            /// Get a flags value with all bits unset.
            #[inline]
            pub const fn empty() -> Self {
80036384:	27bdfff8 	addiu	sp,sp,-8
bitflags::bitflags! {
80036388:	afa00004 	sw	zero,4(sp)
                $empty
            }
8003638c:	8fa20004 	lw	v0,4(sp)
80036390:	27bd0008 	addiu	sp,sp,8
80036394:	03e00008 	jr	ra
80036398:	00000000 	nop

8003639c <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E>:

            /// Get a flags value with all known bits set.
            #[inline]
            pub const fn all() -> Self {
8003639c:	27bdff90 	addiu	sp,sp,-112
800363a0:	afbf006c 	sw	ra,108(sp)
800363a4:	afa00048 	sw	zero,72(sp)
800363a8:	afa0004c 	sw	zero,76(sp)
800363ac:	8fa1004c 	lw	at,76(sp)
800363b0:	afa10044 	sw	at,68(sp)
800363b4:	2c210007 	sltiu	at,at,7
800363b8:	1020001a 	beqz	at,80036424 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x88>
800363bc:	00000000 	nop
800363c0:	0800d8f2 	j	800363c8 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x2c>
800363c4:	00000000 	nop
800363c8:	8fa10044 	lw	at,68(sp)
800363cc:	00011080 	sll	v0,at,0x2
800363d0:	000108c0 	sll	at,at,0x3
800363d4:	00221021 	addu	v0,at,v0
800363d8:	3c018105 	lui	at,0x8105
800363dc:	242108fc 	addiu	at,at,2300
800363e0:	00222021 	addu	a0,at,v0
800363e4:	0c00ad56 	jal	8002b558 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17ha536a7d54990d56bE>
800363e8:	00000000 	nop
800363ec:	00402025 	move	a0,v0
800363f0:	0c00da57 	jal	8003695c <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17h9f25740f31cdf213E>
800363f4:	00000000 	nop
800363f8:	afa20050 	sw	v0,80(sp)
800363fc:	8fa10048 	lw	at,72(sp)
80036400:	00220825 	or	at,at,v0
80036404:	afa10048 	sw	at,72(sp)
80036408:	8fa1004c 	lw	at,76(sp)
8003640c:	24210001 	addiu	at,at,1
80036410:	afa10040 	sw	at,64(sp)
80036414:	10200012 	beqz	at,80036460 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0xc4>
80036418:	00000000 	nop
8003641c:	0800d90f 	j	8003643c <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0xa0>
80036420:	00000000 	nop
80036424:	8fa40044 	lw	a0,68(sp)
80036428:	3c018105 	lui	at,0x8105
8003642c:	24260950 	addiu	a2,at,2384
80036430:	24050007 	li	a1,7
80036434:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80036438:	00000000 	nop
8003643c:	8fa10040 	lw	at,64(sp)
80036440:	afa1004c 	sw	at,76(sp)
80036444:	8fa1004c 	lw	at,76(sp)
80036448:	afa1003c 	sw	at,60(sp)
8003644c:	2c210007 	sltiu	at,at,7
80036450:	14200007 	bnez	at,80036470 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0xd4>
80036454:	00000000 	nop
80036458:	0800d933 	j	800364cc <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x130>
8003645c:	00000000 	nop
80036460:	3c018105 	lui	at,0x8105
80036464:	24240950 	addiu	a0,at,2384
80036468:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003646c:	00000000 	nop
80036470:	8fa1003c 	lw	at,60(sp)
80036474:	00011080 	sll	v0,at,0x2
80036478:	000108c0 	sll	at,at,0x3
8003647c:	00221021 	addu	v0,at,v0
80036480:	3c018105 	lui	at,0x8105
80036484:	242108fc 	addiu	at,at,2300
80036488:	00222021 	addu	a0,at,v0
8003648c:	0c00ad56 	jal	8002b558 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17ha536a7d54990d56bE>
80036490:	00000000 	nop
80036494:	00402025 	move	a0,v0
80036498:	0c00da57 	jal	8003695c <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17h9f25740f31cdf213E>
8003649c:	00000000 	nop
800364a0:	afa20054 	sw	v0,84(sp)
800364a4:	8fa10048 	lw	at,72(sp)
800364a8:	00220825 	or	at,at,v0
800364ac:	afa10048 	sw	at,72(sp)
800364b0:	8fa1004c 	lw	at,76(sp)
800364b4:	24210001 	addiu	at,at,1
800364b8:	afa10038 	sw	at,56(sp)
800364bc:	10200012 	beqz	at,80036508 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x16c>
800364c0:	00000000 	nop
800364c4:	0800d939 	j	800364e4 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x148>
800364c8:	00000000 	nop
800364cc:	8fa4003c 	lw	a0,60(sp)
800364d0:	3c018105 	lui	at,0x8105
800364d4:	24260950 	addiu	a2,at,2384
800364d8:	24050007 	li	a1,7
800364dc:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
800364e0:	00000000 	nop
800364e4:	8fa10038 	lw	at,56(sp)
800364e8:	afa1004c 	sw	at,76(sp)
800364ec:	8fa1004c 	lw	at,76(sp)
800364f0:	afa10034 	sw	at,52(sp)
800364f4:	2c210007 	sltiu	at,at,7
800364f8:	14200007 	bnez	at,80036518 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x17c>
800364fc:	00000000 	nop
80036500:	0800d95d 	j	80036574 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x1d8>
80036504:	00000000 	nop
80036508:	3c018105 	lui	at,0x8105
8003650c:	24240950 	addiu	a0,at,2384
80036510:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80036514:	00000000 	nop
80036518:	8fa10034 	lw	at,52(sp)
8003651c:	00011080 	sll	v0,at,0x2
80036520:	000108c0 	sll	at,at,0x3
80036524:	00221021 	addu	v0,at,v0
80036528:	3c018105 	lui	at,0x8105
8003652c:	242108fc 	addiu	at,at,2300
80036530:	00222021 	addu	a0,at,v0
80036534:	0c00ad56 	jal	8002b558 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17ha536a7d54990d56bE>
80036538:	00000000 	nop
8003653c:	00402025 	move	a0,v0
80036540:	0c00da57 	jal	8003695c <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17h9f25740f31cdf213E>
80036544:	00000000 	nop
80036548:	afa20058 	sw	v0,88(sp)
8003654c:	8fa10048 	lw	at,72(sp)
80036550:	00220825 	or	at,at,v0
80036554:	afa10048 	sw	at,72(sp)
80036558:	8fa1004c 	lw	at,76(sp)
8003655c:	24210001 	addiu	at,at,1
80036560:	afa10030 	sw	at,48(sp)
80036564:	10200012 	beqz	at,800365b0 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x214>
80036568:	00000000 	nop
8003656c:	0800d963 	j	8003658c <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x1f0>
80036570:	00000000 	nop
80036574:	8fa40034 	lw	a0,52(sp)
80036578:	3c018105 	lui	at,0x8105
8003657c:	24260950 	addiu	a2,at,2384
80036580:	24050007 	li	a1,7
80036584:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80036588:	00000000 	nop
8003658c:	8fa10030 	lw	at,48(sp)
80036590:	afa1004c 	sw	at,76(sp)
80036594:	8fa1004c 	lw	at,76(sp)
80036598:	afa1002c 	sw	at,44(sp)
8003659c:	2c210007 	sltiu	at,at,7
800365a0:	14200007 	bnez	at,800365c0 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x224>
800365a4:	00000000 	nop
800365a8:	0800d987 	j	8003661c <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x280>
800365ac:	00000000 	nop
800365b0:	3c018105 	lui	at,0x8105
800365b4:	24240950 	addiu	a0,at,2384
800365b8:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800365bc:	00000000 	nop
800365c0:	8fa1002c 	lw	at,44(sp)
800365c4:	00011080 	sll	v0,at,0x2
800365c8:	000108c0 	sll	at,at,0x3
800365cc:	00221021 	addu	v0,at,v0
800365d0:	3c018105 	lui	at,0x8105
800365d4:	242108fc 	addiu	at,at,2300
800365d8:	00222021 	addu	a0,at,v0
800365dc:	0c00ad56 	jal	8002b558 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17ha536a7d54990d56bE>
800365e0:	00000000 	nop
800365e4:	00402025 	move	a0,v0
800365e8:	0c00da57 	jal	8003695c <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17h9f25740f31cdf213E>
800365ec:	00000000 	nop
800365f0:	afa2005c 	sw	v0,92(sp)
800365f4:	8fa10048 	lw	at,72(sp)
800365f8:	00220825 	or	at,at,v0
800365fc:	afa10048 	sw	at,72(sp)
80036600:	8fa1004c 	lw	at,76(sp)
80036604:	24210001 	addiu	at,at,1
80036608:	afa10028 	sw	at,40(sp)
8003660c:	10200012 	beqz	at,80036658 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x2bc>
80036610:	00000000 	nop
80036614:	0800d98d 	j	80036634 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x298>
80036618:	00000000 	nop
8003661c:	8fa4002c 	lw	a0,44(sp)
80036620:	3c018105 	lui	at,0x8105
80036624:	24260950 	addiu	a2,at,2384
80036628:	24050007 	li	a1,7
8003662c:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80036630:	00000000 	nop
80036634:	8fa10028 	lw	at,40(sp)
80036638:	afa1004c 	sw	at,76(sp)
8003663c:	8fa1004c 	lw	at,76(sp)
80036640:	afa10024 	sw	at,36(sp)
80036644:	2c210007 	sltiu	at,at,7
80036648:	14200007 	bnez	at,80036668 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x2cc>
8003664c:	00000000 	nop
80036650:	0800d9b1 	j	800366c4 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x328>
80036654:	00000000 	nop
80036658:	3c018105 	lui	at,0x8105
8003665c:	24240950 	addiu	a0,at,2384
80036660:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80036664:	00000000 	nop
80036668:	8fa10024 	lw	at,36(sp)
8003666c:	00011080 	sll	v0,at,0x2
80036670:	000108c0 	sll	at,at,0x3
80036674:	00221021 	addu	v0,at,v0
80036678:	3c018105 	lui	at,0x8105
8003667c:	242108fc 	addiu	at,at,2300
80036680:	00222021 	addu	a0,at,v0
80036684:	0c00ad56 	jal	8002b558 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17ha536a7d54990d56bE>
80036688:	00000000 	nop
8003668c:	00402025 	move	a0,v0
80036690:	0c00da57 	jal	8003695c <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17h9f25740f31cdf213E>
80036694:	00000000 	nop
80036698:	afa20060 	sw	v0,96(sp)
8003669c:	8fa10048 	lw	at,72(sp)
800366a0:	00220825 	or	at,at,v0
800366a4:	afa10048 	sw	at,72(sp)
800366a8:	8fa1004c 	lw	at,76(sp)
800366ac:	24210001 	addiu	at,at,1
800366b0:	afa10020 	sw	at,32(sp)
800366b4:	10200012 	beqz	at,80036700 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x364>
800366b8:	00000000 	nop
800366bc:	0800d9b7 	j	800366dc <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x340>
800366c0:	00000000 	nop
800366c4:	8fa40024 	lw	a0,36(sp)
800366c8:	3c018105 	lui	at,0x8105
800366cc:	24260950 	addiu	a2,at,2384
800366d0:	24050007 	li	a1,7
800366d4:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
800366d8:	00000000 	nop
800366dc:	8fa10020 	lw	at,32(sp)
800366e0:	afa1004c 	sw	at,76(sp)
800366e4:	8fa1004c 	lw	at,76(sp)
800366e8:	afa1001c 	sw	at,28(sp)
800366ec:	2c210007 	sltiu	at,at,7
800366f0:	14200007 	bnez	at,80036710 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x374>
800366f4:	00000000 	nop
800366f8:	0800d9db 	j	8003676c <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x3d0>
800366fc:	00000000 	nop
80036700:	3c018105 	lui	at,0x8105
80036704:	24240950 	addiu	a0,at,2384
80036708:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003670c:	00000000 	nop
80036710:	8fa1001c 	lw	at,28(sp)
80036714:	00011080 	sll	v0,at,0x2
80036718:	000108c0 	sll	at,at,0x3
8003671c:	00221021 	addu	v0,at,v0
80036720:	3c018105 	lui	at,0x8105
80036724:	242108fc 	addiu	at,at,2300
80036728:	00222021 	addu	a0,at,v0
8003672c:	0c00ad56 	jal	8002b558 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17ha536a7d54990d56bE>
80036730:	00000000 	nop
80036734:	00402025 	move	a0,v0
80036738:	0c00da57 	jal	8003695c <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17h9f25740f31cdf213E>
8003673c:	00000000 	nop
80036740:	afa20064 	sw	v0,100(sp)
80036744:	8fa10048 	lw	at,72(sp)
80036748:	00220825 	or	at,at,v0
8003674c:	afa10048 	sw	at,72(sp)
80036750:	8fa1004c 	lw	at,76(sp)
80036754:	24210001 	addiu	at,at,1
80036758:	afa10018 	sw	at,24(sp)
8003675c:	10200012 	beqz	at,800367a8 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x40c>
80036760:	00000000 	nop
80036764:	0800d9e1 	j	80036784 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x3e8>
80036768:	00000000 	nop
8003676c:	8fa4001c 	lw	a0,28(sp)
80036770:	3c018105 	lui	at,0x8105
80036774:	24260950 	addiu	a2,at,2384
80036778:	24050007 	li	a1,7
8003677c:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80036780:	00000000 	nop
80036784:	8fa10018 	lw	at,24(sp)
80036788:	afa1004c 	sw	at,76(sp)
8003678c:	8fa1004c 	lw	at,76(sp)
80036790:	afa10014 	sw	at,20(sp)
80036794:	2c210007 	sltiu	at,at,7
80036798:	14200007 	bnez	at,800367b8 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x41c>
8003679c:	00000000 	nop
800367a0:	0800da05 	j	80036814 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x478>
800367a4:	00000000 	nop
800367a8:	3c018105 	lui	at,0x8105
800367ac:	24240950 	addiu	a0,at,2384
800367b0:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800367b4:	00000000 	nop
800367b8:	8fa10014 	lw	at,20(sp)
800367bc:	00011080 	sll	v0,at,0x2
800367c0:	000108c0 	sll	at,at,0x3
800367c4:	00221021 	addu	v0,at,v0
800367c8:	3c018105 	lui	at,0x8105
800367cc:	242108fc 	addiu	at,at,2300
800367d0:	00222021 	addu	a0,at,v0
800367d4:	0c00ad56 	jal	8002b558 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17ha536a7d54990d56bE>
800367d8:	00000000 	nop
800367dc:	00402025 	move	a0,v0
800367e0:	0c00da57 	jal	8003695c <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17h9f25740f31cdf213E>
800367e4:	00000000 	nop
800367e8:	afa20068 	sw	v0,104(sp)
800367ec:	8fa10048 	lw	at,72(sp)
800367f0:	00220825 	or	at,at,v0
800367f4:	afa10048 	sw	at,72(sp)
800367f8:	8fa1004c 	lw	at,76(sp)
800367fc:	24210001 	addiu	at,at,1
80036800:	afa10010 	sw	at,16(sp)
80036804:	10200012 	beqz	at,80036850 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x4b4>
80036808:	00000000 	nop
8003680c:	0800da0b 	j	8003682c <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E+0x490>
80036810:	00000000 	nop
80036814:	8fa40014 	lw	a0,20(sp)
80036818:	3c018105 	lui	at,0x8105
8003681c:	24260950 	addiu	a2,at,2384
80036820:	24050007 	li	a1,7
80036824:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80036828:	00000000 	nop
8003682c:	8fa10010 	lw	at,16(sp)
80036830:	afa1004c 	sw	at,76(sp)
80036834:	8fa40048 	lw	a0,72(sp)
80036838:	0c00da30 	jal	800368c0 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags16from_bits_retain17hd1aae2d023f46634E>
8003683c:	00000000 	nop
                $all
            }
80036840:	8fbf006c 	lw	ra,108(sp)
80036844:	27bd0070 	addiu	sp,sp,112
80036848:	03e00008 	jr	ra
8003684c:	00000000 	nop
80036850:	3c018105 	lui	at,0x8105
80036854:	24240950 	addiu	a0,at,2384
80036858:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003685c:	00000000 	nop

80036860 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags4bits17had55b04cb2b93bd6E>:

            /// Get the underlying bits value.
            ///
            /// The returned value is exactly the bits set in this flags value.
            #[inline]
            pub const fn bits(&self) -> $T {
80036860:	27bdfff8 	addiu	sp,sp,-8
80036864:	afa40004 	sw	a0,4(sp)
80036868:	8c820000 	lw	v0,0(a0)
8003686c:	27bd0008 	addiu	sp,sp,8
                let $bits0 = self;
                $bits
            }
80036870:	03e00008 	jr	ra
80036874:	00000000 	nop

80036878 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags18from_bits_truncate17he2b3057218192ba9E>:
                $from_bits
            }

            /// Convert from a bits value, unsetting any unknown bits.
            #[inline]
            pub const fn from_bits_truncate(bits: $T) -> Self {
80036878:	27bdffd8 	addiu	sp,sp,-40
8003687c:	afbf0024 	sw	ra,36(sp)
80036880:	afa40014 	sw	a0,20(sp)
80036884:	afa40020 	sw	a0,32(sp)
80036888:	0c00d8e7 	jal	8003639c <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17h167aed755d84ec31E>
8003688c:	00000000 	nop
80036890:	afa2001c 	sw	v0,28(sp)
80036894:	27a4001c 	addiu	a0,sp,28
80036898:	0c00da18 	jal	80036860 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags4bits17had55b04cb2b93bd6E>
8003689c:	00000000 	nop
800368a0:	8fa40014 	lw	a0,20(sp)
800368a4:	00820824 	and	at,a0,v0
800368a8:	afa10018 	sw	at,24(sp)
                let $from_bits_truncate0 = bits;
                $from_bits_truncate
            }
800368ac:	8fa20018 	lw	v0,24(sp)
800368b0:	8fbf0024 	lw	ra,36(sp)
800368b4:	27bd0028 	addiu	sp,sp,40
800368b8:	03e00008 	jr	ra
800368bc:	00000000 	nop

800368c0 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags16from_bits_retain17hd1aae2d023f46634E>:

            /// Convert from a bits value exactly.
            #[inline]
            pub const fn from_bits_retain(bits: $T) -> Self {
800368c0:	27bdfff8 	addiu	sp,sp,-8
800368c4:	afa40004 	sw	a0,4(sp)
800368c8:	afa40000 	sw	a0,0(sp)
                let $from_bits_retain0 = bits;
                $from_bits_retain
            }
800368cc:	8fa20000 	lw	v0,0(sp)
800368d0:	27bd0008 	addiu	sp,sp,8
800368d4:	03e00008 	jr	ra
800368d8:	00000000 	nop

800368dc <_ZN8mos_65022mm7pgtable1_16InternalBitFlags5union17h7ee5c9e64f3a522bE>:
            }

            /// The bitwise or (`|`) of the bits in two flags values.
            #[inline]
            #[must_use]
            pub const fn union(self, other: Self) -> Self {
800368dc:	27bdffd8 	addiu	sp,sp,-40
800368e0:	afbf0024 	sw	ra,36(sp)
800368e4:	afa4001c 	sw	a0,28(sp)
800368e8:	afa50020 	sw	a1,32(sp)
                let $union0 = self;
800368ec:	afa40014 	sw	a0,20(sp)
                let $union1 = other;
800368f0:	afa50018 	sw	a1,24(sp)
800368f4:	27a40014 	addiu	a0,sp,20
800368f8:	0c00da18 	jal	80036860 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags4bits17had55b04cb2b93bd6E>
800368fc:	00000000 	nop
80036900:	afa20010 	sw	v0,16(sp)
80036904:	27a40018 	addiu	a0,sp,24
80036908:	0c00da18 	jal	80036860 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags4bits17had55b04cb2b93bd6E>
8003690c:	00000000 	nop
80036910:	00400825 	move	at,v0
80036914:	8fa20010 	lw	v0,16(sp)
80036918:	00412025 	or	a0,v0,at
8003691c:	0c00da30 	jal	800368c0 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags16from_bits_retain17hd1aae2d023f46634E>
80036920:	00000000 	nop
                $union
            }
80036924:	8fbf0024 	lw	ra,36(sp)
80036928:	27bd0028 	addiu	sp,sp,40
8003692c:	03e00008 	jr	ra
80036930:	00000000 	nop

80036934 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$5empty17h6c50405d2ff863beE>:
            pub const fn empty() -> Self {
80036934:	27bdffe8 	addiu	sp,sp,-24
80036938:	afbf0014 	sw	ra,20(sp)
8003693c:	0c00d8e1 	jal	80036384 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags5empty17hb3cb012822dd7221E>
80036940:	00000000 	nop
80036944:	afa20010 	sw	v0,16(sp)
            }
80036948:	8fa20010 	lw	v0,16(sp)
8003694c:	8fbf0014 	lw	ra,20(sp)
80036950:	27bd0018 	addiu	sp,sp,24
80036954:	03e00008 	jr	ra
80036958:	00000000 	nop

8003695c <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17h9f25740f31cdf213E>:
            pub const fn bits(&self) -> $T {
8003695c:	27bdffe8 	addiu	sp,sp,-24
80036960:	afbf0014 	sw	ra,20(sp)
80036964:	afa40010 	sw	a0,16(sp)
80036968:	0c00da18 	jal	80036860 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags4bits17had55b04cb2b93bd6E>
8003696c:	00000000 	nop
            }
80036970:	8fbf0014 	lw	ra,20(sp)
80036974:	27bd0018 	addiu	sp,sp,24
80036978:	03e00008 	jr	ra
8003697c:	00000000 	nop

80036980 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$18from_bits_truncate17hd28644c07229a8bfE>:
            pub const fn from_bits_truncate(bits: $T) -> Self {
80036980:	27bdffe0 	addiu	sp,sp,-32
80036984:	afbf001c 	sw	ra,28(sp)
80036988:	afa40018 	sw	a0,24(sp)
8003698c:	0c00da1e 	jal	80036878 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags18from_bits_truncate17he2b3057218192ba9E>
80036990:	00000000 	nop
80036994:	afa20014 	sw	v0,20(sp)
            }
80036998:	8fa20014 	lw	v0,20(sp)
8003699c:	8fbf001c 	lw	ra,28(sp)
800369a0:	27bd0020 	addiu	sp,sp,32
800369a4:	03e00008 	jr	ra
800369a8:	00000000 	nop

800369ac <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$5union17hcf43708f82c7cb87E>:
            pub const fn union(self, other: Self) -> Self {
800369ac:	27bdffe0 	addiu	sp,sp,-32
800369b0:	afbf001c 	sw	ra,28(sp)
800369b4:	afa40014 	sw	a0,20(sp)
800369b8:	afa50018 	sw	a1,24(sp)
800369bc:	0c00da37 	jal	800368dc <_ZN8mos_65022mm7pgtable1_16InternalBitFlags5union17h7ee5c9e64f3a522bE>
800369c0:	00000000 	nop
800369c4:	afa20010 	sw	v0,16(sp)
            }
800369c8:	8fa20010 	lw	v0,16(sp)
800369cc:	8fbf001c 	lw	ra,28(sp)
800369d0:	27bd0020 	addiu	sp,sp,32
800369d4:	03e00008 	jr	ra
800369d8:	00000000 	nop

800369dc <_ZN8mos_65022mm7pgtable1_84_$LT$impl$u20$core..ops..bit..BitOr$u20$for$u20$mos_6502..mm..pgtable..Permssion$GT$5bitor17h0a6b0ebea1abfc81E>:
        impl $crate::__private::core::ops::BitOr for $PublicBitFlags {
            type Output = Self;

            /// The bitwise or (`|`) of the bits in two flags values.
            #[inline]
            fn bitor(self, other: $PublicBitFlags) -> Self {
800369dc:	27bdffe0 	addiu	sp,sp,-32
800369e0:	afbf001c 	sw	ra,28(sp)
800369e4:	afa40014 	sw	a0,20(sp)
800369e8:	afa50018 	sw	a1,24(sp)
                self.union(other)
800369ec:	0c00da6b 	jal	800369ac <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$5union17hcf43708f82c7cb87E>
800369f0:	00000000 	nop
            }
800369f4:	8fbf001c 	lw	ra,28(sp)
800369f8:	27bd0020 	addiu	sp,sp,32
800369fc:	03e00008 	jr	ra
80036a00:	00000000 	nop

80036a04 <__rust_alloc>:
#[define_simple_allocator(KERNEL_HEAP_SIZE)]
80036a04:	27bdffe0 	addiu	sp,sp,-32
80036a08:	afbf001c 	sw	ra,28(sp)
80036a0c:	afa40014 	sw	a0,20(sp)
80036a10:	afa50018 	sw	a1,24(sp)
80036a14:	0c00946e 	jal	800251b8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hd800459f8b083671E>
80036a18:	00000000 	nop
80036a1c:	00402825 	move	a1,v0
80036a20:	00603025 	move	a2,v1
80036a24:	3c018005 	lui	at,0x8005
80036a28:	2424c000 	addiu	a0,at,-16384
80036a2c:	0c00e212 	jal	80038848 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E>
80036a30:	00000000 	nop
80036a34:	8fbf001c 	lw	ra,28(sp)
80036a38:	27bd0020 	addiu	sp,sp,32
80036a3c:	03e00008 	jr	ra
80036a40:	00000000 	nop

80036a44 <__rust_dealloc>:
80036a44:	27bdffd0 	addiu	sp,sp,-48
80036a48:	afbf002c 	sw	ra,44(sp)
80036a4c:	afa60014 	sw	a2,20(sp)
80036a50:	00a00825 	move	at,a1
80036a54:	8fa50014 	lw	a1,20(sp)
80036a58:	afa10018 	sw	at,24(sp)
80036a5c:	00800825 	move	at,a0
80036a60:	8fa40018 	lw	a0,24(sp)
80036a64:	afa1001c 	sw	at,28(sp)
80036a68:	afa10020 	sw	at,32(sp)
80036a6c:	afa40024 	sw	a0,36(sp)
80036a70:	afa50028 	sw	a1,40(sp)
80036a74:	0c00946e 	jal	800251b8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hd800459f8b083671E>
80036a78:	00000000 	nop
80036a7c:	8fa5001c 	lw	a1,28(sp)
80036a80:	00403025 	move	a2,v0
80036a84:	00603825 	move	a3,v1
80036a88:	3c018005 	lui	at,0x8005
80036a8c:	2424c000 	addiu	a0,at,-16384
80036a90:	0c00e2e3 	jal	80038b8c <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17he4d103fab153b98fE>
80036a94:	00000000 	nop
80036a98:	8fbf002c 	lw	ra,44(sp)
80036a9c:	27bd0030 	addiu	sp,sp,48
80036aa0:	03e00008 	jr	ra
80036aa4:	00000000 	nop

80036aa8 <__rust_realloc>:
80036aa8:	27bdffc0 	addiu	sp,sp,-64
80036aac:	afbf003c 	sw	ra,60(sp)
80036ab0:	afa70024 	sw	a3,36(sp)
80036ab4:	afa6001c 	sw	a2,28(sp)
80036ab8:	00a00825 	move	at,a1
80036abc:	8fa5001c 	lw	a1,28(sp)
80036ac0:	afa10020 	sw	at,32(sp)
80036ac4:	00800825 	move	at,a0
80036ac8:	8fa40020 	lw	a0,32(sp)
80036acc:	afa10028 	sw	at,40(sp)
80036ad0:	afa1002c 	sw	at,44(sp)
80036ad4:	afa40030 	sw	a0,48(sp)
80036ad8:	afa50034 	sw	a1,52(sp)
80036adc:	afa70038 	sw	a3,56(sp)
80036ae0:	0c00946e 	jal	800251b8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hd800459f8b083671E>
80036ae4:	00000000 	nop
80036ae8:	8fa10024 	lw	at,36(sp)
80036aec:	8fa50028 	lw	a1,40(sp)
80036af0:	00403025 	move	a2,v0
80036af4:	00603825 	move	a3,v1
80036af8:	03a01025 	move	v0,sp
80036afc:	ac410010 	sw	at,16(v0)
80036b00:	3c018005 	lui	at,0x8005
80036b04:	2424c000 	addiu	a0,at,-16384
80036b08:	0c0093d6 	jal	80024f58 <_ZN4core5alloc6global11GlobalAlloc7realloc17h5046b8705203023aE>
80036b0c:	00000000 	nop
80036b10:	8fbf003c 	lw	ra,60(sp)
80036b14:	27bd0040 	addiu	sp,sp,64
80036b18:	03e00008 	jr	ra
80036b1c:	00000000 	nop

80036b20 <__rust_alloc_zeroed>:
80036b20:	27bdffe0 	addiu	sp,sp,-32
80036b24:	afbf001c 	sw	ra,28(sp)
80036b28:	afa40014 	sw	a0,20(sp)
80036b2c:	afa50018 	sw	a1,24(sp)
80036b30:	0c00946e 	jal	800251b8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hd800459f8b083671E>
80036b34:	00000000 	nop
80036b38:	00402825 	move	a1,v0
80036b3c:	00603025 	move	a2,v1
80036b40:	3c018005 	lui	at,0x8005
80036b44:	2424c000 	addiu	a0,at,-16384
80036b48:	0c00939d 	jal	80024e74 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17hacc88cf31ff8ccc2E>
80036b4c:	00000000 	nop
80036b50:	8fbf001c 	lw	ra,28(sp)
80036b54:	27bd0020 	addiu	sp,sp,32
80036b58:	03e00008 	jr	ra
80036b5c:	00000000 	nop

80036b60 <_ZN67_$LT$mos_6502..print..STDOUT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2135b7e7df2b704cE>:
            fn deref(&self) -> &$T {
80036b60:	27bdffe0 	addiu	sp,sp,-32
80036b64:	afbf001c 	sw	ra,28(sp)
80036b68:	afa40014 	sw	a0,20(sp)
80036b6c:	3c018105 	lui	at,0x8105
80036b70:	2424d03c 	addiu	a0,at,-12228
80036b74:	afa40018 	sw	a0,24(sp)
80036b78:	0c0098c7 	jal	8002631c <_ZN4spin4once13Once$LT$T$GT$9call_once17h0fdcb9bed0706c3dE>
80036b7c:	00000000 	nop
            }
80036b80:	8fbf001c 	lw	ra,28(sp)
80036b84:	27bd0020 	addiu	sp,sp,32
80036b88:	03e00008 	jr	ra
80036b8c:	00000000 	nop

80036b90 <_ZN66_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..cmp..PartialEq$GT$2eq17hac98e68293e6189dE>:
#[derive(PartialEq)]
80036b90:	27bdfff0 	addiu	sp,sp,-16
80036b94:	afa40000 	sw	a0,0(sp)
80036b98:	afa50004 	sw	a1,4(sp)
80036b9c:	8c810000 	lw	at,0(a0)
80036ba0:	afa10008 	sw	at,8(sp)
80036ba4:	8ca20000 	lw	v0,0(a1)
80036ba8:	afa2000c 	sw	v0,12(sp)
80036bac:	00220826 	xor	at,at,v0
80036bb0:	2c220001 	sltiu	v0,at,1
80036bb4:	27bd0010 	addiu	sp,sp,16
80036bb8:	03e00008 	jr	ra
80036bbc:	00000000 	nop

80036bc0 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbe45d5d7753cc529E>:
            fn deref(&self) -> &$T {
80036bc0:	27bdffe0 	addiu	sp,sp,-32
80036bc4:	afbf001c 	sw	ra,28(sp)
80036bc8:	afa40014 	sw	a0,20(sp)
80036bcc:	3c018105 	lui	at,0x8105
80036bd0:	2424d044 	addiu	a0,at,-12220
80036bd4:	afa40018 	sw	a0,24(sp)
80036bd8:	0c009c0c 	jal	80027030 <_ZN4spin4once13Once$LT$T$GT$9call_once17haa234e89728fd629E>
80036bdc:	00000000 	nop
            }
80036be0:	8fbf001c 	lw	ra,28(sp)
80036be4:	27bd0020 	addiu	sp,sp,32
80036be8:	03e00008 	jr	ra
80036bec:	00000000 	nop

80036bf0 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h668ac85fb2e9b2f7E>:
            fn deref(&self) -> &$T {
80036bf0:	27bdffe0 	addiu	sp,sp,-32
80036bf4:	afbf001c 	sw	ra,28(sp)
80036bf8:	afa40014 	sw	a0,20(sp)
80036bfc:	3c018105 	lui	at,0x8105
80036c00:	2424d05c 	addiu	a0,at,-12196
80036c04:	afa40018 	sw	a0,24(sp)
80036c08:	0c009b7d 	jal	80026df4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h9619ea8b91702cb4E>
80036c0c:	00000000 	nop
            }
80036c10:	8fbf001c 	lw	ra,28(sp)
80036c14:	27bd0020 	addiu	sp,sp,32
80036c18:	03e00008 	jr	ra
80036c1c:	00000000 	nop

80036c20 <_ZN73_$LT$mos_6502..proc..ENV_FREE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf688f55e10c51cccE>:
            fn deref(&self) -> &$T {
80036c20:	27bdffe0 	addiu	sp,sp,-32
80036c24:	afbf001c 	sw	ra,28(sp)
80036c28:	afa40014 	sw	a0,20(sp)
80036c2c:	3c018105 	lui	at,0x8105
80036c30:	2424d070 	addiu	a0,at,-12176
80036c34:	afa40018 	sw	a0,24(sp)
80036c38:	0c009aeb 	jal	80026bac <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c511ddc7e3af3d6E>
80036c3c:	00000000 	nop
            }
80036c40:	8fbf001c 	lw	ra,28(sp)
80036c44:	27bd0020 	addiu	sp,sp,32
80036c48:	03e00008 	jr	ra
80036c4c:	00000000 	nop

80036c50 <_ZN74_$LT$mos_6502..proc..ENV_SCHED_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb461aaf754aa1f00E>:
            fn deref(&self) -> &$T {
80036c50:	27bdffe0 	addiu	sp,sp,-32
80036c54:	afbf001c 	sw	ra,28(sp)
80036c58:	afa40014 	sw	a0,20(sp)
80036c5c:	3c018105 	lui	at,0x8105
80036c60:	2424d084 	addiu	a0,at,-12156
80036c64:	afa40018 	sw	a0,24(sp)
80036c68:	0c009d23 	jal	8002748c <_ZN4spin4once13Once$LT$T$GT$9call_once17hd32804fda2adadf6E>
80036c6c:	00000000 	nop
            }
80036c70:	8fbf001c 	lw	ra,28(sp)
80036c74:	27bd0020 	addiu	sp,sp,32
80036c78:	03e00008 	jr	ra
80036c7c:	00000000 	nop

80036c80 <_ZN71_$LT$mos_6502..proc..ASID_BITMAP$u20$as$u20$core..ops..deref..Deref$GT$5deref17h698b9ee06e439253E>:
            fn deref(&self) -> &$T {
80036c80:	27bdffe0 	addiu	sp,sp,-32
80036c84:	afbf001c 	sw	ra,28(sp)
80036c88:	afa40014 	sw	a0,20(sp)
80036c8c:	3c018105 	lui	at,0x8105
80036c90:	2424d098 	addiu	a0,at,-12136
80036c94:	afa40018 	sw	a0,24(sp)
80036c98:	0c0099dc 	jal	80026770 <_ZN4spin4once13Once$LT$T$GT$9call_once17h583ef0b10887ad4aE>
80036c9c:	00000000 	nop
            }
80036ca0:	8fbf001c 	lw	ra,28(sp)
80036ca4:	27bd0020 	addiu	sp,sp,32
80036ca8:	03e00008 	jr	ra
80036cac:	00000000 	nop

80036cb0 <_ZN77_$LT$mos_6502..proc..NEXT_ALLOC_ENV_ID$u20$as$u20$core..ops..deref..Deref$GT$5deref17hadfb331e843d9749E>:
            fn deref(&self) -> &$T {
80036cb0:	27bdffe0 	addiu	sp,sp,-32
80036cb4:	afbf001c 	sw	ra,28(sp)
80036cb8:	afa40014 	sw	a0,20(sp)
80036cbc:	3c018105 	lui	at,0x8105
80036cc0:	2424d0a8 	addiu	a0,at,-12120
80036cc4:	afa40018 	sw	a0,24(sp)
80036cc8:	0c009a65 	jal	80026994 <_ZN4spin4once13Once$LT$T$GT$9call_once17h75fe320c5850c55aE>
80036ccc:	00000000 	nop
            }
80036cd0:	8fbf001c 	lw	ra,28(sp)
80036cd4:	27bd0020 	addiu	sp,sp,32
80036cd8:	03e00008 	jr	ra
80036cdc:	00000000 	nop

80036ce0 <_ZN71_$LT$mos_6502..proc..PRE_PGTABLE$u20$as$u20$core..ops..deref..Deref$GT$5deref17h26227155109f16b6E>:
            fn deref(&self) -> &$T {
80036ce0:	27bdffe0 	addiu	sp,sp,-32
80036ce4:	afbf001c 	sw	ra,28(sp)
80036ce8:	afa40014 	sw	a0,20(sp)
80036cec:	3c018105 	lui	at,0x8105
80036cf0:	2424d0b8 	addiu	a0,at,-12104
80036cf4:	afa40018 	sw	a0,24(sp)
80036cf8:	0c009db5 	jal	800276d4 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd765ca15fdbe217eE>
80036cfc:	00000000 	nop
            }
80036d00:	8fbf001c 	lw	ra,28(sp)
80036d04:	27bd0020 	addiu	sp,sp,32
80036d08:	03e00008 	jr	ra
80036d0c:	00000000 	nop

80036d10 <__rust_alloc_error_handler>:
80036d10:	27bdffe8 	addiu	sp,sp,-24
80036d14:	afbf0014 	sw	ra,20(sp)
80036d18:	0c00ec58 	jal	8003b160 <__rdl_oom>
80036d1c:	00000000 	nop
80036d20:	8fbf0014 	lw	ra,20(sp)
80036d24:	27bd0018 	addiu	sp,sp,24
80036d28:	03e00008 	jr	ra
80036d2c:	00000000 	nop

80036d30 <memcpy>:
#include <types.h>

void *memcpy(void *dst, const void *src, size_t n) {
80036d30:	27bdfff0 	addiu	sp,sp,-16
80036d34:	afbe000c 	sw	s8,12(sp)
80036d38:	03a0f025 	move	s8,sp
80036d3c:	afc40010 	sw	a0,16(s8)
80036d40:	afc50014 	sw	a1,20(s8)
80036d44:	afc60018 	sw	a2,24(s8)
	void *dstaddr = dst;
80036d48:	8fc20010 	lw	v0,16(s8)
80036d4c:	afc20000 	sw	v0,0(s8)
	void *max = dst + n;
80036d50:	8fc30010 	lw	v1,16(s8)
80036d54:	8fc20018 	lw	v0,24(s8)
80036d58:	00621021 	addu	v0,v1,v0
80036d5c:	afc20004 	sw	v0,4(s8)

	if (((u_long)src & 3) != ((u_long)dst & 3)) {
80036d60:	8fc30014 	lw	v1,20(s8)
80036d64:	8fc20010 	lw	v0,16(s8)
80036d68:	00621026 	xor	v0,v1,v0
80036d6c:	30420003 	andi	v0,v0,0x3
80036d70:	1040001b 	beqz	v0,80036de0 <memcpy+0xb0>
80036d74:	00000000 	nop
		while (dst < max) {
80036d78:	10000009 	b	80036da0 <memcpy+0x70>
80036d7c:	00000000 	nop
			*(char *)dst++ = *(char *)src++;
80036d80:	8fc30014 	lw	v1,20(s8)
80036d84:	24620001 	addiu	v0,v1,1
80036d88:	afc20014 	sw	v0,20(s8)
80036d8c:	8fc20010 	lw	v0,16(s8)
80036d90:	24440001 	addiu	a0,v0,1
80036d94:	afc40010 	sw	a0,16(s8)
80036d98:	80630000 	lb	v1,0(v1)
80036d9c:	a0430000 	sb	v1,0(v0)
		while (dst < max) {
80036da0:	8fc30010 	lw	v1,16(s8)
80036da4:	8fc20004 	lw	v0,4(s8)
80036da8:	0062102b 	sltu	v0,v1,v0
80036dac:	1440fff4 	bnez	v0,80036d80 <memcpy+0x50>
80036db0:	00000000 	nop
		}
		return dstaddr;
80036db4:	8fc20000 	lw	v0,0(s8)
80036db8:	10000034 	b	80036e8c <memcpy+0x15c>
80036dbc:	00000000 	nop
	}

	while (((u_long)dst & 3) && dst < max) {
		*(char *)dst++ = *(char *)src++;
80036dc0:	8fc30014 	lw	v1,20(s8)
80036dc4:	24620001 	addiu	v0,v1,1
80036dc8:	afc20014 	sw	v0,20(s8)
80036dcc:	8fc20010 	lw	v0,16(s8)
80036dd0:	24440001 	addiu	a0,v0,1
80036dd4:	afc40010 	sw	a0,16(s8)
80036dd8:	80630000 	lb	v1,0(v1)
80036ddc:	a0430000 	sb	v1,0(v0)
	while (((u_long)dst & 3) && dst < max) {
80036de0:	8fc20010 	lw	v0,16(s8)
80036de4:	30420003 	andi	v0,v0,0x3
80036de8:	10400012 	beqz	v0,80036e34 <memcpy+0x104>
80036dec:	00000000 	nop
80036df0:	8fc30010 	lw	v1,16(s8)
80036df4:	8fc20004 	lw	v0,4(s8)
80036df8:	0062102b 	sltu	v0,v1,v0
80036dfc:	1440fff0 	bnez	v0,80036dc0 <memcpy+0x90>
80036e00:	00000000 	nop
	}

	// copy machine words while possible
	while (dst + 4 <= max) {
80036e04:	1000000b 	b	80036e34 <memcpy+0x104>
80036e08:	00000000 	nop
		*(uint32_t *)dst = *(uint32_t *)src;
80036e0c:	8fc20014 	lw	v0,20(s8)
80036e10:	8c430000 	lw	v1,0(v0)
80036e14:	8fc20010 	lw	v0,16(s8)
80036e18:	ac430000 	sw	v1,0(v0)
		dst += 4;
80036e1c:	8fc20010 	lw	v0,16(s8)
80036e20:	24420004 	addiu	v0,v0,4
80036e24:	afc20010 	sw	v0,16(s8)
		src += 4;
80036e28:	8fc20014 	lw	v0,20(s8)
80036e2c:	24420004 	addiu	v0,v0,4
80036e30:	afc20014 	sw	v0,20(s8)
	while (dst + 4 <= max) {
80036e34:	8fc20010 	lw	v0,16(s8)
80036e38:	24420004 	addiu	v0,v0,4
80036e3c:	8fc30004 	lw	v1,4(s8)
80036e40:	0062102b 	sltu	v0,v1,v0
80036e44:	1040fff1 	beqz	v0,80036e0c <memcpy+0xdc>
80036e48:	00000000 	nop
	}

	// finish the remaining 0-3 bytes
	while (dst < max) {
80036e4c:	10000009 	b	80036e74 <memcpy+0x144>
80036e50:	00000000 	nop
		*(char *)dst++ = *(char *)src++;
80036e54:	8fc30014 	lw	v1,20(s8)
80036e58:	24620001 	addiu	v0,v1,1
80036e5c:	afc20014 	sw	v0,20(s8)
80036e60:	8fc20010 	lw	v0,16(s8)
80036e64:	24440001 	addiu	a0,v0,1
80036e68:	afc40010 	sw	a0,16(s8)
80036e6c:	80630000 	lb	v1,0(v1)
80036e70:	a0430000 	sb	v1,0(v0)
	while (dst < max) {
80036e74:	8fc30010 	lw	v1,16(s8)
80036e78:	8fc20004 	lw	v0,4(s8)
80036e7c:	0062102b 	sltu	v0,v1,v0
80036e80:	1440fff4 	bnez	v0,80036e54 <memcpy+0x124>
80036e84:	00000000 	nop
	}
	return dstaddr;
80036e88:	8fc20000 	lw	v0,0(s8)
}
80036e8c:	03c0e825 	move	sp,s8
80036e90:	8fbe000c 	lw	s8,12(sp)
80036e94:	27bd0010 	addiu	sp,sp,16
80036e98:	03e00008 	jr	ra
80036e9c:	00000000 	nop

80036ea0 <memset>:

void *memset(void *dst, int c, size_t n) {
80036ea0:	27bdffe8 	addiu	sp,sp,-24
80036ea4:	afbe0014 	sw	s8,20(sp)
80036ea8:	03a0f025 	move	s8,sp
80036eac:	afc40018 	sw	a0,24(s8)
80036eb0:	afc5001c 	sw	a1,28(s8)
80036eb4:	afc60020 	sw	a2,32(s8)
	void *dstaddr = dst;
80036eb8:	8fc20018 	lw	v0,24(s8)
80036ebc:	afc20000 	sw	v0,0(s8)
	void *max = dst + n;
80036ec0:	8fc30018 	lw	v1,24(s8)
80036ec4:	8fc20020 	lw	v0,32(s8)
80036ec8:	00621021 	addu	v0,v1,v0
80036ecc:	afc20004 	sw	v0,4(s8)
	u_char byte = c & 0xff;
80036ed0:	8fc2001c 	lw	v0,28(s8)
80036ed4:	a3c20008 	sb	v0,8(s8)
	uint32_t word = byte | byte << 8 | byte << 16 | byte << 24;
80036ed8:	93c30008 	lbu	v1,8(s8)
80036edc:	93c20008 	lbu	v0,8(s8)
80036ee0:	00021200 	sll	v0,v0,0x8
80036ee4:	00621825 	or	v1,v1,v0
80036ee8:	93c20008 	lbu	v0,8(s8)
80036eec:	00021400 	sll	v0,v0,0x10
80036ef0:	00621825 	or	v1,v1,v0
80036ef4:	93c20008 	lbu	v0,8(s8)
80036ef8:	00021600 	sll	v0,v0,0x18
80036efc:	00621025 	or	v0,v1,v0
80036f00:	afc2000c 	sw	v0,12(s8)

	while (((u_long)dst & 3) && dst < max) {
80036f04:	10000006 	b	80036f20 <memset+0x80>
80036f08:	00000000 	nop
		*(u_char *)dst++ = byte;
80036f0c:	8fc20018 	lw	v0,24(s8)
80036f10:	24430001 	addiu	v1,v0,1
80036f14:	afc30018 	sw	v1,24(s8)
80036f18:	93c30008 	lbu	v1,8(s8)
80036f1c:	a0430000 	sb	v1,0(v0)
	while (((u_long)dst & 3) && dst < max) {
80036f20:	8fc20018 	lw	v0,24(s8)
80036f24:	30420003 	andi	v0,v0,0x3
80036f28:	1040000e 	beqz	v0,80036f64 <memset+0xc4>
80036f2c:	00000000 	nop
80036f30:	8fc30018 	lw	v1,24(s8)
80036f34:	8fc20004 	lw	v0,4(s8)
80036f38:	0062102b 	sltu	v0,v1,v0
80036f3c:	1440fff3 	bnez	v0,80036f0c <memset+0x6c>
80036f40:	00000000 	nop
	}

	// fill machine words while possible
	while (dst + 4 <= max) {
80036f44:	10000007 	b	80036f64 <memset+0xc4>
80036f48:	00000000 	nop
		*(uint32_t *)dst = word;
80036f4c:	8fc20018 	lw	v0,24(s8)
80036f50:	8fc3000c 	lw	v1,12(s8)
80036f54:	ac430000 	sw	v1,0(v0)
		dst += 4;
80036f58:	8fc20018 	lw	v0,24(s8)
80036f5c:	24420004 	addiu	v0,v0,4
80036f60:	afc20018 	sw	v0,24(s8)
	while (dst + 4 <= max) {
80036f64:	8fc20018 	lw	v0,24(s8)
80036f68:	24420004 	addiu	v0,v0,4
80036f6c:	8fc30004 	lw	v1,4(s8)
80036f70:	0062102b 	sltu	v0,v1,v0
80036f74:	1040fff5 	beqz	v0,80036f4c <memset+0xac>
80036f78:	00000000 	nop
	}

	// finish the remaining 0-3 bytes
	while (dst < max) {
80036f7c:	10000006 	b	80036f98 <memset+0xf8>
80036f80:	00000000 	nop
		*(u_char *)dst++ = byte;
80036f84:	8fc20018 	lw	v0,24(s8)
80036f88:	24430001 	addiu	v1,v0,1
80036f8c:	afc30018 	sw	v1,24(s8)
80036f90:	93c30008 	lbu	v1,8(s8)
80036f94:	a0430000 	sb	v1,0(v0)
	while (dst < max) {
80036f98:	8fc30018 	lw	v1,24(s8)
80036f9c:	8fc20004 	lw	v0,4(s8)
80036fa0:	0062102b 	sltu	v0,v1,v0
80036fa4:	1440fff7 	bnez	v0,80036f84 <memset+0xe4>
80036fa8:	00000000 	nop
	}
	return dstaddr;
80036fac:	8fc20000 	lw	v0,0(s8)
}
80036fb0:	03c0e825 	move	sp,s8
80036fb4:	8fbe0014 	lw	s8,20(sp)
80036fb8:	27bd0018 	addiu	sp,sp,24
80036fbc:	03e00008 	jr	ra
80036fc0:	00000000 	nop
	...

80036fd0 <env_pop_tf>:
.type env_pop_tf,@function;
.ent env_pop_tf;
env_pop_tf:
.set reorder
.set at
	mtc0    $a1, $10
80036fd0:	40855000 	mtc0	a1,c0_entryhi
	move    $sp, $a0
80036fd4:	0080e825 	move	sp,a0
	RESET_KCLOCK
80036fd8:	3c08001e 	lui	t0,0x1e
80036fdc:	35088480 	ori	t0,t0,0x8480
80036fe0:	40804800 	mtc0	zero,c0_count
80036fe4:	40885800 	mtc0	t0,c0_compare
	j       ret_from_exception
80036fe8:	0800009c 	j	80000270 <ret_from_exception>
80036fec:	00000000 	nop

80036ff0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h1320ac3a55f6d6a9E>:
            const fn precondition_check($($name:$ty),*) {
80036ff0:	27bdffc8 	addiu	sp,sp,-56
80036ff4:	afbf0034 	sw	ra,52(sp)
80036ff8:	afa70014 	sw	a3,20(sp)
80036ffc:	afa60010 	sw	a2,16(sp)
80037000:	00a00825 	move	at,a1
80037004:	8fa50014 	lw	a1,20(sp)
80037008:	afa10018 	sw	at,24(sp)
8003700c:	afa4001c 	sw	a0,28(sp)
80037010:	8fa20048 	lw	v0,72(sp)
80037014:	afa20020 	sw	v0,32(sp)
80037018:	afa40024 	sw	a0,36(sp)
8003701c:	afa10028 	sw	at,40(sp)
80037020:	afa6002c 	sw	a2,44(sp)
80037024:	afa50030 	sw	a1,48(sp)
        ub_checks::is_aligned_and_not_null(src, align)
80037028:	0c00dd5c 	jal	80037570 <_ZN4core9ub_checks23is_aligned_and_not_null17ha649c18beaafd555E>
8003702c:	00000000 	nop
80037030:	14400008 	bnez	v0,80037054 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h1320ac3a55f6d6a9E+0x64>
80037034:	00000000 	nop
80037038:	0800dc10 	j	80037040 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h1320ac3a55f6d6a9E+0x50>
8003703c:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80037040:	3c01810a 	lui	at,0x810a
80037044:	2424a1f0 	addiu	a0,at,-24080
80037048:	240500a6 	li	a1,166
8003704c:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80037050:	00000000 	nop
            && ub_checks::is_aligned_and_not_null(dst, align)
80037054:	8fa50014 	lw	a1,20(sp)
80037058:	8fa40018 	lw	a0,24(sp)
8003705c:	0c00dd5c 	jal	80037570 <_ZN4core9ub_checks23is_aligned_and_not_null17ha649c18beaafd555E>
80037060:	00000000 	nop
80037064:	1040fff6 	beqz	v0,80037040 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h1320ac3a55f6d6a9E+0x50>
80037068:	00000000 	nop
8003706c:	0800dc1d 	j	80037074 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h1320ac3a55f6d6a9E+0x84>
80037070:	00000000 	nop
            && ub_checks::is_nonoverlapping(src, dst, size, count)
80037074:	8fa70020 	lw	a3,32(sp)
80037078:	8fa60010 	lw	a2,16(sp)
8003707c:	8fa50018 	lw	a1,24(sp)
80037080:	8fa4001c 	lw	a0,28(sp)
80037084:	0c00dd14 	jal	80037450 <_ZN4core9ub_checks17is_nonoverlapping17h5d6f4ab0495742b2E>
80037088:	00000000 	nop
8003708c:	1040ffec 	beqz	v0,80037040 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h1320ac3a55f6d6a9E+0x50>
80037090:	00000000 	nop
80037094:	0800dc27 	j	8003709c <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h1320ac3a55f6d6a9E+0xac>
80037098:	00000000 	nop
            }
8003709c:	8fbf0034 	lw	ra,52(sp)
800370a0:	27bd0038 	addiu	sp,sp,56
800370a4:	03e00008 	jr	ra
800370a8:	00000000 	nop

800370ac <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17he1d9a163d1aceb49E>:
        pub const fn abs(self) -> Self {
800370ac:	27bdffe0 	addiu	sp,sp,-32
800370b0:	afa40010 	sw	a0,16(sp)
800370b4:	afa40018 	sw	a0,24(sp)
800370b8:	afa4001c 	sw	a0,28(sp)
            if self.is_negative() {
800370bc:	04800007 	bltz	a0,800370dc <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17he1d9a163d1aceb49E+0x30>
800370c0:	00000000 	nop
800370c4:	0800dc33 	j	800370cc <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17he1d9a163d1aceb49E+0x20>
800370c8:	00000000 	nop
                self
800370cc:	8fa10010 	lw	at,16(sp)
800370d0:	afa10014 	sw	at,20(sp)
            if self.is_negative() {
800370d4:	0800dc3d 	j	800370f4 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17he1d9a163d1aceb49E+0x48>
800370d8:	00000000 	nop
800370dc:	8fa10010 	lw	at,16(sp)
800370e0:	3c028000 	lui	v0,0x8000
                -self
800370e4:	1022000d 	beq	at,v0,8003711c <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17he1d9a163d1aceb49E+0x70>
800370e8:	00000000 	nop
800370ec:	0800dc41 	j	80037104 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17he1d9a163d1aceb49E+0x58>
800370f0:	00000000 	nop
        }
800370f4:	8fa20014 	lw	v0,20(sp)
800370f8:	27bd0020 	addiu	sp,sp,32
800370fc:	03e00008 	jr	ra
80037100:	00000000 	nop
80037104:	8fa10010 	lw	at,16(sp)
80037108:	24020000 	li	v0,0
                -self
8003710c:	00010823 	negu	at,at
80037110:	afa10014 	sw	at,20(sp)
            if self.is_negative() {
80037114:	0800dc3d 	j	800370f4 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17he1d9a163d1aceb49E+0x48>
80037118:	00000000 	nop
                -self
8003711c:	3c01810a 	lui	at,0x810a
80037120:	2424a304 	addiu	a0,at,-23804
80037124:	0c01242b 	jal	800490ac <_ZN4core9panicking11panic_const24panic_const_neg_overflow17h933ac1df2ff681f7E>
80037128:	00000000 	nop

8003712c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h270ccad2dccc2f62E>:
        pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
8003712c:	27bdffc8 	addiu	sp,sp,-56
80037130:	afa40010 	sw	a0,16(sp)
80037134:	afa50014 	sw	a1,20(sp)
80037138:	afa40028 	sw	a0,40(sp)
8003713c:	afa5002c 	sw	a1,44(sp)
            let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
80037140:	00850019 	multu	a0,a1
80037144:	00000810 	mfhi	at
80037148:	0001082b 	sltu	at,zero,at
8003714c:	70851002 	mul	v0,a0,a1
80037150:	afa20030 	sw	v0,48(sp)
80037154:	a3a10037 	sb	at,55(sp)
            (a as Self, b)
80037158:	afa20020 	sw	v0,32(sp)
8003715c:	a3a10024 	sb	at,36(sp)
        }
80037160:	8fa20020 	lw	v0,32(sp)
80037164:	afa20004 	sw	v0,4(sp)
80037168:	93a10024 	lbu	at,36(sp)
            let (a, b) = self.overflowing_mul(rhs);
8003716c:	afa20018 	sw	v0,24(sp)
80037170:	30210001 	andi	at,at,0x1
80037174:	a3a1001e 	sb	at,30(sp)
            if unlikely!(b) { None } else { Some(a) }
80037178:	a3a1001f 	sb	at,31(sp)
8003717c:	93a1001f 	lbu	at,31(sp)
80037180:	30210001 	andi	at,at,0x1
80037184:	14200009 	bnez	at,800371ac <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h270ccad2dccc2f62E+0x80>
80037188:	00000000 	nop
8003718c:	0800dc65 	j	80037194 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h270ccad2dccc2f62E+0x68>
80037190:	00000000 	nop
80037194:	8fa10004 	lw	at,4(sp)
80037198:	afa1000c 	sw	at,12(sp)
8003719c:	24010001 	li	at,1
800371a0:	afa10008 	sw	at,8(sp)
800371a4:	0800dc6e 	j	800371b8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h270ccad2dccc2f62E+0x8c>
800371a8:	00000000 	nop
800371ac:	afa00008 	sw	zero,8(sp)
800371b0:	0800dc6e 	j	800371b8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h270ccad2dccc2f62E+0x8c>
800371b4:	00000000 	nop
        }
800371b8:	8fa20008 	lw	v0,8(sp)
800371bc:	8fa3000c 	lw	v1,12(sp)
800371c0:	27bd0038 	addiu	sp,sp,56
800371c4:	03e00008 	jr	ra
800371c8:	00000000 	nop

800371cc <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17hc918fe2f014dc379E>:
        pub const fn abs_diff(self, other: Self) -> Self {
800371cc:	27bdffc8 	addiu	sp,sp,-56
800371d0:	afbf0034 	sw	ra,52(sp)
800371d4:	afa50018 	sw	a1,24(sp)
800371d8:	afa4001c 	sw	a0,28(sp)
800371dc:	afa40024 	sw	a0,36(sp)
800371e0:	afa50028 	sw	a1,40(sp)
800371e4:	24010001 	li	at,1
            if mem::size_of::<Self>() == 1 {
800371e8:	1420000d 	bnez	at,80037220 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17hc918fe2f014dc379E+0x54>
800371ec:	00000000 	nop
800371f0:	0800dc7e 	j	800371f8 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17hc918fe2f014dc379E+0x2c>
800371f4:	00000000 	nop
800371f8:	8fa1001c 	lw	at,28(sp)
800371fc:	8fa20018 	lw	v0,24(sp)
80037200:	afa1002c 	sw	at,44(sp)
80037204:	afa20030 	sw	v0,48(sp)
            intrinsics::wrapping_sub(self, rhs)
80037208:	00222023 	subu	a0,at,v0
                (self as i32).wrapping_sub(other as i32).abs() as Self
8003720c:	0c00dc2b 	jal	800370ac <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17he1d9a163d1aceb49E>
80037210:	00000000 	nop
80037214:	afa20020 	sw	v0,32(sp)
            if mem::size_of::<Self>() == 1 {
80037218:	0800dc8f 	j	8003723c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17hc918fe2f014dc379E+0x70>
8003721c:	00000000 	nop
                if self < other {
80037220:	8fa1001c 	lw	at,28(sp)
80037224:	8fa20018 	lw	v0,24(sp)
80037228:	0022082b 	sltu	at,at,v0
8003722c:	14200011 	bnez	at,80037274 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17hc918fe2f014dc379E+0xa8>
80037230:	00000000 	nop
80037234:	0800dc94 	j	80037250 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17hc918fe2f014dc379E+0x84>
80037238:	00000000 	nop
        }
8003723c:	8fa20020 	lw	v0,32(sp)
80037240:	8fbf0034 	lw	ra,52(sp)
80037244:	27bd0038 	addiu	sp,sp,56
80037248:	03e00008 	jr	ra
8003724c:	00000000 	nop
                    self - other
80037250:	8fa1001c 	lw	at,28(sp)
80037254:	8fa20018 	lw	v0,24(sp)
80037258:	00221823 	subu	v1,at,v0
8003725c:	afa30014 	sw	v1,20(sp)
80037260:	0022082b 	sltu	at,at,v0
80037264:	14200010 	bnez	at,800372a8 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17hc918fe2f014dc379E+0xdc>
80037268:	00000000 	nop
8003726c:	0800dca6 	j	80037298 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17hc918fe2f014dc379E+0xcc>
80037270:	00000000 	nop
                    other - self
80037274:	8fa10018 	lw	at,24(sp)
80037278:	8fa2001c 	lw	v0,28(sp)
8003727c:	00221823 	subu	v1,at,v0
80037280:	afa30010 	sw	v1,16(sp)
80037284:	0022082b 	sltu	at,at,v0
80037288:	1420000f 	bnez	at,800372c8 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17hc918fe2f014dc379E+0xfc>
8003728c:	00000000 	nop
80037290:	0800dcae 	j	800372b8 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17hc918fe2f014dc379E+0xec>
80037294:	00000000 	nop
                    self - other
80037298:	8fa10014 	lw	at,20(sp)
8003729c:	afa10020 	sw	at,32(sp)
                if self < other {
800372a0:	0800dc8f 	j	8003723c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17hc918fe2f014dc379E+0x70>
800372a4:	00000000 	nop
                    self - other
800372a8:	3c01810a 	lui	at,0x810a
800372ac:	2424a314 	addiu	a0,at,-23788
800372b0:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800372b4:	00000000 	nop
                    other - self
800372b8:	8fa10010 	lw	at,16(sp)
800372bc:	afa10020 	sw	at,32(sp)
                if self < other {
800372c0:	0800dc8f 	j	8003723c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17hc918fe2f014dc379E+0x70>
800372c4:	00000000 	nop
                    other - self
800372c8:	3c01810a 	lui	at,0x810a
800372cc:	2424a314 	addiu	a0,at,-23788
800372d0:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800372d4:	00000000 	nop

800372d8 <_ZN4core3ptr14read_unaligned17hc8547d2a79355f77E>:
pub const unsafe fn read_unaligned<T>(src: *const T) -> T {
800372d8:	27bdff90 	addiu	sp,sp,-112
800372dc:	afbf006c 	sw	ra,108(sp)
800372e0:	afa5001c 	sw	a1,28(sp)
800372e4:	afa40020 	sw	a0,32(sp)
800372e8:	afa40024 	sw	a0,36(sp)
800372ec:	afa50048 	sw	a1,72(sp)
800372f0:	27a10028 	addiu	at,sp,40
800372f4:	afa10058 	sw	at,88(sp)
800372f8:	afa5004c 	sw	a1,76(sp)
800372fc:	afa10050 	sw	at,80(sp)
80037300:	24010010 	li	at,16
80037304:	afa10054 	sw	at,84(sp)
    ub_checks::assert_unsafe_precondition!(
80037308:	0c00dd02 	jal	80037408 <_ZN4core9ub_checks17check_language_ub17he72e217001181654E>
8003730c:	00000000 	nop
80037310:	1040000e 	beqz	v0,8003734c <_ZN4core3ptr14read_unaligned17hc8547d2a79355f77E+0x74>
80037314:	00000000 	nop
80037318:	0800dcc8 	j	80037320 <_ZN4core3ptr14read_unaligned17hc8547d2a79355f77E+0x48>
8003731c:	00000000 	nop
80037320:	8fa4001c 	lw	a0,28(sp)
80037324:	03a01025 	move	v0,sp
80037328:	24010010 	li	at,16
8003732c:	ac410010 	sw	at,16(v0)
80037330:	27a50028 	addiu	a1,sp,40
80037334:	24070001 	li	a3,1
80037338:	00e03025 	move	a2,a3
8003733c:	0c00dbfc 	jal	80036ff0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h1320ac3a55f6d6a9E>
80037340:	00000000 	nop
80037344:	0800dcd3 	j	8003734c <_ZN4core3ptr14read_unaligned17hc8547d2a79355f77E+0x74>
80037348:	00000000 	nop
8003734c:	8fa20024 	lw	v0,36(sp)
80037350:	8fa30020 	lw	v1,32(sp)
80037354:	8fa4001c 	lw	a0,28(sp)
    unsafe { copy_nonoverlapping(src, dst, count) }
80037358:	8881000f 	lwl	at,15(a0)
8003735c:	9881000c 	lwr	at,12(a0)
80037360:	afa10034 	sw	at,52(sp)
80037364:	8881000b 	lwl	at,11(a0)
80037368:	98810008 	lwr	at,8(a0)
8003736c:	afa10030 	sw	at,48(sp)
80037370:	88810007 	lwl	at,7(a0)
80037374:	98810004 	lwr	at,4(a0)
80037378:	afa1002c 	sw	at,44(sp)
8003737c:	88810003 	lwl	at,3(a0)
80037380:	98810000 	lwr	at,0(a0)
80037384:	afa10028 	sw	at,40(sp)
        tmp.assume_init()
80037388:	8fa10034 	lw	at,52(sp)
8003738c:	afa10044 	sw	at,68(sp)
80037390:	8fa10030 	lw	at,48(sp)
80037394:	afa10040 	sw	at,64(sp)
80037398:	8fa1002c 	lw	at,44(sp)
8003739c:	afa1003c 	sw	at,60(sp)
800373a0:	8fa10028 	lw	at,40(sp)
800373a4:	afa10038 	sw	at,56(sp)
800373a8:	8fa10044 	lw	at,68(sp)
800373ac:	afa10068 	sw	at,104(sp)
800373b0:	8fa10040 	lw	at,64(sp)
800373b4:	afa10064 	sw	at,100(sp)
800373b8:	8fa1003c 	lw	at,60(sp)
800373bc:	afa10060 	sw	at,96(sp)
800373c0:	8fa10038 	lw	at,56(sp)
800373c4:	afa1005c 	sw	at,92(sp)
        slot.value
800373c8:	8fa60068 	lw	a2,104(sp)
800373cc:	a866000f 	swl	a2,15(v1)
800373d0:	8fa50064 	lw	a1,100(sp)
800373d4:	a865000b 	swl	a1,11(v1)
800373d8:	8fa40060 	lw	a0,96(sp)
800373dc:	a8640007 	swl	a0,7(v1)
800373e0:	8fa1005c 	lw	at,92(sp)
800373e4:	a8610003 	swl	at,3(v1)
800373e8:	b866000c 	swr	a2,12(v1)
800373ec:	b8650008 	swr	a1,8(v1)
800373f0:	b8640004 	swr	a0,4(v1)
800373f4:	b8610000 	swr	at,0(v1)
}
800373f8:	8fbf006c 	lw	ra,108(sp)
800373fc:	27bd0070 	addiu	sp,sp,112
80037400:	03e00008 	jr	ra
80037404:	00000000 	nop

80037408 <_ZN4core9ub_checks17check_language_ub17he72e217001181654E>:
pub(crate) const fn check_language_ub() -> bool {
80037408:	27bdffe8 	addiu	sp,sp,-24
8003740c:	afbf0014 	sw	ra,20(sp)
    intrinsics::ub_checks() && const_eval_select((), comptime, runtime)
80037410:	0800dd06 	j	80037418 <_ZN4core9ub_checks17check_language_ub17he72e217001181654E+0x10>
80037414:	00000000 	nop
80037418:	0c00dd11 	jal	80037444 <_ZN4core9ub_checks17check_language_ub7runtime17he325ce83748d3a74E>
8003741c:	00000000 	nop
80037420:	a3a20013 	sb	v0,19(sp)
80037424:	0800dd0b 	j	8003742c <_ZN4core9ub_checks17check_language_ub17he72e217001181654E+0x24>
80037428:	00000000 	nop
}
8003742c:	93a10013 	lbu	at,19(sp)
80037430:	30220001 	andi	v0,at,0x1
80037434:	8fbf0014 	lw	ra,20(sp)
80037438:	27bd0018 	addiu	sp,sp,24
8003743c:	03e00008 	jr	ra
80037440:	00000000 	nop

80037444 <_ZN4core9ub_checks17check_language_ub7runtime17he325ce83748d3a74E>:
    fn runtime() -> bool {
80037444:	24020001 	li	v0,1
    }
80037448:	03e00008 	jr	ra
8003744c:	00000000 	nop

80037450 <_ZN4core9ub_checks17is_nonoverlapping17h5d6f4ab0495742b2E>:
pub(crate) const fn is_nonoverlapping(
80037450:	27bdffc8 	addiu	sp,sp,-56
80037454:	afbf0034 	sw	ra,52(sp)
80037458:	afa40024 	sw	a0,36(sp)
8003745c:	afa50028 	sw	a1,40(sp)
80037460:	afa6002c 	sw	a2,44(sp)
80037464:	afa70030 	sw	a3,48(sp)
    const_eval_select((src, dst, size, count), comptime, runtime)
80037468:	afa40014 	sw	a0,20(sp)
8003746c:	afa50018 	sw	a1,24(sp)
80037470:	afa6001c 	sw	a2,28(sp)
80037474:	afa70020 	sw	a3,32(sp)
80037478:	8fa40014 	lw	a0,20(sp)
8003747c:	8fa50018 	lw	a1,24(sp)
80037480:	8fa6001c 	lw	a2,28(sp)
80037484:	8fa70020 	lw	a3,32(sp)
80037488:	0c00dd28 	jal	800374a0 <_ZN4core9ub_checks17is_nonoverlapping7runtime17h988a8bf5f52b1519E>
8003748c:	00000000 	nop
}
80037490:	8fbf0034 	lw	ra,52(sp)
80037494:	27bd0038 	addiu	sp,sp,56
80037498:	03e00008 	jr	ra
8003749c:	00000000 	nop

800374a0 <_ZN4core9ub_checks17is_nonoverlapping7runtime17h988a8bf5f52b1519E>:
    fn runtime(src: *const (), dst: *const (), size: usize, count: usize) -> bool {
800374a0:	27bdffa0 	addiu	sp,sp,-96
800374a4:	afbf005c 	sw	ra,92(sp)
800374a8:	afa70014 	sw	a3,20(sp)
800374ac:	afa60018 	sw	a2,24(sp)
800374b0:	00a00825 	move	at,a1
800374b4:	8fa50014 	lw	a1,20(sp)
800374b8:	00801025 	move	v0,a0
800374bc:	8fa40018 	lw	a0,24(sp)
800374c0:	afa2002c 	sw	v0,44(sp)
800374c4:	afa10030 	sw	at,48(sp)
800374c8:	afa40034 	sw	a0,52(sp)
800374cc:	afa50038 	sw	a1,56(sp)
800374d0:	afa20050 	sw	v0,80(sp)
800374d4:	afa20054 	sw	v0,84(sp)
        unsafe { mem::transmute(self.cast::<()>()) }
800374d8:	00401825 	move	v1,v0
800374dc:	afa3001c 	sw	v1,28(sp)
        let src_usize = src.addr();
800374e0:	afa2003c 	sw	v0,60(sp)
800374e4:	afa1004c 	sw	at,76(sp)
800374e8:	afa10058 	sw	at,88(sp)
800374ec:	00201025 	move	v0,at
800374f0:	afa20020 	sw	v0,32(sp)
        let dst_usize = dst.addr();
800374f4:	afa10040 	sw	at,64(sp)
        let Some(size) = size.checked_mul(count) else {
800374f8:	0c00dc4b 	jal	8003712c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h270ccad2dccc2f62E>
800374fc:	00000000 	nop
80037500:	afa20024 	sw	v0,36(sp)
80037504:	afa30028 	sw	v1,40(sp)
80037508:	8fa10024 	lw	at,36(sp)
8003750c:	24020001 	li	v0,1
80037510:	14220012 	bne	at,v0,8003755c <_ZN4core9ub_checks17is_nonoverlapping7runtime17h988a8bf5f52b1519E+0xbc>
80037514:	00000000 	nop
80037518:	0800dd48 	j	80037520 <_ZN4core9ub_checks17is_nonoverlapping7runtime17h988a8bf5f52b1519E+0x80>
8003751c:	00000000 	nop
80037520:	8fa50020 	lw	a1,32(sp)
80037524:	8fa4001c 	lw	a0,28(sp)
80037528:	8fa10028 	lw	at,40(sp)
8003752c:	afa10010 	sw	at,16(sp)
80037530:	afa10044 	sw	at,68(sp)
        let diff = src_usize.abs_diff(dst_usize);
80037534:	0c00dc73 	jal	800371cc <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17hc918fe2f014dc379E>
80037538:	00000000 	nop
8003753c:	8fa10010 	lw	at,16(sp)
80037540:	afa20048 	sw	v0,72(sp)
        diff >= size
80037544:	0041082b 	sltu	at,v0,at
80037548:	38220001 	xori	v0,at,0x1
    }
8003754c:	8fbf005c 	lw	ra,92(sp)
80037550:	27bd0060 	addiu	sp,sp,96
80037554:	03e00008 	jr	ra
80037558:	00000000 	nop
            crate::panicking::panic_nounwind(
8003755c:	3c01810a 	lui	at,0x810a
80037560:	2424a324 	addiu	a0,at,-23772
80037564:	2405003d 	li	a1,61
80037568:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8003756c:	00000000 	nop

80037570 <_ZN4core9ub_checks23is_aligned_and_not_null17ha649c18beaafd555E>:
pub(crate) const fn is_aligned_and_not_null(ptr: *const (), align: usize) -> bool {
80037570:	27bdffd8 	addiu	sp,sp,-40
80037574:	afbf0024 	sw	ra,36(sp)
80037578:	afa50010 	sw	a1,16(sp)
8003757c:	afa40014 	sw	a0,20(sp)
80037580:	afa4001c 	sw	a0,28(sp)
80037584:	afa50020 	sw	a1,32(sp)
    !ptr.is_null() && ptr.is_aligned_to(align)
80037588:	0c00eec8 	jal	8003bb20 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h7332b93c4f97f066E>
8003758c:	00000000 	nop
80037590:	1440000a 	bnez	v0,800375bc <_ZN4core9ub_checks23is_aligned_and_not_null17ha649c18beaafd555E+0x4c>
80037594:	00000000 	nop
80037598:	0800dd68 	j	800375a0 <_ZN4core9ub_checks23is_aligned_and_not_null17ha649c18beaafd555E+0x30>
8003759c:	00000000 	nop
800375a0:	8fa50010 	lw	a1,16(sp)
800375a4:	8fa40014 	lw	a0,20(sp)
800375a8:	0c00ef1e 	jal	8003bc78 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to17hb855d440ce971e64E>
800375ac:	00000000 	nop
800375b0:	a3a2001b 	sb	v0,27(sp)
800375b4:	0800dd73 	j	800375cc <_ZN4core9ub_checks23is_aligned_and_not_null17ha649c18beaafd555E+0x5c>
800375b8:	00000000 	nop
800375bc:	24010000 	li	at,0
800375c0:	a3a0001b 	sb	zero,27(sp)
800375c4:	0800dd73 	j	800375cc <_ZN4core9ub_checks23is_aligned_and_not_null17ha649c18beaafd555E+0x5c>
800375c8:	00000000 	nop
}
800375cc:	93a1001b 	lbu	at,27(sp)
800375d0:	30220001 	andi	v0,at,0x1
800375d4:	8fbf0024 	lw	ra,36(sp)
800375d8:	27bd0028 	addiu	sp,sp,40
800375dc:	03e00008 	jr	ra
800375e0:	00000000 	nop

800375e4 <_ZN3elf8ElfIdent8try_load17h26e2e1735a220c10E>:
    pub fn try_load(data: &[u8]) -> Result<ElfIdent, &'static str> {
800375e4:	27bdffb8 	addiu	sp,sp,-72
800375e8:	afbf0044 	sw	ra,68(sp)
800375ec:	afa60014 	sw	a2,20(sp)
800375f0:	afa50018 	sw	a1,24(sp)
800375f4:	afa4001c 	sw	a0,28(sp)
800375f8:	afa40020 	sw	a0,32(sp)
800375fc:	afa50034 	sw	a1,52(sp)
80037600:	afa60038 	sw	a2,56(sp)
        if data.len() < core::mem::size_of::<ElfIdent>() {
80037604:	2cc10010 	sltiu	at,a2,16
80037608:	1420001f 	bnez	at,80037688 <_ZN3elf8ElfIdent8try_load17h26e2e1735a220c10E+0xa4>
8003760c:	00000000 	nop
80037610:	0800dd86 	j	80037618 <_ZN3elf8ElfIdent8try_load17h26e2e1735a220c10E+0x34>
80037614:	00000000 	nop
80037618:	8fa50018 	lw	a1,24(sp)
8003761c:	8fa10014 	lw	at,20(sp)
80037620:	afa5003c 	sw	a1,60(sp)
80037624:	afa10040 	sw	at,64(sp)
80037628:	27a40024 	addiu	a0,sp,36
        let pre_header = unsafe { ptr::read_unaligned(data.as_ptr() as *const ElfIdent) };
8003762c:	0c00dcb6 	jal	800372d8 <_ZN4core3ptr14read_unaligned17hc8547d2a79355f77E>
80037630:	00000000 	nop
80037634:	8fa1001c 	lw	at,28(sp)
        Ok(pre_header)
80037638:	8ba50033 	lwl	a1,51(sp)
8003763c:	9ba50030 	lwr	a1,48(sp)
80037640:	a8250010 	swl	a1,16(at)
80037644:	8ba4002f 	lwl	a0,47(sp)
80037648:	9ba4002c 	lwr	a0,44(sp)
8003764c:	a824000c 	swl	a0,12(at)
80037650:	8ba3002b 	lwl	v1,43(sp)
80037654:	9ba30028 	lwr	v1,40(sp)
80037658:	a8230008 	swl	v1,8(at)
8003765c:	8ba20027 	lwl	v0,39(sp)
80037660:	9ba20024 	lwr	v0,36(sp)
80037664:	a8220004 	swl	v0,4(at)
80037668:	b825000d 	swr	a1,13(at)
8003766c:	b8240009 	swr	a0,9(at)
80037670:	b8230005 	swr	v1,5(at)
80037674:	b8220001 	swr	v0,1(at)
80037678:	24020000 	li	v0,0
8003767c:	a0200000 	sb	zero,0(at)
    }
80037680:	0800ddac 	j	800376b0 <_ZN3elf8ElfIdent8try_load17h26e2e1735a220c10E+0xcc>
80037684:	00000000 	nop
            return Err("data is too short");
80037688:	8fa2001c 	lw	v0,28(sp)
8003768c:	3c01810a 	lui	at,0x810a
80037690:	2421a361 	addiu	at,at,-23711
80037694:	ac410004 	sw	at,4(v0)
80037698:	24010011 	li	at,17
8003769c:	ac410008 	sw	at,8(v0)
800376a0:	24010001 	li	at,1
800376a4:	a0410000 	sb	at,0(v0)
    }
800376a8:	0800ddac 	j	800376b0 <_ZN3elf8ElfIdent8try_load17h26e2e1735a220c10E+0xcc>
800376ac:	00000000 	nop
800376b0:	8fa20020 	lw	v0,32(sp)
800376b4:	8fbf0044 	lw	ra,68(sp)
800376b8:	27bd0048 	addiu	sp,sp,72
800376bc:	03e00008 	jr	ra
800376c0:	00000000 	nop

800376c4 <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$22get_program_header_num17h655ffc9dec1f862aE>:
    fn get_program_header_num(&self) -> usize {
800376c4:	27bdfff8 	addiu	sp,sp,-8
800376c8:	afa40004 	sw	a0,4(sp)
        self.e_phnum as usize
800376cc:	9482002c 	lhu	v0,44(a0)
800376d0:	27bd0008 	addiu	sp,sp,8
    }
800376d4:	03e00008 	jr	ra
800376d8:	00000000 	nop

800376dc <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$22get_section_header_num17h31b4e27a28efd244E>:
    fn get_section_header_num(&self) -> usize {
800376dc:	27bdfff8 	addiu	sp,sp,-8
800376e0:	afa40004 	sw	a0,4(sp)
        self.e_shnum as usize
800376e4:	94820030 	lhu	v0,48(a0)
800376e8:	27bd0008 	addiu	sp,sp,8
    }
800376ec:	03e00008 	jr	ra
800376f0:	00000000 	nop

800376f4 <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$9get_entry17h0a3ae17a333176ceE>:
    fn get_entry(&self) -> usize {
800376f4:	27bdfff8 	addiu	sp,sp,-8
800376f8:	afa40004 	sw	a0,4(sp)
        self.e_entry as usize
800376fc:	8c820018 	lw	v0,24(a0)
80037700:	27bd0008 	addiu	sp,sp,8
    }
80037704:	03e00008 	jr	ra
80037708:	00000000 	nop

8003770c <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$25get_program_header_offset17hb8b776a8e763a259E>:
    fn get_program_header_offset(&self) -> usize {
8003770c:	27bdfff8 	addiu	sp,sp,-8
80037710:	afa40004 	sw	a0,4(sp)
        self.e_phoff as usize
80037714:	8c82001c 	lw	v0,28(a0)
80037718:	27bd0008 	addiu	sp,sp,8
    }
8003771c:	03e00008 	jr	ra
80037720:	00000000 	nop

80037724 <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$23get_program_header_size17hf87f1bdfce3985beE>:
    fn get_program_header_size(&self) -> usize {
80037724:	27bdfff8 	addiu	sp,sp,-8
80037728:	afa40004 	sw	a0,4(sp)
8003772c:	24020020 	li	v0,32
80037730:	27bd0008 	addiu	sp,sp,8
    }
80037734:	03e00008 	jr	ra
80037738:	00000000 	nop

8003773c <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$25get_section_header_offset17h39389eaad83ec33fE>:
    fn get_section_header_offset(&self) -> usize {
8003773c:	27bdfff8 	addiu	sp,sp,-8
80037740:	afa40004 	sw	a0,4(sp)
        self.e_shoff as usize
80037744:	8c820020 	lw	v0,32(a0)
80037748:	27bd0008 	addiu	sp,sp,8
    }
8003774c:	03e00008 	jr	ra
80037750:	00000000 	nop

80037754 <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$23get_section_header_size17h8a38ee3417ea7f58E>:
    fn get_section_header_size(&self) -> usize {
80037754:	27bdfff8 	addiu	sp,sp,-8
80037758:	afa40004 	sw	a0,4(sp)
8003775c:	24020028 	li	v0,40
80037760:	27bd0008 	addiu	sp,sp,8
    }
80037764:	03e00008 	jr	ra
80037768:	00000000 	nop

8003776c <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$18get_elf_pre_header17hb0ad52d27cd275c3E>:
    fn get_elf_pre_header(&self) -> &ElfIdent {
8003776c:	27bdfff8 	addiu	sp,sp,-8
80037770:	00801025 	move	v0,a0
80037774:	afa20004 	sw	v0,4(sp)
80037778:	27bd0008 	addiu	sp,sp,8
    }
8003777c:	03e00008 	jr	ra
80037780:	00000000 	nop

80037784 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$8get_type17h9b03f961e4fd3778E>:
    fn get_type(&self) -> u32 {
80037784:	27bdfff8 	addiu	sp,sp,-8
80037788:	afa40004 	sw	a0,4(sp)
        self.p_type
8003778c:	8c820000 	lw	v0,0(a0)
80037790:	27bd0008 	addiu	sp,sp,8
    }
80037794:	03e00008 	jr	ra
80037798:	00000000 	nop

8003779c <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$10get_offset17h45a757a961e3a8d3E>:
    fn get_offset(&self) -> usize {
8003779c:	27bdfff8 	addiu	sp,sp,-8
800377a0:	afa40004 	sw	a0,4(sp)
        self.p_offset as usize
800377a4:	8c820004 	lw	v0,4(a0)
800377a8:	27bd0008 	addiu	sp,sp,8
    }
800377ac:	03e00008 	jr	ra
800377b0:	00000000 	nop

800377b4 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$9get_vaddr17hc5412ead21e5bcdeE>:
    fn get_vaddr(&self) -> usize {
800377b4:	27bdfff8 	addiu	sp,sp,-8
800377b8:	afa40004 	sw	a0,4(sp)
        self.p_vaddr as usize
800377bc:	8c820008 	lw	v0,8(a0)
800377c0:	27bd0008 	addiu	sp,sp,8
    }
800377c4:	03e00008 	jr	ra
800377c8:	00000000 	nop

800377cc <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$10get_filesz17hd60e41e25cbcff0fE>:
    fn get_filesz(&self) -> usize {
800377cc:	27bdfff8 	addiu	sp,sp,-8
800377d0:	afa40004 	sw	a0,4(sp)
        self.p_filesz as usize
800377d4:	8c820010 	lw	v0,16(a0)
800377d8:	27bd0008 	addiu	sp,sp,8
    }
800377dc:	03e00008 	jr	ra
800377e0:	00000000 	nop

800377e4 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$9get_memsz17hfb2cd24d087e8cc9E>:
    fn get_memsz(&self) -> usize {
800377e4:	27bdfff8 	addiu	sp,sp,-8
800377e8:	afa40004 	sw	a0,4(sp)
        self.p_memsz as usize
800377ec:	8c820014 	lw	v0,20(a0)
800377f0:	27bd0008 	addiu	sp,sp,8
    }
800377f4:	03e00008 	jr	ra
800377f8:	00000000 	nop

800377fc <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$9get_flags17hd6dd65113dbed91cE>:
    fn get_flags(&self) -> u32 {
800377fc:	27bdfff8 	addiu	sp,sp,-8
80037800:	afa40004 	sw	a0,4(sp)
        self.p_flags
80037804:	8c820018 	lw	v0,24(a0)
80037808:	27bd0008 	addiu	sp,sp,8
    }
8003780c:	03e00008 	jr	ra
80037810:	00000000 	nop

80037814 <_ZN4core3fmt9Arguments9new_const17h98a232de03289e4bE>:
    pub const fn new_const(pieces: &'a [&'static str]) -> Self {
80037814:	27bdffb0 	addiu	sp,sp,-80
80037818:	afbf004c 	sw	ra,76(sp)
8003781c:	afa60014 	sw	a2,20(sp)
80037820:	afa50018 	sw	a1,24(sp)
80037824:	afa4001c 	sw	a0,28(sp)
80037828:	afa40020 	sw	a0,32(sp)
8003782c:	afa50044 	sw	a1,68(sp)
80037830:	afa60048 	sw	a2,72(sp)
        if pieces.len() > 1 {
80037834:	2cc10002 	sltiu	at,a2,2
80037838:	10200016 	beqz	at,80037894 <_ZN4core3fmt9Arguments9new_const17h98a232de03289e4bE+0x80>
8003783c:	00000000 	nop
80037840:	0800de12 	j	80037848 <_ZN4core3fmt9Arguments9new_const17h98a232de03289e4bE+0x34>
80037844:	00000000 	nop
        Arguments { pieces, fmt: None, args: &[] }
80037848:	8fa20020 	lw	v0,32(sp)
8003784c:	8fa1001c 	lw	at,28(sp)
80037850:	8fa30014 	lw	v1,20(sp)
80037854:	8fa40018 	lw	a0,24(sp)
80037858:	afa0003c 	sw	zero,60(sp)
8003785c:	ac240000 	sw	a0,0(at)
80037860:	ac230004 	sw	v1,4(at)
80037864:	8fa4003c 	lw	a0,60(sp)
80037868:	8fa30040 	lw	v1,64(sp)
8003786c:	ac240010 	sw	a0,16(at)
80037870:	ac230014 	sw	v1,20(at)
80037874:	3c03810a 	lui	v1,0x810a
80037878:	2463a39c 	addiu	v1,v1,-23652
8003787c:	ac230008 	sw	v1,8(at)
80037880:	ac20000c 	sw	zero,12(at)
    }
80037884:	8fbf004c 	lw	ra,76(sp)
80037888:	27bd0050 	addiu	sp,sp,80
8003788c:	03e00008 	jr	ra
80037890:	00000000 	nop
            panic!("invalid args");
80037894:	3c01810a 	lui	at,0x810a
80037898:	2425a3a8 	addiu	a1,at,-23640
8003789c:	27a40024 	addiu	a0,sp,36
800378a0:	afa40010 	sw	a0,16(sp)
800378a4:	24060001 	li	a2,1
800378a8:	0c00de05 	jal	80037814 <_ZN4core3fmt9Arguments9new_const17h98a232de03289e4bE>
800378ac:	00000000 	nop
800378b0:	8fa40010 	lw	a0,16(sp)
800378b4:	3c01810a 	lui	at,0x810a
800378b8:	2425a420 	addiu	a1,at,-23520
800378bc:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800378c0:	00000000 	nop

800378c4 <_ZN4core3ptr59drop_in_place$LT$sync..spin..SpinlockGuard$LT$usize$GT$$GT$17h40a63510b9d9c889E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
800378c4:	27bdffe8 	addiu	sp,sp,-24
800378c8:	afbf0014 	sw	ra,20(sp)
800378cc:	afa40010 	sw	a0,16(sp)
800378d0:	0c00e1f5 	jal	800387d4 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h47f3e26ecb438688E>
800378d4:	00000000 	nop
800378d8:	8fbf0014 	lw	ra,20(sp)
800378dc:	27bd0018 	addiu	sp,sp,24
800378e0:	03e00008 	jr	ra
800378e4:	00000000 	nop

800378e8 <_ZN4core3ptr9alignment9Alignment8as_usize17h96c884d5514f265fE>:
    pub const fn as_usize(self) -> usize {
800378e8:	27bdfff8 	addiu	sp,sp,-8
800378ec:	afa40004 	sw	a0,4(sp)
        self.0 as usize
800378f0:	afa40000 	sw	a0,0(sp)
800378f4:	8fa20000 	lw	v0,0(sp)
800378f8:	27bd0008 	addiu	sp,sp,8
    }
800378fc:	03e00008 	jr	ra
80037900:	00000000 	nop

80037904 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h577df67133552b4cE>:
    pub fn compare_exchange(
80037904:	27bdff80 	addiu	sp,sp,-128
80037908:	afbf007c 	sw	ra,124(sp)
8003790c:	afa4001c 	sw	a0,28(sp)
80037910:	8fa10090 	lw	at,144(sp)
80037914:	afa10020 	sw	at,32(sp)
80037918:	00e01025 	move	v0,a3
8003791c:	afa20024 	sw	v0,36(sp)
80037920:	00c01025 	move	v0,a2
80037924:	afa20028 	sw	v0,40(sp)
80037928:	00a01025 	move	v0,a1
8003792c:	afa2002c 	sw	v0,44(sp)
80037930:	afa4006c 	sw	a0,108(sp)
80037934:	a3a50072 	sb	a1,114(sp)
80037938:	a3a60073 	sb	a2,115(sp)
8003793c:	a3a70074 	sb	a3,116(sp)
80037940:	a3a10075 	sb	at,117(sp)
        if EMULATE_ATOMIC_BOOL {
80037944:	0800de53 	j	8003794c <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h577df67133552b4cE+0x48>
80037948:	00000000 	nop
8003794c:	8fa70024 	lw	a3,36(sp)
80037950:	8fa4001c 	lw	a0,28(sp)
80037954:	8fa10028 	lw	at,40(sp)
80037958:	8fa2002c 	lw	v0,44(sp)
8003795c:	8fa30020 	lw	v1,32(sp)
80037960:	afa40078 	sw	a0,120(sp)
                atomic_compare_exchange(self.v.get(), current as u8, new as u8, success, failure)
80037964:	03a02825 	move	a1,sp
80037968:	aca30010 	sw	v1,16(a1)
8003796c:	30450001 	andi	a1,v0,0x1
80037970:	30260001 	andi	a2,at,0x1
80037974:	0c00ded4 	jal	80037b50 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE>
80037978:	00000000 	nop
8003797c:	30410001 	andi	at,v0,0x1
80037980:	a3a1006a 	sb	at,106(sp)
80037984:	a3a3006b 	sb	v1,107(sp)
            match unsafe {
80037988:	93a1006a 	lbu	at,106(sp)
8003798c:	30210001 	andi	at,at,0x1
80037990:	1420000b 	bnez	at,800379c0 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h577df67133552b4cE+0xbc>
80037994:	00000000 	nop
80037998:	0800de68 	j	800379a0 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h577df67133552b4cE+0x9c>
8003799c:	00000000 	nop
                Ok(x) => Ok(x != 0),
800379a0:	93a1006b 	lbu	at,107(sp)
800379a4:	a3a10076 	sb	at,118(sp)
800379a8:	0001082b 	sltu	at,zero,at
800379ac:	a3a10034 	sb	at,52(sp)
800379b0:	24010000 	li	at,0
800379b4:	a3a00033 	sb	zero,51(sp)
800379b8:	0800de78 	j	800379e0 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h577df67133552b4cE+0xdc>
800379bc:	00000000 	nop
                Err(x) => Err(x != 0),
800379c0:	93a1006b 	lbu	at,107(sp)
800379c4:	a3a10077 	sb	at,119(sp)
800379c8:	0001082b 	sltu	at,zero,at
800379cc:	a3a10034 	sb	at,52(sp)
800379d0:	24010001 	li	at,1
800379d4:	a3a10033 	sb	at,51(sp)
800379d8:	0800de78 	j	800379e0 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h577df67133552b4cE+0xdc>
800379dc:	00000000 	nop
    }
800379e0:	93a20033 	lbu	v0,51(sp)
800379e4:	93a30034 	lbu	v1,52(sp)
800379e8:	8fbf007c 	lw	ra,124(sp)
800379ec:	27bd0080 	addiu	sp,sp,128
800379f0:	03e00008 	jr	ra
800379f4:	00000000 	nop

800379f8 <_ZN4core4sync6atomic10AtomicBool3new17h2f79bcca5a2a3bcaE>:
    pub const fn new(v: bool) -> AtomicBool {
800379f8:	27bdfff8 	addiu	sp,sp,-8
800379fc:	a3a40005 	sb	a0,5(sp)
80037a00:	a3a40007 	sb	a0,7(sp)
        UnsafeCell { value }
80037a04:	a3a40006 	sb	a0,6(sp)
    }
80037a08:	93a10006 	lbu	at,6(sp)
        AtomicBool { v: UnsafeCell::new(v as u8) }
80037a0c:	a3a10004 	sb	at,4(sp)
    }
80037a10:	93a20004 	lbu	v0,4(sp)
80037a14:	27bd0008 	addiu	sp,sp,8
80037a18:	03e00008 	jr	ra
80037a1c:	00000000 	nop

80037a20 <_ZN4core4sync6atomic10AtomicBool5store17h48eb7c1f7e67a4e2E>:
    pub fn store(&self, val: bool, order: Ordering) {
80037a20:	27bdffe0 	addiu	sp,sp,-32
80037a24:	afbf001c 	sw	ra,28(sp)
80037a28:	afa40010 	sw	a0,16(sp)
80037a2c:	a3a50016 	sb	a1,22(sp)
80037a30:	a3a60017 	sb	a2,23(sp)
80037a34:	afa40018 	sw	a0,24(sp)
            atomic_store(self.v.get(), val as u8, order);
80037a38:	0c00de94 	jal	80037a50 <_ZN4core4sync6atomic12atomic_store17h780d1e615775873aE>
80037a3c:	00000000 	nop
    }
80037a40:	8fbf001c 	lw	ra,28(sp)
80037a44:	27bd0020 	addiu	sp,sp,32
80037a48:	03e00008 	jr	ra
80037a4c:	00000000 	nop

80037a50 <_ZN4core4sync6atomic12atomic_store17h780d1e615775873aE>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
80037a50:	27bdff98 	addiu	sp,sp,-104
80037a54:	afbf0064 	sw	ra,100(sp)
80037a58:	afa4001c 	sw	a0,28(sp)
80037a5c:	00a00825 	move	at,a1
80037a60:	afa10020 	sw	at,32(sp)
80037a64:	a3a6002b 	sb	a2,43(sp)
80037a68:	afa4005c 	sw	a0,92(sp)
80037a6c:	a3a50063 	sb	a1,99(sp)
        match order {
80037a70:	93a1002b 	lbu	at,43(sp)
80037a74:	afa10024 	sw	at,36(sp)
80037a78:	8fa10024 	lw	at,36(sp)
80037a7c:	00010880 	sll	at,at,0x2
80037a80:	3c02810a 	lui	v0,0x810a
80037a84:	00220821 	addu	at,at,v0
80037a88:	8c21a374 	lw	at,-23692(at)
80037a8c:	00200008 	jr	at
80037a90:	00000000 	nop
80037a94:	0000000d 	break
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
80037a98:	8fa10020 	lw	at,32(sp)
80037a9c:	8fa2001c 	lw	v0,28(sp)
80037aa0:	a0410000 	sb	at,0(v0)
80037aa4:	0800ded0 	j	80037b40 <_ZN4core4sync6atomic12atomic_store17h780d1e615775873aE+0xf0>
80037aa8:	00000000 	nop
            Release => intrinsics::atomic_store_release(dst, val),
80037aac:	8fa10020 	lw	at,32(sp)
80037ab0:	8fa2001c 	lw	v0,28(sp)
80037ab4:	0000000f 	sync
80037ab8:	a0410000 	sb	at,0(v0)
80037abc:	0800ded0 	j	80037b40 <_ZN4core4sync6atomic12atomic_store17h780d1e615775873aE+0xf0>
80037ac0:	00000000 	nop
            Acquire => panic!("there is no such thing as an acquire store"),
80037ac4:	3c01810a 	lui	at,0x810a
80037ac8:	2425a45c 	addiu	a1,at,-23460
80037acc:	27a4002c 	addiu	a0,sp,44
80037ad0:	afa40018 	sw	a0,24(sp)
80037ad4:	24060001 	li	a2,1
80037ad8:	0c00de05 	jal	80037814 <_ZN4core3fmt9Arguments9new_const17h98a232de03289e4bE>
80037adc:	00000000 	nop
80037ae0:	8fa40018 	lw	a0,24(sp)
80037ae4:	3c01810a 	lui	at,0x810a
80037ae8:	2425a4d8 	addiu	a1,at,-23336
80037aec:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80037af0:	00000000 	nop
            AcqRel => panic!("there is no such thing as an acquire-release store"),
80037af4:	3c01810a 	lui	at,0x810a
80037af8:	2425a51c 	addiu	a1,at,-23268
80037afc:	27a40044 	addiu	a0,sp,68
80037b00:	afa40014 	sw	a0,20(sp)
80037b04:	24060001 	li	a2,1
80037b08:	0c00de05 	jal	80037814 <_ZN4core3fmt9Arguments9new_const17h98a232de03289e4bE>
80037b0c:	00000000 	nop
80037b10:	8fa40014 	lw	a0,20(sp)
80037b14:	3c01810a 	lui	at,0x810a
80037b18:	2425a524 	addiu	a1,at,-23260
80037b1c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80037b20:	00000000 	nop
            SeqCst => intrinsics::atomic_store_seqcst(dst, val),
80037b24:	8fa10020 	lw	at,32(sp)
80037b28:	8fa2001c 	lw	v0,28(sp)
80037b2c:	0000000f 	sync
80037b30:	a0410000 	sb	at,0(v0)
80037b34:	0000000f 	sync
80037b38:	0800ded0 	j	80037b40 <_ZN4core4sync6atomic12atomic_store17h780d1e615775873aE+0xf0>
80037b3c:	00000000 	nop
}
80037b40:	8fbf0064 	lw	ra,100(sp)
80037b44:	27bd0068 	addiu	sp,sp,104
80037b48:	03e00008 	jr	ra
80037b4c:	00000000 	nop

80037b50 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE>:
unsafe fn atomic_compare_exchange<T: Copy>(
80037b50:	27bdff38 	addiu	sp,sp,-200
80037b54:	afbf00c4 	sw	ra,196(sp)
80037b58:	afa40070 	sw	a0,112(sp)
80037b5c:	8fa100d8 	lw	at,216(sp)
80037b60:	00c01025 	move	v0,a2
80037b64:	afa20074 	sw	v0,116(sp)
80037b68:	00a01025 	move	v0,a1
80037b6c:	afa20078 	sw	v0,120(sp)
80037b70:	afa400b8 	sw	a0,184(sp)
80037b74:	a3a500be 	sb	a1,190(sp)
80037b78:	a3a600bf 	sb	a2,191(sp)
80037b7c:	a3a700c0 	sb	a3,192(sp)
80037b80:	a3a100c1 	sb	at,193(sp)
        match (success, failure) {
80037b84:	a3a70086 	sb	a3,134(sp)
80037b88:	a3a10087 	sb	at,135(sp)
80037b8c:	93a10086 	lbu	at,134(sp)
80037b90:	afa1007c 	sw	at,124(sp)
80037b94:	8fa1007c 	lw	at,124(sp)
80037b98:	00010880 	sll	at,at,0x2
80037b9c:	3c02810a 	lui	v0,0x810a
80037ba0:	00220821 	addu	at,at,v0
80037ba4:	8c21a388 	lw	at,-23672(at)
80037ba8:	00200008 	jr	at
80037bac:	00000000 	nop
80037bb0:	0000000d 	break
80037bb4:	93a10087 	lbu	at,135(sp)
80037bb8:	afa1006c 	sw	at,108(sp)
80037bbc:	1020005d 	beqz	at,80037d34 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x1e4>
80037bc0:	00000000 	nop
80037bc4:	0800def3 	j	80037bcc <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x7c>
80037bc8:	00000000 	nop
80037bcc:	8fa1006c 	lw	at,108(sp)
80037bd0:	24020002 	li	v0,2
80037bd4:	1022007a 	beq	at,v0,80037dc0 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x270>
80037bd8:	00000000 	nop
80037bdc:	0800def9 	j	80037be4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x94>
80037be0:	00000000 	nop
80037be4:	8fa1006c 	lw	at,108(sp)
80037be8:	24020004 	li	v0,4
80037bec:	10220098 	beq	at,v0,80037e50 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x300>
80037bf0:	00000000 	nop
80037bf4:	0800df47 	j	80037d1c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x1cc>
80037bf8:	00000000 	nop
80037bfc:	93a10087 	lbu	at,135(sp)
80037c00:	afa10068 	sw	at,104(sp)
80037c04:	102000c1 	beqz	at,80037f0c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x3bc>
80037c08:	00000000 	nop
80037c0c:	0800df05 	j	80037c14 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0xc4>
80037c10:	00000000 	nop
80037c14:	8fa10068 	lw	at,104(sp)
80037c18:	24020002 	li	v0,2
80037c1c:	102200df 	beq	at,v0,80037f9c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x44c>
80037c20:	00000000 	nop
80037c24:	0800df0b 	j	80037c2c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0xdc>
80037c28:	00000000 	nop
80037c2c:	8fa10068 	lw	at,104(sp)
80037c30:	24020004 	li	v0,4
80037c34:	102200fe 	beq	at,v0,80038030 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x4e0>
80037c38:	00000000 	nop
80037c3c:	0800df47 	j	80037d1c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x1cc>
80037c40:	00000000 	nop
80037c44:	93a10087 	lbu	at,135(sp)
80037c48:	afa10064 	sw	at,100(sp)
80037c4c:	1020011d 	beqz	at,800380c4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x574>
80037c50:	00000000 	nop
80037c54:	0800df17 	j	80037c5c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x10c>
80037c58:	00000000 	nop
80037c5c:	8fa10064 	lw	at,100(sp)
80037c60:	24020002 	li	v0,2
80037c64:	1022013b 	beq	at,v0,80038154 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x604>
80037c68:	00000000 	nop
80037c6c:	0800df1d 	j	80037c74 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x124>
80037c70:	00000000 	nop
80037c74:	8fa10064 	lw	at,100(sp)
80037c78:	24020004 	li	v0,4
80037c7c:	10220159 	beq	at,v0,800381e4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x694>
80037c80:	00000000 	nop
80037c84:	0800df47 	j	80037d1c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x1cc>
80037c88:	00000000 	nop
80037c8c:	93a10087 	lbu	at,135(sp)
80037c90:	afa10060 	sw	at,96(sp)
80037c94:	10200178 	beqz	at,80038278 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x728>
80037c98:	00000000 	nop
80037c9c:	0800df29 	j	80037ca4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x154>
80037ca0:	00000000 	nop
80037ca4:	8fa10060 	lw	at,96(sp)
80037ca8:	24020002 	li	v0,2
80037cac:	10220197 	beq	at,v0,8003830c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x7bc>
80037cb0:	00000000 	nop
80037cb4:	0800df2f 	j	80037cbc <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x16c>
80037cb8:	00000000 	nop
80037cbc:	8fa10060 	lw	at,96(sp)
80037cc0:	24020004 	li	v0,4
80037cc4:	102201b6 	beq	at,v0,800383a0 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x850>
80037cc8:	00000000 	nop
80037ccc:	0800df47 	j	80037d1c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x1cc>
80037cd0:	00000000 	nop
80037cd4:	93a10087 	lbu	at,135(sp)
80037cd8:	afa1005c 	sw	at,92(sp)
80037cdc:	102001d5 	beqz	at,80038434 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x8e4>
80037ce0:	00000000 	nop
80037ce4:	0800df3b 	j	80037cec <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x19c>
80037ce8:	00000000 	nop
80037cec:	8fa1005c 	lw	at,92(sp)
80037cf0:	24020002 	li	v0,2
80037cf4:	102201f4 	beq	at,v0,800384c8 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x978>
80037cf8:	00000000 	nop
80037cfc:	0800df41 	j	80037d04 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x1b4>
80037d00:	00000000 	nop
80037d04:	8fa1005c 	lw	at,92(sp)
80037d08:	24020004 	li	v0,4
80037d0c:	10220213 	beq	at,v0,8003855c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0xa0c>
80037d10:	00000000 	nop
80037d14:	0800df47 	j	80037d1c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x1cc>
80037d18:	00000000 	nop
80037d1c:	93a10087 	lbu	at,135(sp)
80037d20:	24020001 	li	v0,1
80037d24:	10220244 	beq	at,v0,80038638 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0xae8>
80037d28:	00000000 	nop
80037d2c:	0800e19a 	j	80038668 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0xb18>
80037d30:	00000000 	nop
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed_relaxed(dst, old, new),
80037d34:	8fa10074 	lw	at,116(sp)
80037d38:	8fa20078 	lw	v0,120(sp)
80037d3c:	8fa30070 	lw	v1,112(sp)
80037d40:	2404fffc 	li	a0,-4
80037d44:	00642024 	and	a0,v1,a0
80037d48:	30630003 	andi	v1,v1,0x3
80037d4c:	000348c0 	sll	t1,v1,0x3
80037d50:	340300ff 	li	v1,0xff
80037d54:	01232804 	sllv	a1,v1,t1
80037d58:	00053827 	nor	a3,zero,a1
80037d5c:	304200ff 	andi	v0,v0,0xff
80037d60:	01223004 	sllv	a2,v0,t1
80037d64:	302100ff 	andi	at,at,0xff
80037d68:	01214004 	sllv	t0,at,t1
80037d6c:	c0820000 	ll	v0,0(a0)
80037d70:	00451824 	and	v1,v0,a1
80037d74:	14660006 	bne	v1,a2,80037d90 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x240>
80037d78:	00000000 	nop
80037d7c:	00471024 	and	v0,v0,a3
80037d80:	00481025 	or	v0,v0,t0
80037d84:	e0820000 	sc	v0,0(a0)
80037d88:	1040fff8 	beqz	v0,80037d6c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x21c>
80037d8c:	00000000 	nop
80037d90:	01230806 	srlv	at,v1,t1
80037d94:	7c010c20 	seb	at,at
80037d98:	afa10058 	sw	at,88(sp)
80037d9c:	8fa20058 	lw	v0,88(sp)
80037da0:	8fa10078 	lw	at,120(sp)
80037da4:	7c010c20 	seb	at,at
80037da8:	00410826 	xor	at,v0,at
80037dac:	2c210001 	sltiu	at,at,1
80037db0:	a3a20084 	sb	v0,132(sp)
80037db4:	a3a10085 	sb	at,133(sp)
80037db8:	0800dfb9 	j	80037ee4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x394>
80037dbc:	00000000 	nop
            (Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),
80037dc0:	8fa10074 	lw	at,116(sp)
80037dc4:	8fa20078 	lw	v0,120(sp)
80037dc8:	8fa30070 	lw	v1,112(sp)
80037dcc:	2404fffc 	li	a0,-4
80037dd0:	00642024 	and	a0,v1,a0
80037dd4:	30630003 	andi	v1,v1,0x3
80037dd8:	000348c0 	sll	t1,v1,0x3
80037ddc:	340300ff 	li	v1,0xff
80037de0:	01232804 	sllv	a1,v1,t1
80037de4:	00053827 	nor	a3,zero,a1
80037de8:	304200ff 	andi	v0,v0,0xff
80037dec:	01223004 	sllv	a2,v0,t1
80037df0:	302100ff 	andi	at,at,0xff
80037df4:	01214004 	sllv	t0,at,t1
80037df8:	c0820000 	ll	v0,0(a0)
80037dfc:	00451824 	and	v1,v0,a1
80037e00:	14660006 	bne	v1,a2,80037e1c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x2cc>
80037e04:	00000000 	nop
80037e08:	00471024 	and	v0,v0,a3
80037e0c:	00481025 	or	v0,v0,t0
80037e10:	e0820000 	sc	v0,0(a0)
80037e14:	1040fff8 	beqz	v0,80037df8 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x2a8>
80037e18:	00000000 	nop
80037e1c:	01230806 	srlv	at,v1,t1
80037e20:	7c010c20 	seb	at,at
80037e24:	afa10054 	sw	at,84(sp)
80037e28:	8fa20054 	lw	v0,84(sp)
80037e2c:	8fa10078 	lw	at,120(sp)
80037e30:	7c010c20 	seb	at,at
80037e34:	00410826 	xor	at,v0,at
80037e38:	2c210001 	sltiu	at,at,1
80037e3c:	0000000f 	sync
80037e40:	a3a20084 	sb	v0,132(sp)
80037e44:	a3a10085 	sb	at,133(sp)
80037e48:	0800dfb9 	j	80037ee4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x394>
80037e4c:	00000000 	nop
            (Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),
80037e50:	8fa10074 	lw	at,116(sp)
80037e54:	8fa20078 	lw	v0,120(sp)
80037e58:	8fa30070 	lw	v1,112(sp)
80037e5c:	0000000f 	sync
80037e60:	2404fffc 	li	a0,-4
80037e64:	00642024 	and	a0,v1,a0
80037e68:	30630003 	andi	v1,v1,0x3
80037e6c:	000348c0 	sll	t1,v1,0x3
80037e70:	340300ff 	li	v1,0xff
80037e74:	01232804 	sllv	a1,v1,t1
80037e78:	00053827 	nor	a3,zero,a1
80037e7c:	304200ff 	andi	v0,v0,0xff
80037e80:	01223004 	sllv	a2,v0,t1
80037e84:	302100ff 	andi	at,at,0xff
80037e88:	01214004 	sllv	t0,at,t1
80037e8c:	c0820000 	ll	v0,0(a0)
80037e90:	00451824 	and	v1,v0,a1
80037e94:	14660006 	bne	v1,a2,80037eb0 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x360>
80037e98:	00000000 	nop
80037e9c:	00471024 	and	v0,v0,a3
80037ea0:	00481025 	or	v0,v0,t0
80037ea4:	e0820000 	sc	v0,0(a0)
80037ea8:	1040fff8 	beqz	v0,80037e8c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x33c>
80037eac:	00000000 	nop
80037eb0:	01230806 	srlv	at,v1,t1
80037eb4:	7c010c20 	seb	at,at
80037eb8:	afa10050 	sw	at,80(sp)
80037ebc:	8fa20050 	lw	v0,80(sp)
80037ec0:	8fa10078 	lw	at,120(sp)
80037ec4:	7c010c20 	seb	at,at
80037ec8:	00410826 	xor	at,v0,at
80037ecc:	2c210001 	sltiu	at,at,1
80037ed0:	0000000f 	sync
80037ed4:	a3a20084 	sb	v0,132(sp)
80037ed8:	a3a10085 	sb	at,133(sp)
80037edc:	0800dfb9 	j	80037ee4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x394>
80037ee0:	00000000 	nop
    let (val, ok) = unsafe {
80037ee4:	93a10084 	lbu	at,132(sp)
80037ee8:	afa1004c 	sw	at,76(sp)
80037eec:	a3a100c2 	sb	at,194(sp)
80037ef0:	93a10085 	lbu	at,133(sp)
80037ef4:	30210001 	andi	at,at,0x1
80037ef8:	a3a100c3 	sb	at,195(sp)
    if ok { Ok(val) } else { Err(val) }
80037efc:	142001c2 	bnez	at,80038608 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0xab8>
80037f00:	00000000 	nop
80037f04:	0800e17c 	j	800385f0 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0xaa0>
80037f08:	00000000 	nop
            (Release, Relaxed) => intrinsics::atomic_cxchg_release_relaxed(dst, old, new),
80037f0c:	8fa10074 	lw	at,116(sp)
80037f10:	8fa20078 	lw	v0,120(sp)
80037f14:	8fa30070 	lw	v1,112(sp)
80037f18:	0000000f 	sync
80037f1c:	2404fffc 	li	a0,-4
80037f20:	00642024 	and	a0,v1,a0
80037f24:	30630003 	andi	v1,v1,0x3
80037f28:	000348c0 	sll	t1,v1,0x3
80037f2c:	340300ff 	li	v1,0xff
80037f30:	01232804 	sllv	a1,v1,t1
80037f34:	00053827 	nor	a3,zero,a1
80037f38:	304200ff 	andi	v0,v0,0xff
80037f3c:	01223004 	sllv	a2,v0,t1
80037f40:	302100ff 	andi	at,at,0xff
80037f44:	01214004 	sllv	t0,at,t1
80037f48:	c0820000 	ll	v0,0(a0)
80037f4c:	00451824 	and	v1,v0,a1
80037f50:	14660006 	bne	v1,a2,80037f6c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x41c>
80037f54:	00000000 	nop
80037f58:	00471024 	and	v0,v0,a3
80037f5c:	00481025 	or	v0,v0,t0
80037f60:	e0820000 	sc	v0,0(a0)
80037f64:	1040fff8 	beqz	v0,80037f48 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x3f8>
80037f68:	00000000 	nop
80037f6c:	01230806 	srlv	at,v1,t1
80037f70:	7c010c20 	seb	at,at
80037f74:	afa10048 	sw	at,72(sp)
80037f78:	8fa20048 	lw	v0,72(sp)
80037f7c:	8fa10078 	lw	at,120(sp)
80037f80:	7c010c20 	seb	at,at
80037f84:	00410826 	xor	at,v0,at
80037f88:	2c210001 	sltiu	at,at,1
80037f8c:	a3a20084 	sb	v0,132(sp)
80037f90:	a3a10085 	sb	at,133(sp)
80037f94:	0800dfb9 	j	80037ee4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x394>
80037f98:	00000000 	nop
            (Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),
80037f9c:	8fa10074 	lw	at,116(sp)
80037fa0:	8fa20078 	lw	v0,120(sp)
80037fa4:	8fa30070 	lw	v1,112(sp)
80037fa8:	0000000f 	sync
80037fac:	2404fffc 	li	a0,-4
80037fb0:	00642024 	and	a0,v1,a0
80037fb4:	30630003 	andi	v1,v1,0x3
80037fb8:	000348c0 	sll	t1,v1,0x3
80037fbc:	340300ff 	li	v1,0xff
80037fc0:	01232804 	sllv	a1,v1,t1
80037fc4:	00053827 	nor	a3,zero,a1
80037fc8:	304200ff 	andi	v0,v0,0xff
80037fcc:	01223004 	sllv	a2,v0,t1
80037fd0:	302100ff 	andi	at,at,0xff
80037fd4:	01214004 	sllv	t0,at,t1
80037fd8:	c0820000 	ll	v0,0(a0)
80037fdc:	00451824 	and	v1,v0,a1
80037fe0:	14660006 	bne	v1,a2,80037ffc <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x4ac>
80037fe4:	00000000 	nop
80037fe8:	00471024 	and	v0,v0,a3
80037fec:	00481025 	or	v0,v0,t0
80037ff0:	e0820000 	sc	v0,0(a0)
80037ff4:	1040fff8 	beqz	v0,80037fd8 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x488>
80037ff8:	00000000 	nop
80037ffc:	01230806 	srlv	at,v1,t1
80038000:	7c010c20 	seb	at,at
80038004:	afa10044 	sw	at,68(sp)
80038008:	8fa20044 	lw	v0,68(sp)
8003800c:	8fa10078 	lw	at,120(sp)
80038010:	7c010c20 	seb	at,at
80038014:	00410826 	xor	at,v0,at
80038018:	2c210001 	sltiu	at,at,1
8003801c:	0000000f 	sync
80038020:	a3a20084 	sb	v0,132(sp)
80038024:	a3a10085 	sb	at,133(sp)
80038028:	0800dfb9 	j	80037ee4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x394>
8003802c:	00000000 	nop
            (Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),
80038030:	8fa10074 	lw	at,116(sp)
80038034:	8fa20078 	lw	v0,120(sp)
80038038:	8fa30070 	lw	v1,112(sp)
8003803c:	0000000f 	sync
80038040:	2404fffc 	li	a0,-4
80038044:	00642024 	and	a0,v1,a0
80038048:	30630003 	andi	v1,v1,0x3
8003804c:	000348c0 	sll	t1,v1,0x3
80038050:	340300ff 	li	v1,0xff
80038054:	01232804 	sllv	a1,v1,t1
80038058:	00053827 	nor	a3,zero,a1
8003805c:	304200ff 	andi	v0,v0,0xff
80038060:	01223004 	sllv	a2,v0,t1
80038064:	302100ff 	andi	at,at,0xff
80038068:	01214004 	sllv	t0,at,t1
8003806c:	c0820000 	ll	v0,0(a0)
80038070:	00451824 	and	v1,v0,a1
80038074:	14660006 	bne	v1,a2,80038090 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x540>
80038078:	00000000 	nop
8003807c:	00471024 	and	v0,v0,a3
80038080:	00481025 	or	v0,v0,t0
80038084:	e0820000 	sc	v0,0(a0)
80038088:	1040fff8 	beqz	v0,8003806c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x51c>
8003808c:	00000000 	nop
80038090:	01230806 	srlv	at,v1,t1
80038094:	7c010c20 	seb	at,at
80038098:	afa10040 	sw	at,64(sp)
8003809c:	8fa20040 	lw	v0,64(sp)
800380a0:	8fa10078 	lw	at,120(sp)
800380a4:	7c010c20 	seb	at,at
800380a8:	00410826 	xor	at,v0,at
800380ac:	2c210001 	sltiu	at,at,1
800380b0:	0000000f 	sync
800380b4:	a3a20084 	sb	v0,132(sp)
800380b8:	a3a10085 	sb	at,133(sp)
800380bc:	0800dfb9 	j	80037ee4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x394>
800380c0:	00000000 	nop
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),
800380c4:	8fa10074 	lw	at,116(sp)
800380c8:	8fa20078 	lw	v0,120(sp)
800380cc:	8fa30070 	lw	v1,112(sp)
800380d0:	2404fffc 	li	a0,-4
800380d4:	00642024 	and	a0,v1,a0
800380d8:	30630003 	andi	v1,v1,0x3
800380dc:	000348c0 	sll	t1,v1,0x3
800380e0:	340300ff 	li	v1,0xff
800380e4:	01232804 	sllv	a1,v1,t1
800380e8:	00053827 	nor	a3,zero,a1
800380ec:	304200ff 	andi	v0,v0,0xff
800380f0:	01223004 	sllv	a2,v0,t1
800380f4:	302100ff 	andi	at,at,0xff
800380f8:	01214004 	sllv	t0,at,t1
800380fc:	c0820000 	ll	v0,0(a0)
80038100:	00451824 	and	v1,v0,a1
80038104:	14660006 	bne	v1,a2,80038120 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x5d0>
80038108:	00000000 	nop
8003810c:	00471024 	and	v0,v0,a3
80038110:	00481025 	or	v0,v0,t0
80038114:	e0820000 	sc	v0,0(a0)
80038118:	1040fff8 	beqz	v0,800380fc <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x5ac>
8003811c:	00000000 	nop
80038120:	01230806 	srlv	at,v1,t1
80038124:	7c010c20 	seb	at,at
80038128:	afa1003c 	sw	at,60(sp)
8003812c:	8fa2003c 	lw	v0,60(sp)
80038130:	8fa10078 	lw	at,120(sp)
80038134:	7c010c20 	seb	at,at
80038138:	00410826 	xor	at,v0,at
8003813c:	2c210001 	sltiu	at,at,1
80038140:	0000000f 	sync
80038144:	a3a20084 	sb	v0,132(sp)
80038148:	a3a10085 	sb	at,133(sp)
8003814c:	0800dfb9 	j	80037ee4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x394>
80038150:	00000000 	nop
            (Acquire, Acquire) => intrinsics::atomic_cxchg_acquire_acquire(dst, old, new),
80038154:	8fa10074 	lw	at,116(sp)
80038158:	8fa20078 	lw	v0,120(sp)
8003815c:	8fa30070 	lw	v1,112(sp)
80038160:	2404fffc 	li	a0,-4
80038164:	00642024 	and	a0,v1,a0
80038168:	30630003 	andi	v1,v1,0x3
8003816c:	000348c0 	sll	t1,v1,0x3
80038170:	340300ff 	li	v1,0xff
80038174:	01232804 	sllv	a1,v1,t1
80038178:	00053827 	nor	a3,zero,a1
8003817c:	304200ff 	andi	v0,v0,0xff
80038180:	01223004 	sllv	a2,v0,t1
80038184:	302100ff 	andi	at,at,0xff
80038188:	01214004 	sllv	t0,at,t1
8003818c:	c0820000 	ll	v0,0(a0)
80038190:	00451824 	and	v1,v0,a1
80038194:	14660006 	bne	v1,a2,800381b0 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x660>
80038198:	00000000 	nop
8003819c:	00471024 	and	v0,v0,a3
800381a0:	00481025 	or	v0,v0,t0
800381a4:	e0820000 	sc	v0,0(a0)
800381a8:	1040fff8 	beqz	v0,8003818c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x63c>
800381ac:	00000000 	nop
800381b0:	01230806 	srlv	at,v1,t1
800381b4:	7c010c20 	seb	at,at
800381b8:	afa10038 	sw	at,56(sp)
800381bc:	8fa20038 	lw	v0,56(sp)
800381c0:	8fa10078 	lw	at,120(sp)
800381c4:	7c010c20 	seb	at,at
800381c8:	00410826 	xor	at,v0,at
800381cc:	2c210001 	sltiu	at,at,1
800381d0:	0000000f 	sync
800381d4:	a3a20084 	sb	v0,132(sp)
800381d8:	a3a10085 	sb	at,133(sp)
800381dc:	0800dfb9 	j	80037ee4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x394>
800381e0:	00000000 	nop
            (Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),
800381e4:	8fa10074 	lw	at,116(sp)
800381e8:	8fa20078 	lw	v0,120(sp)
800381ec:	8fa30070 	lw	v1,112(sp)
800381f0:	0000000f 	sync
800381f4:	2404fffc 	li	a0,-4
800381f8:	00642024 	and	a0,v1,a0
800381fc:	30630003 	andi	v1,v1,0x3
80038200:	000348c0 	sll	t1,v1,0x3
80038204:	340300ff 	li	v1,0xff
80038208:	01232804 	sllv	a1,v1,t1
8003820c:	00053827 	nor	a3,zero,a1
80038210:	304200ff 	andi	v0,v0,0xff
80038214:	01223004 	sllv	a2,v0,t1
80038218:	302100ff 	andi	at,at,0xff
8003821c:	01214004 	sllv	t0,at,t1
80038220:	c0820000 	ll	v0,0(a0)
80038224:	00451824 	and	v1,v0,a1
80038228:	14660006 	bne	v1,a2,80038244 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x6f4>
8003822c:	00000000 	nop
80038230:	00471024 	and	v0,v0,a3
80038234:	00481025 	or	v0,v0,t0
80038238:	e0820000 	sc	v0,0(a0)
8003823c:	1040fff8 	beqz	v0,80038220 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x6d0>
80038240:	00000000 	nop
80038244:	01230806 	srlv	at,v1,t1
80038248:	7c010c20 	seb	at,at
8003824c:	afa10034 	sw	at,52(sp)
80038250:	8fa20034 	lw	v0,52(sp)
80038254:	8fa10078 	lw	at,120(sp)
80038258:	7c010c20 	seb	at,at
8003825c:	00410826 	xor	at,v0,at
80038260:	2c210001 	sltiu	at,at,1
80038264:	0000000f 	sync
80038268:	a3a20084 	sb	v0,132(sp)
8003826c:	a3a10085 	sb	at,133(sp)
80038270:	0800dfb9 	j	80037ee4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x394>
80038274:	00000000 	nop
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_relaxed(dst, old, new),
80038278:	8fa10074 	lw	at,116(sp)
8003827c:	8fa20078 	lw	v0,120(sp)
80038280:	8fa30070 	lw	v1,112(sp)
80038284:	0000000f 	sync
80038288:	2404fffc 	li	a0,-4
8003828c:	00642024 	and	a0,v1,a0
80038290:	30630003 	andi	v1,v1,0x3
80038294:	000348c0 	sll	t1,v1,0x3
80038298:	340300ff 	li	v1,0xff
8003829c:	01232804 	sllv	a1,v1,t1
800382a0:	00053827 	nor	a3,zero,a1
800382a4:	304200ff 	andi	v0,v0,0xff
800382a8:	01223004 	sllv	a2,v0,t1
800382ac:	302100ff 	andi	at,at,0xff
800382b0:	01214004 	sllv	t0,at,t1
800382b4:	c0820000 	ll	v0,0(a0)
800382b8:	00451824 	and	v1,v0,a1
800382bc:	14660006 	bne	v1,a2,800382d8 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x788>
800382c0:	00000000 	nop
800382c4:	00471024 	and	v0,v0,a3
800382c8:	00481025 	or	v0,v0,t0
800382cc:	e0820000 	sc	v0,0(a0)
800382d0:	1040fff8 	beqz	v0,800382b4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x764>
800382d4:	00000000 	nop
800382d8:	01230806 	srlv	at,v1,t1
800382dc:	7c010c20 	seb	at,at
800382e0:	afa10030 	sw	at,48(sp)
800382e4:	8fa20030 	lw	v0,48(sp)
800382e8:	8fa10078 	lw	at,120(sp)
800382ec:	7c010c20 	seb	at,at
800382f0:	00410826 	xor	at,v0,at
800382f4:	2c210001 	sltiu	at,at,1
800382f8:	0000000f 	sync
800382fc:	a3a20084 	sb	v0,132(sp)
80038300:	a3a10085 	sb	at,133(sp)
80038304:	0800dfb9 	j	80037ee4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x394>
80038308:	00000000 	nop
            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel_acquire(dst, old, new),
8003830c:	8fa10074 	lw	at,116(sp)
80038310:	8fa20078 	lw	v0,120(sp)
80038314:	8fa30070 	lw	v1,112(sp)
80038318:	0000000f 	sync
8003831c:	2404fffc 	li	a0,-4
80038320:	00642024 	and	a0,v1,a0
80038324:	30630003 	andi	v1,v1,0x3
80038328:	000348c0 	sll	t1,v1,0x3
8003832c:	340300ff 	li	v1,0xff
80038330:	01232804 	sllv	a1,v1,t1
80038334:	00053827 	nor	a3,zero,a1
80038338:	304200ff 	andi	v0,v0,0xff
8003833c:	01223004 	sllv	a2,v0,t1
80038340:	302100ff 	andi	at,at,0xff
80038344:	01214004 	sllv	t0,at,t1
80038348:	c0820000 	ll	v0,0(a0)
8003834c:	00451824 	and	v1,v0,a1
80038350:	14660006 	bne	v1,a2,8003836c <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x81c>
80038354:	00000000 	nop
80038358:	00471024 	and	v0,v0,a3
8003835c:	00481025 	or	v0,v0,t0
80038360:	e0820000 	sc	v0,0(a0)
80038364:	1040fff8 	beqz	v0,80038348 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x7f8>
80038368:	00000000 	nop
8003836c:	01230806 	srlv	at,v1,t1
80038370:	7c010c20 	seb	at,at
80038374:	afa1002c 	sw	at,44(sp)
80038378:	8fa2002c 	lw	v0,44(sp)
8003837c:	8fa10078 	lw	at,120(sp)
80038380:	7c010c20 	seb	at,at
80038384:	00410826 	xor	at,v0,at
80038388:	2c210001 	sltiu	at,at,1
8003838c:	0000000f 	sync
80038390:	a3a20084 	sb	v0,132(sp)
80038394:	a3a10085 	sb	at,133(sp)
80038398:	0800dfb9 	j	80037ee4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x394>
8003839c:	00000000 	nop
            (AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),
800383a0:	8fa10074 	lw	at,116(sp)
800383a4:	8fa20078 	lw	v0,120(sp)
800383a8:	8fa30070 	lw	v1,112(sp)
800383ac:	0000000f 	sync
800383b0:	2404fffc 	li	a0,-4
800383b4:	00642024 	and	a0,v1,a0
800383b8:	30630003 	andi	v1,v1,0x3
800383bc:	000348c0 	sll	t1,v1,0x3
800383c0:	340300ff 	li	v1,0xff
800383c4:	01232804 	sllv	a1,v1,t1
800383c8:	00053827 	nor	a3,zero,a1
800383cc:	304200ff 	andi	v0,v0,0xff
800383d0:	01223004 	sllv	a2,v0,t1
800383d4:	302100ff 	andi	at,at,0xff
800383d8:	01214004 	sllv	t0,at,t1
800383dc:	c0820000 	ll	v0,0(a0)
800383e0:	00451824 	and	v1,v0,a1
800383e4:	14660006 	bne	v1,a2,80038400 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x8b0>
800383e8:	00000000 	nop
800383ec:	00471024 	and	v0,v0,a3
800383f0:	00481025 	or	v0,v0,t0
800383f4:	e0820000 	sc	v0,0(a0)
800383f8:	1040fff8 	beqz	v0,800383dc <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x88c>
800383fc:	00000000 	nop
80038400:	01230806 	srlv	at,v1,t1
80038404:	7c010c20 	seb	at,at
80038408:	afa10028 	sw	at,40(sp)
8003840c:	8fa20028 	lw	v0,40(sp)
80038410:	8fa10078 	lw	at,120(sp)
80038414:	7c010c20 	seb	at,at
80038418:	00410826 	xor	at,v0,at
8003841c:	2c210001 	sltiu	at,at,1
80038420:	0000000f 	sync
80038424:	a3a20084 	sb	v0,132(sp)
80038428:	a3a10085 	sb	at,133(sp)
8003842c:	0800dfb9 	j	80037ee4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x394>
80038430:	00000000 	nop
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_seqcst_relaxed(dst, old, new),
80038434:	8fa10074 	lw	at,116(sp)
80038438:	8fa20078 	lw	v0,120(sp)
8003843c:	8fa30070 	lw	v1,112(sp)
80038440:	0000000f 	sync
80038444:	2404fffc 	li	a0,-4
80038448:	00642024 	and	a0,v1,a0
8003844c:	30630003 	andi	v1,v1,0x3
80038450:	000348c0 	sll	t1,v1,0x3
80038454:	340300ff 	li	v1,0xff
80038458:	01232804 	sllv	a1,v1,t1
8003845c:	00053827 	nor	a3,zero,a1
80038460:	304200ff 	andi	v0,v0,0xff
80038464:	01223004 	sllv	a2,v0,t1
80038468:	302100ff 	andi	at,at,0xff
8003846c:	01214004 	sllv	t0,at,t1
80038470:	c0820000 	ll	v0,0(a0)
80038474:	00451824 	and	v1,v0,a1
80038478:	14660006 	bne	v1,a2,80038494 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x944>
8003847c:	00000000 	nop
80038480:	00471024 	and	v0,v0,a3
80038484:	00481025 	or	v0,v0,t0
80038488:	e0820000 	sc	v0,0(a0)
8003848c:	1040fff8 	beqz	v0,80038470 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x920>
80038490:	00000000 	nop
80038494:	01230806 	srlv	at,v1,t1
80038498:	7c010c20 	seb	at,at
8003849c:	afa10024 	sw	at,36(sp)
800384a0:	8fa20024 	lw	v0,36(sp)
800384a4:	8fa10078 	lw	at,120(sp)
800384a8:	7c010c20 	seb	at,at
800384ac:	00410826 	xor	at,v0,at
800384b0:	2c210001 	sltiu	at,at,1
800384b4:	0000000f 	sync
800384b8:	a3a20084 	sb	v0,132(sp)
800384bc:	a3a10085 	sb	at,133(sp)
800384c0:	0800dfb9 	j	80037ee4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x394>
800384c4:	00000000 	nop
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_seqcst_acquire(dst, old, new),
800384c8:	8fa10074 	lw	at,116(sp)
800384cc:	8fa20078 	lw	v0,120(sp)
800384d0:	8fa30070 	lw	v1,112(sp)
800384d4:	0000000f 	sync
800384d8:	2404fffc 	li	a0,-4
800384dc:	00642024 	and	a0,v1,a0
800384e0:	30630003 	andi	v1,v1,0x3
800384e4:	000348c0 	sll	t1,v1,0x3
800384e8:	340300ff 	li	v1,0xff
800384ec:	01232804 	sllv	a1,v1,t1
800384f0:	00053827 	nor	a3,zero,a1
800384f4:	304200ff 	andi	v0,v0,0xff
800384f8:	01223004 	sllv	a2,v0,t1
800384fc:	302100ff 	andi	at,at,0xff
80038500:	01214004 	sllv	t0,at,t1
80038504:	c0820000 	ll	v0,0(a0)
80038508:	00451824 	and	v1,v0,a1
8003850c:	14660006 	bne	v1,a2,80038528 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x9d8>
80038510:	00000000 	nop
80038514:	00471024 	and	v0,v0,a3
80038518:	00481025 	or	v0,v0,t0
8003851c:	e0820000 	sc	v0,0(a0)
80038520:	1040fff8 	beqz	v0,80038504 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x9b4>
80038524:	00000000 	nop
80038528:	01230806 	srlv	at,v1,t1
8003852c:	7c010c20 	seb	at,at
80038530:	afa10020 	sw	at,32(sp)
80038534:	8fa20020 	lw	v0,32(sp)
80038538:	8fa10078 	lw	at,120(sp)
8003853c:	7c010c20 	seb	at,at
80038540:	00410826 	xor	at,v0,at
80038544:	2c210001 	sltiu	at,at,1
80038548:	0000000f 	sync
8003854c:	a3a20084 	sb	v0,132(sp)
80038550:	a3a10085 	sb	at,133(sp)
80038554:	0800dfb9 	j	80037ee4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x394>
80038558:	00000000 	nop
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg_seqcst_seqcst(dst, old, new),
8003855c:	8fa10074 	lw	at,116(sp)
80038560:	8fa20078 	lw	v0,120(sp)
80038564:	8fa30070 	lw	v1,112(sp)
80038568:	0000000f 	sync
8003856c:	2404fffc 	li	a0,-4
80038570:	00642024 	and	a0,v1,a0
80038574:	30630003 	andi	v1,v1,0x3
80038578:	000348c0 	sll	t1,v1,0x3
8003857c:	340300ff 	li	v1,0xff
80038580:	01232804 	sllv	a1,v1,t1
80038584:	00053827 	nor	a3,zero,a1
80038588:	304200ff 	andi	v0,v0,0xff
8003858c:	01223004 	sllv	a2,v0,t1
80038590:	302100ff 	andi	at,at,0xff
80038594:	01214004 	sllv	t0,at,t1
80038598:	c0820000 	ll	v0,0(a0)
8003859c:	00451824 	and	v1,v0,a1
800385a0:	14660006 	bne	v1,a2,800385bc <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0xa6c>
800385a4:	00000000 	nop
800385a8:	00471024 	and	v0,v0,a3
800385ac:	00481025 	or	v0,v0,t0
800385b0:	e0820000 	sc	v0,0(a0)
800385b4:	1040fff8 	beqz	v0,80038598 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0xa48>
800385b8:	00000000 	nop
800385bc:	01230806 	srlv	at,v1,t1
800385c0:	7c010c20 	seb	at,at
800385c4:	afa1001c 	sw	at,28(sp)
800385c8:	8fa2001c 	lw	v0,28(sp)
800385cc:	8fa10078 	lw	at,120(sp)
800385d0:	7c010c20 	seb	at,at
800385d4:	00410826 	xor	at,v0,at
800385d8:	2c210001 	sltiu	at,at,1
800385dc:	0000000f 	sync
800385e0:	a3a20084 	sb	v0,132(sp)
800385e4:	a3a10085 	sb	at,133(sp)
800385e8:	0800dfb9 	j	80037ee4 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0x394>
800385ec:	00000000 	nop
    if ok { Ok(val) } else { Err(val) }
800385f0:	8fa1004c 	lw	at,76(sp)
800385f4:	a3a10083 	sb	at,131(sp)
800385f8:	24010001 	li	at,1
800385fc:	a3a10082 	sb	at,130(sp)
80038600:	0800e188 	j	80038620 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0xad0>
80038604:	00000000 	nop
80038608:	8fa1004c 	lw	at,76(sp)
8003860c:	a3a10083 	sb	at,131(sp)
80038610:	24010000 	li	at,0
80038614:	a3a00082 	sb	zero,130(sp)
80038618:	0800e188 	j	80038620 <_ZN4core4sync6atomic23atomic_compare_exchange17h93084aa469f5ee5eE+0xad0>
8003861c:	00000000 	nop
}
80038620:	93a20082 	lbu	v0,130(sp)
80038624:	93a30083 	lbu	v1,131(sp)
80038628:	8fbf00c4 	lw	ra,196(sp)
8003862c:	27bd00c8 	addiu	sp,sp,200
80038630:	03e00008 	jr	ra
80038634:	00000000 	nop
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
80038638:	3c01810a 	lui	at,0x810a
8003863c:	2425a568 	addiu	a1,at,-23192
80038640:	27a400a0 	addiu	a0,sp,160
80038644:	afa40018 	sw	a0,24(sp)
80038648:	24060001 	li	a2,1
8003864c:	0c00de05 	jal	80037814 <_ZN4core3fmt9Arguments9new_const17h98a232de03289e4bE>
80038650:	00000000 	nop
80038654:	8fa40018 	lw	a0,24(sp)
80038658:	3c01810a 	lui	at,0x810a
8003865c:	2425a570 	addiu	a1,at,-23184
80038660:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80038664:	00000000 	nop
            (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
80038668:	3c01810a 	lui	at,0x810a
8003866c:	2425a5c0 	addiu	a1,at,-23104
80038670:	27a40088 	addiu	a0,sp,136
80038674:	afa40014 	sw	a0,20(sp)
80038678:	24060001 	li	a2,1
8003867c:	0c00de05 	jal	80037814 <_ZN4core3fmt9Arguments9new_const17h98a232de03289e4bE>
80038680:	00000000 	nop
80038684:	8fa40014 	lw	a0,20(sp)
80038688:	3c01810a 	lui	at,0x810a
8003868c:	2425a5c8 	addiu	a1,at,-23096
80038690:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80038694:	00000000 	nop

80038698 <_ZN4core5alloc6layout6Layout4size17hb5bb7d78f247551aE>:
    pub const fn size(&self) -> usize {
80038698:	27bdfff8 	addiu	sp,sp,-8
8003869c:	afa40004 	sw	a0,4(sp)
        self.size
800386a0:	8c820004 	lw	v0,4(a0)
800386a4:	27bd0008 	addiu	sp,sp,8
    }
800386a8:	03e00008 	jr	ra
800386ac:	00000000 	nop

800386b0 <_ZN4core5alloc6layout6Layout5align17hb8131710ecdbe0a9E>:
    pub const fn align(&self) -> usize {
800386b0:	27bdffe8 	addiu	sp,sp,-24
800386b4:	afbf0014 	sw	ra,20(sp)
800386b8:	afa40010 	sw	a0,16(sp)
        self.align.as_usize()
800386bc:	8c840000 	lw	a0,0(a0)
800386c0:	0c00de3a 	jal	800378e8 <_ZN4core3ptr9alignment9Alignment8as_usize17h96c884d5514f265fE>
800386c4:	00000000 	nop
    }
800386c8:	8fbf0014 	lw	ra,20(sp)
800386cc:	27bd0018 	addiu	sp,sp,24
800386d0:	03e00008 	jr	ra
800386d4:	00000000 	nop

800386d8 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17hf480a4bd2a3353baE>:
    pub const fn new(data: T) -> Self {
800386d8:	27bdffc8 	addiu	sp,sp,-56
800386dc:	afbf0034 	sw	ra,52(sp)
800386e0:	afa50014 	sw	a1,20(sp)
800386e4:	afa40018 	sw	a0,24(sp)
800386e8:	afa4001c 	sw	a0,28(sp)
800386ec:	afa50024 	sw	a1,36(sp)
800386f0:	24040000 	li	a0,0
            lock: AtomicBool::new(false),
800386f4:	0c00de7e 	jal	800379f8 <_ZN4core4sync6atomic10AtomicBool3new17h2f79bcca5a2a3bcaE>
800386f8:	00000000 	nop
800386fc:	8fa50014 	lw	a1,20(sp)
80038700:	8fa40018 	lw	a0,24(sp)
80038704:	00400825 	move	at,v0
80038708:	8fa2001c 	lw	v0,28(sp)
8003870c:	a3a1002b 	sb	at,43(sp)
80038710:	93a1002b 	lbu	at,43(sp)
80038714:	a3a10023 	sb	at,35(sp)
80038718:	afa50030 	sw	a1,48(sp)
        UnsafeCell { value }
8003871c:	afa5002c 	sw	a1,44(sp)
    }
80038720:	8fa1002c 	lw	at,44(sp)
        Spinlock {
80038724:	93a30023 	lbu	v1,35(sp)
80038728:	a0830004 	sb	v1,4(a0)
8003872c:	ac810000 	sw	at,0(a0)
    }
80038730:	8fbf0034 	lw	ra,52(sp)
80038734:	27bd0038 	addiu	sp,sp,56
80038738:	03e00008 	jr	ra
8003873c:	00000000 	nop

80038740 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8fd649a1255731a2E>:
    pub fn lock(&self) -> SpinlockGuard<T> {
80038740:	27bdffd0 	addiu	sp,sp,-48
80038744:	afbf002c 	sw	ra,44(sp)
80038748:	afa4001c 	sw	a0,28(sp)
8003874c:	afa40028 	sw	a0,40(sp)
        loop {
80038750:	0800e1d6 	j	80038758 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8fd649a1255731a2E+0x18>
80038754:	00000000 	nop
            match self
80038758:	8fa1001c 	lw	at,28(sp)
8003875c:	24240004 	addiu	a0,at,4
80038760:	24010002 	li	at,2
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
80038764:	a3a10026 	sb	at,38(sp)
80038768:	a3a10027 	sb	at,39(sp)
            match self
8003876c:	93a70026 	lbu	a3,38(sp)
80038770:	93a10027 	lbu	at,39(sp)
80038774:	03a01025 	move	v0,sp
80038778:	ac410010 	sw	at,16(v0)
8003877c:	24050000 	li	a1,0
80038780:	24060001 	li	a2,1
80038784:	0c00de41 	jal	80037904 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h577df67133552b4cE>
80038788:	00000000 	nop
8003878c:	30410001 	andi	at,v0,0x1
80038790:	a3a10024 	sb	at,36(sp)
80038794:	a3a30025 	sb	v1,37(sp)
80038798:	93a10024 	lbu	at,36(sp)
8003879c:	30210001 	andi	at,at,0x1
800387a0:	1420000a 	bnez	at,800387cc <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8fd649a1255731a2E+0x8c>
800387a4:	00000000 	nop
800387a8:	0800e1ec 	j	800387b0 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8fd649a1255731a2E+0x70>
800387ac:	00000000 	nop
        SpinlockGuard { lock: self }
800387b0:	8fa1001c 	lw	at,28(sp)
800387b4:	afa10020 	sw	at,32(sp)
    }
800387b8:	8fa20020 	lw	v0,32(sp)
800387bc:	8fbf002c 	lw	ra,44(sp)
800387c0:	27bd0030 	addiu	sp,sp,48
800387c4:	03e00008 	jr	ra
800387c8:	00000000 	nop
                    core::hint::spin_loop();
800387cc:	0800e1d6 	j	80038758 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8fd649a1255731a2E+0x18>
800387d0:	00000000 	nop

800387d4 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h47f3e26ecb438688E>:
    fn drop(&mut self) {
800387d4:	27bdffe0 	addiu	sp,sp,-32
800387d8:	afbf001c 	sw	ra,28(sp)
800387dc:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
800387e0:	8c810000 	lw	at,0(a0)
800387e4:	24240004 	addiu	a0,at,4
800387e8:	24010001 	li	at,1
800387ec:	a3a10017 	sb	at,23(sp)
800387f0:	93a60017 	lbu	a2,23(sp)
800387f4:	24050000 	li	a1,0
800387f8:	0c00de88 	jal	80037a20 <_ZN4core4sync6atomic10AtomicBool5store17h48eb7c1f7e67a4e2E>
800387fc:	00000000 	nop
    }
80038800:	8fbf001c 	lw	ra,28(sp)
80038804:	27bd0020 	addiu	sp,sp,32
80038808:	03e00008 	jr	ra
8003880c:	00000000 	nop

80038810 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17he438bcd96f87568eE>:
    fn deref(&self) -> &T {
80038810:	27bdfff8 	addiu	sp,sp,-8
80038814:	afa40000 	sw	a0,0(sp)
        unsafe { &*self.lock.data.get() }
80038818:	8c820000 	lw	v0,0(a0)
8003881c:	afa20004 	sw	v0,4(sp)
80038820:	27bd0008 	addiu	sp,sp,8
    }
80038824:	03e00008 	jr	ra
80038828:	00000000 	nop

8003882c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h8aca9b297df029fcE>:
    fn deref_mut(&mut self) -> &mut T {
8003882c:	27bdfff8 	addiu	sp,sp,-8
80038830:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
80038834:	8c820000 	lw	v0,0(a0)
80038838:	afa20004 	sw	v0,4(sp)
8003883c:	27bd0008 	addiu	sp,sp,8
    }
80038840:	03e00008 	jr	ra
80038844:	00000000 	nop

80038848 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E>:
        }
    }
}

unsafe impl GlobalAlloc for SimpleAllocator {
    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
80038848:	27bdff68 	addiu	sp,sp,-152
8003884c:	afbf0094 	sw	ra,148(sp)
80038850:	afa40044 	sw	a0,68(sp)
80038854:	afa50050 	sw	a1,80(sp)
80038858:	afa60054 	sw	a2,84(sp)
8003885c:	afa40074 	sw	a0,116(sp)
        let mut offset = self.offset.lock();
80038860:	24840008 	addiu	a0,a0,8
80038864:	0c00e1d0 	jal	80038740 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8fd649a1255731a2E>
80038868:	00000000 	nop
8003886c:	8fa40044 	lw	a0,68(sp)
80038870:	afa20058 	sw	v0,88(sp)
        let mem_start = self.memory.as_ptr() as usize;
80038874:	8c810000 	lw	at,0(a0)
80038878:	afa10048 	sw	at,72(sp)
8003887c:	8c820004 	lw	v0,4(a0)
80038880:	afa1008c 	sw	at,140(sp)
80038884:	afa20090 	sw	v0,144(sp)
80038888:	afa10078 	sw	at,120(sp)
8003888c:	27a40058 	addiu	a0,sp,88

        let start = (*offset + mem_start + layout.align() - 1) & !(layout.align() - 1);
80038890:	0c00e204 	jal	80038810 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17he438bcd96f87568eE>
80038894:	00000000 	nop
80038898:	8fa10048 	lw	at,72(sp)
8003889c:	8c420000 	lw	v0,0(v0)
800388a0:	00410821 	addu	at,v0,at
800388a4:	afa1004c 	sw	at,76(sp)
800388a8:	0022082b 	sltu	at,at,v0
800388ac:	1420000f 	bnez	at,800388ec <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0xa4>
800388b0:	00000000 	nop
800388b4:	0800e22f 	j	800388bc <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x74>
800388b8:	00000000 	nop
800388bc:	27a40050 	addiu	a0,sp,80
800388c0:	0c00e1ac 	jal	800386b0 <_ZN4core5alloc6layout6Layout5align17hb8131710ecdbe0a9E>
800388c4:	00000000 	nop
800388c8:	00400825 	move	at,v0
800388cc:	8fa2004c 	lw	v0,76(sp)
800388d0:	00410821 	addu	at,v0,at
800388d4:	afa10040 	sw	at,64(sp)
800388d8:	0022082b 	sltu	at,at,v0
800388dc:	1420000e 	bnez	at,80038918 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0xd0>
800388e0:	00000000 	nop
800388e4:	0800e23f 	j	800388fc <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0xb4>
800388e8:	00000000 	nop
800388ec:	3c01810a 	lui	at,0x810a
800388f0:	2424a5f0 	addiu	a0,at,-23056
800388f4:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800388f8:	00000000 	nop
800388fc:	8fa10040 	lw	at,64(sp)
80038900:	2422ffff 	addiu	v0,at,-1
80038904:	afa2003c 	sw	v0,60(sp)
80038908:	10200010 	beqz	at,8003894c <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x104>
8003890c:	00000000 	nop
80038910:	0800e24a 	j	80038928 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0xe0>
80038914:	00000000 	nop
80038918:	3c01810a 	lui	at,0x810a
8003891c:	2424a5f0 	addiu	a0,at,-23056
80038920:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80038924:	00000000 	nop
80038928:	27a40050 	addiu	a0,sp,80
8003892c:	0c00e1ac 	jal	800386b0 <_ZN4core5alloc6layout6Layout5align17hb8131710ecdbe0a9E>
80038930:	00000000 	nop
80038934:	2441ffff 	addiu	at,v0,-1
80038938:	afa10038 	sw	at,56(sp)
8003893c:	10400019 	beqz	v0,800389a4 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x15c>
80038940:	00000000 	nop
80038944:	0800e257 	j	8003895c <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x114>
80038948:	00000000 	nop
8003894c:	3c01810a 	lui	at,0x810a
80038950:	2424a600 	addiu	a0,at,-23040
80038954:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80038958:	00000000 	nop
8003895c:	8fa1003c 	lw	at,60(sp)
80038960:	8fa20038 	lw	v0,56(sp)
80038964:	00401027 	nor	v0,v0,zero
80038968:	00220824 	and	at,at,v0
8003896c:	afa10030 	sw	at,48(sp)
80038970:	afa1007c 	sw	at,124(sp)
80038974:	27a40050 	addiu	a0,sp,80
        let start = (start + layout.size() - 1) & !(layout.size() - 1);
80038978:	0c00e1a6 	jal	80038698 <_ZN4core5alloc6layout6Layout4size17hb5bb7d78f247551aE>
8003897c:	00000000 	nop
80038980:	00400825 	move	at,v0
80038984:	8fa20030 	lw	v0,48(sp)
80038988:	00410821 	addu	at,v0,at
8003898c:	afa10034 	sw	at,52(sp)
80038990:	0022082b 	sltu	at,at,v0
80038994:	1420000e 	bnez	at,800389d0 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x188>
80038998:	00000000 	nop
8003899c:	0800e26d 	j	800389b4 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x16c>
800389a0:	00000000 	nop
        let start = (*offset + mem_start + layout.align() - 1) & !(layout.align() - 1);
800389a4:	3c01810a 	lui	at,0x810a
800389a8:	2424a610 	addiu	a0,at,-23024
800389ac:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800389b0:	00000000 	nop
        let start = (start + layout.size() - 1) & !(layout.size() - 1);
800389b4:	8fa10034 	lw	at,52(sp)
800389b8:	2422ffff 	addiu	v0,at,-1
800389bc:	afa2002c 	sw	v0,44(sp)
800389c0:	10200010 	beqz	at,80038a04 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x1bc>
800389c4:	00000000 	nop
800389c8:	0800e278 	j	800389e0 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x198>
800389cc:	00000000 	nop
800389d0:	3c01810a 	lui	at,0x810a
800389d4:	2424a620 	addiu	a0,at,-23008
800389d8:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800389dc:	00000000 	nop
800389e0:	27a40050 	addiu	a0,sp,80
800389e4:	0c00e1a6 	jal	80038698 <_ZN4core5alloc6layout6Layout4size17hb5bb7d78f247551aE>
800389e8:	00000000 	nop
800389ec:	2441ffff 	addiu	at,v0,-1
800389f0:	afa10028 	sw	at,40(sp)
800389f4:	10400014 	beqz	v0,80038a48 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x200>
800389f8:	00000000 	nop
800389fc:	0800e285 	j	80038a14 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x1cc>
80038a00:	00000000 	nop
80038a04:	3c01810a 	lui	at,0x810a
80038a08:	2424a630 	addiu	a0,at,-22992
80038a0c:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80038a10:	00000000 	nop
80038a14:	8fa20048 	lw	v0,72(sp)
80038a18:	8fa1002c 	lw	at,44(sp)
80038a1c:	8fa30028 	lw	v1,40(sp)
80038a20:	00601827 	nor	v1,v1,zero
80038a24:	00230824 	and	at,at,v1
80038a28:	afa10080 	sw	at,128(sp)
        let start = start - mem_start;
80038a2c:	00221823 	subu	v1,at,v0
80038a30:	afa30024 	sw	v1,36(sp)
80038a34:	0022082b 	sltu	at,at,v0
80038a38:	14200015 	bnez	at,80038a90 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x248>
80038a3c:	00000000 	nop
80038a40:	0800e296 	j	80038a58 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x210>
80038a44:	00000000 	nop
        let start = (start + layout.size() - 1) & !(layout.size() - 1);
80038a48:	3c01810a 	lui	at,0x810a
80038a4c:	2424a640 	addiu	a0,at,-22976
80038a50:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80038a54:	00000000 	nop
        let start = start - mem_start;
80038a58:	8fa10024 	lw	at,36(sp)
80038a5c:	afa10084 	sw	at,132(sp)
80038a60:	27a40050 	addiu	a0,sp,80
        let end = start + layout.size();
80038a64:	0c00e1a6 	jal	80038698 <_ZN4core5alloc6layout6Layout4size17hb5bb7d78f247551aE>
80038a68:	00000000 	nop
80038a6c:	00400825 	move	at,v0
80038a70:	8fa20024 	lw	v0,36(sp)
80038a74:	00410821 	addu	at,v0,at
80038a78:	afa10020 	sw	at,32(sp)
80038a7c:	0022082b 	sltu	at,at,v0
80038a80:	14200016 	bnez	at,80038adc <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x294>
80038a84:	00000000 	nop
80038a88:	0800e2a8 	j	80038aa0 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x258>
80038a8c:	00000000 	nop
        let start = start - mem_start;
80038a90:	3c01810a 	lui	at,0x810a
80038a94:	2424a650 	addiu	a0,at,-22960
80038a98:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80038a9c:	00000000 	nop
        let end = start + layout.size();
80038aa0:	8fa10020 	lw	at,32(sp)
80038aa4:	afa10088 	sw	at,136(sp)
80038aa8:	27a40058 	addiu	a0,sp,88
        *offset = end;
80038aac:	0c00e20b 	jal	8003882c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h8aca9b297df029fcE>
80038ab0:	00000000 	nop
80038ab4:	8fa10044 	lw	at,68(sp)
80038ab8:	00401825 	move	v1,v0
80038abc:	8fa20020 	lw	v0,32(sp)
80038ac0:	ac620000 	sw	v0,0(v1)
        if end > self.memory.len() {
80038ac4:	8c210004 	lw	at,4(at)
80038ac8:	0022082b 	sltu	at,at,v0
80038acc:	14200010 	bnez	at,80038b10 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x2c8>
80038ad0:	00000000 	nop
80038ad4:	0800e2bb 	j	80038aec <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x2a4>
80038ad8:	00000000 	nop
        let end = start + layout.size();
80038adc:	3c01810a 	lui	at,0x810a
80038ae0:	2424a660 	addiu	a0,at,-22944
80038ae4:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80038ae8:	00000000 	nop
            panic!("SimpleAllocator: out of memory");
        } else {
            &self.memory[start] as *const u8 as *mut u8
80038aec:	8fa10024 	lw	at,36(sp)
80038af0:	8fa20044 	lw	v0,68(sp)
80038af4:	8c420004 	lw	v0,4(v0)
80038af8:	afa2001c 	sw	v0,28(sp)
80038afc:	0022082b 	sltu	at,at,v0
80038b00:	1420000f 	bnez	at,80038b40 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x2f8>
80038b04:	00000000 	nop
80038b08:	0800e2dd 	j	80038b74 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h7833352d799e6213E+0x32c>
80038b0c:	00000000 	nop
            panic!("SimpleAllocator: out of memory");
80038b10:	3c01810a 	lui	at,0x810a
80038b14:	2425a6a0 	addiu	a1,at,-22880
80038b18:	27a4005c 	addiu	a0,sp,92
80038b1c:	afa40018 	sw	a0,24(sp)
80038b20:	24060001 	li	a2,1
80038b24:	0c00de05 	jal	80037814 <_ZN4core3fmt9Arguments9new_const17h98a232de03289e4bE>
80038b28:	00000000 	nop
80038b2c:	8fa40018 	lw	a0,24(sp)
80038b30:	3c01810a 	lui	at,0x810a
80038b34:	2425a6a8 	addiu	a1,at,-22872
80038b38:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80038b3c:	00000000 	nop
            &self.memory[start] as *const u8 as *mut u8
80038b40:	8fa20024 	lw	v0,36(sp)
80038b44:	8fa10044 	lw	at,68(sp)
80038b48:	8c210000 	lw	at,0(at)
80038b4c:	00220821 	addu	at,at,v0
80038b50:	afa10014 	sw	at,20(sp)
80038b54:	27a40058 	addiu	a0,sp,88
        }
    }
80038b58:	0c00de31 	jal	800378c4 <_ZN4core3ptr59drop_in_place$LT$sync..spin..SpinlockGuard$LT$usize$GT$$GT$17h40a63510b9d9c889E>
80038b5c:	00000000 	nop
80038b60:	8fa20014 	lw	v0,20(sp)
80038b64:	8fbf0094 	lw	ra,148(sp)
80038b68:	27bd0098 	addiu	sp,sp,152
80038b6c:	03e00008 	jr	ra
80038b70:	00000000 	nop
            &self.memory[start] as *const u8 as *mut u8
80038b74:	8fa5001c 	lw	a1,28(sp)
80038b78:	8fa40024 	lw	a0,36(sp)
80038b7c:	3c01810a 	lui	at,0x810a
80038b80:	2426a670 	addiu	a2,at,-22928
80038b84:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80038b88:	00000000 	nop

80038b8c <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17he4d103fab153b98fE>:

    unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {
80038b8c:	27bdfff0 	addiu	sp,sp,-16
80038b90:	afa40000 	sw	a0,0(sp)
80038b94:	afa50004 	sw	a1,4(sp)
80038b98:	afa60008 	sw	a2,8(sp)
80038b9c:	afa7000c 	sw	a3,12(sp)
80038ba0:	27bd0010 	addiu	sp,sp,16
        // not implemented
    }
80038ba4:	03e00008 	jr	ra
80038ba8:	00000000 	nop
80038bac:	00000000 	nop

80038bb0 <tlb_out>:
80038bb0:	40085000 	mfc0	t0,c0_entryhi
80038bb4:	40845000 	mtc0	a0,c0_entryhi
80038bb8:	00000000 	nop
80038bbc:	42000008 	tlbp
80038bc0:	00000000 	nop
80038bc4:	40090000 	mfc0	t1,c0_index
80038bc8:	05200006 	bltz	t1,80038be4 <NO_SUCH_ENTRY>
80038bcc:	00000000 	nop
80038bd0:	40805000 	mtc0	zero,c0_entryhi
80038bd4:	40801000 	mtc0	zero,c0_entrylo0
80038bd8:	40801800 	mtc0	zero,c0_entrylo1
80038bdc:	00000000 	nop
80038be0:	42000002 	tlbwi

80038be4 <NO_SUCH_ENTRY>:
80038be4:	40885000 	mtc0	t0,c0_entryhi
80038be8:	03e00008 	jr	ra
80038bec:	00000000 	nop

80038bf0 <_ZN6mips323tlb8gen_mask17h8ecb12b4ecadd0edE>:
fn gen_mask(h: usize, l: usize) -> usize {
80038bf0:	27bdffd0 	addiu	sp,sp,-48
80038bf4:	afa50020 	sw	a1,32(sp)
80038bf8:	afa40024 	sw	a0,36(sp)
80038bfc:	afa40028 	sw	a0,40(sp)
80038c00:	afa5002c 	sw	a1,44(sp)
    ((!0 as usize) << l) & ((!0 as usize) >> (8*size_of::<usize>() - 1 - h))
80038c04:	2ca10020 	sltiu	at,a1,32
80038c08:	1020000e 	beqz	at,80038c44 <_ZN6mips323tlb8gen_mask17h8ecb12b4ecadd0edE+0x54>
80038c0c:	00000000 	nop
80038c10:	0800e306 	j	80038c18 <_ZN6mips323tlb8gen_mask17h8ecb12b4ecadd0edE+0x28>
80038c14:	00000000 	nop
80038c18:	8fa20020 	lw	v0,32(sp)
80038c1c:	2401ffff 	li	at,-1
80038c20:	00410804 	sllv	at,at,v0
80038c24:	afa10018 	sw	at,24(sp)
80038c28:	24010020 	li	at,32
80038c2c:	afa1001c 	sw	at,28(sp)
80038c30:	24010000 	li	at,0
80038c34:	1400000e 	bnez	zero,80038c70 <_ZN6mips323tlb8gen_mask17h8ecb12b4ecadd0edE+0x80>
80038c38:	00000000 	nop
80038c3c:	0800e315 	j	80038c54 <_ZN6mips323tlb8gen_mask17h8ecb12b4ecadd0edE+0x64>
80038c40:	00000000 	nop
80038c44:	3c01810a 	lui	at,0x810a
80038c48:	2424a6d0 	addiu	a0,at,-22832
80038c4c:	0c012447 	jal	8004911c <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h6a79b323d0787a78E>
80038c50:	00000000 	nop
80038c54:	8fa1001c 	lw	at,28(sp)
80038c58:	2422ffff 	addiu	v0,at,-1
80038c5c:	afa20014 	sw	v0,20(sp)
80038c60:	10200010 	beqz	at,80038ca4 <_ZN6mips323tlb8gen_mask17h8ecb12b4ecadd0edE+0xb4>
80038c64:	00000000 	nop
80038c68:	0800e320 	j	80038c80 <_ZN6mips323tlb8gen_mask17h8ecb12b4ecadd0edE+0x90>
80038c6c:	00000000 	nop
80038c70:	3c01810a 	lui	at,0x810a
80038c74:	2424a6e0 	addiu	a0,at,-22816
80038c78:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
80038c7c:	00000000 	nop
80038c80:	8fa10014 	lw	at,20(sp)
80038c84:	8fa20024 	lw	v0,36(sp)
80038c88:	00221823 	subu	v1,at,v0
80038c8c:	afa30010 	sw	v1,16(sp)
80038c90:	0022082b 	sltu	at,at,v0
80038c94:	1420000d 	bnez	at,80038ccc <_ZN6mips323tlb8gen_mask17h8ecb12b4ecadd0edE+0xdc>
80038c98:	00000000 	nop
80038c9c:	0800e32d 	j	80038cb4 <_ZN6mips323tlb8gen_mask17h8ecb12b4ecadd0edE+0xc4>
80038ca0:	00000000 	nop
80038ca4:	3c01810a 	lui	at,0x810a
80038ca8:	2424a6e0 	addiu	a0,at,-22816
80038cac:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80038cb0:	00000000 	nop
80038cb4:	8fa10010 	lw	at,16(sp)
80038cb8:	2c210020 	sltiu	at,at,32
80038cbc:	14200007 	bnez	at,80038cdc <_ZN6mips323tlb8gen_mask17h8ecb12b4ecadd0edE+0xec>
80038cc0:	00000000 	nop
80038cc4:	0800e33f 	j	80038cfc <_ZN6mips323tlb8gen_mask17h8ecb12b4ecadd0edE+0x10c>
80038cc8:	00000000 	nop
80038ccc:	3c01810a 	lui	at,0x810a
80038cd0:	2424a6f0 	addiu	a0,at,-22800
80038cd4:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80038cd8:	00000000 	nop
80038cdc:	8fa10018 	lw	at,24(sp)
80038ce0:	8fa30010 	lw	v1,16(sp)
80038ce4:	2402ffff 	li	v0,-1
80038ce8:	00621006 	srlv	v0,v0,v1
80038cec:	00221024 	and	v0,at,v0
80038cf0:	27bd0030 	addiu	sp,sp,48
}
80038cf4:	03e00008 	jr	ra
80038cf8:	00000000 	nop
    ((!0 as usize) << l) & ((!0 as usize) >> (8*size_of::<usize>() - 1 - h))
80038cfc:	3c01810a 	lui	at,0x810a
80038d00:	2424a700 	addiu	a0,at,-22784
80038d04:	0c012439 	jal	800490e4 <_ZN4core9panicking11panic_const24panic_const_shr_overflow17h51109cf1c6739500E>
80038d08:	00000000 	nop

80038d0c <_ZN4core3fmt9Arguments9new_const17hde2ac8fbfaba0b59E>:
    pub const fn new_const(pieces: &'a [&'static str]) -> Self {
80038d0c:	27bdffb0 	addiu	sp,sp,-80
80038d10:	afbf004c 	sw	ra,76(sp)
80038d14:	afa60014 	sw	a2,20(sp)
80038d18:	afa50018 	sw	a1,24(sp)
80038d1c:	afa4001c 	sw	a0,28(sp)
80038d20:	afa40020 	sw	a0,32(sp)
80038d24:	afa50044 	sw	a1,68(sp)
80038d28:	afa60048 	sw	a2,72(sp)
        if pieces.len() > 1 {
80038d2c:	2cc10002 	sltiu	at,a2,2
80038d30:	10200016 	beqz	at,80038d8c <_ZN4core3fmt9Arguments9new_const17hde2ac8fbfaba0b59E+0x80>
80038d34:	00000000 	nop
80038d38:	0800e350 	j	80038d40 <_ZN4core3fmt9Arguments9new_const17hde2ac8fbfaba0b59E+0x34>
80038d3c:	00000000 	nop
        Arguments { pieces, fmt: None, args: &[] }
80038d40:	8fa20020 	lw	v0,32(sp)
80038d44:	8fa1001c 	lw	at,28(sp)
80038d48:	8fa30014 	lw	v1,20(sp)
80038d4c:	8fa40018 	lw	a0,24(sp)
80038d50:	afa0003c 	sw	zero,60(sp)
80038d54:	ac240000 	sw	a0,0(at)
80038d58:	ac230004 	sw	v1,4(at)
80038d5c:	8fa4003c 	lw	a0,60(sp)
80038d60:	8fa30040 	lw	v1,64(sp)
80038d64:	ac240010 	sw	a0,16(at)
80038d68:	ac230014 	sw	v1,20(at)
80038d6c:	3c03810a 	lui	v1,0x810a
80038d70:	2463a724 	addiu	v1,v1,-22748
80038d74:	ac230008 	sw	v1,8(at)
80038d78:	ac20000c 	sw	zero,12(at)
    }
80038d7c:	8fbf004c 	lw	ra,76(sp)
80038d80:	27bd0050 	addiu	sp,sp,80
80038d84:	03e00008 	jr	ra
80038d88:	00000000 	nop
            panic!("invalid args");
80038d8c:	3c01810a 	lui	at,0x810a
80038d90:	2425a730 	addiu	a1,at,-22736
80038d94:	27a40024 	addiu	a0,sp,36
80038d98:	afa40010 	sw	a0,16(sp)
80038d9c:	24060001 	li	a2,1
80038da0:	0c00e343 	jal	80038d0c <_ZN4core3fmt9Arguments9new_const17hde2ac8fbfaba0b59E>
80038da4:	00000000 	nop
80038da8:	8fa40010 	lw	a0,16(sp)
80038dac:	3c01810a 	lui	at,0x810a
80038db0:	2425a7a8 	addiu	a1,at,-22616
80038db4:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80038db8:	00000000 	nop

80038dbc <_ZN4core4sync6atomic11AtomicUsize5store17h36157a8618278e0eE>:
            pub fn store(&self, val: $int_type, order: Ordering) {
80038dbc:	27bdffd8 	addiu	sp,sp,-40
80038dc0:	afbf0024 	sw	ra,36(sp)
80038dc4:	afa40014 	sw	a0,20(sp)
80038dc8:	afa50018 	sw	a1,24(sp)
80038dcc:	a3a6001f 	sb	a2,31(sp)
80038dd0:	afa40020 	sw	a0,32(sp)
                unsafe { atomic_store(self.v.get(), val, order); }
80038dd4:	0c00e37b 	jal	80038dec <_ZN4core4sync6atomic12atomic_store17h2e8cbebea0e987eaE>
80038dd8:	00000000 	nop
            }
80038ddc:	8fbf0024 	lw	ra,36(sp)
80038de0:	27bd0028 	addiu	sp,sp,40
80038de4:	03e00008 	jr	ra
80038de8:	00000000 	nop

80038dec <_ZN4core4sync6atomic12atomic_store17h2e8cbebea0e987eaE>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
80038dec:	27bdff98 	addiu	sp,sp,-104
80038df0:	afbf0064 	sw	ra,100(sp)
80038df4:	afa5001c 	sw	a1,28(sp)
80038df8:	afa40020 	sw	a0,32(sp)
80038dfc:	a3a6002b 	sb	a2,43(sp)
80038e00:	afa4005c 	sw	a0,92(sp)
80038e04:	afa50060 	sw	a1,96(sp)
        match order {
80038e08:	93a1002b 	lbu	at,43(sp)
80038e0c:	afa10024 	sw	at,36(sp)
80038e10:	8fa10024 	lw	at,36(sp)
80038e14:	00010880 	sll	at,at,0x2
80038e18:	3c02810a 	lui	v0,0x810a
80038e1c:	00220821 	addu	at,at,v0
80038e20:	8c21a710 	lw	at,-22768(at)
80038e24:	00200008 	jr	at
80038e28:	00000000 	nop
80038e2c:	0000000d 	break
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
80038e30:	8fa1001c 	lw	at,28(sp)
80038e34:	8fa20020 	lw	v0,32(sp)
80038e38:	ac410000 	sw	at,0(v0)
80038e3c:	0800e3b6 	j	80038ed8 <_ZN4core4sync6atomic12atomic_store17h2e8cbebea0e987eaE+0xec>
80038e40:	00000000 	nop
            Release => intrinsics::atomic_store_release(dst, val),
80038e44:	8fa1001c 	lw	at,28(sp)
80038e48:	8fa20020 	lw	v0,32(sp)
80038e4c:	0000000f 	sync
80038e50:	ac410000 	sw	at,0(v0)
80038e54:	0800e3b6 	j	80038ed8 <_ZN4core4sync6atomic12atomic_store17h2e8cbebea0e987eaE+0xec>
80038e58:	00000000 	nop
            Acquire => panic!("there is no such thing as an acquire store"),
80038e5c:	3c01810a 	lui	at,0x810a
80038e60:	2425a7e4 	addiu	a1,at,-22556
80038e64:	27a4002c 	addiu	a0,sp,44
80038e68:	afa40018 	sw	a0,24(sp)
80038e6c:	24060001 	li	a2,1
80038e70:	0c00e343 	jal	80038d0c <_ZN4core3fmt9Arguments9new_const17hde2ac8fbfaba0b59E>
80038e74:	00000000 	nop
80038e78:	8fa40018 	lw	a0,24(sp)
80038e7c:	3c01810a 	lui	at,0x810a
80038e80:	2425a860 	addiu	a1,at,-22432
80038e84:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80038e88:	00000000 	nop
            AcqRel => panic!("there is no such thing as an acquire-release store"),
80038e8c:	3c01810a 	lui	at,0x810a
80038e90:	2425a8a4 	addiu	a1,at,-22364
80038e94:	27a40044 	addiu	a0,sp,68
80038e98:	afa40014 	sw	a0,20(sp)
80038e9c:	24060001 	li	a2,1
80038ea0:	0c00e343 	jal	80038d0c <_ZN4core3fmt9Arguments9new_const17hde2ac8fbfaba0b59E>
80038ea4:	00000000 	nop
80038ea8:	8fa40014 	lw	a0,20(sp)
80038eac:	3c01810a 	lui	at,0x810a
80038eb0:	2425a8ac 	addiu	a1,at,-22356
80038eb4:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80038eb8:	00000000 	nop
            SeqCst => intrinsics::atomic_store_seqcst(dst, val),
80038ebc:	8fa1001c 	lw	at,28(sp)
80038ec0:	8fa20020 	lw	v0,32(sp)
80038ec4:	0000000f 	sync
80038ec8:	ac410000 	sw	at,0(v0)
80038ecc:	0000000f 	sync
80038ed0:	0800e3b6 	j	80038ed8 <_ZN4core4sync6atomic12atomic_store17h2e8cbebea0e987eaE+0xec>
80038ed4:	00000000 	nop
}
80038ed8:	8fbf0064 	lw	ra,100(sp)
80038edc:	27bd0068 	addiu	sp,sp,104
80038ee0:	03e00008 	jr	ra
80038ee4:	00000000 	nop

80038ee8 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb39f41787bed263eE>:
    state: &'a AtomicUsize,
    panicked: bool,
}

impl<'a> Drop for Finish<'a> {
    fn drop(&mut self) {
80038ee8:	27bdffe0 	addiu	sp,sp,-32
80038eec:	afbf001c 	sw	ra,28(sp)
80038ef0:	afa40010 	sw	a0,16(sp)
80038ef4:	afa40018 	sw	a0,24(sp)
        if self.panicked {
80038ef8:	90810004 	lbu	at,4(a0)
80038efc:	30210001 	andi	at,at,0x1
80038f00:	14200007 	bnez	at,80038f20 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb39f41787bed263eE+0x38>
80038f04:	00000000 	nop
80038f08:	0800e3c4 	j	80038f10 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb39f41787bed263eE+0x28>
80038f0c:	00000000 	nop
            self.state.store(PANICKED, Ordering::SeqCst);
        }
    }
80038f10:	8fbf001c 	lw	ra,28(sp)
80038f14:	27bd0020 	addiu	sp,sp,32
80038f18:	03e00008 	jr	ra
80038f1c:	00000000 	nop
            self.state.store(PANICKED, Ordering::SeqCst);
80038f20:	8fa10010 	lw	at,16(sp)
80038f24:	8c240000 	lw	a0,0(at)
80038f28:	24010004 	li	at,4
80038f2c:	a3a10017 	sb	at,23(sp)
80038f30:	93a60017 	lbu	a2,23(sp)
80038f34:	24050003 	li	a1,3
80038f38:	0c00e36f 	jal	80038dbc <_ZN4core4sync6atomic11AtomicUsize5store17h36157a8618278e0eE>
80038f3c:	00000000 	nop
80038f40:	0800e3c4 	j	80038f10 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb39f41787bed263eE+0x28>
80038f44:	00000000 	nop

80038f48 <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17hdecfcf5c197a58d9E>:
    fn from(unique: Unique<T>) -> Self {
80038f48:	27bdffe8 	addiu	sp,sp,-24
80038f4c:	afbf0014 	sw	ra,20(sp)
80038f50:	afa40010 	sw	a0,16(sp)
        unique.as_non_null_ptr()
80038f54:	0c00e61d 	jal	80039874 <_ZN4core3ptr6unique15Unique$LT$T$GT$15as_non_null_ptr17h03a0340f5557557cE>
80038f58:	00000000 	nop
    }
80038f5c:	8fbf0014 	lw	ra,20(sp)
80038f60:	27bd0018 	addiu	sp,sp,24
80038f64:	03e00008 	jr	ra
80038f68:	00000000 	nop

80038f6c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h491e696a56edf9eeE>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
80038f6c:	27bdffe0 	addiu	sp,sp,-32
80038f70:	afa40000 	sw	a0,0(sp)
80038f74:	afa50004 	sw	a1,4(sp)
            Err(e) => Err(From::from(e)),
80038f78:	8fa20000 	lw	v0,0(sp)
80038f7c:	8fa10004 	lw	at,4(sp)
80038f80:	afa20010 	sw	v0,16(sp)
80038f84:	afa10014 	sw	at,20(sp)
80038f88:	afa20018 	sw	v0,24(sp)
80038f8c:	afa1001c 	sw	at,28(sp)
80038f90:	afa20008 	sw	v0,8(sp)
80038f94:	afa1000c 	sw	at,12(sp)
    }
80038f98:	8fa20008 	lw	v0,8(sp)
80038f9c:	8fa3000c 	lw	v1,12(sp)
80038fa0:	27bd0020 	addiu	sp,sp,32
80038fa4:	03e00008 	jr	ra
80038fa8:	00000000 	nop

80038fac <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h64c4e0aa33532904E>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
80038fac:	27bdffd0 	addiu	sp,sp,-48
80038fb0:	afbf002c 	sw	ra,44(sp)
80038fb4:	afa40014 	sw	a0,20(sp)
80038fb8:	afa40018 	sw	a0,24(sp)
80038fbc:	afa5001c 	sw	a1,28(sp)
80038fc0:	afa60020 	sw	a2,32(sp)
            Err(e) => Err(From::from(e)),
80038fc4:	8fa4001c 	lw	a0,28(sp)
80038fc8:	8fa50020 	lw	a1,32(sp)
80038fcc:	afa40024 	sw	a0,36(sp)
80038fd0:	afa50028 	sw	a1,40(sp)
80038fd4:	0c00eca4 	jal	8003b290 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17h136c3be8ef9c5cdbE>
80038fd8:	00000000 	nop
80038fdc:	8fa40014 	lw	a0,20(sp)
80038fe0:	00400825 	move	at,v0
80038fe4:	8fa20018 	lw	v0,24(sp)
80038fe8:	ac810004 	sw	at,4(a0)
80038fec:	ac830008 	sw	v1,8(a0)
80038ff0:	24010001 	li	at,1
80038ff4:	ac810000 	sw	at,0(a0)
    }
80038ff8:	8fbf002c 	lw	ra,44(sp)
80038ffc:	27bd0030 	addiu	sp,sp,48
80039000:	03e00008 	jr	ra
80039004:	00000000 	nop

80039008 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h76db6800faa68b03E>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
80039008:	27bdffd0 	addiu	sp,sp,-48
8003900c:	afbf002c 	sw	ra,44(sp)
80039010:	afa40014 	sw	a0,20(sp)
80039014:	afa50018 	sw	a1,24(sp)
            Err(e) => Err(From::from(e)),
80039018:	8fa40014 	lw	a0,20(sp)
8003901c:	8fa50018 	lw	a1,24(sp)
80039020:	afa40024 	sw	a0,36(sp)
80039024:	afa50028 	sw	a1,40(sp)
80039028:	0c00eca4 	jal	8003b290 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17h136c3be8ef9c5cdbE>
8003902c:	00000000 	nop
80039030:	afa2001c 	sw	v0,28(sp)
80039034:	afa30020 	sw	v1,32(sp)
    }
80039038:	8fa2001c 	lw	v0,28(sp)
8003903c:	8fa30020 	lw	v1,32(sp)
80039040:	8fbf002c 	lw	ra,44(sp)
80039044:	27bd0030 	addiu	sp,sp,48
80039048:	03e00008 	jr	ra
8003904c:	00000000 	nop

80039050 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h8156b4d53ed91be5E>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
80039050:	27bdffe8 	addiu	sp,sp,-24
80039054:	00801025 	move	v0,a0
80039058:	afa50000 	sw	a1,0(sp)
8003905c:	afa60004 	sw	a2,4(sp)
            Err(e) => Err(From::from(e)),
80039060:	8fa30000 	lw	v1,0(sp)
80039064:	8fa10004 	lw	at,4(sp)
80039068:	afa30008 	sw	v1,8(sp)
8003906c:	afa1000c 	sw	at,12(sp)
80039070:	afa30010 	sw	v1,16(sp)
80039074:	afa10014 	sw	at,20(sp)
80039078:	ac830004 	sw	v1,4(a0)
8003907c:	ac810008 	sw	at,8(a0)
80039080:	24010001 	li	at,1
80039084:	ac810000 	sw	at,0(a0)
80039088:	27bd0018 	addiu	sp,sp,24
    }
8003908c:	03e00008 	jr	ra
80039090:	00000000 	nop

80039094 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hb6ff685e17a0e3feE>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
80039094:	27bdfff0 	addiu	sp,sp,-16
            Err(e) => Err(From::from(e)),
80039098:	afa00004 	sw	zero,4(sp)
    }
8003909c:	8fa20004 	lw	v0,4(sp)
800390a0:	8fa30008 	lw	v1,8(sp)
800390a4:	27bd0010 	addiu	sp,sp,16
800390a8:	03e00008 	jr	ra
800390ac:	00000000 	nop

800390b0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h053a40136b7b5e8cE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
800390b0:	27bdffe0 	addiu	sp,sp,-32
800390b4:	afbf001c 	sw	ra,28(sp)
800390b8:	00a03025 	move	a2,a1
800390bc:	00800825 	move	at,a0
800390c0:	afa10014 	sw	at,20(sp)
800390c4:	afa60018 	sw	a2,24(sp)
800390c8:	8c240000 	lw	a0,0(at)
800390cc:	8c250004 	lw	a1,4(at)
800390d0:	0c010aec 	jal	80042bb0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E>
800390d4:	00000000 	nop
800390d8:	8fbf001c 	lw	ra,28(sp)
800390dc:	27bd0020 	addiu	sp,sp,32
800390e0:	03e00008 	jr	ra
800390e4:	00000000 	nop

800390e8 <_ZN4core10intrinsics11write_bytes18precondition_check17hb30bbc705cf97fb4E>:
            const fn precondition_check($($name:$ty),*) {
800390e8:	27bdffe0 	addiu	sp,sp,-32
800390ec:	afbf001c 	sw	ra,28(sp)
800390f0:	afa40014 	sw	a0,20(sp)
800390f4:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
800390f8:	0c00e81d 	jal	8003a074 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E>
800390fc:	00000000 	nop
80039100:	14400008 	bnez	v0,80039124 <_ZN4core10intrinsics11write_bytes18precondition_check17hb30bbc705cf97fb4E+0x3c>
80039104:	00000000 	nop
80039108:	0800e444 	j	80039110 <_ZN4core10intrinsics11write_bytes18precondition_check17hb30bbc705cf97fb4E+0x28>
8003910c:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80039110:	3c01810a 	lui	at,0x810a
80039114:	2424a8bc 	addiu	a0,at,-22340
80039118:	2405006f 	li	a1,111
8003911c:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80039120:	00000000 	nop
            }
80039124:	8fbf001c 	lw	ra,28(sp)
80039128:	27bd0020 	addiu	sp,sp,32
8003912c:	03e00008 	jr	ra
80039130:	00000000 	nop

80039134 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E>:
            const fn precondition_check($($name:$ty),*) {
80039134:	27bdffc8 	addiu	sp,sp,-56
80039138:	afbf0034 	sw	ra,52(sp)
8003913c:	afa70014 	sw	a3,20(sp)
80039140:	afa60010 	sw	a2,16(sp)
80039144:	00a00825 	move	at,a1
80039148:	8fa50014 	lw	a1,20(sp)
8003914c:	afa10018 	sw	at,24(sp)
80039150:	afa4001c 	sw	a0,28(sp)
80039154:	8fa20048 	lw	v0,72(sp)
80039158:	afa20020 	sw	v0,32(sp)
8003915c:	afa40024 	sw	a0,36(sp)
80039160:	afa10028 	sw	at,40(sp)
80039164:	afa6002c 	sw	a2,44(sp)
80039168:	afa50030 	sw	a1,48(sp)
        ub_checks::is_aligned_and_not_null(src, align)
8003916c:	0c00e81d 	jal	8003a074 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E>
80039170:	00000000 	nop
80039174:	14400008 	bnez	v0,80039198 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E+0x64>
80039178:	00000000 	nop
8003917c:	0800e461 	j	80039184 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E+0x50>
80039180:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80039184:	3c01810a 	lui	at,0x810a
80039188:	2424a92b 	addiu	a0,at,-22229
8003918c:	240500a6 	li	a1,166
80039190:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80039194:	00000000 	nop
            && ub_checks::is_aligned_and_not_null(dst, align)
80039198:	8fa50014 	lw	a1,20(sp)
8003919c:	8fa40018 	lw	a0,24(sp)
800391a0:	0c00e81d 	jal	8003a074 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E>
800391a4:	00000000 	nop
800391a8:	1040fff6 	beqz	v0,80039184 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E+0x50>
800391ac:	00000000 	nop
800391b0:	0800e46e 	j	800391b8 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E+0x84>
800391b4:	00000000 	nop
            && ub_checks::is_nonoverlapping(src, dst, size, count)
800391b8:	8fa70020 	lw	a3,32(sp)
800391bc:	8fa60010 	lw	a2,16(sp)
800391c0:	8fa50018 	lw	a1,24(sp)
800391c4:	8fa4001c 	lw	a0,28(sp)
800391c8:	0c00e7d5 	jal	80039f54 <_ZN4core9ub_checks17is_nonoverlapping17h9bdec536d9cabb31E>
800391cc:	00000000 	nop
800391d0:	1040ffec 	beqz	v0,80039184 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E+0x50>
800391d4:	00000000 	nop
800391d8:	0800e478 	j	800391e0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E+0xac>
800391dc:	00000000 	nop
            }
800391e0:	8fbf0034 	lw	ra,52(sp)
800391e4:	27bd0038 	addiu	sp,sp,56
800391e8:	03e00008 	jr	ra
800391ec:	00000000 	nop

800391f0 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE>:
    pub fn new_v1(pieces: &'a [&'static str], args: &'a [rt::Argument<'a>]) -> Arguments<'a> {
800391f0:	27bdff98 	addiu	sp,sp,-104
800391f4:	afbf0064 	sw	ra,100(sp)
800391f8:	afa7001c 	sw	a3,28(sp)
800391fc:	afa60020 	sw	a2,32(sp)
80039200:	afa50024 	sw	a1,36(sp)
80039204:	afa40028 	sw	a0,40(sp)
80039208:	afa4002c 	sw	a0,44(sp)
8003920c:	8fa10078 	lw	at,120(sp)
80039210:	afa10030 	sw	at,48(sp)
80039214:	afa50054 	sw	a1,84(sp)
80039218:	afa60058 	sw	a2,88(sp)
8003921c:	afa7005c 	sw	a3,92(sp)
80039220:	afa10060 	sw	at,96(sp)
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
80039224:	00c1082b 	sltu	at,a2,at
80039228:	1420000a 	bnez	at,80039254 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE+0x64>
8003922c:	00000000 	nop
80039230:	0800e48e 	j	80039238 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE+0x48>
80039234:	00000000 	nop
80039238:	8fa10030 	lw	at,48(sp)
8003923c:	24210001 	addiu	at,at,1
80039240:	afa10018 	sw	at,24(sp)
80039244:	10200016 	beqz	at,800392a0 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE+0xb0>
80039248:	00000000 	nop
8003924c:	0800e4a1 	j	80039284 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE+0x94>
80039250:	00000000 	nop
            panic!("invalid args");
80039254:	3c01810a 	lui	at,0x810a
80039258:	2425aa5c 	addiu	a1,at,-21924
8003925c:	27a40034 	addiu	a0,sp,52
80039260:	afa40014 	sw	a0,20(sp)
80039264:	24060001 	li	a2,1
80039268:	0c00e4bf 	jal	800392fc <_ZN4core3fmt9Arguments9new_const17h2470b053bfe06b9fE>
8003926c:	00000000 	nop
80039270:	8fa40014 	lw	a0,20(sp)
80039274:	3c01810a 	lui	at,0x810a
80039278:	2425aa64 	addiu	a1,at,-21916
8003927c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80039280:	00000000 	nop
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
80039284:	8fa10018 	lw	at,24(sp)
80039288:	8fa20020 	lw	v0,32(sp)
8003928c:	0022082b 	sltu	at,at,v0
80039290:	1420fff0 	bnez	at,80039254 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE+0x64>
80039294:	00000000 	nop
80039298:	0800e4ac 	j	800392b0 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE+0xc0>
8003929c:	00000000 	nop
800392a0:	3c01810a 	lui	at,0x810a
800392a4:	2424aa40 	addiu	a0,at,-21952
800392a8:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800392ac:	00000000 	nop
        Arguments { pieces, fmt: None, args }
800392b0:	8fa2002c 	lw	v0,44(sp)
800392b4:	8fa10030 	lw	at,48(sp)
800392b8:	8fa30028 	lw	v1,40(sp)
800392bc:	8fa4001c 	lw	a0,28(sp)
800392c0:	8fa50020 	lw	a1,32(sp)
800392c4:	8fa60024 	lw	a2,36(sp)
800392c8:	afa0004c 	sw	zero,76(sp)
800392cc:	ac660000 	sw	a2,0(v1)
800392d0:	ac650004 	sw	a1,4(v1)
800392d4:	8fa6004c 	lw	a2,76(sp)
800392d8:	8fa50050 	lw	a1,80(sp)
800392dc:	ac660010 	sw	a2,16(v1)
800392e0:	ac650014 	sw	a1,20(v1)
800392e4:	ac640008 	sw	a0,8(v1)
800392e8:	ac61000c 	sw	at,12(v1)
    }
800392ec:	8fbf0064 	lw	ra,100(sp)
800392f0:	27bd0068 	addiu	sp,sp,104
800392f4:	03e00008 	jr	ra
800392f8:	00000000 	nop

800392fc <_ZN4core3fmt9Arguments9new_const17h2470b053bfe06b9fE>:
    pub const fn new_const(pieces: &'a [&'static str]) -> Self {
800392fc:	27bdffb0 	addiu	sp,sp,-80
80039300:	afbf004c 	sw	ra,76(sp)
80039304:	afa60014 	sw	a2,20(sp)
80039308:	afa50018 	sw	a1,24(sp)
8003930c:	afa4001c 	sw	a0,28(sp)
80039310:	afa40020 	sw	a0,32(sp)
80039314:	afa50044 	sw	a1,68(sp)
80039318:	afa60048 	sw	a2,72(sp)
        if pieces.len() > 1 {
8003931c:	2cc10002 	sltiu	at,a2,2
80039320:	10200016 	beqz	at,8003937c <_ZN4core3fmt9Arguments9new_const17h2470b053bfe06b9fE+0x80>
80039324:	00000000 	nop
80039328:	0800e4cc 	j	80039330 <_ZN4core3fmt9Arguments9new_const17h2470b053bfe06b9fE+0x34>
8003932c:	00000000 	nop
        Arguments { pieces, fmt: None, args: &[] }
80039330:	8fa20020 	lw	v0,32(sp)
80039334:	8fa1001c 	lw	at,28(sp)
80039338:	8fa30014 	lw	v1,20(sp)
8003933c:	8fa40018 	lw	a0,24(sp)
80039340:	afa0003c 	sw	zero,60(sp)
80039344:	ac240000 	sw	a0,0(at)
80039348:	ac230004 	sw	v1,4(at)
8003934c:	8fa4003c 	lw	a0,60(sp)
80039350:	8fa30040 	lw	v1,64(sp)
80039354:	ac240010 	sw	a0,16(at)
80039358:	ac230014 	sw	v1,20(at)
8003935c:	3c03810a 	lui	v1,0x810a
80039360:	2463aa40 	addiu	v1,v1,-21952
80039364:	ac230008 	sw	v1,8(at)
80039368:	ac20000c 	sw	zero,12(at)
    }
8003936c:	8fbf004c 	lw	ra,76(sp)
80039370:	27bd0050 	addiu	sp,sp,80
80039374:	03e00008 	jr	ra
80039378:	00000000 	nop
            panic!("invalid args");
8003937c:	3c01810a 	lui	at,0x810a
80039380:	2425aa5c 	addiu	a1,at,-21924
80039384:	27a40024 	addiu	a0,sp,36
80039388:	afa40010 	sw	a0,16(sp)
8003938c:	24060001 	li	a2,1
80039390:	0c00e4bf 	jal	800392fc <_ZN4core3fmt9Arguments9new_const17h2470b053bfe06b9fE>
80039394:	00000000 	nop
80039398:	8fa40010 	lw	a0,16(sp)
8003939c:	3c01810a 	lui	at,0x810a
800393a0:	2425aa74 	addiu	a1,at,-21900
800393a4:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800393a8:	00000000 	nop

800393ac <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE>:
        pub const fn abs(self) -> Self {
800393ac:	27bdffe0 	addiu	sp,sp,-32
800393b0:	afa40010 	sw	a0,16(sp)
800393b4:	afa40018 	sw	a0,24(sp)
800393b8:	afa4001c 	sw	a0,28(sp)
            if self.is_negative() {
800393bc:	04800007 	bltz	a0,800393dc <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE+0x30>
800393c0:	00000000 	nop
800393c4:	0800e4f3 	j	800393cc <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE+0x20>
800393c8:	00000000 	nop
                self
800393cc:	8fa10010 	lw	at,16(sp)
800393d0:	afa10014 	sw	at,20(sp)
            if self.is_negative() {
800393d4:	0800e4fd 	j	800393f4 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE+0x48>
800393d8:	00000000 	nop
800393dc:	8fa10010 	lw	at,16(sp)
800393e0:	3c028000 	lui	v0,0x8000
                -self
800393e4:	1022000d 	beq	at,v0,8003941c <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE+0x70>
800393e8:	00000000 	nop
800393ec:	0800e501 	j	80039404 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE+0x58>
800393f0:	00000000 	nop
        }
800393f4:	8fa20014 	lw	v0,20(sp)
800393f8:	27bd0020 	addiu	sp,sp,32
800393fc:	03e00008 	jr	ra
80039400:	00000000 	nop
80039404:	8fa10010 	lw	at,16(sp)
80039408:	24020000 	li	v0,0
                -self
8003940c:	00010823 	negu	at,at
80039410:	afa10014 	sw	at,20(sp)
            if self.is_negative() {
80039414:	0800e4fd 	j	800393f4 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE+0x48>
80039418:	00000000 	nop
                -self
8003941c:	3c01810a 	lui	at,0x810a
80039420:	2424aaf4 	addiu	a0,at,-21772
80039424:	0c01242b 	jal	800490ac <_ZN4core9panicking11panic_const24panic_const_neg_overflow17h933ac1df2ff681f7E>
80039428:	00000000 	nop

8003942c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17he7df2978cdc70b82E>:
        pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
8003942c:	27bdffc8 	addiu	sp,sp,-56
80039430:	afa40010 	sw	a0,16(sp)
80039434:	afa50014 	sw	a1,20(sp)
80039438:	afa40028 	sw	a0,40(sp)
8003943c:	afa5002c 	sw	a1,44(sp)
            let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
80039440:	00850019 	multu	a0,a1
80039444:	00000810 	mfhi	at
80039448:	0001082b 	sltu	at,zero,at
8003944c:	70851002 	mul	v0,a0,a1
80039450:	afa20030 	sw	v0,48(sp)
80039454:	a3a10037 	sb	at,55(sp)
            (a as Self, b)
80039458:	afa20020 	sw	v0,32(sp)
8003945c:	a3a10024 	sb	at,36(sp)
        }
80039460:	8fa20020 	lw	v0,32(sp)
80039464:	afa20004 	sw	v0,4(sp)
80039468:	93a10024 	lbu	at,36(sp)
            let (a, b) = self.overflowing_mul(rhs);
8003946c:	afa20018 	sw	v0,24(sp)
80039470:	30210001 	andi	at,at,0x1
80039474:	a3a1001e 	sb	at,30(sp)
            if unlikely!(b) { None } else { Some(a) }
80039478:	a3a1001f 	sb	at,31(sp)
8003947c:	93a1001f 	lbu	at,31(sp)
80039480:	30210001 	andi	at,at,0x1
80039484:	14200009 	bnez	at,800394ac <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17he7df2978cdc70b82E+0x80>
80039488:	00000000 	nop
8003948c:	0800e525 	j	80039494 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17he7df2978cdc70b82E+0x68>
80039490:	00000000 	nop
80039494:	8fa10004 	lw	at,4(sp)
80039498:	afa1000c 	sw	at,12(sp)
8003949c:	24010001 	li	at,1
800394a0:	afa10008 	sw	at,8(sp)
800394a4:	0800e52e 	j	800394b8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17he7df2978cdc70b82E+0x8c>
800394a8:	00000000 	nop
800394ac:	afa00008 	sw	zero,8(sp)
800394b0:	0800e52e 	j	800394b8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17he7df2978cdc70b82E+0x8c>
800394b4:	00000000 	nop
        }
800394b8:	8fa20008 	lw	v0,8(sp)
800394bc:	8fa3000c 	lw	v1,12(sp)
800394c0:	27bd0038 	addiu	sp,sp,56
800394c4:	03e00008 	jr	ra
800394c8:	00000000 	nop

800394cc <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E>:
        pub const fn abs_diff(self, other: Self) -> Self {
800394cc:	27bdffc8 	addiu	sp,sp,-56
800394d0:	afbf0034 	sw	ra,52(sp)
800394d4:	afa50018 	sw	a1,24(sp)
800394d8:	afa4001c 	sw	a0,28(sp)
800394dc:	afa40024 	sw	a0,36(sp)
800394e0:	afa50028 	sw	a1,40(sp)
800394e4:	24010001 	li	at,1
            if mem::size_of::<Self>() == 1 {
800394e8:	1420000d 	bnez	at,80039520 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0x54>
800394ec:	00000000 	nop
800394f0:	0800e53e 	j	800394f8 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0x2c>
800394f4:	00000000 	nop
800394f8:	8fa1001c 	lw	at,28(sp)
800394fc:	8fa20018 	lw	v0,24(sp)
80039500:	afa1002c 	sw	at,44(sp)
80039504:	afa20030 	sw	v0,48(sp)
            intrinsics::wrapping_sub(self, rhs)
80039508:	00222023 	subu	a0,at,v0
                (self as i32).wrapping_sub(other as i32).abs() as Self
8003950c:	0c00e4eb 	jal	800393ac <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE>
80039510:	00000000 	nop
80039514:	afa20020 	sw	v0,32(sp)
            if mem::size_of::<Self>() == 1 {
80039518:	0800e54f 	j	8003953c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0x70>
8003951c:	00000000 	nop
                if self < other {
80039520:	8fa1001c 	lw	at,28(sp)
80039524:	8fa20018 	lw	v0,24(sp)
80039528:	0022082b 	sltu	at,at,v0
8003952c:	14200011 	bnez	at,80039574 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0xa8>
80039530:	00000000 	nop
80039534:	0800e554 	j	80039550 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0x84>
80039538:	00000000 	nop
        }
8003953c:	8fa20020 	lw	v0,32(sp)
80039540:	8fbf0034 	lw	ra,52(sp)
80039544:	27bd0038 	addiu	sp,sp,56
80039548:	03e00008 	jr	ra
8003954c:	00000000 	nop
                    self - other
80039550:	8fa1001c 	lw	at,28(sp)
80039554:	8fa20018 	lw	v0,24(sp)
80039558:	00221823 	subu	v1,at,v0
8003955c:	afa30014 	sw	v1,20(sp)
80039560:	0022082b 	sltu	at,at,v0
80039564:	14200010 	bnez	at,800395a8 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0xdc>
80039568:	00000000 	nop
8003956c:	0800e566 	j	80039598 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0xcc>
80039570:	00000000 	nop
                    other - self
80039574:	8fa10018 	lw	at,24(sp)
80039578:	8fa2001c 	lw	v0,28(sp)
8003957c:	00221823 	subu	v1,at,v0
80039580:	afa30010 	sw	v1,16(sp)
80039584:	0022082b 	sltu	at,at,v0
80039588:	1420000f 	bnez	at,800395c8 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0xfc>
8003958c:	00000000 	nop
80039590:	0800e56e 	j	800395b8 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0xec>
80039594:	00000000 	nop
                    self - other
80039598:	8fa10014 	lw	at,20(sp)
8003959c:	afa10020 	sw	at,32(sp)
                if self < other {
800395a0:	0800e54f 	j	8003953c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0x70>
800395a4:	00000000 	nop
                    self - other
800395a8:	3c01810a 	lui	at,0x810a
800395ac:	2424ab04 	addiu	a0,at,-21756
800395b0:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800395b4:	00000000 	nop
                    other - self
800395b8:	8fa10010 	lw	at,16(sp)
800395bc:	afa10020 	sw	at,32(sp)
                if self < other {
800395c0:	0800e54f 	j	8003953c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0x70>
800395c4:	00000000 	nop
                    other - self
800395c8:	3c01810a 	lui	at,0x810a
800395cc:	2424ab04 	addiu	a0,at,-21756
800395d0:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800395d4:	00000000 	nop

800395d8 <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E>:
pub unsafe fn read_volatile<T>(src: *const T) -> T {
800395d8:	27bdffe0 	addiu	sp,sp,-32
800395dc:	afbf001c 	sw	ra,28(sp)
800395e0:	afa40010 	sw	a0,16(sp)
800395e4:	afa40014 	sw	a0,20(sp)
        ub_checks::assert_unsafe_precondition!(
800395e8:	0c00e7c3 	jal	80039f0c <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
800395ec:	00000000 	nop
800395f0:	1440000b 	bnez	v0,80039620 <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E+0x48>
800395f4:	00000000 	nop
800395f8:	0800e580 	j	80039600 <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E+0x28>
800395fc:	00000000 	nop
        intrinsics::volatile_load(src)
80039600:	8fa10010 	lw	at,16(sp)
80039604:	90210000 	lbu	at,0(at)
80039608:	a3a1001b 	sb	at,27(sp)
}
8003960c:	93a2001b 	lbu	v0,27(sp)
80039610:	8fbf001c 	lw	ra,28(sp)
80039614:	27bd0020 	addiu	sp,sp,32
80039618:	03e00008 	jr	ra
8003961c:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80039620:	8fa40010 	lw	a0,16(sp)
80039624:	24050001 	li	a1,1
80039628:	0c00e58e 	jal	80039638 <_ZN4core3ptr13read_volatile18precondition_check17ha41bf3002e470377E>
8003962c:	00000000 	nop
80039630:	0800e580 	j	80039600 <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E+0x28>
80039634:	00000000 	nop

80039638 <_ZN4core3ptr13read_volatile18precondition_check17ha41bf3002e470377E>:
            const fn precondition_check($($name:$ty),*) {
80039638:	27bdffe0 	addiu	sp,sp,-32
8003963c:	afbf001c 	sw	ra,28(sp)
80039640:	afa40014 	sw	a0,20(sp)
80039644:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80039648:	0c00e81d 	jal	8003a074 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E>
8003964c:	00000000 	nop
80039650:	14400008 	bnez	v0,80039674 <_ZN4core3ptr13read_volatile18precondition_check17ha41bf3002e470377E+0x3c>
80039654:	00000000 	nop
80039658:	0800e598 	j	80039660 <_ZN4core3ptr13read_volatile18precondition_check17ha41bf3002e470377E+0x28>
8003965c:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80039660:	3c01810a 	lui	at,0x810a
80039664:	2424ab14 	addiu	a0,at,-21740
80039668:	2405006e 	li	a1,110
8003966c:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80039670:	00000000 	nop
            }
80039674:	8fbf001c 	lw	ra,28(sp)
80039678:	27bd0020 	addiu	sp,sp,32
8003967c:	03e00008 	jr	ra
80039680:	00000000 	nop

80039684 <_ZN4core3ptr14read_unaligned17h5e374c90726d2edbE>:
pub const unsafe fn read_unaligned<T>(src: *const T) -> T {
80039684:	27bdffb8 	addiu	sp,sp,-72
80039688:	afbf0044 	sw	ra,68(sp)
8003968c:	afa4001c 	sw	a0,28(sp)
80039690:	afa40024 	sw	a0,36(sp)
    }
80039694:	8fa1003c 	lw	at,60(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
80039698:	afa10020 	sw	at,32(sp)
8003969c:	27a10020 	addiu	at,sp,32
800396a0:	afa10034 	sw	at,52(sp)
800396a4:	afa40028 	sw	a0,40(sp)
800396a8:	afa1002c 	sw	at,44(sp)
800396ac:	24010004 	li	at,4
800396b0:	afa10030 	sw	at,48(sp)
    ub_checks::assert_unsafe_precondition!(
800396b4:	0c00e7c3 	jal	80039f0c <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
800396b8:	00000000 	nop
800396bc:	1040000e 	beqz	v0,800396f8 <_ZN4core3ptr14read_unaligned17h5e374c90726d2edbE+0x74>
800396c0:	00000000 	nop
800396c4:	0800e5b3 	j	800396cc <_ZN4core3ptr14read_unaligned17h5e374c90726d2edbE+0x48>
800396c8:	00000000 	nop
800396cc:	8fa4001c 	lw	a0,28(sp)
800396d0:	03a01025 	move	v0,sp
800396d4:	24010004 	li	at,4
800396d8:	ac410010 	sw	at,16(v0)
800396dc:	27a50020 	addiu	a1,sp,32
800396e0:	24070001 	li	a3,1
800396e4:	00e03025 	move	a2,a3
800396e8:	0c00e44d 	jal	80039134 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E>
800396ec:	00000000 	nop
800396f0:	0800e5be 	j	800396f8 <_ZN4core3ptr14read_unaligned17h5e374c90726d2edbE+0x74>
800396f4:	00000000 	nop
800396f8:	8fa2001c 	lw	v0,28(sp)
    unsafe { copy_nonoverlapping(src, dst, count) }
800396fc:	88410003 	lwl	at,3(v0)
80039700:	98410000 	lwr	at,0(v0)
80039704:	afa10020 	sw	at,32(sp)
        tmp.assume_init()
80039708:	8fa20020 	lw	v0,32(sp)
8003970c:	afa20038 	sw	v0,56(sp)
80039710:	afa20040 	sw	v0,64(sp)
}
80039714:	8fbf0044 	lw	ra,68(sp)
80039718:	27bd0048 	addiu	sp,sp,72
8003971c:	03e00008 	jr	ra
80039720:	00000000 	nop

80039724 <_ZN4core3ptr4read17h0aafdd8ed9711880E>:
pub const unsafe fn read<T>(src: *const T) -> T {
80039724:	27bdffe0 	addiu	sp,sp,-32
80039728:	afbf001c 	sw	ra,28(sp)
8003972c:	afa40014 	sw	a0,20(sp)
80039730:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80039734:	0c00e7c3 	jal	80039f0c <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
80039738:	00000000 	nop
8003973c:	14400007 	bnez	v0,8003975c <_ZN4core3ptr4read17h0aafdd8ed9711880E+0x38>
80039740:	00000000 	nop
80039744:	0800e5d3 	j	8003974c <_ZN4core3ptr4read17h0aafdd8ed9711880E+0x28>
80039748:	00000000 	nop
}
8003974c:	8fbf001c 	lw	ra,28(sp)
80039750:	27bd0020 	addiu	sp,sp,32
80039754:	03e00008 	jr	ra
80039758:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8003975c:	8fa40014 	lw	a0,20(sp)
80039760:	24050001 	li	a1,1
80039764:	0c00e5dd 	jal	80039774 <_ZN4core3ptr4read18precondition_check17ha141e0efafa76268E>
80039768:	00000000 	nop
8003976c:	0800e5d3 	j	8003974c <_ZN4core3ptr4read17h0aafdd8ed9711880E+0x28>
80039770:	00000000 	nop

80039774 <_ZN4core3ptr4read18precondition_check17ha141e0efafa76268E>:
            const fn precondition_check($($name:$ty),*) {
80039774:	27bdffe0 	addiu	sp,sp,-32
80039778:	afbf001c 	sw	ra,28(sp)
8003977c:	afa40014 	sw	a0,20(sp)
80039780:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80039784:	0c00e81d 	jal	8003a074 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E>
80039788:	00000000 	nop
8003978c:	14400008 	bnez	v0,800397b0 <_ZN4core3ptr4read18precondition_check17ha141e0efafa76268E+0x3c>
80039790:	00000000 	nop
80039794:	0800e5e7 	j	8003979c <_ZN4core3ptr4read18precondition_check17ha141e0efafa76268E+0x28>
80039798:	00000000 	nop
                    ::core::panicking::panic_nounwind(
8003979c:	3c01810a 	lui	at,0x810a
800397a0:	2424ab82 	addiu	a0,at,-21630
800397a4:	24050065 	li	a1,101
800397a8:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800397ac:	00000000 	nop
            }
800397b0:	8fbf001c 	lw	ra,28(sp)
800397b4:	27bd0020 	addiu	sp,sp,32
800397b8:	03e00008 	jr	ra
800397bc:	00000000 	nop

800397c0 <_ZN4core3ptr5write17heb431dbdaac243d9E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
800397c0:	27bdffd8 	addiu	sp,sp,-40
800397c4:	afbf0024 	sw	ra,36(sp)
800397c8:	afa40014 	sw	a0,20(sp)
800397cc:	00a00825 	move	at,a1
800397d0:	afa10018 	sw	at,24(sp)
800397d4:	afa4001c 	sw	a0,28(sp)
800397d8:	a3a50023 	sb	a1,35(sp)
        ub_checks::assert_unsafe_precondition!(
800397dc:	0c00e7c3 	jal	80039f0c <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
800397e0:	00000000 	nop
800397e4:	1440000a 	bnez	v0,80039810 <_ZN4core3ptr5write17heb431dbdaac243d9E+0x50>
800397e8:	00000000 	nop
800397ec:	0800e5fd 	j	800397f4 <_ZN4core3ptr5write17heb431dbdaac243d9E+0x34>
800397f0:	00000000 	nop
        intrinsics::write_via_move(dst, src)
800397f4:	8fa10018 	lw	at,24(sp)
800397f8:	8fa20014 	lw	v0,20(sp)
800397fc:	a0410000 	sb	at,0(v0)
}
80039800:	8fbf0024 	lw	ra,36(sp)
80039804:	27bd0028 	addiu	sp,sp,40
80039808:	03e00008 	jr	ra
8003980c:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80039810:	8fa40014 	lw	a0,20(sp)
80039814:	24050001 	li	a1,1
80039818:	0c00e60a 	jal	80039828 <_ZN4core3ptr5write18precondition_check17h0e280678aa8b5e7eE>
8003981c:	00000000 	nop
80039820:	0800e5fd 	j	800397f4 <_ZN4core3ptr5write17heb431dbdaac243d9E+0x34>
80039824:	00000000 	nop

80039828 <_ZN4core3ptr5write18precondition_check17h0e280678aa8b5e7eE>:
            const fn precondition_check($($name:$ty),*) {
80039828:	27bdffe0 	addiu	sp,sp,-32
8003982c:	afbf001c 	sw	ra,28(sp)
80039830:	afa40014 	sw	a0,20(sp)
80039834:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80039838:	0c00e81d 	jal	8003a074 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E>
8003983c:	00000000 	nop
80039840:	14400008 	bnez	v0,80039864 <_ZN4core3ptr5write18precondition_check17h0e280678aa8b5e7eE+0x3c>
80039844:	00000000 	nop
80039848:	0800e614 	j	80039850 <_ZN4core3ptr5write18precondition_check17h0e280678aa8b5e7eE+0x28>
8003984c:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80039850:	3c01810a 	lui	at,0x810a
80039854:	2424abe7 	addiu	a0,at,-21529
80039858:	24050066 	li	a1,102
8003985c:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80039860:	00000000 	nop
            }
80039864:	8fbf001c 	lw	ra,28(sp)
80039868:	27bd0020 	addiu	sp,sp,32
8003986c:	03e00008 	jr	ra
80039870:	00000000 	nop

80039874 <_ZN4core3ptr6unique15Unique$LT$T$GT$15as_non_null_ptr17h03a0340f5557557cE>:
    pub const fn as_non_null_ptr(self) -> NonNull<T> {
80039874:	27bdfff8 	addiu	sp,sp,-8
80039878:	00801025 	move	v0,a0
8003987c:	afa20004 	sw	v0,4(sp)
80039880:	27bd0008 	addiu	sp,sp,8
    }
80039884:	03e00008 	jr	ra
80039888:	00000000 	nop

8003988c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17h3f273559bc39e390E>:
        fn runtime_impl(ptr: *mut u8) -> bool {
8003988c:	27bdfff0 	addiu	sp,sp,-16
80039890:	afa40004 	sw	a0,4(sp)
80039894:	afa40008 	sw	a0,8(sp)
80039898:	afa4000c 	sw	a0,12(sp)
            ptr.addr() == 0
8003989c:	2c820001 	sltiu	v0,a0,1
800398a0:	27bd0010 	addiu	sp,sp,16
        }
800398a4:	03e00008 	jr	ra
800398a8:	00000000 	nop

800398ac <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h15051cef55498a68E>:
    pub const fn is_null(self) -> bool {
800398ac:	27bdffe0 	addiu	sp,sp,-32
800398b0:	afbf001c 	sw	ra,28(sp)
800398b4:	afa40018 	sw	a0,24(sp)
        const_eval_select((self as *mut u8,), const_impl, runtime_impl)
800398b8:	afa40014 	sw	a0,20(sp)
800398bc:	8fa40014 	lw	a0,20(sp)
800398c0:	0c00e623 	jal	8003988c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17h3f273559bc39e390E>
800398c4:	00000000 	nop
    }
800398c8:	8fbf001c 	lw	ra,28(sp)
800398cc:	27bd0020 	addiu	sp,sp,32
800398d0:	03e00008 	jr	ra
800398d4:	00000000 	nop

800398d8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h70d2a8f8e7d9a2d4E>:
    pub const fn is_null(self) -> bool {
800398d8:	27bdffe0 	addiu	sp,sp,-32
800398dc:	afbf001c 	sw	ra,28(sp)
800398e0:	afa40018 	sw	a0,24(sp)
        const_eval_select((self as *mut u8,), const_impl, runtime_impl)
800398e4:	afa40014 	sw	a0,20(sp)
800398e8:	8fa40014 	lw	a0,20(sp)
800398ec:	0c00e623 	jal	8003988c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17h3f273559bc39e390E>
800398f0:	00000000 	nop
    }
800398f4:	8fbf001c 	lw	ra,28(sp)
800398f8:	27bd0020 	addiu	sp,sp,32
800398fc:	03e00008 	jr	ra
80039900:	00000000 	nop

80039904 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h04ab63b66ca68e7bE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
80039904:	27bdffd0 	addiu	sp,sp,-48
80039908:	afbf002c 	sw	ra,44(sp)
8003990c:	afa50014 	sw	a1,20(sp)
80039910:	afa40018 	sw	a0,24(sp)
80039914:	afa40024 	sw	a0,36(sp)
80039918:	afa50028 	sw	a1,40(sp)
            assert_unsafe_precondition!(
8003991c:	0c00e7c3 	jal	80039f0c <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
80039920:	00000000 	nop
80039924:	1440000d 	bnez	v0,8003995c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h04ab63b66ca68e7bE+0x58>
80039928:	00000000 	nop
8003992c:	0800e64d 	j	80039934 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h04ab63b66ca68e7bE+0x30>
80039930:	00000000 	nop
            NonNull { pointer: ptr as _ }
80039934:	8fa10014 	lw	at,20(sp)
80039938:	8fa20018 	lw	v0,24(sp)
8003993c:	afa2001c 	sw	v0,28(sp)
80039940:	afa10020 	sw	at,32(sp)
    }
80039944:	8fa2001c 	lw	v0,28(sp)
80039948:	8fa30020 	lw	v1,32(sp)
8003994c:	8fbf002c 	lw	ra,44(sp)
80039950:	27bd0030 	addiu	sp,sp,48
80039954:	03e00008 	jr	ra
80039958:	00000000 	nop
            assert_unsafe_precondition!(
8003995c:	8fa40018 	lw	a0,24(sp)
80039960:	0c00e672 	jal	800399c8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h888d3639802ac370E>
80039964:	00000000 	nop
80039968:	0800e64d 	j	80039934 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h04ab63b66ca68e7bE+0x30>
8003996c:	00000000 	nop

80039970 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h072c601e282e499eE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
80039970:	27bdffe0 	addiu	sp,sp,-32
80039974:	afbf001c 	sw	ra,28(sp)
80039978:	afa40010 	sw	a0,16(sp)
8003997c:	afa40018 	sw	a0,24(sp)
            assert_unsafe_precondition!(
80039980:	0c00e7c3 	jal	80039f0c <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
80039984:	00000000 	nop
80039988:	1440000a 	bnez	v0,800399b4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h072c601e282e499eE+0x44>
8003998c:	00000000 	nop
80039990:	0800e666 	j	80039998 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h072c601e282e499eE+0x28>
80039994:	00000000 	nop
            NonNull { pointer: ptr as _ }
80039998:	8fa10010 	lw	at,16(sp)
8003999c:	afa10014 	sw	at,20(sp)
    }
800399a0:	8fa20014 	lw	v0,20(sp)
800399a4:	8fbf001c 	lw	ra,28(sp)
800399a8:	27bd0020 	addiu	sp,sp,32
800399ac:	03e00008 	jr	ra
800399b0:	00000000 	nop
            assert_unsafe_precondition!(
800399b4:	8fa40010 	lw	a0,16(sp)
800399b8:	0c00e672 	jal	800399c8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h888d3639802ac370E>
800399bc:	00000000 	nop
800399c0:	0800e666 	j	80039998 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h072c601e282e499eE+0x28>
800399c4:	00000000 	nop

800399c8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h888d3639802ac370E>:
            const fn precondition_check($($name:$ty),*) {
800399c8:	27bdffe8 	addiu	sp,sp,-24
800399cc:	afbf0014 	sw	ra,20(sp)
800399d0:	afa40010 	sw	a0,16(sp)
                (ptr: *mut () = ptr as *mut ()) => !ptr.is_null()
800399d4:	0c00e636 	jal	800398d8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h70d2a8f8e7d9a2d4E>
800399d8:	00000000 	nop
800399dc:	14400007 	bnez	v0,800399fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h888d3639802ac370E+0x34>
800399e0:	00000000 	nop
800399e4:	0800e67b 	j	800399ec <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h888d3639802ac370E+0x24>
800399e8:	00000000 	nop
            }
800399ec:	8fbf0014 	lw	ra,20(sp)
800399f0:	27bd0018 	addiu	sp,sp,24
800399f4:	03e00008 	jr	ra
800399f8:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800399fc:	3c01810a 	lui	at,0x810a
80039a00:	2424ac4d 	addiu	a0,at,-21427
80039a04:	2405005d 	li	a1,93
80039a08:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80039a0c:	00000000 	nop

80039a10 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E>:
    pub const fn new(ptr: *mut T) -> Option<Self> {
80039a10:	27bdffe0 	addiu	sp,sp,-32
80039a14:	afbf001c 	sw	ra,28(sp)
80039a18:	afa40010 	sw	a0,16(sp)
80039a1c:	afa40018 	sw	a0,24(sp)
        if !ptr.is_null() {
80039a20:	0c00e62b 	jal	800398ac <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h15051cef55498a68E>
80039a24:	00000000 	nop
80039a28:	14400009 	bnez	v0,80039a50 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E+0x40>
80039a2c:	00000000 	nop
80039a30:	0800e68e 	j	80039a38 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E+0x28>
80039a34:	00000000 	nop
            Some(unsafe { Self::new_unchecked(ptr) })
80039a38:	8fa40010 	lw	a0,16(sp)
80039a3c:	0c00e65c 	jal	80039970 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h072c601e282e499eE>
80039a40:	00000000 	nop
80039a44:	afa20014 	sw	v0,20(sp)
        if !ptr.is_null() {
80039a48:	0800e697 	j	80039a5c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E+0x4c>
80039a4c:	00000000 	nop
            None
80039a50:	afa00014 	sw	zero,20(sp)
        if !ptr.is_null() {
80039a54:	0800e697 	j	80039a5c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E+0x4c>
80039a58:	00000000 	nop
    }
80039a5c:	8fa20014 	lw	v0,20(sp)
80039a60:	8fbf001c 	lw	ra,28(sp)
80039a64:	27bd0020 	addiu	sp,sp,32
80039a68:	03e00008 	jr	ra
80039a6c:	00000000 	nop

80039a70 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h334546e067f56e32E>:
    pub const fn as_mut_ptr(self) -> *mut T {
80039a70:	27bdffe0 	addiu	sp,sp,-32
80039a74:	afbf001c 	sw	ra,28(sp)
80039a78:	afa40010 	sw	a0,16(sp)
80039a7c:	afa50014 	sw	a1,20(sp)
        self.as_non_null_ptr().as_ptr()
80039a80:	0c00e6a7 	jal	80039a9c <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17hc520dd9289351540E>
80039a84:	00000000 	nop
80039a88:	afa20018 	sw	v0,24(sp)
    }
80039a8c:	8fbf001c 	lw	ra,28(sp)
80039a90:	27bd0020 	addiu	sp,sp,32
80039a94:	03e00008 	jr	ra
80039a98:	00000000 	nop

80039a9c <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17hc520dd9289351540E>:
    pub const fn as_non_null_ptr(self) -> NonNull<T> {
80039a9c:	27bdffe0 	addiu	sp,sp,-32
80039aa0:	afbf001c 	sw	ra,28(sp)
80039aa4:	afa40014 	sw	a0,20(sp)
80039aa8:	afa50018 	sw	a1,24(sp)
        self.cast()
80039aac:	0c00ee1a 	jal	8003b868 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hdae9d46e5c3f465bE>
80039ab0:	00000000 	nop
    }
80039ab4:	8fbf001c 	lw	ra,28(sp)
80039ab8:	27bd0020 	addiu	sp,sp,32
80039abc:	03e00008 	jr	ra
80039ac0:	00000000 	nop

80039ac4 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h25684dcbb1a3276fE>:
    pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
80039ac4:	27bdffe0 	addiu	sp,sp,-32
80039ac8:	afbf001c 	sw	ra,28(sp)
80039acc:	afa40010 	sw	a0,16(sp)
80039ad0:	afa50014 	sw	a1,20(sp)
80039ad4:	afa40018 	sw	a0,24(sp)
        unsafe { Self::new_unchecked(super::slice_from_raw_parts_mut(data.as_ptr(), len)) }
80039ad8:	0c00f000 	jal	8003c000 <_ZN4core3ptr24slice_from_raw_parts_mut17h67dceb6de50bda88E>
80039adc:	00000000 	nop
80039ae0:	00402025 	move	a0,v0
80039ae4:	00602825 	move	a1,v1
80039ae8:	0c00e641 	jal	80039904 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h04ab63b66ca68e7bE>
80039aec:	00000000 	nop
    }
80039af0:	8fbf001c 	lw	ra,28(sp)
80039af4:	27bd0020 	addiu	sp,sp,32
80039af8:	03e00008 	jr	ra
80039afc:	00000000 	nop

80039b00 <_ZN4core3ptr9alignment9Alignment8as_usize17h4e3ce773bb5bccebE>:
    pub const fn as_usize(self) -> usize {
80039b00:	27bdfff8 	addiu	sp,sp,-8
80039b04:	afa40004 	sw	a0,4(sp)
        self.0 as usize
80039b08:	afa40000 	sw	a0,0(sp)
80039b0c:	8fa20000 	lw	v0,0(sp)
80039b10:	27bd0008 	addiu	sp,sp,8
    }
80039b14:	03e00008 	jr	ra
80039b18:	00000000 	nop

80039b1c <_ZN4core4hint16assert_unchecked18precondition_check17he821348f60d966f9E>:
            const fn precondition_check($($name:$ty),*) {
80039b1c:	27bdffe8 	addiu	sp,sp,-24
80039b20:	a3a40017 	sb	a0,23(sp)
            (cond: bool = cond) => cond,
80039b24:	14800008 	bnez	a0,80039b48 <_ZN4core4hint16assert_unchecked18precondition_check17he821348f60d966f9E+0x2c>
80039b28:	00000000 	nop
80039b2c:	0800e6cd 	j	80039b34 <_ZN4core4hint16assert_unchecked18precondition_check17he821348f60d966f9E+0x18>
80039b30:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80039b34:	3c01810a 	lui	at,0x810a
80039b38:	2424acaa 	addiu	a0,at,-21334
80039b3c:	24050068 	li	a1,104
80039b40:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80039b44:	00000000 	nop
80039b48:	27bd0018 	addiu	sp,sp,24
            }
80039b4c:	03e00008 	jr	ra
80039b50:	00000000 	nop

80039b54 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>:
    pub const fn size(&self) -> usize {
80039b54:	27bdfff8 	addiu	sp,sp,-8
80039b58:	afa40004 	sw	a0,4(sp)
        self.size
80039b5c:	8c820004 	lw	v0,4(a0)
80039b60:	27bd0008 	addiu	sp,sp,8
    }
80039b64:	03e00008 	jr	ra
80039b68:	00000000 	nop

80039b6c <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>:
    pub const fn align(&self) -> usize {
80039b6c:	27bdffe8 	addiu	sp,sp,-24
80039b70:	afbf0014 	sw	ra,20(sp)
80039b74:	afa40010 	sw	a0,16(sp)
        self.align.as_usize()
80039b78:	8c840000 	lw	a0,0(a0)
80039b7c:	0c00e6c0 	jal	80039b00 <_ZN4core3ptr9alignment9Alignment8as_usize17h4e3ce773bb5bccebE>
80039b80:	00000000 	nop
    }
80039b84:	8fbf0014 	lw	ra,20(sp)
80039b88:	27bd0018 	addiu	sp,sp,24
80039b8c:	03e00008 	jr	ra
80039b90:	00000000 	nop

80039b94 <_ZN4core5alloc6layout6Layout8dangling17h83029e46d45f62cfE>:
    pub const fn dangling(&self) -> NonNull<u8> {
80039b94:	27bdffe0 	addiu	sp,sp,-32
80039b98:	afbf001c 	sw	ra,28(sp)
80039b9c:	afa40014 	sw	a0,20(sp)
        unsafe { NonNull::new_unchecked(crate::ptr::without_provenance_mut::<u8>(self.align())) }
80039ba0:	0c00e6db 	jal	80039b6c <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
80039ba4:	00000000 	nop
80039ba8:	00402025 	move	a0,v0
80039bac:	afa40018 	sw	a0,24(sp)
80039bb0:	0c00e65c 	jal	80039970 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h072c601e282e499eE>
80039bb4:	00000000 	nop
    }
80039bb8:	8fbf001c 	lw	ra,28(sp)
80039bbc:	27bd0020 	addiu	sp,sp,32
80039bc0:	03e00008 	jr	ra
80039bc4:	00000000 	nop

80039bc8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
80039bc8:	27bdfff0 	addiu	sp,sp,-16
80039bcc:	afa40000 	sw	a0,0(sp)
80039bd0:	24010000 	li	at,0
        match self {
80039bd4:	a3a0000a 	sb	zero,10(sp)
80039bd8:	24010001 	li	at,1
80039bdc:	a3a1000a 	sb	at,10(sp)
80039be0:	8fa10000 	lw	at,0(sp)
80039be4:	14200008 	bnez	at,80039c08 <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE+0x40>
80039be8:	00000000 	nop
80039bec:	0800e6fd 	j	80039bf4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE+0x2c>
80039bf0:	00000000 	nop
80039bf4:	24010000 	li	at,0
            None => Err(err),
80039bf8:	a3a0000a 	sb	zero,10(sp)
80039bfc:	afa00004 	sw	zero,4(sp)
80039c00:	0800e707 	j	80039c1c <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE+0x54>
80039c04:	00000000 	nop
            Some(v) => Ok(v),
80039c08:	8fa10000 	lw	at,0(sp)
80039c0c:	afa1000c 	sw	at,12(sp)
80039c10:	afa10004 	sw	at,4(sp)
80039c14:	0800e707 	j	80039c1c <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE+0x54>
80039c18:	00000000 	nop
    }
80039c1c:	93a1000a 	lbu	at,10(sp)
80039c20:	30210001 	andi	at,at,0x1
80039c24:	14200007 	bnez	at,80039c44 <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE+0x7c>
80039c28:	00000000 	nop
80039c2c:	0800e70d 	j	80039c34 <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE+0x6c>
80039c30:	00000000 	nop
80039c34:	8fa20004 	lw	v0,4(sp)
80039c38:	27bd0010 	addiu	sp,sp,16
80039c3c:	03e00008 	jr	ra
80039c40:	00000000 	nop
80039c44:	0800e70d 	j	80039c34 <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE+0x6c>
80039c48:	00000000 	nop

80039c4c <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
80039c4c:	27bdffd8 	addiu	sp,sp,-40
80039c50:	afa70000 	sw	a3,0(sp)
80039c54:	afa40004 	sw	a0,4(sp)
80039c58:	afa40008 	sw	a0,8(sp)
80039c5c:	8fa10038 	lw	at,56(sp)
80039c60:	afa1000c 	sw	at,12(sp)
80039c64:	afa50010 	sw	a1,16(sp)
80039c68:	afa60014 	sw	a2,20(sp)
80039c6c:	afa7001c 	sw	a3,28(sp)
80039c70:	afa10020 	sw	at,32(sp)
80039c74:	24010000 	li	at,0
        match self {
80039c78:	a3a0001b 	sb	zero,27(sp)
80039c7c:	24010001 	li	at,1
80039c80:	a3a1001b 	sb	at,27(sp)
80039c84:	8fa10010 	lw	at,16(sp)
80039c88:	1420000c 	bnez	at,80039cbc <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E+0x70>
80039c8c:	00000000 	nop
80039c90:	0800e726 	j	80039c98 <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E+0x4c>
80039c94:	00000000 	nop
80039c98:	8fa1000c 	lw	at,12(sp)
80039c9c:	8fa20004 	lw	v0,4(sp)
80039ca0:	8fa30000 	lw	v1,0(sp)
80039ca4:	24040000 	li	a0,0
            None => Err(err),
80039ca8:	a3a0001b 	sb	zero,27(sp)
80039cac:	ac430000 	sw	v1,0(v0)
80039cb0:	ac410004 	sw	at,4(v0)
80039cb4:	0800e738 	j	80039ce0 <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E+0x94>
80039cb8:	00000000 	nop
            Some(v) => Ok(v),
80039cbc:	8fa20004 	lw	v0,4(sp)
80039cc0:	8fa10014 	lw	at,20(sp)
80039cc4:	afa10024 	sw	at,36(sp)
80039cc8:	ac410004 	sw	at,4(v0)
80039ccc:	3c018000 	lui	at,0x8000
80039cd0:	34210001 	ori	at,at,0x1
80039cd4:	ac410000 	sw	at,0(v0)
80039cd8:	0800e738 	j	80039ce0 <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E+0x94>
80039cdc:	00000000 	nop
    }
80039ce0:	93a1001b 	lbu	at,27(sp)
80039ce4:	30210001 	andi	at,at,0x1
80039ce8:	14200007 	bnez	at,80039d08 <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E+0xbc>
80039cec:	00000000 	nop
80039cf0:	0800e73e 	j	80039cf8 <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E+0xac>
80039cf4:	00000000 	nop
80039cf8:	8fa20008 	lw	v0,8(sp)
80039cfc:	27bd0028 	addiu	sp,sp,40
80039d00:	03e00008 	jr	ra
80039d04:	00000000 	nop
80039d08:	0800e73e 	j	80039cf8 <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E+0xac>
80039d0c:	00000000 	nop

80039d10 <_ZN4core6option15Option$LT$T$GT$6expect17h537867a9d3760452E>:
    pub const fn expect(self, msg: &str) -> T {
80039d10:	27bdffd0 	addiu	sp,sp,-48
80039d14:	afa70010 	sw	a3,16(sp)
80039d18:	afa60014 	sw	a2,20(sp)
80039d1c:	8fa10040 	lw	at,64(sp)
80039d20:	afa10018 	sw	at,24(sp)
80039d24:	afa4001c 	sw	a0,28(sp)
80039d28:	afa50020 	sw	a1,32(sp)
80039d2c:	afa60024 	sw	a2,36(sp)
80039d30:	afa70028 	sw	a3,40(sp)
        match self {
80039d34:	8fa1001c 	lw	at,28(sp)
80039d38:	14200008 	bnez	at,80039d5c <_ZN4core6option15Option$LT$T$GT$6expect17h537867a9d3760452E+0x4c>
80039d3c:	00000000 	nop
80039d40:	0800e752 	j	80039d48 <_ZN4core6option15Option$LT$T$GT$6expect17h537867a9d3760452E+0x38>
80039d44:	00000000 	nop
            None => expect_failed(msg),
80039d48:	8fa60018 	lw	a2,24(sp)
80039d4c:	8fa50010 	lw	a1,16(sp)
80039d50:	8fa40014 	lw	a0,20(sp)
80039d54:	0c00fac0 	jal	8003eb00 <_ZN4core6option13expect_failed17h75c0aba452453316E>
80039d58:	00000000 	nop
            Some(val) => val,
80039d5c:	8fa20020 	lw	v0,32(sp)
80039d60:	afa2002c 	sw	v0,44(sp)
80039d64:	27bd0030 	addiu	sp,sp,48
    }
80039d68:	03e00008 	jr	ra
80039d6c:	00000000 	nop

80039d70 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
80039d70:	27bdffd0 	addiu	sp,sp,-48
80039d74:	afbf002c 	sw	ra,44(sp)
80039d78:	afa40010 	sw	a0,16(sp)
80039d7c:	afa40014 	sw	a0,20(sp)
80039d80:	afa50018 	sw	a1,24(sp)
80039d84:	afa6001c 	sw	a2,28(sp)
80039d88:	24010000 	li	at,0
        match self {
80039d8c:	a3a00021 	sb	zero,33(sp)
80039d90:	24010001 	li	at,1
80039d94:	a3a10021 	sb	at,33(sp)
80039d98:	8fa10018 	lw	at,24(sp)
80039d9c:	1020000d 	beqz	at,80039dd4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E+0x64>
80039da0:	00000000 	nop
80039da4:	0800e76b 	j	80039dac <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E+0x3c>
80039da8:	00000000 	nop
            Ok(t) => Ok(t),
80039dac:	8fa10010 	lw	at,16(sp)
80039db0:	8fa30018 	lw	v1,24(sp)
80039db4:	8fa2001c 	lw	v0,28(sp)
80039db8:	afa30024 	sw	v1,36(sp)
80039dbc:	afa20028 	sw	v0,40(sp)
80039dc0:	ac230004 	sw	v1,4(at)
80039dc4:	ac220008 	sw	v0,8(at)
80039dc8:	ac200000 	sw	zero,0(at)
80039dcc:	0800e781 	j	80039e04 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E+0x94>
80039dd0:	00000000 	nop
80039dd4:	24010000 	li	at,0
            Err(e) => Err(op(e)),
80039dd8:	a3a00021 	sb	zero,33(sp)
80039ddc:	0c00e9de 	jal	8003a778 <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h02a960f90665afe1E>
80039de0:	00000000 	nop
80039de4:	00400825 	move	at,v0
80039de8:	8fa20010 	lw	v0,16(sp)
80039dec:	ac410004 	sw	at,4(v0)
80039df0:	ac430008 	sw	v1,8(v0)
80039df4:	24010001 	li	at,1
80039df8:	ac410000 	sw	at,0(v0)
80039dfc:	0800e781 	j	80039e04 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E+0x94>
80039e00:	00000000 	nop
    }
80039e04:	93a10021 	lbu	at,33(sp)
80039e08:	30210001 	andi	at,at,0x1
80039e0c:	14200008 	bnez	at,80039e30 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E+0xc0>
80039e10:	00000000 	nop
80039e14:	0800e787 	j	80039e1c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E+0xac>
80039e18:	00000000 	nop
80039e1c:	8fa20014 	lw	v0,20(sp)
80039e20:	8fbf002c 	lw	ra,44(sp)
80039e24:	27bd0030 	addiu	sp,sp,48
80039e28:	03e00008 	jr	ra
80039e2c:	00000000 	nop
80039e30:	0800e787 	j	80039e1c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E+0xac>
80039e34:	00000000 	nop

80039e38 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
80039e38:	27bdffc0 	addiu	sp,sp,-64
80039e3c:	afbf003c 	sw	ra,60(sp)
80039e40:	afa70014 	sw	a3,20(sp)
80039e44:	afa40018 	sw	a0,24(sp)
80039e48:	afa4001c 	sw	a0,28(sp)
80039e4c:	afa50020 	sw	a1,32(sp)
80039e50:	afa60024 	sw	a2,36(sp)
80039e54:	afa7002c 	sw	a3,44(sp)
80039e58:	24010000 	li	at,0
        match self {
80039e5c:	a3a0002b 	sb	zero,43(sp)
80039e60:	24010001 	li	at,1
80039e64:	a3a1002b 	sb	at,43(sp)
80039e68:	8fa10020 	lw	at,32(sp)
80039e6c:	1020000d 	beqz	at,80039ea4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E+0x6c>
80039e70:	00000000 	nop
80039e74:	0800e79f 	j	80039e7c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E+0x44>
80039e78:	00000000 	nop
            Ok(t) => Ok(t),
80039e7c:	8fa10018 	lw	at,24(sp)
80039e80:	8fa30020 	lw	v1,32(sp)
80039e84:	8fa20024 	lw	v0,36(sp)
80039e88:	afa30034 	sw	v1,52(sp)
80039e8c:	afa20038 	sw	v0,56(sp)
80039e90:	ac230004 	sw	v1,4(at)
80039e94:	ac220008 	sw	v0,8(at)
80039e98:	ac200000 	sw	zero,0(at)
80039e9c:	0800e7b6 	j	80039ed8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E+0xa0>
80039ea0:	00000000 	nop
80039ea4:	8fa40014 	lw	a0,20(sp)
80039ea8:	24010000 	li	at,0
            Err(e) => Err(op(e)),
80039eac:	a3a0002b 	sb	zero,43(sp)
80039eb0:	0c00e9e5 	jal	8003a794 <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17hb2464f62b037e93cE>
80039eb4:	00000000 	nop
80039eb8:	00400825 	move	at,v0
80039ebc:	8fa20018 	lw	v0,24(sp)
80039ec0:	ac410004 	sw	at,4(v0)
80039ec4:	ac430008 	sw	v1,8(v0)
80039ec8:	24010001 	li	at,1
80039ecc:	ac410000 	sw	at,0(v0)
80039ed0:	0800e7b6 	j	80039ed8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E+0xa0>
80039ed4:	00000000 	nop
    }
80039ed8:	93a1002b 	lbu	at,43(sp)
80039edc:	30210001 	andi	at,at,0x1
80039ee0:	14200008 	bnez	at,80039f04 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E+0xcc>
80039ee4:	00000000 	nop
80039ee8:	0800e7bc 	j	80039ef0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E+0xb8>
80039eec:	00000000 	nop
80039ef0:	8fa2001c 	lw	v0,28(sp)
80039ef4:	8fbf003c 	lw	ra,60(sp)
80039ef8:	27bd0040 	addiu	sp,sp,64
80039efc:	03e00008 	jr	ra
80039f00:	00000000 	nop
80039f04:	0800e7bc 	j	80039ef0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E+0xb8>
80039f08:	00000000 	nop

80039f0c <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>:
pub(crate) const fn check_language_ub() -> bool {
80039f0c:	27bdffe8 	addiu	sp,sp,-24
80039f10:	afbf0014 	sw	ra,20(sp)
    intrinsics::ub_checks() && const_eval_select((), comptime, runtime)
80039f14:	0800e7c7 	j	80039f1c <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E+0x10>
80039f18:	00000000 	nop
80039f1c:	0c00e7d2 	jal	80039f48 <_ZN4core9ub_checks17check_language_ub7runtime17hfc67b9aa45e668abE>
80039f20:	00000000 	nop
80039f24:	a3a20013 	sb	v0,19(sp)
80039f28:	0800e7cc 	j	80039f30 <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E+0x24>
80039f2c:	00000000 	nop
}
80039f30:	93a10013 	lbu	at,19(sp)
80039f34:	30220001 	andi	v0,at,0x1
80039f38:	8fbf0014 	lw	ra,20(sp)
80039f3c:	27bd0018 	addiu	sp,sp,24
80039f40:	03e00008 	jr	ra
80039f44:	00000000 	nop

80039f48 <_ZN4core9ub_checks17check_language_ub7runtime17hfc67b9aa45e668abE>:
    fn runtime() -> bool {
80039f48:	24020001 	li	v0,1
    }
80039f4c:	03e00008 	jr	ra
80039f50:	00000000 	nop

80039f54 <_ZN4core9ub_checks17is_nonoverlapping17h9bdec536d9cabb31E>:
pub(crate) const fn is_nonoverlapping(
80039f54:	27bdffc8 	addiu	sp,sp,-56
80039f58:	afbf0034 	sw	ra,52(sp)
80039f5c:	afa40024 	sw	a0,36(sp)
80039f60:	afa50028 	sw	a1,40(sp)
80039f64:	afa6002c 	sw	a2,44(sp)
80039f68:	afa70030 	sw	a3,48(sp)
    const_eval_select((src, dst, size, count), comptime, runtime)
80039f6c:	afa40014 	sw	a0,20(sp)
80039f70:	afa50018 	sw	a1,24(sp)
80039f74:	afa6001c 	sw	a2,28(sp)
80039f78:	afa70020 	sw	a3,32(sp)
80039f7c:	8fa40014 	lw	a0,20(sp)
80039f80:	8fa50018 	lw	a1,24(sp)
80039f84:	8fa6001c 	lw	a2,28(sp)
80039f88:	8fa70020 	lw	a3,32(sp)
80039f8c:	0c00e7e9 	jal	80039fa4 <_ZN4core9ub_checks17is_nonoverlapping7runtime17hedd3416832afba5fE>
80039f90:	00000000 	nop
}
80039f94:	8fbf0034 	lw	ra,52(sp)
80039f98:	27bd0038 	addiu	sp,sp,56
80039f9c:	03e00008 	jr	ra
80039fa0:	00000000 	nop

80039fa4 <_ZN4core9ub_checks17is_nonoverlapping7runtime17hedd3416832afba5fE>:
    fn runtime(src: *const (), dst: *const (), size: usize, count: usize) -> bool {
80039fa4:	27bdffa0 	addiu	sp,sp,-96
80039fa8:	afbf005c 	sw	ra,92(sp)
80039fac:	afa70014 	sw	a3,20(sp)
80039fb0:	afa60018 	sw	a2,24(sp)
80039fb4:	00a00825 	move	at,a1
80039fb8:	8fa50014 	lw	a1,20(sp)
80039fbc:	00801025 	move	v0,a0
80039fc0:	8fa40018 	lw	a0,24(sp)
80039fc4:	afa2002c 	sw	v0,44(sp)
80039fc8:	afa10030 	sw	at,48(sp)
80039fcc:	afa40034 	sw	a0,52(sp)
80039fd0:	afa50038 	sw	a1,56(sp)
80039fd4:	afa20050 	sw	v0,80(sp)
80039fd8:	afa20054 	sw	v0,84(sp)
80039fdc:	00401825 	move	v1,v0
80039fe0:	afa3001c 	sw	v1,28(sp)
        let src_usize = src.addr();
80039fe4:	afa2003c 	sw	v0,60(sp)
80039fe8:	afa1004c 	sw	at,76(sp)
80039fec:	afa10058 	sw	at,88(sp)
80039ff0:	00201025 	move	v0,at
80039ff4:	afa20020 	sw	v0,32(sp)
        let dst_usize = dst.addr();
80039ff8:	afa10040 	sw	at,64(sp)
        let Some(size) = size.checked_mul(count) else {
80039ffc:	0c00e50b 	jal	8003942c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17he7df2978cdc70b82E>
8003a000:	00000000 	nop
8003a004:	afa20024 	sw	v0,36(sp)
8003a008:	afa30028 	sw	v1,40(sp)
8003a00c:	8fa10024 	lw	at,36(sp)
8003a010:	24020001 	li	v0,1
8003a014:	14220012 	bne	at,v0,8003a060 <_ZN4core9ub_checks17is_nonoverlapping7runtime17hedd3416832afba5fE+0xbc>
8003a018:	00000000 	nop
8003a01c:	0800e809 	j	8003a024 <_ZN4core9ub_checks17is_nonoverlapping7runtime17hedd3416832afba5fE+0x80>
8003a020:	00000000 	nop
8003a024:	8fa50020 	lw	a1,32(sp)
8003a028:	8fa4001c 	lw	a0,28(sp)
8003a02c:	8fa10028 	lw	at,40(sp)
8003a030:	afa10010 	sw	at,16(sp)
8003a034:	afa10044 	sw	at,68(sp)
        let diff = src_usize.abs_diff(dst_usize);
8003a038:	0c00e533 	jal	800394cc <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E>
8003a03c:	00000000 	nop
8003a040:	8fa10010 	lw	at,16(sp)
8003a044:	afa20048 	sw	v0,72(sp)
        diff >= size
8003a048:	0041082b 	sltu	at,v0,at
8003a04c:	38220001 	xori	v0,at,0x1
    }
8003a050:	8fbf005c 	lw	ra,92(sp)
8003a054:	27bd0060 	addiu	sp,sp,96
8003a058:	03e00008 	jr	ra
8003a05c:	00000000 	nop
            crate::panicking::panic_nounwind(
8003a060:	3c01810a 	lui	at,0x810a
8003a064:	2424ad12 	addiu	a0,at,-21230
8003a068:	2405003d 	li	a1,61
8003a06c:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8003a070:	00000000 	nop

8003a074 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E>:
pub(crate) const fn is_aligned_and_not_null(ptr: *const (), align: usize) -> bool {
8003a074:	27bdffd8 	addiu	sp,sp,-40
8003a078:	afbf0024 	sw	ra,36(sp)
8003a07c:	afa50010 	sw	a1,16(sp)
8003a080:	afa40014 	sw	a0,20(sp)
8003a084:	afa4001c 	sw	a0,28(sp)
8003a088:	afa50020 	sw	a1,32(sp)
    !ptr.is_null() && ptr.is_aligned_to(align)
8003a08c:	0c00eec8 	jal	8003bb20 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h7332b93c4f97f066E>
8003a090:	00000000 	nop
8003a094:	1440000a 	bnez	v0,8003a0c0 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E+0x4c>
8003a098:	00000000 	nop
8003a09c:	0800e829 	j	8003a0a4 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E+0x30>
8003a0a0:	00000000 	nop
8003a0a4:	8fa50010 	lw	a1,16(sp)
8003a0a8:	8fa40014 	lw	a0,20(sp)
8003a0ac:	0c00ef1e 	jal	8003bc78 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to17hb855d440ce971e64E>
8003a0b0:	00000000 	nop
8003a0b4:	a3a2001b 	sb	v0,27(sp)
8003a0b8:	0800e834 	j	8003a0d0 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E+0x5c>
8003a0bc:	00000000 	nop
8003a0c0:	24010000 	li	at,0
8003a0c4:	a3a0001b 	sb	zero,27(sp)
8003a0c8:	0800e834 	j	8003a0d0 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E+0x5c>
8003a0cc:	00000000 	nop
}
8003a0d0:	93a1001b 	lbu	at,27(sp)
8003a0d4:	30220001 	andi	v0,at,0x1
8003a0d8:	8fbf0024 	lw	ra,36(sp)
8003a0dc:	27bd0028 	addiu	sp,sp,40
8003a0e0:	03e00008 	jr	ra
8003a0e4:	00000000 	nop

8003a0e8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h48d30d11e82a5204E>:
    fn into(self) -> U {
8003a0e8:	27bdffe0 	addiu	sp,sp,-32
8003a0ec:	afbf001c 	sw	ra,28(sp)
8003a0f0:	afa40014 	sw	a0,20(sp)
8003a0f4:	afa50018 	sw	a1,24(sp)
        U::from(self)
8003a0f8:	0c00eca4 	jal	8003b290 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17h136c3be8ef9c5cdbE>
8003a0fc:	00000000 	nop
    }
8003a100:	8fbf001c 	lw	ra,28(sp)
8003a104:	27bd0020 	addiu	sp,sp,32
8003a108:	03e00008 	jr	ra
8003a10c:	00000000 	nop

8003a110 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hd5655c75390c7c35E>:
    fn into(self) -> U {
8003a110:	27bdffe8 	addiu	sp,sp,-24
8003a114:	afbf0014 	sw	ra,20(sp)
8003a118:	afa40010 	sw	a0,16(sp)
        U::from(self)
8003a11c:	0c00e3d2 	jal	80038f48 <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17hdecfcf5c197a58d9E>
8003a120:	00000000 	nop
    }
8003a124:	8fbf0014 	lw	ra,20(sp)
8003a128:	27bd0018 	addiu	sp,sp,24
8003a12c:	03e00008 	jr	ra
8003a130:	00000000 	nop

8003a134 <_ZN66_$LT$core..alloc..layout..Layout$u20$as$u20$core..clone..Clone$GT$5clone17h315816e7f53d18b6E>:
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
8003a134:	27bdfff8 	addiu	sp,sp,-8
8003a138:	afa40004 	sw	a0,4(sp)
8003a13c:	8c820000 	lw	v0,0(a0)
8003a140:	8c830004 	lw	v1,4(a0)
8003a144:	27bd0008 	addiu	sp,sp,8
8003a148:	03e00008 	jr	ra
8003a14c:	00000000 	nop

8003a150 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h31b02793b2359393E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003a150:	27bdffd8 	addiu	sp,sp,-40
8003a154:	afa50004 	sw	a1,4(sp)
8003a158:	afa40008 	sw	a0,8(sp)
8003a15c:	afa4000c 	sw	a0,12(sp)
        match self {
8003a160:	8ca10000 	lw	at,0(a1)
8003a164:	1420000e 	bnez	at,8003a1a0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h31b02793b2359393E+0x50>
8003a168:	00000000 	nop
8003a16c:	0800e85d 	j	8003a174 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h31b02793b2359393E+0x24>
8003a170:	00000000 	nop
            Ok(v) => ControlFlow::Continue(v),
8003a174:	8fa10008 	lw	at,8(sp)
8003a178:	8fa20004 	lw	v0,4(sp)
8003a17c:	8c430004 	lw	v1,4(v0)
8003a180:	8c420008 	lw	v0,8(v0)
8003a184:	afa30018 	sw	v1,24(sp)
8003a188:	afa2001c 	sw	v0,28(sp)
8003a18c:	ac230004 	sw	v1,4(at)
8003a190:	ac220008 	sw	v0,8(at)
8003a194:	ac200000 	sw	zero,0(at)
8003a198:	0800e878 	j	8003a1e0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h31b02793b2359393E+0x90>
8003a19c:	00000000 	nop
            Err(e) => ControlFlow::Break(Err(e)),
8003a1a0:	8fa20008 	lw	v0,8(sp)
8003a1a4:	8fa10004 	lw	at,4(sp)
8003a1a8:	8c230004 	lw	v1,4(at)
8003a1ac:	8c210008 	lw	at,8(at)
8003a1b0:	afa30020 	sw	v1,32(sp)
8003a1b4:	afa10024 	sw	at,36(sp)
8003a1b8:	afa30010 	sw	v1,16(sp)
8003a1bc:	afa10014 	sw	at,20(sp)
8003a1c0:	8fa30010 	lw	v1,16(sp)
8003a1c4:	8fa10014 	lw	at,20(sp)
8003a1c8:	ac430004 	sw	v1,4(v0)
8003a1cc:	ac410008 	sw	at,8(v0)
8003a1d0:	24010001 	li	at,1
8003a1d4:	ac410000 	sw	at,0(v0)
8003a1d8:	0800e878 	j	8003a1e0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h31b02793b2359393E+0x90>
8003a1dc:	00000000 	nop
    }
8003a1e0:	8fa2000c 	lw	v0,12(sp)
8003a1e4:	27bd0028 	addiu	sp,sp,40
8003a1e8:	03e00008 	jr	ra
8003a1ec:	00000000 	nop

8003a1f0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h612605ee8356e453E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003a1f0:	27bdffe0 	addiu	sp,sp,-32
8003a1f4:	afa40004 	sw	a0,4(sp)
8003a1f8:	afa50008 	sw	a1,8(sp)
        match self {
8003a1fc:	8fa10004 	lw	at,4(sp)
8003a200:	1020000b 	beqz	at,8003a230 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h612605ee8356e453E+0x40>
8003a204:	00000000 	nop
8003a208:	0800e884 	j	8003a210 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h612605ee8356e453E+0x20>
8003a20c:	00000000 	nop
            Ok(v) => ControlFlow::Continue(v),
8003a210:	8fa20004 	lw	v0,4(sp)
8003a214:	8fa10008 	lw	at,8(sp)
8003a218:	afa20018 	sw	v0,24(sp)
8003a21c:	afa1001c 	sw	at,28(sp)
8003a220:	afa2000c 	sw	v0,12(sp)
8003a224:	afa10010 	sw	at,16(sp)
8003a228:	0800e88f 	j	8003a23c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h612605ee8356e453E+0x4c>
8003a22c:	00000000 	nop
            Err(e) => ControlFlow::Break(Err(e)),
8003a230:	afa0000c 	sw	zero,12(sp)
8003a234:	0800e88f 	j	8003a23c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h612605ee8356e453E+0x4c>
8003a238:	00000000 	nop
    }
8003a23c:	8fa2000c 	lw	v0,12(sp)
8003a240:	8fa30010 	lw	v1,16(sp)
8003a244:	27bd0020 	addiu	sp,sp,32
8003a248:	03e00008 	jr	ra
8003a24c:	00000000 	nop

8003a250 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003a250:	27bdffe0 	addiu	sp,sp,-32
8003a254:	afa50000 	sw	a1,0(sp)
8003a258:	afa40004 	sw	a0,4(sp)
8003a25c:	afa40008 	sw	a0,8(sp)
        match self {
8003a260:	8ca10000 	lw	at,0(a1)
8003a264:	3c028000 	lui	v0,0x8000
8003a268:	34420001 	ori	v0,v0,0x1
8003a26c:	1422000d 	bne	at,v0,8003a2a4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E+0x54>
8003a270:	00000000 	nop
8003a274:	0800e89f 	j	8003a27c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E+0x2c>
8003a278:	00000000 	nop
            Ok(v) => ControlFlow::Continue(v),
8003a27c:	8fa20004 	lw	v0,4(sp)
8003a280:	8fa10000 	lw	at,0(sp)
8003a284:	8c210004 	lw	at,4(at)
8003a288:	afa10014 	sw	at,20(sp)
8003a28c:	ac410004 	sw	at,4(v0)
8003a290:	3c018000 	lui	at,0x8000
8003a294:	34210001 	ori	at,at,0x1
8003a298:	ac410000 	sw	at,0(v0)
8003a29c:	0800e8b7 	j	8003a2dc <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E+0x8c>
8003a2a0:	00000000 	nop
            Err(e) => ControlFlow::Break(Err(e)),
8003a2a4:	8fa20004 	lw	v0,4(sp)
8003a2a8:	8fa10000 	lw	at,0(sp)
8003a2ac:	8c230000 	lw	v1,0(at)
8003a2b0:	8c210004 	lw	at,4(at)
8003a2b4:	afa30018 	sw	v1,24(sp)
8003a2b8:	afa1001c 	sw	at,28(sp)
8003a2bc:	afa3000c 	sw	v1,12(sp)
8003a2c0:	afa10010 	sw	at,16(sp)
8003a2c4:	8fa3000c 	lw	v1,12(sp)
8003a2c8:	8fa10010 	lw	at,16(sp)
8003a2cc:	ac430000 	sw	v1,0(v0)
8003a2d0:	ac410004 	sw	at,4(v0)
8003a2d4:	0800e8b7 	j	8003a2dc <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E+0x8c>
8003a2d8:	00000000 	nop
    }
8003a2dc:	8fa20008 	lw	v0,8(sp)
8003a2e0:	27bd0020 	addiu	sp,sp,32
8003a2e4:	03e00008 	jr	ra
8003a2e8:	00000000 	nop

8003a2ec <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h84151485091adff4E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003a2ec:	27bdffd8 	addiu	sp,sp,-40
8003a2f0:	afa40004 	sw	a0,4(sp)
8003a2f4:	afa50008 	sw	a1,8(sp)
        match self {
8003a2f8:	8fa10004 	lw	at,4(sp)
8003a2fc:	3c028000 	lui	v0,0x8000
8003a300:	34420001 	ori	v0,v0,0x1
8003a304:	14220008 	bne	at,v0,8003a328 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h84151485091adff4E+0x3c>
8003a308:	00000000 	nop
8003a30c:	0800e8c5 	j	8003a314 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h84151485091adff4E+0x28>
8003a310:	00000000 	nop
8003a314:	3c018000 	lui	at,0x8000
8003a318:	34210001 	ori	at,at,0x1
            Ok(v) => ControlFlow::Continue(v),
8003a31c:	afa1000c 	sw	at,12(sp)
8003a320:	0800e8d6 	j	8003a358 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h84151485091adff4E+0x6c>
8003a324:	00000000 	nop
            Err(e) => ControlFlow::Break(Err(e)),
8003a328:	8fa20004 	lw	v0,4(sp)
8003a32c:	8fa10008 	lw	at,8(sp)
8003a330:	afa20020 	sw	v0,32(sp)
8003a334:	afa10024 	sw	at,36(sp)
8003a338:	afa20014 	sw	v0,20(sp)
8003a33c:	afa10018 	sw	at,24(sp)
8003a340:	8fa20014 	lw	v0,20(sp)
8003a344:	8fa10018 	lw	at,24(sp)
8003a348:	afa2000c 	sw	v0,12(sp)
8003a34c:	afa10010 	sw	at,16(sp)
8003a350:	0800e8d6 	j	8003a358 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h84151485091adff4E+0x6c>
8003a354:	00000000 	nop
    }
8003a358:	8fa2000c 	lw	v0,12(sp)
8003a35c:	8fa30010 	lw	v1,16(sp)
8003a360:	27bd0028 	addiu	sp,sp,40
8003a364:	03e00008 	jr	ra
8003a368:	00000000 	nop

8003a36c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003a36c:	27bdfff0 	addiu	sp,sp,-16
8003a370:	afa40000 	sw	a0,0(sp)
        match self {
8003a374:	8fa10000 	lw	at,0(sp)
8003a378:	10200008 	beqz	at,8003a39c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE+0x30>
8003a37c:	00000000 	nop
8003a380:	0800e8e2 	j	8003a388 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE+0x1c>
8003a384:	00000000 	nop
            Ok(v) => ControlFlow::Continue(v),
8003a388:	8fa10000 	lw	at,0(sp)
8003a38c:	afa1000c 	sw	at,12(sp)
8003a390:	afa10004 	sw	at,4(sp)
8003a394:	0800e8ea 	j	8003a3a8 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE+0x3c>
8003a398:	00000000 	nop
            Err(e) => ControlFlow::Break(Err(e)),
8003a39c:	afa00004 	sw	zero,4(sp)
8003a3a0:	0800e8ea 	j	8003a3a8 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE+0x3c>
8003a3a4:	00000000 	nop
    }
8003a3a8:	8fa20004 	lw	v0,4(sp)
8003a3ac:	27bd0010 	addiu	sp,sp,16
8003a3b0:	03e00008 	jr	ra
8003a3b4:	00000000 	nop

8003a3b8 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003a3b8:	27bdffd8 	addiu	sp,sp,-40
8003a3bc:	afa50004 	sw	a1,4(sp)
8003a3c0:	afa40008 	sw	a0,8(sp)
8003a3c4:	afa4000c 	sw	a0,12(sp)
        match self {
8003a3c8:	8ca10000 	lw	at,0(a1)
8003a3cc:	1420000e 	bnez	at,8003a408 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E+0x50>
8003a3d0:	00000000 	nop
8003a3d4:	0800e8f7 	j	8003a3dc <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E+0x24>
8003a3d8:	00000000 	nop
            Ok(v) => ControlFlow::Continue(v),
8003a3dc:	8fa10008 	lw	at,8(sp)
8003a3e0:	8fa20004 	lw	v0,4(sp)
8003a3e4:	8c430004 	lw	v1,4(v0)
8003a3e8:	8c420008 	lw	v0,8(v0)
8003a3ec:	afa30018 	sw	v1,24(sp)
8003a3f0:	afa2001c 	sw	v0,28(sp)
8003a3f4:	ac230004 	sw	v1,4(at)
8003a3f8:	ac220008 	sw	v0,8(at)
8003a3fc:	ac200000 	sw	zero,0(at)
8003a400:	0800e912 	j	8003a448 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E+0x90>
8003a404:	00000000 	nop
            Err(e) => ControlFlow::Break(Err(e)),
8003a408:	8fa20008 	lw	v0,8(sp)
8003a40c:	8fa10004 	lw	at,4(sp)
8003a410:	8c230004 	lw	v1,4(at)
8003a414:	8c210008 	lw	at,8(at)
8003a418:	afa30020 	sw	v1,32(sp)
8003a41c:	afa10024 	sw	at,36(sp)
8003a420:	afa30010 	sw	v1,16(sp)
8003a424:	afa10014 	sw	at,20(sp)
8003a428:	8fa30010 	lw	v1,16(sp)
8003a42c:	8fa10014 	lw	at,20(sp)
8003a430:	ac430004 	sw	v1,4(v0)
8003a434:	ac410008 	sw	at,8(v0)
8003a438:	24010001 	li	at,1
8003a43c:	ac410000 	sw	at,0(v0)
8003a440:	0800e912 	j	8003a448 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E+0x90>
8003a444:	00000000 	nop
    }
8003a448:	8fa2000c 	lw	v0,12(sp)
8003a44c:	27bd0028 	addiu	sp,sp,40
8003a450:	03e00008 	jr	ra
8003a454:	00000000 	nop

8003a458 <_ZN5alloc7raw_vec17capacity_overflow17h4b1cda53cb61e65dE>:
fn capacity_overflow() -> ! {
8003a458:	27bdffd0 	addiu	sp,sp,-48
8003a45c:	afbf002c 	sw	ra,44(sp)
    panic!("capacity overflow");
8003a460:	3c01810a 	lui	at,0x810a
8003a464:	2425ad60 	addiu	a1,at,-21152
8003a468:	27a40014 	addiu	a0,sp,20
8003a46c:	afa40010 	sw	a0,16(sp)
8003a470:	24060001 	li	a2,1
8003a474:	0c00e4bf 	jal	800392fc <_ZN4core3fmt9Arguments9new_const17h2470b053bfe06b9fE>
8003a478:	00000000 	nop
8003a47c:	8fa40010 	lw	a0,16(sp)
8003a480:	3c01810a 	lui	at,0x810a
8003a484:	2425add8 	addiu	a1,at,-21032
8003a488:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003a48c:	00000000 	nop

8003a490 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E>:
fn finish_grow<A>(
8003a490:	27bdff20 	addiu	sp,sp,-224
8003a494:	afbf00dc 	sw	ra,220(sp)
8003a498:	afa7002c 	sw	a3,44(sp)
8003a49c:	afa40030 	sw	a0,48(sp)
8003a4a0:	afa40034 	sw	a0,52(sp)
8003a4a4:	8fa100f0 	lw	at,240(sp)
8003a4a8:	afa10038 	sw	at,56(sp)
    alloc_guard(new_layout.size())?;
8003a4ac:	afa500ac 	sw	a1,172(sp)
8003a4b0:	afa600b0 	sw	a2,176(sp)
8003a4b4:	27a40058 	addiu	a0,sp,88
8003a4b8:	afa4003c 	sw	a0,60(sp)
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
8003a4bc:	0c00e75c 	jal	80039d70 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E>
8003a4c0:	00000000 	nop
8003a4c4:	8fa5003c 	lw	a1,60(sp)
8003a4c8:	27a4004c 	addiu	a0,sp,76
8003a4cc:	0c00e854 	jal	8003a150 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h31b02793b2359393E>
8003a4d0:	00000000 	nop
8003a4d4:	8fa1004c 	lw	at,76(sp)
8003a4d8:	1420001c 	bnez	at,8003a54c <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0xbc>
8003a4dc:	00000000 	nop
8003a4e0:	0800e93a 	j	8003a4e8 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x58>
8003a4e4:	00000000 	nop
8003a4e8:	8fa20050 	lw	v0,80(sp)
8003a4ec:	8fa10054 	lw	at,84(sp)
8003a4f0:	afa200b4 	sw	v0,180(sp)
8003a4f4:	afa100b8 	sw	at,184(sp)
8003a4f8:	afa20044 	sw	v0,68(sp)
8003a4fc:	afa10048 	sw	at,72(sp)
8003a500:	27a40044 	addiu	a0,sp,68
    alloc_guard(new_layout.size())?;
8003a504:	0c00e6d5 	jal	80039b54 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
8003a508:	00000000 	nop
8003a50c:	00402025 	move	a0,v0
8003a510:	0c00ea0d 	jal	8003a834 <_ZN5alloc7raw_vec11alloc_guard17hb78b6540db47032bE>
8003a514:	00000000 	nop
8003a518:	00402025 	move	a0,v0
8003a51c:	00602825 	move	a1,v1
8003a520:	0c00e8bb 	jal	8003a2ec <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h84151485091adff4E>
8003a524:	00000000 	nop
8003a528:	afa20064 	sw	v0,100(sp)
8003a52c:	afa30068 	sw	v1,104(sp)
8003a530:	8fa10064 	lw	at,100(sp)
8003a534:	3c028000 	lui	v0,0x8000
8003a538:	34420001 	ori	v0,v0,0x1
8003a53c:	1022000e 	beq	at,v0,8003a578 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0xe8>
8003a540:	00000000 	nop
8003a544:	0800e964 	j	8003a590 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x100>
8003a548:	00000000 	nop
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
8003a54c:	8fa40030 	lw	a0,48(sp)
8003a550:	8fa50050 	lw	a1,80(sp)
8003a554:	8fa60054 	lw	a2,84(sp)
8003a558:	afa500d0 	sw	a1,208(sp)
8003a55c:	afa600d4 	sw	a2,212(sp)
8003a560:	3c01810a 	lui	at,0x810a
8003a564:	2427ae08 	addiu	a3,at,-20984
8003a568:	0c00e3eb 	jal	80038fac <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h64c4e0aa33532904E>
8003a56c:	00000000 	nop
8003a570:	0800e9d9 	j	8003a764 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x2d4>
8003a574:	00000000 	nop
    let memory = if let Some((ptr, old_layout)) = current_memory {
8003a578:	8fa1002c 	lw	at,44(sp)
8003a57c:	8c210004 	lw	at,4(at)
8003a580:	1420000e 	bnez	at,8003a5bc <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x12c>
8003a584:	00000000 	nop
8003a588:	0800e979 	j	8003a5e4 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x154>
8003a58c:	00000000 	nop
    alloc_guard(new_layout.size())?;
8003a590:	8fa40030 	lw	a0,48(sp)
8003a594:	8fa50064 	lw	a1,100(sp)
8003a598:	8fa60068 	lw	a2,104(sp)
8003a59c:	afa500c8 	sw	a1,200(sp)
8003a5a0:	afa600cc 	sw	a2,204(sp)
8003a5a4:	3c01810a 	lui	at,0x810a
8003a5a8:	2427adf8 	addiu	a3,at,-21000
8003a5ac:	0c00e414 	jal	80039050 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h8156b4d53ed91be5E>
8003a5b0:	00000000 	nop
8003a5b4:	0800e9d9 	j	8003a764 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x2d4>
8003a5b8:	00000000 	nop
    let memory = if let Some((ptr, old_layout)) = current_memory {
8003a5bc:	8fa1002c 	lw	at,44(sp)
8003a5c0:	8c220000 	lw	v0,0(at)
8003a5c4:	afa20028 	sw	v0,40(sp)
8003a5c8:	afa200bc 	sw	v0,188(sp)
8003a5cc:	8c220004 	lw	v0,4(at)
8003a5d0:	8c210008 	lw	at,8(at)
8003a5d4:	afa20074 	sw	v0,116(sp)
8003a5d8:	afa10078 	sw	at,120(sp)
        debug_assert_eq!(old_layout.align(), new_layout.align());
8003a5dc:	0800e982 	j	8003a608 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x178>
8003a5e0:	00000000 	nop
        alloc.allocate(new_layout)
8003a5e4:	8fa40038 	lw	a0,56(sp)
8003a5e8:	8fa50044 	lw	a1,68(sp)
8003a5ec:	8fa60048 	lw	a2,72(sp)
8003a5f0:	0c00ec05 	jal	8003b014 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h9888178ac5e5e45cE>
8003a5f4:	00000000 	nop
8003a5f8:	afa2006c 	sw	v0,108(sp)
8003a5fc:	afa30070 	sw	v1,112(sp)
8003a600:	0800e9cf 	j	8003a73c <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x2ac>
8003a604:	00000000 	nop
8003a608:	27a40074 	addiu	a0,sp,116
        debug_assert_eq!(old_layout.align(), new_layout.align());
8003a60c:	0c00e6db 	jal	80039b6c <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
8003a610:	00000000 	nop
8003a614:	afa20084 	sw	v0,132(sp)
8003a618:	27a40044 	addiu	a0,sp,68
8003a61c:	0c00e6db 	jal	80039b6c <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
8003a620:	00000000 	nop
8003a624:	afa20088 	sw	v0,136(sp)
8003a628:	27a10084 	addiu	at,sp,132
8003a62c:	afa1007c 	sw	at,124(sp)
8003a630:	27a10088 	addiu	at,sp,136
8003a634:	afa10080 	sw	at,128(sp)
8003a638:	8fa1007c 	lw	at,124(sp)
8003a63c:	afa10020 	sw	at,32(sp)
8003a640:	afa100c0 	sw	at,192(sp)
8003a644:	8fa20080 	lw	v0,128(sp)
8003a648:	afa20024 	sw	v0,36(sp)
8003a64c:	afa200c4 	sw	v0,196(sp)
8003a650:	8c210000 	lw	at,0(at)
8003a654:	8c420000 	lw	v0,0(v0)
8003a658:	10220010 	beq	at,v0,8003a69c <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x20c>
8003a65c:	00000000 	nop
8003a660:	0800e99a 	j	8003a668 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x1d8>
8003a664:	00000000 	nop
8003a668:	8fa60024 	lw	a2,36(sp)
8003a66c:	8fa50020 	lw	a1,32(sp)
8003a670:	24010000 	li	at,0
8003a674:	a3a0008f 	sb	zero,143(sp)
8003a678:	afa00090 	sw	zero,144(sp)
8003a67c:	93a4008f 	lbu	a0,143(sp)
8003a680:	3c01810a 	lui	at,0x810a
8003a684:	2421ade8 	addiu	at,at,-21016
8003a688:	03a01025 	move	v0,sp
8003a68c:	ac410010 	sw	at,16(v0)
8003a690:	27a70090 	addiu	a3,sp,144
8003a694:	0c00fc96 	jal	8003f258 <_ZN4core9panicking13assert_failed17he51eb0fc731d6addE>
8003a698:	00000000 	nop
8003a69c:	27a40074 	addiu	a0,sp,116
            hint::assert_unchecked(old_layout.align() == new_layout.align());
8003a6a0:	0c00e6db 	jal	80039b6c <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
8003a6a4:	00000000 	nop
8003a6a8:	afa20018 	sw	v0,24(sp)
8003a6ac:	27a40044 	addiu	a0,sp,68
8003a6b0:	0c00e6db 	jal	80039b6c <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
8003a6b4:	00000000 	nop
8003a6b8:	00400825 	move	at,v0
8003a6bc:	8fa20018 	lw	v0,24(sp)
8003a6c0:	00410826 	xor	at,v0,at
8003a6c4:	2c210001 	sltiu	at,at,1
8003a6c8:	afa1001c 	sw	at,28(sp)
8003a6cc:	a3a100db 	sb	at,219(sp)
        ub_checks::assert_unsafe_precondition!(
8003a6d0:	0c00e7c3 	jal	80039f0c <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
8003a6d4:	00000000 	nop
8003a6d8:	10400009 	beqz	v0,8003a700 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x270>
8003a6dc:	00000000 	nop
8003a6e0:	0800e9ba 	j	8003a6e8 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x258>
8003a6e4:	00000000 	nop
8003a6e8:	8fa1001c 	lw	at,28(sp)
8003a6ec:	30240001 	andi	a0,at,0x1
8003a6f0:	0c00e6c7 	jal	80039b1c <_ZN4core4hint16assert_unchecked18precondition_check17he821348f60d966f9E>
8003a6f4:	00000000 	nop
8003a6f8:	0800e9c0 	j	8003a700 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x270>
8003a6fc:	00000000 	nop
            alloc.grow(ptr, old_layout, new_layout)
8003a700:	8fa50028 	lw	a1,40(sp)
8003a704:	8fa40038 	lw	a0,56(sp)
8003a708:	8fa60074 	lw	a2,116(sp)
8003a70c:	8fa70078 	lw	a3,120(sp)
8003a710:	8fa10044 	lw	at,68(sp)
8003a714:	8fa30048 	lw	v1,72(sp)
8003a718:	03a01025 	move	v0,sp
8003a71c:	ac430014 	sw	v1,20(v0)
8003a720:	ac410010 	sw	at,16(v0)
8003a724:	0c00ec2b 	jal	8003b0ac <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17hf5abdcd721bec62cE>
8003a728:	00000000 	nop
8003a72c:	afa2006c 	sw	v0,108(sp)
8003a730:	afa30070 	sw	v1,112(sp)
8003a734:	0800e9cf 	j	8003a73c <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x2ac>
8003a738:	00000000 	nop
    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
8003a73c:	8fa40030 	lw	a0,48(sp)
8003a740:	8fa5006c 	lw	a1,108(sp)
8003a744:	8fa60070 	lw	a2,112(sp)
8003a748:	27a10044 	addiu	at,sp,68
8003a74c:	afa100a8 	sw	at,168(sp)
8003a750:	8fa700a8 	lw	a3,168(sp)
8003a754:	0c00e78e 	jal	80039e38 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E>
8003a758:	00000000 	nop
8003a75c:	0800e9d9 	j	8003a764 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x2d4>
8003a760:	00000000 	nop
}
8003a764:	8fa20034 	lw	v0,52(sp)
8003a768:	8fbf00dc 	lw	ra,220(sp)
8003a76c:	27bd00e0 	addiu	sp,sp,224
8003a770:	03e00008 	jr	ra
8003a774:	00000000 	nop

8003a778 <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h02a960f90665afe1E>:
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
8003a778:	27bdfff0 	addiu	sp,sp,-16
8003a77c:	afa00004 	sw	zero,4(sp)
8003a780:	8fa20004 	lw	v0,4(sp)
8003a784:	8fa30008 	lw	v1,8(sp)
8003a788:	27bd0010 	addiu	sp,sp,16
8003a78c:	03e00008 	jr	ra
8003a790:	00000000 	nop

8003a794 <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17hb2464f62b037e93cE>:
    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
8003a794:	27bdffd8 	addiu	sp,sp,-40
8003a798:	afbf0024 	sw	ra,36(sp)
8003a79c:	afa40014 	sw	a0,20(sp)
8003a7a0:	8fa10014 	lw	at,20(sp)
8003a7a4:	8c220000 	lw	v0,0(at)
8003a7a8:	8c210004 	lw	at,4(at)
8003a7ac:	afa20018 	sw	v0,24(sp)
8003a7b0:	afa1001c 	sw	at,28(sp)
8003a7b4:	8fa40018 	lw	a0,24(sp)
8003a7b8:	8fa5001c 	lw	a1,28(sp)
8003a7bc:	3c01810a 	lui	at,0x810a
8003a7c0:	2426ae18 	addiu	a2,at,-20968
8003a7c4:	0c00e83a 	jal	8003a0e8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h48d30d11e82a5204E>
8003a7c8:	00000000 	nop
8003a7cc:	8fbf0024 	lw	ra,36(sp)
8003a7d0:	27bd0028 	addiu	sp,sp,40
8003a7d4:	03e00008 	jr	ra
8003a7d8:	00000000 	nop

8003a7dc <_ZN5alloc7raw_vec12handle_error17hfb0478db9ca6b296E>:
fn handle_error(e: TryReserveError) -> ! {
8003a7dc:	27bdffd0 	addiu	sp,sp,-48
8003a7e0:	afbf002c 	sw	ra,44(sp)
8003a7e4:	afa40014 	sw	a0,20(sp)
8003a7e8:	afa50018 	sw	a1,24(sp)
8003a7ec:	27a40014 	addiu	a0,sp,20
    match e.kind() {
8003a7f0:	0c00ec9b 	jal	8003b26c <_ZN5alloc11collections15TryReserveError4kind17h31476c26af2fe7bdE>
8003a7f4:	00000000 	nop
8003a7f8:	afa2001c 	sw	v0,28(sp)
8003a7fc:	afa30020 	sw	v1,32(sp)
8003a800:	8fa1001c 	lw	at,28(sp)
8003a804:	14200005 	bnez	at,8003a81c <_ZN5alloc7raw_vec12handle_error17hfb0478db9ca6b296E+0x40>
8003a808:	00000000 	nop
8003a80c:	0800ea05 	j	8003a814 <_ZN5alloc7raw_vec12handle_error17hfb0478db9ca6b296E+0x38>
8003a810:	00000000 	nop
        CapacityOverflow => capacity_overflow(),
8003a814:	0c00e916 	jal	8003a458 <_ZN5alloc7raw_vec17capacity_overflow17h4b1cda53cb61e65dE>
8003a818:	00000000 	nop
        AllocError { layout, .. } => handle_alloc_error(layout),
8003a81c:	8fa4001c 	lw	a0,28(sp)
8003a820:	8fa50020 	lw	a1,32(sp)
8003a824:	afa40024 	sw	a0,36(sp)
8003a828:	afa50028 	sw	a1,40(sp)
8003a82c:	0c00ec3f 	jal	8003b0fc <_ZN5alloc5alloc18handle_alloc_error17h19617bae871f3d42E>
8003a830:	00000000 	nop

8003a834 <_ZN5alloc7raw_vec11alloc_guard17hb78b6540db47032bE>:
fn alloc_guard(alloc_size: usize) -> Result<(), TryReserveError> {
8003a834:	27bdffd0 	addiu	sp,sp,-48
8003a838:	afbf002c 	sw	ra,44(sp)
8003a83c:	afa40014 	sw	a0,20(sp)
8003a840:	afa40028 	sw	a0,40(sp)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
8003a844:	0800ea13 	j	8003a84c <_ZN5alloc7raw_vec11alloc_guard17hb78b6540db47032bE+0x18>
8003a848:	00000000 	nop
8003a84c:	8fa10014 	lw	at,20(sp)
8003a850:	04200008 	bltz	at,8003a874 <_ZN5alloc7raw_vec11alloc_guard17hb78b6540db47032bE+0x40>
8003a854:	00000000 	nop
8003a858:	0800ea18 	j	8003a860 <_ZN5alloc7raw_vec11alloc_guard17hb78b6540db47032bE+0x2c>
8003a85c:	00000000 	nop
8003a860:	3c018000 	lui	at,0x8000
8003a864:	34210001 	ori	at,at,0x1
        Ok(())
8003a868:	afa10018 	sw	at,24(sp)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
8003a86c:	0800ea28 	j	8003a8a0 <_ZN5alloc7raw_vec11alloc_guard17hb78b6540db47032bE+0x6c>
8003a870:	00000000 	nop
        Err(CapacityOverflow.into())
8003a874:	afa00020 	sw	zero,32(sp)
8003a878:	8fa40020 	lw	a0,32(sp)
8003a87c:	8fa50024 	lw	a1,36(sp)
8003a880:	3c01810a 	lui	at,0x810a
8003a884:	2426ae28 	addiu	a2,at,-20952
8003a888:	0c00e83a 	jal	8003a0e8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h48d30d11e82a5204E>
8003a88c:	00000000 	nop
8003a890:	afa20018 	sw	v0,24(sp)
8003a894:	afa3001c 	sw	v1,28(sp)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
8003a898:	0800ea28 	j	8003a8a0 <_ZN5alloc7raw_vec11alloc_guard17hb78b6540db47032bE+0x6c>
8003a89c:	00000000 	nop
}
8003a8a0:	8fa20018 	lw	v0,24(sp)
8003a8a4:	8fa3001c 	lw	v1,28(sp)
8003a8a8:	8fbf002c 	lw	ra,44(sp)
8003a8ac:	27bd0030 	addiu	sp,sp,48
8003a8b0:	03e00008 	jr	ra
8003a8b4:	00000000 	nop

8003a8b8 <_ZN5alloc5alloc5alloc17hedb3bb3160d119f7E>:
pub unsafe fn alloc(layout: Layout) -> *mut u8 {
8003a8b8:	27bdffd8 	addiu	sp,sp,-40
8003a8bc:	afbf0024 	sw	ra,36(sp)
8003a8c0:	afa4001c 	sw	a0,28(sp)
8003a8c4:	afa50020 	sw	a1,32(sp)
        core::ptr::read_volatile(&__rust_no_alloc_shim_is_unstable);
8003a8c8:	3c018105 	lui	at,0x8105
8003a8cc:	2424d0cc 	addiu	a0,at,-12084
8003a8d0:	0c00e576 	jal	800395d8 <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E>
8003a8d4:	00000000 	nop
8003a8d8:	27a4001c 	addiu	a0,sp,28
8003a8dc:	afa40014 	sw	a0,20(sp)
        __rust_alloc(layout.size(), layout.align())
8003a8e0:	0c00e6d5 	jal	80039b54 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
8003a8e4:	00000000 	nop
8003a8e8:	8fa40014 	lw	a0,20(sp)
8003a8ec:	afa20018 	sw	v0,24(sp)
8003a8f0:	0c00e6db 	jal	80039b6c <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
8003a8f4:	00000000 	nop
8003a8f8:	8fa40018 	lw	a0,24(sp)
8003a8fc:	00402825 	move	a1,v0
8003a900:	0c00da81 	jal	80036a04 <__rust_alloc>
8003a904:	00000000 	nop
}
8003a908:	8fbf0024 	lw	ra,36(sp)
8003a90c:	27bd0028 	addiu	sp,sp,40
8003a910:	03e00008 	jr	ra
8003a914:	00000000 	nop

8003a918 <_ZN5alloc5alloc7dealloc17h88130156a4554906E>:
pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {
8003a918:	27bdffd0 	addiu	sp,sp,-48
8003a91c:	afbf002c 	sw	ra,44(sp)
8003a920:	afa40018 	sw	a0,24(sp)
8003a924:	afa50020 	sw	a1,32(sp)
8003a928:	afa60024 	sw	a2,36(sp)
8003a92c:	afa40028 	sw	a0,40(sp)
8003a930:	27a40020 	addiu	a0,sp,32
8003a934:	afa40014 	sw	a0,20(sp)
    unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
8003a938:	0c00e6d5 	jal	80039b54 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
8003a93c:	00000000 	nop
8003a940:	8fa40014 	lw	a0,20(sp)
8003a944:	afa2001c 	sw	v0,28(sp)
8003a948:	0c00e6db 	jal	80039b6c <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
8003a94c:	00000000 	nop
8003a950:	8fa40018 	lw	a0,24(sp)
8003a954:	8fa5001c 	lw	a1,28(sp)
8003a958:	00403025 	move	a2,v0
8003a95c:	0c00da91 	jal	80036a44 <__rust_dealloc>
8003a960:	00000000 	nop
}
8003a964:	8fbf002c 	lw	ra,44(sp)
8003a968:	27bd0030 	addiu	sp,sp,48
8003a96c:	03e00008 	jr	ra
8003a970:	00000000 	nop

8003a974 <_ZN5alloc5alloc7realloc17hb6b79216da939609E>:
pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
8003a974:	27bdffc8 	addiu	sp,sp,-56
8003a978:	afbf0034 	sw	ra,52(sp)
8003a97c:	afa70020 	sw	a3,32(sp)
8003a980:	afa40018 	sw	a0,24(sp)
8003a984:	afa50024 	sw	a1,36(sp)
8003a988:	afa60028 	sw	a2,40(sp)
8003a98c:	afa4002c 	sw	a0,44(sp)
8003a990:	afa70030 	sw	a3,48(sp)
8003a994:	27a40024 	addiu	a0,sp,36
8003a998:	afa40014 	sw	a0,20(sp)
    unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
8003a99c:	0c00e6d5 	jal	80039b54 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
8003a9a0:	00000000 	nop
8003a9a4:	8fa40014 	lw	a0,20(sp)
8003a9a8:	afa2001c 	sw	v0,28(sp)
8003a9ac:	0c00e6db 	jal	80039b6c <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
8003a9b0:	00000000 	nop
8003a9b4:	8fa40018 	lw	a0,24(sp)
8003a9b8:	8fa5001c 	lw	a1,28(sp)
8003a9bc:	8fa70020 	lw	a3,32(sp)
8003a9c0:	00403025 	move	a2,v0
8003a9c4:	0c00daaa 	jal	80036aa8 <__rust_realloc>
8003a9c8:	00000000 	nop
}
8003a9cc:	8fbf0034 	lw	ra,52(sp)
8003a9d0:	27bd0038 	addiu	sp,sp,56
8003a9d4:	03e00008 	jr	ra
8003a9d8:	00000000 	nop

8003a9dc <_ZN5alloc5alloc12alloc_zeroed17hc3c69bfdb7830301E>:
pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
8003a9dc:	27bdffd8 	addiu	sp,sp,-40
8003a9e0:	afbf0024 	sw	ra,36(sp)
8003a9e4:	afa4001c 	sw	a0,28(sp)
8003a9e8:	afa50020 	sw	a1,32(sp)
8003a9ec:	27a4001c 	addiu	a0,sp,28
8003a9f0:	afa40014 	sw	a0,20(sp)
    unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
8003a9f4:	0c00e6d5 	jal	80039b54 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
8003a9f8:	00000000 	nop
8003a9fc:	8fa40014 	lw	a0,20(sp)
8003aa00:	afa20018 	sw	v0,24(sp)
8003aa04:	0c00e6db 	jal	80039b6c <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
8003aa08:	00000000 	nop
8003aa0c:	8fa40018 	lw	a0,24(sp)
8003aa10:	00402825 	move	a1,v0
8003aa14:	0c00dac8 	jal	80036b20 <__rust_alloc_zeroed>
8003aa18:	00000000 	nop
}
8003aa1c:	8fbf0024 	lw	ra,36(sp)
8003aa20:	27bd0028 	addiu	sp,sp,40
8003aa24:	03e00008 	jr	ra
8003aa28:	00000000 	nop

8003aa2c <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE>:
    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {
8003aa2c:	27bdffb8 	addiu	sp,sp,-72
8003aa30:	afbf0044 	sw	ra,68(sp)
8003aa34:	00e00825 	move	at,a3
8003aa38:	afa10010 	sw	at,16(sp)
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
8003aa3c:	afa5001c 	sw	a1,28(sp)
8003aa40:	afa60020 	sw	a2,32(sp)
8003aa44:	afa40034 	sw	a0,52(sp)
8003aa48:	a3a7003b 	sb	a3,59(sp)
8003aa4c:	27a4001c 	addiu	a0,sp,28
        match layout.size() {
8003aa50:	0c00e6d5 	jal	80039b54 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
8003aa54:	00000000 	nop
8003aa58:	00400825 	move	at,v0
8003aa5c:	afa10014 	sw	at,20(sp)
8003aa60:	afa2003c 	sw	v0,60(sp)
8003aa64:	1440000e 	bnez	v0,8003aaa0 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0x74>
8003aa68:	00000000 	nop
8003aa6c:	0800ea9d 	j	8003aa74 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0x48>
8003aa70:	00000000 	nop
8003aa74:	27a4001c 	addiu	a0,sp,28
            0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
8003aa78:	0c00e6e5 	jal	80039b94 <_ZN4core5alloc6layout6Layout8dangling17h83029e46d45f62cfE>
8003aa7c:	00000000 	nop
8003aa80:	00402025 	move	a0,v0
8003aa84:	24050000 	li	a1,0
8003aa88:	0c00e6b1 	jal	80039ac4 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h25684dcbb1a3276fE>
8003aa8c:	00000000 	nop
8003aa90:	afa20024 	sw	v0,36(sp)
8003aa94:	afa30028 	sw	v1,40(sp)
8003aa98:	0800eaae 	j	8003aab8 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0x8c>
8003aa9c:	00000000 	nop
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
8003aaa0:	8fa10010 	lw	at,16(sp)
8003aaa4:	30210001 	andi	at,at,0x1
8003aaa8:	14200010 	bnez	at,8003aaec <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0xc0>
8003aaac:	00000000 	nop
8003aab0:	0800eab4 	j	8003aad0 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0xa4>
8003aab4:	00000000 	nop
    }
8003aab8:	8fa20024 	lw	v0,36(sp)
8003aabc:	8fa30028 	lw	v1,40(sp)
8003aac0:	8fbf0044 	lw	ra,68(sp)
8003aac4:	27bd0048 	addiu	sp,sp,72
8003aac8:	03e00008 	jr	ra
8003aacc:	00000000 	nop
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
8003aad0:	8fa4001c 	lw	a0,28(sp)
8003aad4:	8fa50020 	lw	a1,32(sp)
8003aad8:	0c00ea2e 	jal	8003a8b8 <_ZN5alloc5alloc5alloc17hedb3bb3160d119f7E>
8003aadc:	00000000 	nop
8003aae0:	afa2002c 	sw	v0,44(sp)
8003aae4:	0800eac2 	j	8003ab08 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0xdc>
8003aae8:	00000000 	nop
8003aaec:	8fa4001c 	lw	a0,28(sp)
8003aaf0:	8fa50020 	lw	a1,32(sp)
8003aaf4:	0c00ea77 	jal	8003a9dc <_ZN5alloc5alloc12alloc_zeroed17hc3c69bfdb7830301E>
8003aaf8:	00000000 	nop
8003aafc:	afa2002c 	sw	v0,44(sp)
8003ab00:	0800eac2 	j	8003ab08 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0xdc>
8003ab04:	00000000 	nop
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
8003ab08:	8fa4002c 	lw	a0,44(sp)
8003ab0c:	0c00e684 	jal	80039a10 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E>
8003ab10:	00000000 	nop
8003ab14:	00402025 	move	a0,v0
8003ab18:	0c00e6f2 	jal	80039bc8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE>
8003ab1c:	00000000 	nop
8003ab20:	00402025 	move	a0,v0
8003ab24:	0c00e8db 	jal	8003a36c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE>
8003ab28:	00000000 	nop
8003ab2c:	afa20030 	sw	v0,48(sp)
8003ab30:	8fa10030 	lw	at,48(sp)
8003ab34:	1020000c 	beqz	at,8003ab68 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0x13c>
8003ab38:	00000000 	nop
8003ab3c:	0800ead1 	j	8003ab44 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0x118>
8003ab40:	00000000 	nop
8003ab44:	8fa50014 	lw	a1,20(sp)
8003ab48:	8fa40030 	lw	a0,48(sp)
8003ab4c:	afa40040 	sw	a0,64(sp)
                Ok(NonNull::slice_from_raw_parts(ptr, size))
8003ab50:	0c00e6b1 	jal	80039ac4 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h25684dcbb1a3276fE>
8003ab54:	00000000 	nop
8003ab58:	afa20024 	sw	v0,36(sp)
8003ab5c:	afa30028 	sw	v1,40(sp)
            },
8003ab60:	0800eaae 	j	8003aab8 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0x8c>
8003ab64:	00000000 	nop
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
8003ab68:	3c01810a 	lui	at,0x810a
8003ab6c:	2424aea4 	addiu	a0,at,-20828
8003ab70:	0c00e425 	jal	80039094 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hb6ff685e17a0e3feE>
8003ab74:	00000000 	nop
8003ab78:	afa20024 	sw	v0,36(sp)
8003ab7c:	afa30028 	sw	v1,40(sp)
8003ab80:	0800eaae 	j	8003aab8 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0x8c>
8003ab84:	00000000 	nop

8003ab88 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE>:
    unsafe fn grow_impl(
8003ab88:	27bdfef0 	addiu	sp,sp,-272
8003ab8c:	afbf010c 	sw	ra,268(sp)
8003ab90:	afa50058 	sw	a1,88(sp)
8003ab94:	afa4005c 	sw	a0,92(sp)
8003ab98:	8fa10128 	lw	at,296(sp)
8003ab9c:	afa10060 	sw	at,96(sp)
8003aba0:	8fa20124 	lw	v0,292(sp)
8003aba4:	8fa30120 	lw	v1,288(sp)
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
8003aba8:	afa60068 	sw	a2,104(sp)
8003abac:	afa7006c 	sw	a3,108(sp)
8003abb0:	afa30070 	sw	v1,112(sp)
8003abb4:	afa20074 	sw	v0,116(sp)
8003abb8:	afa400a8 	sw	a0,168(sp)
8003abbc:	afa500ac 	sw	a1,172(sp)
8003abc0:	a3a100b3 	sb	at,179(sp)
        debug_assert!(
8003abc4:	0800eaf3 	j	8003abcc <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x44>
8003abc8:	00000000 	nop
8003abcc:	27a40070 	addiu	a0,sp,112
            new_layout.size() >= old_layout.size(),
8003abd0:	0c00e6d5 	jal	80039b54 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
8003abd4:	00000000 	nop
8003abd8:	afa20054 	sw	v0,84(sp)
8003abdc:	27a40068 	addiu	a0,sp,104
8003abe0:	0c00e6d5 	jal	80039b54 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
8003abe4:	00000000 	nop
8003abe8:	00400825 	move	at,v0
8003abec:	8fa20054 	lw	v0,84(sp)
8003abf0:	0041082b 	sltu	at,v0,at
8003abf4:	1020000f 	beqz	at,8003ac34 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0xac>
8003abf8:	00000000 	nop
8003abfc:	0800eb01 	j	8003ac04 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x7c>
8003ac00:	00000000 	nop
        debug_assert!(
8003ac04:	3c01810a 	lui	at,0x810a
8003ac08:	2425aefc 	addiu	a1,at,-20740
8003ac0c:	27a40080 	addiu	a0,sp,128
8003ac10:	afa40050 	sw	a0,80(sp)
8003ac14:	24060001 	li	a2,1
8003ac18:	0c00e4bf 	jal	800392fc <_ZN4core3fmt9Arguments9new_const17h2470b053bfe06b9fE>
8003ac1c:	00000000 	nop
8003ac20:	8fa40050 	lw	a0,80(sp)
8003ac24:	3c01810a 	lui	at,0x810a
8003ac28:	2425af04 	addiu	a1,at,-20732
8003ac2c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003ac30:	00000000 	nop
8003ac34:	27a40068 	addiu	a0,sp,104
        match old_layout.size() {
8003ac38:	0c00e6d5 	jal	80039b54 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
8003ac3c:	00000000 	nop
8003ac40:	afa20098 	sw	v0,152(sp)
8003ac44:	8fa10098 	lw	at,152(sp)
8003ac48:	1420000e 	bnez	at,8003ac84 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0xfc>
8003ac4c:	00000000 	nop
8003ac50:	0800eb16 	j	8003ac58 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0xd0>
8003ac54:	00000000 	nop
            0 => self.alloc_impl(new_layout, zeroed),
8003ac58:	8fa4005c 	lw	a0,92(sp)
8003ac5c:	8fa10060 	lw	at,96(sp)
8003ac60:	8fa50070 	lw	a1,112(sp)
8003ac64:	8fa60074 	lw	a2,116(sp)
8003ac68:	30270001 	andi	a3,at,0x1
8003ac6c:	0c00ea8b 	jal	8003aa2c <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE>
8003ac70:	00000000 	nop
8003ac74:	afa20078 	sw	v0,120(sp)
8003ac78:	afa3007c 	sw	v1,124(sp)
8003ac7c:	0800eb30 	j	8003acc0 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x138>
8003ac80:	00000000 	nop
8003ac84:	27a10098 	addiu	at,sp,152
            old_size if old_layout.align() == new_layout.align() => unsafe {
8003ac88:	afa100b4 	sw	at,180(sp)
8003ac8c:	27a40068 	addiu	a0,sp,104
8003ac90:	0c00e6db 	jal	80039b6c <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
8003ac94:	00000000 	nop
8003ac98:	afa2004c 	sw	v0,76(sp)
8003ac9c:	27a40070 	addiu	a0,sp,112
8003aca0:	0c00e6db 	jal	80039b6c <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
8003aca4:	00000000 	nop
8003aca8:	00400825 	move	at,v0
8003acac:	8fa2004c 	lw	v0,76(sp)
8003acb0:	1041001e 	beq	v0,at,8003ad2c <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x1a4>
8003acb4:	00000000 	nop
8003acb8:	0800eb36 	j	8003acd8 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x150>
8003acbc:	00000000 	nop
    }
8003acc0:	8fa20078 	lw	v0,120(sp)
8003acc4:	8fa3007c 	lw	v1,124(sp)
8003acc8:	8fbf010c 	lw	ra,268(sp)
8003accc:	27bd0110 	addiu	sp,sp,272
8003acd0:	03e00008 	jr	ra
8003acd4:	00000000 	nop
            old_size => unsafe {
8003acd8:	8fa4005c 	lw	a0,92(sp)
8003acdc:	8fa10060 	lw	at,96(sp)
8003ace0:	8fa20098 	lw	v0,152(sp)
8003ace4:	afa20048 	sw	v0,72(sp)
8003ace8:	afa200b8 	sw	v0,184(sp)
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
8003acec:	8fa50070 	lw	a1,112(sp)
8003acf0:	8fa60074 	lw	a2,116(sp)
8003acf4:	30270001 	andi	a3,at,0x1
8003acf8:	0c00ea8b 	jal	8003aa2c <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE>
8003acfc:	00000000 	nop
8003ad00:	00402025 	move	a0,v0
8003ad04:	00602825 	move	a1,v1
8003ad08:	0c00e87c 	jal	8003a1f0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h612605ee8356e453E>
8003ad0c:	00000000 	nop
8003ad10:	afa200a0 	sw	v0,160(sp)
8003ad14:	afa300a4 	sw	v1,164(sp)
8003ad18:	8fa100a0 	lw	at,160(sp)
8003ad1c:	1420003b 	bnez	at,8003ae0c <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x284>
8003ad20:	00000000 	nop
8003ad24:	0800ebb6 	j	8003aed8 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x350>
8003ad28:	00000000 	nop
            old_size if old_layout.align() == new_layout.align() => unsafe {
8003ad2c:	8fa10098 	lw	at,152(sp)
8003ad30:	afa10038 	sw	at,56(sp)
8003ad34:	afa100c4 	sw	at,196(sp)
8003ad38:	27a40070 	addiu	a0,sp,112
                let new_size = new_layout.size();
8003ad3c:	0c00e6d5 	jal	80039b54 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
8003ad40:	00000000 	nop
8003ad44:	afa20040 	sw	v0,64(sp)
8003ad48:	00400825 	move	at,v0
8003ad4c:	afa1003c 	sw	at,60(sp)
8003ad50:	afa200c8 	sw	v0,200(sp)
8003ad54:	27a40068 	addiu	a0,sp,104
                hint::assert_unchecked(new_size >= old_layout.size());
8003ad58:	0c00e6d5 	jal	80039b54 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
8003ad5c:	00000000 	nop
8003ad60:	00400825 	move	at,v0
8003ad64:	8fa20040 	lw	v0,64(sp)
8003ad68:	0041082b 	sltu	at,v0,at
8003ad6c:	38210001 	xori	at,at,0x1
8003ad70:	afa10044 	sw	at,68(sp)
8003ad74:	a3a1010b 	sb	at,267(sp)
8003ad78:	0c00e7c3 	jal	80039f0c <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
8003ad7c:	00000000 	nop
8003ad80:	10400009 	beqz	v0,8003ada8 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x220>
8003ad84:	00000000 	nop
8003ad88:	0800eb64 	j	8003ad90 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x208>
8003ad8c:	00000000 	nop
8003ad90:	8fa10044 	lw	at,68(sp)
8003ad94:	30240001 	andi	a0,at,0x1
8003ad98:	0c00e6c7 	jal	80039b1c <_ZN4core4hint16assert_unchecked18precondition_check17he821348f60d966f9E>
8003ad9c:	00000000 	nop
8003ada0:	0800eb6a 	j	8003ada8 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x220>
8003ada4:	00000000 	nop
8003ada8:	8fa7003c 	lw	a3,60(sp)
8003adac:	8fa40058 	lw	a0,88(sp)
8003adb0:	afa40100 	sw	a0,256(sp)
                let raw_ptr = realloc(ptr.as_ptr(), old_layout, new_size);
8003adb4:	8fa50068 	lw	a1,104(sp)
8003adb8:	8fa6006c 	lw	a2,108(sp)
8003adbc:	0c00ea5d 	jal	8003a974 <_ZN5alloc5alloc7realloc17hb6b79216da939609E>
8003adc0:	00000000 	nop
8003adc4:	00402025 	move	a0,v0
8003adc8:	00801025 	move	v0,a0
8003adcc:	afa20034 	sw	v0,52(sp)
8003add0:	afa400cc 	sw	a0,204(sp)
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
8003add4:	0c00e684 	jal	80039a10 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E>
8003add8:	00000000 	nop
8003addc:	00402025 	move	a0,v0
8003ade0:	0c00e6f2 	jal	80039bc8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE>
8003ade4:	00000000 	nop
8003ade8:	00402025 	move	a0,v0
8003adec:	0c00e8db 	jal	8003a36c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE>
8003adf0:	00000000 	nop
8003adf4:	afa2009c 	sw	v0,156(sp)
8003adf8:	8fa1009c 	lw	at,156(sp)
8003adfc:	1420003e 	bnez	at,8003aef8 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x370>
8003ae00:	00000000 	nop
8003ae04:	0800ebc7 	j	8003af1c <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x394>
8003ae08:	00000000 	nop
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
8003ae0c:	8fa10058 	lw	at,88(sp)
8003ae10:	8fa400a0 	lw	a0,160(sp)
8003ae14:	afa40028 	sw	a0,40(sp)
8003ae18:	8fa500a4 	lw	a1,164(sp)
8003ae1c:	afa5002c 	sw	a1,44(sp)
8003ae20:	afa400bc 	sw	a0,188(sp)
8003ae24:	afa500c0 	sw	a1,192(sp)
8003ae28:	afa10104 	sw	at,260(sp)
                ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);
8003ae2c:	0c00e69c 	jal	80039a70 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h334546e067f56e32E>
8003ae30:	00000000 	nop
8003ae34:	8fa30058 	lw	v1,88(sp)
8003ae38:	8fa10048 	lw	at,72(sp)
8003ae3c:	00402025 	move	a0,v0
8003ae40:	afa40030 	sw	a0,48(sp)
8003ae44:	afa300d4 	sw	v1,212(sp)
8003ae48:	afa200d8 	sw	v0,216(sp)
8003ae4c:	afa100dc 	sw	at,220(sp)
    ub_checks::assert_unsafe_precondition!(
8003ae50:	0c00e7c3 	jal	80039f0c <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
8003ae54:	00000000 	nop
8003ae58:	1040000e 	beqz	v0,8003ae94 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x30c>
8003ae5c:	00000000 	nop
8003ae60:	0800eb9a 	j	8003ae68 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x2e0>
8003ae64:	00000000 	nop
8003ae68:	8fa50030 	lw	a1,48(sp)
8003ae6c:	8fa40058 	lw	a0,88(sp)
8003ae70:	8fa10048 	lw	at,72(sp)
8003ae74:	03a01025 	move	v0,sp
8003ae78:	ac410010 	sw	at,16(v0)
8003ae7c:	24070001 	li	a3,1
8003ae80:	00e03025 	move	a2,a3
8003ae84:	0c00e44d 	jal	80039134 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E>
8003ae88:	00000000 	nop
8003ae8c:	0800eba5 	j	8003ae94 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x30c>
8003ae90:	00000000 	nop
    unsafe { copy_nonoverlapping(src, dst, count) }
8003ae94:	8fa50058 	lw	a1,88(sp)
8003ae98:	8fa60048 	lw	a2,72(sp)
8003ae9c:	8fa40030 	lw	a0,48(sp)
8003aea0:	0c00db4c 	jal	80036d30 <memcpy>
8003aea4:	00000000 	nop
8003aea8:	8fa4005c 	lw	a0,92(sp)
8003aeac:	8fa50058 	lw	a1,88(sp)
                self.deallocate(ptr, old_layout);
8003aeb0:	8fa60068 	lw	a2,104(sp)
8003aeb4:	8fa7006c 	lw	a3,108(sp)
8003aeb8:	0c00ec11 	jal	8003b044 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h80fcfa996888c781E>
8003aebc:	00000000 	nop
8003aec0:	8fa20028 	lw	v0,40(sp)
8003aec4:	8fa1002c 	lw	at,44(sp)
                Ok(new_ptr)
8003aec8:	afa20078 	sw	v0,120(sp)
8003aecc:	afa1007c 	sw	at,124(sp)
            },
8003aed0:	0800eb30 	j	8003acc0 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x138>
8003aed4:	00000000 	nop
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
8003aed8:	3c01810a 	lui	at,0x810a
8003aedc:	2424af14 	addiu	a0,at,-20716
8003aee0:	0c00e425 	jal	80039094 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hb6ff685e17a0e3feE>
8003aee4:	00000000 	nop
8003aee8:	afa20078 	sw	v0,120(sp)
8003aeec:	afa3007c 	sw	v1,124(sp)
8003aef0:	0800eb30 	j	8003acc0 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x138>
8003aef4:	00000000 	nop
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
8003aef8:	8fa10060 	lw	at,96(sp)
8003aefc:	8fa2009c 	lw	v0,156(sp)
8003af00:	afa20024 	sw	v0,36(sp)
8003af04:	afa200d0 	sw	v0,208(sp)
                if zeroed {
8003af08:	30210001 	andi	at,at,0x1
8003af0c:	14200013 	bnez	at,8003af5c <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x3d4>
8003af10:	00000000 	nop
8003af14:	0800ebcf 	j	8003af3c <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x3b4>
8003af18:	00000000 	nop
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
8003af1c:	3c01810a 	lui	at,0x810a
8003af20:	2424af34 	addiu	a0,at,-20684
8003af24:	0c00e425 	jal	80039094 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hb6ff685e17a0e3feE>
8003af28:	00000000 	nop
8003af2c:	afa20078 	sw	v0,120(sp)
8003af30:	afa3007c 	sw	v1,124(sp)
8003af34:	0800eb30 	j	8003acc0 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x138>
8003af38:	00000000 	nop
                Ok(NonNull::slice_from_raw_parts(ptr, new_size))
8003af3c:	8fa5003c 	lw	a1,60(sp)
8003af40:	8fa40024 	lw	a0,36(sp)
8003af44:	0c00e6b1 	jal	80039ac4 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h25684dcbb1a3276fE>
8003af48:	00000000 	nop
8003af4c:	afa20078 	sw	v0,120(sp)
8003af50:	afa3007c 	sw	v1,124(sp)
            },
8003af54:	0800eb30 	j	8003acc0 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x138>
8003af58:	00000000 	nop
8003af5c:	8fa1003c 	lw	at,60(sp)
8003af60:	8fa20038 	lw	v0,56(sp)
8003af64:	8fa30034 	lw	v1,52(sp)
8003af68:	afa300f8 	sw	v1,248(sp)
8003af6c:	afa200fc 	sw	v0,252(sp)
        unsafe { intrinsics::offset(self, count) }
8003af70:	00621821 	addu	v1,v1,v0
8003af74:	afa3001c 	sw	v1,28(sp)
                    raw_ptr.add(old_size).write_bytes(0, new_size - old_size);
8003af78:	00221823 	subu	v1,at,v0
8003af7c:	afa30020 	sw	v1,32(sp)
8003af80:	0022082b 	sltu	at,at,v0
8003af84:	1420001f 	bnez	at,8003b004 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x47c>
8003af88:	00000000 	nop
8003af8c:	0800ebe5 	j	8003af94 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x40c>
8003af90:	00000000 	nop
8003af94:	8fa10020 	lw	at,32(sp)
8003af98:	8fa2001c 	lw	v0,28(sp)
8003af9c:	afa200e0 	sw	v0,224(sp)
8003afa0:	24030000 	li	v1,0
8003afa4:	a3a000e7 	sb	zero,231(sp)
8003afa8:	afa100e8 	sw	at,232(sp)
8003afac:	afa200ec 	sw	v0,236(sp)
8003afb0:	a3a000f3 	sb	zero,243(sp)
8003afb4:	afa100f4 	sw	at,244(sp)
        ub_checks::assert_unsafe_precondition!(
8003afb8:	0c00e7c3 	jal	80039f0c <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
8003afbc:	00000000 	nop
8003afc0:	10400009 	beqz	v0,8003afe8 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x460>
8003afc4:	00000000 	nop
8003afc8:	0800ebf4 	j	8003afd0 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x448>
8003afcc:	00000000 	nop
8003afd0:	8fa4001c 	lw	a0,28(sp)
8003afd4:	24050001 	li	a1,1
8003afd8:	0c00e43a 	jal	800390e8 <_ZN4core10intrinsics11write_bytes18precondition_check17hb30bbc705cf97fb4E>
8003afdc:	00000000 	nop
8003afe0:	0800ebfa 	j	8003afe8 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x460>
8003afe4:	00000000 	nop
        write_bytes(dst, val, count)
8003afe8:	8fa60020 	lw	a2,32(sp)
8003afec:	8fa4001c 	lw	a0,28(sp)
8003aff0:	24050000 	li	a1,0
8003aff4:	0c00dba8 	jal	80036ea0 <memset>
8003aff8:	00000000 	nop
8003affc:	0800ebcf 	j	8003af3c <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x3b4>
8003b000:	00000000 	nop
8003b004:	3c01810a 	lui	at,0x810a
8003b008:	2424af24 	addiu	a0,at,-20700
8003b00c:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003b010:	00000000 	nop

8003b014 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h9888178ac5e5e45cE>:
    fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
8003b014:	27bdffe0 	addiu	sp,sp,-32
8003b018:	afbf001c 	sw	ra,28(sp)
8003b01c:	afa40010 	sw	a0,16(sp)
8003b020:	afa50014 	sw	a1,20(sp)
8003b024:	afa60018 	sw	a2,24(sp)
8003b028:	24070000 	li	a3,0
        self.alloc_impl(layout, false)
8003b02c:	0c00ea8b 	jal	8003aa2c <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE>
8003b030:	00000000 	nop
    }
8003b034:	8fbf001c 	lw	ra,28(sp)
8003b038:	27bd0020 	addiu	sp,sp,32
8003b03c:	03e00008 	jr	ra
8003b040:	00000000 	nop

8003b044 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h80fcfa996888c781E>:
    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {
8003b044:	27bdffd0 	addiu	sp,sp,-48
8003b048:	afbf002c 	sw	ra,44(sp)
8003b04c:	afa50014 	sw	a1,20(sp)
8003b050:	afa60018 	sw	a2,24(sp)
8003b054:	afa7001c 	sw	a3,28(sp)
8003b058:	afa40020 	sw	a0,32(sp)
8003b05c:	afa50024 	sw	a1,36(sp)
8003b060:	27a40018 	addiu	a0,sp,24
        if layout.size() != 0 {
8003b064:	0c00e6d5 	jal	80039b54 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
8003b068:	00000000 	nop
8003b06c:	14400007 	bnez	v0,8003b08c <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h80fcfa996888c781E+0x48>
8003b070:	00000000 	nop
8003b074:	0800ec1f 	j	8003b07c <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h80fcfa996888c781E+0x38>
8003b078:	00000000 	nop
    }
8003b07c:	8fbf002c 	lw	ra,44(sp)
8003b080:	27bd0030 	addiu	sp,sp,48
8003b084:	03e00008 	jr	ra
8003b088:	00000000 	nop
8003b08c:	8fa40014 	lw	a0,20(sp)
8003b090:	afa40028 	sw	a0,40(sp)
            unsafe { dealloc(ptr.as_ptr(), layout) }
8003b094:	8fa50018 	lw	a1,24(sp)
8003b098:	8fa6001c 	lw	a2,28(sp)
8003b09c:	0c00ea46 	jal	8003a918 <_ZN5alloc5alloc7dealloc17h88130156a4554906E>
8003b0a0:	00000000 	nop
8003b0a4:	0800ec1f 	j	8003b07c <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h80fcfa996888c781E+0x38>
8003b0a8:	00000000 	nop

8003b0ac <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17hf5abdcd721bec62cE>:
    unsafe fn grow(
8003b0ac:	27bdffc0 	addiu	sp,sp,-64
8003b0b0:	afbf003c 	sw	ra,60(sp)
8003b0b4:	8fa30054 	lw	v1,84(sp)
8003b0b8:	8fa20050 	lw	v0,80(sp)
8003b0bc:	afa40024 	sw	a0,36(sp)
8003b0c0:	afa50028 	sw	a1,40(sp)
8003b0c4:	afa6002c 	sw	a2,44(sp)
8003b0c8:	afa70030 	sw	a3,48(sp)
8003b0cc:	afa20034 	sw	v0,52(sp)
8003b0d0:	afa30038 	sw	v1,56(sp)
        unsafe { self.grow_impl(ptr, old_layout, new_layout, false) }
8003b0d4:	03a00825 	move	at,sp
8003b0d8:	ac230014 	sw	v1,20(at)
8003b0dc:	ac220010 	sw	v0,16(at)
8003b0e0:	ac200018 	sw	zero,24(at)
8003b0e4:	0c00eae2 	jal	8003ab88 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE>
8003b0e8:	00000000 	nop
    }
8003b0ec:	8fbf003c 	lw	ra,60(sp)
8003b0f0:	27bd0040 	addiu	sp,sp,64
8003b0f4:	03e00008 	jr	ra
8003b0f8:	00000000 	nop

8003b0fc <_ZN5alloc5alloc18handle_alloc_error17h19617bae871f3d42E>:
/// [no_std]: https://doc.rust-lang.org/reference/names/preludes.html#the-no_std-attribute
#[stable(feature = "global_alloc", since = "1.28.0")]
#[rustc_const_unstable(feature = "const_alloc_error", issue = "92523")]
#[cfg(all(not(no_global_oom_handling), not(test)))]
#[cold]
pub const fn handle_alloc_error(layout: Layout) -> ! {
8003b0fc:	27bdffe0 	addiu	sp,sp,-32
8003b100:	afa40018 	sw	a0,24(sp)
8003b104:	afa5001c 	sw	a1,28(sp)
        }
    }

    #[cfg(not(feature = "panic_immediate_abort"))]
    {
        core::intrinsics::const_eval_select((layout,), ct_error, rt_error)
8003b108:	afa40010 	sw	a0,16(sp)
8003b10c:	afa50014 	sw	a1,20(sp)
8003b110:	8fa40010 	lw	a0,16(sp)
8003b114:	8fa50014 	lw	a1,20(sp)
8003b118:	0c00ec48 	jal	8003b120 <_ZN5alloc5alloc18handle_alloc_error8rt_error17h54d01f35597063baE>
8003b11c:	00000000 	nop

8003b120 <_ZN5alloc5alloc18handle_alloc_error8rt_error17h54d01f35597063baE>:
    fn rt_error(layout: Layout) -> ! {
8003b120:	27bdffd8 	addiu	sp,sp,-40
8003b124:	afbf0024 	sw	ra,36(sp)
8003b128:	afa4001c 	sw	a0,28(sp)
8003b12c:	afa50020 	sw	a1,32(sp)
8003b130:	27a4001c 	addiu	a0,sp,28
8003b134:	afa40014 	sw	a0,20(sp)
            __rust_alloc_error_handler(layout.size(), layout.align());
8003b138:	0c00e6d5 	jal	80039b54 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
8003b13c:	00000000 	nop
8003b140:	8fa40014 	lw	a0,20(sp)
8003b144:	afa20018 	sw	v0,24(sp)
8003b148:	0c00e6db 	jal	80039b6c <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
8003b14c:	00000000 	nop
8003b150:	8fa40018 	lw	a0,24(sp)
8003b154:	00402825 	move	a1,v0
8003b158:	0c00db44 	jal	80036d10 <__rust_alloc_error_handler>
8003b15c:	00000000 	nop

8003b160 <__rdl_oom>:
#[unstable(feature = "alloc_internals", issue = "none")]
pub mod __alloc_error_handler {
    // called via generated `__rust_alloc_error_handler` if there is no
    // `#[alloc_error_handler]`.
    #[rustc_std_internal_symbol]
    pub unsafe fn __rdl_oom(size: usize, _align: usize) -> ! {
8003b160:	27bdff68 	addiu	sp,sp,-152
8003b164:	afbf0094 	sw	ra,148(sp)
8003b168:	afa40024 	sw	a0,36(sp)
8003b16c:	afa50068 	sw	a1,104(sp)
            // This symbol is emitted by rustc next to __rust_alloc_error_handler.
            // Its value depends on the -Zoom={panic,abort} compiler option.
            static __rust_alloc_error_handler_should_panic: u8;
        }

        if unsafe { __rust_alloc_error_handler_should_panic != 0 } {
8003b170:	3c018105 	lui	at,0x8105
8003b174:	9021d0c8 	lbu	at,-12088(at)
8003b178:	14200020 	bnez	at,8003b1fc <__rdl_oom+0x9c>
8003b17c:	00000000 	nop
8003b180:	0800ec62 	j	8003b188 <__rdl_oom+0x28>
8003b184:	00000000 	nop
8003b188:	27a20024 	addiu	v0,sp,36
8003b18c:	afa20070 	sw	v0,112(sp)
8003b190:	afa2007c 	sw	v0,124(sp)
8003b194:	3c018005 	lui	at,0x8005
8003b198:	2421a0f4 	addiu	at,at,-24332
8003b19c:	afa10080 	sw	at,128(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003b1a0:	afa20074 	sw	v0,116(sp)
8003b1a4:	afa10078 	sw	at,120(sp)
    }
8003b1a8:	8fa20074 	lw	v0,116(sp)
8003b1ac:	8fa10078 	lw	at,120(sp)
            panic!("memory allocation of {size} bytes failed")
        } else {
            core::panicking::panic_nounwind_fmt(
                format_args!("memory allocation of {size} bytes failed"),
8003b1b0:	afa20060 	sw	v0,96(sp)
8003b1b4:	afa10064 	sw	at,100(sp)
8003b1b8:	03a01025 	move	v0,sp
8003b1bc:	24010001 	li	at,1
8003b1c0:	ac410010 	sw	at,16(v0)
8003b1c4:	3c01810a 	lui	at,0x810a
8003b1c8:	2425af68 	addiu	a1,at,-20632
8003b1cc:	27a40048 	addiu	a0,sp,72
8003b1d0:	afa40020 	sw	a0,32(sp)
8003b1d4:	24060002 	li	a2,2
8003b1d8:	27a70060 	addiu	a3,sp,96
8003b1dc:	0c00e47c 	jal	800391f0 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE>
8003b1e0:	00000000 	nop
8003b1e4:	8fa40020 	lw	a0,32(sp)
            core::panicking::panic_nounwind_fmt(
8003b1e8:	3c01810a 	lui	at,0x810a
8003b1ec:	2426af78 	addiu	a2,at,-20616
8003b1f0:	24050000 	li	a1,0
8003b1f4:	0c00fb6f 	jal	8003edbc <_ZN4core9panicking18panic_nounwind_fmt17hf69a56259d4ee080E>
8003b1f8:	00000000 	nop
8003b1fc:	27a20024 	addiu	v0,sp,36
8003b200:	afa2006c 	sw	v0,108(sp)
8003b204:	afa2008c 	sw	v0,140(sp)
8003b208:	3c018005 	lui	at,0x8005
8003b20c:	2421a0f4 	addiu	at,at,-24332
8003b210:	afa10090 	sw	at,144(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003b214:	afa20084 	sw	v0,132(sp)
8003b218:	afa10088 	sw	at,136(sp)
    }
8003b21c:	8fa20084 	lw	v0,132(sp)
8003b220:	8fa10088 	lw	at,136(sp)
            panic!("memory allocation of {size} bytes failed")
8003b224:	afa20040 	sw	v0,64(sp)
8003b228:	afa10044 	sw	at,68(sp)
8003b22c:	03a01025 	move	v0,sp
8003b230:	24010001 	li	at,1
8003b234:	ac410010 	sw	at,16(v0)
8003b238:	3c01810a 	lui	at,0x810a
8003b23c:	2425af68 	addiu	a1,at,-20632
8003b240:	27a40028 	addiu	a0,sp,40
8003b244:	afa4001c 	sw	a0,28(sp)
8003b248:	24060002 	li	a2,2
8003b24c:	27a70040 	addiu	a3,sp,64
8003b250:	0c00e47c 	jal	800391f0 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE>
8003b254:	00000000 	nop
8003b258:	8fa4001c 	lw	a0,28(sp)
8003b25c:	3c01810a 	lui	at,0x810a
8003b260:	2425af88 	addiu	a1,at,-20600
8003b264:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003b268:	00000000 	nop

8003b26c <_ZN5alloc11collections15TryReserveError4kind17h31476c26af2fe7bdE>:
    #[unstable(
        feature = "try_reserve_kind",
        reason = "Uncertain how much info should be exposed",
        issue = "48043"
    )]
    pub fn kind(&self) -> TryReserveErrorKind {
8003b26c:	27bdffe8 	addiu	sp,sp,-24
8003b270:	afbf0014 	sw	ra,20(sp)
8003b274:	afa40010 	sw	a0,16(sp)
        self.kind.clone()
8003b278:	0c00ecae 	jal	8003b2b8 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17hd052bfa7320cfc75E>
8003b27c:	00000000 	nop
    }
8003b280:	8fbf0014 	lw	ra,20(sp)
8003b284:	27bd0018 	addiu	sp,sp,24
8003b288:	03e00008 	jr	ra
8003b28c:	00000000 	nop

8003b290 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17h136c3be8ef9c5cdbE>:
    reason = "Uncertain how much info should be exposed",
    issue = "48043"
)]
impl From<TryReserveErrorKind> for TryReserveError {
    #[inline]
    fn from(kind: TryReserveErrorKind) -> Self {
8003b290:	27bdfff0 	addiu	sp,sp,-16
8003b294:	afa40008 	sw	a0,8(sp)
8003b298:	afa5000c 	sw	a1,12(sp)
        Self { kind }
8003b29c:	afa40000 	sw	a0,0(sp)
8003b2a0:	afa50004 	sw	a1,4(sp)
    }
8003b2a4:	8fa20000 	lw	v0,0(sp)
8003b2a8:	8fa30004 	lw	v1,4(sp)
8003b2ac:	27bd0010 	addiu	sp,sp,16
8003b2b0:	03e00008 	jr	ra
8003b2b4:	00000000 	nop

8003b2b8 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17hd052bfa7320cfc75E>:
#[derive(Clone, PartialEq, Eq, Debug)]
8003b2b8:	27bdffd0 	addiu	sp,sp,-48
8003b2bc:	afbf002c 	sw	ra,44(sp)
8003b2c0:	afa40014 	sw	a0,20(sp)
8003b2c4:	afa40020 	sw	a0,32(sp)
8003b2c8:	8c810000 	lw	at,0(a0)
8003b2cc:	14200006 	bnez	at,8003b2e8 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17hd052bfa7320cfc75E+0x30>
8003b2d0:	00000000 	nop
8003b2d4:	0800ecb7 	j	8003b2dc <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17hd052bfa7320cfc75E+0x24>
8003b2d8:	00000000 	nop
8003b2dc:	afa00018 	sw	zero,24(sp)
8003b2e0:	0800ecc4 	j	8003b310 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17hd052bfa7320cfc75E+0x58>
8003b2e4:	00000000 	nop
        layout: Layout,
8003b2e8:	8fa40014 	lw	a0,20(sp)
8003b2ec:	afa40024 	sw	a0,36(sp)
        non_exhaustive: (),
8003b2f0:	24810008 	addiu	at,a0,8
8003b2f4:	afa10028 	sw	at,40(sp)
        layout: Layout,
8003b2f8:	0c00e84d 	jal	8003a134 <_ZN66_$LT$core..alloc..layout..Layout$u20$as$u20$core..clone..Clone$GT$5clone17h315816e7f53d18b6E>
8003b2fc:	00000000 	nop
#[derive(Clone, PartialEq, Eq, Debug)]
8003b300:	afa20018 	sw	v0,24(sp)
8003b304:	afa3001c 	sw	v1,28(sp)
8003b308:	0800ecc4 	j	8003b310 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17hd052bfa7320cfc75E+0x58>
8003b30c:	00000000 	nop
8003b310:	8fa20018 	lw	v0,24(sp)
8003b314:	8fa3001c 	lw	v1,28(sp)
8003b318:	8fbf002c 	lw	ra,44(sp)
8003b31c:	27bd0030 	addiu	sp,sp,48
8003b320:	03e00008 	jr	ra
8003b324:	00000000 	nop

8003b328 <_ZN4core3ops8function6FnOnce9call_once17h58ccafbc73184b93E>:
8003b328:	27bdffe8 	addiu	sp,sp,-24
8003b32c:	afbf0014 	sw	ra,20(sp)
8003b330:	a3a40012 	sb	a0,18(sp)
8003b334:	93a40012 	lbu	a0,18(sp)
8003b338:	0c00f481 	jal	8003d204 <_ZN4core4char7convert64_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$char$GT$4from17h3cd4ae837407df41E>
8003b33c:	00000000 	nop
8003b340:	8fbf0014 	lw	ra,20(sp)
8003b344:	27bd0018 	addiu	sp,sp,24
8003b348:	03e00008 	jr	ra
8003b34c:	00000000 	nop

8003b350 <_ZN4core3ops8function6FnOnce9call_once17h791c912e8431a9d0E>:
8003b350:	27bdffe0 	addiu	sp,sp,-32
8003b354:	afbf001c 	sw	ra,28(sp)
8003b358:	afa40010 	sw	a0,16(sp)
8003b35c:	afa50014 	sw	a1,20(sp)
8003b360:	8fa40010 	lw	a0,16(sp)
8003b364:	8fa50014 	lw	a1,20(sp)
8003b368:	0c0122c6 	jal	80048b18 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17he219583d3b212753E>
8003b36c:	00000000 	nop
8003b370:	8fbf001c 	lw	ra,28(sp)
8003b374:	27bd0020 	addiu	sp,sp,32
8003b378:	03e00008 	jr	ra
8003b37c:	00000000 	nop

8003b380 <_ZN4core3ops8function6FnOnce9call_once17hff92956d057e1979E>:
8003b380:	27bdffe0 	addiu	sp,sp,-32
8003b384:	afbf001c 	sw	ra,28(sp)
8003b388:	afa40014 	sw	a0,20(sp)
8003b38c:	afa50018 	sw	a1,24(sp)
8003b390:	8fa50014 	lw	a1,20(sp)
8003b394:	8fa60018 	lw	a2,24(sp)
8003b398:	27a40013 	addiu	a0,sp,19
8003b39c:	0c0103aa 	jal	80040ea8 <_ZN4core3fmt2rt12USIZE_MARKER28_$u7b$$u7b$closure$u7d$$u7d$17hf5206f4f02198d93E>
8003b3a0:	00000000 	nop
8003b3a4:	8fbf001c 	lw	ra,28(sp)
8003b3a8:	27bd0020 	addiu	sp,sp,32
8003b3ac:	03e00008 	jr	ra
8003b3b0:	00000000 	nop

8003b3b4 <_ZN4core3ptr30drop_in_place$LT$$RF$usize$GT$17h3559632f10d2fa89E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8003b3b4:	27bdfff8 	addiu	sp,sp,-8
8003b3b8:	afa40004 	sw	a0,4(sp)
8003b3bc:	27bd0008 	addiu	sp,sp,8
8003b3c0:	03e00008 	jr	ra
8003b3c4:	00000000 	nop

8003b3c8 <_ZN4core3ptr88drop_in_place$LT$core..panic..panic_info..PanicInfo..internal_constructor..NoPayload$GT$17h676df5d1e1a6eccdE>:
8003b3c8:	27bdfff8 	addiu	sp,sp,-8
8003b3cc:	afa40004 	sw	a0,4(sp)
8003b3d0:	27bd0008 	addiu	sp,sp,8
8003b3d4:	03e00008 	jr	ra
8003b3d8:	00000000 	nop

8003b3dc <_ZN4core3num7nonzero16NonZero$LT$T$GT$3new17hd71ad0f64153bd17E>:
    /// Creates a non-zero if the given value is not zero.
    #[stable(feature = "nonzero", since = "1.28.0")]
    #[rustc_const_stable(feature = "const_nonzero_int_methods", since = "1.47.0")]
    #[must_use]
    #[inline]
    pub const fn new(n: T) -> Option<Self> {
8003b3dc:	27bdfff8 	addiu	sp,sp,-8
8003b3e0:	00801025 	move	v0,a0
8003b3e4:	afa20004 	sw	v0,4(sp)
8003b3e8:	27bd0008 	addiu	sp,sp,8
        // SAFETY: Memory layout optimization guarantees that `Option<NonZero<T>>` has
        //         the same layout and size as `T`, with `0` representing `None`.
        unsafe { intrinsics::transmute_unchecked(n) }
    }
8003b3ec:	03e00008 	jr	ra
8003b3f0:	00000000 	nop

8003b3f4 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked17ha183bd3a225a1179E>:
    /// The value must not be zero.
    #[stable(feature = "nonzero", since = "1.28.0")]
    #[rustc_const_stable(feature = "nonzero", since = "1.28.0")]
    #[must_use]
    #[inline]
    pub const unsafe fn new_unchecked(n: T) -> Self {
8003b3f4:	27bdffe0 	addiu	sp,sp,-32
8003b3f8:	afbf001c 	sw	ra,28(sp)
8003b3fc:	afa40014 	sw	a0,20(sp)
        match Self::new(n) {
8003b400:	0c00ecf7 	jal	8003b3dc <_ZN4core3num7nonzero16NonZero$LT$T$GT$3new17hd71ad0f64153bd17E>
8003b404:	00000000 	nop
8003b408:	afa20010 	sw	v0,16(sp)
8003b40c:	8fa10010 	lw	at,16(sp)
8003b410:	14200009 	bnez	at,8003b438 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked17ha183bd3a225a1179E+0x44>
8003b414:	00000000 	nop
8003b418:	0800ed08 	j	8003b420 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked17ha183bd3a225a1179E+0x2c>
8003b41c:	00000000 	nop
            Some(n) => n,
            None => {
                // SAFETY: The caller guarantees that `n` is non-zero, so this is unreachable.
                unsafe {
                    ub_checks::assert_unsafe_precondition!(
8003b420:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8003b424:	00000000 	nop
8003b428:	1440000a 	bnez	v0,8003b454 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked17ha183bd3a225a1179E+0x60>
8003b42c:	00000000 	nop
8003b430:	0800ed14 	j	8003b450 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked17ha183bd3a225a1179E+0x5c>
8003b434:	00000000 	nop
            Some(n) => n,
8003b438:	8fa20010 	lw	v0,16(sp)
8003b43c:	afa20018 	sw	v0,24(sp)
                    );
                    intrinsics::unreachable()
                }
            }
        }
    }
8003b440:	8fbf001c 	lw	ra,28(sp)
8003b444:	27bd0020 	addiu	sp,sp,32
8003b448:	03e00008 	jr	ra
8003b44c:	00000000 	nop
        match Self::new(n) {
8003b450:	0000000d 	break
                    ub_checks::assert_unsafe_precondition!(
8003b454:	0c012152 	jal	80048548 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked18precondition_check17h2dffd53263e0e1a6E>
8003b458:	00000000 	nop
8003b45c:	0800ed14 	j	8003b450 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked17ha183bd3a225a1179E+0x5c>
8003b460:	00000000 	nop

8003b464 <_ZN4core3num20_$LT$impl$u20$u8$GT$21is_utf8_char_boundary17hd4b7d97890933c9eE>:
    pub fn escape_ascii(self) -> ascii::EscapeDefault {
        ascii::escape_default(self)
    }

    #[inline]
    pub(crate) const fn is_utf8_char_boundary(self) -> bool {
8003b464:	27bdfff8 	addiu	sp,sp,-8
8003b468:	7c041420 	seb	v0,a0
8003b46c:	a3a40007 	sb	a0,7(sp)
8003b470:	2401ffbf 	li	at,-65
        // This is bit magic equivalent to: b < 128 || b >= 192
        (self as i8) >= -0x40
8003b474:	0022102a 	slt	v0,at,v0
8003b478:	27bd0008 	addiu	sp,sp,8
    }
8003b47c:	03e00008 	jr	ra
8003b480:	00000000 	nop

8003b484 <_ZN4core4hint21unreachable_unchecked17hb65475a0a116f39aE>:
pub const unsafe fn unreachable_unchecked() -> ! {
8003b484:	27bdffe8 	addiu	sp,sp,-24
8003b488:	afbf0014 	sw	ra,20(sp)
    ub_checks::assert_unsafe_precondition!(
8003b48c:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8003b490:	00000000 	nop
8003b494:	14400004 	bnez	v0,8003b4a8 <_ZN4core4hint21unreachable_unchecked17hb65475a0a116f39aE+0x24>
8003b498:	00000000 	nop
8003b49c:	0800ed29 	j	8003b4a4 <_ZN4core4hint21unreachable_unchecked17hb65475a0a116f39aE+0x20>
8003b4a0:	00000000 	nop
    unsafe { intrinsics::unreachable() }
8003b4a4:	0000000d 	break
    ub_checks::assert_unsafe_precondition!(
8003b4a8:	0c01220b 	jal	8004882c <_ZN4core4hint21unreachable_unchecked18precondition_check17hfceb70dacfe74ff1E>
8003b4ac:	00000000 	nop
8003b4b0:	0800ed29 	j	8003b4a4 <_ZN4core4hint21unreachable_unchecked17hb65475a0a116f39aE+0x20>
8003b4b4:	00000000 	nop

8003b4b8 <_ZN4core3mem7replace17h16554973e0f26abfE>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
8003b4b8:	27bdffd8 	addiu	sp,sp,-40
8003b4bc:	afbf0024 	sw	ra,36(sp)
8003b4c0:	afa50014 	sw	a1,20(sp)
8003b4c4:	afa40010 	sw	a0,16(sp)
8003b4c8:	afa4001c 	sw	a0,28(sp)
8003b4cc:	a3a50022 	sb	a1,34(sp)
        let result = ptr::read(dest);
8003b4d0:	0c00f021 	jal	8003c084 <_ZN4core3ptr4read17h62ae591ccb22f4e5E>
8003b4d4:	00000000 	nop
8003b4d8:	8fa40010 	lw	a0,16(sp)
8003b4dc:	8fa50014 	lw	a1,20(sp)
8003b4e0:	afa20018 	sw	v0,24(sp)
8003b4e4:	a3a20023 	sb	v0,35(sp)
        ptr::write(dest, src);
8003b4e8:	0c00f04d 	jal	8003c134 <_ZN4core3ptr5write17h4459b32568548eceE>
8003b4ec:	00000000 	nop
8003b4f0:	8fa20018 	lw	v0,24(sp)
}
8003b4f4:	8fbf0024 	lw	ra,36(sp)
8003b4f8:	27bd0028 	addiu	sp,sp,40
8003b4fc:	03e00008 	jr	ra
8003b500:	00000000 	nop

8003b504 <_ZN4core3mem7replace17h8bdd203d298c7c3eE>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
8003b504:	27bdffd0 	addiu	sp,sp,-48
8003b508:	afbf002c 	sw	ra,44(sp)
8003b50c:	afa50018 	sw	a1,24(sp)
8003b510:	afa40014 	sw	a0,20(sp)
8003b514:	afa40020 	sw	a0,32(sp)
8003b518:	afa50024 	sw	a1,36(sp)
        let result = ptr::read(dest);
8003b51c:	0c00f037 	jal	8003c0dc <_ZN4core3ptr4read17h642b0fbf995d98adE>
8003b520:	00000000 	nop
8003b524:	8fa40014 	lw	a0,20(sp)
8003b528:	8fa50018 	lw	a1,24(sp)
8003b52c:	afa2001c 	sw	v0,28(sp)
8003b530:	afa20028 	sw	v0,40(sp)
        ptr::write(dest, src);
8003b534:	0c00f067 	jal	8003c19c <_ZN4core3ptr5write17h6c5fae36b352f0feE>
8003b538:	00000000 	nop
8003b53c:	8fa2001c 	lw	v0,28(sp)
}
8003b540:	8fbf002c 	lw	ra,44(sp)
8003b544:	27bd0030 	addiu	sp,sp,48
8003b548:	03e00008 	jr	ra
8003b54c:	00000000 	nop

8003b550 <_ZN4core3ptr8metadata8metadata17h20bb056214aec1c6E>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
8003b550:	27bdfff0 	addiu	sp,sp,-16
8003b554:	afa40008 	sw	a0,8(sp)
8003b558:	afa5000c 	sw	a1,12(sp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
8003b55c:	afa40000 	sw	a0,0(sp)
8003b560:	afa50004 	sw	a1,4(sp)
8003b564:	8fa20004 	lw	v0,4(sp)
8003b568:	27bd0010 	addiu	sp,sp,16
}
8003b56c:	03e00008 	jr	ra
8003b570:	00000000 	nop

8003b574 <_ZN4core3ptr8metadata8metadata17hb7eaf43eba912fd2E>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
8003b574:	27bdfff0 	addiu	sp,sp,-16
8003b578:	afa40008 	sw	a0,8(sp)
8003b57c:	afa5000c 	sw	a1,12(sp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
8003b580:	afa40000 	sw	a0,0(sp)
8003b584:	afa50004 	sw	a1,4(sp)
8003b588:	8fa20004 	lw	v0,4(sp)
8003b58c:	27bd0010 	addiu	sp,sp,16
}
8003b590:	03e00008 	jr	ra
8003b594:	00000000 	nop

8003b598 <_ZN4core3ptr8metadata8metadata17hbb60b31b5db383cfE>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
8003b598:	27bdfff0 	addiu	sp,sp,-16
8003b59c:	afa40008 	sw	a0,8(sp)
8003b5a0:	afa5000c 	sw	a1,12(sp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
8003b5a4:	afa40000 	sw	a0,0(sp)
8003b5a8:	afa50004 	sw	a1,4(sp)
8003b5ac:	8fa20004 	lw	v0,4(sp)
8003b5b0:	27bd0010 	addiu	sp,sp,16
}
8003b5b4:	03e00008 	jr	ra
8003b5b8:	00000000 	nop

8003b5bc <_ZN4core3ptr8metadata8metadata17hce8b7d7f1ef8a93eE>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
8003b5bc:	27bdfff0 	addiu	sp,sp,-16
8003b5c0:	afa40008 	sw	a0,8(sp)
8003b5c4:	afa5000c 	sw	a1,12(sp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
8003b5c8:	afa40000 	sw	a0,0(sp)
8003b5cc:	afa50004 	sw	a1,4(sp)
8003b5d0:	8fa20004 	lw	v0,4(sp)
8003b5d4:	27bd0010 	addiu	sp,sp,16
}
8003b5d8:	03e00008 	jr	ra
8003b5dc:	00000000 	nop

8003b5e0 <_ZN4core3ptr8metadata8metadata17he1acf955a0a571f5E>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
8003b5e0:	27bdfff0 	addiu	sp,sp,-16
8003b5e4:	afa40008 	sw	a0,8(sp)
8003b5e8:	afa5000c 	sw	a1,12(sp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
8003b5ec:	afa40000 	sw	a0,0(sp)
8003b5f0:	afa50004 	sw	a1,4(sp)
8003b5f4:	8fa20004 	lw	v0,4(sp)
8003b5f8:	27bd0010 	addiu	sp,sp,16
}
8003b5fc:	03e00008 	jr	ra
8003b600:	00000000 	nop

8003b604 <_ZN4core3ptr8metadata8metadata17he6569c9c74456ea7E>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
8003b604:	27bdfff0 	addiu	sp,sp,-16
8003b608:	afa40008 	sw	a0,8(sp)
8003b60c:	afa5000c 	sw	a1,12(sp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
8003b610:	afa40000 	sw	a0,0(sp)
8003b614:	afa50004 	sw	a1,4(sp)
8003b618:	8fa20004 	lw	v0,4(sp)
8003b61c:	27bd0010 	addiu	sp,sp,16
}
8003b620:	03e00008 	jr	ra
8003b624:	00000000 	nop

8003b628 <_ZN4core3ptr8metadata14from_raw_parts17h59fb30269ae415d8E>:
pub const fn from_raw_parts<T: ?Sized>(
8003b628:	27bdffe8 	addiu	sp,sp,-24
8003b62c:	afa40010 	sw	a0,16(sp)
8003b630:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
8003b634:	afa40008 	sw	a0,8(sp)
8003b638:	afa5000c 	sw	a1,12(sp)
8003b63c:	8fa20008 	lw	v0,8(sp)
8003b640:	8fa1000c 	lw	at,12(sp)
8003b644:	afa20000 	sw	v0,0(sp)
8003b648:	afa10004 	sw	at,4(sp)
8003b64c:	8fa20000 	lw	v0,0(sp)
8003b650:	8fa30004 	lw	v1,4(sp)
8003b654:	27bd0018 	addiu	sp,sp,24
}
8003b658:	03e00008 	jr	ra
8003b65c:	00000000 	nop

8003b660 <_ZN4core3ptr8metadata14from_raw_parts17h938c560b03e9d26fE>:
pub const fn from_raw_parts<T: ?Sized>(
8003b660:	27bdffe8 	addiu	sp,sp,-24
8003b664:	afa40010 	sw	a0,16(sp)
8003b668:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
8003b66c:	afa40008 	sw	a0,8(sp)
8003b670:	afa5000c 	sw	a1,12(sp)
8003b674:	8fa20008 	lw	v0,8(sp)
8003b678:	8fa1000c 	lw	at,12(sp)
8003b67c:	afa20000 	sw	v0,0(sp)
8003b680:	afa10004 	sw	at,4(sp)
8003b684:	8fa20000 	lw	v0,0(sp)
8003b688:	8fa30004 	lw	v1,4(sp)
8003b68c:	27bd0018 	addiu	sp,sp,24
}
8003b690:	03e00008 	jr	ra
8003b694:	00000000 	nop

8003b698 <_ZN4core3ptr8metadata14from_raw_parts17hb362f311e3d98555E>:
pub const fn from_raw_parts<T: ?Sized>(
8003b698:	27bdffe8 	addiu	sp,sp,-24
8003b69c:	afa40010 	sw	a0,16(sp)
8003b6a0:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
8003b6a4:	afa40008 	sw	a0,8(sp)
8003b6a8:	afa5000c 	sw	a1,12(sp)
8003b6ac:	8fa20008 	lw	v0,8(sp)
8003b6b0:	8fa1000c 	lw	at,12(sp)
8003b6b4:	afa20000 	sw	v0,0(sp)
8003b6b8:	afa10004 	sw	at,4(sp)
8003b6bc:	8fa20000 	lw	v0,0(sp)
8003b6c0:	8fa30004 	lw	v1,4(sp)
8003b6c4:	27bd0018 	addiu	sp,sp,24
}
8003b6c8:	03e00008 	jr	ra
8003b6cc:	00000000 	nop

8003b6d0 <_ZN4core3ptr8metadata14from_raw_parts17hfcd6d7e30e5589bcE>:
pub const fn from_raw_parts<T: ?Sized>(
8003b6d0:	27bdffe8 	addiu	sp,sp,-24
8003b6d4:	afa40010 	sw	a0,16(sp)
8003b6d8:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
8003b6dc:	afa40008 	sw	a0,8(sp)
8003b6e0:	afa5000c 	sw	a1,12(sp)
8003b6e4:	8fa20008 	lw	v0,8(sp)
8003b6e8:	8fa1000c 	lw	at,12(sp)
8003b6ec:	afa20000 	sw	v0,0(sp)
8003b6f0:	afa10004 	sw	at,4(sp)
8003b6f4:	8fa20000 	lw	v0,0(sp)
8003b6f8:	8fa30004 	lw	v1,4(sp)
8003b6fc:	27bd0018 	addiu	sp,sp,24
}
8003b700:	03e00008 	jr	ra
8003b704:	00000000 	nop

8003b708 <_ZN4core3ptr8metadata18from_raw_parts_mut17h632204f4052cbfb1E>:
pub const fn from_raw_parts_mut<T: ?Sized>(
8003b708:	27bdffe8 	addiu	sp,sp,-24
8003b70c:	afa40010 	sw	a0,16(sp)
8003b710:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8003b714:	afa40008 	sw	a0,8(sp)
8003b718:	afa5000c 	sw	a1,12(sp)
8003b71c:	8fa20008 	lw	v0,8(sp)
8003b720:	8fa1000c 	lw	at,12(sp)
8003b724:	afa20000 	sw	v0,0(sp)
8003b728:	afa10004 	sw	at,4(sp)
8003b72c:	8fa20000 	lw	v0,0(sp)
8003b730:	8fa30004 	lw	v1,4(sp)
8003b734:	27bd0018 	addiu	sp,sp,24
}
8003b738:	03e00008 	jr	ra
8003b73c:	00000000 	nop

8003b740 <_ZN4core3ptr8metadata18from_raw_parts_mut17hc2806463ced23b28E>:
pub const fn from_raw_parts_mut<T: ?Sized>(
8003b740:	27bdffe8 	addiu	sp,sp,-24
8003b744:	afa40010 	sw	a0,16(sp)
8003b748:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8003b74c:	afa40008 	sw	a0,8(sp)
8003b750:	afa5000c 	sw	a1,12(sp)
8003b754:	8fa20008 	lw	v0,8(sp)
8003b758:	8fa1000c 	lw	at,12(sp)
8003b75c:	afa20000 	sw	v0,0(sp)
8003b760:	afa10004 	sw	at,4(sp)
8003b764:	8fa20000 	lw	v0,0(sp)
8003b768:	8fa30004 	lw	v1,4(sp)
8003b76c:	27bd0018 	addiu	sp,sp,24
}
8003b770:	03e00008 	jr	ra
8003b774:	00000000 	nop

8003b778 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h00d2554fa9e87b3eE>:
    pub const fn cast<U>(self) -> NonNull<U> {
8003b778:	27bdffe8 	addiu	sp,sp,-24
8003b77c:	afa40008 	sw	a0,8(sp)
8003b780:	afa5000c 	sw	a1,12(sp)
8003b784:	afa40010 	sw	a0,16(sp)
8003b788:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8003b78c:	afa40004 	sw	a0,4(sp)
    }
8003b790:	8fa20004 	lw	v0,4(sp)
8003b794:	27bd0018 	addiu	sp,sp,24
8003b798:	03e00008 	jr	ra
8003b79c:	00000000 	nop

8003b7a0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h5a7a1ff19e811062E>:
    pub const fn cast<U>(self) -> NonNull<U> {
8003b7a0:	27bdffe8 	addiu	sp,sp,-24
8003b7a4:	afa40008 	sw	a0,8(sp)
8003b7a8:	afa5000c 	sw	a1,12(sp)
8003b7ac:	afa40010 	sw	a0,16(sp)
8003b7b0:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8003b7b4:	afa40004 	sw	a0,4(sp)
    }
8003b7b8:	8fa20004 	lw	v0,4(sp)
8003b7bc:	27bd0018 	addiu	sp,sp,24
8003b7c0:	03e00008 	jr	ra
8003b7c4:	00000000 	nop

8003b7c8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h5fd7ff25d87ee5b2E>:
    pub const fn cast<U>(self) -> NonNull<U> {
8003b7c8:	27bdffe8 	addiu	sp,sp,-24
8003b7cc:	afa40008 	sw	a0,8(sp)
8003b7d0:	afa5000c 	sw	a1,12(sp)
8003b7d4:	afa40010 	sw	a0,16(sp)
8003b7d8:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8003b7dc:	afa40004 	sw	a0,4(sp)
    }
8003b7e0:	8fa20004 	lw	v0,4(sp)
8003b7e4:	27bd0018 	addiu	sp,sp,24
8003b7e8:	03e00008 	jr	ra
8003b7ec:	00000000 	nop

8003b7f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h71a9277f345cbca1E>:
    pub const fn cast<U>(self) -> NonNull<U> {
8003b7f0:	27bdffe8 	addiu	sp,sp,-24
8003b7f4:	afa40008 	sw	a0,8(sp)
8003b7f8:	afa5000c 	sw	a1,12(sp)
8003b7fc:	afa40010 	sw	a0,16(sp)
8003b800:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8003b804:	afa40004 	sw	a0,4(sp)
    }
8003b808:	8fa20004 	lw	v0,4(sp)
8003b80c:	27bd0018 	addiu	sp,sp,24
8003b810:	03e00008 	jr	ra
8003b814:	00000000 	nop

8003b818 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hc3931c08778c30c2E>:
    pub const fn cast<U>(self) -> NonNull<U> {
8003b818:	27bdffe8 	addiu	sp,sp,-24
8003b81c:	afa40008 	sw	a0,8(sp)
8003b820:	afa5000c 	sw	a1,12(sp)
8003b824:	afa40010 	sw	a0,16(sp)
8003b828:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8003b82c:	afa40004 	sw	a0,4(sp)
    }
8003b830:	8fa20004 	lw	v0,4(sp)
8003b834:	27bd0018 	addiu	sp,sp,24
8003b838:	03e00008 	jr	ra
8003b83c:	00000000 	nop

8003b840 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hc62c740b2334bc63E>:
    pub const fn cast<U>(self) -> NonNull<U> {
8003b840:	27bdffe8 	addiu	sp,sp,-24
8003b844:	afa40008 	sw	a0,8(sp)
8003b848:	afa5000c 	sw	a1,12(sp)
8003b84c:	afa40010 	sw	a0,16(sp)
8003b850:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8003b854:	afa40004 	sw	a0,4(sp)
    }
8003b858:	8fa20004 	lw	v0,4(sp)
8003b85c:	27bd0018 	addiu	sp,sp,24
8003b860:	03e00008 	jr	ra
8003b864:	00000000 	nop

8003b868 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hdae9d46e5c3f465bE>:
    pub const fn cast<U>(self) -> NonNull<U> {
8003b868:	27bdffe8 	addiu	sp,sp,-24
8003b86c:	afa40008 	sw	a0,8(sp)
8003b870:	afa5000c 	sw	a1,12(sp)
8003b874:	afa40010 	sw	a0,16(sp)
8003b878:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8003b87c:	afa40004 	sw	a0,4(sp)
    }
8003b880:	8fa20004 	lw	v0,4(sp)
8003b884:	27bd0018 	addiu	sp,sp,24
8003b888:	03e00008 	jr	ra
8003b88c:	00000000 	nop

8003b890 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$7sub_ptr17h9b9ab3e8577ce557E>:
    pub const unsafe fn sub_ptr(self, subtracted: NonNull<T>) -> usize
8003b890:	27bdffe0 	addiu	sp,sp,-32
8003b894:	afbf001c 	sw	ra,28(sp)
8003b898:	afa40014 	sw	a0,20(sp)
8003b89c:	afa50018 	sw	a1,24(sp)
        unsafe { self.pointer.sub_ptr(subtracted.pointer) }
8003b8a0:	0c00eedb 	jal	8003bb6c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E>
8003b8a4:	00000000 	nop
    }
8003b8a8:	8fbf001c 	lw	ra,28(sp)
8003b8ac:	27bd0020 	addiu	sp,sp,32
8003b8b0:	03e00008 	jr	ra
8003b8b4:	00000000 	nop

8003b8b8 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h3eb9e52439106dd7E>:
    fn eq(&self, other: &Self) -> bool {
8003b8b8:	27bdfff0 	addiu	sp,sp,-16
8003b8bc:	afa40000 	sw	a0,0(sp)
8003b8c0:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
8003b8c4:	8c810000 	lw	at,0(a0)
8003b8c8:	afa1000c 	sw	at,12(sp)
8003b8cc:	8ca20000 	lw	v0,0(a1)
8003b8d0:	afa20008 	sw	v0,8(sp)
8003b8d4:	00220826 	xor	at,at,v0
8003b8d8:	2c220001 	sltiu	v0,at,1
8003b8dc:	27bd0010 	addiu	sp,sp,16
    }
8003b8e0:	03e00008 	jr	ra
8003b8e4:	00000000 	nop

8003b8e8 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h41d7ed9cbfe80c5aE>:
    fn eq(&self, other: &Self) -> bool {
8003b8e8:	27bdfff0 	addiu	sp,sp,-16
8003b8ec:	afa40000 	sw	a0,0(sp)
8003b8f0:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
8003b8f4:	8c810000 	lw	at,0(a0)
8003b8f8:	afa1000c 	sw	at,12(sp)
8003b8fc:	8ca20000 	lw	v0,0(a1)
8003b900:	afa20008 	sw	v0,8(sp)
8003b904:	00220826 	xor	at,at,v0
8003b908:	2c220001 	sltiu	v0,at,1
8003b90c:	27bd0010 	addiu	sp,sp,16
    }
8003b910:	03e00008 	jr	ra
8003b914:	00000000 	nop

8003b918 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h4eca0769a0300955E>:
    fn eq(&self, other: &Self) -> bool {
8003b918:	27bdfff0 	addiu	sp,sp,-16
8003b91c:	afa40000 	sw	a0,0(sp)
8003b920:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
8003b924:	8c810000 	lw	at,0(a0)
8003b928:	afa1000c 	sw	at,12(sp)
8003b92c:	8ca20000 	lw	v0,0(a1)
8003b930:	afa20008 	sw	v0,8(sp)
8003b934:	00220826 	xor	at,at,v0
8003b938:	2c220001 	sltiu	v0,at,1
8003b93c:	27bd0010 	addiu	sp,sp,16
    }
8003b940:	03e00008 	jr	ra
8003b944:	00000000 	nop

8003b948 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9ec4f98e00ed0785E>:
    fn eq(&self, other: &Self) -> bool {
8003b948:	27bdfff0 	addiu	sp,sp,-16
8003b94c:	afa40000 	sw	a0,0(sp)
8003b950:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
8003b954:	8c810000 	lw	at,0(a0)
8003b958:	afa1000c 	sw	at,12(sp)
8003b95c:	8ca20000 	lw	v0,0(a1)
8003b960:	afa20008 	sw	v0,8(sp)
8003b964:	00220826 	xor	at,at,v0
8003b968:	2c220001 	sltiu	v0,at,1
8003b96c:	27bd0010 	addiu	sp,sp,16
    }
8003b970:	03e00008 	jr	ra
8003b974:	00000000 	nop

8003b978 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbe3fcf7a36f19a66E>:
    fn eq(&self, other: &Self) -> bool {
8003b978:	27bdfff0 	addiu	sp,sp,-16
8003b97c:	afa40000 	sw	a0,0(sp)
8003b980:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
8003b984:	8c810000 	lw	at,0(a0)
8003b988:	afa1000c 	sw	at,12(sp)
8003b98c:	8ca20000 	lw	v0,0(a1)
8003b990:	afa20008 	sw	v0,8(sp)
8003b994:	00220826 	xor	at,at,v0
8003b998:	2c220001 	sltiu	v0,at,1
8003b99c:	27bd0010 	addiu	sp,sp,16
    }
8003b9a0:	03e00008 	jr	ra
8003b9a4:	00000000 	nop

8003b9a8 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc12b98033e3b55e1E>:
    fn eq(&self, other: &Self) -> bool {
8003b9a8:	27bdfff0 	addiu	sp,sp,-16
8003b9ac:	afa40000 	sw	a0,0(sp)
8003b9b0:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
8003b9b4:	8c810000 	lw	at,0(a0)
8003b9b8:	afa1000c 	sw	at,12(sp)
8003b9bc:	8ca20000 	lw	v0,0(a1)
8003b9c0:	afa20008 	sw	v0,8(sp)
8003b9c4:	00220826 	xor	at,at,v0
8003b9c8:	2c220001 	sltiu	v0,at,1
8003b9cc:	27bd0010 	addiu	sp,sp,16
    }
8003b9d0:	03e00008 	jr	ra
8003b9d4:	00000000 	nop

8003b9d8 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hdbd8a472611df449E>:
    fn eq(&self, other: &Self) -> bool {
8003b9d8:	27bdfff0 	addiu	sp,sp,-16
8003b9dc:	afa40000 	sw	a0,0(sp)
8003b9e0:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
8003b9e4:	8c810000 	lw	at,0(a0)
8003b9e8:	afa1000c 	sw	at,12(sp)
8003b9ec:	8ca20000 	lw	v0,0(a1)
8003b9f0:	afa20008 	sw	v0,8(sp)
8003b9f4:	00220826 	xor	at,at,v0
8003b9f8:	2c220001 	sltiu	v0,at,1
8003b9fc:	27bd0010 	addiu	sp,sp,16
    }
8003ba00:	03e00008 	jr	ra
8003ba04:	00000000 	nop

8003ba08 <_ZN98_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h2afdbdd28cb8f7c2E>:
    fn from(reference: &mut T) -> Self {
8003ba08:	27bdfff0 	addiu	sp,sp,-16
8003ba0c:	afa40008 	sw	a0,8(sp)
8003ba10:	afa5000c 	sw	a1,12(sp)
        unsafe { NonNull { pointer: reference as *mut T } }
8003ba14:	afa40000 	sw	a0,0(sp)
8003ba18:	afa50004 	sw	a1,4(sp)
    }
8003ba1c:	8fa20000 	lw	v0,0(sp)
8003ba20:	8fa30004 	lw	v1,4(sp)
8003ba24:	27bd0010 	addiu	sp,sp,16
8003ba28:	03e00008 	jr	ra
8003ba2c:	00000000 	nop

8003ba30 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17h4f1d8ecd37555f58E>:
    fn from(reference: &T) -> Self {
8003ba30:	27bdfff0 	addiu	sp,sp,-16
8003ba34:	afa40008 	sw	a0,8(sp)
8003ba38:	afa5000c 	sw	a1,12(sp)
        unsafe { NonNull { pointer: reference as *const T } }
8003ba3c:	afa40000 	sw	a0,0(sp)
8003ba40:	afa50004 	sw	a1,4(sp)
    }
8003ba44:	8fa20000 	lw	v0,0(sp)
8003ba48:	8fa30004 	lw	v1,4(sp)
8003ba4c:	27bd0010 	addiu	sp,sp,16
8003ba50:	03e00008 	jr	ra
8003ba54:	00000000 	nop

8003ba58 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17h521f83d15ca4974aE>:
    fn from(reference: &T) -> Self {
8003ba58:	27bdfff0 	addiu	sp,sp,-16
8003ba5c:	afa40008 	sw	a0,8(sp)
8003ba60:	afa5000c 	sw	a1,12(sp)
        unsafe { NonNull { pointer: reference as *const T } }
8003ba64:	afa40000 	sw	a0,0(sp)
8003ba68:	afa50004 	sw	a1,4(sp)
    }
8003ba6c:	8fa20000 	lw	v0,0(sp)
8003ba70:	8fa30004 	lw	v1,4(sp)
8003ba74:	27bd0010 	addiu	sp,sp,16
8003ba78:	03e00008 	jr	ra
8003ba7c:	00000000 	nop

8003ba80 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17h70e047877930f053E>:
    fn from(reference: &T) -> Self {
8003ba80:	27bdfff0 	addiu	sp,sp,-16
8003ba84:	afa40008 	sw	a0,8(sp)
8003ba88:	afa5000c 	sw	a1,12(sp)
        unsafe { NonNull { pointer: reference as *const T } }
8003ba8c:	afa40000 	sw	a0,0(sp)
8003ba90:	afa50004 	sw	a1,4(sp)
    }
8003ba94:	8fa20000 	lw	v0,0(sp)
8003ba98:	8fa30004 	lw	v1,4(sp)
8003ba9c:	27bd0010 	addiu	sp,sp,16
8003baa0:	03e00008 	jr	ra
8003baa4:	00000000 	nop

8003baa8 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hb05997782b961f4dE>:
    fn from(reference: &T) -> Self {
8003baa8:	27bdfff0 	addiu	sp,sp,-16
8003baac:	afa40008 	sw	a0,8(sp)
8003bab0:	afa5000c 	sw	a1,12(sp)
        unsafe { NonNull { pointer: reference as *const T } }
8003bab4:	afa40000 	sw	a0,0(sp)
8003bab8:	afa50004 	sw	a1,4(sp)
    }
8003babc:	8fa20000 	lw	v0,0(sp)
8003bac0:	8fa30004 	lw	v1,4(sp)
8003bac4:	27bd0010 	addiu	sp,sp,16
8003bac8:	03e00008 	jr	ra
8003bacc:	00000000 	nop

8003bad0 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hbd53c9cbb1de8678E>:
    fn from(reference: &T) -> Self {
8003bad0:	27bdfff0 	addiu	sp,sp,-16
8003bad4:	afa40008 	sw	a0,8(sp)
8003bad8:	afa5000c 	sw	a1,12(sp)
        unsafe { NonNull { pointer: reference as *const T } }
8003badc:	afa40000 	sw	a0,0(sp)
8003bae0:	afa50004 	sw	a1,4(sp)
    }
8003bae4:	8fa20000 	lw	v0,0(sp)
8003bae8:	8fa30004 	lw	v1,4(sp)
8003baec:	27bd0010 	addiu	sp,sp,16
8003baf0:	03e00008 	jr	ra
8003baf4:	00000000 	nop

8003baf8 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hbf2cf18804db8335E>:
    fn from(reference: &T) -> Self {
8003baf8:	27bdfff0 	addiu	sp,sp,-16
8003bafc:	afa40008 	sw	a0,8(sp)
8003bb00:	afa5000c 	sw	a1,12(sp)
        unsafe { NonNull { pointer: reference as *const T } }
8003bb04:	afa40000 	sw	a0,0(sp)
8003bb08:	afa50004 	sw	a1,4(sp)
    }
8003bb0c:	8fa20000 	lw	v0,0(sp)
8003bb10:	8fa30004 	lw	v1,4(sp)
8003bb14:	27bd0010 	addiu	sp,sp,16
8003bb18:	03e00008 	jr	ra
8003bb1c:	00000000 	nop

8003bb20 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h7332b93c4f97f066E>:
    pub const fn is_null(self) -> bool {
8003bb20:	27bdffe0 	addiu	sp,sp,-32
8003bb24:	afbf001c 	sw	ra,28(sp)
8003bb28:	afa40018 	sw	a0,24(sp)
        const_eval_select((self as *const u8,), const_impl, runtime_impl)
8003bb2c:	afa40014 	sw	a0,20(sp)
8003bb30:	8fa40014 	lw	a0,20(sp)
8003bb34:	0c00eed3 	jal	8003bb4c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hc1edc93478f82fdcE>
8003bb38:	00000000 	nop
    }
8003bb3c:	8fbf001c 	lw	ra,28(sp)
8003bb40:	27bd0020 	addiu	sp,sp,32
8003bb44:	03e00008 	jr	ra
8003bb48:	00000000 	nop

8003bb4c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hc1edc93478f82fdcE>:
        fn runtime_impl(ptr: *const u8) -> bool {
8003bb4c:	27bdfff0 	addiu	sp,sp,-16
8003bb50:	afa40004 	sw	a0,4(sp)
8003bb54:	afa40008 	sw	a0,8(sp)
8003bb58:	afa4000c 	sw	a0,12(sp)
            ptr.addr() == 0
8003bb5c:	2c820001 	sltiu	v0,a0,1
8003bb60:	27bd0010 	addiu	sp,sp,16
        }
8003bb64:	03e00008 	jr	ra
8003bb68:	00000000 	nop

8003bb6c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E>:
    pub const unsafe fn sub_ptr(self, origin: *const T) -> usize
8003bb6c:	27bdffd0 	addiu	sp,sp,-48
8003bb70:	afbf002c 	sw	ra,44(sp)
8003bb74:	afa50014 	sw	a1,20(sp)
8003bb78:	afa40018 	sw	a0,24(sp)
8003bb7c:	afa4001c 	sw	a0,28(sp)
8003bb80:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
8003bb84:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8003bb88:	00000000 	nop
8003bb8c:	14400009 	bnez	v0,8003bbb4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E+0x48>
8003bb90:	00000000 	nop
8003bb94:	0800eee7 	j	8003bb9c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E+0x30>
8003bb98:	00000000 	nop
8003bb9c:	24010001 	li	at,1
        let pointee_size = mem::size_of::<T>();
8003bba0:	afa10024 	sw	at,36(sp)
        assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);
8003bba4:	14200010 	bnez	at,8003bbe8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E+0x7c>
8003bba8:	00000000 	nop
8003bbac:	0800eef3 	j	8003bbcc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E+0x60>
8003bbb0:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8003bbb4:	8fa50014 	lw	a1,20(sp)
8003bbb8:	8fa40018 	lw	a0,24(sp)
8003bbbc:	0c012250 	jal	80048940 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr18precondition_check17hdcc3c25680e09c41E>
8003bbc0:	00000000 	nop
8003bbc4:	0800eee7 	j	8003bb9c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E+0x30>
8003bbc8:	00000000 	nop
        assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);
8003bbcc:	3c01810a 	lui	at,0x810a
8003bbd0:	2424b222 	addiu	a0,at,-19934
8003bbd4:	3c01810a 	lui	at,0x810a
8003bbd8:	2426b2e0 	addiu	a2,at,-19744
8003bbdc:	24050049 	li	a1,73
8003bbe0:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
8003bbe4:	00000000 	nop
8003bbe8:	24010000 	li	at,0
8003bbec:	1400fff7 	bnez	zero,8003bbcc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E+0x60>
8003bbf0:	00000000 	nop
8003bbf4:	0800eeff 	j	8003bbfc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E+0x90>
8003bbf8:	00000000 	nop
        unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }
8003bbfc:	8fa10018 	lw	at,24(sp)
8003bc00:	8fa20014 	lw	v0,20(sp)
8003bc04:	00220823 	subu	at,at,v0
8003bc08:	afa10028 	sw	at,40(sp)
8003bc0c:	8fa20028 	lw	v0,40(sp)
    }
8003bc10:	8fbf002c 	lw	ra,44(sp)
8003bc14:	27bd0030 	addiu	sp,sp,48
8003bc18:	03e00008 	jr	ra
8003bc1c:	00000000 	nop

8003bc20 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr14runtime_ptr_ge17h2409c05d14b79ac4E>:
        const fn runtime_ptr_ge(this: *const (), origin: *const ()) -> bool {
8003bc20:	27bdffd8 	addiu	sp,sp,-40
8003bc24:	afbf0024 	sw	ra,36(sp)
8003bc28:	afa4001c 	sw	a0,28(sp)
8003bc2c:	afa50020 	sw	a1,32(sp)
            intrinsics::const_eval_select((this, origin), comptime, runtime)
8003bc30:	afa40014 	sw	a0,20(sp)
8003bc34:	afa50018 	sw	a1,24(sp)
8003bc38:	8fa40014 	lw	a0,20(sp)
8003bc3c:	8fa50018 	lw	a1,24(sp)
8003bc40:	0c00ef16 	jal	8003bc58 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr14runtime_ptr_ge7runtime17hf1688f9563789161E>
8003bc44:	00000000 	nop
        }
8003bc48:	8fbf0024 	lw	ra,36(sp)
8003bc4c:	27bd0028 	addiu	sp,sp,40
8003bc50:	03e00008 	jr	ra
8003bc54:	00000000 	nop

8003bc58 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr14runtime_ptr_ge7runtime17hf1688f9563789161E>:
            fn runtime(this: *const (), origin: *const ()) -> bool {
8003bc58:	27bdfff8 	addiu	sp,sp,-8
8003bc5c:	afa40000 	sw	a0,0(sp)
8003bc60:	afa50004 	sw	a1,4(sp)
                this >= origin
8003bc64:	0085082b 	sltu	at,a0,a1
8003bc68:	38220001 	xori	v0,at,0x1
8003bc6c:	27bd0008 	addiu	sp,sp,8
            }
8003bc70:	03e00008 	jr	ra
8003bc74:	00000000 	nop

8003bc78 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to17hb855d440ce971e64E>:
    /// [tracking issue]: https://github.com/rust-lang/rust/issues/104203
    #[must_use]
    #[inline]
    #[unstable(feature = "pointer_is_aligned_to", issue = "96284")]
    #[rustc_const_unstable(feature = "const_pointer_is_aligned", issue = "104203")]
    pub const fn is_aligned_to(self, align: usize) -> bool {
8003bc78:	27bdffa8 	addiu	sp,sp,-88
8003bc7c:	afbf0054 	sw	ra,84(sp)
8003bc80:	afa50014 	sw	a1,20(sp)
8003bc84:	afa40018 	sw	a0,24(sp)
8003bc88:	afa4003c 	sw	a0,60(sp)
8003bc8c:	afa50040 	sw	a1,64(sp)
8003bc90:	afa50048 	sw	a1,72(sp)
8003bc94:	afa5004c 	sw	a1,76(sp)
            intrinsics::ctpop(self as $ActualT) as u32
8003bc98:	00050842 	srl	at,a1,0x1
8003bc9c:	3c025555 	lui	v0,0x5555
8003bca0:	34425555 	ori	v0,v0,0x5555
8003bca4:	00220824 	and	at,at,v0
8003bca8:	00a11023 	subu	v0,a1,at
8003bcac:	3c013333 	lui	at,0x3333
8003bcb0:	34233333 	ori	v1,at,0x3333
8003bcb4:	00430824 	and	at,v0,v1
8003bcb8:	00021082 	srl	v0,v0,0x2
8003bcbc:	00431024 	and	v0,v0,v1
8003bcc0:	00220821 	addu	at,at,v0
8003bcc4:	00011102 	srl	v0,at,0x4
8003bcc8:	00220821 	addu	at,at,v0
8003bccc:	3c020f0f 	lui	v0,0xf0f
8003bcd0:	34420f0f 	ori	v0,v0,0xf0f
8003bcd4:	00220824 	and	at,at,v0
8003bcd8:	00011200 	sll	v0,at,0x8
8003bcdc:	00411821 	addu	v1,v0,at
8003bce0:	00011400 	sll	v0,at,0x10
8003bce4:	00431021 	addu	v0,v0,v1
8003bce8:	00010e00 	sll	at,at,0x18
8003bcec:	00220821 	addu	at,at,v0
8003bcf0:	00010e02 	srl	at,at,0x18
8003bcf4:	afa10050 	sw	at,80(sp)
8003bcf8:	8fa10050 	lw	at,80(sp)
8003bcfc:	24020001 	li	v0,1
        if !align.is_power_of_two() {
8003bd00:	1022000f 	beq	at,v0,8003bd40 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to17hb855d440ce971e64E+0xc8>
8003bd04:	00000000 	nop
8003bd08:	0800ef44 	j	8003bd10 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to17hb855d440ce971e64E+0x98>
8003bd0c:	00000000 	nop
            panic!("is_aligned_to: align is not a power-of-two");
8003bd10:	3c01810a 	lui	at,0x810a
8003bd14:	2425b31c 	addiu	a1,at,-19684
8003bd18:	27a4001c 	addiu	a0,sp,28
8003bd1c:	afa40010 	sw	a0,16(sp)
8003bd20:	24060001 	li	a2,1
8003bd24:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003bd28:	00000000 	nop
8003bd2c:	8fa40010 	lw	a0,16(sp)
8003bd30:	3c01810a 	lui	at,0x810a
8003bd34:	2425b324 	addiu	a1,at,-19676
8003bd38:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003bd3c:	00000000 	nop
8003bd40:	8fa10014 	lw	at,20(sp)
8003bd44:	8fa20018 	lw	v0,24(sp)
8003bd48:	afa20044 	sw	v0,68(sp)
        }

        // The cast to `()` is used to
        //   1. deal with fat pointers; and
        //   2. ensure that `align_offset` (in `const_impl`) doesn't actually try to compute an offset.
        const_eval_select((self.cast::<()>(), align), const_impl, runtime_impl)
8003bd4c:	afa20034 	sw	v0,52(sp)
8003bd50:	afa10038 	sw	at,56(sp)
8003bd54:	8fa40034 	lw	a0,52(sp)
8003bd58:	8fa50038 	lw	a1,56(sp)
8003bd5c:	0c00ef5d 	jal	8003bd74 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to12runtime_impl17h887c8e980b37e100E>
8003bd60:	00000000 	nop
    }
8003bd64:	8fbf0054 	lw	ra,84(sp)
8003bd68:	27bd0058 	addiu	sp,sp,88
8003bd6c:	03e00008 	jr	ra
8003bd70:	00000000 	nop

8003bd74 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to12runtime_impl17h887c8e980b37e100E>:
        fn runtime_impl(ptr: *const (), align: usize) -> bool {
8003bd74:	27bdffd8 	addiu	sp,sp,-40
8003bd78:	afa40018 	sw	a0,24(sp)
8003bd7c:	afa5001c 	sw	a1,28(sp)
8003bd80:	afa40020 	sw	a0,32(sp)
8003bd84:	afa40024 	sw	a0,36(sp)
8003bd88:	afa40010 	sw	a0,16(sp)
            ptr.addr() & (align - 1) == 0
8003bd8c:	24a1ffff 	addiu	at,a1,-1
8003bd90:	afa10014 	sw	at,20(sp)
8003bd94:	10a0000a 	beqz	a1,8003bdc0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to12runtime_impl17h887c8e980b37e100E+0x4c>
8003bd98:	00000000 	nop
8003bd9c:	0800ef69 	j	8003bda4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to12runtime_impl17h887c8e980b37e100E+0x30>
8003bda0:	00000000 	nop
8003bda4:	8fa10010 	lw	at,16(sp)
8003bda8:	8fa20014 	lw	v0,20(sp)
8003bdac:	00220824 	and	at,at,v0
8003bdb0:	2c220001 	sltiu	v0,at,1
8003bdb4:	27bd0028 	addiu	sp,sp,40
        }
8003bdb8:	03e00008 	jr	ra
8003bdbc:	00000000 	nop
            ptr.addr() & (align - 1) == 0
8003bdc0:	3c01810a 	lui	at,0x810a
8003bdc4:	2424b334 	addiu	a0,at,-19660
8003bdc8:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003bdcc:	00000000 	nop

8003bdd0 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17h14a33ded5ac369b8E>:
    /// assert_eq!(slice.len(), 3);
    /// ```
    #[inline]
    #[unstable(feature = "slice_ptr_len", issue = "71146")]
    #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
    pub const fn len(self) -> usize {
8003bdd0:	27bdffe0 	addiu	sp,sp,-32
8003bdd4:	afbf001c 	sw	ra,28(sp)
8003bdd8:	afa40014 	sw	a0,20(sp)
8003bddc:	afa50018 	sw	a1,24(sp)
        metadata(self)
8003bde0:	0c00ed6f 	jal	8003b5bc <_ZN4core3ptr8metadata8metadata17hce8b7d7f1ef8a93eE>
8003bde4:	00000000 	nop
    }
8003bde8:	8fbf001c 	lw	ra,28(sp)
8003bdec:	27bd0020 	addiu	sp,sp,32
8003bdf0:	03e00008 	jr	ra
8003bdf4:	00000000 	nop

8003bdf8 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17ha931775fbc53b958E>:
    pub const fn len(self) -> usize {
8003bdf8:	27bdffe0 	addiu	sp,sp,-32
8003bdfc:	afbf001c 	sw	ra,28(sp)
8003be00:	afa40014 	sw	a0,20(sp)
8003be04:	afa50018 	sw	a1,24(sp)
        metadata(self)
8003be08:	0c00ed78 	jal	8003b5e0 <_ZN4core3ptr8metadata8metadata17he1acf955a0a571f5E>
8003be0c:	00000000 	nop
    }
8003be10:	8fbf001c 	lw	ra,28(sp)
8003be14:	27bd0020 	addiu	sp,sp,32
8003be18:	03e00008 	jr	ra
8003be1c:	00000000 	nop

8003be20 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17haefcf4bd787bad28E>:
    pub const fn len(self) -> usize {
8003be20:	27bdffe0 	addiu	sp,sp,-32
8003be24:	afbf001c 	sw	ra,28(sp)
8003be28:	afa40014 	sw	a0,20(sp)
8003be2c:	afa50018 	sw	a1,24(sp)
        metadata(self)
8003be30:	0c00ed66 	jal	8003b598 <_ZN4core3ptr8metadata8metadata17hbb60b31b5db383cfE>
8003be34:	00000000 	nop
    }
8003be38:	8fbf001c 	lw	ra,28(sp)
8003be3c:	27bd0020 	addiu	sp,sp,32
8003be40:	03e00008 	jr	ra
8003be44:	00000000 	nop

8003be48 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hb4a60cfd4b05d1f1E>:
    pub const fn len(self) -> usize {
8003be48:	27bdffe0 	addiu	sp,sp,-32
8003be4c:	afbf001c 	sw	ra,28(sp)
8003be50:	afa40014 	sw	a0,20(sp)
8003be54:	afa50018 	sw	a1,24(sp)
        metadata(self)
8003be58:	0c00ed81 	jal	8003b604 <_ZN4core3ptr8metadata8metadata17he6569c9c74456ea7E>
8003be5c:	00000000 	nop
    }
8003be60:	8fbf001c 	lw	ra,28(sp)
8003be64:	27bd0020 	addiu	sp,sp,32
8003be68:	03e00008 	jr	ra
8003be6c:	00000000 	nop

8003be70 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hd4a723c2092474fbE>:
    pub const fn len(self) -> usize {
8003be70:	27bdffe0 	addiu	sp,sp,-32
8003be74:	afbf001c 	sw	ra,28(sp)
8003be78:	afa40014 	sw	a0,20(sp)
8003be7c:	afa50018 	sw	a1,24(sp)
        metadata(self)
8003be80:	0c00ed5d 	jal	8003b574 <_ZN4core3ptr8metadata8metadata17hb7eaf43eba912fd2E>
8003be84:	00000000 	nop
    }
8003be88:	8fbf001c 	lw	ra,28(sp)
8003be8c:	27bd0020 	addiu	sp,sp,32
8003be90:	03e00008 	jr	ra
8003be94:	00000000 	nop

8003be98 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h4ba62f43f4e4d3efE>:
    /// assert_eq!(slice.as_ptr(), ptr::null());
    /// ```
    #[inline]
    #[unstable(feature = "slice_ptr_get", issue = "74265")]
    #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
    pub const fn as_ptr(self) -> *const T {
8003be98:	27bdfff8 	addiu	sp,sp,-8
8003be9c:	00801025 	move	v0,a0
8003bea0:	afa20000 	sw	v0,0(sp)
8003bea4:	afa50004 	sw	a1,4(sp)
8003bea8:	27bd0008 	addiu	sp,sp,8
        self as *const T
    }
8003beac:	03e00008 	jr	ra
8003beb0:	00000000 	nop

8003beb4 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h6a7aae0b99a35e3eE>:
    pub const fn as_ptr(self) -> *const T {
8003beb4:	27bdfff8 	addiu	sp,sp,-8
8003beb8:	00801025 	move	v0,a0
8003bebc:	afa20000 	sw	v0,0(sp)
8003bec0:	afa50004 	sw	a1,4(sp)
8003bec4:	27bd0008 	addiu	sp,sp,8
    }
8003bec8:	03e00008 	jr	ra
8003becc:	00000000 	nop

8003bed0 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h72dfbec44e82c8bcE>:
    pub const fn as_ptr(self) -> *const T {
8003bed0:	27bdfff8 	addiu	sp,sp,-8
8003bed4:	00801025 	move	v0,a0
8003bed8:	afa20000 	sw	v0,0(sp)
8003bedc:	afa50004 	sw	a1,4(sp)
8003bee0:	27bd0008 	addiu	sp,sp,8
    }
8003bee4:	03e00008 	jr	ra
8003bee8:	00000000 	nop

8003beec <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h82c8eed925475b43E>:
    pub const fn as_ptr(self) -> *const T {
8003beec:	27bdfff8 	addiu	sp,sp,-8
8003bef0:	00801025 	move	v0,a0
8003bef4:	afa20000 	sw	v0,0(sp)
8003bef8:	afa50004 	sw	a1,4(sp)
8003befc:	27bd0008 	addiu	sp,sp,8
    }
8003bf00:	03e00008 	jr	ra
8003bf04:	00000000 	nop

8003bf08 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17hdacca62b30e596aaE>:
    pub const fn as_ptr(self) -> *const T {
8003bf08:	27bdfff8 	addiu	sp,sp,-8
8003bf0c:	00801025 	move	v0,a0
8003bf10:	afa20000 	sw	v0,0(sp)
8003bf14:	afa50004 	sw	a1,4(sp)
8003bf18:	27bd0008 	addiu	sp,sp,8
    }
8003bf1c:	03e00008 	jr	ra
8003bf20:	00000000 	nop

8003bf24 <_ZN4core3ptr20slice_from_raw_parts17h0ab563afab92ed6fE>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
8003bf24:	27bdffe0 	addiu	sp,sp,-32
8003bf28:	afbf001c 	sw	ra,28(sp)
8003bf2c:	afa40010 	sw	a0,16(sp)
8003bf30:	afa50014 	sw	a1,20(sp)
8003bf34:	afa40018 	sw	a0,24(sp)
    from_raw_parts(data.cast(), len)
8003bf38:	0c00eda6 	jal	8003b698 <_ZN4core3ptr8metadata14from_raw_parts17hb362f311e3d98555E>
8003bf3c:	00000000 	nop
}
8003bf40:	8fbf001c 	lw	ra,28(sp)
8003bf44:	27bd0020 	addiu	sp,sp,32
8003bf48:	03e00008 	jr	ra
8003bf4c:	00000000 	nop

8003bf50 <_ZN4core3ptr20slice_from_raw_parts17h0c1fd0adcab083c0E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
8003bf50:	27bdffe0 	addiu	sp,sp,-32
8003bf54:	afbf001c 	sw	ra,28(sp)
8003bf58:	afa40010 	sw	a0,16(sp)
8003bf5c:	afa50014 	sw	a1,20(sp)
8003bf60:	afa40018 	sw	a0,24(sp)
    from_raw_parts(data.cast(), len)
8003bf64:	0c00ed8a 	jal	8003b628 <_ZN4core3ptr8metadata14from_raw_parts17h59fb30269ae415d8E>
8003bf68:	00000000 	nop
}
8003bf6c:	8fbf001c 	lw	ra,28(sp)
8003bf70:	27bd0020 	addiu	sp,sp,32
8003bf74:	03e00008 	jr	ra
8003bf78:	00000000 	nop

8003bf7c <_ZN4core3ptr20slice_from_raw_parts17h0d7d46db288bcd34E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
8003bf7c:	27bdffe0 	addiu	sp,sp,-32
8003bf80:	afbf001c 	sw	ra,28(sp)
8003bf84:	afa40010 	sw	a0,16(sp)
8003bf88:	afa50014 	sw	a1,20(sp)
8003bf8c:	afa40018 	sw	a0,24(sp)
    from_raw_parts(data.cast(), len)
8003bf90:	0c00edb4 	jal	8003b6d0 <_ZN4core3ptr8metadata14from_raw_parts17hfcd6d7e30e5589bcE>
8003bf94:	00000000 	nop
}
8003bf98:	8fbf001c 	lw	ra,28(sp)
8003bf9c:	27bd0020 	addiu	sp,sp,32
8003bfa0:	03e00008 	jr	ra
8003bfa4:	00000000 	nop

8003bfa8 <_ZN4core3ptr20slice_from_raw_parts17hfda2f490e7fcec8bE>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
8003bfa8:	27bdffe0 	addiu	sp,sp,-32
8003bfac:	afbf001c 	sw	ra,28(sp)
8003bfb0:	afa40010 	sw	a0,16(sp)
8003bfb4:	afa50014 	sw	a1,20(sp)
8003bfb8:	afa40018 	sw	a0,24(sp)
    from_raw_parts(data.cast(), len)
8003bfbc:	0c00ed98 	jal	8003b660 <_ZN4core3ptr8metadata14from_raw_parts17h938c560b03e9d26fE>
8003bfc0:	00000000 	nop
}
8003bfc4:	8fbf001c 	lw	ra,28(sp)
8003bfc8:	27bd0020 	addiu	sp,sp,32
8003bfcc:	03e00008 	jr	ra
8003bfd0:	00000000 	nop

8003bfd4 <_ZN4core3ptr24slice_from_raw_parts_mut17h141f33a1684c8a60E>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
8003bfd4:	27bdffe0 	addiu	sp,sp,-32
8003bfd8:	afbf001c 	sw	ra,28(sp)
8003bfdc:	afa40010 	sw	a0,16(sp)
8003bfe0:	afa50014 	sw	a1,20(sp)
8003bfe4:	afa40018 	sw	a0,24(sp)
    from_raw_parts_mut(data.cast(), len)
8003bfe8:	0c00edc2 	jal	8003b708 <_ZN4core3ptr8metadata18from_raw_parts_mut17h632204f4052cbfb1E>
8003bfec:	00000000 	nop
}
8003bff0:	8fbf001c 	lw	ra,28(sp)
8003bff4:	27bd0020 	addiu	sp,sp,32
8003bff8:	03e00008 	jr	ra
8003bffc:	00000000 	nop

8003c000 <_ZN4core3ptr24slice_from_raw_parts_mut17h67dceb6de50bda88E>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
8003c000:	27bdffe0 	addiu	sp,sp,-32
8003c004:	afbf001c 	sw	ra,28(sp)
8003c008:	afa40010 	sw	a0,16(sp)
8003c00c:	afa50014 	sw	a1,20(sp)
8003c010:	afa40018 	sw	a0,24(sp)
    from_raw_parts_mut(data.cast(), len)
8003c014:	0c00edd0 	jal	8003b740 <_ZN4core3ptr8metadata18from_raw_parts_mut17hc2806463ced23b28E>
8003c018:	00000000 	nop
}
8003c01c:	8fbf001c 	lw	ra,28(sp)
8003c020:	27bd0020 	addiu	sp,sp,32
8003c024:	03e00008 	jr	ra
8003c028:	00000000 	nop

8003c02c <_ZN4core3ptr4read17h577826971f2136a4E>:
pub const unsafe fn read<T>(src: *const T) -> T {
8003c02c:	27bdffe0 	addiu	sp,sp,-32
8003c030:	afbf001c 	sw	ra,28(sp)
8003c034:	afa40014 	sw	a0,20(sp)
8003c038:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
8003c03c:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8003c040:	00000000 	nop
8003c044:	14400009 	bnez	v0,8003c06c <_ZN4core3ptr4read17h577826971f2136a4E+0x40>
8003c048:	00000000 	nop
8003c04c:	0800f015 	j	8003c054 <_ZN4core3ptr4read17h577826971f2136a4E+0x28>
8003c050:	00000000 	nop
}
8003c054:	8fa10014 	lw	at,20(sp)
8003c058:	90220000 	lbu	v0,0(at)
8003c05c:	8fbf001c 	lw	ra,28(sp)
8003c060:	27bd0020 	addiu	sp,sp,32
8003c064:	03e00008 	jr	ra
8003c068:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8003c06c:	8fa40014 	lw	a0,20(sp)
8003c070:	24050001 	li	a1,1
8003c074:	0c012263 	jal	8004898c <_ZN4core3ptr4read18precondition_check17h9e0d16367bc3bfc8E>
8003c078:	00000000 	nop
8003c07c:	0800f015 	j	8003c054 <_ZN4core3ptr4read17h577826971f2136a4E+0x28>
8003c080:	00000000 	nop

8003c084 <_ZN4core3ptr4read17h62ae591ccb22f4e5E>:
pub const unsafe fn read<T>(src: *const T) -> T {
8003c084:	27bdffe0 	addiu	sp,sp,-32
8003c088:	afbf001c 	sw	ra,28(sp)
8003c08c:	afa40014 	sw	a0,20(sp)
8003c090:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
8003c094:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8003c098:	00000000 	nop
8003c09c:	14400009 	bnez	v0,8003c0c4 <_ZN4core3ptr4read17h62ae591ccb22f4e5E+0x40>
8003c0a0:	00000000 	nop
8003c0a4:	0800f02b 	j	8003c0ac <_ZN4core3ptr4read17h62ae591ccb22f4e5E+0x28>
8003c0a8:	00000000 	nop
}
8003c0ac:	8fa10014 	lw	at,20(sp)
8003c0b0:	90220000 	lbu	v0,0(at)
8003c0b4:	8fbf001c 	lw	ra,28(sp)
8003c0b8:	27bd0020 	addiu	sp,sp,32
8003c0bc:	03e00008 	jr	ra
8003c0c0:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8003c0c4:	8fa40014 	lw	a0,20(sp)
8003c0c8:	24050001 	li	a1,1
8003c0cc:	0c012263 	jal	8004898c <_ZN4core3ptr4read18precondition_check17h9e0d16367bc3bfc8E>
8003c0d0:	00000000 	nop
8003c0d4:	0800f02b 	j	8003c0ac <_ZN4core3ptr4read17h62ae591ccb22f4e5E+0x28>
8003c0d8:	00000000 	nop

8003c0dc <_ZN4core3ptr4read17h642b0fbf995d98adE>:
pub const unsafe fn read<T>(src: *const T) -> T {
8003c0dc:	27bdffe0 	addiu	sp,sp,-32
8003c0e0:	afbf001c 	sw	ra,28(sp)
8003c0e4:	afa40014 	sw	a0,20(sp)
8003c0e8:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
8003c0ec:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8003c0f0:	00000000 	nop
8003c0f4:	14400009 	bnez	v0,8003c11c <_ZN4core3ptr4read17h642b0fbf995d98adE+0x40>
8003c0f8:	00000000 	nop
8003c0fc:	0800f041 	j	8003c104 <_ZN4core3ptr4read17h642b0fbf995d98adE+0x28>
8003c100:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
8003c104:	8fa10014 	lw	at,20(sp)
8003c108:	8c220000 	lw	v0,0(at)
}
8003c10c:	8fbf001c 	lw	ra,28(sp)
8003c110:	27bd0020 	addiu	sp,sp,32
8003c114:	03e00008 	jr	ra
8003c118:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8003c11c:	8fa40014 	lw	a0,20(sp)
8003c120:	24050004 	li	a1,4
8003c124:	0c012263 	jal	8004898c <_ZN4core3ptr4read18precondition_check17h9e0d16367bc3bfc8E>
8003c128:	00000000 	nop
8003c12c:	0800f041 	j	8003c104 <_ZN4core3ptr4read17h642b0fbf995d98adE+0x28>
8003c130:	00000000 	nop

8003c134 <_ZN4core3ptr5write17h4459b32568548eceE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
8003c134:	27bdffd8 	addiu	sp,sp,-40
8003c138:	afbf0024 	sw	ra,36(sp)
8003c13c:	afa40014 	sw	a0,20(sp)
8003c140:	00a00825 	move	at,a1
8003c144:	afa10018 	sw	at,24(sp)
8003c148:	afa4001c 	sw	a0,28(sp)
8003c14c:	a3a50023 	sb	a1,35(sp)
        ub_checks::assert_unsafe_precondition!(
8003c150:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8003c154:	00000000 	nop
8003c158:	1440000a 	bnez	v0,8003c184 <_ZN4core3ptr5write17h4459b32568548eceE+0x50>
8003c15c:	00000000 	nop
8003c160:	0800f05a 	j	8003c168 <_ZN4core3ptr5write17h4459b32568548eceE+0x34>
8003c164:	00000000 	nop
        intrinsics::write_via_move(dst, src)
8003c168:	8fa10018 	lw	at,24(sp)
8003c16c:	8fa20014 	lw	v0,20(sp)
8003c170:	a0410000 	sb	at,0(v0)
}
8003c174:	8fbf0024 	lw	ra,36(sp)
8003c178:	27bd0028 	addiu	sp,sp,40
8003c17c:	03e00008 	jr	ra
8003c180:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8003c184:	8fa40014 	lw	a0,20(sp)
8003c188:	24050001 	li	a1,1
8003c18c:	0c012276 	jal	800489d8 <_ZN4core3ptr5write18precondition_check17hf1cf4e5c013cb295E>
8003c190:	00000000 	nop
8003c194:	0800f05a 	j	8003c168 <_ZN4core3ptr5write17h4459b32568548eceE+0x34>
8003c198:	00000000 	nop

8003c19c <_ZN4core3ptr5write17h6c5fae36b352f0feE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
8003c19c:	27bdffd8 	addiu	sp,sp,-40
8003c1a0:	afbf0024 	sw	ra,36(sp)
8003c1a4:	afa50014 	sw	a1,20(sp)
8003c1a8:	afa40018 	sw	a0,24(sp)
8003c1ac:	afa4001c 	sw	a0,28(sp)
8003c1b0:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
8003c1b4:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8003c1b8:	00000000 	nop
8003c1bc:	1440000a 	bnez	v0,8003c1e8 <_ZN4core3ptr5write17h6c5fae36b352f0feE+0x4c>
8003c1c0:	00000000 	nop
8003c1c4:	0800f073 	j	8003c1cc <_ZN4core3ptr5write17h6c5fae36b352f0feE+0x30>
8003c1c8:	00000000 	nop
        intrinsics::write_via_move(dst, src)
8003c1cc:	8fa10014 	lw	at,20(sp)
8003c1d0:	8fa20018 	lw	v0,24(sp)
8003c1d4:	ac410000 	sw	at,0(v0)
}
8003c1d8:	8fbf0024 	lw	ra,36(sp)
8003c1dc:	27bd0028 	addiu	sp,sp,40
8003c1e0:	03e00008 	jr	ra
8003c1e4:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8003c1e8:	8fa40018 	lw	a0,24(sp)
8003c1ec:	24050004 	li	a1,4
8003c1f0:	0c012276 	jal	800489d8 <_ZN4core3ptr5write18precondition_check17hf1cf4e5c013cb295E>
8003c1f4:	00000000 	nop
8003c1f8:	0800f073 	j	8003c1cc <_ZN4core3ptr5write17h6c5fae36b352f0feE+0x30>
8003c1fc:	00000000 	nop

8003c200 <_ZN4core3ptr13read_volatile17hd45decbd46c08055E>:
pub unsafe fn read_volatile<T>(src: *const T) -> T {
8003c200:	27bdffe0 	addiu	sp,sp,-32
8003c204:	afbf001c 	sw	ra,28(sp)
8003c208:	afa40010 	sw	a0,16(sp)
8003c20c:	afa40014 	sw	a0,20(sp)
        ub_checks::assert_unsafe_precondition!(
8003c210:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8003c214:	00000000 	nop
8003c218:	1440000b 	bnez	v0,8003c248 <_ZN4core3ptr13read_volatile17hd45decbd46c08055E+0x48>
8003c21c:	00000000 	nop
8003c220:	0800f08a 	j	8003c228 <_ZN4core3ptr13read_volatile17hd45decbd46c08055E+0x28>
8003c224:	00000000 	nop
        intrinsics::volatile_load(src)
8003c228:	8fa10010 	lw	at,16(sp)
8003c22c:	8c210000 	lw	at,0(at)
8003c230:	afa10018 	sw	at,24(sp)
8003c234:	8fa20018 	lw	v0,24(sp)
}
8003c238:	8fbf001c 	lw	ra,28(sp)
8003c23c:	27bd0020 	addiu	sp,sp,32
8003c240:	03e00008 	jr	ra
8003c244:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8003c248:	8fa40010 	lw	a0,16(sp)
8003c24c:	24050004 	li	a1,4
8003c250:	0c012289 	jal	80048a24 <_ZN4core3ptr13read_volatile18precondition_check17hbf3699e138ebb66dE>
8003c254:	00000000 	nop
8003c258:	0800f08a 	j	8003c228 <_ZN4core3ptr13read_volatile17hd45decbd46c08055E+0x28>
8003c25c:	00000000 	nop

8003c260 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E>:
/// power-of-two, it will probably be more prudent to just change to a naive implementation rather
/// than trying to adapt this to accommodate that change.
///
/// Any questions go to @nagisa.
#[lang = "align_offset"]
pub(crate) const unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {
8003c260:	27bdff78 	addiu	sp,sp,-136
8003c264:	afbf0084 	sw	ra,132(sp)
8003c268:	afa50024 	sw	a1,36(sp)
8003c26c:	afa40038 	sw	a0,56(sp)
8003c270:	afa5003c 	sw	a1,60(sp)
8003c274:	24010001 	li	at,1
            mod_gate = new_gate;
        }
        inverse & m_minus_one
    }

    let stride = mem::size_of::<T>();
8003c278:	afa10040 	sw	at,64(sp)

    // SAFETY: This is just an inlined `p.addr()` (which is not
    // a `const fn` so we cannot call it).
    // During const eval, we hook this function to ensure that the pointer never
    // has provenance, making this sound.
    let addr: usize = unsafe { mem::transmute(p) };
8003c27c:	00801025 	move	v0,a0
8003c280:	afa20028 	sw	v0,40(sp)
8003c284:	afa40044 	sw	a0,68(sp)

    // SAFETY: `a` is a power-of-two, therefore non-zero.
    let a_minus_one = unsafe { unchecked_sub(a, 1) };
8003c288:	24a2ffff 	addiu	v0,a1,-1
8003c28c:	afa2002c 	sw	v0,44(sp)
8003c290:	afa20048 	sw	v0,72(sp)

    if stride == 0 {
8003c294:	1420000b 	bnez	at,8003c2c4 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x64>
8003c298:	00000000 	nop
8003c29c:	0800f0a9 	j	8003c2a4 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x44>
8003c2a0:	00000000 	nop
        // SPECIAL_CASE: handle 0-sized types. No matter how many times we step, the address will
        // stay the same, so no offset will be able to align the pointer unless it is already
        // aligned. This branch _will_ be optimized out as `stride` is known at compile-time.
        let p_mod_a = addr & a_minus_one;
8003c2a4:	8fa10028 	lw	at,40(sp)
8003c2a8:	8fa2002c 	lw	v0,44(sp)
8003c2ac:	00220824 	and	at,at,v0
8003c2b0:	afa1004c 	sw	at,76(sp)
        return if p_mod_a == 0 { 0 } else { usize::MAX };
8003c2b4:	10200009 	beqz	at,8003c2dc <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x7c>
8003c2b8:	00000000 	nop
8003c2bc:	0800f0ba 	j	8003c2e8 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x88>
8003c2c0:	00000000 	nop
    }

    // SAFETY: `stride == 0` case has been handled by the special case above.
    let a_mod_stride = unsafe { unchecked_rem(a, stride) };
8003c2c4:	afa00050 	sw	zero,80(sp)
8003c2c8:	24010001 	li	at,1
    if a_mod_stride == 0 {
8003c2cc:	1420000f 	bnez	at,8003c30c <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0xac>
8003c2d0:	00000000 	nop
8003c2d4:	0800f0d4 	j	8003c350 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0xf0>
8003c2d8:	00000000 	nop
        return if p_mod_a == 0 { 0 } else { usize::MAX };
8003c2dc:	afa00030 	sw	zero,48(sp)
8003c2e0:	0800f0be 	j	8003c2f8 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x98>
8003c2e4:	00000000 	nop
8003c2e8:	2401ffff 	li	at,-1
8003c2ec:	afa10030 	sw	at,48(sp)
8003c2f0:	0800f0be 	j	8003c2f8 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x98>
8003c2f4:	00000000 	nop
        return wrapping_mul(minusp2, unsafe { mod_inv(s2, a2) }) & a2minus1;
    }

    // Cannot be aligned at all.
    usize::MAX
}
8003c2f8:	8fa20030 	lw	v0,48(sp)
8003c2fc:	8fbf0084 	lw	ra,132(sp)
8003c300:	27bd0088 	addiu	sp,sp,136
8003c304:	03e00008 	jr	ra
8003c308:	00000000 	nop
        let aligned_address = wrapping_add(addr, a_minus_one) & wrapping_sub(0, a);
8003c30c:	8fa20028 	lw	v0,40(sp)
8003c310:	8fa30024 	lw	v1,36(sp)
8003c314:	8fa1002c 	lw	at,44(sp)
8003c318:	00410821 	addu	at,v0,at
8003c31c:	24040000 	li	a0,0
8003c320:	00031823 	negu	v1,v1
8003c324:	00230824 	and	at,at,v1
8003c328:	afa10054 	sw	at,84(sp)
        let byte_offset = wrapping_sub(aligned_address, addr);
8003c32c:	00220823 	subu	at,at,v0
8003c330:	afa10020 	sw	at,32(sp)
8003c334:	afa10058 	sw	at,88(sp)
        let addr_mod_stride = unsafe { unchecked_rem(addr, stride) };
8003c338:	afa0005c 	sw	zero,92(sp)
8003c33c:	24010001 	li	at,1
        return if addr_mod_stride == 0 {
8003c340:	14200017 	bnez	at,8003c3a0 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x140>
8003c344:	00000000 	nop
8003c348:	0800f0ec 	j	8003c3b0 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x150>
8003c34c:	00000000 	nop
        let x = cttz_nonzero(stride);
8003c350:	8fa20024 	lw	v0,36(sp)
8003c354:	afa00060 	sw	zero,96(sp)
8003c358:	8fa10060 	lw	at,96(sp)
8003c35c:	afa10018 	sw	at,24(sp)
8003c360:	afa10064 	sw	at,100(sp)
        let y = cttz_nonzero(a);
8003c364:	2443ffff 	addiu	v1,v0,-1
8003c368:	00401027 	nor	v0,v0,zero
8003c36c:	00431024 	and	v0,v0,v1
8003c370:	70431820 	clz	v1,v0
8003c374:	24020020 	li	v0,32
8003c378:	00431023 	subu	v0,v0,v1
8003c37c:	afa20068 	sw	v0,104(sp)
8003c380:	8fa20068 	lw	v0,104(sp)
8003c384:	afa2001c 	sw	v0,28(sp)
8003c388:	afa2006c 	sw	v0,108(sp)
        if x < y { x } else { y }
8003c38c:	0022082b 	sltu	at,at,v0
8003c390:	1420000f 	bnez	at,8003c3d0 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x170>
8003c394:	00000000 	nop
8003c398:	0800f0f0 	j	8003c3c0 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x160>
8003c39c:	00000000 	nop
            unsafe { exact_div(byte_offset, stride) }
8003c3a0:	8fa10020 	lw	at,32(sp)
8003c3a4:	afa10030 	sw	at,48(sp)
8003c3a8:	0800f0be 	j	8003c2f8 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x98>
8003c3ac:	00000000 	nop
8003c3b0:	2401ffff 	li	at,-1
            usize::MAX
8003c3b4:	afa10030 	sw	at,48(sp)
        return if addr_mod_stride == 0 {
8003c3b8:	0800f0be 	j	8003c2f8 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x98>
8003c3bc:	00000000 	nop
        if x < y { x } else { y }
8003c3c0:	8fa1001c 	lw	at,28(sp)
8003c3c4:	afa10034 	sw	at,52(sp)
8003c3c8:	0800f0f8 	j	8003c3e0 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x180>
8003c3cc:	00000000 	nop
8003c3d0:	8fa10018 	lw	at,24(sp)
8003c3d4:	afa10034 	sw	at,52(sp)
8003c3d8:	0800f0f8 	j	8003c3e0 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x180>
8003c3dc:	00000000 	nop
    let gcd = unsafe { unchecked_shl(1usize, gcdpow) };
8003c3e0:	8fa10028 	lw	at,40(sp)
8003c3e4:	8fa30034 	lw	v1,52(sp)
8003c3e8:	24020001 	li	v0,1
8003c3ec:	00621004 	sllv	v0,v0,v1
8003c3f0:	afa20070 	sw	v0,112(sp)
    if addr & unsafe { unchecked_sub(gcd, 1) } == 0 {
8003c3f4:	2442ffff 	addiu	v0,v0,-1
8003c3f8:	00220824 	and	at,at,v0
8003c3fc:	14200020 	bnez	at,8003c480 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x220>
8003c400:	00000000 	nop
8003c404:	0800f103 	j	8003c40c <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x1ac>
8003c408:	00000000 	nop
        let a2 = unsafe { unchecked_shr(a, gcdpow) };
8003c40c:	8fa10028 	lw	at,40(sp)
8003c410:	8fa2002c 	lw	v0,44(sp)
8003c414:	8fa30024 	lw	v1,36(sp)
8003c418:	8fa40034 	lw	a0,52(sp)
8003c41c:	00832806 	srlv	a1,v1,a0
8003c420:	afa50074 	sw	a1,116(sp)
        let a2minus1 = unsafe { unchecked_sub(a2, 1) };
8003c424:	24a3ffff 	addiu	v1,a1,-1
8003c428:	afa30014 	sw	v1,20(sp)
8003c42c:	afa30078 	sw	v1,120(sp)
        let s2 = unsafe { unchecked_shr(stride & a_minus_one, gcdpow) };
8003c430:	30430001 	andi	v1,v0,0x1
8003c434:	8fa40034 	lw	a0,52(sp)
8003c438:	00832006 	srlv	a0,v1,a0
8003c43c:	afa4007c 	sw	a0,124(sp)
        let minusp2 = unsafe { unchecked_sub(a2, unchecked_shr(addr & a_minus_one, gcdpow)) };
8003c440:	00220824 	and	at,at,v0
8003c444:	8fa20034 	lw	v0,52(sp)
8003c448:	00410806 	srlv	at,at,v0
8003c44c:	00a10823 	subu	at,a1,at
8003c450:	afa10010 	sw	at,16(sp)
8003c454:	afa10080 	sw	at,128(sp)
        return wrapping_mul(minusp2, unsafe { mod_inv(s2, a2) }) & a2minus1;
8003c458:	0c00f124 	jal	8003c490 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E>
8003c45c:	00000000 	nop
8003c460:	8fa10010 	lw	at,16(sp)
8003c464:	00401825 	move	v1,v0
8003c468:	8fa20014 	lw	v0,20(sp)
8003c46c:	70230802 	mul	at,at,v1
8003c470:	00220824 	and	at,at,v0
8003c474:	afa10030 	sw	at,48(sp)
//! # The Rust Core Library
8003c478:	0800f0be 	j	8003c2f8 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x98>
8003c47c:	00000000 	nop
8003c480:	2401ffff 	li	at,-1
    usize::MAX
8003c484:	afa10030 	sw	at,48(sp)
}
8003c488:	0800f0be 	j	8003c2f8 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x98>
8003c48c:	00000000 	nop

8003c490 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E>:
    const unsafe fn mod_inv(x: usize, m: usize) -> usize {
8003c490:	27bdffb8 	addiu	sp,sp,-72
8003c494:	afa50014 	sw	a1,20(sp)
8003c498:	afa40018 	sw	a0,24(sp)
8003c49c:	afa40034 	sw	a0,52(sp)
8003c4a0:	afa50038 	sw	a1,56(sp)
        let m_minus_one = unsafe { unchecked_sub(m, 1) };
8003c4a4:	24a1ffff 	addiu	at,a1,-1
8003c4a8:	afa1001c 	sw	at,28(sp)
8003c4ac:	afa1003c 	sw	at,60(sp)
        let mut inverse = INV_TABLE_MOD_16[(x & (INV_TABLE_MOD - 1)) >> 1] as usize;
8003c4b0:	3c02810a 	lui	v0,0x810a
8003c4b4:	2443b344 	addiu	v1,v0,-19644
8003c4b8:	88610007 	lwl	at,7(v1)
8003c4bc:	98610004 	lwr	at,4(v1)
8003c4c0:	afa1002c 	sw	at,44(sp)
8003c4c4:	88610003 	lwl	at,3(v1)
8003c4c8:	9841b344 	lwr	at,-19644(v0)
8003c4cc:	afa10028 	sw	at,40(sp)
8003c4d0:	7c811040 	ext	at,a0,0x1,0x3
8003c4d4:	afa10020 	sw	at,32(sp)
8003c4d8:	2c210008 	sltiu	at,at,8
8003c4dc:	1020000c 	beqz	at,8003c510 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0x80>
8003c4e0:	00000000 	nop
8003c4e4:	0800f13b 	j	8003c4ec <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0x5c>
8003c4e8:	00000000 	nop
8003c4ec:	8fa20020 	lw	v0,32(sp)
8003c4f0:	27a10028 	addiu	at,sp,40
8003c4f4:	00220821 	addu	at,at,v0
8003c4f8:	90210000 	lbu	at,0(at)
8003c4fc:	afa10024 	sw	at,36(sp)
8003c500:	24010010 	li	at,16
        let mut mod_gate = INV_TABLE_MOD;
8003c504:	afa10030 	sw	at,48(sp)
        loop {
8003c508:	0800f14a 	j	8003c528 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0x98>
8003c50c:	00000000 	nop
        let mut inverse = INV_TABLE_MOD_16[(x & (INV_TABLE_MOD - 1)) >> 1] as usize;
8003c510:	8fa40020 	lw	a0,32(sp)
8003c514:	3c01810a 	lui	at,0x810a
8003c518:	2426b3d4 	addiu	a2,at,-19500
8003c51c:	24050008 	li	a1,8
8003c520:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8003c524:	00000000 	nop
            if mod_gate >= m {
8003c528:	8fa20014 	lw	v0,20(sp)
8003c52c:	8fa10030 	lw	at,48(sp)
8003c530:	0022082b 	sltu	at,at,v0
8003c534:	10200016 	beqz	at,8003c590 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0x100>
8003c538:	00000000 	nop
8003c53c:	0800f151 	j	8003c544 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0xb4>
8003c540:	00000000 	nop
            inverse = wrapping_mul(inverse, wrapping_sub(2usize, wrapping_mul(x, inverse)));
8003c544:	8fa20018 	lw	v0,24(sp)
8003c548:	8fa10024 	lw	at,36(sp)
8003c54c:	70411802 	mul	v1,v0,at
8003c550:	24020002 	li	v0,2
8003c554:	00431023 	subu	v0,v0,v1
8003c558:	70220802 	mul	at,at,v0
8003c55c:	afa10024 	sw	at,36(sp)
            let (new_gate, overflow) = mul_with_overflow(mod_gate, mod_gate);
8003c560:	8fa30030 	lw	v1,48(sp)
8003c564:	00630019 	multu	v1,v1
8003c568:	00000810 	mfhi	at
8003c56c:	0001102b 	sltu	v0,zero,at
8003c570:	70631802 	mul	v1,v1,v1
8003c574:	afa30010 	sw	v1,16(sp)
8003c578:	afa30040 	sw	v1,64(sp)
8003c57c:	a3a20047 	sb	v0,71(sp)
            if overflow {
8003c580:	10200009 	beqz	at,8003c5a8 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0x118>
8003c584:	00000000 	nop
8003c588:	0800f164 	j	8003c590 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0x100>
8003c58c:	00000000 	nop
        inverse & m_minus_one
8003c590:	8fa2001c 	lw	v0,28(sp)
8003c594:	8fa10024 	lw	at,36(sp)
8003c598:	00221024 	and	v0,at,v0
8003c59c:	27bd0048 	addiu	sp,sp,72
    }
8003c5a0:	03e00008 	jr	ra
8003c5a4:	00000000 	nop
            mod_gate = new_gate;
8003c5a8:	8fa10010 	lw	at,16(sp)
8003c5ac:	afa10030 	sw	at,48(sp)
        loop {
8003c5b0:	0800f14a 	j	8003c528 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0x98>
8003c5b4:	00000000 	nop

8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>:
pub(crate) const fn check_language_ub() -> bool {
8003c5b8:	27bdffe8 	addiu	sp,sp,-24
8003c5bc:	afbf0014 	sw	ra,20(sp)
    intrinsics::ub_checks() && const_eval_select((), comptime, runtime)
8003c5c0:	0800f172 	j	8003c5c8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE+0x10>
8003c5c4:	00000000 	nop
8003c5c8:	0c00f17d 	jal	8003c5f4 <_ZN4core9ub_checks17check_language_ub7runtime17h5a1d8ecdd626287fE>
8003c5cc:	00000000 	nop
8003c5d0:	a3a20013 	sb	v0,19(sp)
8003c5d4:	0800f177 	j	8003c5dc <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE+0x24>
8003c5d8:	00000000 	nop
}
8003c5dc:	93a10013 	lbu	at,19(sp)
8003c5e0:	30220001 	andi	v0,at,0x1
8003c5e4:	8fbf0014 	lw	ra,20(sp)
8003c5e8:	27bd0018 	addiu	sp,sp,24
8003c5ec:	03e00008 	jr	ra
8003c5f0:	00000000 	nop

8003c5f4 <_ZN4core9ub_checks17check_language_ub7runtime17h5a1d8ecdd626287fE>:
    fn runtime() -> bool {
8003c5f4:	24020001 	li	v0,1
    }
8003c5f8:	03e00008 	jr	ra
8003c5fc:	00000000 	nop

8003c600 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE>:
pub(crate) const fn is_aligned_and_not_null(ptr: *const (), align: usize) -> bool {
8003c600:	27bdffd8 	addiu	sp,sp,-40
8003c604:	afbf0024 	sw	ra,36(sp)
8003c608:	afa50010 	sw	a1,16(sp)
8003c60c:	afa40014 	sw	a0,20(sp)
8003c610:	afa4001c 	sw	a0,28(sp)
8003c614:	afa50020 	sw	a1,32(sp)
    !ptr.is_null() && ptr.is_aligned_to(align)
8003c618:	0c00eec8 	jal	8003bb20 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h7332b93c4f97f066E>
8003c61c:	00000000 	nop
8003c620:	1440000a 	bnez	v0,8003c64c <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE+0x4c>
8003c624:	00000000 	nop
8003c628:	0800f18c 	j	8003c630 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE+0x30>
8003c62c:	00000000 	nop
8003c630:	8fa50010 	lw	a1,16(sp)
8003c634:	8fa40014 	lw	a0,20(sp)
8003c638:	0c00ef1e 	jal	8003bc78 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to17hb855d440ce971e64E>
8003c63c:	00000000 	nop
8003c640:	a3a2001b 	sb	v0,27(sp)
8003c644:	0800f197 	j	8003c65c <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE+0x5c>
8003c648:	00000000 	nop
8003c64c:	24010000 	li	at,0
8003c650:	a3a0001b 	sb	zero,27(sp)
8003c654:	0800f197 	j	8003c65c <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE+0x5c>
8003c658:	00000000 	nop
}
8003c65c:	93a1001b 	lbu	at,27(sp)
8003c660:	30220001 	andi	v0,at,0x1
8003c664:	8fbf0024 	lw	ra,36(sp)
8003c668:	27bd0028 	addiu	sp,sp,40
8003c66c:	03e00008 	jr	ra
8003c670:	00000000 	nop

8003c674 <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E>:
pub(crate) const fn is_valid_allocation_size(size: usize, len: usize) -> bool {
8003c674:	27bdffd8 	addiu	sp,sp,-40
8003c678:	afa50014 	sw	a1,20(sp)
8003c67c:	afa40018 	sw	a0,24(sp)
8003c680:	afa40020 	sw	a0,32(sp)
8003c684:	afa50024 	sw	a1,36(sp)
    let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
8003c688:	14800007 	bnez	a0,8003c6a8 <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E+0x34>
8003c68c:	00000000 	nop
8003c690:	0800f1a6 	j	8003c698 <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E+0x24>
8003c694:	00000000 	nop
8003c698:	2401ffff 	li	at,-1
8003c69c:	afa1001c 	sw	at,28(sp)
8003c6a0:	0800f1af 	j	8003c6bc <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E+0x48>
8003c6a4:	00000000 	nop
8003c6a8:	8fa10018 	lw	at,24(sp)
8003c6ac:	10200013 	beqz	at,8003c6fc <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E+0x88>
8003c6b0:	00000000 	nop
8003c6b4:	0800f1b6 	j	8003c6d8 <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E+0x64>
8003c6b8:	00000000 	nop
    len <= max_len
8003c6bc:	8fa20014 	lw	v0,20(sp)
8003c6c0:	8fa1001c 	lw	at,28(sp)
8003c6c4:	0022082b 	sltu	at,at,v0
8003c6c8:	38220001 	xori	v0,at,0x1
8003c6cc:	27bd0028 	addiu	sp,sp,40
}
8003c6d0:	03e00008 	jr	ra
8003c6d4:	00000000 	nop
8003c6d8:	8fa10018 	lw	at,24(sp)
8003c6dc:	3c027fff 	lui	v0,0x7fff
8003c6e0:	3442ffff 	ori	v0,v0,0xffff
    let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
8003c6e4:	0041001b 	divu	zero,v0,at
8003c6e8:	002001f4 	teq	at,zero,0x7
8003c6ec:	00000812 	mflo	at
8003c6f0:	afa1001c 	sw	at,28(sp)
8003c6f4:	0800f1af 	j	8003c6bc <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E+0x48>
8003c6f8:	00000000 	nop
8003c6fc:	3c01810a 	lui	at,0x810a
8003c700:	2424b454 	addiu	a0,at,-19372
8003c704:	0c012455 	jal	80049154 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
8003c708:	00000000 	nop

8003c70c <_ZN4core9ub_checks17is_nonoverlapping17h180be23ec26219b9E>:
pub(crate) const fn is_nonoverlapping(
8003c70c:	27bdffc8 	addiu	sp,sp,-56
8003c710:	afbf0034 	sw	ra,52(sp)
8003c714:	afa40024 	sw	a0,36(sp)
8003c718:	afa50028 	sw	a1,40(sp)
8003c71c:	afa6002c 	sw	a2,44(sp)
8003c720:	afa70030 	sw	a3,48(sp)
    const_eval_select((src, dst, size, count), comptime, runtime)
8003c724:	afa40014 	sw	a0,20(sp)
8003c728:	afa50018 	sw	a1,24(sp)
8003c72c:	afa6001c 	sw	a2,28(sp)
8003c730:	afa70020 	sw	a3,32(sp)
8003c734:	8fa40014 	lw	a0,20(sp)
8003c738:	8fa50018 	lw	a1,24(sp)
8003c73c:	8fa6001c 	lw	a2,28(sp)
8003c740:	8fa70020 	lw	a3,32(sp)
8003c744:	0c00f1d7 	jal	8003c75c <_ZN4core9ub_checks17is_nonoverlapping7runtime17hb1cbf4182e21d395E>
8003c748:	00000000 	nop
}
8003c74c:	8fbf0034 	lw	ra,52(sp)
8003c750:	27bd0038 	addiu	sp,sp,56
8003c754:	03e00008 	jr	ra
8003c758:	00000000 	nop

8003c75c <_ZN4core9ub_checks17is_nonoverlapping7runtime17hb1cbf4182e21d395E>:
    fn runtime(src: *const (), dst: *const (), size: usize, count: usize) -> bool {
8003c75c:	27bdffa0 	addiu	sp,sp,-96
8003c760:	afbf005c 	sw	ra,92(sp)
8003c764:	afa70014 	sw	a3,20(sp)
8003c768:	afa60018 	sw	a2,24(sp)
8003c76c:	00a00825 	move	at,a1
8003c770:	8fa50014 	lw	a1,20(sp)
8003c774:	00801025 	move	v0,a0
8003c778:	8fa40018 	lw	a0,24(sp)
8003c77c:	afa2002c 	sw	v0,44(sp)
8003c780:	afa10030 	sw	at,48(sp)
8003c784:	afa40034 	sw	a0,52(sp)
8003c788:	afa50038 	sw	a1,56(sp)
8003c78c:	afa20054 	sw	v0,84(sp)
8003c790:	afa20058 	sw	v0,88(sp)
        unsafe { mem::transmute(self.cast::<()>()) }
8003c794:	00401825 	move	v1,v0
8003c798:	afa3001c 	sw	v1,28(sp)
        let src_usize = src.addr();
8003c79c:	afa2003c 	sw	v0,60(sp)
8003c7a0:	afa1004c 	sw	at,76(sp)
8003c7a4:	afa10050 	sw	at,80(sp)
8003c7a8:	00201025 	move	v0,at
8003c7ac:	afa20020 	sw	v0,32(sp)
        let dst_usize = dst.addr();
8003c7b0:	afa10040 	sw	at,64(sp)
        let Some(size) = size.checked_mul(count) else {
8003c7b4:	0c0121a0 	jal	80048680 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17ha947102a5b302d14E>
8003c7b8:	00000000 	nop
8003c7bc:	afa20024 	sw	v0,36(sp)
8003c7c0:	afa30028 	sw	v1,40(sp)
8003c7c4:	8fa10024 	lw	at,36(sp)
8003c7c8:	24020001 	li	v0,1
8003c7cc:	14220012 	bne	at,v0,8003c818 <_ZN4core9ub_checks17is_nonoverlapping7runtime17hb1cbf4182e21d395E+0xbc>
8003c7d0:	00000000 	nop
8003c7d4:	0800f1f7 	j	8003c7dc <_ZN4core9ub_checks17is_nonoverlapping7runtime17hb1cbf4182e21d395E+0x80>
8003c7d8:	00000000 	nop
8003c7dc:	8fa50020 	lw	a1,32(sp)
8003c7e0:	8fa4001c 	lw	a0,28(sp)
8003c7e4:	8fa10028 	lw	at,40(sp)
8003c7e8:	afa10010 	sw	at,16(sp)
8003c7ec:	afa10044 	sw	at,68(sp)
        let diff = src_usize.abs_diff(dst_usize);
8003c7f0:	0c0121c8 	jal	80048720 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E>
8003c7f4:	00000000 	nop
8003c7f8:	8fa10010 	lw	at,16(sp)
8003c7fc:	afa20048 	sw	v0,72(sp)
        diff >= size
8003c800:	0041082b 	sltu	at,v0,at
8003c804:	38220001 	xori	v0,at,0x1
    }
8003c808:	8fbf005c 	lw	ra,92(sp)
8003c80c:	27bd0060 	addiu	sp,sp,96
8003c810:	03e00008 	jr	ra
8003c814:	00000000 	nop
            crate::panicking::panic_nounwind(
8003c818:	3c01810a 	lui	at,0x810a
8003c81c:	2424b464 	addiu	a0,at,-19356
8003c820:	2405003d 	li	a1,61
8003c824:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8003c828:	00000000 	nop

8003c82c <_ZN4core3cmp3Ord3max17he84fd5cf4cdd5f92E>:
    fn max(self, other: Self) -> Self
8003c82c:	27bdffe0 	addiu	sp,sp,-32
8003c830:	afbf001c 	sw	ra,28(sp)
8003c834:	afa40014 	sw	a0,20(sp)
8003c838:	afa50018 	sw	a1,24(sp)
        max_by(self, other, Ord::cmp)
8003c83c:	0c00f272 	jal	8003c9c8 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E>
8003c840:	00000000 	nop
    }
8003c844:	8fbf001c 	lw	ra,28(sp)
8003c848:	27bd0020 	addiu	sp,sp,32
8003c84c:	03e00008 	jr	ra
8003c850:	00000000 	nop

8003c854 <_ZN4core3cmp3Ord3min17h2a72c5c1ea083727E>:
    fn min(self, other: Self) -> Self
8003c854:	27bdffe0 	addiu	sp,sp,-32
8003c858:	afbf001c 	sw	ra,28(sp)
8003c85c:	afa40014 	sw	a0,20(sp)
8003c860:	afa50018 	sw	a1,24(sp)
        min_by(self, other, Ord::cmp)
8003c864:	0c00f229 	jal	8003c8a4 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E>
8003c868:	00000000 	nop
    }
8003c86c:	8fbf001c 	lw	ra,28(sp)
8003c870:	27bd0020 	addiu	sp,sp,32
8003c874:	03e00008 	jr	ra
8003c878:	00000000 	nop

8003c87c <_ZN4core3cmp3min17hec05a35ccdb294eaE>:
pub fn min<T: Ord>(v1: T, v2: T) -> T {
8003c87c:	27bdffe0 	addiu	sp,sp,-32
8003c880:	afbf001c 	sw	ra,28(sp)
8003c884:	afa40014 	sw	a0,20(sp)
8003c888:	afa50018 	sw	a1,24(sp)
    v1.min(v2)
8003c88c:	0c00f215 	jal	8003c854 <_ZN4core3cmp3Ord3min17h2a72c5c1ea083727E>
8003c890:	00000000 	nop
}
8003c894:	8fbf001c 	lw	ra,28(sp)
8003c898:	27bd0020 	addiu	sp,sp,32
8003c89c:	03e00008 	jr	ra
8003c8a0:	00000000 	nop

8003c8a4 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E>:
pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
8003c8a4:	27bdffd0 	addiu	sp,sp,-48
8003c8a8:	afbf002c 	sw	ra,44(sp)
8003c8ac:	afa40010 	sw	a0,16(sp)
8003c8b0:	afa50014 	sw	a1,20(sp)
8003c8b4:	24010000 	li	at,0
    match compare(&v1, &v2) {
8003c8b8:	a3a0002a 	sb	zero,42(sp)
8003c8bc:	a3a00029 	sb	zero,41(sp)
8003c8c0:	24010001 	li	at,1
8003c8c4:	a3a1002a 	sb	at,42(sp)
8003c8c8:	a3a10029 	sb	at,41(sp)
8003c8cc:	27a10010 	addiu	at,sp,16
8003c8d0:	afa10020 	sw	at,32(sp)
8003c8d4:	27a10014 	addiu	at,sp,20
8003c8d8:	afa10024 	sw	at,36(sp)
8003c8dc:	8fa40020 	lw	a0,32(sp)
8003c8e0:	8fa50024 	lw	a1,36(sp)
8003c8e4:	0c00ecd4 	jal	8003b350 <_ZN4core3ops8function6FnOnce9call_once17h791c912e8431a9d0E>
8003c8e8:	00000000 	nop
8003c8ec:	a3a2001f 	sb	v0,31(sp)
8003c8f0:	93a1001f 	lbu	at,31(sp)
8003c8f4:	24210001 	addiu	at,at,1
8003c8f8:	302100ff 	andi	at,at,0xff
8003c8fc:	2c210002 	sltiu	at,at,2
8003c900:	14200006 	bnez	at,8003c91c <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0x78>
8003c904:	00000000 	nop
8003c908:	0800f244 	j	8003c910 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0x6c>
8003c90c:	00000000 	nop
8003c910:	0800f24d 	j	8003c934 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0x90>
8003c914:	00000000 	nop
8003c918:	0000000d 	break
8003c91c:	24010000 	li	at,0
        Ordering::Less | Ordering::Equal => v1,
8003c920:	a3a0002a 	sb	zero,42(sp)
8003c924:	8fa10010 	lw	at,16(sp)
8003c928:	afa10018 	sw	at,24(sp)
8003c92c:	0800f253 	j	8003c94c <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xa8>
8003c930:	00000000 	nop
8003c934:	24010000 	li	at,0
        Ordering::Greater => v2,
8003c938:	a3a00029 	sb	zero,41(sp)
8003c93c:	8fa10014 	lw	at,20(sp)
8003c940:	afa10018 	sw	at,24(sp)
8003c944:	0800f253 	j	8003c94c <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xa8>
8003c948:	00000000 	nop
}
8003c94c:	93a10029 	lbu	at,41(sp)
8003c950:	30210001 	andi	at,at,0x1
8003c954:	14200009 	bnez	at,8003c97c <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xd8>
8003c958:	00000000 	nop
8003c95c:	0800f259 	j	8003c964 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xc0>
8003c960:	00000000 	nop
8003c964:	93a1002a 	lbu	at,42(sp)
8003c968:	30210001 	andi	at,at,0x1
8003c96c:	1420000a 	bnez	at,8003c998 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xf4>
8003c970:	00000000 	nop
8003c974:	0800f261 	j	8003c984 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xe0>
8003c978:	00000000 	nop
8003c97c:	0800f259 	j	8003c964 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xc0>
8003c980:	00000000 	nop
8003c984:	8fa20018 	lw	v0,24(sp)
8003c988:	8fbf002c 	lw	ra,44(sp)
8003c98c:	27bd0030 	addiu	sp,sp,48
8003c990:	03e00008 	jr	ra
8003c994:	00000000 	nop
8003c998:	0800f261 	j	8003c984 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xe0>
8003c99c:	00000000 	nop

8003c9a0 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>:
pub fn max<T: Ord>(v1: T, v2: T) -> T {
8003c9a0:	27bdffe0 	addiu	sp,sp,-32
8003c9a4:	afbf001c 	sw	ra,28(sp)
8003c9a8:	afa40014 	sw	a0,20(sp)
8003c9ac:	afa50018 	sw	a1,24(sp)
    v1.max(v2)
8003c9b0:	0c00f20b 	jal	8003c82c <_ZN4core3cmp3Ord3max17he84fd5cf4cdd5f92E>
8003c9b4:	00000000 	nop
}
8003c9b8:	8fbf001c 	lw	ra,28(sp)
8003c9bc:	27bd0020 	addiu	sp,sp,32
8003c9c0:	03e00008 	jr	ra
8003c9c4:	00000000 	nop

8003c9c8 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E>:
pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
8003c9c8:	27bdffd0 	addiu	sp,sp,-48
8003c9cc:	afbf002c 	sw	ra,44(sp)
8003c9d0:	afa40010 	sw	a0,16(sp)
8003c9d4:	afa50014 	sw	a1,20(sp)
8003c9d8:	24010000 	li	at,0
    match compare(&v1, &v2) {
8003c9dc:	a3a0002a 	sb	zero,42(sp)
8003c9e0:	a3a00029 	sb	zero,41(sp)
8003c9e4:	24010001 	li	at,1
8003c9e8:	a3a1002a 	sb	at,42(sp)
8003c9ec:	a3a10029 	sb	at,41(sp)
8003c9f0:	27a10010 	addiu	at,sp,16
8003c9f4:	afa10020 	sw	at,32(sp)
8003c9f8:	27a10014 	addiu	at,sp,20
8003c9fc:	afa10024 	sw	at,36(sp)
8003ca00:	8fa40020 	lw	a0,32(sp)
8003ca04:	8fa50024 	lw	a1,36(sp)
8003ca08:	0c00ecd4 	jal	8003b350 <_ZN4core3ops8function6FnOnce9call_once17h791c912e8431a9d0E>
8003ca0c:	00000000 	nop
8003ca10:	a3a2001f 	sb	v0,31(sp)
8003ca14:	93a1001f 	lbu	at,31(sp)
8003ca18:	24210001 	addiu	at,at,1
8003ca1c:	302100ff 	andi	at,at,0xff
8003ca20:	2c210002 	sltiu	at,at,2
8003ca24:	14200006 	bnez	at,8003ca40 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0x78>
8003ca28:	00000000 	nop
8003ca2c:	0800f28d 	j	8003ca34 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0x6c>
8003ca30:	00000000 	nop
8003ca34:	0800f296 	j	8003ca58 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0x90>
8003ca38:	00000000 	nop
8003ca3c:	0000000d 	break
8003ca40:	24010000 	li	at,0
        Ordering::Less | Ordering::Equal => v2,
8003ca44:	a3a00029 	sb	zero,41(sp)
8003ca48:	8fa10014 	lw	at,20(sp)
8003ca4c:	afa10018 	sw	at,24(sp)
8003ca50:	0800f29c 	j	8003ca70 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xa8>
8003ca54:	00000000 	nop
8003ca58:	24010000 	li	at,0
        Ordering::Greater => v1,
8003ca5c:	a3a0002a 	sb	zero,42(sp)
8003ca60:	8fa10010 	lw	at,16(sp)
8003ca64:	afa10018 	sw	at,24(sp)
8003ca68:	0800f29c 	j	8003ca70 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xa8>
8003ca6c:	00000000 	nop
}
8003ca70:	93a10029 	lbu	at,41(sp)
8003ca74:	30210001 	andi	at,at,0x1
8003ca78:	14200009 	bnez	at,8003caa0 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xd8>
8003ca7c:	00000000 	nop
8003ca80:	0800f2a2 	j	8003ca88 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xc0>
8003ca84:	00000000 	nop
8003ca88:	93a1002a 	lbu	at,42(sp)
8003ca8c:	30210001 	andi	at,at,0x1
8003ca90:	1420000a 	bnez	at,8003cabc <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xf4>
8003ca94:	00000000 	nop
8003ca98:	0800f2aa 	j	8003caa8 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xe0>
8003ca9c:	00000000 	nop
8003caa0:	0800f2a2 	j	8003ca88 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xc0>
8003caa4:	00000000 	nop
8003caa8:	8fa20018 	lw	v0,24(sp)
8003caac:	8fbf002c 	lw	ra,44(sp)
8003cab0:	27bd0030 	addiu	sp,sp,48
8003cab4:	03e00008 	jr	ra
8003cab8:	00000000 	nop
8003cabc:	0800f2aa 	j	8003caa8 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xe0>
8003cac0:	00000000 	nop

8003cac4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE>:
    pub end: Idx,
}

#[stable(feature = "rust1", since = "1.0.0")]
impl<Idx: fmt::Debug> fmt::Debug for Range<Idx> {
    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
8003cac4:	27bdffb0 	addiu	sp,sp,-80
8003cac8:	afbf004c 	sw	ra,76(sp)
8003cacc:	afa50014 	sw	a1,20(sp)
8003cad0:	afa40018 	sw	a0,24(sp)
        self.start.fmt(fmt)?;
        write!(fmt, "..")?;
        self.end.fmt(fmt)?;
8003cad4:	afa40044 	sw	a0,68(sp)
8003cad8:	afa50048 	sw	a1,72(sp)
        self.start.fmt(fmt)?;
8003cadc:	0c01261c 	jal	80049870 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E>
8003cae0:	00000000 	nop
8003cae4:	00402025 	move	a0,v0
8003cae8:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003caec:	00000000 	nop
8003caf0:	a3a20026 	sb	v0,38(sp)
8003caf4:	93a10026 	lbu	at,38(sp)
8003caf8:	30210001 	andi	at,at,0x1
8003cafc:	14200018 	bnez	at,8003cb60 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x9c>
8003cb00:	00000000 	nop
8003cb04:	0800f2c3 	j	8003cb0c <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x48>
8003cb08:	00000000 	nop
        write!(fmt, "..")?;
8003cb0c:	3c01810a 	lui	at,0x810a
8003cb10:	2425b504 	addiu	a1,at,-19196
8003cb14:	27a40028 	addiu	a0,sp,40
8003cb18:	afa40010 	sw	a0,16(sp)
8003cb1c:	24060001 	li	a2,1
8003cb20:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003cb24:	00000000 	nop
8003cb28:	8fa40014 	lw	a0,20(sp)
8003cb2c:	8fa50010 	lw	a1,16(sp)
8003cb30:	0c010a70 	jal	800429c0 <_ZN4core3fmt9Formatter9write_fmt17h7d294feef253c98cE>
8003cb34:	00000000 	nop
8003cb38:	00402025 	move	a0,v0
8003cb3c:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003cb40:	00000000 	nop
8003cb44:	a3a20027 	sb	v0,39(sp)
8003cb48:	93a10027 	lbu	at,39(sp)
8003cb4c:	30210001 	andi	at,at,0x1
8003cb50:	1020000a 	beqz	at,8003cb7c <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0xb8>
8003cb54:	00000000 	nop
8003cb58:	0800f2ee 	j	8003cbb8 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0xf4>
8003cb5c:	00000000 	nop
        self.start.fmt(fmt)?;
8003cb60:	3c01810a 	lui	at,0x810a
8003cb64:	2424b59c 	addiu	a0,at,-19044
8003cb68:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003cb6c:	00000000 	nop
8003cb70:	a3a20025 	sb	v0,37(sp)
8003cb74:	0800f300 	j	8003cc00 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x13c>
8003cb78:	00000000 	nop
        self.end.fmt(fmt)?;
8003cb7c:	8fa50014 	lw	a1,20(sp)
8003cb80:	8fa10018 	lw	at,24(sp)
8003cb84:	24240004 	addiu	a0,at,4
8003cb88:	0c01261c 	jal	80049870 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E>
8003cb8c:	00000000 	nop
8003cb90:	00402025 	move	a0,v0
8003cb94:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003cb98:	00000000 	nop
8003cb9c:	a3a20043 	sb	v0,67(sp)
8003cba0:	93a10043 	lbu	at,67(sp)
8003cba4:	30210001 	andi	at,at,0x1
8003cba8:	1020000a 	beqz	at,8003cbd4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x110>
8003cbac:	00000000 	nop
8003cbb0:	0800f2f9 	j	8003cbe4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x120>
8003cbb4:	00000000 	nop
        write!(fmt, "..")?;
8003cbb8:	3c01810a 	lui	at,0x810a
8003cbbc:	2424b58c 	addiu	a0,at,-19060
8003cbc0:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003cbc4:	00000000 	nop
8003cbc8:	a3a20025 	sb	v0,37(sp)
8003cbcc:	0800f300 	j	8003cc00 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x13c>
8003cbd0:	00000000 	nop
8003cbd4:	24010000 	li	at,0
        Ok(())
8003cbd8:	a3a00025 	sb	zero,37(sp)
    }
8003cbdc:	0800f300 	j	8003cc00 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x13c>
8003cbe0:	00000000 	nop
        self.end.fmt(fmt)?;
8003cbe4:	3c01810a 	lui	at,0x810a
8003cbe8:	2424b57c 	addiu	a0,at,-19076
8003cbec:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003cbf0:	00000000 	nop
8003cbf4:	a3a20025 	sb	v0,37(sp)
8003cbf8:	0800f300 	j	8003cc00 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x13c>
8003cbfc:	00000000 	nop
    }
8003cc00:	93a10025 	lbu	at,37(sp)
8003cc04:	30220001 	andi	v0,at,0x1
8003cc08:	8fbf004c 	lw	ra,76(sp)
8003cc0c:	27bd0050 	addiu	sp,sp,80
8003cc10:	03e00008 	jr	ra
8003cc14:	00000000 	nop

8003cc18 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E>:
    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
8003cc18:	27bdffb0 	addiu	sp,sp,-80
8003cc1c:	afbf004c 	sw	ra,76(sp)
8003cc20:	afa50014 	sw	a1,20(sp)
8003cc24:	afa40018 	sw	a0,24(sp)
        self.end.fmt(fmt)?;
8003cc28:	afa40044 	sw	a0,68(sp)
8003cc2c:	afa50048 	sw	a1,72(sp)
        self.start.fmt(fmt)?;
8003cc30:	0c0125ec 	jal	800497b0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E>
8003cc34:	00000000 	nop
8003cc38:	00402025 	move	a0,v0
8003cc3c:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003cc40:	00000000 	nop
8003cc44:	a3a20026 	sb	v0,38(sp)
8003cc48:	93a10026 	lbu	at,38(sp)
8003cc4c:	30210001 	andi	at,at,0x1
8003cc50:	14200018 	bnez	at,8003ccb4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x9c>
8003cc54:	00000000 	nop
8003cc58:	0800f318 	j	8003cc60 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x48>
8003cc5c:	00000000 	nop
        write!(fmt, "..")?;
8003cc60:	3c01810a 	lui	at,0x810a
8003cc64:	2425b504 	addiu	a1,at,-19196
8003cc68:	27a40028 	addiu	a0,sp,40
8003cc6c:	afa40010 	sw	a0,16(sp)
8003cc70:	24060001 	li	a2,1
8003cc74:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003cc78:	00000000 	nop
8003cc7c:	8fa40014 	lw	a0,20(sp)
8003cc80:	8fa50010 	lw	a1,16(sp)
8003cc84:	0c010a70 	jal	800429c0 <_ZN4core3fmt9Formatter9write_fmt17h7d294feef253c98cE>
8003cc88:	00000000 	nop
8003cc8c:	00402025 	move	a0,v0
8003cc90:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003cc94:	00000000 	nop
8003cc98:	a3a20027 	sb	v0,39(sp)
8003cc9c:	93a10027 	lbu	at,39(sp)
8003cca0:	30210001 	andi	at,at,0x1
8003cca4:	1020000a 	beqz	at,8003ccd0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0xb8>
8003cca8:	00000000 	nop
8003ccac:	0800f343 	j	8003cd0c <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0xf4>
8003ccb0:	00000000 	nop
        self.start.fmt(fmt)?;
8003ccb4:	3c01810a 	lui	at,0x810a
8003ccb8:	2424b59c 	addiu	a0,at,-19044
8003ccbc:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003ccc0:	00000000 	nop
8003ccc4:	a3a20025 	sb	v0,37(sp)
8003ccc8:	0800f355 	j	8003cd54 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x13c>
8003cccc:	00000000 	nop
        self.end.fmt(fmt)?;
8003ccd0:	8fa50014 	lw	a1,20(sp)
8003ccd4:	8fa10018 	lw	at,24(sp)
8003ccd8:	24240001 	addiu	a0,at,1
8003ccdc:	0c0125ec 	jal	800497b0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E>
8003cce0:	00000000 	nop
8003cce4:	00402025 	move	a0,v0
8003cce8:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003ccec:	00000000 	nop
8003ccf0:	a3a20043 	sb	v0,67(sp)
8003ccf4:	93a10043 	lbu	at,67(sp)
8003ccf8:	30210001 	andi	at,at,0x1
8003ccfc:	1020000a 	beqz	at,8003cd28 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x110>
8003cd00:	00000000 	nop
8003cd04:	0800f34e 	j	8003cd38 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x120>
8003cd08:	00000000 	nop
        write!(fmt, "..")?;
8003cd0c:	3c01810a 	lui	at,0x810a
8003cd10:	2424b58c 	addiu	a0,at,-19060
8003cd14:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003cd18:	00000000 	nop
8003cd1c:	a3a20025 	sb	v0,37(sp)
8003cd20:	0800f355 	j	8003cd54 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x13c>
8003cd24:	00000000 	nop
8003cd28:	24010000 	li	at,0
        Ok(())
8003cd2c:	a3a00025 	sb	zero,37(sp)
    }
8003cd30:	0800f355 	j	8003cd54 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x13c>
8003cd34:	00000000 	nop
        self.end.fmt(fmt)?;
8003cd38:	3c01810a 	lui	at,0x810a
8003cd3c:	2424b57c 	addiu	a0,at,-19076
8003cd40:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003cd44:	00000000 	nop
8003cd48:	a3a20025 	sb	v0,37(sp)
8003cd4c:	0800f355 	j	8003cd54 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x13c>
8003cd50:	00000000 	nop
    }
8003cd54:	93a10025 	lbu	at,37(sp)
8003cd58:	30220001 	andi	v0,at,0x1
8003cd5c:	8fbf004c 	lw	ra,76(sp)
8003cd60:	27bd0050 	addiu	sp,sp,80
8003cd64:	03e00008 	jr	ra
8003cd68:	00000000 	nop

8003cd6c <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17hc292ae9ef64e18eeE>:
    #[lang = "range_inclusive_new"]
    #[stable(feature = "inclusive_range_methods", since = "1.27.0")]
    #[inline]
    #[rustc_promotable]
    #[rustc_const_stable(feature = "const_range_new", since = "1.32.0")]
    pub const fn new(start: Idx, end: Idx) -> Self {
8003cd6c:	27bdfff8 	addiu	sp,sp,-8
8003cd70:	00801025 	move	v0,a0
8003cd74:	afa50000 	sw	a1,0(sp)
8003cd78:	afa60004 	sw	a2,4(sp)
        Self { start, end, exhausted: false }
8003cd7c:	ac850000 	sw	a1,0(a0)
8003cd80:	ac860004 	sw	a2,4(a0)
8003cd84:	24010000 	li	at,0
8003cd88:	a0800008 	sb	zero,8(a0)
8003cd8c:	27bd0008 	addiu	sp,sp,8
    }
8003cd90:	03e00008 	jr	ra
8003cd94:	00000000 	nop

8003cd98 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3end17h57262ba442efad6eE>:
    /// assert_eq!((3..=5).end(), &5);
    /// ```
    #[stable(feature = "inclusive_range_methods", since = "1.27.0")]
    #[rustc_const_stable(feature = "const_inclusive_range_methods", since = "1.32.0")]
    #[inline]
    pub const fn end(&self) -> &Idx {
8003cd98:	27bdfff8 	addiu	sp,sp,-8
8003cd9c:	afa40004 	sw	a0,4(sp)
        &self.end
8003cda0:	24820004 	addiu	v0,a0,4
8003cda4:	27bd0008 	addiu	sp,sp,8
    }
8003cda8:	03e00008 	jr	ra
8003cdac:	00000000 	nop

8003cdb0 <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E>:

impl RangeInclusive<usize> {
    /// Converts to an exclusive `Range` for `SliceIndex` implementations.
    /// The caller is responsible for dealing with `end == usize::MAX`.
    #[inline]
    pub(crate) const fn into_slice_range(self) -> Range<usize> {
8003cdb0:	27bdffd8 	addiu	sp,sp,-40
8003cdb4:	afa40010 	sw	a0,16(sp)
        // If we're not exhausted, we want to simply slice `start..end + 1`.
        // If we are exhausted, then slicing with `end + 1..end + 1` gives us an
        // empty range that is still subject to bounds-checks for that endpoint.
        let exclusive_end = self.end + 1;
8003cdb8:	8c810004 	lw	at,4(a0)
8003cdbc:	24210001 	addiu	at,at,1
8003cdc0:	afa10014 	sw	at,20(sp)
8003cdc4:	1020000c 	beqz	at,8003cdf8 <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E+0x48>
8003cdc8:	00000000 	nop
8003cdcc:	0800f375 	j	8003cdd4 <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E+0x24>
8003cdd0:	00000000 	nop
8003cdd4:	8fa10010 	lw	at,16(sp)
8003cdd8:	8fa20014 	lw	v0,20(sp)
8003cddc:	afa20024 	sw	v0,36(sp)
        let start = if self.exhausted { exclusive_end } else { self.start };
8003cde0:	90210008 	lbu	at,8(at)
8003cde4:	30210001 	andi	at,at,0x1
8003cde8:	1420000c 	bnez	at,8003ce1c <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E+0x6c>
8003cdec:	00000000 	nop
8003cdf0:	0800f382 	j	8003ce08 <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E+0x58>
8003cdf4:	00000000 	nop
        let exclusive_end = self.end + 1;
8003cdf8:	3c01810a 	lui	at,0x810a
8003cdfc:	2424b5ac 	addiu	a0,at,-19028
8003ce00:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003ce04:	00000000 	nop
        let start = if self.exhausted { exclusive_end } else { self.start };
8003ce08:	8fa10010 	lw	at,16(sp)
8003ce0c:	8c210000 	lw	at,0(at)
8003ce10:	afa10020 	sw	at,32(sp)
8003ce14:	0800f38b 	j	8003ce2c <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E+0x7c>
8003ce18:	00000000 	nop
8003ce1c:	8fa10014 	lw	at,20(sp)
8003ce20:	afa10020 	sw	at,32(sp)
8003ce24:	0800f38b 	j	8003ce2c <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E+0x7c>
8003ce28:	00000000 	nop
        start..exclusive_end
8003ce2c:	8fa10014 	lw	at,20(sp)
8003ce30:	8fa20020 	lw	v0,32(sp)
8003ce34:	afa20018 	sw	v0,24(sp)
8003ce38:	afa1001c 	sw	at,28(sp)
    }
8003ce3c:	8fa20018 	lw	v0,24(sp)
8003ce40:	8fa3001c 	lw	v1,28(sp)
8003ce44:	27bd0028 	addiu	sp,sp,40
8003ce48:	03e00008 	jr	ra
8003ce4c:	00000000 	nop

8003ce50 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h8776d656ecbba387E>:
    fn type_id(&self) -> TypeId;
}

#[stable(feature = "rust1", since = "1.0.0")]
impl<T: 'static + ?Sized> Any for T {
    fn type_id(&self) -> TypeId {
8003ce50:	27bdffe8 	addiu	sp,sp,-24
8003ce54:	afbf0014 	sw	ra,20(sp)
8003ce58:	afa40010 	sw	a0,16(sp)
        TypeId::of::<T>()
8003ce5c:	0c00f39d 	jal	8003ce74 <_ZN4core3any6TypeId2of17h278bb7d5a9056281E>
8003ce60:	00000000 	nop
    }
8003ce64:	8fbf0014 	lw	ra,20(sp)
8003ce68:	27bd0018 	addiu	sp,sp,24
8003ce6c:	03e00008 	jr	ra
8003ce70:	00000000 	nop

8003ce74 <_ZN4core3any6TypeId2of17h278bb7d5a9056281E>:
    /// assert_eq!(is_string(&"cookie monster".to_string()), true);
    /// ```
    #[must_use]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_unstable(feature = "const_type_id", issue = "77125")]
    pub const fn of<T: ?Sized + 'static>() -> TypeId {
8003ce74:	27bdffb0 	addiu	sp,sp,-80
8003ce78:	3c015884 	lui	at,0x5884
8003ce7c:	3421b7b4 	ori	at,at,0xb7b4
        let t: u128 = intrinsics::type_id::<T>();
8003ce80:	afa1002c 	sw	at,44(sp)
8003ce84:	3c013ed7 	lui	at,0x3ed7
8003ce88:	3421d2c7 	ori	at,at,0xd2c7
8003ce8c:	afa10028 	sw	at,40(sp)
8003ce90:	3c01bbd2 	lui	at,0xbbd2
8003ce94:	3421d934 	ori	at,at,0xd934
8003ce98:	afa10024 	sw	at,36(sp)
8003ce9c:	3c01530c 	lui	at,0x530c
8003cea0:	3421456c 	ori	at,at,0x456c
8003cea4:	afa10020 	sw	at,32(sp)
8003cea8:	8fa10020 	lw	at,32(sp)
8003ceac:	8fa20024 	lw	v0,36(sp)
8003ceb0:	8fa30028 	lw	v1,40(sp)
8003ceb4:	8fa4002c 	lw	a0,44(sp)
8003ceb8:	afa4003c 	sw	a0,60(sp)
8003cebc:	afa30038 	sw	v1,56(sp)
8003cec0:	afa20034 	sw	v0,52(sp)
8003cec4:	afa10030 	sw	at,48(sp)

        let t1 = (t >> 64) as u64;
8003cec8:	afa40044 	sw	a0,68(sp)
8003cecc:	afa30040 	sw	v1,64(sp)
        let t2 = t as u64;
8003ced0:	afa2004c 	sw	v0,76(sp)
8003ced4:	afa10048 	sw	at,72(sp)
        TypeId { t: (t1, t2) }
8003ced8:	afa40014 	sw	a0,20(sp)
8003cedc:	afa30010 	sw	v1,16(sp)
8003cee0:	afa2001c 	sw	v0,28(sp)
8003cee4:	afa10018 	sw	at,24(sp)
8003cee8:	8fa30010 	lw	v1,16(sp)
8003ceec:	8fa40014 	lw	a0,20(sp)
8003cef0:	8fa10018 	lw	at,24(sp)
8003cef4:	8fa2001c 	lw	v0,28(sp)
8003cef8:	afa40004 	sw	a0,4(sp)
8003cefc:	afa30000 	sw	v1,0(sp)
8003cf00:	afa2000c 	sw	v0,12(sp)
8003cf04:	afa10008 	sw	at,8(sp)
    }
8003cf08:	8fa20000 	lw	v0,0(sp)
8003cf0c:	8fa30004 	lw	v1,4(sp)
8003cf10:	8fa40008 	lw	a0,8(sp)
8003cf14:	8fa5000c 	lw	a1,12(sp)
8003cf18:	27bd0050 	addiu	sp,sp,80
8003cf1c:	03e00008 	jr	ra
8003cf20:	00000000 	nop

8003cf24 <_ZN4core5array98_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u3b$$u20$N$u5d$$GT$9into_iter17h8eaf4e7ff4d3c707E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<'a, T, const N: usize> IntoIterator for &'a [T; N] {
    type Item = &'a T;
    type IntoIter = Iter<'a, T>;

    fn into_iter(self) -> Iter<'a, T> {
8003cf24:	27bdffe8 	addiu	sp,sp,-24
8003cf28:	afbf0014 	sw	ra,20(sp)
8003cf2c:	afa40010 	sw	a0,16(sp)
8003cf30:	24050004 	li	a1,4
        self.iter()
8003cf34:	0c01124b 	jal	8004492c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hf734dea4d413a514E>
8003cf38:	00000000 	nop
    }
8003cf3c:	8fbf0014 	lw	ra,20(sp)
8003cf40:	27bd0018 	addiu	sp,sp,24
8003cf44:	03e00008 	jr	ra
8003cf48:	00000000 	nop

8003cf4c <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hfa0288d626a253cbE>:
    [T]: Index<I>,
{
    type Output = <[T] as Index<I>>::Output;

    #[inline]
    fn index(&self, index: I) -> &Self::Output {
8003cf4c:	27bdffd0 	addiu	sp,sp,-48
8003cf50:	afbf002c 	sw	ra,44(sp)
8003cf54:	00c03825 	move	a3,a2
8003cf58:	afa50014 	sw	a1,20(sp)
8003cf5c:	00802825 	move	a1,a0
8003cf60:	8fa40014 	lw	a0,20(sp)
8003cf64:	afa50018 	sw	a1,24(sp)
8003cf68:	afa4001c 	sw	a0,28(sp)
8003cf6c:	afa50020 	sw	a1,32(sp)
8003cf70:	24060080 	li	a2,128
8003cf74:	afa60024 	sw	a2,36(sp)
8003cf78:	afa40028 	sw	a0,40(sp)
        index.index(self)
8003cf7c:	0c010f5b 	jal	80043d6c <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h303723bc382a6e8fE>
8003cf80:	00000000 	nop
        Index::index(self as &[T], index)
    }
8003cf84:	8fbf002c 	lw	ra,44(sp)
8003cf88:	27bd0030 	addiu	sp,sp,48
8003cf8c:	03e00008 	jr	ra
8003cf90:	00000000 	nop

8003cf94 <_ZN4core5array88_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$9index_mut17h3b37ece2936c0239E>:
impl<T, I, const N: usize> IndexMut<I> for [T; N]
where
    [T]: IndexMut<I>,
{
    #[inline]
    fn index_mut(&mut self, index: I) -> &mut Self::Output {
8003cf94:	27bdffd0 	addiu	sp,sp,-48
8003cf98:	afbf002c 	sw	ra,44(sp)
8003cf9c:	00c03825 	move	a3,a2
8003cfa0:	afa50014 	sw	a1,20(sp)
8003cfa4:	00802825 	move	a1,a0
8003cfa8:	8fa40014 	lw	a0,20(sp)
8003cfac:	afa50018 	sw	a1,24(sp)
8003cfb0:	afa4001c 	sw	a0,28(sp)
8003cfb4:	afa50020 	sw	a1,32(sp)
8003cfb8:	2406000a 	li	a2,10
8003cfbc:	afa60024 	sw	a2,36(sp)
8003cfc0:	afa40028 	sw	a0,40(sp)
        index.index_mut(self)
8003cfc4:	0c010f0f 	jal	80043c3c <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hcf5fb57ce5379036E>
8003cfc8:	00000000 	nop
        IndexMut::index_mut(self as &mut [T], index)
    }
8003cfcc:	8fbf002c 	lw	ra,44(sp)
8003cfd0:	27bd0030 	addiu	sp,sp,48
8003cfd4:	03e00008 	jr	ra
8003cfd8:	00000000 	nop

8003cfdc <_ZN4core5array88_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$9index_mut17h64941d6709fd2000E>:
    fn index_mut(&mut self, index: I) -> &mut Self::Output {
8003cfdc:	27bdffd0 	addiu	sp,sp,-48
8003cfe0:	afbf002c 	sw	ra,44(sp)
8003cfe4:	00c03825 	move	a3,a2
8003cfe8:	afa50014 	sw	a1,20(sp)
8003cfec:	00802825 	move	a1,a0
8003cff0:	8fa40014 	lw	a0,20(sp)
8003cff4:	afa50018 	sw	a1,24(sp)
8003cff8:	afa4001c 	sw	a0,28(sp)
8003cffc:	afa50020 	sw	a1,32(sp)
8003d000:	2406000a 	li	a2,10
8003d004:	afa60024 	sw	a2,36(sp)
8003d008:	afa40028 	sw	a0,40(sp)
8003d00c:	0c010f77 	jal	80043ddc <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h634482a4c9969ff8E>
8003d010:	00000000 	nop
    }
8003d014:	8fbf002c 	lw	ra,44(sp)
8003d018:	27bd0030 	addiu	sp,sp,48
8003d01c:	03e00008 	jr	ra
8003d020:	00000000 	nop

8003d024 <_ZN4core5ascii10ascii_char9AsciiChar5to_u817he7dc2dbee10bd70dE>:
    }

    /// Gets this ASCII character as a byte.
    #[unstable(feature = "ascii_char", issue = "110998")]
    #[inline]
    pub const fn to_u8(self) -> u8 {
8003d024:	27bdfff8 	addiu	sp,sp,-8
8003d028:	a3a40007 	sb	a0,7(sp)
        self as u8
    }
8003d02c:	93a20007 	lbu	v0,7(sp)
8003d030:	27bd0008 	addiu	sp,sp,8
8003d034:	03e00008 	jr	ra
8003d038:	00000000 	nop

8003d03c <_ZN60_$LT$core..cell..BorrowError$u20$as$u20$core..fmt..Debug$GT$3fmt17hdb870ed7a14b79c4E>:
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8003d03c:	27bdffd8 	addiu	sp,sp,-40
8003d040:	afbf0024 	sw	ra,36(sp)
8003d044:	afa4001c 	sw	a0,28(sp)
8003d048:	afa50020 	sw	a1,32(sp)
        let mut builder = f.debug_struct("BorrowError");
8003d04c:	3c01810a 	lui	at,0x810a
8003d050:	2426b5bc 	addiu	a2,at,-19012
8003d054:	27a40014 	addiu	a0,sp,20
8003d058:	afa40010 	sw	a0,16(sp)
8003d05c:	2407000b 	li	a3,11
8003d060:	0c010ad0 	jal	80042b40 <_ZN4core3fmt9Formatter12debug_struct17h6504f7339d778b3dE>
8003d064:	00000000 	nop
8003d068:	8fa40010 	lw	a0,16(sp)
        builder.finish()
8003d06c:	0c00fe83 	jal	8003fa0c <_ZN4core3fmt8builders11DebugStruct6finish17h7cc9f15e92184c03E>
8003d070:	00000000 	nop
    }
8003d074:	8fbf0024 	lw	ra,36(sp)
8003d078:	27bd0028 	addiu	sp,sp,40
8003d07c:	03e00008 	jr	ra
8003d080:	00000000 	nop

8003d084 <_ZN63_$LT$core..cell..BorrowMutError$u20$as$u20$core..fmt..Debug$GT$3fmt17h468449d84c9a526dE>:
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8003d084:	27bdffd8 	addiu	sp,sp,-40
8003d088:	afbf0024 	sw	ra,36(sp)
8003d08c:	afa4001c 	sw	a0,28(sp)
8003d090:	afa50020 	sw	a1,32(sp)
        let mut builder = f.debug_struct("BorrowMutError");
8003d094:	3c01810a 	lui	at,0x810a
8003d098:	2426b5c7 	addiu	a2,at,-19001
8003d09c:	27a40014 	addiu	a0,sp,20
8003d0a0:	afa40010 	sw	a0,16(sp)
8003d0a4:	2407000e 	li	a3,14
8003d0a8:	0c010ad0 	jal	80042b40 <_ZN4core3fmt9Formatter12debug_struct17h6504f7339d778b3dE>
8003d0ac:	00000000 	nop
8003d0b0:	8fa40010 	lw	a0,16(sp)
        builder.finish()
8003d0b4:	0c00fe83 	jal	8003fa0c <_ZN4core3fmt8builders11DebugStruct6finish17h7cc9f15e92184c03E>
8003d0b8:	00000000 	nop
    }
8003d0bc:	8fbf0024 	lw	ra,36(sp)
8003d0c0:	27bd0028 	addiu	sp,sp,40
8003d0c4:	03e00008 	jr	ra
8003d0c8:	00000000 	nop

8003d0cc <_ZN4core4cell22panic_already_borrowed17h5cddcb2dc4be68f9E>:
fn panic_already_borrowed(err: BorrowMutError) -> ! {
8003d0cc:	27bdffa0 	addiu	sp,sp,-96
8003d0d0:	afbf005c 	sw	ra,92(sp)
8003d0d4:	afa40020 	sw	a0,32(sp)
8003d0d8:	27a20027 	addiu	v0,sp,39
8003d0dc:	afa20048 	sw	v0,72(sp)
8003d0e0:	afa20054 	sw	v0,84(sp)
8003d0e4:	3c018004 	lui	at,0x8004
8003d0e8:	2421d084 	addiu	at,at,-12156
8003d0ec:	afa10058 	sw	at,88(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003d0f0:	afa2004c 	sw	v0,76(sp)
8003d0f4:	afa10050 	sw	at,80(sp)
    }
8003d0f8:	8fa2004c 	lw	v0,76(sp)
8003d0fc:	8fa10050 	lw	at,80(sp)
    panic!("already borrowed: {:?}", err)
8003d100:	afa20040 	sw	v0,64(sp)
8003d104:	afa10044 	sw	at,68(sp)
8003d108:	03a00825 	move	at,sp
8003d10c:	24060001 	li	a2,1
8003d110:	ac260010 	sw	a2,16(at)
8003d114:	3c01810a 	lui	at,0x810a
8003d118:	2425b5e8 	addiu	a1,at,-18968
8003d11c:	27a40028 	addiu	a0,sp,40
8003d120:	afa4001c 	sw	a0,28(sp)
8003d124:	27a70040 	addiu	a3,sp,64
8003d128:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8003d12c:	00000000 	nop
8003d130:	8fa4001c 	lw	a0,28(sp)
8003d134:	8fa50020 	lw	a1,32(sp)
8003d138:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003d13c:	00000000 	nop

8003d140 <_ZN4core4cell30panic_already_mutably_borrowed17h7c6bf9e42b40f6e0E>:
fn panic_already_mutably_borrowed(err: BorrowError) -> ! {
8003d140:	27bdffa0 	addiu	sp,sp,-96
8003d144:	afbf005c 	sw	ra,92(sp)
8003d148:	afa40020 	sw	a0,32(sp)
8003d14c:	27a20027 	addiu	v0,sp,39
8003d150:	afa20048 	sw	v0,72(sp)
8003d154:	afa20054 	sw	v0,84(sp)
8003d158:	3c018004 	lui	at,0x8004
8003d15c:	2421d03c 	addiu	at,at,-12228
8003d160:	afa10058 	sw	at,88(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003d164:	afa2004c 	sw	v0,76(sp)
8003d168:	afa10050 	sw	at,80(sp)
    }
8003d16c:	8fa2004c 	lw	v0,76(sp)
8003d170:	8fa10050 	lw	at,80(sp)
    panic!("already mutably borrowed: {:?}", err)
8003d174:	afa20040 	sw	v0,64(sp)
8003d178:	afa10044 	sw	at,68(sp)
8003d17c:	03a00825 	move	at,sp
8003d180:	24060001 	li	a2,1
8003d184:	ac260010 	sw	a2,16(at)
8003d188:	3c01810a 	lui	at,0x810a
8003d18c:	2425b60c 	addiu	a1,at,-18932
8003d190:	27a40028 	addiu	a0,sp,40
8003d194:	afa4001c 	sw	a0,28(sp)
8003d198:	27a70040 	addiu	a3,sp,64
8003d19c:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8003d1a0:	00000000 	nop
8003d1a4:	8fa4001c 	lw	a0,28(sp)
8003d1a8:	8fa50020 	lw	a1,32(sp)
8003d1ac:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003d1b0:	00000000 	nop

8003d1b4 <_ZN4core4char7convert18from_u32_unchecked17ha8125af4d1c33174E>:
}

/// Converts a `u32` to a `char`, ignoring validity. See [`char::from_u32_unchecked`].
#[inline]
#[must_use]
pub(super) const unsafe fn from_u32_unchecked(i: u32) -> char {
8003d1b4:	27bdffe0 	addiu	sp,sp,-32
8003d1b8:	afbf001c 	sw	ra,28(sp)
8003d1bc:	afa40014 	sw	a0,20(sp)
8003d1c0:	afa40018 	sw	a0,24(sp)
    // SAFETY: the caller must guarantee that `i` is a valid char value.
    unsafe {
        assert_unsafe_precondition!(
8003d1c4:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8003d1c8:	00000000 	nop
8003d1cc:	14400008 	bnez	v0,8003d1f0 <_ZN4core4char7convert18from_u32_unchecked17ha8125af4d1c33174E+0x3c>
8003d1d0:	00000000 	nop
8003d1d4:	0800f477 	j	8003d1dc <_ZN4core4char7convert18from_u32_unchecked17ha8125af4d1c33174E+0x28>
8003d1d8:	00000000 	nop
            "invalid value for `char`",
            (i: u32 = i) => char_try_from_u32(i).is_ok()
        );
        transmute(i)
    }
}
8003d1dc:	8fa20014 	lw	v0,20(sp)
8003d1e0:	8fbf001c 	lw	ra,28(sp)
8003d1e4:	27bd0020 	addiu	sp,sp,32
8003d1e8:	03e00008 	jr	ra
8003d1ec:	00000000 	nop
        assert_unsafe_precondition!(
8003d1f0:	8fa40014 	lw	a0,20(sp)
8003d1f4:	0c0123bb 	jal	80048eec <_ZN4core4char7convert18from_u32_unchecked18precondition_check17h36fa9621690ca902E>
8003d1f8:	00000000 	nop
8003d1fc:	0800f477 	j	8003d1dc <_ZN4core4char7convert18from_u32_unchecked17ha8125af4d1c33174E+0x28>
8003d200:	00000000 	nop

8003d204 <_ZN4core4char7convert64_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$char$GT$4from17h3cd4ae837407df41E>:
    /// let u = 32 as u8;
    /// let c = char::from(u);
    /// assert!(4 == mem::size_of_val(&c))
    /// ```
    #[inline]
    fn from(i: u8) -> Self {
8003d204:	27bdfff8 	addiu	sp,sp,-8
8003d208:	a3a40007 	sb	a0,7(sp)
        i as char
8003d20c:	308200ff 	andi	v0,a0,0xff
8003d210:	27bd0008 	addiu	sp,sp,8
    }
8003d214:	03e00008 	jr	ra
8003d218:	00000000 	nop

8003d21c <_ZN4core4char7convert17char_try_from_u3217h8a0cd4dc4cb0f4a0E>:
        }
    }
}

#[inline]
const fn char_try_from_u32(i: u32) -> Result<char, CharTryFromError> {
8003d21c:	27bdffe8 	addiu	sp,sp,-24
8003d220:	afa40004 	sw	a0,4(sp)
8003d224:	afa4000c 	sw	a0,12(sp)
    //
    // Subtracting 0x800 causes 0x0000..0x0800 to wrap, meaning that a single
    // unsigned comparison against 0x110000 - 0x800 will detect both the wrapped
    // surrogate range as well as the numbers originally larger than 0x110000.
    //
    if (i ^ 0xD800).wrapping_sub(0x800) >= 0x110000 - 0x800 {
8003d228:	3881d800 	xori	at,a0,0xd800
8003d22c:	afa10010 	sw	at,16(sp)
8003d230:	24020800 	li	v0,2048
8003d234:	afa20014 	sw	v0,20(sp)
            intrinsics::wrapping_sub(self, rhs)
8003d238:	2422f800 	addiu	v0,at,-2048
8003d23c:	3c010010 	lui	at,0x10
8003d240:	3421f7ff 	ori	at,at,0xf7ff
8003d244:	0022082b 	sltu	at,at,v0
8003d248:	14200007 	bnez	at,8003d268 <_ZN4core4char7convert17char_try_from_u3217h8a0cd4dc4cb0f4a0E+0x4c>
8003d24c:	00000000 	nop
8003d250:	0800f496 	j	8003d258 <_ZN4core4char7convert17char_try_from_u3217h8a0cd4dc4cb0f4a0E+0x3c>
8003d254:	00000000 	nop
        Err(CharTryFromError(()))
    } else {
        // SAFETY: checked that it's a legal unicode value
        Ok(unsafe { transmute(i) })
8003d258:	8fa10004 	lw	at,4(sp)
8003d25c:	afa10008 	sw	at,8(sp)
    if (i ^ 0xD800).wrapping_sub(0x800) >= 0x110000 - 0x800 {
8003d260:	0800f49e 	j	8003d278 <_ZN4core4char7convert17char_try_from_u3217h8a0cd4dc4cb0f4a0E+0x5c>
8003d264:	00000000 	nop
8003d268:	3c010011 	lui	at,0x11
        Err(CharTryFromError(()))
8003d26c:	afa10008 	sw	at,8(sp)
    if (i ^ 0xD800).wrapping_sub(0x800) >= 0x110000 - 0x800 {
8003d270:	0800f49e 	j	8003d278 <_ZN4core4char7convert17char_try_from_u3217h8a0cd4dc4cb0f4a0E+0x5c>
8003d274:	00000000 	nop
    }
}
8003d278:	8fa20008 	lw	v0,8(sp)
8003d27c:	27bd0018 	addiu	sp,sp,24
8003d280:	03e00008 	jr	ra
8003d284:	00000000 	nop

8003d288 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$18from_u32_unchecked17h9f49626bc6b588f7E>:
    pub const unsafe fn from_u32_unchecked(i: u32) -> char {
8003d288:	27bdffe8 	addiu	sp,sp,-24
8003d28c:	afbf0014 	sw	ra,20(sp)
8003d290:	afa40010 	sw	a0,16(sp)
        unsafe { super::convert::from_u32_unchecked(i) }
8003d294:	0c00f46d 	jal	8003d1b4 <_ZN4core4char7convert18from_u32_unchecked17ha8125af4d1c33174E>
8003d298:	00000000 	nop
    }
8003d29c:	8fbf0014 	lw	ra,20(sp)
8003d2a0:	27bd0018 	addiu	sp,sp,24
8003d2a4:	03e00008 	jr	ra
8003d2a8:	00000000 	nop

8003d2ac <_ZN4core4char7methods22_$LT$impl$u20$char$GT$14escape_unicode17h9e633e122dbe17d1E>:
    pub fn escape_unicode(self) -> EscapeUnicode {
8003d2ac:	27bdffe0 	addiu	sp,sp,-32
8003d2b0:	afbf001c 	sw	ra,28(sp)
8003d2b4:	00800825 	move	at,a0
8003d2b8:	afa10014 	sw	at,20(sp)
8003d2bc:	afa50018 	sw	a1,24(sp)
        EscapeUnicode::new(self)
8003d2c0:	0c00f5b0 	jal	8003d6c0 <_ZN4core4char13EscapeUnicode3new17h87023c6b1518ea8bE>
8003d2c4:	00000000 	nop
8003d2c8:	8fa20014 	lw	v0,20(sp)
    }
8003d2cc:	8fbf001c 	lw	ra,28(sp)
8003d2d0:	27bd0020 	addiu	sp,sp,32
8003d2d4:	03e00008 	jr	ra
8003d2d8:	00000000 	nop

8003d2dc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E>:
    pub(crate) fn escape_debug_ext(self, args: EscapeDebugExtArgs) -> EscapeDebug {
8003d2dc:	27bdffa8 	addiu	sp,sp,-88
8003d2e0:	afbf0054 	sw	ra,84(sp)
8003d2e4:	afa5001c 	sw	a1,28(sp)
8003d2e8:	afa40020 	sw	a0,32(sp)
8003d2ec:	afa40024 	sw	a0,36(sp)
8003d2f0:	00060c02 	srl	at,a2,0x10
8003d2f4:	a3a1002e 	sb	at,46(sp)
8003d2f8:	a7a6002c 	sh	a2,44(sp)
8003d2fc:	93a1002e 	lbu	at,46(sp)
8003d300:	a3a1002a 	sb	at,42(sp)
8003d304:	97a1002c 	lhu	at,44(sp)
8003d308:	a7a10028 	sh	at,40(sp)
8003d30c:	afa50050 	sw	a1,80(sp)
        match self {
8003d310:	10a0002d 	beqz	a1,8003d3c8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0xec>
8003d314:	00000000 	nop
8003d318:	0800f4c8 	j	8003d320 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x44>
8003d31c:	00000000 	nop
8003d320:	8fa1001c 	lw	at,28(sp)
8003d324:	24020009 	li	v0,9
8003d328:	1022002f 	beq	at,v0,8003d3e8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x10c>
8003d32c:	00000000 	nop
8003d330:	0800f4ce 	j	8003d338 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x5c>
8003d334:	00000000 	nop
8003d338:	8fa1001c 	lw	at,28(sp)
8003d33c:	2402000a 	li	v0,10
8003d340:	10220039 	beq	at,v0,8003d428 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x14c>
8003d344:	00000000 	nop
8003d348:	0800f4d4 	j	8003d350 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x74>
8003d34c:	00000000 	nop
8003d350:	8fa1001c 	lw	at,28(sp)
8003d354:	2402000d 	li	v0,13
8003d358:	1022002b 	beq	at,v0,8003d408 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x12c>
8003d35c:	00000000 	nop
8003d360:	0800f4da 	j	8003d368 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x8c>
8003d364:	00000000 	nop
8003d368:	8fa1001c 	lw	at,28(sp)
8003d36c:	24020022 	li	v0,34
8003d370:	1022003d 	beq	at,v0,8003d468 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x18c>
8003d374:	00000000 	nop
8003d378:	0800f4e0 	j	8003d380 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0xa4>
8003d37c:	00000000 	nop
8003d380:	8fa1001c 	lw	at,28(sp)
8003d384:	24020027 	li	v0,39
8003d388:	1022003d 	beq	at,v0,8003d480 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1a4>
8003d38c:	00000000 	nop
8003d390:	0800f4e6 	j	8003d398 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0xbc>
8003d394:	00000000 	nop
8003d398:	8fa1001c 	lw	at,28(sp)
8003d39c:	2402005c 	li	v0,92
8003d3a0:	10220029 	beq	at,v0,8003d448 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x16c>
8003d3a4:	00000000 	nop
8003d3a8:	0800f4ec 	j	8003d3b0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0xd4>
8003d3ac:	00000000 	nop
            _ if args.escape_grapheme_extended && self.is_grapheme_extended() => {
8003d3b0:	93a10028 	lbu	at,40(sp)
8003d3b4:	30210001 	andi	at,at,0x1
8003d3b8:	14200053 	bnez	at,8003d508 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x22c>
8003d3bc:	00000000 	nop
8003d3c0:	0800f53b 	j	8003d4ec <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x210>
8003d3c4:	00000000 	nop
8003d3c8:	8fa40020 	lw	a0,32(sp)
8003d3cc:	24010030 	li	at,48
            '\0' => EscapeDebug::backslash(ascii::Char::Digit0),
8003d3d0:	a3a10031 	sb	at,49(sp)
8003d3d4:	93a50031 	lbu	a1,49(sp)
8003d3d8:	0c00f5f3 	jal	8003d7cc <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>
8003d3dc:	00000000 	nop
8003d3e0:	0800f526 	j	8003d498 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003d3e4:	00000000 	nop
8003d3e8:	8fa40020 	lw	a0,32(sp)
8003d3ec:	24010074 	li	at,116
            '\t' => EscapeDebug::backslash(ascii::Char::SmallT),
8003d3f0:	a3a10032 	sb	at,50(sp)
8003d3f4:	93a50032 	lbu	a1,50(sp)
8003d3f8:	0c00f5f3 	jal	8003d7cc <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>
8003d3fc:	00000000 	nop
8003d400:	0800f526 	j	8003d498 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003d404:	00000000 	nop
8003d408:	8fa40020 	lw	a0,32(sp)
8003d40c:	24010072 	li	at,114
            '\r' => EscapeDebug::backslash(ascii::Char::SmallR),
8003d410:	a3a10033 	sb	at,51(sp)
8003d414:	93a50033 	lbu	a1,51(sp)
8003d418:	0c00f5f3 	jal	8003d7cc <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>
8003d41c:	00000000 	nop
8003d420:	0800f526 	j	8003d498 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003d424:	00000000 	nop
8003d428:	8fa40020 	lw	a0,32(sp)
8003d42c:	2401006e 	li	at,110
            '\n' => EscapeDebug::backslash(ascii::Char::SmallN),
8003d430:	a3a10034 	sb	at,52(sp)
8003d434:	93a50034 	lbu	a1,52(sp)
8003d438:	0c00f5f3 	jal	8003d7cc <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>
8003d43c:	00000000 	nop
8003d440:	0800f526 	j	8003d498 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003d444:	00000000 	nop
8003d448:	8fa40020 	lw	a0,32(sp)
8003d44c:	2401005c 	li	at,92
            '\\' => EscapeDebug::backslash(ascii::Char::ReverseSolidus),
8003d450:	a3a10035 	sb	at,53(sp)
8003d454:	93a50035 	lbu	a1,53(sp)
8003d458:	0c00f5f3 	jal	8003d7cc <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>
8003d45c:	00000000 	nop
8003d460:	0800f526 	j	8003d498 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003d464:	00000000 	nop
            '\"' if args.escape_double_quote => EscapeDebug::backslash(ascii::Char::QuotationMark),
8003d468:	93a1002a 	lbu	at,42(sp)
8003d46c:	30210001 	andi	at,at,0x1
8003d470:	1420000e 	bnez	at,8003d4ac <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1d0>
8003d474:	00000000 	nop
8003d478:	0800f4ec 	j	8003d3b0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0xd4>
8003d47c:	00000000 	nop
            '\'' if args.escape_single_quote => EscapeDebug::backslash(ascii::Char::Apostrophe),
8003d480:	93a10029 	lbu	at,41(sp)
8003d484:	30210001 	andi	at,at,0x1
8003d488:	14200010 	bnez	at,8003d4cc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1f0>
8003d48c:	00000000 	nop
8003d490:	0800f4ec 	j	8003d3b0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0xd4>
8003d494:	00000000 	nop
    }
8003d498:	8fa20024 	lw	v0,36(sp)
8003d49c:	8fbf0054 	lw	ra,84(sp)
8003d4a0:	27bd0058 	addiu	sp,sp,88
8003d4a4:	03e00008 	jr	ra
8003d4a8:	00000000 	nop
8003d4ac:	8fa40020 	lw	a0,32(sp)
8003d4b0:	24010022 	li	at,34
            '\"' if args.escape_double_quote => EscapeDebug::backslash(ascii::Char::QuotationMark),
8003d4b4:	a3a10036 	sb	at,54(sp)
8003d4b8:	93a50036 	lbu	a1,54(sp)
8003d4bc:	0c00f5f3 	jal	8003d7cc <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>
8003d4c0:	00000000 	nop
8003d4c4:	0800f526 	j	8003d498 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003d4c8:	00000000 	nop
8003d4cc:	8fa40020 	lw	a0,32(sp)
8003d4d0:	24010027 	li	at,39
            '\'' if args.escape_single_quote => EscapeDebug::backslash(ascii::Char::Apostrophe),
8003d4d4:	a3a10037 	sb	at,55(sp)
8003d4d8:	93a50037 	lbu	a1,55(sp)
8003d4dc:	0c00f5f3 	jal	8003d7cc <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>
8003d4e0:	00000000 	nop
8003d4e4:	0800f526 	j	8003d498 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003d4e8:	00000000 	nop
            _ if is_printable(self) => EscapeDebug::printable(self),
8003d4ec:	8fa4001c 	lw	a0,28(sp)
8003d4f0:	0c011df1 	jal	800477c4 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE>
8003d4f4:	00000000 	nop
8003d4f8:	14400020 	bnez	v0,8003d57c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x2a0>
8003d4fc:	00000000 	nop
8003d500:	0800f554 	j	8003d550 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x274>
8003d504:	00000000 	nop
            _ if args.escape_grapheme_extended && self.is_grapheme_extended() => {
8003d508:	8fa4001c 	lw	a0,28(sp)
8003d50c:	0c00f56e 	jal	8003d5b8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$20is_grapheme_extended17h1631973bee7394f0E>
8003d510:	00000000 	nop
8003d514:	1040fff5 	beqz	v0,8003d4ec <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x210>
8003d518:	00000000 	nop
8003d51c:	0800f549 	j	8003d524 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x248>
8003d520:	00000000 	nop
                EscapeDebug::from_unicode(self.escape_unicode())
8003d524:	8fa5001c 	lw	a1,28(sp)
8003d528:	27a40038 	addiu	a0,sp,56
8003d52c:	afa40018 	sw	a0,24(sp)
8003d530:	0c00f4ab 	jal	8003d2ac <_ZN4core4char7methods22_$LT$impl$u20$char$GT$14escape_unicode17h9e633e122dbe17d1E>
8003d534:	00000000 	nop
8003d538:	8fa40020 	lw	a0,32(sp)
8003d53c:	8fa50018 	lw	a1,24(sp)
8003d540:	0c00f61d 	jal	8003d874 <_ZN4core4char11EscapeDebug12from_unicode17h5a7561e3f92feba8E>
8003d544:	00000000 	nop
8003d548:	0800f526 	j	8003d498 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003d54c:	00000000 	nop
            _ => EscapeDebug::from_unicode(self.escape_unicode()),
8003d550:	8fa5001c 	lw	a1,28(sp)
8003d554:	27a40044 	addiu	a0,sp,68
8003d558:	afa40014 	sw	a0,20(sp)
8003d55c:	0c00f4ab 	jal	8003d2ac <_ZN4core4char7methods22_$LT$impl$u20$char$GT$14escape_unicode17h9e633e122dbe17d1E>
8003d560:	00000000 	nop
8003d564:	8fa40020 	lw	a0,32(sp)
8003d568:	8fa50014 	lw	a1,20(sp)
8003d56c:	0c00f61d 	jal	8003d874 <_ZN4core4char11EscapeDebug12from_unicode17h5a7561e3f92feba8E>
8003d570:	00000000 	nop
8003d574:	0800f526 	j	8003d498 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003d578:	00000000 	nop
            _ if is_printable(self) => EscapeDebug::printable(self),
8003d57c:	8fa5001c 	lw	a1,28(sp)
8003d580:	8fa40020 	lw	a0,32(sp)
8003d584:	0c00f5e4 	jal	8003d790 <_ZN4core4char11EscapeDebug9printable17h28c6cc3edd9ab119E>
8003d588:	00000000 	nop
8003d58c:	0800f526 	j	8003d498 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003d590:	00000000 	nop

8003d594 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$8len_utf817hb6087b2bc95d3ee8E>:
    pub const fn len_utf8(self) -> usize {
8003d594:	27bdffe8 	addiu	sp,sp,-24
8003d598:	afbf0014 	sw	ra,20(sp)
8003d59c:	afa40010 	sw	a0,16(sp)
        len_utf8(self as u32)
8003d5a0:	0c00f587 	jal	8003d61c <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E>
8003d5a4:	00000000 	nop
    }
8003d5a8:	8fbf0014 	lw	ra,20(sp)
8003d5ac:	27bd0018 	addiu	sp,sp,24
8003d5b0:	03e00008 	jr	ra
8003d5b4:	00000000 	nop

8003d5b8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$20is_grapheme_extended17h1631973bee7394f0E>:
    pub(crate) fn is_grapheme_extended(self) -> bool {
8003d5b8:	27bdffe0 	addiu	sp,sp,-32
8003d5bc:	afbf001c 	sw	ra,28(sp)
8003d5c0:	afa40010 	sw	a0,16(sp)
8003d5c4:	afa40018 	sw	a0,24(sp)
        self > '\x7f' && unicode::Grapheme_Extend(self)
8003d5c8:	2c810080 	sltiu	at,a0,128
8003d5cc:	10200007 	beqz	at,8003d5ec <_ZN4core4char7methods22_$LT$impl$u20$char$GT$20is_grapheme_extended17h1631973bee7394f0E+0x34>
8003d5d0:	00000000 	nop
8003d5d4:	0800f577 	j	8003d5dc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$20is_grapheme_extended17h1631973bee7394f0E+0x24>
8003d5d8:	00000000 	nop
8003d5dc:	24010000 	li	at,0
8003d5e0:	a3a00017 	sb	zero,23(sp)
8003d5e4:	0800f581 	j	8003d604 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$20is_grapheme_extended17h1631973bee7394f0E+0x4c>
8003d5e8:	00000000 	nop
8003d5ec:	8fa40010 	lw	a0,16(sp)
8003d5f0:	0c012bb6 	jal	8004aed8 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE>
8003d5f4:	00000000 	nop
8003d5f8:	a3a20017 	sb	v0,23(sp)
8003d5fc:	0800f581 	j	8003d604 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$20is_grapheme_extended17h1631973bee7394f0E+0x4c>
8003d600:	00000000 	nop
    }
8003d604:	93a10017 	lbu	at,23(sp)
8003d608:	30220001 	andi	v0,at,0x1
8003d60c:	8fbf001c 	lw	ra,28(sp)
8003d610:	27bd0020 	addiu	sp,sp,32
8003d614:	03e00008 	jr	ra
8003d618:	00000000 	nop

8003d61c <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E>:
const fn len_utf8(code: u32) -> usize {
8003d61c:	27bdfff0 	addiu	sp,sp,-16
8003d620:	afa40004 	sw	a0,4(sp)
8003d624:	afa4000c 	sw	a0,12(sp)
    if code < MAX_ONE_B {
8003d628:	2c810080 	sltiu	at,a0,128
8003d62c:	14200009 	bnez	at,8003d654 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x38>
8003d630:	00000000 	nop
8003d634:	0800f58f 	j	8003d63c <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x20>
8003d638:	00000000 	nop
    } else if code < MAX_TWO_B {
8003d63c:	8fa10004 	lw	at,4(sp)
8003d640:	2c210800 	sltiu	at,at,2048
8003d644:	1420000e 	bnez	at,8003d680 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x64>
8003d648:	00000000 	nop
8003d64c:	0800f599 	j	8003d664 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x48>
8003d650:	00000000 	nop
8003d654:	24010001 	li	at,1
        1
8003d658:	afa10008 	sw	at,8(sp)
    if code < MAX_ONE_B {
8003d65c:	0800f5ac 	j	8003d6b0 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x94>
8003d660:	00000000 	nop
8003d664:	8fa10004 	lw	at,4(sp)
8003d668:	3c020001 	lui	v0,0x1
    } else if code < MAX_THREE_B {
8003d66c:	0022082b 	sltu	at,at,v0
8003d670:	1420000b 	bnez	at,8003d6a0 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x84>
8003d674:	00000000 	nop
8003d678:	0800f5a4 	j	8003d690 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x74>
8003d67c:	00000000 	nop
8003d680:	24010002 	li	at,2
        2
8003d684:	afa10008 	sw	at,8(sp)
    } else if code < MAX_TWO_B {
8003d688:	0800f5ac 	j	8003d6b0 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x94>
8003d68c:	00000000 	nop
8003d690:	24010004 	li	at,4
        4
8003d694:	afa10008 	sw	at,8(sp)
    } else if code < MAX_THREE_B {
8003d698:	0800f5ac 	j	8003d6b0 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x94>
8003d69c:	00000000 	nop
8003d6a0:	24010003 	li	at,3
        3
8003d6a4:	afa10008 	sw	at,8(sp)
    } else if code < MAX_THREE_B {
8003d6a8:	0800f5ac 	j	8003d6b0 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x94>
8003d6ac:	00000000 	nop
}
8003d6b0:	8fa20008 	lw	v0,8(sp)
8003d6b4:	27bd0010 	addiu	sp,sp,16
8003d6b8:	03e00008 	jr	ra
8003d6bc:	00000000 	nop

8003d6c0 <_ZN4core4char13EscapeUnicode3new17h87023c6b1518ea8bE>:
#[derive(Clone, Debug)]
#[stable(feature = "rust1", since = "1.0.0")]
pub struct EscapeUnicode(escape::EscapeIterInner<10>);

impl EscapeUnicode {
    fn new(chr: char) -> Self {
8003d6c0:	27bdffb8 	addiu	sp,sp,-72
8003d6c4:	afbf0044 	sw	ra,68(sp)
8003d6c8:	afa40010 	sw	a0,16(sp)
8003d6cc:	afa40014 	sw	a0,20(sp)
8003d6d0:	afa5003c 	sw	a1,60(sp)
8003d6d4:	24010000 	li	at,0
        let mut data = [ascii::Char::Null; 10];
8003d6d8:	a3a00023 	sb	zero,35(sp)
8003d6dc:	93a10023 	lbu	at,35(sp)
8003d6e0:	00011200 	sll	v0,at,0x8
8003d6e4:	00411825 	or	v1,v0,at
8003d6e8:	a7a30020 	sh	v1,32(sp)
8003d6ec:	00011400 	sll	v0,at,0x10
8003d6f0:	00431025 	or	v0,v0,v1
8003d6f4:	00010e00 	sll	at,at,0x18
8003d6f8:	00220825 	or	at,at,v0
8003d6fc:	afa1001c 	sw	at,28(sp)
8003d700:	afa10018 	sw	at,24(sp)
8003d704:	27a40018 	addiu	a0,sp,24
        let range = escape::escape_unicode_into(&mut data, chr);
8003d708:	0c011f44 	jal	80047d10 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE>
8003d70c:	00000000 	nop
8003d710:	00403025 	move	a2,v0
8003d714:	00603825 	move	a3,v1
8003d718:	a3a60042 	sb	a2,66(sp)
8003d71c:	a3a70043 	sb	a3,67(sp)
        Self(escape::EscapeIterInner::new(data, range))
8003d720:	97a10020 	lhu	at,32(sp)
8003d724:	a7a10038 	sh	at,56(sp)
8003d728:	8fa1001c 	lw	at,28(sp)
8003d72c:	afa10034 	sw	at,52(sp)
8003d730:	8fa10018 	lw	at,24(sp)
8003d734:	afa10030 	sw	at,48(sp)
8003d738:	27a40024 	addiu	a0,sp,36
8003d73c:	27a50030 	addiu	a1,sp,48
8003d740:	0c012057 	jal	8004815c <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE>
8003d744:	00000000 	nop
8003d748:	8fa40010 	lw	a0,16(sp)
8003d74c:	8fa20014 	lw	v0,20(sp)
8003d750:	8ba5002f 	lwl	a1,47(sp)
8003d754:	9ba5002c 	lwr	a1,44(sp)
8003d758:	a885000b 	swl	a1,11(a0)
8003d75c:	8ba3002b 	lwl	v1,43(sp)
8003d760:	9ba30028 	lwr	v1,40(sp)
8003d764:	a8830007 	swl	v1,7(a0)
8003d768:	8ba10027 	lwl	at,39(sp)
8003d76c:	9ba10024 	lwr	at,36(sp)
8003d770:	a8810003 	swl	at,3(a0)
8003d774:	b8850008 	swr	a1,8(a0)
8003d778:	b8830004 	swr	v1,4(a0)
8003d77c:	b8810000 	swr	at,0(a0)
    }
8003d780:	8fbf0044 	lw	ra,68(sp)
8003d784:	27bd0048 	addiu	sp,sp,72
8003d788:	03e00008 	jr	ra
8003d78c:	00000000 	nop

8003d790 <_ZN4core4char11EscapeDebug9printable17h28c6cc3edd9ab119E>:
    Bytes(escape::EscapeIterInner<10>),
    Char(char),
}

impl EscapeDebug {
    fn printable(chr: char) -> Self {
8003d790:	27bdfff0 	addiu	sp,sp,-16
8003d794:	00801025 	move	v0,a0
8003d798:	afa5000c 	sw	a1,12(sp)
        Self(EscapeDebugInner::Char(chr))
8003d79c:	afa50004 	sw	a1,4(sp)
8003d7a0:	24010080 	li	at,128
8003d7a4:	a3a10000 	sb	at,0(sp)
8003d7a8:	8fa10008 	lw	at,8(sp)
8003d7ac:	ac810008 	sw	at,8(a0)
8003d7b0:	8fa10004 	lw	at,4(sp)
8003d7b4:	ac810004 	sw	at,4(a0)
8003d7b8:	8fa10000 	lw	at,0(sp)
8003d7bc:	ac810000 	sw	at,0(a0)
8003d7c0:	27bd0010 	addiu	sp,sp,16
    }
8003d7c4:	03e00008 	jr	ra
8003d7c8:	00000000 	nop

8003d7cc <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>:

    fn backslash(chr: ascii::Char) -> Self {
8003d7cc:	27bdffc0 	addiu	sp,sp,-64
8003d7d0:	afbf003c 	sw	ra,60(sp)
8003d7d4:	afa40010 	sw	a0,16(sp)
8003d7d8:	afa40014 	sw	a0,20(sp)
8003d7dc:	a3a50037 	sb	a1,55(sp)
8003d7e0:	2401005c 	li	at,92
        let data = [ascii::Char::ReverseSolidus, chr];
8003d7e4:	a3a1001b 	sb	at,27(sp)
8003d7e8:	93a1001b 	lbu	at,27(sp)
8003d7ec:	a3a10019 	sb	at,25(sp)
8003d7f0:	a3a5001a 	sb	a1,26(sp)
        let iter = escape::EscapeIterInner::from_array(data);
8003d7f4:	93a1001a 	lbu	at,26(sp)
8003d7f8:	00010a00 	sll	at,at,0x8
8003d7fc:	93a20019 	lbu	v0,25(sp)
8003d800:	00220825 	or	at,at,v0
8003d804:	a7a10038 	sh	at,56(sp)
8003d808:	97a10038 	lhu	at,56(sp)
8003d80c:	a7a1003a 	sh	at,58(sp)
8003d810:	97a5003a 	lhu	a1,58(sp)
8003d814:	27a4001c 	addiu	a0,sp,28
8003d818:	0c0120d5 	jal	80048354 <_ZN4core6escape24EscapeIterInner$LT$_$GT$10from_array17hd229c07af8ede3fdE>
8003d81c:	00000000 	nop
8003d820:	8fa40010 	lw	a0,16(sp)
8003d824:	8fa20014 	lw	v0,20(sp)
        Self(EscapeDebugInner::Bytes(iter))
8003d828:	8ba10027 	lwl	at,39(sp)
8003d82c:	9ba10024 	lwr	at,36(sp)
8003d830:	afa10030 	sw	at,48(sp)
8003d834:	8ba10023 	lwl	at,35(sp)
8003d838:	9ba10020 	lwr	at,32(sp)
8003d83c:	afa1002c 	sw	at,44(sp)
8003d840:	8ba1001f 	lwl	at,31(sp)
8003d844:	9ba1001c 	lwr	at,28(sp)
8003d848:	afa10028 	sw	at,40(sp)
8003d84c:	8fa10030 	lw	at,48(sp)
8003d850:	ac810008 	sw	at,8(a0)
8003d854:	8fa1002c 	lw	at,44(sp)
8003d858:	ac810004 	sw	at,4(a0)
8003d85c:	8fa10028 	lw	at,40(sp)
8003d860:	ac810000 	sw	at,0(a0)
    }
8003d864:	8fbf003c 	lw	ra,60(sp)
8003d868:	27bd0040 	addiu	sp,sp,64
8003d86c:	03e00008 	jr	ra
8003d870:	00000000 	nop

8003d874 <_ZN4core4char11EscapeDebug12from_unicode17h5a7561e3f92feba8E>:

    fn from_unicode(esc: EscapeUnicode) -> Self {
8003d874:	27bdffe8 	addiu	sp,sp,-24
8003d878:	00801025 	move	v0,a0
        Self(EscapeDebugInner::Bytes(esc.0))
8003d87c:	88a1000b 	lwl	at,11(a1)
8003d880:	98a10008 	lwr	at,8(a1)
8003d884:	afa10014 	sw	at,20(sp)
8003d888:	88a10007 	lwl	at,7(a1)
8003d88c:	98a10004 	lwr	at,4(a1)
8003d890:	afa10010 	sw	at,16(sp)
8003d894:	88a10003 	lwl	at,3(a1)
8003d898:	98a10000 	lwr	at,0(a1)
8003d89c:	afa1000c 	sw	at,12(sp)
8003d8a0:	8fa10014 	lw	at,20(sp)
8003d8a4:	afa10008 	sw	at,8(sp)
8003d8a8:	8fa10010 	lw	at,16(sp)
8003d8ac:	afa10004 	sw	at,4(sp)
8003d8b0:	8fa1000c 	lw	at,12(sp)
8003d8b4:	afa10000 	sw	at,0(sp)
8003d8b8:	8fa10008 	lw	at,8(sp)
8003d8bc:	ac810008 	sw	at,8(a0)
8003d8c0:	8fa10004 	lw	at,4(sp)
8003d8c4:	ac810004 	sw	at,4(a0)
8003d8c8:	8fa10000 	lw	at,0(sp)
8003d8cc:	ac810000 	sw	at,0(a0)
8003d8d0:	27bd0018 	addiu	sp,sp,24
    }
8003d8d4:	03e00008 	jr	ra
8003d8d8:	00000000 	nop

8003d8dc <_ZN4core4char11EscapeDebug5clear17hb6d2810493a678a1E>:

    fn clear(&mut self) {
8003d8dc:	27bdffc8 	addiu	sp,sp,-56
8003d8e0:	afbf0034 	sw	ra,52(sp)
8003d8e4:	afa40014 	sw	a0,20(sp)
8003d8e8:	afa40030 	sw	a0,48(sp)
8003d8ec:	27a40018 	addiu	a0,sp,24
        let bytes = escape::EscapeIterInner::from_array([]);
8003d8f0:	0c0120a0 	jal	80048280 <_ZN4core6escape24EscapeIterInner$LT$_$GT$10from_array17h2d26a693fb365472E>
8003d8f4:	00000000 	nop
8003d8f8:	8fa40014 	lw	a0,20(sp)
        self.0 = EscapeDebugInner::Bytes(bytes);
8003d8fc:	8ba10023 	lwl	at,35(sp)
8003d900:	9ba10020 	lwr	at,32(sp)
8003d904:	afa1002c 	sw	at,44(sp)
8003d908:	8ba1001f 	lwl	at,31(sp)
8003d90c:	9ba1001c 	lwr	at,28(sp)
8003d910:	afa10028 	sw	at,40(sp)
8003d914:	8ba1001b 	lwl	at,27(sp)
8003d918:	9ba10018 	lwr	at,24(sp)
8003d91c:	afa10024 	sw	at,36(sp)
8003d920:	8fa1002c 	lw	at,44(sp)
8003d924:	ac810008 	sw	at,8(a0)
8003d928:	8fa10028 	lw	at,40(sp)
8003d92c:	ac810004 	sw	at,4(a0)
8003d930:	8fa10024 	lw	at,36(sp)
8003d934:	ac810000 	sw	at,0(a0)
    }
8003d938:	8fbf0034 	lw	ra,52(sp)
8003d93c:	27bd0038 	addiu	sp,sp,56
8003d940:	03e00008 	jr	ra
8003d944:	00000000 	nop

8003d948 <_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4482fd071e18f61bE>:
#[stable(feature = "char_escape_debug", since = "1.20.0")]
impl Iterator for EscapeDebug {
    type Item = char;

    #[inline]
    fn next(&mut self) -> Option<char> {
8003d948:	27bdffd0 	addiu	sp,sp,-48
8003d94c:	afbf002c 	sw	ra,44(sp)
8003d950:	afa40018 	sw	a0,24(sp)
8003d954:	afa40020 	sw	a0,32(sp)
        match self.0 {
8003d958:	90810000 	lbu	at,0(a0)
8003d95c:	24020080 	li	v0,128
8003d960:	1022000e 	beq	at,v0,8003d99c <_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4482fd071e18f61bE+0x54>
8003d964:	00000000 	nop
8003d968:	0800f65c 	j	8003d970 <_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4482fd071e18f61bE+0x28>
8003d96c:	00000000 	nop
            EscapeDebugInner::Bytes(ref mut bytes) => bytes.next().map(char::from),
8003d970:	8fa40018 	lw	a0,24(sp)
8003d974:	afa40024 	sw	a0,36(sp)
8003d978:	0c012124 	jal	80048490 <_ZN4core6escape24EscapeIterInner$LT$_$GT$4next17h46da1e292175aea6E>
8003d97c:	00000000 	nop
8003d980:	00602825 	move	a1,v1
8003d984:	30440001 	andi	a0,v0,0x1
8003d988:	0c00f9ef 	jal	8003e7bc <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E>
8003d98c:	00000000 	nop
8003d990:	afa2001c 	sw	v0,28(sp)
8003d994:	0800f671 	j	8003d9c4 <_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4482fd071e18f61bE+0x7c>
8003d998:	00000000 	nop
            EscapeDebugInner::Char(chr) => {
8003d99c:	8fa40018 	lw	a0,24(sp)
8003d9a0:	8c810004 	lw	at,4(a0)
8003d9a4:	afa10014 	sw	at,20(sp)
8003d9a8:	afa10028 	sw	at,40(sp)
                self.clear();
8003d9ac:	0c00f637 	jal	8003d8dc <_ZN4core4char11EscapeDebug5clear17hb6d2810493a678a1E>
8003d9b0:	00000000 	nop
8003d9b4:	8fa10014 	lw	at,20(sp)
                Some(chr)
8003d9b8:	afa1001c 	sw	at,28(sp)
            }
8003d9bc:	0800f671 	j	8003d9c4 <_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4482fd071e18f61bE+0x7c>
8003d9c0:	00000000 	nop
        }
    }
8003d9c4:	8fa2001c 	lw	v0,28(sp)
8003d9c8:	8fbf002c 	lw	ra,44(sp)
8003d9cc:	27bd0030 	addiu	sp,sp,48
8003d9d0:	03e00008 	jr	ra
8003d9d4:	00000000 	nop

8003d9d8 <_ZN93_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..exact_size..ExactSizeIterator$GT$3len17hf4bcfdda21cc47c0E>:
    }
}

#[stable(feature = "char_escape_debug", since = "1.20.0")]
impl ExactSizeIterator for EscapeDebug {
    fn len(&self) -> usize {
8003d9d8:	27bdffd8 	addiu	sp,sp,-40
8003d9dc:	afbf0024 	sw	ra,36(sp)
8003d9e0:	afa40014 	sw	a0,20(sp)
8003d9e4:	afa4001c 	sw	a0,28(sp)
        match &self.0 {
8003d9e8:	90810000 	lbu	at,0(a0)
8003d9ec:	24020080 	li	v0,128
8003d9f0:	1022000a 	beq	at,v0,8003da1c <_ZN93_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..exact_size..ExactSizeIterator$GT$3len17hf4bcfdda21cc47c0E+0x44>
8003d9f4:	00000000 	nop
8003d9f8:	0800f680 	j	8003da00 <_ZN93_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..exact_size..ExactSizeIterator$GT$3len17hf4bcfdda21cc47c0E+0x28>
8003d9fc:	00000000 	nop
            EscapeDebugInner::Bytes(bytes) => bytes.len(),
8003da00:	8fa40014 	lw	a0,20(sp)
8003da04:	afa40020 	sw	a0,32(sp)
8003da08:	0c01210f 	jal	8004843c <_ZN4core6escape24EscapeIterInner$LT$_$GT$3len17h46a78ba788686e9dE>
8003da0c:	00000000 	nop
8003da10:	afa20018 	sw	v0,24(sp)
8003da14:	0800f68b 	j	8003da2c <_ZN93_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..exact_size..ExactSizeIterator$GT$3len17hf4bcfdda21cc47c0E+0x54>
8003da18:	00000000 	nop
8003da1c:	24010001 	li	at,1
            EscapeDebugInner::Char(_) => 1,
8003da20:	afa10018 	sw	at,24(sp)
8003da24:	0800f68b 	j	8003da2c <_ZN93_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..exact_size..ExactSizeIterator$GT$3len17hf4bcfdda21cc47c0E+0x54>
8003da28:	00000000 	nop
        }
    }
8003da2c:	8fa20018 	lw	v0,24(sp)
8003da30:	8fbf0024 	lw	ra,36(sp)
8003da34:	27bd0028 	addiu	sp,sp,40
8003da38:	03e00008 	jr	ra
8003da3c:	00000000 	nop

8003da40 <_ZN4core4iter8adapters6cloned15Cloned$LT$I$GT$3new17h9502bc74172f8b49E>:
pub struct Cloned<I> {
    it: I,
}

impl<I> Cloned<I> {
    pub(in crate::iter) fn new(it: I) -> Cloned<I> {
8003da40:	27bdfff0 	addiu	sp,sp,-16
8003da44:	afa40008 	sw	a0,8(sp)
8003da48:	afa5000c 	sw	a1,12(sp)
        Cloned { it }
8003da4c:	afa40000 	sw	a0,0(sp)
8003da50:	afa50004 	sw	a1,4(sp)
    }
8003da54:	8fa20000 	lw	v0,0(sp)
8003da58:	8fa30004 	lw	v1,4(sp)
8003da5c:	27bd0010 	addiu	sp,sp,16
8003da60:	03e00008 	jr	ra
8003da64:	00000000 	nop

8003da68 <_ZN104_$LT$core..iter..adapters..cloned..Cloned$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h99c66ea835c86bdbE>:
    I: Iterator<Item = &'a T>,
    T: Clone,
{
    type Item = T;

    fn next(&mut self) -> Option<T> {
8003da68:	27bdffe8 	addiu	sp,sp,-24
8003da6c:	afbf0014 	sw	ra,20(sp)
8003da70:	afa40010 	sw	a0,16(sp)
        self.it.next().cloned()
8003da74:	0c0128d1 	jal	8004a344 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE>
8003da78:	00000000 	nop
8003da7c:	00402025 	move	a0,v0
8003da80:	0c00faa0 	jal	8003ea80 <_ZN4core6option19Option$LT$$RF$T$GT$6cloned17he089691e6463c91bE>
8003da84:	00000000 	nop
    }
8003da88:	8fbf0014 	lw	ra,20(sp)
8003da8c:	27bd0018 	addiu	sp,sp,24
8003da90:	03e00008 	jr	ra
8003da94:	00000000 	nop

8003da98 <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h088319821c4ff07bE>:
pub struct Enumerate<I> {
    iter: I,
    count: usize,
}
impl<I> Enumerate<I> {
    pub(in crate::iter) fn new(iter: I) -> Enumerate<I> {
8003da98:	27bdfff8 	addiu	sp,sp,-8
8003da9c:	00801025 	move	v0,a0
8003daa0:	afa50000 	sw	a1,0(sp)
8003daa4:	afa60004 	sw	a2,4(sp)
        Enumerate { iter, count: 0 }
8003daa8:	ac850000 	sw	a1,0(a0)
8003daac:	ac860004 	sw	a2,4(a0)
8003dab0:	ac800008 	sw	zero,8(a0)
8003dab4:	27bd0008 	addiu	sp,sp,8
    }
8003dab8:	03e00008 	jr	ra
8003dabc:	00000000 	nop

8003dac0 <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h517df8d8eacec18dE>:
    pub(in crate::iter) fn new(iter: I) -> Enumerate<I> {
8003dac0:	27bdfff8 	addiu	sp,sp,-8
8003dac4:	00801025 	move	v0,a0
8003dac8:	afa50000 	sw	a1,0(sp)
8003dacc:	afa60004 	sw	a2,4(sp)
        Enumerate { iter, count: 0 }
8003dad0:	ac850000 	sw	a1,0(a0)
8003dad4:	ac860004 	sw	a2,4(a0)
8003dad8:	ac800008 	sw	zero,8(a0)
8003dadc:	27bd0008 	addiu	sp,sp,8
    }
8003dae0:	03e00008 	jr	ra
8003dae4:	00000000 	nop

8003dae8 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E>:
    /// # Panics
    ///
    /// Might panic if the index of the element overflows a `usize`.
    #[inline]
    #[rustc_inherit_overflow_checks]
    fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {
8003dae8:	27bdffb8 	addiu	sp,sp,-72
8003daec:	afbf0044 	sw	ra,68(sp)
8003daf0:	afa4001c 	sw	a0,28(sp)
        let a = self.iter.next()?;
8003daf4:	afa40038 	sw	a0,56(sp)
8003daf8:	0c012941 	jal	8004a504 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E>
8003dafc:	00000000 	nop
8003db00:	00402025 	move	a0,v0
8003db04:	0c00faed 	jal	8003ebb4 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hd9e76cd92f378f0bE>
8003db08:	00000000 	nop
8003db0c:	afa2002c 	sw	v0,44(sp)
8003db10:	8fa1002c 	lw	at,44(sp)
8003db14:	10200011 	beqz	at,8003db5c <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E+0x74>
8003db18:	00000000 	nop
8003db1c:	0800f6c9 	j	8003db24 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E+0x3c>
8003db20:	00000000 	nop
8003db24:	8fa1001c 	lw	at,28(sp)
8003db28:	8fa2002c 	lw	v0,44(sp)
8003db2c:	afa20010 	sw	v0,16(sp)
8003db30:	afa2003c 	sw	v0,60(sp)
        let i = self.count;
8003db34:	8c220008 	lw	v0,8(at)
8003db38:	afa20014 	sw	v0,20(sp)
8003db3c:	afa20040 	sw	v0,64(sp)
        self.count += 1;
8003db40:	8c210008 	lw	at,8(at)
8003db44:	24210001 	addiu	at,at,1
8003db48:	afa10018 	sw	at,24(sp)
8003db4c:	10200016 	beqz	at,8003dba8 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E+0xc0>
8003db50:	00000000 	nop
8003db54:	0800f6dd 	j	8003db74 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E+0x8c>
8003db58:	00000000 	nop
        let a = self.iter.next()?;
8003db5c:	0c00fb13 	jal	8003ec4c <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h273a54921453764dE>
8003db60:	00000000 	nop
8003db64:	afa20024 	sw	v0,36(sp)
8003db68:	afa30028 	sw	v1,40(sp)
8003db6c:	0800f6ee 	j	8003dbb8 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E+0xd0>
8003db70:	00000000 	nop
        self.count += 1;
8003db74:	8fa10010 	lw	at,16(sp)
8003db78:	8fa20014 	lw	v0,20(sp)
8003db7c:	8fa30018 	lw	v1,24(sp)
8003db80:	8fa4001c 	lw	a0,28(sp)
8003db84:	ac830008 	sw	v1,8(a0)
        Some((i, a))
8003db88:	afa20030 	sw	v0,48(sp)
8003db8c:	afa10034 	sw	at,52(sp)
8003db90:	8fa20030 	lw	v0,48(sp)
8003db94:	8fa10034 	lw	at,52(sp)
8003db98:	afa20024 	sw	v0,36(sp)
8003db9c:	afa10028 	sw	at,40(sp)
    }
8003dba0:	0800f6ee 	j	8003dbb8 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E+0xd0>
8003dba4:	00000000 	nop
        self.count += 1;
8003dba8:	3c01810a 	lui	at,0x810a
8003dbac:	2424b694 	addiu	a0,at,-18796
8003dbb0:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003dbb4:	00000000 	nop
    }
8003dbb8:	8fa20024 	lw	v0,36(sp)
8003dbbc:	8fa30028 	lw	v1,40(sp)
8003dbc0:	8fbf0044 	lw	ra,68(sp)
8003dbc4:	27bd0048 	addiu	sp,sp,72
8003dbc8:	03e00008 	jr	ra
8003dbcc:	00000000 	nop

8003dbd0 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE>:
    fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {
8003dbd0:	27bdffb8 	addiu	sp,sp,-72
8003dbd4:	afbf0044 	sw	ra,68(sp)
8003dbd8:	afa4001c 	sw	a0,28(sp)
        let a = self.iter.next()?;
8003dbdc:	afa40038 	sw	a0,56(sp)
8003dbe0:	0c0129e9 	jal	8004a7a4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E>
8003dbe4:	00000000 	nop
8003dbe8:	00402025 	move	a0,v0
8003dbec:	0c00fb00 	jal	8003ec00 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17heb3c9f832ee98659E>
8003dbf0:	00000000 	nop
8003dbf4:	afa2002c 	sw	v0,44(sp)
8003dbf8:	8fa1002c 	lw	at,44(sp)
8003dbfc:	10200011 	beqz	at,8003dc44 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE+0x74>
8003dc00:	00000000 	nop
8003dc04:	0800f703 	j	8003dc0c <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE+0x3c>
8003dc08:	00000000 	nop
8003dc0c:	8fa1001c 	lw	at,28(sp)
8003dc10:	8fa2002c 	lw	v0,44(sp)
8003dc14:	afa20010 	sw	v0,16(sp)
8003dc18:	afa2003c 	sw	v0,60(sp)
        let i = self.count;
8003dc1c:	8c220008 	lw	v0,8(at)
8003dc20:	afa20014 	sw	v0,20(sp)
8003dc24:	afa20040 	sw	v0,64(sp)
        self.count += 1;
8003dc28:	8c210008 	lw	at,8(at)
8003dc2c:	24210001 	addiu	at,at,1
8003dc30:	afa10018 	sw	at,24(sp)
8003dc34:	10200016 	beqz	at,8003dc90 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE+0xc0>
8003dc38:	00000000 	nop
8003dc3c:	0800f717 	j	8003dc5c <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE+0x8c>
8003dc40:	00000000 	nop
        let a = self.iter.next()?;
8003dc44:	0c00fb21 	jal	8003ec84 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h50f37f7fa945e0e3E>
8003dc48:	00000000 	nop
8003dc4c:	afa20024 	sw	v0,36(sp)
8003dc50:	afa30028 	sw	v1,40(sp)
8003dc54:	0800f728 	j	8003dca0 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE+0xd0>
8003dc58:	00000000 	nop
        self.count += 1;
8003dc5c:	8fa10010 	lw	at,16(sp)
8003dc60:	8fa20014 	lw	v0,20(sp)
8003dc64:	8fa30018 	lw	v1,24(sp)
8003dc68:	8fa4001c 	lw	a0,28(sp)
8003dc6c:	ac830008 	sw	v1,8(a0)
        Some((i, a))
8003dc70:	afa20030 	sw	v0,48(sp)
8003dc74:	afa10034 	sw	at,52(sp)
8003dc78:	8fa20030 	lw	v0,48(sp)
8003dc7c:	8fa10034 	lw	at,52(sp)
8003dc80:	afa20024 	sw	v0,36(sp)
8003dc84:	afa10028 	sw	at,40(sp)
    }
8003dc88:	0800f728 	j	8003dca0 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE+0xd0>
8003dc8c:	00000000 	nop
        self.count += 1;
8003dc90:	3c01810a 	lui	at,0x810a
8003dc94:	2424b694 	addiu	a0,at,-18796
8003dc98:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003dc9c:	00000000 	nop
    }
8003dca0:	8fa20024 	lw	v0,36(sp)
8003dca4:	8fa30028 	lw	v1,40(sp)
8003dca8:	8fbf0044 	lw	ra,68(sp)
8003dcac:	27bd0048 	addiu	sp,sp,72
8003dcb0:	03e00008 	jr	ra
8003dcb4:	00000000 	nop

8003dcb8 <_ZN4core4iter8adapters6filter19Filter$LT$I$C$P$GT$3new17he194c09ee979f5ebE>:
    // Used for `SplitWhitespace` and `SplitAsciiWhitespace` `as_str` methods
    pub(crate) iter: I,
    predicate: P,
}
impl<I, P> Filter<I, P> {
    pub(in crate::iter) fn new(iter: I, predicate: P) -> Filter<I, P> {
8003dcb8:	27bdffe8 	addiu	sp,sp,-24
8003dcbc:	afa4000c 	sw	a0,12(sp)
8003dcc0:	afa50010 	sw	a1,16(sp)
        Filter { iter, predicate }
8003dcc4:	afa40004 	sw	a0,4(sp)
8003dcc8:	afa50008 	sw	a1,8(sp)
    }
8003dccc:	8fa20004 	lw	v0,4(sp)
8003dcd0:	8fa30008 	lw	v1,8(sp)
8003dcd4:	27bd0018 	addiu	sp,sp,24
8003dcd8:	03e00008 	jr	ra
8003dcdc:	00000000 	nop

8003dce0 <_ZN108_$LT$core..iter..adapters..filter..Filter$LT$I$C$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count17ha76fd5484bcdeddfE>:
    // less readable and also less backwards-compatible to Rust before 1.10.
    //
    // Using the branchless version will also simplify the LLVM byte code, thus
    // leaving more budget for LLVM optimizations.
    #[inline]
    fn count(self) -> usize {
8003dce0:	27bdffd8 	addiu	sp,sp,-40
8003dce4:	afbf0024 	sw	ra,36(sp)
8003dce8:	afa50018 	sw	a1,24(sp)
8003dcec:	afa40014 	sw	a0,20(sp)
8003dcf0:	afa4001c 	sw	a0,28(sp)
8003dcf4:	afa50020 	sw	a1,32(sp)
        #[inline]
        fn to_usize<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut(T) -> usize {
            move |x| predicate(&x) as usize
        }

        self.iter.map(to_usize(self.predicate)).sum()
8003dcf8:	0c00f74c 	jal	8003dd30 <_ZN108_$LT$core..iter..adapters..filter..Filter$LT$I$C$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count8to_usize17h2cbef7784263c681E>
8003dcfc:	00000000 	nop
8003dd00:	8fa40014 	lw	a0,20(sp)
8003dd04:	8fa50018 	lw	a1,24(sp)
8003dd08:	0c00f8bd 	jal	8003e2f4 <_ZN4core4iter6traits8iterator8Iterator3map17h9f304d63dc2cfd50E>
8003dd0c:	00000000 	nop
8003dd10:	00402025 	move	a0,v0
8003dd14:	00602825 	move	a1,v1
8003dd18:	0c00f8ff 	jal	8003e3fc <_ZN4core4iter6traits8iterator8Iterator3sum17hd4cbdc98fd060634E>
8003dd1c:	00000000 	nop
    }
8003dd20:	8fbf0024 	lw	ra,36(sp)
8003dd24:	27bd0028 	addiu	sp,sp,40
8003dd28:	03e00008 	jr	ra
8003dd2c:	00000000 	nop

8003dd30 <_ZN108_$LT$core..iter..adapters..filter..Filter$LT$I$C$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count8to_usize17h2cbef7784263c681E>:
        fn to_usize<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut(T) -> usize {
8003dd30:	27bdfff8 	addiu	sp,sp,-8
8003dd34:	27bd0008 	addiu	sp,sp,8
        }
8003dd38:	03e00008 	jr	ra
8003dd3c:	00000000 	nop

8003dd40 <_ZN108_$LT$core..iter..adapters..filter..Filter$LT$I$C$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count8to_usize28_$u7b$$u7b$closure$u7d$$u7d$17h24b79585006f1664E>:
            move |x| predicate(&x) as usize
8003dd40:	27bdffe0 	addiu	sp,sp,-32
8003dd44:	afbf001c 	sw	ra,28(sp)
8003dd48:	afa50010 	sw	a1,16(sp)
8003dd4c:	afa40018 	sw	a0,24(sp)
8003dd50:	27a10010 	addiu	at,sp,16
8003dd54:	afa10014 	sw	at,20(sp)
8003dd58:	8fa50014 	lw	a1,20(sp)
8003dd5c:	0c0117b3 	jal	80045ecc <_ZN4core3str5count23char_count_general_case28_$u7b$$u7b$closure$u7d$$u7d$17h2bd39cb177afb02cE>
8003dd60:	00000000 	nop
8003dd64:	8fbf001c 	lw	ra,28(sp)
8003dd68:	27bd0020 	addiu	sp,sp,32
8003dd6c:	03e00008 	jr	ra
8003dd70:	00000000 	nop

8003dd74 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h648e941b4c47cec1E>:
    pub(crate) iter: I,
    f: F,
}

impl<I, F> Map<I, F> {
    pub(in crate::iter) fn new(iter: I, f: F) -> Map<I, F> {
8003dd74:	27bdffe8 	addiu	sp,sp,-24
8003dd78:	afa4000c 	sw	a0,12(sp)
8003dd7c:	afa50010 	sw	a1,16(sp)
        Map { iter, f }
8003dd80:	afa40004 	sw	a0,4(sp)
8003dd84:	afa50008 	sw	a1,8(sp)
    }
8003dd88:	8fa20004 	lw	v0,4(sp)
8003dd8c:	8fa30008 	lw	v1,8(sp)
8003dd90:	27bd0018 	addiu	sp,sp,24
8003dd94:	03e00008 	jr	ra
8003dd98:	00000000 	nop

8003dd9c <_ZN4core4iter8adapters3map8map_fold17h11f47a437456e247E>:
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("Map").field("iter", &self.iter).finish()
    }
}

fn map_fold<T, B, Acc>(
8003dd9c:	27bdfff8 	addiu	sp,sp,-8
8003dda0:	27bd0008 	addiu	sp,sp,8
    mut f: impl FnMut(T) -> B,
    mut g: impl FnMut(Acc, B) -> Acc,
) -> impl FnMut(Acc, T) -> Acc {
    move |acc, elt| g(acc, f(elt))
}
8003dda4:	03e00008 	jr	ra
8003dda8:	00000000 	nop

8003ddac <_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h0e22386d052a3b35E>:
    move |acc, elt| g(acc, f(elt))
8003ddac:	27bdffc8 	addiu	sp,sp,-56
8003ddb0:	afbf0034 	sw	ra,52(sp)
8003ddb4:	afa50014 	sw	a1,20(sp)
8003ddb8:	afa40018 	sw	a0,24(sp)
8003ddbc:	afa40028 	sw	a0,40(sp)
8003ddc0:	afa5002c 	sw	a1,44(sp)
8003ddc4:	afa60030 	sw	a2,48(sp)
8003ddc8:	afa60024 	sw	a2,36(sp)
8003ddcc:	8fa50024 	lw	a1,36(sp)
8003ddd0:	0c00f750 	jal	8003dd40 <_ZN108_$LT$core..iter..adapters..filter..Filter$LT$I$C$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count8to_usize28_$u7b$$u7b$closure$u7d$$u7d$17h24b79585006f1664E>
8003ddd4:	00000000 	nop
8003ddd8:	8fa50014 	lw	a1,20(sp)
8003dddc:	8fa40018 	lw	a0,24(sp)
8003dde0:	afa5001c 	sw	a1,28(sp)
8003dde4:	afa20020 	sw	v0,32(sp)
8003dde8:	8fa5001c 	lw	a1,28(sp)
8003ddec:	8fa60020 	lw	a2,32(sp)
8003ddf0:	0c0123ee 	jal	80048fb8 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17h91b99a5637de417fE>
8003ddf4:	00000000 	nop
8003ddf8:	8fbf0034 	lw	ra,52(sp)
8003ddfc:	27bd0038 	addiu	sp,sp,56
8003de00:	03e00008 	jr	ra
8003de04:	00000000 	nop

8003de08 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h062a46d4e3bf2665E>:
        R: Try<Output = Acc>,
    {
        self.iter.try_fold(init, map_try_fold(&mut self.f, g))
    }

    fn fold<Acc, G>(self, init: Acc, g: G) -> Acc
8003de08:	27bdffd0 	addiu	sp,sp,-48
8003de0c:	afbf002c 	sw	ra,44(sp)
8003de10:	afa60018 	sw	a2,24(sp)
8003de14:	afa50014 	sw	a1,20(sp)
8003de18:	afa40010 	sw	a0,16(sp)
8003de1c:	afa4001c 	sw	a0,28(sp)
8003de20:	afa50020 	sw	a1,32(sp)
8003de24:	afa60024 	sw	a2,36(sp)
    where
        G: FnMut(Acc, Self::Item) -> Acc,
    {
        self.iter.fold(init, map_fold(self.f, g))
8003de28:	0c00f767 	jal	8003dd9c <_ZN4core4iter8adapters3map8map_fold17h11f47a437456e247E>
8003de2c:	00000000 	nop
8003de30:	8fa40010 	lw	a0,16(sp)
8003de34:	8fa50014 	lw	a1,20(sp)
8003de38:	8fa60018 	lw	a2,24(sp)
8003de3c:	0c012a21 	jal	8004a884 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE>
8003de40:	00000000 	nop
    }
8003de44:	8fbf002c 	lw	ra,44(sp)
8003de48:	27bd0030 	addiu	sp,sp,48
8003de4c:	03e00008 	jr	ra
8003de50:	00000000 	nop

8003de54 <_ZN4core4iter8adapters3rev12Rev$LT$T$GT$3new17h0540977c63eb4e00E>:
pub struct Rev<T> {
    iter: T,
}

impl<T> Rev<T> {
    pub(in crate::iter) fn new(iter: T) -> Rev<T> {
8003de54:	27bdfff0 	addiu	sp,sp,-16
8003de58:	afa40008 	sw	a0,8(sp)
8003de5c:	afa5000c 	sw	a1,12(sp)
        Rev { iter }
8003de60:	afa40000 	sw	a0,0(sp)
8003de64:	afa50004 	sw	a1,4(sp)
    }
8003de68:	8fa20000 	lw	v0,0(sp)
8003de6c:	8fa30004 	lw	v1,4(sp)
8003de70:	27bd0010 	addiu	sp,sp,16
8003de74:	03e00008 	jr	ra
8003de78:	00000000 	nop

8003de7c <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>:
    I: DoubleEndedIterator,
{
    type Item = <I as Iterator>::Item;

    #[inline]
    fn next(&mut self) -> Option<<I as Iterator>::Item> {
8003de7c:	27bdffe8 	addiu	sp,sp,-24
8003de80:	afbf0014 	sw	ra,20(sp)
8003de84:	afa40010 	sw	a0,16(sp)
        self.iter.next_back()
8003de88:	0c012b0a 	jal	8004ac28 <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE>
8003de8c:	00000000 	nop
    }
8003de90:	8fbf0014 	lw	ra,20(sp)
8003de94:	27bd0018 	addiu	sp,sp,24
8003de98:	03e00008 	jr	ra
8003de9c:	00000000 	nop

8003dea0 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0e7065e67880acdbE>:
    }
}

impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {
    #[inline]
    fn spec_next(&mut self) -> Option<T> {
8003dea0:	27bdffc8 	addiu	sp,sp,-56
8003dea4:	afbf0034 	sw	ra,52(sp)
8003dea8:	afa40018 	sw	a0,24(sp)
8003deac:	afa40024 	sw	a0,36(sp)
        if self.start < self.end {
8003deb0:	24810004 	addiu	at,a0,4
8003deb4:	afa4002c 	sw	a0,44(sp)
8003deb8:	afa10030 	sw	at,48(sp)
                #[inline(always)]
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
8003debc:	8c810000 	lw	at,0(a0)
8003dec0:	8c820004 	lw	v0,4(a0)
8003dec4:	0022082b 	sltu	at,at,v0
8003dec8:	14200006 	bnez	at,8003dee4 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0e7065e67880acdbE+0x44>
8003decc:	00000000 	nop
8003ded0:	0800f7b6 	j	8003ded8 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0e7065e67880acdbE+0x38>
8003ded4:	00000000 	nop
            let old = self.start;
            // SAFETY: just checked precondition
            self.start = unsafe { Step::forward_unchecked(old, 1) };
            Some(old)
        } else {
            None
8003ded8:	afa0001c 	sw	zero,28(sp)
        if self.start < self.end {
8003dedc:	0800f7ca 	j	8003df28 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0e7065e67880acdbE+0x88>
8003dee0:	00000000 	nop
            let old = self.start;
8003dee4:	8fa10018 	lw	at,24(sp)
8003dee8:	8c240000 	lw	a0,0(at)
8003deec:	afa40014 	sw	a0,20(sp)
8003def0:	afa40028 	sw	a0,40(sp)
8003def4:	24050001 	li	a1,1
8003def8:	afa50010 	sw	a1,16(sp)
            self.start = unsafe { Step::forward_unchecked(old, 1) };
8003defc:	0c0123da 	jal	80048f68 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17heab11d2d1c4d0452E>
8003df00:	00000000 	nop
8003df04:	8fa40018 	lw	a0,24(sp)
8003df08:	8fa10010 	lw	at,16(sp)
8003df0c:	00401825 	move	v1,v0
8003df10:	8fa20014 	lw	v0,20(sp)
8003df14:	ac830000 	sw	v1,0(a0)
            Some(old)
8003df18:	afa20020 	sw	v0,32(sp)
8003df1c:	afa1001c 	sw	at,28(sp)
        if self.start < self.end {
8003df20:	0800f7ca 	j	8003df28 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0e7065e67880acdbE+0x88>
8003df24:	00000000 	nop
        }
    }
8003df28:	8fa2001c 	lw	v0,28(sp)
8003df2c:	8fa30020 	lw	v1,32(sp)
8003df30:	8fbf0034 	lw	ra,52(sp)
8003df34:	27bd0038 	addiu	sp,sp,56
8003df38:	03e00008 	jr	ra
8003df3c:	00000000 	nop

8003df40 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h85ec8b075ea6c763E>:
    fn spec_next(&mut self) -> Option<T> {
8003df40:	27bdffc8 	addiu	sp,sp,-56
8003df44:	afbf0034 	sw	ra,52(sp)
8003df48:	afa4001c 	sw	a0,28(sp)
8003df4c:	afa40024 	sw	a0,36(sp)
        if self.start < self.end {
8003df50:	24810001 	addiu	at,a0,1
8003df54:	afa4002c 	sw	a0,44(sp)
8003df58:	afa10030 	sw	at,48(sp)
8003df5c:	90810000 	lbu	at,0(a0)
8003df60:	90820001 	lbu	v0,1(a0)
8003df64:	0022082b 	sltu	at,at,v0
8003df68:	14200007 	bnez	at,8003df88 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h85ec8b075ea6c763E+0x48>
8003df6c:	00000000 	nop
8003df70:	0800f7de 	j	8003df78 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h85ec8b075ea6c763E+0x38>
8003df74:	00000000 	nop
8003df78:	24010000 	li	at,0
            None
8003df7c:	a3a00022 	sb	zero,34(sp)
        if self.start < self.end {
8003df80:	0800f7f3 	j	8003dfcc <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h85ec8b075ea6c763E+0x8c>
8003df84:	00000000 	nop
            let old = self.start;
8003df88:	8fa1001c 	lw	at,28(sp)
8003df8c:	90240000 	lbu	a0,0(at)
8003df90:	afa40018 	sw	a0,24(sp)
8003df94:	a3a4002b 	sb	a0,43(sp)
8003df98:	24050001 	li	a1,1
8003df9c:	afa50014 	sw	a1,20(sp)
            self.start = unsafe { Step::forward_unchecked(old, 1) };
8003dfa0:	0c0123d1 	jal	80048f44 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h690f9a91247c04f4E>
8003dfa4:	00000000 	nop
8003dfa8:	8fa4001c 	lw	a0,28(sp)
8003dfac:	8fa10014 	lw	at,20(sp)
8003dfb0:	00401825 	move	v1,v0
8003dfb4:	8fa20018 	lw	v0,24(sp)
8003dfb8:	a0830000 	sb	v1,0(a0)
            Some(old)
8003dfbc:	a3a20023 	sb	v0,35(sp)
8003dfc0:	a3a10022 	sb	at,34(sp)
        if self.start < self.end {
8003dfc4:	0800f7f3 	j	8003dfcc <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h85ec8b075ea6c763E+0x8c>
8003dfc8:	00000000 	nop
    }
8003dfcc:	93a20022 	lbu	v0,34(sp)
8003dfd0:	93a30023 	lbu	v1,35(sp)
8003dfd4:	8fbf0034 	lw	ra,52(sp)
8003dfd8:	27bd0038 	addiu	sp,sp,56
8003dfdc:	03e00008 	jr	ra
8003dfe0:	00000000 	nop

8003dfe4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h452dab29ddeb92e6E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<A: Step> Iterator for ops::Range<A> {
    type Item = A;

    #[inline]
    fn next(&mut self) -> Option<A> {
8003dfe4:	27bdffe8 	addiu	sp,sp,-24
8003dfe8:	afbf0014 	sw	ra,20(sp)
8003dfec:	afa40010 	sw	a0,16(sp)
        self.spec_next()
8003dff0:	0c00f7d0 	jal	8003df40 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h85ec8b075ea6c763E>
8003dff4:	00000000 	nop
    }
8003dff8:	8fbf0014 	lw	ra,20(sp)
8003dffc:	27bd0018 	addiu	sp,sp,24
8003e000:	03e00008 	jr	ra
8003e004:	00000000 	nop

8003e008 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h77596a36d38db716E>:
    fn next(&mut self) -> Option<A> {
8003e008:	27bdffe8 	addiu	sp,sp,-24
8003e00c:	afbf0014 	sw	ra,20(sp)
8003e010:	afa40010 	sw	a0,16(sp)
        self.spec_next()
8003e014:	0c00f7a8 	jal	8003dea0 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0e7065e67880acdbE>
8003e018:	00000000 	nop
    }
8003e01c:	8fbf0014 	lw	ra,20(sp)
8003e020:	27bd0018 	addiu	sp,sp,24
8003e024:	03e00008 	jr	ra
8003e028:	00000000 	nop

8003e02c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h08672f7f2dd54636E>:
impl<I: Iterator> IntoIterator for I {
    type Item = I::Item;
    type IntoIter = I;

    #[inline]
    fn into_iter(self) -> I {
8003e02c:	27bdfff8 	addiu	sp,sp,-8
8003e030:	00a01825 	move	v1,a1
8003e034:	00801025 	move	v0,a0
8003e038:	afa20000 	sw	v0,0(sp)
8003e03c:	afa30004 	sw	v1,4(sp)
8003e040:	27bd0008 	addiu	sp,sp,8
        self
    }
8003e044:	03e00008 	jr	ra
8003e048:	00000000 	nop

8003e04c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h527644712bfef04bE>:
    fn into_iter(self) -> I {
8003e04c:	00801025 	move	v0,a0
        self
8003e050:	8ca10008 	lw	at,8(a1)
8003e054:	ac810008 	sw	at,8(a0)
8003e058:	8ca10004 	lw	at,4(a1)
8003e05c:	ac810004 	sw	at,4(a0)
8003e060:	8ca10000 	lw	at,0(a1)
8003e064:	ac810000 	sw	at,0(a0)
    }
8003e068:	03e00008 	jr	ra
8003e06c:	00000000 	nop

8003e070 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7649a48ed6f3f9b5E>:
    fn into_iter(self) -> I {
8003e070:	00801025 	move	v0,a0
        self
8003e074:	8ca10008 	lw	at,8(a1)
8003e078:	ac810008 	sw	at,8(a0)
8003e07c:	8ca10004 	lw	at,4(a1)
8003e080:	ac810004 	sw	at,4(a0)
8003e084:	8ca10000 	lw	at,0(a1)
8003e088:	ac810000 	sw	at,0(a0)
    }
8003e08c:	03e00008 	jr	ra
8003e090:	00000000 	nop

8003e094 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h995e6662883fadcfE>:
    fn into_iter(self) -> I {
8003e094:	00801025 	move	v0,a0
        self
8003e098:	8ca10008 	lw	at,8(a1)
8003e09c:	ac810008 	sw	at,8(a0)
8003e0a0:	8ca10004 	lw	at,4(a1)
8003e0a4:	ac810004 	sw	at,4(a0)
8003e0a8:	8ca10000 	lw	at,0(a1)
8003e0ac:	ac810000 	sw	at,0(a0)
    }
8003e0b0:	03e00008 	jr	ra
8003e0b4:	00000000 	nop

8003e0b8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hab92d4a309fc1853E>:
    fn into_iter(self) -> I {
8003e0b8:	00801025 	move	v0,a0
        self
8003e0bc:	8ca10008 	lw	at,8(a1)
8003e0c0:	ac810008 	sw	at,8(a0)
8003e0c4:	8ca10004 	lw	at,4(a1)
8003e0c8:	ac810004 	sw	at,4(a0)
8003e0cc:	8ca10000 	lw	at,0(a1)
8003e0d0:	ac810000 	sw	at,0(a0)
    }
8003e0d4:	03e00008 	jr	ra
8003e0d8:	00000000 	nop

8003e0dc <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc1247a7b3b77f09fE>:
    fn into_iter(self) -> I {
8003e0dc:	00801025 	move	v0,a0
        self
8003e0e0:	8ca10008 	lw	at,8(a1)
8003e0e4:	ac810008 	sw	at,8(a0)
8003e0e8:	8ca10004 	lw	at,4(a1)
8003e0ec:	ac810004 	sw	at,4(a0)
8003e0f0:	8ca10000 	lw	at,0(a1)
8003e0f4:	ac810000 	sw	at,0(a0)
    }
8003e0f8:	03e00008 	jr	ra
8003e0fc:	00000000 	nop

8003e100 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>:
    fn into_iter(self) -> I {
8003e100:	27bdfff8 	addiu	sp,sp,-8
8003e104:	00a01825 	move	v1,a1
8003e108:	00801025 	move	v0,a0
8003e10c:	afa20000 	sw	v0,0(sp)
8003e110:	afa30004 	sw	v1,4(sp)
8003e114:	27bd0008 	addiu	sp,sp,8
    }
8003e118:	03e00008 	jr	ra
8003e11c:	00000000 	nop

8003e120 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17heb520da55e95499cE>:
    fn into_iter(self) -> I {
8003e120:	27bdfff8 	addiu	sp,sp,-8
8003e124:	00a01825 	move	v1,a1
8003e128:	00801025 	move	v0,a0
8003e12c:	afa20000 	sw	v0,0(sp)
8003e130:	afa30004 	sw	v1,4(sp)
8003e134:	27bd0008 	addiu	sp,sp,8
    }
8003e138:	03e00008 	jr	ra
8003e13c:	00000000 	nop

8003e140 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E>:
    /// assert_eq!(iter.advance_by(100), Err(NonZero::new(99).unwrap())); // only `&4` was skipped
    /// ```
    #[inline]
    #[unstable(feature = "iter_advance_by", reason = "recently added", issue = "77404")]
    #[rustc_do_not_const_check]
    fn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {
8003e140:	27bdffa8 	addiu	sp,sp,-88
8003e144:	afbf0054 	sw	ra,84(sp)
8003e148:	afa5001c 	sw	a1,28(sp)
8003e14c:	afa40020 	sw	a0,32(sp)
8003e150:	afa40048 	sw	a0,72(sp)
8003e154:	afa5004c 	sw	a1,76(sp)
        for i in 0..n {
8003e158:	afa00028 	sw	zero,40(sp)
8003e15c:	afa5002c 	sw	a1,44(sp)
8003e160:	8fa40028 	lw	a0,40(sp)
8003e164:	8fa5002c 	lw	a1,44(sp)
8003e168:	0c00f80b 	jal	8003e02c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h08672f7f2dd54636E>
8003e16c:	00000000 	nop
8003e170:	afa20030 	sw	v0,48(sp)
8003e174:	afa30034 	sw	v1,52(sp)
8003e178:	0800f860 	j	8003e180 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0x40>
8003e17c:	00000000 	nop
8003e180:	27a40030 	addiu	a0,sp,48
8003e184:	0c00f802 	jal	8003e008 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h77596a36d38db716E>
8003e188:	00000000 	nop
8003e18c:	afa20038 	sw	v0,56(sp)
8003e190:	afa3003c 	sw	v1,60(sp)
8003e194:	8fa10038 	lw	at,56(sp)
8003e198:	14200006 	bnez	at,8003e1b4 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0x74>
8003e19c:	00000000 	nop
8003e1a0:	0800f86a 	j	8003e1a8 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0x68>
8003e1a4:	00000000 	nop
            if self.next().is_none() {
                // SAFETY: `i` is always less than `n`.
                return Err(unsafe { NonZero::new_unchecked(n - i) });
            }
        }
        Ok(())
8003e1a8:	afa00024 	sw	zero,36(sp)
    }
8003e1ac:	0800f87c 	j	8003e1f0 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0xb0>
8003e1b0:	00000000 	nop
        for i in 0..n {
8003e1b4:	8fa40020 	lw	a0,32(sp)
8003e1b8:	8fa1003c 	lw	at,60(sp)
8003e1bc:	afa10018 	sw	at,24(sp)
8003e1c0:	afa10050 	sw	at,80(sp)
            if self.next().is_none() {
8003e1c4:	0c0117f3 	jal	80045fcc <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE>
8003e1c8:	00000000 	nop
8003e1cc:	afa20040 	sw	v0,64(sp)
8003e1d0:	afa30044 	sw	v1,68(sp)
8003e1d4:	27a40040 	addiu	a0,sp,64
8003e1d8:	0c00f947 	jal	8003e51c <_ZN4core6option15Option$LT$T$GT$7is_none17h12453519e8986051E>
8003e1dc:	00000000 	nop
8003e1e0:	1440000a 	bnez	v0,8003e20c <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0xcc>
8003e1e4:	00000000 	nop
8003e1e8:	0800f881 	j	8003e204 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0xc4>
8003e1ec:	00000000 	nop
    }
8003e1f0:	8fa20024 	lw	v0,36(sp)
8003e1f4:	8fbf0054 	lw	ra,84(sp)
8003e1f8:	27bd0058 	addiu	sp,sp,88
8003e1fc:	03e00008 	jr	ra
8003e200:	00000000 	nop
            if self.next().is_none() {
8003e204:	0800f860 	j	8003e180 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0x40>
8003e208:	00000000 	nop
                return Err(unsafe { NonZero::new_unchecked(n - i) });
8003e20c:	8fa1001c 	lw	at,28(sp)
8003e210:	8fa20018 	lw	v0,24(sp)
8003e214:	00221823 	subu	v1,at,v0
8003e218:	afa30014 	sw	v1,20(sp)
8003e21c:	0022082b 	sltu	at,at,v0
8003e220:	14200009 	bnez	at,8003e248 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0x108>
8003e224:	00000000 	nop
8003e228:	0800f88c 	j	8003e230 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0xf0>
8003e22c:	00000000 	nop
8003e230:	8fa40014 	lw	a0,20(sp)
8003e234:	0c00ecfd 	jal	8003b3f4 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked17ha183bd3a225a1179E>
8003e238:	00000000 	nop
8003e23c:	afa20024 	sw	v0,36(sp)
    }
8003e240:	0800f87c 	j	8003e1f0 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0xb0>
8003e244:	00000000 	nop
                return Err(unsafe { NonZero::new_unchecked(n - i) });
8003e248:	3c01810a 	lui	at,0x810a
8003e24c:	2424b720 	addiu	a0,at,-18656
8003e250:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003e254:	00000000 	nop

8003e258 <_ZN4core4iter6traits8iterator8Iterator3nth17h949acbaf33606195E>:
    /// assert_eq!(a.iter().nth(10), None);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_do_not_const_check]
    fn nth(&mut self, n: usize) -> Option<Self::Item> {
8003e258:	27bdffd0 	addiu	sp,sp,-48
8003e25c:	afbf002c 	sw	ra,44(sp)
8003e260:	afa40010 	sw	a0,16(sp)
        self.advance_by(n).ok()?;
8003e264:	afa40024 	sw	a0,36(sp)
8003e268:	afa50028 	sw	a1,40(sp)
8003e26c:	0c00f850 	jal	8003e140 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E>
8003e270:	00000000 	nop
8003e274:	00402025 	move	a0,v0
8003e278:	0c00fd76 	jal	8003f5d8 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E>
8003e27c:	00000000 	nop
8003e280:	00402025 	move	a0,v0
8003e284:	0c00fad8 	jal	8003eb60 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h4ffea4232db24cdcE>
8003e288:	00000000 	nop
8003e28c:	a3a20023 	sb	v0,35(sp)
8003e290:	93a10023 	lbu	at,35(sp)
8003e294:	30210001 	andi	at,at,0x1
8003e298:	1420000a 	bnez	at,8003e2c4 <_ZN4core4iter6traits8iterator8Iterator3nth17h949acbaf33606195E+0x6c>
8003e29c:	00000000 	nop
8003e2a0:	0800f8aa 	j	8003e2a8 <_ZN4core4iter6traits8iterator8Iterator3nth17h949acbaf33606195E+0x50>
8003e2a4:	00000000 	nop
        self.next()
8003e2a8:	8fa40010 	lw	a0,16(sp)
8003e2ac:	0c0117f3 	jal	80045fcc <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE>
8003e2b0:	00000000 	nop
8003e2b4:	afa20018 	sw	v0,24(sp)
8003e2b8:	afa3001c 	sw	v1,28(sp)
8003e2bc:	0800f8b7 	j	8003e2dc <_ZN4core4iter6traits8iterator8Iterator3nth17h949acbaf33606195E+0x84>
8003e2c0:	00000000 	nop
        self.advance_by(n).ok()?;
8003e2c4:	0c00fb28 	jal	8003eca0 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h766c7ebb6933a2baE>
8003e2c8:	00000000 	nop
8003e2cc:	afa20018 	sw	v0,24(sp)
8003e2d0:	afa3001c 	sw	v1,28(sp)
8003e2d4:	0800f8b7 	j	8003e2dc <_ZN4core4iter6traits8iterator8Iterator3nth17h949acbaf33606195E+0x84>
8003e2d8:	00000000 	nop
    }
8003e2dc:	8fa20018 	lw	v0,24(sp)
8003e2e0:	8fa3001c 	lw	v1,28(sp)
8003e2e4:	8fbf002c 	lw	ra,44(sp)
8003e2e8:	27bd0030 	addiu	sp,sp,48
8003e2ec:	03e00008 	jr	ra
8003e2f0:	00000000 	nop

8003e2f4 <_ZN4core4iter6traits8iterator8Iterator3map17h9f304d63dc2cfd50E>:
    /// ```
    #[rustc_diagnostic_item = "IteratorMap"]
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_do_not_const_check]
    fn map<B, F>(self, f: F) -> Map<Self, F>
8003e2f4:	27bdffe0 	addiu	sp,sp,-32
8003e2f8:	afbf001c 	sw	ra,28(sp)
8003e2fc:	afa40010 	sw	a0,16(sp)
8003e300:	afa50014 	sw	a1,20(sp)
    where
        Self: Sized,
        F: FnMut(Self::Item) -> B,
    {
        Map::new(self, f)
8003e304:	0c00f75d 	jal	8003dd74 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h648e941b4c47cec1E>
8003e308:	00000000 	nop
    }
8003e30c:	8fbf001c 	lw	ra,28(sp)
8003e310:	27bd0020 	addiu	sp,sp,32
8003e314:	03e00008 	jr	ra
8003e318:	00000000 	nop

8003e31c <_ZN4core4iter6traits8iterator8Iterator6filter17h4fb980de80130199E>:
    ///
    /// Note that `iter.filter(f).next()` is equivalent to `iter.find(f)`.
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_do_not_const_check]
    fn filter<P>(self, predicate: P) -> Filter<Self, P>
8003e31c:	27bdffe0 	addiu	sp,sp,-32
8003e320:	afbf001c 	sw	ra,28(sp)
8003e324:	afa40010 	sw	a0,16(sp)
8003e328:	afa50014 	sw	a1,20(sp)
    where
        Self: Sized,
        P: FnMut(&Self::Item) -> bool,
    {
        Filter::new(self, predicate)
8003e32c:	0c00f72e 	jal	8003dcb8 <_ZN4core4iter8adapters6filter19Filter$LT$I$C$P$GT$3new17he194c09ee979f5ebE>
8003e330:	00000000 	nop
    }
8003e334:	8fbf001c 	lw	ra,28(sp)
8003e338:	27bd0020 	addiu	sp,sp,32
8003e33c:	03e00008 	jr	ra
8003e340:	00000000 	nop

8003e344 <_ZN4core4iter6traits8iterator8Iterator9enumerate17h177bb510e964e1c9E>:
    /// assert_eq!(iter.next(), None);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_do_not_const_check]
    fn enumerate(self) -> Enumerate<Self>
8003e344:	27bdffe0 	addiu	sp,sp,-32
8003e348:	afbf001c 	sw	ra,28(sp)
8003e34c:	00800825 	move	at,a0
8003e350:	afa10010 	sw	at,16(sp)
8003e354:	afa50014 	sw	a1,20(sp)
8003e358:	afa60018 	sw	a2,24(sp)
    where
        Self: Sized,
    {
        Enumerate::new(self)
8003e35c:	0c00f6b0 	jal	8003dac0 <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h517df8d8eacec18dE>
8003e360:	00000000 	nop
8003e364:	8fa20010 	lw	v0,16(sp)
    }
8003e368:	8fbf001c 	lw	ra,28(sp)
8003e36c:	27bd0020 	addiu	sp,sp,32
8003e370:	03e00008 	jr	ra
8003e374:	00000000 	nop

8003e378 <_ZN4core4iter6traits8iterator8Iterator9enumerate17hc8825050a5fd6479E>:
    fn enumerate(self) -> Enumerate<Self>
8003e378:	27bdffe0 	addiu	sp,sp,-32
8003e37c:	afbf001c 	sw	ra,28(sp)
8003e380:	00800825 	move	at,a0
8003e384:	afa10010 	sw	at,16(sp)
8003e388:	afa50014 	sw	a1,20(sp)
8003e38c:	afa60018 	sw	a2,24(sp)
        Enumerate::new(self)
8003e390:	0c00f6a6 	jal	8003da98 <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h088319821c4ff07bE>
8003e394:	00000000 	nop
8003e398:	8fa20010 	lw	v0,16(sp)
    }
8003e39c:	8fbf001c 	lw	ra,28(sp)
8003e3a0:	27bd0020 	addiu	sp,sp,32
8003e3a4:	03e00008 	jr	ra
8003e3a8:	00000000 	nop

8003e3ac <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>:
    /// ```
    #[inline]
    #[doc(alias = "reverse")]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_do_not_const_check]
    fn rev(self) -> Rev<Self>
8003e3ac:	27bdffe0 	addiu	sp,sp,-32
8003e3b0:	afbf001c 	sw	ra,28(sp)
8003e3b4:	afa40014 	sw	a0,20(sp)
8003e3b8:	afa50018 	sw	a1,24(sp)
    where
        Self: Sized + DoubleEndedIterator,
    {
        Rev::new(self)
8003e3bc:	0c00f795 	jal	8003de54 <_ZN4core4iter8adapters3rev12Rev$LT$T$GT$3new17h0540977c63eb4e00E>
8003e3c0:	00000000 	nop
    }
8003e3c4:	8fbf001c 	lw	ra,28(sp)
8003e3c8:	27bd0020 	addiu	sp,sp,32
8003e3cc:	03e00008 	jr	ra
8003e3d0:	00000000 	nop

8003e3d4 <_ZN4core4iter6traits8iterator8Iterator6cloned17hf35468160e5bd29eE>:
    /// let faster: Vec<_> = a.iter().filter(|s| s.len() == 1).cloned().collect();
    /// assert_eq!(&[vec![23]], &faster[..]);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_do_not_const_check]
    fn cloned<'a, T: 'a>(self) -> Cloned<Self>
8003e3d4:	27bdffe0 	addiu	sp,sp,-32
8003e3d8:	afbf001c 	sw	ra,28(sp)
8003e3dc:	afa40014 	sw	a0,20(sp)
8003e3e0:	afa50018 	sw	a1,24(sp)
    where
        Self: Sized + Iterator<Item = &'a T>,
        T: Clone,
    {
        Cloned::new(self)
8003e3e4:	0c00f690 	jal	8003da40 <_ZN4core4iter8adapters6cloned15Cloned$LT$I$GT$3new17h9502bc74172f8b49E>
8003e3e8:	00000000 	nop
    }
8003e3ec:	8fbf001c 	lw	ra,28(sp)
8003e3f0:	27bd0020 	addiu	sp,sp,32
8003e3f4:	03e00008 	jr	ra
8003e3f8:	00000000 	nop

8003e3fc <_ZN4core4iter6traits8iterator8Iterator3sum17hd4cbdc98fd060634E>:
    ///
    /// assert_eq!(sum, 6);
    /// ```
    #[stable(feature = "iter_arith", since = "1.11.0")]
    #[rustc_do_not_const_check]
    fn sum<S>(self) -> S
8003e3fc:	27bdffe0 	addiu	sp,sp,-32
8003e400:	afbf001c 	sw	ra,28(sp)
8003e404:	afa40014 	sw	a0,20(sp)
8003e408:	afa50018 	sw	a1,24(sp)
    where
        Self: Sized,
        S: Sum<Self::Item>,
    {
        Sum::sum(self)
8003e40c:	0c0123e3 	jal	80048f8c <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum17h788a6b4423308929E>
8003e410:	00000000 	nop
    }
8003e414:	8fbf001c 	lw	ra,28(sp)
8003e418:	27bd0020 	addiu	sp,sp,32
8003e41c:	03e00008 	jr	ra
8003e420:	00000000 	nop

8003e424 <_ZN4core6option15Option$LT$T$GT$7is_some17h7e9a641f7c322dbcE>:
    pub const fn is_some(&self) -> bool {
8003e424:	27bdfff8 	addiu	sp,sp,-8
8003e428:	afa40004 	sw	a0,4(sp)
        matches!(*self, Some(_))
8003e42c:	8c810000 	lw	at,0(a0)
8003e430:	24020001 	li	v0,1
8003e434:	14220007 	bne	at,v0,8003e454 <_ZN4core6option15Option$LT$T$GT$7is_some17h7e9a641f7c322dbcE+0x30>
8003e438:	00000000 	nop
8003e43c:	0800f911 	j	8003e444 <_ZN4core6option15Option$LT$T$GT$7is_some17h7e9a641f7c322dbcE+0x20>
8003e440:	00000000 	nop
8003e444:	24010001 	li	at,1
8003e448:	a3a10003 	sb	at,3(sp)
8003e44c:	0800f919 	j	8003e464 <_ZN4core6option15Option$LT$T$GT$7is_some17h7e9a641f7c322dbcE+0x40>
8003e450:	00000000 	nop
8003e454:	24010000 	li	at,0
8003e458:	a3a00003 	sb	zero,3(sp)
8003e45c:	0800f919 	j	8003e464 <_ZN4core6option15Option$LT$T$GT$7is_some17h7e9a641f7c322dbcE+0x40>
8003e460:	00000000 	nop
    }
8003e464:	93a10003 	lbu	at,3(sp)
8003e468:	30220001 	andi	v0,at,0x1
8003e46c:	27bd0008 	addiu	sp,sp,8
8003e470:	03e00008 	jr	ra
8003e474:	00000000 	nop

8003e478 <_ZN4core6option15Option$LT$T$GT$7is_some17h9a03cbe71de1bb10E>:
    pub const fn is_some(&self) -> bool {
8003e478:	27bdfff8 	addiu	sp,sp,-8
8003e47c:	afa40004 	sw	a0,4(sp)
        matches!(*self, Some(_))
8003e480:	8c810004 	lw	at,4(a0)
8003e484:	3c020011 	lui	v0,0x11
8003e488:	10220007 	beq	at,v0,8003e4a8 <_ZN4core6option15Option$LT$T$GT$7is_some17h9a03cbe71de1bb10E+0x30>
8003e48c:	00000000 	nop
8003e490:	0800f926 	j	8003e498 <_ZN4core6option15Option$LT$T$GT$7is_some17h9a03cbe71de1bb10E+0x20>
8003e494:	00000000 	nop
8003e498:	24010001 	li	at,1
8003e49c:	a3a10003 	sb	at,3(sp)
8003e4a0:	0800f92e 	j	8003e4b8 <_ZN4core6option15Option$LT$T$GT$7is_some17h9a03cbe71de1bb10E+0x40>
8003e4a4:	00000000 	nop
8003e4a8:	24010000 	li	at,0
8003e4ac:	a3a00003 	sb	zero,3(sp)
8003e4b0:	0800f92e 	j	8003e4b8 <_ZN4core6option15Option$LT$T$GT$7is_some17h9a03cbe71de1bb10E+0x40>
8003e4b4:	00000000 	nop
    }
8003e4b8:	93a10003 	lbu	at,3(sp)
8003e4bc:	30220001 	andi	v0,at,0x1
8003e4c0:	27bd0008 	addiu	sp,sp,8
8003e4c4:	03e00008 	jr	ra
8003e4c8:	00000000 	nop

8003e4cc <_ZN4core6option15Option$LT$T$GT$7is_some17hf03c679c9733e5acE>:
    pub const fn is_some(&self) -> bool {
8003e4cc:	27bdfff8 	addiu	sp,sp,-8
8003e4d0:	afa40004 	sw	a0,4(sp)
        matches!(*self, Some(_))
8003e4d4:	8c810000 	lw	at,0(a0)
8003e4d8:	10200007 	beqz	at,8003e4f8 <_ZN4core6option15Option$LT$T$GT$7is_some17hf03c679c9733e5acE+0x2c>
8003e4dc:	00000000 	nop
8003e4e0:	0800f93a 	j	8003e4e8 <_ZN4core6option15Option$LT$T$GT$7is_some17hf03c679c9733e5acE+0x1c>
8003e4e4:	00000000 	nop
8003e4e8:	24010001 	li	at,1
8003e4ec:	a3a10003 	sb	at,3(sp)
8003e4f0:	0800f942 	j	8003e508 <_ZN4core6option15Option$LT$T$GT$7is_some17hf03c679c9733e5acE+0x3c>
8003e4f4:	00000000 	nop
8003e4f8:	24010000 	li	at,0
8003e4fc:	a3a00003 	sb	zero,3(sp)
8003e500:	0800f942 	j	8003e508 <_ZN4core6option15Option$LT$T$GT$7is_some17hf03c679c9733e5acE+0x3c>
8003e504:	00000000 	nop
    }
8003e508:	93a10003 	lbu	at,3(sp)
8003e50c:	30220001 	andi	v0,at,0x1
8003e510:	27bd0008 	addiu	sp,sp,8
8003e514:	03e00008 	jr	ra
8003e518:	00000000 	nop

8003e51c <_ZN4core6option15Option$LT$T$GT$7is_none17h12453519e8986051E>:
    pub const fn is_none(&self) -> bool {
8003e51c:	27bdffe8 	addiu	sp,sp,-24
8003e520:	afbf0014 	sw	ra,20(sp)
8003e524:	afa40010 	sw	a0,16(sp)
        !self.is_some()
8003e528:	0c00f91e 	jal	8003e478 <_ZN4core6option15Option$LT$T$GT$7is_some17h9a03cbe71de1bb10E>
8003e52c:	00000000 	nop
8003e530:	38420001 	xori	v0,v0,0x1
    }
8003e534:	8fbf0014 	lw	ra,20(sp)
8003e538:	27bd0018 	addiu	sp,sp,24
8003e53c:	03e00008 	jr	ra
8003e540:	00000000 	nop

8003e544 <_ZN4core6option15Option$LT$T$GT$7is_none17h2a21bc401af51c77E>:
    pub const fn is_none(&self) -> bool {
8003e544:	27bdffe8 	addiu	sp,sp,-24
8003e548:	afbf0014 	sw	ra,20(sp)
8003e54c:	afa40010 	sw	a0,16(sp)
        !self.is_some()
8003e550:	0c00f909 	jal	8003e424 <_ZN4core6option15Option$LT$T$GT$7is_some17h7e9a641f7c322dbcE>
8003e554:	00000000 	nop
8003e558:	38420001 	xori	v0,v0,0x1
    }
8003e55c:	8fbf0014 	lw	ra,20(sp)
8003e560:	27bd0018 	addiu	sp,sp,24
8003e564:	03e00008 	jr	ra
8003e568:	00000000 	nop

8003e56c <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E>:
    pub fn unwrap_or(self, default: T) -> T {
8003e56c:	27bdffd0 	addiu	sp,sp,-48
8003e570:	afa70004 	sw	a3,4(sp)
8003e574:	afa60008 	sw	a2,8(sp)
8003e578:	afa4000c 	sw	a0,12(sp)
8003e57c:	afa50010 	sw	a1,16(sp)
8003e580:	afa60020 	sw	a2,32(sp)
8003e584:	afa70024 	sw	a3,36(sp)
8003e588:	24010000 	li	at,0
        match self {
8003e58c:	a3a0001f 	sb	zero,31(sp)
8003e590:	24010001 	li	at,1
8003e594:	a3a1001f 	sb	at,31(sp)
8003e598:	8fa1000c 	lw	at,12(sp)
8003e59c:	1420000b 	bnez	at,8003e5cc <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E+0x60>
8003e5a0:	00000000 	nop
8003e5a4:	0800f96b 	j	8003e5ac <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E+0x40>
8003e5a8:	00000000 	nop
8003e5ac:	8fa10004 	lw	at,4(sp)
8003e5b0:	8fa20008 	lw	v0,8(sp)
8003e5b4:	24030000 	li	v1,0
            None => default,
8003e5b8:	a3a0001f 	sb	zero,31(sp)
8003e5bc:	afa20014 	sw	v0,20(sp)
8003e5c0:	afa10018 	sw	at,24(sp)
8003e5c4:	0800f97b 	j	8003e5ec <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E+0x80>
8003e5c8:	00000000 	nop
            Some(x) => x,
8003e5cc:	8fa2000c 	lw	v0,12(sp)
8003e5d0:	8fa10010 	lw	at,16(sp)
8003e5d4:	afa20028 	sw	v0,40(sp)
8003e5d8:	afa1002c 	sw	at,44(sp)
8003e5dc:	afa20014 	sw	v0,20(sp)
8003e5e0:	afa10018 	sw	at,24(sp)
8003e5e4:	0800f97b 	j	8003e5ec <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E+0x80>
8003e5e8:	00000000 	nop
    }
8003e5ec:	93a1001f 	lbu	at,31(sp)
8003e5f0:	30210001 	andi	at,at,0x1
8003e5f4:	14200008 	bnez	at,8003e618 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E+0xac>
8003e5f8:	00000000 	nop
8003e5fc:	0800f981 	j	8003e604 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E+0x98>
8003e600:	00000000 	nop
8003e604:	8fa20014 	lw	v0,20(sp)
8003e608:	8fa30018 	lw	v1,24(sp)
8003e60c:	27bd0030 	addiu	sp,sp,48
8003e610:	03e00008 	jr	ra
8003e614:	00000000 	nop
8003e618:	0800f981 	j	8003e604 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E+0x98>
8003e61c:	00000000 	nop

8003e620 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE>:
    pub fn unwrap_or(self, default: T) -> T {
8003e620:	27bdffe0 	addiu	sp,sp,-32
8003e624:	afa60004 	sw	a2,4(sp)
8003e628:	afa40008 	sw	a0,8(sp)
8003e62c:	afa5000c 	sw	a1,12(sp)
8003e630:	afa60018 	sw	a2,24(sp)
8003e634:	24010000 	li	at,0
        match self {
8003e638:	a3a00017 	sb	zero,23(sp)
8003e63c:	24010001 	li	at,1
8003e640:	a3a10017 	sb	at,23(sp)
8003e644:	8fa10008 	lw	at,8(sp)
8003e648:	14200009 	bnez	at,8003e670 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE+0x50>
8003e64c:	00000000 	nop
8003e650:	0800f996 	j	8003e658 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE+0x38>
8003e654:	00000000 	nop
8003e658:	8fa10004 	lw	at,4(sp)
8003e65c:	24020000 	li	v0,0
            None => default,
8003e660:	a3a00017 	sb	zero,23(sp)
8003e664:	afa10010 	sw	at,16(sp)
8003e668:	0800f9a1 	j	8003e684 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE+0x64>
8003e66c:	00000000 	nop
            Some(x) => x,
8003e670:	8fa1000c 	lw	at,12(sp)
8003e674:	afa1001c 	sw	at,28(sp)
8003e678:	afa10010 	sw	at,16(sp)
8003e67c:	0800f9a1 	j	8003e684 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE+0x64>
8003e680:	00000000 	nop
    }
8003e684:	93a10017 	lbu	at,23(sp)
8003e688:	30210001 	andi	at,at,0x1
8003e68c:	14200007 	bnez	at,8003e6ac <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE+0x8c>
8003e690:	00000000 	nop
8003e694:	0800f9a7 	j	8003e69c <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE+0x7c>
8003e698:	00000000 	nop
8003e69c:	8fa20010 	lw	v0,16(sp)
8003e6a0:	27bd0020 	addiu	sp,sp,32
8003e6a4:	03e00008 	jr	ra
8003e6a8:	00000000 	nop
8003e6ac:	0800f9a7 	j	8003e69c <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE+0x7c>
8003e6b0:	00000000 	nop

8003e6b4 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE>:
    pub fn unwrap_or(self, default: T) -> T {
8003e6b4:	27bdffe0 	addiu	sp,sp,-32
8003e6b8:	afa60004 	sw	a2,4(sp)
8003e6bc:	afa40008 	sw	a0,8(sp)
8003e6c0:	afa5000c 	sw	a1,12(sp)
8003e6c4:	afa60018 	sw	a2,24(sp)
8003e6c8:	24010000 	li	at,0
        match self {
8003e6cc:	a3a00017 	sb	zero,23(sp)
8003e6d0:	24010001 	li	at,1
8003e6d4:	a3a10017 	sb	at,23(sp)
8003e6d8:	8fa10008 	lw	at,8(sp)
8003e6dc:	14200009 	bnez	at,8003e704 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE+0x50>
8003e6e0:	00000000 	nop
8003e6e4:	0800f9bb 	j	8003e6ec <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE+0x38>
8003e6e8:	00000000 	nop
8003e6ec:	8fa10004 	lw	at,4(sp)
8003e6f0:	24020000 	li	v0,0
            None => default,
8003e6f4:	a3a00017 	sb	zero,23(sp)
8003e6f8:	afa10010 	sw	at,16(sp)
8003e6fc:	0800f9c6 	j	8003e718 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE+0x64>
8003e700:	00000000 	nop
            Some(x) => x,
8003e704:	8fa1000c 	lw	at,12(sp)
8003e708:	afa1001c 	sw	at,28(sp)
8003e70c:	afa10010 	sw	at,16(sp)
8003e710:	0800f9c6 	j	8003e718 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE+0x64>
8003e714:	00000000 	nop
    }
8003e718:	93a10017 	lbu	at,23(sp)
8003e71c:	30210001 	andi	at,at,0x1
8003e720:	14200007 	bnez	at,8003e740 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE+0x8c>
8003e724:	00000000 	nop
8003e728:	0800f9cc 	j	8003e730 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE+0x7c>
8003e72c:	00000000 	nop
8003e730:	8fa20010 	lw	v0,16(sp)
8003e734:	27bd0020 	addiu	sp,sp,32
8003e738:	03e00008 	jr	ra
8003e73c:	00000000 	nop
8003e740:	0800f9cc 	j	8003e730 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE+0x7c>
8003e744:	00000000 	nop

8003e748 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hd37948e99cc8a5c6E>:
    pub const unsafe fn unwrap_unchecked(self) -> T {
8003e748:	27bdffe0 	addiu	sp,sp,-32
8003e74c:	afa40014 	sw	a0,20(sp)
8003e750:	afa50018 	sw	a1,24(sp)
        match self {
8003e754:	8fa10014 	lw	at,20(sp)
8003e758:	14200005 	bnez	at,8003e770 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hd37948e99cc8a5c6E+0x28>
8003e75c:	00000000 	nop
8003e760:	0800f9da 	j	8003e768 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hd37948e99cc8a5c6E+0x20>
8003e764:	00000000 	nop
            None => unsafe { hint::unreachable_unchecked() },
8003e768:	0c00ed21 	jal	8003b484 <_ZN4core4hint21unreachable_unchecked17hb65475a0a116f39aE>
8003e76c:	00000000 	nop
            Some(val) => val,
8003e770:	8fa20018 	lw	v0,24(sp)
8003e774:	afa2001c 	sw	v0,28(sp)
8003e778:	27bd0020 	addiu	sp,sp,32
    }
8003e77c:	03e00008 	jr	ra
8003e780:	00000000 	nop

8003e784 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hfe6e6fd17f6453c3E>:
    pub const unsafe fn unwrap_unchecked(self) -> T {
8003e784:	27bdffe8 	addiu	sp,sp,-24
8003e788:	afa40010 	sw	a0,16(sp)
        match self {
8003e78c:	8fa10010 	lw	at,16(sp)
8003e790:	14200005 	bnez	at,8003e7a8 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hfe6e6fd17f6453c3E+0x24>
8003e794:	00000000 	nop
8003e798:	0800f9e8 	j	8003e7a0 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hfe6e6fd17f6453c3E+0x1c>
8003e79c:	00000000 	nop
            None => unsafe { hint::unreachable_unchecked() },
8003e7a0:	0c00ed21 	jal	8003b484 <_ZN4core4hint21unreachable_unchecked17hb65475a0a116f39aE>
8003e7a4:	00000000 	nop
            Some(val) => val,
8003e7a8:	8fa20010 	lw	v0,16(sp)
8003e7ac:	afa20014 	sw	v0,20(sp)
8003e7b0:	27bd0018 	addiu	sp,sp,24
    }
8003e7b4:	03e00008 	jr	ra
8003e7b8:	00000000 	nop

8003e7bc <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E>:
    pub fn map<U, F>(self, f: F) -> Option<U>
8003e7bc:	27bdffe0 	addiu	sp,sp,-32
8003e7c0:	afbf001c 	sw	ra,28(sp)
8003e7c4:	a3a40012 	sb	a0,18(sp)
8003e7c8:	a3a50013 	sb	a1,19(sp)
8003e7cc:	24010000 	li	at,0
        match self {
8003e7d0:	a3a00019 	sb	zero,25(sp)
8003e7d4:	24010001 	li	at,1
8003e7d8:	a3a10019 	sb	at,25(sp)
8003e7dc:	93a10012 	lbu	at,18(sp)
8003e7e0:	30210001 	andi	at,at,0x1
8003e7e4:	14200007 	bnez	at,8003e804 <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E+0x48>
8003e7e8:	00000000 	nop
8003e7ec:	0800f9fd 	j	8003e7f4 <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E+0x38>
8003e7f0:	00000000 	nop
8003e7f4:	3c010011 	lui	at,0x11
            None => None,
8003e7f8:	afa10014 	sw	at,20(sp)
8003e7fc:	0800fa0c 	j	8003e830 <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E+0x74>
8003e800:	00000000 	nop
            Some(x) => Some(f(x)),
8003e804:	93a10013 	lbu	at,19(sp)
8003e808:	a3a1001b 	sb	at,27(sp)
8003e80c:	24020000 	li	v0,0
8003e810:	a3a00019 	sb	zero,25(sp)
8003e814:	a3a10018 	sb	at,24(sp)
8003e818:	93a40018 	lbu	a0,24(sp)
8003e81c:	0c00ecca 	jal	8003b328 <_ZN4core3ops8function6FnOnce9call_once17h58ccafbc73184b93E>
8003e820:	00000000 	nop
8003e824:	afa20014 	sw	v0,20(sp)
8003e828:	0800fa0c 	j	8003e830 <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E+0x74>
8003e82c:	00000000 	nop
    }
8003e830:	93a10019 	lbu	at,25(sp)
8003e834:	30210001 	andi	at,at,0x1
8003e838:	14200008 	bnez	at,8003e85c <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E+0xa0>
8003e83c:	00000000 	nop
8003e840:	0800fa12 	j	8003e848 <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E+0x8c>
8003e844:	00000000 	nop
8003e848:	8fa20014 	lw	v0,20(sp)
8003e84c:	8fbf001c 	lw	ra,28(sp)
8003e850:	27bd0020 	addiu	sp,sp,32
8003e854:	03e00008 	jr	ra
8003e858:	00000000 	nop
8003e85c:	0800fa12 	j	8003e848 <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E+0x8c>
8003e860:	00000000 	nop

8003e864 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE>:
    pub fn map<U, F>(self, f: F) -> Option<U>
8003e864:	27bdffd0 	addiu	sp,sp,-48
8003e868:	afbf002c 	sw	ra,44(sp)
8003e86c:	afa40014 	sw	a0,20(sp)
8003e870:	afa50018 	sw	a1,24(sp)
8003e874:	24010000 	li	at,0
        match self {
8003e878:	a3a00026 	sb	zero,38(sp)
8003e87c:	24010001 	li	at,1
8003e880:	a3a10026 	sb	at,38(sp)
8003e884:	8fa10014 	lw	at,20(sp)
8003e888:	14200007 	bnez	at,8003e8a8 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE+0x44>
8003e88c:	00000000 	nop
8003e890:	0800fa26 	j	8003e898 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE+0x34>
8003e894:	00000000 	nop
8003e898:	3c010011 	lui	at,0x11
            None => None,
8003e89c:	afa1001c 	sw	at,28(sp)
8003e8a0:	0800fa35 	j	8003e8d4 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE+0x70>
8003e8a4:	00000000 	nop
            Some(x) => Some(f(x)),
8003e8a8:	8fa10018 	lw	at,24(sp)
8003e8ac:	afa10028 	sw	at,40(sp)
8003e8b0:	24020000 	li	v0,0
8003e8b4:	a3a00026 	sb	zero,38(sp)
8003e8b8:	afa10020 	sw	at,32(sp)
8003e8bc:	8fa40020 	lw	a0,32(sp)
8003e8c0:	0c0117ce 	jal	80045f38 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17he800632fb07a6c54E>
8003e8c4:	00000000 	nop
8003e8c8:	afa2001c 	sw	v0,28(sp)
8003e8cc:	0800fa35 	j	8003e8d4 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE+0x70>
8003e8d0:	00000000 	nop
    }
8003e8d4:	93a10026 	lbu	at,38(sp)
8003e8d8:	30210001 	andi	at,at,0x1
8003e8dc:	14200008 	bnez	at,8003e900 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE+0x9c>
8003e8e0:	00000000 	nop
8003e8e4:	0800fa3b 	j	8003e8ec <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE+0x88>
8003e8e8:	00000000 	nop
8003e8ec:	8fa2001c 	lw	v0,28(sp)
8003e8f0:	8fbf002c 	lw	ra,44(sp)
8003e8f4:	27bd0030 	addiu	sp,sp,48
8003e8f8:	03e00008 	jr	ra
8003e8fc:	00000000 	nop
8003e900:	0800fa3b 	j	8003e8ec <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE+0x88>
8003e904:	00000000 	nop

8003e908 <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E>:
    pub fn map<U, F>(self, f: F) -> Option<U>
8003e908:	27bdffd8 	addiu	sp,sp,-40
8003e90c:	afbf0024 	sw	ra,36(sp)
8003e910:	afa60010 	sw	a2,16(sp)
8003e914:	a3a40016 	sb	a0,22(sp)
8003e918:	a3a50017 	sb	a1,23(sp)
8003e91c:	afa6001c 	sw	a2,28(sp)
8003e920:	24010000 	li	at,0
        match self {
8003e924:	a3a0001b 	sb	zero,27(sp)
8003e928:	24010001 	li	at,1
8003e92c:	a3a1001b 	sb	at,27(sp)
8003e930:	93a10016 	lbu	at,22(sp)
8003e934:	30210001 	andi	at,at,0x1
8003e938:	14200007 	bnez	at,8003e958 <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E+0x50>
8003e93c:	00000000 	nop
8003e940:	0800fa52 	j	8003e948 <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E+0x40>
8003e944:	00000000 	nop
8003e948:	24010000 	li	at,0
            None => None,
8003e94c:	a3a00018 	sb	zero,24(sp)
8003e950:	0800fa64 	j	8003e990 <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E+0x88>
8003e954:	00000000 	nop
            Some(x) => Some(f(x)),
8003e958:	8fa40010 	lw	a0,16(sp)
8003e95c:	93a10017 	lbu	at,23(sp)
8003e960:	a3a10023 	sb	at,35(sp)
8003e964:	24020000 	li	v0,0
8003e968:	a3a0001b 	sb	zero,27(sp)
8003e96c:	a3a1001a 	sb	at,26(sp)
8003e970:	93a5001a 	lbu	a1,26(sp)
8003e974:	0c012136 	jal	800484d8 <_ZN4core6escape24EscapeIterInner$LT$_$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17haa901ecadf721869E>
8003e978:	00000000 	nop
8003e97c:	a3a20019 	sb	v0,25(sp)
8003e980:	24010001 	li	at,1
8003e984:	a3a10018 	sb	at,24(sp)
8003e988:	0800fa64 	j	8003e990 <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E+0x88>
8003e98c:	00000000 	nop
    }
8003e990:	93a1001b 	lbu	at,27(sp)
8003e994:	30210001 	andi	at,at,0x1
8003e998:	14200009 	bnez	at,8003e9c0 <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E+0xb8>
8003e99c:	00000000 	nop
8003e9a0:	0800fa6a 	j	8003e9a8 <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E+0xa0>
8003e9a4:	00000000 	nop
8003e9a8:	93a20018 	lbu	v0,24(sp)
8003e9ac:	93a30019 	lbu	v1,25(sp)
8003e9b0:	8fbf0024 	lw	ra,36(sp)
8003e9b4:	27bd0028 	addiu	sp,sp,40
8003e9b8:	03e00008 	jr	ra
8003e9bc:	00000000 	nop
8003e9c0:	0800fa6a 	j	8003e9a8 <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E+0xa0>
8003e9c4:	00000000 	nop

8003e9c8 <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE>:
    pub fn map<U, F>(self, f: F) -> Option<U>
8003e9c8:	27bdffc8 	addiu	sp,sp,-56
8003e9cc:	afbf0034 	sw	ra,52(sp)
8003e9d0:	afa60010 	sw	a2,16(sp)
8003e9d4:	afa40014 	sw	a0,20(sp)
8003e9d8:	afa50018 	sw	a1,24(sp)
8003e9dc:	afa6002c 	sw	a2,44(sp)
8003e9e0:	24010000 	li	at,0
        match self {
8003e9e4:	a3a0002b 	sb	zero,43(sp)
8003e9e8:	24010001 	li	at,1
8003e9ec:	a3a1002b 	sb	at,43(sp)
8003e9f0:	8fa10014 	lw	at,20(sp)
8003e9f4:	14200006 	bnez	at,8003ea10 <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE+0x48>
8003e9f8:	00000000 	nop
8003e9fc:	0800fa81 	j	8003ea04 <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE+0x3c>
8003ea00:	00000000 	nop
            None => None,
8003ea04:	afa0001c 	sw	zero,28(sp)
8003ea08:	0800fa92 	j	8003ea48 <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE+0x80>
8003ea0c:	00000000 	nop
            Some(x) => Some(f(x)),
8003ea10:	8fa40010 	lw	a0,16(sp)
8003ea14:	8fa10018 	lw	at,24(sp)
8003ea18:	afa10030 	sw	at,48(sp)
8003ea1c:	24020000 	li	v0,0
8003ea20:	a3a0002b 	sb	zero,43(sp)
8003ea24:	afa10024 	sw	at,36(sp)
8003ea28:	8fa50024 	lw	a1,36(sp)
8003ea2c:	0c011f29 	jal	80047ca4 <_ZN4core7unicode12unicode_data11skip_search28_$u7b$$u7b$closure$u7d$$u7d$17hf201449e22019ac1E>
8003ea30:	00000000 	nop
8003ea34:	afa20020 	sw	v0,32(sp)
8003ea38:	24010001 	li	at,1
8003ea3c:	afa1001c 	sw	at,28(sp)
8003ea40:	0800fa92 	j	8003ea48 <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE+0x80>
8003ea44:	00000000 	nop
    }
8003ea48:	93a1002b 	lbu	at,43(sp)
8003ea4c:	30210001 	andi	at,at,0x1
8003ea50:	14200009 	bnez	at,8003ea78 <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE+0xb0>
8003ea54:	00000000 	nop
8003ea58:	0800fa98 	j	8003ea60 <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE+0x98>
8003ea5c:	00000000 	nop
8003ea60:	8fa2001c 	lw	v0,28(sp)
8003ea64:	8fa30020 	lw	v1,32(sp)
8003ea68:	8fbf0034 	lw	ra,52(sp)
8003ea6c:	27bd0038 	addiu	sp,sp,56
8003ea70:	03e00008 	jr	ra
8003ea74:	00000000 	nop
8003ea78:	0800fa98 	j	8003ea60 <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE+0x98>
8003ea7c:	00000000 	nop

8003ea80 <_ZN4core6option19Option$LT$$RF$T$GT$6cloned17he089691e6463c91bE>:
    pub fn cloned(self) -> Option<T>
8003ea80:	27bdfff0 	addiu	sp,sp,-16
8003ea84:	afa40000 	sw	a0,0(sp)
        match self {
8003ea88:	8fa10000 	lw	at,0(sp)
8003ea8c:	14200007 	bnez	at,8003eaac <_ZN4core6option19Option$LT$$RF$T$GT$6cloned17he089691e6463c91bE+0x2c>
8003ea90:	00000000 	nop
8003ea94:	0800faa7 	j	8003ea9c <_ZN4core6option19Option$LT$$RF$T$GT$6cloned17he089691e6463c91bE+0x1c>
8003ea98:	00000000 	nop
8003ea9c:	24010000 	li	at,0
            None => None,
8003eaa0:	a3a00006 	sb	zero,6(sp)
8003eaa4:	0800fab4 	j	8003ead0 <_ZN4core6option19Option$LT$$RF$T$GT$6cloned17he089691e6463c91bE+0x50>
8003eaa8:	00000000 	nop
            Some(t) => Some(t.clone()),
8003eaac:	8fa10000 	lw	at,0(sp)
8003eab0:	afa10008 	sw	at,8(sp)
8003eab4:	afa1000c 	sw	at,12(sp)
            $(
                #[stable(feature = "rust1", since = "1.0.0")]
                impl Clone for $t {
                    #[inline(always)]
                    fn clone(&self) -> Self {
                        *self
8003eab8:	90210000 	lbu	at,0(at)
8003eabc:	a3a10007 	sb	at,7(sp)
8003eac0:	24010001 	li	at,1
8003eac4:	a3a10006 	sb	at,6(sp)
8003eac8:	0800fab4 	j	8003ead0 <_ZN4core6option19Option$LT$$RF$T$GT$6cloned17he089691e6463c91bE+0x50>
8003eacc:	00000000 	nop
    }
8003ead0:	93a20006 	lbu	v0,6(sp)
8003ead4:	93a30007 	lbu	v1,7(sp)
8003ead8:	27bd0010 	addiu	sp,sp,16
8003eadc:	03e00008 	jr	ra
8003eae0:	00000000 	nop

8003eae4 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>:
const fn unwrap_failed() -> ! {
8003eae4:	27bdfff0 	addiu	sp,sp,-16
8003eae8:	00803025 	move	a2,a0
    panic("called `Option::unwrap()` on a `None` value")
8003eaec:	3c01810a 	lui	at,0x810a
8003eaf0:	2424b738 	addiu	a0,at,-18632
8003eaf4:	2405002b 	li	a1,43
8003eaf8:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
8003eafc:	00000000 	nop

8003eb00 <_ZN4core6option13expect_failed17h75c0aba452453316E>:
const fn expect_failed(msg: &str) -> ! {
8003eb00:	27bdffe8 	addiu	sp,sp,-24
8003eb04:	afa40010 	sw	a0,16(sp)
8003eb08:	afa50014 	sw	a1,20(sp)
    panic_str(msg)
8003eb0c:	0c00fbc2 	jal	8003ef08 <_ZN4core9panicking9panic_str17h0c539eed0053eabcE>
8003eb10:	00000000 	nop

8003eb14 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h448b262f87af77b6E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003eb14:	27bdfff0 	addiu	sp,sp,-16
8003eb18:	afa40004 	sw	a0,4(sp)
        match self {
8003eb1c:	8fa10004 	lw	at,4(sp)
8003eb20:	14200006 	bnez	at,8003eb3c <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h448b262f87af77b6E+0x28>
8003eb24:	00000000 	nop
8003eb28:	0800facc 	j	8003eb30 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h448b262f87af77b6E+0x1c>
8003eb2c:	00000000 	nop
            None => ControlFlow::Break(None),
8003eb30:	afa00008 	sw	zero,8(sp)
8003eb34:	0800fad4 	j	8003eb50 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h448b262f87af77b6E+0x3c>
8003eb38:	00000000 	nop
            Some(v) => ControlFlow::Continue(v),
8003eb3c:	8fa10004 	lw	at,4(sp)
8003eb40:	afa1000c 	sw	at,12(sp)
8003eb44:	afa10008 	sw	at,8(sp)
    }
8003eb48:	0800fad4 	j	8003eb50 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h448b262f87af77b6E+0x3c>
8003eb4c:	00000000 	nop
8003eb50:	8fa20008 	lw	v0,8(sp)
8003eb54:	27bd0010 	addiu	sp,sp,16
8003eb58:	03e00008 	jr	ra
8003eb5c:	00000000 	nop

8003eb60 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h4ffea4232db24cdcE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003eb60:	27bdfff8 	addiu	sp,sp,-8
8003eb64:	a3a40005 	sb	a0,5(sp)
        match self {
8003eb68:	93a10005 	lbu	at,5(sp)
8003eb6c:	30210001 	andi	at,at,0x1
8003eb70:	14200007 	bnez	at,8003eb90 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h4ffea4232db24cdcE+0x30>
8003eb74:	00000000 	nop
8003eb78:	0800fae0 	j	8003eb80 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h4ffea4232db24cdcE+0x20>
8003eb7c:	00000000 	nop
8003eb80:	24010001 	li	at,1
            None => ControlFlow::Break(None),
8003eb84:	a3a10006 	sb	at,6(sp)
8003eb88:	0800fae8 	j	8003eba0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h4ffea4232db24cdcE+0x40>
8003eb8c:	00000000 	nop
8003eb90:	24010000 	li	at,0
            Some(v) => ControlFlow::Continue(v),
8003eb94:	a3a00006 	sb	zero,6(sp)
    }
8003eb98:	0800fae8 	j	8003eba0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h4ffea4232db24cdcE+0x40>
8003eb9c:	00000000 	nop
8003eba0:	93a10006 	lbu	at,6(sp)
8003eba4:	30220001 	andi	v0,at,0x1
8003eba8:	27bd0008 	addiu	sp,sp,8
8003ebac:	03e00008 	jr	ra
8003ebb0:	00000000 	nop

8003ebb4 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hd9e76cd92f378f0bE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003ebb4:	27bdfff0 	addiu	sp,sp,-16
8003ebb8:	afa40004 	sw	a0,4(sp)
        match self {
8003ebbc:	8fa10004 	lw	at,4(sp)
8003ebc0:	14200006 	bnez	at,8003ebdc <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hd9e76cd92f378f0bE+0x28>
8003ebc4:	00000000 	nop
8003ebc8:	0800faf4 	j	8003ebd0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hd9e76cd92f378f0bE+0x1c>
8003ebcc:	00000000 	nop
            None => ControlFlow::Break(None),
8003ebd0:	afa00008 	sw	zero,8(sp)
8003ebd4:	0800fafc 	j	8003ebf0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hd9e76cd92f378f0bE+0x3c>
8003ebd8:	00000000 	nop
            Some(v) => ControlFlow::Continue(v),
8003ebdc:	8fa10004 	lw	at,4(sp)
8003ebe0:	afa1000c 	sw	at,12(sp)
8003ebe4:	afa10008 	sw	at,8(sp)
    }
8003ebe8:	0800fafc 	j	8003ebf0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hd9e76cd92f378f0bE+0x3c>
8003ebec:	00000000 	nop
8003ebf0:	8fa20008 	lw	v0,8(sp)
8003ebf4:	27bd0010 	addiu	sp,sp,16
8003ebf8:	03e00008 	jr	ra
8003ebfc:	00000000 	nop

8003ec00 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17heb3c9f832ee98659E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003ec00:	27bdfff0 	addiu	sp,sp,-16
8003ec04:	afa40004 	sw	a0,4(sp)
        match self {
8003ec08:	8fa10004 	lw	at,4(sp)
8003ec0c:	14200006 	bnez	at,8003ec28 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17heb3c9f832ee98659E+0x28>
8003ec10:	00000000 	nop
8003ec14:	0800fb07 	j	8003ec1c <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17heb3c9f832ee98659E+0x1c>
8003ec18:	00000000 	nop
            None => ControlFlow::Break(None),
8003ec1c:	afa00008 	sw	zero,8(sp)
8003ec20:	0800fb0f 	j	8003ec3c <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17heb3c9f832ee98659E+0x3c>
8003ec24:	00000000 	nop
            Some(v) => ControlFlow::Continue(v),
8003ec28:	8fa10004 	lw	at,4(sp)
8003ec2c:	afa1000c 	sw	at,12(sp)
8003ec30:	afa10008 	sw	at,8(sp)
    }
8003ec34:	0800fb0f 	j	8003ec3c <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17heb3c9f832ee98659E+0x3c>
8003ec38:	00000000 	nop
8003ec3c:	8fa20008 	lw	v0,8(sp)
8003ec40:	27bd0010 	addiu	sp,sp,16
8003ec44:	03e00008 	jr	ra
8003ec48:	00000000 	nop

8003ec4c <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h273a54921453764dE>:
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
8003ec4c:	27bdfff0 	addiu	sp,sp,-16
            None => None,
8003ec50:	afa00008 	sw	zero,8(sp)
    }
8003ec54:	8fa20004 	lw	v0,4(sp)
8003ec58:	8fa30008 	lw	v1,8(sp)
8003ec5c:	27bd0010 	addiu	sp,sp,16
8003ec60:	03e00008 	jr	ra
8003ec64:	00000000 	nop

8003ec68 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h499111ea8ee19989E>:
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
8003ec68:	27bdfff0 	addiu	sp,sp,-16
            None => None,
8003ec6c:	afa00004 	sw	zero,4(sp)
    }
8003ec70:	8fa20004 	lw	v0,4(sp)
8003ec74:	8fa30008 	lw	v1,8(sp)
8003ec78:	27bd0010 	addiu	sp,sp,16
8003ec7c:	03e00008 	jr	ra
8003ec80:	00000000 	nop

8003ec84 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h50f37f7fa945e0e3E>:
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
8003ec84:	27bdfff0 	addiu	sp,sp,-16
            None => None,
8003ec88:	afa00008 	sw	zero,8(sp)
    }
8003ec8c:	8fa20004 	lw	v0,4(sp)
8003ec90:	8fa30008 	lw	v1,8(sp)
8003ec94:	27bd0010 	addiu	sp,sp,16
8003ec98:	03e00008 	jr	ra
8003ec9c:	00000000 	nop

8003eca0 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h766c7ebb6933a2baE>:
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
8003eca0:	27bdfff0 	addiu	sp,sp,-16
8003eca4:	3c010011 	lui	at,0x11
            None => None,
8003eca8:	afa10008 	sw	at,8(sp)
    }
8003ecac:	8fa20004 	lw	v0,4(sp)
8003ecb0:	8fa30008 	lw	v1,8(sp)
8003ecb4:	27bd0010 	addiu	sp,sp,16
8003ecb8:	03e00008 	jr	ra
8003ecbc:	00000000 	nop

8003ecc0 <_ZN4core5panic8location8Location6caller17h8d824196f6839e99E>:
    pub const fn caller() -> &'static Location<'static> {
8003ecc0:	27bdfff8 	addiu	sp,sp,-8
        crate::intrinsics::caller_location()
8003ecc4:	afa40004 	sw	a0,4(sp)
8003ecc8:	8fa20004 	lw	v0,4(sp)
8003eccc:	27bd0008 	addiu	sp,sp,8
    }
8003ecd0:	03e00008 	jr	ra
8003ecd4:	00000000 	nop

8003ecd8 <_ZN4core5panic10panic_info9PanicInfo20internal_constructor17hc87a2c1ce13c07fdE>:
        reason = "internal details of the implementation of the `panic!` and related macros",
        issue = "none"
    )]
    #[doc(hidden)]
    #[inline]
    pub fn internal_constructor(
8003ecd8:	27bdfff0 	addiu	sp,sp,-16
8003ecdc:	00801025 	move	v0,a0
8003ece0:	8fa10020 	lw	at,32(sp)
8003ece4:	afa50004 	sw	a1,4(sp)
8003ece8:	afa60008 	sw	a2,8(sp)
8003ecec:	a3a7000e 	sb	a3,14(sp)
8003ecf0:	a3a1000f 	sb	at,15(sp)
        location: &'a Location<'a>,
        can_unwind: bool,
        force_no_backtrace: bool,
    ) -> Self {
        struct NoPayload;
        PanicInfo { location, message, payload: &NoPayload, can_unwind, force_no_backtrace }
8003ecf4:	3c03810a 	lui	v1,0x810a
8003ecf8:	2463b0b8 	addiu	v1,v1,-20296
8003ecfc:	ac830000 	sw	v1,0(a0)
8003ed00:	3c03810a 	lui	v1,0x810a
8003ed04:	2463b764 	addiu	v1,v1,-18588
8003ed08:	ac830004 	sw	v1,4(a0)
8003ed0c:	ac850008 	sw	a1,8(a0)
8003ed10:	ac86000c 	sw	a2,12(a0)
8003ed14:	a0870010 	sb	a3,16(a0)
8003ed18:	a0810011 	sb	at,17(a0)
8003ed1c:	27bd0010 	addiu	sp,sp,16
    }
8003ed20:	03e00008 	jr	ra
8003ed24:	00000000 	nop

8003ed28 <_ZN4core5panic10panic_info9PanicInfo7message17h276618d293c608e9E>:
    /// If the `panic!` macro from the `core` crate (not from `std`)
    /// was used with a formatting string and some additional arguments,
    /// returns that message ready to be used for example with [`fmt::write`]
    #[must_use]
    #[unstable(feature = "panic_info_message", issue = "66745")]
    pub fn message(&self) -> Option<&fmt::Arguments<'_>> {
8003ed28:	27bdfff8 	addiu	sp,sp,-8
8003ed2c:	afa40004 	sw	a0,4(sp)
        self.message
8003ed30:	8c820008 	lw	v0,8(a0)
8003ed34:	27bd0008 	addiu	sp,sp,8
    }
8003ed38:	03e00008 	jr	ra
8003ed3c:	00000000 	nop

8003ed40 <_ZN4core5panic10panic_info9PanicInfo8location17hd53a7358fb18b234E>:
    ///
    /// panic!("Normal panic");
    /// ```
    #[must_use]
    #[stable(feature = "panic_hooks", since = "1.10.0")]
    pub fn location(&self) -> Option<&Location<'_>> {
8003ed40:	27bdfff8 	addiu	sp,sp,-8
8003ed44:	afa40004 	sw	a0,4(sp)
        // NOTE: If this is changed to sometimes return None,
        // deal with that case in std::panicking::default_hook and core::panicking::panic_fmt.
        Some(&self.location)
8003ed48:	8c81000c 	lw	at,12(a0)
8003ed4c:	afa10000 	sw	at,0(sp)
    }
8003ed50:	8fa20000 	lw	v0,0(sp)
8003ed54:	27bd0008 	addiu	sp,sp,8
8003ed58:	03e00008 	jr	ra
8003ed5c:	00000000 	nop

8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>:
#[cfg_attr(feature = "panic_immediate_abort", inline)]
#[track_caller]
#[lang = "panic_fmt"] // needed for const-evaluated panics
#[rustc_do_not_const_check] // hooked by const-eval
#[rustc_const_unstable(feature = "panic_internals", issue = "none")]
pub const fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {
8003ed60:	27bdffc0 	addiu	sp,sp,-64
8003ed64:	afbf003c 	sw	ra,60(sp)
8003ed68:	afa5001c 	sw	a1,28(sp)
8003ed6c:	afa40020 	sw	a0,32(sp)
    if cfg!(feature = "panic_immediate_abort") {
8003ed70:	0800fb5e 	j	8003ed78 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE+0x18>
8003ed74:	00000000 	nop
        #[lang = "panic_impl"]
        fn panic_impl(pi: &PanicInfo<'_>) -> !;
    }

    let pi = PanicInfo::internal_constructor(
        Some(&fmt),
8003ed78:	8fa4001c 	lw	a0,28(sp)
8003ed7c:	8fa10020 	lw	at,32(sp)
8003ed80:	afa10038 	sw	at,56(sp)
        Location::caller(),
8003ed84:	0c00fb30 	jal	8003ecc0 <_ZN4core5panic8location8Location6caller17h8d824196f6839e99E>
8003ed88:	00000000 	nop
8003ed8c:	00403025 	move	a2,v0
    let pi = PanicInfo::internal_constructor(
8003ed90:	8fa50038 	lw	a1,56(sp)
8003ed94:	03a00825 	move	at,sp
8003ed98:	ac200010 	sw	zero,16(at)
8003ed9c:	27a40024 	addiu	a0,sp,36
8003eda0:	afa40018 	sw	a0,24(sp)
8003eda4:	24070001 	li	a3,1
8003eda8:	0c00fb36 	jal	8003ecd8 <_ZN4core5panic10panic_info9PanicInfo20internal_constructor17hc87a2c1ce13c07fdE>
8003edac:	00000000 	nop
8003edb0:	8fa40018 	lw	a0,24(sp)
        /* can_unwind */ true,
        /* force_no_backtrace */ false,
    );

    // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.
    unsafe { panic_impl(&pi) }
8003edb4:	0c00b591 	jal	8002d644 <rust_begin_unwind>
8003edb8:	00000000 	nop

8003edbc <_ZN4core9panicking18panic_nounwind_fmt17hf69a56259d4ee080E>:
// This attribute has the key side-effect that if the panic handler ignores `can_unwind`
// and unwinds anyway, we will hit the "unwinding out of nounwind function" guard,
// which causes a "panic in a function that cannot unwind".
#[rustc_nounwind]
#[rustc_const_unstable(feature = "panic_internals", issue = "none")]
pub const fn panic_nounwind_fmt(fmt: fmt::Arguments<'_>, force_no_backtrace: bool) -> ! {
8003edbc:	27bdffd0 	addiu	sp,sp,-48
8003edc0:	a3a5002f 	sb	a1,47(sp)
    const fn comptime(fmt: fmt::Arguments<'_>, _force_no_backtrace: bool) -> ! {
        // We don't unwind anyway at compile-time so we can call the regular `panic_fmt`.
        panic_fmt(fmt);
    }

    super::intrinsics::const_eval_select((fmt, force_no_backtrace), comptime, runtime);
8003edc4:	8c810014 	lw	at,20(a0)
8003edc8:	afa10024 	sw	at,36(sp)
8003edcc:	8c810010 	lw	at,16(a0)
8003edd0:	afa10020 	sw	at,32(sp)
8003edd4:	8c81000c 	lw	at,12(a0)
8003edd8:	afa1001c 	sw	at,28(sp)
8003eddc:	8c810008 	lw	at,8(a0)
8003ede0:	afa10018 	sw	at,24(sp)
8003ede4:	8c810004 	lw	at,4(a0)
8003ede8:	afa10014 	sw	at,20(sp)
8003edec:	8c810000 	lw	at,0(a0)
8003edf0:	afa10010 	sw	at,16(sp)
8003edf4:	a3a50028 	sb	a1,40(sp)
8003edf8:	93a10028 	lbu	at,40(sp)
8003edfc:	30250001 	andi	a1,at,0x1
8003ee00:	27a40010 	addiu	a0,sp,16
8003ee04:	0c00fb83 	jal	8003ee0c <_ZN4core9panicking18panic_nounwind_fmt7runtime17h03c24f469ce74f85E>
8003ee08:	00000000 	nop

8003ee0c <_ZN4core9panicking18panic_nounwind_fmt7runtime17h03c24f469ce74f85E>:
    fn runtime(fmt: fmt::Arguments<'_>, force_no_backtrace: bool) -> ! {
8003ee0c:	27bdffb8 	addiu	sp,sp,-72
8003ee10:	afbf0044 	sw	ra,68(sp)
8003ee14:	afa6001c 	sw	a2,28(sp)
8003ee18:	afa40020 	sw	a0,32(sp)
8003ee1c:	00a00825 	move	at,a1
8003ee20:	afa10024 	sw	at,36(sp)
8003ee24:	a3a50043 	sb	a1,67(sp)
        if cfg!(feature = "panic_immediate_abort") {
8003ee28:	0800fb8c 	j	8003ee30 <_ZN4core9panicking18panic_nounwind_fmt7runtime17h03c24f469ce74f85E+0x24>
8003ee2c:	00000000 	nop
            Some(&fmt),
8003ee30:	8fa4001c 	lw	a0,28(sp)
8003ee34:	8fa10020 	lw	at,32(sp)
8003ee38:	afa1003c 	sw	at,60(sp)
            Location::caller(),
8003ee3c:	0c00fb30 	jal	8003ecc0 <_ZN4core5panic8location8Location6caller17h8d824196f6839e99E>
8003ee40:	00000000 	nop
8003ee44:	8fa10024 	lw	at,36(sp)
8003ee48:	00403025 	move	a2,v0
        let pi = PanicInfo::internal_constructor(
8003ee4c:	8fa5003c 	lw	a1,60(sp)
8003ee50:	30210001 	andi	at,at,0x1
8003ee54:	03a01025 	move	v0,sp
8003ee58:	ac410010 	sw	at,16(v0)
8003ee5c:	27a40028 	addiu	a0,sp,40
8003ee60:	afa40018 	sw	a0,24(sp)
8003ee64:	24070000 	li	a3,0
8003ee68:	0c00fb36 	jal	8003ecd8 <_ZN4core5panic10panic_info9PanicInfo20internal_constructor17hc87a2c1ce13c07fdE>
8003ee6c:	00000000 	nop
8003ee70:	8fa40018 	lw	a0,24(sp)
        unsafe { panic_impl(&pi) }
8003ee74:	0c00b591 	jal	8002d644 <rust_begin_unwind>
8003ee78:	00000000 	nop

8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>:
#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
#[cfg_attr(feature = "panic_immediate_abort", inline)]
#[track_caller]
#[rustc_const_unstable(feature = "panic_internals", issue = "none")]
#[lang = "panic"] // used by lints and miri for panics
pub const fn panic(expr: &'static str) -> ! {
8003ee7c:	27bdffb8 	addiu	sp,sp,-72
8003ee80:	afbf0044 	sw	ra,68(sp)
8003ee84:	afa60018 	sw	a2,24(sp)
8003ee88:	afa4003c 	sw	a0,60(sp)
8003ee8c:	afa50040 	sw	a1,64(sp)
    // reduce size overhead. The format_args! macro uses str's Display trait to
    // write expr, which calls Formatter::pad, which must accommodate string
    // truncation and padding (even though none is used here). Using
    // Arguments::new_const may allow the compiler to omit Formatter::pad from the
    // output binary, saving up to a few kilobytes.
    panic_fmt(fmt::Arguments::new_const(&[expr]));
8003ee90:	afa40034 	sw	a0,52(sp)
8003ee94:	afa50038 	sw	a1,56(sp)
8003ee98:	27a4001c 	addiu	a0,sp,28
8003ee9c:	afa40014 	sw	a0,20(sp)
8003eea0:	27a50034 	addiu	a1,sp,52
8003eea4:	24060001 	li	a2,1
8003eea8:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003eeac:	00000000 	nop
8003eeb0:	8fa40014 	lw	a0,20(sp)
8003eeb4:	8fa50018 	lw	a1,24(sp)
8003eeb8:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003eebc:	00000000 	nop

8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>:
#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
#[cfg_attr(feature = "panic_immediate_abort", inline)]
#[lang = "panic_nounwind"] // needed by codegen for non-unwinding panics
#[rustc_nounwind]
#[rustc_const_unstable(feature = "panic_internals", issue = "none")]
pub const fn panic_nounwind(expr: &'static str) -> ! {
8003eec0:	27bdffc0 	addiu	sp,sp,-64
8003eec4:	afbf003c 	sw	ra,60(sp)
8003eec8:	afa40034 	sw	a0,52(sp)
8003eecc:	afa50038 	sw	a1,56(sp)
    panic_nounwind_fmt(fmt::Arguments::new_const(&[expr]), /* force_no_backtrace */ false);
8003eed0:	afa4002c 	sw	a0,44(sp)
8003eed4:	afa50030 	sw	a1,48(sp)
8003eed8:	27a40014 	addiu	a0,sp,20
8003eedc:	afa40010 	sw	a0,16(sp)
8003eee0:	27a5002c 	addiu	a1,sp,44
8003eee4:	24060001 	li	a2,1
8003eee8:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003eeec:	00000000 	nop
8003eef0:	8fa40010 	lw	a0,16(sp)
8003eef4:	3c01810a 	lui	at,0x810a
8003eef8:	2426b7e4 	addiu	a2,at,-18460
8003eefc:	24050000 	li	a1,0
8003ef00:	0c00fb6f 	jal	8003edbc <_ZN4core9panicking18panic_nounwind_fmt17hf69a56259d4ee080E>
8003ef04:	00000000 	nop

8003ef08 <_ZN4core9panicking9panic_str17h0c539eed0053eabcE>:

#[inline]
#[track_caller]
#[rustc_diagnostic_item = "panic_str"]
#[rustc_const_unstable(feature = "panic_internals", issue = "none")]
pub const fn panic_str(expr: &str) -> ! {
8003ef08:	27bdffe0 	addiu	sp,sp,-32
8003ef0c:	afa60014 	sw	a2,20(sp)
8003ef10:	00a00825 	move	at,a1
8003ef14:	8fa50014 	lw	a1,20(sp)
8003ef18:	afa40018 	sw	a0,24(sp)
8003ef1c:	afa1001c 	sw	at,28(sp)
8003ef20:	27a40018 	addiu	a0,sp,24
    panic_display(&expr);
8003ef24:	0c00fbcb 	jal	8003ef2c <_ZN4core9panicking13panic_display17hf5921614ca7a587cE>
8003ef28:	00000000 	nop

8003ef2c <_ZN4core9panicking13panic_display17hf5921614ca7a587cE>:
#[track_caller]
#[rustc_do_not_const_check] // hooked by const-eval
// enforce a &&str argument in const-check and hook this by const-eval
#[rustc_const_panic_str]
#[rustc_const_unstable(feature = "panic_internals", issue = "none")]
pub const fn panic_display<T: fmt::Display>(x: &T) -> ! {
8003ef2c:	27bdffa0 	addiu	sp,sp,-96
8003ef30:	afbf005c 	sw	ra,92(sp)
8003ef34:	afa50020 	sw	a1,32(sp)
8003ef38:	afa40044 	sw	a0,68(sp)
8003ef3c:	afa40048 	sw	a0,72(sp)
8003ef40:	afa40054 	sw	a0,84(sp)
8003ef44:	3c018005 	lui	at,0x8005
8003ef48:	2421a1fc 	addiu	at,at,-24068
8003ef4c:	afa10058 	sw	at,88(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003ef50:	afa4004c 	sw	a0,76(sp)
8003ef54:	afa10050 	sw	at,80(sp)
    }
8003ef58:	8fa2004c 	lw	v0,76(sp)
8003ef5c:	8fa10050 	lw	at,80(sp)
    panic_fmt(format_args!("{}", *x));
8003ef60:	afa2003c 	sw	v0,60(sp)
8003ef64:	afa10040 	sw	at,64(sp)
8003ef68:	03a00825 	move	at,sp
8003ef6c:	24060001 	li	a2,1
8003ef70:	ac260010 	sw	a2,16(at)
8003ef74:	3c01810a 	lui	at,0x810a
8003ef78:	2425b730 	addiu	a1,at,-18640
8003ef7c:	27a40024 	addiu	a0,sp,36
8003ef80:	afa4001c 	sw	a0,28(sp)
8003ef84:	27a7003c 	addiu	a3,sp,60
8003ef88:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8003ef8c:	00000000 	nop
8003ef90:	8fa4001c 	lw	a0,28(sp)
8003ef94:	8fa50020 	lw	a1,32(sp)
8003ef98:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003ef9c:	00000000 	nop

8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>:

#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
#[cfg_attr(feature = "panic_immediate_abort", inline)]
#[track_caller]
#[lang = "panic_bounds_check"] // needed by codegen for panic on OOB array/slice access
fn panic_bounds_check(index: usize, len: usize) -> ! {
8003efa0:	27bdff80 	addiu	sp,sp,-128
8003efa4:	afbf007c 	sw	ra,124(sp)
8003efa8:	afa60020 	sw	a2,32(sp)
8003efac:	afa40024 	sw	a0,36(sp)
8003efb0:	afa50028 	sw	a1,40(sp)
    if cfg!(feature = "panic_immediate_abort") {
8003efb4:	0800fbef 	j	8003efbc <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE+0x1c>
8003efb8:	00000000 	nop
8003efbc:	27a20028 	addiu	v0,sp,40
8003efc0:	afa20068 	sw	v0,104(sp)
8003efc4:	afa20074 	sw	v0,116(sp)
8003efc8:	3c018005 	lui	at,0x8005
8003efcc:	2421a0f4 	addiu	at,at,-24332
8003efd0:	afa10078 	sw	at,120(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003efd4:	afa2006c 	sw	v0,108(sp)
8003efd8:	afa10070 	sw	at,112(sp)
    }
8003efdc:	8fa4006c 	lw	a0,108(sp)
8003efe0:	8fa30070 	lw	v1,112(sp)
8003efe4:	27a20024 	addiu	v0,sp,36
8003efe8:	afa20054 	sw	v0,84(sp)
8003efec:	afa20060 	sw	v0,96(sp)
8003eff0:	afa10064 	sw	at,100(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003eff4:	afa20058 	sw	v0,88(sp)
8003eff8:	afa1005c 	sw	at,92(sp)
    }
8003effc:	8fa20058 	lw	v0,88(sp)
8003f000:	8fa1005c 	lw	at,92(sp)
        super::intrinsics::abort()
    }

    panic!("index out of bounds: the len is {len} but the index is {index}")
8003f004:	afa40044 	sw	a0,68(sp)
8003f008:	afa30048 	sw	v1,72(sp)
8003f00c:	afa2004c 	sw	v0,76(sp)
8003f010:	afa10050 	sw	at,80(sp)
8003f014:	03a00825 	move	at,sp
8003f018:	24060002 	li	a2,2
8003f01c:	ac260010 	sw	a2,16(at)
8003f020:	3c01810a 	lui	at,0x810a
8003f024:	2425b808 	addiu	a1,at,-18424
8003f028:	27a4002c 	addiu	a0,sp,44
8003f02c:	afa4001c 	sw	a0,28(sp)
8003f030:	27a70044 	addiu	a3,sp,68
8003f034:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8003f038:	00000000 	nop
8003f03c:	8fa4001c 	lw	a0,28(sp)
8003f040:	8fa50020 	lw	a1,32(sp)
8003f044:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003f048:	00000000 	nop

8003f04c <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>:
#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
#[cfg_attr(feature = "panic_immediate_abort", inline)]
#[track_caller]
#[lang = "panic_misaligned_pointer_dereference"] // needed by codegen for panic on misaligned pointer deref
#[rustc_nounwind] // `CheckAlignment` MIR pass requires this function to never unwind
fn panic_misaligned_pointer_dereference(required: usize, found: usize) -> ! {
8003f04c:	27bdfe90 	addiu	sp,sp,-368
8003f050:	afbf016c 	sw	ra,364(sp)
8003f054:	afa60028 	sw	a2,40(sp)
8003f058:	afa4002c 	sw	a0,44(sp)
8003f05c:	afa50030 	sw	a1,48(sp)
    if cfg!(feature = "panic_immediate_abort") {
8003f060:	0800fc1a 	j	8003f068 <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE+0x1c>
8003f064:	00000000 	nop
8003f068:	27a2002c 	addiu	v0,sp,44
8003f06c:	afa20158 	sw	v0,344(sp)
8003f070:	afa20164 	sw	v0,356(sp)
8003f074:	3c018005 	lui	at,0x8005
8003f078:	24219698 	addiu	at,at,-26984
8003f07c:	afa10168 	sw	at,360(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003f080:	afa2015c 	sw	v0,348(sp)
8003f084:	afa10160 	sw	at,352(sp)
    }
8003f088:	8fa4015c 	lw	a0,348(sp)
8003f08c:	8fa30160 	lw	v1,352(sp)
8003f090:	27a20030 	addiu	v0,sp,48
8003f094:	afa20144 	sw	v0,324(sp)
8003f098:	afa20150 	sw	v0,336(sp)
8003f09c:	afa10154 	sw	at,340(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003f0a0:	afa20148 	sw	v0,328(sp)
8003f0a4:	afa1014c 	sw	at,332(sp)
    }
8003f0a8:	8fa20148 	lw	v0,328(sp)
8003f0ac:	8fa1014c 	lw	at,332(sp)
        super::intrinsics::abort()
    }

    panic_nounwind_fmt(
        format_args!(
8003f0b0:	afa4004c 	sw	a0,76(sp)
8003f0b4:	afa30050 	sw	v1,80(sp)
8003f0b8:	afa20054 	sw	v0,84(sp)
8003f0bc:	afa10058 	sw	at,88(sp)
8003f0c0:	24010003 	li	at,3
8003f0c4:	a3a100bf 	sb	at,191(sp)
8003f0c8:	24060002 	li	a2,2
8003f0cc:	afa600c0 	sw	a2,192(sp)
8003f0d0:	afa600c8 	sw	a2,200(sp)
8003f0d4:	93a900bf 	lbu	t1,191(sp)
8003f0d8:	8fa700c0 	lw	a3,192(sp)
8003f0dc:	8fa400c4 	lw	a0,196(sp)
8003f0e0:	8fa300c8 	lw	v1,200(sp)
8003f0e4:	8fa200cc 	lw	v0,204(sp)
8003f0e8:	afa00124 	sw	zero,292(sp)
8003f0ec:	24080020 	li	t0,32
8003f0f0:	afa80128 	sw	t0,296(sp)
8003f0f4:	a3a9012f 	sb	t1,303(sp)
8003f0f8:	24050004 	li	a1,4
8003f0fc:	afa50130 	sw	a1,304(sp)
8003f100:	afa70134 	sw	a3,308(sp)
8003f104:	afa40138 	sw	a0,312(sp)
8003f108:	afa3013c 	sw	v1,316(sp)
8003f10c:	afa20140 	sw	v0,320(sp)
        Self { position, fill, align, flags, precision, width }
8003f110:	afa000b0 	sw	zero,176(sp)
8003f114:	afa800ac 	sw	t0,172(sp)
8003f118:	a3a900b8 	sb	t1,184(sp)
8003f11c:	afa500b4 	sw	a1,180(sp)
8003f120:	afa7009c 	sw	a3,156(sp)
8003f124:	afa400a0 	sw	a0,160(sp)
8003f128:	afa300a4 	sw	v1,164(sp)
8003f12c:	afa200a8 	sw	v0,168(sp)
8003f130:	a3a100f3 	sb	at,243(sp)
8003f134:	afa600f4 	sw	a2,244(sp)
8003f138:	afa600fc 	sw	a2,252(sp)
8003f13c:	93a700f3 	lbu	a3,243(sp)
8003f140:	8fa400f4 	lw	a0,244(sp)
8003f144:	8fa300f8 	lw	v1,248(sp)
8003f148:	8fa200fc 	lw	v0,252(sp)
8003f14c:	8fa10100 	lw	at,256(sp)
8003f150:	24090001 	li	t1,1
8003f154:	afa90104 	sw	t1,260(sp)
8003f158:	afa80108 	sw	t0,264(sp)
8003f15c:	a3a7010f 	sb	a3,271(sp)
8003f160:	afa50110 	sw	a1,272(sp)
8003f164:	afa40114 	sw	a0,276(sp)
8003f168:	afa30118 	sw	v1,280(sp)
8003f16c:	afa2011c 	sw	v0,284(sp)
8003f170:	afa10120 	sw	at,288(sp)
8003f174:	afa900e4 	sw	t1,228(sp)
8003f178:	afa800e0 	sw	t0,224(sp)
8003f17c:	a3a700ec 	sb	a3,236(sp)
8003f180:	afa500e8 	sw	a1,232(sp)
8003f184:	afa400d0 	sw	a0,208(sp)
8003f188:	afa300d4 	sw	v1,212(sp)
8003f18c:	afa200d8 	sw	v0,216(sp)
8003f190:	afa100dc 	sw	at,220(sp)
8003f194:	8fa100b8 	lw	at,184(sp)
8003f198:	afa10078 	sw	at,120(sp)
8003f19c:	8fa100b4 	lw	at,180(sp)
8003f1a0:	afa10074 	sw	at,116(sp)
8003f1a4:	8fa100b0 	lw	at,176(sp)
8003f1a8:	afa10070 	sw	at,112(sp)
8003f1ac:	8fa100ac 	lw	at,172(sp)
8003f1b0:	afa1006c 	sw	at,108(sp)
8003f1b4:	8fa100a8 	lw	at,168(sp)
8003f1b8:	afa10068 	sw	at,104(sp)
8003f1bc:	8fa100a4 	lw	at,164(sp)
8003f1c0:	afa10064 	sw	at,100(sp)
8003f1c4:	8fa100a0 	lw	at,160(sp)
8003f1c8:	afa10060 	sw	at,96(sp)
8003f1cc:	8fa1009c 	lw	at,156(sp)
8003f1d0:	afa1005c 	sw	at,92(sp)
8003f1d4:	8fa100ec 	lw	at,236(sp)
8003f1d8:	afa10098 	sw	at,152(sp)
8003f1dc:	8fa100e8 	lw	at,232(sp)
8003f1e0:	afa10094 	sw	at,148(sp)
8003f1e4:	8fa100e4 	lw	at,228(sp)
8003f1e8:	afa10090 	sw	at,144(sp)
8003f1ec:	8fa100e0 	lw	at,224(sp)
8003f1f0:	afa1008c 	sw	at,140(sp)
8003f1f4:	8fa100dc 	lw	at,220(sp)
8003f1f8:	afa10088 	sw	at,136(sp)
8003f1fc:	8fa100d8 	lw	at,216(sp)
8003f200:	afa10084 	sw	at,132(sp)
8003f204:	8fa100d4 	lw	at,212(sp)
8003f208:	afa10080 	sw	at,128(sp)
8003f20c:	8fa100d0 	lw	at,208(sp)
8003f210:	afa1007c 	sw	at,124(sp)
8003f214:	03a00825 	move	at,sp
8003f218:	ac260018 	sw	a2,24(at)
8003f21c:	27a2005c 	addiu	v0,sp,92
8003f220:	ac220014 	sw	v0,20(at)
8003f224:	ac260010 	sw	a2,16(at)
8003f228:	3c01810a 	lui	at,0x810a
8003f22c:	2425b858 	addiu	a1,at,-18344
8003f230:	27a40034 	addiu	a0,sp,52
8003f234:	afa40024 	sw	a0,36(sp)
8003f238:	27a7004c 	addiu	a3,sp,76
8003f23c:	0c010442 	jal	80041108 <_ZN4core3fmt9Arguments16new_v1_formatted17h81eef672d0f8327cE>
8003f240:	00000000 	nop
8003f244:	8fa40024 	lw	a0,36(sp)
8003f248:	8fa60028 	lw	a2,40(sp)
8003f24c:	24050000 	li	a1,0
    panic_nounwind_fmt(
8003f250:	0c00fb6f 	jal	8003edbc <_ZN4core9panicking18panic_nounwind_fmt17hf69a56259d4ee080E>
8003f254:	00000000 	nop

8003f258 <_ZN4core9panicking13assert_failed17he51eb0fc731d6addE>:
/// Internal function for `assert_eq!` and `assert_ne!` macros
#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
#[cfg_attr(feature = "panic_immediate_abort", inline)]
#[track_caller]
#[doc(hidden)]
pub fn assert_failed<T, U>(
8003f258:	27bdffb8 	addiu	sp,sp,-72
8003f25c:	8fa20058 	lw	v0,88(sp)
8003f260:	afa50024 	sw	a1,36(sp)
8003f264:	afa60028 	sw	a2,40(sp)
8003f268:	a3a4002f 	sb	a0,47(sp)
) -> !
where
    T: fmt::Debug + ?Sized,
    U: fmt::Debug + ?Sized,
{
    assert_failed_inner(kind, &left, &right, args)
8003f26c:	8ce10014 	lw	at,20(a3)
8003f270:	afa10044 	sw	at,68(sp)
8003f274:	8ce10010 	lw	at,16(a3)
8003f278:	afa10040 	sw	at,64(sp)
8003f27c:	8ce1000c 	lw	at,12(a3)
8003f280:	afa1003c 	sw	at,60(sp)
8003f284:	8ce10008 	lw	at,8(a3)
8003f288:	afa10038 	sw	at,56(sp)
8003f28c:	8ce10004 	lw	at,4(a3)
8003f290:	afa10034 	sw	at,52(sp)
8003f294:	8ce10000 	lw	at,0(a3)
8003f298:	afa10030 	sw	at,48(sp)
8003f29c:	03a00825 	move	at,sp
8003f2a0:	ac220018 	sw	v0,24(at)
8003f2a4:	27a20030 	addiu	v0,sp,48
8003f2a8:	ac220014 	sw	v0,20(at)
8003f2ac:	3c02810a 	lui	v0,0x810a
8003f2b0:	2446b868 	addiu	a2,v0,-18328
8003f2b4:	ac260010 	sw	a2,16(at)
8003f2b8:	27a50024 	addiu	a1,sp,36
8003f2bc:	27a70028 	addiu	a3,sp,40
8003f2c0:	0c00fcb2 	jal	8003f2c8 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE>
8003f2c4:	00000000 	nop

8003f2c8 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE>:

/// Non-generic version of the above functions, to avoid code bloat.
#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
#[cfg_attr(feature = "panic_immediate_abort", inline)]
#[track_caller]
fn assert_failed_inner(
8003f2c8:	27bdfea8 	addiu	sp,sp,-344
8003f2cc:	afbf0154 	sw	ra,340(sp)
8003f2d0:	8fa10170 	lw	at,368(sp)
8003f2d4:	afa10020 	sw	at,32(sp)
8003f2d8:	8fa1016c 	lw	at,364(sp)
8003f2dc:	afa10024 	sw	at,36(sp)
8003f2e0:	8fa10168 	lw	at,360(sp)
8003f2e4:	a3a4002f 	sb	a0,47(sp)
8003f2e8:	afa50030 	sw	a1,48(sp)
8003f2ec:	afa60034 	sw	a2,52(sp)
8003f2f0:	afa70038 	sw	a3,56(sp)
8003f2f4:	afa1003c 	sw	at,60(sp)
    kind: AssertKind,
    left: &dyn fmt::Debug,
    right: &dyn fmt::Debug,
    args: Option<fmt::Arguments<'_>>,
) -> ! {
    let op = match kind {
8003f2f8:	93a1002f 	lbu	at,47(sp)
8003f2fc:	afa10028 	sw	at,40(sp)
8003f300:	1020000c 	beqz	at,8003f334 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0x6c>
8003f304:	00000000 	nop
8003f308:	0800fcc4 	j	8003f310 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0x48>
8003f30c:	00000000 	nop
8003f310:	8fa10028 	lw	at,40(sp)
8003f314:	24020001 	li	v0,1
8003f318:	1022000d 	beq	at,v0,8003f350 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0x88>
8003f31c:	00000000 	nop
8003f320:	0800fcca 	j	8003f328 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0x60>
8003f324:	00000000 	nop
8003f328:	0800fcdb 	j	8003f36c <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0xa4>
8003f32c:	00000000 	nop
8003f330:	0000000d 	break
        AssertKind::Eq => "==",
8003f334:	3c01810a 	lui	at,0x810a
8003f338:	2421b878 	addiu	at,at,-18312
8003f33c:	afa10040 	sw	at,64(sp)
8003f340:	24010002 	li	at,2
8003f344:	afa10044 	sw	at,68(sp)
8003f348:	0800fce2 	j	8003f388 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0xc0>
8003f34c:	00000000 	nop
        AssertKind::Ne => "!=",
8003f350:	3c01810a 	lui	at,0x810a
8003f354:	2421b87a 	addiu	at,at,-18310
8003f358:	afa10040 	sw	at,64(sp)
8003f35c:	24010002 	li	at,2
8003f360:	afa10044 	sw	at,68(sp)
8003f364:	0800fce2 	j	8003f388 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0xc0>
8003f368:	00000000 	nop
        AssertKind::Match => "matches",
8003f36c:	3c01810a 	lui	at,0x810a
8003f370:	2421b87c 	addiu	at,at,-18308
8003f374:	afa10040 	sw	at,64(sp)
8003f378:	24010007 	li	at,7
8003f37c:	afa10044 	sw	at,68(sp)
8003f380:	0800fce2 	j	8003f388 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0xc0>
8003f384:	00000000 	nop
    };

    match args {
8003f388:	8fa10024 	lw	at,36(sp)
8003f38c:	8c210000 	lw	at,0(at)
8003f390:	14200033 	bnez	at,8003f460 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0x198>
8003f394:	00000000 	nop
8003f398:	0800fce8 	j	8003f3a0 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0xd8>
8003f39c:	00000000 	nop
8003f3a0:	27a20040 	addiu	v0,sp,64
8003f3a4:	afa200f0 	sw	v0,240(sp)
8003f3a8:	afa200fc 	sw	v0,252(sp)
8003f3ac:	3c018005 	lui	at,0x8005
8003f3b0:	2421a1fc 	addiu	at,at,-24068
8003f3b4:	afa10100 	sw	at,256(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003f3b8:	afa200f4 	sw	v0,244(sp)
8003f3bc:	afa100f8 	sw	at,248(sp)
    }
8003f3c0:	8fa600f4 	lw	a2,244(sp)
8003f3c4:	8fa500f8 	lw	a1,248(sp)
8003f3c8:	27a20030 	addiu	v0,sp,48
8003f3cc:	afa20140 	sw	v0,320(sp)
8003f3d0:	afa2014c 	sw	v0,332(sp)
8003f3d4:	3c018005 	lui	at,0x8005
8003f3d8:	2421a1c4 	addiu	at,at,-24124
8003f3dc:	afa10150 	sw	at,336(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003f3e0:	afa20144 	sw	v0,324(sp)
8003f3e4:	afa10148 	sw	at,328(sp)
    }
8003f3e8:	8fa40144 	lw	a0,324(sp)
8003f3ec:	8fa30148 	lw	v1,328(sp)
8003f3f0:	27a20038 	addiu	v0,sp,56
8003f3f4:	afa2012c 	sw	v0,300(sp)
8003f3f8:	afa20138 	sw	v0,312(sp)
8003f3fc:	afa1013c 	sw	at,316(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003f400:	afa20130 	sw	v0,304(sp)
8003f404:	afa10134 	sw	at,308(sp)
    }
8003f408:	8fa20130 	lw	v0,304(sp)
8003f40c:	8fa10134 	lw	at,308(sp)
        Some(args) => panic!(
            r#"assertion `left {op} right` failed: {args}
  left: {left:?}
 right: {right:?}"#
        ),
        None => panic!(
8003f410:	afa600b0 	sw	a2,176(sp)
8003f414:	afa500b4 	sw	a1,180(sp)
8003f418:	afa400b8 	sw	a0,184(sp)
8003f41c:	afa300bc 	sw	v1,188(sp)
8003f420:	afa200c0 	sw	v0,192(sp)
8003f424:	afa100c4 	sw	at,196(sp)
8003f428:	03a00825 	move	at,sp
8003f42c:	24060003 	li	a2,3
8003f430:	ac260010 	sw	a2,16(at)
8003f434:	3c01810a 	lui	at,0x810a
8003f438:	2425b8a4 	addiu	a1,at,-18268
8003f43c:	27a40098 	addiu	a0,sp,152
8003f440:	afa4001c 	sw	a0,28(sp)
8003f444:	27a700b0 	addiu	a3,sp,176
8003f448:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8003f44c:	00000000 	nop
8003f450:	8fa4001c 	lw	a0,28(sp)
8003f454:	8fa50020 	lw	a1,32(sp)
8003f458:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003f45c:	00000000 	nop
        Some(args) => panic!(
8003f460:	8fa10024 	lw	at,36(sp)
8003f464:	8c220014 	lw	v0,20(at)
8003f468:	afa2005c 	sw	v0,92(sp)
8003f46c:	8c220010 	lw	v0,16(at)
8003f470:	afa20058 	sw	v0,88(sp)
8003f474:	8c22000c 	lw	v0,12(at)
8003f478:	afa20054 	sw	v0,84(sp)
8003f47c:	8c220008 	lw	v0,8(at)
8003f480:	afa20050 	sw	v0,80(sp)
8003f484:	8c220004 	lw	v0,4(at)
8003f488:	afa2004c 	sw	v0,76(sp)
8003f48c:	8c210000 	lw	at,0(at)
8003f490:	afa10048 	sw	at,72(sp)
8003f494:	27a20040 	addiu	v0,sp,64
8003f498:	afa200dc 	sw	v0,220(sp)
8003f49c:	afa200e8 	sw	v0,232(sp)
8003f4a0:	3c018005 	lui	at,0x8005
8003f4a4:	2421a1fc 	addiu	at,at,-24068
8003f4a8:	afa100ec 	sw	at,236(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003f4ac:	afa200e0 	sw	v0,224(sp)
8003f4b0:	afa100e4 	sw	at,228(sp)
    }
8003f4b4:	8fa800e0 	lw	t0,224(sp)
8003f4b8:	8fa700e4 	lw	a3,228(sp)
8003f4bc:	27a20048 	addiu	v0,sp,72
8003f4c0:	afa200c8 	sw	v0,200(sp)
8003f4c4:	afa200d4 	sw	v0,212(sp)
8003f4c8:	3c018004 	lui	at,0x8004
8003f4cc:	242112c4 	addiu	at,at,4804
8003f4d0:	afa100d8 	sw	at,216(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003f4d4:	afa200cc 	sw	v0,204(sp)
8003f4d8:	afa100d0 	sw	at,208(sp)
    }
8003f4dc:	8fa600cc 	lw	a2,204(sp)
8003f4e0:	8fa500d0 	lw	a1,208(sp)
8003f4e4:	27a20030 	addiu	v0,sp,48
8003f4e8:	afa20118 	sw	v0,280(sp)
8003f4ec:	afa20124 	sw	v0,292(sp)
8003f4f0:	3c018005 	lui	at,0x8005
8003f4f4:	2421a1c4 	addiu	at,at,-24124
8003f4f8:	afa10128 	sw	at,296(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003f4fc:	afa2011c 	sw	v0,284(sp)
8003f500:	afa10120 	sw	at,288(sp)
    }
8003f504:	8fa4011c 	lw	a0,284(sp)
8003f508:	8fa30120 	lw	v1,288(sp)
8003f50c:	27a20038 	addiu	v0,sp,56
8003f510:	afa20104 	sw	v0,260(sp)
8003f514:	afa20110 	sw	v0,272(sp)
8003f518:	afa10114 	sw	at,276(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003f51c:	afa20108 	sw	v0,264(sp)
8003f520:	afa1010c 	sw	at,268(sp)
    }
8003f524:	8fa20108 	lw	v0,264(sp)
8003f528:	8fa1010c 	lw	at,268(sp)
8003f52c:	afa80078 	sw	t0,120(sp)
8003f530:	afa7007c 	sw	a3,124(sp)
8003f534:	afa60080 	sw	a2,128(sp)
8003f538:	afa50084 	sw	a1,132(sp)
8003f53c:	afa40088 	sw	a0,136(sp)
8003f540:	afa3008c 	sw	v1,140(sp)
8003f544:	afa20090 	sw	v0,144(sp)
8003f548:	afa10094 	sw	at,148(sp)
8003f54c:	03a00825 	move	at,sp
8003f550:	24060004 	li	a2,4
8003f554:	ac260010 	sw	a2,16(at)
8003f558:	3c01810a 	lui	at,0x810a
8003f55c:	2425b8c8 	addiu	a1,at,-18232
8003f560:	27a40060 	addiu	a0,sp,96
8003f564:	afa40018 	sw	a0,24(sp)
8003f568:	27a70078 	addiu	a3,sp,120
8003f56c:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8003f570:	00000000 	nop
8003f574:	8fa40018 	lw	a0,24(sp)
8003f578:	8fa50020 	lw	a1,32(sp)
8003f57c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003f580:	00000000 	nop

8003f584 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7cdd383e0a27670eE>:
    pub const fn is_ok(&self) -> bool {
8003f584:	27bdfff8 	addiu	sp,sp,-8
8003f588:	afa40004 	sw	a0,4(sp)
        matches!(*self, Ok(_))
8003f58c:	8c810000 	lw	at,0(a0)
8003f590:	3c020011 	lui	v0,0x11
8003f594:	10220007 	beq	at,v0,8003f5b4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7cdd383e0a27670eE+0x30>
8003f598:	00000000 	nop
8003f59c:	0800fd69 	j	8003f5a4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7cdd383e0a27670eE+0x20>
8003f5a0:	00000000 	nop
8003f5a4:	24010001 	li	at,1
8003f5a8:	a3a10003 	sb	at,3(sp)
8003f5ac:	0800fd71 	j	8003f5c4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7cdd383e0a27670eE+0x40>
8003f5b0:	00000000 	nop
8003f5b4:	24010000 	li	at,0
8003f5b8:	a3a00003 	sb	zero,3(sp)
8003f5bc:	0800fd71 	j	8003f5c4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7cdd383e0a27670eE+0x40>
8003f5c0:	00000000 	nop
    }
8003f5c4:	93a10003 	lbu	at,3(sp)
8003f5c8:	30220001 	andi	v0,at,0x1
8003f5cc:	27bd0008 	addiu	sp,sp,8
8003f5d0:	03e00008 	jr	ra
8003f5d4:	00000000 	nop

8003f5d8 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E>:
    pub fn ok(self) -> Option<T> {
8003f5d8:	27bdfff8 	addiu	sp,sp,-8
8003f5dc:	afa40000 	sw	a0,0(sp)
        match self {
8003f5e0:	8fa10000 	lw	at,0(sp)
8003f5e4:	14200007 	bnez	at,8003f604 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E+0x2c>
8003f5e8:	00000000 	nop
8003f5ec:	0800fd7d 	j	8003f5f4 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E+0x1c>
8003f5f0:	00000000 	nop
8003f5f4:	24010001 	li	at,1
            Ok(x) => Some(x),
8003f5f8:	a3a10006 	sb	at,6(sp)
8003f5fc:	0800fd85 	j	8003f614 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E+0x3c>
8003f600:	00000000 	nop
8003f604:	24010000 	li	at,0
            Err(_) => None,
8003f608:	a3a00006 	sb	zero,6(sp)
8003f60c:	0800fd85 	j	8003f614 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E+0x3c>
8003f610:	00000000 	nop
    }
8003f614:	8fa10000 	lw	at,0(sp)
8003f618:	14200008 	bnez	at,8003f63c <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E+0x64>
8003f61c:	00000000 	nop
8003f620:	0800fd8a 	j	8003f628 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E+0x50>
8003f624:	00000000 	nop
8003f628:	93a10006 	lbu	at,6(sp)
8003f62c:	30220001 	andi	v0,at,0x1
8003f630:	27bd0008 	addiu	sp,sp,8
8003f634:	03e00008 	jr	ra
8003f638:	00000000 	nop
8003f63c:	0800fd8a 	j	8003f628 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E+0x50>
8003f640:	00000000 	nop

8003f644 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E>:
    pub fn and_then<U, F: FnOnce(T) -> Result<U, E>>(self, op: F) -> Result<U, E> {
8003f644:	27bdffd8 	addiu	sp,sp,-40
8003f648:	afbf0024 	sw	ra,36(sp)
8003f64c:	afa50014 	sw	a1,20(sp)
8003f650:	a3a40019 	sb	a0,25(sp)
8003f654:	afa5001c 	sw	a1,28(sp)
8003f658:	24010000 	li	at,0
        match self {
8003f65c:	a3a0001b 	sb	zero,27(sp)
8003f660:	24010001 	li	at,1
8003f664:	a3a1001b 	sb	at,27(sp)
8003f668:	93a10019 	lbu	at,25(sp)
8003f66c:	30210001 	andi	at,at,0x1
8003f670:	1420000b 	bnez	at,8003f6a0 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E+0x5c>
8003f674:	00000000 	nop
8003f678:	0800fda0 	j	8003f680 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E+0x3c>
8003f67c:	00000000 	nop
8003f680:	8fa40014 	lw	a0,20(sp)
8003f684:	24010000 	li	at,0
            Ok(t) => op(t),
8003f688:	a3a0001b 	sb	zero,27(sp)
8003f68c:	0c00fe9f 	jal	8003fa7c <_ZN4core3fmt8builders11DebugStruct6finish28_$u7b$$u7b$closure$u7d$$u7d$17hd19a7b2238e1cd62E>
8003f690:	00000000 	nop
8003f694:	a3a2001a 	sb	v0,26(sp)
8003f698:	0800fdac 	j	8003f6b0 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E+0x6c>
8003f69c:	00000000 	nop
8003f6a0:	24010001 	li	at,1
            Err(e) => Err(e),
8003f6a4:	a3a1001a 	sb	at,26(sp)
8003f6a8:	0800fdac 	j	8003f6b0 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E+0x6c>
8003f6ac:	00000000 	nop
    }
8003f6b0:	93a1001b 	lbu	at,27(sp)
8003f6b4:	30210001 	andi	at,at,0x1
8003f6b8:	14200009 	bnez	at,8003f6e0 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E+0x9c>
8003f6bc:	00000000 	nop
8003f6c0:	0800fdb2 	j	8003f6c8 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E+0x84>
8003f6c4:	00000000 	nop
8003f6c8:	93a1001a 	lbu	at,26(sp)
8003f6cc:	30220001 	andi	v0,at,0x1
8003f6d0:	8fbf0024 	lw	ra,36(sp)
8003f6d4:	27bd0028 	addiu	sp,sp,40
8003f6d8:	03e00008 	jr	ra
8003f6dc:	00000000 	nop
8003f6e0:	0800fdb2 	j	8003f6c8 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E+0x84>
8003f6e4:	00000000 	nop

8003f6e8 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>:
fn unwrap_failed(msg: &str, error: &dyn fmt::Debug) -> ! {
8003f6e8:	27bdff78 	addiu	sp,sp,-136
8003f6ec:	afbf0084 	sw	ra,132(sp)
8003f6f0:	8fa10098 	lw	at,152(sp)
8003f6f4:	afa10020 	sw	at,32(sp)
8003f6f8:	afa40024 	sw	a0,36(sp)
8003f6fc:	afa50028 	sw	a1,40(sp)
8003f700:	afa6002c 	sw	a2,44(sp)
8003f704:	afa70030 	sw	a3,48(sp)
8003f708:	27a20024 	addiu	v0,sp,36
8003f70c:	afa2005c 	sw	v0,92(sp)
8003f710:	afa20068 	sw	v0,104(sp)
8003f714:	3c018005 	lui	at,0x8005
8003f718:	2421a1fc 	addiu	at,at,-24068
8003f71c:	afa1006c 	sw	at,108(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003f720:	afa20060 	sw	v0,96(sp)
8003f724:	afa10064 	sw	at,100(sp)
    }
8003f728:	8fa40060 	lw	a0,96(sp)
8003f72c:	8fa30064 	lw	v1,100(sp)
8003f730:	27a2002c 	addiu	v0,sp,44
8003f734:	afa20070 	sw	v0,112(sp)
8003f738:	afa2007c 	sw	v0,124(sp)
8003f73c:	3c018005 	lui	at,0x8005
8003f740:	2421a1c4 	addiu	at,at,-24124
8003f744:	afa10080 	sw	at,128(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003f748:	afa20074 	sw	v0,116(sp)
8003f74c:	afa10078 	sw	at,120(sp)
    }
8003f750:	8fa20074 	lw	v0,116(sp)
8003f754:	8fa10078 	lw	at,120(sp)
    panic!("{msg}: {error:?}")
8003f758:	afa4004c 	sw	a0,76(sp)
8003f75c:	afa30050 	sw	v1,80(sp)
8003f760:	afa20054 	sw	v0,84(sp)
8003f764:	afa10058 	sw	at,88(sp)
8003f768:	03a00825 	move	at,sp
8003f76c:	24060002 	li	a2,2
8003f770:	ac260010 	sw	a2,16(at)
8003f774:	3c01810a 	lui	at,0x810a
8003f778:	2425b8ec 	addiu	a1,at,-18196
8003f77c:	27a40034 	addiu	a0,sp,52
8003f780:	afa4001c 	sw	a0,28(sp)
8003f784:	27a7004c 	addiu	a3,sp,76
8003f788:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8003f78c:	00000000 	nop
8003f790:	8fa4001c 	lw	a0,28(sp)
8003f794:	8fa50020 	lw	a1,32(sp)
8003f798:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003f79c:	00000000 	nop

8003f7a0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003f7a0:	27bdffe0 	addiu	sp,sp,-32
8003f7a4:	afa40004 	sw	a0,4(sp)
8003f7a8:	afa50008 	sw	a1,8(sp)
        match self {
8003f7ac:	8fa10004 	lw	at,4(sp)
8003f7b0:	3c020011 	lui	v0,0x11
8003f7b4:	1022000b 	beq	at,v0,8003f7e4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE+0x44>
8003f7b8:	00000000 	nop
8003f7bc:	0800fdf1 	j	8003f7c4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE+0x24>
8003f7c0:	00000000 	nop
            Ok(v) => ControlFlow::Continue(v),
8003f7c4:	8fa20004 	lw	v0,4(sp)
8003f7c8:	8fa10008 	lw	at,8(sp)
8003f7cc:	afa20018 	sw	v0,24(sp)
8003f7d0:	afa1001c 	sw	at,28(sp)
8003f7d4:	afa2000c 	sw	v0,12(sp)
8003f7d8:	afa10010 	sw	at,16(sp)
8003f7dc:	0800fdfd 	j	8003f7f4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE+0x54>
8003f7e0:	00000000 	nop
8003f7e4:	3c010011 	lui	at,0x11
            Err(e) => ControlFlow::Break(Err(e)),
8003f7e8:	afa1000c 	sw	at,12(sp)
8003f7ec:	0800fdfd 	j	8003f7f4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE+0x54>
8003f7f0:	00000000 	nop
    }
8003f7f4:	8fa2000c 	lw	v0,12(sp)
8003f7f8:	8fa30010 	lw	v1,16(sp)
8003f7fc:	27bd0020 	addiu	sp,sp,32
8003f800:	03e00008 	jr	ra
8003f804:	00000000 	nop

8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003f808:	27bdfff8 	addiu	sp,sp,-8
8003f80c:	a3a40004 	sb	a0,4(sp)
        match self {
8003f810:	93a10004 	lbu	at,4(sp)
8003f814:	30210001 	andi	at,at,0x1
8003f818:	14200007 	bnez	at,8003f838 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E+0x30>
8003f81c:	00000000 	nop
8003f820:	0800fe0a 	j	8003f828 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E+0x20>
8003f824:	00000000 	nop
8003f828:	24010000 	li	at,0
            Ok(v) => ControlFlow::Continue(v),
8003f82c:	a3a00005 	sb	zero,5(sp)
8003f830:	0800fe12 	j	8003f848 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E+0x40>
8003f834:	00000000 	nop
8003f838:	24010001 	li	at,1
            Err(e) => ControlFlow::Break(Err(e)),
8003f83c:	a3a10005 	sb	at,5(sp)
8003f840:	0800fe12 	j	8003f848 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E+0x40>
8003f844:	00000000 	nop
    }
8003f848:	93a10005 	lbu	at,5(sp)
8003f84c:	30220001 	andi	v0,at,0x1
8003f850:	27bd0008 	addiu	sp,sp,8
8003f854:	03e00008 	jr	ra
8003f858:	00000000 	nop

8003f85c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h5e97ed1aef6b568cE>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
8003f85c:	27bdfff0 	addiu	sp,sp,-16
8003f860:	3c010011 	lui	at,0x11
            Err(e) => Err(From::from(e)),
8003f864:	afa10004 	sw	at,4(sp)
    }
8003f868:	8fa20004 	lw	v0,4(sp)
8003f86c:	8fa30008 	lw	v1,8(sp)
8003f870:	27bd0010 	addiu	sp,sp,16
8003f874:	03e00008 	jr	ra
8003f878:	00000000 	nop

8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
8003f87c:	27bdfff8 	addiu	sp,sp,-8
8003f880:	24010001 	li	at,1
            Err(e) => Err(From::from(e)),
8003f884:	a3a10005 	sb	at,5(sp)
    }
8003f888:	93a10005 	lbu	at,5(sp)
8003f88c:	30220001 	andi	v0,at,0x1
8003f890:	27bd0008 	addiu	sp,sp,8
8003f894:	03e00008 	jr	ra
8003f898:	00000000 	nop

8003f89c <_ZN4core4sync6atomic11atomic_load17h79b9762b4806e280E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
8003f89c:	27bdffa0 	addiu	sp,sp,-96
8003f8a0:	afbf005c 	sw	ra,92(sp)
8003f8a4:	afa40018 	sw	a0,24(sp)
8003f8a8:	a3a50023 	sb	a1,35(sp)
8003f8ac:	afa40058 	sw	a0,88(sp)
        match order {
8003f8b0:	93a10023 	lbu	at,35(sp)
8003f8b4:	afa1001c 	sw	at,28(sp)
8003f8b8:	8fa1001c 	lw	at,28(sp)
8003f8bc:	00010880 	sll	at,at,0x2
8003f8c0:	3c02810a 	lui	v0,0x810a
8003f8c4:	00220821 	addu	at,at,v0
8003f8c8:	8c21af98 	lw	at,-20584(at)
8003f8cc:	00200008 	jr	at
8003f8d0:	00000000 	nop
8003f8d4:	0000000d 	break
            Relaxed => intrinsics::atomic_load_relaxed(dst),
8003f8d8:	8fa10018 	lw	at,24(sp)
8003f8dc:	8c210000 	lw	at,0(at)
8003f8e0:	afa10024 	sw	at,36(sp)
8003f8e4:	0800fe5f 	j	8003f97c <_ZN4core4sync6atomic11atomic_load17h79b9762b4806e280E+0xe0>
8003f8e8:	00000000 	nop
            Release => panic!("there is no such thing as a release load"),
8003f8ec:	3c01810a 	lui	at,0x810a
8003f8f0:	2425b924 	addiu	a1,at,-18140
8003f8f4:	27a40028 	addiu	a0,sp,40
8003f8f8:	afa40014 	sw	a0,20(sp)
8003f8fc:	24060001 	li	a2,1
8003f900:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003f904:	00000000 	nop
8003f908:	8fa40014 	lw	a0,20(sp)
8003f90c:	3c01810a 	lui	at,0x810a
8003f910:	2425b9a0 	addiu	a1,at,-18016
8003f914:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003f918:	00000000 	nop
            Acquire => intrinsics::atomic_load_acquire(dst),
8003f91c:	8fa10018 	lw	at,24(sp)
8003f920:	8c210000 	lw	at,0(at)
8003f924:	0000000f 	sync
8003f928:	afa10024 	sw	at,36(sp)
8003f92c:	0800fe5f 	j	8003f97c <_ZN4core4sync6atomic11atomic_load17h79b9762b4806e280E+0xe0>
8003f930:	00000000 	nop
            AcqRel => panic!("there is no such thing as an acquire-release load"),
8003f934:	3c01810a 	lui	at,0x810a
8003f938:	2425b9e4 	addiu	a1,at,-17948
8003f93c:	27a40040 	addiu	a0,sp,64
8003f940:	afa40010 	sw	a0,16(sp)
8003f944:	24060001 	li	a2,1
8003f948:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003f94c:	00000000 	nop
8003f950:	8fa40010 	lw	a0,16(sp)
8003f954:	3c01810a 	lui	at,0x810a
8003f958:	2425b9ec 	addiu	a1,at,-17940
8003f95c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003f960:	00000000 	nop
            SeqCst => intrinsics::atomic_load_seqcst(dst),
8003f964:	8fa10018 	lw	at,24(sp)
8003f968:	8c210000 	lw	at,0(at)
8003f96c:	0000000f 	sync
8003f970:	afa10024 	sw	at,36(sp)
8003f974:	0800fe5f 	j	8003f97c <_ZN4core4sync6atomic11atomic_load17h79b9762b4806e280E+0xe0>
8003f978:	00000000 	nop
}
8003f97c:	8fa20024 	lw	v0,36(sp)
8003f980:	8fbf005c 	lw	ra,92(sp)
8003f984:	27bd0060 	addiu	sp,sp,96
8003f988:	03e00008 	jr	ra
8003f98c:	00000000 	nop

8003f990 <_ZN4core3fmt8builders16debug_struct_new17h94cb061567626803E>:
    fmt: &'a mut fmt::Formatter<'b>,
    result: fmt::Result,
    has_fields: bool,
}

pub(super) fn debug_struct_new<'a, 'b>(
8003f990:	27bdffc8 	addiu	sp,sp,-56
8003f994:	afbf0034 	sw	ra,52(sp)
8003f998:	afa70010 	sw	a3,16(sp)
8003f99c:	00c00825 	move	at,a2
8003f9a0:	8fa60010 	lw	a2,16(sp)
8003f9a4:	afa10014 	sw	at,20(sp)
8003f9a8:	00a00825 	move	at,a1
8003f9ac:	8fa50014 	lw	a1,20(sp)
8003f9b0:	afa10018 	sw	at,24(sp)
8003f9b4:	00800825 	move	at,a0
8003f9b8:	8fa40018 	lw	a0,24(sp)
8003f9bc:	afa1001c 	sw	at,28(sp)
8003f9c0:	afa10020 	sw	at,32(sp)
8003f9c4:	afa40024 	sw	a0,36(sp)
8003f9c8:	afa50028 	sw	a1,40(sp)
8003f9cc:	afa6002c 	sw	a2,44(sp)
    fmt: &'a mut fmt::Formatter<'b>,
    name: &str,
) -> DebugStruct<'a, 'b> {
    let result = fmt.write_str(name);
8003f9d0:	0c010a61 	jal	80042984 <_ZN4core3fmt9Formatter9write_str17h2077d209297f8673E>
8003f9d4:	00000000 	nop
8003f9d8:	8fa50018 	lw	a1,24(sp)
8003f9dc:	8fa4001c 	lw	a0,28(sp)
8003f9e0:	00400825 	move	at,v0
8003f9e4:	8fa20020 	lw	v0,32(sp)
8003f9e8:	a3a10033 	sb	at,51(sp)
    DebugStruct { fmt, result, has_fields: false }
8003f9ec:	ac850000 	sw	a1,0(a0)
8003f9f0:	a0810004 	sb	at,4(a0)
8003f9f4:	24010000 	li	at,0
8003f9f8:	a0800005 	sb	zero,5(a0)
}
8003f9fc:	8fbf0034 	lw	ra,52(sp)
8003fa00:	27bd0038 	addiu	sp,sp,56
8003fa04:	03e00008 	jr	ra
8003fa08:	00000000 	nop

8003fa0c <_ZN4core3fmt8builders11DebugStruct6finish17h7cc9f15e92184c03E>:
    ///     format!("{:?}", Bar { bar: 10, baz: "Hello World".to_string() }),
    ///     "Bar { bar: 10, baz: \"Hello World\" }",
    /// );
    /// ```
    #[stable(feature = "debug_builders", since = "1.2.0")]
    pub fn finish(&mut self) -> fmt::Result {
8003fa0c:	27bdffe0 	addiu	sp,sp,-32
8003fa10:	afbf001c 	sw	ra,28(sp)
8003fa14:	afa40010 	sw	a0,16(sp)
8003fa18:	afa40018 	sw	a0,24(sp)
        if self.has_fields {
8003fa1c:	90810005 	lbu	at,5(a0)
8003fa20:	30210001 	andi	at,at,0x1
8003fa24:	1420000a 	bnez	at,8003fa50 <_ZN4core3fmt8builders11DebugStruct6finish17h7cc9f15e92184c03E+0x44>
8003fa28:	00000000 	nop
8003fa2c:	0800fe8d 	j	8003fa34 <_ZN4core3fmt8builders11DebugStruct6finish17h7cc9f15e92184c03E+0x28>
8003fa30:	00000000 	nop
            self.result = self.result.and_then(|_| {
                if self.is_pretty() { self.fmt.write_str("}") } else { self.fmt.write_str(" }") }
            });
        }
        self.result
    }
8003fa34:	8fa10010 	lw	at,16(sp)
8003fa38:	90210004 	lbu	at,4(at)
8003fa3c:	30220001 	andi	v0,at,0x1
8003fa40:	8fbf001c 	lw	ra,28(sp)
8003fa44:	27bd0020 	addiu	sp,sp,32
8003fa48:	03e00008 	jr	ra
8003fa4c:	00000000 	nop
            self.result = self.result.and_then(|_| {
8003fa50:	8fa20010 	lw	v0,16(sp)
8003fa54:	90410004 	lbu	at,4(v0)
8003fa58:	afa20014 	sw	v0,20(sp)
8003fa5c:	8fa50014 	lw	a1,20(sp)
8003fa60:	30240001 	andi	a0,at,0x1
8003fa64:	0c00fd91 	jal	8003f644 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E>
8003fa68:	00000000 	nop
8003fa6c:	8fa10010 	lw	at,16(sp)
8003fa70:	a0220004 	sb	v0,4(at)
        if self.has_fields {
8003fa74:	0800fe8d 	j	8003fa34 <_ZN4core3fmt8builders11DebugStruct6finish17h7cc9f15e92184c03E+0x28>
8003fa78:	00000000 	nop

8003fa7c <_ZN4core3fmt8builders11DebugStruct6finish28_$u7b$$u7b$closure$u7d$$u7d$17hd19a7b2238e1cd62E>:
            self.result = self.result.and_then(|_| {
8003fa7c:	27bdffe0 	addiu	sp,sp,-32
8003fa80:	afbf001c 	sw	ra,28(sp)
8003fa84:	afa40014 	sw	a0,20(sp)
                if self.is_pretty() { self.fmt.write_str("}") } else { self.fmt.write_str(" }") }
8003fa88:	8fa40014 	lw	a0,20(sp)
8003fa8c:	0c00fec3 	jal	8003fb0c <_ZN4core3fmt8builders11DebugStruct9is_pretty17hbf5ac35705fdbf81E>
8003fa90:	00000000 	nop
8003fa94:	1440000d 	bnez	v0,8003facc <_ZN4core3fmt8builders11DebugStruct6finish28_$u7b$$u7b$closure$u7d$$u7d$17hd19a7b2238e1cd62E+0x50>
8003fa98:	00000000 	nop
8003fa9c:	0800fea9 	j	8003faa4 <_ZN4core3fmt8builders11DebugStruct6finish28_$u7b$$u7b$closure$u7d$$u7d$17hd19a7b2238e1cd62E+0x28>
8003faa0:	00000000 	nop
8003faa4:	8fa10014 	lw	at,20(sp)
8003faa8:	8c240000 	lw	a0,0(at)
8003faac:	3c01810a 	lui	at,0x810a
8003fab0:	2425b9fd 	addiu	a1,at,-17923
8003fab4:	24060002 	li	a2,2
8003fab8:	0c010a61 	jal	80042984 <_ZN4core3fmt9Formatter9write_str17h2077d209297f8673E>
8003fabc:	00000000 	nop
8003fac0:	a3a2001a 	sb	v0,26(sp)
8003fac4:	0800febd 	j	8003faf4 <_ZN4core3fmt8builders11DebugStruct6finish28_$u7b$$u7b$closure$u7d$$u7d$17hd19a7b2238e1cd62E+0x78>
8003fac8:	00000000 	nop
8003facc:	8fa10014 	lw	at,20(sp)
8003fad0:	8c240000 	lw	a0,0(at)
8003fad4:	3c01810a 	lui	at,0x810a
8003fad8:	2425b9fc 	addiu	a1,at,-17924
8003fadc:	24060001 	li	a2,1
8003fae0:	0c010a61 	jal	80042984 <_ZN4core3fmt9Formatter9write_str17h2077d209297f8673E>
8003fae4:	00000000 	nop
8003fae8:	a3a2001a 	sb	v0,26(sp)
8003faec:	0800febd 	j	8003faf4 <_ZN4core3fmt8builders11DebugStruct6finish28_$u7b$$u7b$closure$u7d$$u7d$17hd19a7b2238e1cd62E+0x78>
8003faf0:	00000000 	nop
            });
8003faf4:	93a1001a 	lbu	at,26(sp)
8003faf8:	30220001 	andi	v0,at,0x1
8003fafc:	8fbf001c 	lw	ra,28(sp)
8003fb00:	27bd0020 	addiu	sp,sp,32
8003fb04:	03e00008 	jr	ra
8003fb08:	00000000 	nop

8003fb0c <_ZN4core3fmt8builders11DebugStruct9is_pretty17hbf5ac35705fdbf81E>:

    fn is_pretty(&self) -> bool {
8003fb0c:	27bdffe8 	addiu	sp,sp,-24
8003fb10:	afbf0014 	sw	ra,20(sp)
8003fb14:	afa40010 	sw	a0,16(sp)
        self.fmt.alternate()
8003fb18:	8c840000 	lw	a0,0(a0)
8003fb1c:	0c010ab0 	jal	80042ac0 <_ZN4core3fmt9Formatter9alternate17h2b08e2c940b48bcaE>
8003fb20:	00000000 	nop
    }
8003fb24:	8fbf0014 	lw	ra,20(sp)
8003fb28:	27bd0018 	addiu	sp,sp,24
8003fb2c:	03e00008 	jr	ra
8003fb30:	00000000 	nop

8003fb34 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE>:

    /// Converts an integer to corresponding radix digit.
    fn digit(x: u8) -> u8;

    /// Format an integer using the radix using a formatter.
    fn fmt_int<T: DisplayInt>(&self, mut x: T, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8003fb34:	27bdfea8 	addiu	sp,sp,-344
8003fb38:	afbf0154 	sw	ra,340(sp)
8003fb3c:	afa6002c 	sw	a2,44(sp)
8003fb40:	a3a50042 	sb	a1,66(sp)
8003fb44:	afa400ec 	sw	a0,236(sp)
8003fb48:	afa600f0 	sw	a2,240(sp)
        // The radix can be as low as 2, so we need a buffer of at least 128
        // characters for a base 2 number.
        let zero = T::zero();
8003fb4c:	0c012471 	jal	800491c4 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h4faa43391429b7caE>
8003fb50:	00000000 	nop
8003fb54:	a3a20043 	sb	v0,67(sp)
8003fb58:	27a10042 	addiu	at,sp,66
8003fb5c:	afa1014c 	sw	at,332(sp)
8003fb60:	27a10043 	addiu	at,sp,67
8003fb64:	afa10150 	sw	at,336(sp)
                #[inline(always)]
                fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
                #[inline(always)]
                fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
8003fb68:	93a10042 	lbu	at,66(sp)
8003fb6c:	93a20043 	lbu	v0,67(sp)
8003fb70:	0022082b 	sltu	at,at,v0
8003fb74:	afa10038 	sw	at,56(sp)
8003fb78:	38210001 	xori	at,at,0x1
8003fb7c:	afa10030 	sw	at,48(sp)
        let is_nonnegative = x >= zero;
8003fb80:	a3a100f6 	sb	at,246(sp)
        let mut buf = [MaybeUninit::<u8>::uninit(); 128];
8003fb84:	93a50113 	lbu	a1,275(sp)
8003fb88:	27a40044 	addiu	a0,sp,68
8003fb8c:	24060080 	li	a2,128
8003fb90:	afa60034 	sw	a2,52(sp)
8003fb94:	0c00dba8 	jal	80036ea0 <memset>
8003fb98:	00000000 	nop
8003fb9c:	8fa10034 	lw	at,52(sp)
        let mut curr = buf.len();
8003fba0:	afa100c4 	sw	at,196(sp)
8003fba4:	24040010 	li	a0,16
        let base = T::from_u8(Self::BASE);
8003fba8:	0c012474 	jal	800491d0 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817hde776fb7bbe296d4E>
8003fbac:	00000000 	nop
8003fbb0:	8fa10038 	lw	at,56(sp)
8003fbb4:	00401825 	move	v1,v0
8003fbb8:	afa3003c 	sw	v1,60(sp)
8003fbbc:	a3a200f7 	sb	v0,247(sp)
        if is_nonnegative {
8003fbc0:	10200013 	beqz	at,8003fc10 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0xdc>
8003fbc4:	00000000 	nop
8003fbc8:	0800fef4 	j	8003fbd0 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x9c>
8003fbcc:	00000000 	nop
8003fbd0:	27a40044 	addiu	a0,sp,68
8003fbd4:	24050080 	li	a1,128
                    break;
                };
            }
        } else {
            // Do the same as above, but accounting for two's complement.
            for byte in buf.iter_mut().rev() {
8003fbd8:	0c011255 	jal	80044954 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
8003fbdc:	00000000 	nop
8003fbe0:	00402025 	move	a0,v0
8003fbe4:	00602825 	move	a1,v1
8003fbe8:	0c00f8eb 	jal	8003e3ac <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
8003fbec:	00000000 	nop
8003fbf0:	00402025 	move	a0,v0
8003fbf4:	00602825 	move	a1,v1
8003fbf8:	0c00f840 	jal	8003e100 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
8003fbfc:	00000000 	nop
8003fc00:	afa200d8 	sw	v0,216(sp)
8003fc04:	afa300dc 	sw	v1,220(sp)
8003fc08:	0800ff14 	j	8003fc50 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x11c>
8003fc0c:	00000000 	nop
8003fc10:	27a40044 	addiu	a0,sp,68
8003fc14:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
8003fc18:	0c011255 	jal	80044954 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
8003fc1c:	00000000 	nop
8003fc20:	00402025 	move	a0,v0
8003fc24:	00602825 	move	a1,v1
8003fc28:	0c00f8eb 	jal	8003e3ac <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
8003fc2c:	00000000 	nop
8003fc30:	00402025 	move	a0,v0
8003fc34:	00602825 	move	a1,v1
8003fc38:	0c00f840 	jal	8003e100 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
8003fc3c:	00000000 	nop
8003fc40:	afa200c8 	sw	v0,200(sp)
8003fc44:	afa300cc 	sw	v1,204(sp)
8003fc48:	0800ff85 	j	8003fe14 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x2e0>
8003fc4c:	00000000 	nop
8003fc50:	27a400d8 	addiu	a0,sp,216
            for byte in buf.iter_mut().rev() {
8003fc54:	0c00f79f 	jal	8003de7c <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
8003fc58:	00000000 	nop
8003fc5c:	afa200e0 	sw	v0,224(sp)
8003fc60:	8fa100e0 	lw	at,224(sp)
8003fc64:	1420002b 	bnez	at,8003fd14 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x1e0>
8003fc68:	00000000 	nop
8003fc6c:	0800ff1d 	j	8003fc74 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x140>
8003fc70:	00000000 	nop
                    // No more digits left to accumulate.
                    break;
                };
            }
        }
        let buf = &buf[curr..];
8003fc74:	8fa100c4 	lw	at,196(sp)
8003fc78:	afa100e8 	sw	at,232(sp)
8003fc7c:	8fa500e8 	lw	a1,232(sp)
8003fc80:	3c01810a 	lui	at,0x810a
8003fc84:	2426badc 	addiu	a2,at,-17700
8003fc88:	27a40044 	addiu	a0,sp,68
8003fc8c:	0c00f3d3 	jal	8003cf4c <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hfa0288d626a253cbE>
8003fc90:	00000000 	nop
8003fc94:	00402025 	move	a0,v0
8003fc98:	00602825 	move	a1,v1
8003fc9c:	afa40100 	sw	a0,256(sp)
8003fca0:	afa50104 	sw	a1,260(sp)
8003fca4:	afa4013c 	sw	a0,316(sp)
8003fca8:	afa50140 	sw	a1,320(sp)
8003fcac:	afa40144 	sw	a0,324(sp)
8003fcb0:	afa50148 	sw	a1,328(sp)
        // SAFETY: The only chars in `buf` are created by `Self::digit` which are assumed to be
        // valid UTF-8
        let buf = unsafe {
            str::from_utf8_unchecked(slice::from_raw_parts(
8003fcb4:	0c011180 	jal	80044600 <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
8003fcb8:	00000000 	nop
8003fcbc:	00402025 	move	a0,v0
8003fcc0:	00602825 	move	a1,v1
8003fcc4:	0c0115fe 	jal	800457f8 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>
8003fcc8:	00000000 	nop
8003fccc:	8fa10030 	lw	at,48(sp)
8003fcd0:	8fa4002c 	lw	a0,44(sp)
8003fcd4:	00602825 	move	a1,v1
8003fcd8:	afa20108 	sw	v0,264(sp)
8003fcdc:	afa5010c 	sw	a1,268(sp)
                MaybeUninit::slice_as_ptr(buf),
                buf.len(),
            ))
        };
        f.pad_integral(is_nonnegative, Self::PREFIX, buf)
8003fce0:	03a01825 	move	v1,sp
8003fce4:	ac650014 	sw	a1,20(v1)
8003fce8:	ac620010 	sw	v0,16(v1)
8003fcec:	30250001 	andi	a1,at,0x1
8003fcf0:	3c01810a 	lui	at,0x810a
8003fcf4:	2426baec 	addiu	a2,at,-17684
8003fcf8:	24070002 	li	a3,2
8003fcfc:	0c0106e3 	jal	80041b8c <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E>
8003fd00:	00000000 	nop
    }
8003fd04:	8fbf0154 	lw	ra,340(sp)
8003fd08:	27bd0158 	addiu	sp,sp,344
8003fd0c:	03e00008 	jr	ra
8003fd10:	00000000 	nop
            for byte in buf.iter_mut().rev() {
8003fd14:	8fa5003c 	lw	a1,60(sp)
8003fd18:	8fa100e0 	lw	at,224(sp)
8003fd1c:	afa10024 	sw	at,36(sp)
8003fd20:	afa100f8 	sw	at,248(sp)
                let n = zero - (x % base); // Get the current place value.
8003fd24:	93a40042 	lbu	a0,66(sp)
8003fd28:	93a10043 	lbu	at,67(sp)
8003fd2c:	afa10020 	sw	at,32(sp)
8003fd30:	3c01810a 	lui	at,0x810a
8003fd34:	2426ba6c 	addiu	a2,at,-17812
8003fd38:	0c01236d 	jal	80048db4 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Rem$GT$3rem17hcf0699d134763680E>
8003fd3c:	00000000 	nop
8003fd40:	8fa40020 	lw	a0,32(sp)
8003fd44:	00402825 	move	a1,v0
8003fd48:	3c01810a 	lui	at,0x810a
8003fd4c:	2426ba7c 	addiu	a2,at,-17796
8003fd50:	0c0122ee 	jal	80048bb8 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9d08ad2c426c5534E>
8003fd54:	00000000 	nop
8003fd58:	8fa5003c 	lw	a1,60(sp)
8003fd5c:	a3a200e7 	sb	v0,231(sp)
                x = x / base; // Deaccumulate the number.
8003fd60:	93a40042 	lbu	a0,66(sp)
8003fd64:	3c01810a 	lui	at,0x810a
8003fd68:	2426ba8c 	addiu	a2,at,-17780
8003fd6c:	0c012329 	jal	80048ca4 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Div$GT$3div17h8c44f7b15731be55E>
8003fd70:	00000000 	nop
8003fd74:	a3a20042 	sb	v0,66(sp)
8003fd78:	27a400e7 	addiu	a0,sp,231
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
8003fd7c:	0c01247a 	jal	800491e8 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817hdb1dd13bcbe6748fE>
8003fd80:	00000000 	nop
8003fd84:	00402025 	move	a0,v0
8003fd88:	0c0124b0 	jal	800492c0 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E>
8003fd8c:	00000000 	nop
8003fd90:	8fa10024 	lw	at,36(sp)
8003fd94:	afa10120 	sw	at,288(sp)
8003fd98:	a3a20127 	sb	v0,295(sp)
8003fd9c:	a3a20129 	sb	v0,297(sp)
8003fda0:	a3a2012b 	sb	v0,299(sp)
        ManuallyDrop { value }
8003fda4:	a3a2012a 	sb	v0,298(sp)
    }
8003fda8:	93a2012a 	lbu	v0,298(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
8003fdac:	a3a20128 	sb	v0,296(sp)
    }
8003fdb0:	93a20128 	lbu	v0,296(sp)
        *self = MaybeUninit::new(val);
8003fdb4:	a0220000 	sb	v0,0(at)
8003fdb8:	afa1012c 	sw	at,300(sp)
8003fdbc:	afa10130 	sw	at,304(sp)
                curr -= 1;
8003fdc0:	8fa100c4 	lw	at,196(sp)
8003fdc4:	2422ffff 	addiu	v0,at,-1
8003fdc8:	afa20028 	sw	v0,40(sp)
8003fdcc:	1020000d 	beqz	at,8003fe04 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x2d0>
8003fdd0:	00000000 	nop
8003fdd4:	0800ff77 	j	8003fddc <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x2a8>
8003fdd8:	00000000 	nop
8003fddc:	8fa10028 	lw	at,40(sp)
8003fde0:	afa100c4 	sw	at,196(sp)
8003fde4:	27a40042 	addiu	a0,sp,66
8003fde8:	27a50043 	addiu	a1,sp,67
                if x == zero {
8003fdec:	0c0122b2 	jal	80048ac8 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h979542bb5e2130d6E>
8003fdf0:	00000000 	nop
8003fdf4:	1440ff9f 	bnez	v0,8003fc74 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x140>
8003fdf8:	00000000 	nop
8003fdfc:	0800ff14 	j	8003fc50 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x11c>
8003fe00:	00000000 	nop
                curr -= 1;
8003fe04:	3c01810a 	lui	at,0x810a
8003fe08:	2424ba9c 	addiu	a0,at,-17764
8003fe0c:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003fe10:	00000000 	nop
8003fe14:	27a400c8 	addiu	a0,sp,200
            for byte in buf.iter_mut().rev() {
8003fe18:	0c00f79f 	jal	8003de7c <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
8003fe1c:	00000000 	nop
8003fe20:	afa200d0 	sw	v0,208(sp)
8003fe24:	8fa100d0 	lw	at,208(sp)
8003fe28:	1020ff92 	beqz	at,8003fc74 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x140>
8003fe2c:	00000000 	nop
8003fe30:	0800ff8e 	j	8003fe38 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x304>
8003fe34:	00000000 	nop
8003fe38:	8fa5003c 	lw	a1,60(sp)
8003fe3c:	8fa100d0 	lw	at,208(sp)
8003fe40:	afa10018 	sw	at,24(sp)
8003fe44:	afa100fc 	sw	at,252(sp)
                let n = x % base; // Get the current place value.
8003fe48:	93a40042 	lbu	a0,66(sp)
8003fe4c:	3c01810a 	lui	at,0x810a
8003fe50:	2426baac 	addiu	a2,at,-17748
8003fe54:	0c01236d 	jal	80048db4 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Rem$GT$3rem17hcf0699d134763680E>
8003fe58:	00000000 	nop
8003fe5c:	8fa5003c 	lw	a1,60(sp)
8003fe60:	a3a200d7 	sb	v0,215(sp)
                x = x / base; // Deaccumulate the number.
8003fe64:	93a40042 	lbu	a0,66(sp)
8003fe68:	3c01810a 	lui	at,0x810a
8003fe6c:	2426babc 	addiu	a2,at,-17732
8003fe70:	0c012329 	jal	80048ca4 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Div$GT$3div17h8c44f7b15731be55E>
8003fe74:	00000000 	nop
8003fe78:	a3a20042 	sb	v0,66(sp)
8003fe7c:	27a400d7 	addiu	a0,sp,215
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
8003fe80:	0c01247a 	jal	800491e8 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817hdb1dd13bcbe6748fE>
8003fe84:	00000000 	nop
8003fe88:	00402025 	move	a0,v0
8003fe8c:	0c0124b0 	jal	800492c0 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E>
8003fe90:	00000000 	nop
8003fe94:	8fa10018 	lw	at,24(sp)
8003fe98:	afa10114 	sw	at,276(sp)
8003fe9c:	a3a2011b 	sb	v0,283(sp)
8003fea0:	a3a2011d 	sb	v0,285(sp)
8003fea4:	a3a2011f 	sb	v0,287(sp)
        ManuallyDrop { value }
8003fea8:	a3a2011e 	sb	v0,286(sp)
    }
8003feac:	93a2011e 	lbu	v0,286(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
8003feb0:	a3a2011c 	sb	v0,284(sp)
    }
8003feb4:	93a2011c 	lbu	v0,284(sp)
        *self = MaybeUninit::new(val);
8003feb8:	a0220000 	sb	v0,0(at)
8003febc:	afa10134 	sw	at,308(sp)
8003fec0:	afa10138 	sw	at,312(sp)
                curr -= 1;
8003fec4:	8fa100c4 	lw	at,196(sp)
8003fec8:	2422ffff 	addiu	v0,at,-1
8003fecc:	afa2001c 	sw	v0,28(sp)
8003fed0:	1020000d 	beqz	at,8003ff08 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x3d4>
8003fed4:	00000000 	nop
8003fed8:	0800ffb8 	j	8003fee0 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x3ac>
8003fedc:	00000000 	nop
8003fee0:	8fa1001c 	lw	at,28(sp)
8003fee4:	afa100c4 	sw	at,196(sp)
8003fee8:	27a40042 	addiu	a0,sp,66
8003feec:	27a50043 	addiu	a1,sp,67
                if x == zero {
8003fef0:	0c0122b2 	jal	80048ac8 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h979542bb5e2130d6E>
8003fef4:	00000000 	nop
8003fef8:	1440ff5e 	bnez	v0,8003fc74 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x140>
8003fefc:	00000000 	nop
8003ff00:	0800ff85 	j	8003fe14 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x2e0>
8003ff04:	00000000 	nop
                curr -= 1;
8003ff08:	3c01810a 	lui	at,0x810a
8003ff0c:	2424bacc 	addiu	a0,at,-17716
8003ff10:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003ff14:	00000000 	nop

8003ff18 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E>:
    fn fmt_int<T: DisplayInt>(&self, mut x: T, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8003ff18:	27bdfea0 	addiu	sp,sp,-352
8003ff1c:	afbf015c 	sw	ra,348(sp)
8003ff20:	afa6002c 	sw	a2,44(sp)
8003ff24:	afa50040 	sw	a1,64(sp)
8003ff28:	afa400f0 	sw	a0,240(sp)
8003ff2c:	afa600f4 	sw	a2,244(sp)
        let zero = T::zero();
8003ff30:	0c01249b 	jal	8004926c <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h270aff8721106dedE>
8003ff34:	00000000 	nop
8003ff38:	afa20044 	sw	v0,68(sp)
8003ff3c:	27a10040 	addiu	at,sp,64
8003ff40:	afa10154 	sw	at,340(sp)
8003ff44:	27a10044 	addiu	at,sp,68
8003ff48:	afa10158 	sw	at,344(sp)
8003ff4c:	8fa10040 	lw	at,64(sp)
8003ff50:	8fa20044 	lw	v0,68(sp)
8003ff54:	0022082b 	sltu	at,at,v0
8003ff58:	afa10038 	sw	at,56(sp)
8003ff5c:	38210001 	xori	at,at,0x1
8003ff60:	afa10030 	sw	at,48(sp)
        let is_nonnegative = x >= zero;
8003ff64:	a3a100fb 	sb	at,251(sp)
        let mut buf = [MaybeUninit::<u8>::uninit(); 128];
8003ff68:	93a5011b 	lbu	a1,283(sp)
8003ff6c:	27a40048 	addiu	a0,sp,72
8003ff70:	24060080 	li	a2,128
8003ff74:	afa60034 	sw	a2,52(sp)
8003ff78:	0c00dba8 	jal	80036ea0 <memset>
8003ff7c:	00000000 	nop
8003ff80:	8fa10034 	lw	at,52(sp)
        let mut curr = buf.len();
8003ff84:	afa100c8 	sw	at,200(sp)
8003ff88:	24040010 	li	a0,16
        let base = T::from_u8(Self::BASE);
8003ff8c:	0c01249e 	jal	80049278 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817h1c1cc6cf834b4db9E>
8003ff90:	00000000 	nop
8003ff94:	8fa10038 	lw	at,56(sp)
8003ff98:	00401825 	move	v1,v0
8003ff9c:	afa3003c 	sw	v1,60(sp)
8003ffa0:	afa200fc 	sw	v0,252(sp)
        if is_nonnegative {
8003ffa4:	10200013 	beqz	at,8003fff4 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0xdc>
8003ffa8:	00000000 	nop
8003ffac:	0800ffed 	j	8003ffb4 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x9c>
8003ffb0:	00000000 	nop
8003ffb4:	27a40048 	addiu	a0,sp,72
8003ffb8:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
8003ffbc:	0c011255 	jal	80044954 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
8003ffc0:	00000000 	nop
8003ffc4:	00402025 	move	a0,v0
8003ffc8:	00602825 	move	a1,v1
8003ffcc:	0c00f8eb 	jal	8003e3ac <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
8003ffd0:	00000000 	nop
8003ffd4:	00402025 	move	a0,v0
8003ffd8:	00602825 	move	a1,v1
8003ffdc:	0c00f840 	jal	8003e100 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
8003ffe0:	00000000 	nop
8003ffe4:	afa200dc 	sw	v0,220(sp)
8003ffe8:	afa300e0 	sw	v1,224(sp)
8003ffec:	0801000d 	j	80040034 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x11c>
8003fff0:	00000000 	nop
8003fff4:	27a40048 	addiu	a0,sp,72
8003fff8:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
8003fffc:	0c011255 	jal	80044954 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
80040000:	00000000 	nop
80040004:	00402025 	move	a0,v0
80040008:	00602825 	move	a1,v1
8004000c:	0c00f8eb 	jal	8003e3ac <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
80040010:	00000000 	nop
80040014:	00402025 	move	a0,v0
80040018:	00602825 	move	a1,v1
8004001c:	0c00f840 	jal	8003e100 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
80040020:	00000000 	nop
80040024:	afa200cc 	sw	v0,204(sp)
80040028:	afa300d0 	sw	v1,208(sp)
8004002c:	0801007e 	j	800401f8 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x2e0>
80040030:	00000000 	nop
80040034:	27a400dc 	addiu	a0,sp,220
            for byte in buf.iter_mut().rev() {
80040038:	0c00f79f 	jal	8003de7c <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
8004003c:	00000000 	nop
80040040:	afa200e4 	sw	v0,228(sp)
80040044:	8fa100e4 	lw	at,228(sp)
80040048:	1420002b 	bnez	at,800400f8 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x1e0>
8004004c:	00000000 	nop
80040050:	08010016 	j	80040058 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x140>
80040054:	00000000 	nop
        let buf = &buf[curr..];
80040058:	8fa100c8 	lw	at,200(sp)
8004005c:	afa100ec 	sw	at,236(sp)
80040060:	8fa500ec 	lw	a1,236(sp)
80040064:	3c01810a 	lui	at,0x810a
80040068:	2426badc 	addiu	a2,at,-17700
8004006c:	27a40048 	addiu	a0,sp,72
80040070:	0c00f3d3 	jal	8003cf4c <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hfa0288d626a253cbE>
80040074:	00000000 	nop
80040078:	00402025 	move	a0,v0
8004007c:	00602825 	move	a1,v1
80040080:	afa40108 	sw	a0,264(sp)
80040084:	afa5010c 	sw	a1,268(sp)
80040088:	afa40144 	sw	a0,324(sp)
8004008c:	afa50148 	sw	a1,328(sp)
80040090:	afa4014c 	sw	a0,332(sp)
80040094:	afa50150 	sw	a1,336(sp)
            str::from_utf8_unchecked(slice::from_raw_parts(
80040098:	0c011180 	jal	80044600 <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
8004009c:	00000000 	nop
800400a0:	00402025 	move	a0,v0
800400a4:	00602825 	move	a1,v1
800400a8:	0c0115fe 	jal	800457f8 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>
800400ac:	00000000 	nop
800400b0:	8fa10030 	lw	at,48(sp)
800400b4:	8fa4002c 	lw	a0,44(sp)
800400b8:	00602825 	move	a1,v1
800400bc:	afa20110 	sw	v0,272(sp)
800400c0:	afa50114 	sw	a1,276(sp)
        f.pad_integral(is_nonnegative, Self::PREFIX, buf)
800400c4:	03a01825 	move	v1,sp
800400c8:	ac650014 	sw	a1,20(v1)
800400cc:	ac620010 	sw	v0,16(v1)
800400d0:	30250001 	andi	a1,at,0x1
800400d4:	3c01810a 	lui	at,0x810a
800400d8:	2426baec 	addiu	a2,at,-17684
800400dc:	24070002 	li	a3,2
800400e0:	0c0106e3 	jal	80041b8c <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E>
800400e4:	00000000 	nop
    }
800400e8:	8fbf015c 	lw	ra,348(sp)
800400ec:	27bd0160 	addiu	sp,sp,352
800400f0:	03e00008 	jr	ra
800400f4:	00000000 	nop
            for byte in buf.iter_mut().rev() {
800400f8:	8fa5003c 	lw	a1,60(sp)
800400fc:	8fa100e4 	lw	at,228(sp)
80040100:	afa10024 	sw	at,36(sp)
80040104:	afa10100 	sw	at,256(sp)
                let n = zero - (x % base); // Get the current place value.
80040108:	8fa10044 	lw	at,68(sp)
8004010c:	afa10020 	sw	at,32(sp)
80040110:	8fa40040 	lw	a0,64(sp)
80040114:	3c01810a 	lui	at,0x810a
80040118:	2426ba6c 	addiu	a2,at,-17812
8004011c:	0c012358 	jal	80048d60 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Rem$GT$3rem17h9f903c597deb573bE>
80040120:	00000000 	nop
80040124:	8fa40020 	lw	a0,32(sp)
80040128:	00402825 	move	a1,v0
8004012c:	3c01810a 	lui	at,0x810a
80040130:	2426ba7c 	addiu	a2,at,-17796
80040134:	0c0122dc 	jal	80048b70 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Sub$GT$3sub17h90e33352f2ecaf79E>
80040138:	00000000 	nop
8004013c:	8fa5003c 	lw	a1,60(sp)
80040140:	afa200e8 	sw	v0,232(sp)
                x = x / base; // Deaccumulate the number.
80040144:	8fa40040 	lw	a0,64(sp)
80040148:	3c01810a 	lui	at,0x810a
8004014c:	2426ba8c 	addiu	a2,at,-17780
80040150:	0c012314 	jal	80048c50 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Div$GT$3div17h9fd659e674ef8f18E>
80040154:	00000000 	nop
80040158:	afa20040 	sw	v0,64(sp)
8004015c:	27a400e8 	addiu	a0,sp,232
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
80040160:	0c0124a4 	jal	80049290 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h34321a1be99db044E>
80040164:	00000000 	nop
80040168:	00402025 	move	a0,v0
8004016c:	0c0124b0 	jal	800492c0 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E>
80040170:	00000000 	nop
80040174:	8fa10024 	lw	at,36(sp)
80040178:	afa10128 	sw	at,296(sp)
8004017c:	a3a2012f 	sb	v0,303(sp)
80040180:	a3a20131 	sb	v0,305(sp)
80040184:	a3a20133 	sb	v0,307(sp)
        ManuallyDrop { value }
80040188:	a3a20132 	sb	v0,306(sp)
    }
8004018c:	93a20132 	lbu	v0,306(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
80040190:	a3a20130 	sb	v0,304(sp)
    }
80040194:	93a20130 	lbu	v0,304(sp)
        *self = MaybeUninit::new(val);
80040198:	a0220000 	sb	v0,0(at)
8004019c:	afa10134 	sw	at,308(sp)
800401a0:	afa10138 	sw	at,312(sp)
                curr -= 1;
800401a4:	8fa100c8 	lw	at,200(sp)
800401a8:	2422ffff 	addiu	v0,at,-1
800401ac:	afa20028 	sw	v0,40(sp)
800401b0:	1020000d 	beqz	at,800401e8 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x2d0>
800401b4:	00000000 	nop
800401b8:	08010070 	j	800401c0 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x2a8>
800401bc:	00000000 	nop
800401c0:	8fa10028 	lw	at,40(sp)
800401c4:	afa100c8 	sw	at,200(sp)
800401c8:	27a40040 	addiu	a0,sp,64
800401cc:	27a50044 	addiu	a1,sp,68
                if x == zero {
800401d0:	0c0122a8 	jal	80048aa0 <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hbdfa0bd26f3ca07fE>
800401d4:	00000000 	nop
800401d8:	1440ff9f 	bnez	v0,80040058 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x140>
800401dc:	00000000 	nop
800401e0:	0801000d 	j	80040034 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x11c>
800401e4:	00000000 	nop
                curr -= 1;
800401e8:	3c01810a 	lui	at,0x810a
800401ec:	2424ba9c 	addiu	a0,at,-17764
800401f0:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800401f4:	00000000 	nop
800401f8:	27a400cc 	addiu	a0,sp,204
            for byte in buf.iter_mut().rev() {
800401fc:	0c00f79f 	jal	8003de7c <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
80040200:	00000000 	nop
80040204:	afa200d4 	sw	v0,212(sp)
80040208:	8fa100d4 	lw	at,212(sp)
8004020c:	1020ff92 	beqz	at,80040058 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x140>
80040210:	00000000 	nop
80040214:	08010087 	j	8004021c <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x304>
80040218:	00000000 	nop
8004021c:	8fa5003c 	lw	a1,60(sp)
80040220:	8fa100d4 	lw	at,212(sp)
80040224:	afa10018 	sw	at,24(sp)
80040228:	afa10104 	sw	at,260(sp)
                let n = x % base; // Get the current place value.
8004022c:	8fa40040 	lw	a0,64(sp)
80040230:	3c01810a 	lui	at,0x810a
80040234:	2426baac 	addiu	a2,at,-17748
80040238:	0c012358 	jal	80048d60 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Rem$GT$3rem17h9f903c597deb573bE>
8004023c:	00000000 	nop
80040240:	8fa5003c 	lw	a1,60(sp)
80040244:	afa200d8 	sw	v0,216(sp)
                x = x / base; // Deaccumulate the number.
80040248:	8fa40040 	lw	a0,64(sp)
8004024c:	3c01810a 	lui	at,0x810a
80040250:	2426babc 	addiu	a2,at,-17732
80040254:	0c012314 	jal	80048c50 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Div$GT$3div17h9fd659e674ef8f18E>
80040258:	00000000 	nop
8004025c:	afa20040 	sw	v0,64(sp)
80040260:	27a400d8 	addiu	a0,sp,216
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
80040264:	0c0124a4 	jal	80049290 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h34321a1be99db044E>
80040268:	00000000 	nop
8004026c:	00402025 	move	a0,v0
80040270:	0c0124b0 	jal	800492c0 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E>
80040274:	00000000 	nop
80040278:	8fa10018 	lw	at,24(sp)
8004027c:	afa1011c 	sw	at,284(sp)
80040280:	a3a20123 	sb	v0,291(sp)
80040284:	a3a20125 	sb	v0,293(sp)
80040288:	a3a20127 	sb	v0,295(sp)
        ManuallyDrop { value }
8004028c:	a3a20126 	sb	v0,294(sp)
    }
80040290:	93a20126 	lbu	v0,294(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
80040294:	a3a20124 	sb	v0,292(sp)
    }
80040298:	93a20124 	lbu	v0,292(sp)
        *self = MaybeUninit::new(val);
8004029c:	a0220000 	sb	v0,0(at)
800402a0:	afa1013c 	sw	at,316(sp)
800402a4:	afa10140 	sw	at,320(sp)
                curr -= 1;
800402a8:	8fa100c8 	lw	at,200(sp)
800402ac:	2422ffff 	addiu	v0,at,-1
800402b0:	afa2001c 	sw	v0,28(sp)
800402b4:	1020000d 	beqz	at,800402ec <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x3d4>
800402b8:	00000000 	nop
800402bc:	080100b1 	j	800402c4 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x3ac>
800402c0:	00000000 	nop
800402c4:	8fa1001c 	lw	at,28(sp)
800402c8:	afa100c8 	sw	at,200(sp)
800402cc:	27a40040 	addiu	a0,sp,64
800402d0:	27a50044 	addiu	a1,sp,68
                if x == zero {
800402d4:	0c0122a8 	jal	80048aa0 <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hbdfa0bd26f3ca07fE>
800402d8:	00000000 	nop
800402dc:	1440ff5e 	bnez	v0,80040058 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x140>
800402e0:	00000000 	nop
800402e4:	0801007e 	j	800401f8 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x2e0>
800402e8:	00000000 	nop
                curr -= 1;
800402ec:	3c01810a 	lui	at,0x810a
800402f0:	2424bacc 	addiu	a0,at,-17716
800402f4:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800402f8:	00000000 	nop

800402fc <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE>:
    fn fmt_int<T: DisplayInt>(&self, mut x: T, f: &mut fmt::Formatter<'_>) -> fmt::Result {
800402fc:	27bdfea8 	addiu	sp,sp,-344
80040300:	afbf0154 	sw	ra,340(sp)
80040304:	afa6002c 	sw	a2,44(sp)
80040308:	a3a50042 	sb	a1,66(sp)
8004030c:	afa400ec 	sw	a0,236(sp)
80040310:	afa600f0 	sw	a2,240(sp)
        let zero = T::zero();
80040314:	0c012471 	jal	800491c4 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h4faa43391429b7caE>
80040318:	00000000 	nop
8004031c:	a3a20043 	sb	v0,67(sp)
80040320:	27a10042 	addiu	at,sp,66
80040324:	afa1014c 	sw	at,332(sp)
80040328:	27a10043 	addiu	at,sp,67
8004032c:	afa10150 	sw	at,336(sp)
80040330:	93a10042 	lbu	at,66(sp)
80040334:	93a20043 	lbu	v0,67(sp)
80040338:	0022082b 	sltu	at,at,v0
8004033c:	afa10038 	sw	at,56(sp)
80040340:	38210001 	xori	at,at,0x1
80040344:	afa10030 	sw	at,48(sp)
        let is_nonnegative = x >= zero;
80040348:	a3a100f6 	sb	at,246(sp)
        let mut buf = [MaybeUninit::<u8>::uninit(); 128];
8004034c:	93a50113 	lbu	a1,275(sp)
80040350:	27a40044 	addiu	a0,sp,68
80040354:	24060080 	li	a2,128
80040358:	afa60034 	sw	a2,52(sp)
8004035c:	0c00dba8 	jal	80036ea0 <memset>
80040360:	00000000 	nop
80040364:	8fa10034 	lw	at,52(sp)
        let mut curr = buf.len();
80040368:	afa100c4 	sw	at,196(sp)
8004036c:	24040010 	li	a0,16
        let base = T::from_u8(Self::BASE);
80040370:	0c012474 	jal	800491d0 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817hde776fb7bbe296d4E>
80040374:	00000000 	nop
80040378:	8fa10038 	lw	at,56(sp)
8004037c:	00401825 	move	v1,v0
80040380:	afa3003c 	sw	v1,60(sp)
80040384:	a3a200f7 	sb	v0,247(sp)
        if is_nonnegative {
80040388:	10200013 	beqz	at,800403d8 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0xdc>
8004038c:	00000000 	nop
80040390:	080100e6 	j	80040398 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x9c>
80040394:	00000000 	nop
80040398:	27a40044 	addiu	a0,sp,68
8004039c:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
800403a0:	0c011255 	jal	80044954 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
800403a4:	00000000 	nop
800403a8:	00402025 	move	a0,v0
800403ac:	00602825 	move	a1,v1
800403b0:	0c00f8eb 	jal	8003e3ac <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
800403b4:	00000000 	nop
800403b8:	00402025 	move	a0,v0
800403bc:	00602825 	move	a1,v1
800403c0:	0c00f840 	jal	8003e100 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
800403c4:	00000000 	nop
800403c8:	afa200d8 	sw	v0,216(sp)
800403cc:	afa300dc 	sw	v1,220(sp)
800403d0:	08010106 	j	80040418 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x11c>
800403d4:	00000000 	nop
800403d8:	27a40044 	addiu	a0,sp,68
800403dc:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
800403e0:	0c011255 	jal	80044954 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
800403e4:	00000000 	nop
800403e8:	00402025 	move	a0,v0
800403ec:	00602825 	move	a1,v1
800403f0:	0c00f8eb 	jal	8003e3ac <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
800403f4:	00000000 	nop
800403f8:	00402025 	move	a0,v0
800403fc:	00602825 	move	a1,v1
80040400:	0c00f840 	jal	8003e100 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
80040404:	00000000 	nop
80040408:	afa200c8 	sw	v0,200(sp)
8004040c:	afa300cc 	sw	v1,204(sp)
80040410:	08010177 	j	800405dc <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x2e0>
80040414:	00000000 	nop
80040418:	27a400d8 	addiu	a0,sp,216
            for byte in buf.iter_mut().rev() {
8004041c:	0c00f79f 	jal	8003de7c <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
80040420:	00000000 	nop
80040424:	afa200e0 	sw	v0,224(sp)
80040428:	8fa100e0 	lw	at,224(sp)
8004042c:	1420002b 	bnez	at,800404dc <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x1e0>
80040430:	00000000 	nop
80040434:	0801010f 	j	8004043c <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x140>
80040438:	00000000 	nop
        let buf = &buf[curr..];
8004043c:	8fa100c4 	lw	at,196(sp)
80040440:	afa100e8 	sw	at,232(sp)
80040444:	8fa500e8 	lw	a1,232(sp)
80040448:	3c01810a 	lui	at,0x810a
8004044c:	2426badc 	addiu	a2,at,-17700
80040450:	27a40044 	addiu	a0,sp,68
80040454:	0c00f3d3 	jal	8003cf4c <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hfa0288d626a253cbE>
80040458:	00000000 	nop
8004045c:	00402025 	move	a0,v0
80040460:	00602825 	move	a1,v1
80040464:	afa40100 	sw	a0,256(sp)
80040468:	afa50104 	sw	a1,260(sp)
8004046c:	afa4013c 	sw	a0,316(sp)
80040470:	afa50140 	sw	a1,320(sp)
80040474:	afa40144 	sw	a0,324(sp)
80040478:	afa50148 	sw	a1,328(sp)
            str::from_utf8_unchecked(slice::from_raw_parts(
8004047c:	0c011180 	jal	80044600 <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
80040480:	00000000 	nop
80040484:	00402025 	move	a0,v0
80040488:	00602825 	move	a1,v1
8004048c:	0c0115fe 	jal	800457f8 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>
80040490:	00000000 	nop
80040494:	8fa10030 	lw	at,48(sp)
80040498:	8fa4002c 	lw	a0,44(sp)
8004049c:	00602825 	move	a1,v1
800404a0:	afa20108 	sw	v0,264(sp)
800404a4:	afa5010c 	sw	a1,268(sp)
        f.pad_integral(is_nonnegative, Self::PREFIX, buf)
800404a8:	03a01825 	move	v1,sp
800404ac:	ac650014 	sw	a1,20(v1)
800404b0:	ac620010 	sw	v0,16(v1)
800404b4:	30250001 	andi	a1,at,0x1
800404b8:	3c01810a 	lui	at,0x810a
800404bc:	2426baec 	addiu	a2,at,-17684
800404c0:	24070002 	li	a3,2
800404c4:	0c0106e3 	jal	80041b8c <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E>
800404c8:	00000000 	nop
    }
800404cc:	8fbf0154 	lw	ra,340(sp)
800404d0:	27bd0158 	addiu	sp,sp,344
800404d4:	03e00008 	jr	ra
800404d8:	00000000 	nop
            for byte in buf.iter_mut().rev() {
800404dc:	8fa5003c 	lw	a1,60(sp)
800404e0:	8fa100e0 	lw	at,224(sp)
800404e4:	afa10024 	sw	at,36(sp)
800404e8:	afa100f8 	sw	at,248(sp)
                let n = zero - (x % base); // Get the current place value.
800404ec:	93a40042 	lbu	a0,66(sp)
800404f0:	93a10043 	lbu	at,67(sp)
800404f4:	afa10020 	sw	at,32(sp)
800404f8:	3c01810a 	lui	at,0x810a
800404fc:	2426ba6c 	addiu	a2,at,-17812
80040500:	0c01236d 	jal	80048db4 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Rem$GT$3rem17hcf0699d134763680E>
80040504:	00000000 	nop
80040508:	8fa40020 	lw	a0,32(sp)
8004050c:	00402825 	move	a1,v0
80040510:	3c01810a 	lui	at,0x810a
80040514:	2426ba7c 	addiu	a2,at,-17796
80040518:	0c0122ee 	jal	80048bb8 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9d08ad2c426c5534E>
8004051c:	00000000 	nop
80040520:	8fa5003c 	lw	a1,60(sp)
80040524:	a3a200e7 	sb	v0,231(sp)
                x = x / base; // Deaccumulate the number.
80040528:	93a40042 	lbu	a0,66(sp)
8004052c:	3c01810a 	lui	at,0x810a
80040530:	2426ba8c 	addiu	a2,at,-17780
80040534:	0c012329 	jal	80048ca4 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Div$GT$3div17h8c44f7b15731be55E>
80040538:	00000000 	nop
8004053c:	a3a20042 	sb	v0,66(sp)
80040540:	27a400e7 	addiu	a0,sp,231
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
80040544:	0c01247a 	jal	800491e8 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817hdb1dd13bcbe6748fE>
80040548:	00000000 	nop
8004054c:	00402025 	move	a0,v0
80040550:	0c01252b 	jal	800494ac <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE>
80040554:	00000000 	nop
80040558:	8fa10024 	lw	at,36(sp)
8004055c:	afa10120 	sw	at,288(sp)
80040560:	a3a20127 	sb	v0,295(sp)
80040564:	a3a20129 	sb	v0,297(sp)
80040568:	a3a2012b 	sb	v0,299(sp)
        ManuallyDrop { value }
8004056c:	a3a2012a 	sb	v0,298(sp)
    }
80040570:	93a2012a 	lbu	v0,298(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
80040574:	a3a20128 	sb	v0,296(sp)
    }
80040578:	93a20128 	lbu	v0,296(sp)
        *self = MaybeUninit::new(val);
8004057c:	a0220000 	sb	v0,0(at)
80040580:	afa1012c 	sw	at,300(sp)
80040584:	afa10130 	sw	at,304(sp)
                curr -= 1;
80040588:	8fa100c4 	lw	at,196(sp)
8004058c:	2422ffff 	addiu	v0,at,-1
80040590:	afa20028 	sw	v0,40(sp)
80040594:	1020000d 	beqz	at,800405cc <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x2d0>
80040598:	00000000 	nop
8004059c:	08010169 	j	800405a4 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x2a8>
800405a0:	00000000 	nop
800405a4:	8fa10028 	lw	at,40(sp)
800405a8:	afa100c4 	sw	at,196(sp)
800405ac:	27a40042 	addiu	a0,sp,66
800405b0:	27a50043 	addiu	a1,sp,67
                if x == zero {
800405b4:	0c0122b2 	jal	80048ac8 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h979542bb5e2130d6E>
800405b8:	00000000 	nop
800405bc:	1440ff9f 	bnez	v0,8004043c <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x140>
800405c0:	00000000 	nop
800405c4:	08010106 	j	80040418 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x11c>
800405c8:	00000000 	nop
                curr -= 1;
800405cc:	3c01810a 	lui	at,0x810a
800405d0:	2424ba9c 	addiu	a0,at,-17764
800405d4:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800405d8:	00000000 	nop
800405dc:	27a400c8 	addiu	a0,sp,200
            for byte in buf.iter_mut().rev() {
800405e0:	0c00f79f 	jal	8003de7c <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
800405e4:	00000000 	nop
800405e8:	afa200d0 	sw	v0,208(sp)
800405ec:	8fa100d0 	lw	at,208(sp)
800405f0:	1020ff92 	beqz	at,8004043c <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x140>
800405f4:	00000000 	nop
800405f8:	08010180 	j	80040600 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x304>
800405fc:	00000000 	nop
80040600:	8fa5003c 	lw	a1,60(sp)
80040604:	8fa100d0 	lw	at,208(sp)
80040608:	afa10018 	sw	at,24(sp)
8004060c:	afa100fc 	sw	at,252(sp)
                let n = x % base; // Get the current place value.
80040610:	93a40042 	lbu	a0,66(sp)
80040614:	3c01810a 	lui	at,0x810a
80040618:	2426baac 	addiu	a2,at,-17748
8004061c:	0c01236d 	jal	80048db4 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Rem$GT$3rem17hcf0699d134763680E>
80040620:	00000000 	nop
80040624:	8fa5003c 	lw	a1,60(sp)
80040628:	a3a200d7 	sb	v0,215(sp)
                x = x / base; // Deaccumulate the number.
8004062c:	93a40042 	lbu	a0,66(sp)
80040630:	3c01810a 	lui	at,0x810a
80040634:	2426babc 	addiu	a2,at,-17732
80040638:	0c012329 	jal	80048ca4 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Div$GT$3div17h8c44f7b15731be55E>
8004063c:	00000000 	nop
80040640:	a3a20042 	sb	v0,66(sp)
80040644:	27a400d7 	addiu	a0,sp,215
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
80040648:	0c01247a 	jal	800491e8 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817hdb1dd13bcbe6748fE>
8004064c:	00000000 	nop
80040650:	00402025 	move	a0,v0
80040654:	0c01252b 	jal	800494ac <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE>
80040658:	00000000 	nop
8004065c:	8fa10018 	lw	at,24(sp)
80040660:	afa10114 	sw	at,276(sp)
80040664:	a3a2011b 	sb	v0,283(sp)
80040668:	a3a2011d 	sb	v0,285(sp)
8004066c:	a3a2011f 	sb	v0,287(sp)
        ManuallyDrop { value }
80040670:	a3a2011e 	sb	v0,286(sp)
    }
80040674:	93a2011e 	lbu	v0,286(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
80040678:	a3a2011c 	sb	v0,284(sp)
    }
8004067c:	93a2011c 	lbu	v0,284(sp)
        *self = MaybeUninit::new(val);
80040680:	a0220000 	sb	v0,0(at)
80040684:	afa10134 	sw	at,308(sp)
80040688:	afa10138 	sw	at,312(sp)
                curr -= 1;
8004068c:	8fa100c4 	lw	at,196(sp)
80040690:	2422ffff 	addiu	v0,at,-1
80040694:	afa2001c 	sw	v0,28(sp)
80040698:	1020000d 	beqz	at,800406d0 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x3d4>
8004069c:	00000000 	nop
800406a0:	080101aa 	j	800406a8 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x3ac>
800406a4:	00000000 	nop
800406a8:	8fa1001c 	lw	at,28(sp)
800406ac:	afa100c4 	sw	at,196(sp)
800406b0:	27a40042 	addiu	a0,sp,66
800406b4:	27a50043 	addiu	a1,sp,67
                if x == zero {
800406b8:	0c0122b2 	jal	80048ac8 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h979542bb5e2130d6E>
800406bc:	00000000 	nop
800406c0:	1440ff5e 	bnez	v0,8004043c <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x140>
800406c4:	00000000 	nop
800406c8:	08010177 	j	800405dc <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x2e0>
800406cc:	00000000 	nop
                curr -= 1;
800406d0:	3c01810a 	lui	at,0x810a
800406d4:	2424bacc 	addiu	a0,at,-17716
800406d8:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800406dc:	00000000 	nop

800406e0 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE>:
    fn fmt_int<T: DisplayInt>(&self, mut x: T, f: &mut fmt::Formatter<'_>) -> fmt::Result {
800406e0:	27bdfea0 	addiu	sp,sp,-352
800406e4:	afbf015c 	sw	ra,348(sp)
800406e8:	afa6002c 	sw	a2,44(sp)
800406ec:	afa50040 	sw	a1,64(sp)
800406f0:	afa400f0 	sw	a0,240(sp)
800406f4:	afa600f4 	sw	a2,244(sp)
        let zero = T::zero();
800406f8:	0c01249b 	jal	8004926c <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h270aff8721106dedE>
800406fc:	00000000 	nop
80040700:	afa20044 	sw	v0,68(sp)
80040704:	27a10040 	addiu	at,sp,64
80040708:	afa10154 	sw	at,340(sp)
8004070c:	27a10044 	addiu	at,sp,68
80040710:	afa10158 	sw	at,344(sp)
80040714:	8fa10040 	lw	at,64(sp)
80040718:	8fa20044 	lw	v0,68(sp)
8004071c:	0022082b 	sltu	at,at,v0
80040720:	afa10038 	sw	at,56(sp)
80040724:	38210001 	xori	at,at,0x1
80040728:	afa10030 	sw	at,48(sp)
        let is_nonnegative = x >= zero;
8004072c:	a3a100fb 	sb	at,251(sp)
        let mut buf = [MaybeUninit::<u8>::uninit(); 128];
80040730:	93a5011b 	lbu	a1,283(sp)
80040734:	27a40048 	addiu	a0,sp,72
80040738:	24060080 	li	a2,128
8004073c:	afa60034 	sw	a2,52(sp)
80040740:	0c00dba8 	jal	80036ea0 <memset>
80040744:	00000000 	nop
80040748:	8fa10034 	lw	at,52(sp)
        let mut curr = buf.len();
8004074c:	afa100c8 	sw	at,200(sp)
80040750:	24040010 	li	a0,16
        let base = T::from_u8(Self::BASE);
80040754:	0c01249e 	jal	80049278 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817h1c1cc6cf834b4db9E>
80040758:	00000000 	nop
8004075c:	8fa10038 	lw	at,56(sp)
80040760:	00401825 	move	v1,v0
80040764:	afa3003c 	sw	v1,60(sp)
80040768:	afa200fc 	sw	v0,252(sp)
        if is_nonnegative {
8004076c:	10200013 	beqz	at,800407bc <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0xdc>
80040770:	00000000 	nop
80040774:	080101df 	j	8004077c <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x9c>
80040778:	00000000 	nop
8004077c:	27a40048 	addiu	a0,sp,72
80040780:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
80040784:	0c011255 	jal	80044954 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
80040788:	00000000 	nop
8004078c:	00402025 	move	a0,v0
80040790:	00602825 	move	a1,v1
80040794:	0c00f8eb 	jal	8003e3ac <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
80040798:	00000000 	nop
8004079c:	00402025 	move	a0,v0
800407a0:	00602825 	move	a1,v1
800407a4:	0c00f840 	jal	8003e100 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
800407a8:	00000000 	nop
800407ac:	afa200dc 	sw	v0,220(sp)
800407b0:	afa300e0 	sw	v1,224(sp)
800407b4:	080101ff 	j	800407fc <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x11c>
800407b8:	00000000 	nop
800407bc:	27a40048 	addiu	a0,sp,72
800407c0:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
800407c4:	0c011255 	jal	80044954 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
800407c8:	00000000 	nop
800407cc:	00402025 	move	a0,v0
800407d0:	00602825 	move	a1,v1
800407d4:	0c00f8eb 	jal	8003e3ac <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
800407d8:	00000000 	nop
800407dc:	00402025 	move	a0,v0
800407e0:	00602825 	move	a1,v1
800407e4:	0c00f840 	jal	8003e100 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
800407e8:	00000000 	nop
800407ec:	afa200cc 	sw	v0,204(sp)
800407f0:	afa300d0 	sw	v1,208(sp)
800407f4:	08010270 	j	800409c0 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x2e0>
800407f8:	00000000 	nop
800407fc:	27a400dc 	addiu	a0,sp,220
            for byte in buf.iter_mut().rev() {
80040800:	0c00f79f 	jal	8003de7c <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
80040804:	00000000 	nop
80040808:	afa200e4 	sw	v0,228(sp)
8004080c:	8fa100e4 	lw	at,228(sp)
80040810:	1420002b 	bnez	at,800408c0 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x1e0>
80040814:	00000000 	nop
80040818:	08010208 	j	80040820 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x140>
8004081c:	00000000 	nop
        let buf = &buf[curr..];
80040820:	8fa100c8 	lw	at,200(sp)
80040824:	afa100ec 	sw	at,236(sp)
80040828:	8fa500ec 	lw	a1,236(sp)
8004082c:	3c01810a 	lui	at,0x810a
80040830:	2426badc 	addiu	a2,at,-17700
80040834:	27a40048 	addiu	a0,sp,72
80040838:	0c00f3d3 	jal	8003cf4c <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hfa0288d626a253cbE>
8004083c:	00000000 	nop
80040840:	00402025 	move	a0,v0
80040844:	00602825 	move	a1,v1
80040848:	afa40108 	sw	a0,264(sp)
8004084c:	afa5010c 	sw	a1,268(sp)
80040850:	afa40144 	sw	a0,324(sp)
80040854:	afa50148 	sw	a1,328(sp)
80040858:	afa4014c 	sw	a0,332(sp)
8004085c:	afa50150 	sw	a1,336(sp)
            str::from_utf8_unchecked(slice::from_raw_parts(
80040860:	0c011180 	jal	80044600 <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
80040864:	00000000 	nop
80040868:	00402025 	move	a0,v0
8004086c:	00602825 	move	a1,v1
80040870:	0c0115fe 	jal	800457f8 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>
80040874:	00000000 	nop
80040878:	8fa10030 	lw	at,48(sp)
8004087c:	8fa4002c 	lw	a0,44(sp)
80040880:	00602825 	move	a1,v1
80040884:	afa20110 	sw	v0,272(sp)
80040888:	afa50114 	sw	a1,276(sp)
        f.pad_integral(is_nonnegative, Self::PREFIX, buf)
8004088c:	03a01825 	move	v1,sp
80040890:	ac650014 	sw	a1,20(v1)
80040894:	ac620010 	sw	v0,16(v1)
80040898:	30250001 	andi	a1,at,0x1
8004089c:	3c01810a 	lui	at,0x810a
800408a0:	2426baec 	addiu	a2,at,-17684
800408a4:	24070002 	li	a3,2
800408a8:	0c0106e3 	jal	80041b8c <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E>
800408ac:	00000000 	nop
    }
800408b0:	8fbf015c 	lw	ra,348(sp)
800408b4:	27bd0160 	addiu	sp,sp,352
800408b8:	03e00008 	jr	ra
800408bc:	00000000 	nop
            for byte in buf.iter_mut().rev() {
800408c0:	8fa5003c 	lw	a1,60(sp)
800408c4:	8fa100e4 	lw	at,228(sp)
800408c8:	afa10024 	sw	at,36(sp)
800408cc:	afa10100 	sw	at,256(sp)
                let n = zero - (x % base); // Get the current place value.
800408d0:	8fa10044 	lw	at,68(sp)
800408d4:	afa10020 	sw	at,32(sp)
800408d8:	8fa40040 	lw	a0,64(sp)
800408dc:	3c01810a 	lui	at,0x810a
800408e0:	2426ba6c 	addiu	a2,at,-17812
800408e4:	0c012358 	jal	80048d60 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Rem$GT$3rem17h9f903c597deb573bE>
800408e8:	00000000 	nop
800408ec:	8fa40020 	lw	a0,32(sp)
800408f0:	00402825 	move	a1,v0
800408f4:	3c01810a 	lui	at,0x810a
800408f8:	2426ba7c 	addiu	a2,at,-17796
800408fc:	0c0122dc 	jal	80048b70 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Sub$GT$3sub17h90e33352f2ecaf79E>
80040900:	00000000 	nop
80040904:	8fa5003c 	lw	a1,60(sp)
80040908:	afa200e8 	sw	v0,232(sp)
                x = x / base; // Deaccumulate the number.
8004090c:	8fa40040 	lw	a0,64(sp)
80040910:	3c01810a 	lui	at,0x810a
80040914:	2426ba8c 	addiu	a2,at,-17780
80040918:	0c012314 	jal	80048c50 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Div$GT$3div17h9fd659e674ef8f18E>
8004091c:	00000000 	nop
80040920:	afa20040 	sw	v0,64(sp)
80040924:	27a400e8 	addiu	a0,sp,232
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
80040928:	0c0124a4 	jal	80049290 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h34321a1be99db044E>
8004092c:	00000000 	nop
80040930:	00402025 	move	a0,v0
80040934:	0c01252b 	jal	800494ac <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE>
80040938:	00000000 	nop
8004093c:	8fa10024 	lw	at,36(sp)
80040940:	afa10128 	sw	at,296(sp)
80040944:	a3a2012f 	sb	v0,303(sp)
80040948:	a3a20131 	sb	v0,305(sp)
8004094c:	a3a20133 	sb	v0,307(sp)
        ManuallyDrop { value }
80040950:	a3a20132 	sb	v0,306(sp)
    }
80040954:	93a20132 	lbu	v0,306(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
80040958:	a3a20130 	sb	v0,304(sp)
    }
8004095c:	93a20130 	lbu	v0,304(sp)
        *self = MaybeUninit::new(val);
80040960:	a0220000 	sb	v0,0(at)
80040964:	afa10134 	sw	at,308(sp)
80040968:	afa10138 	sw	at,312(sp)
                curr -= 1;
8004096c:	8fa100c8 	lw	at,200(sp)
80040970:	2422ffff 	addiu	v0,at,-1
80040974:	afa20028 	sw	v0,40(sp)
80040978:	1020000d 	beqz	at,800409b0 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x2d0>
8004097c:	00000000 	nop
80040980:	08010262 	j	80040988 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x2a8>
80040984:	00000000 	nop
80040988:	8fa10028 	lw	at,40(sp)
8004098c:	afa100c8 	sw	at,200(sp)
80040990:	27a40040 	addiu	a0,sp,64
80040994:	27a50044 	addiu	a1,sp,68
                if x == zero {
80040998:	0c0122a8 	jal	80048aa0 <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hbdfa0bd26f3ca07fE>
8004099c:	00000000 	nop
800409a0:	1440ff9f 	bnez	v0,80040820 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x140>
800409a4:	00000000 	nop
800409a8:	080101ff 	j	800407fc <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x11c>
800409ac:	00000000 	nop
                curr -= 1;
800409b0:	3c01810a 	lui	at,0x810a
800409b4:	2424ba9c 	addiu	a0,at,-17764
800409b8:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800409bc:	00000000 	nop
800409c0:	27a400cc 	addiu	a0,sp,204
            for byte in buf.iter_mut().rev() {
800409c4:	0c00f79f 	jal	8003de7c <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
800409c8:	00000000 	nop
800409cc:	afa200d4 	sw	v0,212(sp)
800409d0:	8fa100d4 	lw	at,212(sp)
800409d4:	1020ff92 	beqz	at,80040820 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x140>
800409d8:	00000000 	nop
800409dc:	08010279 	j	800409e4 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x304>
800409e0:	00000000 	nop
800409e4:	8fa5003c 	lw	a1,60(sp)
800409e8:	8fa100d4 	lw	at,212(sp)
800409ec:	afa10018 	sw	at,24(sp)
800409f0:	afa10104 	sw	at,260(sp)
                let n = x % base; // Get the current place value.
800409f4:	8fa40040 	lw	a0,64(sp)
800409f8:	3c01810a 	lui	at,0x810a
800409fc:	2426baac 	addiu	a2,at,-17748
80040a00:	0c012358 	jal	80048d60 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Rem$GT$3rem17h9f903c597deb573bE>
80040a04:	00000000 	nop
80040a08:	8fa5003c 	lw	a1,60(sp)
80040a0c:	afa200d8 	sw	v0,216(sp)
                x = x / base; // Deaccumulate the number.
80040a10:	8fa40040 	lw	a0,64(sp)
80040a14:	3c01810a 	lui	at,0x810a
80040a18:	2426babc 	addiu	a2,at,-17732
80040a1c:	0c012314 	jal	80048c50 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Div$GT$3div17h9fd659e674ef8f18E>
80040a20:	00000000 	nop
80040a24:	afa20040 	sw	v0,64(sp)
80040a28:	27a400d8 	addiu	a0,sp,216
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
80040a2c:	0c0124a4 	jal	80049290 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h34321a1be99db044E>
80040a30:	00000000 	nop
80040a34:	00402025 	move	a0,v0
80040a38:	0c01252b 	jal	800494ac <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE>
80040a3c:	00000000 	nop
80040a40:	8fa10018 	lw	at,24(sp)
80040a44:	afa1011c 	sw	at,284(sp)
80040a48:	a3a20123 	sb	v0,291(sp)
80040a4c:	a3a20125 	sb	v0,293(sp)
80040a50:	a3a20127 	sb	v0,295(sp)
        ManuallyDrop { value }
80040a54:	a3a20126 	sb	v0,294(sp)
    }
80040a58:	93a20126 	lbu	v0,294(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
80040a5c:	a3a20124 	sb	v0,292(sp)
    }
80040a60:	93a20124 	lbu	v0,292(sp)
        *self = MaybeUninit::new(val);
80040a64:	a0220000 	sb	v0,0(at)
80040a68:	afa1013c 	sw	at,316(sp)
80040a6c:	afa10140 	sw	at,320(sp)
                curr -= 1;
80040a70:	8fa100c8 	lw	at,200(sp)
80040a74:	2422ffff 	addiu	v0,at,-1
80040a78:	afa2001c 	sw	v0,28(sp)
80040a7c:	1020000d 	beqz	at,80040ab4 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x3d4>
80040a80:	00000000 	nop
80040a84:	080102a3 	j	80040a8c <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x3ac>
80040a88:	00000000 	nop
80040a8c:	8fa1001c 	lw	at,28(sp)
80040a90:	afa100c8 	sw	at,200(sp)
80040a94:	27a40040 	addiu	a0,sp,64
80040a98:	27a50044 	addiu	a1,sp,68
                if x == zero {
80040a9c:	0c0122a8 	jal	80048aa0 <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hbdfa0bd26f3ca07fE>
80040aa0:	00000000 	nop
80040aa4:	1440ff5e 	bnez	v0,80040820 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x140>
80040aa8:	00000000 	nop
80040aac:	08010270 	j	800409c0 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x2e0>
80040ab0:	00000000 	nop
                curr -= 1;
80040ab4:	3c01810a 	lui	at,0x810a
80040ab8:	2424bacc 	addiu	a0,at,-17716
80040abc:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80040ac0:	00000000 	nop

80040ac4 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E>:
    fn fmt_int<T: DisplayInt>(&self, mut x: T, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80040ac4:	27bdfea0 	addiu	sp,sp,-352
80040ac8:	afbf015c 	sw	ra,348(sp)
80040acc:	afa6002c 	sw	a2,44(sp)
80040ad0:	afa50040 	sw	a1,64(sp)
80040ad4:	afa400f0 	sw	a0,240(sp)
80040ad8:	afa600f4 	sw	a2,244(sp)
        let zero = T::zero();
80040adc:	0c012486 	jal	80049218 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h82437499101b7905E>
80040ae0:	00000000 	nop
80040ae4:	afa20044 	sw	v0,68(sp)
80040ae8:	27a10040 	addiu	at,sp,64
80040aec:	afa10154 	sw	at,340(sp)
80040af0:	27a10044 	addiu	at,sp,68
80040af4:	afa10158 	sw	at,344(sp)
80040af8:	8fa10040 	lw	at,64(sp)
80040afc:	8fa20044 	lw	v0,68(sp)
80040b00:	0022082b 	sltu	at,at,v0
80040b04:	afa10038 	sw	at,56(sp)
80040b08:	38210001 	xori	at,at,0x1
80040b0c:	afa10030 	sw	at,48(sp)
        let is_nonnegative = x >= zero;
80040b10:	a3a100fb 	sb	at,251(sp)
        let mut buf = [MaybeUninit::<u8>::uninit(); 128];
80040b14:	93a5011b 	lbu	a1,283(sp)
80040b18:	27a40048 	addiu	a0,sp,72
80040b1c:	24060080 	li	a2,128
80040b20:	afa60034 	sw	a2,52(sp)
80040b24:	0c00dba8 	jal	80036ea0 <memset>
80040b28:	00000000 	nop
80040b2c:	8fa10034 	lw	at,52(sp)
        let mut curr = buf.len();
80040b30:	afa100c8 	sw	at,200(sp)
80040b34:	24040010 	li	a0,16
        let base = T::from_u8(Self::BASE);
80040b38:	0c012489 	jal	80049224 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817hb5a1ba67db0bffc6E>
80040b3c:	00000000 	nop
80040b40:	8fa10038 	lw	at,56(sp)
80040b44:	00401825 	move	v1,v0
80040b48:	afa3003c 	sw	v1,60(sp)
80040b4c:	afa200fc 	sw	v0,252(sp)
        if is_nonnegative {
80040b50:	10200013 	beqz	at,80040ba0 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0xdc>
80040b54:	00000000 	nop
80040b58:	080102d8 	j	80040b60 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x9c>
80040b5c:	00000000 	nop
80040b60:	27a40048 	addiu	a0,sp,72
80040b64:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
80040b68:	0c011255 	jal	80044954 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
80040b6c:	00000000 	nop
80040b70:	00402025 	move	a0,v0
80040b74:	00602825 	move	a1,v1
80040b78:	0c00f8eb 	jal	8003e3ac <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
80040b7c:	00000000 	nop
80040b80:	00402025 	move	a0,v0
80040b84:	00602825 	move	a1,v1
80040b88:	0c00f840 	jal	8003e100 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
80040b8c:	00000000 	nop
80040b90:	afa200dc 	sw	v0,220(sp)
80040b94:	afa300e0 	sw	v1,224(sp)
80040b98:	080102f8 	j	80040be0 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x11c>
80040b9c:	00000000 	nop
80040ba0:	27a40048 	addiu	a0,sp,72
80040ba4:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
80040ba8:	0c011255 	jal	80044954 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
80040bac:	00000000 	nop
80040bb0:	00402025 	move	a0,v0
80040bb4:	00602825 	move	a1,v1
80040bb8:	0c00f8eb 	jal	8003e3ac <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
80040bbc:	00000000 	nop
80040bc0:	00402025 	move	a0,v0
80040bc4:	00602825 	move	a1,v1
80040bc8:	0c00f840 	jal	8003e100 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
80040bcc:	00000000 	nop
80040bd0:	afa200cc 	sw	v0,204(sp)
80040bd4:	afa300d0 	sw	v1,208(sp)
80040bd8:	08010369 	j	80040da4 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x2e0>
80040bdc:	00000000 	nop
80040be0:	27a400dc 	addiu	a0,sp,220
            for byte in buf.iter_mut().rev() {
80040be4:	0c00f79f 	jal	8003de7c <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
80040be8:	00000000 	nop
80040bec:	afa200e4 	sw	v0,228(sp)
80040bf0:	8fa100e4 	lw	at,228(sp)
80040bf4:	1420002b 	bnez	at,80040ca4 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x1e0>
80040bf8:	00000000 	nop
80040bfc:	08010301 	j	80040c04 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x140>
80040c00:	00000000 	nop
        let buf = &buf[curr..];
80040c04:	8fa100c8 	lw	at,200(sp)
80040c08:	afa100ec 	sw	at,236(sp)
80040c0c:	8fa500ec 	lw	a1,236(sp)
80040c10:	3c01810a 	lui	at,0x810a
80040c14:	2426badc 	addiu	a2,at,-17700
80040c18:	27a40048 	addiu	a0,sp,72
80040c1c:	0c00f3d3 	jal	8003cf4c <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hfa0288d626a253cbE>
80040c20:	00000000 	nop
80040c24:	00402025 	move	a0,v0
80040c28:	00602825 	move	a1,v1
80040c2c:	afa40108 	sw	a0,264(sp)
80040c30:	afa5010c 	sw	a1,268(sp)
80040c34:	afa40144 	sw	a0,324(sp)
80040c38:	afa50148 	sw	a1,328(sp)
80040c3c:	afa4014c 	sw	a0,332(sp)
80040c40:	afa50150 	sw	a1,336(sp)
            str::from_utf8_unchecked(slice::from_raw_parts(
80040c44:	0c011180 	jal	80044600 <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
80040c48:	00000000 	nop
80040c4c:	00402025 	move	a0,v0
80040c50:	00602825 	move	a1,v1
80040c54:	0c0115fe 	jal	800457f8 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>
80040c58:	00000000 	nop
80040c5c:	8fa10030 	lw	at,48(sp)
80040c60:	8fa4002c 	lw	a0,44(sp)
80040c64:	00602825 	move	a1,v1
80040c68:	afa20110 	sw	v0,272(sp)
80040c6c:	afa50114 	sw	a1,276(sp)
        f.pad_integral(is_nonnegative, Self::PREFIX, buf)
80040c70:	03a01825 	move	v1,sp
80040c74:	ac650014 	sw	a1,20(v1)
80040c78:	ac620010 	sw	v0,16(v1)
80040c7c:	30250001 	andi	a1,at,0x1
80040c80:	3c01810a 	lui	at,0x810a
80040c84:	2426baec 	addiu	a2,at,-17684
80040c88:	24070002 	li	a3,2
80040c8c:	0c0106e3 	jal	80041b8c <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E>
80040c90:	00000000 	nop
    }
80040c94:	8fbf015c 	lw	ra,348(sp)
80040c98:	27bd0160 	addiu	sp,sp,352
80040c9c:	03e00008 	jr	ra
80040ca0:	00000000 	nop
            for byte in buf.iter_mut().rev() {
80040ca4:	8fa5003c 	lw	a1,60(sp)
80040ca8:	8fa100e4 	lw	at,228(sp)
80040cac:	afa10024 	sw	at,36(sp)
80040cb0:	afa10100 	sw	at,256(sp)
                let n = zero - (x % base); // Get the current place value.
80040cb4:	8fa10044 	lw	at,68(sp)
80040cb8:	afa10020 	sw	at,32(sp)
80040cbc:	8fa40040 	lw	a0,64(sp)
80040cc0:	3c01810a 	lui	at,0x810a
80040cc4:	2426ba6c 	addiu	a2,at,-17812
80040cc8:	0c012387 	jal	80048e1c <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Rem$GT$3rem17h4d9fcb1072ae4614E>
80040ccc:	00000000 	nop
80040cd0:	8fa40020 	lw	a0,32(sp)
80040cd4:	00402825 	move	a1,v0
80040cd8:	3c01810a 	lui	at,0x810a
80040cdc:	2426ba7c 	addiu	a2,at,-17796
80040ce0:	0c012302 	jal	80048c08 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9f0e833ee6c9c697E>
80040ce4:	00000000 	nop
80040ce8:	8fa5003c 	lw	a1,60(sp)
80040cec:	afa200e8 	sw	v0,232(sp)
                x = x / base; // Deaccumulate the number.
80040cf0:	8fa40040 	lw	a0,64(sp)
80040cf4:	3c01810a 	lui	at,0x810a
80040cf8:	2426ba8c 	addiu	a2,at,-17780
80040cfc:	0c012343 	jal	80048d0c <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Div$GT$3div17he4860b2e94c433bbE>
80040d00:	00000000 	nop
80040d04:	afa20040 	sw	v0,64(sp)
80040d08:	27a400e8 	addiu	a0,sp,232
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
80040d0c:	0c01248f 	jal	8004923c <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h3cd2e303bc7c4816E>
80040d10:	00000000 	nop
80040d14:	00402025 	move	a0,v0
80040d18:	0c01252b 	jal	800494ac <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE>
80040d1c:	00000000 	nop
80040d20:	8fa10024 	lw	at,36(sp)
80040d24:	afa10128 	sw	at,296(sp)
80040d28:	a3a2012f 	sb	v0,303(sp)
80040d2c:	a3a20131 	sb	v0,305(sp)
80040d30:	a3a20133 	sb	v0,307(sp)
        ManuallyDrop { value }
80040d34:	a3a20132 	sb	v0,306(sp)
    }
80040d38:	93a20132 	lbu	v0,306(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
80040d3c:	a3a20130 	sb	v0,304(sp)
    }
80040d40:	93a20130 	lbu	v0,304(sp)
        *self = MaybeUninit::new(val);
80040d44:	a0220000 	sb	v0,0(at)
80040d48:	afa10134 	sw	at,308(sp)
80040d4c:	afa10138 	sw	at,312(sp)
                curr -= 1;
80040d50:	8fa100c8 	lw	at,200(sp)
80040d54:	2422ffff 	addiu	v0,at,-1
80040d58:	afa20028 	sw	v0,40(sp)
80040d5c:	1020000d 	beqz	at,80040d94 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x2d0>
80040d60:	00000000 	nop
80040d64:	0801035b 	j	80040d6c <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x2a8>
80040d68:	00000000 	nop
80040d6c:	8fa10028 	lw	at,40(sp)
80040d70:	afa100c8 	sw	at,200(sp)
80040d74:	27a40040 	addiu	a0,sp,64
80040d78:	27a50044 	addiu	a1,sp,68
                if x == zero {
80040d7c:	0c0122bc 	jal	80048af0 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u32$GT$2eq17hc4809db554f420ceE>
80040d80:	00000000 	nop
80040d84:	1440ff9f 	bnez	v0,80040c04 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x140>
80040d88:	00000000 	nop
80040d8c:	080102f8 	j	80040be0 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x11c>
80040d90:	00000000 	nop
                curr -= 1;
80040d94:	3c01810a 	lui	at,0x810a
80040d98:	2424ba9c 	addiu	a0,at,-17764
80040d9c:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80040da0:	00000000 	nop
80040da4:	27a400cc 	addiu	a0,sp,204
            for byte in buf.iter_mut().rev() {
80040da8:	0c00f79f 	jal	8003de7c <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
80040dac:	00000000 	nop
80040db0:	afa200d4 	sw	v0,212(sp)
80040db4:	8fa100d4 	lw	at,212(sp)
80040db8:	1020ff92 	beqz	at,80040c04 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x140>
80040dbc:	00000000 	nop
80040dc0:	08010372 	j	80040dc8 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x304>
80040dc4:	00000000 	nop
80040dc8:	8fa5003c 	lw	a1,60(sp)
80040dcc:	8fa100d4 	lw	at,212(sp)
80040dd0:	afa10018 	sw	at,24(sp)
80040dd4:	afa10104 	sw	at,260(sp)
                let n = x % base; // Get the current place value.
80040dd8:	8fa40040 	lw	a0,64(sp)
80040ddc:	3c01810a 	lui	at,0x810a
80040de0:	2426baac 	addiu	a2,at,-17748
80040de4:	0c012387 	jal	80048e1c <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Rem$GT$3rem17h4d9fcb1072ae4614E>
80040de8:	00000000 	nop
80040dec:	8fa5003c 	lw	a1,60(sp)
80040df0:	afa200d8 	sw	v0,216(sp)
                x = x / base; // Deaccumulate the number.
80040df4:	8fa40040 	lw	a0,64(sp)
80040df8:	3c01810a 	lui	at,0x810a
80040dfc:	2426babc 	addiu	a2,at,-17732
80040e00:	0c012343 	jal	80048d0c <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Div$GT$3div17he4860b2e94c433bbE>
80040e04:	00000000 	nop
80040e08:	afa20040 	sw	v0,64(sp)
80040e0c:	27a400d8 	addiu	a0,sp,216
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
80040e10:	0c01248f 	jal	8004923c <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h3cd2e303bc7c4816E>
80040e14:	00000000 	nop
80040e18:	00402025 	move	a0,v0
80040e1c:	0c01252b 	jal	800494ac <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE>
80040e20:	00000000 	nop
80040e24:	8fa10018 	lw	at,24(sp)
80040e28:	afa1011c 	sw	at,284(sp)
80040e2c:	a3a20123 	sb	v0,291(sp)
80040e30:	a3a20125 	sb	v0,293(sp)
80040e34:	a3a20127 	sb	v0,295(sp)
        ManuallyDrop { value }
80040e38:	a3a20126 	sb	v0,294(sp)
    }
80040e3c:	93a20126 	lbu	v0,294(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
80040e40:	a3a20124 	sb	v0,292(sp)
    }
80040e44:	93a20124 	lbu	v0,292(sp)
        *self = MaybeUninit::new(val);
80040e48:	a0220000 	sb	v0,0(at)
80040e4c:	afa1013c 	sw	at,316(sp)
80040e50:	afa10140 	sw	at,320(sp)
                curr -= 1;
80040e54:	8fa100c8 	lw	at,200(sp)
80040e58:	2422ffff 	addiu	v0,at,-1
80040e5c:	afa2001c 	sw	v0,28(sp)
80040e60:	1020000d 	beqz	at,80040e98 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x3d4>
80040e64:	00000000 	nop
80040e68:	0801039c 	j	80040e70 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x3ac>
80040e6c:	00000000 	nop
80040e70:	8fa1001c 	lw	at,28(sp)
80040e74:	afa100c8 	sw	at,200(sp)
80040e78:	27a40040 	addiu	a0,sp,64
80040e7c:	27a50044 	addiu	a1,sp,68
                if x == zero {
80040e80:	0c0122bc 	jal	80048af0 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u32$GT$2eq17hc4809db554f420ceE>
80040e84:	00000000 	nop
80040e88:	1440ff5e 	bnez	v0,80040c04 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x140>
80040e8c:	00000000 	nop
80040e90:	08010369 	j	80040da4 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x2e0>
80040e94:	00000000 	nop
                curr -= 1;
80040e98:	3c01810a 	lui	at,0x810a
80040e9c:	2424bacc 	addiu	a0,at,-17716
80040ea0:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80040ea4:	00000000 	nop

80040ea8 <_ZN4core3fmt2rt12USIZE_MARKER28_$u7b$$u7b$closure$u7d$$u7d$17hf5206f4f02198d93E>:
// We primarily want to ensure that the function pointer at `USIZE_MARKER` has
// an address corresponding *only* to functions that also take `&usize` as their
// first argument. The read_volatile here ensures that we can safely ready out a
// usize from the passed reference and that this address does not point at a
// non-usize taking function.
static USIZE_MARKER: fn(&usize, &mut Formatter<'_>) -> Result = |ptr, _| {
80040ea8:	27bdffd8 	addiu	sp,sp,-40
80040eac:	afbf0024 	sw	ra,36(sp)
80040eb0:	afa50010 	sw	a1,16(sp)
80040eb4:	00800825 	move	at,a0
80040eb8:	8fa40010 	lw	a0,16(sp)
80040ebc:	afa10014 	sw	at,20(sp)
80040ec0:	afa40018 	sw	a0,24(sp)
80040ec4:	afa6001c 	sw	a2,28(sp)
    // SAFETY: ptr is a reference
    let _v: usize = unsafe { crate::ptr::read_volatile(ptr) };
80040ec8:	0c00f080 	jal	8003c200 <_ZN4core3ptr13read_volatile17hd45decbd46c08055E>
80040ecc:	00000000 	nop
80040ed0:	afa20020 	sw	v0,32(sp)
80040ed4:	080103b7 	j	80040edc <_ZN4core3fmt2rt12USIZE_MARKER28_$u7b$$u7b$closure$u7d$$u7d$17hf5206f4f02198d93E+0x34>
80040ed8:	00000000 	nop
    loop {}
80040edc:	080103b7 	j	80040edc <_ZN4core3fmt2rt12USIZE_MARKER28_$u7b$$u7b$closure$u7d$$u7d$17hf5206f4f02198d93E+0x34>
80040ee0:	00000000 	nop

80040ee4 <_ZN4core3fmt9Formatter3new17haddd14998f43875aE>:
    pub fn new(buf: &'a mut (dyn Write + 'a)) -> Formatter<'a> {
80040ee4:	27bdffe0 	addiu	sp,sp,-32
80040ee8:	00801025 	move	v0,a0
80040eec:	afa50018 	sw	a1,24(sp)
80040ef0:	afa6001c 	sw	a2,28(sp)
80040ef4:	24010003 	li	at,3
            align: rt::Alignment::Unknown,
80040ef8:	a3a10007 	sb	at,7(sp)
            width: None,
80040efc:	afa00008 	sw	zero,8(sp)
            precision: None,
80040f00:	afa00010 	sw	zero,16(sp)
        Formatter {
80040f04:	ac80001c 	sw	zero,28(a0)
80040f08:	24010020 	li	at,32
80040f0c:	ac810010 	sw	at,16(a0)
80040f10:	93a10007 	lbu	at,7(sp)
80040f14:	a0810020 	sb	at,32(a0)
80040f18:	8fa30008 	lw	v1,8(sp)
80040f1c:	8fa1000c 	lw	at,12(sp)
80040f20:	ac830000 	sw	v1,0(a0)
80040f24:	ac810004 	sw	at,4(a0)
80040f28:	8fa30010 	lw	v1,16(sp)
80040f2c:	8fa10014 	lw	at,20(sp)
80040f30:	ac830008 	sw	v1,8(a0)
80040f34:	ac81000c 	sw	at,12(a0)
80040f38:	ac850014 	sw	a1,20(a0)
80040f3c:	ac860018 	sw	a2,24(a0)
80040f40:	27bd0020 	addiu	sp,sp,32
    }
80040f44:	03e00008 	jr	ra
80040f48:	00000000 	nop

80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>:
    pub const fn new_const(pieces: &'a [&'static str]) -> Self {
80040f4c:	27bdffb0 	addiu	sp,sp,-80
80040f50:	afbf004c 	sw	ra,76(sp)
80040f54:	afa60014 	sw	a2,20(sp)
80040f58:	afa50018 	sw	a1,24(sp)
80040f5c:	afa4001c 	sw	a0,28(sp)
80040f60:	afa40020 	sw	a0,32(sp)
80040f64:	afa50044 	sw	a1,68(sp)
80040f68:	afa60048 	sw	a2,72(sp)
        if pieces.len() > 1 {
80040f6c:	2cc10002 	sltiu	at,a2,2
80040f70:	10200016 	beqz	at,80040fcc <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE+0x80>
80040f74:	00000000 	nop
80040f78:	080103e0 	j	80040f80 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE+0x34>
80040f7c:	00000000 	nop
        Arguments { pieces, fmt: None, args: &[] }
80040f80:	8fa20020 	lw	v0,32(sp)
80040f84:	8fa1001c 	lw	at,28(sp)
80040f88:	8fa30014 	lw	v1,20(sp)
80040f8c:	8fa40018 	lw	a0,24(sp)
80040f90:	afa0003c 	sw	zero,60(sp)
80040f94:	ac240000 	sw	a0,0(at)
80040f98:	ac230004 	sw	v1,4(at)
80040f9c:	8fa4003c 	lw	a0,60(sp)
80040fa0:	8fa30040 	lw	v1,64(sp)
80040fa4:	ac240010 	sw	a0,16(at)
80040fa8:	ac230014 	sw	v1,20(at)
80040fac:	3c03810a 	lui	v1,0x810a
80040fb0:	2463b0b8 	addiu	v1,v1,-20296
80040fb4:	ac230008 	sw	v1,8(at)
80040fb8:	ac20000c 	sw	zero,12(at)
    }
80040fbc:	8fbf004c 	lw	ra,76(sp)
80040fc0:	27bd0050 	addiu	sp,sp,80
80040fc4:	03e00008 	jr	ra
80040fc8:	00000000 	nop
            panic!("invalid args");
80040fcc:	3c01810a 	lui	at,0x810a
80040fd0:	2425bbc8 	addiu	a1,at,-17464
80040fd4:	27a40024 	addiu	a0,sp,36
80040fd8:	afa40010 	sw	a0,16(sp)
80040fdc:	24060001 	li	a2,1
80040fe0:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80040fe4:	00000000 	nop
80040fe8:	8fa40010 	lw	a0,16(sp)
80040fec:	3c01810a 	lui	at,0x810a
80040ff0:	2425bc40 	addiu	a1,at,-17344
80040ff4:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80040ff8:	00000000 	nop

80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>:
    pub fn new_v1(pieces: &'a [&'static str], args: &'a [rt::Argument<'a>]) -> Arguments<'a> {
80040ffc:	27bdff98 	addiu	sp,sp,-104
80041000:	afbf0064 	sw	ra,100(sp)
80041004:	afa7001c 	sw	a3,28(sp)
80041008:	afa60020 	sw	a2,32(sp)
8004100c:	afa50024 	sw	a1,36(sp)
80041010:	afa40028 	sw	a0,40(sp)
80041014:	afa4002c 	sw	a0,44(sp)
80041018:	8fa10078 	lw	at,120(sp)
8004101c:	afa10030 	sw	at,48(sp)
80041020:	afa50054 	sw	a1,84(sp)
80041024:	afa60058 	sw	a2,88(sp)
80041028:	afa7005c 	sw	a3,92(sp)
8004102c:	afa10060 	sw	at,96(sp)
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
80041030:	00c1082b 	sltu	at,a2,at
80041034:	1420000a 	bnez	at,80041060 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E+0x64>
80041038:	00000000 	nop
8004103c:	08010411 	j	80041044 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E+0x48>
80041040:	00000000 	nop
80041044:	8fa10030 	lw	at,48(sp)
80041048:	24210001 	addiu	at,at,1
8004104c:	afa10018 	sw	at,24(sp)
80041050:	10200016 	beqz	at,800410ac <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E+0xb0>
80041054:	00000000 	nop
80041058:	08010424 	j	80041090 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E+0x94>
8004105c:	00000000 	nop
            panic!("invalid args");
80041060:	3c01810a 	lui	at,0x810a
80041064:	2425bbc8 	addiu	a1,at,-17464
80041068:	27a40034 	addiu	a0,sp,52
8004106c:	afa40014 	sw	a0,20(sp)
80041070:	24060001 	li	a2,1
80041074:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80041078:	00000000 	nop
8004107c:	8fa40014 	lw	a0,20(sp)
80041080:	3c01810a 	lui	at,0x810a
80041084:	2425bc60 	addiu	a1,at,-17312
80041088:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8004108c:	00000000 	nop
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
80041090:	8fa10018 	lw	at,24(sp)
80041094:	8fa20020 	lw	v0,32(sp)
80041098:	0022082b 	sltu	at,at,v0
8004109c:	1420fff0 	bnez	at,80041060 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E+0x64>
800410a0:	00000000 	nop
800410a4:	0801042f 	j	800410bc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E+0xc0>
800410a8:	00000000 	nop
800410ac:	3c01810a 	lui	at,0x810a
800410b0:	2424bc50 	addiu	a0,at,-17328
800410b4:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800410b8:	00000000 	nop
        Arguments { pieces, fmt: None, args }
800410bc:	8fa2002c 	lw	v0,44(sp)
800410c0:	8fa10030 	lw	at,48(sp)
800410c4:	8fa30028 	lw	v1,40(sp)
800410c8:	8fa4001c 	lw	a0,28(sp)
800410cc:	8fa50020 	lw	a1,32(sp)
800410d0:	8fa60024 	lw	a2,36(sp)
800410d4:	afa0004c 	sw	zero,76(sp)
800410d8:	ac660000 	sw	a2,0(v1)
800410dc:	ac650004 	sw	a1,4(v1)
800410e0:	8fa6004c 	lw	a2,76(sp)
800410e4:	8fa50050 	lw	a1,80(sp)
800410e8:	ac660010 	sw	a2,16(v1)
800410ec:	ac650014 	sw	a1,20(v1)
800410f0:	ac640008 	sw	a0,8(v1)
800410f4:	ac61000c 	sw	at,12(v1)
    }
800410f8:	8fbf0064 	lw	ra,100(sp)
800410fc:	27bd0068 	addiu	sp,sp,104
80041100:	03e00008 	jr	ra
80041104:	00000000 	nop

80041108 <_ZN4core3fmt9Arguments16new_v1_formatted17h81eef672d0f8327cE>:
    pub fn new_v1_formatted(
80041108:	27bdffd8 	addiu	sp,sp,-40
8004110c:	00801025 	move	v0,a0
80041110:	8fa30040 	lw	v1,64(sp)
80041114:	8fa8003c 	lw	t0,60(sp)
80041118:	8fa10038 	lw	at,56(sp)
        _unsafe_arg: rt::UnsafeArg,
8004111c:	afa5000c 	sw	a1,12(sp)
80041120:	afa60010 	sw	a2,16(sp)
80041124:	afa70014 	sw	a3,20(sp)
80041128:	afa10018 	sw	at,24(sp)
8004112c:	afa8001c 	sw	t0,28(sp)
80041130:	afa30020 	sw	v1,32(sp)
        Arguments { pieces, fmt: Some(fmt), args }
80041134:	afa80004 	sw	t0,4(sp)
80041138:	afa30008 	sw	v1,8(sp)
8004113c:	ac850000 	sw	a1,0(a0)
80041140:	ac860004 	sw	a2,4(a0)
80041144:	8fa50004 	lw	a1,4(sp)
80041148:	8fa30008 	lw	v1,8(sp)
8004114c:	ac850010 	sw	a1,16(a0)
80041150:	ac830014 	sw	v1,20(a0)
80041154:	ac870008 	sw	a3,8(a0)
80041158:	ac81000c 	sw	at,12(a0)
8004115c:	27bd0028 	addiu	sp,sp,40
    }
80041160:	03e00008 	jr	ra
80041164:	00000000 	nop

80041168 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E>:
    pub const fn as_str(&self) -> Option<&'static str> {
80041168:	27bdffe0 	addiu	sp,sp,-32
8004116c:	00800825 	move	at,a0
80041170:	afa10018 	sw	at,24(sp)
        match (self.pieces, self.args) {
80041174:	8c240000 	lw	a0,0(at)
80041178:	8c230004 	lw	v1,4(at)
8004117c:	8c220008 	lw	v0,8(at)
80041180:	8c21000c 	lw	at,12(at)
80041184:	afa40008 	sw	a0,8(sp)
80041188:	afa3000c 	sw	v1,12(sp)
8004118c:	afa20010 	sw	v0,16(sp)
80041190:	afa10014 	sw	at,20(sp)
            ([], []) => Some(""),
80041194:	8fa1000c 	lw	at,12(sp)
80041198:	10200009 	beqz	at,800411c0 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0x58>
8004119c:	00000000 	nop
800411a0:	0801046a 	j	800411a8 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0x40>
800411a4:	00000000 	nop
            ([s], []) => Some(s),
800411a8:	8fa1000c 	lw	at,12(sp)
800411ac:	24020001 	li	v0,1
800411b0:	1022000b 	beq	at,v0,800411e0 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0x78>
800411b4:	00000000 	nop
800411b8:	08010475 	j	800411d4 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0x6c>
800411bc:	00000000 	nop
            ([], []) => Some(""),
800411c0:	8fa10014 	lw	at,20(sp)
800411c4:	10200018 	beqz	at,80041228 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0xc0>
800411c8:	00000000 	nop
800411cc:	08010475 	j	800411d4 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0x6c>
800411d0:	00000000 	nop
            _ => None,
800411d4:	afa00000 	sw	zero,0(sp)
800411d8:	08010485 	j	80041214 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0xac>
800411dc:	00000000 	nop
            ([s], []) => Some(s),
800411e0:	8fa10014 	lw	at,20(sp)
800411e4:	1420fffb 	bnez	at,800411d4 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0x6c>
800411e8:	00000000 	nop
800411ec:	0801047d 	j	800411f4 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0x8c>
800411f0:	00000000 	nop
800411f4:	8fa10008 	lw	at,8(sp)
800411f8:	afa1001c 	sw	at,28(sp)
800411fc:	8c220000 	lw	v0,0(at)
80041200:	8c210004 	lw	at,4(at)
80041204:	afa20000 	sw	v0,0(sp)
80041208:	afa10004 	sw	at,4(sp)
8004120c:	08010485 	j	80041214 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0xac>
80041210:	00000000 	nop
    }
80041214:	8fa20000 	lw	v0,0(sp)
80041218:	8fa30004 	lw	v1,4(sp)
8004121c:	27bd0020 	addiu	sp,sp,32
80041220:	03e00008 	jr	ra
80041224:	00000000 	nop
            ([], []) => Some(""),
80041228:	3c01810a 	lui	at,0x810a
8004122c:	2421b0b8 	addiu	at,at,-20296
80041230:	afa10000 	sw	at,0(sp)
80041234:	afa00004 	sw	zero,4(sp)
80041238:	08010485 	j	80041214 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0xac>
8004123c:	00000000 	nop

80041240 <_ZN4core3fmt9Arguments23as_statically_known_str17hd9501a45a7712a76E>:
    fn as_statically_known_str(&self) -> Option<&'static str> {
80041240:	27bdffd0 	addiu	sp,sp,-48
80041244:	afbf002c 	sw	ra,44(sp)
80041248:	afa40024 	sw	a0,36(sp)
        let s = self.as_str();
8004124c:	0c01045a 	jal	80041168 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E>
80041250:	00000000 	nop
80041254:	afa2001c 	sw	v0,28(sp)
80041258:	afa30020 	sw	v1,32(sp)
8004125c:	27a4001c 	addiu	a0,sp,28
        if core::intrinsics::is_val_statically_known(s.is_some()) { s } else { None }
80041260:	0c00f933 	jal	8003e4cc <_ZN4core6option15Option$LT$T$GT$7is_some17hf03c679c9733e5acE>
80041264:	00000000 	nop
80041268:	24010000 	li	at,0
8004126c:	a3a0002b 	sb	zero,43(sp)
80041270:	93a1002b 	lbu	at,43(sp)
80041274:	30210001 	andi	at,at,0x1
80041278:	14200006 	bnez	at,80041294 <_ZN4core3fmt9Arguments23as_statically_known_str17hd9501a45a7712a76E+0x54>
8004127c:	00000000 	nop
80041280:	080104a2 	j	80041288 <_ZN4core3fmt9Arguments23as_statically_known_str17hd9501a45a7712a76E+0x48>
80041284:	00000000 	nop
80041288:	afa00014 	sw	zero,20(sp)
8004128c:	080104ab 	j	800412ac <_ZN4core3fmt9Arguments23as_statically_known_str17hd9501a45a7712a76E+0x6c>
80041290:	00000000 	nop
80041294:	8fa2001c 	lw	v0,28(sp)
80041298:	8fa10020 	lw	at,32(sp)
8004129c:	afa20014 	sw	v0,20(sp)
800412a0:	afa10018 	sw	at,24(sp)
800412a4:	080104ab 	j	800412ac <_ZN4core3fmt9Arguments23as_statically_known_str17hd9501a45a7712a76E+0x6c>
800412a8:	00000000 	nop
    }
800412ac:	8fa20014 	lw	v0,20(sp)
800412b0:	8fa30018 	lw	v1,24(sp)
800412b4:	8fbf002c 	lw	ra,44(sp)
800412b8:	27bd0030 	addiu	sp,sp,48
800412bc:	03e00008 	jr	ra
800412c0:	00000000 	nop

800412c4 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h21f7f40895f3b40cE>:
    fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {
800412c4:	27bdffc8 	addiu	sp,sp,-56
800412c8:	afbf0034 	sw	ra,52(sp)
800412cc:	00800825 	move	at,a0
800412d0:	afa1002c 	sw	at,44(sp)
800412d4:	afa50030 	sw	a1,48(sp)
        write(fmt.buf, *self)
800412d8:	8ca40014 	lw	a0,20(a1)
800412dc:	8ca50018 	lw	a1,24(a1)
800412e0:	8c220014 	lw	v0,20(at)
800412e4:	afa20028 	sw	v0,40(sp)
800412e8:	8c220010 	lw	v0,16(at)
800412ec:	afa20024 	sw	v0,36(sp)
800412f0:	8c22000c 	lw	v0,12(at)
800412f4:	afa20020 	sw	v0,32(sp)
800412f8:	8c220008 	lw	v0,8(at)
800412fc:	afa2001c 	sw	v0,28(sp)
80041300:	8c220004 	lw	v0,4(at)
80041304:	afa20018 	sw	v0,24(sp)
80041308:	8c210000 	lw	at,0(at)
8004130c:	afa10014 	sw	at,20(sp)
80041310:	27a60014 	addiu	a2,sp,20
80041314:	0c0104cb 	jal	8004132c <_ZN4core3fmt5write17h6036e54969122141E>
80041318:	00000000 	nop
    }
8004131c:	8fbf0034 	lw	ra,52(sp)
80041320:	27bd0038 	addiu	sp,sp,56
80041324:	03e00008 	jr	ra
80041328:	00000000 	nop

8004132c <_ZN4core3fmt5write17h6036e54969122141E>:
pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {
8004132c:	27bdfef8 	addiu	sp,sp,-264
80041330:	afbf0104 	sw	ra,260(sp)
80041334:	afa60030 	sw	a2,48(sp)
80041338:	00a03025 	move	a2,a1
8004133c:	00802825 	move	a1,a0
        formatter.buf.write_str(*piece)?;
80041340:	afa500d0 	sw	a1,208(sp)
80041344:	afa600d4 	sw	a2,212(sp)
80041348:	27a40040 	addiu	a0,sp,64
    let mut formatter = Formatter::new(output);
8004134c:	0c0103b9 	jal	80040ee4 <_ZN4core3fmt9Formatter3new17haddd14998f43875aE>
80041350:	00000000 	nop
80041354:	8fa60030 	lw	a2,48(sp)
    let mut idx = 0;
80041358:	afa00064 	sw	zero,100(sp)
    match args.fmt {
8004135c:	8cc10010 	lw	at,16(a2)
80041360:	1420001a 	bnez	at,800413cc <_ZN4core3fmt5write17h6036e54969122141E+0xa0>
80041364:	00000000 	nop
80041368:	080104dc 	j	80041370 <_ZN4core3fmt5write17h6036e54969122141E+0x44>
8004136c:	00000000 	nop
            for (i, arg) in args.args.iter().enumerate() {
80041370:	8fa10030 	lw	at,48(sp)
80041374:	8c240008 	lw	a0,8(at)
80041378:	8c25000c 	lw	a1,12(at)
8004137c:	0c011237 	jal	800448dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hc220d605b982b825E>
80041380:	00000000 	nop
80041384:	00402825 	move	a1,v0
80041388:	00603025 	move	a2,v1
8004138c:	27a40074 	addiu	a0,sp,116
80041390:	afa4002c 	sw	a0,44(sp)
80041394:	0c00f8de 	jal	8003e378 <_ZN4core4iter6traits8iterator8Iterator9enumerate17hc8825050a5fd6479E>
80041398:	00000000 	nop
8004139c:	8fa5002c 	lw	a1,44(sp)
800413a0:	27a40068 	addiu	a0,sp,104
800413a4:	0c00f837 	jal	8003e0dc <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc1247a7b3b77f09fE>
800413a8:	00000000 	nop
800413ac:	8fa10070 	lw	at,112(sp)
800413b0:	afa10088 	sw	at,136(sp)
800413b4:	8fa1006c 	lw	at,108(sp)
800413b8:	afa10084 	sw	at,132(sp)
800413bc:	8fa10068 	lw	at,104(sp)
800413c0:	afa10080 	sw	at,128(sp)
800413c4:	0801050c 	j	80041430 <_ZN4core3fmt5write17h6036e54969122141E+0x104>
800413c8:	00000000 	nop
        Some(fmt) => {
800413cc:	8fa10030 	lw	at,48(sp)
800413d0:	8c240010 	lw	a0,16(at)
800413d4:	8c250014 	lw	a1,20(at)
800413d8:	afa400e4 	sw	a0,228(sp)
800413dc:	afa500e8 	sw	a1,232(sp)
            for (i, arg) in fmt.iter().enumerate() {
800413e0:	0c011223 	jal	8004488c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h5bb4b3109a0ec868E>
800413e4:	00000000 	nop
800413e8:	00402825 	move	a1,v0
800413ec:	00603025 	move	a2,v1
800413f0:	27a400a4 	addiu	a0,sp,164
800413f4:	afa40028 	sw	a0,40(sp)
800413f8:	0c00f8d1 	jal	8003e344 <_ZN4core4iter6traits8iterator8Iterator9enumerate17h177bb510e964e1c9E>
800413fc:	00000000 	nop
80041400:	8fa50028 	lw	a1,40(sp)
80041404:	27a40098 	addiu	a0,sp,152
80041408:	0c00f81c 	jal	8003e070 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7649a48ed6f3f9b5E>
8004140c:	00000000 	nop
80041410:	8fa100a0 	lw	at,160(sp)
80041414:	afa100b8 	sw	at,184(sp)
80041418:	8fa1009c 	lw	at,156(sp)
8004141c:	afa100b4 	sw	at,180(sp)
80041420:	8fa10098 	lw	at,152(sp)
80041424:	afa100b0 	sw	at,176(sp)
80041428:	0801057e 	j	800415f8 <_ZN4core3fmt5write17h6036e54969122141E+0x2cc>
8004142c:	00000000 	nop
80041430:	27a40080 	addiu	a0,sp,128
            for (i, arg) in args.args.iter().enumerate() {
80041434:	0c00f6f4 	jal	8003dbd0 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE>
80041438:	00000000 	nop
8004143c:	afa2008c 	sw	v0,140(sp)
80041440:	afa30090 	sw	v1,144(sp)
80041444:	8fa10090 	lw	at,144(sp)
80041448:	1420000f 	bnez	at,80041488 <_ZN4core3fmt5write17h6036e54969122141E+0x15c>
8004144c:	00000000 	nop
80041450:	08010516 	j	80041458 <_ZN4core3fmt5write17h6036e54969122141E+0x12c>
80041454:	00000000 	nop
    if let Some(piece) = args.pieces.get(idx) {
80041458:	8fa10030 	lw	at,48(sp)
8004145c:	8c240000 	lw	a0,0(at)
80041460:	8c250004 	lw	a1,4(at)
80041464:	8fa60064 	lw	a2,100(sp)
80041468:	0c0111ce 	jal	80044738 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h437f19a6e4d4a724E>
8004146c:	00000000 	nop
80041470:	afa200c8 	sw	v0,200(sp)
80041474:	8fa100c8 	lw	at,200(sp)
80041478:	1420007e 	bnez	at,80041674 <_ZN4core3fmt5write17h6036e54969122141E+0x348>
8004147c:	00000000 	nop
80041480:	080105b0 	j	800416c0 <_ZN4core3fmt5write17h6036e54969122141E+0x394>
80041484:	00000000 	nop
            for (i, arg) in args.args.iter().enumerate() {
80041488:	8fa10030 	lw	at,48(sp)
8004148c:	8fa6008c 	lw	a2,140(sp)
80041490:	afa600d8 	sw	a2,216(sp)
80041494:	8fa20090 	lw	v0,144(sp)
80041498:	afa20020 	sw	v0,32(sp)
8004149c:	afa200dc 	sw	v0,220(sp)
                let piece = unsafe { args.pieces.get_unchecked(i) };
800414a0:	8c240000 	lw	a0,0(at)
800414a4:	8c250004 	lw	a1,4(at)
800414a8:	0c0111ec 	jal	800447b0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17h2440dac3f0c7bee0E>
800414ac:	00000000 	nop
800414b0:	00400825 	move	at,v0
800414b4:	afa10024 	sw	at,36(sp)
800414b8:	afa200e0 	sw	v0,224(sp)
                if !piece.is_empty() {
800414bc:	8c440000 	lw	a0,0(v0)
800414c0:	8c450004 	lw	a1,4(v0)
800414c4:	0c011c03 	jal	8004700c <_ZN4core3str21_$LT$impl$u20$str$GT$8is_empty17h5474706a12608b3eE>
800414c8:	00000000 	nop
800414cc:	14400015 	bnez	v0,80041524 <_ZN4core3fmt5write17h6036e54969122141E+0x1f8>
800414d0:	00000000 	nop
800414d4:	08010537 	j	800414dc <_ZN4core3fmt5write17h6036e54969122141E+0x1b0>
800414d8:	00000000 	nop
                    formatter.buf.write_str(*piece)?;
800414dc:	8fa20024 	lw	v0,36(sp)
800414e0:	8fa40054 	lw	a0,84(sp)
800414e4:	8fa10058 	lw	at,88(sp)
800414e8:	8c450000 	lw	a1,0(v0)
800414ec:	8c460004 	lw	a2,4(v0)
800414f0:	8c39000c 	lw	t9,12(at)
800414f4:	0320f809 	jalr	t9
800414f8:	00000000 	nop
800414fc:	00402025 	move	a0,v0
80041500:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80041504:	00000000 	nop
80041508:	a3a20096 	sb	v0,150(sp)
8004150c:	93a10096 	lbu	at,150(sp)
80041510:	30210001 	andi	at,at,0x1
80041514:	14200015 	bnez	at,8004156c <_ZN4core3fmt5write17h6036e54969122141E+0x240>
80041518:	00000000 	nop
8004151c:	08010549 	j	80041524 <_ZN4core3fmt5write17h6036e54969122141E+0x1f8>
80041520:	00000000 	nop
80041524:	8fa10020 	lw	at,32(sp)
80041528:	afa100fc 	sw	at,252(sp)
8004152c:	27a50040 	addiu	a1,sp,64
80041530:	afa50100 	sw	a1,256(sp)
        (self.formatter)(self.value, f)
80041534:	8c390004 	lw	t9,4(at)
80041538:	8c240000 	lw	a0,0(at)
8004153c:	0320f809 	jalr	t9
80041540:	00000000 	nop
80041544:	00402025 	move	a0,v0
                arg.fmt(&mut formatter)?;
80041548:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8004154c:	00000000 	nop
80041550:	a3a20097 	sb	v0,151(sp)
80041554:	93a10097 	lbu	at,151(sp)
80041558:	30210001 	andi	at,at,0x1
8004155c:	10200010 	beqz	at,800415a0 <_ZN4core3fmt5write17h6036e54969122141E+0x274>
80041560:	00000000 	nop
80041564:	0801056f 	j	800415bc <_ZN4core3fmt5write17h6036e54969122141E+0x290>
80041568:	00000000 	nop
                    formatter.buf.write_str(*piece)?;
8004156c:	3c01810a 	lui	at,0x810a
80041570:	2424bc70 	addiu	a0,at,-17296
80041574:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80041578:	00000000 	nop
8004157c:	a3a2003f 	sb	v0,63(sp)
80041580:	08010562 	j	80041588 <_ZN4core3fmt5write17h6036e54969122141E+0x25c>
80041584:	00000000 	nop
}
80041588:	93a1003f 	lbu	at,63(sp)
8004158c:	30220001 	andi	v0,at,0x1
80041590:	8fbf0104 	lw	ra,260(sp)
80041594:	27bd0108 	addiu	sp,sp,264
80041598:	03e00008 	jr	ra
8004159c:	00000000 	nop
                idx += 1;
800415a0:	8fa10064 	lw	at,100(sp)
800415a4:	24210001 	addiu	at,at,1
800415a8:	afa1001c 	sw	at,28(sp)
800415ac:	1020000e 	beqz	at,800415e8 <_ZN4core3fmt5write17h6036e54969122141E+0x2bc>
800415b0:	00000000 	nop
800415b4:	08010576 	j	800415d8 <_ZN4core3fmt5write17h6036e54969122141E+0x2ac>
800415b8:	00000000 	nop
                arg.fmt(&mut formatter)?;
800415bc:	3c01810a 	lui	at,0x810a
800415c0:	2424bc90 	addiu	a0,at,-17264
800415c4:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
800415c8:	00000000 	nop
800415cc:	a3a2003f 	sb	v0,63(sp)
800415d0:	08010562 	j	80041588 <_ZN4core3fmt5write17h6036e54969122141E+0x25c>
800415d4:	00000000 	nop
                idx += 1;
800415d8:	8fa1001c 	lw	at,28(sp)
800415dc:	afa10064 	sw	at,100(sp)
            for (i, arg) in args.args.iter().enumerate() {
800415e0:	0801050c 	j	80041430 <_ZN4core3fmt5write17h6036e54969122141E+0x104>
800415e4:	00000000 	nop
                idx += 1;
800415e8:	3c01810a 	lui	at,0x810a
800415ec:	2424bc80 	addiu	a0,at,-17280
800415f0:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800415f4:	00000000 	nop
800415f8:	27a400b0 	addiu	a0,sp,176
            for (i, arg) in fmt.iter().enumerate() {
800415fc:	0c00f6ba 	jal	8003dae8 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E>
80041600:	00000000 	nop
80041604:	afa200bc 	sw	v0,188(sp)
80041608:	afa300c0 	sw	v1,192(sp)
8004160c:	8fa100c0 	lw	at,192(sp)
80041610:	1020ff91 	beqz	at,80041458 <_ZN4core3fmt5write17h6036e54969122141E+0x12c>
80041614:	00000000 	nop
80041618:	08010588 	j	80041620 <_ZN4core3fmt5write17h6036e54969122141E+0x2f4>
8004161c:	00000000 	nop
80041620:	8fa10030 	lw	at,48(sp)
80041624:	8fa600bc 	lw	a2,188(sp)
80041628:	afa600f0 	sw	a2,240(sp)
8004162c:	8fa200c0 	lw	v0,192(sp)
80041630:	afa20014 	sw	v0,20(sp)
80041634:	afa200f4 	sw	v0,244(sp)
                let piece = unsafe { args.pieces.get_unchecked(i) };
80041638:	8c240000 	lw	a0,0(at)
8004163c:	8c250004 	lw	a1,4(at)
80041640:	0c0111ec 	jal	800447b0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17h2440dac3f0c7bee0E>
80041644:	00000000 	nop
80041648:	00400825 	move	at,v0
8004164c:	afa10018 	sw	at,24(sp)
80041650:	afa200f8 	sw	v0,248(sp)
                if !piece.is_empty() {
80041654:	8c440000 	lw	a0,0(v0)
80041658:	8c450004 	lw	a1,4(v0)
8004165c:	0c011c03 	jal	8004700c <_ZN4core3str21_$LT$impl$u20$str$GT$8is_empty17h5474706a12608b3eE>
80041660:	00000000 	nop
80041664:	14400033 	bnez	v0,80041734 <_ZN4core3fmt5write17h6036e54969122141E+0x408>
80041668:	00000000 	nop
8004166c:	080105bb 	j	800416ec <_ZN4core3fmt5write17h6036e54969122141E+0x3c0>
80041670:	00000000 	nop
    if let Some(piece) = args.pieces.get(idx) {
80041674:	8fa200c8 	lw	v0,200(sp)
80041678:	afa200ec 	sw	v0,236(sp)
        formatter.buf.write_str(*piece)?;
8004167c:	8fa40054 	lw	a0,84(sp)
80041680:	8fa10058 	lw	at,88(sp)
80041684:	8c450000 	lw	a1,0(v0)
80041688:	8c460004 	lw	a2,4(v0)
8004168c:	8c39000c 	lw	t9,12(at)
80041690:	0320f809 	jalr	t9
80041694:	00000000 	nop
80041698:	00402025 	move	a0,v0
8004169c:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
800416a0:	00000000 	nop
800416a4:	a3a200cf 	sb	v0,207(sp)
800416a8:	93a100cf 	lbu	at,207(sp)
800416ac:	30210001 	andi	at,at,0x1
800416b0:	14200007 	bnez	at,800416d0 <_ZN4core3fmt5write17h6036e54969122141E+0x3a4>
800416b4:	00000000 	nop
800416b8:	080105b0 	j	800416c0 <_ZN4core3fmt5write17h6036e54969122141E+0x394>
800416bc:	00000000 	nop
800416c0:	24010000 	li	at,0
    Ok(())
800416c4:	a3a0003f 	sb	zero,63(sp)
}
800416c8:	08010562 	j	80041588 <_ZN4core3fmt5write17h6036e54969122141E+0x25c>
800416cc:	00000000 	nop
        formatter.buf.write_str(*piece)?;
800416d0:	3c01810a 	lui	at,0x810a
800416d4:	2424bca0 	addiu	a0,at,-17248
800416d8:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
800416dc:	00000000 	nop
800416e0:	a3a2003f 	sb	v0,63(sp)
800416e4:	08010562 	j	80041588 <_ZN4core3fmt5write17h6036e54969122141E+0x25c>
800416e8:	00000000 	nop
                    formatter.buf.write_str(*piece)?;
800416ec:	8fa20018 	lw	v0,24(sp)
800416f0:	8fa40054 	lw	a0,84(sp)
800416f4:	8fa10058 	lw	at,88(sp)
800416f8:	8c450000 	lw	a1,0(v0)
800416fc:	8c460004 	lw	a2,4(v0)
80041700:	8c39000c 	lw	t9,12(at)
80041704:	0320f809 	jalr	t9
80041708:	00000000 	nop
8004170c:	00402025 	move	a0,v0
80041710:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80041714:	00000000 	nop
80041718:	a3a200c6 	sb	v0,198(sp)
8004171c:	93a100c6 	lbu	at,198(sp)
80041720:	30210001 	andi	at,at,0x1
80041724:	14200014 	bnez	at,80041778 <_ZN4core3fmt5write17h6036e54969122141E+0x44c>
80041728:	00000000 	nop
8004172c:	080105cd 	j	80041734 <_ZN4core3fmt5write17h6036e54969122141E+0x408>
80041730:	00000000 	nop
                unsafe { run(&mut formatter, arg, args.args) }?;
80041734:	8fa50014 	lw	a1,20(sp)
80041738:	8fa10030 	lw	at,48(sp)
8004173c:	8c260008 	lw	a2,8(at)
80041740:	8c27000c 	lw	a3,12(at)
80041744:	27a40040 	addiu	a0,sp,64
80041748:	0c0105fb 	jal	800417ec <_ZN4core3fmt3run17h0fd8f215a23abf7bE>
8004174c:	00000000 	nop
80041750:	00402025 	move	a0,v0
80041754:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80041758:	00000000 	nop
8004175c:	a3a200c7 	sb	v0,199(sp)
80041760:	93a100c7 	lbu	at,199(sp)
80041764:	30210001 	andi	at,at,0x1
80041768:	1020000a 	beqz	at,80041794 <_ZN4core3fmt5write17h6036e54969122141E+0x468>
8004176c:	00000000 	nop
80041770:	080105ec 	j	800417b0 <_ZN4core3fmt5write17h6036e54969122141E+0x484>
80041774:	00000000 	nop
                    formatter.buf.write_str(*piece)?;
80041778:	3c01810a 	lui	at,0x810a
8004177c:	2424bcb0 	addiu	a0,at,-17232
80041780:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80041784:	00000000 	nop
80041788:	a3a2003f 	sb	v0,63(sp)
8004178c:	08010562 	j	80041588 <_ZN4core3fmt5write17h6036e54969122141E+0x25c>
80041790:	00000000 	nop
                idx += 1;
80041794:	8fa10064 	lw	at,100(sp)
80041798:	24210001 	addiu	at,at,1
8004179c:	afa10010 	sw	at,16(sp)
800417a0:	1020000e 	beqz	at,800417dc <_ZN4core3fmt5write17h6036e54969122141E+0x4b0>
800417a4:	00000000 	nop
800417a8:	080105f3 	j	800417cc <_ZN4core3fmt5write17h6036e54969122141E+0x4a0>
800417ac:	00000000 	nop
                unsafe { run(&mut formatter, arg, args.args) }?;
800417b0:	3c01810a 	lui	at,0x810a
800417b4:	2424bcd0 	addiu	a0,at,-17200
800417b8:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
800417bc:	00000000 	nop
800417c0:	a3a2003f 	sb	v0,63(sp)
800417c4:	08010562 	j	80041588 <_ZN4core3fmt5write17h6036e54969122141E+0x25c>
800417c8:	00000000 	nop
                idx += 1;
800417cc:	8fa10010 	lw	at,16(sp)
800417d0:	afa10064 	sw	at,100(sp)
            for (i, arg) in fmt.iter().enumerate() {
800417d4:	0801057e 	j	800415f8 <_ZN4core3fmt5write17h6036e54969122141E+0x2cc>
800417d8:	00000000 	nop
                idx += 1;
800417dc:	3c01810a 	lui	at,0x810a
800417e0:	2424bcc0 	addiu	a0,at,-17216
800417e4:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800417e8:	00000000 	nop

800417ec <_ZN4core3fmt3run17h0fd8f215a23abf7bE>:
unsafe fn run(fmt: &mut Formatter<'_>, arg: &rt::Placeholder, args: &[rt::Argument<'_>]) -> Result {
800417ec:	27bdffc0 	addiu	sp,sp,-64
800417f0:	afbf003c 	sw	ra,60(sp)
800417f4:	afa70014 	sw	a3,20(sp)
800417f8:	afa60010 	sw	a2,16(sp)
800417fc:	00a00825 	move	at,a1
80041800:	8fa50014 	lw	a1,20(sp)
80041804:	afa10018 	sw	at,24(sp)
80041808:	00801825 	move	v1,a0
8004180c:	8fa40010 	lw	a0,16(sp)
80041810:	afa3001c 	sw	v1,28(sp)
80041814:	afa30020 	sw	v1,32(sp)
80041818:	afa10024 	sw	at,36(sp)
8004181c:	afa40028 	sw	a0,40(sp)
80041820:	afa5002c 	sw	a1,44(sp)
    fmt.fill = arg.fill;
80041824:	8c220010 	lw	v0,16(at)
80041828:	ac620010 	sw	v0,16(v1)
    fmt.align = arg.align;
8004182c:	9022001c 	lbu	v0,28(at)
80041830:	a0620020 	sb	v0,32(v1)
    fmt.flags = arg.flags;
80041834:	8c220018 	lw	v0,24(at)
80041838:	ac62001c 	sw	v0,28(v1)
        fmt.width = getcount(args, &arg.width);
8004183c:	24260008 	addiu	a2,at,8
80041840:	0c010640 	jal	80041900 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E>
80041844:	00000000 	nop
80041848:	8fa40010 	lw	a0,16(sp)
8004184c:	8fa50014 	lw	a1,20(sp)
80041850:	8fa60018 	lw	a2,24(sp)
80041854:	8fa1001c 	lw	at,28(sp)
80041858:	ac220000 	sw	v0,0(at)
8004185c:	ac230004 	sw	v1,4(at)
        fmt.precision = getcount(args, &arg.precision);
80041860:	0c010640 	jal	80041900 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E>
80041864:	00000000 	nop
80041868:	8fa4001c 	lw	a0,28(sp)
8004186c:	ac820008 	sw	v0,8(a0)
80041870:	ac83000c 	sw	v1,12(a0)
    debug_assert!(arg.position < args.len());
80041874:	0801061f 	j	8004187c <_ZN4core3fmt3run17h0fd8f215a23abf7bE+0x90>
80041878:	00000000 	nop
8004187c:	8fa20014 	lw	v0,20(sp)
80041880:	8fa10018 	lw	at,24(sp)
80041884:	8c210014 	lw	at,20(at)
80041888:	0022082b 	sltu	at,at,v0
8004188c:	1420000a 	bnez	at,800418b8 <_ZN4core3fmt3run17h0fd8f215a23abf7bE+0xcc>
80041890:	00000000 	nop
80041894:	08010627 	j	8004189c <_ZN4core3fmt3run17h0fd8f215a23abf7bE+0xb0>
80041898:	00000000 	nop
8004189c:	3c01810a 	lui	at,0x810a
800418a0:	2424bce0 	addiu	a0,at,-17184
800418a4:	3c01810a 	lui	at,0x810a
800418a8:	2426bd0c 	addiu	a2,at,-17140
800418ac:	2405002b 	li	a1,43
800418b0:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
800418b4:	00000000 	nop
    let value = unsafe { args.get_unchecked(arg.position) };
800418b8:	8fa50014 	lw	a1,20(sp)
800418bc:	8fa40010 	lw	a0,16(sp)
800418c0:	8fa10018 	lw	at,24(sp)
800418c4:	8c260014 	lw	a2,20(at)
800418c8:	0c0111fb 	jal	800447ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17h6d5ffdb6f0126765E>
800418cc:	00000000 	nop
800418d0:	8fa5001c 	lw	a1,28(sp)
800418d4:	afa20030 	sw	v0,48(sp)
800418d8:	afa20034 	sw	v0,52(sp)
800418dc:	afa50038 	sw	a1,56(sp)
800418e0:	8c590004 	lw	t9,4(v0)
800418e4:	8c440000 	lw	a0,0(v0)
800418e8:	0320f809 	jalr	t9
800418ec:	00000000 	nop
}
800418f0:	8fbf003c 	lw	ra,60(sp)
800418f4:	27bd0040 	addiu	sp,sp,64
800418f8:	03e00008 	jr	ra
800418fc:	00000000 	nop

80041900 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E>:
unsafe fn getcount(args: &[rt::Argument<'_>], cnt: &rt::Count) -> Option<usize> {
80041900:	27bdffa8 	addiu	sp,sp,-88
80041904:	afbf0054 	sw	ra,84(sp)
80041908:	afa6001c 	sw	a2,28(sp)
8004190c:	afa50020 	sw	a1,32(sp)
80041910:	afa40024 	sw	a0,36(sp)
80041914:	afa40034 	sw	a0,52(sp)
80041918:	afa50038 	sw	a1,56(sp)
8004191c:	afa6003c 	sw	a2,60(sp)
    match *cnt {
80041920:	8cc10000 	lw	at,0(a2)
80041924:	afa10028 	sw	at,40(sp)
80041928:	1020000c 	beqz	at,8004195c <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x5c>
8004192c:	00000000 	nop
80041930:	0801064e 	j	80041938 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x38>
80041934:	00000000 	nop
80041938:	8fa10028 	lw	at,40(sp)
8004193c:	24020001 	li	v0,1
80041940:	1022000e 	beq	at,v0,8004197c <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x7c>
80041944:	00000000 	nop
80041948:	08010654 	j	80041950 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x50>
8004194c:	00000000 	nop
80041950:	08010665 	j	80041994 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x94>
80041954:	00000000 	nop
80041958:	0000000d 	break
        rt::Count::Is(n) => Some(n),
8004195c:	8fa1001c 	lw	at,28(sp)
80041960:	8c210004 	lw	at,4(at)
80041964:	afa10040 	sw	at,64(sp)
80041968:	afa10030 	sw	at,48(sp)
8004196c:	24010001 	li	at,1
80041970:	afa1002c 	sw	at,44(sp)
80041974:	08010668 	j	800419a0 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0xa0>
80041978:	00000000 	nop
        rt::Count::Param(i) => {
8004197c:	8fa1001c 	lw	at,28(sp)
80041980:	8c210004 	lw	at,4(at)
80041984:	afa10018 	sw	at,24(sp)
80041988:	afa10044 	sw	at,68(sp)
            debug_assert!(i < args.len());
8004198c:	0801066e 	j	800419b8 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0xb8>
80041990:	00000000 	nop
        rt::Count::Implied => None,
80041994:	afa0002c 	sw	zero,44(sp)
80041998:	08010668 	j	800419a0 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0xa0>
8004199c:	00000000 	nop
}
800419a0:	8fa2002c 	lw	v0,44(sp)
800419a4:	8fa30030 	lw	v1,48(sp)
800419a8:	8fbf0054 	lw	ra,84(sp)
800419ac:	27bd0058 	addiu	sp,sp,88
800419b0:	03e00008 	jr	ra
800419b4:	00000000 	nop
            debug_assert!(i < args.len());
800419b8:	8fa10018 	lw	at,24(sp)
800419bc:	8fa20020 	lw	v0,32(sp)
800419c0:	0022082b 	sltu	at,at,v0
800419c4:	1420000a 	bnez	at,800419f0 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0xf0>
800419c8:	00000000 	nop
800419cc:	08010675 	j	800419d4 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0xd4>
800419d0:	00000000 	nop
800419d4:	3c01810a 	lui	at,0x810a
800419d8:	2424b03c 	addiu	a0,at,-20420
800419dc:	3c01810a 	lui	at,0x810a
800419e0:	2426bd1c 	addiu	a2,at,-17124
800419e4:	24050020 	li	a1,32
800419e8:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
800419ec:	00000000 	nop
            unsafe { args.get_unchecked(i).as_usize() }
800419f0:	8fa60018 	lw	a2,24(sp)
800419f4:	8fa50020 	lw	a1,32(sp)
800419f8:	8fa40024 	lw	a0,36(sp)
800419fc:	0c0111fb 	jal	800447ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17h6d5ffdb6f0126765E>
80041a00:	00000000 	nop
80041a04:	00400825 	move	at,v0
80041a08:	afa10014 	sw	at,20(sp)
80041a0c:	afa20050 	sw	v0,80(sp)
        if self.formatter as usize == USIZE_MARKER as usize {
80041a10:	8c410004 	lw	at,4(v0)
80041a14:	3c028004 	lui	v0,0x8004
80041a18:	2442b380 	addiu	v0,v0,-19584
80041a1c:	10220006 	beq	at,v0,80041a38 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x138>
80041a20:	00000000 	nop
80041a24:	0801068b 	j	80041a2c <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x12c>
80041a28:	00000000 	nop
            None
80041a2c:	afa00048 	sw	zero,72(sp)
        if self.formatter as usize == USIZE_MARKER as usize {
80041a30:	08010696 	j	80041a58 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x158>
80041a34:	00000000 	nop
            Some(unsafe { *(self.value as *const _ as *const usize) })
80041a38:	8fa10014 	lw	at,20(sp)
80041a3c:	8c210000 	lw	at,0(at)
80041a40:	8c210000 	lw	at,0(at)
80041a44:	afa1004c 	sw	at,76(sp)
80041a48:	24010001 	li	at,1
80041a4c:	afa10048 	sw	at,72(sp)
        if self.formatter as usize == USIZE_MARKER as usize {
80041a50:	08010696 	j	80041a58 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x158>
80041a54:	00000000 	nop
    }
80041a58:	8fa20048 	lw	v0,72(sp)
80041a5c:	8fa1004c 	lw	at,76(sp)
80041a60:	afa2002c 	sw	v0,44(sp)
80041a64:	afa10030 	sw	at,48(sp)
80041a68:	08010668 	j	800419a0 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0xa0>
80041a6c:	00000000 	nop

80041a70 <_ZN4core3fmt11PostPadding3new17h08745825ff7a709cE>:
    fn new(fill: char, padding: usize) -> PostPadding {
80041a70:	27bdfff0 	addiu	sp,sp,-16
80041a74:	afa40008 	sw	a0,8(sp)
80041a78:	afa5000c 	sw	a1,12(sp)
        PostPadding { fill, padding }
80041a7c:	afa40000 	sw	a0,0(sp)
80041a80:	afa50004 	sw	a1,4(sp)
    }
80041a84:	8fa20000 	lw	v0,0(sp)
80041a88:	8fa30004 	lw	v1,4(sp)
80041a8c:	27bd0010 	addiu	sp,sp,16
80041a90:	03e00008 	jr	ra
80041a94:	00000000 	nop

80041a98 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E>:
    pub(crate) fn write(self, f: &mut Formatter<'_>) -> Result {
80041a98:	27bdffb8 	addiu	sp,sp,-72
80041a9c:	afbf0044 	sw	ra,68(sp)
80041aa0:	afa60010 	sw	a2,16(sp)
80041aa4:	afa40014 	sw	a0,20(sp)
            f.buf.write_char(self.fill)?;
80041aa8:	afa40038 	sw	a0,56(sp)
80041aac:	afa5003c 	sw	a1,60(sp)
80041ab0:	afa60040 	sw	a2,64(sp)
        for _ in 0..self.padding {
80041ab4:	afa0001c 	sw	zero,28(sp)
80041ab8:	afa50020 	sw	a1,32(sp)
80041abc:	8fa4001c 	lw	a0,28(sp)
80041ac0:	8fa50020 	lw	a1,32(sp)
80041ac4:	0c00f80b 	jal	8003e02c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h08672f7f2dd54636E>
80041ac8:	00000000 	nop
80041acc:	afa20024 	sw	v0,36(sp)
80041ad0:	afa30028 	sw	v1,40(sp)
80041ad4:	080106b7 	j	80041adc <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E+0x44>
80041ad8:	00000000 	nop
80041adc:	27a40024 	addiu	a0,sp,36
80041ae0:	0c00f802 	jal	8003e008 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h77596a36d38db716E>
80041ae4:	00000000 	nop
80041ae8:	afa2002c 	sw	v0,44(sp)
80041aec:	afa30030 	sw	v1,48(sp)
80041af0:	8fa1002c 	lw	at,44(sp)
80041af4:	14200007 	bnez	at,80041b14 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E+0x7c>
80041af8:	00000000 	nop
80041afc:	080106c1 	j	80041b04 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E+0x6c>
80041b00:	00000000 	nop
80041b04:	24010000 	li	at,0
        Ok(())
80041b08:	a3a0001b 	sb	zero,27(sp)
    }
80041b0c:	080106d6 	j	80041b58 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E+0xc0>
80041b10:	00000000 	nop
            f.buf.write_char(self.fill)?;
80041b14:	8fa50014 	lw	a1,20(sp)
80041b18:	8fa10010 	lw	at,16(sp)
80041b1c:	8c240014 	lw	a0,20(at)
80041b20:	8c210018 	lw	at,24(at)
80041b24:	8c390010 	lw	t9,16(at)
80041b28:	0320f809 	jalr	t9
80041b2c:	00000000 	nop
80041b30:	00402025 	move	a0,v0
80041b34:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80041b38:	00000000 	nop
80041b3c:	a3a20037 	sb	v0,55(sp)
80041b40:	93a10037 	lbu	at,55(sp)
80041b44:	30210001 	andi	at,at,0x1
80041b48:	1020ffe4 	beqz	at,80041adc <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E+0x44>
80041b4c:	00000000 	nop
80041b50:	080106dc 	j	80041b70 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E+0xd8>
80041b54:	00000000 	nop
    }
80041b58:	93a1001b 	lbu	at,27(sp)
80041b5c:	30220001 	andi	v0,at,0x1
80041b60:	8fbf0044 	lw	ra,68(sp)
80041b64:	27bd0048 	addiu	sp,sp,72
80041b68:	03e00008 	jr	ra
80041b6c:	00000000 	nop
            f.buf.write_char(self.fill)?;
80041b70:	3c01810a 	lui	at,0x810a
80041b74:	2424bd2c 	addiu	a0,at,-17108
80041b78:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80041b7c:	00000000 	nop
80041b80:	a3a2001b 	sb	v0,27(sp)
80041b84:	080106d6 	j	80041b58 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E+0xc0>
80041b88:	00000000 	nop

80041b8c <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E>:
    pub fn pad_integral(&mut self, is_nonnegative: bool, prefix: &str, buf: &str) -> Result {
80041b8c:	27bdff18 	addiu	sp,sp,-232
80041b90:	afbf00e4 	sw	ra,228(sp)
80041b94:	afa70040 	sw	a3,64(sp)
80041b98:	afa60044 	sw	a2,68(sp)
80041b9c:	00a00825 	move	at,a1
80041ba0:	afa10054 	sw	at,84(sp)
80041ba4:	00801025 	move	v0,a0
80041ba8:	afa20048 	sw	v0,72(sp)
80041bac:	8fa500fc 	lw	a1,252(sp)
80041bb0:	afa5004c 	sw	a1,76(sp)
80041bb4:	8fa400f8 	lw	a0,248(sp)
80041bb8:	afa40050 	sw	a0,80(sp)
                self.buf.write_str(buf)?;
80041bbc:	afa200a0 	sw	v0,160(sp)
80041bc0:	a3a100a7 	sb	at,167(sp)
80041bc4:	afa600a8 	sw	a2,168(sp)
80041bc8:	afa700ac 	sw	a3,172(sp)
80041bcc:	afa400b0 	sw	a0,176(sp)
80041bd0:	afa500b4 	sw	a1,180(sp)
        let mut width = buf.len();
80041bd4:	0c011bfa 	jal	80046fe8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
80041bd8:	00000000 	nop
80041bdc:	8fa50054 	lw	a1,84(sp)
80041be0:	afa2006c 	sw	v0,108(sp)
80041be4:	3c010011 	lui	at,0x11
        let mut sign = None;
80041be8:	afa10070 	sw	at,112(sp)
        if !is_nonnegative {
80041bec:	14a0000e 	bnez	a1,80041c28 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x9c>
80041bf0:	00000000 	nop
80041bf4:	080106ff 	j	80041bfc <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x70>
80041bf8:	00000000 	nop
80041bfc:	2401002d 	li	at,45
            sign = Some('-');
80041c00:	afa10074 	sw	at,116(sp)
80041c04:	8fa10074 	lw	at,116(sp)
80041c08:	afa10070 	sw	at,112(sp)
            width += 1;
80041c0c:	8fa1006c 	lw	at,108(sp)
80041c10:	24210001 	addiu	at,at,1
80041c14:	afa1003c 	sw	at,60(sp)
80041c18:	1020000e 	beqz	at,80041c54 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0xc8>
80041c1c:	00000000 	nop
80041c20:	08010711 	j	80041c44 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0xb8>
80041c24:	00000000 	nop
        } else if self.sign_plus() {
80041c28:	8fa40048 	lw	a0,72(sp)
80041c2c:	0c010aa9 	jal	80042aa4 <_ZN4core3fmt9Formatter9sign_plus17hea17fcfa5b72c758E>
80041c30:	00000000 	nop
80041c34:	14400012 	bnez	v0,80041c80 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0xf4>
80041c38:	00000000 	nop
80041c3c:	08010719 	j	80041c64 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0xd8>
80041c40:	00000000 	nop
            width += 1;
80041c44:	8fa1003c 	lw	at,60(sp)
80041c48:	afa1006c 	sw	at,108(sp)
        if !is_nonnegative {
80041c4c:	08010719 	j	80041c64 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0xd8>
80041c50:	00000000 	nop
            width += 1;
80041c54:	3c01810a 	lui	at,0x810a
80041c58:	2424bd3c 	addiu	a0,at,-17092
80041c5c:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80041c60:	00000000 	nop
        let prefix = if self.alternate() {
80041c64:	8fa40048 	lw	a0,72(sp)
80041c68:	0c010ab0 	jal	80042ac0 <_ZN4core3fmt9Formatter9alternate17h2b08e2c940b48bcaE>
80041c6c:	00000000 	nop
80041c70:	14400019 	bnez	v0,80041cd8 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x14c>
80041c74:	00000000 	nop
80041c78:	08010733 	j	80041ccc <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x140>
80041c7c:	00000000 	nop
80041c80:	2401002b 	li	at,43
            sign = Some('+');
80041c84:	afa10078 	sw	at,120(sp)
80041c88:	8fa10078 	lw	at,120(sp)
80041c8c:	afa10070 	sw	at,112(sp)
            width += 1;
80041c90:	8fa1006c 	lw	at,108(sp)
80041c94:	24210001 	addiu	at,at,1
80041c98:	afa10038 	sw	at,56(sp)
80041c9c:	10200007 	beqz	at,80041cbc <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x130>
80041ca0:	00000000 	nop
80041ca4:	0801072b 	j	80041cac <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x120>
80041ca8:	00000000 	nop
80041cac:	8fa10038 	lw	at,56(sp)
80041cb0:	afa1006c 	sw	at,108(sp)
        } else if self.sign_plus() {
80041cb4:	08010719 	j	80041c64 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0xd8>
80041cb8:	00000000 	nop
            width += 1;
80041cbc:	3c01810a 	lui	at,0x810a
80041cc0:	2424bd4c 	addiu	a0,at,-17076
80041cc4:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80041cc8:	00000000 	nop
            None
80041ccc:	afa0007c 	sw	zero,124(sp)
        let prefix = if self.alternate() {
80041cd0:	08010747 	j	80041d1c <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x190>
80041cd4:	00000000 	nop
            width += prefix.chars().count();
80041cd8:	8fa50040 	lw	a1,64(sp)
80041cdc:	8fa40044 	lw	a0,68(sp)
80041ce0:	0c011cb8 	jal	800472e0 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h9ac6a59f518bf3d7E>
80041ce4:	00000000 	nop
80041ce8:	00402025 	move	a0,v0
80041cec:	00602825 	move	a1,v1
80041cf0:	0c0117d7 	jal	80045f5c <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count17h53f43070aad197f4E>
80041cf4:	00000000 	nop
80041cf8:	00400825 	move	at,v0
80041cfc:	8fa2006c 	lw	v0,108(sp)
80041d00:	00410821 	addu	at,v0,at
80041d04:	afa10034 	sw	at,52(sp)
80041d08:	0022082b 	sltu	at,at,v0
80041d0c:	14200011 	bnez	at,80041d54 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x1c8>
80041d10:	00000000 	nop
80041d14:	0801074d 	j	80041d34 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x1a8>
80041d18:	00000000 	nop
        match self.width {
80041d1c:	8fa10048 	lw	at,72(sp)
80041d20:	8c210000 	lw	at,0(at)
80041d24:	1020000f 	beqz	at,80041d64 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x1d8>
80041d28:	00000000 	nop
80041d2c:	08010769 	j	80041da4 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x218>
80041d30:	00000000 	nop
            width += prefix.chars().count();
80041d34:	8fa10040 	lw	at,64(sp)
80041d38:	8fa20044 	lw	v0,68(sp)
80041d3c:	8fa30034 	lw	v1,52(sp)
80041d40:	afa3006c 	sw	v1,108(sp)
            Some(prefix)
80041d44:	afa2007c 	sw	v0,124(sp)
80041d48:	afa10080 	sw	at,128(sp)
        let prefix = if self.alternate() {
80041d4c:	08010747 	j	80041d1c <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x190>
80041d50:	00000000 	nop
            width += prefix.chars().count();
80041d54:	3c01810a 	lui	at,0x810a
80041d58:	2424bd5c 	addiu	a0,at,-17060
80041d5c:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80041d60:	00000000 	nop
                write_prefix(self, sign, prefix)?;
80041d64:	8fa40048 	lw	a0,72(sp)
80041d68:	8fa50070 	lw	a1,112(sp)
80041d6c:	8fa6007c 	lw	a2,124(sp)
80041d70:	8fa70080 	lw	a3,128(sp)
80041d74:	0c0108b0 	jal	800422c0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E>
80041d78:	00000000 	nop
80041d7c:	00402025 	move	a0,v0
80041d80:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80041d84:	00000000 	nop
80041d88:	a3a20084 	sb	v0,132(sp)
80041d8c:	93a10084 	lbu	at,132(sp)
80041d90:	30210001 	andi	at,at,0x1
80041d94:	1020000d 	beqz	at,80041dcc <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x240>
80041d98:	00000000 	nop
80041d9c:	0801077e 	j	80041df8 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x26c>
80041da0:	00000000 	nop
            Some(min) if width >= min => {
80041da4:	8fa20048 	lw	v0,72(sp)
80041da8:	24410004 	addiu	at,v0,4
80041dac:	afa100b8 	sw	at,184(sp)
80041db0:	8fa1006c 	lw	at,108(sp)
80041db4:	8c420004 	lw	v0,4(v0)
80041db8:	0022082b 	sltu	at,at,v0
80041dbc:	10200024 	beqz	at,80041e50 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x2c4>
80041dc0:	00000000 	nop
80041dc4:	0801078b 	j	80041e2c <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x2a0>
80041dc8:	00000000 	nop
                self.buf.write_str(buf)
80041dcc:	8fa6004c 	lw	a2,76(sp)
80041dd0:	8fa50050 	lw	a1,80(sp)
80041dd4:	8fa10048 	lw	at,72(sp)
80041dd8:	8c240014 	lw	a0,20(at)
80041ddc:	8c210018 	lw	at,24(at)
80041de0:	8c39000c 	lw	t9,12(at)
80041de4:	0320f809 	jalr	t9
80041de8:	00000000 	nop
80041dec:	a3a2006b 	sb	v0,107(sp)
80041df0:	08010785 	j	80041e14 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
80041df4:	00000000 	nop
                write_prefix(self, sign, prefix)?;
80041df8:	3c01810a 	lui	at,0x810a
80041dfc:	2424bd6c 	addiu	a0,at,-17044
80041e00:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80041e04:	00000000 	nop
80041e08:	a3a2006b 	sb	v0,107(sp)
80041e0c:	08010785 	j	80041e14 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
80041e10:	00000000 	nop
    }
80041e14:	93a1006b 	lbu	at,107(sp)
80041e18:	30220001 	andi	v0,at,0x1
80041e1c:	8fbf00e4 	lw	ra,228(sp)
80041e20:	27bd00e8 	addiu	sp,sp,232
80041e24:	03e00008 	jr	ra
80041e28:	00000000 	nop
            Some(min) if self.sign_aware_zero_pad() => {
80041e2c:	8fa40048 	lw	a0,72(sp)
80041e30:	24810004 	addiu	at,a0,4
80041e34:	afa100bc 	sw	at,188(sp)
80041e38:	0c010ab8 	jal	80042ae0 <_ZN4core3fmt9Formatter19sign_aware_zero_pad17h321b41f12d0477a7E>
80041e3c:	00000000 	nop
80041e40:	14400020 	bnez	v0,80041ec4 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x338>
80041e44:	00000000 	nop
80041e48:	080107a6 	j	80041e98 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x30c>
80041e4c:	00000000 	nop
            Some(min) if width >= min => {
80041e50:	8fa40048 	lw	a0,72(sp)
80041e54:	8c810004 	lw	at,4(a0)
80041e58:	afa100e0 	sw	at,224(sp)
                write_prefix(self, sign, prefix)?;
80041e5c:	8fa50070 	lw	a1,112(sp)
80041e60:	8fa6007c 	lw	a2,124(sp)
80041e64:	8fa70080 	lw	a3,128(sp)
80041e68:	0c0108b0 	jal	800422c0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E>
80041e6c:	00000000 	nop
80041e70:	00402025 	move	a0,v0
80041e74:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80041e78:	00000000 	nop
80041e7c:	a3a20085 	sb	v0,133(sp)
80041e80:	93a10085 	lbu	at,133(sp)
80041e84:	30210001 	andi	at,at,0x1
80041e88:	102000fb 	beqz	at,80042278 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x6ec>
80041e8c:	00000000 	nop
80041e90:	080108a9 	j	800422a4 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x718>
80041e94:	00000000 	nop
            Some(min) => {
80041e98:	8fa10048 	lw	at,72(sp)
80041e9c:	8c210004 	lw	at,4(at)
80041ea0:	afa100c0 	sw	at,192(sp)
                let post_padding = self.padding(min - width, Alignment::Right)?;
80041ea4:	8fa2006c 	lw	v0,108(sp)
80041ea8:	00221823 	subu	v1,at,v0
80041eac:	afa30030 	sw	v1,48(sp)
80041eb0:	0022082b 	sltu	at,at,v0
80041eb4:	1420003b 	bnez	at,80041fa4 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x418>
80041eb8:	00000000 	nop
80041ebc:	080107d6 	j	80041f58 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x3cc>
80041ec0:	00000000 	nop
            Some(min) if self.sign_aware_zero_pad() => {
80041ec4:	8fa10048 	lw	at,72(sp)
80041ec8:	8c220004 	lw	v0,4(at)
80041ecc:	afa20024 	sw	v0,36(sp)
80041ed0:	afa200cc 	sw	v0,204(sp)
                let old_fill = crate::mem::replace(&mut self.fill, '0');
80041ed4:	24240010 	addiu	a0,at,16
80041ed8:	24050030 	li	a1,48
80041edc:	0c00ed41 	jal	8003b504 <_ZN4core3mem7replace17h8bdd203d298c7c3eE>
80041ee0:	00000000 	nop
80041ee4:	8fa10048 	lw	at,72(sp)
80041ee8:	00401825 	move	v1,v0
80041eec:	afa30028 	sw	v1,40(sp)
80041ef0:	afa200d0 	sw	v0,208(sp)
                let old_align = crate::mem::replace(&mut self.align, rt::Alignment::Right);
80041ef4:	24240020 	addiu	a0,at,32
80041ef8:	24010001 	li	at,1
80041efc:	a3a10086 	sb	at,134(sp)
80041f00:	93a50086 	lbu	a1,134(sp)
80041f04:	0c00ed2e 	jal	8003b4b8 <_ZN4core3mem7replace17h16554973e0f26abfE>
80041f08:	00000000 	nop
80041f0c:	8fa40048 	lw	a0,72(sp)
80041f10:	00400825 	move	at,v0
80041f14:	afa1002c 	sw	at,44(sp)
80041f18:	a3a200d7 	sb	v0,215(sp)
                write_prefix(self, sign, prefix)?;
80041f1c:	8fa50070 	lw	a1,112(sp)
80041f20:	8fa6007c 	lw	a2,124(sp)
80041f24:	8fa70080 	lw	a3,128(sp)
80041f28:	0c0108b0 	jal	800422c0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E>
80041f2c:	00000000 	nop
80041f30:	00402025 	move	a0,v0
80041f34:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80041f38:	00000000 	nop
80041f3c:	a3a20087 	sb	v0,135(sp)
80041f40:	93a10087 	lbu	at,135(sp)
80041f44:	30210001 	andi	at,at,0x1
80041f48:	1020005f 	beqz	at,800420c8 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x53c>
80041f4c:	00000000 	nop
80041f50:	0801083b 	j	800420ec <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x560>
80041f54:	00000000 	nop
80041f58:	8fa50030 	lw	a1,48(sp)
80041f5c:	8fa40048 	lw	a0,72(sp)
80041f60:	24010001 	li	at,1
                let post_padding = self.padding(min - width, Alignment::Right)?;
80041f64:	a3a1009d 	sb	at,157(sp)
80041f68:	93a6009d 	lbu	a2,157(sp)
80041f6c:	0c0109d1 	jal	80042744 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE>
80041f70:	00000000 	nop
80041f74:	00402025 	move	a0,v0
80041f78:	00602825 	move	a1,v1
80041f7c:	0c00fde8 	jal	8003f7a0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE>
80041f80:	00000000 	nop
80041f84:	afa20094 	sw	v0,148(sp)
80041f88:	afa30098 	sw	v1,152(sp)
80041f8c:	8fa10094 	lw	at,148(sp)
80041f90:	3c020011 	lui	v0,0x11
80041f94:	14220007 	bne	at,v0,80041fb4 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x428>
80041f98:	00000000 	nop
80041f9c:	08010803 	j	8004200c <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x480>
80041fa0:	00000000 	nop
80041fa4:	3c01810a 	lui	at,0x810a
80041fa8:	2424bd7c 	addiu	a0,at,-17028
80041fac:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80041fb0:	00000000 	nop
80041fb4:	8fa40048 	lw	a0,72(sp)
80041fb8:	8fa20094 	lw	v0,148(sp)
80041fbc:	afa2001c 	sw	v0,28(sp)
80041fc0:	8fa10098 	lw	at,152(sp)
80041fc4:	afa10020 	sw	at,32(sp)
80041fc8:	afa200c4 	sw	v0,196(sp)
80041fcc:	afa100c8 	sw	at,200(sp)
                write_prefix(self, sign, prefix)?;
80041fd0:	8fa50070 	lw	a1,112(sp)
80041fd4:	8fa6007c 	lw	a2,124(sp)
80041fd8:	8fa70080 	lw	a3,128(sp)
80041fdc:	0c0108b0 	jal	800422c0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E>
80041fe0:	00000000 	nop
80041fe4:	00402025 	move	a0,v0
80041fe8:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80041fec:	00000000 	nop
80041ff0:	a3a2009e 	sb	v0,158(sp)
80041ff4:	93a1009e 	lbu	at,158(sp)
80041ff8:	30210001 	andi	at,at,0x1
80041ffc:	1020000a 	beqz	at,80042028 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x49c>
80042000:	00000000 	nop
80042004:	0801081c 	j	80042070 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x4e4>
80042008:	00000000 	nop
                let post_padding = self.padding(min - width, Alignment::Right)?;
8004200c:	3c01810a 	lui	at,0x810a
80042010:	2424bdac 	addiu	a0,at,-16980
80042014:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80042018:	00000000 	nop
8004201c:	a3a2006b 	sb	v0,107(sp)
80042020:	08010785 	j	80041e14 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
80042024:	00000000 	nop
                self.buf.write_str(buf)?;
80042028:	8fa6004c 	lw	a2,76(sp)
8004202c:	8fa50050 	lw	a1,80(sp)
80042030:	8fa10048 	lw	at,72(sp)
80042034:	8c240014 	lw	a0,20(at)
80042038:	8c210018 	lw	at,24(at)
8004203c:	8c39000c 	lw	t9,12(at)
80042040:	0320f809 	jalr	t9
80042044:	00000000 	nop
80042048:	00402025 	move	a0,v0
8004204c:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80042050:	00000000 	nop
80042054:	a3a2009f 	sb	v0,159(sp)
80042058:	93a1009f 	lbu	at,159(sp)
8004205c:	30210001 	andi	at,at,0x1
80042060:	1020000a 	beqz	at,8004208c <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x500>
80042064:	00000000 	nop
80042068:	0801082b 	j	800420ac <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x520>
8004206c:	00000000 	nop
                write_prefix(self, sign, prefix)?;
80042070:	3c01810a 	lui	at,0x810a
80042074:	2424bd9c 	addiu	a0,at,-16996
80042078:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8004207c:	00000000 	nop
80042080:	a3a2006b 	sb	v0,107(sp)
80042084:	08010785 	j	80041e14 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
80042088:	00000000 	nop
                post_padding.write(self)
8004208c:	8fa60048 	lw	a2,72(sp)
80042090:	8fa50020 	lw	a1,32(sp)
80042094:	8fa4001c 	lw	a0,28(sp)
80042098:	0c0106a6 	jal	80041a98 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E>
8004209c:	00000000 	nop
800420a0:	a3a2006b 	sb	v0,107(sp)
800420a4:	08010785 	j	80041e14 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
800420a8:	00000000 	nop
                self.buf.write_str(buf)?;
800420ac:	3c01810a 	lui	at,0x810a
800420b0:	2424bd8c 	addiu	a0,at,-17012
800420b4:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
800420b8:	00000000 	nop
800420bc:	a3a2006b 	sb	v0,107(sp)
800420c0:	08010785 	j	80041e14 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
800420c4:	00000000 	nop
                let post_padding = self.padding(min - width, Alignment::Right)?;
800420c8:	8fa10024 	lw	at,36(sp)
800420cc:	8fa2006c 	lw	v0,108(sp)
800420d0:	00221823 	subu	v1,at,v0
800420d4:	afa30018 	sw	v1,24(sp)
800420d8:	0022082b 	sltu	at,at,v0
800420dc:	1420001d 	bnez	at,80042154 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x5c8>
800420e0:	00000000 	nop
800420e4:	08010842 	j	80042108 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x57c>
800420e8:	00000000 	nop
                write_prefix(self, sign, prefix)?;
800420ec:	3c01810a 	lui	at,0x810a
800420f0:	2424bdfc 	addiu	a0,at,-16900
800420f4:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
800420f8:	00000000 	nop
800420fc:	a3a2006b 	sb	v0,107(sp)
80042100:	08010785 	j	80041e14 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
80042104:	00000000 	nop
80042108:	8fa50018 	lw	a1,24(sp)
8004210c:	8fa40048 	lw	a0,72(sp)
80042110:	24010001 	li	at,1
                let post_padding = self.padding(min - width, Alignment::Right)?;
80042114:	a3a10091 	sb	at,145(sp)
80042118:	93a60091 	lbu	a2,145(sp)
8004211c:	0c0109d1 	jal	80042744 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE>
80042120:	00000000 	nop
80042124:	00402025 	move	a0,v0
80042128:	00602825 	move	a1,v1
8004212c:	0c00fde8 	jal	8003f7a0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE>
80042130:	00000000 	nop
80042134:	afa20088 	sw	v0,136(sp)
80042138:	afa3008c 	sw	v1,140(sp)
8004213c:	8fa10088 	lw	at,136(sp)
80042140:	3c020011 	lui	v0,0x11
80042144:	14220007 	bne	at,v0,80042164 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x5d8>
80042148:	00000000 	nop
8004214c:	08010871 	j	800421c4 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x638>
80042150:	00000000 	nop
80042154:	3c01810a 	lui	at,0x810a
80042158:	2424bdbc 	addiu	a0,at,-16964
8004215c:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80042160:	00000000 	nop
80042164:	8fa6004c 	lw	a2,76(sp)
80042168:	8fa50050 	lw	a1,80(sp)
8004216c:	8fa10048 	lw	at,72(sp)
80042170:	8fa30088 	lw	v1,136(sp)
80042174:	afa30010 	sw	v1,16(sp)
80042178:	8fa2008c 	lw	v0,140(sp)
8004217c:	afa20014 	sw	v0,20(sp)
80042180:	afa300d8 	sw	v1,216(sp)
80042184:	afa200dc 	sw	v0,220(sp)
                self.buf.write_str(buf)?;
80042188:	8c240014 	lw	a0,20(at)
8004218c:	8c210018 	lw	at,24(at)
80042190:	8c39000c 	lw	t9,12(at)
80042194:	0320f809 	jalr	t9
80042198:	00000000 	nop
8004219c:	00402025 	move	a0,v0
800421a0:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
800421a4:	00000000 	nop
800421a8:	a3a20092 	sb	v0,146(sp)
800421ac:	93a10092 	lbu	at,146(sp)
800421b0:	30210001 	andi	at,at,0x1
800421b4:	1020000a 	beqz	at,800421e0 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x654>
800421b8:	00000000 	nop
800421bc:	08010887 	j	8004221c <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x690>
800421c0:	00000000 	nop
                let post_padding = self.padding(min - width, Alignment::Right)?;
800421c4:	3c01810a 	lui	at,0x810a
800421c8:	2424bdec 	addiu	a0,at,-16916
800421cc:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
800421d0:	00000000 	nop
800421d4:	a3a2006b 	sb	v0,107(sp)
800421d8:	08010785 	j	80041e14 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
800421dc:	00000000 	nop
                post_padding.write(self)?;
800421e0:	8fa60048 	lw	a2,72(sp)
800421e4:	8fa50014 	lw	a1,20(sp)
800421e8:	8fa40010 	lw	a0,16(sp)
800421ec:	0c0106a6 	jal	80041a98 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E>
800421f0:	00000000 	nop
800421f4:	00402025 	move	a0,v0
800421f8:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
800421fc:	00000000 	nop
80042200:	a3a20093 	sb	v0,147(sp)
80042204:	93a10093 	lbu	at,147(sp)
80042208:	30210001 	andi	at,at,0x1
8004220c:	1020000a 	beqz	at,80042238 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x6ac>
80042210:	00000000 	nop
80042214:	08010897 	j	8004225c <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x6d0>
80042218:	00000000 	nop
                self.buf.write_str(buf)?;
8004221c:	3c01810a 	lui	at,0x810a
80042220:	2424bddc 	addiu	a0,at,-16932
80042224:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80042228:	00000000 	nop
8004222c:	a3a2006b 	sb	v0,107(sp)
80042230:	08010785 	j	80041e14 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
80042234:	00000000 	nop
                self.fill = old_fill;
80042238:	8fa1002c 	lw	at,44(sp)
8004223c:	8fa20048 	lw	v0,72(sp)
80042240:	8fa30028 	lw	v1,40(sp)
80042244:	ac430010 	sw	v1,16(v0)
                self.align = old_align;
80042248:	a0410020 	sb	at,32(v0)
8004224c:	24010000 	li	at,0
                Ok(())
80042250:	a3a0006b 	sb	zero,107(sp)
            }
80042254:	08010785 	j	80041e14 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
80042258:	00000000 	nop
                post_padding.write(self)?;
8004225c:	3c01810a 	lui	at,0x810a
80042260:	2424bdcc 	addiu	a0,at,-16948
80042264:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80042268:	00000000 	nop
8004226c:	a3a2006b 	sb	v0,107(sp)
80042270:	08010785 	j	80041e14 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
80042274:	00000000 	nop
                self.buf.write_str(buf)
80042278:	8fa6004c 	lw	a2,76(sp)
8004227c:	8fa50050 	lw	a1,80(sp)
80042280:	8fa10048 	lw	at,72(sp)
80042284:	8c240014 	lw	a0,20(at)
80042288:	8c210018 	lw	at,24(at)
8004228c:	8c39000c 	lw	t9,12(at)
80042290:	0320f809 	jalr	t9
80042294:	00000000 	nop
80042298:	a3a2006b 	sb	v0,107(sp)
8004229c:	08010785 	j	80041e14 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
800422a0:	00000000 	nop
                write_prefix(self, sign, prefix)?;
800422a4:	3c01810a 	lui	at,0x810a
800422a8:	2424be0c 	addiu	a0,at,-16884
800422ac:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
800422b0:	00000000 	nop
800422b4:	a3a2006b 	sb	v0,107(sp)
800422b8:	08010785 	j	80041e14 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
800422bc:	00000000 	nop

800422c0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E>:
        fn write_prefix(f: &mut Formatter<'_>, sign: Option<char>, prefix: Option<&str>) -> Result {
800422c0:	27bdffc0 	addiu	sp,sp,-64
800422c4:	afbf003c 	sw	ra,60(sp)
800422c8:	afa40014 	sw	a0,20(sp)
                f.buf.write_char(c)?;
800422cc:	afa5001c 	sw	a1,28(sp)
800422d0:	afa60020 	sw	a2,32(sp)
800422d4:	afa70024 	sw	a3,36(sp)
800422d8:	afa4002c 	sw	a0,44(sp)
            if let Some(c) = sign {
800422dc:	8fa1001c 	lw	at,28(sp)
800422e0:	3c020011 	lui	v0,0x11
800422e4:	10220015 	beq	at,v0,8004233c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0x7c>
800422e8:	00000000 	nop
800422ec:	080108bd 	j	800422f4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0x34>
800422f0:	00000000 	nop
800422f4:	8fa10014 	lw	at,20(sp)
800422f8:	8fa5001c 	lw	a1,28(sp)
800422fc:	afa50030 	sw	a1,48(sp)
                f.buf.write_char(c)?;
80042300:	8c240014 	lw	a0,20(at)
80042304:	8c210018 	lw	at,24(at)
80042308:	8c390010 	lw	t9,16(at)
8004230c:	0320f809 	jalr	t9
80042310:	00000000 	nop
80042314:	00402025 	move	a0,v0
80042318:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8004231c:	00000000 	nop
80042320:	a3a2002b 	sb	v0,43(sp)
80042324:	93a1002b 	lbu	at,43(sp)
80042328:	30210001 	andi	at,at,0x1
8004232c:	14200008 	bnez	at,80042350 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0x90>
80042330:	00000000 	nop
80042334:	080108cf 	j	8004233c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0x7c>
80042338:	00000000 	nop
            if let Some(prefix) = prefix { f.buf.write_str(prefix) } else { Ok(()) }
8004233c:	8fa10020 	lw	at,32(sp)
80042340:	14200010 	bnez	at,80042384 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0xc4>
80042344:	00000000 	nop
80042348:	080108ee 	j	800423b8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0xf8>
8004234c:	00000000 	nop
                f.buf.write_char(c)?;
80042350:	3c01810a 	lui	at,0x810a
80042354:	2424be1c 	addiu	a0,at,-16868
80042358:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8004235c:	00000000 	nop
80042360:	a3a2002a 	sb	v0,42(sp)
80042364:	080108db 	j	8004236c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0xac>
80042368:	00000000 	nop
        }
8004236c:	93a1002a 	lbu	at,42(sp)
80042370:	30220001 	andi	v0,at,0x1
80042374:	8fbf003c 	lw	ra,60(sp)
80042378:	27bd0040 	addiu	sp,sp,64
8004237c:	03e00008 	jr	ra
80042380:	00000000 	nop
            if let Some(prefix) = prefix { f.buf.write_str(prefix) } else { Ok(()) }
80042384:	8fa10014 	lw	at,20(sp)
80042388:	8fa50020 	lw	a1,32(sp)
8004238c:	8fa60024 	lw	a2,36(sp)
80042390:	afa50034 	sw	a1,52(sp)
80042394:	afa60038 	sw	a2,56(sp)
80042398:	8c240014 	lw	a0,20(at)
8004239c:	8c210018 	lw	at,24(at)
800423a0:	8c39000c 	lw	t9,12(at)
800423a4:	0320f809 	jalr	t9
800423a8:	00000000 	nop
800423ac:	a3a2002a 	sb	v0,42(sp)
800423b0:	080108db 	j	8004236c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0xac>
800423b4:	00000000 	nop
800423b8:	24010000 	li	at,0
800423bc:	a3a0002a 	sb	zero,42(sp)
800423c0:	080108db 	j	8004236c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0xac>
800423c4:	00000000 	nop

800423c8 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E>:
    pub fn pad(&mut self, s: &str) -> Result {
800423c8:	27bdff70 	addiu	sp,sp,-144
800423cc:	afbf008c 	sw	ra,140(sp)
800423d0:	afa4002c 	sw	a0,44(sp)
                    self.buf.write_str(s)?;
800423d4:	afa50034 	sw	a1,52(sp)
800423d8:	afa60038 	sw	a2,56(sp)
800423dc:	afa40070 	sw	a0,112(sp)
        if self.width.is_none() && self.precision.is_none() {
800423e0:	0c00f951 	jal	8003e544 <_ZN4core6option15Option$LT$T$GT$7is_none17h2a21bc401af51c77E>
800423e4:	00000000 	nop
800423e8:	1440000a 	bnez	v0,80042414 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x4c>
800423ec:	00000000 	nop
800423f0:	080108fe 	j	800423f8 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x30>
800423f4:	00000000 	nop
        let s = if let Some(max) = self.precision {
800423f8:	8fa1002c 	lw	at,44(sp)
800423fc:	8c210008 	lw	at,8(at)
80042400:	24020001 	li	v0,1
80042404:	10220016 	beq	at,v0,80042460 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x98>
80042408:	00000000 	nop
8004240c:	0801092e 	j	800424b8 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0xf0>
80042410:	00000000 	nop
        if self.width.is_none() && self.precision.is_none() {
80042414:	8fa1002c 	lw	at,44(sp)
80042418:	24240008 	addiu	a0,at,8
8004241c:	0c00f951 	jal	8003e544 <_ZN4core6option15Option$LT$T$GT$7is_none17h2a21bc401af51c77E>
80042420:	00000000 	nop
80042424:	1040fff4 	beqz	v0,800423f8 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x30>
80042428:	00000000 	nop
8004242c:	0801090d 	j	80042434 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x6c>
80042430:	00000000 	nop
            return self.buf.write_str(s);
80042434:	8fa1002c 	lw	at,44(sp)
80042438:	8c240014 	lw	a0,20(at)
8004243c:	8c210018 	lw	at,24(at)
80042440:	8fa50034 	lw	a1,52(sp)
80042444:	8fa60038 	lw	a2,56(sp)
80042448:	8c39000c 	lw	t9,12(at)
8004244c:	0320f809 	jalr	t9
80042450:	00000000 	nop
80042454:	a3a2003f 	sb	v0,63(sp)
80042458:	08010972 	j	800425c8 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x200>
8004245c:	00000000 	nop
        let s = if let Some(max) = self.precision {
80042460:	8fa1002c 	lw	at,44(sp)
80042464:	8c21000c 	lw	at,12(at)
80042468:	afa10028 	sw	at,40(sp)
8004246c:	afa10074 	sw	at,116(sp)
            if let Some((i, _)) = s.char_indices().nth(max) {
80042470:	8fa50034 	lw	a1,52(sp)
80042474:	8fa60038 	lw	a2,56(sp)
80042478:	27a40050 	addiu	a0,sp,80
8004247c:	afa40024 	sw	a0,36(sp)
80042480:	0c011cc8 	jal	80047320 <_ZN4core3str21_$LT$impl$u20$str$GT$12char_indices17hbaf3c99ff2948506E>
80042484:	00000000 	nop
80042488:	8fa40024 	lw	a0,36(sp)
8004248c:	8fa50028 	lw	a1,40(sp)
80042490:	0c00f896 	jal	8003e258 <_ZN4core4iter6traits8iterator8Iterator3nth17h949acbaf33606195E>
80042494:	00000000 	nop
80042498:	afa20048 	sw	v0,72(sp)
8004249c:	afa3004c 	sw	v1,76(sp)
800424a0:	8fa1004c 	lw	at,76(sp)
800424a4:	3c020011 	lui	v0,0x11
800424a8:	14220009 	bne	at,v0,800424d0 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x108>
800424ac:	00000000 	nop
800424b0:	08010946 	j	80042518 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x150>
800424b4:	00000000 	nop
            &s
800424b8:	8fa20034 	lw	v0,52(sp)
800424bc:	8fa10038 	lw	at,56(sp)
800424c0:	afa20040 	sw	v0,64(sp)
800424c4:	afa10044 	sw	at,68(sp)
        let s = if let Some(max) = self.precision {
800424c8:	0801094c 	j	80042530 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x168>
800424cc:	00000000 	nop
            if let Some((i, _)) = s.char_indices().nth(max) {
800424d0:	8fa10048 	lw	at,72(sp)
800424d4:	afa10078 	sw	at,120(sp)
                s.get(..i).unwrap_or(s)
800424d8:	8fa40034 	lw	a0,52(sp)
800424dc:	8fa50038 	lw	a1,56(sp)
800424e0:	afa1005c 	sw	at,92(sp)
800424e4:	8fa6005c 	lw	a2,92(sp)
800424e8:	0c011ca9 	jal	800472a4 <_ZN4core3str21_$LT$impl$u20$str$GT$3get17h22d03a90dc93b151E>
800424ec:	00000000 	nop
800424f0:	00402025 	move	a0,v0
800424f4:	00602825 	move	a1,v1
800424f8:	8fa60034 	lw	a2,52(sp)
800424fc:	8fa70038 	lw	a3,56(sp)
80042500:	0c00f95b 	jal	8003e56c <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E>
80042504:	00000000 	nop
80042508:	afa20040 	sw	v0,64(sp)
8004250c:	afa30044 	sw	v1,68(sp)
80042510:	0801094c 	j	80042530 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x168>
80042514:	00000000 	nop
                &s
80042518:	8fa20034 	lw	v0,52(sp)
8004251c:	8fa10038 	lw	at,56(sp)
80042520:	afa20040 	sw	v0,64(sp)
80042524:	afa10044 	sw	at,68(sp)
            if let Some((i, _)) = s.char_indices().nth(max) {
80042528:	0801094c 	j	80042530 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x168>
8004252c:	00000000 	nop
        match self.width {
80042530:	8fa1002c 	lw	at,44(sp)
80042534:	8c210000 	lw	at,0(at)
80042538:	1420000e 	bnez	at,80042574 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x1ac>
8004253c:	00000000 	nop
80042540:	08010952 	j	80042548 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x180>
80042544:	00000000 	nop
            None => self.buf.write_str(s),
80042548:	8fa1002c 	lw	at,44(sp)
8004254c:	8c240014 	lw	a0,20(at)
80042550:	8c210018 	lw	at,24(at)
80042554:	8fa50040 	lw	a1,64(sp)
80042558:	8fa60044 	lw	a2,68(sp)
8004255c:	8c39000c 	lw	t9,12(at)
80042560:	0320f809 	jalr	t9
80042564:	00000000 	nop
80042568:	a3a2003f 	sb	v0,63(sp)
8004256c:	08010972 	j	800425c8 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x200>
80042570:	00000000 	nop
            Some(width) => {
80042574:	8fa1002c 	lw	at,44(sp)
80042578:	8c210004 	lw	at,4(at)
8004257c:	afa1001c 	sw	at,28(sp)
80042580:	afa1007c 	sw	at,124(sp)
                let chars_count = s.chars().count();
80042584:	8fa40040 	lw	a0,64(sp)
80042588:	8fa50044 	lw	a1,68(sp)
8004258c:	0c011cb8 	jal	800472e0 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h9ac6a59f518bf3d7E>
80042590:	00000000 	nop
80042594:	00402025 	move	a0,v0
80042598:	00602825 	move	a1,v1
8004259c:	0c0117d7 	jal	80045f5c <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count17h53f43070aad197f4E>
800425a0:	00000000 	nop
800425a4:	8fa1001c 	lw	at,28(sp)
800425a8:	00401825 	move	v1,v0
800425ac:	afa30020 	sw	v1,32(sp)
800425b0:	afa20080 	sw	v0,128(sp)
                if chars_count >= width {
800425b4:	0041082b 	sltu	at,v0,at
800425b8:	10200014 	beqz	at,8004260c <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x244>
800425bc:	00000000 	nop
800425c0:	08010978 	j	800425e0 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x218>
800425c4:	00000000 	nop
    }
800425c8:	93a1003f 	lbu	at,63(sp)
800425cc:	30220001 	andi	v0,at,0x1
800425d0:	8fbf008c 	lw	ra,140(sp)
800425d4:	27bd0090 	addiu	sp,sp,144
800425d8:	03e00008 	jr	ra
800425dc:	00000000 	nop
800425e0:	8fa1001c 	lw	at,28(sp)
800425e4:	8fa20020 	lw	v0,32(sp)
800425e8:	24030000 	li	v1,0
                    let align = Alignment::Left;
800425ec:	a3a00063 	sb	zero,99(sp)
                    let post_padding = self.padding(width - chars_count, align)?;
800425f0:	00221823 	subu	v1,at,v0
800425f4:	afa30018 	sw	v1,24(sp)
800425f8:	0022082b 	sltu	at,at,v0
800425fc:	1420001f 	bnez	at,8004267c <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x2b4>
80042600:	00000000 	nop
80042604:	0801098e 	j	80042638 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x270>
80042608:	00000000 	nop
                    self.buf.write_str(s)
8004260c:	8fa1002c 	lw	at,44(sp)
80042610:	8c240014 	lw	a0,20(at)
80042614:	8c210018 	lw	at,24(at)
80042618:	8fa50040 	lw	a1,64(sp)
8004261c:	8fa60044 	lw	a2,68(sp)
80042620:	8c39000c 	lw	t9,12(at)
80042624:	0320f809 	jalr	t9
80042628:	00000000 	nop
8004262c:	a3a2003f 	sb	v0,63(sp)
80042630:	08010972 	j	800425c8 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x200>
80042634:	00000000 	nop
                    let post_padding = self.padding(width - chars_count, align)?;
80042638:	8fa50018 	lw	a1,24(sp)
8004263c:	8fa4002c 	lw	a0,44(sp)
80042640:	93a60063 	lbu	a2,99(sp)
80042644:	0c0109d1 	jal	80042744 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE>
80042648:	00000000 	nop
8004264c:	00402025 	move	a0,v0
80042650:	00602825 	move	a1,v1
80042654:	0c00fde8 	jal	8003f7a0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE>
80042658:	00000000 	nop
8004265c:	afa20064 	sw	v0,100(sp)
80042660:	afa30068 	sw	v1,104(sp)
80042664:	8fa10064 	lw	at,100(sp)
80042668:	3c020011 	lui	v0,0x11
8004266c:	14220007 	bne	at,v0,8004268c <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x2c4>
80042670:	00000000 	nop
80042674:	080109bb 	j	800426ec <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x324>
80042678:	00000000 	nop
8004267c:	3c01810a 	lui	at,0x810a
80042680:	2424be2c 	addiu	a0,at,-16852
80042684:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80042688:	00000000 	nop
8004268c:	8fa1002c 	lw	at,44(sp)
80042690:	8fa30064 	lw	v1,100(sp)
80042694:	afa30010 	sw	v1,16(sp)
80042698:	8fa20068 	lw	v0,104(sp)
8004269c:	afa20014 	sw	v0,20(sp)
800426a0:	afa30084 	sw	v1,132(sp)
800426a4:	afa20088 	sw	v0,136(sp)
                    self.buf.write_str(s)?;
800426a8:	8c240014 	lw	a0,20(at)
800426ac:	8c210018 	lw	at,24(at)
800426b0:	8fa50040 	lw	a1,64(sp)
800426b4:	8fa60044 	lw	a2,68(sp)
800426b8:	8c39000c 	lw	t9,12(at)
800426bc:	0320f809 	jalr	t9
800426c0:	00000000 	nop
800426c4:	00402025 	move	a0,v0
800426c8:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
800426cc:	00000000 	nop
800426d0:	a3a2006f 	sb	v0,111(sp)
800426d4:	93a1006f 	lbu	at,111(sp)
800426d8:	30210001 	andi	at,at,0x1
800426dc:	1020000a 	beqz	at,80042708 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x340>
800426e0:	00000000 	nop
800426e4:	080109ca 	j	80042728 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x360>
800426e8:	00000000 	nop
                    let post_padding = self.padding(width - chars_count, align)?;
800426ec:	3c01810a 	lui	at,0x810a
800426f0:	2424be4c 	addiu	a0,at,-16820
800426f4:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
800426f8:	00000000 	nop
800426fc:	a3a2003f 	sb	v0,63(sp)
80042700:	08010972 	j	800425c8 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x200>
80042704:	00000000 	nop
                    post_padding.write(self)
80042708:	8fa6002c 	lw	a2,44(sp)
8004270c:	8fa50014 	lw	a1,20(sp)
80042710:	8fa40010 	lw	a0,16(sp)
80042714:	0c0106a6 	jal	80041a98 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E>
80042718:	00000000 	nop
8004271c:	a3a2003f 	sb	v0,63(sp)
80042720:	08010972 	j	800425c8 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x200>
80042724:	00000000 	nop
                    self.buf.write_str(s)?;
80042728:	3c01810a 	lui	at,0x810a
8004272c:	2424be3c 	addiu	a0,at,-16836
80042730:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80042734:	00000000 	nop
80042738:	a3a2003f 	sb	v0,63(sp)
8004273c:	08010972 	j	800425c8 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x200>
80042740:	00000000 	nop

80042744 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE>:
    pub(crate) fn padding(
80042744:	27bdff80 	addiu	sp,sp,-128
80042748:	afbf007c 	sw	ra,124(sp)
8004274c:	afa50024 	sw	a1,36(sp)
80042750:	afa40028 	sw	a0,40(sp)
80042754:	00c00825 	move	at,a2
80042758:	afa1002c 	sw	at,44(sp)
            self.buf.write_char(self.fill)?;
8004275c:	afa40068 	sw	a0,104(sp)
80042760:	afa5006c 	sw	a1,108(sp)
80042764:	a3a60073 	sb	a2,115(sp)
        let align = match self.align {
80042768:	90810020 	lbu	at,32(a0)
8004276c:	afa10030 	sw	at,48(sp)
80042770:	8fa10030 	lw	at,48(sp)
80042774:	00010880 	sll	at,at,0x2
80042778:	3c02810a 	lui	v0,0x810a
8004277c:	00220821 	addu	at,at,v0
80042780:	8c21afac 	lw	at,-20564(at)
80042784:	00200008 	jr	at
80042788:	00000000 	nop
8004278c:	0000000d 	break
80042790:	24010000 	li	at,0
            rt::Alignment::Left => Alignment::Left,
80042794:	a3a00043 	sb	zero,67(sp)
80042798:	080109f4 	j	800427d0 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x8c>
8004279c:	00000000 	nop
800427a0:	24010001 	li	at,1
            rt::Alignment::Right => Alignment::Right,
800427a4:	a3a10043 	sb	at,67(sp)
800427a8:	080109f4 	j	800427d0 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x8c>
800427ac:	00000000 	nop
800427b0:	24010002 	li	at,2
            rt::Alignment::Center => Alignment::Center,
800427b4:	a3a10043 	sb	at,67(sp)
800427b8:	080109f4 	j	800427d0 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x8c>
800427bc:	00000000 	nop
            rt::Alignment::Unknown => default,
800427c0:	8fa1002c 	lw	at,44(sp)
800427c4:	a3a10043 	sb	at,67(sp)
800427c8:	080109f4 	j	800427d0 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x8c>
800427cc:	00000000 	nop
        let (pre_pad, post_pad) = match align {
800427d0:	93a10043 	lbu	at,67(sp)
800427d4:	afa10020 	sw	at,32(sp)
800427d8:	1020000b 	beqz	at,80042808 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0xc4>
800427dc:	00000000 	nop
800427e0:	080109fa 	j	800427e8 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0xa4>
800427e4:	00000000 	nop
800427e8:	8fa10020 	lw	at,32(sp)
800427ec:	24020001 	li	v0,1
800427f0:	1022000a 	beq	at,v0,8004281c <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0xd8>
800427f4:	00000000 	nop
800427f8:	08010a00 	j	80042800 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0xbc>
800427fc:	00000000 	nop
80042800:	08010a0c 	j	80042830 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0xec>
80042804:	00000000 	nop
            Alignment::Left => (0, padding),
80042808:	8fa10024 	lw	at,36(sp)
8004280c:	afa00044 	sw	zero,68(sp)
80042810:	afa10048 	sw	at,72(sp)
80042814:	08010a15 	j	80042854 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x110>
80042818:	00000000 	nop
            Alignment::Right => (padding, 0),
8004281c:	8fa10024 	lw	at,36(sp)
80042820:	afa10044 	sw	at,68(sp)
80042824:	afa00048 	sw	zero,72(sp)
80042828:	08010a15 	j	80042854 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x110>
8004282c:	00000000 	nop
            Alignment::Center => (padding / 2, (padding + 1) / 2),
80042830:	8fa10024 	lw	at,36(sp)
80042834:	00011042 	srl	v0,at,0x1
80042838:	afa20018 	sw	v0,24(sp)
8004283c:	24210001 	addiu	at,at,1
80042840:	afa1001c 	sw	at,28(sp)
80042844:	10200019 	beqz	at,800428ac <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x168>
80042848:	00000000 	nop
8004284c:	08010a24 	j	80042890 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x14c>
80042850:	00000000 	nop
        let (pre_pad, post_pad) = match align {
80042854:	8fa10044 	lw	at,68(sp)
80042858:	afa10074 	sw	at,116(sp)
8004285c:	8fa20048 	lw	v0,72(sp)
80042860:	afa20014 	sw	v0,20(sp)
80042864:	afa20078 	sw	v0,120(sp)
        for _ in 0..pre_pad {
80042868:	afa0004c 	sw	zero,76(sp)
8004286c:	afa10050 	sw	at,80(sp)
80042870:	8fa4004c 	lw	a0,76(sp)
80042874:	8fa50050 	lw	a1,80(sp)
80042878:	0c00f80b 	jal	8003e02c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h08672f7f2dd54636E>
8004287c:	00000000 	nop
80042880:	afa20054 	sw	v0,84(sp)
80042884:	afa30058 	sw	v1,88(sp)
80042888:	08010a2f 	j	800428bc <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x178>
8004288c:	00000000 	nop
            Alignment::Center => (padding / 2, (padding + 1) / 2),
80042890:	8fa20018 	lw	v0,24(sp)
80042894:	8fa1001c 	lw	at,28(sp)
80042898:	00010842 	srl	at,at,0x1
8004289c:	afa20044 	sw	v0,68(sp)
800428a0:	afa10048 	sw	at,72(sp)
800428a4:	08010a15 	j	80042854 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x110>
800428a8:	00000000 	nop
800428ac:	3c01810a 	lui	at,0x810a
800428b0:	2424be5c 	addiu	a0,at,-16804
800428b4:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800428b8:	00000000 	nop
800428bc:	27a40054 	addiu	a0,sp,84
        for _ in 0..pre_pad {
800428c0:	0c00f802 	jal	8003e008 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h77596a36d38db716E>
800428c4:	00000000 	nop
800428c8:	afa2005c 	sw	v0,92(sp)
800428cc:	afa30060 	sw	v1,96(sp)
800428d0:	8fa1005c 	lw	at,92(sp)
800428d4:	1420000c 	bnez	at,80042908 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x1c4>
800428d8:	00000000 	nop
800428dc:	08010a39 	j	800428e4 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x1a0>
800428e0:	00000000 	nop
        Ok(PostPadding::new(self.fill, post_pad))
800428e4:	8fa50014 	lw	a1,20(sp)
800428e8:	8fa10028 	lw	at,40(sp)
800428ec:	8c240010 	lw	a0,16(at)
800428f0:	0c01069c 	jal	80041a70 <_ZN4core3fmt11PostPadding3new17h08745825ff7a709cE>
800428f4:	00000000 	nop
800428f8:	afa20038 	sw	v0,56(sp)
800428fc:	afa3003c 	sw	v1,60(sp)
    }
80042900:	08010a53 	j	8004294c <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x208>
80042904:	00000000 	nop
            self.buf.write_char(self.fill)?;
80042908:	8fa20028 	lw	v0,40(sp)
8004290c:	8c440014 	lw	a0,20(v0)
80042910:	8c410018 	lw	at,24(v0)
80042914:	8c450010 	lw	a1,16(v0)
80042918:	8c390010 	lw	t9,16(at)
8004291c:	0320f809 	jalr	t9
80042920:	00000000 	nop
80042924:	00402025 	move	a0,v0
80042928:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8004292c:	00000000 	nop
80042930:	a3a20067 	sb	v0,103(sp)
80042934:	93a10067 	lbu	at,103(sp)
80042938:	30210001 	andi	at,at,0x1
8004293c:	1020ffdf 	beqz	at,800428bc <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x178>
80042940:	00000000 	nop
80042944:	08010a59 	j	80042964 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x220>
80042948:	00000000 	nop
    }
8004294c:	8fa20038 	lw	v0,56(sp)
80042950:	8fa3003c 	lw	v1,60(sp)
80042954:	8fbf007c 	lw	ra,124(sp)
80042958:	27bd0080 	addiu	sp,sp,128
8004295c:	03e00008 	jr	ra
80042960:	00000000 	nop
            self.buf.write_char(self.fill)?;
80042964:	3c01810a 	lui	at,0x810a
80042968:	2424be6c 	addiu	a0,at,-16788
8004296c:	0c00fe17 	jal	8003f85c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h5e97ed1aef6b568cE>
80042970:	00000000 	nop
80042974:	afa20038 	sw	v0,56(sp)
80042978:	afa3003c 	sw	v1,60(sp)
8004297c:	08010a53 	j	8004294c <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x208>
80042980:	00000000 	nop

80042984 <_ZN4core3fmt9Formatter9write_str17h2077d209297f8673E>:
    pub fn write_str(&mut self, data: &str) -> Result {
80042984:	27bdffe0 	addiu	sp,sp,-32
80042988:	afbf001c 	sw	ra,28(sp)
8004298c:	00800825 	move	at,a0
80042990:	afa10010 	sw	at,16(sp)
80042994:	afa50014 	sw	a1,20(sp)
80042998:	afa60018 	sw	a2,24(sp)
        self.buf.write_str(data)
8004299c:	8c240014 	lw	a0,20(at)
800429a0:	8c210018 	lw	at,24(at)
800429a4:	8c39000c 	lw	t9,12(at)
800429a8:	0320f809 	jalr	t9
800429ac:	00000000 	nop
    }
800429b0:	8fbf001c 	lw	ra,28(sp)
800429b4:	27bd0020 	addiu	sp,sp,32
800429b8:	03e00008 	jr	ra
800429bc:	00000000 	nop

800429c0 <_ZN4core3fmt9Formatter9write_fmt17h7d294feef253c98cE>:
    pub fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result {
800429c0:	27bdffb0 	addiu	sp,sp,-80
800429c4:	afbf004c 	sw	ra,76(sp)
800429c8:	afa50014 	sw	a1,20(sp)
800429cc:	00800825 	move	at,a0
800429d0:	8fa40014 	lw	a0,20(sp)
800429d4:	afa10018 	sw	at,24(sp)
800429d8:	afa10040 	sw	at,64(sp)
        if let Some(s) = fmt.as_statically_known_str() {
800429dc:	0c010490 	jal	80041240 <_ZN4core3fmt9Arguments23as_statically_known_str17hd9501a45a7712a76E>
800429e0:	00000000 	nop
800429e4:	afa20020 	sw	v0,32(sp)
800429e8:	afa30024 	sw	v1,36(sp)
800429ec:	8fa10020 	lw	at,32(sp)
800429f0:	10200010 	beqz	at,80042a34 <_ZN4core3fmt9Formatter9write_fmt17h7d294feef253c98cE+0x74>
800429f4:	00000000 	nop
800429f8:	08010a80 	j	80042a00 <_ZN4core3fmt9Formatter9write_fmt17h7d294feef253c98cE+0x40>
800429fc:	00000000 	nop
80042a00:	8fa10018 	lw	at,24(sp)
80042a04:	8fa50020 	lw	a1,32(sp)
80042a08:	8fa60024 	lw	a2,36(sp)
80042a0c:	afa50044 	sw	a1,68(sp)
80042a10:	afa60048 	sw	a2,72(sp)
            self.buf.write_str(s)
80042a14:	8c240014 	lw	a0,20(at)
80042a18:	8c210018 	lw	at,24(at)
80042a1c:	8c39000c 	lw	t9,12(at)
80042a20:	0320f809 	jalr	t9
80042a24:	00000000 	nop
80042a28:	a3a2001f 	sb	v0,31(sp)
80042a2c:	08010aa3 	j	80042a8c <_ZN4core3fmt9Formatter9write_fmt17h7d294feef253c98cE+0xcc>
80042a30:	00000000 	nop
            write(self.buf, fmt)
80042a34:	8fa10014 	lw	at,20(sp)
80042a38:	8fa20018 	lw	v0,24(sp)
80042a3c:	8c440014 	lw	a0,20(v0)
80042a40:	8c450018 	lw	a1,24(v0)
80042a44:	8c220014 	lw	v0,20(at)
80042a48:	afa2003c 	sw	v0,60(sp)
80042a4c:	8c220010 	lw	v0,16(at)
80042a50:	afa20038 	sw	v0,56(sp)
80042a54:	8c22000c 	lw	v0,12(at)
80042a58:	afa20034 	sw	v0,52(sp)
80042a5c:	8c220008 	lw	v0,8(at)
80042a60:	afa20030 	sw	v0,48(sp)
80042a64:	8c220004 	lw	v0,4(at)
80042a68:	afa2002c 	sw	v0,44(sp)
80042a6c:	8c210000 	lw	at,0(at)
80042a70:	afa10028 	sw	at,40(sp)
80042a74:	27a60028 	addiu	a2,sp,40
80042a78:	0c0104cb 	jal	8004132c <_ZN4core3fmt5write17h6036e54969122141E>
80042a7c:	00000000 	nop
80042a80:	a3a2001f 	sb	v0,31(sp)
80042a84:	08010aa3 	j	80042a8c <_ZN4core3fmt9Formatter9write_fmt17h7d294feef253c98cE+0xcc>
80042a88:	00000000 	nop
    }
80042a8c:	93a1001f 	lbu	at,31(sp)
80042a90:	30220001 	andi	v0,at,0x1
80042a94:	8fbf004c 	lw	ra,76(sp)
80042a98:	27bd0050 	addiu	sp,sp,80
80042a9c:	03e00008 	jr	ra
80042aa0:	00000000 	nop

80042aa4 <_ZN4core3fmt9Formatter9sign_plus17hea17fcfa5b72c758E>:
    pub fn sign_plus(&self) -> bool {
80042aa4:	27bdfff8 	addiu	sp,sp,-8
80042aa8:	afa40004 	sw	a0,4(sp)
        self.flags & (1 << rt::Flag::SignPlus as u32) != 0
80042aac:	8c81001c 	lw	at,28(a0)
80042ab0:	30220001 	andi	v0,at,0x1
80042ab4:	27bd0008 	addiu	sp,sp,8
    }
80042ab8:	03e00008 	jr	ra
80042abc:	00000000 	nop

80042ac0 <_ZN4core3fmt9Formatter9alternate17h2b08e2c940b48bcaE>:
    pub fn alternate(&self) -> bool {
80042ac0:	27bdfff8 	addiu	sp,sp,-8
80042ac4:	afa40004 	sw	a0,4(sp)
        self.flags & (1 << rt::Flag::Alternate as u32) != 0
80042ac8:	9081001c 	lbu	at,28(a0)
80042acc:	30210004 	andi	at,at,0x4
80042ad0:	00011082 	srl	v0,at,0x2
80042ad4:	27bd0008 	addiu	sp,sp,8
    }
80042ad8:	03e00008 	jr	ra
80042adc:	00000000 	nop

80042ae0 <_ZN4core3fmt9Formatter19sign_aware_zero_pad17h321b41f12d0477a7E>:
    pub fn sign_aware_zero_pad(&self) -> bool {
80042ae0:	27bdfff8 	addiu	sp,sp,-8
80042ae4:	afa40004 	sw	a0,4(sp)
        self.flags & (1 << rt::Flag::SignAwareZeroPad as u32) != 0
80042ae8:	9081001c 	lbu	at,28(a0)
80042aec:	30210008 	andi	at,at,0x8
80042af0:	000110c2 	srl	v0,at,0x3
80042af4:	27bd0008 	addiu	sp,sp,8
    }
80042af8:	03e00008 	jr	ra
80042afc:	00000000 	nop

80042b00 <_ZN4core3fmt9Formatter15debug_lower_hex17h09a19bcedc4d5af7E>:
    fn debug_lower_hex(&self) -> bool {
80042b00:	27bdfff8 	addiu	sp,sp,-8
80042b04:	afa40004 	sw	a0,4(sp)
        self.flags & (1 << rt::Flag::DebugLowerHex as u32) != 0
80042b08:	9081001c 	lbu	at,28(a0)
80042b0c:	30210010 	andi	at,at,0x10
80042b10:	00011102 	srl	v0,at,0x4
80042b14:	27bd0008 	addiu	sp,sp,8
    }
80042b18:	03e00008 	jr	ra
80042b1c:	00000000 	nop

80042b20 <_ZN4core3fmt9Formatter15debug_upper_hex17h021fe51b661c830dE>:
    fn debug_upper_hex(&self) -> bool {
80042b20:	27bdfff8 	addiu	sp,sp,-8
80042b24:	afa40004 	sw	a0,4(sp)
        self.flags & (1 << rt::Flag::DebugUpperHex as u32) != 0
80042b28:	9081001c 	lbu	at,28(a0)
80042b2c:	30210020 	andi	at,at,0x20
80042b30:	00011142 	srl	v0,at,0x5
80042b34:	27bd0008 	addiu	sp,sp,8
    }
80042b38:	03e00008 	jr	ra
80042b3c:	00000000 	nop

80042b40 <_ZN4core3fmt9Formatter12debug_struct17h6504f7339d778b3dE>:
    pub fn debug_struct<'b>(&'b mut self, name: &str) -> DebugStruct<'b, 'a> {
80042b40:	27bdffd8 	addiu	sp,sp,-40
80042b44:	afbf0024 	sw	ra,36(sp)
80042b48:	00800825 	move	at,a0
80042b4c:	afa10014 	sw	at,20(sp)
80042b50:	afa50018 	sw	a1,24(sp)
80042b54:	afa6001c 	sw	a2,28(sp)
80042b58:	afa70020 	sw	a3,32(sp)
        builders::debug_struct_new(self, name)
80042b5c:	0c00fe64 	jal	8003f990 <_ZN4core3fmt8builders16debug_struct_new17h94cb061567626803E>
80042b60:	00000000 	nop
80042b64:	8fa20014 	lw	v0,20(sp)
    }
80042b68:	8fbf0024 	lw	ra,36(sp)
80042b6c:	27bd0028 	addiu	sp,sp,40
80042b70:	03e00008 	jr	ra
80042b74:	00000000 	nop

80042b78 <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$10write_char17hce317d8c45d1f9c9E>:
    fn write_char(&mut self, c: char) -> Result {
80042b78:	27bdffe0 	addiu	sp,sp,-32
80042b7c:	afbf001c 	sw	ra,28(sp)
80042b80:	00800825 	move	at,a0
80042b84:	afa10014 	sw	at,20(sp)
80042b88:	afa50018 	sw	a1,24(sp)
        self.buf.write_char(c)
80042b8c:	8c240014 	lw	a0,20(at)
80042b90:	8c210018 	lw	at,24(at)
80042b94:	8c390010 	lw	t9,16(at)
80042b98:	0320f809 	jalr	t9
80042b9c:	00000000 	nop
    }
80042ba0:	8fbf001c 	lw	ra,28(sp)
80042ba4:	27bd0020 	addiu	sp,sp,32
80042ba8:	03e00008 	jr	ra
80042bac:	00000000 	nop

80042bb0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E>:
    }
}

#[stable(feature = "rust1", since = "1.0.0")]
impl Debug for str {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
80042bb0:	27bdff20 	addiu	sp,sp,-224
80042bb4:	afbf00dc 	sw	ra,220(sp)
80042bb8:	afa60034 	sw	a2,52(sp)
80042bbc:	afa50030 	sw	a1,48(sp)
80042bc0:	00800825 	move	at,a0
80042bc4:	8fa40034 	lw	a0,52(sp)
80042bc8:	afa10038 	sw	at,56(sp)
                    f.write_char(c)?;
                }
                from = i + c.len_utf8();
            }
        }
        f.write_str(&self[from..])?;
80042bcc:	afa100c0 	sw	at,192(sp)
80042bd0:	afa500c4 	sw	a1,196(sp)
80042bd4:	afa400c8 	sw	a0,200(sp)
80042bd8:	24050022 	li	a1,34
        f.write_char('"')?;
80042bdc:	0c010ade 	jal	80042b78 <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$10write_char17hce317d8c45d1f9c9E>
80042be0:	00000000 	nop
80042be4:	00402025 	move	a0,v0
80042be8:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80042bec:	00000000 	nop
80042bf0:	a3a20047 	sb	v0,71(sp)
80042bf4:	93a10047 	lbu	at,71(sp)
80042bf8:	30210001 	andi	at,at,0x1
80042bfc:	14200016 	bnez	at,80042c58 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0xa8>
80042c00:	00000000 	nop
80042c04:	08010b03 	j	80042c0c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x5c>
80042c08:	00000000 	nop
        let mut from = 0;
80042c0c:	8fa60030 	lw	a2,48(sp)
80042c10:	8fa50038 	lw	a1,56(sp)
80042c14:	afa00048 	sw	zero,72(sp)
80042c18:	27a40058 	addiu	a0,sp,88
80042c1c:	afa4002c 	sw	a0,44(sp)
        for (i, c) in self.char_indices() {
80042c20:	0c011cc8 	jal	80047320 <_ZN4core3str21_$LT$impl$u20$str$GT$12char_indices17hbaf3c99ff2948506E>
80042c24:	00000000 	nop
80042c28:	8fa5002c 	lw	a1,44(sp)
80042c2c:	27a4004c 	addiu	a0,sp,76
80042c30:	0c00f825 	jal	8003e094 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h995e6662883fadcfE>
80042c34:	00000000 	nop
80042c38:	8fa10054 	lw	at,84(sp)
80042c3c:	afa1006c 	sw	at,108(sp)
80042c40:	8fa10050 	lw	at,80(sp)
80042c44:	afa10068 	sw	at,104(sp)
80042c48:	8fa1004c 	lw	at,76(sp)
80042c4c:	afa10064 	sw	at,100(sp)
80042c50:	08010b1d 	j	80042c74 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0xc4>
80042c54:	00000000 	nop
        f.write_char('"')?;
80042c58:	3c01810a 	lui	at,0x810a
80042c5c:	2424bedc 	addiu	a0,at,-16676
80042c60:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80042c64:	00000000 	nop
80042c68:	a3a20046 	sb	v0,70(sp)
80042c6c:	08010b71 	j	80042dc4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x214>
80042c70:	00000000 	nop
80042c74:	27a40064 	addiu	a0,sp,100
        for (i, c) in self.char_indices() {
80042c78:	0c0117f3 	jal	80045fcc <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE>
80042c7c:	00000000 	nop
80042c80:	afa20070 	sw	v0,112(sp)
80042c84:	afa30074 	sw	v1,116(sp)
80042c88:	8fa10074 	lw	at,116(sp)
80042c8c:	3c020011 	lui	v0,0x11
80042c90:	1422001b 	bne	at,v0,80042d00 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x150>
80042c94:	00000000 	nop
80042c98:	08010b28 	j	80042ca0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0xf0>
80042c9c:	00000000 	nop
        f.write_str(&self[from..])?;
80042ca0:	8fa50030 	lw	a1,48(sp)
80042ca4:	8fa40038 	lw	a0,56(sp)
80042ca8:	8fa10048 	lw	at,72(sp)
80042cac:	afa100bc 	sw	at,188(sp)
80042cb0:	8fa600bc 	lw	a2,188(sp)
80042cb4:	3c01810a 	lui	at,0x810a
80042cb8:	2427be7c 	addiu	a3,at,-16772
80042cbc:	0c011866 	jal	80046198 <_ZN4core3str6traits66_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$str$GT$5index17h530a1160dbfa1a41E>
80042cc0:	00000000 	nop
80042cc4:	8fa40034 	lw	a0,52(sp)
80042cc8:	00402825 	move	a1,v0
80042ccc:	00603025 	move	a2,v1
80042cd0:	0c010a61 	jal	80042984 <_ZN4core3fmt9Formatter9write_str17h2077d209297f8673E>
80042cd4:	00000000 	nop
80042cd8:	00402025 	move	a0,v0
80042cdc:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80042ce0:	00000000 	nop
80042ce4:	a3a200bb 	sb	v0,187(sp)
80042ce8:	93a100bb 	lbu	at,187(sp)
80042cec:	30210001 	andi	at,at,0x1
80042cf0:	10200026 	beqz	at,80042d8c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x1dc>
80042cf4:	00000000 	nop
80042cf8:	08010b6a 	j	80042da8 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x1f8>
80042cfc:	00000000 	nop
        for (i, c) in self.char_indices() {
80042d00:	8fa10070 	lw	at,112(sp)
80042d04:	afa1001c 	sw	at,28(sp)
80042d08:	afa100cc 	sw	at,204(sp)
80042d0c:	8fa50074 	lw	a1,116(sp)
80042d10:	afa50020 	sw	a1,32(sp)
80042d14:	afa500d0 	sw	a1,208(sp)
80042d18:	24010001 	li	at,1
80042d1c:	afa10028 	sw	at,40(sp)
            let esc = c.escape_debug_ext(EscapeDebugExtArgs {
80042d20:	a3a10084 	sb	at,132(sp)
80042d24:	24020000 	li	v0,0
80042d28:	a3a00085 	sb	zero,133(sp)
80042d2c:	a3a10086 	sb	at,134(sp)
80042d30:	93a10086 	lbu	at,134(sp)
80042d34:	a3a100d6 	sb	at,214(sp)
80042d38:	93a10085 	lbu	at,133(sp)
80042d3c:	00010a00 	sll	at,at,0x8
80042d40:	93a20084 	lbu	v0,132(sp)
80042d44:	00220825 	or	at,at,v0
80042d48:	a7a100d4 	sh	at,212(sp)
80042d4c:	93a100d6 	lbu	at,214(sp)
80042d50:	00011400 	sll	v0,at,0x10
80042d54:	97a100d4 	lhu	at,212(sp)
80042d58:	00223025 	or	a2,at,v0
80042d5c:	27a40078 	addiu	a0,sp,120
80042d60:	afa40024 	sw	a0,36(sp)
80042d64:	0c00f4b7 	jal	8003d2dc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E>
80042d68:	00000000 	nop
80042d6c:	8fa40024 	lw	a0,36(sp)
            if esc.len() != 1 {
80042d70:	0c00f676 	jal	8003d9d8 <_ZN93_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..exact_size..ExactSizeIterator$GT$3len17hf4bcfdda21cc47c0E>
80042d74:	00000000 	nop
80042d78:	8fa10028 	lw	at,40(sp)
80042d7c:	1041ffbd 	beq	v0,at,80042c74 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0xc4>
80042d80:	00000000 	nop
80042d84:	08010b77 	j	80042ddc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x22c>
80042d88:	00000000 	nop
        f.write_char('"')
80042d8c:	8fa40034 	lw	a0,52(sp)
80042d90:	24050022 	li	a1,34
80042d94:	0c010ade 	jal	80042b78 <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$10write_char17hce317d8c45d1f9c9E>
80042d98:	00000000 	nop
80042d9c:	a3a20046 	sb	v0,70(sp)
80042da0:	08010b71 	j	80042dc4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x214>
80042da4:	00000000 	nop
        f.write_str(&self[from..])?;
80042da8:	3c01810a 	lui	at,0x810a
80042dac:	2424be8c 	addiu	a0,at,-16756
80042db0:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80042db4:	00000000 	nop
80042db8:	a3a20046 	sb	v0,70(sp)
80042dbc:	08010b71 	j	80042dc4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x214>
80042dc0:	00000000 	nop
    }
80042dc4:	93a10046 	lbu	at,70(sp)
80042dc8:	30220001 	andi	v0,at,0x1
80042dcc:	8fbf00dc 	lw	ra,220(sp)
80042dd0:	27bd00e0 	addiu	sp,sp,224
80042dd4:	03e00008 	jr	ra
80042dd8:	00000000 	nop
                f.write_str(&self[from..i])?;
80042ddc:	8fa50030 	lw	a1,48(sp)
80042de0:	8fa40038 	lw	a0,56(sp)
80042de4:	8fa1001c 	lw	at,28(sp)
80042de8:	8fa20048 	lw	v0,72(sp)
80042dec:	afa20088 	sw	v0,136(sp)
80042df0:	afa1008c 	sw	at,140(sp)
80042df4:	8fa60088 	lw	a2,136(sp)
80042df8:	8fa7008c 	lw	a3,140(sp)
80042dfc:	3c01810a 	lui	at,0x810a
80042e00:	2421be9c 	addiu	at,at,-16740
80042e04:	03a01025 	move	v0,sp
80042e08:	ac410010 	sw	at,16(v0)
80042e0c:	0c011851 	jal	80046144 <_ZN4core3str6traits66_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$str$GT$5index17h3aebf7787939ace3E>
80042e10:	00000000 	nop
80042e14:	8fa40034 	lw	a0,52(sp)
80042e18:	00402825 	move	a1,v0
80042e1c:	00603025 	move	a2,v1
80042e20:	0c010a61 	jal	80042984 <_ZN4core3fmt9Formatter9write_str17h2077d209297f8673E>
80042e24:	00000000 	nop
80042e28:	00402025 	move	a0,v0
80042e2c:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80042e30:	00000000 	nop
80042e34:	a3a20087 	sb	v0,135(sp)
80042e38:	93a10087 	lbu	at,135(sp)
80042e3c:	30210001 	andi	at,at,0x1
80042e40:	14200015 	bnez	at,80042e98 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x2e8>
80042e44:	00000000 	nop
80042e48:	08010b94 	j	80042e50 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x2a0>
80042e4c:	00000000 	nop
                for c in esc {
80042e50:	8fa10080 	lw	at,128(sp)
80042e54:	afa100a4 	sw	at,164(sp)
80042e58:	8fa1007c 	lw	at,124(sp)
80042e5c:	afa100a0 	sw	at,160(sp)
80042e60:	8fa10078 	lw	at,120(sp)
80042e64:	afa1009c 	sw	at,156(sp)
80042e68:	27a40090 	addiu	a0,sp,144
80042e6c:	27a5009c 	addiu	a1,sp,156
80042e70:	0c00f82e 	jal	8003e0b8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hab92d4a309fc1853E>
80042e74:	00000000 	nop
80042e78:	8fa10098 	lw	at,152(sp)
80042e7c:	afa100b0 	sw	at,176(sp)
80042e80:	8fa10094 	lw	at,148(sp)
80042e84:	afa100ac 	sw	at,172(sp)
80042e88:	8fa10090 	lw	at,144(sp)
80042e8c:	afa100a8 	sw	at,168(sp)
80042e90:	08010bad 	j	80042eb4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x304>
80042e94:	00000000 	nop
                f.write_str(&self[from..i])?;
80042e98:	3c01810a 	lui	at,0x810a
80042e9c:	2424becc 	addiu	a0,at,-16692
80042ea0:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80042ea4:	00000000 	nop
80042ea8:	a3a20046 	sb	v0,70(sp)
80042eac:	08010b71 	j	80042dc4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x214>
80042eb0:	00000000 	nop
80042eb4:	27a400a8 	addiu	a0,sp,168
                for c in esc {
80042eb8:	0c00f652 	jal	8003d948 <_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4482fd071e18f61bE>
80042ebc:	00000000 	nop
80042ec0:	afa200b4 	sw	v0,180(sp)
80042ec4:	8fa100b4 	lw	at,180(sp)
80042ec8:	3c020011 	lui	v0,0x11
80042ecc:	1422000f 	bne	at,v0,80042f0c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x35c>
80042ed0:	00000000 	nop
80042ed4:	08010bb7 	j	80042edc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x32c>
80042ed8:	00000000 	nop
                from = i + c.len_utf8();
80042edc:	8fa40020 	lw	a0,32(sp)
80042ee0:	0c00f565 	jal	8003d594 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$8len_utf817hb6087b2bc95d3ee8E>
80042ee4:	00000000 	nop
80042ee8:	00400825 	move	at,v0
80042eec:	8fa2001c 	lw	v0,28(sp)
80042ef0:	00410821 	addu	at,v0,at
80042ef4:	afa10018 	sw	at,24(sp)
80042ef8:	0022082b 	sltu	at,at,v0
80042efc:	14200016 	bnez	at,80042f58 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x3a8>
80042f00:	00000000 	nop
80042f04:	08010bd2 	j	80042f48 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x398>
80042f08:	00000000 	nop
                for c in esc {
80042f0c:	8fa40034 	lw	a0,52(sp)
80042f10:	8fa500b4 	lw	a1,180(sp)
80042f14:	afa500d8 	sw	a1,216(sp)
                    f.write_char(c)?;
80042f18:	0c010ade 	jal	80042b78 <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$10write_char17hce317d8c45d1f9c9E>
80042f1c:	00000000 	nop
80042f20:	00402025 	move	a0,v0
80042f24:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80042f28:	00000000 	nop
80042f2c:	a3a200ba 	sb	v0,186(sp)
80042f30:	93a100ba 	lbu	at,186(sp)
80042f34:	30210001 	andi	at,at,0x1
80042f38:	1020ffde 	beqz	at,80042eb4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x304>
80042f3c:	00000000 	nop
80042f40:	08010bda 	j	80042f68 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x3b8>
80042f44:	00000000 	nop
                from = i + c.len_utf8();
80042f48:	8fa10018 	lw	at,24(sp)
80042f4c:	afa10048 	sw	at,72(sp)
            if esc.len() != 1 {
80042f50:	08010b1d 	j	80042c74 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0xc4>
80042f54:	00000000 	nop
                from = i + c.len_utf8();
80042f58:	3c01810a 	lui	at,0x810a
80042f5c:	2424beac 	addiu	a0,at,-16724
80042f60:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80042f64:	00000000 	nop
                    f.write_char(c)?;
80042f68:	3c01810a 	lui	at,0x810a
80042f6c:	2424bebc 	addiu	a0,at,-16708
80042f70:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80042f74:	00000000 	nop
80042f78:	a3a20046 	sb	v0,70(sp)
80042f7c:	08010b71 	j	80042dc4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x214>
80042f80:	00000000 	nop

80042f84 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h9fa5bfb18ba922eeE>:
}

#[stable(feature = "rust1", since = "1.0.0")]
impl Display for str {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
80042f84:	27bdffd8 	addiu	sp,sp,-40
80042f88:	afbf0024 	sw	ra,36(sp)
80042f8c:	afa60014 	sw	a2,20(sp)
80042f90:	00a03025 	move	a2,a1
80042f94:	00802825 	move	a1,a0
80042f98:	8fa40014 	lw	a0,20(sp)
80042f9c:	afa50018 	sw	a1,24(sp)
80042fa0:	afa6001c 	sw	a2,28(sp)
80042fa4:	afa40020 	sw	a0,32(sp)
        f.pad(self)
80042fa8:	0c0108f2 	jal	800423c8 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E>
80042fac:	00000000 	nop
    }
80042fb0:	8fbf0024 	lw	ra,36(sp)
80042fb4:	27bd0028 	addiu	sp,sp,40
80042fb8:	03e00008 	jr	ra
80042fbc:	00000000 	nop

80042fc0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE>:
}

#[stable(feature = "rust1", since = "1.0.0")]
impl Debug for char {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
80042fc0:	27bdff98 	addiu	sp,sp,-104
80042fc4:	afbf0064 	sw	ra,100(sp)
80042fc8:	afa50014 	sw	a1,20(sp)
80042fcc:	00800825 	move	at,a0
80042fd0:	8fa40014 	lw	a0,20(sp)
80042fd4:	afa10018 	sw	at,24(sp)
        for c in self.escape_debug_ext(EscapeDebugExtArgs {
            escape_grapheme_extended: true,
            escape_single_quote: true,
            escape_double_quote: false,
        }) {
            f.write_char(c)?
80042fd8:	afa10054 	sw	at,84(sp)
80042fdc:	afa40058 	sw	a0,88(sp)
80042fe0:	24050027 	li	a1,39
        f.write_char('\'')?;
80042fe4:	0c010ade 	jal	80042b78 <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$10write_char17hce317d8c45d1f9c9E>
80042fe8:	00000000 	nop
80042fec:	00402025 	move	a0,v0
80042ff0:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80042ff4:	00000000 	nop
80042ff8:	a3a20023 	sb	v0,35(sp)
80042ffc:	93a10023 	lbu	at,35(sp)
80043000:	30210001 	andi	at,at,0x1
80043004:	14200025 	bnez	at,8004309c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0xdc>
80043008:	00000000 	nop
8004300c:	08010c05 	j	80043014 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0x54>
80043010:	00000000 	nop
        for c in self.escape_debug_ext(EscapeDebugExtArgs {
80043014:	8fa10018 	lw	at,24(sp)
80043018:	8c250000 	lw	a1,0(at)
8004301c:	24010001 	li	at,1
80043020:	a3a1003d 	sb	at,61(sp)
80043024:	a3a1003e 	sb	at,62(sp)
80043028:	24010000 	li	at,0
8004302c:	a3a0003f 	sb	zero,63(sp)
80043030:	93a1003f 	lbu	at,63(sp)
80043034:	a3a1005e 	sb	at,94(sp)
80043038:	93a1003e 	lbu	at,62(sp)
8004303c:	00010a00 	sll	at,at,0x8
80043040:	93a2003d 	lbu	v0,61(sp)
80043044:	00220825 	or	at,at,v0
80043048:	a7a1005c 	sh	at,92(sp)
8004304c:	93a1005e 	lbu	at,94(sp)
80043050:	00011400 	sll	v0,at,0x10
80043054:	97a1005c 	lhu	at,92(sp)
80043058:	00223025 	or	a2,at,v0
8004305c:	27a40030 	addiu	a0,sp,48
80043060:	afa40010 	sw	a0,16(sp)
80043064:	0c00f4b7 	jal	8003d2dc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E>
80043068:	00000000 	nop
8004306c:	8fa50010 	lw	a1,16(sp)
80043070:	27a40024 	addiu	a0,sp,36
80043074:	0c00f82e 	jal	8003e0b8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hab92d4a309fc1853E>
80043078:	00000000 	nop
8004307c:	8fa1002c 	lw	at,44(sp)
80043080:	afa10048 	sw	at,72(sp)
80043084:	8fa10028 	lw	at,40(sp)
80043088:	afa10044 	sw	at,68(sp)
8004308c:	8fa10024 	lw	at,36(sp)
80043090:	afa10040 	sw	at,64(sp)
80043094:	08010c2e 	j	800430b8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0xf8>
80043098:	00000000 	nop
        f.write_char('\'')?;
8004309c:	3c01810a 	lui	at,0x810a
800430a0:	2424befc 	addiu	a0,at,-16644
800430a4:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
800430a8:	00000000 	nop
800430ac:	a3a20022 	sb	v0,34(sp)
800430b0:	08010c4e 	j	80043138 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0x178>
800430b4:	00000000 	nop
800430b8:	27a40040 	addiu	a0,sp,64
        for c in self.escape_debug_ext(EscapeDebugExtArgs {
800430bc:	0c00f652 	jal	8003d948 <_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4482fd071e18f61bE>
800430c0:	00000000 	nop
800430c4:	afa2004c 	sw	v0,76(sp)
800430c8:	8fa1004c 	lw	at,76(sp)
800430cc:	3c020011 	lui	v0,0x11
800430d0:	1422000a 	bne	at,v0,800430fc <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0x13c>
800430d4:	00000000 	nop
800430d8:	08010c38 	j	800430e0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0x120>
800430dc:	00000000 	nop
        }
        f.write_char('\'')
800430e0:	8fa40014 	lw	a0,20(sp)
800430e4:	24050027 	li	a1,39
800430e8:	0c010ade 	jal	80042b78 <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$10write_char17hce317d8c45d1f9c9E>
800430ec:	00000000 	nop
800430f0:	a3a20022 	sb	v0,34(sp)
800430f4:	08010c4e 	j	80043138 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0x178>
800430f8:	00000000 	nop
        for c in self.escape_debug_ext(EscapeDebugExtArgs {
800430fc:	8fa40014 	lw	a0,20(sp)
80043100:	8fa5004c 	lw	a1,76(sp)
80043104:	afa50060 	sw	a1,96(sp)
            f.write_char(c)?
80043108:	0c010ade 	jal	80042b78 <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$10write_char17hce317d8c45d1f9c9E>
8004310c:	00000000 	nop
80043110:	00402025 	move	a0,v0
80043114:	0c00fe02 	jal	8003f808 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80043118:	00000000 	nop
8004311c:	a3a20053 	sb	v0,83(sp)
80043120:	93a10053 	lbu	at,83(sp)
80043124:	30210001 	andi	at,at,0x1
80043128:	1020ffe3 	beqz	at,800430b8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0xf8>
8004312c:	00000000 	nop
80043130:	08010c54 	j	80043150 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0x190>
80043134:	00000000 	nop
    }
80043138:	93a10022 	lbu	at,34(sp)
8004313c:	30220001 	andi	v0,at,0x1
80043140:	8fbf0064 	lw	ra,100(sp)
80043144:	27bd0068 	addiu	sp,sp,104
80043148:	03e00008 	jr	ra
8004314c:	00000000 	nop
            f.write_char(c)?
80043150:	3c01810a 	lui	at,0x810a
80043154:	2424beec 	addiu	a0,at,-16660
80043158:	0c00fe1f 	jal	8003f87c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8004315c:	00000000 	nop
80043160:	a3a20022 	sb	v0,34(sp)
80043164:	08010c4e 	j	80043138 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0x178>
80043168:	00000000 	nop

8004316c <_ZN4core5slice5index26slice_start_index_len_fail17h7d16ec469bcb47d5E>:
const fn slice_start_index_len_fail(index: usize, len: usize) -> ! {
8004316c:	27bdffe0 	addiu	sp,sp,-32
80043170:	afa40018 	sw	a0,24(sp)
80043174:	afa5001c 	sw	a1,28(sp)
    const_eval_select((index, len), slice_start_index_len_fail_ct, slice_start_index_len_fail_rt)
80043178:	afa40010 	sw	a0,16(sp)
8004317c:	afa50014 	sw	a1,20(sp)
80043180:	8fa40010 	lw	a0,16(sp)
80043184:	8fa50014 	lw	a1,20(sp)
80043188:	0c010c64 	jal	80043190 <_ZN4core5slice5index29slice_start_index_len_fail_rt17h2dae12d37a6a2feeE>
8004318c:	00000000 	nop

80043190 <_ZN4core5slice5index29slice_start_index_len_fail_rt17h2dae12d37a6a2feeE>:
fn slice_start_index_len_fail_rt(index: usize, len: usize) -> ! {
80043190:	27bdff80 	addiu	sp,sp,-128
80043194:	afbf007c 	sw	ra,124(sp)
80043198:	afa60020 	sw	a2,32(sp)
8004319c:	afa40024 	sw	a0,36(sp)
800431a0:	afa50028 	sw	a1,40(sp)
800431a4:	27a20024 	addiu	v0,sp,36
800431a8:	afa20068 	sw	v0,104(sp)
800431ac:	afa20074 	sw	v0,116(sp)
800431b0:	3c018005 	lui	at,0x8005
800431b4:	2421a0f4 	addiu	at,at,-24332
800431b8:	afa10078 	sw	at,120(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
800431bc:	afa2006c 	sw	v0,108(sp)
800431c0:	afa10070 	sw	at,112(sp)
    }
800431c4:	8fa4006c 	lw	a0,108(sp)
800431c8:	8fa30070 	lw	v1,112(sp)
800431cc:	27a20028 	addiu	v0,sp,40
800431d0:	afa20054 	sw	v0,84(sp)
800431d4:	afa20060 	sw	v0,96(sp)
800431d8:	afa10064 	sw	at,100(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
800431dc:	afa20058 	sw	v0,88(sp)
800431e0:	afa1005c 	sw	at,92(sp)
    }
800431e4:	8fa20058 	lw	v0,88(sp)
800431e8:	8fa1005c 	lw	at,92(sp)
    panic!("range start index {index} out of range for slice of length {len}");
800431ec:	afa40044 	sw	a0,68(sp)
800431f0:	afa30048 	sw	v1,72(sp)
800431f4:	afa2004c 	sw	v0,76(sp)
800431f8:	afa10050 	sw	at,80(sp)
800431fc:	03a00825 	move	at,sp
80043200:	24060002 	li	a2,2
80043204:	ac260010 	sw	a2,16(at)
80043208:	3c01810a 	lui	at,0x810a
8004320c:	2425bf40 	addiu	a1,at,-16576
80043210:	27a4002c 	addiu	a0,sp,44
80043214:	afa4001c 	sw	a0,28(sp)
80043218:	27a70044 	addiu	a3,sp,68
8004321c:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
80043220:	00000000 	nop
80043224:	8fa4001c 	lw	a0,28(sp)
80043228:	8fa50020 	lw	a1,32(sp)
8004322c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80043230:	00000000 	nop

80043234 <_ZN4core5slice5index24slice_end_index_len_fail17hc8473d7595779981E>:
const fn slice_end_index_len_fail(index: usize, len: usize) -> ! {
80043234:	27bdffe0 	addiu	sp,sp,-32
80043238:	afa40018 	sw	a0,24(sp)
8004323c:	afa5001c 	sw	a1,28(sp)
    const_eval_select((index, len), slice_end_index_len_fail_ct, slice_end_index_len_fail_rt)
80043240:	afa40010 	sw	a0,16(sp)
80043244:	afa50014 	sw	a1,20(sp)
80043248:	8fa40010 	lw	a0,16(sp)
8004324c:	8fa50014 	lw	a1,20(sp)
80043250:	0c010c96 	jal	80043258 <_ZN4core5slice5index27slice_end_index_len_fail_rt17ha7de40be801361f9E>
80043254:	00000000 	nop

80043258 <_ZN4core5slice5index27slice_end_index_len_fail_rt17ha7de40be801361f9E>:
fn slice_end_index_len_fail_rt(index: usize, len: usize) -> ! {
80043258:	27bdff80 	addiu	sp,sp,-128
8004325c:	afbf007c 	sw	ra,124(sp)
80043260:	afa60020 	sw	a2,32(sp)
80043264:	afa40024 	sw	a0,36(sp)
80043268:	afa50028 	sw	a1,40(sp)
8004326c:	27a20024 	addiu	v0,sp,36
80043270:	afa20068 	sw	v0,104(sp)
80043274:	afa20074 	sw	v0,116(sp)
80043278:	3c018005 	lui	at,0x8005
8004327c:	2421a0f4 	addiu	at,at,-24332
80043280:	afa10078 	sw	at,120(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80043284:	afa2006c 	sw	v0,108(sp)
80043288:	afa10070 	sw	at,112(sp)
    }
8004328c:	8fa4006c 	lw	a0,108(sp)
80043290:	8fa30070 	lw	v1,112(sp)
80043294:	27a20028 	addiu	v0,sp,40
80043298:	afa20054 	sw	v0,84(sp)
8004329c:	afa20060 	sw	v0,96(sp)
800432a0:	afa10064 	sw	at,100(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
800432a4:	afa20058 	sw	v0,88(sp)
800432a8:	afa1005c 	sw	at,92(sp)
    }
800432ac:	8fa20058 	lw	v0,88(sp)
800432b0:	8fa1005c 	lw	at,92(sp)
    panic!("range end index {index} out of range for slice of length {len}");
800432b4:	afa40044 	sw	a0,68(sp)
800432b8:	afa30048 	sw	v1,72(sp)
800432bc:	afa2004c 	sw	v0,76(sp)
800432c0:	afa10050 	sw	at,80(sp)
800432c4:	03a00825 	move	at,sp
800432c8:	24060002 	li	a2,2
800432cc:	ac260010 	sw	a2,16(at)
800432d0:	3c01810a 	lui	at,0x810a
800432d4:	2425bf50 	addiu	a1,at,-16560
800432d8:	27a4002c 	addiu	a0,sp,44
800432dc:	afa4001c 	sw	a0,28(sp)
800432e0:	27a70044 	addiu	a3,sp,68
800432e4:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
800432e8:	00000000 	nop
800432ec:	8fa4001c 	lw	a0,28(sp)
800432f0:	8fa50020 	lw	a1,32(sp)
800432f4:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800432f8:	00000000 	nop

800432fc <_ZN4core5slice5index22slice_index_order_fail17h449e604cb79353f4E>:
const fn slice_index_order_fail(index: usize, end: usize) -> ! {
800432fc:	27bdffe0 	addiu	sp,sp,-32
80043300:	afa40018 	sw	a0,24(sp)
80043304:	afa5001c 	sw	a1,28(sp)
    const_eval_select((index, end), slice_index_order_fail_ct, slice_index_order_fail_rt)
80043308:	afa40010 	sw	a0,16(sp)
8004330c:	afa50014 	sw	a1,20(sp)
80043310:	8fa40010 	lw	a0,16(sp)
80043314:	8fa50014 	lw	a1,20(sp)
80043318:	0c010cc8 	jal	80043320 <_ZN4core5slice5index25slice_index_order_fail_rt17hd0ae5c98f7c5218eE>
8004331c:	00000000 	nop

80043320 <_ZN4core5slice5index25slice_index_order_fail_rt17hd0ae5c98f7c5218eE>:
fn slice_index_order_fail_rt(index: usize, end: usize) -> ! {
80043320:	27bdff80 	addiu	sp,sp,-128
80043324:	afbf007c 	sw	ra,124(sp)
80043328:	afa60020 	sw	a2,32(sp)
8004332c:	afa40024 	sw	a0,36(sp)
80043330:	afa50028 	sw	a1,40(sp)
80043334:	27a20024 	addiu	v0,sp,36
80043338:	afa20068 	sw	v0,104(sp)
8004333c:	afa20074 	sw	v0,116(sp)
80043340:	3c018005 	lui	at,0x8005
80043344:	2421a0f4 	addiu	at,at,-24332
80043348:	afa10078 	sw	at,120(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8004334c:	afa2006c 	sw	v0,108(sp)
80043350:	afa10070 	sw	at,112(sp)
    }
80043354:	8fa4006c 	lw	a0,108(sp)
80043358:	8fa30070 	lw	v1,112(sp)
8004335c:	27a20028 	addiu	v0,sp,40
80043360:	afa20054 	sw	v0,84(sp)
80043364:	afa20060 	sw	v0,96(sp)
80043368:	afa10064 	sw	at,100(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8004336c:	afa20058 	sw	v0,88(sp)
80043370:	afa1005c 	sw	at,92(sp)
    }
80043374:	8fa20058 	lw	v0,88(sp)
80043378:	8fa1005c 	lw	at,92(sp)
    panic!("slice index starts at {index} but ends at {end}");
8004337c:	afa40044 	sw	a0,68(sp)
80043380:	afa30048 	sw	v1,72(sp)
80043384:	afa2004c 	sw	v0,76(sp)
80043388:	afa10050 	sw	at,80(sp)
8004338c:	03a00825 	move	at,sp
80043390:	24060002 	li	a2,2
80043394:	ac260010 	sw	a2,16(at)
80043398:	3c01810a 	lui	at,0x810a
8004339c:	2425bf84 	addiu	a1,at,-16508
800433a0:	27a4002c 	addiu	a0,sp,44
800433a4:	afa4001c 	sw	a0,28(sp)
800433a8:	27a70044 	addiu	a3,sp,68
800433ac:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
800433b0:	00000000 	nop
800433b4:	8fa4001c 	lw	a0,28(sp)
800433b8:	8fa50020 	lw	a1,32(sp)
800433bc:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800433c0:	00000000 	nop

800433c4 <_ZN4core5slice5index29slice_end_index_overflow_fail17h6abcd4ef789741ecE>:
const fn slice_end_index_overflow_fail() -> ! {
800433c4:	27bdffc8 	addiu	sp,sp,-56
800433c8:	afbf0034 	sw	ra,52(sp)
800433cc:	afa40018 	sw	a0,24(sp)
    panic!("attempted to index slice up to maximum usize");
800433d0:	3c01810a 	lui	at,0x810a
800433d4:	2425bfc0 	addiu	a1,at,-16448
800433d8:	27a4001c 	addiu	a0,sp,28
800433dc:	afa40014 	sw	a0,20(sp)
800433e0:	24060001 	li	a2,1
800433e4:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
800433e8:	00000000 	nop
800433ec:	8fa40014 	lw	a0,20(sp)
800433f0:	8fa50018 	lw	a1,24(sp)
800433f4:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800433f8:	00000000 	nop

800433fc <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h14bc8037b64de363E>:
    fn get(self, slice: &[T]) -> Option<&T> {
800433fc:	27bdffd0 	addiu	sp,sp,-48
80043400:	afbf002c 	sw	ra,44(sp)
80043404:	afa60010 	sw	a2,16(sp)
80043408:	afa50014 	sw	a1,20(sp)
8004340c:	afa40018 	sw	a0,24(sp)
80043410:	afa40020 	sw	a0,32(sp)
80043414:	afa50024 	sw	a1,36(sp)
80043418:	afa60028 	sw	a2,40(sp)
        if self < slice.len() { unsafe { Some(&*self.get_unchecked(slice)) } } else { None }
8004341c:	0086082b 	sltu	at,a0,a2
80043420:	14200006 	bnez	at,8004343c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h14bc8037b64de363E+0x40>
80043424:	00000000 	nop
80043428:	08010d0c 	j	80043430 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h14bc8037b64de363E+0x34>
8004342c:	00000000 	nop
80043430:	afa0001c 	sw	zero,28(sp)
80043434:	08010d17 	j	8004345c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h14bc8037b64de363E+0x60>
80043438:	00000000 	nop
8004343c:	8fa60010 	lw	a2,16(sp)
80043440:	8fa50014 	lw	a1,20(sp)
80043444:	8fa40018 	lw	a0,24(sp)
80043448:	0c010d56 	jal	80043558 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h1cfb3a955405feddE>
8004344c:	00000000 	nop
80043450:	afa2001c 	sw	v0,28(sp)
80043454:	08010d17 	j	8004345c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h14bc8037b64de363E+0x60>
80043458:	00000000 	nop
    }
8004345c:	8fa2001c 	lw	v0,28(sp)
80043460:	8fbf002c 	lw	ra,44(sp)
80043464:	27bd0030 	addiu	sp,sp,48
80043468:	03e00008 	jr	ra
8004346c:	00000000 	nop

80043470 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h3178bb15dbadb5bcE>:
    fn get(self, slice: &[T]) -> Option<&T> {
80043470:	27bdffd0 	addiu	sp,sp,-48
80043474:	afbf002c 	sw	ra,44(sp)
80043478:	afa60010 	sw	a2,16(sp)
8004347c:	afa50014 	sw	a1,20(sp)
80043480:	afa40018 	sw	a0,24(sp)
80043484:	afa40020 	sw	a0,32(sp)
80043488:	afa50024 	sw	a1,36(sp)
8004348c:	afa60028 	sw	a2,40(sp)
        if self < slice.len() { unsafe { Some(&*self.get_unchecked(slice)) } } else { None }
80043490:	0086082b 	sltu	at,a0,a2
80043494:	14200006 	bnez	at,800434b0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h3178bb15dbadb5bcE+0x40>
80043498:	00000000 	nop
8004349c:	08010d29 	j	800434a4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h3178bb15dbadb5bcE+0x34>
800434a0:	00000000 	nop
800434a4:	afa0001c 	sw	zero,28(sp)
800434a8:	08010d34 	j	800434d0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h3178bb15dbadb5bcE+0x60>
800434ac:	00000000 	nop
800434b0:	8fa60010 	lw	a2,16(sp)
800434b4:	8fa50014 	lw	a1,20(sp)
800434b8:	8fa40018 	lw	a0,24(sp)
800434bc:	0c010dd0 	jal	80043740 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hab2db58a58b371faE>
800434c0:	00000000 	nop
800434c4:	afa2001c 	sw	v0,28(sp)
800434c8:	08010d34 	j	800434d0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h3178bb15dbadb5bcE+0x60>
800434cc:	00000000 	nop
    }
800434d0:	8fa2001c 	lw	v0,28(sp)
800434d4:	8fbf002c 	lw	ra,44(sp)
800434d8:	27bd0030 	addiu	sp,sp,48
800434dc:	03e00008 	jr	ra
800434e0:	00000000 	nop

800434e4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17he78150f80a7d8cf9E>:
    fn get(self, slice: &[T]) -> Option<&T> {
800434e4:	27bdffd0 	addiu	sp,sp,-48
800434e8:	afbf002c 	sw	ra,44(sp)
800434ec:	afa60010 	sw	a2,16(sp)
800434f0:	afa50014 	sw	a1,20(sp)
800434f4:	afa40018 	sw	a0,24(sp)
800434f8:	afa40020 	sw	a0,32(sp)
800434fc:	afa50024 	sw	a1,36(sp)
80043500:	afa60028 	sw	a2,40(sp)
        if self < slice.len() { unsafe { Some(&*self.get_unchecked(slice)) } } else { None }
80043504:	0086082b 	sltu	at,a0,a2
80043508:	14200006 	bnez	at,80043524 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17he78150f80a7d8cf9E+0x40>
8004350c:	00000000 	nop
80043510:	08010d46 	j	80043518 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17he78150f80a7d8cf9E+0x34>
80043514:	00000000 	nop
80043518:	afa0001c 	sw	zero,28(sp)
8004351c:	08010d51 	j	80043544 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17he78150f80a7d8cf9E+0x60>
80043520:	00000000 	nop
80043524:	8fa60010 	lw	a2,16(sp)
80043528:	8fa50014 	lw	a1,20(sp)
8004352c:	8fa40018 	lw	a0,24(sp)
80043530:	0c010d7e 	jal	800435f8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h2b3719edff8e275cE>
80043534:	00000000 	nop
80043538:	afa2001c 	sw	v0,28(sp)
8004353c:	08010d51 	j	80043544 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17he78150f80a7d8cf9E+0x60>
80043540:	00000000 	nop
    }
80043544:	8fa2001c 	lw	v0,28(sp)
80043548:	8fbf002c 	lw	ra,44(sp)
8004354c:	27bd0030 	addiu	sp,sp,48
80043550:	03e00008 	jr	ra
80043554:	00000000 	nop

80043558 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h1cfb3a955405feddE>:
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {
80043558:	27bdffc8 	addiu	sp,sp,-56
8004355c:	afbf0034 	sw	ra,52(sp)
80043560:	afa60014 	sw	a2,20(sp)
80043564:	afa50018 	sw	a1,24(sp)
80043568:	afa4001c 	sw	a0,28(sp)
8004356c:	afa40020 	sw	a0,32(sp)
80043570:	afa50024 	sw	a1,36(sp)
80043574:	afa60028 	sw	a2,40(sp)
        assert_unsafe_precondition!(
80043578:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8004357c:	00000000 	nop
80043580:	14400013 	bnez	v0,800435d0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h1cfb3a955405feddE+0x78>
80043584:	00000000 	nop
80043588:	08010d64 	j	80043590 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h1cfb3a955405feddE+0x38>
8004358c:	00000000 	nop
            crate::intrinsics::assume(self < slice.len());
80043590:	8fa50014 	lw	a1,20(sp)
80043594:	8fa40018 	lw	a0,24(sp)
80043598:	0c00ef92 	jal	8003be48 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hb4a60cfd4b05d1f1E>
8004359c:	00000000 	nop
800435a0:	8fa40018 	lw	a0,24(sp)
800435a4:	8fa50014 	lw	a1,20(sp)
            slice.as_ptr().add(self)
800435a8:	0c00efc2 	jal	8003bf08 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17hdacca62b30e596aaE>
800435ac:	00000000 	nop
800435b0:	8fa1001c 	lw	at,28(sp)
800435b4:	afa2002c 	sw	v0,44(sp)
800435b8:	afa10030 	sw	at,48(sp)
        unsafe { intrinsics::offset(self, count) }
800435bc:	00411021 	addu	v0,v0,at
    }
800435c0:	8fbf0034 	lw	ra,52(sp)
800435c4:	27bd0038 	addiu	sp,sp,56
800435c8:	03e00008 	jr	ra
800435cc:	00000000 	nop
            (this: usize = self, len: usize = slice.len()) => this < len
800435d0:	8fa50014 	lw	a1,20(sp)
800435d4:	8fa40018 	lw	a0,24(sp)
800435d8:	0c00ef92 	jal	8003be48 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hb4a60cfd4b05d1f1E>
800435dc:	00000000 	nop
800435e0:	8fa4001c 	lw	a0,28(sp)
800435e4:	00402825 	move	a1,v0
        assert_unsafe_precondition!(
800435e8:	0c01288d 	jal	8004a234 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1ff0c4beaf99429fE>
800435ec:	00000000 	nop
800435f0:	08010d64 	j	80043590 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h1cfb3a955405feddE+0x38>
800435f4:	00000000 	nop

800435f8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h2b3719edff8e275cE>:
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {
800435f8:	27bdffc8 	addiu	sp,sp,-56
800435fc:	afbf0034 	sw	ra,52(sp)
80043600:	afa60014 	sw	a2,20(sp)
80043604:	afa50018 	sw	a1,24(sp)
80043608:	afa4001c 	sw	a0,28(sp)
8004360c:	afa40020 	sw	a0,32(sp)
80043610:	afa50024 	sw	a1,36(sp)
80043614:	afa60028 	sw	a2,40(sp)
        assert_unsafe_precondition!(
80043618:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8004361c:	00000000 	nop
80043620:	14400014 	bnez	v0,80043674 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h2b3719edff8e275cE+0x7c>
80043624:	00000000 	nop
80043628:	08010d8c 	j	80043630 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h2b3719edff8e275cE+0x38>
8004362c:	00000000 	nop
            crate::intrinsics::assume(self < slice.len());
80043630:	8fa50014 	lw	a1,20(sp)
80043634:	8fa40018 	lw	a0,24(sp)
80043638:	0c00ef9c 	jal	8003be70 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hd4a723c2092474fbE>
8004363c:	00000000 	nop
80043640:	8fa40018 	lw	a0,24(sp)
80043644:	8fa50014 	lw	a1,20(sp)
            slice.as_ptr().add(self)
80043648:	0c00efbb 	jal	8003beec <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h82c8eed925475b43E>
8004364c:	00000000 	nop
80043650:	8fa1001c 	lw	at,28(sp)
80043654:	afa2002c 	sw	v0,44(sp)
80043658:	afa10030 	sw	at,48(sp)
8004365c:	000108c0 	sll	at,at,0x3
80043660:	00411021 	addu	v0,v0,at
    }
80043664:	8fbf0034 	lw	ra,52(sp)
80043668:	27bd0038 	addiu	sp,sp,56
8004366c:	03e00008 	jr	ra
80043670:	00000000 	nop
            (this: usize = self, len: usize = slice.len()) => this < len
80043674:	8fa50014 	lw	a1,20(sp)
80043678:	8fa40018 	lw	a0,24(sp)
8004367c:	0c00ef9c 	jal	8003be70 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hd4a723c2092474fbE>
80043680:	00000000 	nop
80043684:	8fa4001c 	lw	a0,28(sp)
80043688:	00402825 	move	a1,v0
        assert_unsafe_precondition!(
8004368c:	0c01288d 	jal	8004a234 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1ff0c4beaf99429fE>
80043690:	00000000 	nop
80043694:	08010d8c 	j	80043630 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h2b3719edff8e275cE+0x38>
80043698:	00000000 	nop

8004369c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h9107849c459d3e13E>:
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {
8004369c:	27bdffc8 	addiu	sp,sp,-56
800436a0:	afbf0034 	sw	ra,52(sp)
800436a4:	afa60014 	sw	a2,20(sp)
800436a8:	afa50018 	sw	a1,24(sp)
800436ac:	afa4001c 	sw	a0,28(sp)
800436b0:	afa40020 	sw	a0,32(sp)
800436b4:	afa50024 	sw	a1,36(sp)
800436b8:	afa60028 	sw	a2,40(sp)
        assert_unsafe_precondition!(
800436bc:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
800436c0:	00000000 	nop
800436c4:	14400014 	bnez	v0,80043718 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h9107849c459d3e13E+0x7c>
800436c8:	00000000 	nop
800436cc:	08010db5 	j	800436d4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h9107849c459d3e13E+0x38>
800436d0:	00000000 	nop
            crate::intrinsics::assume(self < slice.len());
800436d4:	8fa50014 	lw	a1,20(sp)
800436d8:	8fa40018 	lw	a0,24(sp)
800436dc:	0c00ef88 	jal	8003be20 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17haefcf4bd787bad28E>
800436e0:	00000000 	nop
800436e4:	8fa40018 	lw	a0,24(sp)
800436e8:	8fa50014 	lw	a1,20(sp)
            slice.as_ptr().add(self)
800436ec:	0c00efa6 	jal	8003be98 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h4ba62f43f4e4d3efE>
800436f0:	00000000 	nop
800436f4:	8fa1001c 	lw	at,28(sp)
800436f8:	afa2002c 	sw	v0,44(sp)
800436fc:	afa10030 	sw	at,48(sp)
80043700:	000108c0 	sll	at,at,0x3
80043704:	00411021 	addu	v0,v0,at
    }
80043708:	8fbf0034 	lw	ra,52(sp)
8004370c:	27bd0038 	addiu	sp,sp,56
80043710:	03e00008 	jr	ra
80043714:	00000000 	nop
            (this: usize = self, len: usize = slice.len()) => this < len
80043718:	8fa50014 	lw	a1,20(sp)
8004371c:	8fa40018 	lw	a0,24(sp)
80043720:	0c00ef88 	jal	8003be20 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17haefcf4bd787bad28E>
80043724:	00000000 	nop
80043728:	8fa4001c 	lw	a0,28(sp)
8004372c:	00402825 	move	a1,v0
        assert_unsafe_precondition!(
80043730:	0c01288d 	jal	8004a234 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1ff0c4beaf99429fE>
80043734:	00000000 	nop
80043738:	08010db5 	j	800436d4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h9107849c459d3e13E+0x38>
8004373c:	00000000 	nop

80043740 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hab2db58a58b371faE>:
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {
80043740:	27bdffc8 	addiu	sp,sp,-56
80043744:	afbf0034 	sw	ra,52(sp)
80043748:	afa60014 	sw	a2,20(sp)
8004374c:	afa50018 	sw	a1,24(sp)
80043750:	afa4001c 	sw	a0,28(sp)
80043754:	afa40020 	sw	a0,32(sp)
80043758:	afa50024 	sw	a1,36(sp)
8004375c:	afa60028 	sw	a2,40(sp)
        assert_unsafe_precondition!(
80043760:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80043764:	00000000 	nop
80043768:	14400014 	bnez	v0,800437bc <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hab2db58a58b371faE+0x7c>
8004376c:	00000000 	nop
80043770:	08010dde 	j	80043778 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hab2db58a58b371faE+0x38>
80043774:	00000000 	nop
            crate::intrinsics::assume(self < slice.len());
80043778:	8fa50014 	lw	a1,20(sp)
8004377c:	8fa40018 	lw	a0,24(sp)
80043780:	0c00ef74 	jal	8003bdd0 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17h14a33ded5ac369b8E>
80043784:	00000000 	nop
80043788:	8fa40018 	lw	a0,24(sp)
8004378c:	8fa50014 	lw	a1,20(sp)
            slice.as_ptr().add(self)
80043790:	0c00efad 	jal	8003beb4 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h6a7aae0b99a35e3eE>
80043794:	00000000 	nop
80043798:	8fa1001c 	lw	at,28(sp)
8004379c:	afa2002c 	sw	v0,44(sp)
800437a0:	afa10030 	sw	at,48(sp)
800437a4:	00010880 	sll	at,at,0x2
800437a8:	00411021 	addu	v0,v0,at
    }
800437ac:	8fbf0034 	lw	ra,52(sp)
800437b0:	27bd0038 	addiu	sp,sp,56
800437b4:	03e00008 	jr	ra
800437b8:	00000000 	nop
            (this: usize = self, len: usize = slice.len()) => this < len
800437bc:	8fa50014 	lw	a1,20(sp)
800437c0:	8fa40018 	lw	a0,24(sp)
800437c4:	0c00ef74 	jal	8003bdd0 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17h14a33ded5ac369b8E>
800437c8:	00000000 	nop
800437cc:	8fa4001c 	lw	a0,28(sp)
800437d0:	00402825 	move	a1,v0
        assert_unsafe_precondition!(
800437d4:	0c01288d 	jal	8004a234 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1ff0c4beaf99429fE>
800437d8:	00000000 	nop
800437dc:	08010dde 	j	80043778 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hab2db58a58b371faE+0x38>
800437e0:	00000000 	nop

800437e4 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb3ac7c8e535d317cE>:
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
800437e4:	27bdffb8 	addiu	sp,sp,-72
800437e8:	afbf0044 	sw	ra,68(sp)
800437ec:	afa70018 	sw	a3,24(sp)
800437f0:	afa6001c 	sw	a2,28(sp)
800437f4:	afa50020 	sw	a1,32(sp)
800437f8:	afa40024 	sw	a0,36(sp)
800437fc:	afa40028 	sw	a0,40(sp)
80043800:	afa5002c 	sw	a1,44(sp)
80043804:	afa60030 	sw	a2,48(sp)
80043808:	afa70034 	sw	a3,52(sp)
        assert_unsafe_precondition!(
8004380c:	08010e05 	j	80043814 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb3ac7c8e535d317cE+0x30>
80043810:	00000000 	nop
                len: usize = slice.len()
80043814:	8fa50018 	lw	a1,24(sp)
80043818:	8fa4001c 	lw	a0,28(sp)
8004381c:	0c00ef92 	jal	8003be48 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hb4a60cfd4b05d1f1E>
80043820:	00000000 	nop
80043824:	8fa40024 	lw	a0,36(sp)
80043828:	8fa50020 	lw	a1,32(sp)
8004382c:	00403025 	move	a2,v0
        assert_unsafe_precondition!(
80043830:	0c01289d 	jal	8004a274 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17ha89e1374a944983cE>
80043834:	00000000 	nop
80043838:	08010e10 	j	80043840 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb3ac7c8e535d317cE+0x5c>
8004383c:	00000000 	nop
            let new_len = unchecked_sub(self.end, self.start);
80043840:	8fa20024 	lw	v0,36(sp)
80043844:	8fa50018 	lw	a1,24(sp)
80043848:	8fa4001c 	lw	a0,28(sp)
8004384c:	8fa10020 	lw	at,32(sp)
80043850:	00220823 	subu	at,at,v0
80043854:	afa10014 	sw	at,20(sp)
80043858:	afa10038 	sw	at,56(sp)
            ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), new_len)
8004385c:	0c00efc2 	jal	8003bf08 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17hdacca62b30e596aaE>
80043860:	00000000 	nop
80043864:	8fa10024 	lw	at,36(sp)
80043868:	8fa50014 	lw	a1,20(sp)
8004386c:	afa2003c 	sw	v0,60(sp)
80043870:	afa10040 	sw	at,64(sp)
80043874:	00412021 	addu	a0,v0,at
80043878:	0c00efc9 	jal	8003bf24 <_ZN4core3ptr20slice_from_raw_parts17h0ab563afab92ed6fE>
8004387c:	00000000 	nop
    }
80043880:	8fbf0044 	lw	ra,68(sp)
80043884:	27bd0048 	addiu	sp,sp,72
80043888:	03e00008 	jr	ra
8004388c:	00000000 	nop

80043890 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hd29bb42ba8f63631E>:
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
80043890:	27bdffb8 	addiu	sp,sp,-72
80043894:	afbf0044 	sw	ra,68(sp)
80043898:	afa70018 	sw	a3,24(sp)
8004389c:	afa6001c 	sw	a2,28(sp)
800438a0:	afa50020 	sw	a1,32(sp)
800438a4:	afa40024 	sw	a0,36(sp)
800438a8:	afa40028 	sw	a0,40(sp)
800438ac:	afa5002c 	sw	a1,44(sp)
800438b0:	afa60030 	sw	a2,48(sp)
800438b4:	afa70034 	sw	a3,52(sp)
        assert_unsafe_precondition!(
800438b8:	08010e30 	j	800438c0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hd29bb42ba8f63631E+0x30>
800438bc:	00000000 	nop
                len: usize = slice.len()
800438c0:	8fa50018 	lw	a1,24(sp)
800438c4:	8fa4001c 	lw	a0,28(sp)
800438c8:	0c00ef7e 	jal	8003bdf8 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17ha931775fbc53b958E>
800438cc:	00000000 	nop
800438d0:	8fa40024 	lw	a0,36(sp)
800438d4:	8fa50020 	lw	a1,32(sp)
800438d8:	00403025 	move	a2,v0
        assert_unsafe_precondition!(
800438dc:	0c01289d 	jal	8004a274 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17ha89e1374a944983cE>
800438e0:	00000000 	nop
800438e4:	08010e3b 	j	800438ec <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hd29bb42ba8f63631E+0x5c>
800438e8:	00000000 	nop
            let new_len = unchecked_sub(self.end, self.start);
800438ec:	8fa20024 	lw	v0,36(sp)
800438f0:	8fa50018 	lw	a1,24(sp)
800438f4:	8fa4001c 	lw	a0,28(sp)
800438f8:	8fa10020 	lw	at,32(sp)
800438fc:	00220823 	subu	at,at,v0
80043900:	afa10014 	sw	at,20(sp)
80043904:	afa10038 	sw	at,56(sp)
            ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), new_len)
80043908:	0c00efb4 	jal	8003bed0 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h72dfbec44e82c8bcE>
8004390c:	00000000 	nop
80043910:	8fa10024 	lw	at,36(sp)
80043914:	8fa50014 	lw	a1,20(sp)
80043918:	afa2003c 	sw	v0,60(sp)
8004391c:	afa10040 	sw	at,64(sp)
80043920:	00412021 	addu	a0,v0,at
80043924:	0c00efdf 	jal	8003bf7c <_ZN4core3ptr20slice_from_raw_parts17h0d7d46db288bcd34E>
80043928:	00000000 	nop
    }
8004392c:	8fbf0044 	lw	ra,68(sp)
80043930:	27bd0048 	addiu	sp,sp,72
80043934:	03e00008 	jr	ra
80043938:	00000000 	nop

8004393c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h36147982303d7f1dE>:
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
8004393c:	27bdffb0 	addiu	sp,sp,-80
80043940:	afbf004c 	sw	ra,76(sp)
80043944:	afa70010 	sw	a3,16(sp)
80043948:	afa60014 	sw	a2,20(sp)
8004394c:	afa50018 	sw	a1,24(sp)
80043950:	afa4001c 	sw	a0,28(sp)
80043954:	afa40020 	sw	a0,32(sp)
80043958:	afa50024 	sw	a1,36(sp)
8004395c:	afa60028 	sw	a2,40(sp)
80043960:	afa7002c 	sw	a3,44(sp)
        assert_unsafe_precondition!(
80043964:	08010e5b 	j	8004396c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h36147982303d7f1dE+0x30>
80043968:	00000000 	nop
8004396c:	8fa50010 	lw	a1,16(sp)
80043970:	8fa40014 	lw	a0,20(sp)
80043974:	afa4003c 	sw	a0,60(sp)
80043978:	afa50040 	sw	a1,64(sp)
    /// ```
    #[inline(always)]
    #[unstable(feature = "slice_ptr_len", issue = "71146")]
    #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
    pub const fn len(self) -> usize {
        metadata(self)
8004397c:	0c00ed81 	jal	8003b604 <_ZN4core3ptr8metadata8metadata17he6569c9c74456ea7E>
80043980:	00000000 	nop
80043984:	8fa4001c 	lw	a0,28(sp)
80043988:	8fa50018 	lw	a1,24(sp)
8004398c:	00403025 	move	a2,v0
80043990:	0c0128b7 	jal	8004a2dc <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h341e88cd759afc93E>
80043994:	00000000 	nop
80043998:	08010e68 	j	800439a0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h36147982303d7f1dE+0x64>
8004399c:	00000000 	nop
            let new_len = unchecked_sub(self.end, self.start);
800439a0:	8fa10014 	lw	at,20(sp)
800439a4:	8fa2001c 	lw	v0,28(sp)
800439a8:	8fa30010 	lw	v1,16(sp)
800439ac:	8fa40018 	lw	a0,24(sp)
800439b0:	00822823 	subu	a1,a0,v0
800439b4:	afa50030 	sw	a1,48(sp)
800439b8:	afa10044 	sw	at,68(sp)
800439bc:	afa30048 	sw	v1,72(sp)
800439c0:	afa10034 	sw	at,52(sp)
800439c4:	afa20038 	sw	v0,56(sp)
        unsafe { intrinsics::offset(self, count) }
800439c8:	00222021 	addu	a0,at,v0
            ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), new_len)
800439cc:	0c00f000 	jal	8003c000 <_ZN4core3ptr24slice_from_raw_parts_mut17h67dceb6de50bda88E>
800439d0:	00000000 	nop
    }
800439d4:	8fbf004c 	lw	ra,76(sp)
800439d8:	27bd0050 	addiu	sp,sp,80
800439dc:	03e00008 	jr	ra
800439e0:	00000000 	nop

800439e4 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h8761ae5f424cbd6fE>:
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
800439e4:	27bdffb0 	addiu	sp,sp,-80
800439e8:	afbf004c 	sw	ra,76(sp)
800439ec:	afa70010 	sw	a3,16(sp)
800439f0:	afa60014 	sw	a2,20(sp)
800439f4:	afa50018 	sw	a1,24(sp)
800439f8:	afa4001c 	sw	a0,28(sp)
800439fc:	afa40020 	sw	a0,32(sp)
80043a00:	afa50024 	sw	a1,36(sp)
80043a04:	afa60028 	sw	a2,40(sp)
80043a08:	afa7002c 	sw	a3,44(sp)
        assert_unsafe_precondition!(
80043a0c:	08010e85 	j	80043a14 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h8761ae5f424cbd6fE+0x30>
80043a10:	00000000 	nop
80043a14:	8fa50010 	lw	a1,16(sp)
80043a18:	8fa40014 	lw	a0,20(sp)
80043a1c:	afa4003c 	sw	a0,60(sp)
80043a20:	afa50040 	sw	a1,64(sp)
        metadata(self)
80043a24:	0c00ed54 	jal	8003b550 <_ZN4core3ptr8metadata8metadata17h20bb056214aec1c6E>
80043a28:	00000000 	nop
80043a2c:	8fa4001c 	lw	a0,28(sp)
80043a30:	8fa50018 	lw	a1,24(sp)
80043a34:	00403025 	move	a2,v0
80043a38:	0c0128b7 	jal	8004a2dc <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h341e88cd759afc93E>
80043a3c:	00000000 	nop
80043a40:	08010e92 	j	80043a48 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h8761ae5f424cbd6fE+0x64>
80043a44:	00000000 	nop
            let new_len = unchecked_sub(self.end, self.start);
80043a48:	8fa10014 	lw	at,20(sp)
80043a4c:	8fa2001c 	lw	v0,28(sp)
80043a50:	8fa30010 	lw	v1,16(sp)
80043a54:	8fa40018 	lw	a0,24(sp)
80043a58:	00822823 	subu	a1,a0,v0
80043a5c:	afa50030 	sw	a1,48(sp)
80043a60:	afa10044 	sw	at,68(sp)
80043a64:	afa30048 	sw	v1,72(sp)
80043a68:	afa10034 	sw	at,52(sp)
80043a6c:	afa20038 	sw	v0,56(sp)
        unsafe { intrinsics::offset(self, count) }
80043a70:	00222021 	addu	a0,at,v0
            ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), new_len)
80043a74:	0c00eff5 	jal	8003bfd4 <_ZN4core3ptr24slice_from_raw_parts_mut17h141f33a1684c8a60E>
80043a78:	00000000 	nop
    }
80043a7c:	8fbf004c 	lw	ra,76(sp)
80043a80:	27bd0050 	addiu	sp,sp,80
80043a84:	03e00008 	jr	ra
80043a88:	00000000 	nop

80043a8c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h40e5eeeb169b8cf2E>:
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
80043a8c:	27bdffc8 	addiu	sp,sp,-56
80043a90:	afbf0034 	sw	ra,52(sp)
80043a94:	afa70010 	sw	a3,16(sp)
80043a98:	afa60014 	sw	a2,20(sp)
80043a9c:	afa50018 	sw	a1,24(sp)
80043aa0:	afa4001c 	sw	a0,28(sp)
80043aa4:	8fa10048 	lw	at,72(sp)
80043aa8:	afa10020 	sw	at,32(sp)
80043aac:	afa40024 	sw	a0,36(sp)
80043ab0:	afa50028 	sw	a1,40(sp)
80043ab4:	afa6002c 	sw	a2,44(sp)
80043ab8:	afa70030 	sw	a3,48(sp)
        if self.start > self.end {
80043abc:	00a4082b 	sltu	at,a1,a0
80043ac0:	1420000a 	bnez	at,80043aec <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h40e5eeeb169b8cf2E+0x60>
80043ac4:	00000000 	nop
80043ac8:	08010eb4 	j	80043ad0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h40e5eeeb169b8cf2E+0x44>
80043acc:	00000000 	nop
            slice_index_order_fail(self.start, self.end);
        } else if self.end > slice.len() {
80043ad0:	8fa10010 	lw	at,16(sp)
80043ad4:	8fa20018 	lw	v0,24(sp)
80043ad8:	0022082b 	sltu	at,at,v0
80043adc:	14200012 	bnez	at,80043b28 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h40e5eeeb169b8cf2E+0x9c>
80043ae0:	00000000 	nop
80043ae4:	08010ec0 	j	80043b00 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h40e5eeeb169b8cf2E+0x74>
80043ae8:	00000000 	nop
            slice_index_order_fail(self.start, self.end);
80043aec:	8fa60020 	lw	a2,32(sp)
80043af0:	8fa50018 	lw	a1,24(sp)
80043af4:	8fa4001c 	lw	a0,28(sp)
80043af8:	0c010cbf 	jal	800432fc <_ZN4core5slice5index22slice_index_order_fail17h449e604cb79353f4E>
80043afc:	00000000 	nop
            slice_end_index_len_fail(self.end, slice.len());
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &mut *self.get_unchecked_mut(slice) }
80043b00:	8fa70010 	lw	a3,16(sp)
80043b04:	8fa60014 	lw	a2,20(sp)
80043b08:	8fa50018 	lw	a1,24(sp)
80043b0c:	8fa4001c 	lw	a0,28(sp)
80043b10:	0c010e79 	jal	800439e4 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h8761ae5f424cbd6fE>
80043b14:	00000000 	nop
    }
80043b18:	8fbf0034 	lw	ra,52(sp)
80043b1c:	27bd0038 	addiu	sp,sp,56
80043b20:	03e00008 	jr	ra
80043b24:	00000000 	nop
            slice_end_index_len_fail(self.end, slice.len());
80043b28:	8fa60020 	lw	a2,32(sp)
80043b2c:	8fa50010 	lw	a1,16(sp)
80043b30:	8fa40018 	lw	a0,24(sp)
80043b34:	0c010c8d 	jal	80043234 <_ZN4core5slice5index24slice_end_index_len_fail17hc8473d7595779981E>
80043b38:	00000000 	nop

80043b3c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he03f9f6b056bb3bdE>:
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
80043b3c:	27bdffc8 	addiu	sp,sp,-56
80043b40:	afbf0034 	sw	ra,52(sp)
80043b44:	afa70010 	sw	a3,16(sp)
80043b48:	afa60014 	sw	a2,20(sp)
80043b4c:	afa50018 	sw	a1,24(sp)
80043b50:	afa4001c 	sw	a0,28(sp)
80043b54:	8fa10048 	lw	at,72(sp)
80043b58:	afa10020 	sw	at,32(sp)
80043b5c:	afa40024 	sw	a0,36(sp)
80043b60:	afa50028 	sw	a1,40(sp)
80043b64:	afa6002c 	sw	a2,44(sp)
80043b68:	afa70030 	sw	a3,48(sp)
        if self.start > self.end {
80043b6c:	00a4082b 	sltu	at,a1,a0
80043b70:	1420000a 	bnez	at,80043b9c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he03f9f6b056bb3bdE+0x60>
80043b74:	00000000 	nop
80043b78:	08010ee0 	j	80043b80 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he03f9f6b056bb3bdE+0x44>
80043b7c:	00000000 	nop
        } else if self.end > slice.len() {
80043b80:	8fa10010 	lw	at,16(sp)
80043b84:	8fa20018 	lw	v0,24(sp)
80043b88:	0022082b 	sltu	at,at,v0
80043b8c:	14200012 	bnez	at,80043bd8 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he03f9f6b056bb3bdE+0x9c>
80043b90:	00000000 	nop
80043b94:	08010eec 	j	80043bb0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he03f9f6b056bb3bdE+0x74>
80043b98:	00000000 	nop
            slice_index_order_fail(self.start, self.end);
80043b9c:	8fa60020 	lw	a2,32(sp)
80043ba0:	8fa50018 	lw	a1,24(sp)
80043ba4:	8fa4001c 	lw	a0,28(sp)
80043ba8:	0c010cbf 	jal	800432fc <_ZN4core5slice5index22slice_index_order_fail17h449e604cb79353f4E>
80043bac:	00000000 	nop
        unsafe { &mut *self.get_unchecked_mut(slice) }
80043bb0:	8fa70010 	lw	a3,16(sp)
80043bb4:	8fa60014 	lw	a2,20(sp)
80043bb8:	8fa50018 	lw	a1,24(sp)
80043bbc:	8fa4001c 	lw	a0,28(sp)
80043bc0:	0c010e4f 	jal	8004393c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h36147982303d7f1dE>
80043bc4:	00000000 	nop
    }
80043bc8:	8fbf0034 	lw	ra,52(sp)
80043bcc:	27bd0038 	addiu	sp,sp,56
80043bd0:	03e00008 	jr	ra
80043bd4:	00000000 	nop
            slice_end_index_len_fail(self.end, slice.len());
80043bd8:	8fa60020 	lw	a2,32(sp)
80043bdc:	8fa50010 	lw	a1,16(sp)
80043be0:	8fa40018 	lw	a0,24(sp)
80043be4:	0c010c8d 	jal	80043234 <_ZN4core5slice5index24slice_end_index_len_fail17hc8473d7595779981E>
80043be8:	00000000 	nop

80043bec <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h939accfbe24507e3E>:
    fn index(self, slice: &[T]) -> &[T] {
        (0..self.end).index(slice)
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
80043bec:	27bdffd0 	addiu	sp,sp,-48
80043bf0:	afbf002c 	sw	ra,44(sp)
80043bf4:	00e00825 	move	at,a3
80043bf8:	00c03825 	move	a3,a2
80043bfc:	00a03025 	move	a2,a1
80043c00:	afa40020 	sw	a0,32(sp)
80043c04:	afa60024 	sw	a2,36(sp)
80043c08:	afa70028 	sw	a3,40(sp)
        (0..self.end).index_mut(slice)
80043c0c:	afa00018 	sw	zero,24(sp)
80043c10:	afa4001c 	sw	a0,28(sp)
80043c14:	8fa40018 	lw	a0,24(sp)
80043c18:	8fa5001c 	lw	a1,28(sp)
80043c1c:	03a01025 	move	v0,sp
80043c20:	ac410010 	sw	at,16(v0)
80043c24:	0c010ecf 	jal	80043b3c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he03f9f6b056bb3bdE>
80043c28:	00000000 	nop
    }
80043c2c:	8fbf002c 	lw	ra,44(sp)
80043c30:	27bd0030 	addiu	sp,sp,48
80043c34:	03e00008 	jr	ra
80043c38:	00000000 	nop

80043c3c <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hcf5fb57ce5379036E>:
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
80043c3c:	27bdffd0 	addiu	sp,sp,-48
80043c40:	afbf002c 	sw	ra,44(sp)
80043c44:	00e00825 	move	at,a3
80043c48:	00c03825 	move	a3,a2
80043c4c:	00a03025 	move	a2,a1
80043c50:	afa40020 	sw	a0,32(sp)
80043c54:	afa60024 	sw	a2,36(sp)
80043c58:	afa70028 	sw	a3,40(sp)
        (0..self.end).index_mut(slice)
80043c5c:	afa00018 	sw	zero,24(sp)
80043c60:	afa4001c 	sw	a0,28(sp)
80043c64:	8fa40018 	lw	a0,24(sp)
80043c68:	8fa5001c 	lw	a1,28(sp)
80043c6c:	03a01025 	move	v0,sp
80043c70:	ac410010 	sw	at,16(v0)
80043c74:	0c010ea3 	jal	80043a8c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h40e5eeeb169b8cf2E>
80043c78:	00000000 	nop
    }
80043c7c:	8fbf002c 	lw	ra,44(sp)
80043c80:	27bd0030 	addiu	sp,sp,48
80043c84:	03e00008 	jr	ra
80043c88:	00000000 	nop

80043c8c <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h784d6a8ede97eed2E>:
    fn get_mut(self, slice: &mut [T]) -> Option<&mut [T]> {
        (self.start..slice.len()).get_mut(slice)
    }

    #[inline]
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
80043c8c:	27bdffc8 	addiu	sp,sp,-56
80043c90:	afbf0034 	sw	ra,52(sp)
80043c94:	afa6001c 	sw	a2,28(sp)
80043c98:	00a00825 	move	at,a1
80043c9c:	8fa5001c 	lw	a1,28(sp)
80043ca0:	afa10018 	sw	at,24(sp)
80043ca4:	00800825 	move	at,a0
80043ca8:	8fa40018 	lw	a0,24(sp)
80043cac:	afa10014 	sw	at,20(sp)
80043cb0:	afa10028 	sw	at,40(sp)
80043cb4:	afa4002c 	sw	a0,44(sp)
80043cb8:	afa50030 	sw	a1,48(sp)
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked`.
        unsafe { (self.start..slice.len()).get_unchecked(slice) }
80043cbc:	0c00ef7e 	jal	8003bdf8 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17ha931775fbc53b958E>
80043cc0:	00000000 	nop
80043cc4:	8fa40014 	lw	a0,20(sp)
80043cc8:	8fa60018 	lw	a2,24(sp)
80043ccc:	8fa7001c 	lw	a3,28(sp)
80043cd0:	afa40020 	sw	a0,32(sp)
80043cd4:	afa20024 	sw	v0,36(sp)
80043cd8:	8fa40020 	lw	a0,32(sp)
80043cdc:	8fa50024 	lw	a1,36(sp)
80043ce0:	0c010e24 	jal	80043890 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hd29bb42ba8f63631E>
80043ce4:	00000000 	nop
    }
80043ce8:	8fbf0034 	lw	ra,52(sp)
80043cec:	27bd0038 	addiu	sp,sp,56
80043cf0:	03e00008 	jr	ra
80043cf4:	00000000 	nop

80043cf8 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hb6159762e9006fafE>:

    #[inline]
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
80043cf8:	27bdffc0 	addiu	sp,sp,-64
80043cfc:	afbf003c 	sw	ra,60(sp)
80043d00:	afa6001c 	sw	a2,28(sp)
80043d04:	00a00825 	move	at,a1
80043d08:	8fa5001c 	lw	a1,28(sp)
80043d0c:	afa10018 	sw	at,24(sp)
80043d10:	00800825 	move	at,a0
80043d14:	8fa40018 	lw	a0,24(sp)
80043d18:	afa10014 	sw	at,20(sp)
80043d1c:	afa10028 	sw	at,40(sp)
80043d20:	afa4002c 	sw	a0,44(sp)
80043d24:	afa50030 	sw	a1,48(sp)
80043d28:	afa40034 	sw	a0,52(sp)
80043d2c:	afa50038 	sw	a1,56(sp)
        metadata(self)
80043d30:	0c00ed54 	jal	8003b550 <_ZN4core3ptr8metadata8metadata17h20bb056214aec1c6E>
80043d34:	00000000 	nop
80043d38:	8fa40014 	lw	a0,20(sp)
80043d3c:	8fa60018 	lw	a2,24(sp)
80043d40:	8fa7001c 	lw	a3,28(sp)
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
        unsafe { (self.start..slice.len()).get_unchecked_mut(slice) }
80043d44:	afa40020 	sw	a0,32(sp)
80043d48:	afa20024 	sw	v0,36(sp)
80043d4c:	8fa40020 	lw	a0,32(sp)
80043d50:	8fa50024 	lw	a1,36(sp)
80043d54:	0c010e79 	jal	800439e4 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h8761ae5f424cbd6fE>
80043d58:	00000000 	nop
    }
80043d5c:	8fbf003c 	lw	ra,60(sp)
80043d60:	27bd0040 	addiu	sp,sp,64
80043d64:	03e00008 	jr	ra
80043d68:	00000000 	nop

80043d6c <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h303723bc382a6e8fE>:

    #[inline]
    fn index(self, slice: &[T]) -> &[T] {
80043d6c:	27bdffd0 	addiu	sp,sp,-48
80043d70:	afbf002c 	sw	ra,44(sp)
80043d74:	afa70010 	sw	a3,16(sp)
80043d78:	afa60014 	sw	a2,20(sp)
80043d7c:	afa50018 	sw	a1,24(sp)
80043d80:	afa4001c 	sw	a0,28(sp)
80043d84:	afa40020 	sw	a0,32(sp)
80043d88:	afa50024 	sw	a1,36(sp)
80043d8c:	afa60028 	sw	a2,40(sp)
        if self.start > slice.len() {
80043d90:	00c4082b 	sltu	at,a2,a0
80043d94:	1420000c 	bnez	at,80043dc8 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h303723bc382a6e8fE+0x5c>
80043d98:	00000000 	nop
80043d9c:	08010f69 	j	80043da4 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h303723bc382a6e8fE+0x38>
80043da0:	00000000 	nop
            slice_start_index_len_fail(self.start, slice.len());
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &*self.get_unchecked(slice) }
80043da4:	8fa60014 	lw	a2,20(sp)
80043da8:	8fa50018 	lw	a1,24(sp)
80043dac:	8fa4001c 	lw	a0,28(sp)
80043db0:	0c010f23 	jal	80043c8c <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h784d6a8ede97eed2E>
80043db4:	00000000 	nop
    }
80043db8:	8fbf002c 	lw	ra,44(sp)
80043dbc:	27bd0030 	addiu	sp,sp,48
80043dc0:	03e00008 	jr	ra
80043dc4:	00000000 	nop
            slice_start_index_len_fail(self.start, slice.len());
80043dc8:	8fa60010 	lw	a2,16(sp)
80043dcc:	8fa50014 	lw	a1,20(sp)
80043dd0:	8fa4001c 	lw	a0,28(sp)
80043dd4:	0c010c5b 	jal	8004316c <_ZN4core5slice5index26slice_start_index_len_fail17h7d16ec469bcb47d5E>
80043dd8:	00000000 	nop

80043ddc <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h634482a4c9969ff8E>:

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
80043ddc:	27bdffd0 	addiu	sp,sp,-48
80043de0:	afbf002c 	sw	ra,44(sp)
80043de4:	afa70010 	sw	a3,16(sp)
80043de8:	afa60014 	sw	a2,20(sp)
80043dec:	afa50018 	sw	a1,24(sp)
80043df0:	afa4001c 	sw	a0,28(sp)
80043df4:	afa40020 	sw	a0,32(sp)
80043df8:	afa50024 	sw	a1,36(sp)
80043dfc:	afa60028 	sw	a2,40(sp)
        if self.start > slice.len() {
80043e00:	00c4082b 	sltu	at,a2,a0
80043e04:	1420000c 	bnez	at,80043e38 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h634482a4c9969ff8E+0x5c>
80043e08:	00000000 	nop
80043e0c:	08010f85 	j	80043e14 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h634482a4c9969ff8E+0x38>
80043e10:	00000000 	nop
            slice_start_index_len_fail(self.start, slice.len());
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &mut *self.get_unchecked_mut(slice) }
80043e14:	8fa60014 	lw	a2,20(sp)
80043e18:	8fa50018 	lw	a1,24(sp)
80043e1c:	8fa4001c 	lw	a0,28(sp)
80043e20:	0c010f3e 	jal	80043cf8 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hb6159762e9006fafE>
80043e24:	00000000 	nop
    }
80043e28:	8fbf002c 	lw	ra,44(sp)
80043e2c:	27bd0030 	addiu	sp,sp,48
80043e30:	03e00008 	jr	ra
80043e34:	00000000 	nop
            slice_start_index_len_fail(self.start, slice.len());
80043e38:	8fa60010 	lw	a2,16(sp)
80043e3c:	8fa50014 	lw	a1,20(sp)
80043e40:	8fa4001c 	lw	a0,28(sp)
80043e44:	0c010c5b 	jal	8004316c <_ZN4core5slice5index26slice_start_index_len_fail17h7d16ec469bcb47d5E>
80043e48:	00000000 	nop

80043e4c <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h0fbdbc71c20a79daE>:
    fn index(self, slice: &[T]) -> &[T] {
        slice
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
80043e4c:	27bdfff0 	addiu	sp,sp,-16
80043e50:	00a01825 	move	v1,a1
80043e54:	00801025 	move	v0,a0
80043e58:	afa20008 	sw	v0,8(sp)
80043e5c:	afa3000c 	sw	v1,12(sp)
80043e60:	27bd0010 	addiu	sp,sp,16
        slice
    }
80043e64:	03e00008 	jr	ra
80043e68:	00000000 	nop

80043e6c <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE>:
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
        unsafe { self.into_slice_range().get_unchecked_mut(slice) }
    }

    #[inline]
    fn index(self, slice: &[T]) -> &[T] {
80043e6c:	27bdffb0 	addiu	sp,sp,-80
80043e70:	afbf004c 	sw	ra,76(sp)
80043e74:	afa70018 	sw	a3,24(sp)
80043e78:	afa6001c 	sw	a2,28(sp)
80043e7c:	afa50020 	sw	a1,32(sp)
80043e80:	afa40024 	sw	a0,36(sp)
80043e84:	afa50034 	sw	a1,52(sp)
80043e88:	afa60038 	sw	a2,56(sp)
        if *self.end() == usize::MAX {
80043e8c:	0c00f366 	jal	8003cd98 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3end17h57262ba442efad6eE>
80043e90:	00000000 	nop
80043e94:	8c410000 	lw	at,0(v0)
80043e98:	2402ffff 	li	v0,-1
80043e9c:	10220037 	beq	at,v0,80043f7c <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE+0x110>
80043ea0:	00000000 	nop
80043ea4:	08010fab 	j	80043eac <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE+0x40>
80043ea8:	00000000 	nop
            slice_end_index_overflow_fail();
        }
        self.into_slice_range().index(slice)
80043eac:	8fa10024 	lw	at,36(sp)
80043eb0:	8c220008 	lw	v0,8(at)
80043eb4:	afa20030 	sw	v0,48(sp)
80043eb8:	8c220004 	lw	v0,4(at)
80043ebc:	afa2002c 	sw	v0,44(sp)
80043ec0:	8c210000 	lw	at,0(at)
80043ec4:	afa10028 	sw	at,40(sp)
80043ec8:	27a40028 	addiu	a0,sp,40
80043ecc:	0c00f36c 	jal	8003cdb0 <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E>
80043ed0:	00000000 	nop
80043ed4:	8fa40020 	lw	a0,32(sp)
80043ed8:	8fa1001c 	lw	at,28(sp)
80043edc:	00402825 	move	a1,v0
80043ee0:	afa50010 	sw	a1,16(sp)
80043ee4:	00602825 	move	a1,v1
80043ee8:	afa50014 	sw	a1,20(sp)
80043eec:	afa2003c 	sw	v0,60(sp)
80043ef0:	afa30040 	sw	v1,64(sp)
80043ef4:	afa40044 	sw	a0,68(sp)
80043ef8:	afa10048 	sw	at,72(sp)
        if self.start > self.end {
80043efc:	0062082b 	sltu	at,v1,v0
80043f00:	1420000a 	bnez	at,80043f2c <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE+0xc0>
80043f04:	00000000 	nop
80043f08:	08010fc4 	j	80043f10 <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE+0xa4>
80043f0c:	00000000 	nop
        } else if self.end > slice.len() {
80043f10:	8fa1001c 	lw	at,28(sp)
80043f14:	8fa20014 	lw	v0,20(sp)
80043f18:	0022082b 	sltu	at,at,v0
80043f1c:	14200008 	bnez	at,80043f40 <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE+0xd4>
80043f20:	00000000 	nop
80043f24:	08010fd5 	j	80043f54 <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE+0xe8>
80043f28:	00000000 	nop
            slice_index_order_fail(self.start, self.end);
80043f2c:	8fa60018 	lw	a2,24(sp)
80043f30:	8fa50014 	lw	a1,20(sp)
80043f34:	8fa40010 	lw	a0,16(sp)
80043f38:	0c010cbf 	jal	800432fc <_ZN4core5slice5index22slice_index_order_fail17h449e604cb79353f4E>
80043f3c:	00000000 	nop
            slice_end_index_len_fail(self.end, slice.len());
80043f40:	8fa60018 	lw	a2,24(sp)
80043f44:	8fa5001c 	lw	a1,28(sp)
80043f48:	8fa40014 	lw	a0,20(sp)
80043f4c:	0c010c8d 	jal	80043234 <_ZN4core5slice5index24slice_end_index_len_fail17hc8473d7595779981E>
80043f50:	00000000 	nop
        unsafe { &*self.get_unchecked(slice) }
80043f54:	8fa7001c 	lw	a3,28(sp)
80043f58:	8fa60020 	lw	a2,32(sp)
80043f5c:	8fa50014 	lw	a1,20(sp)
80043f60:	8fa40010 	lw	a0,16(sp)
80043f64:	0c010df9 	jal	800437e4 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb3ac7c8e535d317cE>
80043f68:	00000000 	nop
    }
80043f6c:	8fbf004c 	lw	ra,76(sp)
80043f70:	27bd0050 	addiu	sp,sp,80
80043f74:	03e00008 	jr	ra
80043f78:	00000000 	nop
            slice_end_index_overflow_fail();
80043f7c:	8fa40018 	lw	a0,24(sp)
80043f80:	0c010cf1 	jal	800433c4 <_ZN4core5slice5index29slice_end_index_overflow_fail17h6abcd4ef789741ecE>
80043f84:	00000000 	nop

80043f88 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h506506b1e938b365E>:
    fn into_iter(self) -> Iter<'a, T> {
80043f88:	27bdffe0 	addiu	sp,sp,-32
80043f8c:	afbf001c 	sw	ra,28(sp)
80043f90:	afa40014 	sw	a0,20(sp)
80043f94:	afa50018 	sw	a1,24(sp)
        self.iter()
80043f98:	0c011241 	jal	80044904 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hd871f51187fc7ba3E>
80043f9c:	00000000 	nop
    }
80043fa0:	8fbf001c 	lw	ra,28(sp)
80043fa4:	27bd0020 	addiu	sp,sp,32
80043fa8:	03e00008 	jr	ra
80043fac:	00000000 	nop

80043fb0 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h57eea16c7126e9e6E>:
    fn into_iter(self) -> Iter<'a, T> {
80043fb0:	27bdffe0 	addiu	sp,sp,-32
80043fb4:	afbf001c 	sw	ra,28(sp)
80043fb8:	afa40014 	sw	a0,20(sp)
80043fbc:	afa50018 	sw	a1,24(sp)
        self.iter()
80043fc0:	0c01122d 	jal	800448b4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9fbf31f27946410E>
80043fc4:	00000000 	nop
    }
80043fc8:	8fbf001c 	lw	ra,28(sp)
80043fcc:	27bd0020 	addiu	sp,sp,32
80043fd0:	03e00008 	jr	ra
80043fd4:	00000000 	nop

80043fd8 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17heae6ddbb441c7c91E>:
    fn into_iter(self) -> Iter<'a, T> {
80043fd8:	27bdffe0 	addiu	sp,sp,-32
80043fdc:	afbf001c 	sw	ra,28(sp)
80043fe0:	afa40014 	sw	a0,20(sp)
80043fe4:	afa50018 	sw	a1,24(sp)
        self.iter()
80043fe8:	0c01124b 	jal	8004492c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hf734dea4d413a514E>
80043fec:	00000000 	nop
    }
80043ff0:	8fbf001c 	lw	ra,28(sp)
80043ff4:	27bd0020 	addiu	sp,sp,32
80043ff8:	03e00008 	jr	ra
80043ffc:	00000000 	nop

80044000 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hf62cec3fc988412fE>:
    fn into_iter(self) -> Iter<'a, T> {
80044000:	27bdffe0 	addiu	sp,sp,-32
80044004:	afbf001c 	sw	ra,28(sp)
80044008:	afa40014 	sw	a0,20(sp)
8004400c:	afa50018 	sw	a1,24(sp)
        self.iter()
80044010:	0c011219 	jal	80044864 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h4398d67ccee7f921E>
80044014:	00000000 	nop
    }
80044018:	8fbf001c 	lw	ra,28(sp)
8004401c:	27bd0020 	addiu	sp,sp,32
80044020:	03e00008 	jr	ra
80044024:	00000000 	nop

80044028 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h31de047743410105E>:
    pub(super) fn new(slice: &'a [T]) -> Self {
80044028:	27bdffb8 	addiu	sp,sp,-72
8004402c:	afbf0044 	sw	ra,68(sp)
80044030:	afa50014 	sw	a1,20(sp)
80044034:	afa40028 	sw	a0,40(sp)
80044038:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
8004403c:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
80044040:	0c00eebe 	jal	8003baf8 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hbf2cf18804db8335E>
80044044:	00000000 	nop
80044048:	00402025 	move	a0,v0
8004404c:	00602825 	move	a1,v1
80044050:	0c00ee06 	jal	8003b818 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hc3931c08778c30c2E>
80044054:	00000000 	nop
80044058:	00400825 	move	at,v0
8004405c:	afa10018 	sw	at,24(sp)
80044060:	afa20034 	sw	v0,52(sp)
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80044064:	0801101b 	j	8004406c <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h31de047743410105E+0x44>
80044068:	00000000 	nop
8004406c:	8fa10018 	lw	at,24(sp)
80044070:	8fa20014 	lw	v0,20(sp)
80044074:	afa10038 	sw	at,56(sp)
80044078:	afa1003c 	sw	at,60(sp)
8004407c:	afa20040 	sw	v0,64(sp)
        unsafe { intrinsics::offset(self, count) }
80044080:	00021080 	sll	v0,v0,0x2
80044084:	00220821 	addu	at,at,v0
80044088:	afa10024 	sw	at,36(sp)
8004408c:	08011025 	j	80044094 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h31de047743410105E+0x6c>
80044090:	00000000 	nop
            Self { ptr, end_or_len, _marker: PhantomData }
80044094:	8fa20018 	lw	v0,24(sp)
80044098:	8fa10024 	lw	at,36(sp)
8004409c:	afa2001c 	sw	v0,28(sp)
800440a0:	afa10020 	sw	at,32(sp)
    }
800440a4:	8fa2001c 	lw	v0,28(sp)
800440a8:	8fa30020 	lw	v1,32(sp)
800440ac:	8fbf0044 	lw	ra,68(sp)
800440b0:	27bd0048 	addiu	sp,sp,72
800440b4:	03e00008 	jr	ra
800440b8:	00000000 	nop

800440bc <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6d32bad37be50033E>:
    pub(super) fn new(slice: &'a [T]) -> Self {
800440bc:	27bdffb8 	addiu	sp,sp,-72
800440c0:	afbf0044 	sw	ra,68(sp)
800440c4:	afa50014 	sw	a1,20(sp)
800440c8:	afa40028 	sw	a0,40(sp)
800440cc:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
800440d0:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
800440d4:	0c00ee96 	jal	8003ba58 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17h521f83d15ca4974aE>
800440d8:	00000000 	nop
800440dc:	00402025 	move	a0,v0
800440e0:	00602825 	move	a1,v1
800440e4:	0c00edfc 	jal	8003b7f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h71a9277f345cbca1E>
800440e8:	00000000 	nop
800440ec:	00400825 	move	at,v0
800440f0:	afa10018 	sw	at,24(sp)
800440f4:	afa20034 	sw	v0,52(sp)
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
800440f8:	08011040 	j	80044100 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6d32bad37be50033E+0x44>
800440fc:	00000000 	nop
80044100:	8fa10018 	lw	at,24(sp)
80044104:	8fa20014 	lw	v0,20(sp)
80044108:	afa10038 	sw	at,56(sp)
8004410c:	afa1003c 	sw	at,60(sp)
80044110:	afa20040 	sw	v0,64(sp)
80044114:	00021100 	sll	v0,v0,0x4
80044118:	00220821 	addu	at,at,v0
8004411c:	afa10024 	sw	at,36(sp)
80044120:	0801104a 	j	80044128 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6d32bad37be50033E+0x6c>
80044124:	00000000 	nop
            Self { ptr, end_or_len, _marker: PhantomData }
80044128:	8fa20018 	lw	v0,24(sp)
8004412c:	8fa10024 	lw	at,36(sp)
80044130:	afa2001c 	sw	v0,28(sp)
80044134:	afa10020 	sw	at,32(sp)
    }
80044138:	8fa2001c 	lw	v0,28(sp)
8004413c:	8fa30020 	lw	v1,32(sp)
80044140:	8fbf0044 	lw	ra,68(sp)
80044144:	27bd0048 	addiu	sp,sp,72
80044148:	03e00008 	jr	ra
8004414c:	00000000 	nop

80044150 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6df4cda69de864a5E>:
    pub(super) fn new(slice: &'a [T]) -> Self {
80044150:	27bdffb8 	addiu	sp,sp,-72
80044154:	afbf0044 	sw	ra,68(sp)
80044158:	afa50014 	sw	a1,20(sp)
8004415c:	afa40028 	sw	a0,40(sp)
80044160:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
80044164:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
80044168:	0c00ee8c 	jal	8003ba30 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17h4f1d8ecd37555f58E>
8004416c:	00000000 	nop
80044170:	00402025 	move	a0,v0
80044174:	00602825 	move	a1,v1
80044178:	0c00edf2 	jal	8003b7c8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h5fd7ff25d87ee5b2E>
8004417c:	00000000 	nop
80044180:	00400825 	move	at,v0
80044184:	afa10018 	sw	at,24(sp)
80044188:	afa20034 	sw	v0,52(sp)
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
8004418c:	08011065 	j	80044194 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6df4cda69de864a5E+0x44>
80044190:	00000000 	nop
80044194:	8fa10018 	lw	at,24(sp)
80044198:	8fa20014 	lw	v0,20(sp)
8004419c:	afa10038 	sw	at,56(sp)
800441a0:	afa1003c 	sw	at,60(sp)
800441a4:	afa20040 	sw	v0,64(sp)
800441a8:	000210c0 	sll	v0,v0,0x3
800441ac:	00220821 	addu	at,at,v0
800441b0:	afa10024 	sw	at,36(sp)
800441b4:	0801106f 	j	800441bc <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6df4cda69de864a5E+0x6c>
800441b8:	00000000 	nop
            Self { ptr, end_or_len, _marker: PhantomData }
800441bc:	8fa20018 	lw	v0,24(sp)
800441c0:	8fa10024 	lw	at,36(sp)
800441c4:	afa2001c 	sw	v0,28(sp)
800441c8:	afa10020 	sw	at,32(sp)
    }
800441cc:	8fa2001c 	lw	v0,28(sp)
800441d0:	8fa30020 	lw	v1,32(sp)
800441d4:	8fbf0044 	lw	ra,68(sp)
800441d8:	27bd0048 	addiu	sp,sp,72
800441dc:	03e00008 	jr	ra
800441e0:	00000000 	nop

800441e4 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7b080c04c0ba8aaeE>:
    pub(super) fn new(slice: &'a [T]) -> Self {
800441e4:	27bdffb8 	addiu	sp,sp,-72
800441e8:	afbf0044 	sw	ra,68(sp)
800441ec:	afa50014 	sw	a1,20(sp)
800441f0:	afa40028 	sw	a0,40(sp)
800441f4:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
800441f8:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
800441fc:	0c00eeaa 	jal	8003baa8 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hb05997782b961f4dE>
80044200:	00000000 	nop
80044204:	00402025 	move	a0,v0
80044208:	00602825 	move	a1,v1
8004420c:	0c00ee1a 	jal	8003b868 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hdae9d46e5c3f465bE>
80044210:	00000000 	nop
80044214:	00400825 	move	at,v0
80044218:	afa10018 	sw	at,24(sp)
8004421c:	afa20034 	sw	v0,52(sp)
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80044220:	0801108a 	j	80044228 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7b080c04c0ba8aaeE+0x44>
80044224:	00000000 	nop
80044228:	8fa10018 	lw	at,24(sp)
8004422c:	8fa20014 	lw	v0,20(sp)
80044230:	afa10038 	sw	at,56(sp)
80044234:	afa1003c 	sw	at,60(sp)
80044238:	afa20040 	sw	v0,64(sp)
8004423c:	00220821 	addu	at,at,v0
80044240:	afa10024 	sw	at,36(sp)
80044244:	08011093 	j	8004424c <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7b080c04c0ba8aaeE+0x68>
80044248:	00000000 	nop
            Self { ptr, end_or_len, _marker: PhantomData }
8004424c:	8fa20018 	lw	v0,24(sp)
80044250:	8fa10024 	lw	at,36(sp)
80044254:	afa2001c 	sw	v0,28(sp)
80044258:	afa10020 	sw	at,32(sp)
    }
8004425c:	8fa2001c 	lw	v0,28(sp)
80044260:	8fa30020 	lw	v1,32(sp)
80044264:	8fbf0044 	lw	ra,68(sp)
80044268:	27bd0048 	addiu	sp,sp,72
8004426c:	03e00008 	jr	ra
80044270:	00000000 	nop

80044274 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hccab3c6803aea82eE>:
    pub(super) fn new(slice: &'a [T]) -> Self {
80044274:	27bdffb8 	addiu	sp,sp,-72
80044278:	afbf0044 	sw	ra,68(sp)
8004427c:	afa50014 	sw	a1,20(sp)
80044280:	afa40028 	sw	a0,40(sp)
80044284:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
80044288:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
8004428c:	0c00eeb4 	jal	8003bad0 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hbd53c9cbb1de8678E>
80044290:	00000000 	nop
80044294:	00402025 	move	a0,v0
80044298:	00602825 	move	a1,v1
8004429c:	0c00ede8 	jal	8003b7a0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h5a7a1ff19e811062E>
800442a0:	00000000 	nop
800442a4:	00400825 	move	at,v0
800442a8:	afa10018 	sw	at,24(sp)
800442ac:	afa20034 	sw	v0,52(sp)
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
800442b0:	080110ae 	j	800442b8 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hccab3c6803aea82eE+0x44>
800442b4:	00000000 	nop
800442b8:	8fa10018 	lw	at,24(sp)
800442bc:	8fa20014 	lw	v0,20(sp)
800442c0:	afa10038 	sw	at,56(sp)
800442c4:	afa1003c 	sw	at,60(sp)
800442c8:	afa20040 	sw	v0,64(sp)
800442cc:	00021040 	sll	v0,v0,0x1
800442d0:	00220821 	addu	at,at,v0
800442d4:	afa10024 	sw	at,36(sp)
800442d8:	080110b8 	j	800442e0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hccab3c6803aea82eE+0x6c>
800442dc:	00000000 	nop
            Self { ptr, end_or_len, _marker: PhantomData }
800442e0:	8fa20018 	lw	v0,24(sp)
800442e4:	8fa10024 	lw	at,36(sp)
800442e8:	afa2001c 	sw	v0,28(sp)
800442ec:	afa10020 	sw	at,32(sp)
    }
800442f0:	8fa2001c 	lw	v0,28(sp)
800442f4:	8fa30020 	lw	v1,32(sp)
800442f8:	8fbf0044 	lw	ra,68(sp)
800442fc:	27bd0048 	addiu	sp,sp,72
80044300:	03e00008 	jr	ra
80044304:	00000000 	nop

80044308 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6cfb7ebcdf3ab3eE>:
    pub(super) fn new(slice: &'a [T]) -> Self {
80044308:	27bdffb8 	addiu	sp,sp,-72
8004430c:	afbf0044 	sw	ra,68(sp)
80044310:	afa50014 	sw	a1,20(sp)
80044314:	afa40028 	sw	a0,40(sp)
80044318:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
8004431c:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
80044320:	0c00eea0 	jal	8003ba80 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17h70e047877930f053E>
80044324:	00000000 	nop
80044328:	00402025 	move	a0,v0
8004432c:	00602825 	move	a1,v1
80044330:	0c00ee10 	jal	8003b840 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hc62c740b2334bc63E>
80044334:	00000000 	nop
80044338:	00400825 	move	at,v0
8004433c:	afa10018 	sw	at,24(sp)
80044340:	afa20034 	sw	v0,52(sp)
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80044344:	080110d3 	j	8004434c <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6cfb7ebcdf3ab3eE+0x44>
80044348:	00000000 	nop
8004434c:	8fa10018 	lw	at,24(sp)
80044350:	8fa20014 	lw	v0,20(sp)
80044354:	afa10038 	sw	at,56(sp)
80044358:	afa1003c 	sw	at,60(sp)
8004435c:	afa20040 	sw	v0,64(sp)
80044360:	00021140 	sll	v0,v0,0x5
80044364:	00220821 	addu	at,at,v0
80044368:	afa10024 	sw	at,36(sp)
8004436c:	080110dd 	j	80044374 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6cfb7ebcdf3ab3eE+0x6c>
80044370:	00000000 	nop
            Self { ptr, end_or_len, _marker: PhantomData }
80044374:	8fa20018 	lw	v0,24(sp)
80044378:	8fa10024 	lw	at,36(sp)
8004437c:	afa2001c 	sw	v0,28(sp)
80044380:	afa10020 	sw	at,32(sp)
    }
80044384:	8fa2001c 	lw	v0,28(sp)
80044388:	8fa30020 	lw	v1,32(sp)
8004438c:	8fbf0044 	lw	ra,68(sp)
80044390:	27bd0048 	addiu	sp,sp,72
80044394:	03e00008 	jr	ra
80044398:	00000000 	nop

8004439c <_ZN4core5slice4iter13Iter$LT$T$GT$8as_slice17h7c85becc54e8e8beE>:
    /// println!("{:?}", iter.as_slice());
    /// ```
    #[must_use]
    #[stable(feature = "iter_to_slice", since = "1.4.0")]
    #[inline]
    pub fn as_slice(&self) -> &'a [T] {
8004439c:	27bdffd0 	addiu	sp,sp,-48
800443a0:	afbf002c 	sw	ra,44(sp)
800443a4:	00800825 	move	at,a0
800443a8:	afa10014 	sw	at,20(sp)
800443ac:	afa1001c 	sw	at,28(sp)
                unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
800443b0:	8c220000 	lw	v0,0(at)
800443b4:	afa20010 	sw	v0,16(sp)
800443b8:	afa20024 	sw	v0,36(sp)
800443bc:	24220004 	addiu	v0,at,4
800443c0:	afa20028 	sw	v0,40(sp)
800443c4:	8c240004 	lw	a0,4(at)
800443c8:	afa40020 	sw	a0,32(sp)
800443cc:	8c250000 	lw	a1,0(at)
800443d0:	0c00ee24 	jal	8003b890 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$7sub_ptr17h9b9ab3e8577ce557E>
800443d4:	00000000 	nop
800443d8:	8fa40010 	lw	a0,16(sp)
800443dc:	afa20018 	sw	v0,24(sp)
800443e0:	8fa50018 	lw	a1,24(sp)
800443e4:	0c011180 	jal	80044600 <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
800443e8:	00000000 	nop
        self.make_slice()
    }
800443ec:	8fbf002c 	lw	ra,44(sp)
800443f0:	27bd0030 	addiu	sp,sp,48
800443f4:	03e00008 	jr	ra
800443f8:	00000000 	nop

800443fc <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h329d5012612464b4E>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Send> Send for IterMut<'_, T> {}

impl<'a, T> IterMut<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a mut [T]) -> Self {
800443fc:	27bdffb8 	addiu	sp,sp,-72
80044400:	afbf0044 	sw	ra,68(sp)
80044404:	afa50014 	sw	a1,20(sp)
80044408:	afa40028 	sw	a0,40(sp)
8004440c:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
80044410:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
80044414:	0c00ee82 	jal	8003ba08 <_ZN98_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h2afdbdd28cb8f7c2E>
80044418:	00000000 	nop
8004441c:	00402025 	move	a0,v0
80044420:	00602825 	move	a1,v1
80044424:	0c00edde 	jal	8003b778 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h00d2554fa9e87b3eE>
80044428:	00000000 	nop
8004442c:	00400825 	move	at,v0
80044430:	afa10018 	sw	at,24(sp)
80044434:	afa20034 	sw	v0,52(sp)
        //
        // See the `next_unchecked!` and `is_empty!` macros as well as the
        // `post_inc_start` method for more information.
        unsafe {
            let end_or_len =
                if T::IS_ZST { without_provenance_mut(len) } else { ptr.as_ptr().add(len) };
80044438:	08011110 	j	80044440 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h329d5012612464b4E+0x44>
8004443c:	00000000 	nop
80044440:	8fa10018 	lw	at,24(sp)
80044444:	8fa20014 	lw	v0,20(sp)
80044448:	afa10038 	sw	at,56(sp)
8004444c:	afa1003c 	sw	at,60(sp)
80044450:	afa20040 	sw	v0,64(sp)
80044454:	00220821 	addu	at,at,v0
80044458:	afa10024 	sw	at,36(sp)
8004445c:	08011119 	j	80044464 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h329d5012612464b4E+0x68>
80044460:	00000000 	nop

            Self { ptr, end_or_len, _marker: PhantomData }
80044464:	8fa20018 	lw	v0,24(sp)
80044468:	8fa10024 	lw	at,36(sp)
8004446c:	afa2001c 	sw	v0,28(sp)
80044470:	afa10020 	sw	at,32(sp)
        }
    }
80044474:	8fa2001c 	lw	v0,28(sp)
80044478:	8fa30020 	lw	v1,32(sp)
8004447c:	8fbf0044 	lw	ra,68(sp)
80044480:	27bd0048 	addiu	sp,sp,72
80044484:	03e00008 	jr	ra
80044488:	00000000 	nop

8004448c <_ZN4core5slice4iter15Chunks$LT$T$GT$3new17h4c42651d7c0f5105E>:
    chunk_size: usize,
}

impl<'a, T: 'a> Chunks<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a [T], size: usize) -> Self {
8004448c:	27bdfff0 	addiu	sp,sp,-16
80044490:	00801025 	move	v0,a0
80044494:	afa50004 	sw	a1,4(sp)
80044498:	afa60008 	sw	a2,8(sp)
8004449c:	afa7000c 	sw	a3,12(sp)
        Self { v: slice, chunk_size: size }
800444a0:	ac850000 	sw	a1,0(a0)
800444a4:	ac860004 	sw	a2,4(a0)
800444a8:	ac870008 	sw	a3,8(a0)
800444ac:	27bd0010 	addiu	sp,sp,16
    }
800444b0:	03e00008 	jr	ra
800444b4:	00000000 	nop

800444b8 <_ZN93_$LT$core..slice..iter..Chunks$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47ac45bc3c7539b6E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<'a, T> Iterator for Chunks<'a, T> {
    type Item = &'a [T];

    #[inline]
    fn next(&mut self) -> Option<&'a [T]> {
800444b8:	27bdffb0 	addiu	sp,sp,-80
800444bc:	afbf004c 	sw	ra,76(sp)
800444c0:	00800825 	move	at,a0
800444c4:	afa10018 	sw	at,24(sp)
800444c8:	afa10034 	sw	at,52(sp)
        if self.v.is_empty() {
800444cc:	8c240000 	lw	a0,0(at)
800444d0:	8c250004 	lw	a1,4(at)
800444d4:	0c0111b8 	jal	800446e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8is_empty17h919103cb7fc266a9E>
800444d8:	00000000 	nop
800444dc:	14400023 	bnez	v0,8004456c <_ZN93_$LT$core..slice..iter..Chunks$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47ac45bc3c7539b6E+0xb4>
800444e0:	00000000 	nop
800444e4:	0801113b 	j	800444ec <_ZN93_$LT$core..slice..iter..Chunks$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47ac45bc3c7539b6E+0x34>
800444e8:	00000000 	nop
            None
        } else {
            let chunksz = cmp::min(self.v.len(), self.chunk_size);
800444ec:	8fa10018 	lw	at,24(sp)
800444f0:	8c240004 	lw	a0,4(at)
800444f4:	8c250008 	lw	a1,8(at)
800444f8:	0c00f21f 	jal	8003c87c <_ZN4core3cmp3min17hec05a35ccdb294eaE>
800444fc:	00000000 	nop
80044500:	8fa10018 	lw	at,24(sp)
80044504:	00403825 	move	a3,v0
80044508:	afa70038 	sw	a3,56(sp)
            let (fst, snd) = self.v.split_at(chunksz);
8004450c:	8c250000 	lw	a1,0(at)
80044510:	8c260004 	lw	a2,4(at)
80044514:	3c01810a 	lui	at,0x810a
80044518:	2421c038 	addiu	at,at,-16328
8004451c:	03a01025 	move	v0,sp
80044520:	ac410010 	sw	at,16(v0)
80044524:	27a40024 	addiu	a0,sp,36
80044528:	0c01130e 	jal	80044c38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17hf27feb3532af0a22E>
8004452c:	00000000 	nop
80044530:	8fa40018 	lw	a0,24(sp)
80044534:	8fa20024 	lw	v0,36(sp)
80044538:	8fa10028 	lw	at,40(sp)
8004453c:	afa2003c 	sw	v0,60(sp)
80044540:	afa10040 	sw	at,64(sp)
80044544:	8fa5002c 	lw	a1,44(sp)
80044548:	8fa30030 	lw	v1,48(sp)
8004454c:	afa50044 	sw	a1,68(sp)
80044550:	afa30048 	sw	v1,72(sp)
            self.v = snd;
80044554:	ac850000 	sw	a1,0(a0)
80044558:	ac830004 	sw	v1,4(a0)
            Some(fst)
8004455c:	afa2001c 	sw	v0,28(sp)
80044560:	afa10020 	sw	at,32(sp)
        if self.v.is_empty() {
80044564:	0801115e 	j	80044578 <_ZN93_$LT$core..slice..iter..Chunks$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47ac45bc3c7539b6E+0xc0>
80044568:	00000000 	nop
            None
8004456c:	afa0001c 	sw	zero,28(sp)
        if self.v.is_empty() {
80044570:	0801115e 	j	80044578 <_ZN93_$LT$core..slice..iter..Chunks$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47ac45bc3c7539b6E+0xc0>
80044574:	00000000 	nop
        }
    }
80044578:	8fa2001c 	lw	v0,28(sp)
8004457c:	8fa30020 	lw	v1,32(sp)
80044580:	8fbf004c 	lw	ra,76(sp)
80044584:	27bd0050 	addiu	sp,sp,80
80044588:	03e00008 	jr	ra
8004458c:	00000000 	nop

80044590 <_ZN4core5slice3raw14from_raw_parts17h1495287b2578ef29E>:
pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
80044590:	27bdffd8 	addiu	sp,sp,-40
80044594:	afbf0024 	sw	ra,36(sp)
80044598:	afa50014 	sw	a1,20(sp)
8004459c:	afa40018 	sw	a0,24(sp)
800445a0:	afa4001c 	sw	a0,28(sp)
800445a4:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
800445a8:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
800445ac:	00000000 	nop
800445b0:	1440000b 	bnez	v0,800445e0 <_ZN4core5slice3raw14from_raw_parts17h1495287b2578ef29E+0x50>
800445b4:	00000000 	nop
800445b8:	08011170 	j	800445c0 <_ZN4core5slice3raw14from_raw_parts17h1495287b2578ef29E+0x30>
800445bc:	00000000 	nop
        &*ptr::slice_from_raw_parts(data, len)
800445c0:	8fa50014 	lw	a1,20(sp)
800445c4:	8fa40018 	lw	a0,24(sp)
800445c8:	0c00efd4 	jal	8003bf50 <_ZN4core3ptr20slice_from_raw_parts17h0c1fd0adcab083c0E>
800445cc:	00000000 	nop
}
800445d0:	8fbf0024 	lw	ra,36(sp)
800445d4:	27bd0028 	addiu	sp,sp,40
800445d8:	03e00008 	jr	ra
800445dc:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800445e0:	8fa70014 	lw	a3,20(sp)
800445e4:	8fa40018 	lw	a0,24(sp)
800445e8:	24060004 	li	a2,4
800445ec:	00c02825 	move	a1,a2
800445f0:	0c012b47 	jal	8004ad1c <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE>
800445f4:	00000000 	nop
800445f8:	08011170 	j	800445c0 <_ZN4core5slice3raw14from_raw_parts17h1495287b2578ef29E+0x30>
800445fc:	00000000 	nop

80044600 <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>:
pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
80044600:	27bdffd8 	addiu	sp,sp,-40
80044604:	afbf0024 	sw	ra,36(sp)
80044608:	afa50014 	sw	a1,20(sp)
8004460c:	afa40018 	sw	a0,24(sp)
80044610:	afa4001c 	sw	a0,28(sp)
80044614:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80044618:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8004461c:	00000000 	nop
80044620:	1440000b 	bnez	v0,80044650 <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E+0x50>
80044624:	00000000 	nop
80044628:	0801118c 	j	80044630 <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E+0x30>
8004462c:	00000000 	nop
        &*ptr::slice_from_raw_parts(data, len)
80044630:	8fa50014 	lw	a1,20(sp)
80044634:	8fa40018 	lw	a0,24(sp)
80044638:	0c00efc9 	jal	8003bf24 <_ZN4core3ptr20slice_from_raw_parts17h0ab563afab92ed6fE>
8004463c:	00000000 	nop
}
80044640:	8fbf0024 	lw	ra,36(sp)
80044644:	27bd0028 	addiu	sp,sp,40
80044648:	03e00008 	jr	ra
8004464c:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80044650:	8fa70014 	lw	a3,20(sp)
80044654:	8fa40018 	lw	a0,24(sp)
80044658:	24060001 	li	a2,1
8004465c:	00c02825 	move	a1,a2
80044660:	0c012b47 	jal	8004ad1c <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE>
80044664:	00000000 	nop
80044668:	0801118c 	j	80044630 <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E+0x30>
8004466c:	00000000 	nop

80044670 <_ZN4core5slice3raw14from_raw_parts17hbd196beca63c9654E>:
pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
80044670:	27bdffd8 	addiu	sp,sp,-40
80044674:	afbf0024 	sw	ra,36(sp)
80044678:	afa50014 	sw	a1,20(sp)
8004467c:	afa40018 	sw	a0,24(sp)
80044680:	afa4001c 	sw	a0,28(sp)
80044684:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80044688:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8004468c:	00000000 	nop
80044690:	1440000b 	bnez	v0,800446c0 <_ZN4core5slice3raw14from_raw_parts17hbd196beca63c9654E+0x50>
80044694:	00000000 	nop
80044698:	080111a8 	j	800446a0 <_ZN4core5slice3raw14from_raw_parts17hbd196beca63c9654E+0x30>
8004469c:	00000000 	nop
        &*ptr::slice_from_raw_parts(data, len)
800446a0:	8fa50014 	lw	a1,20(sp)
800446a4:	8fa40018 	lw	a0,24(sp)
800446a8:	0c00efea 	jal	8003bfa8 <_ZN4core3ptr20slice_from_raw_parts17hfda2f490e7fcec8bE>
800446ac:	00000000 	nop
}
800446b0:	8fbf0024 	lw	ra,36(sp)
800446b4:	27bd0028 	addiu	sp,sp,40
800446b8:	03e00008 	jr	ra
800446bc:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800446c0:	8fa70014 	lw	a3,20(sp)
800446c4:	8fa40018 	lw	a0,24(sp)
800446c8:	24050010 	li	a1,16
800446cc:	24060004 	li	a2,4
800446d0:	0c012b47 	jal	8004ad1c <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE>
800446d4:	00000000 	nop
800446d8:	080111a8 	j	800446a0 <_ZN4core5slice3raw14from_raw_parts17hbd196beca63c9654E+0x30>
800446dc:	00000000 	nop

800446e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8is_empty17h919103cb7fc266a9E>:
    pub const fn is_empty(&self) -> bool {
800446e0:	27bdfff8 	addiu	sp,sp,-8
800446e4:	afa40000 	sw	a0,0(sp)
800446e8:	afa50004 	sw	a1,4(sp)
        self.len() == 0
800446ec:	2ca20001 	sltiu	v0,a1,1
800446f0:	27bd0008 	addiu	sp,sp,8
    }
800446f4:	03e00008 	jr	ra
800446f8:	00000000 	nop

800446fc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h0e1c4c7e4b7b26b1E>:
    pub fn get<I>(&self, index: I) -> Option<&I::Output>
800446fc:	27bdffd8 	addiu	sp,sp,-40
80044700:	afbf0024 	sw	ra,36(sp)
80044704:	afa60014 	sw	a2,20(sp)
80044708:	00a03025 	move	a2,a1
8004470c:	00802825 	move	a1,a0
80044710:	8fa40014 	lw	a0,20(sp)
80044714:	afa50018 	sw	a1,24(sp)
80044718:	afa6001c 	sw	a2,28(sp)
8004471c:	afa40020 	sw	a0,32(sp)
        index.get(self)
80044720:	0c010cff 	jal	800433fc <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h14bc8037b64de363E>
80044724:	00000000 	nop
    }
80044728:	8fbf0024 	lw	ra,36(sp)
8004472c:	27bd0028 	addiu	sp,sp,40
80044730:	03e00008 	jr	ra
80044734:	00000000 	nop

80044738 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h437f19a6e4d4a724E>:
    pub fn get<I>(&self, index: I) -> Option<&I::Output>
80044738:	27bdffd8 	addiu	sp,sp,-40
8004473c:	afbf0024 	sw	ra,36(sp)
80044740:	afa60014 	sw	a2,20(sp)
80044744:	00a03025 	move	a2,a1
80044748:	00802825 	move	a1,a0
8004474c:	8fa40014 	lw	a0,20(sp)
80044750:	afa50018 	sw	a1,24(sp)
80044754:	afa6001c 	sw	a2,28(sp)
80044758:	afa40020 	sw	a0,32(sp)
        index.get(self)
8004475c:	0c010d39 	jal	800434e4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17he78150f80a7d8cf9E>
80044760:	00000000 	nop
    }
80044764:	8fbf0024 	lw	ra,36(sp)
80044768:	27bd0028 	addiu	sp,sp,40
8004476c:	03e00008 	jr	ra
80044770:	00000000 	nop

80044774 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17he7a74869bcb725e5E>:
    pub fn get<I>(&self, index: I) -> Option<&I::Output>
80044774:	27bdffd8 	addiu	sp,sp,-40
80044778:	afbf0024 	sw	ra,36(sp)
8004477c:	afa60014 	sw	a2,20(sp)
80044780:	00a03025 	move	a2,a1
80044784:	00802825 	move	a1,a0
80044788:	8fa40014 	lw	a0,20(sp)
8004478c:	afa50018 	sw	a1,24(sp)
80044790:	afa6001c 	sw	a2,28(sp)
80044794:	afa40020 	sw	a0,32(sp)
        index.get(self)
80044798:	0c010d1c 	jal	80043470 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h3178bb15dbadb5bcE>
8004479c:	00000000 	nop
    }
800447a0:	8fbf0024 	lw	ra,36(sp)
800447a4:	27bd0028 	addiu	sp,sp,40
800447a8:	03e00008 	jr	ra
800447ac:	00000000 	nop

800447b0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17h2440dac3f0c7bee0E>:
    pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output
800447b0:	27bdffd8 	addiu	sp,sp,-40
800447b4:	afbf0024 	sw	ra,36(sp)
800447b8:	afa60014 	sw	a2,20(sp)
800447bc:	00a03025 	move	a2,a1
800447c0:	00802825 	move	a1,a0
800447c4:	8fa40014 	lw	a0,20(sp)
800447c8:	afa50018 	sw	a1,24(sp)
800447cc:	afa6001c 	sw	a2,28(sp)
800447d0:	afa40020 	sw	a0,32(sp)
        unsafe { &*index.get_unchecked(self) }
800447d4:	0c010d7e 	jal	800435f8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h2b3719edff8e275cE>
800447d8:	00000000 	nop
    }
800447dc:	8fbf0024 	lw	ra,36(sp)
800447e0:	27bd0028 	addiu	sp,sp,40
800447e4:	03e00008 	jr	ra
800447e8:	00000000 	nop

800447ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17h6d5ffdb6f0126765E>:
    pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output
800447ec:	27bdffd8 	addiu	sp,sp,-40
800447f0:	afbf0024 	sw	ra,36(sp)
800447f4:	afa60014 	sw	a2,20(sp)
800447f8:	00a03025 	move	a2,a1
800447fc:	00802825 	move	a1,a0
80044800:	8fa40014 	lw	a0,20(sp)
80044804:	afa50018 	sw	a1,24(sp)
80044808:	afa6001c 	sw	a2,28(sp)
8004480c:	afa40020 	sw	a0,32(sp)
        unsafe { &*index.get_unchecked(self) }
80044810:	0c010da7 	jal	8004369c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h9107849c459d3e13E>
80044814:	00000000 	nop
    }
80044818:	8fbf0024 	lw	ra,36(sp)
8004481c:	27bd0028 	addiu	sp,sp,40
80044820:	03e00008 	jr	ra
80044824:	00000000 	nop

80044828 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17he56cda5e0b659a59E>:
    pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output
80044828:	27bdffd8 	addiu	sp,sp,-40
8004482c:	afbf0024 	sw	ra,36(sp)
80044830:	afa60014 	sw	a2,20(sp)
80044834:	00a03025 	move	a2,a1
80044838:	00802825 	move	a1,a0
8004483c:	8fa40014 	lw	a0,20(sp)
80044840:	afa50018 	sw	a1,24(sp)
80044844:	afa6001c 	sw	a2,28(sp)
80044848:	afa40020 	sw	a0,32(sp)
        unsafe { &*index.get_unchecked(self) }
8004484c:	0c010dd0 	jal	80043740 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hab2db58a58b371faE>
80044850:	00000000 	nop
    }
80044854:	8fbf0024 	lw	ra,36(sp)
80044858:	27bd0028 	addiu	sp,sp,40
8004485c:	03e00008 	jr	ra
80044860:	00000000 	nop

80044864 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h4398d67ccee7f921E>:
    pub fn iter(&self) -> Iter<'_, T> {
80044864:	27bdffe0 	addiu	sp,sp,-32
80044868:	afbf001c 	sw	ra,28(sp)
8004486c:	afa40014 	sw	a0,20(sp)
80044870:	afa50018 	sw	a1,24(sp)
        Iter::new(self)
80044874:	0c01109d 	jal	80044274 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hccab3c6803aea82eE>
80044878:	00000000 	nop
    }
8004487c:	8fbf001c 	lw	ra,28(sp)
80044880:	27bd0020 	addiu	sp,sp,32
80044884:	03e00008 	jr	ra
80044888:	00000000 	nop

8004488c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h5bb4b3109a0ec868E>:
    pub fn iter(&self) -> Iter<'_, T> {
8004488c:	27bdffe0 	addiu	sp,sp,-32
80044890:	afbf001c 	sw	ra,28(sp)
80044894:	afa40014 	sw	a0,20(sp)
80044898:	afa50018 	sw	a1,24(sp)
        Iter::new(self)
8004489c:	0c0110c2 	jal	80044308 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6cfb7ebcdf3ab3eE>
800448a0:	00000000 	nop
    }
800448a4:	8fbf001c 	lw	ra,28(sp)
800448a8:	27bd0020 	addiu	sp,sp,32
800448ac:	03e00008 	jr	ra
800448b0:	00000000 	nop

800448b4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9fbf31f27946410E>:
    pub fn iter(&self) -> Iter<'_, T> {
800448b4:	27bdffe0 	addiu	sp,sp,-32
800448b8:	afbf001c 	sw	ra,28(sp)
800448bc:	afa40014 	sw	a0,20(sp)
800448c0:	afa50018 	sw	a1,24(sp)
        Iter::new(self)
800448c4:	0c011079 	jal	800441e4 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7b080c04c0ba8aaeE>
800448c8:	00000000 	nop
    }
800448cc:	8fbf001c 	lw	ra,28(sp)
800448d0:	27bd0020 	addiu	sp,sp,32
800448d4:	03e00008 	jr	ra
800448d8:	00000000 	nop

800448dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hc220d605b982b825E>:
    pub fn iter(&self) -> Iter<'_, T> {
800448dc:	27bdffe0 	addiu	sp,sp,-32
800448e0:	afbf001c 	sw	ra,28(sp)
800448e4:	afa40014 	sw	a0,20(sp)
800448e8:	afa50018 	sw	a1,24(sp)
        Iter::new(self)
800448ec:	0c011054 	jal	80044150 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6df4cda69de864a5E>
800448f0:	00000000 	nop
    }
800448f4:	8fbf001c 	lw	ra,28(sp)
800448f8:	27bd0020 	addiu	sp,sp,32
800448fc:	03e00008 	jr	ra
80044900:	00000000 	nop

80044904 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hd871f51187fc7ba3E>:
    pub fn iter(&self) -> Iter<'_, T> {
80044904:	27bdffe0 	addiu	sp,sp,-32
80044908:	afbf001c 	sw	ra,28(sp)
8004490c:	afa40014 	sw	a0,20(sp)
80044910:	afa50018 	sw	a1,24(sp)
        Iter::new(self)
80044914:	0c01102f 	jal	800440bc <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6d32bad37be50033E>
80044918:	00000000 	nop
    }
8004491c:	8fbf001c 	lw	ra,28(sp)
80044920:	27bd0020 	addiu	sp,sp,32
80044924:	03e00008 	jr	ra
80044928:	00000000 	nop

8004492c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hf734dea4d413a514E>:
    pub fn iter(&self) -> Iter<'_, T> {
8004492c:	27bdffe0 	addiu	sp,sp,-32
80044930:	afbf001c 	sw	ra,28(sp)
80044934:	afa40014 	sw	a0,20(sp)
80044938:	afa50018 	sw	a1,24(sp)
        Iter::new(self)
8004493c:	0c01100a 	jal	80044028 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h31de047743410105E>
80044940:	00000000 	nop
    }
80044944:	8fbf001c 	lw	ra,28(sp)
80044948:	27bd0020 	addiu	sp,sp,32
8004494c:	03e00008 	jr	ra
80044950:	00000000 	nop

80044954 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>:
    /// }
    /// assert_eq!(x, &[3, 4, 6]);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn iter_mut(&mut self) -> IterMut<'_, T> {
80044954:	27bdffe0 	addiu	sp,sp,-32
80044958:	afbf001c 	sw	ra,28(sp)
8004495c:	afa40014 	sw	a0,20(sp)
80044960:	afa50018 	sw	a1,24(sp)
        IterMut::new(self)
80044964:	0c0110ff 	jal	800443fc <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h329d5012612464b4E>
80044968:	00000000 	nop
    }
8004496c:	8fbf001c 	lw	ra,28(sp)
80044970:	27bd0020 	addiu	sp,sp,32
80044974:	03e00008 	jr	ra
80044978:	00000000 	nop

8004497c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6chunks17h77ab5ed9164bef81E>:
    /// [`chunks_exact`]: slice::chunks_exact
    /// [`rchunks`]: slice::rchunks
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    #[track_caller]
    pub fn chunks(&self, chunk_size: usize) -> Chunks<'_, T> {
8004497c:	27bdffa8 	addiu	sp,sp,-88
80044980:	afbf0054 	sw	ra,84(sp)
80044984:	afa70018 	sw	a3,24(sp)
80044988:	afa6001c 	sw	a2,28(sp)
8004498c:	afa50020 	sw	a1,32(sp)
80044990:	afa40024 	sw	a0,36(sp)
80044994:	afa40028 	sw	a0,40(sp)
80044998:	8fa10068 	lw	at,104(sp)
8004499c:	afa1002c 	sw	at,44(sp)
800449a0:	afa50048 	sw	a1,72(sp)
800449a4:	afa6004c 	sw	a2,76(sp)
800449a8:	afa70050 	sw	a3,80(sp)
        assert!(chunk_size != 0, "chunk size must be non-zero");
800449ac:	14e0000e 	bnez	a3,800449e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6chunks17h77ab5ed9164bef81E+0x6c>
800449b0:	00000000 	nop
800449b4:	0801126f 	j	800449bc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6chunks17h77ab5ed9164bef81E+0x40>
800449b8:	00000000 	nop
800449bc:	3c01810a 	lui	at,0x810a
800449c0:	2425c064 	addiu	a1,at,-16284
800449c4:	27a40030 	addiu	a0,sp,48
800449c8:	afa40014 	sw	a0,20(sp)
800449cc:	24060001 	li	a2,1
800449d0:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
800449d4:	00000000 	nop
800449d8:	8fa40014 	lw	a0,20(sp)
800449dc:	8fa5002c 	lw	a1,44(sp)
800449e0:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800449e4:	00000000 	nop
        Chunks::new(self, chunk_size)
800449e8:	8fa70018 	lw	a3,24(sp)
800449ec:	8fa6001c 	lw	a2,28(sp)
800449f0:	8fa50020 	lw	a1,32(sp)
800449f4:	8fa40024 	lw	a0,36(sp)
800449f8:	0c011123 	jal	8004448c <_ZN4core5slice4iter15Chunks$LT$T$GT$3new17h4c42651d7c0f5105E>
800449fc:	00000000 	nop
80044a00:	8fa20028 	lw	v0,40(sp)
    }
80044a04:	8fbf0054 	lw	ra,84(sp)
80044a08:	27bd0058 	addiu	sp,sp,88
80044a0c:	03e00008 	jr	ra
80044a10:	00000000 	nop

80044a14 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked17h984c86d798c757f7E>:
    /// // let chunks: &[[_; 0]] = slice.as_chunks_unchecked() // Zero-length chunks are never allowed
    /// ```
    #[unstable(feature = "slice_as_chunks", issue = "74985")]
    #[inline]
    #[must_use]
    pub const unsafe fn as_chunks_unchecked<const N: usize>(&self) -> &[[T; N]] {
80044a14:	27bdffc8 	addiu	sp,sp,-56
80044a18:	afbf0034 	sw	ra,52(sp)
80044a1c:	afa50010 	sw	a1,16(sp)
80044a20:	afa40014 	sw	a0,20(sp)
80044a24:	afa40018 	sw	a0,24(sp)
80044a28:	afa5001c 	sw	a1,28(sp)
        assert_unsafe_precondition!(
80044a2c:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80044a30:	00000000 	nop
80044a34:	14400012 	bnez	v0,80044a80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked17h984c86d798c757f7E+0x6c>
80044a38:	00000000 	nop
80044a3c:	08011291 	j	80044a44 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked17h984c86d798c757f7E+0x30>
80044a40:	00000000 	nop
            check_language_ub,
            "slice::as_chunks_unchecked requires `N != 0` and the slice to split exactly into `N`-element chunks",
            (n: usize = N, len: usize = self.len()) => n != 0 && len % n == 0,
        );
        // SAFETY: Caller must guarantee that `N` is nonzero and exactly divides the slice length
        let new_len = unsafe { exact_div(self.len(), N) };
80044a44:	8fa40014 	lw	a0,20(sp)
80044a48:	8fa10010 	lw	at,16(sp)
80044a4c:	00011082 	srl	v0,at,0x2
80044a50:	afa20020 	sw	v0,32(sp)
80044a54:	8fa50020 	lw	a1,32(sp)
80044a58:	afa50024 	sw	a1,36(sp)
80044a5c:	afa4002c 	sw	a0,44(sp)
80044a60:	afa10030 	sw	at,48(sp)
80044a64:	afa40028 	sw	a0,40(sp)
        // SAFETY: We cast a slice of `new_len * N` elements into
        // a slice of `new_len` many `N` elements chunks.
        unsafe { from_raw_parts(self.as_ptr().cast(), new_len) }
80044a68:	0c01119c 	jal	80044670 <_ZN4core5slice3raw14from_raw_parts17hbd196beca63c9654E>
80044a6c:	00000000 	nop
    }
80044a70:	8fbf0034 	lw	ra,52(sp)
80044a74:	27bd0038 	addiu	sp,sp,56
80044a78:	03e00008 	jr	ra
80044a7c:	00000000 	nop
        assert_unsafe_precondition!(
80044a80:	8fa50010 	lw	a1,16(sp)
80044a84:	24040004 	li	a0,4
80044a88:	0c012b69 	jal	8004ada4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE>
80044a8c:	00000000 	nop
80044a90:	08011291 	j	80044a44 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked17h984c86d798c757f7E+0x30>
80044a94:	00000000 	nop

80044a98 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$9as_chunks17h8beb15ae9ec351f9E>:
    /// ```
    #[unstable(feature = "slice_as_chunks", issue = "74985")]
    #[inline]
    #[track_caller]
    #[must_use]
    pub const fn as_chunks<const N: usize>(&self) -> (&[[T; N]], &[T]) {
80044a98:	27bdff78 	addiu	sp,sp,-136
80044a9c:	afbf0084 	sw	ra,132(sp)
80044aa0:	afa70024 	sw	a3,36(sp)
80044aa4:	afa60028 	sw	a2,40(sp)
80044aa8:	afa5002c 	sw	a1,44(sp)
80044aac:	afa40030 	sw	a0,48(sp)
80044ab0:	afa40034 	sw	a0,52(sp)
80044ab4:	afa50060 	sw	a1,96(sp)
80044ab8:	afa60064 	sw	a2,100(sp)
        assert!(N != 0, "chunk size must be non-zero");
80044abc:	080112b1 	j	80044ac4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$9as_chunks17h8beb15ae9ec351f9E+0x2c>
80044ac0:	00000000 	nop
        let len = self.len() / N;
80044ac4:	8fa10028 	lw	at,40(sp)
80044ac8:	00011082 	srl	v0,at,0x2
80044acc:	afa20068 	sw	v0,104(sp)
80044ad0:	2402fffc 	li	v0,-4
        let (multiple_of_n, remainder) = self.split_at(len * N);
80044ad4:	00220824 	and	at,at,v0
80044ad8:	afa10020 	sw	at,32(sp)
80044adc:	24010000 	li	at,0
80044ae0:	14000028 	bnez	zero,80044b84 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$9as_chunks17h8beb15ae9ec351f9E+0xec>
80044ae4:	00000000 	nop
80044ae8:	080112bc 	j	80044af0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$9as_chunks17h8beb15ae9ec351f9E+0x58>
80044aec:	00000000 	nop
80044af0:	8fa70020 	lw	a3,32(sp)
80044af4:	8fa60028 	lw	a2,40(sp)
80044af8:	8fa5002c 	lw	a1,44(sp)
80044afc:	8fa10024 	lw	at,36(sp)
80044b00:	03a01025 	move	v0,sp
80044b04:	ac410010 	sw	at,16(v0)
80044b08:	27a40050 	addiu	a0,sp,80
80044b0c:	0c01130e 	jal	80044c38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17hf27feb3532af0a22E>
80044b10:	00000000 	nop
80044b14:	8fa40050 	lw	a0,80(sp)
80044b18:	8fa50054 	lw	a1,84(sp)
80044b1c:	afa4006c 	sw	a0,108(sp)
80044b20:	afa50070 	sw	a1,112(sp)
80044b24:	8fa20058 	lw	v0,88(sp)
80044b28:	afa20018 	sw	v0,24(sp)
80044b2c:	8fa1005c 	lw	at,92(sp)
80044b30:	afa1001c 	sw	at,28(sp)
80044b34:	afa20074 	sw	v0,116(sp)
80044b38:	afa10078 	sw	at,120(sp)
        // SAFETY: We already panicked for zero, and ensured by construction
        // that the length of the subslice is a multiple of N.
        let array_slice = unsafe { multiple_of_n.as_chunks_unchecked() };
80044b3c:	0c011285 	jal	80044a14 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked17h984c86d798c757f7E>
80044b40:	00000000 	nop
80044b44:	8fa40018 	lw	a0,24(sp)
80044b48:	8fa1001c 	lw	at,28(sp)
80044b4c:	00403025 	move	a2,v0
80044b50:	8fa20034 	lw	v0,52(sp)
80044b54:	00602825 	move	a1,v1
80044b58:	8fa30030 	lw	v1,48(sp)
80044b5c:	afa6007c 	sw	a2,124(sp)
80044b60:	afa50080 	sw	a1,128(sp)
        (array_slice, remainder)
80044b64:	ac660000 	sw	a2,0(v1)
80044b68:	ac650004 	sw	a1,4(v1)
80044b6c:	ac640008 	sw	a0,8(v1)
80044b70:	ac61000c 	sw	at,12(v1)
    }
80044b74:	8fbf0084 	lw	ra,132(sp)
80044b78:	27bd0088 	addiu	sp,sp,136
80044b7c:	03e00008 	jr	ra
80044b80:	00000000 	nop
        let (multiple_of_n, remainder) = self.split_at(len * N);
80044b84:	8fa40024 	lw	a0,36(sp)
80044b88:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
80044b8c:	00000000 	nop

80044b90 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17h7f0dba53eee5d866E>:
    #[rustc_const_stable(feature = "const_slice_split_at_not_mut", since = "1.71.0")]
    #[rustc_allow_const_fn_unstable(split_at_checked)]
    #[inline]
    #[track_caller]
    #[must_use]
    pub const fn split_at(&self, mid: usize) -> (&[T], &[T]) {
80044b90:	27bdffa8 	addiu	sp,sp,-88
80044b94:	afbf0054 	sw	ra,84(sp)
80044b98:	afa40014 	sw	a0,20(sp)
80044b9c:	afa40018 	sw	a0,24(sp)
80044ba0:	8fa10068 	lw	at,104(sp)
80044ba4:	afa1001c 	sw	at,28(sp)
80044ba8:	afa50048 	sw	a1,72(sp)
80044bac:	afa6004c 	sw	a2,76(sp)
80044bb0:	afa70050 	sw	a3,80(sp)
80044bb4:	27a40020 	addiu	a0,sp,32
        match self.split_at_checked(mid) {
80044bb8:	0c0113e4 	jal	80044f90 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hb8915365f7d2841fE>
80044bbc:	00000000 	nop
80044bc0:	8fa10020 	lw	at,32(sp)
80044bc4:	1420000e 	bnez	at,80044c00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17h7f0dba53eee5d866E+0x70>
80044bc8:	00000000 	nop
80044bcc:	080112f5 	j	80044bd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17h7f0dba53eee5d866E+0x44>
80044bd0:	00000000 	nop
            Some(pair) => pair,
            None => panic!("mid > len"),
80044bd4:	3c01810a 	lui	at,0x810a
80044bd8:	2425c078 	addiu	a1,at,-16264
80044bdc:	27a40030 	addiu	a0,sp,48
80044be0:	afa40010 	sw	a0,16(sp)
80044be4:	24060001 	li	a2,1
80044be8:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80044bec:	00000000 	nop
80044bf0:	8fa40010 	lw	a0,16(sp)
80044bf4:	8fa5001c 	lw	a1,28(sp)
80044bf8:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80044bfc:	00000000 	nop
            Some(pair) => pair,
80044c00:	8fa20018 	lw	v0,24(sp)
80044c04:	8fa30014 	lw	v1,20(sp)
80044c08:	8fa1002c 	lw	at,44(sp)
80044c0c:	ac61000c 	sw	at,12(v1)
80044c10:	8fa10028 	lw	at,40(sp)
80044c14:	ac610008 	sw	at,8(v1)
80044c18:	8fa10024 	lw	at,36(sp)
80044c1c:	ac610004 	sw	at,4(v1)
80044c20:	8fa10020 	lw	at,32(sp)
80044c24:	ac610000 	sw	at,0(v1)
        }
    }
80044c28:	8fbf0054 	lw	ra,84(sp)
80044c2c:	27bd0058 	addiu	sp,sp,88
80044c30:	03e00008 	jr	ra
80044c34:	00000000 	nop

80044c38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17hf27feb3532af0a22E>:
    pub const fn split_at(&self, mid: usize) -> (&[T], &[T]) {
80044c38:	27bdffa8 	addiu	sp,sp,-88
80044c3c:	afbf0054 	sw	ra,84(sp)
80044c40:	afa40014 	sw	a0,20(sp)
80044c44:	afa40018 	sw	a0,24(sp)
80044c48:	8fa10068 	lw	at,104(sp)
80044c4c:	afa1001c 	sw	at,28(sp)
80044c50:	afa50048 	sw	a1,72(sp)
80044c54:	afa6004c 	sw	a2,76(sp)
80044c58:	afa70050 	sw	a3,80(sp)
80044c5c:	27a40020 	addiu	a0,sp,32
        match self.split_at_checked(mid) {
80044c60:	0c0113bb 	jal	80044eec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hafb4fe7603d89e28E>
80044c64:	00000000 	nop
80044c68:	8fa10020 	lw	at,32(sp)
80044c6c:	1420000e 	bnez	at,80044ca8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17hf27feb3532af0a22E+0x70>
80044c70:	00000000 	nop
80044c74:	0801131f 	j	80044c7c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17hf27feb3532af0a22E+0x44>
80044c78:	00000000 	nop
            None => panic!("mid > len"),
80044c7c:	3c01810a 	lui	at,0x810a
80044c80:	2425c078 	addiu	a1,at,-16264
80044c84:	27a40030 	addiu	a0,sp,48
80044c88:	afa40010 	sw	a0,16(sp)
80044c8c:	24060001 	li	a2,1
80044c90:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80044c94:	00000000 	nop
80044c98:	8fa40010 	lw	a0,16(sp)
80044c9c:	8fa5001c 	lw	a1,28(sp)
80044ca0:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80044ca4:	00000000 	nop
            Some(pair) => pair,
80044ca8:	8fa20018 	lw	v0,24(sp)
80044cac:	8fa30014 	lw	v1,20(sp)
80044cb0:	8fa1002c 	lw	at,44(sp)
80044cb4:	ac61000c 	sw	at,12(v1)
80044cb8:	8fa10028 	lw	at,40(sp)
80044cbc:	ac610008 	sw	at,8(v1)
80044cc0:	8fa10024 	lw	at,36(sp)
80044cc4:	ac610004 	sw	at,4(v1)
80044cc8:	8fa10020 	lw	at,32(sp)
80044ccc:	ac610000 	sw	at,0(v1)
    }
80044cd0:	8fbf0054 	lw	ra,84(sp)
80044cd4:	27bd0058 	addiu	sp,sp,88
80044cd8:	03e00008 	jr	ra
80044cdc:	00000000 	nop

80044ce0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17h7600a822702feb5eE>:
    /// ```
    #[stable(feature = "slice_split_at_unchecked", since = "CURRENT_RUSTC_VERSION")]
    #[rustc_const_stable(feature = "const_slice_split_at_unchecked", since = "1.77.0")]
    #[inline]
    #[must_use]
    pub const unsafe fn split_at_unchecked(&self, mid: usize) -> (&[T], &[T]) {
80044ce0:	27bdffa0 	addiu	sp,sp,-96
80044ce4:	afbf005c 	sw	ra,92(sp)
80044ce8:	afa70024 	sw	a3,36(sp)
80044cec:	afa60028 	sw	a2,40(sp)
80044cf0:	afa5002c 	sw	a1,44(sp)
80044cf4:	afa40030 	sw	a0,48(sp)
80044cf8:	afa40034 	sw	a0,52(sp)
80044cfc:	afa50038 	sw	a1,56(sp)
80044d00:	afa6003c 	sw	a2,60(sp)
80044d04:	afa70040 	sw	a3,64(sp)
        // HACK: the const function `from_raw_parts` is used to make this
        // function const; previously the implementation used
        // `(self.get_unchecked(..mid), self.get_unchecked(mid..))`

        let len = self.len();
80044d08:	afa60044 	sw	a2,68(sp)
80044d0c:	afa50054 	sw	a1,84(sp)
80044d10:	afa60058 	sw	a2,88(sp)
        let ptr = self.as_ptr();
80044d14:	afa50048 	sw	a1,72(sp)

        assert_unsafe_precondition!(
80044d18:	08011348 	j	80044d20 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17h7600a822702feb5eE+0x40>
80044d1c:	00000000 	nop
80044d20:	8fa50028 	lw	a1,40(sp)
80044d24:	8fa40024 	lw	a0,36(sp)
80044d28:	0c012b8c 	jal	8004ae30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked18precondition_check17h2b5a4e6c0f917b4cE>
80044d2c:	00000000 	nop
80044d30:	0801134e 	j	80044d38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17h7600a822702feb5eE+0x58>
80044d34:	00000000 	nop
            "slice::split_at_unchecked requires the index to be within the slice",
            (mid: usize = mid, len: usize = len) => mid <= len,
        );

        // SAFETY: Caller has to check that `0 <= mid <= self.len()`
        unsafe { (from_raw_parts(ptr, mid), from_raw_parts(ptr.add(mid), len - mid)) }
80044d38:	8fa50024 	lw	a1,36(sp)
80044d3c:	8fa4002c 	lw	a0,44(sp)
80044d40:	0c011164 	jal	80044590 <_ZN4core5slice3raw14from_raw_parts17h1495287b2578ef29E>
80044d44:	00000000 	nop
80044d48:	8fa10028 	lw	at,40(sp)
80044d4c:	00402825 	move	a1,v0
80044d50:	8fa20024 	lw	v0,36(sp)
80044d54:	00602025 	move	a0,v1
80044d58:	8fa3002c 	lw	v1,44(sp)
80044d5c:	afa50014 	sw	a1,20(sp)
80044d60:	afa40018 	sw	a0,24(sp)
80044d64:	afa3004c 	sw	v1,76(sp)
80044d68:	afa20050 	sw	v0,80(sp)
80044d6c:	00022080 	sll	a0,v0,0x2
80044d70:	00641821 	addu	v1,v1,a0
80044d74:	afa3001c 	sw	v1,28(sp)
80044d78:	00221823 	subu	v1,at,v0
80044d7c:	afa30020 	sw	v1,32(sp)
80044d80:	0022082b 	sltu	at,at,v0
80044d84:	14200014 	bnez	at,80044dd8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17h7600a822702feb5eE+0xf8>
80044d88:	00000000 	nop
80044d8c:	08011365 	j	80044d94 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17h7600a822702feb5eE+0xb4>
80044d90:	00000000 	nop
80044d94:	8fa50020 	lw	a1,32(sp)
80044d98:	8fa4001c 	lw	a0,28(sp)
80044d9c:	0c011164 	jal	80044590 <_ZN4core5slice3raw14from_raw_parts17h1495287b2578ef29E>
80044da0:	00000000 	nop
80044da4:	8fa60014 	lw	a2,20(sp)
80044da8:	8fa50018 	lw	a1,24(sp)
80044dac:	8fa10030 	lw	at,48(sp)
80044db0:	00402025 	move	a0,v0
80044db4:	8fa20034 	lw	v0,52(sp)
80044db8:	ac260000 	sw	a2,0(at)
80044dbc:	ac250004 	sw	a1,4(at)
80044dc0:	ac240008 	sw	a0,8(at)
80044dc4:	ac23000c 	sw	v1,12(at)
    }
80044dc8:	8fbf005c 	lw	ra,92(sp)
80044dcc:	27bd0060 	addiu	sp,sp,96
80044dd0:	03e00008 	jr	ra
80044dd4:	00000000 	nop
        unsafe { (from_raw_parts(ptr, mid), from_raw_parts(ptr.add(mid), len - mid)) }
80044dd8:	3c01810a 	lui	at,0x810a
80044ddc:	2424c0f0 	addiu	a0,at,-16144
80044de0:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80044de4:	00000000 	nop

80044de8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17ha6a421826eeb49c4E>:
    pub const unsafe fn split_at_unchecked(&self, mid: usize) -> (&[T], &[T]) {
80044de8:	27bdffa0 	addiu	sp,sp,-96
80044dec:	afbf005c 	sw	ra,92(sp)
80044df0:	afa70024 	sw	a3,36(sp)
80044df4:	afa60028 	sw	a2,40(sp)
80044df8:	afa5002c 	sw	a1,44(sp)
80044dfc:	afa40030 	sw	a0,48(sp)
80044e00:	afa40034 	sw	a0,52(sp)
80044e04:	afa50038 	sw	a1,56(sp)
80044e08:	afa6003c 	sw	a2,60(sp)
80044e0c:	afa70040 	sw	a3,64(sp)
        let len = self.len();
80044e10:	afa60044 	sw	a2,68(sp)
80044e14:	afa50054 	sw	a1,84(sp)
80044e18:	afa60058 	sw	a2,88(sp)
        let ptr = self.as_ptr();
80044e1c:	afa50048 	sw	a1,72(sp)
        assert_unsafe_precondition!(
80044e20:	0801138a 	j	80044e28 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17ha6a421826eeb49c4E+0x40>
80044e24:	00000000 	nop
80044e28:	8fa50028 	lw	a1,40(sp)
80044e2c:	8fa40024 	lw	a0,36(sp)
80044e30:	0c012b8c 	jal	8004ae30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked18precondition_check17h2b5a4e6c0f917b4cE>
80044e34:	00000000 	nop
80044e38:	08011390 	j	80044e40 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17ha6a421826eeb49c4E+0x58>
80044e3c:	00000000 	nop
        unsafe { (from_raw_parts(ptr, mid), from_raw_parts(ptr.add(mid), len - mid)) }
80044e40:	8fa50024 	lw	a1,36(sp)
80044e44:	8fa4002c 	lw	a0,44(sp)
80044e48:	0c011180 	jal	80044600 <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
80044e4c:	00000000 	nop
80044e50:	8fa10028 	lw	at,40(sp)
80044e54:	00402825 	move	a1,v0
80044e58:	8fa20024 	lw	v0,36(sp)
80044e5c:	00602025 	move	a0,v1
80044e60:	8fa3002c 	lw	v1,44(sp)
80044e64:	afa50014 	sw	a1,20(sp)
80044e68:	afa40018 	sw	a0,24(sp)
80044e6c:	afa3004c 	sw	v1,76(sp)
80044e70:	afa20050 	sw	v0,80(sp)
80044e74:	00621821 	addu	v1,v1,v0
80044e78:	afa3001c 	sw	v1,28(sp)
80044e7c:	00221823 	subu	v1,at,v0
80044e80:	afa30020 	sw	v1,32(sp)
80044e84:	0022082b 	sltu	at,at,v0
80044e88:	14200014 	bnez	at,80044edc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17ha6a421826eeb49c4E+0xf4>
80044e8c:	00000000 	nop
80044e90:	080113a6 	j	80044e98 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17ha6a421826eeb49c4E+0xb0>
80044e94:	00000000 	nop
80044e98:	8fa50020 	lw	a1,32(sp)
80044e9c:	8fa4001c 	lw	a0,28(sp)
80044ea0:	0c011180 	jal	80044600 <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
80044ea4:	00000000 	nop
80044ea8:	8fa60014 	lw	a2,20(sp)
80044eac:	8fa50018 	lw	a1,24(sp)
80044eb0:	8fa10030 	lw	at,48(sp)
80044eb4:	00402025 	move	a0,v0
80044eb8:	8fa20034 	lw	v0,52(sp)
80044ebc:	ac260000 	sw	a2,0(at)
80044ec0:	ac250004 	sw	a1,4(at)
80044ec4:	ac240008 	sw	a0,8(at)
80044ec8:	ac23000c 	sw	v1,12(at)
    }
80044ecc:	8fbf005c 	lw	ra,92(sp)
80044ed0:	27bd0060 	addiu	sp,sp,96
80044ed4:	03e00008 	jr	ra
80044ed8:	00000000 	nop
        unsafe { (from_raw_parts(ptr, mid), from_raw_parts(ptr.add(mid), len - mid)) }
80044edc:	3c01810a 	lui	at,0x810a
80044ee0:	2424c0f0 	addiu	a0,at,-16144
80044ee4:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80044ee8:	00000000 	nop

80044eec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hafb4fe7603d89e28E>:
    /// ```
    #[unstable(feature = "split_at_checked", reason = "new API", issue = "119128")]
    #[rustc_const_unstable(feature = "split_at_checked", issue = "119128")]
    #[inline]
    #[must_use]
    pub const fn split_at_checked(&self, mid: usize) -> Option<(&[T], &[T])> {
80044eec:	27bdffb8 	addiu	sp,sp,-72
80044ef0:	afbf0044 	sw	ra,68(sp)
80044ef4:	afa70014 	sw	a3,20(sp)
80044ef8:	afa60018 	sw	a2,24(sp)
80044efc:	afa5001c 	sw	a1,28(sp)
80044f00:	afa40020 	sw	a0,32(sp)
80044f04:	afa40024 	sw	a0,36(sp)
80044f08:	afa50038 	sw	a1,56(sp)
80044f0c:	afa6003c 	sw	a2,60(sp)
80044f10:	afa70040 	sw	a3,64(sp)
        if mid <= self.len() {
80044f14:	00c7082b 	sltu	at,a2,a3
80044f18:	10200007 	beqz	at,80044f38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hafb4fe7603d89e28E+0x4c>
80044f1c:	00000000 	nop
80044f20:	080113ca 	j	80044f28 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hafb4fe7603d89e28E+0x3c>
80044f24:	00000000 	nop
            // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
            // fulfills the requirements of `split_at_unchecked`.
            Some(unsafe { self.split_at_unchecked(mid) })
        } else {
            None
80044f28:	8fa10020 	lw	at,32(sp)
80044f2c:	ac200000 	sw	zero,0(at)
        if mid <= self.len() {
80044f30:	080113df 	j	80044f7c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hafb4fe7603d89e28E+0x90>
80044f34:	00000000 	nop
            Some(unsafe { self.split_at_unchecked(mid) })
80044f38:	8fa70014 	lw	a3,20(sp)
80044f3c:	8fa60018 	lw	a2,24(sp)
80044f40:	8fa5001c 	lw	a1,28(sp)
80044f44:	27a40028 	addiu	a0,sp,40
80044f48:	0c011338 	jal	80044ce0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17h7600a822702feb5eE>
80044f4c:	00000000 	nop
80044f50:	8fa20020 	lw	v0,32(sp)
80044f54:	8fa10034 	lw	at,52(sp)
80044f58:	ac41000c 	sw	at,12(v0)
80044f5c:	8fa10030 	lw	at,48(sp)
80044f60:	ac410008 	sw	at,8(v0)
80044f64:	8fa1002c 	lw	at,44(sp)
80044f68:	ac410004 	sw	at,4(v0)
80044f6c:	8fa10028 	lw	at,40(sp)
80044f70:	ac410000 	sw	at,0(v0)
        if mid <= self.len() {
80044f74:	080113df 	j	80044f7c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hafb4fe7603d89e28E+0x90>
80044f78:	00000000 	nop
        }
    }
80044f7c:	8fa20024 	lw	v0,36(sp)
80044f80:	8fbf0044 	lw	ra,68(sp)
80044f84:	27bd0048 	addiu	sp,sp,72
80044f88:	03e00008 	jr	ra
80044f8c:	00000000 	nop

80044f90 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hb8915365f7d2841fE>:
    pub const fn split_at_checked(&self, mid: usize) -> Option<(&[T], &[T])> {
80044f90:	27bdffb8 	addiu	sp,sp,-72
80044f94:	afbf0044 	sw	ra,68(sp)
80044f98:	afa70014 	sw	a3,20(sp)
80044f9c:	afa60018 	sw	a2,24(sp)
80044fa0:	afa5001c 	sw	a1,28(sp)
80044fa4:	afa40020 	sw	a0,32(sp)
80044fa8:	afa40024 	sw	a0,36(sp)
80044fac:	afa50038 	sw	a1,56(sp)
80044fb0:	afa6003c 	sw	a2,60(sp)
80044fb4:	afa70040 	sw	a3,64(sp)
        if mid <= self.len() {
80044fb8:	00c7082b 	sltu	at,a2,a3
80044fbc:	10200007 	beqz	at,80044fdc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hb8915365f7d2841fE+0x4c>
80044fc0:	00000000 	nop
80044fc4:	080113f3 	j	80044fcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hb8915365f7d2841fE+0x3c>
80044fc8:	00000000 	nop
            None
80044fcc:	8fa10020 	lw	at,32(sp)
80044fd0:	ac200000 	sw	zero,0(at)
        if mid <= self.len() {
80044fd4:	08011408 	j	80045020 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hb8915365f7d2841fE+0x90>
80044fd8:	00000000 	nop
            Some(unsafe { self.split_at_unchecked(mid) })
80044fdc:	8fa70014 	lw	a3,20(sp)
80044fe0:	8fa60018 	lw	a2,24(sp)
80044fe4:	8fa5001c 	lw	a1,28(sp)
80044fe8:	27a40028 	addiu	a0,sp,40
80044fec:	0c01137a 	jal	80044de8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17ha6a421826eeb49c4E>
80044ff0:	00000000 	nop
80044ff4:	8fa20020 	lw	v0,32(sp)
80044ff8:	8fa10034 	lw	at,52(sp)
80044ffc:	ac41000c 	sw	at,12(v0)
80045000:	8fa10030 	lw	at,48(sp)
80045004:	ac410008 	sw	at,8(v0)
80045008:	8fa1002c 	lw	at,44(sp)
8004500c:	ac410004 	sw	at,4(v0)
80045010:	8fa10028 	lw	at,40(sp)
80045014:	ac410000 	sw	at,0(v0)
        if mid <= self.len() {
80045018:	08011408 	j	80045020 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hb8915365f7d2841fE+0x90>
8004501c:	00000000 	nop
    }
80045020:	8fa20024 	lw	v0,36(sp)
80045024:	8fbf0044 	lw	ra,68(sp)
80045028:	27bd0048 	addiu	sp,sp,72
8004502c:	03e00008 	jr	ra
80045030:	00000000 	nop

80045034 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE>:
    /// let r = s.binary_search_by(|probe| probe.cmp(&seek));
    /// assert!(match r { Ok(1..=4) => true, _ => false, });
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
80045034:	27bdff90 	addiu	sp,sp,-112
80045038:	afbf006c 	sw	ra,108(sp)
8004503c:	afa50028 	sw	a1,40(sp)
80045040:	afa4002c 	sw	a0,44(sp)
80045044:	afa60030 	sw	a2,48(sp)
80045048:	afa70034 	sw	a3,52(sp)
8004504c:	afa4005c 	sw	a0,92(sp)
80045050:	afa50060 	sw	a1,96(sp)
    {
        // INVARIANTS:
        // - 0 <= left <= left + size = right <= self.len()
        // - f returns Less for everything in self[..left]
        // - f returns Greater for everything in self[right..]
        let mut size = self.len();
80045054:	afa50040 	sw	a1,64(sp)
        let mut left = 0;
80045058:	afa00044 	sw	zero,68(sp)
        let mut right = size;
8004505c:	8fa10040 	lw	at,64(sp)
80045060:	afa10048 	sw	at,72(sp)
        while left < right {
80045064:	0801141b 	j	8004506c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x38>
80045068:	00000000 	nop
8004506c:	8fa10044 	lw	at,68(sp)
80045070:	8fa20048 	lw	v0,72(sp)
80045074:	0022082b 	sltu	at,at,v0
80045078:	1420001b 	bnez	at,800450e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0xb4>
8004507c:	00000000 	nop
80045080:	08011422 	j	80045088 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x54>
80045084:	00000000 	nop
            size = right - left;
        }

        // SAFETY: directly true from the overall invariant.
        // Note that this is `<=`, unlike the assume in the `Ok` path.
        unsafe { hint::assert_unchecked(left <= self.len()) };
80045088:	8fa10028 	lw	at,40(sp)
8004508c:	8fa20044 	lw	v0,68(sp)
80045090:	0022082b 	sltu	at,at,v0
80045094:	38210001 	xori	at,at,0x1
80045098:	afa10024 	sw	at,36(sp)
8004509c:	a3a1006b 	sb	at,107(sp)
        ub_checks::assert_unsafe_precondition!(
800450a0:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
800450a4:	00000000 	nop
800450a8:	10400009 	beqz	v0,800450d0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x9c>
800450ac:	00000000 	nop
800450b0:	0801142e 	j	800450b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x84>
800450b4:	00000000 	nop
800450b8:	8fa10024 	lw	at,36(sp)
800450bc:	30240001 	andi	a0,at,0x1
800450c0:	0c012213 	jal	8004884c <_ZN4core4hint16assert_unchecked18precondition_check17h0b93bb2a861dbe92E>
800450c4:	00000000 	nop
800450c8:	08011434 	j	800450d0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x9c>
800450cc:	00000000 	nop
        Err(left)
800450d0:	8fa10044 	lw	at,68(sp)
800450d4:	afa1003c 	sw	at,60(sp)
800450d8:	24010001 	li	at,1
800450dc:	afa10038 	sw	at,56(sp)
    }
800450e0:	08011444 	j	80045110 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0xdc>
800450e4:	00000000 	nop
            let mid = left + size / 2;
800450e8:	8fa20044 	lw	v0,68(sp)
800450ec:	8fa10040 	lw	at,64(sp)
800450f0:	00010842 	srl	at,at,0x1
800450f4:	00410821 	addu	at,v0,at
800450f8:	afa10020 	sw	at,32(sp)
800450fc:	0022082b 	sltu	at,at,v0
80045100:	1420001e 	bnez	at,8004517c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x148>
80045104:	00000000 	nop
80045108:	0801144a 	j	80045128 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0xf4>
8004510c:	00000000 	nop
    }
80045110:	8fa20038 	lw	v0,56(sp)
80045114:	8fa3003c 	lw	v1,60(sp)
80045118:	8fbf006c 	lw	ra,108(sp)
8004511c:	27bd0070 	addiu	sp,sp,112
80045120:	03e00008 	jr	ra
80045124:	00000000 	nop
            let mid = left + size / 2;
80045128:	8fa60020 	lw	a2,32(sp)
8004512c:	8fa50028 	lw	a1,40(sp)
80045130:	8fa4002c 	lw	a0,44(sp)
80045134:	afa60064 	sw	a2,100(sp)
            let cmp = f(unsafe { self.get_unchecked(mid) });
80045138:	0c01120a 	jal	80044828 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17he56cda5e0b659a59E>
8004513c:	00000000 	nop
80045140:	afa20050 	sw	v0,80(sp)
80045144:	8fa50050 	lw	a1,80(sp)
80045148:	27a40030 	addiu	a0,sp,48
8004514c:	0c0114cb 	jal	8004532c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$20binary_search_by_key28_$u7b$$u7b$closure$u7d$$u7d$17haf09e97a6a8cc404E>
80045150:	00000000 	nop
80045154:	a3a2004f 	sb	v0,79(sp)
            left = if cmp == Less { mid + 1 } else { left };
80045158:	3c01810a 	lui	at,0x810a
8004515c:	2425c110 	addiu	a1,at,-16112
80045160:	27a4004f 	addiu	a0,sp,79
80045164:	0c01229c 	jal	80048a70 <_ZN60_$LT$core..cmp..Ordering$u20$as$u20$core..cmp..PartialEq$GT$2eq17hf658a71d46e80c1cE>
80045168:	00000000 	nop
8004516c:	1440000b 	bnez	v0,8004519c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x168>
80045170:	00000000 	nop
80045174:	08011463 	j	8004518c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x158>
80045178:	00000000 	nop
            let mid = left + size / 2;
8004517c:	3c01810a 	lui	at,0x810a
80045180:	2424c100 	addiu	a0,at,-16128
80045184:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80045188:	00000000 	nop
            left = if cmp == Less { mid + 1 } else { left };
8004518c:	8fa10044 	lw	at,68(sp)
80045190:	afa10054 	sw	at,84(sp)
80045194:	0801146e 	j	800451b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x184>
80045198:	00000000 	nop
8004519c:	8fa10020 	lw	at,32(sp)
800451a0:	24210001 	addiu	at,at,1
800451a4:	afa1001c 	sw	at,28(sp)
800451a8:	10200012 	beqz	at,800451f4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x1c0>
800451ac:	00000000 	nop
800451b0:	08011479 	j	800451e4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x1b0>
800451b4:	00000000 	nop
800451b8:	8fa10054 	lw	at,84(sp)
800451bc:	afa10044 	sw	at,68(sp)
            right = if cmp == Greater { mid } else { right };
800451c0:	3c01810a 	lui	at,0x810a
800451c4:	2425b09c 	addiu	a1,at,-20324
800451c8:	27a4004f 	addiu	a0,sp,79
800451cc:	0c01229c 	jal	80048a70 <_ZN60_$LT$core..cmp..Ordering$u20$as$u20$core..cmp..PartialEq$GT$2eq17hf658a71d46e80c1cE>
800451d0:	00000000 	nop
800451d4:	1440000f 	bnez	v0,80045214 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x1e0>
800451d8:	00000000 	nop
800451dc:	08011481 	j	80045204 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x1d0>
800451e0:	00000000 	nop
            left = if cmp == Less { mid + 1 } else { left };
800451e4:	8fa1001c 	lw	at,28(sp)
800451e8:	afa10054 	sw	at,84(sp)
800451ec:	0801146e 	j	800451b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x184>
800451f0:	00000000 	nop
800451f4:	3c01810a 	lui	at,0x810a
800451f8:	2424c114 	addiu	a0,at,-16108
800451fc:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80045200:	00000000 	nop
            right = if cmp == Greater { mid } else { right };
80045204:	8fa10048 	lw	at,72(sp)
80045208:	afa10058 	sw	at,88(sp)
8004520c:	08011489 	j	80045224 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x1f0>
80045210:	00000000 	nop
80045214:	8fa10020 	lw	at,32(sp)
80045218:	afa10058 	sw	at,88(sp)
8004521c:	08011489 	j	80045224 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x1f0>
80045220:	00000000 	nop
80045224:	8fa10058 	lw	at,88(sp)
80045228:	afa10048 	sw	at,72(sp)
            if cmp == Equal {
8004522c:	3c01810a 	lui	at,0x810a
80045230:	2425b09d 	addiu	a1,at,-20323
80045234:	27a4004f 	addiu	a0,sp,79
80045238:	0c01229c 	jal	80048a70 <_ZN60_$LT$core..cmp..Ordering$u20$as$u20$core..cmp..PartialEq$GT$2eq17hf658a71d46e80c1cE>
8004523c:	00000000 	nop
80045240:	1440000c 	bnez	v0,80045274 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x240>
80045244:	00000000 	nop
80045248:	08011494 	j	80045250 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x21c>
8004524c:	00000000 	nop
            size = right - left;
80045250:	8fa10048 	lw	at,72(sp)
80045254:	8fa20044 	lw	v0,68(sp)
80045258:	00221823 	subu	v1,at,v0
8004525c:	afa30018 	sw	v1,24(sp)
80045260:	0022082b 	sltu	at,at,v0
80045264:	1420001d 	bnez	at,800452dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x2a8>
80045268:	00000000 	nop
8004526c:	080114b3 	j	800452cc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x298>
80045270:	00000000 	nop
                unsafe { hint::assert_unchecked(mid < self.len()) };
80045274:	8fa10020 	lw	at,32(sp)
80045278:	8fa20028 	lw	v0,40(sp)
8004527c:	0022082b 	sltu	at,at,v0
80045280:	afa10014 	sw	at,20(sp)
80045284:	a3a1006a 	sb	at,106(sp)
80045288:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8004528c:	00000000 	nop
80045290:	10400009 	beqz	v0,800452b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x284>
80045294:	00000000 	nop
80045298:	080114a8 	j	800452a0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x26c>
8004529c:	00000000 	nop
800452a0:	8fa10014 	lw	at,20(sp)
800452a4:	30240001 	andi	a0,at,0x1
800452a8:	0c012213 	jal	8004884c <_ZN4core4hint16assert_unchecked18precondition_check17h0b93bb2a861dbe92E>
800452ac:	00000000 	nop
800452b0:	080114ae 	j	800452b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x284>
800452b4:	00000000 	nop
                return Ok(mid);
800452b8:	8fa10020 	lw	at,32(sp)
800452bc:	afa1003c 	sw	at,60(sp)
800452c0:	afa00038 	sw	zero,56(sp)
    }
800452c4:	08011444 	j	80045110 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0xdc>
800452c8:	00000000 	nop
            size = right - left;
800452cc:	8fa10018 	lw	at,24(sp)
800452d0:	afa10040 	sw	at,64(sp)
        while left < right {
800452d4:	0801141b 	j	8004506c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x38>
800452d8:	00000000 	nop
            size = right - left;
800452dc:	3c01810a 	lui	at,0x810a
800452e0:	2424c124 	addiu	a0,at,-16092
800452e4:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800452e8:	00000000 	nop

800452ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$20binary_search_by_key17hb631560c3d60eb27E>:
    // This breaks links when slice is displayed in core, but changing it to use relative links
    // would break when the item is re-exported. So allow the core links to be broken for now.
    #[allow(rustdoc::broken_intra_doc_links)]
    #[stable(feature = "slice_binary_search_by_key", since = "1.10.0")]
    #[inline]
    pub fn binary_search_by_key<'a, B, F>(&'a self, b: &B, mut f: F) -> Result<usize, usize>
800452ec:	27bdffd0 	addiu	sp,sp,-48
800452f0:	afbf002c 	sw	ra,44(sp)
800452f4:	afa40020 	sw	a0,32(sp)
800452f8:	afa50024 	sw	a1,36(sp)
800452fc:	afa60028 	sw	a2,40(sp)
80045300:	27a10017 	addiu	at,sp,23
    where
        F: FnMut(&'a T) -> B,
        B: Ord,
    {
        self.binary_search_by(|k| f(k).cmp(b))
80045304:	afa10018 	sw	at,24(sp)
80045308:	afa6001c 	sw	a2,28(sp)
8004530c:	8fa60018 	lw	a2,24(sp)
80045310:	8fa7001c 	lw	a3,28(sp)
80045314:	0c01140d 	jal	80045034 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE>
80045318:	00000000 	nop
    }
8004531c:	8fbf002c 	lw	ra,44(sp)
80045320:	27bd0030 	addiu	sp,sp,48
80045324:	03e00008 	jr	ra
80045328:	00000000 	nop

8004532c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$20binary_search_by_key28_$u7b$$u7b$closure$u7d$$u7d$17haf09e97a6a8cc404E>:
        self.binary_search_by(|k| f(k).cmp(b))
8004532c:	27bdffd8 	addiu	sp,sp,-40
80045330:	afbf0024 	sw	ra,36(sp)
80045334:	afa40010 	sw	a0,16(sp)
80045338:	afa4001c 	sw	a0,28(sp)
8004533c:	afa50020 	sw	a1,32(sp)
80045340:	8c840000 	lw	a0,0(a0)
80045344:	afa50018 	sw	a1,24(sp)
80045348:	8fa50018 	lw	a1,24(sp)
8004534c:	0c011f19 	jal	80047c64 <_ZN4core7unicode12unicode_data11skip_search28_$u7b$$u7b$closure$u7d$$u7d$17hdc343340b1dfbf33E>
80045350:	00000000 	nop
80045354:	8fa40010 	lw	a0,16(sp)
80045358:	afa20014 	sw	v0,20(sp)
8004535c:	8c850004 	lw	a1,4(a0)
80045360:	27a40014 	addiu	a0,sp,20
80045364:	0c0122d1 	jal	80048b44 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u32$GT$3cmp17ha5f8b88f44088c34E>
80045368:	00000000 	nop
8004536c:	8fbf0024 	lw	ra,36(sp)
80045370:	27bd0028 	addiu	sp,sp,40
80045374:	03e00008 	jr	ra
80045378:	00000000 	nop

8004537c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E>:
    /// [`clone_from_slice`]: slice::clone_from_slice
    /// [`split_at_mut`]: slice::split_at_mut
    #[doc(alias = "memcpy")]
    #[stable(feature = "copy_from_slice", since = "1.9.0")]
    #[track_caller]
    pub fn copy_from_slice(&mut self, src: &[T])
8004537c:	27bdffa0 	addiu	sp,sp,-96
80045380:	afbf005c 	sw	ra,92(sp)
80045384:	afa7001c 	sw	a3,28(sp)
80045388:	afa60020 	sw	a2,32(sp)
8004538c:	afa50024 	sw	a1,36(sp)
80045390:	afa40028 	sw	a0,40(sp)
80045394:	8fa10070 	lw	at,112(sp)
80045398:	afa1002c 	sw	at,44(sp)
8004539c:	afa40030 	sw	a0,48(sp)
800453a0:	afa50034 	sw	a1,52(sp)
800453a4:	afa60038 	sw	a2,56(sp)
800453a8:	afa7003c 	sw	a3,60(sp)
                "source slice length ({}) does not match destination slice length ({})",
                src_len, dst_len,
            );
        }

        if self.len() != src.len() {
800453ac:	14a70028 	bne	a1,a3,80045450 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E+0xd4>
800453b0:	00000000 	nop
800453b4:	080114ef 	j	800453bc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E+0x40>
800453b8:	00000000 	nop
800453bc:	8fa10024 	lw	at,36(sp)
800453c0:	8fa20028 	lw	v0,40(sp)
800453c4:	8fa30020 	lw	v1,32(sp)
800453c8:	8fa4001c 	lw	a0,28(sp)
800453cc:	afa3004c 	sw	v1,76(sp)
800453d0:	afa40050 	sw	a0,80(sp)
800453d4:	afa20054 	sw	v0,84(sp)
800453d8:	afa10058 	sw	at,88(sp)
800453dc:	afa30040 	sw	v1,64(sp)
800453e0:	afa20044 	sw	v0,68(sp)
800453e4:	afa10048 	sw	at,72(sp)
    ub_checks::assert_unsafe_precondition!(
800453e8:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
800453ec:	00000000 	nop
800453f0:	1040000e 	beqz	v0,8004542c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E+0xb0>
800453f4:	00000000 	nop
800453f8:	08011500 	j	80045400 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E+0x84>
800453fc:	00000000 	nop
80045400:	8fa50028 	lw	a1,40(sp)
80045404:	8fa40020 	lw	a0,32(sp)
80045408:	8fa10024 	lw	at,36(sp)
8004540c:	03a01025 	move	v0,sp
80045410:	ac410010 	sw	at,16(v0)
80045414:	24070001 	li	a3,1
80045418:	00e03025 	move	a2,a3
8004541c:	0c012221 	jal	80048884 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E>
80045420:	00000000 	nop
80045424:	0801150b 	j	8004542c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E+0xb0>
80045428:	00000000 	nop
    unsafe { copy_nonoverlapping(src, dst, count) }
8004542c:	8fa60024 	lw	a2,36(sp)
80045430:	8fa50020 	lw	a1,32(sp)
80045434:	8fa40028 	lw	a0,40(sp)
80045438:	0c00db4c 	jal	80036d30 <memcpy>
8004543c:	00000000 	nop
        // checked to have the same length. The slices cannot overlap because
        // mutable references are exclusive.
        unsafe {
            ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
        }
    }
80045440:	8fbf005c 	lw	ra,92(sp)
80045444:	27bd0060 	addiu	sp,sp,96
80045448:	03e00008 	jr	ra
8004544c:	00000000 	nop
            len_mismatch_fail(self.len(), src.len());
80045450:	8fa6002c 	lw	a2,44(sp)
80045454:	8fa5001c 	lw	a1,28(sp)
80045458:	8fa40024 	lw	a0,36(sp)
8004545c:	0c011519 	jal	80045464 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17ha11eccd574206b36E>
80045460:	00000000 	nop

80045464 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17ha11eccd574206b36E>:
        fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
80045464:	27bdff80 	addiu	sp,sp,-128
80045468:	afbf007c 	sw	ra,124(sp)
8004546c:	afa60020 	sw	a2,32(sp)
80045470:	afa40024 	sw	a0,36(sp)
80045474:	afa50028 	sw	a1,40(sp)
80045478:	27a20028 	addiu	v0,sp,40
8004547c:	afa20068 	sw	v0,104(sp)
80045480:	afa20074 	sw	v0,116(sp)
80045484:	3c018005 	lui	at,0x8005
80045488:	2421a0f4 	addiu	at,at,-24332
8004548c:	afa10078 	sw	at,120(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80045490:	afa2006c 	sw	v0,108(sp)
80045494:	afa10070 	sw	at,112(sp)
    }
80045498:	8fa4006c 	lw	a0,108(sp)
8004549c:	8fa30070 	lw	v1,112(sp)
800454a0:	27a20024 	addiu	v0,sp,36
800454a4:	afa20054 	sw	v0,84(sp)
800454a8:	afa20060 	sw	v0,96(sp)
800454ac:	afa10064 	sw	at,100(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
800454b0:	afa20058 	sw	v0,88(sp)
800454b4:	afa1005c 	sw	at,92(sp)
    }
800454b8:	8fa20058 	lw	v0,88(sp)
800454bc:	8fa1005c 	lw	at,92(sp)
            panic!(
800454c0:	afa40044 	sw	a0,68(sp)
800454c4:	afa30048 	sw	v1,72(sp)
800454c8:	afa2004c 	sw	v0,76(sp)
800454cc:	afa10050 	sw	at,80(sp)
800454d0:	03a01025 	move	v0,sp
800454d4:	24010002 	li	at,2
800454d8:	ac410010 	sw	at,16(v0)
800454dc:	3c01810a 	lui	at,0x810a
800454e0:	2425c174 	addiu	a1,at,-16012
800454e4:	27a4002c 	addiu	a0,sp,44
800454e8:	afa4001c 	sw	a0,28(sp)
800454ec:	24060003 	li	a2,3
800454f0:	27a70044 	addiu	a3,sp,68
800454f4:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
800454f8:	00000000 	nop
800454fc:	8fa4001c 	lw	a0,28(sp)
80045500:	8fa50020 	lw	a1,32(sp)
80045504:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80045508:	00000000 	nop

8004550c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E>:
            ptr::swap_nonoverlapping(self.as_mut_ptr(), other.as_mut_ptr(), self.len());
        }
    }

    /// Function to calculate lengths of the middle and trailing slice for `align_to{,_mut}`.
    fn align_to_offsets<U>(&self) -> (usize, usize) {
8004550c:	27bdffb8 	addiu	sp,sp,-72
80045510:	afa50018 	sw	a1,24(sp)
80045514:	24010001 	li	at,1
80045518:	afa1001c 	sw	at,28(sp)
            if b == 0 { a } else { gcd(b, a % b) }
        }

        // Explicitly wrap the function call in a const block so it gets
        // constant-evaluated even in debug mode.
        let gcd: usize = const { gcd(mem::size_of::<T>(), mem::size_of::<U>()) };
8004551c:	afa10024 	sw	at,36(sp)
80045520:	afa40030 	sw	a0,48(sp)
80045524:	afa50034 	sw	a1,52(sp)
80045528:	24020004 	li	v0,4
8004552c:	afa20020 	sw	v0,32(sp)
        let ts: usize = mem::size_of::<U>() / gcd;
80045530:	afa20038 	sw	v0,56(sp)
        let us: usize = mem::size_of::<T>() / gcd;
80045534:	afa1003c 	sw	at,60(sp)
80045538:	24010000 	li	at,0

        // Armed with this knowledge, we can find how many `U`s we can fit!
        let us_len = self.len() / ts * us;
8004553c:	14000011 	bnez	zero,80045584 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E+0x78>
80045540:	00000000 	nop
80045544:	08011553 	j	8004554c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E+0x40>
80045548:	00000000 	nop
8004554c:	8fa2001c 	lw	v0,28(sp)
80045550:	8fa10020 	lw	at,32(sp)
80045554:	8fa30018 	lw	v1,24(sp)
80045558:	0061001b 	divu	zero,v1,at
8004555c:	002001f4 	teq	at,zero,0x7
80045560:	00000812 	mflo	at
80045564:	70221802 	mul	v1,at,v0
80045568:	afa30014 	sw	v1,20(sp)
8004556c:	00220019 	multu	at,v0
80045570:	00000810 	mfhi	at
80045574:	1420000e 	bnez	at,800455b0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E+0xa4>
80045578:	00000000 	nop
8004557c:	08011565 	j	80045594 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E+0x88>
80045580:	00000000 	nop
80045584:	3c01810a 	lui	at,0x810a
80045588:	2424c18c 	addiu	a0,at,-15988
8004558c:	0c012455 	jal	80049154 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
80045590:	00000000 	nop
80045594:	8fa10020 	lw	at,32(sp)
80045598:	8fa20014 	lw	v0,20(sp)
8004559c:	afa20040 	sw	v0,64(sp)
        // And how many `T`s will be in the trailing slice!
        let ts_len = self.len() % ts;
800455a0:	10200015 	beqz	at,800455f8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E+0xec>
800455a4:	00000000 	nop
800455a8:	08011570 	j	800455c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E+0xb4>
800455ac:	00000000 	nop
        let us_len = self.len() / ts * us;
800455b0:	3c01810a 	lui	at,0x810a
800455b4:	2424c18c 	addiu	a0,at,-15988
800455b8:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
800455bc:	00000000 	nop
        let ts_len = self.len() % ts;
800455c0:	8fa20014 	lw	v0,20(sp)
800455c4:	8fa10020 	lw	at,32(sp)
800455c8:	8fa30018 	lw	v1,24(sp)
800455cc:	0061001b 	divu	zero,v1,at
800455d0:	002001f4 	teq	at,zero,0x7
800455d4:	00000810 	mfhi	at
800455d8:	afa10044 	sw	at,68(sp)
        (us_len, ts_len)
800455dc:	afa20028 	sw	v0,40(sp)
800455e0:	afa1002c 	sw	at,44(sp)
    }
800455e4:	8fa20028 	lw	v0,40(sp)
800455e8:	8fa3002c 	lw	v1,44(sp)
800455ec:	27bd0048 	addiu	sp,sp,72
800455f0:	03e00008 	jr	ra
800455f4:	00000000 	nop
        let ts_len = self.len() % ts;
800455f8:	3c01810a 	lui	at,0x810a
800455fc:	2424c19c 	addiu	a0,at,-15972
80045600:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80045604:	00000000 	nop

80045608 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E>:
    ///     // less_efficient_algorithm_for_bytes(suffix);
    /// }
    /// ```
    #[stable(feature = "slice_align_to", since = "1.30.0")]
    #[must_use]
    pub unsafe fn align_to<U>(&self) -> (&[T], &[U], &[T]) {
80045608:	27bdff50 	addiu	sp,sp,-176
8004560c:	afbf00ac 	sw	ra,172(sp)
80045610:	afa60044 	sw	a2,68(sp)
80045614:	afa50048 	sw	a1,72(sp)
80045618:	afa4004c 	sw	a0,76(sp)
8004561c:	afa40050 	sw	a0,80(sp)
80045620:	afa50064 	sw	a1,100(sp)
80045624:	afa60068 	sw	a2,104(sp)
        // Note that most of this function will be constant-evaluated,
        if U::IS_ZST || T::IS_ZST {
80045628:	0801158c 	j	80045630 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x28>
8004562c:	00000000 	nop
80045630:	0801158e 	j	80045638 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x30>
80045634:	00000000 	nop
80045638:	8fa10044 	lw	at,68(sp)
8004563c:	8fa40048 	lw	a0,72(sp)
80045640:	afa400a4 	sw	a0,164(sp)
80045644:	afa100a8 	sw	at,168(sp)
            return (self, &[], &[]);
        }

        // First, find at what point do we split between the first and 2nd slice. Easy with
        // ptr.align_offset.
        let ptr = self.as_ptr();
80045648:	afa4006c 	sw	a0,108(sp)
8004564c:	24050004 	li	a1,4
        // SAFETY: See the `align_to_mut` method for the detailed safety comment.
        let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
80045650:	0c00f098 	jal	8003c260 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E>
80045654:	00000000 	nop
80045658:	8fa10044 	lw	at,68(sp)
8004565c:	00401825 	move	v1,v0
80045660:	afa30040 	sw	v1,64(sp)
80045664:	afa20070 	sw	v0,112(sp)
        if offset > self.len() {
80045668:	0022082b 	sltu	at,at,v0
8004566c:	14200037 	bnez	at,8004574c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x144>
80045670:	00000000 	nop
80045674:	0801159f 	j	8004567c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x74>
80045678:	00000000 	nop
            (self, &[], &[])
        } else {
            let (left, rest) = self.split_at(offset);
8004567c:	8fa70040 	lw	a3,64(sp)
80045680:	8fa60044 	lw	a2,68(sp)
80045684:	8fa50048 	lw	a1,72(sp)
80045688:	3c01810a 	lui	at,0x810a
8004568c:	2421c1ac 	addiu	at,at,-15956
80045690:	03a01025 	move	v0,sp
80045694:	ac410010 	sw	at,16(v0)
80045698:	27a40054 	addiu	a0,sp,84
8004569c:	0c0112e4 	jal	80044b90 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17h7f0dba53eee5d866E>
800456a0:	00000000 	nop
800456a4:	8fa20054 	lw	v0,84(sp)
800456a8:	afa2001c 	sw	v0,28(sp)
800456ac:	8fa10058 	lw	at,88(sp)
800456b0:	afa10020 	sw	at,32(sp)
800456b4:	afa20074 	sw	v0,116(sp)
800456b8:	afa10078 	sw	at,120(sp)
800456bc:	8fa4005c 	lw	a0,92(sp)
800456c0:	afa4002c 	sw	a0,44(sp)
800456c4:	8fa50060 	lw	a1,96(sp)
800456c8:	afa50028 	sw	a1,40(sp)
800456cc:	afa4007c 	sw	a0,124(sp)
800456d0:	afa50080 	sw	a1,128(sp)
            let (us_len, ts_len) = rest.align_to_offsets::<U>();
800456d4:	0c011543 	jal	8004550c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E>
800456d8:	00000000 	nop
800456dc:	8fa4002c 	lw	a0,44(sp)
800456e0:	8fa10028 	lw	at,40(sp)
800456e4:	00402825 	move	a1,v0
800456e8:	afa30030 	sw	v1,48(sp)
800456ec:	00601025 	move	v0,v1
800456f0:	afa20024 	sw	v0,36(sp)
800456f4:	afa50084 	sw	a1,132(sp)
800456f8:	afa30088 	sw	v1,136(sp)
800456fc:	afa4009c 	sw	a0,156(sp)
80045700:	afa100a0 	sw	at,160(sp)
            // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
            // since the caller guarantees that we can transmute `T` to `U` safely.
            unsafe {
                (
                    left,
                    from_raw_parts(rest.as_ptr() as *const U, us_len),
80045704:	0c011164 	jal	80044590 <_ZN4core5slice3raw14from_raw_parts17h1495287b2578ef29E>
80045708:	00000000 	nop
8004570c:	8fa10028 	lw	at,40(sp)
80045710:	00402825 	move	a1,v0
80045714:	8fa2002c 	lw	v0,44(sp)
80045718:	00602025 	move	a0,v1
8004571c:	8fa30030 	lw	v1,48(sp)
80045720:	afa50034 	sw	a1,52(sp)
80045724:	afa40038 	sw	a0,56(sp)
80045728:	afa20094 	sw	v0,148(sp)
8004572c:	afa10098 	sw	at,152(sp)
                    from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
80045730:	00231023 	subu	v0,at,v1
80045734:	afa2003c 	sw	v0,60(sp)
80045738:	0023082b 	sltu	at,at,v1
8004573c:	14200025 	bnez	at,800457d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x1cc>
80045740:	00000000 	nop
80045744:	080115e0 	j	80045780 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x178>
80045748:	00000000 	nop
            (self, &[], &[])
8004574c:	8fa1004c 	lw	at,76(sp)
80045750:	8fa20044 	lw	v0,68(sp)
80045754:	8fa30048 	lw	v1,72(sp)
80045758:	ac230000 	sw	v1,0(at)
8004575c:	ac220004 	sw	v0,4(at)
80045760:	3c02810a 	lui	v0,0x810a
80045764:	2442b0b8 	addiu	v0,v0,-20296
80045768:	ac220008 	sw	v0,8(at)
8004576c:	ac20000c 	sw	zero,12(at)
80045770:	ac220010 	sw	v0,16(at)
80045774:	ac200014 	sw	zero,20(at)
        if offset > self.len() {
80045778:	080115f9 	j	800457e4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x1dc>
8004577c:	00000000 	nop
80045780:	8fa50024 	lw	a1,36(sp)
80045784:	8fa1002c 	lw	at,44(sp)
80045788:	8fa2003c 	lw	v0,60(sp)
8004578c:	afa1008c 	sw	at,140(sp)
80045790:	afa20090 	sw	v0,144(sp)
80045794:	00222021 	addu	a0,at,v0
                    from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
80045798:	0c011180 	jal	80044600 <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
8004579c:	00000000 	nop
800457a0:	8fa7001c 	lw	a3,28(sp)
800457a4:	8fa60020 	lw	a2,32(sp)
800457a8:	8fa50034 	lw	a1,52(sp)
800457ac:	8fa40038 	lw	a0,56(sp)
800457b0:	8fa1004c 	lw	at,76(sp)
                (
800457b4:	ac270000 	sw	a3,0(at)
800457b8:	ac260004 	sw	a2,4(at)
800457bc:	ac250008 	sw	a1,8(at)
800457c0:	ac24000c 	sw	a0,12(at)
800457c4:	ac220010 	sw	v0,16(at)
800457c8:	ac230014 	sw	v1,20(at)
        if offset > self.len() {
800457cc:	080115f9 	j	800457e4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x1dc>
800457d0:	00000000 	nop
                    from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
800457d4:	3c01810a 	lui	at,0x810a
800457d8:	2424c1bc 	addiu	a0,at,-15940
800457dc:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800457e0:	00000000 	nop
                )
            }
        }
    }
800457e4:	8fa20050 	lw	v0,80(sp)
800457e8:	8fbf00ac 	lw	ra,172(sp)
800457ec:	27bd00b0 	addiu	sp,sp,176
800457f0:	03e00008 	jr	ra
800457f4:	00000000 	nop

800457f8 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>:
pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {
800457f8:	27bdfff8 	addiu	sp,sp,-8
800457fc:	00a01825 	move	v1,a1
80045800:	00801025 	move	v0,a0
80045804:	afa20000 	sw	v0,0(sp)
80045808:	afa30004 	sw	v1,4(sp)
8004580c:	27bd0008 	addiu	sp,sp,8
}
80045810:	03e00008 	jr	ra
80045814:	00000000 	nop

80045818 <_ZN4core3str5count11count_chars17hb701d6a0293152ceE>:

const USIZE_SIZE: usize = core::mem::size_of::<usize>();
const UNROLL_INNER: usize = 4;

#[inline]
pub(super) fn count_chars(s: &str) -> usize {
80045818:	27bdffc8 	addiu	sp,sp,-56
8004581c:	afbf0034 	sw	ra,52(sp)
80045820:	afa50010 	sw	a1,16(sp)
80045824:	afa40014 	sw	a0,20(sp)
80045828:	afa40024 	sw	a0,36(sp)
8004582c:	afa50028 	sw	a1,40(sp)
    if s.len() < USIZE_SIZE * UNROLL_INNER {
80045830:	0c011bfa 	jal	80046fe8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
80045834:	00000000 	nop
80045838:	afa20018 	sw	v0,24(sp)
8004583c:	24010010 	li	at,16
80045840:	afa1001c 	sw	at,28(sp)
80045844:	24010000 	li	at,0
80045848:	1400000a 	bnez	zero,80045874 <_ZN4core3str5count11count_chars17hb701d6a0293152ceE+0x5c>
8004584c:	00000000 	nop
80045850:	08011616 	j	80045858 <_ZN4core3str5count11count_chars17hb701d6a0293152ceE+0x40>
80045854:	00000000 	nop
80045858:	8fa10018 	lw	at,24(sp)
8004585c:	8fa2001c 	lw	v0,28(sp)
80045860:	0022082b 	sltu	at,at,v0
80045864:	1420000e 	bnez	at,800458a0 <_ZN4core3str5count11count_chars17hb701d6a0293152ceE+0x88>
80045868:	00000000 	nop
8004586c:	08011621 	j	80045884 <_ZN4core3str5count11count_chars17hb701d6a0293152ceE+0x6c>
80045870:	00000000 	nop
80045874:	3c01810a 	lui	at,0x810a
80045878:	2424c23c 	addiu	a0,at,-15812
8004587c:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
80045880:	00000000 	nop
        // difference is not likely to matter, or where it might even be slower.
        // That said, a ton of thought was not spent on the particular threshold
        // here, beyond "this value seems to make sense".
        char_count_general_case(s.as_bytes())
    } else {
        do_count_chars(s)
80045884:	8fa50010 	lw	a1,16(sp)
80045888:	8fa40014 	lw	a0,20(sp)
8004588c:	0c011636 	jal	800458d8 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E>
80045890:	00000000 	nop
80045894:	afa20020 	sw	v0,32(sp)
80045898:	08011631 	j	800458c4 <_ZN4core3str5count11count_chars17hb701d6a0293152ceE+0xac>
8004589c:	00000000 	nop
800458a0:	8fa50010 	lw	a1,16(sp)
800458a4:	8fa40014 	lw	a0,20(sp)
800458a8:	afa4002c 	sw	a0,44(sp)
800458ac:	afa50030 	sw	a1,48(sp)
        char_count_general_case(s.as_bytes())
800458b0:	0c0117a1 	jal	80045e84 <_ZN4core3str5count23char_count_general_case17ha5b861e4fe7674b1E>
800458b4:	00000000 	nop
800458b8:	afa20020 	sw	v0,32(sp)
800458bc:	08011631 	j	800458c4 <_ZN4core3str5count11count_chars17hb701d6a0293152ceE+0xac>
800458c0:	00000000 	nop
    }
}
800458c4:	8fa20020 	lw	v0,32(sp)
800458c8:	8fbf0034 	lw	ra,52(sp)
800458cc:	27bd0038 	addiu	sp,sp,56
800458d0:	03e00008 	jr	ra
800458d4:	00000000 	nop

800458d8 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E>:

fn do_count_chars(s: &str) -> usize {
800458d8:	27bdfeb8 	addiu	sp,sp,-328
800458dc:	afbf0144 	sw	ra,324(sp)
800458e0:	00a03025 	move	a2,a1
800458e4:	afa60040 	sw	a2,64(sp)
800458e8:	00802825 	move	a1,a0
800458ec:	afa50044 	sw	a1,68(sp)
800458f0:	afa500ec 	sw	a1,236(sp)
800458f4:	afa600f0 	sw	a2,240(sp)
800458f8:	afa5013c 	sw	a1,316(sp)
800458fc:	afa60140 	sw	a2,320(sp)
80045900:	27a40064 	addiu	a0,sp,100
    const _: () = assert!(CHUNK_SIZE < 256);
    const _: () = assert!(CHUNK_SIZE % UNROLL_INNER == 0);

    // SAFETY: transmuting `[u8]` to `[usize]` is safe except for size
    // differences which are handled by `align_to`.
    let (head, body, tail) = unsafe { s.as_bytes().align_to::<usize>() };
80045904:	0c011582 	jal	80045608 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E>
80045908:	00000000 	nop
8004590c:	8fa20064 	lw	v0,100(sp)
80045910:	afa20048 	sw	v0,72(sp)
80045914:	8fa10068 	lw	at,104(sp)
80045918:	afa1004c 	sw	at,76(sp)
8004591c:	afa200f4 	sw	v0,244(sp)
80045920:	afa100f8 	sw	at,248(sp)
80045924:	8fa4006c 	lw	a0,108(sp)
80045928:	afa40050 	sw	a0,80(sp)
8004592c:	8fa50070 	lw	a1,112(sp)
80045930:	afa50054 	sw	a1,84(sp)
80045934:	afa400fc 	sw	a0,252(sp)
80045938:	afa50100 	sw	a1,256(sp)
8004593c:	8fa20074 	lw	v0,116(sp)
80045940:	afa20058 	sw	v0,88(sp)
80045944:	8fa10078 	lw	at,120(sp)
80045948:	afa1005c 	sw	at,92(sp)
8004594c:	afa20104 	sw	v0,260(sp)
80045950:	afa10108 	sw	at,264(sp)
    // mode).
    //
    // The `unlikely` helps discourage LLVM from inlining the body, which is
    // nice, as we would rather not mark the `char_count_general_case` function
    // as cold.
    if unlikely(body.is_empty() || head.len() > USIZE_SIZE || tail.len() > USIZE_SIZE) {
80045954:	0c0111b8 	jal	800446e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8is_empty17h919103cb7fc266a9E>
80045958:	00000000 	nop
8004595c:	14400009 	bnez	v0,80045984 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0xac>
80045960:	00000000 	nop
80045964:	0801165b 	j	8004596c <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x94>
80045968:	00000000 	nop
8004596c:	8fa1004c 	lw	at,76(sp)
80045970:	2c210005 	sltiu	at,at,5
80045974:	14200007 	bnez	at,80045994 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0xbc>
80045978:	00000000 	nop
8004597c:	08011661 	j	80045984 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0xac>
80045980:	00000000 	nop
80045984:	24010001 	li	at,1
80045988:	a3a1007f 	sb	at,127(sp)
8004598c:	0801166b 	j	800459ac <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0xd4>
80045990:	00000000 	nop
80045994:	8fa2005c 	lw	v0,92(sp)
80045998:	24010004 	li	at,4
8004599c:	0022082b 	sltu	at,at,v0
800459a0:	a3a1007f 	sb	at,127(sp)
800459a4:	0801166b 	j	800459ac <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0xd4>
800459a8:	00000000 	nop
800459ac:	93a1007f 	lbu	at,127(sp)
800459b0:	30210001 	andi	at,at,0x1
800459b4:	a3a1010f 	sb	at,271(sp)
800459b8:	93a1010f 	lbu	at,271(sp)
800459bc:	30210001 	andi	at,at,0x1
800459c0:	14200015 	bnez	at,80045a18 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x140>
800459c4:	00000000 	nop
800459c8:	08011674 	j	800459d0 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0xf8>
800459cc:	00000000 	nop
        return char_count_general_case(s.as_bytes());
    }

    let mut total = char_count_general_case(head) + char_count_general_case(tail);
800459d0:	8fa5004c 	lw	a1,76(sp)
800459d4:	8fa40048 	lw	a0,72(sp)
800459d8:	0c0117a1 	jal	80045e84 <_ZN4core3str5count23char_count_general_case17ha5b861e4fe7674b1E>
800459dc:	00000000 	nop
800459e0:	8fa40058 	lw	a0,88(sp)
800459e4:	8fa5005c 	lw	a1,92(sp)
800459e8:	afa20038 	sw	v0,56(sp)
800459ec:	0c0117a1 	jal	80045e84 <_ZN4core3str5count23char_count_general_case17ha5b861e4fe7674b1E>
800459f0:	00000000 	nop
800459f4:	00400825 	move	at,v0
800459f8:	8fa20038 	lw	v0,56(sp)
800459fc:	00410821 	addu	at,v0,at
80045a00:	afa1003c 	sw	at,60(sp)
80045a04:	0022082b 	sltu	at,at,v0
80045a08:	14200025 	bnez	at,80045aa0 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x1c8>
80045a0c:	00000000 	nop
80045a10:	0801168f 	j	80045a3c <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x164>
80045a14:	00000000 	nop
80045a18:	8fa50040 	lw	a1,64(sp)
80045a1c:	8fa40044 	lw	a0,68(sp)
80045a20:	afa40134 	sw	a0,308(sp)
80045a24:	afa50138 	sw	a1,312(sp)
        return char_count_general_case(s.as_bytes());
80045a28:	0c0117a1 	jal	80045e84 <_ZN4core3str5count23char_count_general_case17ha5b861e4fe7674b1E>
80045a2c:	00000000 	nop
80045a30:	afa20060 	sw	v0,96(sp)
80045a34:	08011733 	j	80045ccc <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x3f4>
80045a38:	00000000 	nop
    let mut total = char_count_general_case(head) + char_count_general_case(tail);
80045a3c:	8fa60054 	lw	a2,84(sp)
80045a40:	8fa50050 	lw	a1,80(sp)
80045a44:	8fa1003c 	lw	at,60(sp)
80045a48:	afa10080 	sw	at,128(sp)
    // Split `body` into `CHUNK_SIZE` chunks to reduce the frequency with which
    // we call `sum_bytes_in_usize`.
    for chunk in body.chunks(CHUNK_SIZE) {
80045a4c:	3c01810a 	lui	at,0x810a
80045a50:	2421c25c 	addiu	at,at,-15780
80045a54:	03a01025 	move	v0,sp
80045a58:	ac410010 	sw	at,16(v0)
80045a5c:	27a40090 	addiu	a0,sp,144
80045a60:	afa40034 	sw	a0,52(sp)
80045a64:	240700c0 	li	a3,192
80045a68:	0c01125f 	jal	8004497c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6chunks17h77ab5ed9164bef81E>
80045a6c:	00000000 	nop
80045a70:	8fa50034 	lw	a1,52(sp)
80045a74:	27a40084 	addiu	a0,sp,132
80045a78:	0c00f813 	jal	8003e04c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h527644712bfef04bE>
80045a7c:	00000000 	nop
80045a80:	8fa1008c 	lw	at,140(sp)
80045a84:	afa100a4 	sw	at,164(sp)
80045a88:	8fa10088 	lw	at,136(sp)
80045a8c:	afa100a0 	sw	at,160(sp)
80045a90:	8fa10084 	lw	at,132(sp)
80045a94:	afa1009c 	sw	at,156(sp)
80045a98:	080116ac 	j	80045ab0 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x1d8>
80045a9c:	00000000 	nop
    let mut total = char_count_general_case(head) + char_count_general_case(tail);
80045aa0:	3c01810a 	lui	at,0x810a
80045aa4:	2424c24c 	addiu	a0,at,-15796
80045aa8:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80045aac:	00000000 	nop
80045ab0:	27a4009c 	addiu	a0,sp,156
    for chunk in body.chunks(CHUNK_SIZE) {
80045ab4:	0c01112e 	jal	800444b8 <_ZN93_$LT$core..slice..iter..Chunks$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47ac45bc3c7539b6E>
80045ab8:	00000000 	nop
80045abc:	afa200a8 	sw	v0,168(sp)
80045ac0:	afa300ac 	sw	v1,172(sp)
80045ac4:	8fa100a8 	lw	at,168(sp)
80045ac8:	14200007 	bnez	at,80045ae8 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x210>
80045acc:	00000000 	nop
80045ad0:	080116b6 	j	80045ad8 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x200>
80045ad4:	00000000 	nop
            }
            total += sum_bytes_in_usize(counts);
            break;
        }
    }
    total
80045ad8:	8fa10080 	lw	at,128(sp)
80045adc:	afa10060 	sw	at,96(sp)
}
80045ae0:	08011733 	j	80045ccc <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x3f4>
80045ae4:	00000000 	nop
    for chunk in body.chunks(CHUNK_SIZE) {
80045ae8:	8fa500a8 	lw	a1,168(sp)
80045aec:	8fa600ac 	lw	a2,172(sp)
80045af0:	afa50110 	sw	a1,272(sp)
80045af4:	afa60114 	sw	a2,276(sp)
        let mut counts = 0;
80045af8:	afa000b0 	sw	zero,176(sp)
        let (unrolled_chunks, remainder) = chunk.as_chunks::<UNROLL_INNER>();
80045afc:	3c01810a 	lui	at,0x810a
80045b00:	2427c26c 	addiu	a3,at,-15764
80045b04:	27a400b4 	addiu	a0,sp,180
80045b08:	0c0112a6 	jal	80044a98 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$9as_chunks17h8beb15ae9ec351f9E>
80045b0c:	00000000 	nop
80045b10:	8fa400b4 	lw	a0,180(sp)
80045b14:	8fa500b8 	lw	a1,184(sp)
80045b18:	afa40118 	sw	a0,280(sp)
80045b1c:	afa5011c 	sw	a1,284(sp)
80045b20:	8fa200bc 	lw	v0,188(sp)
80045b24:	afa2002c 	sw	v0,44(sp)
80045b28:	8fa100c0 	lw	at,192(sp)
80045b2c:	afa10030 	sw	at,48(sp)
80045b30:	afa20120 	sw	v0,288(sp)
80045b34:	afa10124 	sw	at,292(sp)
        for unrolled in unrolled_chunks {
80045b38:	0c010fe2 	jal	80043f88 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h506506b1e938b365E>
80045b3c:	00000000 	nop
80045b40:	afa200c4 	sw	v0,196(sp)
80045b44:	afa300c8 	sw	v1,200(sp)
80045b48:	080116d4 	j	80045b50 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x278>
80045b4c:	00000000 	nop
80045b50:	27a400c4 	addiu	a0,sp,196
80045b54:	0c012979 	jal	8004a5e4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E>
80045b58:	00000000 	nop
80045b5c:	afa200cc 	sw	v0,204(sp)
80045b60:	8fa100cc 	lw	at,204(sp)
80045b64:	1420000f 	bnez	at,80045ba4 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x2cc>
80045b68:	00000000 	nop
80045b6c:	080116dd 	j	80045b74 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x29c>
80045b70:	00000000 	nop
        total += sum_bytes_in_usize(counts);
80045b74:	8fa400b0 	lw	a0,176(sp)
80045b78:	0c01176b 	jal	80045dac <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E>
80045b7c:	00000000 	nop
80045b80:	00400825 	move	at,v0
80045b84:	8fa20080 	lw	v0,128(sp)
80045b88:	00410821 	addu	at,v0,at
80045b8c:	afa10028 	sw	at,40(sp)
80045b90:	0022082b 	sltu	at,at,v0
80045b94:	14200015 	bnez	at,80045bec <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x314>
80045b98:	00000000 	nop
80045b9c:	080116f1 	j	80045bc4 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x2ec>
80045ba0:	00000000 	nop
        for unrolled in unrolled_chunks {
80045ba4:	8fa400cc 	lw	a0,204(sp)
80045ba8:	afa4012c 	sw	a0,300(sp)
            for &word in unrolled {
80045bac:	0c00f3c9 	jal	8003cf24 <_ZN4core5array98_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u3b$$u20$N$u5d$$GT$9into_iter17h8eaf4e7ff4d3c707E>
80045bb0:	00000000 	nop
80045bb4:	afa200d0 	sw	v0,208(sp)
80045bb8:	afa300d4 	sw	v1,212(sp)
80045bbc:	08011740 	j	80045d00 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x428>
80045bc0:	00000000 	nop
        total += sum_bytes_in_usize(counts);
80045bc4:	8fa50030 	lw	a1,48(sp)
80045bc8:	8fa4002c 	lw	a0,44(sp)
80045bcc:	8fa10028 	lw	at,40(sp)
80045bd0:	afa10080 	sw	at,128(sp)
        if !remainder.is_empty() {
80045bd4:	0c0111b8 	jal	800446e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8is_empty17h919103cb7fc266a9E>
80045bd8:	00000000 	nop
80045bdc:	1440ffb4 	bnez	v0,80045ab0 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x1d8>
80045be0:	00000000 	nop
80045be4:	080116ff 	j	80045bfc <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x324>
80045be8:	00000000 	nop
        total += sum_bytes_in_usize(counts);
80045bec:	3c01810a 	lui	at,0x810a
80045bf0:	2424c27c 	addiu	a0,at,-15748
80045bf4:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80045bf8:	00000000 	nop
            let mut counts = 0;
80045bfc:	8fa50030 	lw	a1,48(sp)
80045c00:	8fa4002c 	lw	a0,44(sp)
80045c04:	afa000dc 	sw	zero,220(sp)
            for &word in remainder {
80045c08:	0c010ff6 	jal	80043fd8 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17heae6ddbb441c7c91E>
80045c0c:	00000000 	nop
80045c10:	afa200e0 	sw	v0,224(sp)
80045c14:	afa300e4 	sw	v1,228(sp)
80045c18:	08011708 	j	80045c20 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x348>
80045c1c:	00000000 	nop
80045c20:	27a400e0 	addiu	a0,sp,224
80045c24:	0c0129b1 	jal	8004a6c4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E>
80045c28:	00000000 	nop
80045c2c:	afa200e8 	sw	v0,232(sp)
80045c30:	8fa100e8 	lw	at,232(sp)
80045c34:	1420000f 	bnez	at,80045c74 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x39c>
80045c38:	00000000 	nop
80045c3c:	08011711 	j	80045c44 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x36c>
80045c40:	00000000 	nop
            total += sum_bytes_in_usize(counts);
80045c44:	8fa400dc 	lw	a0,220(sp)
80045c48:	0c01176b 	jal	80045dac <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E>
80045c4c:	00000000 	nop
80045c50:	00400825 	move	at,v0
80045c54:	8fa20080 	lw	v0,128(sp)
80045c58:	00410821 	addu	at,v0,at
80045c5c:	afa10024 	sw	at,36(sp)
80045c60:	0022082b 	sltu	at,at,v0
80045c64:	14200015 	bnez	at,80045cbc <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x3e4>
80045c68:	00000000 	nop
80045c6c:	0801172b 	j	80045cac <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x3d4>
80045c70:	00000000 	nop
            for &word in remainder {
80045c74:	8fa100e8 	lw	at,232(sp)
80045c78:	8c240000 	lw	a0,0(at)
80045c7c:	afa40128 	sw	a0,296(sp)
                counts += contains_non_continuation_byte(word);
80045c80:	0c01175f 	jal	80045d7c <_ZN4core3str5count30contains_non_continuation_byte17ha09d8f91a66ddc5fE>
80045c84:	00000000 	nop
80045c88:	00400825 	move	at,v0
80045c8c:	8fa200dc 	lw	v0,220(sp)
80045c90:	00410821 	addu	at,v0,at
80045c94:	afa10020 	sw	at,32(sp)
80045c98:	0022082b 	sltu	at,at,v0
80045c9c:	14200014 	bnez	at,80045cf0 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x418>
80045ca0:	00000000 	nop
80045ca4:	08011738 	j	80045ce0 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x408>
80045ca8:	00000000 	nop
            total += sum_bytes_in_usize(counts);
80045cac:	8fa10024 	lw	at,36(sp)
80045cb0:	afa10080 	sw	at,128(sp)
80045cb4:	080116b6 	j	80045ad8 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x200>
80045cb8:	00000000 	nop
80045cbc:	3c01810a 	lui	at,0x810a
80045cc0:	2424c28c 	addiu	a0,at,-15732
80045cc4:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80045cc8:	00000000 	nop
}
80045ccc:	8fa20060 	lw	v0,96(sp)
80045cd0:	8fbf0144 	lw	ra,324(sp)
80045cd4:	27bd0148 	addiu	sp,sp,328
80045cd8:	03e00008 	jr	ra
80045cdc:	00000000 	nop
                counts += contains_non_continuation_byte(word);
80045ce0:	8fa10020 	lw	at,32(sp)
80045ce4:	afa100dc 	sw	at,220(sp)
            for &word in remainder {
80045ce8:	08011708 	j	80045c20 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x348>
80045cec:	00000000 	nop
                counts += contains_non_continuation_byte(word);
80045cf0:	3c01810a 	lui	at,0x810a
80045cf4:	2424c29c 	addiu	a0,at,-15716
80045cf8:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80045cfc:	00000000 	nop
80045d00:	27a400d0 	addiu	a0,sp,208
            for &word in unrolled {
80045d04:	0c0129b1 	jal	8004a6c4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E>
80045d08:	00000000 	nop
80045d0c:	afa200d8 	sw	v0,216(sp)
80045d10:	8fa100d8 	lw	at,216(sp)
80045d14:	1020ff8e 	beqz	at,80045b50 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x278>
80045d18:	00000000 	nop
80045d1c:	08011749 	j	80045d24 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x44c>
80045d20:	00000000 	nop
80045d24:	8fa100d8 	lw	at,216(sp)
80045d28:	8c240000 	lw	a0,0(at)
80045d2c:	afa40130 	sw	a0,304(sp)
                counts += contains_non_continuation_byte(word);
80045d30:	0c01175f 	jal	80045d7c <_ZN4core3str5count30contains_non_continuation_byte17ha09d8f91a66ddc5fE>
80045d34:	00000000 	nop
80045d38:	00400825 	move	at,v0
80045d3c:	8fa200b0 	lw	v0,176(sp)
80045d40:	00410821 	addu	at,v0,at
80045d44:	afa1001c 	sw	at,28(sp)
80045d48:	0022082b 	sltu	at,at,v0
80045d4c:	14200007 	bnez	at,80045d6c <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x494>
80045d50:	00000000 	nop
80045d54:	08011757 	j	80045d5c <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x484>
80045d58:	00000000 	nop
80045d5c:	8fa1001c 	lw	at,28(sp)
80045d60:	afa100b0 	sw	at,176(sp)
            for &word in unrolled {
80045d64:	08011740 	j	80045d00 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x428>
80045d68:	00000000 	nop
                counts += contains_non_continuation_byte(word);
80045d6c:	3c01810a 	lui	at,0x810a
80045d70:	2424c2ac 	addiu	a0,at,-15700
80045d74:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80045d78:	00000000 	nop

80045d7c <_ZN4core3str5count30contains_non_continuation_byte17ha09d8f91a66ddc5fE>:
// Checks each byte of `w` to see if it contains the first byte in a UTF-8
// sequence. Bytes in `w` which are continuation bytes are left as `0x00` (e.g.
// false), and bytes which are non-continuation bytes are left as `0x01` (e.g.
// true)
#[inline]
fn contains_non_continuation_byte(w: usize) -> usize {
80045d7c:	27bdfff8 	addiu	sp,sp,-8
80045d80:	afa40004 	sw	a0,4(sp)
    const LSB: usize = usize::repeat_u8(0x01);
    ((!w >> 7) | (w >> 6)) & LSB
80045d84:	00800827 	nor	at,a0,zero
80045d88:	000109c2 	srl	at,at,0x7
80045d8c:	00041182 	srl	v0,a0,0x6
80045d90:	00220825 	or	at,at,v0
80045d94:	3c020101 	lui	v0,0x101
80045d98:	34420101 	ori	v0,v0,0x101
80045d9c:	00221024 	and	v0,at,v0
80045da0:	27bd0008 	addiu	sp,sp,8
}
80045da4:	03e00008 	jr	ra
80045da8:	00000000 	nop

80045dac <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E>:

// Morally equivalent to `values.to_ne_bytes().into_iter().sum::<usize>()`, but
// more efficient.
#[inline]
fn sum_bytes_in_usize(values: usize) -> usize {
80045dac:	27bdffd0 	addiu	sp,sp,-48
80045db0:	afa40020 	sw	a0,32(sp)
80045db4:	3c0100ff 	lui	at,0xff
80045db8:	342300ff 	ori	v1,at,0xff
    const LSB_SHORTS: usize = usize::repeat_u16(0x0001);
    const SKIP_BYTES: usize = usize::repeat_u16(0x00ff);

    let pair_sum: usize = (values & SKIP_BYTES) + ((values >> 8) & SKIP_BYTES);
80045dbc:	00830824 	and	at,a0,v1
80045dc0:	00041202 	srl	v0,a0,0x8
80045dc4:	00431024 	and	v0,v0,v1
80045dc8:	00220821 	addu	at,at,v0
80045dcc:	afa1001c 	sw	at,28(sp)
80045dd0:	24010000 	li	at,0
80045dd4:	14000013 	bnez	zero,80045e24 <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E+0x78>
80045dd8:	00000000 	nop
80045ddc:	08011779 	j	80045de4 <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E+0x38>
80045de0:	00000000 	nop
80045de4:	8fa2001c 	lw	v0,28(sp)
80045de8:	afa20024 	sw	v0,36(sp)
80045dec:	afa20028 	sw	v0,40(sp)
80045df0:	3c010001 	lui	at,0x1
80045df4:	34210001 	ori	at,at,0x1
80045df8:	afa1002c 	sw	at,44(sp)
            intrinsics::wrapping_mul(self, rhs)
80045dfc:	00020c00 	sll	at,v0,0x10
80045e00:	00220821 	addu	at,at,v0
80045e04:	afa10014 	sw	at,20(sp)
80045e08:	24010010 	li	at,16
80045e0c:	afa10018 	sw	at,24(sp)
80045e10:	24010000 	li	at,0
    pair_sum.wrapping_mul(LSB_SHORTS) >> ((USIZE_SIZE - 2) * 8)
80045e14:	1400000d 	bnez	zero,80045e4c <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E+0xa0>
80045e18:	00000000 	nop
80045e1c:	0801178d 	j	80045e34 <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E+0x88>
80045e20:	00000000 	nop
    let pair_sum: usize = (values & SKIP_BYTES) + ((values >> 8) & SKIP_BYTES);
80045e24:	3c01810a 	lui	at,0x810a
80045e28:	2424c2bc 	addiu	a0,at,-15684
80045e2c:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80045e30:	00000000 	nop
    pair_sum.wrapping_mul(LSB_SHORTS) >> ((USIZE_SIZE - 2) * 8)
80045e34:	8fa10018 	lw	at,24(sp)
80045e38:	2c210020 	sltiu	at,at,32
80045e3c:	14200007 	bnez	at,80045e5c <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E+0xb0>
80045e40:	00000000 	nop
80045e44:	0801179d 	j	80045e74 <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E+0xc8>
80045e48:	00000000 	nop
80045e4c:	3c01810a 	lui	at,0x810a
80045e50:	2424c2cc 	addiu	a0,at,-15668
80045e54:	0c01241d 	jal	80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
80045e58:	00000000 	nop
80045e5c:	8fa10014 	lw	at,20(sp)
80045e60:	8fa20018 	lw	v0,24(sp)
80045e64:	00411006 	srlv	v0,at,v0
80045e68:	27bd0030 	addiu	sp,sp,48
}
80045e6c:	03e00008 	jr	ra
80045e70:	00000000 	nop
    pair_sum.wrapping_mul(LSB_SHORTS) >> ((USIZE_SIZE - 2) * 8)
80045e74:	3c01810a 	lui	at,0x810a
80045e78:	2424c2dc 	addiu	a0,at,-15652
80045e7c:	0c012439 	jal	800490e4 <_ZN4core9panicking11panic_const24panic_const_shr_overflow17h51109cf1c6739500E>
80045e80:	00000000 	nop

80045e84 <_ZN4core3str5count23char_count_general_case17ha5b861e4fe7674b1E>:

// This is the most direct implementation of the concept of "count the number of
// bytes in the string which are not continuation bytes", and is used for the
// head and tail of the input string (the first and last item in the tuple
// returned by `slice::align_to`).
fn char_count_general_case(s: &[u8]) -> usize {
80045e84:	27bdffe0 	addiu	sp,sp,-32
80045e88:	afbf001c 	sw	ra,28(sp)
80045e8c:	afa40014 	sw	a0,20(sp)
80045e90:	afa50018 	sw	a1,24(sp)
    s.iter().filter(|&&byte| !super::validations::utf8_is_cont_byte(byte)).count()
80045e94:	0c01122d 	jal	800448b4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9fbf31f27946410E>
80045e98:	00000000 	nop
80045e9c:	00402025 	move	a0,v0
80045ea0:	00602825 	move	a1,v1
80045ea4:	0c00f8c7 	jal	8003e31c <_ZN4core4iter6traits8iterator8Iterator6filter17h4fb980de80130199E>
80045ea8:	00000000 	nop
80045eac:	00402025 	move	a0,v0
80045eb0:	00602825 	move	a1,v1
80045eb4:	0c00f738 	jal	8003dce0 <_ZN108_$LT$core..iter..adapters..filter..Filter$LT$I$C$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count17ha76fd5484bcdeddfE>
80045eb8:	00000000 	nop
}
80045ebc:	8fbf001c 	lw	ra,28(sp)
80045ec0:	27bd0020 	addiu	sp,sp,32
80045ec4:	03e00008 	jr	ra
80045ec8:	00000000 	nop

80045ecc <_ZN4core3str5count23char_count_general_case28_$u7b$$u7b$closure$u7d$$u7d$17h2bd39cb177afb02cE>:
    s.iter().filter(|&&byte| !super::validations::utf8_is_cont_byte(byte)).count()
80045ecc:	27bdffe0 	addiu	sp,sp,-32
80045ed0:	afbf001c 	sw	ra,28(sp)
80045ed4:	afa40010 	sw	a0,16(sp)
80045ed8:	afa50014 	sw	a1,20(sp)
80045edc:	8ca10000 	lw	at,0(a1)
80045ee0:	90240000 	lbu	a0,0(at)
80045ee4:	a3a4001b 	sb	a0,27(sp)
80045ee8:	0c0119ff 	jal	800467fc <_ZN4core3str11validations17utf8_is_cont_byte17hfd9fecd852438cdeE>
80045eec:	00000000 	nop
80045ef0:	38420001 	xori	v0,v0,0x1
80045ef4:	8fbf001c 	lw	ra,28(sp)
80045ef8:	27bd0020 	addiu	sp,sp,32
80045efc:	03e00008 	jr	ra
80045f00:	00000000 	nop

80045f04 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h322ca2115794f866E>:
    fn next(&mut self) -> Option<char> {
80045f04:	27bdffe8 	addiu	sp,sp,-24
80045f08:	afbf0014 	sw	ra,20(sp)
80045f0c:	afa40010 	sw	a0,16(sp)
        unsafe { next_code_point(&mut self.iter).map(|ch| char::from_u32_unchecked(ch)) }
80045f10:	0c011a06 	jal	80046818 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E>
80045f14:	00000000 	nop
80045f18:	00402025 	move	a0,v0
80045f1c:	00602825 	move	a1,v1
80045f20:	0c00fa19 	jal	8003e864 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE>
80045f24:	00000000 	nop
    }
80045f28:	8fbf0014 	lw	ra,20(sp)
80045f2c:	27bd0018 	addiu	sp,sp,24
80045f30:	03e00008 	jr	ra
80045f34:	00000000 	nop

80045f38 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17he800632fb07a6c54E>:
        unsafe { next_code_point(&mut self.iter).map(|ch| char::from_u32_unchecked(ch)) }
80045f38:	27bdffe0 	addiu	sp,sp,-32
80045f3c:	afbf001c 	sw	ra,28(sp)
80045f40:	afa40018 	sw	a0,24(sp)
80045f44:	0c00f4a2 	jal	8003d288 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$18from_u32_unchecked17h9f49626bc6b588f7E>
80045f48:	00000000 	nop
80045f4c:	8fbf001c 	lw	ra,28(sp)
80045f50:	27bd0020 	addiu	sp,sp,32
80045f54:	03e00008 	jr	ra
80045f58:	00000000 	nop

80045f5c <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count17h53f43070aad197f4E>:

    #[inline]
    fn count(self) -> usize {
80045f5c:	27bdffe0 	addiu	sp,sp,-32
80045f60:	afbf001c 	sw	ra,28(sp)
80045f64:	afa40014 	sw	a0,20(sp)
80045f68:	afa50018 	sw	a1,24(sp)
80045f6c:	27a40014 	addiu	a0,sp,20
        super::count::count_chars(self.as_str())
80045f70:	0c0117e6 	jal	80045f98 <_ZN4core3str4iter5Chars6as_str17h1617b32cce1037c4E>
80045f74:	00000000 	nop
80045f78:	00402025 	move	a0,v0
80045f7c:	00602825 	move	a1,v1
80045f80:	0c011606 	jal	80045818 <_ZN4core3str5count11count_chars17hb701d6a0293152ceE>
80045f84:	00000000 	nop
    }
80045f88:	8fbf001c 	lw	ra,28(sp)
80045f8c:	27bd0020 	addiu	sp,sp,32
80045f90:	03e00008 	jr	ra
80045f94:	00000000 	nop

80045f98 <_ZN4core3str4iter5Chars6as_str17h1617b32cce1037c4E>:
    /// assert_eq!(chars.as_str(), "");
    /// ```
    #[stable(feature = "iter_to_slice", since = "1.4.0")]
    #[must_use]
    #[inline]
    pub fn as_str(&self) -> &'a str {
80045f98:	27bdffe8 	addiu	sp,sp,-24
80045f9c:	afbf0014 	sw	ra,20(sp)
80045fa0:	afa40010 	sw	a0,16(sp)
        // SAFETY: `Chars` is only made from a str, which guarantees the iter is valid UTF-8.
        unsafe { from_utf8_unchecked(self.iter.as_slice()) }
80045fa4:	0c0110e7 	jal	8004439c <_ZN4core5slice4iter13Iter$LT$T$GT$8as_slice17h7c85becc54e8e8beE>
80045fa8:	00000000 	nop
80045fac:	00402025 	move	a0,v0
80045fb0:	00602825 	move	a1,v1
80045fb4:	0c0115fe 	jal	800457f8 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>
80045fb8:	00000000 	nop
    }
80045fbc:	8fbf0014 	lw	ra,20(sp)
80045fc0:	27bd0018 	addiu	sp,sp,24
80045fc4:	03e00008 	jr	ra
80045fc8:	00000000 	nop

80045fcc <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<'a> Iterator for CharIndices<'a> {
    type Item = (usize, char);

    #[inline]
    fn next(&mut self) -> Option<(usize, char)> {
80045fcc:	27bdff88 	addiu	sp,sp,-120
80045fd0:	afbf0074 	sw	ra,116(sp)
80045fd4:	00800825 	move	at,a0
80045fd8:	afa10024 	sw	at,36(sp)
80045fdc:	afa10040 	sw	at,64(sp)
80045fe0:	afa10068 	sw	at,104(sp)
                len!(self)
80045fe4:	24220004 	addiu	v0,at,4
80045fe8:	afa20070 	sw	v0,112(sp)
80045fec:	8c240004 	lw	a0,4(at)
80045ff0:	afa4006c 	sw	a0,108(sp)
80045ff4:	8c250000 	lw	a1,0(at)
80045ff8:	0c00ee24 	jal	8003b890 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$7sub_ptr17h9b9ab3e8577ce557E>
80045ffc:	00000000 	nop
80046000:	8fa40024 	lw	a0,36(sp)
80046004:	afa20064 	sw	v0,100(sp)
            }
80046008:	8fa10064 	lw	at,100(sp)
8004600c:	afa10028 	sw	at,40(sp)
        let pre_len = self.iter.iter.len();
80046010:	afa10044 	sw	at,68(sp)
        match self.iter.next() {
80046014:	0c0117c1 	jal	80045f04 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h322ca2115794f866E>
80046018:	00000000 	nop
8004601c:	afa20034 	sw	v0,52(sp)
80046020:	8fa10034 	lw	at,52(sp)
80046024:	3c020011 	lui	v0,0x11
80046028:	14220007 	bne	at,v0,80046048 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0x7c>
8004602c:	00000000 	nop
80046030:	0801180e 	j	80046038 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0x6c>
80046034:	00000000 	nop
80046038:	3c010011 	lui	at,0x11
            None => None,
8004603c:	afa10030 	sw	at,48(sp)
80046040:	0801182c 	j	800460b0 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0xe4>
80046044:	00000000 	nop
            Some(ch) => {
80046048:	8fa10024 	lw	at,36(sp)
8004604c:	8fa20034 	lw	v0,52(sp)
80046050:	afa20018 	sw	v0,24(sp)
80046054:	afa20048 	sw	v0,72(sp)
                let index = self.front_offset;
80046058:	8c220008 	lw	v0,8(at)
8004605c:	afa2001c 	sw	v0,28(sp)
80046060:	afa2004c 	sw	v0,76(sp)
80046064:	afa10058 	sw	at,88(sp)
                len!(self)
80046068:	24220004 	addiu	v0,at,4
8004606c:	afa20060 	sw	v0,96(sp)
80046070:	8c240004 	lw	a0,4(at)
80046074:	afa4005c 	sw	a0,92(sp)
80046078:	8c250000 	lw	a1,0(at)
8004607c:	0c00ee24 	jal	8003b890 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$7sub_ptr17h9b9ab3e8577ce557E>
80046080:	00000000 	nop
80046084:	8fa10028 	lw	at,40(sp)
80046088:	afa20054 	sw	v0,84(sp)
            }
8004608c:	8fa20054 	lw	v0,84(sp)
                let len = self.iter.iter.len();
80046090:	afa20050 	sw	v0,80(sp)
                self.front_offset += pre_len - len;
80046094:	00221823 	subu	v1,at,v0
80046098:	afa30020 	sw	v1,32(sp)
8004609c:	0022082b 	sltu	at,at,v0
800460a0:	14200013 	bnez	at,800460f0 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0x124>
800460a4:	00000000 	nop
800460a8:	08011832 	j	800460c8 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0xfc>
800460ac:	00000000 	nop
                Some((index, ch))
            }
        }
    }
800460b0:	8fa2002c 	lw	v0,44(sp)
800460b4:	8fa30030 	lw	v1,48(sp)
800460b8:	8fbf0074 	lw	ra,116(sp)
800460bc:	27bd0078 	addiu	sp,sp,120
800460c0:	03e00008 	jr	ra
800460c4:	00000000 	nop
                self.front_offset += pre_len - len;
800460c8:	8fa10020 	lw	at,32(sp)
800460cc:	8fa20024 	lw	v0,36(sp)
800460d0:	8c420008 	lw	v0,8(v0)
800460d4:	00410821 	addu	at,v0,at
800460d8:	afa10014 	sw	at,20(sp)
800460dc:	0022082b 	sltu	at,at,v0
800460e0:	14200014 	bnez	at,80046134 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0x168>
800460e4:	00000000 	nop
800460e8:	08011840 	j	80046100 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0x134>
800460ec:	00000000 	nop
800460f0:	3c01810a 	lui	at,0x810a
800460f4:	2424c35c 	addiu	a0,at,-15524
800460f8:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800460fc:	00000000 	nop
80046100:	8fa10018 	lw	at,24(sp)
80046104:	8fa2001c 	lw	v0,28(sp)
80046108:	8fa30014 	lw	v1,20(sp)
8004610c:	8fa40024 	lw	a0,36(sp)
80046110:	ac830008 	sw	v1,8(a0)
                Some((index, ch))
80046114:	afa20038 	sw	v0,56(sp)
80046118:	afa1003c 	sw	at,60(sp)
8004611c:	8fa20038 	lw	v0,56(sp)
80046120:	8fa1003c 	lw	at,60(sp)
80046124:	afa2002c 	sw	v0,44(sp)
80046128:	afa10030 	sw	at,48(sp)
            }
8004612c:	0801182c 	j	800460b0 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0xe4>
80046130:	00000000 	nop
                self.front_offset += pre_len - len;
80046134:	3c01810a 	lui	at,0x810a
80046138:	2424c36c 	addiu	a0,at,-15508
8004613c:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80046140:	00000000 	nop

80046144 <_ZN4core3str6traits66_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$str$GT$5index17h3aebf7787939ace3E>:
    I: SliceIndex<str>,
{
    type Output = I::Output;

    #[inline]
    fn index(&self, index: I) -> &I::Output {
80046144:	27bdffc8 	addiu	sp,sp,-56
80046148:	afbf0034 	sw	ra,52(sp)
8004614c:	afa7001c 	sw	a3,28(sp)
80046150:	afa60020 	sw	a2,32(sp)
80046154:	00a03825 	move	a3,a1
80046158:	8fa5001c 	lw	a1,28(sp)
8004615c:	00803025 	move	a2,a0
80046160:	8fa40020 	lw	a0,32(sp)
80046164:	8fa10048 	lw	at,72(sp)
80046168:	afa60024 	sw	a2,36(sp)
8004616c:	afa70028 	sw	a3,40(sp)
80046170:	afa4002c 	sw	a0,44(sp)
80046174:	afa50030 	sw	a1,48(sp)
        index.index(self)
80046178:	03a01025 	move	v0,sp
8004617c:	ac410010 	sw	at,16(v0)
80046180:	0c0118e5 	jal	80046394 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$5index17h9e673dd3fdef6a34E>
80046184:	00000000 	nop
    }
80046188:	8fbf0034 	lw	ra,52(sp)
8004618c:	27bd0038 	addiu	sp,sp,56
80046190:	03e00008 	jr	ra
80046194:	00000000 	nop

80046198 <_ZN4core3str6traits66_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$str$GT$5index17h530a1160dbfa1a41E>:
    fn index(&self, index: I) -> &I::Output {
80046198:	27bdffd8 	addiu	sp,sp,-40
8004619c:	afbf0024 	sw	ra,36(sp)
800461a0:	afa60014 	sw	a2,20(sp)
800461a4:	00a03025 	move	a2,a1
800461a8:	00802825 	move	a1,a0
800461ac:	8fa40014 	lw	a0,20(sp)
800461b0:	afa50018 	sw	a1,24(sp)
800461b4:	afa6001c 	sw	a2,28(sp)
800461b8:	afa40020 	sw	a0,32(sp)
        index.index(self)
800461bc:	0c0119aa 	jal	800466a8 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$5index17h36cebc17e135b426E>
800461c0:	00000000 	nop
    }
800461c4:	8fbf0024 	lw	ra,36(sp)
800461c8:	27bd0028 	addiu	sp,sp,40
800461cc:	03e00008 	jr	ra
800461d0:	00000000 	nop

800461d4 <_ZN4core3str6traits66_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$str$GT$5index17hba11477e2e0499e2E>:
    fn index(&self, index: I) -> &I::Output {
800461d4:	27bdffd8 	addiu	sp,sp,-40
800461d8:	afbf0024 	sw	ra,36(sp)
800461dc:	afa60014 	sw	a2,20(sp)
800461e0:	00a03025 	move	a2,a1
800461e4:	00802825 	move	a1,a0
800461e8:	8fa40014 	lw	a0,20(sp)
800461ec:	afa50018 	sw	a1,24(sp)
800461f0:	afa6001c 	sw	a2,28(sp)
800461f4:	afa40020 	sw	a0,32(sp)
        index.index(self)
800461f8:	0c011946 	jal	80046518 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$5index17h396b8ff5c19b629dE>
800461fc:	00000000 	nop
    }
80046200:	8fbf0024 	lw	ra,36(sp)
80046204:	27bd0028 	addiu	sp,sp,40
80046208:	03e00008 	jr	ra
8004620c:	00000000 	nop

80046210 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E>:
#[stable(feature = "str_checked_slicing", since = "1.20.0")]
#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
unsafe impl SliceIndex<str> for ops::Range<usize> {
    type Output = str;
    #[inline]
    fn get(self, slice: &str) -> Option<&Self::Output> {
80046210:	27bdffc0 	addiu	sp,sp,-64
80046214:	afbf003c 	sw	ra,60(sp)
80046218:	afa70014 	sw	a3,20(sp)
8004621c:	afa60018 	sw	a2,24(sp)
80046220:	afa5001c 	sw	a1,28(sp)
80046224:	afa40020 	sw	a0,32(sp)
80046228:	afa4002c 	sw	a0,44(sp)
8004622c:	afa50030 	sw	a1,48(sp)
80046230:	afa60034 	sw	a2,52(sp)
80046234:	afa70038 	sw	a3,56(sp)
        if self.start <= self.end
80046238:	00a4082b 	sltu	at,a1,a0
8004623c:	10200006 	beqz	at,80046258 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0x48>
80046240:	00000000 	nop
80046244:	08011893 	j	8004624c <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0x3c>
80046248:	00000000 	nop
            // SAFETY: just checked that `start` and `end` are on a char boundary,
            // and we are passing in a safe reference, so the return value will also be one.
            // We also checked char boundaries, so this is valid UTF-8.
            Some(unsafe { &*self.get_unchecked(slice) })
        } else {
            None
8004624c:	afa00024 	sw	zero,36(sp)
        if self.start <= self.end
80046250:	080118b2 	j	800462c8 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0xb8>
80046254:	00000000 	nop
            && slice.is_char_boundary(self.start)
80046258:	8fa60020 	lw	a2,32(sp)
8004625c:	8fa50014 	lw	a1,20(sp)
80046260:	8fa40018 	lw	a0,24(sp)
80046264:	0c011c0e 	jal	80047038 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E>
80046268:	00000000 	nop
8004626c:	1040fff7 	beqz	v0,8004624c <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0x3c>
80046270:	00000000 	nop
80046274:	0801189f 	j	8004627c <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0x6c>
80046278:	00000000 	nop
            && slice.is_char_boundary(self.end)
8004627c:	8fa6001c 	lw	a2,28(sp)
80046280:	8fa50014 	lw	a1,20(sp)
80046284:	8fa40018 	lw	a0,24(sp)
80046288:	0c011c0e 	jal	80047038 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E>
8004628c:	00000000 	nop
80046290:	1040ffee 	beqz	v0,8004624c <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0x3c>
80046294:	00000000 	nop
80046298:	080118a8 	j	800462a0 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0x90>
8004629c:	00000000 	nop
            Some(unsafe { &*self.get_unchecked(slice) })
800462a0:	8fa70014 	lw	a3,20(sp)
800462a4:	8fa60018 	lw	a2,24(sp)
800462a8:	8fa5001c 	lw	a1,28(sp)
800462ac:	8fa40020 	lw	a0,32(sp)
800462b0:	0c0118b8 	jal	800462e0 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked17hffa5e1fde556c725E>
800462b4:	00000000 	nop
800462b8:	afa20024 	sw	v0,36(sp)
800462bc:	afa30028 	sw	v1,40(sp)
        if self.start <= self.end
800462c0:	080118b2 	j	800462c8 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0xb8>
800462c4:	00000000 	nop
        }
    }
800462c8:	8fa20024 	lw	v0,36(sp)
800462cc:	8fa30028 	lw	v1,40(sp)
800462d0:	8fbf003c 	lw	ra,60(sp)
800462d4:	27bd0040 	addiu	sp,sp,64
800462d8:	03e00008 	jr	ra
800462dc:	00000000 	nop

800462e0 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked17hffa5e1fde556c725E>:
        } else {
            None
        }
    }
    #[inline]
    unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
800462e0:	27bdffb0 	addiu	sp,sp,-80
800462e4:	afbf004c 	sw	ra,76(sp)
800462e8:	afa70018 	sw	a3,24(sp)
800462ec:	afa6001c 	sw	a2,28(sp)
800462f0:	afa50020 	sw	a1,32(sp)
800462f4:	afa40024 	sw	a0,36(sp)
800462f8:	afa40028 	sw	a0,40(sp)
800462fc:	afa5002c 	sw	a1,44(sp)
80046300:	afa60030 	sw	a2,48(sp)
80046304:	afa70034 	sw	a3,52(sp)
        let slice = slice as *const [u8];
80046308:	afa60038 	sw	a2,56(sp)
8004630c:	afa7003c 	sw	a3,60(sp)

        assert_unsafe_precondition!(
80046310:	080118c6 	j	80046318 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked17hffa5e1fde556c725E+0x38>
80046314:	00000000 	nop
            check_library_ub,
            "str::get_unchecked requires that the range is within the string slice",
            (
                start: usize = self.start,
                end: usize = self.end,
                len: usize = slice.len()
80046318:	8fa50018 	lw	a1,24(sp)
8004631c:	8fa4001c 	lw	a0,28(sp)
80046320:	0c00ef92 	jal	8003be48 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hb4a60cfd4b05d1f1E>
80046324:	00000000 	nop
80046328:	8fa40024 	lw	a0,36(sp)
8004632c:	8fa50020 	lw	a1,32(sp)
80046330:	00403025 	move	a2,v0
        assert_unsafe_precondition!(
80046334:	0c012b9c 	jal	8004ae70 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked18precondition_check17h0c93f18c8b2c7519E>
80046338:	00000000 	nop
8004633c:	080118d1 	j	80046344 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked17hffa5e1fde556c725E+0x64>
80046340:	00000000 	nop
        );

        // SAFETY: the caller guarantees that `self` is in bounds of `slice`
        // which satisfies all the conditions for `add`.
        unsafe {
            let new_len = unchecked_sub(self.end, self.start);
80046344:	8fa20024 	lw	v0,36(sp)
80046348:	8fa50018 	lw	a1,24(sp)
8004634c:	8fa4001c 	lw	a0,28(sp)
80046350:	8fa10020 	lw	at,32(sp)
80046354:	00220823 	subu	at,at,v0
80046358:	afa10014 	sw	at,20(sp)
8004635c:	afa10040 	sw	at,64(sp)
            ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), new_len) as *const str
80046360:	0c00efc2 	jal	8003bf08 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17hdacca62b30e596aaE>
80046364:	00000000 	nop
80046368:	8fa10024 	lw	at,36(sp)
8004636c:	8fa50014 	lw	a1,20(sp)
80046370:	afa20044 	sw	v0,68(sp)
80046374:	afa10048 	sw	at,72(sp)
80046378:	00412021 	addu	a0,v0,at
8004637c:	0c00efc9 	jal	8003bf24 <_ZN4core3ptr20slice_from_raw_parts17h0ab563afab92ed6fE>
80046380:	00000000 	nop
        }
    }
80046384:	8fbf004c 	lw	ra,76(sp)
80046388:	27bd0050 	addiu	sp,sp,80
8004638c:	03e00008 	jr	ra
80046390:	00000000 	nop

80046394 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$5index17h9e673dd3fdef6a34E>:
            let new_len = unchecked_sub(self.end, self.start);
            ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), new_len) as *mut str
        }
    }
    #[inline]
    fn index(self, slice: &str) -> &Self::Output {
80046394:	27bdffa0 	addiu	sp,sp,-96
80046398:	afbf005c 	sw	ra,92(sp)
8004639c:	afa70018 	sw	a3,24(sp)
800463a0:	afa6001c 	sw	a2,28(sp)
800463a4:	8fa10070 	lw	at,112(sp)
800463a8:	afa10020 	sw	at,32(sp)
800463ac:	afa4003c 	sw	a0,60(sp)
800463b0:	afa50040 	sw	a1,64(sp)
800463b4:	afa60044 	sw	a2,68(sp)
800463b8:	afa70048 	sw	a3,72(sp)
        let (start, end) = (self.start, self.end);
800463bc:	afa4002c 	sw	a0,44(sp)
800463c0:	afa50030 	sw	a1,48(sp)
800463c4:	8fa1002c 	lw	at,44(sp)
800463c8:	afa10024 	sw	at,36(sp)
800463cc:	afa1004c 	sw	at,76(sp)
800463d0:	8fa10030 	lw	at,48(sp)
800463d4:	afa10028 	sw	at,40(sp)
800463d8:	afa10050 	sw	at,80(sp)
        match self.get(slice) {
800463dc:	0c011884 	jal	80046210 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E>
800463e0:	00000000 	nop
800463e4:	afa20034 	sw	v0,52(sp)
800463e8:	afa30038 	sw	v1,56(sp)
800463ec:	8fa10034 	lw	at,52(sp)
800463f0:	1420000c 	bnez	at,80046424 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$5index17h9e673dd3fdef6a34E+0x90>
800463f4:	00000000 	nop
800463f8:	08011900 	j	80046400 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$5index17h9e673dd3fdef6a34E+0x6c>
800463fc:	00000000 	nop
            Some(s) => s,
            None => super::slice_error_fail(slice, start, end),
80046400:	8fa70028 	lw	a3,40(sp)
80046404:	8fa60024 	lw	a2,36(sp)
80046408:	8fa50018 	lw	a1,24(sp)
8004640c:	8fa4001c 	lw	a0,28(sp)
80046410:	8fa10020 	lw	at,32(sp)
80046414:	03a01025 	move	v0,sp
80046418:	ac410010 	sw	at,16(v0)
8004641c:	0c011a8a 	jal	80046a28 <_ZN4core3str16slice_error_fail17h3a85009d830cf91cE>
80046420:	00000000 	nop
            Some(s) => s,
80046424:	8fa20034 	lw	v0,52(sp)
80046428:	8fa30038 	lw	v1,56(sp)
8004642c:	afa20054 	sw	v0,84(sp)
80046430:	afa30058 	sw	v1,88(sp)
        }
    }
80046434:	8fbf005c 	lw	ra,92(sp)
80046438:	27bd0060 	addiu	sp,sp,96
8004643c:	03e00008 	jr	ra
80046440:	00000000 	nop

80046444 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$3get17h4c2a4b91bf57c6dcE>:
#[stable(feature = "str_checked_slicing", since = "1.20.0")]
#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
unsafe impl SliceIndex<str> for ops::RangeTo<usize> {
    type Output = str;
    #[inline]
    fn get(self, slice: &str) -> Option<&Self::Output> {
80046444:	27bdffc8 	addiu	sp,sp,-56
80046448:	afbf0034 	sw	ra,52(sp)
8004644c:	afa60014 	sw	a2,20(sp)
80046450:	00a00825 	move	at,a1
80046454:	8fa50014 	lw	a1,20(sp)
80046458:	afa10018 	sw	at,24(sp)
8004645c:	00803025 	move	a2,a0
80046460:	8fa40018 	lw	a0,24(sp)
80046464:	afa6001c 	sw	a2,28(sp)
80046468:	afa60028 	sw	a2,40(sp)
8004646c:	afa4002c 	sw	a0,44(sp)
80046470:	afa50030 	sw	a1,48(sp)
        if slice.is_char_boundary(self.end) {
80046474:	0c011c0e 	jal	80047038 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E>
80046478:	00000000 	nop
8004647c:	14400006 	bnez	v0,80046498 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$3get17h4c2a4b91bf57c6dcE+0x54>
80046480:	00000000 	nop
80046484:	08011923 	j	8004648c <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$3get17h4c2a4b91bf57c6dcE+0x48>
80046488:	00000000 	nop
            // SAFETY: just checked that `end` is on a char boundary,
            // and we are passing in a safe reference, so the return value will also be one.
            Some(unsafe { &*self.get_unchecked(slice) })
        } else {
            None
8004648c:	afa00020 	sw	zero,32(sp)
        if slice.is_char_boundary(self.end) {
80046490:	0801192f 	j	800464bc <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$3get17h4c2a4b91bf57c6dcE+0x78>
80046494:	00000000 	nop
            Some(unsafe { &*self.get_unchecked(slice) })
80046498:	8fa60014 	lw	a2,20(sp)
8004649c:	8fa50018 	lw	a1,24(sp)
800464a0:	8fa4001c 	lw	a0,28(sp)
800464a4:	0c011935 	jal	800464d4 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$13get_unchecked17h14add8345fc880e4E>
800464a8:	00000000 	nop
800464ac:	afa20020 	sw	v0,32(sp)
800464b0:	afa30024 	sw	v1,36(sp)
        if slice.is_char_boundary(self.end) {
800464b4:	0801192f 	j	800464bc <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$3get17h4c2a4b91bf57c6dcE+0x78>
800464b8:	00000000 	nop
        }
    }
800464bc:	8fa20020 	lw	v0,32(sp)
800464c0:	8fa30024 	lw	v1,36(sp)
800464c4:	8fbf0034 	lw	ra,52(sp)
800464c8:	27bd0038 	addiu	sp,sp,56
800464cc:	03e00008 	jr	ra
800464d0:	00000000 	nop

800464d4 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$13get_unchecked17h14add8345fc880e4E>:
        } else {
            None
        }
    }
    #[inline]
    unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
800464d4:	27bdffd8 	addiu	sp,sp,-40
800464d8:	afbf0024 	sw	ra,36(sp)
800464dc:	00c03825 	move	a3,a2
800464e0:	00a03025 	move	a2,a1
800464e4:	afa40018 	sw	a0,24(sp)
800464e8:	afa6001c 	sw	a2,28(sp)
800464ec:	afa70020 	sw	a3,32(sp)
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked`.
        unsafe { (0..self.end).get_unchecked(slice) }
800464f0:	afa00010 	sw	zero,16(sp)
800464f4:	afa40014 	sw	a0,20(sp)
800464f8:	8fa40010 	lw	a0,16(sp)
800464fc:	8fa50014 	lw	a1,20(sp)
80046500:	0c0118b8 	jal	800462e0 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked17hffa5e1fde556c725E>
80046504:	00000000 	nop
    }
80046508:	8fbf0024 	lw	ra,36(sp)
8004650c:	27bd0028 	addiu	sp,sp,40
80046510:	03e00008 	jr	ra
80046514:	00000000 	nop

80046518 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$5index17h396b8ff5c19b629dE>:
    unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
        unsafe { (0..self.end).get_unchecked_mut(slice) }
    }
    #[inline]
    fn index(self, slice: &str) -> &Self::Output {
80046518:	27bdffb0 	addiu	sp,sp,-80
8004651c:	afbf004c 	sw	ra,76(sp)
80046520:	afa7001c 	sw	a3,28(sp)
80046524:	afa60020 	sw	a2,32(sp)
80046528:	afa50024 	sw	a1,36(sp)
8004652c:	afa40028 	sw	a0,40(sp)
80046530:	afa40034 	sw	a0,52(sp)
80046534:	afa50038 	sw	a1,56(sp)
80046538:	afa6003c 	sw	a2,60(sp)
        let end = self.end;
8004653c:	afa40040 	sw	a0,64(sp)
        match self.get(slice) {
80046540:	0c011911 	jal	80046444 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$3get17h4c2a4b91bf57c6dcE>
80046544:	00000000 	nop
80046548:	afa2002c 	sw	v0,44(sp)
8004654c:	afa30030 	sw	v1,48(sp)
80046550:	8fa1002c 	lw	at,44(sp)
80046554:	1420000c 	bnez	at,80046588 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$5index17h396b8ff5c19b629dE+0x70>
80046558:	00000000 	nop
8004655c:	08011959 	j	80046564 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$5index17h396b8ff5c19b629dE+0x4c>
80046560:	00000000 	nop
            Some(s) => s,
            None => super::slice_error_fail(slice, 0, end),
80046564:	8fa70028 	lw	a3,40(sp)
80046568:	8fa50020 	lw	a1,32(sp)
8004656c:	8fa40024 	lw	a0,36(sp)
80046570:	8fa1001c 	lw	at,28(sp)
80046574:	03a01025 	move	v0,sp
80046578:	ac410010 	sw	at,16(v0)
8004657c:	24060000 	li	a2,0
80046580:	0c011a8a 	jal	80046a28 <_ZN4core3str16slice_error_fail17h3a85009d830cf91cE>
80046584:	00000000 	nop
            Some(s) => s,
80046588:	8fa2002c 	lw	v0,44(sp)
8004658c:	8fa30030 	lw	v1,48(sp)
80046590:	afa20044 	sw	v0,68(sp)
80046594:	afa30048 	sw	v1,72(sp)
        }
    }
80046598:	8fbf004c 	lw	ra,76(sp)
8004659c:	27bd0050 	addiu	sp,sp,80
800465a0:	03e00008 	jr	ra
800465a4:	00000000 	nop

800465a8 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$3get17hdb36dc80780e5e82E>:
#[stable(feature = "str_checked_slicing", since = "1.20.0")]
#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
unsafe impl SliceIndex<str> for ops::RangeFrom<usize> {
    type Output = str;
    #[inline]
    fn get(self, slice: &str) -> Option<&Self::Output> {
800465a8:	27bdffc8 	addiu	sp,sp,-56
800465ac:	afbf0034 	sw	ra,52(sp)
800465b0:	afa60014 	sw	a2,20(sp)
800465b4:	00a00825 	move	at,a1
800465b8:	8fa50014 	lw	a1,20(sp)
800465bc:	afa10018 	sw	at,24(sp)
800465c0:	00803025 	move	a2,a0
800465c4:	8fa40018 	lw	a0,24(sp)
800465c8:	afa6001c 	sw	a2,28(sp)
800465cc:	afa60028 	sw	a2,40(sp)
800465d0:	afa4002c 	sw	a0,44(sp)
800465d4:	afa50030 	sw	a1,48(sp)
        if slice.is_char_boundary(self.start) {
800465d8:	0c011c0e 	jal	80047038 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E>
800465dc:	00000000 	nop
800465e0:	14400006 	bnez	v0,800465fc <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$3get17hdb36dc80780e5e82E+0x54>
800465e4:	00000000 	nop
800465e8:	0801197c 	j	800465f0 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$3get17hdb36dc80780e5e82E+0x48>
800465ec:	00000000 	nop
            // SAFETY: just checked that `start` is on a char boundary,
            // and we are passing in a safe reference, so the return value will also be one.
            Some(unsafe { &*self.get_unchecked(slice) })
        } else {
            None
800465f0:	afa00020 	sw	zero,32(sp)
        if slice.is_char_boundary(self.start) {
800465f4:	08011988 	j	80046620 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$3get17hdb36dc80780e5e82E+0x78>
800465f8:	00000000 	nop
            Some(unsafe { &*self.get_unchecked(slice) })
800465fc:	8fa60014 	lw	a2,20(sp)
80046600:	8fa50018 	lw	a1,24(sp)
80046604:	8fa4001c 	lw	a0,28(sp)
80046608:	0c01198e 	jal	80046638 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$13get_unchecked17h1bac03d5b0fd8d75E>
8004660c:	00000000 	nop
80046610:	afa20020 	sw	v0,32(sp)
80046614:	afa30024 	sw	v1,36(sp)
        if slice.is_char_boundary(self.start) {
80046618:	08011988 	j	80046620 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$3get17hdb36dc80780e5e82E+0x78>
8004661c:	00000000 	nop
        }
    }
80046620:	8fa20020 	lw	v0,32(sp)
80046624:	8fa30024 	lw	v1,36(sp)
80046628:	8fbf0034 	lw	ra,52(sp)
8004662c:	27bd0038 	addiu	sp,sp,56
80046630:	03e00008 	jr	ra
80046634:	00000000 	nop

80046638 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$13get_unchecked17h1bac03d5b0fd8d75E>:
        } else {
            None
        }
    }
    #[inline]
    unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
80046638:	27bdffc8 	addiu	sp,sp,-56
8004663c:	afbf0034 	sw	ra,52(sp)
80046640:	afa60018 	sw	a2,24(sp)
80046644:	00a00825 	move	at,a1
80046648:	8fa50018 	lw	a1,24(sp)
8004664c:	afa10014 	sw	at,20(sp)
80046650:	00800825 	move	at,a0
80046654:	8fa40014 	lw	a0,20(sp)
80046658:	afa10010 	sw	at,16(sp)
8004665c:	afa10024 	sw	at,36(sp)
80046660:	afa40028 	sw	a0,40(sp)
80046664:	afa5002c 	sw	a1,44(sp)
        let len = (slice as *const [u8]).len();
80046668:	0c00ef92 	jal	8003be48 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hb4a60cfd4b05d1f1E>
8004666c:	00000000 	nop
80046670:	8fa40010 	lw	a0,16(sp)
80046674:	8fa60014 	lw	a2,20(sp)
80046678:	8fa70018 	lw	a3,24(sp)
8004667c:	afa20030 	sw	v0,48(sp)
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked`.
        unsafe { (self.start..len).get_unchecked(slice) }
80046680:	afa4001c 	sw	a0,28(sp)
80046684:	afa20020 	sw	v0,32(sp)
80046688:	8fa4001c 	lw	a0,28(sp)
8004668c:	8fa50020 	lw	a1,32(sp)
80046690:	0c0118b8 	jal	800462e0 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked17hffa5e1fde556c725E>
80046694:	00000000 	nop
    }
80046698:	8fbf0034 	lw	ra,52(sp)
8004669c:	27bd0038 	addiu	sp,sp,56
800466a0:	03e00008 	jr	ra
800466a4:	00000000 	nop

800466a8 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$5index17h36cebc17e135b426E>:
        let len = (slice as *mut [u8]).len();
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
        unsafe { (self.start..len).get_unchecked_mut(slice) }
    }
    #[inline]
    fn index(self, slice: &str) -> &Self::Output {
800466a8:	27bdffa0 	addiu	sp,sp,-96
800466ac:	afbf005c 	sw	ra,92(sp)
800466b0:	afa70018 	sw	a3,24(sp)
800466b4:	afa60024 	sw	a2,36(sp)
800466b8:	00a00825 	move	at,a1
800466bc:	8fa50024 	lw	a1,36(sp)
800466c0:	afa10020 	sw	at,32(sp)
800466c4:	00800825 	move	at,a0
800466c8:	8fa40020 	lw	a0,32(sp)
800466cc:	afa1001c 	sw	at,28(sp)
800466d0:	afa10040 	sw	at,64(sp)
800466d4:	afa40044 	sw	a0,68(sp)
800466d8:	afa50048 	sw	a1,72(sp)
        let (start, end) = (self.start, slice.len());
800466dc:	0c011bfa 	jal	80046fe8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
800466e0:	00000000 	nop
800466e4:	8fa4001c 	lw	a0,28(sp)
800466e8:	8fa50020 	lw	a1,32(sp)
800466ec:	8fa60024 	lw	a2,36(sp)
800466f0:	afa40030 	sw	a0,48(sp)
800466f4:	afa20034 	sw	v0,52(sp)
800466f8:	8fa10030 	lw	at,48(sp)
800466fc:	afa10028 	sw	at,40(sp)
80046700:	afa1004c 	sw	at,76(sp)
80046704:	8fa10034 	lw	at,52(sp)
80046708:	afa1002c 	sw	at,44(sp)
8004670c:	afa10050 	sw	at,80(sp)
        match self.get(slice) {
80046710:	0c01196a 	jal	800465a8 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$3get17hdb36dc80780e5e82E>
80046714:	00000000 	nop
80046718:	afa20038 	sw	v0,56(sp)
8004671c:	afa3003c 	sw	v1,60(sp)
80046720:	8fa10038 	lw	at,56(sp)
80046724:	1420000c 	bnez	at,80046758 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$5index17h36cebc17e135b426E+0xb0>
80046728:	00000000 	nop
8004672c:	080119cd 	j	80046734 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$5index17h36cebc17e135b426E+0x8c>
80046730:	00000000 	nop
            Some(s) => s,
            None => super::slice_error_fail(slice, start, end),
80046734:	8fa7002c 	lw	a3,44(sp)
80046738:	8fa60028 	lw	a2,40(sp)
8004673c:	8fa50024 	lw	a1,36(sp)
80046740:	8fa40020 	lw	a0,32(sp)
80046744:	8fa10018 	lw	at,24(sp)
80046748:	03a01025 	move	v0,sp
8004674c:	ac410010 	sw	at,16(v0)
80046750:	0c011a8a 	jal	80046a28 <_ZN4core3str16slice_error_fail17h3a85009d830cf91cE>
80046754:	00000000 	nop
            Some(s) => s,
80046758:	8fa20038 	lw	v0,56(sp)
8004675c:	8fa3003c 	lw	v1,60(sp)
80046760:	afa20054 	sw	v0,84(sp)
80046764:	afa30058 	sw	v1,88(sp)
        }
    }
80046768:	8fbf005c 	lw	ra,92(sp)
8004676c:	27bd0060 	addiu	sp,sp,96
80046770:	03e00008 	jr	ra
80046774:	00000000 	nop

80046778 <_ZN4core3str11validations15utf8_first_byte17h4be84c73ff1050a0E>:

/// Returns the initial codepoint accumulator for the first byte.
/// The first byte is special, only want bottom 5 bits for width 2, 4 bits
/// for width 3, and 3 bits for width 4.
#[inline]
const fn utf8_first_byte(byte: u8, width: u32) -> u32 {
80046778:	27bdffe0 	addiu	sp,sp,-32
8004677c:	afa50010 	sw	a1,16(sp)
80046780:	00800825 	move	at,a0
80046784:	afa10014 	sw	at,20(sp)
80046788:	a3a4001b 	sb	a0,27(sp)
8004678c:	afa5001c 	sw	a1,28(sp)
    (byte & (0x7F >> width)) as u32
80046790:	2ca10008 	sltiu	at,a1,8
80046794:	1020000c 	beqz	at,800467c8 <_ZN4core3str11validations15utf8_first_byte17h4be84c73ff1050a0E+0x50>
80046798:	00000000 	nop
8004679c:	080119e9 	j	800467a4 <_ZN4core3str11validations15utf8_first_byte17h4be84c73ff1050a0E+0x2c>
800467a0:	00000000 	nop
800467a4:	8fa10014 	lw	at,20(sp)
800467a8:	8fa20010 	lw	v0,16(sp)
800467ac:	30430007 	andi	v1,v0,0x7
800467b0:	2402007f 	li	v0,127
800467b4:	00621006 	srlv	v0,v0,v1
800467b8:	00221024 	and	v0,at,v0
800467bc:	27bd0020 	addiu	sp,sp,32
}
800467c0:	03e00008 	jr	ra
800467c4:	00000000 	nop
    (byte & (0x7F >> width)) as u32
800467c8:	3c01810a 	lui	at,0x810a
800467cc:	2424c3f4 	addiu	a0,at,-15372
800467d0:	0c012439 	jal	800490e4 <_ZN4core9panicking11panic_const24panic_const_shr_overflow17h51109cf1c6739500E>
800467d4:	00000000 	nop

800467d8 <_ZN4core3str11validations18utf8_acc_cont_byte17hff4f17aab0fe43c8E>:

/// Returns the value of `ch` updated with continuation byte `byte`.
#[inline]
const fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 {
800467d8:	27bdfff8 	addiu	sp,sp,-8
800467dc:	afa40000 	sw	a0,0(sp)
800467e0:	a3a50007 	sb	a1,7(sp)
    (ch << 6) | (byte & CONT_MASK) as u32
800467e4:	00040980 	sll	at,a0,0x6
800467e8:	30a2003f 	andi	v0,a1,0x3f
800467ec:	00221025 	or	v0,at,v0
800467f0:	27bd0008 	addiu	sp,sp,8
}
800467f4:	03e00008 	jr	ra
800467f8:	00000000 	nop

800467fc <_ZN4core3str11validations17utf8_is_cont_byte17hfd9fecd852438cdeE>:

/// Checks whether the byte is a UTF-8 continuation byte (i.e., starts with the
/// bits `10`).
#[inline]
pub(super) const fn utf8_is_cont_byte(byte: u8) -> bool {
800467fc:	27bdfff8 	addiu	sp,sp,-8
80046800:	7c040c20 	seb	at,a0
80046804:	a3a40007 	sb	a0,7(sp)
    (byte as i8) < -64
80046808:	2822ffc0 	slti	v0,at,-64
8004680c:	27bd0008 	addiu	sp,sp,8
}
80046810:	03e00008 	jr	ra
80046814:	00000000 	nop

80046818 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E>:
/// # Safety
///
/// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
#[unstable(feature = "str_internals", issue = "none")]
#[inline]
pub unsafe fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {
80046818:	27bdff98 	addiu	sp,sp,-104
8004681c:	afbf0064 	sw	ra,100(sp)
80046820:	afa40030 	sw	a0,48(sp)
    // Decode UTF-8
    let x = *bytes.next()?;
80046824:	afa40048 	sw	a0,72(sp)
80046828:	0c0128d1 	jal	8004a344 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE>
8004682c:	00000000 	nop
80046830:	00402025 	move	a0,v0
80046834:	0c00fac5 	jal	8003eb14 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h448b262f87af77b6E>
80046838:	00000000 	nop
8004683c:	afa20040 	sw	v0,64(sp)
80046840:	8fa10040 	lw	at,64(sp)
80046844:	1020000c 	beqz	at,80046878 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x60>
80046848:	00000000 	nop
8004684c:	08011a15 	j	80046854 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x3c>
80046850:	00000000 	nop
80046854:	8fa10040 	lw	at,64(sp)
80046858:	afa1004c 	sw	at,76(sp)
8004685c:	80210000 	lb	at,0(at)
80046860:	afa1002c 	sw	at,44(sp)
80046864:	a3a10053 	sb	at,83(sp)
    if x < 128 {
80046868:	04210029 	bgez	at,80046910 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0xf8>
8004686c:	00000000 	nop
80046870:	08011a24 	j	80046890 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x78>
80046874:	00000000 	nop
    let x = *bytes.next()?;
80046878:	0c00fb1a 	jal	8003ec68 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h499111ea8ee19989E>
8004687c:	00000000 	nop
80046880:	afa20038 	sw	v0,56(sp)
80046884:	afa3003c 	sw	v1,60(sp)
80046888:	08011a84 	j	80046a10 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x1f8>
8004688c:	00000000 	nop
    }

    // Multibyte case follows
    // Decode from a byte combination out of: [[[x y] z] w]
    // NOTE: Performance is sensitive to the exact formulation here
    let init = utf8_first_byte(x, 2);
80046890:	8fa4002c 	lw	a0,44(sp)
80046894:	24050002 	li	a1,2
80046898:	0c0119de 	jal	80046778 <_ZN4core3str11validations15utf8_first_byte17h4be84c73ff1050a0E>
8004689c:	00000000 	nop
800468a0:	8fa1002c 	lw	at,44(sp)
800468a4:	8fa40030 	lw	a0,48(sp)
800468a8:	afa20020 	sw	v0,32(sp)
800468ac:	302100ff 	andi	at,at,0xff
800468b0:	afa10028 	sw	at,40(sp)
800468b4:	00400825 	move	at,v0
800468b8:	afa1001c 	sw	at,28(sp)
800468bc:	afa20054 	sw	v0,84(sp)
    // SAFETY: `bytes` produces an UTF-8-like string,
    // so the iterator must produce a value here.
    let y = unsafe { *bytes.next().unwrap_unchecked() };
800468c0:	0c0128d1 	jal	8004a344 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE>
800468c4:	00000000 	nop
800468c8:	00402025 	move	a0,v0
800468cc:	3c01810a 	lui	at,0x810a
800468d0:	2425c404 	addiu	a1,at,-15356
800468d4:	0c00f9e1 	jal	8003e784 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hfe6e6fd17f6453c3E>
800468d8:	00000000 	nop
800468dc:	8fa40020 	lw	a0,32(sp)
800468e0:	90450000 	lbu	a1,0(v0)
800468e4:	afa50024 	sw	a1,36(sp)
800468e8:	a3a5005a 	sb	a1,90(sp)
    let mut ch = utf8_acc_cont_byte(init, y);
800468ec:	0c0119f6 	jal	800467d8 <_ZN4core3str11validations18utf8_acc_cont_byte17hff4f17aab0fe43c8E>
800468f0:	00000000 	nop
800468f4:	8fa10028 	lw	at,40(sp)
800468f8:	afa20044 	sw	v0,68(sp)
    if x >= 0xE0 {
800468fc:	2c2100e0 	sltiu	at,at,224
80046900:	10200010 	beqz	at,80046944 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x12c>
80046904:	00000000 	nop
80046908:	08011a4b 	j	8004692c <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x114>
8004690c:	00000000 	nop
        return Some(x as u32);
80046910:	8fa1002c 	lw	at,44(sp)
80046914:	302100ff 	andi	at,at,0xff
80046918:	afa1003c 	sw	at,60(sp)
8004691c:	24010001 	li	at,1
80046920:	afa10038 	sw	at,56(sp)
80046924:	08011a84 	j	80046a10 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x1f8>
80046928:	00000000 	nop
            let w = unsafe { *bytes.next().unwrap_unchecked() };
            ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
        }
    }

    Some(ch)
8004692c:	8fa10044 	lw	at,68(sp)
80046930:	afa1003c 	sw	at,60(sp)
80046934:	24010001 	li	at,1
80046938:	afa10038 	sw	at,56(sp)
}
8004693c:	08011a84 	j	80046a10 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x1f8>
80046940:	00000000 	nop
        let z = unsafe { *bytes.next().unwrap_unchecked() };
80046944:	8fa40030 	lw	a0,48(sp)
80046948:	0c0128d1 	jal	8004a344 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE>
8004694c:	00000000 	nop
80046950:	00402025 	move	a0,v0
80046954:	3c01810a 	lui	at,0x810a
80046958:	2425c414 	addiu	a1,at,-15340
8004695c:	0c00f9e1 	jal	8003e784 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hfe6e6fd17f6453c3E>
80046960:	00000000 	nop
80046964:	8fa10024 	lw	at,36(sp)
80046968:	90450000 	lbu	a1,0(v0)
8004696c:	a3a5005b 	sb	a1,91(sp)
        let y_z = utf8_acc_cont_byte((y & CONT_MASK) as u32, z);
80046970:	3024003f 	andi	a0,at,0x3f
80046974:	0c0119f6 	jal	800467d8 <_ZN4core3str11validations18utf8_acc_cont_byte17hff4f17aab0fe43c8E>
80046978:	00000000 	nop
8004697c:	8fa1002c 	lw	at,44(sp)
80046980:	00401825 	move	v1,v0
80046984:	8fa2001c 	lw	v0,28(sp)
80046988:	00602025 	move	a0,v1
8004698c:	afa40018 	sw	a0,24(sp)
80046990:	afa3005c 	sw	v1,92(sp)
        ch = init << 12 | y_z;
80046994:	00021300 	sll	v0,v0,0xc
80046998:	00431025 	or	v0,v0,v1
8004699c:	afa20044 	sw	v0,68(sp)
        if x >= 0xF0 {
800469a0:	302100ff 	andi	at,at,0xff
800469a4:	2c2100f0 	sltiu	at,at,240
800469a8:	1420ffe0 	bnez	at,8004692c <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x114>
800469ac:	00000000 	nop
800469b0:	08011a6e 	j	800469b8 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x1a0>
800469b4:	00000000 	nop
            let w = unsafe { *bytes.next().unwrap_unchecked() };
800469b8:	8fa40030 	lw	a0,48(sp)
800469bc:	0c0128d1 	jal	8004a344 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE>
800469c0:	00000000 	nop
800469c4:	00402025 	move	a0,v0
800469c8:	3c01810a 	lui	at,0x810a
800469cc:	2425c424 	addiu	a1,at,-15324
800469d0:	0c00f9e1 	jal	8003e784 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hfe6e6fd17f6453c3E>
800469d4:	00000000 	nop
800469d8:	8fa1001c 	lw	at,28(sp)
800469dc:	8fa40018 	lw	a0,24(sp)
800469e0:	90450000 	lbu	a1,0(v0)
800469e4:	a3a50063 	sb	a1,99(sp)
            ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
800469e8:	30210007 	andi	at,at,0x7
800469ec:	00010c80 	sll	at,at,0x12
800469f0:	afa10014 	sw	at,20(sp)
800469f4:	0c0119f6 	jal	800467d8 <_ZN4core3str11validations18utf8_acc_cont_byte17hff4f17aab0fe43c8E>
800469f8:	00000000 	nop
800469fc:	8fa10014 	lw	at,20(sp)
80046a00:	00220825 	or	at,at,v0
80046a04:	afa10044 	sw	at,68(sp)
        if x >= 0xF0 {
80046a08:	08011a4b 	j	8004692c <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x114>
80046a0c:	00000000 	nop
}
80046a10:	8fa20038 	lw	v0,56(sp)
80046a14:	8fa3003c 	lw	v1,60(sp)
80046a18:	8fbf0064 	lw	ra,100(sp)
80046a1c:	27bd0068 	addiu	sp,sp,104
80046a20:	03e00008 	jr	ra
80046a24:	00000000 	nop

80046a28 <_ZN4core3str16slice_error_fail17h3a85009d830cf91cE>:
const fn slice_error_fail(s: &str, begin: usize, end: usize) -> ! {
80046a28:	27bdffc8 	addiu	sp,sp,-56
80046a2c:	8fa10048 	lw	at,72(sp)
80046a30:	afa40028 	sw	a0,40(sp)
80046a34:	afa5002c 	sw	a1,44(sp)
80046a38:	afa60030 	sw	a2,48(sp)
80046a3c:	afa70034 	sw	a3,52(sp)
    crate::intrinsics::const_eval_select((s, begin, end), slice_error_fail_ct, slice_error_fail_rt)
80046a40:	afa40018 	sw	a0,24(sp)
80046a44:	afa5001c 	sw	a1,28(sp)
80046a48:	afa60020 	sw	a2,32(sp)
80046a4c:	afa70024 	sw	a3,36(sp)
80046a50:	8fa40018 	lw	a0,24(sp)
80046a54:	8fa5001c 	lw	a1,28(sp)
80046a58:	8fa60020 	lw	a2,32(sp)
80046a5c:	8fa70024 	lw	a3,36(sp)
80046a60:	03a01025 	move	v0,sp
80046a64:	ac410010 	sw	at,16(v0)
80046a68:	0c011a9c 	jal	80046a70 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE>
80046a6c:	00000000 	nop

80046a70 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE>:
fn slice_error_fail_rt(s: &str, begin: usize, end: usize) -> ! {
80046a70:	27bdfdc8 	addiu	sp,sp,-568
80046a74:	afbf0234 	sw	ra,564(sp)
80046a78:	afa50040 	sw	a1,64(sp)
80046a7c:	afa4003c 	sw	a0,60(sp)
80046a80:	8fa10248 	lw	at,584(sp)
80046a84:	afa10038 	sw	at,56(sp)
80046a88:	afa60048 	sw	a2,72(sp)
80046a8c:	afa7004c 	sw	a3,76(sp)
80046a90:	afa4012c 	sw	a0,300(sp)
80046a94:	afa50130 	sw	a1,304(sp)
80046a98:	24060100 	li	a2,256
    let trunc_len = s.floor_char_boundary(MAX_DISPLAY_LENGTH);
80046a9c:	0c011c43 	jal	8004710c <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E>
80046aa0:	00000000 	nop
80046aa4:	8fa70038 	lw	a3,56(sp)
80046aa8:	8fa4003c 	lw	a0,60(sp)
80046aac:	8fa50040 	lw	a1,64(sp)
80046ab0:	afa20044 	sw	v0,68(sp)
80046ab4:	afa20134 	sw	v0,308(sp)
    let s_trunc = &s[..trunc_len];
80046ab8:	afa20058 	sw	v0,88(sp)
80046abc:	8fa60058 	lw	a2,88(sp)
80046ac0:	0c011875 	jal	800461d4 <_ZN4core3str6traits66_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$str$GT$5index17hba11477e2e0499e2E>
80046ac4:	00000000 	nop
80046ac8:	8fa4003c 	lw	a0,60(sp)
80046acc:	8fa50040 	lw	a1,64(sp)
80046ad0:	afa20050 	sw	v0,80(sp)
80046ad4:	afa30054 	sw	v1,84(sp)
    let ellipsis = if trunc_len < s.len() { "[...]" } else { "" };
80046ad8:	0c011bfa 	jal	80046fe8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
80046adc:	00000000 	nop
80046ae0:	00400825 	move	at,v0
80046ae4:	8fa20044 	lw	v0,68(sp)
80046ae8:	0041082b 	sltu	at,v0,at
80046aec:	14200009 	bnez	at,80046b14 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0xa4>
80046af0:	00000000 	nop
80046af4:	08011abf 	j	80046afc <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x8c>
80046af8:	00000000 	nop
80046afc:	3c01810a 	lui	at,0x810a
80046b00:	2421b0b8 	addiu	at,at,-20296
80046b04:	afa1005c 	sw	at,92(sp)
80046b08:	afa00060 	sw	zero,96(sp)
80046b0c:	08011acc 	j	80046b30 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0xc0>
80046b10:	00000000 	nop
80046b14:	3c01810a 	lui	at,0x810a
80046b18:	2421c434 	addiu	at,at,-15308
80046b1c:	afa1005c 	sw	at,92(sp)
80046b20:	24010005 	li	at,5
80046b24:	afa10060 	sw	at,96(sp)
80046b28:	08011acc 	j	80046b30 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0xc0>
80046b2c:	00000000 	nop
    if begin > s.len() || end > s.len() {
80046b30:	8fa50040 	lw	a1,64(sp)
80046b34:	8fa4003c 	lw	a0,60(sp)
80046b38:	8fa10048 	lw	at,72(sp)
80046b3c:	afa10034 	sw	at,52(sp)
80046b40:	0c011bfa 	jal	80046fe8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
80046b44:	00000000 	nop
80046b48:	8fa10034 	lw	at,52(sp)
80046b4c:	0041082b 	sltu	at,v0,at
80046b50:	1420000f 	bnez	at,80046b90 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x120>
80046b54:	00000000 	nop
80046b58:	08011ad8 	j	80046b60 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0xf0>
80046b5c:	00000000 	nop
80046b60:	8fa50040 	lw	a1,64(sp)
80046b64:	8fa4003c 	lw	a0,60(sp)
80046b68:	8fa1004c 	lw	at,76(sp)
80046b6c:	afa10030 	sw	at,48(sp)
80046b70:	0c011bfa 	jal	80046fe8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
80046b74:	00000000 	nop
80046b78:	8fa10030 	lw	at,48(sp)
80046b7c:	0041082b 	sltu	at,v0,at
80046b80:	1020000f 	beqz	at,80046bc0 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x150>
80046b84:	00000000 	nop
80046b88:	08011ae4 	j	80046b90 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x120>
80046b8c:	00000000 	nop
        let oob_index = if begin > s.len() { begin } else { end };
80046b90:	8fa50040 	lw	a1,64(sp)
80046b94:	8fa4003c 	lw	a0,60(sp)
80046b98:	8fa10048 	lw	at,72(sp)
80046b9c:	afa1002c 	sw	at,44(sp)
80046ba0:	0c011bfa 	jal	80046fe8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
80046ba4:	00000000 	nop
80046ba8:	8fa1002c 	lw	at,44(sp)
80046bac:	0041082b 	sltu	at,v0,at
80046bb0:	142000d9 	bnez	at,80046f18 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x4a8>
80046bb4:	00000000 	nop
80046bb8:	08011bc2 	j	80046f08 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x498>
80046bbc:	00000000 	nop
        begin <= end,
80046bc0:	8fa20048 	lw	v0,72(sp)
80046bc4:	8fa1004c 	lw	at,76(sp)
80046bc8:	0022082b 	sltu	at,at,v0
80046bcc:	1020003d 	beqz	at,80046cc4 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x254>
80046bd0:	00000000 	nop
80046bd4:	08011af7 	j	80046bdc <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x16c>
80046bd8:	00000000 	nop
80046bdc:	27a20048 	addiu	v0,sp,72
80046be0:	afa20180 	sw	v0,384(sp)
80046be4:	afa2018c 	sw	v0,396(sp)
80046be8:	3c018005 	lui	at,0x8005
80046bec:	2421a0f4 	addiu	at,at,-24332
80046bf0:	afa10190 	sw	at,400(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80046bf4:	afa20184 	sw	v0,388(sp)
80046bf8:	afa10188 	sw	at,392(sp)
    }
80046bfc:	8fa80184 	lw	t0,388(sp)
80046c00:	8fa70188 	lw	a3,392(sp)
80046c04:	27a2004c 	addiu	v0,sp,76
80046c08:	afa2016c 	sw	v0,364(sp)
80046c0c:	afa20178 	sw	v0,376(sp)
80046c10:	afa1017c 	sw	at,380(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80046c14:	afa20170 	sw	v0,368(sp)
80046c18:	afa10174 	sw	at,372(sp)
    }
80046c1c:	8fa60170 	lw	a2,368(sp)
80046c20:	8fa50174 	lw	a1,372(sp)
80046c24:	27a20050 	addiu	v0,sp,80
80046c28:	afa201f8 	sw	v0,504(sp)
80046c2c:	afa20204 	sw	v0,516(sp)
80046c30:	3c018005 	lui	at,0x8005
80046c34:	2421a1fc 	addiu	at,at,-24068
80046c38:	afa10208 	sw	at,520(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80046c3c:	afa201fc 	sw	v0,508(sp)
80046c40:	afa10200 	sw	at,512(sp)
    }
80046c44:	8fa401fc 	lw	a0,508(sp)
80046c48:	8fa30200 	lw	v1,512(sp)
80046c4c:	27a2005c 	addiu	v0,sp,92
80046c50:	afa201e4 	sw	v0,484(sp)
80046c54:	afa201f0 	sw	v0,496(sp)
80046c58:	afa101f4 	sw	at,500(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80046c5c:	afa201e8 	sw	v0,488(sp)
80046c60:	afa101ec 	sw	at,492(sp)
    }
80046c64:	8fa201e8 	lw	v0,488(sp)
80046c68:	8fa101ec 	lw	at,492(sp)
    assert!(
80046c6c:	afa800b0 	sw	t0,176(sp)
80046c70:	afa700b4 	sw	a3,180(sp)
80046c74:	afa600b8 	sw	a2,184(sp)
80046c78:	afa500bc 	sw	a1,188(sp)
80046c7c:	afa400c0 	sw	a0,192(sp)
80046c80:	afa300c4 	sw	v1,196(sp)
80046c84:	afa200c8 	sw	v0,200(sp)
80046c88:	afa100cc 	sw	at,204(sp)
80046c8c:	03a00825 	move	at,sp
80046c90:	24060004 	li	a2,4
80046c94:	ac260010 	sw	a2,16(at)
80046c98:	3c01810a 	lui	at,0x810a
80046c9c:	2425c448 	addiu	a1,at,-15288
80046ca0:	27a40098 	addiu	a0,sp,152
80046ca4:	afa40028 	sw	a0,40(sp)
80046ca8:	27a700b0 	addiu	a3,sp,176
80046cac:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
80046cb0:	00000000 	nop
80046cb4:	8fa40028 	lw	a0,40(sp)
80046cb8:	8fa50038 	lw	a1,56(sp)
80046cbc:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80046cc0:	00000000 	nop
    let index = if !s.is_char_boundary(begin) { begin } else { end };
80046cc4:	8fa50040 	lw	a1,64(sp)
80046cc8:	8fa4003c 	lw	a0,60(sp)
80046ccc:	8fa60048 	lw	a2,72(sp)
80046cd0:	0c011c0e 	jal	80047038 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E>
80046cd4:	00000000 	nop
80046cd8:	14400007 	bnez	v0,80046cf8 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x288>
80046cdc:	00000000 	nop
80046ce0:	08011b3a 	j	80046ce8 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x278>
80046ce4:	00000000 	nop
80046ce8:	8fa10048 	lw	at,72(sp)
80046cec:	afa100d0 	sw	at,208(sp)
80046cf0:	08011b42 	j	80046d08 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x298>
80046cf4:	00000000 	nop
80046cf8:	8fa1004c 	lw	at,76(sp)
80046cfc:	afa100d0 	sw	at,208(sp)
80046d00:	08011b42 	j	80046d08 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x298>
80046d04:	00000000 	nop
    let char_start = s.floor_char_boundary(index);
80046d08:	8fa50040 	lw	a1,64(sp)
80046d0c:	8fa4003c 	lw	a0,60(sp)
80046d10:	8fa600d0 	lw	a2,208(sp)
80046d14:	0c011c43 	jal	8004710c <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E>
80046d18:	00000000 	nop
80046d1c:	8fa4003c 	lw	a0,60(sp)
80046d20:	8fa50040 	lw	a1,64(sp)
80046d24:	8fa70038 	lw	a3,56(sp)
80046d28:	00400825 	move	at,v0
80046d2c:	afa10024 	sw	at,36(sp)
80046d30:	afa20138 	sw	v0,312(sp)
    let ch = s[char_start..].chars().next().unwrap();
80046d34:	afa200e0 	sw	v0,224(sp)
80046d38:	8fa600e0 	lw	a2,224(sp)
80046d3c:	0c011866 	jal	80046198 <_ZN4core3str6traits66_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$str$GT$5index17h530a1160dbfa1a41E>
80046d40:	00000000 	nop
80046d44:	00402025 	move	a0,v0
80046d48:	00602825 	move	a1,v1
80046d4c:	0c011cb8 	jal	800472e0 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h9ac6a59f518bf3d7E>
80046d50:	00000000 	nop
80046d54:	afa200d8 	sw	v0,216(sp)
80046d58:	afa300dc 	sw	v1,220(sp)
80046d5c:	27a400d8 	addiu	a0,sp,216
80046d60:	0c0117c1 	jal	80045f04 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h322ca2115794f866E>
80046d64:	00000000 	nop
80046d68:	afa2013c 	sw	v0,316(sp)
        match self {
80046d6c:	8fa1013c 	lw	at,316(sp)
80046d70:	3c020011 	lui	v0,0x11
80046d74:	14220006 	bne	at,v0,80046d90 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x320>
80046d78:	00000000 	nop
80046d7c:	08011b61 	j	80046d84 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x314>
80046d80:	00000000 	nop
            None => unwrap_failed(),
80046d84:	8fa40038 	lw	a0,56(sp)
80046d88:	0c00fab9 	jal	8003eae4 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
80046d8c:	00000000 	nop
            Some(val) => val,
80046d90:	8fa1013c 	lw	at,316(sp)
80046d94:	afa10140 	sw	at,320(sp)
80046d98:	afa100d4 	sw	at,212(sp)
    let char_range = char_start..char_start + ch.len_utf8();
80046d9c:	8fa400d4 	lw	a0,212(sp)
80046da0:	0c00f565 	jal	8003d594 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$8len_utf817hb6087b2bc95d3ee8E>
80046da4:	00000000 	nop
80046da8:	00400825 	move	at,v0
80046dac:	8fa20024 	lw	v0,36(sp)
80046db0:	00410821 	addu	at,v0,at
80046db4:	afa10020 	sw	at,32(sp)
80046db8:	0022082b 	sltu	at,at,v0
80046dbc:	1420004f 	bnez	at,80046efc <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x48c>
80046dc0:	00000000 	nop
80046dc4:	08011b73 	j	80046dcc <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x35c>
80046dc8:	00000000 	nop
80046dcc:	8fa10020 	lw	at,32(sp)
80046dd0:	8fa20024 	lw	v0,36(sp)
80046dd4:	afa200e4 	sw	v0,228(sp)
80046dd8:	afa100e8 	sw	at,232(sp)
80046ddc:	27a200d0 	addiu	v0,sp,208
80046de0:	afa20158 	sw	v0,344(sp)
80046de4:	afa20164 	sw	v0,356(sp)
80046de8:	3c018005 	lui	at,0x8005
80046dec:	2421a0f4 	addiu	at,at,-24332
80046df0:	afa10168 	sw	at,360(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80046df4:	afa2015c 	sw	v0,348(sp)
80046df8:	afa10160 	sw	at,352(sp)
    }
80046dfc:	8faa015c 	lw	t2,348(sp)
80046e00:	8fa90160 	lw	t1,352(sp)
80046e04:	27a200d4 	addiu	v0,sp,212
80046e08:	afa2020c 	sw	v0,524(sp)
80046e0c:	afa20218 	sw	v0,536(sp)
80046e10:	3c018004 	lui	at,0x8004
80046e14:	24212fc0 	addiu	at,at,12224
80046e18:	afa1021c 	sw	at,540(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80046e1c:	afa20210 	sw	v0,528(sp)
80046e20:	afa10214 	sw	at,532(sp)
    }
80046e24:	8fa80210 	lw	t0,528(sp)
80046e28:	8fa70214 	lw	a3,532(sp)
80046e2c:	27a200e4 	addiu	v0,sp,228
80046e30:	afa20220 	sw	v0,544(sp)
80046e34:	afa2022c 	sw	v0,556(sp)
80046e38:	3c018004 	lui	at,0x8004
80046e3c:	2421cac4 	addiu	at,at,-13628
80046e40:	afa10230 	sw	at,560(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80046e44:	afa20224 	sw	v0,548(sp)
80046e48:	afa10228 	sw	at,552(sp)
    }
80046e4c:	8fa60224 	lw	a2,548(sp)
80046e50:	8fa50228 	lw	a1,552(sp)
80046e54:	27a20050 	addiu	v0,sp,80
80046e58:	afa201d0 	sw	v0,464(sp)
80046e5c:	afa201dc 	sw	v0,476(sp)
80046e60:	3c018005 	lui	at,0x8005
80046e64:	2421a1fc 	addiu	at,at,-24068
80046e68:	afa101e0 	sw	at,480(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80046e6c:	afa201d4 	sw	v0,468(sp)
80046e70:	afa101d8 	sw	at,472(sp)
    }
80046e74:	8fa401d4 	lw	a0,468(sp)
80046e78:	8fa301d8 	lw	v1,472(sp)
80046e7c:	27a2005c 	addiu	v0,sp,92
80046e80:	afa201bc 	sw	v0,444(sp)
80046e84:	afa201c8 	sw	v0,456(sp)
80046e88:	afa101cc 	sw	at,460(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80046e8c:	afa201c0 	sw	v0,448(sp)
80046e90:	afa101c4 	sw	at,452(sp)
    }
80046e94:	8fa201c0 	lw	v0,448(sp)
80046e98:	8fa101c4 	lw	at,452(sp)
    panic!(
80046e9c:	afaa0104 	sw	t2,260(sp)
80046ea0:	afa90108 	sw	t1,264(sp)
80046ea4:	afa8010c 	sw	t0,268(sp)
80046ea8:	afa70110 	sw	a3,272(sp)
80046eac:	afa60114 	sw	a2,276(sp)
80046eb0:	afa50118 	sw	a1,280(sp)
80046eb4:	afa4011c 	sw	a0,284(sp)
80046eb8:	afa30120 	sw	v1,288(sp)
80046ebc:	afa20124 	sw	v0,292(sp)
80046ec0:	afa10128 	sw	at,296(sp)
80046ec4:	03a00825 	move	at,sp
80046ec8:	24060005 	li	a2,5
80046ecc:	ac260010 	sw	a2,16(at)
80046ed0:	3c01810a 	lui	at,0x810a
80046ed4:	2425c4a0 	addiu	a1,at,-15200
80046ed8:	27a400ec 	addiu	a0,sp,236
80046edc:	afa4001c 	sw	a0,28(sp)
80046ee0:	27a70104 	addiu	a3,sp,260
80046ee4:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
80046ee8:	00000000 	nop
80046eec:	8fa4001c 	lw	a0,28(sp)
80046ef0:	8fa50038 	lw	a1,56(sp)
80046ef4:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80046ef8:	00000000 	nop
    let char_range = char_start..char_start + ch.len_utf8();
80046efc:	8fa40038 	lw	a0,56(sp)
80046f00:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80046f04:	00000000 	nop
        let oob_index = if begin > s.len() { begin } else { end };
80046f08:	8fa1004c 	lw	at,76(sp)
80046f0c:	afa10064 	sw	at,100(sp)
80046f10:	08011bca 	j	80046f28 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x4b8>
80046f14:	00000000 	nop
80046f18:	8fa10048 	lw	at,72(sp)
80046f1c:	afa10064 	sw	at,100(sp)
80046f20:	08011bca 	j	80046f28 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x4b8>
80046f24:	00000000 	nop
80046f28:	27a20064 	addiu	v0,sp,100
80046f2c:	afa20144 	sw	v0,324(sp)
80046f30:	afa20150 	sw	v0,336(sp)
80046f34:	3c018005 	lui	at,0x8005
80046f38:	2421a0f4 	addiu	at,at,-24332
80046f3c:	afa10154 	sw	at,340(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80046f40:	afa20148 	sw	v0,328(sp)
80046f44:	afa1014c 	sw	at,332(sp)
    }
80046f48:	8fa60148 	lw	a2,328(sp)
80046f4c:	8fa5014c 	lw	a1,332(sp)
80046f50:	27a20050 	addiu	v0,sp,80
80046f54:	afa201a8 	sw	v0,424(sp)
80046f58:	afa201b4 	sw	v0,436(sp)
80046f5c:	3c018005 	lui	at,0x8005
80046f60:	2421a1fc 	addiu	at,at,-24068
80046f64:	afa101b8 	sw	at,440(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80046f68:	afa201ac 	sw	v0,428(sp)
80046f6c:	afa101b0 	sw	at,432(sp)
    }
80046f70:	8fa401ac 	lw	a0,428(sp)
80046f74:	8fa301b0 	lw	v1,432(sp)
80046f78:	27a2005c 	addiu	v0,sp,92
80046f7c:	afa20194 	sw	v0,404(sp)
80046f80:	afa201a0 	sw	v0,416(sp)
80046f84:	afa101a4 	sw	at,420(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80046f88:	afa20198 	sw	v0,408(sp)
80046f8c:	afa1019c 	sw	at,412(sp)
    }
80046f90:	8fa20198 	lw	v0,408(sp)
80046f94:	8fa1019c 	lw	at,412(sp)
        panic!("byte index {oob_index} is out of bounds of `{s_trunc}`{ellipsis}");
80046f98:	afa60080 	sw	a2,128(sp)
80046f9c:	afa50084 	sw	a1,132(sp)
80046fa0:	afa40088 	sw	a0,136(sp)
80046fa4:	afa3008c 	sw	v1,140(sp)
80046fa8:	afa20090 	sw	v0,144(sp)
80046fac:	afa10094 	sw	at,148(sp)
80046fb0:	03a00825 	move	at,sp
80046fb4:	24060003 	li	a2,3
80046fb8:	ac260010 	sw	a2,16(at)
80046fbc:	3c01810a 	lui	at,0x810a
80046fc0:	2425c4e0 	addiu	a1,at,-15136
80046fc4:	27a40068 	addiu	a0,sp,104
80046fc8:	afa40018 	sw	a0,24(sp)
80046fcc:	27a70080 	addiu	a3,sp,128
80046fd0:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
80046fd4:	00000000 	nop
80046fd8:	8fa40018 	lw	a0,24(sp)
80046fdc:	8fa50038 	lw	a1,56(sp)
80046fe0:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80046fe4:	00000000 	nop

80046fe8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>:
    pub const fn len(&self) -> usize {
80046fe8:	27bdfff0 	addiu	sp,sp,-16
80046fec:	00a01025 	move	v0,a1
80046ff0:	afa40000 	sw	a0,0(sp)
80046ff4:	afa20004 	sw	v0,4(sp)
80046ff8:	afa40008 	sw	a0,8(sp)
80046ffc:	afa2000c 	sw	v0,12(sp)
80047000:	27bd0010 	addiu	sp,sp,16
    }
80047004:	03e00008 	jr	ra
80047008:	00000000 	nop

8004700c <_ZN4core3str21_$LT$impl$u20$str$GT$8is_empty17h5474706a12608b3eE>:
    pub const fn is_empty(&self) -> bool {
8004700c:	27bdffe0 	addiu	sp,sp,-32
80047010:	afbf001c 	sw	ra,28(sp)
80047014:	afa40014 	sw	a0,20(sp)
80047018:	afa50018 	sw	a1,24(sp)
        self.len() == 0
8004701c:	0c011bfa 	jal	80046fe8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
80047020:	00000000 	nop
80047024:	2c420001 	sltiu	v0,v0,1
    }
80047028:	8fbf001c 	lw	ra,28(sp)
8004702c:	27bd0020 	addiu	sp,sp,32
80047030:	03e00008 	jr	ra
80047034:	00000000 	nop

80047038 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E>:
    pub fn is_char_boundary(&self, index: usize) -> bool {
80047038:	27bdffc0 	addiu	sp,sp,-64
8004703c:	afbf003c 	sw	ra,60(sp)
80047040:	afa60010 	sw	a2,16(sp)
80047044:	afa50014 	sw	a1,20(sp)
80047048:	afa40018 	sw	a0,24(sp)
8004704c:	afa40024 	sw	a0,36(sp)
80047050:	afa50028 	sw	a1,40(sp)
80047054:	afa6002c 	sw	a2,44(sp)
        if index == 0 {
80047058:	14c00007 	bnez	a2,80047078 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E+0x40>
8004705c:	00000000 	nop
80047060:	08011c1a 	j	80047068 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E+0x30>
80047064:	00000000 	nop
80047068:	24010001 	li	at,1
            return true;
8004706c:	a3a1001f 	sb	at,31(sp)
    }
80047070:	08011c2b 	j	800470ac <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E+0x74>
80047074:	00000000 	nop
80047078:	8fa60010 	lw	a2,16(sp)
8004707c:	8fa50014 	lw	a1,20(sp)
80047080:	8fa40018 	lw	a0,24(sp)
80047084:	afa40034 	sw	a0,52(sp)
80047088:	afa50038 	sw	a1,56(sp)
        match self.as_bytes().get(index) {
8004708c:	0c0111bf 	jal	800446fc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h0e1c4c7e4b7b26b1E>
80047090:	00000000 	nop
80047094:	afa20020 	sw	v0,32(sp)
80047098:	8fa10020 	lw	at,32(sp)
8004709c:	10200009 	beqz	at,800470c4 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E+0x8c>
800470a0:	00000000 	nop
800470a4:	08011c3b 	j	800470ec <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E+0xb4>
800470a8:	00000000 	nop
    }
800470ac:	93a1001f 	lbu	at,31(sp)
800470b0:	30220001 	andi	v0,at,0x1
800470b4:	8fbf003c 	lw	ra,60(sp)
800470b8:	27bd0040 	addiu	sp,sp,64
800470bc:	03e00008 	jr	ra
800470c0:	00000000 	nop
            None => index == self.len(),
800470c4:	8fa50014 	lw	a1,20(sp)
800470c8:	8fa40018 	lw	a0,24(sp)
800470cc:	0c011bfa 	jal	80046fe8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
800470d0:	00000000 	nop
800470d4:	8fa10010 	lw	at,16(sp)
800470d8:	00220826 	xor	at,at,v0
800470dc:	2c210001 	sltiu	at,at,1
800470e0:	a3a1001f 	sb	at,31(sp)
800470e4:	08011c2b 	j	800470ac <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E+0x74>
800470e8:	00000000 	nop
            Some(&b) => b.is_utf8_char_boundary(),
800470ec:	8fa10020 	lw	at,32(sp)
800470f0:	90240000 	lbu	a0,0(at)
800470f4:	a3a40033 	sb	a0,51(sp)
800470f8:	0c00ed19 	jal	8003b464 <_ZN4core3num20_$LT$impl$u20$u8$GT$21is_utf8_char_boundary17hd4b7d97890933c9eE>
800470fc:	00000000 	nop
80047100:	a3a2001f 	sb	v0,31(sp)
80047104:	08011c2b 	j	800470ac <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E+0x74>
80047108:	00000000 	nop

8004710c <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E>:
    pub fn floor_char_boundary(&self, index: usize) -> usize {
8004710c:	27bdff88 	addiu	sp,sp,-120
80047110:	afbf0074 	sw	ra,116(sp)
80047114:	afa60024 	sw	a2,36(sp)
80047118:	afa5001c 	sw	a1,28(sp)
8004711c:	afa40020 	sw	a0,32(sp)
80047120:	afa40040 	sw	a0,64(sp)
80047124:	afa50044 	sw	a1,68(sp)
80047128:	afa60048 	sw	a2,72(sp)
        if index >= self.len() {
8004712c:	0c011bfa 	jal	80046fe8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
80047130:	00000000 	nop
80047134:	8fa60024 	lw	a2,36(sp)
80047138:	00c2082b 	sltu	at,a2,v0
8004713c:	1020003a 	beqz	at,80047228 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E+0x11c>
80047140:	00000000 	nop
80047144:	08011c53 	j	8004714c <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E+0x40>
80047148:	00000000 	nop
8004714c:	8fa1001c 	lw	at,28(sp)
80047150:	8fa20020 	lw	v0,32(sp)
80047154:	8fa60024 	lw	a2,36(sp)
80047158:	afa60068 	sw	a2,104(sp)
8004715c:	24030003 	li	v1,3
80047160:	afa3006c 	sw	v1,108(sp)
            intrinsics::saturating_sub(self, rhs)
80047164:	24c3fffd 	addiu	v1,a2,-3
80047168:	00c3202b 	sltu	a0,a2,v1
8004716c:	24050000 	li	a1,0
80047170:	0004180b 	movn	v1,zero,a0
80047174:	afa30070 	sw	v1,112(sp)
80047178:	8fa50070 	lw	a1,112(sp)
8004717c:	afa50014 	sw	a1,20(sp)
            let lower_bound = index.saturating_sub(3);
80047180:	afa5004c 	sw	a1,76(sp)
80047184:	afa20060 	sw	v0,96(sp)
80047188:	afa10064 	sw	at,100(sp)
8004718c:	27a40034 	addiu	a0,sp,52
80047190:	afa40010 	sw	a0,16(sp)
            let new_index = self.as_bytes()[lower_bound..=index]
80047194:	0c00f35b 	jal	8003cd6c <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17hc292ae9ef64e18eeE>
80047198:	00000000 	nop
8004719c:	8fa40010 	lw	a0,16(sp)
800471a0:	8fa50020 	lw	a1,32(sp)
800471a4:	8fa6001c 	lw	a2,28(sp)
800471a8:	afa50058 	sw	a1,88(sp)
800471ac:	afa6005c 	sw	a2,92(sp)
        index.index(self)
800471b0:	3c01810a 	lui	at,0x810a
800471b4:	2427c568 	addiu	a3,at,-15000
800471b8:	0c010f9b 	jal	80043e6c <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE>
800471bc:	00000000 	nop
800471c0:	00402025 	move	a0,v0
800471c4:	00602825 	move	a1,v1
800471c8:	0c01122d 	jal	800448b4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9fbf31f27946410E>
800471cc:	00000000 	nop
800471d0:	afa2002c 	sw	v0,44(sp)
800471d4:	afa30030 	sw	v1,48(sp)
800471d8:	27a4002c 	addiu	a0,sp,44
800471dc:	0c012a74 	jal	8004a9d0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E>
800471e0:	00000000 	nop
800471e4:	00402025 	move	a0,v0
800471e8:	00602825 	move	a1,v1
800471ec:	afa40050 	sw	a0,80(sp)
800471f0:	afa50054 	sw	a1,84(sp)
            unsafe { lower_bound + new_index.unwrap_unchecked() }
800471f4:	3c01810a 	lui	at,0x810a
800471f8:	2426c578 	addiu	a2,at,-14984
800471fc:	0c00f9d2 	jal	8003e748 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hd37948e99cc8a5c6E>
80047200:	00000000 	nop
80047204:	00400825 	move	at,v0
80047208:	8fa20014 	lw	v0,20(sp)
8004720c:	00410821 	addu	at,v0,at
80047210:	afa10018 	sw	at,24(sp)
80047214:	0022082b 	sltu	at,at,v0
80047218:	1420000e 	bnez	at,80047254 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E+0x148>
8004721c:	00000000 	nop
80047220:	08011c91 	j	80047244 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E+0x138>
80047224:	00000000 	nop
            self.len()
80047228:	8fa5001c 	lw	a1,28(sp)
8004722c:	8fa40020 	lw	a0,32(sp)
80047230:	0c011bfa 	jal	80046fe8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
80047234:	00000000 	nop
80047238:	afa20028 	sw	v0,40(sp)
8004723c:	08011c99 	j	80047264 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E+0x158>
80047240:	00000000 	nop
            unsafe { lower_bound + new_index.unwrap_unchecked() }
80047244:	8fa10018 	lw	at,24(sp)
80047248:	afa10028 	sw	at,40(sp)
        if index >= self.len() {
8004724c:	08011c99 	j	80047264 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E+0x158>
80047250:	00000000 	nop
            unsafe { lower_bound + new_index.unwrap_unchecked() }
80047254:	3c01810a 	lui	at,0x810a
80047258:	2424c588 	addiu	a0,at,-14968
8004725c:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80047260:	00000000 	nop
    }
80047264:	8fa20028 	lw	v0,40(sp)
80047268:	8fbf0074 	lw	ra,116(sp)
8004726c:	27bd0078 	addiu	sp,sp,120
80047270:	03e00008 	jr	ra
80047274:	00000000 	nop

80047278 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary28_$u7b$$u7b$closure$u7d$$u7d$17h492e5ca2d572b958E>:
                .rposition(|b| b.is_utf8_char_boundary());
80047278:	27bdffe0 	addiu	sp,sp,-32
8004727c:	afbf001c 	sw	ra,28(sp)
80047280:	afa40014 	sw	a0,20(sp)
80047284:	afa50018 	sw	a1,24(sp)
80047288:	90a40000 	lbu	a0,0(a1)
8004728c:	0c00ed19 	jal	8003b464 <_ZN4core3num20_$LT$impl$u20$u8$GT$21is_utf8_char_boundary17hd4b7d97890933c9eE>
80047290:	00000000 	nop
80047294:	8fbf001c 	lw	ra,28(sp)
80047298:	27bd0020 	addiu	sp,sp,32
8004729c:	03e00008 	jr	ra
800472a0:	00000000 	nop

800472a4 <_ZN4core3str21_$LT$impl$u20$str$GT$3get17h22d03a90dc93b151E>:
    pub fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {
800472a4:	27bdffd8 	addiu	sp,sp,-40
800472a8:	afbf0024 	sw	ra,36(sp)
800472ac:	afa60014 	sw	a2,20(sp)
800472b0:	00a03025 	move	a2,a1
800472b4:	00802825 	move	a1,a0
800472b8:	8fa40014 	lw	a0,20(sp)
800472bc:	afa50018 	sw	a1,24(sp)
800472c0:	afa6001c 	sw	a2,28(sp)
800472c4:	afa40020 	sw	a0,32(sp)
        i.get(self)
800472c8:	0c011911 	jal	80046444 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$3get17h4c2a4b91bf57c6dcE>
800472cc:	00000000 	nop
    }
800472d0:	8fbf0024 	lw	ra,36(sp)
800472d4:	27bd0028 	addiu	sp,sp,40
800472d8:	03e00008 	jr	ra
800472dc:	00000000 	nop

800472e0 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h9ac6a59f518bf3d7E>:
    pub fn chars(&self) -> Chars<'_> {
800472e0:	27bdffd0 	addiu	sp,sp,-48
800472e4:	afbf002c 	sw	ra,44(sp)
800472e8:	afa4001c 	sw	a0,28(sp)
800472ec:	afa50020 	sw	a1,32(sp)
800472f0:	afa40024 	sw	a0,36(sp)
800472f4:	afa50028 	sw	a1,40(sp)
        Chars { iter: self.as_bytes().iter() }
800472f8:	0c01122d 	jal	800448b4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9fbf31f27946410E>
800472fc:	00000000 	nop
80047300:	afa20014 	sw	v0,20(sp)
80047304:	afa30018 	sw	v1,24(sp)
    }
80047308:	8fa20014 	lw	v0,20(sp)
8004730c:	8fa30018 	lw	v1,24(sp)
80047310:	8fbf002c 	lw	ra,44(sp)
80047314:	27bd0030 	addiu	sp,sp,48
80047318:	03e00008 	jr	ra
8004731c:	00000000 	nop

80047320 <_ZN4core3str21_$LT$impl$u20$str$GT$12char_indices17hbaf3c99ff2948506E>:
    ///
    /// assert_eq!(None, char_indices.next());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn char_indices(&self) -> CharIndices<'_> {
80047320:	27bdffd0 	addiu	sp,sp,-48
80047324:	afbf002c 	sw	ra,44(sp)
80047328:	afa60014 	sw	a2,20(sp)
8004732c:	00a00825 	move	at,a1
80047330:	8fa50014 	lw	a1,20(sp)
80047334:	afa10018 	sw	at,24(sp)
80047338:	00800825 	move	at,a0
8004733c:	8fa40018 	lw	a0,24(sp)
80047340:	afa1001c 	sw	at,28(sp)
80047344:	afa10020 	sw	at,32(sp)
80047348:	afa40024 	sw	a0,36(sp)
8004734c:	afa50028 	sw	a1,40(sp)
        CharIndices { front_offset: 0, iter: self.chars() }
80047350:	0c011cb8 	jal	800472e0 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h9ac6a59f518bf3d7E>
80047354:	00000000 	nop
80047358:	8fa4001c 	lw	a0,28(sp)
8004735c:	00400825 	move	at,v0
80047360:	8fa20020 	lw	v0,32(sp)
80047364:	ac800008 	sw	zero,8(a0)
80047368:	ac810000 	sw	at,0(a0)
8004736c:	ac830004 	sw	v1,4(a0)
    }
80047370:	8fbf002c 	lw	ra,44(sp)
80047374:	27bd0030 	addiu	sp,sp,48
80047378:	03e00008 	jr	ra
8004737c:	00000000 	nop

80047380 <_ZN4core7unicode9printable5check17hd052c6660265343eE>:
// NOTE: The following code was generated by "library/core/src/unicode/printable.py",
//       do not edit directly!

fn check(x: u16, singletonuppers: &[(u8, u8)], singletonlowers: &[u8], normal: &[u8]) -> bool {
80047380:	27bdff28 	addiu	sp,sp,-216
80047384:	afbf00d4 	sw	ra,212(sp)
80047388:	afa7002c 	sw	a3,44(sp)
8004738c:	afa60030 	sw	a2,48(sp)
80047390:	00a00825 	move	at,a1
80047394:	8fa50030 	lw	a1,48(sp)
80047398:	afa10034 	sw	at,52(sp)
8004739c:	00800825 	move	at,a0
800473a0:	8fa40034 	lw	a0,52(sp)
800473a4:	8fa200f0 	lw	v0,240(sp)
800473a8:	afa20038 	sw	v0,56(sp)
800473ac:	8fa300ec 	lw	v1,236(sp)
800473b0:	afa3003c 	sw	v1,60(sp)
800473b4:	8fa600e8 	lw	a2,232(sp)
800473b8:	afa60040 	sw	a2,64(sp)
800473bc:	00204025 	move	t0,at
800473c0:	afa80044 	sw	t0,68(sp)
800473c4:	a7a1008a 	sh	at,138(sp)
800473c8:	afa4008c 	sw	a0,140(sp)
800473cc:	afa50090 	sw	a1,144(sp)
800473d0:	afa70094 	sw	a3,148(sp)
800473d4:	afa60098 	sw	a2,152(sp)
800473d8:	afa3009c 	sw	v1,156(sp)
800473dc:	afa200a0 	sw	v0,160(sp)
    let xupper = (x >> 8) as u8;
800473e0:	7c223a00 	ext	v0,at,0x8,0x8
800473e4:	afa20048 	sw	v0,72(sp)
800473e8:	00010a02 	srl	at,at,0x8
800473ec:	a3a100a5 	sb	at,165(sp)
    let mut lowerstart = 0;
800473f0:	afa00050 	sw	zero,80(sp)
    for &(upper, lowercount) in singletonuppers {
800473f4:	0c011000 	jal	80044000 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hf62cec3fc988412fE>
800473f8:	00000000 	nop
800473fc:	afa20054 	sw	v0,84(sp)
80047400:	afa30058 	sw	v1,88(sp)
80047404:	08011d03 	j	8004740c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x8c>
80047408:	00000000 	nop
8004740c:	27a40054 	addiu	a0,sp,84
80047410:	0c012909 	jal	8004a424 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE>
80047414:	00000000 	nop
80047418:	afa2005c 	sw	v0,92(sp)
8004741c:	8fa1005c 	lw	at,92(sp)
80047420:	14200014 	bnez	at,80047474 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0xf4>
80047424:	00000000 	nop
80047428:	08011d0c 	j	80047430 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0xb0>
8004742c:	00000000 	nop
            break;
        }
        lowerstart = lowerend;
    }

    let mut x = x as i32;
80047430:	8fa50038 	lw	a1,56(sp)
80047434:	8fa4003c 	lw	a0,60(sp)
80047438:	8fa10044 	lw	at,68(sp)
8004743c:	3021ffff 	andi	at,at,0xffff
80047440:	afa10074 	sw	at,116(sp)
    let mut normal = normal.iter().cloned();
80047444:	0c01122d 	jal	800448b4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9fbf31f27946410E>
80047448:	00000000 	nop
8004744c:	00402025 	move	a0,v0
80047450:	00602825 	move	a1,v1
80047454:	0c00f8f5 	jal	8003e3d4 <_ZN4core4iter6traits8iterator8Iterator6cloned17hf35468160e5bd29eE>
80047458:	00000000 	nop
8004745c:	afa20078 	sw	v0,120(sp)
80047460:	afa3007c 	sw	v1,124(sp)
80047464:	24010001 	li	at,1
    let mut current = true;
80047468:	a3a10081 	sb	at,129(sp)
    while let Some(v) = normal.next() {
8004746c:	08011d7f 	j	800475fc <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x27c>
80047470:	00000000 	nop
    for &(upper, lowercount) in singletonuppers {
80047474:	8fa1005c 	lw	at,92(sp)
80047478:	90210000 	lbu	at,0(at)
8004747c:	afa10024 	sw	at,36(sp)
80047480:	a3a100a6 	sb	at,166(sp)
80047484:	8fa1005c 	lw	at,92(sp)
80047488:	90210001 	lbu	at,1(at)
8004748c:	a3a100a7 	sb	at,167(sp)
        let lowerend = lowerstart + lowercount as usize;
80047490:	8fa20050 	lw	v0,80(sp)
80047494:	00410821 	addu	at,v0,at
80047498:	afa10028 	sw	at,40(sp)
8004749c:	0022082b 	sltu	at,at,v0
800474a0:	1420000d 	bnez	at,800474d8 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x158>
800474a4:	00000000 	nop
800474a8:	08011d2c 	j	800474b0 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x130>
800474ac:	00000000 	nop
800474b0:	8fa10048 	lw	at,72(sp)
800474b4:	8fa20024 	lw	v0,36(sp)
800474b8:	8fa30028 	lw	v1,40(sp)
800474bc:	afa300a8 	sw	v1,168(sp)
        if xupper == upper {
800474c0:	304200ff 	andi	v0,v0,0xff
800474c4:	302100ff 	andi	at,at,0xff
800474c8:	10220010 	beq	at,v0,8004750c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x18c>
800474cc:	00000000 	nop
800474d0:	08011d3a 	j	800474e8 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x168>
800474d4:	00000000 	nop
        let lowerend = lowerstart + lowercount as usize;
800474d8:	3c01810a 	lui	at,0x810a
800474dc:	2424c610 	addiu	a0,at,-14832
800474e0:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800474e4:	00000000 	nop
        } else if xupper < upper {
800474e8:	8fa10048 	lw	at,72(sp)
800474ec:	8fa20024 	lw	v0,36(sp)
800474f0:	304200ff 	andi	v0,v0,0xff
800474f4:	302100ff 	andi	at,at,0xff
800474f8:	0022082b 	sltu	at,at,v0
800474fc:	1420ffcc 	bnez	at,80047430 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0xb0>
80047500:	00000000 	nop
80047504:	08011d7b 	j	800475ec <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x26c>
80047508:	00000000 	nop
            for &lower in &singletonlowers[lowerstart..lowerend] {
8004750c:	8fa30040 	lw	v1,64(sp)
80047510:	8fa4002c 	lw	a0,44(sp)
80047514:	8fa10028 	lw	at,40(sp)
80047518:	8fa20050 	lw	v0,80(sp)
8004751c:	afa20060 	sw	v0,96(sp)
80047520:	afa10064 	sw	at,100(sp)
80047524:	8fa20060 	lw	v0,96(sp)
80047528:	afa2001c 	sw	v0,28(sp)
8004752c:	8fa10064 	lw	at,100(sp)
80047530:	afa10020 	sw	at,32(sp)
80047534:	afa400b4 	sw	a0,180(sp)
80047538:	afa300b8 	sw	v1,184(sp)
8004753c:	afa200bc 	sw	v0,188(sp)
80047540:	afa100c0 	sw	at,192(sp)
80047544:	afa200c4 	sw	v0,196(sp)
80047548:	afa100c8 	sw	at,200(sp)
8004754c:	afa400cc 	sw	a0,204(sp)
80047550:	afa300d0 	sw	v1,208(sp)
        if self.start > self.end {
80047554:	0022082b 	sltu	at,at,v0
80047558:	1420000a 	bnez	at,80047584 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x204>
8004755c:	00000000 	nop
80047560:	08011d5a 	j	80047568 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x1e8>
80047564:	00000000 	nop
        } else if self.end > slice.len() {
80047568:	8fa10040 	lw	at,64(sp)
8004756c:	8fa20020 	lw	v0,32(sp)
80047570:	0022082b 	sltu	at,at,v0
80047574:	14200009 	bnez	at,8004759c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x21c>
80047578:	00000000 	nop
8004757c:	08011d6d 	j	800475b4 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x234>
80047580:	00000000 	nop
            slice_index_order_fail(self.start, self.end);
80047584:	8fa50020 	lw	a1,32(sp)
80047588:	8fa4001c 	lw	a0,28(sp)
8004758c:	3c01810a 	lui	at,0x810a
80047590:	2426c640 	addiu	a2,at,-14784
80047594:	0c010cbf 	jal	800432fc <_ZN4core5slice5index22slice_index_order_fail17h449e604cb79353f4E>
80047598:	00000000 	nop
            slice_end_index_len_fail(self.end, slice.len());
8004759c:	8fa50040 	lw	a1,64(sp)
800475a0:	8fa40020 	lw	a0,32(sp)
800475a4:	3c01810a 	lui	at,0x810a
800475a8:	2426c640 	addiu	a2,at,-14784
800475ac:	0c010c8d 	jal	80043234 <_ZN4core5slice5index24slice_end_index_len_fail17hc8473d7595779981E>
800475b0:	00000000 	nop
        unsafe { &*self.get_unchecked(slice) }
800475b4:	8fa70040 	lw	a3,64(sp)
800475b8:	8fa6002c 	lw	a2,44(sp)
800475bc:	8fa50020 	lw	a1,32(sp)
800475c0:	8fa4001c 	lw	a0,28(sp)
800475c4:	0c010df9 	jal	800437e4 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb3ac7c8e535d317cE>
800475c8:	00000000 	nop
800475cc:	00402025 	move	a0,v0
800475d0:	00602825 	move	a1,v1
800475d4:	0c010fec 	jal	80043fb0 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h57eea16c7126e9e6E>
800475d8:	00000000 	nop
800475dc:	afa20068 	sw	v0,104(sp)
800475e0:	afa3006c 	sw	v1,108(sp)
800475e4:	08011ddb 	j	8004776c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x3ec>
800475e8:	00000000 	nop
        lowerstart = lowerend;
800475ec:	8fa10028 	lw	at,40(sp)
800475f0:	afa10050 	sw	at,80(sp)
    for &(upper, lowercount) in singletonuppers {
800475f4:	08011d03 	j	8004740c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x8c>
800475f8:	00000000 	nop
800475fc:	27a40078 	addiu	a0,sp,120
    while let Some(v) = normal.next() {
80047600:	0c00f69a 	jal	8003da68 <_ZN104_$LT$core..iter..adapters..cloned..Cloned$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h99c66ea835c86bdbE>
80047604:	00000000 	nop
80047608:	30410001 	andi	at,v0,0x1
8004760c:	a3a10082 	sb	at,130(sp)
80047610:	a3a30083 	sb	v1,131(sp)
80047614:	93a10082 	lbu	at,130(sp)
80047618:	30210001 	andi	at,at,0x1
8004761c:	1020000b 	beqz	at,8004764c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x2cc>
80047620:	00000000 	nop
80047624:	08011d8b 	j	8004762c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x2ac>
80047628:	00000000 	nop
8004762c:	93a10083 	lbu	at,131(sp)
80047630:	afa10018 	sw	at,24(sp)
80047634:	a3a100af 	sb	at,175(sp)
        let len = if v & 0x80 != 0 {
80047638:	30210080 	andi	at,at,0x80
8004763c:	10200008 	beqz	at,80047660 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x2e0>
80047640:	00000000 	nop
80047644:	08011d9d 	j	80047674 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x2f4>
80047648:	00000000 	nop
        if x < 0 {
            break;
        }
        current = !current;
    }
    current
8004764c:	93a10081 	lbu	at,129(sp)
80047650:	30210001 	andi	at,at,0x1
80047654:	a3a1004f 	sb	at,79(sp)
}
80047658:	08011dd5 	j	80047754 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x3d4>
8004765c:	00000000 	nop
            v as i32
80047660:	8fa10018 	lw	at,24(sp)
80047664:	302100ff 	andi	at,at,0xff
80047668:	afa10084 	sw	at,132(sp)
        let len = if v & 0x80 != 0 {
8004766c:	08011db8 	j	800476e0 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x360>
80047670:	00000000 	nop
            ((v & 0x7f) as i32) << 8 | normal.next().unwrap() as i32
80047674:	8fa10018 	lw	at,24(sp)
80047678:	3021007f 	andi	at,at,0x7f
8004767c:	00010a00 	sll	at,at,0x8
80047680:	afa10014 	sw	at,20(sp)
80047684:	27a40078 	addiu	a0,sp,120
80047688:	0c00f69a 	jal	8003da68 <_ZN104_$LT$core..iter..adapters..cloned..Cloned$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h99c66ea835c86bdbE>
8004768c:	00000000 	nop
80047690:	30410001 	andi	at,v0,0x1
80047694:	a3a100b1 	sb	at,177(sp)
80047698:	a3a300b2 	sb	v1,178(sp)
        match self {
8004769c:	93a100b1 	lbu	at,177(sp)
800476a0:	30210001 	andi	at,at,0x1
800476a4:	14200007 	bnez	at,800476c4 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x344>
800476a8:	00000000 	nop
800476ac:	08011dad 	j	800476b4 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x334>
800476b0:	00000000 	nop
            None => unwrap_failed(),
800476b4:	3c01810a 	lui	at,0x810a
800476b8:	2424c620 	addiu	a0,at,-14816
800476bc:	0c00fab9 	jal	8003eae4 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
800476c0:	00000000 	nop
            Some(val) => val,
800476c4:	8fa10014 	lw	at,20(sp)
800476c8:	93a200b2 	lbu	v0,178(sp)
800476cc:	a3a200b3 	sb	v0,179(sp)
800476d0:	00220825 	or	at,at,v0
800476d4:	afa10084 	sw	at,132(sp)
        let len = if v & 0x80 != 0 {
800476d8:	08011db8 	j	800476e0 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x360>
800476dc:	00000000 	nop
        x -= len;
800476e0:	8fa20084 	lw	v0,132(sp)
800476e4:	8fa30074 	lw	v1,116(sp)
800476e8:	24010000 	li	at,0
800476ec:	0002082a 	slt	at,zero,v0
800476f0:	00621023 	subu	v0,v1,v0
800476f4:	afa20010 	sw	v0,16(sp)
800476f8:	0043102a 	slt	v0,v0,v1
800476fc:	00220826 	xor	at,at,v0
80047700:	1420000a 	bnez	at,8004772c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x3ac>
80047704:	00000000 	nop
80047708:	08011dc4 	j	80047710 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x390>
8004770c:	00000000 	nop
80047710:	8fa10010 	lw	at,16(sp)
80047714:	afa10074 	sw	at,116(sp)
        if x < 0 {
80047718:	8fa10074 	lw	at,116(sp)
8004771c:	0420ffcb 	bltz	at,8004764c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x2cc>
80047720:	00000000 	nop
80047724:	08011dcf 	j	8004773c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x3bc>
80047728:	00000000 	nop
        x -= len;
8004772c:	3c01810a 	lui	at,0x810a
80047730:	2424c630 	addiu	a0,at,-14800
80047734:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80047738:	00000000 	nop
        current = !current;
8004773c:	93a10081 	lbu	at,129(sp)
80047740:	00200827 	nor	at,at,zero
80047744:	30210001 	andi	at,at,0x1
80047748:	a3a10081 	sb	at,129(sp)
    while let Some(v) = normal.next() {
8004774c:	08011d7f 	j	800475fc <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x27c>
80047750:	00000000 	nop
}
80047754:	93a1004f 	lbu	at,79(sp)
80047758:	30220001 	andi	v0,at,0x1
8004775c:	8fbf00d4 	lw	ra,212(sp)
80047760:	27bd00d8 	addiu	sp,sp,216
80047764:	03e00008 	jr	ra
80047768:	00000000 	nop
8004776c:	27a40068 	addiu	a0,sp,104
            for &lower in &singletonlowers[lowerstart..lowerend] {
80047770:	0c0128d1 	jal	8004a344 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE>
80047774:	00000000 	nop
80047778:	afa20070 	sw	v0,112(sp)
8004777c:	8fa10070 	lw	at,112(sp)
80047780:	1020ff9a 	beqz	at,800475ec <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x26c>
80047784:	00000000 	nop
80047788:	08011de4 	j	80047790 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x410>
8004778c:	00000000 	nop
80047790:	8fa20044 	lw	v0,68(sp)
80047794:	8fa10070 	lw	at,112(sp)
80047798:	90210000 	lbu	at,0(at)
8004779c:	a3a100b0 	sb	at,176(sp)
                if lower == x as u8 {
800477a0:	304200ff 	andi	v0,v0,0xff
800477a4:	1422fff1 	bne	at,v0,8004776c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x3ec>
800477a8:	00000000 	nop
800477ac:	08011ded 	j	800477b4 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x434>
800477b0:	00000000 	nop
800477b4:	24010000 	li	at,0
                    return false;
800477b8:	a3a0004f 	sb	zero,79(sp)
}
800477bc:	08011dd5 	j	80047754 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x3d4>
800477c0:	00000000 	nop

800477c4 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE>:

pub(crate) fn is_printable(x: char) -> bool {
800477c4:	27bdffc0 	addiu	sp,sp,-64
800477c8:	afbf003c 	sw	ra,60(sp)
800477cc:	afa40024 	sw	a0,36(sp)
800477d0:	afa40030 	sw	a0,48(sp)
    let x = x as u32;
800477d4:	afa40034 	sw	a0,52(sp)
    let lower = x as u16;
800477d8:	00800825 	move	at,a0
800477dc:	afa10028 	sw	at,40(sp)
800477e0:	a7a4003a 	sh	a0,58(sp)

    if x < 32 {
800477e4:	2c810020 	sltiu	at,a0,32
800477e8:	14200009 	bnez	at,80047810 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x4c>
800477ec:	00000000 	nop
800477f0:	08011dfe 	j	800477f8 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x34>
800477f4:	00000000 	nop
        // ASCII fast path
        false
    } else if x < 127 {
800477f8:	8fa10024 	lw	at,36(sp)
800477fc:	2c21007f 	sltiu	at,at,127
80047800:	1420000e 	bnez	at,8004783c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x78>
80047804:	00000000 	nop
80047808:	08011e08 	j	80047820 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x5c>
8004780c:	00000000 	nop
80047810:	24010000 	li	at,0
        false
80047814:	a3a0002f 	sb	zero,47(sp)
    if x < 32 {
80047818:	08011f07 	j	80047c1c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
8004781c:	00000000 	nop
80047820:	8fa10024 	lw	at,36(sp)
80047824:	3c020001 	lui	v0,0x1
        // ASCII fast path
        true
    } else if x < 0x10000 {
80047828:	0022082b 	sltu	at,at,v0
8004782c:	1420000e 	bnez	at,80047868 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0xa4>
80047830:	00000000 	nop
80047834:	08011e13 	j	8004784c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x88>
80047838:	00000000 	nop
8004783c:	24010001 	li	at,1
        true
80047840:	a3a1002f 	sb	at,47(sp)
    } else if x < 127 {
80047844:	08011f07 	j	80047c1c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80047848:	00000000 	nop
8004784c:	8fa10024 	lw	at,36(sp)
80047850:	3c020002 	lui	v0,0x2
        check(lower, SINGLETONS0U, SINGLETONS0L, NORMAL0)
    } else if x < 0x20000 {
80047854:	0022082b 	sltu	at,at,v0
80047858:	1420001e 	bnez	at,800478d4 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x110>
8004785c:	00000000 	nop
80047860:	08011e2d 	j	800478b4 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0xf0>
80047864:	00000000 	nop
        check(lower, SINGLETONS0U, SINGLETONS0L, NORMAL0)
80047868:	8fa40028 	lw	a0,40(sp)
8004786c:	03a01025 	move	v0,sp
80047870:	2401012d 	li	at,301
80047874:	ac410018 	sw	at,24(v0)
80047878:	3c01810a 	lui	at,0x810a
8004787c:	2421ca9e 	addiu	at,at,-13666
80047880:	ac410014 	sw	at,20(v0)
80047884:	24010120 	li	at,288
80047888:	ac410010 	sw	at,16(v0)
8004788c:	3c01810a 	lui	at,0x810a
80047890:	2425c92e 	addiu	a1,at,-14034
80047894:	3c01810a 	lui	at,0x810a
80047898:	2427c97e 	addiu	a3,at,-13954
8004789c:	24060028 	li	a2,40
800478a0:	0c011ce0 	jal	80047380 <_ZN4core7unicode9printable5check17hd052c6660265343eE>
800478a4:	00000000 	nop
800478a8:	a3a2002f 	sb	v0,47(sp)
800478ac:	08011f07 	j	80047c1c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
800478b0:	00000000 	nop
800478b4:	8fa20024 	lw	v0,36(sp)
800478b8:	3c010002 	lui	at,0x2
800478bc:	3421a6df 	ori	at,at,0xa6df
        check(lower, SINGLETONS1U, SINGLETONS1L, NORMAL1)
    } else {
        if 0x2a6e0 <= x && x < 0x2a700 {
800478c0:	0022082b 	sltu	at,at,v0
800478c4:	1420001e 	bnez	at,80047940 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x17c>
800478c8:	00000000 	nop
800478cc:	08011e48 	j	80047920 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x15c>
800478d0:	00000000 	nop
        check(lower, SINGLETONS1U, SINGLETONS1L, NORMAL1)
800478d4:	8fa40028 	lw	a0,40(sp)
800478d8:	03a01025 	move	v0,sp
800478dc:	240101c2 	li	at,450
800478e0:	ac410018 	sw	at,24(v0)
800478e4:	3c01810a 	lui	at,0x810a
800478e8:	2421c76c 	addiu	at,at,-14484
800478ec:	ac410014 	sw	at,20(v0)
800478f0:	240100c4 	li	at,196
800478f4:	ac410010 	sw	at,16(v0)
800478f8:	3c01810a 	lui	at,0x810a
800478fc:	2425c650 	addiu	a1,at,-14768
80047900:	3c01810a 	lui	at,0x810a
80047904:	2427c6a8 	addiu	a3,at,-14680
80047908:	2406002c 	li	a2,44
8004790c:	0c011ce0 	jal	80047380 <_ZN4core7unicode9printable5check17hd052c6660265343eE>
80047910:	00000000 	nop
80047914:	a3a2002f 	sb	v0,47(sp)
80047918:	08011f07 	j	80047c1c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
8004791c:	00000000 	nop
80047920:	8fa20024 	lw	v0,36(sp)
80047924:	3c010002 	lui	at,0x2
80047928:	3421b739 	ori	at,at,0xb739
            return false;
        }
        if 0x2b73a <= x && x < 0x2b740 {
8004792c:	0022082b 	sltu	at,at,v0
80047930:	14200017 	bnez	at,80047990 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x1cc>
80047934:	00000000 	nop
80047938:	08011e5c 	j	80047970 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x1ac>
8004793c:	00000000 	nop
80047940:	8fa20024 	lw	v0,36(sp)
80047944:	3c010002 	lui	at,0x2
80047948:	3421a6ff 	ori	at,at,0xa6ff
        if 0x2a6e0 <= x && x < 0x2a700 {
8004794c:	0022082b 	sltu	at,at,v0
80047950:	1420fff3 	bnez	at,80047920 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x15c>
80047954:	00000000 	nop
80047958:	08011e58 	j	80047960 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x19c>
8004795c:	00000000 	nop
80047960:	24010000 	li	at,0
            return false;
80047964:	a3a0002f 	sb	zero,47(sp)
80047968:	08011f07 	j	80047c1c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
8004796c:	00000000 	nop
80047970:	8fa20024 	lw	v0,36(sp)
80047974:	3c010002 	lui	at,0x2
80047978:	3421b81d 	ori	at,at,0xb81d
            return false;
        }
        if 0x2b81e <= x && x < 0x2b820 {
8004797c:	0022082b 	sltu	at,at,v0
80047980:	14200017 	bnez	at,800479e0 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x21c>
80047984:	00000000 	nop
80047988:	08011e70 	j	800479c0 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x1fc>
8004798c:	00000000 	nop
80047990:	8fa20024 	lw	v0,36(sp)
80047994:	3c010002 	lui	at,0x2
80047998:	3421b73f 	ori	at,at,0xb73f
        if 0x2b73a <= x && x < 0x2b740 {
8004799c:	0022082b 	sltu	at,at,v0
800479a0:	1420fff3 	bnez	at,80047970 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x1ac>
800479a4:	00000000 	nop
800479a8:	08011e6c 	j	800479b0 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x1ec>
800479ac:	00000000 	nop
800479b0:	24010000 	li	at,0
            return false;
800479b4:	a3a0002f 	sb	zero,47(sp)
800479b8:	08011f07 	j	80047c1c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
800479bc:	00000000 	nop
800479c0:	8fa20024 	lw	v0,36(sp)
800479c4:	3c010002 	lui	at,0x2
800479c8:	3421cea1 	ori	at,at,0xcea1
            return false;
        }
        if 0x2cea2 <= x && x < 0x2ceb0 {
800479cc:	0022082b 	sltu	at,at,v0
800479d0:	14200017 	bnez	at,80047a30 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x26c>
800479d4:	00000000 	nop
800479d8:	08011e84 	j	80047a10 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x24c>
800479dc:	00000000 	nop
800479e0:	8fa20024 	lw	v0,36(sp)
800479e4:	3c010002 	lui	at,0x2
800479e8:	3421b81f 	ori	at,at,0xb81f
        if 0x2b81e <= x && x < 0x2b820 {
800479ec:	0022082b 	sltu	at,at,v0
800479f0:	1420fff3 	bnez	at,800479c0 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x1fc>
800479f4:	00000000 	nop
800479f8:	08011e80 	j	80047a00 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x23c>
800479fc:	00000000 	nop
80047a00:	24010000 	li	at,0
            return false;
80047a04:	a3a0002f 	sb	zero,47(sp)
80047a08:	08011f07 	j	80047c1c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80047a0c:	00000000 	nop
80047a10:	8fa20024 	lw	v0,36(sp)
80047a14:	3c010002 	lui	at,0x2
80047a18:	3421ebe0 	ori	at,at,0xebe0
            return false;
        }
        if 0x2ebe1 <= x && x < 0x2ebf0 {
80047a1c:	0022082b 	sltu	at,at,v0
80047a20:	14200017 	bnez	at,80047a80 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x2bc>
80047a24:	00000000 	nop
80047a28:	08011e98 	j	80047a60 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x29c>
80047a2c:	00000000 	nop
80047a30:	8fa20024 	lw	v0,36(sp)
80047a34:	3c010002 	lui	at,0x2
80047a38:	3421ceaf 	ori	at,at,0xceaf
        if 0x2cea2 <= x && x < 0x2ceb0 {
80047a3c:	0022082b 	sltu	at,at,v0
80047a40:	1420fff3 	bnez	at,80047a10 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x24c>
80047a44:	00000000 	nop
80047a48:	08011e94 	j	80047a50 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x28c>
80047a4c:	00000000 	nop
80047a50:	24010000 	li	at,0
            return false;
80047a54:	a3a0002f 	sb	zero,47(sp)
80047a58:	08011f07 	j	80047c1c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80047a5c:	00000000 	nop
80047a60:	8fa20024 	lw	v0,36(sp)
80047a64:	3c010002 	lui	at,0x2
80047a68:	3421ee5d 	ori	at,at,0xee5d
            return false;
        }
        if 0x2ee5e <= x && x < 0x2f800 {
80047a6c:	0022082b 	sltu	at,at,v0
80047a70:	14200017 	bnez	at,80047ad0 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x30c>
80047a74:	00000000 	nop
80047a78:	08011eac 	j	80047ab0 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x2ec>
80047a7c:	00000000 	nop
80047a80:	8fa20024 	lw	v0,36(sp)
80047a84:	3c010002 	lui	at,0x2
80047a88:	3421ebef 	ori	at,at,0xebef
        if 0x2ebe1 <= x && x < 0x2ebf0 {
80047a8c:	0022082b 	sltu	at,at,v0
80047a90:	1420fff3 	bnez	at,80047a60 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x29c>
80047a94:	00000000 	nop
80047a98:	08011ea8 	j	80047aa0 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x2dc>
80047a9c:	00000000 	nop
80047aa0:	24010000 	li	at,0
            return false;
80047aa4:	a3a0002f 	sb	zero,47(sp)
80047aa8:	08011f07 	j	80047c1c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80047aac:	00000000 	nop
80047ab0:	8fa20024 	lw	v0,36(sp)
80047ab4:	3c010002 	lui	at,0x2
80047ab8:	3421fa1d 	ori	at,at,0xfa1d
            return false;
        }
        if 0x2fa1e <= x && x < 0x30000 {
80047abc:	0022082b 	sltu	at,at,v0
80047ac0:	14200017 	bnez	at,80047b20 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x35c>
80047ac4:	00000000 	nop
80047ac8:	08011ec0 	j	80047b00 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x33c>
80047acc:	00000000 	nop
80047ad0:	8fa20024 	lw	v0,36(sp)
80047ad4:	3c010002 	lui	at,0x2
80047ad8:	3421f7ff 	ori	at,at,0xf7ff
        if 0x2ee5e <= x && x < 0x2f800 {
80047adc:	0022082b 	sltu	at,at,v0
80047ae0:	1420fff3 	bnez	at,80047ab0 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x2ec>
80047ae4:	00000000 	nop
80047ae8:	08011ebc 	j	80047af0 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x32c>
80047aec:	00000000 	nop
80047af0:	24010000 	li	at,0
            return false;
80047af4:	a3a0002f 	sb	zero,47(sp)
80047af8:	08011f07 	j	80047c1c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80047afc:	00000000 	nop
80047b00:	8fa20024 	lw	v0,36(sp)
80047b04:	3c010003 	lui	at,0x3
80047b08:	3421134a 	ori	at,at,0x134a
            return false;
        }
        if 0x3134b <= x && x < 0x31350 {
80047b0c:	0022082b 	sltu	at,at,v0
80047b10:	14200017 	bnez	at,80047b70 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x3ac>
80047b14:	00000000 	nop
80047b18:	08011ed4 	j	80047b50 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x38c>
80047b1c:	00000000 	nop
80047b20:	8fa20024 	lw	v0,36(sp)
80047b24:	3c010002 	lui	at,0x2
80047b28:	3421ffff 	ori	at,at,0xffff
        if 0x2fa1e <= x && x < 0x30000 {
80047b2c:	0022082b 	sltu	at,at,v0
80047b30:	1420fff3 	bnez	at,80047b00 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x33c>
80047b34:	00000000 	nop
80047b38:	08011ed0 	j	80047b40 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x37c>
80047b3c:	00000000 	nop
80047b40:	24010000 	li	at,0
            return false;
80047b44:	a3a0002f 	sb	zero,47(sp)
80047b48:	08011f07 	j	80047c1c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80047b4c:	00000000 	nop
80047b50:	8fa20024 	lw	v0,36(sp)
80047b54:	3c010003 	lui	at,0x3
80047b58:	342123af 	ori	at,at,0x23af
            return false;
        }
        if 0x323b0 <= x && x < 0xe0100 {
80047b5c:	0022082b 	sltu	at,at,v0
80047b60:	14200017 	bnez	at,80047bc0 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x3fc>
80047b64:	00000000 	nop
80047b68:	08011ee8 	j	80047ba0 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x3dc>
80047b6c:	00000000 	nop
80047b70:	8fa20024 	lw	v0,36(sp)
80047b74:	3c010003 	lui	at,0x3
80047b78:	3421134f 	ori	at,at,0x134f
        if 0x3134b <= x && x < 0x31350 {
80047b7c:	0022082b 	sltu	at,at,v0
80047b80:	1420fff3 	bnez	at,80047b50 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x38c>
80047b84:	00000000 	nop
80047b88:	08011ee4 	j	80047b90 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x3cc>
80047b8c:	00000000 	nop
80047b90:	24010000 	li	at,0
            return false;
80047b94:	a3a0002f 	sb	zero,47(sp)
80047b98:	08011f07 	j	80047c1c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80047b9c:	00000000 	nop
80047ba0:	8fa20024 	lw	v0,36(sp)
80047ba4:	3c01000e 	lui	at,0xe
80047ba8:	342101ef 	ori	at,at,0x1ef
            return false;
        }
        if 0xe01f0 <= x && x < 0x110000 {
80047bac:	0022082b 	sltu	at,at,v0
80047bb0:	14200013 	bnez	at,80047c00 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x43c>
80047bb4:	00000000 	nop
80047bb8:	08011efc 	j	80047bf0 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x42c>
80047bbc:	00000000 	nop
80047bc0:	8fa20024 	lw	v0,36(sp)
80047bc4:	3c01000e 	lui	at,0xe
80047bc8:	342100ff 	ori	at,at,0xff
        if 0x323b0 <= x && x < 0xe0100 {
80047bcc:	0022082b 	sltu	at,at,v0
80047bd0:	1420fff3 	bnez	at,80047ba0 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x3dc>
80047bd4:	00000000 	nop
80047bd8:	08011ef8 	j	80047be0 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x41c>
80047bdc:	00000000 	nop
80047be0:	24010000 	li	at,0
            return false;
80047be4:	a3a0002f 	sb	zero,47(sp)
80047be8:	08011f07 	j	80047c1c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80047bec:	00000000 	nop
80047bf0:	24010001 	li	at,1
            return false;
        }
        true
80047bf4:	a3a1002f 	sb	at,47(sp)
    } else if x < 0x20000 {
80047bf8:	08011f07 	j	80047c1c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80047bfc:	00000000 	nop
80047c00:	8fa20024 	lw	v0,36(sp)
80047c04:	3c010010 	lui	at,0x10
80047c08:	3421ffff 	ori	at,at,0xffff
        if 0xe01f0 <= x && x < 0x110000 {
80047c0c:	0022082b 	sltu	at,at,v0
80047c10:	a3a1002f 	sb	at,47(sp)
80047c14:	08011f07 	j	80047c1c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80047c18:	00000000 	nop
    }
}
80047c1c:	93a1002f 	lbu	at,47(sp)
80047c20:	30220001 	andi	v0,at,0x1
80047c24:	8fbf003c 	lw	ra,60(sp)
80047c28:	27bd0040 	addiu	sp,sp,64
80047c2c:	03e00008 	jr	ra
80047c30:	00000000 	nop

80047c34 <_ZN4core7unicode12unicode_data17decode_prefix_sum17h3883e93af65b8b3cE>:
        word
    };
    (word & (1 << (needle % 64) as u64)) != 0
}

fn decode_prefix_sum(short_offset_run_header: u32) -> u32 {
80047c34:	27bdfff8 	addiu	sp,sp,-8
80047c38:	afa40004 	sw	a0,4(sp)
    short_offset_run_header & ((1 << 21) - 1)
80047c3c:	7c82a000 	ext	v0,a0,0x0,0x15
80047c40:	27bd0008 	addiu	sp,sp,8
}
80047c44:	03e00008 	jr	ra
80047c48:	00000000 	nop

80047c4c <_ZN4core7unicode12unicode_data13decode_length17h5d277b1fd55038d4E>:

fn decode_length(short_offset_run_header: u32) -> usize {
80047c4c:	27bdfff8 	addiu	sp,sp,-8
80047c50:	afa40004 	sw	a0,4(sp)
    (short_offset_run_header >> 21) as usize
80047c54:	00041542 	srl	v0,a0,0x15
80047c58:	27bd0008 	addiu	sp,sp,8
}
80047c5c:	03e00008 	jr	ra
80047c60:	00000000 	nop

80047c64 <_ZN4core7unicode12unicode_data11skip_search28_$u7b$$u7b$closure$u7d$$u7d$17hdc343340b1dfbf33E>:
    // So, we cannot have found it (i.e. Ok(idx) + 1 != length) and the correct
    // location cannot be past it, so Err(idx) != length either.
    //
    // This means that we can avoid bounds checking for the accesses below, too.
    let last_idx =
        match short_offset_runs.binary_search_by_key(&(needle << 11), |header| header << 11) {
80047c64:	27bdffe0 	addiu	sp,sp,-32
80047c68:	afbf001c 	sw	ra,28(sp)
80047c6c:	afa50010 	sw	a1,16(sp)
80047c70:	00800825 	move	at,a0
80047c74:	8fa40010 	lw	a0,16(sp)
80047c78:	afa10014 	sw	at,20(sp)
80047c7c:	afa40018 	sw	a0,24(sp)
80047c80:	3c01810a 	lui	at,0x810a
80047c84:	2426cce8 	addiu	a2,at,-13080
80047c88:	2405000b 	li	a1,11
80047c8c:	0c0123b0 	jal	80048ec0 <_ZN58_$LT$$RF$u32$u20$as$u20$core..ops..bit..Shl$LT$i32$GT$$GT$3shl17hc085b2381ec8eeb3E>
80047c90:	00000000 	nop
80047c94:	8fbf001c 	lw	ra,28(sp)
80047c98:	27bd0020 	addiu	sp,sp,32
80047c9c:	03e00008 	jr	ra
80047ca0:	00000000 	nop

80047ca4 <_ZN4core7unicode12unicode_data11skip_search28_$u7b$$u7b$closure$u7d$$u7d$17hf201449e22019ac1E>:
        decode_length(*next) - offset_idx
    } else {
        offsets.len() - offset_idx
    };
    let prev =
        last_idx.checked_sub(1).map(|prev| decode_prefix_sum(short_offset_runs[prev])).unwrap_or(0);
80047ca4:	27bdffe0 	addiu	sp,sp,-32
80047ca8:	afbf001c 	sw	ra,28(sp)
80047cac:	afa50010 	sw	a1,16(sp)
80047cb0:	afa40014 	sw	a0,20(sp)
80047cb4:	afa50018 	sw	a1,24(sp)
80047cb8:	2ca10021 	sltiu	at,a1,33
80047cbc:	1020000e 	beqz	at,80047cf8 <_ZN4core7unicode12unicode_data11skip_search28_$u7b$$u7b$closure$u7d$$u7d$17hf201449e22019ac1E+0x54>
80047cc0:	00000000 	nop
80047cc4:	08011f33 	j	80047ccc <_ZN4core7unicode12unicode_data11skip_search28_$u7b$$u7b$closure$u7d$$u7d$17hf201449e22019ac1E+0x28>
80047cc8:	00000000 	nop
80047ccc:	8fa20010 	lw	v0,16(sp)
80047cd0:	8fa10014 	lw	at,20(sp)
80047cd4:	00021080 	sll	v0,v0,0x2
80047cd8:	00220821 	addu	at,at,v0
80047cdc:	8c240000 	lw	a0,0(at)
80047ce0:	0c011f0d 	jal	80047c34 <_ZN4core7unicode12unicode_data17decode_prefix_sum17h3883e93af65b8b3cE>
80047ce4:	00000000 	nop
80047ce8:	8fbf001c 	lw	ra,28(sp)
80047cec:	27bd0020 	addiu	sp,sp,32
80047cf0:	03e00008 	jr	ra
80047cf4:	00000000 	nop
80047cf8:	8fa40010 	lw	a0,16(sp)
80047cfc:	3c01810a 	lui	at,0x810a
80047d00:	2426ccf8 	addiu	a2,at,-13064
80047d04:	24050021 	li	a1,33
80047d08:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80047d0c:	00000000 	nop

80047d10 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE>:
    *output = data;
    0..len
}

/// Escapes a character into provided buffer using `\u{NNNN}` representation.
pub(crate) fn escape_unicode_into(output: &mut [ascii::Char; 10], ch: char) -> Range<u8> {
80047d10:	27bdff28 	addiu	sp,sp,-216
80047d14:	afbf00d4 	sw	ra,212(sp)
80047d18:	afa50038 	sw	a1,56(sp)
80047d1c:	afa4003c 	sw	a0,60(sp)
80047d20:	afa400b0 	sw	a0,176(sp)
80047d24:	afa500b4 	sw	a1,180(sp)
80047d28:	2401007d 	li	at,125
    output[9] = ascii::Char::RightCurlyBracket;
80047d2c:	a3a10047 	sb	at,71(sp)
80047d30:	93a10047 	lbu	at,71(sp)
80047d34:	a0810009 	sb	at,9(a0)

    let ch = ch as u32;
80047d38:	afa500b8 	sw	a1,184(sp)
    output[3] = HEX_DIGITS[((ch >> 20) & 15) as usize];
80047d3c:	3c02810a 	lui	v0,0x810a
80047d40:	2443b4b1 	addiu	v1,v0,-19279
80047d44:	8861000f 	lwl	at,15(v1)
80047d48:	9861000c 	lwr	at,12(v1)
80047d4c:	afa10054 	sw	at,84(sp)
80047d50:	8861000b 	lwl	at,11(v1)
80047d54:	98610008 	lwr	at,8(v1)
80047d58:	afa10050 	sw	at,80(sp)
80047d5c:	88610007 	lwl	at,7(v1)
80047d60:	98610004 	lwr	at,4(v1)
80047d64:	afa1004c 	sw	at,76(sp)
80047d68:	88610003 	lwl	at,3(v1)
80047d6c:	9841b4b1 	lwr	at,-19279(v0)
80047d70:	afa10048 	sw	at,72(sp)
80047d74:	7ca11d00 	ext	at,a1,0x14,0x4
80047d78:	afa10040 	sw	at,64(sp)
80047d7c:	2c210010 	sltiu	at,at,16
80047d80:	1020001f 	beqz	at,80047e00 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0xf0>
80047d84:	00000000 	nop
80047d88:	08011f64 	j	80047d90 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x80>
80047d8c:	00000000 	nop
80047d90:	8fa10038 	lw	at,56(sp)
80047d94:	8fa3003c 	lw	v1,60(sp)
80047d98:	8fa40040 	lw	a0,64(sp)
80047d9c:	27a20048 	addiu	v0,sp,72
80047da0:	00441021 	addu	v0,v0,a0
80047da4:	90420000 	lbu	v0,0(v0)
80047da8:	a0620003 	sb	v0,3(v1)
    output[4] = HEX_DIGITS[((ch >> 16) & 15) as usize];
80047dac:	3c03810a 	lui	v1,0x810a
80047db0:	2464b4b1 	addiu	a0,v1,-19279
80047db4:	8882000f 	lwl	v0,15(a0)
80047db8:	9882000c 	lwr	v0,12(a0)
80047dbc:	afa20064 	sw	v0,100(sp)
80047dc0:	8882000b 	lwl	v0,11(a0)
80047dc4:	98820008 	lwr	v0,8(a0)
80047dc8:	afa20060 	sw	v0,96(sp)
80047dcc:	88820007 	lwl	v0,7(a0)
80047dd0:	98820004 	lwr	v0,4(a0)
80047dd4:	afa2005c 	sw	v0,92(sp)
80047dd8:	88820003 	lwl	v0,3(a0)
80047ddc:	9862b4b1 	lwr	v0,-19279(v1)
80047de0:	afa20058 	sw	v0,88(sp)
80047de4:	7c211c00 	ext	at,at,0x10,0x4
80047de8:	afa10034 	sw	at,52(sp)
80047dec:	2c210010 	sltiu	at,at,16
80047df0:	14200009 	bnez	at,80047e18 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x108>
80047df4:	00000000 	nop
80047df8:	08011fa2 	j	80047e88 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x178>
80047dfc:	00000000 	nop
    output[3] = HEX_DIGITS[((ch >> 20) & 15) as usize];
80047e00:	8fa40040 	lw	a0,64(sp)
80047e04:	3c01810a 	lui	at,0x810a
80047e08:	2426cd74 	addiu	a2,at,-12940
80047e0c:	24050010 	li	a1,16
80047e10:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80047e14:	00000000 	nop
80047e18:	8fa10038 	lw	at,56(sp)
80047e1c:	8fa3003c 	lw	v1,60(sp)
80047e20:	8fa40034 	lw	a0,52(sp)
80047e24:	27a20058 	addiu	v0,sp,88
    output[4] = HEX_DIGITS[((ch >> 16) & 15) as usize];
80047e28:	00441021 	addu	v0,v0,a0
80047e2c:	90420000 	lbu	v0,0(v0)
80047e30:	a0620004 	sb	v0,4(v1)
    output[5] = HEX_DIGITS[((ch >> 12) & 15) as usize];
80047e34:	3c03810a 	lui	v1,0x810a
80047e38:	2464b4b1 	addiu	a0,v1,-19279
80047e3c:	8882000f 	lwl	v0,15(a0)
80047e40:	9882000c 	lwr	v0,12(a0)
80047e44:	afa20074 	sw	v0,116(sp)
80047e48:	8882000b 	lwl	v0,11(a0)
80047e4c:	98820008 	lwr	v0,8(a0)
80047e50:	afa20070 	sw	v0,112(sp)
80047e54:	88820007 	lwl	v0,7(a0)
80047e58:	98820004 	lwr	v0,4(a0)
80047e5c:	afa2006c 	sw	v0,108(sp)
80047e60:	88820003 	lwl	v0,3(a0)
80047e64:	9862b4b1 	lwr	v0,-19279(v1)
80047e68:	afa20068 	sw	v0,104(sp)
80047e6c:	7c211b00 	ext	at,at,0xc,0x4
80047e70:	afa10030 	sw	at,48(sp)
80047e74:	2c210010 	sltiu	at,at,16
80047e78:	14200009 	bnez	at,80047ea0 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x190>
80047e7c:	00000000 	nop
80047e80:	08011fc4 	j	80047f10 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x200>
80047e84:	00000000 	nop
    output[4] = HEX_DIGITS[((ch >> 16) & 15) as usize];
80047e88:	8fa40034 	lw	a0,52(sp)
80047e8c:	3c01810a 	lui	at,0x810a
80047e90:	2426cd84 	addiu	a2,at,-12924
80047e94:	24050010 	li	a1,16
80047e98:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80047e9c:	00000000 	nop
80047ea0:	8fa10038 	lw	at,56(sp)
80047ea4:	8fa3003c 	lw	v1,60(sp)
80047ea8:	8fa40030 	lw	a0,48(sp)
80047eac:	27a20068 	addiu	v0,sp,104
    output[5] = HEX_DIGITS[((ch >> 12) & 15) as usize];
80047eb0:	00441021 	addu	v0,v0,a0
80047eb4:	90420000 	lbu	v0,0(v0)
80047eb8:	a0620005 	sb	v0,5(v1)
    output[6] = HEX_DIGITS[((ch >> 8) & 15) as usize];
80047ebc:	3c03810a 	lui	v1,0x810a
80047ec0:	2464b4b1 	addiu	a0,v1,-19279
80047ec4:	8882000f 	lwl	v0,15(a0)
80047ec8:	9882000c 	lwr	v0,12(a0)
80047ecc:	afa20084 	sw	v0,132(sp)
80047ed0:	8882000b 	lwl	v0,11(a0)
80047ed4:	98820008 	lwr	v0,8(a0)
80047ed8:	afa20080 	sw	v0,128(sp)
80047edc:	88820007 	lwl	v0,7(a0)
80047ee0:	98820004 	lwr	v0,4(a0)
80047ee4:	afa2007c 	sw	v0,124(sp)
80047ee8:	88820003 	lwl	v0,3(a0)
80047eec:	9862b4b1 	lwr	v0,-19279(v1)
80047ef0:	afa20078 	sw	v0,120(sp)
80047ef4:	7c211a00 	ext	at,at,0x8,0x4
80047ef8:	afa1002c 	sw	at,44(sp)
80047efc:	2c210010 	sltiu	at,at,16
80047f00:	14200009 	bnez	at,80047f28 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x218>
80047f04:	00000000 	nop
80047f08:	08011fe6 	j	80047f98 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x288>
80047f0c:	00000000 	nop
    output[5] = HEX_DIGITS[((ch >> 12) & 15) as usize];
80047f10:	8fa40030 	lw	a0,48(sp)
80047f14:	3c01810a 	lui	at,0x810a
80047f18:	2426cd94 	addiu	a2,at,-12908
80047f1c:	24050010 	li	a1,16
80047f20:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80047f24:	00000000 	nop
80047f28:	8fa10038 	lw	at,56(sp)
80047f2c:	8fa3003c 	lw	v1,60(sp)
80047f30:	8fa4002c 	lw	a0,44(sp)
80047f34:	27a20078 	addiu	v0,sp,120
    output[6] = HEX_DIGITS[((ch >> 8) & 15) as usize];
80047f38:	00441021 	addu	v0,v0,a0
80047f3c:	90420000 	lbu	v0,0(v0)
80047f40:	a0620006 	sb	v0,6(v1)
    output[7] = HEX_DIGITS[((ch >> 4) & 15) as usize];
80047f44:	3c03810a 	lui	v1,0x810a
80047f48:	2464b4b1 	addiu	a0,v1,-19279
80047f4c:	8882000f 	lwl	v0,15(a0)
80047f50:	9882000c 	lwr	v0,12(a0)
80047f54:	afa20094 	sw	v0,148(sp)
80047f58:	8882000b 	lwl	v0,11(a0)
80047f5c:	98820008 	lwr	v0,8(a0)
80047f60:	afa20090 	sw	v0,144(sp)
80047f64:	88820007 	lwl	v0,7(a0)
80047f68:	98820004 	lwr	v0,4(a0)
80047f6c:	afa2008c 	sw	v0,140(sp)
80047f70:	88820003 	lwl	v0,3(a0)
80047f74:	9862b4b1 	lwr	v0,-19279(v1)
80047f78:	afa20088 	sw	v0,136(sp)
80047f7c:	7c211900 	ext	at,at,0x4,0x4
80047f80:	afa10028 	sw	at,40(sp)
80047f84:	2c210010 	sltiu	at,at,16
80047f88:	14200009 	bnez	at,80047fb0 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x2a0>
80047f8c:	00000000 	nop
80047f90:	08012008 	j	80048020 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x310>
80047f94:	00000000 	nop
    output[6] = HEX_DIGITS[((ch >> 8) & 15) as usize];
80047f98:	8fa4002c 	lw	a0,44(sp)
80047f9c:	3c01810a 	lui	at,0x810a
80047fa0:	2426cda4 	addiu	a2,at,-12892
80047fa4:	24050010 	li	a1,16
80047fa8:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80047fac:	00000000 	nop
80047fb0:	8fa10038 	lw	at,56(sp)
80047fb4:	8fa3003c 	lw	v1,60(sp)
80047fb8:	8fa40028 	lw	a0,40(sp)
80047fbc:	27a20088 	addiu	v0,sp,136
    output[7] = HEX_DIGITS[((ch >> 4) & 15) as usize];
80047fc0:	00441021 	addu	v0,v0,a0
80047fc4:	90420000 	lbu	v0,0(v0)
80047fc8:	a0620007 	sb	v0,7(v1)
    output[8] = HEX_DIGITS[((ch >> 0) & 15) as usize];
80047fcc:	3c03810a 	lui	v1,0x810a
80047fd0:	2464b4b1 	addiu	a0,v1,-19279
80047fd4:	8882000f 	lwl	v0,15(a0)
80047fd8:	9882000c 	lwr	v0,12(a0)
80047fdc:	afa200a4 	sw	v0,164(sp)
80047fe0:	8882000b 	lwl	v0,11(a0)
80047fe4:	98820008 	lwr	v0,8(a0)
80047fe8:	afa200a0 	sw	v0,160(sp)
80047fec:	88820007 	lwl	v0,7(a0)
80047ff0:	98820004 	lwr	v0,4(a0)
80047ff4:	afa2009c 	sw	v0,156(sp)
80047ff8:	88820003 	lwl	v0,3(a0)
80047ffc:	9862b4b1 	lwr	v0,-19279(v1)
80048000:	afa20098 	sw	v0,152(sp)
80048004:	3021000f 	andi	at,at,0xf
80048008:	afa10024 	sw	at,36(sp)
8004800c:	2c210010 	sltiu	at,at,16
80048010:	14200009 	bnez	at,80048038 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x328>
80048014:	00000000 	nop
80048018:	08012022 	j	80048088 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x378>
8004801c:	00000000 	nop
    output[7] = HEX_DIGITS[((ch >> 4) & 15) as usize];
80048020:	8fa40028 	lw	a0,40(sp)
80048024:	3c01810a 	lui	at,0x810a
80048028:	2426cdb4 	addiu	a2,at,-12876
8004802c:	24050010 	li	a1,16
80048030:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80048034:	00000000 	nop
80048038:	8fa10038 	lw	at,56(sp)
8004803c:	8fa3003c 	lw	v1,60(sp)
80048040:	8fa40024 	lw	a0,36(sp)
80048044:	27a20098 	addiu	v0,sp,152
    output[8] = HEX_DIGITS[((ch >> 0) & 15) as usize];
80048048:	00441021 	addu	v0,v0,a0
8004804c:	90420000 	lbu	v0,0(v0)
80048050:	a0620008 	sb	v0,8(v1)

    // or-ing 1 ensures that for ch==0 the code computes that one digit should
    // be printed.
    let start = (ch | 1).leading_zeros() as usize / 4 - 2;
80048054:	34210001 	ori	at,at,0x1
80048058:	afa100cc 	sw	at,204(sp)
            intrinsics::ctlz(self as $ActualT) as u32
8004805c:	70210820 	clz	at,at
80048060:	afa100d0 	sw	at,208(sp)
80048064:	8fa100d0 	lw	at,208(sp)
80048068:	00010882 	srl	at,at,0x2
8004806c:	2422fffe 	addiu	v0,at,-2
80048070:	afa20020 	sw	v0,32(sp)
80048074:	2c210002 	sltiu	at,at,2
80048078:	14200034 	bnez	at,8004814c <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x43c>
8004807c:	00000000 	nop
80048080:	08012028 	j	800480a0 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x390>
80048084:	00000000 	nop
    output[8] = HEX_DIGITS[((ch >> 0) & 15) as usize];
80048088:	8fa40024 	lw	a0,36(sp)
8004808c:	3c01810a 	lui	at,0x810a
80048090:	2426cdc4 	addiu	a2,at,-12860
80048094:	24050010 	li	a1,16
80048098:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8004809c:	00000000 	nop
    let start = (ch | 1).leading_zeros() as usize / 4 - 2;
800480a0:	8fa10020 	lw	at,32(sp)
800480a4:	8fa4003c 	lw	a0,60(sp)
800480a8:	afa100bc 	sw	at,188(sp)
    const UNICODE_ESCAPE_PREFIX: &[ascii::Char; 3] = b"\\u{".as_ascii().unwrap();
    output[start..][..3].copy_from_slice(UNICODE_ESCAPE_PREFIX);
800480ac:	afa100a8 	sw	at,168(sp)
800480b0:	8fa500a8 	lw	a1,168(sp)
800480b4:	3c01810a 	lui	at,0x810a
800480b8:	2426cde4 	addiu	a2,at,-12828
800480bc:	0c00f3f7 	jal	8003cfdc <_ZN4core5array88_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$9index_mut17h64941d6709fd2000E>
800480c0:	00000000 	nop
800480c4:	00402825 	move	a1,v0
800480c8:	00603025 	move	a2,v1
800480cc:	24010003 	li	at,3
800480d0:	afa1001c 	sw	at,28(sp)
800480d4:	afa100ac 	sw	at,172(sp)
800480d8:	8fa400ac 	lw	a0,172(sp)
800480dc:	afa500c0 	sw	a1,192(sp)
800480e0:	afa600c4 	sw	a2,196(sp)
800480e4:	afa400c8 	sw	a0,200(sp)
        index.index_mut(self)
800480e8:	3c01810a 	lui	at,0x810a
800480ec:	2427cdf4 	addiu	a3,at,-12812
800480f0:	0c010f0f 	jal	80043c3c <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hcf5fb57ce5379036E>
800480f4:	00000000 	nop
800480f8:	8fa7001c 	lw	a3,28(sp)
800480fc:	00402025 	move	a0,v0
80048100:	00602825 	move	a1,v1
80048104:	3c01810a 	lui	at,0x810a
80048108:	2421ce08 	addiu	at,at,-12792
8004810c:	03a01025 	move	v0,sp
80048110:	ac410010 	sw	at,16(v0)
80048114:	3c01810a 	lui	at,0x810a
80048118:	2426ce04 	addiu	a2,at,-12796
8004811c:	0c0114df 	jal	8004537c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E>
80048120:	00000000 	nop
80048124:	8fa10020 	lw	at,32(sp)

    (start as u8)..10
80048128:	a3a10045 	sb	at,69(sp)
8004812c:	2401000a 	li	at,10
80048130:	a3a10046 	sb	at,70(sp)
}
80048134:	93a20045 	lbu	v0,69(sp)
80048138:	93a30046 	lbu	v1,70(sp)
8004813c:	8fbf00d4 	lw	ra,212(sp)
80048140:	27bd00d8 	addiu	sp,sp,216
80048144:	03e00008 	jr	ra
80048148:	00000000 	nop
    let start = (ch | 1).leading_zeros() as usize / 4 - 2;
8004814c:	3c01810a 	lui	at,0x810a
80048150:	2424cdd4 	addiu	a0,at,-12844
80048154:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80048158:	00000000 	nop

8004815c <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE>:
    // Invariant: alive.start <= alive.end <= N.
    pub(crate) alive: Range<u8>,
}

impl<const N: usize> EscapeIterInner<N> {
    pub fn new(data: [ascii::Char; N], alive: Range<u8>) -> Self {
8004815c:	27bdff98 	addiu	sp,sp,-104
80048160:	afbf0064 	sw	ra,100(sp)
80048164:	afa5001c 	sw	a1,28(sp)
80048168:	afa40020 	sw	a0,32(sp)
8004816c:	afa40024 	sw	a0,36(sp)
80048170:	a3a6002a 	sb	a2,42(sp)
80048174:	a3a7002b 	sb	a3,43(sp)
        const { assert!(N < 256) };
        debug_assert!(alive.start <= alive.end && usize::from(alive.end) <= N, "{alive:?}");
80048178:	08012060 	j	80048180 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE+0x24>
8004817c:	00000000 	nop
80048180:	93a2002a 	lbu	v0,42(sp)
80048184:	93a1002b 	lbu	at,43(sp)
80048188:	0022082b 	sltu	at,at,v0
8004818c:	1020001e 	beqz	at,80048208 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE+0xac>
80048190:	00000000 	nop
80048194:	08012067 	j	8004819c <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE+0x40>
80048198:	00000000 	nop
8004819c:	27a2002a 	addiu	v0,sp,42
800481a0:	afa2004c 	sw	v0,76(sp)
800481a4:	afa20058 	sw	v0,88(sp)
800481a8:	3c018004 	lui	at,0x8004
800481ac:	2421cc18 	addiu	at,at,-13288
800481b0:	afa1005c 	sw	at,92(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
800481b4:	afa20050 	sw	v0,80(sp)
800481b8:	afa10054 	sw	at,84(sp)
    }
800481bc:	8fa20050 	lw	v0,80(sp)
800481c0:	8fa10054 	lw	at,84(sp)
800481c4:	afa20044 	sw	v0,68(sp)
800481c8:	afa10048 	sw	at,72(sp)
800481cc:	03a00825 	move	at,sp
800481d0:	24060001 	li	a2,1
800481d4:	ac260010 	sw	a2,16(at)
800481d8:	3c01810a 	lui	at,0x810a
800481dc:	2425b730 	addiu	a1,at,-18640
800481e0:	27a4002c 	addiu	a0,sp,44
800481e4:	afa40018 	sw	a0,24(sp)
800481e8:	27a70044 	addiu	a3,sp,68
800481ec:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
800481f0:	00000000 	nop
800481f4:	8fa40018 	lw	a0,24(sp)
800481f8:	3c01810a 	lui	at,0x810a
800481fc:	2425ce18 	addiu	a1,at,-12776
80048200:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80048204:	00000000 	nop
80048208:	93a1002b 	lbu	at,43(sp)
8004820c:	a3a10063 	sb	at,99(sp)
80048210:	2c21000b 	sltiu	at,at,11
80048214:	1020ffe1 	beqz	at,8004819c <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE+0x40>
80048218:	00000000 	nop
8004821c:	08012089 	j	80048224 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE+0xc8>
80048220:	00000000 	nop
        Self { data, alive }
80048224:	8fa20024 	lw	v0,36(sp)
80048228:	8fa30020 	lw	v1,32(sp)
8004822c:	8fa7001c 	lw	a3,28(sp)
80048230:	93a4002a 	lbu	a0,42(sp)
80048234:	93a1002b 	lbu	at,43(sp)
80048238:	88e60007 	lwl	a2,7(a3)
8004823c:	98e60004 	lwr	a2,4(a3)
80048240:	a8660007 	swl	a2,7(v1)
80048244:	88e50003 	lwl	a1,3(a3)
80048248:	98e50000 	lwr	a1,0(a3)
8004824c:	a8650003 	swl	a1,3(v1)
80048250:	90e80009 	lbu	t0,9(a3)
80048254:	a0680009 	sb	t0,9(v1)
80048258:	90e70008 	lbu	a3,8(a3)
8004825c:	a0670008 	sb	a3,8(v1)
80048260:	b8660004 	swr	a2,4(v1)
80048264:	b8650000 	swr	a1,0(v1)
80048268:	a064000a 	sb	a0,10(v1)
8004826c:	a061000b 	sb	at,11(v1)
    }
80048270:	8fbf0064 	lw	ra,100(sp)
80048274:	27bd0068 	addiu	sp,sp,104
80048278:	03e00008 	jr	ra
8004827c:	00000000 	nop

80048280 <_ZN4core6escape24EscapeIterInner$LT$_$GT$10from_array17h2d26a693fb365472E>:

    pub fn from_array<const M: usize>(array: [ascii::Char; M]) -> Self {
80048280:	27bdffb8 	addiu	sp,sp,-72
80048284:	afbf0044 	sw	ra,68(sp)
80048288:	afa4001c 	sw	a0,28(sp)
8004828c:	afa40020 	sw	a0,32(sp)
80048290:	24010000 	li	at,0
80048294:	afa10018 	sw	at,24(sp)
        const { assert!(M <= N) };

        let mut data = [ascii::Char::Null; N];
80048298:	a3a00033 	sb	zero,51(sp)
8004829c:	93a10033 	lbu	at,51(sp)
800482a0:	00011200 	sll	v0,at,0x8
800482a4:	00411825 	or	v1,v0,at
800482a8:	a7a30030 	sh	v1,48(sp)
800482ac:	00011400 	sll	v0,at,0x10
800482b0:	00431025 	or	v0,v0,v1
800482b4:	00010e00 	sll	at,at,0x18
800482b8:	00220825 	or	at,at,v0
800482bc:	afa1002c 	sw	at,44(sp)
800482c0:	afa10028 	sw	at,40(sp)
        data[..M].copy_from_slice(&array);
800482c4:	afa00034 	sw	zero,52(sp)
800482c8:	8fa50034 	lw	a1,52(sp)
800482cc:	3c01810a 	lui	at,0x810a
800482d0:	2426ce28 	addiu	a2,at,-12760
800482d4:	27a40028 	addiu	a0,sp,40
800482d8:	0c00f3e5 	jal	8003cf94 <_ZN4core5array88_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$9index_mut17h3b37ece2936c0239E>
800482dc:	00000000 	nop
800482e0:	8fa70018 	lw	a3,24(sp)
800482e4:	00402025 	move	a0,v0
800482e8:	00602825 	move	a1,v1
800482ec:	3c01810a 	lui	at,0x810a
800482f0:	2421ce38 	addiu	at,at,-12744
800482f4:	03a01025 	move	v0,sp
800482f8:	ac410010 	sw	at,16(v0)
800482fc:	27a60027 	addiu	a2,sp,39
80048300:	0c0114df 	jal	8004537c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E>
80048304:	00000000 	nop
80048308:	8fa4001c 	lw	a0,28(sp)
        Self::new(data, 0..M as u8)
8004830c:	97a10030 	lhu	at,48(sp)
80048310:	a7a10040 	sh	at,64(sp)
80048314:	8fa1002c 	lw	at,44(sp)
80048318:	afa1003c 	sw	at,60(sp)
8004831c:	8fa10028 	lw	at,40(sp)
80048320:	afa10038 	sw	at,56(sp)
80048324:	a3a00042 	sb	zero,66(sp)
80048328:	a3a00043 	sb	zero,67(sp)
8004832c:	93a70043 	lbu	a3,67(sp)
80048330:	93a60042 	lbu	a2,66(sp)
80048334:	27a50038 	addiu	a1,sp,56
80048338:	0c012057 	jal	8004815c <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE>
8004833c:	00000000 	nop
80048340:	8fa20020 	lw	v0,32(sp)
    }
80048344:	8fbf0044 	lw	ra,68(sp)
80048348:	27bd0048 	addiu	sp,sp,72
8004834c:	03e00008 	jr	ra
80048350:	00000000 	nop

80048354 <_ZN4core6escape24EscapeIterInner$LT$_$GT$10from_array17hd229c07af8ede3fdE>:
    pub fn from_array<const M: usize>(array: [ascii::Char; M]) -> Self {
80048354:	27bdffb8 	addiu	sp,sp,-72
80048358:	afbf0044 	sw	ra,68(sp)
8004835c:	afa4001c 	sw	a0,28(sp)
80048360:	afa40020 	sw	a0,32(sp)
80048364:	a7a50026 	sh	a1,38(sp)
80048368:	97a10026 	lhu	at,38(sp)
8004836c:	a7a10024 	sh	at,36(sp)
80048370:	24010000 	li	at,0
        let mut data = [ascii::Char::Null; N];
80048374:	a3a00033 	sb	zero,51(sp)
80048378:	93a10033 	lbu	at,51(sp)
8004837c:	00011200 	sll	v0,at,0x8
80048380:	00411825 	or	v1,v0,at
80048384:	a7a30030 	sh	v1,48(sp)
80048388:	00011400 	sll	v0,at,0x10
8004838c:	00431025 	or	v0,v0,v1
80048390:	00010e00 	sll	at,at,0x18
80048394:	00220825 	or	at,at,v0
80048398:	afa1002c 	sw	at,44(sp)
8004839c:	afa10028 	sw	at,40(sp)
800483a0:	24010002 	li	at,2
800483a4:	afa10018 	sw	at,24(sp)
        data[..M].copy_from_slice(&array);
800483a8:	afa10034 	sw	at,52(sp)
800483ac:	8fa50034 	lw	a1,52(sp)
800483b0:	3c01810a 	lui	at,0x810a
800483b4:	2426ce28 	addiu	a2,at,-12760
800483b8:	27a40028 	addiu	a0,sp,40
800483bc:	0c00f3e5 	jal	8003cf94 <_ZN4core5array88_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$9index_mut17h3b37ece2936c0239E>
800483c0:	00000000 	nop
800483c4:	8fa70018 	lw	a3,24(sp)
800483c8:	00402025 	move	a0,v0
800483cc:	00602825 	move	a1,v1
800483d0:	3c01810a 	lui	at,0x810a
800483d4:	2421ce38 	addiu	at,at,-12744
800483d8:	03a01025 	move	v0,sp
800483dc:	ac410010 	sw	at,16(v0)
800483e0:	27a60024 	addiu	a2,sp,36
800483e4:	0c0114df 	jal	8004537c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E>
800483e8:	00000000 	nop
800483ec:	8fa10018 	lw	at,24(sp)
800483f0:	8fa4001c 	lw	a0,28(sp)
        Self::new(data, 0..M as u8)
800483f4:	97a20030 	lhu	v0,48(sp)
800483f8:	a7a20040 	sh	v0,64(sp)
800483fc:	8fa2002c 	lw	v0,44(sp)
80048400:	afa2003c 	sw	v0,60(sp)
80048404:	8fa20028 	lw	v0,40(sp)
80048408:	afa20038 	sw	v0,56(sp)
8004840c:	a3a00042 	sb	zero,66(sp)
80048410:	a3a10043 	sb	at,67(sp)
80048414:	93a70043 	lbu	a3,67(sp)
80048418:	93a60042 	lbu	a2,66(sp)
8004841c:	27a50038 	addiu	a1,sp,56
80048420:	0c012057 	jal	8004815c <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE>
80048424:	00000000 	nop
80048428:	8fa20020 	lw	v0,32(sp)
    }
8004842c:	8fbf0044 	lw	ra,68(sp)
80048430:	27bd0048 	addiu	sp,sp,72
80048434:	03e00008 	jr	ra
80048438:	00000000 	nop

8004843c <_ZN4core6escape24EscapeIterInner$LT$_$GT$3len17h46a78ba788686e9dE>:

    pub fn as_str(&self) -> &str {
        self.as_ascii().as_str()
    }

    pub fn len(&self) -> usize {
8004843c:	27bdffe0 	addiu	sp,sp,-32
80048440:	afa40018 	sw	a0,24(sp)
        usize::from(self.alive.end - self.alive.start)
80048444:	9081000b 	lbu	at,11(a0)
80048448:	9082000a 	lbu	v0,10(a0)
8004844c:	00221823 	subu	v1,at,v0
80048450:	afa30014 	sw	v1,20(sp)
80048454:	0022082b 	sltu	at,at,v0
80048458:	14200009 	bnez	at,80048480 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3len17h46a78ba788686e9dE+0x44>
8004845c:	00000000 	nop
80048460:	0801211a 	j	80048468 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3len17h46a78ba788686e9dE+0x2c>
80048464:	00000000 	nop
80048468:	8fa10014 	lw	at,20(sp)
8004846c:	a3a1001f 	sb	at,31(sp)
80048470:	302200ff 	andi	v0,at,0xff
80048474:	27bd0020 	addiu	sp,sp,32
    }
80048478:	03e00008 	jr	ra
8004847c:	00000000 	nop
        usize::from(self.alive.end - self.alive.start)
80048480:	3c01810a 	lui	at,0x810a
80048484:	2424ce48 	addiu	a0,at,-12728
80048488:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8004848c:	00000000 	nop

80048490 <_ZN4core6escape24EscapeIterInner$LT$_$GT$4next17h46da1e292175aea6E>:

    pub fn next(&mut self) -> Option<u8> {
80048490:	27bdffe0 	addiu	sp,sp,-32
80048494:	afbf001c 	sw	ra,28(sp)
80048498:	afa40010 	sw	a0,16(sp)
8004849c:	afa40018 	sw	a0,24(sp)
        self.alive.next().map(|i| self.data[usize::from(i)].to_u8())
800484a0:	2484000a 	addiu	a0,a0,10
800484a4:	0c00f7f9 	jal	8003dfe4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h452dab29ddeb92e6E>
800484a8:	00000000 	nop
800484ac:	8fa40010 	lw	a0,16(sp)
800484b0:	00602825 	move	a1,v1
800484b4:	afa40014 	sw	a0,20(sp)
800484b8:	8fa60014 	lw	a2,20(sp)
800484bc:	30440001 	andi	a0,v0,0x1
800484c0:	0c00fa42 	jal	8003e908 <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E>
800484c4:	00000000 	nop
    }
800484c8:	8fbf001c 	lw	ra,28(sp)
800484cc:	27bd0020 	addiu	sp,sp,32
800484d0:	03e00008 	jr	ra
800484d4:	00000000 	nop

800484d8 <_ZN4core6escape24EscapeIterInner$LT$_$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17haa901ecadf721869E>:
        self.alive.next().map(|i| self.data[usize::from(i)].to_u8())
800484d8:	27bdffe0 	addiu	sp,sp,-32
800484dc:	afbf001c 	sw	ra,28(sp)
800484e0:	afa40014 	sw	a0,20(sp)
800484e4:	a3a5001a 	sb	a1,26(sp)
800484e8:	a3a5001b 	sb	a1,27(sp)
800484ec:	30a100ff 	andi	at,a1,0xff
800484f0:	afa10010 	sw	at,16(sp)
800484f4:	2c21000a 	sltiu	at,at,10
800484f8:	1020000d 	beqz	at,80048530 <_ZN4core6escape24EscapeIterInner$LT$_$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17haa901ecadf721869E+0x58>
800484fc:	00000000 	nop
80048500:	08012142 	j	80048508 <_ZN4core6escape24EscapeIterInner$LT$_$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17haa901ecadf721869E+0x30>
80048504:	00000000 	nop
80048508:	8fa20010 	lw	v0,16(sp)
8004850c:	8fa10014 	lw	at,20(sp)
80048510:	00220821 	addu	at,at,v0
80048514:	90240000 	lbu	a0,0(at)
80048518:	0c00f409 	jal	8003d024 <_ZN4core5ascii10ascii_char9AsciiChar5to_u817he7dc2dbee10bd70dE>
8004851c:	00000000 	nop
80048520:	8fbf001c 	lw	ra,28(sp)
80048524:	27bd0020 	addiu	sp,sp,32
80048528:	03e00008 	jr	ra
8004852c:	00000000 	nop
80048530:	8fa40010 	lw	a0,16(sp)
80048534:	3c01810a 	lui	at,0x810a
80048538:	2426ce58 	addiu	a2,at,-12712
8004853c:	2405000a 	li	a1,10
80048540:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80048544:	00000000 	nop

80048548 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked18precondition_check17h2dffd53263e0e1a6E>:
            const fn precondition_check($($name:$ty),*) {
80048548:	27bdfff0 	addiu	sp,sp,-16
                        () => false,
8004854c:	08012155 	j	80048554 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked18precondition_check17h2dffd53263e0e1a6E+0xc>
80048550:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80048554:	3c01810a 	lui	at,0x810a
80048558:	2424ce68 	addiu	a0,at,-12696
8004855c:	2405005c 	li	a1,92
80048560:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80048564:	00000000 	nop

80048568 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E>:
        pub const fn abs(self) -> Self {
80048568:	27bdffe0 	addiu	sp,sp,-32
8004856c:	afa40010 	sw	a0,16(sp)
80048570:	afa40018 	sw	a0,24(sp)
80048574:	afa4001c 	sw	a0,28(sp)
            if self.is_negative() {
80048578:	04800007 	bltz	a0,80048598 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E+0x30>
8004857c:	00000000 	nop
80048580:	08012162 	j	80048588 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E+0x20>
80048584:	00000000 	nop
                self
80048588:	8fa10010 	lw	at,16(sp)
8004858c:	afa10014 	sw	at,20(sp)
            if self.is_negative() {
80048590:	0801216c 	j	800485b0 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E+0x48>
80048594:	00000000 	nop
80048598:	8fa10010 	lw	at,16(sp)
8004859c:	3c028000 	lui	v0,0x8000
                -self
800485a0:	1022000d 	beq	at,v0,800485d8 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E+0x70>
800485a4:	00000000 	nop
800485a8:	08012170 	j	800485c0 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E+0x58>
800485ac:	00000000 	nop
        }
800485b0:	8fa20014 	lw	v0,20(sp)
800485b4:	27bd0020 	addiu	sp,sp,32
800485b8:	03e00008 	jr	ra
800485bc:	00000000 	nop
800485c0:	8fa10010 	lw	at,16(sp)
800485c4:	24020000 	li	v0,0
                -self
800485c8:	00010823 	negu	at,at
800485cc:	afa10014 	sw	at,20(sp)
            if self.is_negative() {
800485d0:	0801216c 	j	800485b0 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E+0x48>
800485d4:	00000000 	nop
                -self
800485d8:	3c01810a 	lui	at,0x810a
800485dc:	2424cec4 	addiu	a0,at,-12604
800485e0:	0c01242b 	jal	800490ac <_ZN4core9panicking11panic_const24panic_const_neg_overflow17h933ac1df2ff681f7E>
800485e4:	00000000 	nop

800485e8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h794c6c83e98caf43E>:
        pub const fn checked_sub(self, rhs: Self) -> Option<Self> {
800485e8:	27bdffc8 	addiu	sp,sp,-56
800485ec:	afa40010 	sw	a0,16(sp)
800485f0:	afa50014 	sw	a1,20(sp)
800485f4:	afa40028 	sw	a0,40(sp)
800485f8:	afa5002c 	sw	a1,44(sp)
            let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
800485fc:	00851023 	subu	v0,a0,a1
80048600:	0085082b 	sltu	at,a0,a1
80048604:	afa20030 	sw	v0,48(sp)
80048608:	a3a10037 	sb	at,55(sp)
            (a as Self, b)
8004860c:	afa20020 	sw	v0,32(sp)
80048610:	a3a10024 	sb	at,36(sp)
        }
80048614:	8fa20020 	lw	v0,32(sp)
80048618:	afa20004 	sw	v0,4(sp)
8004861c:	93a10024 	lbu	at,36(sp)
            let (a, b) = self.overflowing_sub(rhs);
80048620:	afa20018 	sw	v0,24(sp)
80048624:	30210001 	andi	at,at,0x1
80048628:	a3a1001e 	sb	at,30(sp)
            if unlikely!(b) { None } else { Some(a) }
8004862c:	a3a1001f 	sb	at,31(sp)
80048630:	93a1001f 	lbu	at,31(sp)
80048634:	30210001 	andi	at,at,0x1
80048638:	14200009 	bnez	at,80048660 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h794c6c83e98caf43E+0x78>
8004863c:	00000000 	nop
80048640:	08012192 	j	80048648 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h794c6c83e98caf43E+0x60>
80048644:	00000000 	nop
80048648:	8fa10004 	lw	at,4(sp)
8004864c:	afa1000c 	sw	at,12(sp)
80048650:	24010001 	li	at,1
80048654:	afa10008 	sw	at,8(sp)
80048658:	0801219b 	j	8004866c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h794c6c83e98caf43E+0x84>
8004865c:	00000000 	nop
80048660:	afa00008 	sw	zero,8(sp)
80048664:	0801219b 	j	8004866c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h794c6c83e98caf43E+0x84>
80048668:	00000000 	nop
        }
8004866c:	8fa20008 	lw	v0,8(sp)
80048670:	8fa3000c 	lw	v1,12(sp)
80048674:	27bd0038 	addiu	sp,sp,56
80048678:	03e00008 	jr	ra
8004867c:	00000000 	nop

80048680 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17ha947102a5b302d14E>:
        pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
80048680:	27bdffc8 	addiu	sp,sp,-56
80048684:	afa40010 	sw	a0,16(sp)
80048688:	afa50014 	sw	a1,20(sp)
8004868c:	afa40028 	sw	a0,40(sp)
80048690:	afa5002c 	sw	a1,44(sp)
            let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
80048694:	00850019 	multu	a0,a1
80048698:	00000810 	mfhi	at
8004869c:	0001082b 	sltu	at,zero,at
800486a0:	70851002 	mul	v0,a0,a1
800486a4:	afa20030 	sw	v0,48(sp)
800486a8:	a3a10037 	sb	at,55(sp)
            (a as Self, b)
800486ac:	afa20020 	sw	v0,32(sp)
800486b0:	a3a10024 	sb	at,36(sp)
        }
800486b4:	8fa20020 	lw	v0,32(sp)
800486b8:	afa20004 	sw	v0,4(sp)
800486bc:	93a10024 	lbu	at,36(sp)
            let (a, b) = self.overflowing_mul(rhs);
800486c0:	afa20018 	sw	v0,24(sp)
800486c4:	30210001 	andi	at,at,0x1
800486c8:	a3a1001e 	sb	at,30(sp)
            if unlikely!(b) { None } else { Some(a) }
800486cc:	a3a1001f 	sb	at,31(sp)
800486d0:	93a1001f 	lbu	at,31(sp)
800486d4:	30210001 	andi	at,at,0x1
800486d8:	14200009 	bnez	at,80048700 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17ha947102a5b302d14E+0x80>
800486dc:	00000000 	nop
800486e0:	080121ba 	j	800486e8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17ha947102a5b302d14E+0x68>
800486e4:	00000000 	nop
800486e8:	8fa10004 	lw	at,4(sp)
800486ec:	afa1000c 	sw	at,12(sp)
800486f0:	24010001 	li	at,1
800486f4:	afa10008 	sw	at,8(sp)
800486f8:	080121c3 	j	8004870c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17ha947102a5b302d14E+0x8c>
800486fc:	00000000 	nop
80048700:	afa00008 	sw	zero,8(sp)
80048704:	080121c3 	j	8004870c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17ha947102a5b302d14E+0x8c>
80048708:	00000000 	nop
        }
8004870c:	8fa20008 	lw	v0,8(sp)
80048710:	8fa3000c 	lw	v1,12(sp)
80048714:	27bd0038 	addiu	sp,sp,56
80048718:	03e00008 	jr	ra
8004871c:	00000000 	nop

80048720 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E>:
        pub const fn abs_diff(self, other: Self) -> Self {
80048720:	27bdffc8 	addiu	sp,sp,-56
80048724:	afbf0034 	sw	ra,52(sp)
80048728:	afa50018 	sw	a1,24(sp)
8004872c:	afa4001c 	sw	a0,28(sp)
80048730:	afa40024 	sw	a0,36(sp)
80048734:	afa50028 	sw	a1,40(sp)
80048738:	24010001 	li	at,1
            if mem::size_of::<Self>() == 1 {
8004873c:	1420000d 	bnez	at,80048774 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0x54>
80048740:	00000000 	nop
80048744:	080121d3 	j	8004874c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0x2c>
80048748:	00000000 	nop
8004874c:	8fa1001c 	lw	at,28(sp)
80048750:	8fa20018 	lw	v0,24(sp)
80048754:	afa1002c 	sw	at,44(sp)
80048758:	afa20030 	sw	v0,48(sp)
            intrinsics::wrapping_sub(self, rhs)
8004875c:	00222023 	subu	a0,at,v0
                (self as i32).wrapping_sub(other as i32).abs() as Self
80048760:	0c01215a 	jal	80048568 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E>
80048764:	00000000 	nop
80048768:	afa20020 	sw	v0,32(sp)
            if mem::size_of::<Self>() == 1 {
8004876c:	080121e4 	j	80048790 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0x70>
80048770:	00000000 	nop
                if self < other {
80048774:	8fa1001c 	lw	at,28(sp)
80048778:	8fa20018 	lw	v0,24(sp)
8004877c:	0022082b 	sltu	at,at,v0
80048780:	14200011 	bnez	at,800487c8 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0xa8>
80048784:	00000000 	nop
80048788:	080121e9 	j	800487a4 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0x84>
8004878c:	00000000 	nop
        }
80048790:	8fa20020 	lw	v0,32(sp)
80048794:	8fbf0034 	lw	ra,52(sp)
80048798:	27bd0038 	addiu	sp,sp,56
8004879c:	03e00008 	jr	ra
800487a0:	00000000 	nop
                    self - other
800487a4:	8fa1001c 	lw	at,28(sp)
800487a8:	8fa20018 	lw	v0,24(sp)
800487ac:	00221823 	subu	v1,at,v0
800487b0:	afa30014 	sw	v1,20(sp)
800487b4:	0022082b 	sltu	at,at,v0
800487b8:	14200010 	bnez	at,800487fc <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0xdc>
800487bc:	00000000 	nop
800487c0:	080121fb 	j	800487ec <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0xcc>
800487c4:	00000000 	nop
                    other - self
800487c8:	8fa10018 	lw	at,24(sp)
800487cc:	8fa2001c 	lw	v0,28(sp)
800487d0:	00221823 	subu	v1,at,v0
800487d4:	afa30010 	sw	v1,16(sp)
800487d8:	0022082b 	sltu	at,at,v0
800487dc:	1420000f 	bnez	at,8004881c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0xfc>
800487e0:	00000000 	nop
800487e4:	08012203 	j	8004880c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0xec>
800487e8:	00000000 	nop
                    self - other
800487ec:	8fa10014 	lw	at,20(sp)
800487f0:	afa10020 	sw	at,32(sp)
                if self < other {
800487f4:	080121e4 	j	80048790 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0x70>
800487f8:	00000000 	nop
                    self - other
800487fc:	3c01810a 	lui	at,0x810a
80048800:	2424ced4 	addiu	a0,at,-12588
80048804:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80048808:	00000000 	nop
                    other - self
8004880c:	8fa10010 	lw	at,16(sp)
80048810:	afa10020 	sw	at,32(sp)
                if self < other {
80048814:	080121e4 	j	80048790 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0x70>
80048818:	00000000 	nop
                    other - self
8004881c:	3c01810a 	lui	at,0x810a
80048820:	2424ced4 	addiu	a0,at,-12588
80048824:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80048828:	00000000 	nop

8004882c <_ZN4core4hint21unreachable_unchecked18precondition_check17hfceb70dacfe74ff1E>:
            const fn precondition_check($($name:$ty),*) {
8004882c:	27bdfff0 	addiu	sp,sp,-16
        () => false
80048830:	0801220e 	j	80048838 <_ZN4core4hint21unreachable_unchecked18precondition_check17hfceb70dacfe74ff1E+0xc>
80048834:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80048838:	3c01810a 	lui	at,0x810a
8004883c:	2424cee4 	addiu	a0,at,-12572
80048840:	24050052 	li	a1,82
80048844:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80048848:	00000000 	nop

8004884c <_ZN4core4hint16assert_unchecked18precondition_check17h0b93bb2a861dbe92E>:
            const fn precondition_check($($name:$ty),*) {
8004884c:	27bdffe8 	addiu	sp,sp,-24
80048850:	a3a40017 	sb	a0,23(sp)
            (cond: bool = cond) => cond,
80048854:	14800008 	bnez	a0,80048878 <_ZN4core4hint16assert_unchecked18precondition_check17h0b93bb2a861dbe92E+0x2c>
80048858:	00000000 	nop
8004885c:	08012219 	j	80048864 <_ZN4core4hint16assert_unchecked18precondition_check17h0b93bb2a861dbe92E+0x18>
80048860:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80048864:	3c01810a 	lui	at,0x810a
80048868:	2424cf36 	addiu	a0,at,-12490
8004886c:	24050068 	li	a1,104
80048870:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80048874:	00000000 	nop
80048878:	27bd0018 	addiu	sp,sp,24
            }
8004887c:	03e00008 	jr	ra
80048880:	00000000 	nop

80048884 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E>:
            const fn precondition_check($($name:$ty),*) {
80048884:	27bdffc8 	addiu	sp,sp,-56
80048888:	afbf0034 	sw	ra,52(sp)
8004888c:	afa70014 	sw	a3,20(sp)
80048890:	afa60010 	sw	a2,16(sp)
80048894:	00a00825 	move	at,a1
80048898:	8fa50014 	lw	a1,20(sp)
8004889c:	afa10018 	sw	at,24(sp)
800488a0:	afa4001c 	sw	a0,28(sp)
800488a4:	8fa20048 	lw	v0,72(sp)
800488a8:	afa20020 	sw	v0,32(sp)
800488ac:	afa40024 	sw	a0,36(sp)
800488b0:	afa10028 	sw	at,40(sp)
800488b4:	afa6002c 	sw	a2,44(sp)
800488b8:	afa50030 	sw	a1,48(sp)
        ub_checks::is_aligned_and_not_null(src, align)
800488bc:	0c00f180 	jal	8003c600 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE>
800488c0:	00000000 	nop
800488c4:	14400008 	bnez	v0,800488e8 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E+0x64>
800488c8:	00000000 	nop
800488cc:	08012235 	j	800488d4 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E+0x50>
800488d0:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800488d4:	3c01810a 	lui	at,0x810a
800488d8:	2424cf9e 	addiu	a0,at,-12386
800488dc:	240500a6 	li	a1,166
800488e0:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800488e4:	00000000 	nop
            && ub_checks::is_aligned_and_not_null(dst, align)
800488e8:	8fa50014 	lw	a1,20(sp)
800488ec:	8fa40018 	lw	a0,24(sp)
800488f0:	0c00f180 	jal	8003c600 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE>
800488f4:	00000000 	nop
800488f8:	1040fff6 	beqz	v0,800488d4 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E+0x50>
800488fc:	00000000 	nop
80048900:	08012242 	j	80048908 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E+0x84>
80048904:	00000000 	nop
            && ub_checks::is_nonoverlapping(src, dst, size, count)
80048908:	8fa70020 	lw	a3,32(sp)
8004890c:	8fa60010 	lw	a2,16(sp)
80048910:	8fa50018 	lw	a1,24(sp)
80048914:	8fa4001c 	lw	a0,28(sp)
80048918:	0c00f1c3 	jal	8003c70c <_ZN4core9ub_checks17is_nonoverlapping17h180be23ec26219b9E>
8004891c:	00000000 	nop
80048920:	1040ffec 	beqz	v0,800488d4 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E+0x50>
80048924:	00000000 	nop
80048928:	0801224c 	j	80048930 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E+0xac>
8004892c:	00000000 	nop
            }
80048930:	8fbf0034 	lw	ra,52(sp)
80048934:	27bd0038 	addiu	sp,sp,56
80048938:	03e00008 	jr	ra
8004893c:	00000000 	nop

80048940 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr18precondition_check17hdcc3c25680e09c41E>:
            const fn precondition_check($($name:$ty),*) {
80048940:	27bdffe0 	addiu	sp,sp,-32
80048944:	afbf001c 	sw	ra,28(sp)
80048948:	afa40014 	sw	a0,20(sp)
8004894c:	afa50018 	sw	a1,24(sp)
            ) => runtime_ptr_ge(this, origin)
80048950:	0c00ef08 	jal	8003bc20 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr14runtime_ptr_ge17h2409c05d14b79ac4E>
80048954:	00000000 	nop
80048958:	14400008 	bnez	v0,8004897c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr18precondition_check17hdcc3c25680e09c41E+0x3c>
8004895c:	00000000 	nop
80048960:	0801225a 	j	80048968 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr18precondition_check17hdcc3c25680e09c41E+0x28>
80048964:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80048968:	3c01810a 	lui	at,0x810a
8004896c:	2424d044 	addiu	a0,at,-12220
80048970:	24050047 	li	a1,71
80048974:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80048978:	00000000 	nop
            }
8004897c:	8fbf001c 	lw	ra,28(sp)
80048980:	27bd0020 	addiu	sp,sp,32
80048984:	03e00008 	jr	ra
80048988:	00000000 	nop

8004898c <_ZN4core3ptr4read18precondition_check17h9e0d16367bc3bfc8E>:
            const fn precondition_check($($name:$ty),*) {
8004898c:	27bdffe0 	addiu	sp,sp,-32
80048990:	afbf001c 	sw	ra,28(sp)
80048994:	afa40014 	sw	a0,20(sp)
80048998:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
8004899c:	0c00f180 	jal	8003c600 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE>
800489a0:	00000000 	nop
800489a4:	14400008 	bnez	v0,800489c8 <_ZN4core3ptr4read18precondition_check17h9e0d16367bc3bfc8E+0x3c>
800489a8:	00000000 	nop
800489ac:	0801226d 	j	800489b4 <_ZN4core3ptr4read18precondition_check17h9e0d16367bc3bfc8E+0x28>
800489b0:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800489b4:	3c01810a 	lui	at,0x810a
800489b8:	2424d08b 	addiu	a0,at,-12149
800489bc:	24050065 	li	a1,101
800489c0:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800489c4:	00000000 	nop
            }
800489c8:	8fbf001c 	lw	ra,28(sp)
800489cc:	27bd0020 	addiu	sp,sp,32
800489d0:	03e00008 	jr	ra
800489d4:	00000000 	nop

800489d8 <_ZN4core3ptr5write18precondition_check17hf1cf4e5c013cb295E>:
            const fn precondition_check($($name:$ty),*) {
800489d8:	27bdffe0 	addiu	sp,sp,-32
800489dc:	afbf001c 	sw	ra,28(sp)
800489e0:	afa40014 	sw	a0,20(sp)
800489e4:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
800489e8:	0c00f180 	jal	8003c600 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE>
800489ec:	00000000 	nop
800489f0:	14400008 	bnez	v0,80048a14 <_ZN4core3ptr5write18precondition_check17hf1cf4e5c013cb295E+0x3c>
800489f4:	00000000 	nop
800489f8:	08012280 	j	80048a00 <_ZN4core3ptr5write18precondition_check17hf1cf4e5c013cb295E+0x28>
800489fc:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80048a00:	3c01810a 	lui	at,0x810a
80048a04:	2424d0f0 	addiu	a0,at,-12048
80048a08:	24050066 	li	a1,102
80048a0c:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80048a10:	00000000 	nop
            }
80048a14:	8fbf001c 	lw	ra,28(sp)
80048a18:	27bd0020 	addiu	sp,sp,32
80048a1c:	03e00008 	jr	ra
80048a20:	00000000 	nop

80048a24 <_ZN4core3ptr13read_volatile18precondition_check17hbf3699e138ebb66dE>:
            const fn precondition_check($($name:$ty),*) {
80048a24:	27bdffe0 	addiu	sp,sp,-32
80048a28:	afbf001c 	sw	ra,28(sp)
80048a2c:	afa40014 	sw	a0,20(sp)
80048a30:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80048a34:	0c00f180 	jal	8003c600 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE>
80048a38:	00000000 	nop
80048a3c:	14400008 	bnez	v0,80048a60 <_ZN4core3ptr13read_volatile18precondition_check17hbf3699e138ebb66dE+0x3c>
80048a40:	00000000 	nop
80048a44:	08012293 	j	80048a4c <_ZN4core3ptr13read_volatile18precondition_check17hbf3699e138ebb66dE+0x28>
80048a48:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80048a4c:	3c01810a 	lui	at,0x810a
80048a50:	2424d156 	addiu	a0,at,-11946
80048a54:	2405006e 	li	a1,110
80048a58:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80048a5c:	00000000 	nop
            }
80048a60:	8fbf001c 	lw	ra,28(sp)
80048a64:	27bd0020 	addiu	sp,sp,32
80048a68:	03e00008 	jr	ra
80048a6c:	00000000 	nop

80048a70 <_ZN60_$LT$core..cmp..Ordering$u20$as$u20$core..cmp..PartialEq$GT$2eq17hf658a71d46e80c1cE>:
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]
80048a70:	27bdfff0 	addiu	sp,sp,-16
80048a74:	afa40004 	sw	a0,4(sp)
80048a78:	afa50008 	sw	a1,8(sp)
80048a7c:	90810000 	lbu	at,0(a0)
80048a80:	a3a1000e 	sb	at,14(sp)
80048a84:	90a20000 	lbu	v0,0(a1)
80048a88:	a3a2000f 	sb	v0,15(sp)
80048a8c:	00220826 	xor	at,at,v0
80048a90:	2c220001 	sltiu	v0,at,1
80048a94:	27bd0010 	addiu	sp,sp,16
80048a98:	03e00008 	jr	ra
80048a9c:	00000000 	nop

80048aa0 <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hbdfa0bd26f3ca07fE>:
                fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
80048aa0:	27bdfff8 	addiu	sp,sp,-8
80048aa4:	afa40000 	sw	a0,0(sp)
80048aa8:	afa50004 	sw	a1,4(sp)
80048aac:	8c810000 	lw	at,0(a0)
80048ab0:	8ca20000 	lw	v0,0(a1)
80048ab4:	00220826 	xor	at,at,v0
80048ab8:	2c220001 	sltiu	v0,at,1
80048abc:	27bd0008 	addiu	sp,sp,8
80048ac0:	03e00008 	jr	ra
80048ac4:	00000000 	nop

80048ac8 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h979542bb5e2130d6E>:
80048ac8:	27bdfff8 	addiu	sp,sp,-8
80048acc:	afa40000 	sw	a0,0(sp)
80048ad0:	afa50004 	sw	a1,4(sp)
80048ad4:	90810000 	lbu	at,0(a0)
80048ad8:	90a20000 	lbu	v0,0(a1)
80048adc:	00220826 	xor	at,at,v0
80048ae0:	2c220001 	sltiu	v0,at,1
80048ae4:	27bd0008 	addiu	sp,sp,8
80048ae8:	03e00008 	jr	ra
80048aec:	00000000 	nop

80048af0 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u32$GT$2eq17hc4809db554f420ceE>:
80048af0:	27bdfff8 	addiu	sp,sp,-8
80048af4:	afa40000 	sw	a0,0(sp)
80048af8:	afa50004 	sw	a1,4(sp)
80048afc:	8c810000 	lw	at,0(a0)
80048b00:	8ca20000 	lw	v0,0(a1)
80048b04:	00220826 	xor	at,at,v0
80048b08:	2c220001 	sltiu	v0,at,1
80048b0c:	27bd0008 	addiu	sp,sp,8
80048b10:	03e00008 	jr	ra
80048b14:	00000000 	nop

80048b18 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17he219583d3b212753E>:
            }

            #[stable(feature = "rust1", since = "1.0.0")]
            impl Ord for $t {
                #[inline]
                fn cmp(&self, other: &$t) -> Ordering {
80048b18:	27bdfff8 	addiu	sp,sp,-8
80048b1c:	afa40000 	sw	a0,0(sp)
80048b20:	afa50004 	sw	a1,4(sp)
                        else if *self == *other { Equal }
                        else { Greater }
                    }
                    #[cfg(not(bootstrap))]
                    {
                        crate::intrinsics::three_way_compare(*self, *other)
80048b24:	8c820000 	lw	v0,0(a0)
80048b28:	8ca30000 	lw	v1,0(a1)
80048b2c:	0062082b 	sltu	at,v1,v0
80048b30:	0043102b 	sltu	v0,v0,v1
80048b34:	00221023 	subu	v0,at,v0
80048b38:	27bd0008 	addiu	sp,sp,8
                    }
                }
80048b3c:	03e00008 	jr	ra
80048b40:	00000000 	nop

80048b44 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u32$GT$3cmp17ha5f8b88f44088c34E>:
                fn cmp(&self, other: &$t) -> Ordering {
80048b44:	27bdfff8 	addiu	sp,sp,-8
80048b48:	afa40000 	sw	a0,0(sp)
80048b4c:	afa50004 	sw	a1,4(sp)
                        crate::intrinsics::three_way_compare(*self, *other)
80048b50:	8c820000 	lw	v0,0(a0)
80048b54:	8ca30000 	lw	v1,0(a1)
80048b58:	0062082b 	sltu	at,v1,v0
80048b5c:	0043102b 	sltu	v0,v0,v1
80048b60:	00221023 	subu	v0,at,v0
80048b64:	27bd0008 	addiu	sp,sp,8
                }
80048b68:	03e00008 	jr	ra
80048b6c:	00000000 	nop

80048b70 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Sub$GT$3sub17h90e33352f2ecaf79E>:
            type Output = $t;

            #[inline]
            #[track_caller]
            #[rustc_inherit_overflow_checks]
            fn sub(self, other: $t) -> $t { self - other }
80048b70:	27bdffe0 	addiu	sp,sp,-32
80048b74:	afa60010 	sw	a2,16(sp)
80048b78:	afa40018 	sw	a0,24(sp)
80048b7c:	afa5001c 	sw	a1,28(sp)
80048b80:	00850823 	subu	at,a0,a1
80048b84:	afa10014 	sw	at,20(sp)
80048b88:	0085082b 	sltu	at,a0,a1
80048b8c:	14200007 	bnez	at,80048bac <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Sub$GT$3sub17h90e33352f2ecaf79E+0x3c>
80048b90:	00000000 	nop
80048b94:	080122e7 	j	80048b9c <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Sub$GT$3sub17h90e33352f2ecaf79E+0x2c>
80048b98:	00000000 	nop
80048b9c:	8fa20014 	lw	v0,20(sp)
80048ba0:	27bd0020 	addiu	sp,sp,32
80048ba4:	03e00008 	jr	ra
80048ba8:	00000000 	nop
80048bac:	8fa40010 	lw	a0,16(sp)
80048bb0:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80048bb4:	00000000 	nop

80048bb8 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9d08ad2c426c5534E>:
80048bb8:	27bdffe0 	addiu	sp,sp,-32
80048bbc:	afa60014 	sw	a2,20(sp)
80048bc0:	30a200ff 	andi	v0,a1,0xff
80048bc4:	308100ff 	andi	at,a0,0xff
80048bc8:	a3a4001e 	sb	a0,30(sp)
80048bcc:	a3a5001f 	sb	a1,31(sp)
80048bd0:	00851823 	subu	v1,a0,a1
80048bd4:	afa30018 	sw	v1,24(sp)
80048bd8:	0022082b 	sltu	at,at,v0
80048bdc:	14200007 	bnez	at,80048bfc <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9d08ad2c426c5534E+0x44>
80048be0:	00000000 	nop
80048be4:	080122fb 	j	80048bec <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9d08ad2c426c5534E+0x34>
80048be8:	00000000 	nop
80048bec:	8fa20018 	lw	v0,24(sp)
80048bf0:	27bd0020 	addiu	sp,sp,32
80048bf4:	03e00008 	jr	ra
80048bf8:	00000000 	nop
80048bfc:	8fa40014 	lw	a0,20(sp)
80048c00:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80048c04:	00000000 	nop

80048c08 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9f0e833ee6c9c697E>:
80048c08:	27bdffe0 	addiu	sp,sp,-32
80048c0c:	afa60010 	sw	a2,16(sp)
80048c10:	afa40018 	sw	a0,24(sp)
80048c14:	afa5001c 	sw	a1,28(sp)
80048c18:	00850823 	subu	at,a0,a1
80048c1c:	afa10014 	sw	at,20(sp)
80048c20:	0085082b 	sltu	at,a0,a1
80048c24:	14200007 	bnez	at,80048c44 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9f0e833ee6c9c697E+0x3c>
80048c28:	00000000 	nop
80048c2c:	0801230d 	j	80048c34 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9f0e833ee6c9c697E+0x2c>
80048c30:	00000000 	nop
80048c34:	8fa20014 	lw	v0,20(sp)
80048c38:	27bd0020 	addiu	sp,sp,32
80048c3c:	03e00008 	jr	ra
80048c40:	00000000 	nop
80048c44:	8fa40010 	lw	a0,16(sp)
80048c48:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80048c4c:	00000000 	nop

80048c50 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Div$GT$3div17h9fd659e674ef8f18E>:
        impl Div for $t {
            type Output = $t;

            #[inline]
            #[track_caller]
            fn div(self, other: $t) -> $t { self / other }
80048c50:	27bdffd8 	addiu	sp,sp,-40
80048c54:	afa60014 	sw	a2,20(sp)
80048c58:	afa50018 	sw	a1,24(sp)
80048c5c:	afa4001c 	sw	a0,28(sp)
80048c60:	afa40020 	sw	a0,32(sp)
80048c64:	afa50024 	sw	a1,36(sp)
80048c68:	10a0000b 	beqz	a1,80048c98 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Div$GT$3div17h9fd659e674ef8f18E+0x48>
80048c6c:	00000000 	nop
80048c70:	0801231e 	j	80048c78 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Div$GT$3div17h9fd659e674ef8f18E+0x28>
80048c74:	00000000 	nop
80048c78:	8fa10018 	lw	at,24(sp)
80048c7c:	8fa2001c 	lw	v0,28(sp)
80048c80:	0041001b 	divu	zero,v0,at
80048c84:	002001f4 	teq	at,zero,0x7
80048c88:	00001012 	mflo	v0
80048c8c:	27bd0028 	addiu	sp,sp,40
80048c90:	03e00008 	jr	ra
80048c94:	00000000 	nop
80048c98:	8fa40014 	lw	a0,20(sp)
80048c9c:	0c012455 	jal	80049154 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
80048ca0:	00000000 	nop

80048ca4 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Div$GT$3div17h8c44f7b15731be55E>:
80048ca4:	27bdffe0 	addiu	sp,sp,-32
80048ca8:	afa60010 	sw	a2,16(sp)
80048cac:	30a100ff 	andi	at,a1,0xff
80048cb0:	00a01025 	move	v0,a1
80048cb4:	afa20014 	sw	v0,20(sp)
80048cb8:	00801025 	move	v0,a0
80048cbc:	afa20018 	sw	v0,24(sp)
80048cc0:	a3a4001e 	sb	a0,30(sp)
80048cc4:	a3a5001f 	sb	a1,31(sp)
80048cc8:	1020000d 	beqz	at,80048d00 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Div$GT$3div17h8c44f7b15731be55E+0x5c>
80048ccc:	00000000 	nop
80048cd0:	08012336 	j	80048cd8 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Div$GT$3div17h8c44f7b15731be55E+0x34>
80048cd4:	00000000 	nop
80048cd8:	8fa20018 	lw	v0,24(sp)
80048cdc:	8fa10014 	lw	at,20(sp)
80048ce0:	302100ff 	andi	at,at,0xff
80048ce4:	304200ff 	andi	v0,v0,0xff
80048ce8:	0041001b 	divu	zero,v0,at
80048cec:	002001f4 	teq	at,zero,0x7
80048cf0:	00001012 	mflo	v0
80048cf4:	27bd0020 	addiu	sp,sp,32
80048cf8:	03e00008 	jr	ra
80048cfc:	00000000 	nop
80048d00:	8fa40010 	lw	a0,16(sp)
80048d04:	0c012455 	jal	80049154 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
80048d08:	00000000 	nop

80048d0c <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Div$GT$3div17he4860b2e94c433bbE>:
80048d0c:	27bdffd8 	addiu	sp,sp,-40
80048d10:	afa60014 	sw	a2,20(sp)
80048d14:	afa50018 	sw	a1,24(sp)
80048d18:	afa4001c 	sw	a0,28(sp)
80048d1c:	afa40020 	sw	a0,32(sp)
80048d20:	afa50024 	sw	a1,36(sp)
80048d24:	10a0000b 	beqz	a1,80048d54 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Div$GT$3div17he4860b2e94c433bbE+0x48>
80048d28:	00000000 	nop
80048d2c:	0801234d 	j	80048d34 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Div$GT$3div17he4860b2e94c433bbE+0x28>
80048d30:	00000000 	nop
80048d34:	8fa10018 	lw	at,24(sp)
80048d38:	8fa2001c 	lw	v0,28(sp)
80048d3c:	0041001b 	divu	zero,v0,at
80048d40:	002001f4 	teq	at,zero,0x7
80048d44:	00001012 	mflo	v0
80048d48:	27bd0028 	addiu	sp,sp,40
80048d4c:	03e00008 	jr	ra
80048d50:	00000000 	nop
80048d54:	8fa40014 	lw	a0,20(sp)
80048d58:	0c012455 	jal	80049154 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
80048d5c:	00000000 	nop

80048d60 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Rem$GT$3rem17h9f903c597deb573bE>:
        impl Rem for $t {
            type Output = $t;

            #[inline]
            #[track_caller]
            fn rem(self, other: $t) -> $t { self % other }
80048d60:	27bdffd8 	addiu	sp,sp,-40
80048d64:	afa60014 	sw	a2,20(sp)
80048d68:	afa50018 	sw	a1,24(sp)
80048d6c:	afa4001c 	sw	a0,28(sp)
80048d70:	afa40020 	sw	a0,32(sp)
80048d74:	afa50024 	sw	a1,36(sp)
80048d78:	10a0000b 	beqz	a1,80048da8 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Rem$GT$3rem17h9f903c597deb573bE+0x48>
80048d7c:	00000000 	nop
80048d80:	08012362 	j	80048d88 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Rem$GT$3rem17h9f903c597deb573bE+0x28>
80048d84:	00000000 	nop
80048d88:	8fa10018 	lw	at,24(sp)
80048d8c:	8fa2001c 	lw	v0,28(sp)
80048d90:	0041001b 	divu	zero,v0,at
80048d94:	002001f4 	teq	at,zero,0x7
80048d98:	00001010 	mfhi	v0
80048d9c:	27bd0028 	addiu	sp,sp,40
80048da0:	03e00008 	jr	ra
80048da4:	00000000 	nop
80048da8:	8fa40014 	lw	a0,20(sp)
80048dac:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80048db0:	00000000 	nop

80048db4 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Rem$GT$3rem17hcf0699d134763680E>:
80048db4:	27bdffe0 	addiu	sp,sp,-32
80048db8:	afa60010 	sw	a2,16(sp)
80048dbc:	30a100ff 	andi	at,a1,0xff
80048dc0:	00a01025 	move	v0,a1
80048dc4:	afa20014 	sw	v0,20(sp)
80048dc8:	00801025 	move	v0,a0
80048dcc:	afa20018 	sw	v0,24(sp)
80048dd0:	a3a4001e 	sb	a0,30(sp)
80048dd4:	a3a5001f 	sb	a1,31(sp)
80048dd8:	1020000d 	beqz	at,80048e10 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Rem$GT$3rem17hcf0699d134763680E+0x5c>
80048ddc:	00000000 	nop
80048de0:	0801237a 	j	80048de8 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Rem$GT$3rem17hcf0699d134763680E+0x34>
80048de4:	00000000 	nop
80048de8:	8fa20018 	lw	v0,24(sp)
80048dec:	8fa10014 	lw	at,20(sp)
80048df0:	302100ff 	andi	at,at,0xff
80048df4:	304200ff 	andi	v0,v0,0xff
80048df8:	0041001b 	divu	zero,v0,at
80048dfc:	002001f4 	teq	at,zero,0x7
80048e00:	00001010 	mfhi	v0
80048e04:	27bd0020 	addiu	sp,sp,32
80048e08:	03e00008 	jr	ra
80048e0c:	00000000 	nop
80048e10:	8fa40010 	lw	a0,16(sp)
80048e14:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80048e18:	00000000 	nop

80048e1c <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Rem$GT$3rem17h4d9fcb1072ae4614E>:
80048e1c:	27bdffd8 	addiu	sp,sp,-40
80048e20:	afa60014 	sw	a2,20(sp)
80048e24:	afa50018 	sw	a1,24(sp)
80048e28:	afa4001c 	sw	a0,28(sp)
80048e2c:	afa40020 	sw	a0,32(sp)
80048e30:	afa50024 	sw	a1,36(sp)
80048e34:	10a0000b 	beqz	a1,80048e64 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Rem$GT$3rem17h4d9fcb1072ae4614E+0x48>
80048e38:	00000000 	nop
80048e3c:	08012391 	j	80048e44 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Rem$GT$3rem17h4d9fcb1072ae4614E+0x28>
80048e40:	00000000 	nop
80048e44:	8fa10018 	lw	at,24(sp)
80048e48:	8fa2001c 	lw	v0,28(sp)
80048e4c:	0041001b 	divu	zero,v0,at
80048e50:	002001f4 	teq	at,zero,0x7
80048e54:	00001010 	mfhi	v0
80048e58:	27bd0028 	addiu	sp,sp,40
80048e5c:	03e00008 	jr	ra
80048e60:	00000000 	nop
80048e64:	8fa40014 	lw	a0,20(sp)
80048e68:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80048e6c:	00000000 	nop

80048e70 <_ZN54_$LT$u32$u20$as$u20$core..ops..bit..Shl$LT$i32$GT$$GT$3shl17he581443b8f7136b2E>:
        impl Shl<$f> for $t {
            type Output = $t;

            #[inline]
            #[rustc_inherit_overflow_checks]
            fn shl(self, other: $f) -> $t {
80048e70:	27bdffe0 	addiu	sp,sp,-32
80048e74:	afa50010 	sw	a1,16(sp)
80048e78:	afa40014 	sw	a0,20(sp)
80048e7c:	afa40018 	sw	a0,24(sp)
80048e80:	afa5001c 	sw	a1,28(sp)
                self << other
80048e84:	2ca10020 	sltiu	at,a1,32
80048e88:	10200009 	beqz	at,80048eb0 <_ZN54_$LT$u32$u20$as$u20$core..ops..bit..Shl$LT$i32$GT$$GT$3shl17he581443b8f7136b2E+0x40>
80048e8c:	00000000 	nop
80048e90:	080123a6 	j	80048e98 <_ZN54_$LT$u32$u20$as$u20$core..ops..bit..Shl$LT$i32$GT$$GT$3shl17he581443b8f7136b2E+0x28>
80048e94:	00000000 	nop
80048e98:	8fa10014 	lw	at,20(sp)
80048e9c:	8fa20010 	lw	v0,16(sp)
80048ea0:	00411004 	sllv	v0,at,v0
80048ea4:	27bd0020 	addiu	sp,sp,32
            }
80048ea8:	03e00008 	jr	ra
80048eac:	00000000 	nop
                self << other
80048eb0:	3c01810a 	lui	at,0x810a
80048eb4:	2424d234 	addiu	a0,at,-11724
80048eb8:	0c012447 	jal	8004911c <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h6a79b323d0787a78E>
80048ebc:	00000000 	nop

80048ec0 <_ZN58_$LT$$RF$u32$u20$as$u20$core..ops..bit..Shl$LT$i32$GT$$GT$3shl17hc085b2381ec8eeb3E>:
        impl<'a> $imp<$u> for &'a $t {
            type Output = <$t as $imp<$u>>::Output;

            #[inline]
            #[track_caller]
            fn $method(self, other: $u) -> <$t as $imp<$u>>::Output {
80048ec0:	27bdffe0 	addiu	sp,sp,-32
80048ec4:	afbf001c 	sw	ra,28(sp)
80048ec8:	afa40014 	sw	a0,20(sp)
80048ecc:	afa50018 	sw	a1,24(sp)
                $imp::$method(*self, other)
80048ed0:	8c840000 	lw	a0,0(a0)
80048ed4:	0c01239c 	jal	80048e70 <_ZN54_$LT$u32$u20$as$u20$core..ops..bit..Shl$LT$i32$GT$$GT$3shl17he581443b8f7136b2E>
80048ed8:	00000000 	nop
            }
80048edc:	8fbf001c 	lw	ra,28(sp)
80048ee0:	27bd0020 	addiu	sp,sp,32
80048ee4:	03e00008 	jr	ra
80048ee8:	00000000 	nop

80048eec <_ZN4core4char7convert18from_u32_unchecked18precondition_check17h36fa9621690ca902E>:
            const fn precondition_check($($name:$ty),*) {
80048eec:	27bdffe0 	addiu	sp,sp,-32
80048ef0:	afbf001c 	sw	ra,28(sp)
80048ef4:	afa40018 	sw	a0,24(sp)
            (i: u32 = i) => char_try_from_u32(i).is_ok()
80048ef8:	0c00f487 	jal	8003d21c <_ZN4core4char7convert17char_try_from_u3217h8a0cd4dc4cb0f4a0E>
80048efc:	00000000 	nop
80048f00:	afa20014 	sw	v0,20(sp)
80048f04:	27a40014 	addiu	a0,sp,20
80048f08:	0c00fd61 	jal	8003f584 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7cdd383e0a27670eE>
80048f0c:	00000000 	nop
80048f10:	14400008 	bnez	v0,80048f34 <_ZN4core4char7convert18from_u32_unchecked18precondition_check17h36fa9621690ca902E+0x48>
80048f14:	00000000 	nop
80048f18:	080123c8 	j	80048f20 <_ZN4core4char7convert18from_u32_unchecked18precondition_check17h36fa9621690ca902E+0x34>
80048f1c:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80048f20:	3c01810a 	lui	at,0x810a
80048f24:	2424d244 	addiu	a0,at,-11708
80048f28:	24050039 	li	a1,57
80048f2c:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80048f30:	00000000 	nop
            }
80048f34:	8fbf001c 	lw	ra,28(sp)
80048f38:	27bd0020 	addiu	sp,sp,32
80048f3c:	03e00008 	jr	ra
80048f40:	00000000 	nop

80048f44 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h690f9a91247c04f4E>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
80048f44:	27bdfff0 	addiu	sp,sp,-16
80048f48:	a3a40007 	sb	a0,7(sp)
80048f4c:	afa50008 	sw	a1,8(sp)
80048f50:	a3a4000e 	sb	a0,14(sp)
80048f54:	a3a5000f 	sb	a1,15(sp)
            unsafe { intrinsics::unchecked_add(self, rhs) }
80048f58:	00851021 	addu	v0,a0,a1
80048f5c:	27bd0010 	addiu	sp,sp,16
        }
80048f60:	03e00008 	jr	ra
80048f64:	00000000 	nop

80048f68 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17heab11d2d1c4d0452E>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
80048f68:	27bdfff0 	addiu	sp,sp,-16
80048f6c:	afa40000 	sw	a0,0(sp)
80048f70:	afa50004 	sw	a1,4(sp)
80048f74:	afa40008 	sw	a0,8(sp)
80048f78:	afa5000c 	sw	a1,12(sp)
80048f7c:	00851021 	addu	v0,a0,a1
80048f80:	27bd0010 	addiu	sp,sp,16
        }
80048f84:	03e00008 	jr	ra
80048f88:	00000000 	nop

80048f8c <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum17h788a6b4423308929E>:

macro_rules! integer_sum_product {
    (@impls $zero:expr, $one:expr, #[$attr:meta], $($a:ty)*) => ($(
        #[$attr]
        impl Sum for $a {
            fn sum<I: Iterator<Item=Self>>(iter: I) -> Self {
80048f8c:	27bdffe0 	addiu	sp,sp,-32
80048f90:	afbf001c 	sw	ra,28(sp)
80048f94:	afa40014 	sw	a0,20(sp)
80048f98:	afa50018 	sw	a1,24(sp)
80048f9c:	24060000 	li	a2,0
                iter.fold(
80048fa0:	0c00f782 	jal	8003de08 <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h062a46d4e3bf2665E>
80048fa4:	00000000 	nop
                    $zero,
                    #[rustc_inherit_overflow_checks]
                    |a, b| a + b,
                )
            }
80048fa8:	8fbf001c 	lw	ra,28(sp)
80048fac:	27bd0020 	addiu	sp,sp,32
80048fb0:	03e00008 	jr	ra
80048fb4:	00000000 	nop

80048fb8 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17h91b99a5637de417fE>:
                    |a, b| a + b,
80048fb8:	27bdffe0 	addiu	sp,sp,-32
80048fbc:	afa40014 	sw	a0,20(sp)
80048fc0:	afa50018 	sw	a1,24(sp)
80048fc4:	afa6001c 	sw	a2,28(sp)
80048fc8:	00a60821 	addu	at,a1,a2
80048fcc:	afa10010 	sw	at,16(sp)
80048fd0:	0025082b 	sltu	at,at,a1
80048fd4:	14200007 	bnez	at,80048ff4 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17h91b99a5637de417fE+0x3c>
80048fd8:	00000000 	nop
80048fdc:	080123f9 	j	80048fe4 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17h91b99a5637de417fE+0x2c>
80048fe0:	00000000 	nop
80048fe4:	8fa20010 	lw	v0,16(sp)
80048fe8:	27bd0020 	addiu	sp,sp,32
80048fec:	03e00008 	jr	ra
80048ff0:	00000000 	nop
80048ff4:	3c01810a 	lui	at,0x810a
80048ff8:	2424d2f4 	addiu	a0,at,-11532
80048ffc:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80049000:	00000000 	nop

80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>:
                pub const fn $lang() -> ! {
80049004:	27bdffc8 	addiu	sp,sp,-56
80049008:	afbf0034 	sw	ra,52(sp)
8004900c:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
80049010:	3c01810a 	lui	at,0x810a
80049014:	2425b0d4 	addiu	a1,at,-20268
80049018:	27a4001c 	addiu	a0,sp,28
8004901c:	afa40014 	sw	a0,20(sp)
80049020:	24060001 	li	a2,1
80049024:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80049028:	00000000 	nop
8004902c:	8fa40014 	lw	a0,20(sp)
80049030:	8fa50018 	lw	a1,24(sp)
80049034:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80049038:	00000000 	nop

8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>:
                pub const fn $lang() -> ! {
8004903c:	27bdffc8 	addiu	sp,sp,-56
80049040:	afbf0034 	sw	ra,52(sp)
80049044:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
80049048:	3c01810a 	lui	at,0x810a
8004904c:	2425b100 	addiu	a1,at,-20224
80049050:	27a4001c 	addiu	a0,sp,28
80049054:	afa40014 	sw	a0,20(sp)
80049058:	24060001 	li	a2,1
8004905c:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80049060:	00000000 	nop
80049064:	8fa40014 	lw	a0,20(sp)
80049068:	8fa50018 	lw	a1,24(sp)
8004906c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80049070:	00000000 	nop

80049074 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>:
                pub const fn $lang() -> ! {
80049074:	27bdffc8 	addiu	sp,sp,-56
80049078:	afbf0034 	sw	ra,52(sp)
8004907c:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
80049080:	3c01810a 	lui	at,0x810a
80049084:	2425b12c 	addiu	a1,at,-20180
80049088:	27a4001c 	addiu	a0,sp,28
8004908c:	afa40014 	sw	a0,20(sp)
80049090:	24060001 	li	a2,1
80049094:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80049098:	00000000 	nop
8004909c:	8fa40014 	lw	a0,20(sp)
800490a0:	8fa50018 	lw	a1,24(sp)
800490a4:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800490a8:	00000000 	nop

800490ac <_ZN4core9panicking11panic_const24panic_const_neg_overflow17h933ac1df2ff681f7E>:
                pub const fn $lang() -> ! {
800490ac:	27bdffc8 	addiu	sp,sp,-56
800490b0:	afbf0034 	sw	ra,52(sp)
800490b4:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
800490b8:	3c01810a 	lui	at,0x810a
800490bc:	2425b154 	addiu	a1,at,-20140
800490c0:	27a4001c 	addiu	a0,sp,28
800490c4:	afa40014 	sw	a0,20(sp)
800490c8:	24060001 	li	a2,1
800490cc:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
800490d0:	00000000 	nop
800490d4:	8fa40014 	lw	a0,20(sp)
800490d8:	8fa50018 	lw	a1,24(sp)
800490dc:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800490e0:	00000000 	nop

800490e4 <_ZN4core9panicking11panic_const24panic_const_shr_overflow17h51109cf1c6739500E>:
                pub const fn $lang() -> ! {
800490e4:	27bdffc8 	addiu	sp,sp,-56
800490e8:	afbf0034 	sw	ra,52(sp)
800490ec:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
800490f0:	3c01810a 	lui	at,0x810a
800490f4:	2425b180 	addiu	a1,at,-20096
800490f8:	27a4001c 	addiu	a0,sp,28
800490fc:	afa40014 	sw	a0,20(sp)
80049100:	24060001 	li	a2,1
80049104:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80049108:	00000000 	nop
8004910c:	8fa40014 	lw	a0,20(sp)
80049110:	8fa50018 	lw	a1,24(sp)
80049114:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80049118:	00000000 	nop

8004911c <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h6a79b323d0787a78E>:
                pub const fn $lang() -> ! {
8004911c:	27bdffc8 	addiu	sp,sp,-56
80049120:	afbf0034 	sw	ra,52(sp)
80049124:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
80049128:	3c01810a 	lui	at,0x810a
8004912c:	2425b1ac 	addiu	a1,at,-20052
80049130:	27a4001c 	addiu	a0,sp,28
80049134:	afa40014 	sw	a0,20(sp)
80049138:	24060001 	li	a2,1
8004913c:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80049140:	00000000 	nop
80049144:	8fa40014 	lw	a0,20(sp)
80049148:	8fa50018 	lw	a1,24(sp)
8004914c:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80049150:	00000000 	nop

80049154 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>:
                pub const fn $lang() -> ! {
80049154:	27bdffc8 	addiu	sp,sp,-56
80049158:	afbf0034 	sw	ra,52(sp)
8004915c:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
80049160:	3c01810a 	lui	at,0x810a
80049164:	2425d320 	addiu	a1,at,-11488
80049168:	27a4001c 	addiu	a0,sp,28
8004916c:	afa40014 	sw	a0,20(sp)
80049170:	24060001 	li	a2,1
80049174:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80049178:	00000000 	nop
8004917c:	8fa40014 	lw	a0,20(sp)
80049180:	8fa50018 	lw	a1,24(sp)
80049184:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80049188:	00000000 	nop

8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>:
                pub const fn $lang() -> ! {
8004918c:	27bdffc8 	addiu	sp,sp,-56
80049190:	afbf0034 	sw	ra,52(sp)
80049194:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
80049198:	3c01810a 	lui	at,0x810a
8004919c:	2425d364 	addiu	a1,at,-11420
800491a0:	27a4001c 	addiu	a0,sp,28
800491a4:	afa40014 	sw	a0,20(sp)
800491a8:	24060001 	li	a2,1
800491ac:	0c0103d3 	jal	80040f4c <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
800491b0:	00000000 	nop
800491b4:	8fa40014 	lw	a0,20(sp)
800491b8:	8fa50018 	lw	a1,24(sp)
800491bc:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800491c0:	00000000 	nop

800491c4 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h4faa43391429b7caE>:
          fn zero() -> Self { 0 }
800491c4:	24020000 	li	v0,0
800491c8:	03e00008 	jr	ra
800491cc:	00000000 	nop

800491d0 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817hde776fb7bbe296d4E>:
          fn from_u8(u: u8) -> Self { u as Self }
800491d0:	27bdfff8 	addiu	sp,sp,-8
800491d4:	00801025 	move	v0,a0
800491d8:	a3a20007 	sb	v0,7(sp)
800491dc:	27bd0008 	addiu	sp,sp,8
800491e0:	03e00008 	jr	ra
800491e4:	00000000 	nop

800491e8 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817hdb1dd13bcbe6748fE>:
          fn to_u8(&self) -> u8 { *self as u8 }
800491e8:	27bdfff8 	addiu	sp,sp,-8
800491ec:	afa40004 	sw	a0,4(sp)
800491f0:	90820000 	lbu	v0,0(a0)
800491f4:	27bd0008 	addiu	sp,sp,8
800491f8:	03e00008 	jr	ra
800491fc:	00000000 	nop

80049200 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h37e6986c1a52507dE>:
          fn to_u32(&self) -> u32 { *self as u32 }
80049200:	27bdfff8 	addiu	sp,sp,-8
80049204:	afa40004 	sw	a0,4(sp)
80049208:	90820000 	lbu	v0,0(a0)
8004920c:	27bd0008 	addiu	sp,sp,8
80049210:	03e00008 	jr	ra
80049214:	00000000 	nop

80049218 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h82437499101b7905E>:
          fn zero() -> Self { 0 }
80049218:	24020000 	li	v0,0
8004921c:	03e00008 	jr	ra
80049220:	00000000 	nop

80049224 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817hb5a1ba67db0bffc6E>:
          fn from_u8(u: u8) -> Self { u as Self }
80049224:	27bdfff8 	addiu	sp,sp,-8
80049228:	a3a40007 	sb	a0,7(sp)
8004922c:	308200ff 	andi	v0,a0,0xff
80049230:	27bd0008 	addiu	sp,sp,8
80049234:	03e00008 	jr	ra
80049238:	00000000 	nop

8004923c <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h3cd2e303bc7c4816E>:
          fn to_u8(&self) -> u8 { *self as u8 }
8004923c:	27bdfff8 	addiu	sp,sp,-8
80049240:	afa40004 	sw	a0,4(sp)
80049244:	8c820000 	lw	v0,0(a0)
80049248:	27bd0008 	addiu	sp,sp,8
8004924c:	03e00008 	jr	ra
80049250:	00000000 	nop

80049254 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h93506426df48ccd6E>:
          fn to_u32(&self) -> u32 { *self as u32 }
80049254:	27bdfff8 	addiu	sp,sp,-8
80049258:	afa40004 	sw	a0,4(sp)
8004925c:	8c820000 	lw	v0,0(a0)
80049260:	27bd0008 	addiu	sp,sp,8
80049264:	03e00008 	jr	ra
80049268:	00000000 	nop

8004926c <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h270aff8721106dedE>:
          fn zero() -> Self { 0 }
8004926c:	24020000 	li	v0,0
80049270:	03e00008 	jr	ra
80049274:	00000000 	nop

80049278 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817h1c1cc6cf834b4db9E>:
          fn from_u8(u: u8) -> Self { u as Self }
80049278:	27bdfff8 	addiu	sp,sp,-8
8004927c:	a3a40007 	sb	a0,7(sp)
80049280:	308200ff 	andi	v0,a0,0xff
80049284:	27bd0008 	addiu	sp,sp,8
80049288:	03e00008 	jr	ra
8004928c:	00000000 	nop

80049290 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h34321a1be99db044E>:
          fn to_u8(&self) -> u8 { *self as u8 }
80049290:	27bdfff8 	addiu	sp,sp,-8
80049294:	afa40004 	sw	a0,4(sp)
80049298:	8c820000 	lw	v0,0(a0)
8004929c:	27bd0008 	addiu	sp,sp,8
800492a0:	03e00008 	jr	ra
800492a4:	00000000 	nop

800492a8 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h3480a5b3e6b033f7E>:
          fn to_u32(&self) -> u32 { *self as u32 }
800492a8:	27bdfff8 	addiu	sp,sp,-8
800492ac:	afa40004 	sw	a0,4(sp)
800492b0:	8c820000 	lw	v0,0(a0)
800492b4:	27bd0008 	addiu	sp,sp,8
800492b8:	03e00008 	jr	ra
800492bc:	00000000 	nop

800492c0 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E>:
macro_rules! radix {
    ($T:ident, $base:expr, $prefix:expr, $($x:pat => $conv:expr),+) => {
        unsafe impl GenericRadix for $T {
            const BASE: u8 = $base;
            const PREFIX: &'static str = $prefix;
            fn digit(x: u8) -> u8 {
800492c0:	27bdff78 	addiu	sp,sp,-136
800492c4:	afbf0084 	sw	ra,132(sp)
800492c8:	00800825 	move	at,a0
800492cc:	afa10028 	sw	at,40(sp)
800492d0:	a3a4005b 	sb	a0,91(sp)
800492d4:	24010001 	li	at,1
    }
}

radix! { Binary,    2, "0b", x @  0 ..=  1 => b'0' + x }
radix! { Octal,     8, "0o", x @  0 ..=  7 => b'0' + x }
radix! { LowerHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'a' + (x - 10) }
800492d8:	1420000a 	bnez	at,80049304 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x44>
800492dc:	00000000 	nop
800492e0:	080124ba 	j	800492e8 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x28>
800492e4:	00000000 	nop
800492e8:	8fa10028 	lw	at,40(sp)
800492ec:	302100ff 	andi	at,at,0xff
800492f0:	2c21000a 	sltiu	at,at,10
800492f4:	1020003b 	beqz	at,800493e4 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x124>
800492f8:	00000000 	nop
800492fc:	080124d1 	j	80049344 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x84>
80049300:	00000000 	nop
80049304:	8fa10028 	lw	at,40(sp)
80049308:	302100ff 	andi	at,at,0xff
8004930c:	2c21000a 	sltiu	at,at,10
80049310:	1020fff5 	beqz	at,800492e8 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x28>
80049314:	00000000 	nop
80049318:	080124c8 	j	80049320 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x60>
8004931c:	00000000 	nop
80049320:	8fa10028 	lw	at,40(sp)
80049324:	302100ff 	andi	at,at,0xff
80049328:	24220030 	addiu	v0,at,48
8004932c:	afa20024 	sw	v0,36(sp)
80049330:	304100ff 	andi	at,v0,0xff
80049334:	14220059 	bne	at,v0,8004949c <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x1dc>
80049338:	00000000 	nop
8004933c:	08012523 	j	8004948c <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x1cc>
80049340:	00000000 	nop
                    x => panic!("number not in the range 0..={}: {}", Self::BASE - 1, x),
80049344:	8fa10028 	lw	at,40(sp)
80049348:	a3a1002f 	sb	at,47(sp)
8004934c:	3c01810a 	lui	at,0x810a
80049350:	2422d398 	addiu	v0,at,-11368
80049354:	afa20070 	sw	v0,112(sp)
80049358:	afa2007c 	sw	v0,124(sp)
8004935c:	3c018005 	lui	at,0x8005
80049360:	24219fac 	addiu	at,at,-24660
80049364:	afa10080 	sw	at,128(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80049368:	afa20074 	sw	v0,116(sp)
8004936c:	afa10078 	sw	at,120(sp)
    }
80049370:	8fa40074 	lw	a0,116(sp)
80049374:	8fa30078 	lw	v1,120(sp)
80049378:	27a2002f 	addiu	v0,sp,47
8004937c:	afa2005c 	sw	v0,92(sp)
80049380:	afa20068 	sw	v0,104(sp)
80049384:	afa1006c 	sw	at,108(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80049388:	afa20060 	sw	v0,96(sp)
8004938c:	afa10064 	sw	at,100(sp)
    }
80049390:	8fa20060 	lw	v0,96(sp)
80049394:	8fa10064 	lw	at,100(sp)
80049398:	afa40048 	sw	a0,72(sp)
8004939c:	afa3004c 	sw	v1,76(sp)
800493a0:	afa20050 	sw	v0,80(sp)
800493a4:	afa10054 	sw	at,84(sp)
800493a8:	03a00825 	move	at,sp
800493ac:	24060002 	li	a2,2
800493b0:	ac260010 	sw	a2,16(at)
800493b4:	3c01810a 	lui	at,0x810a
800493b8:	2425d388 	addiu	a1,at,-11384
800493bc:	27a40030 	addiu	a0,sp,48
800493c0:	afa40020 	sw	a0,32(sp)
800493c4:	27a70048 	addiu	a3,sp,72
800493c8:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
800493cc:	00000000 	nop
800493d0:	8fa40020 	lw	a0,32(sp)
800493d4:	3c01810a 	lui	at,0x810a
800493d8:	2425d39c 	addiu	a1,at,-11364
800493dc:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800493e0:	00000000 	nop
radix! { LowerHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'a' + (x - 10) }
800493e4:	8fa10028 	lw	at,40(sp)
800493e8:	302100ff 	andi	at,at,0xff
800493ec:	2c210010 	sltiu	at,at,16
800493f0:	1020ffd4 	beqz	at,80049344 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x84>
800493f4:	00000000 	nop
800493f8:	08012500 	j	80049400 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x140>
800493fc:	00000000 	nop
80049400:	8fa10028 	lw	at,40(sp)
80049404:	2422fff6 	addiu	v0,at,-10
80049408:	afa2001c 	sw	v0,28(sp)
8004940c:	302100ff 	andi	at,at,0xff
80049410:	2c21000a 	sltiu	at,at,10
80049414:	1420000c 	bnez	at,80049448 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x188>
80049418:	00000000 	nop
8004941c:	08012509 	j	80049424 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x164>
80049420:	00000000 	nop
80049424:	8fa1001c 	lw	at,28(sp)
80049428:	302100ff 	andi	at,at,0xff
8004942c:	24220061 	addiu	v0,at,97
80049430:	afa20018 	sw	v0,24(sp)
80049434:	304100ff 	andi	at,v0,0xff
80049438:	1422000b 	bne	at,v0,80049468 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x1a8>
8004943c:	00000000 	nop
80049440:	08012516 	j	80049458 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x198>
80049444:	00000000 	nop
80049448:	3c01810a 	lui	at,0x810a
8004944c:	2424d3ac 	addiu	a0,at,-11348
80049450:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80049454:	00000000 	nop
80049458:	8fa10018 	lw	at,24(sp)
8004945c:	a3a1002e 	sb	at,46(sp)
                    $($x => $conv,)+
80049460:	0801251e 	j	80049478 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x1b8>
80049464:	00000000 	nop
radix! { LowerHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'a' + (x - 10) }
80049468:	3c01810a 	lui	at,0x810a
8004946c:	2424d3bc 	addiu	a0,at,-11332
80049470:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80049474:	00000000 	nop
            }
80049478:	93a2002e 	lbu	v0,46(sp)
8004947c:	8fbf0084 	lw	ra,132(sp)
80049480:	27bd0088 	addiu	sp,sp,136
80049484:	03e00008 	jr	ra
80049488:	00000000 	nop
radix! { LowerHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'a' + (x - 10) }
8004948c:	8fa10024 	lw	at,36(sp)
80049490:	a3a1002e 	sb	at,46(sp)
                    $($x => $conv,)+
80049494:	0801251e 	j	80049478 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x1b8>
80049498:	00000000 	nop
radix! { LowerHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'a' + (x - 10) }
8004949c:	3c01810a 	lui	at,0x810a
800494a0:	2424d3cc 	addiu	a0,at,-11316
800494a4:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800494a8:	00000000 	nop

800494ac <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE>:
            fn digit(x: u8) -> u8 {
800494ac:	27bdff78 	addiu	sp,sp,-136
800494b0:	afbf0084 	sw	ra,132(sp)
800494b4:	00800825 	move	at,a0
800494b8:	afa10028 	sw	at,40(sp)
800494bc:	a3a4005b 	sb	a0,91(sp)
800494c0:	24010001 	li	at,1
radix! { UpperHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'A' + (x - 10) }
800494c4:	1420000a 	bnez	at,800494f0 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x44>
800494c8:	00000000 	nop
800494cc:	08012535 	j	800494d4 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x28>
800494d0:	00000000 	nop
800494d4:	8fa10028 	lw	at,40(sp)
800494d8:	302100ff 	andi	at,at,0xff
800494dc:	2c21000a 	sltiu	at,at,10
800494e0:	1020003b 	beqz	at,800495d0 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x124>
800494e4:	00000000 	nop
800494e8:	0801254c 	j	80049530 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x84>
800494ec:	00000000 	nop
800494f0:	8fa10028 	lw	at,40(sp)
800494f4:	302100ff 	andi	at,at,0xff
800494f8:	2c21000a 	sltiu	at,at,10
800494fc:	1020fff5 	beqz	at,800494d4 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x28>
80049500:	00000000 	nop
80049504:	08012543 	j	8004950c <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x60>
80049508:	00000000 	nop
8004950c:	8fa10028 	lw	at,40(sp)
80049510:	302100ff 	andi	at,at,0xff
80049514:	24220030 	addiu	v0,at,48
80049518:	afa20024 	sw	v0,36(sp)
8004951c:	304100ff 	andi	at,v0,0xff
80049520:	14220059 	bne	at,v0,80049688 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x1dc>
80049524:	00000000 	nop
80049528:	0801259e 	j	80049678 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x1cc>
8004952c:	00000000 	nop
                    x => panic!("number not in the range 0..={}: {}", Self::BASE - 1, x),
80049530:	8fa10028 	lw	at,40(sp)
80049534:	a3a1002f 	sb	at,47(sp)
80049538:	3c01810a 	lui	at,0x810a
8004953c:	2422d398 	addiu	v0,at,-11368
80049540:	afa20070 	sw	v0,112(sp)
80049544:	afa2007c 	sw	v0,124(sp)
80049548:	3c018005 	lui	at,0x8005
8004954c:	24219fac 	addiu	at,at,-24660
80049550:	afa10080 	sw	at,128(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80049554:	afa20074 	sw	v0,116(sp)
80049558:	afa10078 	sw	at,120(sp)
    }
8004955c:	8fa40074 	lw	a0,116(sp)
80049560:	8fa30078 	lw	v1,120(sp)
80049564:	27a2002f 	addiu	v0,sp,47
80049568:	afa2005c 	sw	v0,92(sp)
8004956c:	afa20068 	sw	v0,104(sp)
80049570:	afa1006c 	sw	at,108(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80049574:	afa20060 	sw	v0,96(sp)
80049578:	afa10064 	sw	at,100(sp)
    }
8004957c:	8fa20060 	lw	v0,96(sp)
80049580:	8fa10064 	lw	at,100(sp)
80049584:	afa40048 	sw	a0,72(sp)
80049588:	afa3004c 	sw	v1,76(sp)
8004958c:	afa20050 	sw	v0,80(sp)
80049590:	afa10054 	sw	at,84(sp)
80049594:	03a00825 	move	at,sp
80049598:	24060002 	li	a2,2
8004959c:	ac260010 	sw	a2,16(at)
800495a0:	3c01810a 	lui	at,0x810a
800495a4:	2425d388 	addiu	a1,at,-11384
800495a8:	27a40030 	addiu	a0,sp,48
800495ac:	afa40020 	sw	a0,32(sp)
800495b0:	27a70048 	addiu	a3,sp,72
800495b4:	0c0103ff 	jal	80040ffc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
800495b8:	00000000 	nop
800495bc:	8fa40020 	lw	a0,32(sp)
800495c0:	3c01810a 	lui	at,0x810a
800495c4:	2425d3dc 	addiu	a1,at,-11300
800495c8:	0c00fb58 	jal	8003ed60 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800495cc:	00000000 	nop
radix! { UpperHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'A' + (x - 10) }
800495d0:	8fa10028 	lw	at,40(sp)
800495d4:	302100ff 	andi	at,at,0xff
800495d8:	2c210010 	sltiu	at,at,16
800495dc:	1020ffd4 	beqz	at,80049530 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x84>
800495e0:	00000000 	nop
800495e4:	0801257b 	j	800495ec <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x140>
800495e8:	00000000 	nop
800495ec:	8fa10028 	lw	at,40(sp)
800495f0:	2422fff6 	addiu	v0,at,-10
800495f4:	afa2001c 	sw	v0,28(sp)
800495f8:	302100ff 	andi	at,at,0xff
800495fc:	2c21000a 	sltiu	at,at,10
80049600:	1420000c 	bnez	at,80049634 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x188>
80049604:	00000000 	nop
80049608:	08012584 	j	80049610 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x164>
8004960c:	00000000 	nop
80049610:	8fa1001c 	lw	at,28(sp)
80049614:	302100ff 	andi	at,at,0xff
80049618:	24220041 	addiu	v0,at,65
8004961c:	afa20018 	sw	v0,24(sp)
80049620:	304100ff 	andi	at,v0,0xff
80049624:	1422000b 	bne	at,v0,80049654 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x1a8>
80049628:	00000000 	nop
8004962c:	08012591 	j	80049644 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x198>
80049630:	00000000 	nop
80049634:	3c01810a 	lui	at,0x810a
80049638:	2424d3ec 	addiu	a0,at,-11284
8004963c:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80049640:	00000000 	nop
80049644:	8fa10018 	lw	at,24(sp)
80049648:	a3a1002e 	sb	at,46(sp)
                    $($x => $conv,)+
8004964c:	08012599 	j	80049664 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x1b8>
80049650:	00000000 	nop
radix! { UpperHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'A' + (x - 10) }
80049654:	3c01810a 	lui	at,0x810a
80049658:	2424d3fc 	addiu	a0,at,-11268
8004965c:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80049660:	00000000 	nop
            }
80049664:	93a2002e 	lbu	v0,46(sp)
80049668:	8fbf0084 	lw	ra,132(sp)
8004966c:	27bd0088 	addiu	sp,sp,136
80049670:	03e00008 	jr	ra
80049674:	00000000 	nop
radix! { UpperHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'A' + (x - 10) }
80049678:	8fa10024 	lw	at,36(sp)
8004967c:	a3a1002e 	sb	at,46(sp)
                    $($x => $conv,)+
80049680:	08012599 	j	80049664 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x1b8>
80049684:	00000000 	nop
radix! { UpperHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'A' + (x - 10) }
80049688:	3c01810a 	lui	at,0x810a
8004968c:	2424d40c 	addiu	a0,at,-11252
80049690:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80049694:	00000000 	nop

80049698 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17ha9c952a2178178e1E>:

macro_rules! int_base {
    (fmt::$Trait:ident for $T:ident as $U:ident -> $Radix:ident) => {
        #[stable(feature = "rust1", since = "1.0.0")]
        impl fmt::$Trait for $T {
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80049698:	27bdffe0 	addiu	sp,sp,-32
8004969c:	afbf001c 	sw	ra,28(sp)
800496a0:	00a03025 	move	a2,a1
800496a4:	afa40014 	sw	a0,20(sp)
800496a8:	afa60018 	sw	a2,24(sp)
                $Radix.fmt_int(*self as $U, f)
800496ac:	8c850000 	lw	a1,0(a0)
800496b0:	3c01810a 	lui	at,0x810a
800496b4:	2424b0b8 	addiu	a0,at,-20296
800496b8:	0c00ffc6 	jal	8003ff18 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E>
800496bc:	00000000 	nop
            }
800496c0:	8fbf001c 	lw	ra,28(sp)
800496c4:	27bd0020 	addiu	sp,sp,32
800496c8:	03e00008 	jr	ra
800496cc:	00000000 	nop

800496d0 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17hfaf75d7b2ba6aa03E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
800496d0:	27bdffe0 	addiu	sp,sp,-32
800496d4:	afbf001c 	sw	ra,28(sp)
800496d8:	00a03025 	move	a2,a1
800496dc:	afa40014 	sw	a0,20(sp)
800496e0:	afa60018 	sw	a2,24(sp)
                $Radix.fmt_int(*self as $U, f)
800496e4:	8c850000 	lw	a1,0(a0)
800496e8:	3c01810a 	lui	at,0x810a
800496ec:	2424b0b8 	addiu	a0,at,-20296
800496f0:	0c0101b8 	jal	800406e0 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE>
800496f4:	00000000 	nop
            }
800496f8:	8fbf001c 	lw	ra,28(sp)
800496fc:	27bd0020 	addiu	sp,sp,32
80049700:	03e00008 	jr	ra
80049704:	00000000 	nop

80049708 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h58d0fe377f333152E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80049708:	27bdffe0 	addiu	sp,sp,-32
8004970c:	afbf001c 	sw	ra,28(sp)
80049710:	00a03025 	move	a2,a1
80049714:	afa40014 	sw	a0,20(sp)
80049718:	afa60018 	sw	a2,24(sp)
                $Radix.fmt_int(*self as $U, f)
8004971c:	90850000 	lbu	a1,0(a0)
80049720:	3c01810a 	lui	at,0x810a
80049724:	2424b0b8 	addiu	a0,at,-20296
80049728:	0c00fecd 	jal	8003fb34 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE>
8004972c:	00000000 	nop
            }
80049730:	8fbf001c 	lw	ra,28(sp)
80049734:	27bd0020 	addiu	sp,sp,32
80049738:	03e00008 	jr	ra
8004973c:	00000000 	nop

80049740 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h86e3a1b67e1742acE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80049740:	27bdffe0 	addiu	sp,sp,-32
80049744:	afbf001c 	sw	ra,28(sp)
80049748:	00a03025 	move	a2,a1
8004974c:	afa40014 	sw	a0,20(sp)
80049750:	afa60018 	sw	a2,24(sp)
                $Radix.fmt_int(*self as $U, f)
80049754:	90850000 	lbu	a1,0(a0)
80049758:	3c01810a 	lui	at,0x810a
8004975c:	2424b0b8 	addiu	a0,at,-20296
80049760:	0c0100bf 	jal	800402fc <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE>
80049764:	00000000 	nop
            }
80049768:	8fbf001c 	lw	ra,28(sp)
8004976c:	27bd0020 	addiu	sp,sp,32
80049770:	03e00008 	jr	ra
80049774:	00000000 	nop

80049778 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17hb2027a54af880faeE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80049778:	27bdffe0 	addiu	sp,sp,-32
8004977c:	afbf001c 	sw	ra,28(sp)
80049780:	00a03025 	move	a2,a1
80049784:	afa40014 	sw	a0,20(sp)
80049788:	afa60018 	sw	a2,24(sp)
                $Radix.fmt_int(*self as $U, f)
8004978c:	8c850000 	lw	a1,0(a0)
80049790:	3c01810a 	lui	at,0x810a
80049794:	2424b0b8 	addiu	a0,at,-20296
80049798:	0c0102b1 	jal	80040ac4 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E>
8004979c:	00000000 	nop
            }
800497a0:	8fbf001c 	lw	ra,28(sp)
800497a4:	27bd0020 	addiu	sp,sp,32
800497a8:	03e00008 	jr	ra
800497ac:	00000000 	nop

800497b0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E>:
macro_rules! debug {
    ($($T:ident)*) => {$(
        #[stable(feature = "rust1", since = "1.0.0")]
        impl fmt::Debug for $T {
            #[inline]
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
800497b0:	27bdffd8 	addiu	sp,sp,-40
800497b4:	afbf0024 	sw	ra,36(sp)
800497b8:	afa50010 	sw	a1,16(sp)
800497bc:	00800825 	move	at,a0
800497c0:	8fa40010 	lw	a0,16(sp)
800497c4:	afa10014 	sw	at,20(sp)
800497c8:	afa1001c 	sw	at,28(sp)
800497cc:	afa40020 	sw	a0,32(sp)
                if f.debug_lower_hex() {
800497d0:	0c010ac0 	jal	80042b00 <_ZN4core3fmt9Formatter15debug_lower_hex17h09a19bcedc4d5af7E>
800497d4:	00000000 	nop
800497d8:	1440000a 	bnez	v0,80049804 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E+0x54>
800497dc:	00000000 	nop
800497e0:	080125fa 	j	800497e8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E+0x38>
800497e4:	00000000 	nop
                    fmt::LowerHex::fmt(self, f)
                } else if f.debug_upper_hex() {
800497e8:	8fa40010 	lw	a0,16(sp)
800497ec:	0c010ac8 	jal	80042b20 <_ZN4core3fmt9Formatter15debug_upper_hex17h021fe51b661c830dE>
800497f0:	00000000 	nop
800497f4:	14400011 	bnez	v0,8004983c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E+0x8c>
800497f8:	00000000 	nop
800497fc:	08012608 	j	80049820 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E+0x70>
80049800:	00000000 	nop
                    fmt::LowerHex::fmt(self, f)
80049804:	8fa50010 	lw	a1,16(sp)
80049808:	8fa40014 	lw	a0,20(sp)
8004980c:	0c0125c2 	jal	80049708 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h58d0fe377f333152E>
80049810:	00000000 	nop
80049814:	a3a2001b 	sb	v0,27(sp)
80049818:	08012616 	j	80049858 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E+0xa8>
8004981c:	00000000 	nop
                    fmt::UpperHex::fmt(self, f)
                } else {
                    fmt::Display::fmt(self, f)
80049820:	8fa50010 	lw	a1,16(sp)
80049824:	8fa40014 	lw	a0,20(sp)
80049828:	0c0127eb 	jal	80049fac <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h3260c0ca39427d61E>
8004982c:	00000000 	nop
80049830:	a3a2001b 	sb	v0,27(sp)
80049834:	08012616 	j	80049858 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E+0xa8>
80049838:	00000000 	nop
                    fmt::UpperHex::fmt(self, f)
8004983c:	8fa50010 	lw	a1,16(sp)
80049840:	8fa40014 	lw	a0,20(sp)
80049844:	0c0125d0 	jal	80049740 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h86e3a1b67e1742acE>
80049848:	00000000 	nop
8004984c:	a3a2001b 	sb	v0,27(sp)
80049850:	08012616 	j	80049858 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E+0xa8>
80049854:	00000000 	nop
                }
            }
80049858:	93a1001b 	lbu	at,27(sp)
8004985c:	30220001 	andi	v0,at,0x1
80049860:	8fbf0024 	lw	ra,36(sp)
80049864:	27bd0028 	addiu	sp,sp,40
80049868:	03e00008 	jr	ra
8004986c:	00000000 	nop

80049870 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80049870:	27bdffd8 	addiu	sp,sp,-40
80049874:	afbf0024 	sw	ra,36(sp)
80049878:	afa50010 	sw	a1,16(sp)
8004987c:	00800825 	move	at,a0
80049880:	8fa40010 	lw	a0,16(sp)
80049884:	afa10014 	sw	at,20(sp)
80049888:	afa1001c 	sw	at,28(sp)
8004988c:	afa40020 	sw	a0,32(sp)
                if f.debug_lower_hex() {
80049890:	0c010ac0 	jal	80042b00 <_ZN4core3fmt9Formatter15debug_lower_hex17h09a19bcedc4d5af7E>
80049894:	00000000 	nop
80049898:	1440000a 	bnez	v0,800498c4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E+0x54>
8004989c:	00000000 	nop
800498a0:	0801262a 	j	800498a8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E+0x38>
800498a4:	00000000 	nop
                } else if f.debug_upper_hex() {
800498a8:	8fa40010 	lw	a0,16(sp)
800498ac:	0c010ac8 	jal	80042b20 <_ZN4core3fmt9Formatter15debug_upper_hex17h021fe51b661c830dE>
800498b0:	00000000 	nop
800498b4:	14400011 	bnez	v0,800498fc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E+0x8c>
800498b8:	00000000 	nop
800498bc:	08012638 	j	800498e0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E+0x70>
800498c0:	00000000 	nop
                    fmt::LowerHex::fmt(self, f)
800498c4:	8fa50010 	lw	a1,16(sp)
800498c8:	8fa40014 	lw	a0,20(sp)
800498cc:	0c0125a6 	jal	80049698 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17ha9c952a2178178e1E>
800498d0:	00000000 	nop
800498d4:	a3a2001b 	sb	v0,27(sp)
800498d8:	08012646 	j	80049918 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E+0xa8>
800498dc:	00000000 	nop
                    fmt::Display::fmt(self, f)
800498e0:	8fa50010 	lw	a1,16(sp)
800498e4:	8fa40014 	lw	a0,20(sp)
800498e8:	0c01283d 	jal	8004a0f4 <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h5a8a6dbd9db1e804E>
800498ec:	00000000 	nop
800498f0:	a3a2001b 	sb	v0,27(sp)
800498f4:	08012646 	j	80049918 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E+0xa8>
800498f8:	00000000 	nop
                    fmt::UpperHex::fmt(self, f)
800498fc:	8fa50010 	lw	a1,16(sp)
80049900:	8fa40014 	lw	a0,20(sp)
80049904:	0c0125b4 	jal	800496d0 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17hfaf75d7b2ba6aa03E>
80049908:	00000000 	nop
8004990c:	a3a2001b 	sb	v0,27(sp)
80049910:	08012646 	j	80049918 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E+0xa8>
80049914:	00000000 	nop
            }
80049918:	93a1001b 	lbu	at,27(sp)
8004991c:	30220001 	andi	v0,at,0x1
80049920:	8fbf0024 	lw	ra,36(sp)
80049924:	27bd0028 	addiu	sp,sp,40
80049928:	03e00008 	jr	ra
8004992c:	00000000 	nop

80049930 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E>:
      6061626364656667686970717273747576777879\
      8081828384858687888990919293949596979899";

macro_rules! impl_Display {
    ($($t:ident),* as $u:ident via $conv_fn:ident named $name:ident) => {
        fn $name(mut n: $u, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80049930:	27bdfe80 	addiu	sp,sp,-384
80049934:	afbf017c 	sw	ra,380(sp)
80049938:	afa6006c 	sw	a2,108(sp)
8004993c:	00a00825 	move	at,a1
80049940:	afa10070 	sw	at,112(sp)
80049944:	afa40080 	sw	a0,128(sp)
80049948:	a3a500b7 	sb	a1,183(sp)
8004994c:	afa600b8 	sw	a2,184(sp)
            // 2^128 is about 3*10^38, so 39 gives an extra byte of space
            let mut buf = [MaybeUninit::<u8>::uninit(); 39];
80049950:	93a50113 	lbu	a1,275(sp)
80049954:	27a40085 	addiu	a0,sp,133
80049958:	afa40074 	sw	a0,116(sp)
8004995c:	24060027 	li	a2,39
80049960:	afa60078 	sw	a2,120(sp)
80049964:	0c00dba8 	jal	80036ea0 <memset>
80049968:	00000000 	nop
8004996c:	8fa10074 	lw	at,116(sp)
            let mut curr = buf.len();
80049970:	8fa20078 	lw	v0,120(sp)
80049974:	afa200ac 	sw	v0,172(sp)
80049978:	afa10114 	sw	at,276(sp)
8004997c:	afa20118 	sw	v0,280(sp)
80049980:	afa10174 	sw	at,372(sp)
80049984:	afa20178 	sw	v0,376(sp)
            let buf_ptr = MaybeUninit::slice_as_mut_ptr(&mut buf);
80049988:	afa100bc 	sw	at,188(sp)
            let lut_ptr = DEC_DIGITS_LUT.as_ptr();
8004998c:	3c01810a 	lui	at,0x810a
80049990:	8c21bbb8 	lw	at,-17480(at)
80049994:	afa1007c 	sw	at,124(sp)
80049998:	afa1016c 	sw	at,364(sp)
8004999c:	240200c8 	li	v0,200
800499a0:	afa20170 	sw	v0,368(sp)
800499a4:	afa100c0 	sw	at,192(sp)
800499a8:	24010001 	li	at,1
            // each step this is kept the same as `n` is divided. Since `n` is always
            // non-negative, this means that `curr > 0` so `buf_ptr[curr..curr + 1]`
            // is safe to access.
            unsafe {
                // need at least 16 bits for the 4-characters-at-a-time to work.
                assert!(crate::mem::size_of::<$u>() >= 2);
800499ac:	1420000a 	bnez	at,800499d8 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0xa8>
800499b0:	00000000 	nop
800499b4:	0801266f 	j	800499bc <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x8c>
800499b8:	00000000 	nop
800499bc:	3c01810a 	lui	at,0x810a
800499c0:	2424d41c 	addiu	a0,at,-11236
800499c4:	3c01810a 	lui	at,0x810a
800499c8:	2426d450 	addiu	a2,at,-11184
800499cc:	24050033 	li	a1,51
800499d0:	0c00fb9f 	jal	8003ee7c <_ZN4core9panicking5panic17h32a569da5456796dE>
800499d4:	00000000 	nop

                // eagerly decode 4 characters at a time
                while n >= 10000 {
800499d8:	8fa10080 	lw	at,128(sp)
800499dc:	2c212710 	sltiu	at,at,10000
800499e0:	1020000b 	beqz	at,80049a10 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0xe0>
800499e4:	00000000 	nop
800499e8:	0801267c 	j	800499f0 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0xc0>
800499ec:	00000000 	nop
                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
                    ptr::copy_nonoverlapping(lut_ptr.add(d2), buf_ptr.add(curr + 2), 2);
                }

                // if we reach here numbers are <= 9999, so at most 4 chars long
                let mut n = n as usize; // possibly reduce 64bit math
800499f0:	8fa10080 	lw	at,128(sp)
800499f4:	afa100b0 	sw	at,176(sp)

                // decode 2 more chars, if > 2 chars
                if n >= 100 {
800499f8:	8fa100b0 	lw	at,176(sp)
800499fc:	2c210064 	sltiu	at,at,100
80049a00:	10200030 	beqz	at,80049ac4 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x194>
80049a04:	00000000 	nop
80049a08:	080126ab 	j	80049aac <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x17c>
80049a0c:	00000000 	nop
                    let rem = (n % 10000) as usize;
80049a10:	8fa10080 	lw	at,128(sp)
80049a14:	3c02d1b7 	lui	v0,0xd1b7
80049a18:	34431759 	ori	v1,v0,0x1759
80049a1c:	00230019 	multu	at,v1
80049a20:	00001010 	mfhi	v0
80049a24:	00021342 	srl	v0,v0,0xd
80049a28:	24042710 	li	a0,10000
80049a2c:	70441002 	mul	v0,v0,a0
80049a30:	00220823 	subu	at,at,v0
80049a34:	afa100d4 	sw	at,212(sp)
                    n /= 10000;
80049a38:	8fa20080 	lw	v0,128(sp)
80049a3c:	00430019 	multu	v0,v1
80049a40:	00001010 	mfhi	v0
80049a44:	00021342 	srl	v0,v0,0xd
80049a48:	afa20080 	sw	v0,128(sp)
80049a4c:	3c02028f 	lui	v0,0x28f
80049a50:	34425c29 	ori	v0,v0,0x5c29
                    let d2 = (rem % 100) << 1;
80049a54:	00220019 	multu	at,v0
80049a58:	00001010 	mfhi	v0
                    let d1 = (rem / 100) << 1;
80049a5c:	00021840 	sll	v1,v0,0x1
80049a60:	afa30060 	sw	v1,96(sp)
80049a64:	afa300d8 	sw	v1,216(sp)
                    let d2 = (rem % 100) << 1;
80049a68:	00022140 	sll	a0,v0,0x5
80049a6c:	00021880 	sll	v1,v0,0x2
80049a70:	00641823 	subu	v1,v1,a0
80049a74:	000211c0 	sll	v0,v0,0x7
80049a78:	00431021 	addu	v0,v0,v1
80049a7c:	00220823 	subu	at,at,v0
80049a80:	00010840 	sll	at,at,0x1
80049a84:	afa10064 	sw	at,100(sp)
80049a88:	afa100dc 	sw	at,220(sp)
                    curr -= 4;
80049a8c:	8fa100ac 	lw	at,172(sp)
80049a90:	2422fffc 	addiu	v0,at,-4
80049a94:	afa20068 	sw	v0,104(sp)
80049a98:	2c210004 	sltiu	at,at,4
80049a9c:	14200117 	bnez	at,80049efc <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x5cc>
80049aa0:	00000000 	nop
80049aa4:	08012788 	j	80049e20 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x4f0>
80049aa8:	00000000 	nop
                    curr -= 2;
                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
                }

                // decode last 1 or 2 chars
                if n < 10 {
80049aac:	8fa100b0 	lw	at,176(sp)
80049ab0:	2c21000a 	sltiu	at,at,10
80049ab4:	1420005c 	bnez	at,80049c28 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x2f8>
80049ab8:	00000000 	nop
80049abc:	080126fe 	j	80049bf8 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x2c8>
80049ac0:	00000000 	nop
                    let d1 = (n % 100) << 1;
80049ac4:	8fa100b0 	lw	at,176(sp)
80049ac8:	3c0251eb 	lui	v0,0x51eb
80049acc:	3442851f 	ori	v0,v0,0x851f
80049ad0:	00220019 	multu	at,v0
80049ad4:	00001810 	mfhi	v1
80049ad8:	3c047fff 	lui	a0,0x7fff
80049adc:	3484ffe0 	ori	a0,a0,0xffe0
80049ae0:	00642824 	and	a1,v1,a0
80049ae4:	00031942 	srl	v1,v1,0x5
80049ae8:	00032080 	sll	a0,v1,0x2
80049aec:	00852023 	subu	a0,a0,a1
80049af0:	000319c0 	sll	v1,v1,0x7
80049af4:	00641821 	addu	v1,v1,a0
80049af8:	00230823 	subu	at,at,v1
80049afc:	00010840 	sll	at,at,0x1
80049b00:	afa10058 	sw	at,88(sp)
80049b04:	afa100c4 	sw	at,196(sp)
                    n /= 100;
80049b08:	8fa100b0 	lw	at,176(sp)
80049b0c:	00220019 	multu	at,v0
80049b10:	00000810 	mfhi	at
80049b14:	00010942 	srl	at,at,0x5
80049b18:	afa100b0 	sw	at,176(sp)
                    curr -= 2;
80049b1c:	8fa100ac 	lw	at,172(sp)
80049b20:	2422fffe 	addiu	v0,at,-2
80049b24:	afa2005c 	sw	v0,92(sp)
80049b28:	2c210002 	sltiu	at,at,2
80049b2c:	1420002e 	bnez	at,80049be8 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x2b8>
80049b30:	00000000 	nop
80049b34:	080126cf 	j	80049b3c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x20c>
80049b38:	00000000 	nop
80049b3c:	8fa1007c 	lw	at,124(sp)
80049b40:	8fa20058 	lw	v0,88(sp)
80049b44:	8fa3005c 	lw	v1,92(sp)
80049b48:	afa300ac 	sw	v1,172(sp)
80049b4c:	afa10134 	sw	at,308(sp)
80049b50:	afa20138 	sw	v0,312(sp)
        unsafe { intrinsics::offset(self, count) }
80049b54:	00221021 	addu	v0,at,v0
80049b58:	afa20050 	sw	v0,80(sp)
                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
80049b5c:	8fa300ac 	lw	v1,172(sp)
80049b60:	27a10085 	addiu	at,sp,133
80049b64:	afa10164 	sw	at,356(sp)
80049b68:	afa30168 	sw	v1,360(sp)
80049b6c:	00230821 	addu	at,at,v1
80049b70:	afa10054 	sw	at,84(sp)
80049b74:	afa20104 	sw	v0,260(sp)
80049b78:	afa10108 	sw	at,264(sp)
80049b7c:	24010002 	li	at,2
80049b80:	afa1010c 	sw	at,268(sp)
    ub_checks::assert_unsafe_precondition!(
80049b84:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80049b88:	00000000 	nop
80049b8c:	1040000e 	beqz	v0,80049bc8 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x298>
80049b90:	00000000 	nop
80049b94:	080126e7 	j	80049b9c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x26c>
80049b98:	00000000 	nop
80049b9c:	8fa50054 	lw	a1,84(sp)
80049ba0:	8fa40050 	lw	a0,80(sp)
80049ba4:	03a01025 	move	v0,sp
80049ba8:	24010002 	li	at,2
80049bac:	ac410010 	sw	at,16(v0)
80049bb0:	24070001 	li	a3,1
80049bb4:	00e03025 	move	a2,a3
80049bb8:	0c012221 	jal	80048884 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E>
80049bbc:	00000000 	nop
80049bc0:	080126f2 	j	80049bc8 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x298>
80049bc4:	00000000 	nop
    unsafe { copy_nonoverlapping(src, dst, count) }
80049bc8:	8fa20054 	lw	v0,84(sp)
80049bcc:	8fa10050 	lw	at,80(sp)
80049bd0:	90230001 	lbu	v1,1(at)
80049bd4:	a0430001 	sb	v1,1(v0)
80049bd8:	90210000 	lbu	at,0(at)
80049bdc:	a0410000 	sb	at,0(v0)
80049be0:	080126ab 	j	80049aac <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x17c>
80049be4:	00000000 	nop
                    curr -= 2;
80049be8:	3c01810a 	lui	at,0x810a
80049bec:	2424d450 	addiu	a0,at,-11184
80049bf0:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80049bf4:	00000000 	nop
                    curr -= 1;
                    *buf_ptr.add(curr) = (n as u8) + b'0';
                } else {
                    let d1 = n << 1;
80049bf8:	8fa100b0 	lw	at,176(sp)
80049bfc:	00010840 	sll	at,at,0x1
80049c00:	afa10048 	sw	at,72(sp)
80049c04:	afa100c8 	sw	at,200(sp)
                    curr -= 2;
80049c08:	8fa100ac 	lw	at,172(sp)
80049c0c:	2422fffe 	addiu	v0,at,-2
80049c10:	afa2004c 	sw	v0,76(sp)
80049c14:	2c210002 	sltiu	at,at,2
80049c18:	14200035 	bnez	at,80049cf0 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x3c0>
80049c1c:	00000000 	nop
80049c20:	08012711 	j	80049c44 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x314>
80049c24:	00000000 	nop
                    curr -= 1;
80049c28:	8fa100ac 	lw	at,172(sp)
80049c2c:	2422ffff 	addiu	v0,at,-1
80049c30:	afa20044 	sw	v0,68(sp)
80049c34:	1020004b 	beqz	at,80049d64 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x434>
80049c38:	00000000 	nop
80049c3c:	0801274f 	j	80049d3c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x40c>
80049c40:	00000000 	nop
                    curr -= 2;
80049c44:	8fa1007c 	lw	at,124(sp)
80049c48:	8fa20048 	lw	v0,72(sp)
80049c4c:	8fa3004c 	lw	v1,76(sp)
80049c50:	afa300ac 	sw	v1,172(sp)
80049c54:	afa1012c 	sw	at,300(sp)
80049c58:	afa20130 	sw	v0,304(sp)
80049c5c:	00221021 	addu	v0,at,v0
80049c60:	afa2003c 	sw	v0,60(sp)
                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
80049c64:	8fa300ac 	lw	v1,172(sp)
80049c68:	27a10085 	addiu	at,sp,133
80049c6c:	afa1015c 	sw	at,348(sp)
80049c70:	afa30160 	sw	v1,352(sp)
80049c74:	00230821 	addu	at,at,v1
80049c78:	afa10040 	sw	at,64(sp)
80049c7c:	afa200f8 	sw	v0,248(sp)
80049c80:	afa100fc 	sw	at,252(sp)
80049c84:	24010002 	li	at,2
80049c88:	afa10100 	sw	at,256(sp)
    ub_checks::assert_unsafe_precondition!(
80049c8c:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80049c90:	00000000 	nop
80049c94:	1040000e 	beqz	v0,80049cd0 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x3a0>
80049c98:	00000000 	nop
80049c9c:	08012729 	j	80049ca4 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x374>
80049ca0:	00000000 	nop
80049ca4:	8fa50040 	lw	a1,64(sp)
80049ca8:	8fa4003c 	lw	a0,60(sp)
80049cac:	03a01025 	move	v0,sp
80049cb0:	24010002 	li	at,2
80049cb4:	ac410010 	sw	at,16(v0)
80049cb8:	24070001 	li	a3,1
80049cbc:	00e03025 	move	a2,a3
80049cc0:	0c012221 	jal	80048884 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E>
80049cc4:	00000000 	nop
80049cc8:	08012734 	j	80049cd0 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x3a0>
80049ccc:	00000000 	nop
    unsafe { copy_nonoverlapping(src, dst, count) }
80049cd0:	8fa20040 	lw	v0,64(sp)
80049cd4:	8fa1003c 	lw	at,60(sp)
80049cd8:	90230001 	lbu	v1,1(at)
80049cdc:	a0430001 	sb	v1,1(v0)
80049ce0:	90210000 	lbu	at,0(at)
80049ce4:	a0410000 	sb	at,0(v0)
80049ce8:	08012740 	j	80049d00 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x3d0>
80049cec:	00000000 	nop
                    curr -= 2;
80049cf0:	3c01810a 	lui	at,0x810a
80049cf4:	2424d450 	addiu	a0,at,-11184
80049cf8:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80049cfc:	00000000 	nop

            // SAFETY: `curr` > 0 (since we made `buf` large enough), and all the chars are valid
            // UTF-8 since `DEC_DIGITS_LUT` is
            let buf_slice = unsafe {
                str::from_utf8_unchecked(
                    slice::from_raw_parts(buf_ptr.add(curr), buf.len() - curr))
80049d00:	8fa200ac 	lw	v0,172(sp)
80049d04:	27a10085 	addiu	at,sp,133
80049d08:	afa1014c 	sw	at,332(sp)
80049d0c:	afa20150 	sw	v0,336(sp)
80049d10:	00220821 	addu	at,at,v0
80049d14:	afa10034 	sw	at,52(sp)
80049d18:	8fa100ac 	lw	at,172(sp)
80049d1c:	24020027 	li	v0,39
80049d20:	00411023 	subu	v0,v0,at
80049d24:	afa20038 	sw	v0,56(sp)
80049d28:	2c210028 	sltiu	at,at,40
80049d2c:	10200038 	beqz	at,80049e10 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x4e0>
80049d30:	00000000 	nop
80049d34:	0801276a 	j	80049da8 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x478>
80049d38:	00000000 	nop
                    curr -= 1;
80049d3c:	8fa10044 	lw	at,68(sp)
80049d40:	afa100ac 	sw	at,172(sp)
                    *buf_ptr.add(curr) = (n as u8) + b'0';
80049d44:	93a100b0 	lbu	at,176(sp)
80049d48:	24220030 	addiu	v0,at,48
80049d4c:	afa20030 	sw	v0,48(sp)
80049d50:	304100ff 	andi	at,v0,0xff
80049d54:	14220010 	bne	at,v0,80049d98 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x468>
80049d58:	00000000 	nop
80049d5c:	0801275d 	j	80049d74 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x444>
80049d60:	00000000 	nop
                    curr -= 1;
80049d64:	3c01810a 	lui	at,0x810a
80049d68:	2424d450 	addiu	a0,at,-11184
80049d6c:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80049d70:	00000000 	nop
                    *buf_ptr.add(curr) = (n as u8) + b'0';
80049d74:	8fa10030 	lw	at,48(sp)
80049d78:	8fa300ac 	lw	v1,172(sp)
80049d7c:	27a20085 	addiu	v0,sp,133
80049d80:	afa20154 	sw	v0,340(sp)
80049d84:	afa30158 	sw	v1,344(sp)
80049d88:	00431021 	addu	v0,v0,v1
80049d8c:	a0410000 	sb	at,0(v0)
                if n < 10 {
80049d90:	08012740 	j	80049d00 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x3d0>
80049d94:	00000000 	nop
                    *buf_ptr.add(curr) = (n as u8) + b'0';
80049d98:	3c01810a 	lui	at,0x810a
80049d9c:	2424d450 	addiu	a0,at,-11184
80049da0:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80049da4:	00000000 	nop
                    slice::from_raw_parts(buf_ptr.add(curr), buf.len() - curr))
80049da8:	8fa50038 	lw	a1,56(sp)
80049dac:	8fa40034 	lw	a0,52(sp)
80049db0:	0c011180 	jal	80044600 <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
80049db4:	00000000 	nop
80049db8:	00402025 	move	a0,v0
80049dbc:	00602825 	move	a1,v1
                str::from_utf8_unchecked(
80049dc0:	0c0115fe 	jal	800457f8 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>
80049dc4:	00000000 	nop
80049dc8:	8fa10070 	lw	at,112(sp)
80049dcc:	8fa4006c 	lw	a0,108(sp)
80049dd0:	00602825 	move	a1,v1
80049dd4:	afa200cc 	sw	v0,204(sp)
80049dd8:	afa500d0 	sw	a1,208(sp)
            };
            f.pad_integral(is_nonnegative, "", buf_slice)
80049ddc:	03a01825 	move	v1,sp
80049de0:	ac650014 	sw	a1,20(v1)
80049de4:	ac620010 	sw	v0,16(v1)
80049de8:	30250001 	andi	a1,at,0x1
80049dec:	3c01810a 	lui	at,0x810a
80049df0:	2426b0b8 	addiu	a2,at,-20296
80049df4:	24070000 	li	a3,0
80049df8:	0c0106e3 	jal	80041b8c <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E>
80049dfc:	00000000 	nop
        }
80049e00:	8fbf017c 	lw	ra,380(sp)
80049e04:	27bd0180 	addiu	sp,sp,384
80049e08:	03e00008 	jr	ra
80049e0c:	00000000 	nop
                    slice::from_raw_parts(buf_ptr.add(curr), buf.len() - curr))
80049e10:	3c01810a 	lui	at,0x810a
80049e14:	2424d450 	addiu	a0,at,-11184
80049e18:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80049e1c:	00000000 	nop
                    curr -= 4;
80049e20:	8fa1007c 	lw	at,124(sp)
80049e24:	8fa20060 	lw	v0,96(sp)
80049e28:	8fa30068 	lw	v1,104(sp)
80049e2c:	afa300ac 	sw	v1,172(sp)
80049e30:	afa10124 	sw	at,292(sp)
80049e34:	afa20128 	sw	v0,296(sp)
80049e38:	00221021 	addu	v0,at,v0
80049e3c:	afa20028 	sw	v0,40(sp)
                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
80049e40:	8fa300ac 	lw	v1,172(sp)
80049e44:	27a10085 	addiu	at,sp,133
80049e48:	afa10144 	sw	at,324(sp)
80049e4c:	afa30148 	sw	v1,328(sp)
80049e50:	00230821 	addu	at,at,v1
80049e54:	afa1002c 	sw	at,44(sp)
80049e58:	afa200ec 	sw	v0,236(sp)
80049e5c:	afa100f0 	sw	at,240(sp)
80049e60:	24010002 	li	at,2
80049e64:	afa100f4 	sw	at,244(sp)
    ub_checks::assert_unsafe_precondition!(
80049e68:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80049e6c:	00000000 	nop
80049e70:	1040000e 	beqz	v0,80049eac <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x57c>
80049e74:	00000000 	nop
80049e78:	080127a0 	j	80049e80 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x550>
80049e7c:	00000000 	nop
80049e80:	8fa5002c 	lw	a1,44(sp)
80049e84:	8fa40028 	lw	a0,40(sp)
80049e88:	03a01025 	move	v0,sp
80049e8c:	24010002 	li	at,2
80049e90:	ac410010 	sw	at,16(v0)
80049e94:	24070001 	li	a3,1
80049e98:	00e03025 	move	a2,a3
80049e9c:	0c012221 	jal	80048884 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E>
80049ea0:	00000000 	nop
80049ea4:	080127ab 	j	80049eac <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x57c>
80049ea8:	00000000 	nop
    unsafe { copy_nonoverlapping(src, dst, count) }
80049eac:	8fa1007c 	lw	at,124(sp)
80049eb0:	8fa20064 	lw	v0,100(sp)
80049eb4:	8fa4002c 	lw	a0,44(sp)
80049eb8:	8fa30028 	lw	v1,40(sp)
80049ebc:	90650001 	lbu	a1,1(v1)
80049ec0:	a0850001 	sb	a1,1(a0)
80049ec4:	90630000 	lbu	v1,0(v1)
80049ec8:	a0830000 	sb	v1,0(a0)
80049ecc:	afa1011c 	sw	at,284(sp)
80049ed0:	afa20120 	sw	v0,288(sp)
80049ed4:	00220821 	addu	at,at,v0
80049ed8:	afa10020 	sw	at,32(sp)
                    ptr::copy_nonoverlapping(lut_ptr.add(d2), buf_ptr.add(curr + 2), 2);
80049edc:	8fa200ac 	lw	v0,172(sp)
80049ee0:	24410002 	addiu	at,v0,2
80049ee4:	afa10024 	sw	at,36(sp)
80049ee8:	0022082b 	sltu	at,at,v0
80049eec:	1420002b 	bnez	at,80049f9c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x66c>
80049ef0:	00000000 	nop
80049ef4:	080127c3 	j	80049f0c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x5dc>
80049ef8:	00000000 	nop
                    curr -= 4;
80049efc:	3c01810a 	lui	at,0x810a
80049f00:	2424d450 	addiu	a0,at,-11184
80049f04:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80049f08:	00000000 	nop
80049f0c:	8fa20020 	lw	v0,32(sp)
80049f10:	8fa30024 	lw	v1,36(sp)
80049f14:	27a10085 	addiu	at,sp,133
80049f18:	afa1013c 	sw	at,316(sp)
80049f1c:	afa30140 	sw	v1,320(sp)
80049f20:	00230821 	addu	at,at,v1
80049f24:	afa1001c 	sw	at,28(sp)
80049f28:	afa200e0 	sw	v0,224(sp)
80049f2c:	afa100e4 	sw	at,228(sp)
80049f30:	24010002 	li	at,2
80049f34:	afa100e8 	sw	at,232(sp)
    ub_checks::assert_unsafe_precondition!(
80049f38:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80049f3c:	00000000 	nop
80049f40:	1040000e 	beqz	v0,80049f7c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x64c>
80049f44:	00000000 	nop
80049f48:	080127d4 	j	80049f50 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x620>
80049f4c:	00000000 	nop
80049f50:	8fa5001c 	lw	a1,28(sp)
80049f54:	8fa40020 	lw	a0,32(sp)
80049f58:	03a01025 	move	v0,sp
80049f5c:	24010002 	li	at,2
80049f60:	ac410010 	sw	at,16(v0)
80049f64:	24070001 	li	a3,1
80049f68:	00e03025 	move	a2,a3
80049f6c:	0c012221 	jal	80048884 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E>
80049f70:	00000000 	nop
80049f74:	080127df 	j	80049f7c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x64c>
80049f78:	00000000 	nop
    unsafe { copy_nonoverlapping(src, dst, count) }
80049f7c:	8fa2001c 	lw	v0,28(sp)
80049f80:	8fa10020 	lw	at,32(sp)
80049f84:	90230001 	lbu	v1,1(at)
80049f88:	a0430001 	sb	v1,1(v0)
80049f8c:	90210000 	lbu	at,0(at)
80049f90:	a0410000 	sb	at,0(v0)
                    ptr::copy_nonoverlapping(lut_ptr.add(d2), buf_ptr.add(curr + 2), 2);
80049f94:	08012676 	j	800499d8 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0xa8>
80049f98:	00000000 	nop
80049f9c:	3c01810a 	lui	at,0x810a
80049fa0:	2424d450 	addiu	a0,at,-11184
80049fa4:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80049fa8:	00000000 	nop

80049fac <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h3260c0ca39427d61E>:

        $(#[stable(feature = "rust1", since = "1.0.0")]
        impl fmt::Display for $t {
            #[allow(unused_comparisons)]
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80049fac:	27bdffc8 	addiu	sp,sp,-56
80049fb0:	afbf0034 	sw	ra,52(sp)
80049fb4:	afa50010 	sw	a1,16(sp)
80049fb8:	afa40014 	sw	a0,20(sp)
80049fbc:	afa40020 	sw	a0,32(sp)
80049fc0:	afa50024 	sw	a1,36(sp)
80049fc4:	24010001 	li	at,1
80049fc8:	afa10018 	sw	at,24(sp)
                let is_nonnegative = *self >= 0;
80049fcc:	a3a1002b 	sb	at,43(sp)
                let n = if is_nonnegative {
80049fd0:	1420000f 	bnez	at,8004a010 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h3260c0ca39427d61E+0x64>
80049fd4:	00000000 	nop
80049fd8:	080127f8 	j	80049fe0 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h3260c0ca39427d61E+0x34>
80049fdc:	00000000 	nop
                    self.$conv_fn()
                } else {
                    // convert the negative num to positive by summing 1 to it's 2 complement
                    (!self.$conv_fn()).wrapping_add(1)
80049fe0:	8fa40014 	lw	a0,20(sp)
80049fe4:	0c012480 	jal	80049200 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h37e6986c1a52507dE>
80049fe8:	00000000 	nop
80049fec:	00400827 	nor	at,v0,zero
80049ff0:	afa1002c 	sw	at,44(sp)
80049ff4:	24010001 	li	at,1
80049ff8:	afa10030 	sw	at,48(sp)
80049ffc:	24010000 	li	at,0
            intrinsics::wrapping_add(self, rhs)
8004a000:	00020823 	negu	at,v0
8004a004:	afa1001c 	sw	at,28(sp)
8004a008:	0801280a 	j	8004a028 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h3260c0ca39427d61E+0x7c>
8004a00c:	00000000 	nop
                    self.$conv_fn()
8004a010:	8fa40014 	lw	a0,20(sp)
8004a014:	0c012480 	jal	80049200 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h37e6986c1a52507dE>
8004a018:	00000000 	nop
8004a01c:	afa2001c 	sw	v0,28(sp)
8004a020:	0801280a 	j	8004a028 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h3260c0ca39427d61E+0x7c>
8004a024:	00000000 	nop
                };
                $name(n, is_nonnegative, f)
8004a028:	8fa60010 	lw	a2,16(sp)
8004a02c:	8fa10018 	lw	at,24(sp)
8004a030:	8fa4001c 	lw	a0,28(sp)
8004a034:	30250001 	andi	a1,at,0x1
8004a038:	0c01264c 	jal	80049930 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E>
8004a03c:	00000000 	nop
            }
8004a040:	8fbf0034 	lw	ra,52(sp)
8004a044:	27bd0038 	addiu	sp,sp,56
8004a048:	03e00008 	jr	ra
8004a04c:	00000000 	nop

8004a050 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hb86930f88adb910cE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8004a050:	27bdffc8 	addiu	sp,sp,-56
8004a054:	afbf0034 	sw	ra,52(sp)
8004a058:	afa50010 	sw	a1,16(sp)
8004a05c:	afa40014 	sw	a0,20(sp)
8004a060:	afa40020 	sw	a0,32(sp)
8004a064:	afa50024 	sw	a1,36(sp)
8004a068:	24010001 	li	at,1
8004a06c:	afa10018 	sw	at,24(sp)
                let is_nonnegative = *self >= 0;
8004a070:	a3a1002b 	sb	at,43(sp)
                let n = if is_nonnegative {
8004a074:	1420000f 	bnez	at,8004a0b4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hb86930f88adb910cE+0x64>
8004a078:	00000000 	nop
8004a07c:	08012821 	j	8004a084 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hb86930f88adb910cE+0x34>
8004a080:	00000000 	nop
                    (!self.$conv_fn()).wrapping_add(1)
8004a084:	8fa40014 	lw	a0,20(sp)
8004a088:	0c012495 	jal	80049254 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h93506426df48ccd6E>
8004a08c:	00000000 	nop
8004a090:	00400827 	nor	at,v0,zero
8004a094:	afa1002c 	sw	at,44(sp)
8004a098:	24010001 	li	at,1
8004a09c:	afa10030 	sw	at,48(sp)
8004a0a0:	24010000 	li	at,0
8004a0a4:	00020823 	negu	at,v0
8004a0a8:	afa1001c 	sw	at,28(sp)
8004a0ac:	08012833 	j	8004a0cc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hb86930f88adb910cE+0x7c>
8004a0b0:	00000000 	nop
                    self.$conv_fn()
8004a0b4:	8fa40014 	lw	a0,20(sp)
8004a0b8:	0c012495 	jal	80049254 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h93506426df48ccd6E>
8004a0bc:	00000000 	nop
8004a0c0:	afa2001c 	sw	v0,28(sp)
8004a0c4:	08012833 	j	8004a0cc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hb86930f88adb910cE+0x7c>
8004a0c8:	00000000 	nop
                $name(n, is_nonnegative, f)
8004a0cc:	8fa60010 	lw	a2,16(sp)
8004a0d0:	8fa10018 	lw	at,24(sp)
8004a0d4:	8fa4001c 	lw	a0,28(sp)
8004a0d8:	30250001 	andi	a1,at,0x1
8004a0dc:	0c01264c 	jal	80049930 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E>
8004a0e0:	00000000 	nop
            }
8004a0e4:	8fbf0034 	lw	ra,52(sp)
8004a0e8:	27bd0038 	addiu	sp,sp,56
8004a0ec:	03e00008 	jr	ra
8004a0f0:	00000000 	nop

8004a0f4 <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h5a8a6dbd9db1e804E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8004a0f4:	27bdffc8 	addiu	sp,sp,-56
8004a0f8:	afbf0034 	sw	ra,52(sp)
8004a0fc:	afa50010 	sw	a1,16(sp)
8004a100:	afa40014 	sw	a0,20(sp)
8004a104:	afa40020 	sw	a0,32(sp)
8004a108:	afa50024 	sw	a1,36(sp)
8004a10c:	24010001 	li	at,1
8004a110:	afa10018 	sw	at,24(sp)
                let is_nonnegative = *self >= 0;
8004a114:	a3a1002b 	sb	at,43(sp)
                let n = if is_nonnegative {
8004a118:	1420000f 	bnez	at,8004a158 <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h5a8a6dbd9db1e804E+0x64>
8004a11c:	00000000 	nop
8004a120:	0801284a 	j	8004a128 <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h5a8a6dbd9db1e804E+0x34>
8004a124:	00000000 	nop
                    (!self.$conv_fn()).wrapping_add(1)
8004a128:	8fa40014 	lw	a0,20(sp)
8004a12c:	0c0124aa 	jal	800492a8 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h3480a5b3e6b033f7E>
8004a130:	00000000 	nop
8004a134:	00400827 	nor	at,v0,zero
8004a138:	afa1002c 	sw	at,44(sp)
8004a13c:	24010001 	li	at,1
8004a140:	afa10030 	sw	at,48(sp)
8004a144:	24010000 	li	at,0
8004a148:	00020823 	negu	at,v0
8004a14c:	afa1001c 	sw	at,28(sp)
8004a150:	0801285c 	j	8004a170 <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h5a8a6dbd9db1e804E+0x7c>
8004a154:	00000000 	nop
                    self.$conv_fn()
8004a158:	8fa40014 	lw	a0,20(sp)
8004a15c:	0c0124aa 	jal	800492a8 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h3480a5b3e6b033f7E>
8004a160:	00000000 	nop
8004a164:	afa2001c 	sw	v0,28(sp)
8004a168:	0801285c 	j	8004a170 <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h5a8a6dbd9db1e804E+0x7c>
8004a16c:	00000000 	nop
                $name(n, is_nonnegative, f)
8004a170:	8fa60010 	lw	a2,16(sp)
8004a174:	8fa10018 	lw	at,24(sp)
8004a178:	8fa4001c 	lw	a0,28(sp)
8004a17c:	30250001 	andi	a1,at,0x1
8004a180:	0c01264c 	jal	80049930 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E>
8004a184:	00000000 	nop
            }
8004a188:	8fbf0034 	lw	ra,52(sp)
8004a18c:	27bd0038 	addiu	sp,sp,56
8004a190:	03e00008 	jr	ra
8004a194:	00000000 	nop

8004a198 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5af29f73f3b1363cE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
8004a198:	27bdffe0 	addiu	sp,sp,-32
8004a19c:	afbf001c 	sw	ra,28(sp)
8004a1a0:	afa40014 	sw	a0,20(sp)
8004a1a4:	afa50018 	sw	a1,24(sp)
8004a1a8:	8c840000 	lw	a0,0(a0)
8004a1ac:	0c01261c 	jal	80049870 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E>
8004a1b0:	00000000 	nop
8004a1b4:	8fbf001c 	lw	ra,28(sp)
8004a1b8:	27bd0020 	addiu	sp,sp,32
8004a1bc:	03e00008 	jr	ra
8004a1c0:	00000000 	nop

8004a1c4 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9f79e7c41db63aa5E>:
8004a1c4:	27bdffe0 	addiu	sp,sp,-32
8004a1c8:	afbf001c 	sw	ra,28(sp)
8004a1cc:	00800825 	move	at,a0
8004a1d0:	afa10014 	sw	at,20(sp)
8004a1d4:	afa50018 	sw	a1,24(sp)
8004a1d8:	8c240000 	lw	a0,0(at)
8004a1dc:	8c210004 	lw	at,4(at)
8004a1e0:	8c39000c 	lw	t9,12(at)
8004a1e4:	0320f809 	jalr	t9
8004a1e8:	00000000 	nop
8004a1ec:	8fbf001c 	lw	ra,28(sp)
8004a1f0:	27bd0020 	addiu	sp,sp,32
8004a1f4:	03e00008 	jr	ra
8004a1f8:	00000000 	nop

8004a1fc <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17ha51c6bd69265b845E>:
8004a1fc:	27bdffe0 	addiu	sp,sp,-32
8004a200:	afbf001c 	sw	ra,28(sp)
8004a204:	00a03025 	move	a2,a1
8004a208:	00800825 	move	at,a0
8004a20c:	afa10014 	sw	at,20(sp)
8004a210:	afa60018 	sw	a2,24(sp)
8004a214:	8c240000 	lw	a0,0(at)
8004a218:	8c250004 	lw	a1,4(at)
8004a21c:	0c010be1 	jal	80042f84 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h9fa5bfb18ba922eeE>
8004a220:	00000000 	nop
8004a224:	8fbf001c 	lw	ra,28(sp)
8004a228:	27bd0020 	addiu	sp,sp,32
8004a22c:	03e00008 	jr	ra
8004a230:	00000000 	nop

8004a234 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1ff0c4beaf99429fE>:
            const fn precondition_check($($name:$ty),*) {
8004a234:	27bdffe8 	addiu	sp,sp,-24
8004a238:	afa40010 	sw	a0,16(sp)
8004a23c:	afa50014 	sw	a1,20(sp)
            (this: usize = self, len: usize = slice.len()) => this < len
8004a240:	0085082b 	sltu	at,a0,a1
8004a244:	14200008 	bnez	at,8004a268 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1ff0c4beaf99429fE+0x34>
8004a248:	00000000 	nop
8004a24c:	08012895 	j	8004a254 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1ff0c4beaf99429fE+0x20>
8004a250:	00000000 	nop
                    ::core::panicking::panic_nounwind(
8004a254:	3c01810a 	lui	at,0x810a
8004a258:	2424d460 	addiu	a0,at,-11168
8004a25c:	24050061 	li	a1,97
8004a260:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8004a264:	00000000 	nop
8004a268:	27bd0018 	addiu	sp,sp,24
            }
8004a26c:	03e00008 	jr	ra
8004a270:	00000000 	nop

8004a274 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17ha89e1374a944983cE>:
            const fn precondition_check($($name:$ty),*) {
8004a274:	27bdffd8 	addiu	sp,sp,-40
8004a278:	afa60014 	sw	a2,20(sp)
8004a27c:	afa50018 	sw	a1,24(sp)
8004a280:	afa4001c 	sw	a0,28(sp)
8004a284:	afa50020 	sw	a1,32(sp)
8004a288:	afa60024 	sw	a2,36(sp)
            ) => end >= start && end <= len
8004a28c:	00a4082b 	sltu	at,a1,a0
8004a290:	10200008 	beqz	at,8004a2b4 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17ha89e1374a944983cE+0x40>
8004a294:	00000000 	nop
8004a298:	080128a8 	j	8004a2a0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17ha89e1374a944983cE+0x2c>
8004a29c:	00000000 	nop
                    ::core::panicking::panic_nounwind(
8004a2a0:	3c01810a 	lui	at,0x810a
8004a2a4:	2424d4c1 	addiu	a0,at,-11071
8004a2a8:	24050061 	li	a1,97
8004a2ac:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8004a2b0:	00000000 	nop
8004a2b4:	8fa10014 	lw	at,20(sp)
8004a2b8:	8fa20018 	lw	v0,24(sp)
8004a2bc:	0022082b 	sltu	at,at,v0
8004a2c0:	1420fff7 	bnez	at,8004a2a0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17ha89e1374a944983cE+0x2c>
8004a2c4:	00000000 	nop
8004a2c8:	080128b4 	j	8004a2d0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17ha89e1374a944983cE+0x5c>
8004a2cc:	00000000 	nop
8004a2d0:	27bd0028 	addiu	sp,sp,40
            }
8004a2d4:	03e00008 	jr	ra
8004a2d8:	00000000 	nop

8004a2dc <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h341e88cd759afc93E>:
            const fn precondition_check($($name:$ty),*) {
8004a2dc:	27bdffd8 	addiu	sp,sp,-40
8004a2e0:	afa60014 	sw	a2,20(sp)
8004a2e4:	afa50018 	sw	a1,24(sp)
8004a2e8:	afa4001c 	sw	a0,28(sp)
8004a2ec:	afa50020 	sw	a1,32(sp)
8004a2f0:	afa60024 	sw	a2,36(sp)
            ) => end >= start && end <= len
8004a2f4:	00a4082b 	sltu	at,a1,a0
8004a2f8:	10200008 	beqz	at,8004a31c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h341e88cd759afc93E+0x40>
8004a2fc:	00000000 	nop
8004a300:	080128c2 	j	8004a308 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h341e88cd759afc93E+0x2c>
8004a304:	00000000 	nop
                    ::core::panicking::panic_nounwind(
8004a308:	3c01810a 	lui	at,0x810a
8004a30c:	2424d522 	addiu	a0,at,-10974
8004a310:	24050065 	li	a1,101
8004a314:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8004a318:	00000000 	nop
8004a31c:	8fa10014 	lw	at,20(sp)
8004a320:	8fa20018 	lw	v0,24(sp)
8004a324:	0022082b 	sltu	at,at,v0
8004a328:	1420fff7 	bnez	at,8004a308 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h341e88cd759afc93E+0x2c>
8004a32c:	00000000 	nop
8004a330:	080128ce 	j	8004a338 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h341e88cd759afc93E+0x5c>
8004a334:	00000000 	nop
8004a338:	27bd0028 	addiu	sp,sp,40
            }
8004a33c:	03e00008 	jr	ra
8004a340:	00000000 	nop

8004a344 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE>:
            fn next(&mut self) -> Option<$elem> {
8004a344:	27bdffa0 	addiu	sp,sp,-96
8004a348:	afbf005c 	sw	ra,92(sp)
8004a34c:	afa40014 	sw	a0,20(sp)
8004a350:	afa40028 	sw	a0,40(sp)
                    if is_empty!(self) {
8004a354:	080128d7 	j	8004a35c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE+0x18>
8004a358:	00000000 	nop
8004a35c:	8fa40014 	lw	a0,20(sp)
8004a360:	24810004 	addiu	at,a0,4
8004a364:	afa10034 	sw	at,52(sp)
8004a368:	8c810004 	lw	at,4(a0)
8004a36c:	afa10020 	sw	at,32(sp)
8004a370:	27a50020 	addiu	a1,sp,32
8004a374:	0c00ee3a 	jal	8003b8e8 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h41d7ed9cbfe80c5aE>
8004a378:	00000000 	nop
8004a37c:	a3a2001f 	sb	v0,31(sp)
8004a380:	080128e2 	j	8004a388 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE+0x44>
8004a384:	00000000 	nop
8004a388:	93a1001f 	lbu	at,31(sp)
8004a38c:	30210001 	andi	at,at,0x1
8004a390:	1420001c 	bnez	at,8004a404 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE+0xc0>
8004a394:	00000000 	nop
8004a398:	080128e8 	j	8004a3a0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE+0x5c>
8004a39c:	00000000 	nop
8004a3a0:	8fa30014 	lw	v1,20(sp)
8004a3a4:	afa3003c 	sw	v1,60(sp)
8004a3a8:	24040001 	li	a0,1
8004a3ac:	afa40040 	sw	a0,64(sp)
                let old = self.ptr;
8004a3b0:	8c610000 	lw	at,0(v1)
8004a3b4:	afa10044 	sw	at,68(sp)
                    if_zst!(mut self,
8004a3b8:	24620004 	addiu	v0,v1,4
8004a3bc:	afa20058 	sw	v0,88(sp)
8004a3c0:	afa20048 	sw	v0,72(sp)
                        _end => self.ptr = self.ptr.add(offset),
8004a3c4:	8c620000 	lw	v0,0(v1)
8004a3c8:	afa20050 	sw	v0,80(sp)
8004a3cc:	afa40054 	sw	a0,84(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8004a3d0:	24420001 	addiu	v0,v0,1
8004a3d4:	afa2004c 	sw	v0,76(sp)
    }
8004a3d8:	8fa2004c 	lw	v0,76(sp)
8004a3dc:	ac620000 	sw	v0,0(v1)
                        Some(next_unchecked!(self))
8004a3e0:	afa10024 	sw	at,36(sp)
8004a3e4:	27a10024 	addiu	at,sp,36
8004a3e8:	afa1002c 	sw	at,44(sp)
        unsafe { &*self.as_ptr().cast_const() }
8004a3ec:	8fa10024 	lw	at,36(sp)
8004a3f0:	afa10030 	sw	at,48(sp)
8004a3f4:	afa10038 	sw	at,56(sp)
8004a3f8:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
8004a3fc:	08012904 	j	8004a410 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE+0xcc>
8004a400:	00000000 	nop
                        None
8004a404:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
8004a408:	08012904 	j	8004a410 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE+0xcc>
8004a40c:	00000000 	nop
            }
8004a410:	8fa20018 	lw	v0,24(sp)
8004a414:	8fbf005c 	lw	ra,92(sp)
8004a418:	27bd0060 	addiu	sp,sp,96
8004a41c:	03e00008 	jr	ra
8004a420:	00000000 	nop

8004a424 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE>:
            fn next(&mut self) -> Option<$elem> {
8004a424:	27bdffa0 	addiu	sp,sp,-96
8004a428:	afbf005c 	sw	ra,92(sp)
8004a42c:	afa40014 	sw	a0,20(sp)
8004a430:	afa40028 	sw	a0,40(sp)
                    if is_empty!(self) {
8004a434:	0801290f 	j	8004a43c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE+0x18>
8004a438:	00000000 	nop
8004a43c:	8fa40014 	lw	a0,20(sp)
8004a440:	24810004 	addiu	at,a0,4
8004a444:	afa10034 	sw	at,52(sp)
8004a448:	8c810004 	lw	at,4(a0)
8004a44c:	afa10020 	sw	at,32(sp)
8004a450:	27a50020 	addiu	a1,sp,32
8004a454:	0c00ee52 	jal	8003b948 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9ec4f98e00ed0785E>
8004a458:	00000000 	nop
8004a45c:	a3a2001f 	sb	v0,31(sp)
8004a460:	0801291a 	j	8004a468 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE+0x44>
8004a464:	00000000 	nop
8004a468:	93a1001f 	lbu	at,31(sp)
8004a46c:	30210001 	andi	at,at,0x1
8004a470:	1420001c 	bnez	at,8004a4e4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE+0xc0>
8004a474:	00000000 	nop
8004a478:	08012920 	j	8004a480 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE+0x5c>
8004a47c:	00000000 	nop
8004a480:	8fa30014 	lw	v1,20(sp)
8004a484:	afa3003c 	sw	v1,60(sp)
8004a488:	24040001 	li	a0,1
8004a48c:	afa40040 	sw	a0,64(sp)
                let old = self.ptr;
8004a490:	8c610000 	lw	at,0(v1)
8004a494:	afa10044 	sw	at,68(sp)
                    if_zst!(mut self,
8004a498:	24620004 	addiu	v0,v1,4
8004a49c:	afa20058 	sw	v0,88(sp)
8004a4a0:	afa20048 	sw	v0,72(sp)
                        _end => self.ptr = self.ptr.add(offset),
8004a4a4:	8c620000 	lw	v0,0(v1)
8004a4a8:	afa20050 	sw	v0,80(sp)
8004a4ac:	afa40054 	sw	a0,84(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8004a4b0:	24420002 	addiu	v0,v0,2
8004a4b4:	afa2004c 	sw	v0,76(sp)
    }
8004a4b8:	8fa2004c 	lw	v0,76(sp)
8004a4bc:	ac620000 	sw	v0,0(v1)
                        Some(next_unchecked!(self))
8004a4c0:	afa10024 	sw	at,36(sp)
8004a4c4:	27a10024 	addiu	at,sp,36
8004a4c8:	afa1002c 	sw	at,44(sp)
        unsafe { &*self.as_ptr().cast_const() }
8004a4cc:	8fa10024 	lw	at,36(sp)
8004a4d0:	afa10030 	sw	at,48(sp)
8004a4d4:	afa10038 	sw	at,56(sp)
8004a4d8:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
8004a4dc:	0801293c 	j	8004a4f0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE+0xcc>
8004a4e0:	00000000 	nop
                        None
8004a4e4:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
8004a4e8:	0801293c 	j	8004a4f0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE+0xcc>
8004a4ec:	00000000 	nop
            }
8004a4f0:	8fa20018 	lw	v0,24(sp)
8004a4f4:	8fbf005c 	lw	ra,92(sp)
8004a4f8:	27bd0060 	addiu	sp,sp,96
8004a4fc:	03e00008 	jr	ra
8004a500:	00000000 	nop

8004a504 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E>:
            fn next(&mut self) -> Option<$elem> {
8004a504:	27bdffa0 	addiu	sp,sp,-96
8004a508:	afbf005c 	sw	ra,92(sp)
8004a50c:	afa40014 	sw	a0,20(sp)
8004a510:	afa40028 	sw	a0,40(sp)
                    if is_empty!(self) {
8004a514:	08012947 	j	8004a51c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E+0x18>
8004a518:	00000000 	nop
8004a51c:	8fa40014 	lw	a0,20(sp)
8004a520:	24810004 	addiu	at,a0,4
8004a524:	afa10034 	sw	at,52(sp)
8004a528:	8c810004 	lw	at,4(a0)
8004a52c:	afa10020 	sw	at,32(sp)
8004a530:	27a50020 	addiu	a1,sp,32
8004a534:	0c00ee46 	jal	8003b918 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h4eca0769a0300955E>
8004a538:	00000000 	nop
8004a53c:	a3a2001f 	sb	v0,31(sp)
8004a540:	08012952 	j	8004a548 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E+0x44>
8004a544:	00000000 	nop
8004a548:	93a1001f 	lbu	at,31(sp)
8004a54c:	30210001 	andi	at,at,0x1
8004a550:	1420001c 	bnez	at,8004a5c4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E+0xc0>
8004a554:	00000000 	nop
8004a558:	08012958 	j	8004a560 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E+0x5c>
8004a55c:	00000000 	nop
8004a560:	8fa30014 	lw	v1,20(sp)
8004a564:	afa3003c 	sw	v1,60(sp)
8004a568:	24040001 	li	a0,1
8004a56c:	afa40040 	sw	a0,64(sp)
                let old = self.ptr;
8004a570:	8c610000 	lw	at,0(v1)
8004a574:	afa10044 	sw	at,68(sp)
                    if_zst!(mut self,
8004a578:	24620004 	addiu	v0,v1,4
8004a57c:	afa20058 	sw	v0,88(sp)
8004a580:	afa20048 	sw	v0,72(sp)
                        _end => self.ptr = self.ptr.add(offset),
8004a584:	8c620000 	lw	v0,0(v1)
8004a588:	afa20050 	sw	v0,80(sp)
8004a58c:	afa40054 	sw	a0,84(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8004a590:	24420020 	addiu	v0,v0,32
8004a594:	afa2004c 	sw	v0,76(sp)
    }
8004a598:	8fa2004c 	lw	v0,76(sp)
8004a59c:	ac620000 	sw	v0,0(v1)
                        Some(next_unchecked!(self))
8004a5a0:	afa10024 	sw	at,36(sp)
8004a5a4:	27a10024 	addiu	at,sp,36
8004a5a8:	afa1002c 	sw	at,44(sp)
        unsafe { &*self.as_ptr().cast_const() }
8004a5ac:	8fa10024 	lw	at,36(sp)
8004a5b0:	afa10030 	sw	at,48(sp)
8004a5b4:	afa10038 	sw	at,56(sp)
8004a5b8:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
8004a5bc:	08012974 	j	8004a5d0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E+0xcc>
8004a5c0:	00000000 	nop
                        None
8004a5c4:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
8004a5c8:	08012974 	j	8004a5d0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E+0xcc>
8004a5cc:	00000000 	nop
            }
8004a5d0:	8fa20018 	lw	v0,24(sp)
8004a5d4:	8fbf005c 	lw	ra,92(sp)
8004a5d8:	27bd0060 	addiu	sp,sp,96
8004a5dc:	03e00008 	jr	ra
8004a5e0:	00000000 	nop

8004a5e4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E>:
            fn next(&mut self) -> Option<$elem> {
8004a5e4:	27bdffa0 	addiu	sp,sp,-96
8004a5e8:	afbf005c 	sw	ra,92(sp)
8004a5ec:	afa40014 	sw	a0,20(sp)
8004a5f0:	afa40028 	sw	a0,40(sp)
                    if is_empty!(self) {
8004a5f4:	0801297f 	j	8004a5fc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E+0x18>
8004a5f8:	00000000 	nop
8004a5fc:	8fa40014 	lw	a0,20(sp)
8004a600:	24810004 	addiu	at,a0,4
8004a604:	afa10034 	sw	at,52(sp)
8004a608:	8c810004 	lw	at,4(a0)
8004a60c:	afa10020 	sw	at,32(sp)
8004a610:	27a50020 	addiu	a1,sp,32
8004a614:	0c00ee6a 	jal	8003b9a8 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc12b98033e3b55e1E>
8004a618:	00000000 	nop
8004a61c:	a3a2001f 	sb	v0,31(sp)
8004a620:	0801298a 	j	8004a628 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E+0x44>
8004a624:	00000000 	nop
8004a628:	93a1001f 	lbu	at,31(sp)
8004a62c:	30210001 	andi	at,at,0x1
8004a630:	1420001c 	bnez	at,8004a6a4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E+0xc0>
8004a634:	00000000 	nop
8004a638:	08012990 	j	8004a640 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E+0x5c>
8004a63c:	00000000 	nop
8004a640:	8fa30014 	lw	v1,20(sp)
8004a644:	afa3003c 	sw	v1,60(sp)
8004a648:	24040001 	li	a0,1
8004a64c:	afa40040 	sw	a0,64(sp)
                let old = self.ptr;
8004a650:	8c610000 	lw	at,0(v1)
8004a654:	afa10044 	sw	at,68(sp)
                    if_zst!(mut self,
8004a658:	24620004 	addiu	v0,v1,4
8004a65c:	afa20058 	sw	v0,88(sp)
8004a660:	afa20048 	sw	v0,72(sp)
                        _end => self.ptr = self.ptr.add(offset),
8004a664:	8c620000 	lw	v0,0(v1)
8004a668:	afa20050 	sw	v0,80(sp)
8004a66c:	afa40054 	sw	a0,84(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8004a670:	24420010 	addiu	v0,v0,16
8004a674:	afa2004c 	sw	v0,76(sp)
    }
8004a678:	8fa2004c 	lw	v0,76(sp)
8004a67c:	ac620000 	sw	v0,0(v1)
                        Some(next_unchecked!(self))
8004a680:	afa10024 	sw	at,36(sp)
8004a684:	27a10024 	addiu	at,sp,36
8004a688:	afa1002c 	sw	at,44(sp)
        unsafe { &*self.as_ptr().cast_const() }
8004a68c:	8fa10024 	lw	at,36(sp)
8004a690:	afa10030 	sw	at,48(sp)
8004a694:	afa10038 	sw	at,56(sp)
8004a698:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
8004a69c:	080129ac 	j	8004a6b0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E+0xcc>
8004a6a0:	00000000 	nop
                        None
8004a6a4:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
8004a6a8:	080129ac 	j	8004a6b0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E+0xcc>
8004a6ac:	00000000 	nop
            }
8004a6b0:	8fa20018 	lw	v0,24(sp)
8004a6b4:	8fbf005c 	lw	ra,92(sp)
8004a6b8:	27bd0060 	addiu	sp,sp,96
8004a6bc:	03e00008 	jr	ra
8004a6c0:	00000000 	nop

8004a6c4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E>:
            fn next(&mut self) -> Option<$elem> {
8004a6c4:	27bdffa0 	addiu	sp,sp,-96
8004a6c8:	afbf005c 	sw	ra,92(sp)
8004a6cc:	afa40014 	sw	a0,20(sp)
8004a6d0:	afa40028 	sw	a0,40(sp)
                    if is_empty!(self) {
8004a6d4:	080129b7 	j	8004a6dc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E+0x18>
8004a6d8:	00000000 	nop
8004a6dc:	8fa40014 	lw	a0,20(sp)
8004a6e0:	24810004 	addiu	at,a0,4
8004a6e4:	afa10034 	sw	at,52(sp)
8004a6e8:	8c810004 	lw	at,4(a0)
8004a6ec:	afa10020 	sw	at,32(sp)
8004a6f0:	27a50020 	addiu	a1,sp,32
8004a6f4:	0c00ee76 	jal	8003b9d8 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hdbd8a472611df449E>
8004a6f8:	00000000 	nop
8004a6fc:	a3a2001f 	sb	v0,31(sp)
8004a700:	080129c2 	j	8004a708 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E+0x44>
8004a704:	00000000 	nop
8004a708:	93a1001f 	lbu	at,31(sp)
8004a70c:	30210001 	andi	at,at,0x1
8004a710:	1420001c 	bnez	at,8004a784 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E+0xc0>
8004a714:	00000000 	nop
8004a718:	080129c8 	j	8004a720 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E+0x5c>
8004a71c:	00000000 	nop
8004a720:	8fa30014 	lw	v1,20(sp)
8004a724:	afa3003c 	sw	v1,60(sp)
8004a728:	24040001 	li	a0,1
8004a72c:	afa40040 	sw	a0,64(sp)
                let old = self.ptr;
8004a730:	8c610000 	lw	at,0(v1)
8004a734:	afa10044 	sw	at,68(sp)
                    if_zst!(mut self,
8004a738:	24620004 	addiu	v0,v1,4
8004a73c:	afa20058 	sw	v0,88(sp)
8004a740:	afa20048 	sw	v0,72(sp)
                        _end => self.ptr = self.ptr.add(offset),
8004a744:	8c620000 	lw	v0,0(v1)
8004a748:	afa20050 	sw	v0,80(sp)
8004a74c:	afa40054 	sw	a0,84(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8004a750:	24420004 	addiu	v0,v0,4
8004a754:	afa2004c 	sw	v0,76(sp)
    }
8004a758:	8fa2004c 	lw	v0,76(sp)
8004a75c:	ac620000 	sw	v0,0(v1)
                        Some(next_unchecked!(self))
8004a760:	afa10024 	sw	at,36(sp)
8004a764:	27a10024 	addiu	at,sp,36
8004a768:	afa1002c 	sw	at,44(sp)
        unsafe { &*self.as_ptr().cast_const() }
8004a76c:	8fa10024 	lw	at,36(sp)
8004a770:	afa10030 	sw	at,48(sp)
8004a774:	afa10038 	sw	at,56(sp)
8004a778:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
8004a77c:	080129e4 	j	8004a790 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E+0xcc>
8004a780:	00000000 	nop
                        None
8004a784:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
8004a788:	080129e4 	j	8004a790 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E+0xcc>
8004a78c:	00000000 	nop
            }
8004a790:	8fa20018 	lw	v0,24(sp)
8004a794:	8fbf005c 	lw	ra,92(sp)
8004a798:	27bd0060 	addiu	sp,sp,96
8004a79c:	03e00008 	jr	ra
8004a7a0:	00000000 	nop

8004a7a4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E>:
            fn next(&mut self) -> Option<$elem> {
8004a7a4:	27bdffa0 	addiu	sp,sp,-96
8004a7a8:	afbf005c 	sw	ra,92(sp)
8004a7ac:	afa40014 	sw	a0,20(sp)
8004a7b0:	afa40028 	sw	a0,40(sp)
                    if is_empty!(self) {
8004a7b4:	080129ef 	j	8004a7bc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E+0x18>
8004a7b8:	00000000 	nop
8004a7bc:	8fa40014 	lw	a0,20(sp)
8004a7c0:	24810004 	addiu	at,a0,4
8004a7c4:	afa10034 	sw	at,52(sp)
8004a7c8:	8c810004 	lw	at,4(a0)
8004a7cc:	afa10020 	sw	at,32(sp)
8004a7d0:	27a50020 	addiu	a1,sp,32
8004a7d4:	0c00ee5e 	jal	8003b978 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbe3fcf7a36f19a66E>
8004a7d8:	00000000 	nop
8004a7dc:	a3a2001f 	sb	v0,31(sp)
8004a7e0:	080129fa 	j	8004a7e8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E+0x44>
8004a7e4:	00000000 	nop
8004a7e8:	93a1001f 	lbu	at,31(sp)
8004a7ec:	30210001 	andi	at,at,0x1
8004a7f0:	1420001c 	bnez	at,8004a864 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E+0xc0>
8004a7f4:	00000000 	nop
8004a7f8:	08012a00 	j	8004a800 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E+0x5c>
8004a7fc:	00000000 	nop
8004a800:	8fa30014 	lw	v1,20(sp)
8004a804:	afa3003c 	sw	v1,60(sp)
8004a808:	24040001 	li	a0,1
8004a80c:	afa40040 	sw	a0,64(sp)
                let old = self.ptr;
8004a810:	8c610000 	lw	at,0(v1)
8004a814:	afa10044 	sw	at,68(sp)
                    if_zst!(mut self,
8004a818:	24620004 	addiu	v0,v1,4
8004a81c:	afa20058 	sw	v0,88(sp)
8004a820:	afa20048 	sw	v0,72(sp)
                        _end => self.ptr = self.ptr.add(offset),
8004a824:	8c620000 	lw	v0,0(v1)
8004a828:	afa20050 	sw	v0,80(sp)
8004a82c:	afa40054 	sw	a0,84(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8004a830:	24420008 	addiu	v0,v0,8
8004a834:	afa2004c 	sw	v0,76(sp)
    }
8004a838:	8fa2004c 	lw	v0,76(sp)
8004a83c:	ac620000 	sw	v0,0(v1)
                        Some(next_unchecked!(self))
8004a840:	afa10024 	sw	at,36(sp)
8004a844:	27a10024 	addiu	at,sp,36
8004a848:	afa1002c 	sw	at,44(sp)
        unsafe { &*self.as_ptr().cast_const() }
8004a84c:	8fa10024 	lw	at,36(sp)
8004a850:	afa10030 	sw	at,48(sp)
8004a854:	afa10038 	sw	at,56(sp)
8004a858:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
8004a85c:	08012a1c 	j	8004a870 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E+0xcc>
8004a860:	00000000 	nop
                        None
8004a864:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
8004a868:	08012a1c 	j	8004a870 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E+0xcc>
8004a86c:	00000000 	nop
            }
8004a870:	8fa20018 	lw	v0,24(sp)
8004a874:	8fbf005c 	lw	ra,92(sp)
8004a878:	27bd0060 	addiu	sp,sp,96
8004a87c:	03e00008 	jr	ra
8004a880:	00000000 	nop

8004a884 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE>:
            fn fold<B, F>(self, init: B, mut f: F) -> B
8004a884:	27bdff90 	addiu	sp,sp,-112
8004a888:	afbf006c 	sw	ra,108(sp)
8004a88c:	afa60014 	sw	a2,20(sp)
8004a890:	afa40018 	sw	a0,24(sp)
8004a894:	afa5001c 	sw	a1,28(sp)
8004a898:	afa60044 	sw	a2,68(sp)
                if is_empty!(self) {
8004a89c:	08012a29 	j	8004a8a4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x20>
8004a8a0:	00000000 	nop
8004a8a4:	27a40018 	addiu	a0,sp,24
8004a8a8:	24810004 	addiu	at,a0,4
8004a8ac:	afa10060 	sw	at,96(sp)
8004a8b0:	8fa1001c 	lw	at,28(sp)
8004a8b4:	afa1002c 	sw	at,44(sp)
8004a8b8:	27a5002c 	addiu	a1,sp,44
8004a8bc:	0c00ee3a 	jal	8003b8e8 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h41d7ed9cbfe80c5aE>
8004a8c0:	00000000 	nop
8004a8c4:	a3a2002b 	sb	v0,43(sp)
8004a8c8:	08012a34 	j	8004a8d0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x4c>
8004a8cc:	00000000 	nop
8004a8d0:	93a1002b 	lbu	at,43(sp)
8004a8d4:	30210001 	andi	at,at,0x1
8004a8d8:	14200008 	bnez	at,8004a8fc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x78>
8004a8dc:	00000000 	nop
8004a8e0:	08012a3a 	j	8004a8e8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x64>
8004a8e4:	00000000 	nop
                let mut acc = init;
8004a8e8:	8fa10014 	lw	at,20(sp)
8004a8ec:	afa10030 	sw	at,48(sp)
                let mut i = 0;
8004a8f0:	afa00034 	sw	zero,52(sp)
                let len = len!(self);
8004a8f4:	08012a43 	j	8004a90c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x88>
8004a8f8:	00000000 	nop
                    return init;
8004a8fc:	8fa10014 	lw	at,20(sp)
8004a900:	afa10024 	sw	at,36(sp)
            }
8004a904:	08012a6f 	j	8004a9bc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x138>
8004a908:	00000000 	nop
8004a90c:	27a10018 	addiu	at,sp,24
                let len = len!(self);
8004a910:	24210004 	addiu	at,at,4
8004a914:	afa1005c 	sw	at,92(sp)
8004a918:	8fa4001c 	lw	a0,28(sp)
8004a91c:	afa40048 	sw	a0,72(sp)
8004a920:	8fa50018 	lw	a1,24(sp)
8004a924:	0c00ee24 	jal	8003b890 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$7sub_ptr17h9b9ab3e8577ce557E>
8004a928:	00000000 	nop
8004a92c:	afa20038 	sw	v0,56(sp)
8004a930:	08012a4e 	j	8004a938 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0xb4>
8004a934:	00000000 	nop
                    acc = f(acc, unsafe { & $( $mut_ )? *self.ptr.add(i).as_ptr() });
8004a938:	8fa20030 	lw	v0,48(sp)
8004a93c:	8fa10018 	lw	at,24(sp)
8004a940:	8fa30034 	lw	v1,52(sp)
8004a944:	afa10054 	sw	at,84(sp)
8004a948:	afa30058 	sw	v1,88(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8004a94c:	00230821 	addu	at,at,v1
8004a950:	afa10050 	sw	at,80(sp)
    }
8004a954:	8fa10050 	lw	at,80(sp)
8004a958:	afa1004c 	sw	at,76(sp)
8004a95c:	afa2003c 	sw	v0,60(sp)
8004a960:	afa10040 	sw	at,64(sp)
8004a964:	8fa5003c 	lw	a1,60(sp)
8004a968:	8fa60040 	lw	a2,64(sp)
8004a96c:	27a40023 	addiu	a0,sp,35
8004a970:	0c00f76b 	jal	8003ddac <_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h0e22386d052a3b35E>
8004a974:	00000000 	nop
8004a978:	afa20030 	sw	v0,48(sp)
                    i = unsafe { i.unchecked_add(1) };
8004a97c:	8fa10034 	lw	at,52(sp)
8004a980:	afa10064 	sw	at,100(sp)
8004a984:	24020001 	li	v0,1
8004a988:	afa20068 	sw	v0,104(sp)
            unsafe { intrinsics::unchecked_add(self, rhs) }
8004a98c:	24210001 	addiu	at,at,1
8004a990:	afa10034 	sw	at,52(sp)
                    if i == len {
8004a994:	8fa10034 	lw	at,52(sp)
8004a998:	8fa20038 	lw	v0,56(sp)
8004a99c:	1422ffe6 	bne	at,v0,8004a938 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0xb4>
8004a9a0:	00000000 	nop
8004a9a4:	08012a6b 	j	8004a9ac <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x128>
8004a9a8:	00000000 	nop
                acc
8004a9ac:	8fa10030 	lw	at,48(sp)
8004a9b0:	afa10024 	sw	at,36(sp)
            }
8004a9b4:	08012a6f 	j	8004a9bc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x138>
8004a9b8:	00000000 	nop
8004a9bc:	8fa20024 	lw	v0,36(sp)
8004a9c0:	8fbf006c 	lw	ra,108(sp)
8004a9c4:	27bd0070 	addiu	sp,sp,112
8004a9c8:	03e00008 	jr	ra
8004a9cc:	00000000 	nop

8004a9d0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E>:

            // We override the default implementation, which uses `try_fold`,
            // because this simple implementation generates less LLVM IR and is
            // faster to compile. Also, the `assume` avoids a bounds check.
            #[inline]
            fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
8004a9d0:	27bdffa8 	addiu	sp,sp,-88
8004a9d4:	afbf0054 	sw	ra,84(sp)
8004a9d8:	afa40020 	sw	a0,32(sp)
8004a9dc:	afa40040 	sw	a0,64(sp)
                P: FnMut(Self::Item) -> bool,
                Self: Sized + ExactSizeIterator + DoubleEndedIterator
            {
                let n = len!(self);
8004a9e0:	08012a7a 	j	8004a9e8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x18>
8004a9e4:	00000000 	nop
8004a9e8:	8fa10020 	lw	at,32(sp)
8004a9ec:	24220004 	addiu	v0,at,4
8004a9f0:	afa20050 	sw	v0,80(sp)
8004a9f4:	8c240004 	lw	a0,4(at)
8004a9f8:	afa40044 	sw	a0,68(sp)
8004a9fc:	8c250000 	lw	a1,0(at)
8004aa00:	0c00ee24 	jal	8003b890 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$7sub_ptr17h9b9ab3e8577ce557E>
8004aa04:	00000000 	nop
8004aa08:	afa20030 	sw	v0,48(sp)
8004aa0c:	08012a85 	j	8004aa14 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x44>
8004aa10:	00000000 	nop
                let mut i = n;
8004aa14:	8fa10030 	lw	at,48(sp)
8004aa18:	afa10034 	sw	at,52(sp)
                while let Some(x) = self.next_back() {
8004aa1c:	08012a89 	j	8004aa24 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x54>
8004aa20:	00000000 	nop
8004aa24:	8fa40020 	lw	a0,32(sp)
8004aa28:	0c012acc 	jal	8004ab30 <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E>
8004aa2c:	00000000 	nop
8004aa30:	afa20038 	sw	v0,56(sp)
8004aa34:	8fa10038 	lw	at,56(sp)
8004aa38:	1020000d 	beqz	at,8004aa70 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0xa0>
8004aa3c:	00000000 	nop
8004aa40:	08012a92 	j	8004aa48 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x78>
8004aa44:	00000000 	nop
8004aa48:	8fa10038 	lw	at,56(sp)
8004aa4c:	afa10018 	sw	at,24(sp)
8004aa50:	afa10048 	sw	at,72(sp)
                    i -= 1;
8004aa54:	8fa10034 	lw	at,52(sp)
8004aa58:	2422ffff 	addiu	v0,at,-1
8004aa5c:	afa2001c 	sw	v0,28(sp)
8004aa60:	10200012 	beqz	at,8004aaac <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0xdc>
8004aa64:	00000000 	nop
8004aa68:	08012a9f 	j	8004aa7c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0xac>
8004aa6c:	00000000 	nop
                        // and is only decreasing.
                        unsafe { assert_unchecked(i < n) };
                        return Some(i);
                    }
                }
                None
8004aa70:	afa00028 	sw	zero,40(sp)
            }
8004aa74:	08012ac6 	j	8004ab18 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x148>
8004aa78:	00000000 	nop
                    i -= 1;
8004aa7c:	8fa10018 	lw	at,24(sp)
8004aa80:	8fa2001c 	lw	v0,28(sp)
8004aa84:	afa20034 	sw	v0,52(sp)
                    if predicate(x) {
8004aa88:	afa1003c 	sw	at,60(sp)
8004aa8c:	8fa5003c 	lw	a1,60(sp)
8004aa90:	27a40027 	addiu	a0,sp,39
8004aa94:	0c011c9e 	jal	80047278 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary28_$u7b$$u7b$closure$u7d$$u7d$17h492e5ca2d572b958E>
8004aa98:	00000000 	nop
8004aa9c:	14400007 	bnez	v0,8004aabc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0xec>
8004aaa0:	00000000 	nop
8004aaa4:	08012a89 	j	8004aa24 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x54>
8004aaa8:	00000000 	nop
                    i -= 1;
8004aaac:	3c01810a 	lui	at,0x810a
8004aab0:	2424d588 	addiu	a0,at,-10872
8004aab4:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8004aab8:	00000000 	nop
                        unsafe { assert_unchecked(i < n) };
8004aabc:	8fa10034 	lw	at,52(sp)
8004aac0:	8fa20030 	lw	v0,48(sp)
8004aac4:	0022082b 	sltu	at,at,v0
8004aac8:	afa10014 	sw	at,20(sp)
8004aacc:	a3a1004f 	sb	at,79(sp)
        ub_checks::assert_unsafe_precondition!(
8004aad0:	0c00f16e 	jal	8003c5b8 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8004aad4:	00000000 	nop
8004aad8:	10400009 	beqz	v0,8004ab00 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x130>
8004aadc:	00000000 	nop
8004aae0:	08012aba 	j	8004aae8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x118>
8004aae4:	00000000 	nop
8004aae8:	8fa10014 	lw	at,20(sp)
8004aaec:	30240001 	andi	a0,at,0x1
8004aaf0:	0c012213 	jal	8004884c <_ZN4core4hint16assert_unchecked18precondition_check17h0b93bb2a861dbe92E>
8004aaf4:	00000000 	nop
8004aaf8:	08012ac0 	j	8004ab00 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x130>
8004aafc:	00000000 	nop
                        return Some(i);
8004ab00:	8fa10034 	lw	at,52(sp)
8004ab04:	afa1002c 	sw	at,44(sp)
8004ab08:	24010001 	li	at,1
8004ab0c:	afa10028 	sw	at,40(sp)
            }
8004ab10:	08012ac6 	j	8004ab18 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x148>
8004ab14:	00000000 	nop
8004ab18:	8fa20028 	lw	v0,40(sp)
8004ab1c:	8fa3002c 	lw	v1,44(sp)
8004ab20:	8fbf0054 	lw	ra,84(sp)
8004ab24:	27bd0058 	addiu	sp,sp,88
8004ab28:	03e00008 	jr	ra
8004ab2c:	00000000 	nop

8004ab30 <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E>:
        }

        #[stable(feature = "rust1", since = "1.0.0")]
        impl<'a, T> DoubleEndedIterator for $name<'a, T> {
            #[inline]
            fn next_back(&mut self) -> Option<$elem> {
8004ab30:	27bdff98 	addiu	sp,sp,-104
8004ab34:	afbf0064 	sw	ra,100(sp)
8004ab38:	afa40010 	sw	a0,16(sp)
8004ab3c:	afa40024 	sw	a0,36(sp)
                // could be implemented with slices, but this avoids bounds checks

                // SAFETY: The call to `next_back_unchecked!`
                // is safe since we check if the iterator is empty first.
                unsafe {
                    if is_empty!(self) {
8004ab40:	08012ad2 	j	8004ab48 <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E+0x18>
8004ab44:	00000000 	nop
8004ab48:	8fa40010 	lw	a0,16(sp)
8004ab4c:	24810004 	addiu	at,a0,4
8004ab50:	afa10030 	sw	at,48(sp)
8004ab54:	8c810004 	lw	at,4(a0)
8004ab58:	afa1001c 	sw	at,28(sp)
8004ab5c:	27a5001c 	addiu	a1,sp,28
8004ab60:	0c00ee3a 	jal	8003b8e8 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h41d7ed9cbfe80c5aE>
8004ab64:	00000000 	nop
8004ab68:	a3a2001b 	sb	v0,27(sp)
8004ab6c:	08012add 	j	8004ab74 <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E+0x44>
8004ab70:	00000000 	nop
8004ab74:	93a1001b 	lbu	at,27(sp)
8004ab78:	30210001 	andi	at,at,0x1
8004ab7c:	14200022 	bnez	at,8004ac08 <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E+0xd8>
8004ab80:	00000000 	nop
8004ab84:	08012ae3 	j	8004ab8c <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E+0x5c>
8004ab88:	00000000 	nop
8004ab8c:	8fa10010 	lw	at,16(sp)
8004ab90:	afa1003c 	sw	at,60(sp)
8004ab94:	24030001 	li	v1,1
8004ab98:	afa30040 	sw	v1,64(sp)
                if_zst!(mut self,
8004ab9c:	24220004 	addiu	v0,at,4
8004aba0:	afa20060 	sw	v0,96(sp)
8004aba4:	afa20044 	sw	v0,68(sp)
                        *end = end.sub(offset);
8004aba8:	8c220004 	lw	v0,4(at)
8004abac:	afa2004c 	sw	v0,76(sp)
8004abb0:	afa30050 	sw	v1,80(sp)
8004abb4:	afa20058 	sw	v0,88(sp)
8004abb8:	2403ffff 	li	v1,-1
8004abbc:	afa3005c 	sw	v1,92(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8004abc0:	2442ffff 	addiu	v0,v0,-1
8004abc4:	afa20054 	sw	v0,84(sp)
    }
8004abc8:	8fa20054 	lw	v0,84(sp)
            unsafe { self.offset(intrinsics::unchecked_sub(0, count as isize)) }
8004abcc:	afa20048 	sw	v0,72(sp)
    }
8004abd0:	8fa20048 	lw	v0,72(sp)
8004abd4:	ac220004 	sw	v0,4(at)
                        *end
8004abd8:	8c210004 	lw	at,4(at)
8004abdc:	afa10038 	sw	at,56(sp)
            }
8004abe0:	8fa10038 	lw	at,56(sp)
                        None
                    } else {
                        Some(next_back_unchecked!(self))
8004abe4:	afa10020 	sw	at,32(sp)
8004abe8:	27a10020 	addiu	at,sp,32
8004abec:	afa10028 	sw	at,40(sp)
        unsafe { &*self.as_ptr().cast_const() }
8004abf0:	8fa10020 	lw	at,32(sp)
8004abf4:	afa1002c 	sw	at,44(sp)
8004abf8:	afa10034 	sw	at,52(sp)
8004abfc:	afa10014 	sw	at,20(sp)
                    if is_empty!(self) {
8004ac00:	08012b05 	j	8004ac14 <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E+0xe4>
8004ac04:	00000000 	nop
                        None
8004ac08:	afa00014 	sw	zero,20(sp)
                    if is_empty!(self) {
8004ac0c:	08012b05 	j	8004ac14 <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E+0xe4>
8004ac10:	00000000 	nop
                    }
                }
            }
8004ac14:	8fa20014 	lw	v0,20(sp)
8004ac18:	8fbf0064 	lw	ra,100(sp)
8004ac1c:	27bd0068 	addiu	sp,sp,104
8004ac20:	03e00008 	jr	ra
8004ac24:	00000000 	nop

8004ac28 <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE>:
            fn next_back(&mut self) -> Option<$elem> {
8004ac28:	27bdff98 	addiu	sp,sp,-104
8004ac2c:	afbf0064 	sw	ra,100(sp)
8004ac30:	afa40014 	sw	a0,20(sp)
8004ac34:	afa40028 	sw	a0,40(sp)
                    if is_empty!(self) {
8004ac38:	08012b10 	j	8004ac40 <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE+0x18>
8004ac3c:	00000000 	nop
8004ac40:	8fa40014 	lw	a0,20(sp)
8004ac44:	24810004 	addiu	at,a0,4
8004ac48:	afa10034 	sw	at,52(sp)
8004ac4c:	8c810004 	lw	at,4(a0)
8004ac50:	afa10020 	sw	at,32(sp)
8004ac54:	27a50020 	addiu	a1,sp,32
8004ac58:	0c00ee2e 	jal	8003b8b8 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h3eb9e52439106dd7E>
8004ac5c:	00000000 	nop
8004ac60:	a3a2001f 	sb	v0,31(sp)
8004ac64:	08012b1b 	j	8004ac6c <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE+0x44>
8004ac68:	00000000 	nop
8004ac6c:	93a1001f 	lbu	at,31(sp)
8004ac70:	30210001 	andi	at,at,0x1
8004ac74:	14200021 	bnez	at,8004acfc <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE+0xd4>
8004ac78:	00000000 	nop
8004ac7c:	08012b21 	j	8004ac84 <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE+0x5c>
8004ac80:	00000000 	nop
8004ac84:	8fa10014 	lw	at,20(sp)
8004ac88:	afa1003c 	sw	at,60(sp)
8004ac8c:	24030001 	li	v1,1
8004ac90:	afa30040 	sw	v1,64(sp)
                if_zst!(mut self,
8004ac94:	24220004 	addiu	v0,at,4
8004ac98:	afa20060 	sw	v0,96(sp)
8004ac9c:	afa20044 	sw	v0,68(sp)
                        *end = end.sub(offset);
8004aca0:	8c220004 	lw	v0,4(at)
8004aca4:	afa2004c 	sw	v0,76(sp)
8004aca8:	afa30050 	sw	v1,80(sp)
8004acac:	afa20058 	sw	v0,88(sp)
8004acb0:	2403ffff 	li	v1,-1
8004acb4:	afa3005c 	sw	v1,92(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8004acb8:	2442ffff 	addiu	v0,v0,-1
8004acbc:	afa20054 	sw	v0,84(sp)
    }
8004acc0:	8fa20054 	lw	v0,84(sp)
            unsafe { self.offset(intrinsics::unchecked_sub(0, count as isize)) }
8004acc4:	afa20048 	sw	v0,72(sp)
    }
8004acc8:	8fa20048 	lw	v0,72(sp)
8004accc:	ac220004 	sw	v0,4(at)
                        *end
8004acd0:	8c210004 	lw	at,4(at)
8004acd4:	afa10038 	sw	at,56(sp)
            }
8004acd8:	8fa10038 	lw	at,56(sp)
                        Some(next_back_unchecked!(self))
8004acdc:	afa10024 	sw	at,36(sp)
8004ace0:	27a10024 	addiu	at,sp,36
8004ace4:	afa1002c 	sw	at,44(sp)
        unsafe { &mut *self.as_ptr() }
8004ace8:	8fa10024 	lw	at,36(sp)
8004acec:	afa10030 	sw	at,48(sp)
8004acf0:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
8004acf4:	08012b42 	j	8004ad08 <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE+0xe0>
8004acf8:	00000000 	nop
                        None
8004acfc:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
8004ad00:	08012b42 	j	8004ad08 <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE+0xe0>
8004ad04:	00000000 	nop
            }
8004ad08:	8fa20018 	lw	v0,24(sp)
8004ad0c:	8fbf0064 	lw	ra,100(sp)
8004ad10:	27bd0068 	addiu	sp,sp,104
8004ad14:	03e00008 	jr	ra
8004ad18:	00000000 	nop

8004ad1c <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE>:
            const fn precondition_check($($name:$ty),*) {
8004ad1c:	27bdffd0 	addiu	sp,sp,-48
8004ad20:	afbf002c 	sw	ra,44(sp)
8004ad24:	afa70010 	sw	a3,16(sp)
8004ad28:	afa60014 	sw	a2,20(sp)
8004ad2c:	00a00825 	move	at,a1
8004ad30:	8fa50014 	lw	a1,20(sp)
8004ad34:	afa10018 	sw	at,24(sp)
8004ad38:	afa4001c 	sw	a0,28(sp)
8004ad3c:	afa10020 	sw	at,32(sp)
8004ad40:	afa50024 	sw	a1,36(sp)
8004ad44:	afa70028 	sw	a3,40(sp)
            ub_checks::is_aligned_and_not_null(data, align)
8004ad48:	0c00f180 	jal	8003c600 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE>
8004ad4c:	00000000 	nop
8004ad50:	14400008 	bnez	v0,8004ad74 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE+0x58>
8004ad54:	00000000 	nop
8004ad58:	08012b58 	j	8004ad60 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE+0x44>
8004ad5c:	00000000 	nop
                    ::core::panicking::panic_nounwind(
8004ad60:	3c01810a 	lui	at,0x810a
8004ad64:	2424d598 	addiu	a0,at,-10856
8004ad68:	240500a2 	li	a1,162
8004ad6c:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8004ad70:	00000000 	nop
                && ub_checks::is_valid_allocation_size(size, len)
8004ad74:	8fa50010 	lw	a1,16(sp)
8004ad78:	8fa40018 	lw	a0,24(sp)
8004ad7c:	0c00f19d 	jal	8003c674 <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E>
8004ad80:	00000000 	nop
8004ad84:	1040fff6 	beqz	v0,8004ad60 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE+0x44>
8004ad88:	00000000 	nop
8004ad8c:	08012b65 	j	8004ad94 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE+0x78>
8004ad90:	00000000 	nop
            }
8004ad94:	8fbf002c 	lw	ra,44(sp)
8004ad98:	27bd0030 	addiu	sp,sp,48
8004ad9c:	03e00008 	jr	ra
8004ada0:	00000000 	nop

8004ada4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE>:
            const fn precondition_check($($name:$ty),*) {
8004ada4:	27bdffe0 	addiu	sp,sp,-32
8004ada8:	afa50010 	sw	a1,16(sp)
8004adac:	afa40014 	sw	a0,20(sp)
8004adb0:	afa40018 	sw	a0,24(sp)
8004adb4:	afa5001c 	sw	a1,28(sp)
            (n: usize = N, len: usize = self.len()) => n != 0 && len % n == 0,
8004adb8:	14800008 	bnez	a0,8004addc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE+0x38>
8004adbc:	00000000 	nop
8004adc0:	08012b72 	j	8004adc8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE+0x24>
8004adc4:	00000000 	nop
                    ::core::panicking::panic_nounwind(
8004adc8:	3c01810a 	lui	at,0x810a
8004adcc:	2424d64c 	addiu	a0,at,-10676
8004add0:	24050084 	li	a1,132
8004add4:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8004add8:	00000000 	nop
8004addc:	8fa10014 	lw	at,20(sp)
8004ade0:	1020000c 	beqz	at,8004ae14 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE+0x70>
8004ade4:	00000000 	nop
8004ade8:	08012b7c 	j	8004adf0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE+0x4c>
8004adec:	00000000 	nop
8004adf0:	8fa10014 	lw	at,20(sp)
8004adf4:	8fa20010 	lw	v0,16(sp)
8004adf8:	0041001b 	divu	zero,v0,at
8004adfc:	002001f4 	teq	at,zero,0x7
8004ae00:	00000810 	mfhi	at
8004ae04:	10200007 	beqz	at,8004ae24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE+0x80>
8004ae08:	00000000 	nop
8004ae0c:	08012b72 	j	8004adc8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE+0x24>
8004ae10:	00000000 	nop
8004ae14:	3c01810a 	lui	at,0x810a
8004ae18:	2424d63c 	addiu	a0,at,-10692
8004ae1c:	0c012463 	jal	8004918c <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
8004ae20:	00000000 	nop
8004ae24:	27bd0020 	addiu	sp,sp,32
            }
8004ae28:	03e00008 	jr	ra
8004ae2c:	00000000 	nop

8004ae30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked18precondition_check17h2b5a4e6c0f917b4cE>:
            const fn precondition_check($($name:$ty),*) {
8004ae30:	27bdffe8 	addiu	sp,sp,-24
8004ae34:	afa40010 	sw	a0,16(sp)
8004ae38:	afa50014 	sw	a1,20(sp)
            (mid: usize = mid, len: usize = len) => mid <= len,
8004ae3c:	00a4082b 	sltu	at,a1,a0
8004ae40:	10200008 	beqz	at,8004ae64 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked18precondition_check17h2b5a4e6c0f917b4cE+0x34>
8004ae44:	00000000 	nop
8004ae48:	08012b94 	j	8004ae50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked18precondition_check17h2b5a4e6c0f917b4cE+0x20>
8004ae4c:	00000000 	nop
                    ::core::panicking::panic_nounwind(
8004ae50:	3c01810a 	lui	at,0x810a
8004ae54:	2424d6d0 	addiu	a0,at,-10544
8004ae58:	24050064 	li	a1,100
8004ae5c:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8004ae60:	00000000 	nop
8004ae64:	27bd0018 	addiu	sp,sp,24
            }
8004ae68:	03e00008 	jr	ra
8004ae6c:	00000000 	nop

8004ae70 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked18precondition_check17h0c93f18c8b2c7519E>:
            const fn precondition_check($($name:$ty),*) {
8004ae70:	27bdffd8 	addiu	sp,sp,-40
8004ae74:	afa60014 	sw	a2,20(sp)
8004ae78:	afa50018 	sw	a1,24(sp)
8004ae7c:	afa4001c 	sw	a0,28(sp)
8004ae80:	afa50020 	sw	a1,32(sp)
8004ae84:	afa60024 	sw	a2,36(sp)
            ) => end >= start && end <= len,
8004ae88:	00a4082b 	sltu	at,a1,a0
8004ae8c:	10200008 	beqz	at,8004aeb0 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked18precondition_check17h0c93f18c8b2c7519E+0x40>
8004ae90:	00000000 	nop
8004ae94:	08012ba7 	j	8004ae9c <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked18precondition_check17h0c93f18c8b2c7519E+0x2c>
8004ae98:	00000000 	nop
                    ::core::panicking::panic_nounwind(
8004ae9c:	3c01810a 	lui	at,0x810a
8004aea0:	2424d734 	addiu	a0,at,-10444
8004aea4:	24050066 	li	a1,102
8004aea8:	0c00fbb0 	jal	8003eec0 <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8004aeac:	00000000 	nop
8004aeb0:	8fa10014 	lw	at,20(sp)
8004aeb4:	8fa20018 	lw	v0,24(sp)
8004aeb8:	0022082b 	sltu	at,at,v0
8004aebc:	1420fff7 	bnez	at,8004ae9c <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked18precondition_check17h0c93f18c8b2c7519E+0x2c>
8004aec0:	00000000 	nop
8004aec4:	08012bb3 	j	8004aecc <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked18precondition_check17h0c93f18c8b2c7519E+0x5c>
8004aec8:	00000000 	nop
8004aecc:	27bd0028 	addiu	sp,sp,40
            }
8004aed0:	03e00008 	jr	ra
8004aed4:	00000000 	nop

8004aed8 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE>:
        1, 0, 2, 11, 2, 52, 5, 5, 1, 1, 1, 0, 1, 6, 15, 0, 5, 59, 7, 0, 1, 63, 4, 81, 1, 0, 2, 0,
        46, 2, 23, 0, 1, 1, 3, 4, 5, 8, 8, 2, 7, 30, 4, 148, 3, 0, 55, 4, 50, 8, 1, 14, 1, 22, 5, 1,
        15, 0, 7, 1, 17, 2, 7, 1, 2, 1, 5, 100, 1, 160, 7, 0, 1, 61, 4, 0, 4, 0, 7, 109, 7, 0, 96,
        128, 240, 0,
    ];
    pub fn lookup(c: char) -> bool {
8004aed8:	27bdff58 	addiu	sp,sp,-168
8004aedc:	afbf00a4 	sw	ra,164(sp)
8004aee0:	00800825 	move	at,a0
8004aee4:	afa1003c 	sw	at,60(sp)
8004aee8:	afa10040 	sw	at,64(sp)
8004aeec:	afa10080 	sw	at,128(sp)
8004aef0:	3c02810a 	lui	v0,0x810a
8004aef4:	2444d79c 	addiu	a0,v0,-10340
8004aef8:	afa40084 	sw	a0,132(sp)
8004aefc:	3c02810a 	lui	v0,0x810a
8004af00:	2442d820 	addiu	v0,v0,-10208
8004af04:	afa20088 	sw	v0,136(sp)
        match short_offset_runs.binary_search_by_key(&(needle << 11), |header| header << 11) {
8004af08:	00010ac0 	sll	at,at,0xb
8004af0c:	afa10050 	sw	at,80(sp)
8004af10:	24050021 	li	a1,33
8004af14:	27a60050 	addiu	a2,sp,80
8004af18:	0c0114bb 	jal	800452ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$20binary_search_by_key17hb631560c3d60eb27E>
8004af1c:	00000000 	nop
8004af20:	afa20048 	sw	v0,72(sp)
8004af24:	afa3004c 	sw	v1,76(sp)
8004af28:	8fa10048 	lw	at,72(sp)
8004af2c:	1420000b 	bnez	at,8004af5c <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x84>
8004af30:	00000000 	nop
8004af34:	08012bcf 	j	8004af3c <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x64>
8004af38:	00000000 	nop
            Ok(idx) => idx + 1,
8004af3c:	8fa1004c 	lw	at,76(sp)
8004af40:	afa1008c 	sw	at,140(sp)
8004af44:	24210001 	addiu	at,at,1
8004af48:	afa10038 	sw	at,56(sp)
8004af4c:	1020000c 	beqz	at,8004af80 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0xa8>
8004af50:	00000000 	nop
8004af54:	08012bdc 	j	8004af70 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x98>
8004af58:	00000000 	nop
            Err(idx) => idx,
8004af5c:	8fa1004c 	lw	at,76(sp)
8004af60:	afa10090 	sw	at,144(sp)
8004af64:	afa10044 	sw	at,68(sp)
8004af68:	08012be4 	j	8004af90 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0xb8>
8004af6c:	00000000 	nop
            Ok(idx) => idx + 1,
8004af70:	8fa10038 	lw	at,56(sp)
8004af74:	afa10044 	sw	at,68(sp)
8004af78:	08012be4 	j	8004af90 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0xb8>
8004af7c:	00000000 	nop
8004af80:	3c01810a 	lui	at,0x810a
8004af84:	2424cc48 	addiu	a0,at,-13240
8004af88:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8004af8c:	00000000 	nop
    let mut offset_idx = decode_length(short_offset_runs[last_idx]);
8004af90:	8fa10044 	lw	at,68(sp)
8004af94:	afa10034 	sw	at,52(sp)
8004af98:	2c210021 	sltiu	at,at,33
8004af9c:	10200013 	beqz	at,8004afec <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x114>
8004afa0:	00000000 	nop
8004afa4:	08012beb 	j	8004afac <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0xd4>
8004afa8:	00000000 	nop
8004afac:	8fa10034 	lw	at,52(sp)
8004afb0:	00011080 	sll	v0,at,0x2
8004afb4:	3c01810a 	lui	at,0x810a
8004afb8:	2421d79c 	addiu	at,at,-10340
8004afbc:	00220821 	addu	at,at,v0
8004afc0:	8c240000 	lw	a0,0(at)
8004afc4:	0c011f13 	jal	80047c4c <_ZN4core7unicode12unicode_data13decode_length17h5d277b1fd55038d4E>
8004afc8:	00000000 	nop
8004afcc:	afa20054 	sw	v0,84(sp)
    let length = if let Some(next) = short_offset_runs.get(last_idx + 1) {
8004afd0:	8fa10044 	lw	at,68(sp)
8004afd4:	24210001 	addiu	at,at,1
8004afd8:	afa10030 	sw	at,48(sp)
8004afdc:	10200015 	beqz	at,8004b034 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x15c>
8004afe0:	00000000 	nop
8004afe4:	08012c01 	j	8004b004 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x12c>
8004afe8:	00000000 	nop
    let mut offset_idx = decode_length(short_offset_runs[last_idx]);
8004afec:	8fa40034 	lw	a0,52(sp)
8004aff0:	3c01810a 	lui	at,0x810a
8004aff4:	2426cc58 	addiu	a2,at,-13224
8004aff8:	24050021 	li	a1,33
8004affc:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8004b000:	00000000 	nop
    let length = if let Some(next) = short_offset_runs.get(last_idx + 1) {
8004b004:	8fa60030 	lw	a2,48(sp)
8004b008:	3c01810a 	lui	at,0x810a
8004b00c:	2424d79c 	addiu	a0,at,-10340
8004b010:	24050021 	li	a1,33
8004b014:	0c0111dd 	jal	80044774 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17he7a74869bcb725e5E>
8004b018:	00000000 	nop
8004b01c:	afa2005c 	sw	v0,92(sp)
8004b020:	8fa1005c 	lw	at,92(sp)
8004b024:	14200007 	bnez	at,8004b044 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x16c>
8004b028:	00000000 	nop
8004b02c:	08012c1e 	j	8004b078 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x1a0>
8004b030:	00000000 	nop
8004b034:	3c01810a 	lui	at,0x810a
8004b038:	2424cc68 	addiu	a0,at,-13208
8004b03c:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8004b040:	00000000 	nop
8004b044:	8fa1005c 	lw	at,92(sp)
8004b048:	afa10094 	sw	at,148(sp)
        decode_length(*next) - offset_idx
8004b04c:	8c240000 	lw	a0,0(at)
8004b050:	0c011f13 	jal	80047c4c <_ZN4core7unicode12unicode_data13decode_length17h5d277b1fd55038d4E>
8004b054:	00000000 	nop
8004b058:	8fa10054 	lw	at,84(sp)
8004b05c:	00411823 	subu	v1,v0,at
8004b060:	afa3002c 	sw	v1,44(sp)
8004b064:	0041082b 	sltu	at,v0,at
8004b068:	14200010 	bnez	at,8004b0ac <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x1d4>
8004b06c:	00000000 	nop
8004b070:	08012c27 	j	8004b09c <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x1c4>
8004b074:	00000000 	nop
        offsets.len() - offset_idx
8004b078:	8fa10054 	lw	at,84(sp)
8004b07c:	240202d7 	li	v0,727
8004b080:	00411023 	subu	v0,v0,at
8004b084:	afa20028 	sw	v0,40(sp)
8004b088:	2c2102d8 	sltiu	at,at,728
8004b08c:	10200029 	beqz	at,8004b134 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x25c>
8004b090:	00000000 	nop
8004b094:	08012c49 	j	8004b124 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x24c>
8004b098:	00000000 	nop
        decode_length(*next) - offset_idx
8004b09c:	8fa1002c 	lw	at,44(sp)
8004b0a0:	afa10058 	sw	at,88(sp)
    let length = if let Some(next) = short_offset_runs.get(last_idx + 1) {
8004b0a4:	08012c2f 	j	8004b0bc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x1e4>
8004b0a8:	00000000 	nop
        decode_length(*next) - offset_idx
8004b0ac:	3c01810a 	lui	at,0x810a
8004b0b0:	2424cc78 	addiu	a0,at,-13192
8004b0b4:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8004b0b8:	00000000 	nop
        last_idx.checked_sub(1).map(|prev| decode_prefix_sum(short_offset_runs[prev])).unwrap_or(0);
8004b0bc:	8fa40044 	lw	a0,68(sp)
8004b0c0:	24050001 	li	a1,1
8004b0c4:	0c01217a 	jal	800485e8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h794c6c83e98caf43E>
8004b0c8:	00000000 	nop
8004b0cc:	00402025 	move	a0,v0
8004b0d0:	00602825 	move	a1,v1
8004b0d4:	3c01810a 	lui	at,0x810a
8004b0d8:	2421d79c 	addiu	at,at,-10340
8004b0dc:	afa10060 	sw	at,96(sp)
8004b0e0:	8fa60060 	lw	a2,96(sp)
8004b0e4:	0c00fa72 	jal	8003e9c8 <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE>
8004b0e8:	00000000 	nop
8004b0ec:	00402025 	move	a0,v0
8004b0f0:	00602825 	move	a1,v1
8004b0f4:	24060000 	li	a2,0
8004b0f8:	0c00f988 	jal	8003e620 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE>
8004b0fc:	00000000 	nop
8004b100:	8fa1003c 	lw	at,60(sp)
8004b104:	afa20098 	sw	v0,152(sp)
    let total = needle - prev;
8004b108:	00221823 	subu	v1,at,v0
8004b10c:	afa30024 	sw	v1,36(sp)
8004b110:	0022082b 	sltu	at,at,v0
8004b114:	14200015 	bnez	at,8004b16c <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x294>
8004b118:	00000000 	nop
8004b11c:	08012c51 	j	8004b144 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x26c>
8004b120:	00000000 	nop
        offsets.len() - offset_idx
8004b124:	8fa10028 	lw	at,40(sp)
8004b128:	afa10058 	sw	at,88(sp)
    let length = if let Some(next) = short_offset_runs.get(last_idx + 1) {
8004b12c:	08012c2f 	j	8004b0bc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x1e4>
8004b130:	00000000 	nop
        offsets.len() - offset_idx
8004b134:	3c01810a 	lui	at,0x810a
8004b138:	2424cc88 	addiu	a0,at,-13176
8004b13c:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8004b140:	00000000 	nop
    let total = needle - prev;
8004b144:	8fa10024 	lw	at,36(sp)
8004b148:	afa1009c 	sw	at,156(sp)
    let mut prefix_sum = 0;
8004b14c:	afa00064 	sw	zero,100(sp)
    for _ in 0..(length - 1) {
8004b150:	8fa10058 	lw	at,88(sp)
8004b154:	2422ffff 	addiu	v0,at,-1
8004b158:	afa20020 	sw	v0,32(sp)
8004b15c:	10200012 	beqz	at,8004b1a8 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x2d0>
8004b160:	00000000 	nop
8004b164:	08012c5f 	j	8004b17c <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x2a4>
8004b168:	00000000 	nop
    let total = needle - prev;
8004b16c:	3c01810a 	lui	at,0x810a
8004b170:	2424cc98 	addiu	a0,at,-13160
8004b174:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8004b178:	00000000 	nop
    for _ in 0..(length - 1) {
8004b17c:	8fa10020 	lw	at,32(sp)
8004b180:	afa00068 	sw	zero,104(sp)
8004b184:	afa1006c 	sw	at,108(sp)
8004b188:	8fa40068 	lw	a0,104(sp)
8004b18c:	8fa5006c 	lw	a1,108(sp)
8004b190:	0c00f80b 	jal	8003e02c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h08672f7f2dd54636E>
8004b194:	00000000 	nop
8004b198:	afa20070 	sw	v0,112(sp)
8004b19c:	afa30074 	sw	v1,116(sp)
8004b1a0:	08012c6e 	j	8004b1b8 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x2e0>
8004b1a4:	00000000 	nop
8004b1a8:	3c01810a 	lui	at,0x810a
8004b1ac:	2424cca8 	addiu	a0,at,-13144
8004b1b0:	0c01240f 	jal	8004903c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8004b1b4:	00000000 	nop
8004b1b8:	27a40070 	addiu	a0,sp,112
8004b1bc:	0c00f802 	jal	8003e008 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h77596a36d38db716E>
8004b1c0:	00000000 	nop
8004b1c4:	afa20078 	sw	v0,120(sp)
8004b1c8:	afa3007c 	sw	v1,124(sp)
8004b1cc:	8fa10078 	lw	at,120(sp)
8004b1d0:	1020003a 	beqz	at,8004b2bc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x3e4>
8004b1d4:	00000000 	nop
8004b1d8:	08012c78 	j	8004b1e0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x308>
8004b1dc:	00000000 	nop
        let offset = offsets[offset_idx];
8004b1e0:	8fa10054 	lw	at,84(sp)
8004b1e4:	afa1001c 	sw	at,28(sp)
8004b1e8:	2c2102d7 	sltiu	at,at,727
8004b1ec:	10200011 	beqz	at,8004b234 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x35c>
8004b1f0:	00000000 	nop
8004b1f4:	08012c7f 	j	8004b1fc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x324>
8004b1f8:	00000000 	nop
8004b1fc:	8fa2001c 	lw	v0,28(sp)
8004b200:	3c01810a 	lui	at,0x810a
8004b204:	2421d820 	addiu	at,at,-10208
8004b208:	00220821 	addu	at,at,v0
8004b20c:	90210000 	lbu	at,0(at)
8004b210:	a3a100a3 	sb	at,163(sp)
        prefix_sum += offset as u32;
8004b214:	8fa20064 	lw	v0,100(sp)
8004b218:	00410821 	addu	at,v0,at
8004b21c:	afa10018 	sw	at,24(sp)
8004b220:	0022082b 	sltu	at,at,v0
8004b224:	14200012 	bnez	at,8004b270 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x398>
8004b228:	00000000 	nop
8004b22c:	08012c93 	j	8004b24c <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x374>
8004b230:	00000000 	nop
        let offset = offsets[offset_idx];
8004b234:	8fa4001c 	lw	a0,28(sp)
8004b238:	3c01810a 	lui	at,0x810a
8004b23c:	2426ccb8 	addiu	a2,at,-13128
8004b240:	240502d7 	li	a1,727
8004b244:	0c00fbe8 	jal	8003efa0 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8004b248:	00000000 	nop
        prefix_sum += offset as u32;
8004b24c:	8fa10024 	lw	at,36(sp)
8004b250:	8fa20018 	lw	v0,24(sp)
8004b254:	afa20064 	sw	v0,100(sp)
        if prefix_sum > total {
8004b258:	8fa20064 	lw	v0,100(sp)
8004b25c:	0022082b 	sltu	at,at,v0
8004b260:	14200016 	bnez	at,8004b2bc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x3e4>
8004b264:	00000000 	nop
8004b268:	08012ca0 	j	8004b280 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x3a8>
8004b26c:	00000000 	nop
        prefix_sum += offset as u32;
8004b270:	3c01810a 	lui	at,0x810a
8004b274:	2424ccc8 	addiu	a0,at,-13112
8004b278:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8004b27c:	00000000 	nop
        offset_idx += 1;
8004b280:	8fa10054 	lw	at,84(sp)
8004b284:	24210001 	addiu	at,at,1
8004b288:	afa10014 	sw	at,20(sp)
8004b28c:	10200007 	beqz	at,8004b2ac <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x3d4>
8004b290:	00000000 	nop
8004b294:	08012ca7 	j	8004b29c <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x3c4>
8004b298:	00000000 	nop
8004b29c:	8fa10014 	lw	at,20(sp)
8004b2a0:	afa10054 	sw	at,84(sp)
    for _ in 0..(length - 1) {
8004b2a4:	08012c6e 	j	8004b1b8 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x2e0>
8004b2a8:	00000000 	nop
        offset_idx += 1;
8004b2ac:	3c01810a 	lui	at,0x810a
8004b2b0:	2424ccd8 	addiu	a0,at,-13096
8004b2b4:	0c012401 	jal	80049004 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8004b2b8:	00000000 	nop
    offset_idx % 2 == 1
8004b2bc:	8fa10054 	lw	at,84(sp)
        super::skip_search(
            c as u32,
            &SHORT_OFFSET_RUNS,
            &OFFSETS,
        )
    }
8004b2c0:	30220001 	andi	v0,at,0x1
8004b2c4:	8fbf00a4 	lw	ra,164(sp)
8004b2c8:	27bd00a8 	addiu	sp,sp,168
8004b2cc:	03e00008 	jr	ra
8004b2d0:	00000000 	nop

8004b2d4 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hf6230c95c9a62101E>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
8004b2d4:	27bdfff0 	addiu	sp,sp,-16
8004b2d8:	afa40000 	sw	a0,0(sp)
8004b2dc:	afa50004 	sw	a1,4(sp)
8004b2e0:	afa40008 	sw	a0,8(sp)
8004b2e4:	afa5000c 	sw	a1,12(sp)
8004b2e8:	00851021 	addu	v0,a0,a1
8004b2ec:	27bd0010 	addiu	sp,sp,16
        }
8004b2f0:	03e00008 	jr	ra
8004b2f4:	00000000 	nop

8004b2f8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>:
    fn next(&mut self) -> Option<A> {
8004b2f8:	27bdffe8 	addiu	sp,sp,-24
8004b2fc:	afbf0014 	sw	ra,20(sp)
8004b300:	afa40010 	sw	a0,16(sp)
        self.spec_next()
8004b304:	0c012ccf 	jal	8004b33c <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5d9e55b9152dab6fE>
8004b308:	00000000 	nop
    }
8004b30c:	8fbf0014 	lw	ra,20(sp)
8004b310:	27bd0018 	addiu	sp,sp,24
8004b314:	03e00008 	jr	ra
8004b318:	00000000 	nop

8004b31c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>:
    fn into_iter(self) -> I {
8004b31c:	27bdfff8 	addiu	sp,sp,-8
8004b320:	00a01825 	move	v1,a1
8004b324:	00801025 	move	v0,a0
8004b328:	afa20000 	sw	v0,0(sp)
8004b32c:	afa30004 	sw	v1,4(sp)
8004b330:	27bd0008 	addiu	sp,sp,8
    }
8004b334:	03e00008 	jr	ra
8004b338:	00000000 	nop

8004b33c <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5d9e55b9152dab6fE>:
    fn spec_next(&mut self) -> Option<T> {
8004b33c:	27bdffc8 	addiu	sp,sp,-56
8004b340:	afbf0034 	sw	ra,52(sp)
8004b344:	afa40018 	sw	a0,24(sp)
8004b348:	afa40024 	sw	a0,36(sp)
        if self.start < self.end {
8004b34c:	24810004 	addiu	at,a0,4
8004b350:	afa4002c 	sw	a0,44(sp)
8004b354:	afa10030 	sw	at,48(sp)
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
8004b358:	8c810000 	lw	at,0(a0)
8004b35c:	8c820004 	lw	v0,4(a0)
8004b360:	0022082b 	sltu	at,at,v0
8004b364:	14200006 	bnez	at,8004b380 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5d9e55b9152dab6fE+0x44>
8004b368:	00000000 	nop
8004b36c:	08012cdd 	j	8004b374 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5d9e55b9152dab6fE+0x38>
8004b370:	00000000 	nop
            None
8004b374:	afa0001c 	sw	zero,28(sp)
        if self.start < self.end {
8004b378:	08012cf1 	j	8004b3c4 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5d9e55b9152dab6fE+0x88>
8004b37c:	00000000 	nop
            let old = self.start;
8004b380:	8fa10018 	lw	at,24(sp)
8004b384:	8c240000 	lw	a0,0(at)
8004b388:	afa40014 	sw	a0,20(sp)
8004b38c:	afa40028 	sw	a0,40(sp)
8004b390:	24050001 	li	a1,1
8004b394:	afa50010 	sw	a1,16(sp)
            self.start = unsafe { Step::forward_unchecked(old, 1) };
8004b398:	0c012cb5 	jal	8004b2d4 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hf6230c95c9a62101E>
8004b39c:	00000000 	nop
8004b3a0:	8fa40018 	lw	a0,24(sp)
8004b3a4:	8fa10010 	lw	at,16(sp)
8004b3a8:	00401825 	move	v1,v0
8004b3ac:	8fa20014 	lw	v0,20(sp)
8004b3b0:	ac830000 	sw	v1,0(a0)
            Some(old)
8004b3b4:	afa20020 	sw	v0,32(sp)
8004b3b8:	afa1001c 	sw	at,28(sp)
        if self.start < self.end {
8004b3bc:	08012cf1 	j	8004b3c4 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5d9e55b9152dab6fE+0x88>
8004b3c0:	00000000 	nop
    }
8004b3c4:	8fa2001c 	lw	v0,28(sp)
8004b3c8:	8fa30020 	lw	v1,32(sp)
8004b3cc:	8fbf0034 	lw	ra,52(sp)
8004b3d0:	27bd0038 	addiu	sp,sp,56
8004b3d4:	03e00008 	jr	ra
8004b3d8:	00000000 	nop
