
target/mips32/debug/mos-6502:     file format elf32-tradlittlemips


Disassembly of section .tlb_miss_entry:

80000000 <tlb_miss_entry>:
80000000:	08000060 	j	80000180 <exc_gen_entry>
80000004:	00000000 	nop

Disassembly of section .exc_gen_entry:

80000180 <exc_gen_entry>:
80000180:	401a6000 	mfc0	k0,c0_status
80000184:	335a0010 	andi	k0,k0,0x10
80000188:	13400003 	beqz	k0,80000198 <exc_gen_entry+0x18>
8000018c:	03a0d025 	move	k0,sp
80000190:	3c1d8108 	lui	sp,0x8108
80000194:	27bd6000 	addiu	sp,sp,24576
80000198:	27bdff68 	addiu	sp,sp,-152
8000019c:	afba0074 	sw	k0,116(sp)
800001a0:	401a6000 	mfc0	k0,c0_status
800001a4:	afba0080 	sw	k0,128(sp)
800001a8:	401a6800 	mfc0	k0,c0_cause
800001ac:	afba0090 	sw	k0,144(sp)
800001b0:	401a7000 	mfc0	k0,c0_epc
800001b4:	afba0094 	sw	k0,148(sp)
800001b8:	401a4000 	mfc0	k0,c0_badvaddr
800001bc:	afba008c 	sw	k0,140(sp)
800001c0:	0000d010 	mfhi	k0
800001c4:	afba0084 	sw	k0,132(sp)
800001c8:	0000d012 	mflo	k0
800001cc:	afba0088 	sw	k0,136(sp)
800001d0:	afa00000 	sw	zero,0(sp)
800001d4:	afa10004 	sw	at,4(sp)
800001d8:	afa20008 	sw	v0,8(sp)
800001dc:	afa3000c 	sw	v1,12(sp)
800001e0:	afa40010 	sw	a0,16(sp)
800001e4:	afa50014 	sw	a1,20(sp)
800001e8:	afa60018 	sw	a2,24(sp)
800001ec:	afa7001c 	sw	a3,28(sp)
800001f0:	afa80020 	sw	t0,32(sp)
800001f4:	afa90024 	sw	t1,36(sp)
800001f8:	afaa0028 	sw	t2,40(sp)
800001fc:	afab002c 	sw	t3,44(sp)
80000200:	afac0030 	sw	t4,48(sp)
80000204:	afad0034 	sw	t5,52(sp)
80000208:	afae0038 	sw	t6,56(sp)
8000020c:	afaf003c 	sw	t7,60(sp)
80000210:	afb00040 	sw	s0,64(sp)
80000214:	afb10044 	sw	s1,68(sp)
80000218:	afb20048 	sw	s2,72(sp)
8000021c:	afb3004c 	sw	s3,76(sp)
80000220:	afb40050 	sw	s4,80(sp)
80000224:	afb50054 	sw	s5,84(sp)
80000228:	afb60058 	sw	s6,88(sp)
8000022c:	afb7005c 	sw	s7,92(sp)
80000230:	afb80060 	sw	t8,96(sp)
80000234:	afb90064 	sw	t9,100(sp)
80000238:	afba0068 	sw	k0,104(sp)
8000023c:	afbb006c 	sw	k1,108(sp)
80000240:	afbc0070 	sw	gp,112(sp)
80000244:	afbe0078 	sw	s8,120(sp)
80000248:	afbf007c 	sw	ra,124(sp)
8000024c:	40086000 	mfc0	t0,c0_status
80000250:	2401ffec 	li	at,-20
80000254:	01014024 	and	t0,t0,at
80000258:	40886000 	mtc0	t0,c0_status
8000025c:	0c00cd6c 	jal	800335b0 <trap_handler>
80000260:	03a02025 	move	a0,sp
80000264:	0800009b 	j	8000026c <ret_from_exception>
80000268:	00000000 	nop

8000026c <ret_from_exception>:
8000026c:	8fa20080 	lw	v0,128(sp)
80000270:	40826000 	mtc0	v0,c0_status
80000274:	8fa30088 	lw	v1,136(sp)
80000278:	00600013 	mtlo	v1
8000027c:	8fa20084 	lw	v0,132(sp)
80000280:	8fa30094 	lw	v1,148(sp)
80000284:	00400011 	mthi	v0
80000288:	40837000 	mtc0	v1,c0_epc
8000028c:	8fbf007c 	lw	ra,124(sp)
80000290:	8fbe0078 	lw	s8,120(sp)
80000294:	8fbc0070 	lw	gp,112(sp)
80000298:	8fb90064 	lw	t9,100(sp)
8000029c:	8fb80060 	lw	t8,96(sp)
800002a0:	8fb7005c 	lw	s7,92(sp)
800002a4:	8fb60058 	lw	s6,88(sp)
800002a8:	8fb50054 	lw	s5,84(sp)
800002ac:	8fb40050 	lw	s4,80(sp)
800002b0:	8fb3004c 	lw	s3,76(sp)
800002b4:	8fb20048 	lw	s2,72(sp)
800002b8:	8fb10044 	lw	s1,68(sp)
800002bc:	8fb00040 	lw	s0,64(sp)
800002c0:	8faf003c 	lw	t7,60(sp)
800002c4:	8fae0038 	lw	t6,56(sp)
800002c8:	8fad0034 	lw	t5,52(sp)
800002cc:	8fac0030 	lw	t4,48(sp)
800002d0:	8fab002c 	lw	t3,44(sp)
800002d4:	8faa0028 	lw	t2,40(sp)
800002d8:	8fa90024 	lw	t1,36(sp)
800002dc:	8fa80020 	lw	t0,32(sp)
800002e0:	8fa7001c 	lw	a3,28(sp)
800002e4:	8fa60018 	lw	a2,24(sp)
800002e8:	8fa50014 	lw	a1,20(sp)
800002ec:	8fa40010 	lw	a0,16(sp)
800002f0:	8fa3000c 	lw	v1,12(sp)
800002f4:	8fa20008 	lw	v0,8(sp)
800002f8:	8fa10004 	lw	at,4(sp)
800002fc:	8fbd0074 	lw	sp,116(sp)
80000300:	42000018 	eret

Disassembly of section .text:

80020000 <_init>:
elf::DEFINE_ELF_BYTES!(TEST2, "../target/user/bin/test2");
elf::DEFINE_ELF_BYTES!(FKTEST, "../target/user/bin/fktest");

#[no_mangle]
#[link_section = ".text.boot"]
extern "C" fn _init(mem_sz: usize) -> ! {
80020000:	27bdfee0 	addiu	sp,sp,-288
80020004:	afbf011c 	sw	ra,284(sp)
80020008:	afa4002c 	sw	a0,44(sp)
8002000c:	afa4006c 	sw	a0,108(sp)
    }
}

#[inline(always)]
fn logo() {
    print!(" __  __    ____     _____\n");
80020010:	3c018105 	lui	at,0x8105
80020014:	2425e5e0 	addiu	a1,at,-6688
80020018:	27a40074 	addiu	a0,sp,116
8002001c:	afa40010 	sw	a0,16(sp)
80020020:	24060001 	li	a2,1
80020024:	afa60038 	sw	a2,56(sp)
80020028:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
8002002c:	00000000 	nop
80020030:	8fa40010 	lw	a0,16(sp)
80020034:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
80020038:	00000000 	nop
8002003c:	8fa60038 	lw	a2,56(sp)
    print!("|  \\/  |  / __ \\   / ____|\n");
80020040:	3c018105 	lui	at,0x8105
80020044:	2425e604 	addiu	a1,at,-6652
80020048:	27a4008c 	addiu	a0,sp,140
8002004c:	afa40014 	sw	a0,20(sp)
80020050:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
80020054:	00000000 	nop
80020058:	8fa40014 	lw	a0,20(sp)
8002005c:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
80020060:	00000000 	nop
80020064:	8fa60038 	lw	a2,56(sp)
    print!("| \\  / | | |  | | | (___\n");
80020068:	3c018105 	lui	at,0x8105
8002006c:	2425e628 	addiu	a1,at,-6616
80020070:	27a400a4 	addiu	a0,sp,164
80020074:	afa40018 	sw	a0,24(sp)
80020078:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
8002007c:	00000000 	nop
80020080:	8fa40018 	lw	a0,24(sp)
80020084:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
80020088:	00000000 	nop
8002008c:	8fa60038 	lw	a2,56(sp)
    print!("| |\\/| | | |  | |  \\___ \\\n");
80020090:	3c018105 	lui	at,0x8105
80020094:	2425e64c 	addiu	a1,at,-6580
80020098:	27a400bc 	addiu	a0,sp,188
8002009c:	afa4001c 	sw	a0,28(sp)
800200a0:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
800200a4:	00000000 	nop
800200a8:	8fa4001c 	lw	a0,28(sp)
800200ac:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
800200b0:	00000000 	nop
800200b4:	8fa60038 	lw	a2,56(sp)
    print!("| |  | | | |__| |  ____) |\n");
800200b8:	3c018105 	lui	at,0x8105
800200bc:	2425e670 	addiu	a1,at,-6544
800200c0:	27a400d4 	addiu	a0,sp,212
800200c4:	afa40020 	sw	a0,32(sp)
800200c8:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
800200cc:	00000000 	nop
800200d0:	8fa40020 	lw	a0,32(sp)
800200d4:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
800200d8:	00000000 	nop
800200dc:	8fa60038 	lw	a2,56(sp)
    print!("|_|  |_|  \\____/  |_____/\n");
800200e0:	3c018105 	lui	at,0x8105
800200e4:	2425e694 	addiu	a1,at,-6508
800200e8:	27a400ec 	addiu	a0,sp,236
800200ec:	afa40024 	sw	a0,36(sp)
800200f0:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
800200f4:	00000000 	nop
800200f8:	8fa40024 	lw	a0,36(sp)
800200fc:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
80020100:	00000000 	nop
80020104:	8fa60038 	lw	a2,56(sp)
    print!("\n");
80020108:	3c018105 	lui	at,0x8105
8002010c:	2425e69c 	addiu	a1,at,-6500
80020110:	27a40104 	addiu	a0,sp,260
80020114:	afa40028 	sw	a0,40(sp)
80020118:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
8002011c:	00000000 	nop
80020120:	8fa40028 	lw	a0,40(sp)
80020124:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
80020128:	00000000 	nop
8002012c:	8fa4002c 	lw	a0,44(sp)
80020130:	afa40070 	sw	a0,112(sp)
pub const UCOW: VirtAddr = VirtAddr::new(0x3fe000);
pub const UTEMP: VirtAddr = VirtAddr::new(0x3fd000);

#[inline(always)]
pub fn mem_init(mem_sz: usize) {
    page::page_init(mem_sz);
80020134:	0c00af72 	jal	8002bdc8 <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E>
80020138:	00000000 	nop
    proc::env_init();
8002013c:	0c00ba3b 	jal	8002e8ec <_ZN8mos_65024proc8env_init17hc9ab69d3ac65283fE>
80020140:	00000000 	nop
    trap::trap_init();
80020144:	0c00cbfc 	jal	80032ff0 <trap_init>
80020148:	00000000 	nop
8002014c:	8fa60038 	lw	a2,56(sp)
    println!("creating test1");
80020150:	3c018105 	lui	at,0x8105
80020154:	2425e5a4 	addiu	a1,at,-6748
80020158:	27a4003c 	addiu	a0,sp,60
8002015c:	afa40030 	sw	a0,48(sp)
80020160:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
80020164:	00000000 	nop
80020168:	8fa40030 	lw	a0,48(sp)
8002016c:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
80020170:	00000000 	nop
    proc::env_create(TEST1);
80020174:	3c018106 	lui	at,0x8106
80020178:	8c24450c 	lw	a0,17676(at)
8002017c:	2421450c 	addiu	at,at,17676
80020180:	8c250004 	lw	a1,4(at)
80020184:	0c00bcad 	jal	8002f2b4 <_ZN8mos_65024proc10env_create17h022332862736453bE>
80020188:	00000000 	nop
8002018c:	8fa60038 	lw	a2,56(sp)
    println!("creating test2");
80020190:	3c018105 	lui	at,0x8105
80020194:	2425e5bc 	addiu	a1,at,-6724
80020198:	27a40054 	addiu	a0,sp,84
8002019c:	afa40034 	sw	a0,52(sp)
800201a0:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
800201a4:	00000000 	nop
800201a8:	8fa40034 	lw	a0,52(sp)
800201ac:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
800201b0:	00000000 	nop
    proc::env_create(TEST2);
800201b4:	3c018108 	lui	at,0x8108
800201b8:	8c24a2f4 	lw	a0,-23820(at)
800201bc:	2421a2f4 	addiu	at,at,-23820
800201c0:	8c250004 	lw	a1,4(at)
800201c4:	0c00bcad 	jal	8002f2b4 <_ZN8mos_65024proc10env_create17h022332862736453bE>
800201c8:	00000000 	nop
800201cc:	8fa40038 	lw	a0,56(sp)
    sched::schedule(true);
800201d0:	0c00b512 	jal	8002d448 <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E>
800201d4:	00000000 	nop
    ___avoid_fk_compiler_optimization();
800201d8:	0c00cdd7 	jal	8003375c <_ZN8mos_65024trap33___avoid_fk_compiler_optimization17h29848f219578d1b2E>
800201dc:	00000000 	nop
    dev::halt();
800201e0:	0c00aeb6 	jal	8002bad8 <_ZN8mos_65023dev4halt17hed598abf4ab60b77E>
800201e4:	00000000 	nop

800201e8 <_start>:
        arch::asm!(
800201e8:	40806000 	mtc0	zero,c0_status
800201ec:	3c1d8108 	lui	sp,0x8108
800201f0:	27bd6000 	addiu	sp,sp,24576
800201f4:	00e02025 	move	a0,a3
800201f8:	08008000 	j	80020000 <_init>
800201fc:	00000000 	nop
80020200:	0000000d 	break

80020204 <_ZN119_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..non_null..NonNull$LT$T$GT$$GT$$GT$4from17h06d182927884a928E>:
impl<T: ?Sized> From<NonNull<T>> for Unique<T> {
    /// Converts a `NonNull<T>` to a `Unique<T>`.
    ///
    /// This conversion is infallible since `NonNull` cannot be null.
    #[inline]
    fn from(pointer: NonNull<T>) -> Self {
80020204:	27bdfff8 	addiu	sp,sp,-8
80020208:	afa40004 	sw	a0,4(sp)
        Unique { pointer, _marker: PhantomData }
8002020c:	afa40000 	sw	a0,0(sp)
    }
80020210:	8fa20000 	lw	v0,0(sp)
80020214:	27bd0008 	addiu	sp,sp,8
80020218:	03e00008 	jr	ra
8002021c:	00000000 	nop

80020220 <_ZN119_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..non_null..NonNull$LT$T$GT$$GT$$GT$4from17h32b9bf787645d82eE>:
    fn from(pointer: NonNull<T>) -> Self {
80020220:	27bdfff8 	addiu	sp,sp,-8
80020224:	afa40004 	sw	a0,4(sp)
        Unique { pointer, _marker: PhantomData }
80020228:	afa40000 	sw	a0,0(sp)
    }
8002022c:	8fa20000 	lw	v0,0(sp)
80020230:	27bd0008 	addiu	sp,sp,8
80020234:	03e00008 	jr	ra
80020238:	00000000 	nop

8002023c <_ZN119_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..non_null..NonNull$LT$T$GT$$GT$$GT$4from17h9e9992d89e51b79bE>:
    fn from(pointer: NonNull<T>) -> Self {
8002023c:	27bdfff8 	addiu	sp,sp,-8
80020240:	afa40004 	sw	a0,4(sp)
        Unique { pointer, _marker: PhantomData }
80020244:	afa40000 	sw	a0,0(sp)
    }
80020248:	8fa20000 	lw	v0,0(sp)
8002024c:	27bd0008 	addiu	sp,sp,8
80020250:	03e00008 	jr	ra
80020254:	00000000 	nop

80020258 <_ZN119_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..non_null..NonNull$LT$T$GT$$GT$$GT$4from17hd2a865911a51e15cE>:
    fn from(pointer: NonNull<T>) -> Self {
80020258:	27bdfff8 	addiu	sp,sp,-8
8002025c:	afa40004 	sw	a0,4(sp)
        Unique { pointer, _marker: PhantomData }
80020260:	afa40000 	sw	a0,0(sp)
    }
80020264:	8fa20000 	lw	v0,0(sp)
80020268:	27bd0008 	addiu	sp,sp,8
8002026c:	03e00008 	jr	ra
80020270:	00000000 	nop

80020274 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hc0dd7e832e7e990eE>:

#[unstable(feature = "try_trait_v2", issue = "84277")]
impl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>> for Result<T, F> {
    #[inline]
    #[track_caller]
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
80020274:	27bdffe0 	addiu	sp,sp,-32
80020278:	afa40000 	sw	a0,0(sp)
8002027c:	afa50004 	sw	a1,4(sp)
        match residual {
            Err(e) => Err(From::from(e)),
80020280:	8fa20000 	lw	v0,0(sp)
80020284:	8fa10004 	lw	at,4(sp)
80020288:	afa20010 	sw	v0,16(sp)
8002028c:	afa10014 	sw	at,20(sp)
80020290:	afa20018 	sw	v0,24(sp)
80020294:	afa1001c 	sw	at,28(sp)
80020298:	afa20008 	sw	v0,8(sp)
8002029c:	afa1000c 	sw	at,12(sp)
        }
    }
800202a0:	8fa20008 	lw	v0,8(sp)
800202a4:	8fa3000c 	lw	v1,12(sp)
800202a8:	27bd0020 	addiu	sp,sp,32
800202ac:	03e00008 	jr	ra
800202b0:	00000000 	nop

800202b4 <_ZN3elf15load_elf_header17h8287d9bd209cd195E>:
/// # Example
/// ```rust
/// let pre_header = ElfIdent::try_load(data).unwrap();
/// let elf_header = load_elf_header::<ElfHeader32>(data, &pre_header).unwrap();
/// ```
pub fn load_elf_header<T>(data: &[u8], pre_header: &ElfIdent) -> Result<T, &'static str>
800202b4:	27bdff60 	addiu	sp,sp,-160
800202b8:	afbf009c 	sw	ra,156(sp)
800202bc:	afa7001c 	sw	a3,28(sp)
800202c0:	afa40014 	sw	a0,20(sp)
800202c4:	afa40018 	sw	a0,24(sp)
800202c8:	afa50088 	sw	a1,136(sp)
800202cc:	afa6008c 	sw	a2,140(sp)
800202d0:	afa70090 	sw	a3,144(sp)
800202d4:	afa50094 	sw	a1,148(sp)
800202d8:	afa60098 	sw	a2,152(sp)
800202dc:	27a40020 	addiu	a0,sp,32
where
    T: ElfHeader,
{
    let header = unsafe { core::ptr::read(data.as_ptr() as *const T) };
800202e0:	0c00891b 	jal	8002246c <_ZN4core3ptr4read17h5b5606e67e65f06fE>
800202e4:	00000000 	nop
800202e8:	8fa7001c 	lw	a3,28(sp)
    #[cfg(target_endian = "big")]
    if pre_header.data == ELF_LITTLE_ENDIAN {
        return Error("not a little endian elf file");
    }
    #[cfg(target_endian = "little")]
    if pre_header.data == ELF_BIG_ENDIAN {
800202ec:	90e10005 	lbu	at,5(a3)
800202f0:	24020002 	li	v0,2
800202f4:	1022003b 	beq	at,v0,800203e4 <_ZN3elf15load_elf_header17h8287d9bd209cd195E+0x130>
800202f8:	00000000 	nop
800202fc:	080080c1 	j	80020304 <_ZN3elf15load_elf_header17h8287d9bd209cd195E+0x50>
80020300:	00000000 	nop
        return Err("not a big endian elf file");
    }
    Ok(header)
80020304:	8fa10014 	lw	at,20(sp)
80020308:	8fa20050 	lw	v0,80(sp)
8002030c:	afa20084 	sw	v0,132(sp)
80020310:	8fa2004c 	lw	v0,76(sp)
80020314:	afa20080 	sw	v0,128(sp)
80020318:	8fa20048 	lw	v0,72(sp)
8002031c:	afa2007c 	sw	v0,124(sp)
80020320:	8fa20044 	lw	v0,68(sp)
80020324:	afa20078 	sw	v0,120(sp)
80020328:	8fa20040 	lw	v0,64(sp)
8002032c:	afa20074 	sw	v0,116(sp)
80020330:	8fa2003c 	lw	v0,60(sp)
80020334:	afa20070 	sw	v0,112(sp)
80020338:	8fa20038 	lw	v0,56(sp)
8002033c:	afa2006c 	sw	v0,108(sp)
80020340:	8fa20034 	lw	v0,52(sp)
80020344:	afa20068 	sw	v0,104(sp)
80020348:	8fa20030 	lw	v0,48(sp)
8002034c:	afa20064 	sw	v0,100(sp)
80020350:	8fa2002c 	lw	v0,44(sp)
80020354:	afa20060 	sw	v0,96(sp)
80020358:	8fa20028 	lw	v0,40(sp)
8002035c:	afa2005c 	sw	v0,92(sp)
80020360:	8fa20024 	lw	v0,36(sp)
80020364:	afa20058 	sw	v0,88(sp)
80020368:	8fa20020 	lw	v0,32(sp)
8002036c:	afa20054 	sw	v0,84(sp)
80020370:	8fa20084 	lw	v0,132(sp)
80020374:	ac220034 	sw	v0,52(at)
80020378:	8fa20080 	lw	v0,128(sp)
8002037c:	ac220030 	sw	v0,48(at)
80020380:	8fa2007c 	lw	v0,124(sp)
80020384:	ac22002c 	sw	v0,44(at)
80020388:	8fa20078 	lw	v0,120(sp)
8002038c:	ac220028 	sw	v0,40(at)
80020390:	8fa20074 	lw	v0,116(sp)
80020394:	ac220024 	sw	v0,36(at)
80020398:	8fa20070 	lw	v0,112(sp)
8002039c:	ac220020 	sw	v0,32(at)
800203a0:	8fa2006c 	lw	v0,108(sp)
800203a4:	ac22001c 	sw	v0,28(at)
800203a8:	8fa20068 	lw	v0,104(sp)
800203ac:	ac220018 	sw	v0,24(at)
800203b0:	8fa20064 	lw	v0,100(sp)
800203b4:	ac220014 	sw	v0,20(at)
800203b8:	8fa20060 	lw	v0,96(sp)
800203bc:	ac220010 	sw	v0,16(at)
800203c0:	8fa2005c 	lw	v0,92(sp)
800203c4:	ac22000c 	sw	v0,12(at)
800203c8:	8fa20058 	lw	v0,88(sp)
800203cc:	ac220008 	sw	v0,8(at)
800203d0:	8fa20054 	lw	v0,84(sp)
800203d4:	ac220004 	sw	v0,4(at)
800203d8:	ac200000 	sw	zero,0(at)
}
800203dc:	08008103 	j	8002040c <_ZN3elf15load_elf_header17h8287d9bd209cd195E+0x158>
800203e0:	00000000 	nop
        return Err("not a big endian elf file");
800203e4:	8fa20014 	lw	v0,20(sp)
800203e8:	3c018105 	lui	at,0x8105
800203ec:	2421c1b8 	addiu	at,at,-15944
800203f0:	ac410004 	sw	at,4(v0)
800203f4:	24010019 	li	at,25
800203f8:	ac410008 	sw	at,8(v0)
800203fc:	24010001 	li	at,1
80020400:	ac410000 	sw	at,0(v0)
}
80020404:	08008103 	j	8002040c <_ZN3elf15load_elf_header17h8287d9bd209cd195E+0x158>
80020408:	00000000 	nop
8002040c:	8fa20018 	lw	v0,24(sp)
80020410:	8fbf009c 	lw	ra,156(sp)
80020414:	27bd00a0 	addiu	sp,sp,160
80020418:	03e00008 	jr	ra
8002041c:	00000000 	nop

80020420 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E>:
/// # Example
/// ```rust
/// let elf_header = load_elf_header::<ElfHeader32>(data, &pre_header).unwrap();
/// let program_headers = load_elf_program_headers::<ProgramHeader32>(data, &elf_header).unwrap();
/// ```
pub fn load_elf_program_headers<T>(
80020420:	27bdfed0 	addiu	sp,sp,-304
80020424:	afbf012c 	sw	ra,300(sp)
80020428:	afa70044 	sw	a3,68(sp)
8002042c:	afa60030 	sw	a2,48(sp)
80020430:	afa50034 	sw	a1,52(sp)
80020434:	afa40038 	sw	a0,56(sp)
80020438:	afa4003c 	sw	a0,60(sp)
8002043c:	8fa10140 	lw	at,320(sp)
80020440:	afa10040 	sw	at,64(sp)
80020444:	afa500d4 	sw	a1,212(sp)
80020448:	afa600d8 	sw	a2,216(sp)
8002044c:	afa700dc 	sw	a3,220(sp)
80020450:	afa100e0 	sw	at,224(sp)
80020454:	24010000 	li	at,0
    elf_header: &dyn ElfHeader,
) -> Result<Vec<T>, &'static str>
where
    T: ProgramHeader,
{
    let mut program_headers: Vec<T> = Vec::new();
80020458:	a3a000d3 	sb	zero,211(sp)
8002045c:	27a40058 	addiu	a0,sp,88
80020460:	0c00a1e8 	jal	800287a0 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hca45c7a2705b6dbbE>
80020464:	00000000 	nop
80020468:	8fa10040 	lw	at,64(sp)
8002046c:	8fa40044 	lw	a0,68(sp)
80020470:	24020020 	li	v0,32
    let program_header_size = core::mem::size_of::<T>();
80020474:	afa200e4 	sw	v0,228(sp)
    let program_header_num = elf_header.get_program_header_num();
80020478:	8c390024 	lw	t9,36(at)
8002047c:	0320f809 	jalr	t9
80020480:	00000000 	nop
80020484:	8fa10040 	lw	at,64(sp)
80020488:	8fa40044 	lw	a0,68(sp)
8002048c:	afa2004c 	sw	v0,76(sp)
80020490:	00401825 	move	v1,v0
80020494:	afa30048 	sw	v1,72(sp)
80020498:	afa200e8 	sw	v0,232(sp)
    let program_header_offset = elf_header.get_program_header_offset();
8002049c:	8c390010 	lw	t9,16(at)
800204a0:	0320f809 	jalr	t9
800204a4:	00000000 	nop
800204a8:	00400825 	move	at,v0
800204ac:	8fa2004c 	lw	v0,76(sp)
800204b0:	00201825 	move	v1,at
800204b4:	afa30050 	sw	v1,80(sp)
800204b8:	afa100ec 	sw	at,236(sp)
    let program_header_data = &data
        [program_header_offset..program_header_offset + program_header_size * program_header_num];
800204bc:	00020940 	sll	at,v0,0x5
800204c0:	afa10054 	sw	at,84(sp)
800204c4:	7c41d000 	ext	at,v0,0x0,0x1b
800204c8:	1422000c 	bne	at,v0,800204fc <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0xdc>
800204cc:	00000000 	nop
800204d0:	08008136 	j	800204d8 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0xb8>
800204d4:	00000000 	nop
800204d8:	8fa20050 	lw	v0,80(sp)
800204dc:	8fa10054 	lw	at,84(sp)
800204e0:	00410821 	addu	at,v0,at
800204e4:	afa1002c 	sw	at,44(sp)
800204e8:	0022082b 	sltu	at,at,v0
800204ec:	14200048 	bnez	at,80020610 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x1f0>
800204f0:	00000000 	nop
800204f4:	08008143 	j	8002050c <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0xec>
800204f8:	00000000 	nop
800204fc:	3c018105 	lui	at,0x8105
80020500:	2424c204 	addiu	a0,at,-15868
80020504:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
80020508:	00000000 	nop
8002050c:	8fa30030 	lw	v1,48(sp)
80020510:	8fa40034 	lw	a0,52(sp)
80020514:	8fa1002c 	lw	at,44(sp)
80020518:	8fa20050 	lw	v0,80(sp)
8002051c:	afa20064 	sw	v0,100(sp)
80020520:	afa10068 	sw	at,104(sp)
80020524:	8fa20064 	lw	v0,100(sp)
80020528:	afa20024 	sw	v0,36(sp)
8002052c:	8fa10068 	lw	at,104(sp)
80020530:	afa10028 	sw	at,40(sp)
80020534:	afa4010c 	sw	a0,268(sp)
80020538:	afa30110 	sw	v1,272(sp)
8002053c:	afa20114 	sw	v0,276(sp)
80020540:	afa10118 	sw	at,280(sp)
80020544:	afa2011c 	sw	v0,284(sp)
80020548:	afa10120 	sw	at,288(sp)
8002054c:	afa40124 	sw	a0,292(sp)
80020550:	afa30128 	sw	v1,296(sp)
        }
    }

    #[inline(always)]
    fn index(self, slice: &[T]) -> &[T] {
        if self.start > self.end {
80020554:	0022082b 	sltu	at,at,v0
80020558:	1420000a 	bnez	at,80020584 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x164>
8002055c:	00000000 	nop
80020560:	0800815a 	j	80020568 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x148>
80020564:	00000000 	nop
            slice_index_order_fail(self.start, self.end);
        } else if self.end > slice.len() {
80020568:	8fa10030 	lw	at,48(sp)
8002056c:	8fa20028 	lw	v0,40(sp)
80020570:	0022082b 	sltu	at,at,v0
80020574:	14200009 	bnez	at,8002059c <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x17c>
80020578:	00000000 	nop
8002057c:	0800816d 	j	800205b4 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x194>
80020580:	00000000 	nop
            slice_index_order_fail(self.start, self.end);
80020584:	8fa50028 	lw	a1,40(sp)
80020588:	8fa40024 	lw	a0,36(sp)
8002058c:	3c018105 	lui	at,0x8105
80020590:	2426c224 	addiu	a2,at,-15836
80020594:	0c0103da 	jal	80040f68 <_ZN4core5slice5index22slice_index_order_fail17h449e604cb79353f4E>
80020598:	00000000 	nop
            slice_end_index_len_fail(self.end, slice.len());
8002059c:	8fa50030 	lw	a1,48(sp)
800205a0:	8fa40028 	lw	a0,40(sp)
800205a4:	3c018105 	lui	at,0x8105
800205a8:	2426c224 	addiu	a2,at,-15836
800205ac:	0c0103a8 	jal	80040ea0 <_ZN4core5slice5index24slice_end_index_len_fail17hc8473d7595779981E>
800205b0:	00000000 	nop
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &*self.get_unchecked(slice) }
800205b4:	8fa70030 	lw	a3,48(sp)
800205b8:	8fa60034 	lw	a2,52(sp)
800205bc:	8fa50028 	lw	a1,40(sp)
800205c0:	8fa40024 	lw	a0,36(sp)
800205c4:	0c010514 	jal	80041450 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb3ac7c8e535d317cE>
800205c8:	00000000 	nop
800205cc:	8fa10048 	lw	at,72(sp)
800205d0:	00402025 	move	a0,v0
800205d4:	afa4001c 	sw	a0,28(sp)
800205d8:	00602025 	move	a0,v1
800205dc:	afa40020 	sw	a0,32(sp)
800205e0:	afa200f0 	sw	v0,240(sp)
800205e4:	afa300f4 	sw	v1,244(sp)
    for i in 0..program_header_num {
800205e8:	afa0006c 	sw	zero,108(sp)
800205ec:	afa10070 	sw	at,112(sp)
800205f0:	8fa4006c 	lw	a0,108(sp)
800205f4:	8fa50070 	lw	a1,112(sp)
800205f8:	0c0123e2 	jal	80048f88 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
800205fc:	00000000 	nop
80020600:	afa20074 	sw	v0,116(sp)
80020604:	afa30078 	sw	v1,120(sp)
80020608:	08008188 	j	80020620 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x200>
8002060c:	00000000 	nop
        [program_header_offset..program_header_offset + program_header_size * program_header_num];
80020610:	3c018105 	lui	at,0x8105
80020614:	2424c214 	addiu	a0,at,-15852
80020618:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002061c:	00000000 	nop
80020620:	27a40074 	addiu	a0,sp,116
    for i in 0..program_header_num {
80020624:	0c0123d9 	jal	80048f64 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
80020628:	00000000 	nop
8002062c:	afa2007c 	sw	v0,124(sp)
80020630:	afa30080 	sw	v1,128(sp)
80020634:	8fa1007c 	lw	at,124(sp)
80020638:	14200015 	bnez	at,80020690 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x270>
8002063c:	00000000 	nop
80020640:	08008192 	j	80020648 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x228>
80020644:	00000000 	nop
        };
        if program_header.get_memsz() != 0 {
            program_headers.push(program_header);
        }
    }
    Ok(program_headers)
80020648:	8fa2003c 	lw	v0,60(sp)
8002064c:	8fa30038 	lw	v1,56(sp)
80020650:	8fa10060 	lw	at,96(sp)
80020654:	afa100cc 	sw	at,204(sp)
80020658:	8fa1005c 	lw	at,92(sp)
8002065c:	afa100c8 	sw	at,200(sp)
80020660:	8fa10058 	lw	at,88(sp)
80020664:	afa100c4 	sw	at,196(sp)
80020668:	8fa100cc 	lw	at,204(sp)
8002066c:	ac610008 	sw	at,8(v1)
80020670:	8fa100c8 	lw	at,200(sp)
80020674:	ac610004 	sw	at,4(v1)
80020678:	8fa100c4 	lw	at,196(sp)
8002067c:	ac610000 	sw	at,0(v1)
}
80020680:	8fbf012c 	lw	ra,300(sp)
80020684:	27bd0130 	addiu	sp,sp,304
80020688:	03e00008 	jr	ra
8002068c:	00000000 	nop
    for i in 0..program_header_num {
80020690:	8fa10020 	lw	at,32(sp)
80020694:	8fa3001c 	lw	v1,28(sp)
80020698:	8fa20080 	lw	v0,128(sp)
8002069c:	afa200f8 	sw	v0,248(sp)
800206a0:	afa30104 	sw	v1,260(sp)
800206a4:	afa10108 	sw	at,264(sp)
                    .offset(i as isize * program_header_size as isize) as *const T,
800206a8:	00020940 	sll	at,v0,0x5
800206ac:	afa10018 	sw	at,24(sp)
800206b0:	00010943 	sra	at,at,0x5
800206b4:	14220015 	bne	at,v0,8002070c <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x2ec>
800206b8:	00000000 	nop
800206bc:	080081b1 	j	800206c4 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x2a4>
800206c0:	00000000 	nop
800206c4:	8fa1001c 	lw	at,28(sp)
800206c8:	8fa20018 	lw	v0,24(sp)
800206cc:	afa100fc 	sw	at,252(sp)
800206d0:	afa20100 	sw	v0,256(sp)
    pub const unsafe fn offset(self, count: isize) -> *const T
    where
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `offset`.
        unsafe { intrinsics::offset(self, count) }
800206d4:	00222821 	addu	a1,at,v0
800206d8:	27a40084 	addiu	a0,sp,132
800206dc:	afa40014 	sw	a0,20(sp)
            core::ptr::read(
800206e0:	0c00894e 	jal	80022538 <_ZN4core3ptr4read17habfea21e35931a06E>
800206e4:	00000000 	nop
800206e8:	8fa40014 	lw	a0,20(sp)
800206ec:	24010001 	li	at,1
            )
800206f0:	a3a100d3 	sb	at,211(sp)
        if program_header.get_memsz() != 0 {
800206f4:	0c00d5aa 	jal	800356a8 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$9get_memsz17hfb2cd24d087e8cc9E>
800206f8:	00000000 	nop
800206fc:	10400007 	beqz	v0,8002071c <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x2fc>
80020700:	00000000 	nop
80020704:	080081cd 	j	80020734 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x314>
80020708:	00000000 	nop
                    .offset(i as isize * program_header_size as isize) as *const T,
8002070c:	3c018105 	lui	at,0x8105
80020710:	2424c234 	addiu	a0,at,-15820
80020714:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
80020718:	00000000 	nop
    }
8002071c:	93a100d3 	lbu	at,211(sp)
80020720:	30210001 	andi	at,at,0x1
80020724:	1420001f 	bnez	at,800207a4 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x384>
80020728:	00000000 	nop
8002072c:	080081e5 	j	80020794 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x374>
80020730:	00000000 	nop
80020734:	24010000 	li	at,0
            program_headers.push(program_header);
80020738:	a3a000d3 	sb	zero,211(sp)
8002073c:	8fa100a0 	lw	at,160(sp)
80020740:	afa100c0 	sw	at,192(sp)
80020744:	8fa1009c 	lw	at,156(sp)
80020748:	afa100bc 	sw	at,188(sp)
8002074c:	8fa10098 	lw	at,152(sp)
80020750:	afa100b8 	sw	at,184(sp)
80020754:	8fa10094 	lw	at,148(sp)
80020758:	afa100b4 	sw	at,180(sp)
8002075c:	8fa10090 	lw	at,144(sp)
80020760:	afa100b0 	sw	at,176(sp)
80020764:	8fa1008c 	lw	at,140(sp)
80020768:	afa100ac 	sw	at,172(sp)
8002076c:	8fa10088 	lw	at,136(sp)
80020770:	afa100a8 	sw	at,168(sp)
80020774:	8fa10084 	lw	at,132(sp)
80020778:	afa100a4 	sw	at,164(sp)
8002077c:	27a40058 	addiu	a0,sp,88
80020780:	27a500a4 	addiu	a1,sp,164
80020784:	0c00a2a6 	jal	80028a98 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h7030e8082cdb5ed5E>
80020788:	00000000 	nop
8002078c:	080081c7 	j	8002071c <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x2fc>
80020790:	00000000 	nop
80020794:	24010000 	li	at,0
    }
80020798:	a3a000d3 	sb	zero,211(sp)
    for i in 0..program_header_num {
8002079c:	08008188 	j	80020620 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x200>
800207a0:	00000000 	nop
    }
800207a4:	080081e5 	j	80020794 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E+0x374>
800207a8:	00000000 	nop

800207ac <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3a4048ea51974f4fE>:
macro_rules! fmt_refs {
    ($($tr:ident),*) => {
        $(
        #[stable(feature = "rust1", since = "1.0.0")]
        impl<T: ?Sized + $tr> $tr for &T {
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
800207ac:	27bdffe0 	addiu	sp,sp,-32
800207b0:	afbf001c 	sw	ra,28(sp)
800207b4:	afa40014 	sw	a0,20(sp)
800207b8:	afa50018 	sw	a1,24(sp)
800207bc:	8c840000 	lw	a0,0(a0)
800207c0:	0c00fbcc 	jal	8003ef30 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h21f7f40895f3b40cE>
800207c4:	00000000 	nop
800207c8:	8fbf001c 	lw	ra,28(sp)
800207cc:	27bd0020 	addiu	sp,sp,32
800207d0:	03e00008 	jr	ra
800207d4:	00000000 	nop

800207d8 <_ZN48_$LT$$RF$A$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h9b551b2221fd2dceE>:
    fn allocate_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
        (**self).allocate_zeroed(layout)
    }

    #[inline]
    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {
800207d8:	27bdffd8 	addiu	sp,sp,-40
800207dc:	afbf0024 	sw	ra,36(sp)
800207e0:	afa40014 	sw	a0,20(sp)
800207e4:	afa50018 	sw	a1,24(sp)
800207e8:	afa6001c 	sw	a2,28(sp)
800207ec:	afa70020 	sw	a3,32(sp)
        // SAFETY: the safety contract must be upheld by the caller
        unsafe { (**self).deallocate(ptr, layout) }
800207f0:	8c840000 	lw	a0,0(a0)
800207f4:	0c00a952 	jal	8002a548 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4828aa49855ab74bE>
800207f8:	00000000 	nop
    }
800207fc:	8fbf0024 	lw	ra,36(sp)
80020800:	27bd0028 	addiu	sp,sp,40
80020804:	03e00008 	jr	ra
80020808:	00000000 	nop

8002080c <_ZN4core10intrinsics11write_bytes18precondition_check17h3c18faa4f54e35eaE>:
            // inlining the check. If it's `true`, it can inline it and get significantly better performance.
            #[rustc_no_mir_inline]
            #[inline]
            #[rustc_nounwind]
            #[rustc_const_unstable(feature = "const_ub_checks", issue = "none")]
            const fn precondition_check($($name:$ty),*) {
8002080c:	27bdffe0 	addiu	sp,sp,-32
80020810:	afbf001c 	sw	ra,28(sp)
80020814:	afa40014 	sw	a0,20(sp)
80020818:	afa50018 	sw	a1,24(sp)
            check_language_ub,
            "ptr::write_bytes requires that the destination pointer is aligned and non-null",
            (
                addr: *const () = dst as *const (),
                align: usize = align_of::<T>(),
            ) => ub_checks::is_aligned_and_not_null(addr, align)
8002081c:	0c00985f 	jal	8002617c <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE>
80020820:	00000000 	nop
80020824:	14400008 	bnez	v0,80020848 <_ZN4core10intrinsics11write_bytes18precondition_check17h3c18faa4f54e35eaE+0x3c>
80020828:	00000000 	nop
8002082c:	0800820d 	j	80020834 <_ZN4core10intrinsics11write_bytes18precondition_check17h3c18faa4f54e35eaE+0x28>
80020830:	00000000 	nop
                if !$e {
                    ::core::panicking::panic_nounwind(
80020834:	3c018105 	lui	at,0x8105
80020838:	2424c244 	addiu	a0,at,-15804
8002083c:	2405006f 	li	a1,111
80020840:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80020844:	00000000 	nop
                        concat!("unsafe precondition(s) violated: ", $message)
                    );
                }
            }
80020848:	8fbf001c 	lw	ra,28(sp)
8002084c:	27bd0020 	addiu	sp,sp,32
80020850:	03e00008 	jr	ra
80020854:	00000000 	nop

80020858 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h14137f51bd67fe62E>:
            const fn precondition_check($($name:$ty),*) {
80020858:	27bdffc8 	addiu	sp,sp,-56
8002085c:	afbf0034 	sw	ra,52(sp)
80020860:	afa70014 	sw	a3,20(sp)
80020864:	afa60010 	sw	a2,16(sp)
80020868:	00a00825 	move	at,a1
8002086c:	8fa50014 	lw	a1,20(sp)
80020870:	afa10018 	sw	at,24(sp)
80020874:	afa4001c 	sw	a0,28(sp)
80020878:	8fa20048 	lw	v0,72(sp)
8002087c:	afa20020 	sw	v0,32(sp)
80020880:	afa40024 	sw	a0,36(sp)
80020884:	afa10028 	sw	at,40(sp)
80020888:	afa6002c 	sw	a2,44(sp)
8002088c:	afa50030 	sw	a1,48(sp)
        ub_checks::is_aligned_and_not_null(src, align)
80020890:	0c00985f 	jal	8002617c <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE>
80020894:	00000000 	nop
80020898:	14400008 	bnez	v0,800208bc <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h14137f51bd67fe62E+0x64>
8002089c:	00000000 	nop
800208a0:	0800822a 	j	800208a8 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h14137f51bd67fe62E+0x50>
800208a4:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800208a8:	3c018105 	lui	at,0x8105
800208ac:	2424c2b3 	addiu	a0,at,-15693
800208b0:	240500a6 	li	a1,166
800208b4:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800208b8:	00000000 	nop
            && ub_checks::is_aligned_and_not_null(dst, align)
800208bc:	8fa50014 	lw	a1,20(sp)
800208c0:	8fa40018 	lw	a0,24(sp)
800208c4:	0c00985f 	jal	8002617c <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE>
800208c8:	00000000 	nop
800208cc:	1040fff6 	beqz	v0,800208a8 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h14137f51bd67fe62E+0x50>
800208d0:	00000000 	nop
800208d4:	08008237 	j	800208dc <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h14137f51bd67fe62E+0x84>
800208d8:	00000000 	nop
            && ub_checks::is_nonoverlapping(src, dst, size, count)
800208dc:	8fa70020 	lw	a3,32(sp)
800208e0:	8fa60010 	lw	a2,16(sp)
800208e4:	8fa50018 	lw	a1,24(sp)
800208e8:	8fa4001c 	lw	a0,28(sp)
800208ec:	0c009817 	jal	8002605c <_ZN4core9ub_checks17is_nonoverlapping17ha8e3a2bdfbbd3b1eE>
800208f0:	00000000 	nop
800208f4:	1040ffec 	beqz	v0,800208a8 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h14137f51bd67fe62E+0x50>
800208f8:	00000000 	nop
800208fc:	08008241 	j	80020904 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h14137f51bd67fe62E+0xac>
80020900:	00000000 	nop
            }
80020904:	8fbf0034 	lw	ra,52(sp)
80020908:	27bd0038 	addiu	sp,sp,56
8002090c:	03e00008 	jr	ra
80020910:	00000000 	nop

80020914 <_ZN4core10intrinsics4copy18precondition_check17h1848046f8d12e669E>:
            const fn precondition_check($($name:$ty),*) {
80020914:	27bdffd8 	addiu	sp,sp,-40
80020918:	afbf0024 	sw	ra,36(sp)
8002091c:	afa60010 	sw	a2,16(sp)
80020920:	00a00825 	move	at,a1
80020924:	8fa50010 	lw	a1,16(sp)
80020928:	afa10014 	sw	at,20(sp)
8002092c:	afa40018 	sw	a0,24(sp)
80020930:	afa1001c 	sw	at,28(sp)
80020934:	afa50020 	sw	a1,32(sp)
            ub_checks::is_aligned_and_not_null(src, align)
80020938:	0c00985f 	jal	8002617c <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE>
8002093c:	00000000 	nop
80020940:	14400008 	bnez	v0,80020964 <_ZN4core10intrinsics4copy18precondition_check17h1848046f8d12e669E+0x50>
80020944:	00000000 	nop
80020948:	08008254 	j	80020950 <_ZN4core10intrinsics4copy18precondition_check17h1848046f8d12e669E+0x3c>
8002094c:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80020950:	3c018105 	lui	at,0x8105
80020954:	2424c2b3 	addiu	a0,at,-15693
80020958:	240500a6 	li	a1,166
8002095c:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80020960:	00000000 	nop
                && ub_checks::is_aligned_and_not_null(dst, align)
80020964:	8fa50010 	lw	a1,16(sp)
80020968:	8fa40014 	lw	a0,20(sp)
8002096c:	0c00985f 	jal	8002617c <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE>
80020970:	00000000 	nop
80020974:	1040fff6 	beqz	v0,80020950 <_ZN4core10intrinsics4copy18precondition_check17h1848046f8d12e669E+0x3c>
80020978:	00000000 	nop
8002097c:	08008261 	j	80020984 <_ZN4core10intrinsics4copy18precondition_check17h1848046f8d12e669E+0x70>
80020980:	00000000 	nop
            }
80020984:	8fbf0024 	lw	ra,36(sp)
80020988:	27bd0028 	addiu	sp,sp,40
8002098c:	03e00008 	jr	ra
80020990:	00000000 	nop

80020994 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE>:
    /// ```
    #[inline]
    #[must_use]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[cfg_attr(not(bootstrap), rustc_diagnostic_item = "cmp_partialord_ge")]
    fn ge(&self, other: &Rhs) -> bool {
80020994:	27bdffe0 	addiu	sp,sp,-32
80020998:	afbf001c 	sw	ra,28(sp)
8002099c:	afa40014 	sw	a0,20(sp)
800209a0:	afa50018 	sw	a1,24(sp)
        matches!(self.partial_cmp(other), Some(Greater | Equal))
800209a4:	0c00d166 	jal	80034598 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h73757ab0d94b9ac5E>
800209a8:	00000000 	nop
800209ac:	a3a20013 	sb	v0,19(sp)
800209b0:	93a10013 	lbu	at,19(sp)
800209b4:	24020002 	li	v0,2
800209b8:	1022000b 	beq	at,v0,800209e8 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE+0x54>
800209bc:	00000000 	nop
800209c0:	08008272 	j	800209c8 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE+0x34>
800209c4:	00000000 	nop
800209c8:	93a10013 	lbu	at,19(sp)
800209cc:	240200ff 	li	v0,255
800209d0:	10220005 	beq	at,v0,800209e8 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE+0x54>
800209d4:	00000000 	nop
800209d8:	08008278 	j	800209e0 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE+0x4c>
800209dc:	00000000 	nop
800209e0:	0800827f 	j	800209fc <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE+0x68>
800209e4:	00000000 	nop
800209e8:	24010000 	li	at,0
800209ec:	a3a00012 	sb	zero,18(sp)
800209f0:	08008283 	j	80020a0c <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE+0x78>
800209f4:	00000000 	nop
    fn ge(&self, other: &Rhs) -> bool {
800209f8:	0000000d 	break
800209fc:	24010001 	li	at,1
        matches!(self.partial_cmp(other), Some(Greater | Equal))
80020a00:	a3a10012 	sb	at,18(sp)
80020a04:	08008283 	j	80020a0c <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE+0x78>
80020a08:	00000000 	nop
    }
80020a0c:	93a10012 	lbu	at,18(sp)
80020a10:	30220001 	andi	v0,at,0x1
80020a14:	8fbf001c 	lw	ra,28(sp)
80020a18:	27bd0020 	addiu	sp,sp,32
80020a1c:	03e00008 	jr	ra
80020a20:	00000000 	nop

80020a24 <_ZN4core3cmp10PartialOrd2ge17hbf6fc991f1eaf49dE>:
    fn ge(&self, other: &Rhs) -> bool {
80020a24:	27bdffe0 	addiu	sp,sp,-32
80020a28:	afbf001c 	sw	ra,28(sp)
80020a2c:	afa40014 	sw	a0,20(sp)
80020a30:	afa50018 	sw	a1,24(sp)
        matches!(self.partial_cmp(other), Some(Greater | Equal))
80020a34:	0c00d170 	jal	800345c0 <_ZN70_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17ha1ecdd73b3c254daE>
80020a38:	00000000 	nop
80020a3c:	a3a20013 	sb	v0,19(sp)
80020a40:	93a10013 	lbu	at,19(sp)
80020a44:	24020002 	li	v0,2
80020a48:	1022000b 	beq	at,v0,80020a78 <_ZN4core3cmp10PartialOrd2ge17hbf6fc991f1eaf49dE+0x54>
80020a4c:	00000000 	nop
80020a50:	08008296 	j	80020a58 <_ZN4core3cmp10PartialOrd2ge17hbf6fc991f1eaf49dE+0x34>
80020a54:	00000000 	nop
80020a58:	93a10013 	lbu	at,19(sp)
80020a5c:	240200ff 	li	v0,255
80020a60:	10220005 	beq	at,v0,80020a78 <_ZN4core3cmp10PartialOrd2ge17hbf6fc991f1eaf49dE+0x54>
80020a64:	00000000 	nop
80020a68:	0800829c 	j	80020a70 <_ZN4core3cmp10PartialOrd2ge17hbf6fc991f1eaf49dE+0x4c>
80020a6c:	00000000 	nop
80020a70:	080082a3 	j	80020a8c <_ZN4core3cmp10PartialOrd2ge17hbf6fc991f1eaf49dE+0x68>
80020a74:	00000000 	nop
80020a78:	24010000 	li	at,0
80020a7c:	a3a00012 	sb	zero,18(sp)
80020a80:	080082a7 	j	80020a9c <_ZN4core3cmp10PartialOrd2ge17hbf6fc991f1eaf49dE+0x78>
80020a84:	00000000 	nop
    fn ge(&self, other: &Rhs) -> bool {
80020a88:	0000000d 	break
80020a8c:	24010001 	li	at,1
        matches!(self.partial_cmp(other), Some(Greater | Equal))
80020a90:	a3a10012 	sb	at,18(sp)
80020a94:	080082a7 	j	80020a9c <_ZN4core3cmp10PartialOrd2ge17hbf6fc991f1eaf49dE+0x78>
80020a98:	00000000 	nop
    }
80020a9c:	93a10012 	lbu	at,18(sp)
80020aa0:	30220001 	andi	v0,at,0x1
80020aa4:	8fbf001c 	lw	ra,28(sp)
80020aa8:	27bd0020 	addiu	sp,sp,32
80020aac:	03e00008 	jr	ra
80020ab0:	00000000 	nop

80020ab4 <_ZN4core3cmp10PartialOrd2gt17h52788a992f16be48E>:
    fn gt(&self, other: &Rhs) -> bool {
80020ab4:	27bdffe0 	addiu	sp,sp,-32
80020ab8:	afbf001c 	sw	ra,28(sp)
80020abc:	afa40014 	sw	a0,20(sp)
80020ac0:	afa50018 	sw	a1,24(sp)
        matches!(self.partial_cmp(other), Some(Greater))
80020ac4:	0c00d166 	jal	80034598 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h73757ab0d94b9ac5E>
80020ac8:	00000000 	nop
80020acc:	a3a20013 	sb	v0,19(sp)
80020ad0:	93a10013 	lbu	at,19(sp)
80020ad4:	24020002 	li	v0,2
80020ad8:	1022000a 	beq	at,v0,80020b04 <_ZN4core3cmp10PartialOrd2gt17h52788a992f16be48E+0x50>
80020adc:	00000000 	nop
80020ae0:	080082ba 	j	80020ae8 <_ZN4core3cmp10PartialOrd2gt17h52788a992f16be48E+0x34>
80020ae4:	00000000 	nop
80020ae8:	93a10013 	lbu	at,19(sp)
80020aec:	24020001 	li	v0,1
80020af0:	00220826 	xor	at,at,v0
80020af4:	2c210001 	sltiu	at,at,1
80020af8:	a3a10012 	sb	at,18(sp)
80020afc:	080082c5 	j	80020b14 <_ZN4core3cmp10PartialOrd2gt17h52788a992f16be48E+0x60>
80020b00:	00000000 	nop
80020b04:	24010000 	li	at,0
80020b08:	a3a00012 	sb	zero,18(sp)
80020b0c:	080082c5 	j	80020b14 <_ZN4core3cmp10PartialOrd2gt17h52788a992f16be48E+0x60>
80020b10:	00000000 	nop
    }
80020b14:	93a10012 	lbu	at,18(sp)
80020b18:	30220001 	andi	v0,at,0x1
80020b1c:	8fbf001c 	lw	ra,28(sp)
80020b20:	27bd0020 	addiu	sp,sp,32
80020b24:	03e00008 	jr	ra
80020b28:	00000000 	nop

80020b2c <_ZN4core3cmp10PartialOrd2le17hd147b9903c116495E>:
    fn le(&self, other: &Rhs) -> bool {
80020b2c:	27bdffe0 	addiu	sp,sp,-32
80020b30:	afbf001c 	sw	ra,28(sp)
80020b34:	afa40014 	sw	a0,20(sp)
80020b38:	afa50018 	sw	a1,24(sp)
        matches!(self.partial_cmp(other), Some(Less | Equal))
80020b3c:	0c00d170 	jal	800345c0 <_ZN70_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17ha1ecdd73b3c254daE>
80020b40:	00000000 	nop
80020b44:	a3a20013 	sb	v0,19(sp)
80020b48:	93a10013 	lbu	at,19(sp)
80020b4c:	24020002 	li	v0,2
80020b50:	1022000b 	beq	at,v0,80020b80 <_ZN4core3cmp10PartialOrd2le17hd147b9903c116495E+0x54>
80020b54:	00000000 	nop
80020b58:	080082d8 	j	80020b60 <_ZN4core3cmp10PartialOrd2le17hd147b9903c116495E+0x34>
80020b5c:	00000000 	nop
80020b60:	93a10013 	lbu	at,19(sp)
80020b64:	24210001 	addiu	at,at,1
80020b68:	302100ff 	andi	at,at,0xff
80020b6c:	2c210002 	sltiu	at,at,2
80020b70:	14200008 	bnez	at,80020b94 <_ZN4core3cmp10PartialOrd2le17hd147b9903c116495E+0x68>
80020b74:	00000000 	nop
80020b78:	080082e0 	j	80020b80 <_ZN4core3cmp10PartialOrd2le17hd147b9903c116495E+0x54>
80020b7c:	00000000 	nop
80020b80:	24010000 	li	at,0
80020b84:	a3a00012 	sb	zero,18(sp)
80020b88:	080082e9 	j	80020ba4 <_ZN4core3cmp10PartialOrd2le17hd147b9903c116495E+0x78>
80020b8c:	00000000 	nop
    fn le(&self, other: &Rhs) -> bool {
80020b90:	0000000d 	break
80020b94:	24010001 	li	at,1
        matches!(self.partial_cmp(other), Some(Less | Equal))
80020b98:	a3a10012 	sb	at,18(sp)
80020b9c:	080082e9 	j	80020ba4 <_ZN4core3cmp10PartialOrd2le17hd147b9903c116495E+0x78>
80020ba0:	00000000 	nop
    }
80020ba4:	93a10012 	lbu	at,18(sp)
80020ba8:	30220001 	andi	v0,at,0x1
80020bac:	8fbf001c 	lw	ra,28(sp)
80020bb0:	27bd0020 	addiu	sp,sp,32
80020bb4:	03e00008 	jr	ra
80020bb8:	00000000 	nop

80020bbc <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E>:
    fn lt(&self, other: &Rhs) -> bool {
80020bbc:	27bdffe0 	addiu	sp,sp,-32
80020bc0:	afbf001c 	sw	ra,28(sp)
80020bc4:	afa40014 	sw	a0,20(sp)
80020bc8:	afa50018 	sw	a1,24(sp)
        matches!(self.partial_cmp(other), Some(Less))
80020bcc:	0c00d166 	jal	80034598 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h73757ab0d94b9ac5E>
80020bd0:	00000000 	nop
80020bd4:	a3a20013 	sb	v0,19(sp)
80020bd8:	93a10013 	lbu	at,19(sp)
80020bdc:	24020002 	li	v0,2
80020be0:	1022000a 	beq	at,v0,80020c0c <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E+0x50>
80020be4:	00000000 	nop
80020be8:	080082fc 	j	80020bf0 <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E+0x34>
80020bec:	00000000 	nop
80020bf0:	93a10013 	lbu	at,19(sp)
80020bf4:	240200ff 	li	v0,255
80020bf8:	00220826 	xor	at,at,v0
80020bfc:	2c210001 	sltiu	at,at,1
80020c00:	a3a10012 	sb	at,18(sp)
80020c04:	08008307 	j	80020c1c <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E+0x60>
80020c08:	00000000 	nop
80020c0c:	24010000 	li	at,0
80020c10:	a3a00012 	sb	zero,18(sp)
80020c14:	08008307 	j	80020c1c <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E+0x60>
80020c18:	00000000 	nop
    }
80020c1c:	93a10012 	lbu	at,18(sp)
80020c20:	30220001 	andi	v0,at,0x1
80020c24:	8fbf001c 	lw	ra,28(sp)
80020c28:	27bd0020 	addiu	sp,sp,32
80020c2c:	03e00008 	jr	ra
80020c30:	00000000 	nop

80020c34 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$11partial_cmp17h18ce96e5ef800831E>:
    macro_rules! ord_impl {
        ($($t:ty)*) => ($(
            #[stable(feature = "rust1", since = "1.0.0")]
            impl PartialOrd for $t {
                #[inline]
                fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
80020c34:	27bdfff0 	addiu	sp,sp,-16
80020c38:	afa40008 	sw	a0,8(sp)
80020c3c:	afa5000c 	sw	a1,12(sp)
                    {
                        Some(self.cmp(other))
                    }
                    #[cfg(not(bootstrap))]
                    {
                        Some(crate::intrinsics::three_way_compare(*self, *other))
80020c40:	8c820000 	lw	v0,0(a0)
80020c44:	8ca30000 	lw	v1,0(a1)
80020c48:	0062082b 	sltu	at,v1,v0
80020c4c:	0043102b 	sltu	v0,v0,v1
80020c50:	00220823 	subu	at,at,v0
80020c54:	a3a10007 	sb	at,7(sp)
                    }
                }
80020c58:	93a20007 	lbu	v0,7(sp)
80020c5c:	27bd0010 	addiu	sp,sp,16
80020c60:	03e00008 	jr	ra
80020c64:	00000000 	nop

80020c68 <_ZN4core3cmp9PartialEq2ne17h891c3ce2f32ed7c8E>:
    fn ne(&self, other: &Rhs) -> bool {
80020c68:	27bdffe0 	addiu	sp,sp,-32
80020c6c:	afbf001c 	sw	ra,28(sp)
80020c70:	afa40014 	sw	a0,20(sp)
80020c74:	afa50018 	sw	a1,24(sp)
        !self.eq(other)
80020c78:	0c00d15c 	jal	80034570 <_ZN69_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..cmp..PartialEq$GT$2eq17hde20d5cb95aa44f1E>
80020c7c:	00000000 	nop
80020c80:	38420001 	xori	v0,v0,0x1
    }
80020c84:	8fbf001c 	lw	ra,28(sp)
80020c88:	27bd0020 	addiu	sp,sp,32
80020c8c:	03e00008 	jr	ra
80020c90:	00000000 	nop

80020c94 <_ZN4core3cmp9PartialEq2ne17hfe354b8f92e886abE>:
    fn ne(&self, other: &Rhs) -> bool {
80020c94:	27bdffe0 	addiu	sp,sp,-32
80020c98:	afbf001c 	sw	ra,28(sp)
80020c9c:	afa40014 	sw	a0,20(sp)
80020ca0:	afa50018 	sw	a1,24(sp)
        !self.eq(other)
80020ca4:	0c00d395 	jal	80034e54 <_ZN66_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd4d1600a4ff7132eE>
80020ca8:	00000000 	nop
80020cac:	38420001 	xori	v0,v0,0x1
    }
80020cb0:	8fbf001c 	lw	ra,28(sp)
80020cb4:	27bd0020 	addiu	sp,sp,32
80020cb8:	03e00008 	jr	ra
80020cbc:	00000000 	nop

80020cc0 <_ZN4core3fmt5Write10write_char17h327781d522962d52E>:
    fn write_char(&mut self, c: char) -> Result {
80020cc0:	27bdffd8 	addiu	sp,sp,-40
80020cc4:	afbf0024 	sw	ra,36(sp)
80020cc8:	afa50010 	sw	a1,16(sp)
80020ccc:	00800825 	move	at,a0
80020cd0:	8fa40010 	lw	a0,16(sp)
80020cd4:	afa10014 	sw	at,20(sp)
80020cd8:	afa1001c 	sw	at,28(sp)
80020cdc:	afa40020 	sw	a0,32(sp)
        self.write_str(c.encode_utf8(&mut [0; 4]))
80020ce0:	afa00018 	sw	zero,24(sp)
80020ce4:	27a50018 	addiu	a1,sp,24
80020ce8:	24060004 	li	a2,4
80020cec:	0c008fe5 	jal	80023f94 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h9a3c9e61a6ca84a6E>
80020cf0:	00000000 	nop
80020cf4:	8fa40014 	lw	a0,20(sp)
80020cf8:	00402825 	move	a1,v0
80020cfc:	00603025 	move	a2,v1
80020d00:	0c00b414 	jal	8002d050 <_ZN60_$LT$mos_6502..print..Stdout$u20$as$u20$core..fmt..Write$GT$9write_str17h298c6c8c2ecb7df6E>
80020d04:	00000000 	nop
    }
80020d08:	8fbf0024 	lw	ra,36(sp)
80020d0c:	27bd0028 	addiu	sp,sp,40
80020d10:	03e00008 	jr	ra
80020d14:	00000000 	nop

80020d18 <_ZN4core3fmt5Write9write_fmt17h63a32e972762cdc9E>:
    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
80020d18:	27bdffd0 	addiu	sp,sp,-48
80020d1c:	afbf002c 	sw	ra,44(sp)
80020d20:	afa40010 	sw	a0,16(sp)
        self.spec_write_fmt(args)
80020d24:	8ca10014 	lw	at,20(a1)
80020d28:	afa10028 	sw	at,40(sp)
80020d2c:	8ca10010 	lw	at,16(a1)
80020d30:	afa10024 	sw	at,36(sp)
80020d34:	8ca1000c 	lw	at,12(a1)
80020d38:	afa10020 	sw	at,32(sp)
80020d3c:	8ca10008 	lw	at,8(a1)
80020d40:	afa1001c 	sw	at,28(sp)
80020d44:	8ca10004 	lw	at,4(a1)
80020d48:	afa10018 	sw	at,24(sp)
80020d4c:	8ca10000 	lw	at,0(a1)
80020d50:	afa10014 	sw	at,20(sp)
80020d54:	27a50014 	addiu	a1,sp,20
80020d58:	0c00ab46 	jal	8002ad18 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17hbc7da274b1fc061bE>
80020d5c:	00000000 	nop
    }
80020d60:	8fbf002c 	lw	ra,44(sp)
80020d64:	27bd0030 	addiu	sp,sp,48
80020d68:	03e00008 	jr	ra
80020d6c:	00000000 	nop

80020d70 <_ZN4core3fmt9Arguments23as_statically_known_str17h91b747e551ac0b82E>:
    fn as_statically_known_str(&self) -> Option<&'static str> {
80020d70:	27bdffd0 	addiu	sp,sp,-48
80020d74:	afbf002c 	sw	ra,44(sp)
80020d78:	afa40024 	sw	a0,36(sp)
        let s = self.as_str();
80020d7c:	0c00837d 	jal	80020df4 <_ZN4core3fmt9Arguments6as_str17hc0e25019d914202dE>
80020d80:	00000000 	nop
80020d84:	afa2001c 	sw	v0,28(sp)
80020d88:	afa30020 	sw	v1,32(sp)
80020d8c:	27a4001c 	addiu	a0,sp,28
        if core::intrinsics::is_val_statically_known(s.is_some()) { s } else { None }
80020d90:	0c00f030 	jal	8003c0c0 <_ZN4core6option15Option$LT$T$GT$7is_some17hf03c679c9733e5acE>
80020d94:	00000000 	nop
80020d98:	24010000 	li	at,0
80020d9c:	a3a0002b 	sb	zero,43(sp)
80020da0:	93a1002b 	lbu	at,43(sp)
80020da4:	30210001 	andi	at,at,0x1
80020da8:	14200006 	bnez	at,80020dc4 <_ZN4core3fmt9Arguments23as_statically_known_str17h91b747e551ac0b82E+0x54>
80020dac:	00000000 	nop
80020db0:	0800836e 	j	80020db8 <_ZN4core3fmt9Arguments23as_statically_known_str17h91b747e551ac0b82E+0x48>
80020db4:	00000000 	nop
80020db8:	afa00014 	sw	zero,20(sp)
80020dbc:	08008377 	j	80020ddc <_ZN4core3fmt9Arguments23as_statically_known_str17h91b747e551ac0b82E+0x6c>
80020dc0:	00000000 	nop
80020dc4:	8fa2001c 	lw	v0,28(sp)
80020dc8:	8fa10020 	lw	at,32(sp)
80020dcc:	afa20014 	sw	v0,20(sp)
80020dd0:	afa10018 	sw	at,24(sp)
80020dd4:	08008377 	j	80020ddc <_ZN4core3fmt9Arguments23as_statically_known_str17h91b747e551ac0b82E+0x6c>
80020dd8:	00000000 	nop
    }
80020ddc:	8fa20014 	lw	v0,20(sp)
80020de0:	8fa30018 	lw	v1,24(sp)
80020de4:	8fbf002c 	lw	ra,44(sp)
80020de8:	27bd0030 	addiu	sp,sp,48
80020dec:	03e00008 	jr	ra
80020df0:	00000000 	nop

80020df4 <_ZN4core3fmt9Arguments6as_str17hc0e25019d914202dE>:
    pub const fn as_str(&self) -> Option<&'static str> {
80020df4:	27bdffe0 	addiu	sp,sp,-32
80020df8:	00800825 	move	at,a0
80020dfc:	afa10018 	sw	at,24(sp)
        match (self.pieces, self.args) {
80020e00:	8c240000 	lw	a0,0(at)
80020e04:	8c230004 	lw	v1,4(at)
80020e08:	8c220008 	lw	v0,8(at)
80020e0c:	8c21000c 	lw	at,12(at)
80020e10:	afa40008 	sw	a0,8(sp)
80020e14:	afa3000c 	sw	v1,12(sp)
80020e18:	afa20010 	sw	v0,16(sp)
80020e1c:	afa10014 	sw	at,20(sp)
            ([], []) => Some(""),
80020e20:	8fa1000c 	lw	at,12(sp)
80020e24:	10200009 	beqz	at,80020e4c <_ZN4core3fmt9Arguments6as_str17hc0e25019d914202dE+0x58>
80020e28:	00000000 	nop
80020e2c:	0800838d 	j	80020e34 <_ZN4core3fmt9Arguments6as_str17hc0e25019d914202dE+0x40>
80020e30:	00000000 	nop
            ([s], []) => Some(s),
80020e34:	8fa1000c 	lw	at,12(sp)
80020e38:	24020001 	li	v0,1
80020e3c:	1022000b 	beq	at,v0,80020e6c <_ZN4core3fmt9Arguments6as_str17hc0e25019d914202dE+0x78>
80020e40:	00000000 	nop
80020e44:	08008398 	j	80020e60 <_ZN4core3fmt9Arguments6as_str17hc0e25019d914202dE+0x6c>
80020e48:	00000000 	nop
            ([], []) => Some(""),
80020e4c:	8fa10014 	lw	at,20(sp)
80020e50:	10200018 	beqz	at,80020eb4 <_ZN4core3fmt9Arguments6as_str17hc0e25019d914202dE+0xc0>
80020e54:	00000000 	nop
80020e58:	08008398 	j	80020e60 <_ZN4core3fmt9Arguments6as_str17hc0e25019d914202dE+0x6c>
80020e5c:	00000000 	nop
            _ => None,
80020e60:	afa00000 	sw	zero,0(sp)
80020e64:	080083a8 	j	80020ea0 <_ZN4core3fmt9Arguments6as_str17hc0e25019d914202dE+0xac>
80020e68:	00000000 	nop
            ([s], []) => Some(s),
80020e6c:	8fa10014 	lw	at,20(sp)
80020e70:	1420fffb 	bnez	at,80020e60 <_ZN4core3fmt9Arguments6as_str17hc0e25019d914202dE+0x6c>
80020e74:	00000000 	nop
80020e78:	080083a0 	j	80020e80 <_ZN4core3fmt9Arguments6as_str17hc0e25019d914202dE+0x8c>
80020e7c:	00000000 	nop
80020e80:	8fa10008 	lw	at,8(sp)
80020e84:	afa1001c 	sw	at,28(sp)
80020e88:	8c220000 	lw	v0,0(at)
80020e8c:	8c210004 	lw	at,4(at)
80020e90:	afa20000 	sw	v0,0(sp)
80020e94:	afa10004 	sw	at,4(sp)
80020e98:	080083a8 	j	80020ea0 <_ZN4core3fmt9Arguments6as_str17hc0e25019d914202dE+0xac>
80020e9c:	00000000 	nop
    }
80020ea0:	8fa20000 	lw	v0,0(sp)
80020ea4:	8fa30004 	lw	v1,4(sp)
80020ea8:	27bd0020 	addiu	sp,sp,32
80020eac:	03e00008 	jr	ra
80020eb0:	00000000 	nop
            ([], []) => Some(""),
80020eb4:	3c018105 	lui	at,0x8105
80020eb8:	2421c35c 	addiu	at,at,-15524
80020ebc:	afa10000 	sw	at,0(sp)
80020ec0:	afa00004 	sw	zero,4(sp)
80020ec4:	080083a8 	j	80020ea0 <_ZN4core3fmt9Arguments6as_str17hc0e25019d914202dE+0xac>
80020ec8:	00000000 	nop

80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>:
    pub fn new_v1(pieces: &'a [&'static str], args: &'a [rt::Argument<'a>]) -> Arguments<'a> {
80020ecc:	27bdff98 	addiu	sp,sp,-104
80020ed0:	afbf0064 	sw	ra,100(sp)
80020ed4:	afa7001c 	sw	a3,28(sp)
80020ed8:	afa60020 	sw	a2,32(sp)
80020edc:	afa50024 	sw	a1,36(sp)
80020ee0:	afa40028 	sw	a0,40(sp)
80020ee4:	afa4002c 	sw	a0,44(sp)
80020ee8:	8fa10078 	lw	at,120(sp)
80020eec:	afa10030 	sw	at,48(sp)
80020ef0:	afa50054 	sw	a1,84(sp)
80020ef4:	afa60058 	sw	a2,88(sp)
80020ef8:	afa7005c 	sw	a3,92(sp)
80020efc:	afa10060 	sw	at,96(sp)
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
80020f00:	00c1082b 	sltu	at,a2,at
80020f04:	1420000a 	bnez	at,80020f30 <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E+0x64>
80020f08:	00000000 	nop
80020f0c:	080083c5 	j	80020f14 <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E+0x48>
80020f10:	00000000 	nop
80020f14:	8fa10030 	lw	at,48(sp)
80020f18:	24210001 	addiu	at,at,1
80020f1c:	afa10018 	sw	at,24(sp)
80020f20:	10200016 	beqz	at,80020f7c <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E+0xb0>
80020f24:	00000000 	nop
80020f28:	080083d8 	j	80020f60 <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E+0x94>
80020f2c:	00000000 	nop
            panic!("invalid args");
80020f30:	3c018105 	lui	at,0x8105
80020f34:	2425c3e8 	addiu	a1,at,-15384
80020f38:	27a40034 	addiu	a0,sp,52
80020f3c:	afa40014 	sw	a0,20(sp)
80020f40:	24060001 	li	a2,1
80020f44:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
80020f48:	00000000 	nop
80020f4c:	8fa40014 	lw	a0,20(sp)
80020f50:	3c018105 	lui	at,0x8105
80020f54:	2425c3f0 	addiu	a1,at,-15376
80020f58:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80020f5c:	00000000 	nop
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
80020f60:	8fa10018 	lw	at,24(sp)
80020f64:	8fa20020 	lw	v0,32(sp)
80020f68:	0022082b 	sltu	at,at,v0
80020f6c:	1420fff0 	bnez	at,80020f30 <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E+0x64>
80020f70:	00000000 	nop
80020f74:	080083e3 	j	80020f8c <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E+0xc0>
80020f78:	00000000 	nop
80020f7c:	3c018105 	lui	at,0x8105
80020f80:	2424c3cc 	addiu	a0,at,-15412
80020f84:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80020f88:	00000000 	nop
        Arguments { pieces, fmt: None, args }
80020f8c:	8fa2002c 	lw	v0,44(sp)
80020f90:	8fa10030 	lw	at,48(sp)
80020f94:	8fa30028 	lw	v1,40(sp)
80020f98:	8fa4001c 	lw	a0,28(sp)
80020f9c:	8fa50020 	lw	a1,32(sp)
80020fa0:	8fa60024 	lw	a2,36(sp)
80020fa4:	afa0004c 	sw	zero,76(sp)
80020fa8:	ac660000 	sw	a2,0(v1)
80020fac:	ac650004 	sw	a1,4(v1)
80020fb0:	8fa6004c 	lw	a2,76(sp)
80020fb4:	8fa50050 	lw	a1,80(sp)
80020fb8:	ac660010 	sw	a2,16(v1)
80020fbc:	ac650014 	sw	a1,20(v1)
80020fc0:	ac640008 	sw	a0,8(v1)
80020fc4:	ac61000c 	sw	at,12(v1)
    }
80020fc8:	8fbf0064 	lw	ra,100(sp)
80020fcc:	27bd0068 	addiu	sp,sp,104
80020fd0:	03e00008 	jr	ra
80020fd4:	00000000 	nop

80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>:
    pub const fn new_const(pieces: &'a [&'static str]) -> Self {
80020fd8:	27bdffb0 	addiu	sp,sp,-80
80020fdc:	afbf004c 	sw	ra,76(sp)
80020fe0:	afa60014 	sw	a2,20(sp)
80020fe4:	afa50018 	sw	a1,24(sp)
80020fe8:	afa4001c 	sw	a0,28(sp)
80020fec:	afa40020 	sw	a0,32(sp)
80020ff0:	afa50044 	sw	a1,68(sp)
80020ff4:	afa60048 	sw	a2,72(sp)
        if pieces.len() > 1 {
80020ff8:	2cc10002 	sltiu	at,a2,2
80020ffc:	10200016 	beqz	at,80021058 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E+0x80>
80021000:	00000000 	nop
80021004:	08008403 	j	8002100c <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E+0x34>
80021008:	00000000 	nop
        Arguments { pieces, fmt: None, args: &[] }
8002100c:	8fa20020 	lw	v0,32(sp)
80021010:	8fa1001c 	lw	at,28(sp)
80021014:	8fa30014 	lw	v1,20(sp)
80021018:	8fa40018 	lw	a0,24(sp)
8002101c:	afa0003c 	sw	zero,60(sp)
80021020:	ac240000 	sw	a0,0(at)
80021024:	ac230004 	sw	v1,4(at)
80021028:	8fa4003c 	lw	a0,60(sp)
8002102c:	8fa30040 	lw	v1,64(sp)
80021030:	ac240010 	sw	a0,16(at)
80021034:	ac230014 	sw	v1,20(at)
80021038:	3c038105 	lui	v1,0x8105
8002103c:	2463c35c 	addiu	v1,v1,-15524
80021040:	ac230008 	sw	v1,8(at)
80021044:	ac20000c 	sw	zero,12(at)
    }
80021048:	8fbf004c 	lw	ra,76(sp)
8002104c:	27bd0050 	addiu	sp,sp,80
80021050:	03e00008 	jr	ra
80021054:	00000000 	nop
            panic!("invalid args");
80021058:	3c018105 	lui	at,0x8105
8002105c:	2425c3e8 	addiu	a1,at,-15384
80021060:	27a40024 	addiu	a0,sp,36
80021064:	afa40010 	sw	a0,16(sp)
80021068:	24060001 	li	a2,1
8002106c:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
80021070:	00000000 	nop
80021074:	8fa40010 	lw	a0,16(sp)
80021078:	3c018105 	lui	at,0x8105
8002107c:	2425c400 	addiu	a1,at,-15360
80021080:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80021084:	00000000 	nop

80021088 <_ZN4core3mem15size_of_val_raw17h0a51d1566e75c9efE>:
/// ```
#[inline]
#[must_use]
#[unstable(feature = "layout_for_ptr", issue = "69835")]
#[rustc_const_unstable(feature = "const_size_of_val_raw", issue = "46571")]
pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {
80021088:	27bdfff8 	addiu	sp,sp,-8
8002108c:	afa40000 	sw	a0,0(sp)
80021090:	24011000 	li	at,4096
    // SAFETY: the caller must provide a valid raw pointer
    unsafe { intrinsics::size_of_val(val) }
80021094:	afa10004 	sw	at,4(sp)
80021098:	8fa20004 	lw	v0,4(sp)
8002109c:	27bd0008 	addiu	sp,sp,8
}
800210a0:	03e00008 	jr	ra
800210a4:	00000000 	nop

800210a8 <_ZN4core3mem15size_of_val_raw17h3b3d4bf1ceedee07E>:
pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {
800210a8:	27bdfff8 	addiu	sp,sp,-8
800210ac:	afa40000 	sw	a0,0(sp)
800210b0:	24010020 	li	at,32
    unsafe { intrinsics::size_of_val(val) }
800210b4:	afa10004 	sw	at,4(sp)
800210b8:	8fa20004 	lw	v0,4(sp)
800210bc:	27bd0008 	addiu	sp,sp,8
}
800210c0:	03e00008 	jr	ra
800210c4:	00000000 	nop

800210c8 <_ZN4core3mem15size_of_val_raw17he37f3b10432c5920E>:
pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {
800210c8:	27bdfff8 	addiu	sp,sp,-8
800210cc:	afa40000 	sw	a0,0(sp)
800210d0:	24010018 	li	at,24
    unsafe { intrinsics::size_of_val(val) }
800210d4:	afa10004 	sw	at,4(sp)
800210d8:	8fa20004 	lw	v0,4(sp)
800210dc:	27bd0008 	addiu	sp,sp,8
}
800210e0:	03e00008 	jr	ra
800210e4:	00000000 	nop

800210e8 <_ZN4core3mem16align_of_val_raw17h68f77781cf0849f8E>:
/// ```
#[inline]
#[must_use]
#[unstable(feature = "layout_for_ptr", issue = "69835")]
#[rustc_const_unstable(feature = "const_align_of_val_raw", issue = "46571")]
pub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {
800210e8:	27bdfff8 	addiu	sp,sp,-8
800210ec:	afa40000 	sw	a0,0(sp)
800210f0:	24010004 	li	at,4
    // SAFETY: the caller must provide a valid raw pointer
    unsafe { intrinsics::min_align_of_val(val) }
800210f4:	afa10004 	sw	at,4(sp)
800210f8:	8fa20004 	lw	v0,4(sp)
800210fc:	27bd0008 	addiu	sp,sp,8
}
80021100:	03e00008 	jr	ra
80021104:	00000000 	nop

80021108 <_ZN4core3mem16align_of_val_raw17hb124f5495e3d1a21E>:
pub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {
80021108:	27bdfff8 	addiu	sp,sp,-8
8002110c:	afa40000 	sw	a0,0(sp)
80021110:	24010004 	li	at,4
    unsafe { intrinsics::min_align_of_val(val) }
80021114:	afa10004 	sw	at,4(sp)
80021118:	8fa20004 	lw	v0,4(sp)
8002111c:	27bd0008 	addiu	sp,sp,8
}
80021120:	03e00008 	jr	ra
80021124:	00000000 	nop

80021128 <_ZN4core3mem16align_of_val_raw17hd81d98ba5a3b2e70E>:
pub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {
80021128:	27bdfff8 	addiu	sp,sp,-8
8002112c:	afa40000 	sw	a0,0(sp)
80021130:	24010004 	li	at,4
    unsafe { intrinsics::min_align_of_val(val) }
80021134:	afa10004 	sw	at,4(sp)
80021138:	8fa20004 	lw	v0,4(sp)
8002113c:	27bd0008 	addiu	sp,sp,8
}
80021140:	03e00008 	jr	ra
80021144:	00000000 	nop

80021148 <_ZN4core3mem4drop17h200bb2365d423976E>:
///
/// [`RefCell`]: crate::cell::RefCell
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[cfg_attr(not(test), rustc_diagnostic_item = "mem_drop")]
pub fn drop<T>(_x: T) {}
80021148:	27bdffe0 	addiu	sp,sp,-32
8002114c:	afbf001c 	sw	ra,28(sp)
80021150:	afa40014 	sw	a0,20(sp)
80021154:	afa50018 	sw	a1,24(sp)
80021158:	27a40014 	addiu	a0,sp,20
8002115c:	0c008700 	jal	80021c00 <_ZN4core3ptr124drop_in_place$LT$alloc..sync..Weak$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$C$$RF$alloc..alloc..Global$GT$$GT$17h34962792f27f9817E>
80021160:	00000000 	nop
80021164:	8fbf001c 	lw	ra,28(sp)
80021168:	27bd0020 	addiu	sp,sp,32
8002116c:	03e00008 	jr	ra
80021170:	00000000 	nop

80021174 <_ZN4core3mem4drop17h57b29ba27a256b10E>:
80021174:	27bdffe8 	addiu	sp,sp,-24
80021178:	afbf0014 	sw	ra,20(sp)
8002117c:	afa40010 	sw	a0,16(sp)
80021180:	27a40010 	addiu	a0,sp,16
80021184:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
80021188:	00000000 	nop
8002118c:	8fbf0014 	lw	ra,20(sp)
80021190:	27bd0018 	addiu	sp,sp,24
80021194:	03e00008 	jr	ra
80021198:	00000000 	nop

8002119c <_ZN4core3mem4drop17ha0064f35510a6787E>:
8002119c:	27bdffe8 	addiu	sp,sp,-24
800211a0:	afbf0014 	sw	ra,20(sp)
800211a4:	afa40010 	sw	a0,16(sp)
800211a8:	27a40010 	addiu	a0,sp,16
800211ac:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
800211b0:	00000000 	nop
800211b4:	8fbf0014 	lw	ra,20(sp)
800211b8:	27bd0018 	addiu	sp,sp,24
800211bc:	03e00008 	jr	ra
800211c0:	00000000 	nop

800211c4 <_ZN4core3mem7replace17h268a053a65ac5a35E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
800211c4:	27bdffd0 	addiu	sp,sp,-48
800211c8:	afbf002c 	sw	ra,44(sp)
800211cc:	afa50018 	sw	a1,24(sp)
800211d0:	afa40014 	sw	a0,20(sp)
800211d4:	afa40020 	sw	a0,32(sp)
800211d8:	afa50024 	sw	a1,36(sp)
        let result = ptr::read(dest);
800211dc:	0c0088d9 	jal	80022364 <_ZN4core3ptr4read17h2741f013bcedf7aaE>
800211e0:	00000000 	nop
800211e4:	8fa40014 	lw	a0,20(sp)
800211e8:	8fa50018 	lw	a1,24(sp)
800211ec:	afa2001c 	sw	v0,28(sp)
800211f0:	afa20028 	sw	v0,40(sp)
        ptr::write(dest, src);
800211f4:	0c008a41 	jal	80022904 <_ZN4core3ptr5write17h54822575b3446f34E>
800211f8:	00000000 	nop
800211fc:	8fa2001c 	lw	v0,28(sp)
}
80021200:	8fbf002c 	lw	ra,44(sp)
80021204:	27bd0030 	addiu	sp,sp,48
80021208:	03e00008 	jr	ra
8002120c:	00000000 	nop

80021210 <_ZN4core3mem7replace17h7c47d7cef2dd3d38E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
80021210:	27bdffc0 	addiu	sp,sp,-64
80021214:	afbf003c 	sw	ra,60(sp)
80021218:	afa6001c 	sw	a2,28(sp)
8002121c:	afa50018 	sw	a1,24(sp)
80021220:	afa40014 	sw	a0,20(sp)
80021224:	afa40028 	sw	a0,40(sp)
80021228:	afa5002c 	sw	a1,44(sp)
8002122c:	afa60030 	sw	a2,48(sp)
        let result = ptr::read(dest);
80021230:	0c008977 	jal	800225dc <_ZN4core3ptr4read17hade0870f517b7becE>
80021234:	00000000 	nop
80021238:	8fa40014 	lw	a0,20(sp)
8002123c:	8fa50018 	lw	a1,24(sp)
80021240:	8fa6001c 	lw	a2,28(sp)
80021244:	afa20020 	sw	v0,32(sp)
80021248:	afa30024 	sw	v1,36(sp)
8002124c:	afa20034 	sw	v0,52(sp)
80021250:	afa30038 	sw	v1,56(sp)
        ptr::write(dest, src);
80021254:	0c008a0b 	jal	8002282c <_ZN4core3ptr5write17h3fd8c1232ea0fef8E>
80021258:	00000000 	nop
8002125c:	8fa20020 	lw	v0,32(sp)
80021260:	8fa30024 	lw	v1,36(sp)
}
80021264:	8fbf003c 	lw	ra,60(sp)
80021268:	27bd0040 	addiu	sp,sp,64
8002126c:	03e00008 	jr	ra
80021270:	00000000 	nop

80021274 <_ZN4core3mem7replace17he66a1b3d6b0db2d5E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
80021274:	27bdffd0 	addiu	sp,sp,-48
80021278:	afbf002c 	sw	ra,44(sp)
8002127c:	afa50018 	sw	a1,24(sp)
80021280:	afa40014 	sw	a0,20(sp)
80021284:	afa40020 	sw	a0,32(sp)
80021288:	afa50024 	sw	a1,36(sp)
        let result = ptr::read(dest);
8002128c:	0c0088c3 	jal	8002230c <_ZN4core3ptr4read17h196d86d08b825841E>
80021290:	00000000 	nop
80021294:	8fa40014 	lw	a0,20(sp)
80021298:	8fa50018 	lw	a1,24(sp)
8002129c:	afa2001c 	sw	v0,28(sp)
800212a0:	afa20028 	sw	v0,40(sp)
        ptr::write(dest, src);
800212a4:	0c008a74 	jal	800229d0 <_ZN4core3ptr5write17h94493ecafcc1fe8bE>
800212a8:	00000000 	nop
800212ac:	8fa2001c 	lw	v0,28(sp)
}
800212b0:	8fbf002c 	lw	ra,44(sp)
800212b4:	27bd0030 	addiu	sp,sp,48
800212b8:	03e00008 	jr	ra
800212bc:	00000000 	nop

800212c0 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hbe3b71d584ff6a60E>:
        #[allow(unused_attributes)]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline]
        #[rustc_inherit_overflow_checks]
        pub const fn abs(self) -> Self {
800212c0:	27bdffe0 	addiu	sp,sp,-32
800212c4:	afa40010 	sw	a0,16(sp)
800212c8:	afa40018 	sw	a0,24(sp)
800212cc:	afa4001c 	sw	a0,28(sp)
            // Note that the #[rustc_inherit_overflow_checks] and #[inline]
            // above mean that the overflow semantics of the subtraction
            // depend on the crate we're being called from.
            if self.is_negative() {
800212d0:	04800007 	bltz	a0,800212f0 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hbe3b71d584ff6a60E+0x30>
800212d4:	00000000 	nop
800212d8:	080084b8 	j	800212e0 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hbe3b71d584ff6a60E+0x20>
800212dc:	00000000 	nop
                -self
            } else {
                self
800212e0:	8fa10010 	lw	at,16(sp)
800212e4:	afa10014 	sw	at,20(sp)
            if self.is_negative() {
800212e8:	080084c2 	j	80021308 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hbe3b71d584ff6a60E+0x48>
800212ec:	00000000 	nop
800212f0:	8fa10010 	lw	at,16(sp)
800212f4:	3c028000 	lui	v0,0x8000
                -self
800212f8:	1022000d 	beq	at,v0,80021330 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hbe3b71d584ff6a60E+0x70>
800212fc:	00000000 	nop
80021300:	080084c6 	j	80021318 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hbe3b71d584ff6a60E+0x58>
80021304:	00000000 	nop
            }
        }
80021308:	8fa20014 	lw	v0,20(sp)
8002130c:	27bd0020 	addiu	sp,sp,32
80021310:	03e00008 	jr	ra
80021314:	00000000 	nop
80021318:	8fa10010 	lw	at,16(sp)
8002131c:	24020000 	li	v0,0
                -self
80021320:	00010823 	negu	at,at
80021324:	afa10014 	sw	at,20(sp)
            if self.is_negative() {
80021328:	080084c2 	j	80021308 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hbe3b71d584ff6a60E+0x48>
8002132c:	00000000 	nop
                -self
80021330:	3c018105 	lui	at,0x8105
80021334:	2424c480 	addiu	a0,at,-15232
80021338:	0c011b46 	jal	80046d18 <_ZN4core9panicking11panic_const24panic_const_neg_overflow17h933ac1df2ff681f7E>
8002133c:	00000000 	nop

80021340 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h19af5c025cf15bd5E>:
        #[stable(feature = "rust1", since = "1.0.0")]
        #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline]
        pub const fn checked_add(self, rhs: Self) -> Option<Self> {
80021340:	27bdffc8 	addiu	sp,sp,-56
80021344:	afa40010 	sw	a0,16(sp)
80021348:	afa50014 	sw	a1,20(sp)
8002134c:	afa40028 	sw	a0,40(sp)
80021350:	afa5002c 	sw	a1,44(sp)
        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline(always)]
        pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
            let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
80021354:	00851021 	addu	v0,a0,a1
80021358:	0044082b 	sltu	at,v0,a0
8002135c:	afa20030 	sw	v0,48(sp)
80021360:	a3a10037 	sb	at,55(sp)
            (a as Self, b)
80021364:	afa20020 	sw	v0,32(sp)
80021368:	a3a10024 	sb	at,36(sp)
        }
8002136c:	8fa20020 	lw	v0,32(sp)
80021370:	afa20004 	sw	v0,4(sp)
80021374:	93a10024 	lbu	at,36(sp)
            let (a, b) = self.overflowing_add(rhs);
80021378:	afa20018 	sw	v0,24(sp)
8002137c:	30210001 	andi	at,at,0x1
80021380:	a3a1001e 	sb	at,30(sp)
            if unlikely!(b) { None } else { Some(a) }
80021384:	a3a1001f 	sb	at,31(sp)
80021388:	93a1001f 	lbu	at,31(sp)
8002138c:	30210001 	andi	at,at,0x1
80021390:	14200009 	bnez	at,800213b8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h19af5c025cf15bd5E+0x78>
80021394:	00000000 	nop
80021398:	080084e8 	j	800213a0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h19af5c025cf15bd5E+0x60>
8002139c:	00000000 	nop
800213a0:	8fa10004 	lw	at,4(sp)
800213a4:	afa1000c 	sw	at,12(sp)
800213a8:	24010001 	li	at,1
800213ac:	afa10008 	sw	at,8(sp)
800213b0:	080084f1 	j	800213c4 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h19af5c025cf15bd5E+0x84>
800213b4:	00000000 	nop
800213b8:	afa00008 	sw	zero,8(sp)
800213bc:	080084f1 	j	800213c4 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h19af5c025cf15bd5E+0x84>
800213c0:	00000000 	nop
        }
800213c4:	8fa20008 	lw	v0,8(sp)
800213c8:	8fa3000c 	lw	v1,12(sp)
800213cc:	27bd0038 	addiu	sp,sp,56
800213d0:	03e00008 	jr	ra
800213d4:	00000000 	nop

800213d8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h500b128e668a335cE>:
        pub const fn checked_div(self, rhs: Self) -> Option<Self> {
800213d8:	27bdffe0 	addiu	sp,sp,-32
800213dc:	afa50004 	sw	a1,4(sp)
800213e0:	afa40008 	sw	a0,8(sp)
800213e4:	afa40014 	sw	a0,20(sp)
800213e8:	afa50018 	sw	a1,24(sp)
            if unlikely!(rhs == 0) {
800213ec:	2ca10001 	sltiu	at,a1,1
800213f0:	a3a1001f 	sb	at,31(sp)
800213f4:	93a1001f 	lbu	at,31(sp)
800213f8:	30210001 	andi	at,at,0x1
800213fc:	1420000d 	bnez	at,80021434 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h500b128e668a335cE+0x5c>
80021400:	00000000 	nop
80021404:	08008503 	j	8002140c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h500b128e668a335cE+0x34>
80021408:	00000000 	nop
                Some(unsafe { intrinsics::unchecked_div(self, rhs) })
8002140c:	8fa10004 	lw	at,4(sp)
80021410:	8fa20008 	lw	v0,8(sp)
80021414:	0041001b 	divu	zero,v0,at
80021418:	002001f4 	teq	at,zero,0x7
8002141c:	00000812 	mflo	at
80021420:	afa10010 	sw	at,16(sp)
80021424:	24010001 	li	at,1
80021428:	afa1000c 	sw	at,12(sp)
            if unlikely!(rhs == 0) {
8002142c:	08008510 	j	80021440 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h500b128e668a335cE+0x68>
80021430:	00000000 	nop
                None
80021434:	afa0000c 	sw	zero,12(sp)
            if unlikely!(rhs == 0) {
80021438:	08008510 	j	80021440 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h500b128e668a335cE+0x68>
8002143c:	00000000 	nop
        }
80021440:	8fa2000c 	lw	v0,12(sp)
80021444:	8fa30010 	lw	v1,16(sp)
80021448:	27bd0020 	addiu	sp,sp,32
8002144c:	03e00008 	jr	ra
80021450:	00000000 	nop

80021454 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h20af8f0316a1a66fE>:
        pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
80021454:	27bdffc8 	addiu	sp,sp,-56
80021458:	afa40010 	sw	a0,16(sp)
8002145c:	afa50014 	sw	a1,20(sp)
80021460:	afa40028 	sw	a0,40(sp)
80021464:	afa5002c 	sw	a1,44(sp)
        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        #[must_use = "this returns the result of the operation, \
                          without modifying the original"]
        #[inline(always)]
        pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
            let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
80021468:	00850019 	multu	a0,a1
8002146c:	00000810 	mfhi	at
80021470:	0001082b 	sltu	at,zero,at
80021474:	70851002 	mul	v0,a0,a1
80021478:	afa20030 	sw	v0,48(sp)
8002147c:	a3a10037 	sb	at,55(sp)
            (a as Self, b)
80021480:	afa20020 	sw	v0,32(sp)
80021484:	a3a10024 	sb	at,36(sp)
        }
80021488:	8fa20020 	lw	v0,32(sp)
8002148c:	afa20004 	sw	v0,4(sp)
80021490:	93a10024 	lbu	at,36(sp)
            let (a, b) = self.overflowing_mul(rhs);
80021494:	afa20018 	sw	v0,24(sp)
80021498:	30210001 	andi	at,at,0x1
8002149c:	a3a1001e 	sb	at,30(sp)
            if unlikely!(b) { None } else { Some(a) }
800214a0:	a3a1001f 	sb	at,31(sp)
800214a4:	93a1001f 	lbu	at,31(sp)
800214a8:	30210001 	andi	at,at,0x1
800214ac:	14200009 	bnez	at,800214d4 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h20af8f0316a1a66fE+0x80>
800214b0:	00000000 	nop
800214b4:	0800852f 	j	800214bc <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h20af8f0316a1a66fE+0x68>
800214b8:	00000000 	nop
800214bc:	8fa10004 	lw	at,4(sp)
800214c0:	afa1000c 	sw	at,12(sp)
800214c4:	24010001 	li	at,1
800214c8:	afa10008 	sw	at,8(sp)
800214cc:	08008538 	j	800214e0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h20af8f0316a1a66fE+0x8c>
800214d0:	00000000 	nop
800214d4:	afa00008 	sw	zero,8(sp)
800214d8:	08008538 	j	800214e0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h20af8f0316a1a66fE+0x8c>
800214dc:	00000000 	nop
        }
800214e0:	8fa20008 	lw	v0,8(sp)
800214e4:	8fa3000c 	lw	v1,12(sp)
800214e8:	27bd0038 	addiu	sp,sp,56
800214ec:	03e00008 	jr	ra
800214f0:	00000000 	nop

800214f4 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h726667f057c65fedE>:
        pub const fn abs_diff(self, other: Self) -> Self {
800214f4:	27bdffc8 	addiu	sp,sp,-56
800214f8:	afbf0034 	sw	ra,52(sp)
800214fc:	afa50018 	sw	a1,24(sp)
80021500:	afa4001c 	sw	a0,28(sp)
80021504:	afa40024 	sw	a0,36(sp)
80021508:	afa50028 	sw	a1,40(sp)
8002150c:	24010001 	li	at,1
            if mem::size_of::<Self>() == 1 {
80021510:	1420000d 	bnez	at,80021548 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h726667f057c65fedE+0x54>
80021514:	00000000 	nop
80021518:	08008548 	j	80021520 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h726667f057c65fedE+0x2c>
8002151c:	00000000 	nop
80021520:	8fa1001c 	lw	at,28(sp)
80021524:	8fa20018 	lw	v0,24(sp)
80021528:	afa1002c 	sw	at,44(sp)
8002152c:	afa20030 	sw	v0,48(sp)
            intrinsics::wrapping_sub(self, rhs)
80021530:	00222023 	subu	a0,at,v0
                (self as i32).wrapping_sub(other as i32).abs() as Self
80021534:	0c0084b0 	jal	800212c0 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hbe3b71d584ff6a60E>
80021538:	00000000 	nop
8002153c:	afa20020 	sw	v0,32(sp)
            if mem::size_of::<Self>() == 1 {
80021540:	08008559 	j	80021564 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h726667f057c65fedE+0x70>
80021544:	00000000 	nop
                if self < other {
80021548:	8fa1001c 	lw	at,28(sp)
8002154c:	8fa20018 	lw	v0,24(sp)
80021550:	0022082b 	sltu	at,at,v0
80021554:	14200011 	bnez	at,8002159c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h726667f057c65fedE+0xa8>
80021558:	00000000 	nop
8002155c:	0800855e 	j	80021578 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h726667f057c65fedE+0x84>
80021560:	00000000 	nop
        }
80021564:	8fa20020 	lw	v0,32(sp)
80021568:	8fbf0034 	lw	ra,52(sp)
8002156c:	27bd0038 	addiu	sp,sp,56
80021570:	03e00008 	jr	ra
80021574:	00000000 	nop
                    self - other
80021578:	8fa1001c 	lw	at,28(sp)
8002157c:	8fa20018 	lw	v0,24(sp)
80021580:	00221823 	subu	v1,at,v0
80021584:	afa30014 	sw	v1,20(sp)
80021588:	0022082b 	sltu	at,at,v0
8002158c:	14200010 	bnez	at,800215d0 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h726667f057c65fedE+0xdc>
80021590:	00000000 	nop
80021594:	08008570 	j	800215c0 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h726667f057c65fedE+0xcc>
80021598:	00000000 	nop
                    other - self
8002159c:	8fa10018 	lw	at,24(sp)
800215a0:	8fa2001c 	lw	v0,28(sp)
800215a4:	00221823 	subu	v1,at,v0
800215a8:	afa30010 	sw	v1,16(sp)
800215ac:	0022082b 	sltu	at,at,v0
800215b0:	1420000f 	bnez	at,800215f0 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h726667f057c65fedE+0xfc>
800215b4:	00000000 	nop
800215b8:	08008578 	j	800215e0 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h726667f057c65fedE+0xec>
800215bc:	00000000 	nop
                    self - other
800215c0:	8fa10014 	lw	at,20(sp)
800215c4:	afa10020 	sw	at,32(sp)
                if self < other {
800215c8:	08008559 	j	80021564 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h726667f057c65fedE+0x70>
800215cc:	00000000 	nop
                    self - other
800215d0:	3c018105 	lui	at,0x8105
800215d4:	2424c490 	addiu	a0,at,-15216
800215d8:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800215dc:	00000000 	nop
                    other - self
800215e0:	8fa10010 	lw	at,16(sp)
800215e4:	afa10020 	sw	at,32(sp)
                if self < other {
800215e8:	08008559 	j	80021564 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h726667f057c65fedE+0x70>
800215ec:	00000000 	nop
                    other - self
800215f0:	3c018105 	lui	at,0x8105
800215f4:	2424c490 	addiu	a0,at,-15216
800215f8:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800215fc:	00000000 	nop

80021600 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h3e5dfe6e2f907330E>:
        #[rustc_const_stable(feature = "int_roundings1", since = "1.73.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline]
        #[track_caller]
        pub const fn div_ceil(self, rhs: Self) -> Self {
80021600:	27bdffc8 	addiu	sp,sp,-56
80021604:	afa60018 	sw	a2,24(sp)
80021608:	afa5001c 	sw	a1,28(sp)
8002160c:	afa40020 	sw	a0,32(sp)
80021610:	afa40028 	sw	a0,40(sp)
80021614:	afa5002c 	sw	a1,44(sp)
            let d = self / rhs;
80021618:	10a0000e 	beqz	a1,80021654 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h3e5dfe6e2f907330E+0x54>
8002161c:	00000000 	nop
80021620:	0800858a 	j	80021628 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h3e5dfe6e2f907330E+0x28>
80021624:	00000000 	nop
80021628:	8fa1001c 	lw	at,28(sp)
8002162c:	8fa20020 	lw	v0,32(sp)
80021630:	0041001b 	divu	zero,v0,at
80021634:	002001f4 	teq	at,zero,0x7
80021638:	00001012 	mflo	v0
8002163c:	afa20014 	sw	v0,20(sp)
80021640:	afa20030 	sw	v0,48(sp)
            let r = self % rhs;
80021644:	10200010 	beqz	at,80021688 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h3e5dfe6e2f907330E+0x88>
80021648:	00000000 	nop
8002164c:	08008598 	j	80021660 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h3e5dfe6e2f907330E+0x60>
80021650:	00000000 	nop
            let d = self / rhs;
80021654:	8fa40018 	lw	a0,24(sp)
80021658:	0c011b70 	jal	80046dc0 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
8002165c:	00000000 	nop
            let r = self % rhs;
80021660:	8fa1001c 	lw	at,28(sp)
80021664:	8fa20020 	lw	v0,32(sp)
80021668:	0041001b 	divu	zero,v0,at
8002166c:	002001f4 	teq	at,zero,0x7
80021670:	00000810 	mfhi	at
80021674:	afa10034 	sw	at,52(sp)
            if r > 0 && rhs > 0 {
80021678:	1420000a 	bnez	at,800216a4 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h3e5dfe6e2f907330E+0xa4>
8002167c:	00000000 	nop
80021680:	080085a5 	j	80021694 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h3e5dfe6e2f907330E+0x94>
80021684:	00000000 	nop
            let r = self % rhs;
80021688:	8fa40018 	lw	a0,24(sp)
8002168c:	0c011b7e 	jal	80046df8 <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80021690:	00000000 	nop
                d + 1
            } else {
                d
80021694:	8fa10014 	lw	at,20(sp)
80021698:	afa10024 	sw	at,36(sp)
            if r > 0 && rhs > 0 {
8002169c:	080085b5 	j	800216d4 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h3e5dfe6e2f907330E+0xd4>
800216a0:	00000000 	nop
800216a4:	8fa1001c 	lw	at,28(sp)
800216a8:	1020fffa 	beqz	at,80021694 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h3e5dfe6e2f907330E+0x94>
800216ac:	00000000 	nop
800216b0:	080085ae 	j	800216b8 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h3e5dfe6e2f907330E+0xb8>
800216b4:	00000000 	nop
                d + 1
800216b8:	8fa10014 	lw	at,20(sp)
800216bc:	24210001 	addiu	at,at,1
800216c0:	afa10010 	sw	at,16(sp)
800216c4:	1020000b 	beqz	at,800216f4 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h3e5dfe6e2f907330E+0xf4>
800216c8:	00000000 	nop
800216cc:	080085b9 	j	800216e4 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h3e5dfe6e2f907330E+0xe4>
800216d0:	00000000 	nop
            }
        }
800216d4:	8fa20024 	lw	v0,36(sp)
800216d8:	27bd0038 	addiu	sp,sp,56
800216dc:	03e00008 	jr	ra
800216e0:	00000000 	nop
                d + 1
800216e4:	8fa10010 	lw	at,16(sp)
800216e8:	afa10024 	sw	at,36(sp)
            if r > 0 && rhs > 0 {
800216ec:	080085b5 	j	800216d4 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h3e5dfe6e2f907330E+0xd4>
800216f0:	00000000 	nop
                d + 1
800216f4:	8fa40018 	lw	a0,24(sp)
800216f8:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800216fc:	00000000 	nop

80021700 <_ZN4core3ops8function6FnOnce9call_once17h048a3acad00559d2E>:
    #[stable(feature = "fn_once_output", since = "1.12.0")]
    type Output;

    /// Performs the call operation.
    #[unstable(feature = "fn_traits", issue = "29625")]
    extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
80021700:	27bdffc0 	addiu	sp,sp,-64
80021704:	afbf003c 	sw	ra,60(sp)
80021708:	afa40010 	sw	a0,16(sp)
8002170c:	afa40014 	sw	a0,20(sp)
    pub static ref ENV_FREE_LIST: Spinlock<DoubleLinkedList> =
        Spinlock::new(DoubleLinkedList::new());
    pub static ref ENV_SCHED_LIST: Spinlock<DoubleLinkedList> =
        Spinlock::new(DoubleLinkedList::new());
    static ref ASID_BITMAP: Spinlock<Box<[u32; NASID / 32]>> =
        Spinlock::new(Box::new([0; NASID / 32]));
80021710:	afa00038 	sw	zero,56(sp)
80021714:	afa00034 	sw	zero,52(sp)
80021718:	afa00030 	sw	zero,48(sp)
8002171c:	afa0002c 	sw	zero,44(sp)
80021720:	afa00028 	sw	zero,40(sp)
80021724:	afa00024 	sw	zero,36(sp)
80021728:	afa00020 	sw	zero,32(sp)
8002172c:	afa0001c 	sw	zero,28(sp)
80021730:	24040020 	li	a0,32
80021734:	24050004 	li	a1,4
    #[stable(feature = "rust1", since = "1.0.0")]
    #[must_use]
    #[rustc_diagnostic_item = "box_new"]
    pub fn new(x: T) -> Self {
        #[rustc_box]
        Box::new(x)
80021738:	0c00a417 	jal	8002905c <_ZN5alloc5alloc15exchange_malloc17h9c97cc714fefd6e9E>
8002173c:	00000000 	nop
80021740:	8fa40010 	lw	a0,16(sp)
80021744:	00402825 	move	a1,v0
80021748:	8fa10038 	lw	at,56(sp)
8002174c:	aca1001c 	sw	at,28(a1)
80021750:	8fa10034 	lw	at,52(sp)
80021754:	aca10018 	sw	at,24(a1)
80021758:	8fa10030 	lw	at,48(sp)
8002175c:	aca10014 	sw	at,20(a1)
80021760:	8fa1002c 	lw	at,44(sp)
80021764:	aca10010 	sw	at,16(a1)
80021768:	8fa10028 	lw	at,40(sp)
8002176c:	aca1000c 	sw	at,12(a1)
80021770:	8fa10024 	lw	at,36(sp)
80021774:	aca10008 	sw	at,8(a1)
80021778:	8fa10020 	lw	at,32(sp)
8002177c:	aca10004 	sw	at,4(a1)
80021780:	8fa1001c 	lw	at,28(sp)
80021784:	aca10000 	sw	at,0(a1)
80021788:	0c00a015 	jal	80028054 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17he1ef2946989b755dE>
8002178c:	00000000 	nop
80021790:	8fa20014 	lw	v0,20(sp)
80021794:	8fbf003c 	lw	ra,60(sp)
80021798:	27bd0040 	addiu	sp,sp,64
8002179c:	03e00008 	jr	ra
800217a0:	00000000 	nop

800217a4 <_ZN4core3ops8function6FnOnce9call_once17h1d05c79268c1f277E>:
800217a4:	27bdffd8 	addiu	sp,sp,-40
800217a8:	afbf0024 	sw	ra,36(sp)
800217ac:	00800825 	move	at,a0
800217b0:	afa10014 	sw	at,20(sp)
    pub static ref CUR_ENV: Spinlock<Option<EnvIndex>> = Spinlock::new(None);
800217b4:	afa0001c 	sw	zero,28(sp)
800217b8:	8fa5001c 	lw	a1,28(sp)
800217bc:	8fa60020 	lw	a2,32(sp)
800217c0:	0c009fb2 	jal	80027ec8 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h44e6f7c2bc4d3f59E>
800217c4:	00000000 	nop
800217c8:	8fa20014 	lw	v0,20(sp)
800217cc:	8fbf0024 	lw	ra,36(sp)
800217d0:	27bd0028 	addiu	sp,sp,40
800217d4:	03e00008 	jr	ra
800217d8:	00000000 	nop

800217dc <_ZN4core3ops8function6FnOnce9call_once17h3fe145e35bb1d824E>:
800217dc:	27bdffe0 	addiu	sp,sp,-32
800217e0:	afbf001c 	sw	ra,28(sp)
800217e4:	afa40010 	sw	a0,16(sp)
800217e8:	afa40014 	sw	a0,20(sp)
        Spinlock::new(DoubleLinkedList::new());
800217ec:	0c00ce2a 	jal	800338a8 <_ZN8mos_65024util16DoubleLinkedList3new17h2ff340b806dbc593E>
800217f0:	00000000 	nop
800217f4:	8fa40010 	lw	a0,16(sp)
800217f8:	00402825 	move	a1,v0
800217fc:	00603025 	move	a2,v1
80021800:	0c00a03e 	jal	800280f8 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17hf3704ce077c64a34E>
80021804:	00000000 	nop
80021808:	8fa20014 	lw	v0,20(sp)
8002180c:	8fbf001c 	lw	ra,28(sp)
80021810:	27bd0020 	addiu	sp,sp,32
80021814:	03e00008 	jr	ra
80021818:	00000000 	nop

8002181c <_ZN4core3ops8function6FnOnce9call_once17h567bd086a7405f98E>:
8002181c:	27bdefd0 	addiu	sp,sp,-4144
80021820:	afbf102c 	sw	ra,4140(sp)
80021824:	afa4001c 	sw	a0,28(sp)
80021828:	afa40024 	sw	a0,36(sp)
8002182c:	27a4002c 	addiu	a0,sp,44
80021830:	afa40014 	sw	a0,20(sp)
    static ref NEXT_ALLOC_ENV_ID: Spinlock<usize> = Spinlock::new(0);
    static ref PRE_PGTABLE: Spinlock<Box<Pgtable>> = Spinlock::new(Box::new(Pgtable::new()));
80021834:	0c00b0ef 	jal	8002c3bc <_ZN8mos_65022mm7pgtable7Pgtable3new17haa656bcf79ee3c84E>
80021838:	00000000 	nop
8002183c:	24041000 	li	a0,4096
80021840:	afa40018 	sw	a0,24(sp)
80021844:	24050004 	li	a1,4
80021848:	0c00a417 	jal	8002905c <_ZN5alloc5alloc15exchange_malloc17h9c97cc714fefd6e9E>
8002184c:	00000000 	nop
80021850:	8fa50014 	lw	a1,20(sp)
80021854:	8fa60018 	lw	a2,24(sp)
80021858:	00402025 	move	a0,v0
8002185c:	afa40020 	sw	a0,32(sp)
80021860:	0c00d3fd 	jal	80034ff4 <memcpy>
80021864:	00000000 	nop
80021868:	8fa4001c 	lw	a0,28(sp)
8002186c:	8fa50020 	lw	a1,32(sp)
80021870:	0c009f77 	jal	80027ddc <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h1c98ce120fe876cdE>
80021874:	00000000 	nop
80021878:	8fa20024 	lw	v0,36(sp)
8002187c:	8fbf102c 	lw	ra,4140(sp)
80021880:	27bd1030 	addiu	sp,sp,4144
80021884:	03e00008 	jr	ra
80021888:	00000000 	nop

8002188c <_ZN4core3ops8function6FnOnce9call_once17h5bab3f328586f6d1E>:
8002188c:	27bdffe8 	addiu	sp,sp,-24
80021890:	afbf0014 	sw	ra,20(sp)
80021894:	3c011800 	lui	at,0x1800
80021898:	342503f8 	ori	a1,at,0x3f8
8002189c:	3c04a000 	lui	a0,0xa000
        self.base.add(MALTA_SERIAL_DATA).read_volatile()
    }
}

lazy_static! {
    pub static ref NS16550A: Ns16550a = Ns16550a::new(KSEG1.add(MALTA_SERIAL_BASE), 0);
800218a0:	0c00af2c 	jal	8002bcb0 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17hf63c307524190caaE>
800218a4:	00000000 	nop
800218a8:	00402025 	move	a0,v0
800218ac:	24050000 	li	a1,0
800218b0:	0c00ae5e 	jal	8002b978 <_ZN8mos_65023dev4uart8Ns16550a3new17ha30db7ddc0d8193eE>
800218b4:	00000000 	nop
800218b8:	8fbf0014 	lw	ra,20(sp)
800218bc:	27bd0018 	addiu	sp,sp,24
800218c0:	03e00008 	jr	ra
800218c4:	00000000 	nop

800218c8 <_ZN4core3ops8function6FnOnce9call_once17ha5fb2ccb77ae3e3cE>:
800218c8:	27bdffe0 	addiu	sp,sp,-32
800218cc:	afbf001c 	sw	ra,28(sp)
800218d0:	00800825 	move	at,a0
800218d4:	afa10014 	sw	at,20(sp)
800218d8:	24050000 	li	a1,0
    static ref NEXT_ALLOC_ENV_ID: Spinlock<usize> = Spinlock::new(0);
800218dc:	0c00d961 	jal	80036584 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h5196e7e4a3a8e545E>
800218e0:	00000000 	nop
800218e4:	8fa20014 	lw	v0,20(sp)
800218e8:	8fbf001c 	lw	ra,28(sp)
800218ec:	27bd0020 	addiu	sp,sp,32
800218f0:	03e00008 	jr	ra
800218f4:	00000000 	nop

800218f8 <_ZN4core3ops8function6FnOnce9call_once17haf1fe901da4aff33E>:
800218f8:	27bdffd0 	addiu	sp,sp,-48
800218fc:	afbf002c 	sw	ra,44(sp)
80021900:	afa40010 	sw	a0,16(sp)
80021904:	afa40018 	sw	a0,24(sp)
80021908:	27a40020 	addiu	a0,sp,32
8002190c:	afa40014 	sw	a0,20(sp)
        self.p_no
    }
}

lazy_static! {
    pub static ref PAGES: Spinlock<Vec<Page>> = Spinlock::new(Vec::new());
80021910:	0c00a1e1 	jal	80028784 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hc07920d6db91e3eeE>
80021914:	00000000 	nop
80021918:	8fa40010 	lw	a0,16(sp)
8002191c:	8fa50014 	lw	a1,20(sp)
80021920:	0c009fd3 	jal	80027f4c <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h77753f9317498940E>
80021924:	00000000 	nop
80021928:	8fa20018 	lw	v0,24(sp)
8002192c:	8fbf002c 	lw	ra,44(sp)
80021930:	27bd0030 	addiu	sp,sp,48
80021934:	03e00008 	jr	ra
80021938:	00000000 	nop

8002193c <_ZN4core3ops8function6FnOnce9call_once17hb61953d0f4e9347cE>:
8002193c:	27bdffe0 	addiu	sp,sp,-32
80021940:	afbf001c 	sw	ra,28(sp)
80021944:	afa40010 	sw	a0,16(sp)
80021948:	afa40014 	sw	a0,20(sp)
        Spinlock::new(DoubleLinkedList::new());
8002194c:	0c00ce2a 	jal	800338a8 <_ZN8mos_65024util16DoubleLinkedList3new17h2ff340b806dbc593E>
80021950:	00000000 	nop
80021954:	8fa40010 	lw	a0,16(sp)
80021958:	00402825 	move	a1,v0
8002195c:	00603025 	move	a2,v1
80021960:	0c00a03e 	jal	800280f8 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17hf3704ce077c64a34E>
80021964:	00000000 	nop
80021968:	8fa20014 	lw	v0,20(sp)
8002196c:	8fbf001c 	lw	ra,28(sp)
80021970:	27bd0020 	addiu	sp,sp,32
80021974:	03e00008 	jr	ra
80021978:	00000000 	nop

8002197c <_ZN4core3ops8function6FnOnce9call_once17hbe66f081a8e08aeaE>:
8002197c:	27bdffd0 	addiu	sp,sp,-48
80021980:	afbf002c 	sw	ra,44(sp)
80021984:	afa40010 	sw	a0,16(sp)
80021988:	afa40018 	sw	a0,24(sp)
8002198c:	27a40020 	addiu	a0,sp,32
80021990:	afa40014 	sw	a0,20(sp)
    static ref PAGE_LIST: Spinlock<IndexStack> = Spinlock::new(IndexStack::new());
80021994:	0c00cdf7 	jal	800337dc <_ZN8mos_65024util10IndexStack3new17he9d447517edb046bE>
80021998:	00000000 	nop
8002199c:	8fa40010 	lw	a0,16(sp)
800219a0:	8fa50014 	lw	a1,20(sp)
800219a4:	0c009f91 	jal	80027e44 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h403bff75c175d0beE>
800219a8:	00000000 	nop
800219ac:	8fa20018 	lw	v0,24(sp)
800219b0:	8fbf002c 	lw	ra,44(sp)
800219b4:	27bd0030 	addiu	sp,sp,48
800219b8:	03e00008 	jr	ra
800219bc:	00000000 	nop

800219c0 <_ZN4core3ops8function6FnOnce9call_once17hc0e153de29f39202E>:
800219c0:	27bdffe0 	addiu	sp,sp,-32
800219c4:	afbf001c 	sw	ra,28(sp)
use lazy_static::lazy_static;
use sync::spin::Spinlock;
pub struct Stdout;

lazy_static! {
    static ref STDOUT: Spinlock<Stdout> = Spinlock::new(Stdout {});
800219c8:	0c00a02f 	jal	800280bc <_ZN4sync4spin17Spinlock$LT$T$GT$3new17hefebc169ec246889E>
800219cc:	00000000 	nop
800219d0:	a3a2001b 	sb	v0,27(sp)
800219d4:	93a1001b 	lbu	at,27(sp)
800219d8:	a3a1001a 	sb	at,26(sp)
    (@TAIL, $N:ident : $T:ty = $e:expr) => {
        impl $crate::__Deref for $N {
            type Target = $T;
            fn deref(&self) -> &$T {
                #[inline(always)]
                fn __static_ref_initialize() -> $T { $e }
800219dc:	93a1001a 	lbu	at,26(sp)
800219e0:	a3a10019 	sb	at,25(sp)
800219e4:	93a10019 	lbu	at,25(sp)
800219e8:	a3a10017 	sb	at,23(sp)
800219ec:	93a20017 	lbu	v0,23(sp)
800219f0:	8fbf001c 	lw	ra,28(sp)
800219f4:	27bd0020 	addiu	sp,sp,32
800219f8:	03e00008 	jr	ra
800219fc:	00000000 	nop

80021a00 <_ZN4core3ops8function6FnOnce9call_once17hf906e7e90bd437eaE>:
80021a00:	27bdffd0 	addiu	sp,sp,-48
80021a04:	afbf002c 	sw	ra,44(sp)
80021a08:	afa40010 	sw	a0,16(sp)
80021a0c:	afa40018 	sw	a0,24(sp)
80021a10:	27a40020 	addiu	a0,sp,32
80021a14:	afa40014 	sw	a0,20(sp)
    pub static ref ENV_LIST: Spinlock<Vec<Env>> = Spinlock::new(Vec::new());
80021a18:	0c00a1ef 	jal	800287bc <_ZN5alloc3vec12Vec$LT$T$GT$3new17hdab6f1750d2b3e22E>
80021a1c:	00000000 	nop
80021a20:	8fa40010 	lw	a0,16(sp)
80021a24:	8fa50014 	lw	a1,20(sp)
80021a28:	0c009ff4 	jal	80027fd0 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h9ffec41f5a06abadE>
80021a2c:	00000000 	nop
80021a30:	8fa20018 	lw	v0,24(sp)
80021a34:	8fbf002c 	lw	ra,44(sp)
80021a38:	27bd0030 	addiu	sp,sp,48
80021a3c:	03e00008 	jr	ra
80021a40:	00000000 	nop

80021a44 <_ZN4core3ptr100drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$17h42b8f788c5cd303aE>:
/// ```
#[stable(feature = "drop_in_place", since = "1.8.0")]
#[lang = "drop_in_place"]
#[allow(unconditional_recursion)]
#[rustc_diagnostic_item = "ptr_drop_in_place"]
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80021a44:	27bdffe8 	addiu	sp,sp,-24
80021a48:	afbf0014 	sw	ra,20(sp)
80021a4c:	afa40010 	sw	a0,16(sp)
80021a50:	0c008bce 	jal	80022f38 <_ZN4core3ptr70drop_in_place$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$17hf6a5f0e40a6f8bcfE>
80021a54:	00000000 	nop
80021a58:	8fbf0014 	lw	ra,20(sp)
80021a5c:	27bd0018 	addiu	sp,sp,24
80021a60:	03e00008 	jr	ra
80021a64:	00000000 	nop

80021a68 <_ZN4core3ptr101drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17h7b0d47e3718e675cE>:
80021a68:	27bdffe8 	addiu	sp,sp,-24
80021a6c:	afbf0014 	sw	ra,20(sp)
80021a70:	afa40010 	sw	a0,16(sp)
80021a74:	0c00ac45 	jal	8002b114 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd34e950b06f698efE>
80021a78:	00000000 	nop
80021a7c:	8fbf0014 	lw	ra,20(sp)
80021a80:	27bd0018 	addiu	sp,sp,24
80021a84:	03e00008 	jr	ra
80021a88:	00000000 	nop

80021a8c <_ZN4core3ptr103drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..IndexStack$GT$$GT$$GT$17h5fb8064cfd67b339E>:
80021a8c:	27bdffe0 	addiu	sp,sp,-32
80021a90:	afbf001c 	sw	ra,28(sp)
80021a94:	afa40014 	sw	a0,20(sp)
80021a98:	afa40018 	sw	a0,24(sp)
80021a9c:	8c810000 	lw	at,0(a0)
80021aa0:	14200007 	bnez	at,80021ac0 <_ZN4core3ptr103drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..IndexStack$GT$$GT$$GT$17h5fb8064cfd67b339E+0x34>
80021aa4:	00000000 	nop
80021aa8:	080086ac 	j	80021ab0 <_ZN4core3ptr103drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..IndexStack$GT$$GT$$GT$17h5fb8064cfd67b339E+0x24>
80021aac:	00000000 	nop
80021ab0:	8fbf001c 	lw	ra,28(sp)
80021ab4:	27bd0020 	addiu	sp,sp,32
80021ab8:	03e00008 	jr	ra
80021abc:	00000000 	nop
80021ac0:	8fa10014 	lw	at,20(sp)
80021ac4:	24240004 	addiu	a0,at,4
80021ac8:	0c008c0f 	jal	8002303c <_ZN4core3ptr75drop_in_place$LT$sync..spin..Spinlock$LT$mos_6502..util..IndexStack$GT$$GT$17ha44ec99ed5d9409eE>
80021acc:	00000000 	nop
80021ad0:	080086ac 	j	80021ab0 <_ZN4core3ptr103drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..IndexStack$GT$$GT$$GT$17h5fb8064cfd67b339E+0x24>
80021ad4:	00000000 	nop

80021ad8 <_ZN4core3ptr103drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$17hfa01eb322879470aE>:
80021ad8:	27bdffe8 	addiu	sp,sp,-24
80021adc:	afbf0014 	sw	ra,20(sp)
80021ae0:	afa40010 	sw	a0,16(sp)
80021ae4:	0c00ac0a 	jal	8002b028 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h37af461b48751fe2E>
80021ae8:	00000000 	nop
80021aec:	8fbf0014 	lw	ra,20(sp)
80021af0:	27bd0018 	addiu	sp,sp,24
80021af4:	03e00008 	jr	ra
80021af8:	00000000 	nop

80021afc <_ZN4core3ptr104drop_in_place$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$17h27de719d9c062b1eE>:
80021afc:	27bdffe8 	addiu	sp,sp,-24
80021b00:	afbf0014 	sw	ra,20(sp)
80021b04:	afa40010 	sw	a0,16(sp)
80021b08:	0c0086c8 	jal	80021b20 <_ZN4core3ptr106drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$17h8299c72ec4d7d0d6E>
80021b0c:	00000000 	nop
80021b10:	8fbf0014 	lw	ra,20(sp)
80021b14:	27bd0018 	addiu	sp,sp,24
80021b18:	03e00008 	jr	ra
80021b1c:	00000000 	nop

80021b20 <_ZN4core3ptr106drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$17h8299c72ec4d7d0d6E>:
80021b20:	27bdffe8 	addiu	sp,sp,-24
80021b24:	afbf0014 	sw	ra,20(sp)
80021b28:	afa40010 	sw	a0,16(sp)
80021b2c:	0c008c18 	jal	80023060 <_ZN4core3ptr76drop_in_place$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$17hbea8936a658e1291E>
80021b30:	00000000 	nop
80021b34:	8fbf0014 	lw	ra,20(sp)
80021b38:	27bd0018 	addiu	sp,sp,24
80021b3c:	03e00008 	jr	ra
80021b40:	00000000 	nop

80021b44 <_ZN4core3ptr109drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$$GT$17h0b5c737bc5ff2950E>:
80021b44:	27bdffe0 	addiu	sp,sp,-32
80021b48:	afbf001c 	sw	ra,28(sp)
80021b4c:	afa40014 	sw	a0,20(sp)
80021b50:	afa40018 	sw	a0,24(sp)
80021b54:	8c810000 	lw	at,0(a0)
80021b58:	14200007 	bnez	at,80021b78 <_ZN4core3ptr109drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$$GT$17h0b5c737bc5ff2950E+0x34>
80021b5c:	00000000 	nop
80021b60:	080086da 	j	80021b68 <_ZN4core3ptr109drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$$GT$17h0b5c737bc5ff2950E+0x24>
80021b64:	00000000 	nop
80021b68:	8fbf001c 	lw	ra,28(sp)
80021b6c:	27bd0020 	addiu	sp,sp,32
80021b70:	03e00008 	jr	ra
80021b74:	00000000 	nop
80021b78:	8fa10014 	lw	at,20(sp)
80021b7c:	24240004 	addiu	a0,at,4
80021b80:	0c008c3c 	jal	800230f0 <_ZN4core3ptr81drop_in_place$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h6288410965e66a52E>
80021b84:	00000000 	nop
80021b88:	080086da 	j	80021b68 <_ZN4core3ptr109drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$$GT$17h0b5c737bc5ff2950E+0x24>
80021b8c:	00000000 	nop

80021b90 <_ZN4core3ptr109drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$17h0c5ae4a09bee8480E>:
80021b90:	27bdffe8 	addiu	sp,sp,-24
80021b94:	afbf0014 	sw	ra,20(sp)
80021b98:	afa40010 	sw	a0,16(sp)
80021b9c:	0c00ac54 	jal	8002b150 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd9c5374843be042dE>
80021ba0:	00000000 	nop
80021ba4:	8fbf0014 	lw	ra,20(sp)
80021ba8:	27bd0018 	addiu	sp,sp,24
80021bac:	03e00008 	jr	ra
80021bb0:	00000000 	nop

80021bb4 <_ZN4core3ptr119drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$$GT$17h5a6d57ebe1df8df0E>:
80021bb4:	27bdffe0 	addiu	sp,sp,-32
80021bb8:	afbf001c 	sw	ra,28(sp)
80021bbc:	afa40014 	sw	a0,20(sp)
80021bc0:	afa40018 	sw	a0,24(sp)
80021bc4:	8c810000 	lw	at,0(a0)
80021bc8:	14200007 	bnez	at,80021be8 <_ZN4core3ptr119drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$$GT$17h5a6d57ebe1df8df0E+0x34>
80021bcc:	00000000 	nop
80021bd0:	080086f6 	j	80021bd8 <_ZN4core3ptr119drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$$GT$17h5a6d57ebe1df8df0E+0x24>
80021bd4:	00000000 	nop
80021bd8:	8fbf001c 	lw	ra,28(sp)
80021bdc:	27bd0020 	addiu	sp,sp,32
80021be0:	03e00008 	jr	ra
80021be4:	00000000 	nop
80021be8:	8fa10014 	lw	at,20(sp)
80021bec:	24240004 	addiu	a0,at,4
80021bf0:	0c008d54 	jal	80023550 <_ZN4core3ptr91drop_in_place$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h42eebb0d058a00c1E>
80021bf4:	00000000 	nop
80021bf8:	080086f6 	j	80021bd8 <_ZN4core3ptr119drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$$GT$17h5a6d57ebe1df8df0E+0x24>
80021bfc:	00000000 	nop

80021c00 <_ZN4core3ptr124drop_in_place$LT$alloc..sync..Weak$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$C$$RF$alloc..alloc..Global$GT$$GT$17h34962792f27f9817E>:
80021c00:	27bdffe8 	addiu	sp,sp,-24
80021c04:	afbf0014 	sw	ra,20(sp)
80021c08:	afa40010 	sw	a0,16(sp)
80021c0c:	0c00aacd 	jal	8002ab34 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h21b7b36c050b0ee7E>
80021c10:	00000000 	nop
80021c14:	8fbf0014 	lw	ra,20(sp)
80021c18:	27bd0018 	addiu	sp,sp,24
80021c1c:	03e00008 	jr	ra
80021c20:	00000000 	nop

80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>:
80021c24:	27bdffe0 	addiu	sp,sp,-32
80021c28:	afbf001c 	sw	ra,28(sp)
80021c2c:	afa40014 	sw	a0,20(sp)
80021c30:	afa40018 	sw	a0,24(sp)
80021c34:	8c810000 	lw	at,0(a0)
80021c38:	14200007 	bnez	at,80021c58 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E+0x34>
80021c3c:	00000000 	nop
80021c40:	08008712 	j	80021c48 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E+0x24>
80021c44:	00000000 	nop
80021c48:	8fbf001c 	lw	ra,28(sp)
80021c4c:	27bd0020 	addiu	sp,sp,32
80021c50:	03e00008 	jr	ra
80021c54:	00000000 	nop
80021c58:	8fa40014 	lw	a0,20(sp)
80021c5c:	0c008d66 	jal	80023598 <_ZN4core3ptr96drop_in_place$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h43239437a0ec2517E>
80021c60:	00000000 	nop
80021c64:	08008712 	j	80021c48 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E+0x24>
80021c68:	00000000 	nop

80021c6c <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$$GT$17hc7bff919d8a7068eE>:
80021c6c:	27bdffe0 	addiu	sp,sp,-32
80021c70:	afbf001c 	sw	ra,28(sp)
80021c74:	afa40014 	sw	a0,20(sp)
80021c78:	afa40018 	sw	a0,24(sp)
80021c7c:	8c810000 	lw	at,0(a0)
80021c80:	14200007 	bnez	at,80021ca0 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$$GT$17hc7bff919d8a7068eE+0x34>
80021c84:	00000000 	nop
80021c88:	08008724 	j	80021c90 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$$GT$17hc7bff919d8a7068eE+0x24>
80021c8c:	00000000 	nop
80021c90:	8fbf001c 	lw	ra,28(sp)
80021c94:	27bd0020 	addiu	sp,sp,32
80021c98:	03e00008 	jr	ra
80021c9c:	00000000 	nop
80021ca0:	8fa10014 	lw	at,20(sp)
80021ca4:	24240004 	addiu	a0,at,4
80021ca8:	0c008d6f 	jal	800235bc <_ZN4core3ptr96drop_in_place$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17he8a95683e273ddb5E>
80021cac:	00000000 	nop
80021cb0:	08008724 	j	80021c90 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$$GT$17hc7bff919d8a7068eE+0x24>
80021cb4:	00000000 	nop

80021cb8 <_ZN4core3ptr126drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$$GT$17h88ae9a08191793a2E>:
80021cb8:	27bdffe0 	addiu	sp,sp,-32
80021cbc:	afbf001c 	sw	ra,28(sp)
80021cc0:	afa40014 	sw	a0,20(sp)
80021cc4:	afa40018 	sw	a0,24(sp)
80021cc8:	8c810000 	lw	at,0(a0)
80021ccc:	14200007 	bnez	at,80021cec <_ZN4core3ptr126drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$$GT$17h88ae9a08191793a2E+0x34>
80021cd0:	00000000 	nop
80021cd4:	08008737 	j	80021cdc <_ZN4core3ptr126drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$$GT$17h88ae9a08191793a2E+0x24>
80021cd8:	00000000 	nop
80021cdc:	8fbf001c 	lw	ra,28(sp)
80021ce0:	27bd0020 	addiu	sp,sp,32
80021ce4:	03e00008 	jr	ra
80021ce8:	00000000 	nop
80021cec:	8fa10014 	lw	at,20(sp)
80021cf0:	24240004 	addiu	a0,at,4
80021cf4:	0c008d8a 	jal	80023628 <_ZN4core3ptr98drop_in_place$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$17h9a1b99208d1f4487E>
80021cf8:	00000000 	nop
80021cfc:	08008737 	j	80021cdc <_ZN4core3ptr126drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$$GT$17h88ae9a08191793a2E+0x24>
80021d00:	00000000 	nop

80021d04 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$$GT$17heb5c6c7a44bde47fE>:
80021d04:	27bdffe0 	addiu	sp,sp,-32
80021d08:	afbf001c 	sw	ra,28(sp)
80021d0c:	afa40014 	sw	a0,20(sp)
80021d10:	afa40018 	sw	a0,24(sp)
80021d14:	8c810000 	lw	at,0(a0)
80021d18:	14200007 	bnez	at,80021d38 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$$GT$17heb5c6c7a44bde47fE+0x34>
80021d1c:	00000000 	nop
80021d20:	0800874a 	j	80021d28 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$$GT$17heb5c6c7a44bde47fE+0x24>
80021d24:	00000000 	nop
80021d28:	8fbf001c 	lw	ra,28(sp)
80021d2c:	27bd0020 	addiu	sp,sp,32
80021d30:	03e00008 	jr	ra
80021d34:	00000000 	nop
80021d38:	8fa10014 	lw	at,20(sp)
80021d3c:	24240004 	addiu	a0,at,4
80021d40:	0c0086bf 	jal	80021afc <_ZN4core3ptr104drop_in_place$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$17h27de719d9c062b1eE>
80021d44:	00000000 	nop
80021d48:	0800874a 	j	80021d28 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$$GT$17heb5c6c7a44bde47fE+0x24>
80021d4c:	00000000 	nop

80021d50 <_ZN4core3ptr13read_volatile17h148fdf7017203b24E>:
/// ```
#[inline]
#[stable(feature = "volatile", since = "1.9.0")]
#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
#[rustc_diagnostic_item = "ptr_read_volatile"]
pub unsafe fn read_volatile<T>(src: *const T) -> T {
80021d50:	27bdffe0 	addiu	sp,sp,-32
80021d54:	afbf001c 	sw	ra,28(sp)
80021d58:	afa40010 	sw	a0,16(sp)
80021d5c:	afa40014 	sw	a0,20(sp)
    // SAFETY: the caller must uphold the safety contract for `volatile_load`.
    unsafe {
        ub_checks::assert_unsafe_precondition!(
80021d60:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80021d64:	00000000 	nop
80021d68:	1440000b 	bnez	v0,80021d98 <_ZN4core3ptr13read_volatile17h148fdf7017203b24E+0x48>
80021d6c:	00000000 	nop
80021d70:	0800875e 	j	80021d78 <_ZN4core3ptr13read_volatile17h148fdf7017203b24E+0x28>
80021d74:	00000000 	nop
            (
                addr: *const () = src as *const (),
                align: usize = align_of::<T>(),
            ) => ub_checks::is_aligned_and_not_null(addr, align)
        );
        intrinsics::volatile_load(src)
80021d78:	8fa10010 	lw	at,16(sp)
80021d7c:	8c210000 	lw	at,0(at)
80021d80:	afa10018 	sw	at,24(sp)
80021d84:	8fa20018 	lw	v0,24(sp)
    }
}
80021d88:	8fbf001c 	lw	ra,28(sp)
80021d8c:	27bd0020 	addiu	sp,sp,32
80021d90:	03e00008 	jr	ra
80021d94:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80021d98:	8fa40010 	lw	a0,16(sp)
80021d9c:	24050004 	li	a1,4
80021da0:	0c008784 	jal	80021e10 <_ZN4core3ptr13read_volatile18precondition_check17h1228c0bfa6328758E>
80021da4:	00000000 	nop
80021da8:	0800875e 	j	80021d78 <_ZN4core3ptr13read_volatile17h148fdf7017203b24E+0x28>
80021dac:	00000000 	nop

80021db0 <_ZN4core3ptr13read_volatile17hb8eb22eda6c35f8aE>:
pub unsafe fn read_volatile<T>(src: *const T) -> T {
80021db0:	27bdffe0 	addiu	sp,sp,-32
80021db4:	afbf001c 	sw	ra,28(sp)
80021db8:	afa40010 	sw	a0,16(sp)
80021dbc:	afa40014 	sw	a0,20(sp)
        ub_checks::assert_unsafe_precondition!(
80021dc0:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80021dc4:	00000000 	nop
80021dc8:	1440000b 	bnez	v0,80021df8 <_ZN4core3ptr13read_volatile17hb8eb22eda6c35f8aE+0x48>
80021dcc:	00000000 	nop
80021dd0:	08008776 	j	80021dd8 <_ZN4core3ptr13read_volatile17hb8eb22eda6c35f8aE+0x28>
80021dd4:	00000000 	nop
        intrinsics::volatile_load(src)
80021dd8:	8fa10010 	lw	at,16(sp)
80021ddc:	94210000 	lhu	at,0(at)
80021de0:	a7a1001a 	sh	at,26(sp)
}
80021de4:	97a2001a 	lhu	v0,26(sp)
80021de8:	8fbf001c 	lw	ra,28(sp)
80021dec:	27bd0020 	addiu	sp,sp,32
80021df0:	03e00008 	jr	ra
80021df4:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80021df8:	8fa40010 	lw	a0,16(sp)
80021dfc:	24050002 	li	a1,2
80021e00:	0c008784 	jal	80021e10 <_ZN4core3ptr13read_volatile18precondition_check17h1228c0bfa6328758E>
80021e04:	00000000 	nop
80021e08:	08008776 	j	80021dd8 <_ZN4core3ptr13read_volatile17hb8eb22eda6c35f8aE+0x28>
80021e0c:	00000000 	nop

80021e10 <_ZN4core3ptr13read_volatile18precondition_check17h1228c0bfa6328758E>:
            const fn precondition_check($($name:$ty),*) {
80021e10:	27bdffe0 	addiu	sp,sp,-32
80021e14:	afbf001c 	sw	ra,28(sp)
80021e18:	afa40014 	sw	a0,20(sp)
80021e1c:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80021e20:	0c00985f 	jal	8002617c <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE>
80021e24:	00000000 	nop
80021e28:	14400008 	bnez	v0,80021e4c <_ZN4core3ptr13read_volatile18precondition_check17h1228c0bfa6328758E+0x3c>
80021e2c:	00000000 	nop
80021e30:	0800878e 	j	80021e38 <_ZN4core3ptr13read_volatile18precondition_check17h1228c0bfa6328758E+0x28>
80021e34:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80021e38:	3c018105 	lui	at,0x8105
80021e3c:	2424c4a0 	addiu	a0,at,-15200
80021e40:	2405006e 	li	a1,110
80021e44:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80021e48:	00000000 	nop
            }
80021e4c:	8fbf001c 	lw	ra,28(sp)
80021e50:	27bd0020 	addiu	sp,sp,32
80021e54:	03e00008 	jr	ra
80021e58:	00000000 	nop

80021e5c <_ZN4core3ptr14write_volatile17h0453af2c98ac534dE>:
/// ```
#[inline]
#[stable(feature = "volatile", since = "1.9.0")]
#[rustc_diagnostic_item = "ptr_write_volatile"]
#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
80021e5c:	27bdffd8 	addiu	sp,sp,-40
80021e60:	afbf0024 	sw	ra,36(sp)
80021e64:	afa50014 	sw	a1,20(sp)
80021e68:	afa40018 	sw	a0,24(sp)
80021e6c:	afa4001c 	sw	a0,28(sp)
80021e70:	afa50020 	sw	a1,32(sp)
    // SAFETY: the caller must uphold the safety contract for `volatile_store`.
    unsafe {
        ub_checks::assert_unsafe_precondition!(
80021e74:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80021e78:	00000000 	nop
80021e7c:	1440000a 	bnez	v0,80021ea8 <_ZN4core3ptr14write_volatile17h0453af2c98ac534dE+0x4c>
80021e80:	00000000 	nop
80021e84:	080087a3 	j	80021e8c <_ZN4core3ptr14write_volatile17h0453af2c98ac534dE+0x30>
80021e88:	00000000 	nop
            (
                addr: *mut () = dst as *mut (),
                align: usize = align_of::<T>(),
            ) => ub_checks::is_aligned_and_not_null(addr, align)
        );
        intrinsics::volatile_store(dst, src);
80021e8c:	8fa10014 	lw	at,20(sp)
80021e90:	8fa20018 	lw	v0,24(sp)
80021e94:	ac410000 	sw	at,0(v0)
    }
}
80021e98:	8fbf0024 	lw	ra,36(sp)
80021e9c:	27bd0028 	addiu	sp,sp,40
80021ea0:	03e00008 	jr	ra
80021ea4:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80021ea8:	8fa40018 	lw	a0,24(sp)
80021eac:	24050004 	li	a1,4
80021eb0:	0c0087fd 	jal	80021ff4 <_ZN4core3ptr14write_volatile18precondition_check17h80547306900d34c4E>
80021eb4:	00000000 	nop
80021eb8:	080087a3 	j	80021e8c <_ZN4core3ptr14write_volatile17h0453af2c98ac534dE+0x30>
80021ebc:	00000000 	nop

80021ec0 <_ZN4core3ptr14write_volatile17h55747bd762833743E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
80021ec0:	27bdffd8 	addiu	sp,sp,-40
80021ec4:	afbf0024 	sw	ra,36(sp)
80021ec8:	afa40014 	sw	a0,20(sp)
80021ecc:	00a00825 	move	at,a1
80021ed0:	afa10018 	sw	at,24(sp)
80021ed4:	afa4001c 	sw	a0,28(sp)
80021ed8:	a7a50022 	sh	a1,34(sp)
        ub_checks::assert_unsafe_precondition!(
80021edc:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80021ee0:	00000000 	nop
80021ee4:	1440000a 	bnez	v0,80021f10 <_ZN4core3ptr14write_volatile17h55747bd762833743E+0x50>
80021ee8:	00000000 	nop
80021eec:	080087bd 	j	80021ef4 <_ZN4core3ptr14write_volatile17h55747bd762833743E+0x34>
80021ef0:	00000000 	nop
        intrinsics::volatile_store(dst, src);
80021ef4:	8fa10018 	lw	at,24(sp)
80021ef8:	8fa20014 	lw	v0,20(sp)
80021efc:	a4410000 	sh	at,0(v0)
}
80021f00:	8fbf0024 	lw	ra,36(sp)
80021f04:	27bd0028 	addiu	sp,sp,40
80021f08:	03e00008 	jr	ra
80021f0c:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80021f10:	8fa40014 	lw	a0,20(sp)
80021f14:	24050002 	li	a1,2
80021f18:	0c0087fd 	jal	80021ff4 <_ZN4core3ptr14write_volatile18precondition_check17h80547306900d34c4E>
80021f1c:	00000000 	nop
80021f20:	080087bd 	j	80021ef4 <_ZN4core3ptr14write_volatile17h55747bd762833743E+0x34>
80021f24:	00000000 	nop

80021f28 <_ZN4core3ptr14write_volatile17h99ef45963f1b3816E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
80021f28:	27bdffd8 	addiu	sp,sp,-40
80021f2c:	afbf0024 	sw	ra,36(sp)
80021f30:	afa40014 	sw	a0,20(sp)
80021f34:	00a00825 	move	at,a1
80021f38:	afa10018 	sw	at,24(sp)
80021f3c:	afa4001c 	sw	a0,28(sp)
80021f40:	a3a50023 	sb	a1,35(sp)
        ub_checks::assert_unsafe_precondition!(
80021f44:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80021f48:	00000000 	nop
80021f4c:	1440000a 	bnez	v0,80021f78 <_ZN4core3ptr14write_volatile17h99ef45963f1b3816E+0x50>
80021f50:	00000000 	nop
80021f54:	080087d7 	j	80021f5c <_ZN4core3ptr14write_volatile17h99ef45963f1b3816E+0x34>
80021f58:	00000000 	nop
        intrinsics::volatile_store(dst, src);
80021f5c:	8fa10018 	lw	at,24(sp)
80021f60:	8fa20014 	lw	v0,20(sp)
80021f64:	a0410000 	sb	at,0(v0)
}
80021f68:	8fbf0024 	lw	ra,36(sp)
80021f6c:	27bd0028 	addiu	sp,sp,40
80021f70:	03e00008 	jr	ra
80021f74:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80021f78:	8fa40014 	lw	a0,20(sp)
80021f7c:	24050001 	li	a1,1
80021f80:	0c0087fd 	jal	80021ff4 <_ZN4core3ptr14write_volatile18precondition_check17h80547306900d34c4E>
80021f84:	00000000 	nop
80021f88:	080087d7 	j	80021f5c <_ZN4core3ptr14write_volatile17h99ef45963f1b3816E+0x34>
80021f8c:	00000000 	nop

80021f90 <_ZN4core3ptr14write_volatile17hde9c9a09a11e40d5E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
80021f90:	27bdffd8 	addiu	sp,sp,-40
80021f94:	afbf0024 	sw	ra,36(sp)
80021f98:	afa50014 	sw	a1,20(sp)
80021f9c:	afa40018 	sw	a0,24(sp)
80021fa0:	afa4001c 	sw	a0,28(sp)
80021fa4:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80021fa8:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80021fac:	00000000 	nop
80021fb0:	1440000a 	bnez	v0,80021fdc <_ZN4core3ptr14write_volatile17hde9c9a09a11e40d5E+0x4c>
80021fb4:	00000000 	nop
80021fb8:	080087f0 	j	80021fc0 <_ZN4core3ptr14write_volatile17hde9c9a09a11e40d5E+0x30>
80021fbc:	00000000 	nop
        intrinsics::volatile_store(dst, src);
80021fc0:	8fa10014 	lw	at,20(sp)
80021fc4:	8fa20018 	lw	v0,24(sp)
80021fc8:	ac410000 	sw	at,0(v0)
}
80021fcc:	8fbf0024 	lw	ra,36(sp)
80021fd0:	27bd0028 	addiu	sp,sp,40
80021fd4:	03e00008 	jr	ra
80021fd8:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80021fdc:	8fa40018 	lw	a0,24(sp)
80021fe0:	24050004 	li	a1,4
80021fe4:	0c0087fd 	jal	80021ff4 <_ZN4core3ptr14write_volatile18precondition_check17h80547306900d34c4E>
80021fe8:	00000000 	nop
80021fec:	080087f0 	j	80021fc0 <_ZN4core3ptr14write_volatile17hde9c9a09a11e40d5E+0x30>
80021ff0:	00000000 	nop

80021ff4 <_ZN4core3ptr14write_volatile18precondition_check17h80547306900d34c4E>:
            const fn precondition_check($($name:$ty),*) {
80021ff4:	27bdffe0 	addiu	sp,sp,-32
80021ff8:	afbf001c 	sw	ra,28(sp)
80021ffc:	afa40014 	sw	a0,20(sp)
80022000:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80022004:	0c00985f 	jal	8002617c <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE>
80022008:	00000000 	nop
8002200c:	14400008 	bnez	v0,80022030 <_ZN4core3ptr14write_volatile18precondition_check17h80547306900d34c4E+0x3c>
80022010:	00000000 	nop
80022014:	08008807 	j	8002201c <_ZN4core3ptr14write_volatile18precondition_check17h80547306900d34c4E+0x28>
80022018:	00000000 	nop
                    ::core::panicking::panic_nounwind(
8002201c:	3c018105 	lui	at,0x8105
80022020:	2424c50e 	addiu	a0,at,-15090
80022024:	2405006f 	li	a1,111
80022028:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8002202c:	00000000 	nop
            }
80022030:	8fbf001c 	lw	ra,28(sp)
80022034:	27bd0020 	addiu	sp,sp,32
80022038:	03e00008 	jr	ra
8002203c:	00000000 	nop

80022040 <_ZN4core3ptr20slice_from_raw_parts17h4e4fb1ef9eaff64bE>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
80022040:	27bdffe0 	addiu	sp,sp,-32
80022044:	afbf001c 	sw	ra,28(sp)
80022048:	afa40010 	sw	a0,16(sp)
8002204c:	afa50014 	sw	a1,20(sp)
80022050:	afa40018 	sw	a0,24(sp)
    from_raw_parts(data.cast(), len)
80022054:	0c008c60 	jal	80023180 <_ZN4core3ptr8metadata14from_raw_parts17hb59d268136aadc91E>
80022058:	00000000 	nop
}
8002205c:	8fbf001c 	lw	ra,28(sp)
80022060:	27bd0020 	addiu	sp,sp,32
80022064:	03e00008 	jr	ra
80022068:	00000000 	nop

8002206c <_ZN4core3ptr20slice_from_raw_parts17h9126b04c69abcb28E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
8002206c:	27bdffe0 	addiu	sp,sp,-32
80022070:	afbf001c 	sw	ra,28(sp)
80022074:	afa40010 	sw	a0,16(sp)
80022078:	afa50014 	sw	a1,20(sp)
8002207c:	afa40018 	sw	a0,24(sp)
    from_raw_parts(data.cast(), len)
80022080:	0c008c6e 	jal	800231b8 <_ZN4core3ptr8metadata14from_raw_parts17hd978c4c827169d83E>
80022084:	00000000 	nop
}
80022088:	8fbf001c 	lw	ra,28(sp)
8002208c:	27bd0020 	addiu	sp,sp,32
80022090:	03e00008 	jr	ra
80022094:	00000000 	nop

80022098 <_ZN4core3ptr20slice_from_raw_parts17h98db98e4d6f84fd6E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
80022098:	27bdffe0 	addiu	sp,sp,-32
8002209c:	afbf001c 	sw	ra,28(sp)
800220a0:	afa40010 	sw	a0,16(sp)
800220a4:	afa50014 	sw	a1,20(sp)
800220a8:	afa40018 	sw	a0,24(sp)
    from_raw_parts(data.cast(), len)
800220ac:	0c008c7c 	jal	800231f0 <_ZN4core3ptr8metadata14from_raw_parts17hf170de74dceb0b26E>
800220b0:	00000000 	nop
}
800220b4:	8fbf001c 	lw	ra,28(sp)
800220b8:	27bd0020 	addiu	sp,sp,32
800220bc:	03e00008 	jr	ra
800220c0:	00000000 	nop

800220c4 <_ZN4core3ptr24slice_from_raw_parts_mut17h9b983c4771f33289E>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
800220c4:	27bdffe0 	addiu	sp,sp,-32
800220c8:	afbf001c 	sw	ra,28(sp)
800220cc:	afa40010 	sw	a0,16(sp)
800220d0:	afa50014 	sw	a1,20(sp)
800220d4:	afa40018 	sw	a0,24(sp)
    from_raw_parts_mut(data.cast(), len)
800220d8:	0c008c8a 	jal	80023228 <_ZN4core3ptr8metadata18from_raw_parts_mut17h1c7d0f3fd63c0c2cE>
800220dc:	00000000 	nop
}
800220e0:	8fbf001c 	lw	ra,28(sp)
800220e4:	27bd0020 	addiu	sp,sp,32
800220e8:	03e00008 	jr	ra
800220ec:	00000000 	nop

800220f0 <_ZN4core3ptr24slice_from_raw_parts_mut17h9ced3415d39e95e7E>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
800220f0:	27bdffe0 	addiu	sp,sp,-32
800220f4:	afbf001c 	sw	ra,28(sp)
800220f8:	afa40010 	sw	a0,16(sp)
800220fc:	afa50014 	sw	a1,20(sp)
80022100:	afa40018 	sw	a0,24(sp)
    from_raw_parts_mut(data.cast(), len)
80022104:	0c008c98 	jal	80023260 <_ZN4core3ptr8metadata18from_raw_parts_mut17h2107842491d6db94E>
80022108:	00000000 	nop
}
8002210c:	8fbf001c 	lw	ra,28(sp)
80022110:	27bd0020 	addiu	sp,sp,32
80022114:	03e00008 	jr	ra
80022118:	00000000 	nop

8002211c <_ZN4core3ptr24slice_from_raw_parts_mut17hd414fdcd3bae6beeE>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
8002211c:	27bdffe0 	addiu	sp,sp,-32
80022120:	afbf001c 	sw	ra,28(sp)
80022124:	afa40010 	sw	a0,16(sp)
80022128:	afa50014 	sw	a1,20(sp)
8002212c:	afa40018 	sw	a0,24(sp)
    from_raw_parts_mut(data.cast(), len)
80022130:	0c008cb4 	jal	800232d0 <_ZN4core3ptr8metadata18from_raw_parts_mut17h9f89f0e9e8d23fa6E>
80022134:	00000000 	nop
}
80022138:	8fbf001c 	lw	ra,28(sp)
8002213c:	27bd0020 	addiu	sp,sp,32
80022140:	03e00008 	jr	ra
80022144:	00000000 	nop

80022148 <_ZN4core3ptr24slice_from_raw_parts_mut17hea5f30a960da8ec9E>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
80022148:	27bdffe0 	addiu	sp,sp,-32
8002214c:	afbf001c 	sw	ra,28(sp)
80022150:	afa40010 	sw	a0,16(sp)
80022154:	afa50014 	sw	a1,20(sp)
80022158:	afa40018 	sw	a0,24(sp)
    from_raw_parts_mut(data.cast(), len)
8002215c:	0c008ca6 	jal	80023298 <_ZN4core3ptr8metadata18from_raw_parts_mut17h7050e98324e56259E>
80022160:	00000000 	nop
}
80022164:	8fbf001c 	lw	ra,28(sp)
80022168:	27bd0020 	addiu	sp,sp,32
8002216c:	03e00008 	jr	ra
80022170:	00000000 	nop

80022174 <_ZN4core3ptr28drop_in_place$LT$$RF$str$GT$17h47b86f50318cc3adE>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80022174:	27bdfff8 	addiu	sp,sp,-8
80022178:	afa40004 	sw	a0,4(sp)
8002217c:	27bd0008 	addiu	sp,sp,8
80022180:	03e00008 	jr	ra
80022184:	00000000 	nop

80022188 <_ZN4core3ptr37drop_in_place$LT$core..fmt..Error$GT$17h32c6a90158a08176E>:
80022188:	27bdfff8 	addiu	sp,sp,-8
8002218c:	afa40004 	sw	a0,4(sp)
80022190:	27bd0008 	addiu	sp,sp,8
80022194:	03e00008 	jr	ra
80022198:	00000000 	nop

8002219c <_ZN4core3ptr37drop_in_place$LT$elf..ElfHeader32$GT$17hbf0d573934b096baE>:
8002219c:	27bdfff8 	addiu	sp,sp,-8
800221a0:	afa40004 	sw	a0,4(sp)
800221a4:	27bd0008 	addiu	sp,sp,8
800221a8:	03e00008 	jr	ra
800221ac:	00000000 	nop

800221b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hf75b1038f2f395baE>:
800221b0:	27bdffe8 	addiu	sp,sp,-24
800221b4:	afbf0014 	sw	ra,20(sp)
800221b8:	afa40010 	sw	a0,16(sp)
800221bc:	0c00dadf 	jal	80036b7c <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb39f41787bed263eE>
800221c0:	00000000 	nop
800221c4:	8fbf0014 	lw	ra,20(sp)
800221c8:	27bd0018 	addiu	sp,sp,24
800221cc:	03e00008 	jr	ra
800221d0:	00000000 	nop

800221d4 <_ZN4core3ptr40drop_in_place$LT$mos_6502..proc..Env$GT$17h007787a6167ca1caE>:
800221d4:	27bdffe0 	addiu	sp,sp,-32
800221d8:	afbf001c 	sw	ra,28(sp)
800221dc:	afa40014 	sw	a0,20(sp)
800221e0:	afa40018 	sw	a0,24(sp)
800221e4:	24840098 	addiu	a0,a0,152
800221e8:	0c008d66 	jal	80023598 <_ZN4core3ptr96drop_in_place$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h43239437a0ec2517E>
800221ec:	00000000 	nop
800221f0:	8fa40014 	lw	a0,20(sp)
800221f4:	248400b0 	addiu	a0,a0,176
800221f8:	0c008c18 	jal	80023060 <_ZN4core3ptr76drop_in_place$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$17hbea8936a658e1291E>
800221fc:	00000000 	nop
80022200:	8fa40014 	lw	a0,20(sp)
80022204:	248400b4 	addiu	a0,a0,180
80022208:	0c008d66 	jal	80023598 <_ZN4core3ptr96drop_in_place$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h43239437a0ec2517E>
8002220c:	00000000 	nop
80022210:	8fbf001c 	lw	ra,28(sp)
80022214:	27bd0020 	addiu	sp,sp,32
80022218:	03e00008 	jr	ra
8002221c:	00000000 	nop

80022220 <_ZN4core3ptr42drop_in_place$LT$core..cell..BorrowRef$GT$17ha0e943d4a0b8d244E>:
80022220:	27bdffe8 	addiu	sp,sp,-24
80022224:	afbf0014 	sw	ra,20(sp)
80022228:	afa40010 	sw	a0,16(sp)
8002222c:	0c00a978 	jal	8002a5e0 <_ZN63_$LT$core..cell..BorrowRef$u20$as$u20$core..ops..drop..Drop$GT$4drop17h56474d439e35c7d0E>
80022230:	00000000 	nop
80022234:	8fbf0014 	lw	ra,20(sp)
80022238:	27bd0018 	addiu	sp,sp,24
8002223c:	03e00008 	jr	ra
80022240:	00000000 	nop

80022244 <_ZN4core3ptr44drop_in_place$LT$mos_6502..print..Stdout$GT$17hc7d124851879ac33E>:
80022244:	27bdfff8 	addiu	sp,sp,-8
80022248:	afa40004 	sw	a0,4(sp)
8002224c:	27bd0008 	addiu	sp,sp,8
80022250:	03e00008 	jr	ra
80022254:	00000000 	nop

80022258 <_ZN4core3ptr45drop_in_place$LT$core..cell..BorrowRefMut$GT$17hdfc07535b69b4680E>:
80022258:	27bdffe8 	addiu	sp,sp,-24
8002225c:	afbf0014 	sw	ra,20(sp)
80022260:	afa40010 	sw	a0,16(sp)
80022264:	0c00a9a8 	jal	8002a6a0 <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17h734312a022f35e3aE>
80022268:	00000000 	nop
8002226c:	8fbf0014 	lw	ra,20(sp)
80022270:	27bd0018 	addiu	sp,sp,24
80022274:	03e00008 	jr	ra
80022278:	00000000 	nop

8002227c <_ZN4core3ptr45drop_in_place$LT$mos_6502..util..ListNode$GT$17h3fe2271d6788439aE>:
8002227c:	27bdffe0 	addiu	sp,sp,-32
80022280:	afbf001c 	sw	ra,28(sp)
80022284:	afa40014 	sw	a0,20(sp)
80022288:	afa40018 	sw	a0,24(sp)
8002228c:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80022290:	00000000 	nop
80022294:	8fa40014 	lw	a0,20(sp)
80022298:	24840004 	addiu	a0,a0,4
8002229c:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
800222a0:	00000000 	nop
800222a4:	8fbf001c 	lw	ra,28(sp)
800222a8:	27bd0020 	addiu	sp,sp,32
800222ac:	03e00008 	jr	ra
800222b0:	00000000 	nop

800222b4 <_ZN4core3ptr47drop_in_place$LT$mos_6502..util..IndexStack$GT$17h4cf616d93f45aa7eE>:
800222b4:	27bdffe8 	addiu	sp,sp,-24
800222b8:	afbf0014 	sw	ra,20(sp)
800222bc:	afa40010 	sw	a0,16(sp)
800222c0:	0c0088b6 	jal	800222d8 <_ZN4core3ptr49drop_in_place$LT$alloc..vec..Vec$LT$usize$GT$$GT$17h2c595de016204b7dE>
800222c4:	00000000 	nop
800222c8:	8fbf0014 	lw	ra,20(sp)
800222cc:	27bd0018 	addiu	sp,sp,24
800222d0:	03e00008 	jr	ra
800222d4:	00000000 	nop

800222d8 <_ZN4core3ptr49drop_in_place$LT$alloc..vec..Vec$LT$usize$GT$$GT$17h2c595de016204b7dE>:
800222d8:	27bdffe0 	addiu	sp,sp,-32
800222dc:	afbf001c 	sw	ra,28(sp)
800222e0:	afa40014 	sw	a0,20(sp)
800222e4:	afa40018 	sw	a0,24(sp)
800222e8:	0c00aa19 	jal	8002a864 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1107a2a2cd50b6edE>
800222ec:	00000000 	nop
800222f0:	8fa40014 	lw	a0,20(sp)
800222f4:	0c008a02 	jal	80022808 <_ZN4core3ptr56drop_in_place$LT$alloc..raw_vec..RawVec$LT$usize$GT$$GT$17h4357910c8313bb11E>
800222f8:	00000000 	nop
800222fc:	8fbf001c 	lw	ra,28(sp)
80022300:	27bd0020 	addiu	sp,sp,32
80022304:	03e00008 	jr	ra
80022308:	00000000 	nop

8002230c <_ZN4core3ptr4read17h196d86d08b825841E>:
pub const unsafe fn read<T>(src: *const T) -> T {
8002230c:	27bdffe0 	addiu	sp,sp,-32
80022310:	afbf001c 	sw	ra,28(sp)
80022314:	afa40014 	sw	a0,20(sp)
80022318:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
8002231c:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80022320:	00000000 	nop
80022324:	14400009 	bnez	v0,8002234c <_ZN4core3ptr4read17h196d86d08b825841E+0x40>
80022328:	00000000 	nop
8002232c:	080088cd 	j	80022334 <_ZN4core3ptr4read17h196d86d08b825841E+0x28>
80022330:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
80022334:	8fa10014 	lw	at,20(sp)
80022338:	8c220000 	lw	v0,0(at)
}
8002233c:	8fbf001c 	lw	ra,28(sp)
80022340:	27bd0020 	addiu	sp,sp,32
80022344:	03e00008 	jr	ra
80022348:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8002234c:	8fa40014 	lw	a0,20(sp)
80022350:	24050004 	li	a1,4
80022354:	0c0089c0 	jal	80022700 <_ZN4core3ptr4read18precondition_check17h6b42b840672b7863E>
80022358:	00000000 	nop
8002235c:	080088cd 	j	80022334 <_ZN4core3ptr4read17h196d86d08b825841E+0x28>
80022360:	00000000 	nop

80022364 <_ZN4core3ptr4read17h2741f013bcedf7aaE>:
pub const unsafe fn read<T>(src: *const T) -> T {
80022364:	27bdffe0 	addiu	sp,sp,-32
80022368:	afbf001c 	sw	ra,28(sp)
8002236c:	afa40014 	sw	a0,20(sp)
80022370:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80022374:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80022378:	00000000 	nop
8002237c:	14400009 	bnez	v0,800223a4 <_ZN4core3ptr4read17h2741f013bcedf7aaE+0x40>
80022380:	00000000 	nop
80022384:	080088e3 	j	8002238c <_ZN4core3ptr4read17h2741f013bcedf7aaE+0x28>
80022388:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
8002238c:	8fa10014 	lw	at,20(sp)
80022390:	8c220000 	lw	v0,0(at)
}
80022394:	8fbf001c 	lw	ra,28(sp)
80022398:	27bd0020 	addiu	sp,sp,32
8002239c:	03e00008 	jr	ra
800223a0:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800223a4:	8fa40014 	lw	a0,20(sp)
800223a8:	24050004 	li	a1,4
800223ac:	0c0089c0 	jal	80022700 <_ZN4core3ptr4read18precondition_check17h6b42b840672b7863E>
800223b0:	00000000 	nop
800223b4:	080088e3 	j	8002238c <_ZN4core3ptr4read17h2741f013bcedf7aaE+0x28>
800223b8:	00000000 	nop

800223bc <_ZN4core3ptr4read17h5654c04943492f3dE>:
pub const unsafe fn read<T>(src: *const T) -> T {
800223bc:	27bdffe0 	addiu	sp,sp,-32
800223c0:	afbf001c 	sw	ra,28(sp)
800223c4:	afa40014 	sw	a0,20(sp)
800223c8:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
800223cc:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
800223d0:	00000000 	nop
800223d4:	14400009 	bnez	v0,800223fc <_ZN4core3ptr4read17h5654c04943492f3dE+0x40>
800223d8:	00000000 	nop
800223dc:	080088f9 	j	800223e4 <_ZN4core3ptr4read17h5654c04943492f3dE+0x28>
800223e0:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
800223e4:	8fa10014 	lw	at,20(sp)
800223e8:	8c220000 	lw	v0,0(at)
}
800223ec:	8fbf001c 	lw	ra,28(sp)
800223f0:	27bd0020 	addiu	sp,sp,32
800223f4:	03e00008 	jr	ra
800223f8:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800223fc:	8fa40014 	lw	a0,20(sp)
80022400:	24050004 	li	a1,4
80022404:	0c0089c0 	jal	80022700 <_ZN4core3ptr4read18precondition_check17h6b42b840672b7863E>
80022408:	00000000 	nop
8002240c:	080088f9 	j	800223e4 <_ZN4core3ptr4read17h5654c04943492f3dE+0x28>
80022410:	00000000 	nop

80022414 <_ZN4core3ptr4read17h59f708089ca8ed17E>:
pub const unsafe fn read<T>(src: *const T) -> T {
80022414:	27bdffe0 	addiu	sp,sp,-32
80022418:	afbf001c 	sw	ra,28(sp)
8002241c:	afa40014 	sw	a0,20(sp)
80022420:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80022424:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80022428:	00000000 	nop
8002242c:	14400009 	bnez	v0,80022454 <_ZN4core3ptr4read17h59f708089ca8ed17E+0x40>
80022430:	00000000 	nop
80022434:	0800890f 	j	8002243c <_ZN4core3ptr4read17h59f708089ca8ed17E+0x28>
80022438:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
8002243c:	8fa10014 	lw	at,20(sp)
80022440:	8c220000 	lw	v0,0(at)
}
80022444:	8fbf001c 	lw	ra,28(sp)
80022448:	27bd0020 	addiu	sp,sp,32
8002244c:	03e00008 	jr	ra
80022450:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022454:	8fa40014 	lw	a0,20(sp)
80022458:	24050004 	li	a1,4
8002245c:	0c0089c0 	jal	80022700 <_ZN4core3ptr4read18precondition_check17h6b42b840672b7863E>
80022460:	00000000 	nop
80022464:	0800890f 	j	8002243c <_ZN4core3ptr4read17h59f708089ca8ed17E+0x28>
80022468:	00000000 	nop

8002246c <_ZN4core3ptr4read17h5b5606e67e65f06fE>:
pub const unsafe fn read<T>(src: *const T) -> T {
8002246c:	27bdffd8 	addiu	sp,sp,-40
80022470:	afbf0024 	sw	ra,36(sp)
80022474:	afa50014 	sw	a1,20(sp)
80022478:	afa40018 	sw	a0,24(sp)
8002247c:	afa4001c 	sw	a0,28(sp)
80022480:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80022484:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80022488:	00000000 	nop
8002248c:	14400024 	bnez	v0,80022520 <_ZN4core3ptr4read17h5b5606e67e65f06fE+0xb4>
80022490:	00000000 	nop
80022494:	08008927 	j	8002249c <_ZN4core3ptr4read17h5b5606e67e65f06fE+0x30>
80022498:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
8002249c:	8fa2001c 	lw	v0,28(sp)
800224a0:	8fa30018 	lw	v1,24(sp)
800224a4:	8fa10014 	lw	at,20(sp)
800224a8:	8c240030 	lw	a0,48(at)
800224ac:	ac640030 	sw	a0,48(v1)
800224b0:	8c24002c 	lw	a0,44(at)
800224b4:	ac64002c 	sw	a0,44(v1)
800224b8:	8c240028 	lw	a0,40(at)
800224bc:	ac640028 	sw	a0,40(v1)
800224c0:	8c240024 	lw	a0,36(at)
800224c4:	ac640024 	sw	a0,36(v1)
800224c8:	8c240020 	lw	a0,32(at)
800224cc:	ac640020 	sw	a0,32(v1)
800224d0:	8c24001c 	lw	a0,28(at)
800224d4:	ac64001c 	sw	a0,28(v1)
800224d8:	8c240018 	lw	a0,24(at)
800224dc:	ac640018 	sw	a0,24(v1)
800224e0:	8c240014 	lw	a0,20(at)
800224e4:	ac640014 	sw	a0,20(v1)
800224e8:	8c240010 	lw	a0,16(at)
800224ec:	ac640010 	sw	a0,16(v1)
800224f0:	8c24000c 	lw	a0,12(at)
800224f4:	ac64000c 	sw	a0,12(v1)
800224f8:	8c240008 	lw	a0,8(at)
800224fc:	ac640008 	sw	a0,8(v1)
80022500:	8c240004 	lw	a0,4(at)
80022504:	ac640004 	sw	a0,4(v1)
80022508:	8c210000 	lw	at,0(at)
8002250c:	ac610000 	sw	at,0(v1)
}
80022510:	8fbf0024 	lw	ra,36(sp)
80022514:	27bd0028 	addiu	sp,sp,40
80022518:	03e00008 	jr	ra
8002251c:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022520:	8fa40014 	lw	a0,20(sp)
80022524:	24050004 	li	a1,4
80022528:	0c0089c0 	jal	80022700 <_ZN4core3ptr4read18precondition_check17h6b42b840672b7863E>
8002252c:	00000000 	nop
80022530:	08008927 	j	8002249c <_ZN4core3ptr4read17h5b5606e67e65f06fE+0x30>
80022534:	00000000 	nop

80022538 <_ZN4core3ptr4read17habfea21e35931a06E>:
pub const unsafe fn read<T>(src: *const T) -> T {
80022538:	27bdffd8 	addiu	sp,sp,-40
8002253c:	afbf0024 	sw	ra,36(sp)
80022540:	afa50014 	sw	a1,20(sp)
80022544:	afa40018 	sw	a0,24(sp)
80022548:	afa4001c 	sw	a0,28(sp)
8002254c:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80022550:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80022554:	00000000 	nop
80022558:	1440001a 	bnez	v0,800225c4 <_ZN4core3ptr4read17habfea21e35931a06E+0x8c>
8002255c:	00000000 	nop
80022560:	0800895a 	j	80022568 <_ZN4core3ptr4read17habfea21e35931a06E+0x30>
80022564:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
80022568:	8fa2001c 	lw	v0,28(sp)
8002256c:	8fa30018 	lw	v1,24(sp)
80022570:	8fa10014 	lw	at,20(sp)
80022574:	8c24001c 	lw	a0,28(at)
80022578:	ac64001c 	sw	a0,28(v1)
8002257c:	8c240018 	lw	a0,24(at)
80022580:	ac640018 	sw	a0,24(v1)
80022584:	8c240014 	lw	a0,20(at)
80022588:	ac640014 	sw	a0,20(v1)
8002258c:	8c240010 	lw	a0,16(at)
80022590:	ac640010 	sw	a0,16(v1)
80022594:	8c24000c 	lw	a0,12(at)
80022598:	ac64000c 	sw	a0,12(v1)
8002259c:	8c240008 	lw	a0,8(at)
800225a0:	ac640008 	sw	a0,8(v1)
800225a4:	8c240004 	lw	a0,4(at)
800225a8:	ac640004 	sw	a0,4(v1)
800225ac:	8c210000 	lw	at,0(at)
800225b0:	ac610000 	sw	at,0(v1)
}
800225b4:	8fbf0024 	lw	ra,36(sp)
800225b8:	27bd0028 	addiu	sp,sp,40
800225bc:	03e00008 	jr	ra
800225c0:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800225c4:	8fa40014 	lw	a0,20(sp)
800225c8:	24050004 	li	a1,4
800225cc:	0c0089c0 	jal	80022700 <_ZN4core3ptr4read18precondition_check17h6b42b840672b7863E>
800225d0:	00000000 	nop
800225d4:	0800895a 	j	80022568 <_ZN4core3ptr4read17habfea21e35931a06E+0x30>
800225d8:	00000000 	nop

800225dc <_ZN4core3ptr4read17hade0870f517b7becE>:
pub const unsafe fn read<T>(src: *const T) -> T {
800225dc:	27bdffe0 	addiu	sp,sp,-32
800225e0:	afbf001c 	sw	ra,28(sp)
800225e4:	afa40014 	sw	a0,20(sp)
800225e8:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
800225ec:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
800225f0:	00000000 	nop
800225f4:	1440000a 	bnez	v0,80022620 <_ZN4core3ptr4read17hade0870f517b7becE+0x44>
800225f8:	00000000 	nop
800225fc:	08008981 	j	80022604 <_ZN4core3ptr4read17hade0870f517b7becE+0x28>
80022600:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
80022604:	8fa10014 	lw	at,20(sp)
80022608:	8c220000 	lw	v0,0(at)
8002260c:	8c230004 	lw	v1,4(at)
}
80022610:	8fbf001c 	lw	ra,28(sp)
80022614:	27bd0020 	addiu	sp,sp,32
80022618:	03e00008 	jr	ra
8002261c:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022620:	8fa40014 	lw	a0,20(sp)
80022624:	24050004 	li	a1,4
80022628:	0c0089c0 	jal	80022700 <_ZN4core3ptr4read18precondition_check17h6b42b840672b7863E>
8002262c:	00000000 	nop
80022630:	08008981 	j	80022604 <_ZN4core3ptr4read17hade0870f517b7becE+0x28>
80022634:	00000000 	nop

80022638 <_ZN4core3ptr4read17hb2fc3976f3669be9E>:
pub const unsafe fn read<T>(src: *const T) -> T {
80022638:	27bdffd8 	addiu	sp,sp,-40
8002263c:	afbf0024 	sw	ra,36(sp)
80022640:	afa50014 	sw	a1,20(sp)
80022644:	afa40018 	sw	a0,24(sp)
80022648:	afa4001c 	sw	a0,28(sp)
8002264c:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80022650:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80022654:	00000000 	nop
80022658:	1440000d 	bnez	v0,80022690 <_ZN4core3ptr4read17hb2fc3976f3669be9E+0x58>
8002265c:	00000000 	nop
80022660:	0800899a 	j	80022668 <_ZN4core3ptr4read17hb2fc3976f3669be9E+0x30>
80022664:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
80022668:	8fa50014 	lw	a1,20(sp)
8002266c:	8fa40018 	lw	a0,24(sp)
80022670:	24060098 	li	a2,152
80022674:	0c00d3fd 	jal	80034ff4 <memcpy>
80022678:	00000000 	nop
}
8002267c:	8fa2001c 	lw	v0,28(sp)
80022680:	8fbf0024 	lw	ra,36(sp)
80022684:	27bd0028 	addiu	sp,sp,40
80022688:	03e00008 	jr	ra
8002268c:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022690:	8fa40014 	lw	a0,20(sp)
80022694:	24050004 	li	a1,4
80022698:	0c0089c0 	jal	80022700 <_ZN4core3ptr4read18precondition_check17h6b42b840672b7863E>
8002269c:	00000000 	nop
800226a0:	0800899a 	j	80022668 <_ZN4core3ptr4read17hb2fc3976f3669be9E+0x30>
800226a4:	00000000 	nop

800226a8 <_ZN4core3ptr4read17he7e341b878a42480E>:
pub const unsafe fn read<T>(src: *const T) -> T {
800226a8:	27bdffe0 	addiu	sp,sp,-32
800226ac:	afbf001c 	sw	ra,28(sp)
800226b0:	afa40014 	sw	a0,20(sp)
800226b4:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
800226b8:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
800226bc:	00000000 	nop
800226c0:	14400009 	bnez	v0,800226e8 <_ZN4core3ptr4read17he7e341b878a42480E+0x40>
800226c4:	00000000 	nop
800226c8:	080089b4 	j	800226d0 <_ZN4core3ptr4read17he7e341b878a42480E+0x28>
800226cc:	00000000 	nop
}
800226d0:	8fa10014 	lw	at,20(sp)
800226d4:	94220000 	lhu	v0,0(at)
800226d8:	8fbf001c 	lw	ra,28(sp)
800226dc:	27bd0020 	addiu	sp,sp,32
800226e0:	03e00008 	jr	ra
800226e4:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800226e8:	8fa40014 	lw	a0,20(sp)
800226ec:	24050002 	li	a1,2
800226f0:	0c0089c0 	jal	80022700 <_ZN4core3ptr4read18precondition_check17h6b42b840672b7863E>
800226f4:	00000000 	nop
800226f8:	080089b4 	j	800226d0 <_ZN4core3ptr4read17he7e341b878a42480E+0x28>
800226fc:	00000000 	nop

80022700 <_ZN4core3ptr4read18precondition_check17h6b42b840672b7863E>:
            const fn precondition_check($($name:$ty),*) {
80022700:	27bdffe0 	addiu	sp,sp,-32
80022704:	afbf001c 	sw	ra,28(sp)
80022708:	afa40014 	sw	a0,20(sp)
8002270c:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80022710:	0c00985f 	jal	8002617c <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE>
80022714:	00000000 	nop
80022718:	14400008 	bnez	v0,8002273c <_ZN4core3ptr4read18precondition_check17h6b42b840672b7863E+0x3c>
8002271c:	00000000 	nop
80022720:	080089ca 	j	80022728 <_ZN4core3ptr4read18precondition_check17h6b42b840672b7863E+0x28>
80022724:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80022728:	3c018105 	lui	at,0x8105
8002272c:	2424c57d 	addiu	a0,at,-14979
80022730:	24050065 	li	a1,101
80022734:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80022738:	00000000 	nop
            }
8002273c:	8fbf001c 	lw	ra,28(sp)
80022740:	27bd0020 	addiu	sp,sp,32
80022744:	03e00008 	jr	ra
80022748:	00000000 	nop

8002274c <_ZN4core3ptr50drop_in_place$LT$$u5b$mos_6502..proc..Env$u5d$$GT$17h852b86370fe92da8E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8002274c:	27bdffd8 	addiu	sp,sp,-40
80022750:	afbf0024 	sw	ra,36(sp)
80022754:	afa50010 	sw	a1,16(sp)
80022758:	afa40014 	sw	a0,20(sp)
8002275c:	afa4001c 	sw	a0,28(sp)
80022760:	afa50020 	sw	a1,32(sp)
80022764:	afa00018 	sw	zero,24(sp)
80022768:	080089dc 	j	80022770 <_ZN4core3ptr50drop_in_place$LT$$u5b$mos_6502..proc..Env$u5d$$GT$17h852b86370fe92da8E+0x24>
8002276c:	00000000 	nop
80022770:	8fa20010 	lw	v0,16(sp)
80022774:	8fa10018 	lw	at,24(sp)
80022778:	10220011 	beq	at,v0,800227c0 <_ZN4core3ptr50drop_in_place$LT$$u5b$mos_6502..proc..Env$u5d$$GT$17h852b86370fe92da8E+0x74>
8002277c:	00000000 	nop
80022780:	080089e2 	j	80022788 <_ZN4core3ptr50drop_in_place$LT$$u5b$mos_6502..proc..Env$u5d$$GT$17h852b86370fe92da8E+0x3c>
80022784:	00000000 	nop
80022788:	8fa20014 	lw	v0,20(sp)
8002278c:	8fa10018 	lw	at,24(sp)
80022790:	00012080 	sll	a0,at,0x2
80022794:	00011940 	sll	v1,at,0x5
80022798:	00642021 	addu	a0,v1,a0
8002279c:	00011a00 	sll	v1,at,0x8
800227a0:	00641823 	subu	v1,v1,a0
800227a4:	00432021 	addu	a0,v0,v1
800227a8:	24210001 	addiu	at,at,1
800227ac:	afa10018 	sw	at,24(sp)
800227b0:	0c008875 	jal	800221d4 <_ZN4core3ptr40drop_in_place$LT$mos_6502..proc..Env$GT$17h007787a6167ca1caE>
800227b4:	00000000 	nop
800227b8:	080089dc 	j	80022770 <_ZN4core3ptr50drop_in_place$LT$$u5b$mos_6502..proc..Env$u5d$$GT$17h852b86370fe92da8E+0x24>
800227bc:	00000000 	nop
800227c0:	8fbf0024 	lw	ra,36(sp)
800227c4:	27bd0028 	addiu	sp,sp,40
800227c8:	03e00008 	jr	ra
800227cc:	00000000 	nop

800227d0 <_ZN4core3ptr53drop_in_place$LT$mos_6502..util..DoubleLinkedList$GT$17h67d4a9d468f9d458E>:
800227d0:	27bdffe0 	addiu	sp,sp,-32
800227d4:	afbf001c 	sw	ra,28(sp)
800227d8:	afa40014 	sw	a0,20(sp)
800227dc:	afa40018 	sw	a0,24(sp)
800227e0:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
800227e4:	00000000 	nop
800227e8:	8fa40014 	lw	a0,20(sp)
800227ec:	24840004 	addiu	a0,a0,4
800227f0:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
800227f4:	00000000 	nop
800227f8:	8fbf001c 	lw	ra,28(sp)
800227fc:	27bd0020 	addiu	sp,sp,32
80022800:	03e00008 	jr	ra
80022804:	00000000 	nop

80022808 <_ZN4core3ptr56drop_in_place$LT$alloc..raw_vec..RawVec$LT$usize$GT$$GT$17h4357910c8313bb11E>:
80022808:	27bdffe8 	addiu	sp,sp,-24
8002280c:	afbf0014 	sw	ra,20(sp)
80022810:	afa40010 	sw	a0,16(sp)
80022814:	0c00acbb 	jal	8002b2ec <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc7610c512fe89e5fE>
80022818:	00000000 	nop
8002281c:	8fbf0014 	lw	ra,20(sp)
80022820:	27bd0018 	addiu	sp,sp,24
80022824:	03e00008 	jr	ra
80022828:	00000000 	nop

8002282c <_ZN4core3ptr5write17h3fd8c1232ea0fef8E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
8002282c:	27bdffd0 	addiu	sp,sp,-48
80022830:	afbf002c 	sw	ra,44(sp)
80022834:	afa60014 	sw	a2,20(sp)
80022838:	afa50018 	sw	a1,24(sp)
8002283c:	afa4001c 	sw	a0,28(sp)
80022840:	afa40020 	sw	a0,32(sp)
80022844:	afa50024 	sw	a1,36(sp)
80022848:	afa60028 	sw	a2,40(sp)
        ub_checks::assert_unsafe_precondition!(
8002284c:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80022850:	00000000 	nop
80022854:	1440000c 	bnez	v0,80022888 <_ZN4core3ptr5write17h3fd8c1232ea0fef8E+0x5c>
80022858:	00000000 	nop
8002285c:	08008a19 	j	80022864 <_ZN4core3ptr5write17h3fd8c1232ea0fef8E+0x38>
80022860:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022864:	8fa10014 	lw	at,20(sp)
80022868:	8fa2001c 	lw	v0,28(sp)
8002286c:	8fa30018 	lw	v1,24(sp)
80022870:	ac430000 	sw	v1,0(v0)
80022874:	ac410004 	sw	at,4(v0)
}
80022878:	8fbf002c 	lw	ra,44(sp)
8002287c:	27bd0030 	addiu	sp,sp,48
80022880:	03e00008 	jr	ra
80022884:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022888:	8fa4001c 	lw	a0,28(sp)
8002288c:	24050004 	li	a1,4
80022890:	0c008b1e 	jal	80022c78 <_ZN4core3ptr5write18precondition_check17hc8388a301562bd2cE>
80022894:	00000000 	nop
80022898:	08008a19 	j	80022864 <_ZN4core3ptr5write17h3fd8c1232ea0fef8E+0x38>
8002289c:	00000000 	nop

800228a0 <_ZN4core3ptr5write17h4fb1223197ffc296E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
800228a0:	27bdffd8 	addiu	sp,sp,-40
800228a4:	afbf0024 	sw	ra,36(sp)
800228a8:	afa50014 	sw	a1,20(sp)
800228ac:	afa40018 	sw	a0,24(sp)
800228b0:	afa4001c 	sw	a0,28(sp)
800228b4:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
800228b8:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
800228bc:	00000000 	nop
800228c0:	1440000a 	bnez	v0,800228ec <_ZN4core3ptr5write17h4fb1223197ffc296E+0x4c>
800228c4:	00000000 	nop
800228c8:	08008a34 	j	800228d0 <_ZN4core3ptr5write17h4fb1223197ffc296E+0x30>
800228cc:	00000000 	nop
        intrinsics::write_via_move(dst, src)
800228d0:	8fa10014 	lw	at,20(sp)
800228d4:	8fa20018 	lw	v0,24(sp)
800228d8:	ac410000 	sw	at,0(v0)
}
800228dc:	8fbf0024 	lw	ra,36(sp)
800228e0:	27bd0028 	addiu	sp,sp,40
800228e4:	03e00008 	jr	ra
800228e8:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800228ec:	8fa40018 	lw	a0,24(sp)
800228f0:	24050004 	li	a1,4
800228f4:	0c008b1e 	jal	80022c78 <_ZN4core3ptr5write18precondition_check17hc8388a301562bd2cE>
800228f8:	00000000 	nop
800228fc:	08008a34 	j	800228d0 <_ZN4core3ptr5write17h4fb1223197ffc296E+0x30>
80022900:	00000000 	nop

80022904 <_ZN4core3ptr5write17h54822575b3446f34E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022904:	27bdffd8 	addiu	sp,sp,-40
80022908:	afbf0024 	sw	ra,36(sp)
8002290c:	afa50014 	sw	a1,20(sp)
80022910:	afa40018 	sw	a0,24(sp)
80022914:	afa4001c 	sw	a0,28(sp)
80022918:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
8002291c:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80022920:	00000000 	nop
80022924:	1440000a 	bnez	v0,80022950 <_ZN4core3ptr5write17h54822575b3446f34E+0x4c>
80022928:	00000000 	nop
8002292c:	08008a4d 	j	80022934 <_ZN4core3ptr5write17h54822575b3446f34E+0x30>
80022930:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022934:	8fa10014 	lw	at,20(sp)
80022938:	8fa20018 	lw	v0,24(sp)
8002293c:	ac410000 	sw	at,0(v0)
}
80022940:	8fbf0024 	lw	ra,36(sp)
80022944:	27bd0028 	addiu	sp,sp,40
80022948:	03e00008 	jr	ra
8002294c:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022950:	8fa40018 	lw	a0,24(sp)
80022954:	24050004 	li	a1,4
80022958:	0c008b1e 	jal	80022c78 <_ZN4core3ptr5write18precondition_check17hc8388a301562bd2cE>
8002295c:	00000000 	nop
80022960:	08008a4d 	j	80022934 <_ZN4core3ptr5write17h54822575b3446f34E+0x30>
80022964:	00000000 	nop

80022968 <_ZN4core3ptr5write17h57dba2268c05fb43E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022968:	27bdffe0 	addiu	sp,sp,-32
8002296c:	afbf001c 	sw	ra,28(sp)
80022970:	afa50010 	sw	a1,16(sp)
80022974:	afa40014 	sw	a0,20(sp)
80022978:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
8002297c:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80022980:	00000000 	nop
80022984:	1440000c 	bnez	v0,800229b8 <_ZN4core3ptr5write17h57dba2268c05fb43E+0x50>
80022988:	00000000 	nop
8002298c:	08008a65 	j	80022994 <_ZN4core3ptr5write17h57dba2268c05fb43E+0x2c>
80022990:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022994:	8fa50010 	lw	a1,16(sp)
80022998:	8fa40014 	lw	a0,20(sp)
8002299c:	24060098 	li	a2,152
800229a0:	0c00d3fd 	jal	80034ff4 <memcpy>
800229a4:	00000000 	nop
}
800229a8:	8fbf001c 	lw	ra,28(sp)
800229ac:	27bd0020 	addiu	sp,sp,32
800229b0:	03e00008 	jr	ra
800229b4:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800229b8:	8fa40014 	lw	a0,20(sp)
800229bc:	24050004 	li	a1,4
800229c0:	0c008b1e 	jal	80022c78 <_ZN4core3ptr5write18precondition_check17hc8388a301562bd2cE>
800229c4:	00000000 	nop
800229c8:	08008a65 	j	80022994 <_ZN4core3ptr5write17h57dba2268c05fb43E+0x2c>
800229cc:	00000000 	nop

800229d0 <_ZN4core3ptr5write17h94493ecafcc1fe8bE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
800229d0:	27bdffd8 	addiu	sp,sp,-40
800229d4:	afbf0024 	sw	ra,36(sp)
800229d8:	afa50014 	sw	a1,20(sp)
800229dc:	afa40018 	sw	a0,24(sp)
800229e0:	afa4001c 	sw	a0,28(sp)
800229e4:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
800229e8:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
800229ec:	00000000 	nop
800229f0:	1440000a 	bnez	v0,80022a1c <_ZN4core3ptr5write17h94493ecafcc1fe8bE+0x4c>
800229f4:	00000000 	nop
800229f8:	08008a80 	j	80022a00 <_ZN4core3ptr5write17h94493ecafcc1fe8bE+0x30>
800229fc:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022a00:	8fa10014 	lw	at,20(sp)
80022a04:	8fa20018 	lw	v0,24(sp)
80022a08:	ac410000 	sw	at,0(v0)
}
80022a0c:	8fbf0024 	lw	ra,36(sp)
80022a10:	27bd0028 	addiu	sp,sp,40
80022a14:	03e00008 	jr	ra
80022a18:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022a1c:	8fa40018 	lw	a0,24(sp)
80022a20:	24050004 	li	a1,4
80022a24:	0c008b1e 	jal	80022c78 <_ZN4core3ptr5write18precondition_check17hc8388a301562bd2cE>
80022a28:	00000000 	nop
80022a2c:	08008a80 	j	80022a00 <_ZN4core3ptr5write17h94493ecafcc1fe8bE+0x30>
80022a30:	00000000 	nop

80022a34 <_ZN4core3ptr5write17h9e2179c4aa64964eE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022a34:	27bdffd8 	addiu	sp,sp,-40
80022a38:	afbf0024 	sw	ra,36(sp)
80022a3c:	afa40014 	sw	a0,20(sp)
80022a40:	00a00825 	move	at,a1
80022a44:	afa10018 	sw	at,24(sp)
80022a48:	afa4001c 	sw	a0,28(sp)
80022a4c:	a7a50022 	sh	a1,34(sp)
        ub_checks::assert_unsafe_precondition!(
80022a50:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80022a54:	00000000 	nop
80022a58:	1440000a 	bnez	v0,80022a84 <_ZN4core3ptr5write17h9e2179c4aa64964eE+0x50>
80022a5c:	00000000 	nop
80022a60:	08008a9a 	j	80022a68 <_ZN4core3ptr5write17h9e2179c4aa64964eE+0x34>
80022a64:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022a68:	8fa10018 	lw	at,24(sp)
80022a6c:	8fa20014 	lw	v0,20(sp)
80022a70:	a4410000 	sh	at,0(v0)
}
80022a74:	8fbf0024 	lw	ra,36(sp)
80022a78:	27bd0028 	addiu	sp,sp,40
80022a7c:	03e00008 	jr	ra
80022a80:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022a84:	8fa40014 	lw	a0,20(sp)
80022a88:	24050002 	li	a1,2
80022a8c:	0c008b1e 	jal	80022c78 <_ZN4core3ptr5write18precondition_check17hc8388a301562bd2cE>
80022a90:	00000000 	nop
80022a94:	08008a9a 	j	80022a68 <_ZN4core3ptr5write17h9e2179c4aa64964eE+0x34>
80022a98:	00000000 	nop

80022a9c <_ZN4core3ptr5write17ha2a2bc1814b9cecbE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022a9c:	27bdffe0 	addiu	sp,sp,-32
80022aa0:	afbf001c 	sw	ra,28(sp)
80022aa4:	afa50010 	sw	a1,16(sp)
80022aa8:	afa40014 	sw	a0,20(sp)
80022aac:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80022ab0:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80022ab4:	00000000 	nop
80022ab8:	1440000f 	bnez	v0,80022af8 <_ZN4core3ptr5write17ha2a2bc1814b9cecbE+0x5c>
80022abc:	00000000 	nop
80022ac0:	08008ab2 	j	80022ac8 <_ZN4core3ptr5write17ha2a2bc1814b9cecbE+0x2c>
80022ac4:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022ac8:	8fa20014 	lw	v0,20(sp)
80022acc:	8fa10010 	lw	at,16(sp)
80022ad0:	8c230008 	lw	v1,8(at)
80022ad4:	ac430008 	sw	v1,8(v0)
80022ad8:	8c230004 	lw	v1,4(at)
80022adc:	ac430004 	sw	v1,4(v0)
80022ae0:	8c210000 	lw	at,0(at)
80022ae4:	ac410000 	sw	at,0(v0)
}
80022ae8:	8fbf001c 	lw	ra,28(sp)
80022aec:	27bd0020 	addiu	sp,sp,32
80022af0:	03e00008 	jr	ra
80022af4:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022af8:	8fa40014 	lw	a0,20(sp)
80022afc:	24050004 	li	a1,4
80022b00:	0c008b1e 	jal	80022c78 <_ZN4core3ptr5write18precondition_check17hc8388a301562bd2cE>
80022b04:	00000000 	nop
80022b08:	08008ab2 	j	80022ac8 <_ZN4core3ptr5write17ha2a2bc1814b9cecbE+0x2c>
80022b0c:	00000000 	nop

80022b10 <_ZN4core3ptr5write17he474ee23ff04a518E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022b10:	27bdffe0 	addiu	sp,sp,-32
80022b14:	afbf001c 	sw	ra,28(sp)
80022b18:	afa50010 	sw	a1,16(sp)
80022b1c:	afa40014 	sw	a0,20(sp)
80022b20:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80022b24:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80022b28:	00000000 	nop
80022b2c:	14400019 	bnez	v0,80022b94 <_ZN4core3ptr5write17he474ee23ff04a518E+0x84>
80022b30:	00000000 	nop
80022b34:	08008acf 	j	80022b3c <_ZN4core3ptr5write17he474ee23ff04a518E+0x2c>
80022b38:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022b3c:	8fa20014 	lw	v0,20(sp)
80022b40:	8fa10010 	lw	at,16(sp)
80022b44:	8c23001c 	lw	v1,28(at)
80022b48:	ac43001c 	sw	v1,28(v0)
80022b4c:	8c230018 	lw	v1,24(at)
80022b50:	ac430018 	sw	v1,24(v0)
80022b54:	8c230014 	lw	v1,20(at)
80022b58:	ac430014 	sw	v1,20(v0)
80022b5c:	8c230010 	lw	v1,16(at)
80022b60:	ac430010 	sw	v1,16(v0)
80022b64:	8c23000c 	lw	v1,12(at)
80022b68:	ac43000c 	sw	v1,12(v0)
80022b6c:	8c230008 	lw	v1,8(at)
80022b70:	ac430008 	sw	v1,8(v0)
80022b74:	8c230004 	lw	v1,4(at)
80022b78:	ac430004 	sw	v1,4(v0)
80022b7c:	8c210000 	lw	at,0(at)
80022b80:	ac410000 	sw	at,0(v0)
}
80022b84:	8fbf001c 	lw	ra,28(sp)
80022b88:	27bd0020 	addiu	sp,sp,32
80022b8c:	03e00008 	jr	ra
80022b90:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022b94:	8fa40014 	lw	a0,20(sp)
80022b98:	24050004 	li	a1,4
80022b9c:	0c008b1e 	jal	80022c78 <_ZN4core3ptr5write18precondition_check17hc8388a301562bd2cE>
80022ba0:	00000000 	nop
80022ba4:	08008acf 	j	80022b3c <_ZN4core3ptr5write17he474ee23ff04a518E+0x2c>
80022ba8:	00000000 	nop

80022bac <_ZN4core3ptr5write17hf0d293e3f7e01836E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022bac:	27bdffd8 	addiu	sp,sp,-40
80022bb0:	afbf0024 	sw	ra,36(sp)
80022bb4:	afa50014 	sw	a1,20(sp)
80022bb8:	afa40018 	sw	a0,24(sp)
80022bbc:	afa4001c 	sw	a0,28(sp)
80022bc0:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80022bc4:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80022bc8:	00000000 	nop
80022bcc:	1440000a 	bnez	v0,80022bf8 <_ZN4core3ptr5write17hf0d293e3f7e01836E+0x4c>
80022bd0:	00000000 	nop
80022bd4:	08008af7 	j	80022bdc <_ZN4core3ptr5write17hf0d293e3f7e01836E+0x30>
80022bd8:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022bdc:	8fa10014 	lw	at,20(sp)
80022be0:	8fa20018 	lw	v0,24(sp)
80022be4:	ac410000 	sw	at,0(v0)
}
80022be8:	8fbf0024 	lw	ra,36(sp)
80022bec:	27bd0028 	addiu	sp,sp,40
80022bf0:	03e00008 	jr	ra
80022bf4:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022bf8:	8fa40018 	lw	a0,24(sp)
80022bfc:	24050004 	li	a1,4
80022c00:	0c008b1e 	jal	80022c78 <_ZN4core3ptr5write18precondition_check17hc8388a301562bd2cE>
80022c04:	00000000 	nop
80022c08:	08008af7 	j	80022bdc <_ZN4core3ptr5write17hf0d293e3f7e01836E+0x30>
80022c0c:	00000000 	nop

80022c10 <_ZN4core3ptr5write17hfe147acf65d13d27E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80022c10:	27bdffe0 	addiu	sp,sp,-32
80022c14:	afbf001c 	sw	ra,28(sp)
80022c18:	afa50010 	sw	a1,16(sp)
80022c1c:	afa40014 	sw	a0,20(sp)
80022c20:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80022c24:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80022c28:	00000000 	nop
80022c2c:	1440000c 	bnez	v0,80022c60 <_ZN4core3ptr5write17hfe147acf65d13d27E+0x50>
80022c30:	00000000 	nop
80022c34:	08008b0f 	j	80022c3c <_ZN4core3ptr5write17hfe147acf65d13d27E+0x2c>
80022c38:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80022c3c:	8fa50010 	lw	a1,16(sp)
80022c40:	8fa40014 	lw	a0,20(sp)
80022c44:	240600dc 	li	a2,220
80022c48:	0c00d3fd 	jal	80034ff4 <memcpy>
80022c4c:	00000000 	nop
}
80022c50:	8fbf001c 	lw	ra,28(sp)
80022c54:	27bd0020 	addiu	sp,sp,32
80022c58:	03e00008 	jr	ra
80022c5c:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80022c60:	8fa40014 	lw	a0,20(sp)
80022c64:	24050004 	li	a1,4
80022c68:	0c008b1e 	jal	80022c78 <_ZN4core3ptr5write18precondition_check17hc8388a301562bd2cE>
80022c6c:	00000000 	nop
80022c70:	08008b0f 	j	80022c3c <_ZN4core3ptr5write17hfe147acf65d13d27E+0x2c>
80022c74:	00000000 	nop

80022c78 <_ZN4core3ptr5write18precondition_check17hc8388a301562bd2cE>:
            const fn precondition_check($($name:$ty),*) {
80022c78:	27bdffe0 	addiu	sp,sp,-32
80022c7c:	afbf001c 	sw	ra,28(sp)
80022c80:	afa40014 	sw	a0,20(sp)
80022c84:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80022c88:	0c00985f 	jal	8002617c <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE>
80022c8c:	00000000 	nop
80022c90:	14400008 	bnez	v0,80022cb4 <_ZN4core3ptr5write18precondition_check17hc8388a301562bd2cE+0x3c>
80022c94:	00000000 	nop
80022c98:	08008b28 	j	80022ca0 <_ZN4core3ptr5write18precondition_check17hc8388a301562bd2cE+0x28>
80022c9c:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80022ca0:	3c018105 	lui	at,0x8105
80022ca4:	2424c5e2 	addiu	a0,at,-14878
80022ca8:	24050066 	li	a1,102
80022cac:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80022cb0:	00000000 	nop
            }
80022cb4:	8fbf001c 	lw	ra,28(sp)
80022cb8:	27bd0020 	addiu	sp,sp,32
80022cbc:	03e00008 	jr	ra
80022cc0:	00000000 	nop

80022cc4 <_ZN4core3ptr63drop_in_place$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$17h7908463921a275f7E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80022cc4:	27bdffe0 	addiu	sp,sp,-32
80022cc8:	afbf001c 	sw	ra,28(sp)
80022ccc:	afa40014 	sw	a0,20(sp)
80022cd0:	afa40018 	sw	a0,24(sp)
80022cd4:	0c00aa37 	jal	8002a8dc <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h583d4c8ae50ae747E>
80022cd8:	00000000 	nop
80022cdc:	8fa40014 	lw	a0,20(sp)
80022ce0:	0c008bd7 	jal	80022f5c <_ZN4core3ptr70drop_in_place$LT$alloc..raw_vec..RawVec$LT$mos_6502..proc..Env$GT$$GT$17h74dd2fc951784d76E>
80022ce4:	00000000 	nop
80022ce8:	8fbf001c 	lw	ra,28(sp)
80022cec:	27bd0020 	addiu	sp,sp,32
80022cf0:	03e00008 	jr	ra
80022cf4:	00000000 	nop

80022cf8 <_ZN4core3ptr64drop_in_place$LT$alloc..vec..Vec$LT$elf..ProgramHeader32$GT$$GT$17ha2f5ee124d3de492E>:
80022cf8:	27bdffe0 	addiu	sp,sp,-32
80022cfc:	afbf001c 	sw	ra,28(sp)
80022d00:	afa40014 	sw	a0,20(sp)
80022d04:	afa40018 	sw	a0,24(sp)
80022d08:	0c00aa28 	jal	8002a8a0 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h2a916fd5bbc2c2d9E>
80022d0c:	00000000 	nop
80022d10:	8fa40014 	lw	a0,20(sp)
80022d14:	0c008be0 	jal	80022f80 <_ZN4core3ptr71drop_in_place$LT$alloc..raw_vec..RawVec$LT$elf..ProgramHeader32$GT$$GT$17h6a6ec49f6e3aeb22E>
80022d18:	00000000 	nop
80022d1c:	8fbf001c 	lw	ra,28(sp)
80022d20:	27bd0020 	addiu	sp,sp,32
80022d24:	03e00008 	jr	ra
80022d28:	00000000 	nop

80022d2c <_ZN4core3ptr68drop_in_place$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$17h871a0fc1d6b69bd1E>:
80022d2c:	27bdffe0 	addiu	sp,sp,-32
80022d30:	afbf001c 	sw	ra,28(sp)
80022d34:	afa40014 	sw	a0,20(sp)
80022d38:	afa40018 	sw	a0,24(sp)
80022d3c:	0c00aa4a 	jal	8002a928 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc1ecc4732b3d1965E>
80022d40:	00000000 	nop
80022d44:	8fa40014 	lw	a0,20(sp)
80022d48:	0c008bfd 	jal	80022ff4 <_ZN4core3ptr75drop_in_place$LT$alloc..raw_vec..RawVec$LT$mos_6502..mm..page..Page$GT$$GT$17h7035aea102ff0911E>
80022d4c:	00000000 	nop
80022d50:	8fbf001c 	lw	ra,28(sp)
80022d54:	27bd0020 	addiu	sp,sp,32
80022d58:	03e00008 	jr	ra
80022d5c:	00000000 	nop

80022d60 <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d64f236e3cdb092E>:
80022d60:	27bdffe8 	addiu	sp,sp,-24
80022d64:	afbf0014 	sw	ra,20(sp)
80022d68:	afa40010 	sw	a0,16(sp)
80022d6c:	24840004 	addiu	a0,a0,4
80022d70:	0c008888 	jal	80022220 <_ZN4core3ptr42drop_in_place$LT$core..cell..BorrowRef$GT$17ha0e943d4a0b8d244E>
80022d74:	00000000 	nop
80022d78:	8fbf0014 	lw	ra,20(sp)
80022d7c:	27bd0018 	addiu	sp,sp,24
80022d80:	03e00008 	jr	ra
80022d84:	00000000 	nop

80022d88 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h1fce356a6ca5d3bbE>:
    pub const fn cast<U>(self) -> Unique<U> {
80022d88:	27bdffe0 	addiu	sp,sp,-32
80022d8c:	afbf001c 	sw	ra,28(sp)
80022d90:	afa40018 	sw	a0,24(sp)
        Unique { pointer: self.pointer.cast(), _marker: PhantomData }
80022d94:	0c008d32 	jal	800234c8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hdd4c5b6486512244E>
80022d98:	00000000 	nop
80022d9c:	afa20014 	sw	v0,20(sp)
    }
80022da0:	8fa20014 	lw	v0,20(sp)
80022da4:	8fbf001c 	lw	ra,28(sp)
80022da8:	27bd0020 	addiu	sp,sp,32
80022dac:	03e00008 	jr	ra
80022db0:	00000000 	nop

80022db4 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h35a531e5b86c77a8E>:
    pub const fn cast<U>(self) -> Unique<U> {
80022db4:	27bdffe0 	addiu	sp,sp,-32
80022db8:	afbf001c 	sw	ra,28(sp)
80022dbc:	afa40018 	sw	a0,24(sp)
        Unique { pointer: self.pointer.cast(), _marker: PhantomData }
80022dc0:	0c008d4c 	jal	80023530 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hfa7f854c02987e34E>
80022dc4:	00000000 	nop
80022dc8:	afa20014 	sw	v0,20(sp)
    }
80022dcc:	8fa20014 	lw	v0,20(sp)
80022dd0:	8fbf001c 	lw	ra,28(sp)
80022dd4:	27bd0020 	addiu	sp,sp,32
80022dd8:	03e00008 	jr	ra
80022ddc:	00000000 	nop

80022de0 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h90757a3db4a88b8fE>:
    pub const fn cast<U>(self) -> Unique<U> {
80022de0:	27bdffe0 	addiu	sp,sp,-32
80022de4:	afbf001c 	sw	ra,28(sp)
80022de8:	afa40018 	sw	a0,24(sp)
        Unique { pointer: self.pointer.cast(), _marker: PhantomData }
80022dec:	0c008d06 	jal	80023418 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h63108a47c12bef08E>
80022df0:	00000000 	nop
80022df4:	afa20014 	sw	v0,20(sp)
    }
80022df8:	8fa20014 	lw	v0,20(sp)
80022dfc:	8fbf001c 	lw	ra,28(sp)
80022e00:	27bd0020 	addiu	sp,sp,32
80022e04:	03e00008 	jr	ra
80022e08:	00000000 	nop

80022e0c <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17ha231a7e5ea593e4fE>:
    pub const fn cast<U>(self) -> Unique<U> {
80022e0c:	27bdffe0 	addiu	sp,sp,-32
80022e10:	afbf001c 	sw	ra,28(sp)
80022e14:	afa40018 	sw	a0,24(sp)
        Unique { pointer: self.pointer.cast(), _marker: PhantomData }
80022e18:	0c008d16 	jal	80023458 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h6db627f7a723db8eE>
80022e1c:	00000000 	nop
80022e20:	afa20014 	sw	v0,20(sp)
    }
80022e24:	8fa20014 	lw	v0,20(sp)
80022e28:	8fbf001c 	lw	ra,28(sp)
80022e2c:	27bd0020 	addiu	sp,sp,32
80022e30:	03e00008 	jr	ra
80022e34:	00000000 	nop

80022e38 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hd217371ff3fca20bE>:
    pub const fn cast<U>(self) -> Unique<U> {
80022e38:	27bdffe0 	addiu	sp,sp,-32
80022e3c:	afbf001c 	sw	ra,28(sp)
80022e40:	afa40018 	sw	a0,24(sp)
        Unique { pointer: self.pointer.cast(), _marker: PhantomData }
80022e44:	0c008d3a 	jal	800234e8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hf84a72f408d64508E>
80022e48:	00000000 	nop
80022e4c:	afa20014 	sw	v0,20(sp)
    }
80022e50:	8fa20014 	lw	v0,20(sp)
80022e54:	8fbf001c 	lw	ra,28(sp)
80022e58:	27bd0020 	addiu	sp,sp,32
80022e5c:	03e00008 	jr	ra
80022e60:	00000000 	nop

80022e64 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hda8456c8eaa83cb6E>:
    pub const fn cast<U>(self) -> Unique<U> {
80022e64:	27bdffe0 	addiu	sp,sp,-32
80022e68:	afbf001c 	sw	ra,28(sp)
80022e6c:	afa40018 	sw	a0,24(sp)
        Unique { pointer: self.pointer.cast(), _marker: PhantomData }
80022e70:	0c008d0e 	jal	80023438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h6bbb98116ae49f5eE>
80022e74:	00000000 	nop
80022e78:	afa20014 	sw	v0,20(sp)
    }
80022e7c:	8fa20014 	lw	v0,20(sp)
80022e80:	8fbf001c 	lw	ra,28(sp)
80022e84:	27bd0020 	addiu	sp,sp,32
80022e88:	03e00008 	jr	ra
80022e8c:	00000000 	nop

80022e90 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h149ee85b337f4835E>:
    pub const fn as_ptr(self) -> *mut T {
80022e90:	27bdfff8 	addiu	sp,sp,-8
80022e94:	00801025 	move	v0,a0
80022e98:	afa20000 	sw	v0,0(sp)
80022e9c:	afa20004 	sw	v0,4(sp)
80022ea0:	27bd0008 	addiu	sp,sp,8
    }
80022ea4:	03e00008 	jr	ra
80022ea8:	00000000 	nop

80022eac <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h2572cc213fe617c2E>:
    pub const fn as_ptr(self) -> *mut T {
80022eac:	27bdfff8 	addiu	sp,sp,-8
80022eb0:	00801025 	move	v0,a0
80022eb4:	afa20000 	sw	v0,0(sp)
80022eb8:	afa20004 	sw	v0,4(sp)
80022ebc:	27bd0008 	addiu	sp,sp,8
    }
80022ec0:	03e00008 	jr	ra
80022ec4:	00000000 	nop

80022ec8 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h7015d2a56fd10b2dE>:
    pub const fn as_ptr(self) -> *mut T {
80022ec8:	27bdfff8 	addiu	sp,sp,-8
80022ecc:	00801025 	move	v0,a0
80022ed0:	afa20000 	sw	v0,0(sp)
80022ed4:	afa20004 	sw	v0,4(sp)
80022ed8:	27bd0008 	addiu	sp,sp,8
    }
80022edc:	03e00008 	jr	ra
80022ee0:	00000000 	nop

80022ee4 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h86d395a73b569234E>:
    pub const fn as_ptr(self) -> *mut T {
80022ee4:	27bdfff8 	addiu	sp,sp,-8
80022ee8:	00801025 	move	v0,a0
80022eec:	afa20000 	sw	v0,0(sp)
80022ef0:	afa20004 	sw	v0,4(sp)
80022ef4:	27bd0008 	addiu	sp,sp,8
    }
80022ef8:	03e00008 	jr	ra
80022efc:	00000000 	nop

80022f00 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h9dda5f1ab39cb168E>:
    pub const fn as_ptr(self) -> *mut T {
80022f00:	27bdfff8 	addiu	sp,sp,-8
80022f04:	00801025 	move	v0,a0
80022f08:	afa20000 	sw	v0,0(sp)
80022f0c:	afa20004 	sw	v0,4(sp)
80022f10:	27bd0008 	addiu	sp,sp,8
    }
80022f14:	03e00008 	jr	ra
80022f18:	00000000 	nop

80022f1c <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hdeab6bfa5b80ed76E>:
    pub const fn as_ptr(self) -> *mut T {
80022f1c:	27bdfff8 	addiu	sp,sp,-8
80022f20:	00801025 	move	v0,a0
80022f24:	afa20000 	sw	v0,0(sp)
80022f28:	afa20004 	sw	v0,4(sp)
80022f2c:	27bd0008 	addiu	sp,sp,8
    }
80022f30:	03e00008 	jr	ra
80022f34:	00000000 	nop

80022f38 <_ZN4core3ptr70drop_in_place$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$17hf6a5f0e40a6f8bcfE>:
80022f38:	27bdffe8 	addiu	sp,sp,-24
80022f3c:	afbf0014 	sw	ra,20(sp)
80022f40:	afa40010 	sw	a0,16(sp)
80022f44:	0c00aaa3 	jal	8002aa8c <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h65242802018127baE>
80022f48:	00000000 	nop
80022f4c:	8fbf0014 	lw	ra,20(sp)
80022f50:	27bd0018 	addiu	sp,sp,24
80022f54:	03e00008 	jr	ra
80022f58:	00000000 	nop

80022f5c <_ZN4core3ptr70drop_in_place$LT$alloc..raw_vec..RawVec$LT$mos_6502..proc..Env$GT$$GT$17h74dd2fc951784d76E>:
80022f5c:	27bdffe8 	addiu	sp,sp,-24
80022f60:	afbf0014 	sw	ra,20(sp)
80022f64:	afa40010 	sw	a0,16(sp)
80022f68:	0c00ac9e 	jal	8002b278 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h82a934d90c5bbe9eE>
80022f6c:	00000000 	nop
80022f70:	8fbf0014 	lw	ra,20(sp)
80022f74:	27bd0018 	addiu	sp,sp,24
80022f78:	03e00008 	jr	ra
80022f7c:	00000000 	nop

80022f80 <_ZN4core3ptr71drop_in_place$LT$alloc..raw_vec..RawVec$LT$elf..ProgramHeader32$GT$$GT$17h6a6ec49f6e3aeb22E>:
80022f80:	27bdffe8 	addiu	sp,sp,-24
80022f84:	afbf0014 	sw	ra,20(sp)
80022f88:	afa40010 	sw	a0,16(sp)
80022f8c:	0c00ac81 	jal	8002b204 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3795f766eb4d33e3E>
80022f90:	00000000 	nop
80022f94:	8fbf0014 	lw	ra,20(sp)
80022f98:	27bd0018 	addiu	sp,sp,24
80022f9c:	03e00008 	jr	ra
80022fa0:	00000000 	nop

80022fa4 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17hae5dae7ed76ef803E>:
80022fa4:	27bdffe8 	addiu	sp,sp,-24
80022fa8:	afbf0014 	sw	ra,20(sp)
80022fac:	afa40010 	sw	a0,16(sp)
80022fb0:	24840004 	addiu	a0,a0,4
80022fb4:	0c008896 	jal	80022258 <_ZN4core3ptr45drop_in_place$LT$core..cell..BorrowRefMut$GT$17hdfc07535b69b4680E>
80022fb8:	00000000 	nop
80022fbc:	8fbf0014 	lw	ra,20(sp)
80022fc0:	27bd0018 	addiu	sp,sp,24
80022fc4:	03e00008 	jr	ra
80022fc8:	00000000 	nop

80022fcc <_ZN4core3ptr72drop_in_place$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$17h6c0ca15fa8cd2e2cE>:
80022fcc:	27bdffe8 	addiu	sp,sp,-24
80022fd0:	afbf0014 	sw	ra,20(sp)
80022fd4:	afa40010 	sw	a0,16(sp)
80022fd8:	24840004 	addiu	a0,a0,4
80022fdc:	0c008c06 	jal	80023018 <_ZN4core3ptr75drop_in_place$LT$core..cell..UnsafeCell$LT$mos_6502..util..ListNode$GT$$GT$17h9e82f0717dd4e3c4E>
80022fe0:	00000000 	nop
80022fe4:	8fbf0014 	lw	ra,20(sp)
80022fe8:	27bd0018 	addiu	sp,sp,24
80022fec:	03e00008 	jr	ra
80022ff0:	00000000 	nop

80022ff4 <_ZN4core3ptr75drop_in_place$LT$alloc..raw_vec..RawVec$LT$mos_6502..mm..page..Page$GT$$GT$17h7035aea102ff0911E>:
80022ff4:	27bdffe8 	addiu	sp,sp,-24
80022ff8:	afbf0014 	sw	ra,20(sp)
80022ffc:	afa40010 	sw	a0,16(sp)
80023000:	0c00acd8 	jal	8002b360 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hfe8fb7d1e318c03fE>
80023004:	00000000 	nop
80023008:	8fbf0014 	lw	ra,20(sp)
8002300c:	27bd0018 	addiu	sp,sp,24
80023010:	03e00008 	jr	ra
80023014:	00000000 	nop

80023018 <_ZN4core3ptr75drop_in_place$LT$core..cell..UnsafeCell$LT$mos_6502..util..ListNode$GT$$GT$17h9e82f0717dd4e3c4E>:
80023018:	27bdffe8 	addiu	sp,sp,-24
8002301c:	afbf0014 	sw	ra,20(sp)
80023020:	afa40010 	sw	a0,16(sp)
80023024:	0c00889f 	jal	8002227c <_ZN4core3ptr45drop_in_place$LT$mos_6502..util..ListNode$GT$17h3fe2271d6788439aE>
80023028:	00000000 	nop
8002302c:	8fbf0014 	lw	ra,20(sp)
80023030:	27bd0018 	addiu	sp,sp,24
80023034:	03e00008 	jr	ra
80023038:	00000000 	nop

8002303c <_ZN4core3ptr75drop_in_place$LT$sync..spin..Spinlock$LT$mos_6502..util..IndexStack$GT$$GT$17ha44ec99ed5d9409eE>:
8002303c:	27bdffe8 	addiu	sp,sp,-24
80023040:	afbf0014 	sw	ra,20(sp)
80023044:	afa40010 	sw	a0,16(sp)
80023048:	0c008c21 	jal	80023084 <_ZN4core3ptr77drop_in_place$LT$core..cell..UnsafeCell$LT$mos_6502..util..IndexStack$GT$$GT$17h9555e75038410b66E>
8002304c:	00000000 	nop
80023050:	8fbf0014 	lw	ra,20(sp)
80023054:	27bd0018 	addiu	sp,sp,24
80023058:	03e00008 	jr	ra
8002305c:	00000000 	nop

80023060 <_ZN4core3ptr76drop_in_place$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$17hbea8936a658e1291E>:
80023060:	27bdffe8 	addiu	sp,sp,-24
80023064:	afbf0014 	sw	ra,20(sp)
80023068:	afa40010 	sw	a0,16(sp)
8002306c:	0c00aa79 	jal	8002a9e4 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0a1c2fef9dbeda5aE>
80023070:	00000000 	nop
80023074:	8fbf0014 	lw	ra,20(sp)
80023078:	27bd0018 	addiu	sp,sp,24
8002307c:	03e00008 	jr	ra
80023080:	00000000 	nop

80023084 <_ZN4core3ptr77drop_in_place$LT$core..cell..UnsafeCell$LT$mos_6502..util..IndexStack$GT$$GT$17h9555e75038410b66E>:
80023084:	27bdffe8 	addiu	sp,sp,-24
80023088:	afbf0014 	sw	ra,20(sp)
8002308c:	afa40010 	sw	a0,16(sp)
80023090:	0c0088ad 	jal	800222b4 <_ZN4core3ptr47drop_in_place$LT$mos_6502..util..IndexStack$GT$17h4cf616d93f45aa7eE>
80023094:	00000000 	nop
80023098:	8fbf0014 	lw	ra,20(sp)
8002309c:	27bd0018 	addiu	sp,sp,24
800230a0:	03e00008 	jr	ra
800230a4:	00000000 	nop

800230a8 <_ZN4core3ptr77drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..print..Stdout$GT$$GT$17h0418d9ed0f393f8dE>:
800230a8:	27bdffe8 	addiu	sp,sp,-24
800230ac:	afbf0014 	sw	ra,20(sp)
800230b0:	afa40010 	sw	a0,16(sp)
800230b4:	0c00ac28 	jal	8002b0a0 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hac47ac83e465d440E>
800230b8:	00000000 	nop
800230bc:	8fbf0014 	lw	ra,20(sp)
800230c0:	27bd0018 	addiu	sp,sp,24
800230c4:	03e00008 	jr	ra
800230c8:	00000000 	nop

800230cc <_ZN4core3ptr80drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..IndexStack$GT$$GT$17h08c93b0e868b9ccbE>:
800230cc:	27bdffe8 	addiu	sp,sp,-24
800230d0:	afbf0014 	sw	ra,20(sp)
800230d4:	afa40010 	sw	a0,16(sp)
800230d8:	0c00ac19 	jal	8002b064 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7ae85152e90520ddE>
800230dc:	00000000 	nop
800230e0:	8fbf0014 	lw	ra,20(sp)
800230e4:	27bd0018 	addiu	sp,sp,24
800230e8:	03e00008 	jr	ra
800230ec:	00000000 	nop

800230f0 <_ZN4core3ptr81drop_in_place$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h6288410965e66a52E>:
800230f0:	27bdffe8 	addiu	sp,sp,-24
800230f4:	afbf0014 	sw	ra,20(sp)
800230f8:	afa40010 	sw	a0,16(sp)
800230fc:	0c008c45 	jal	80023114 <_ZN4core3ptr83drop_in_place$LT$core..cell..UnsafeCell$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h72e0810a043e63f9E>
80023100:	00000000 	nop
80023104:	8fbf0014 	lw	ra,20(sp)
80023108:	27bd0018 	addiu	sp,sp,24
8002310c:	03e00008 	jr	ra
80023110:	00000000 	nop

80023114 <_ZN4core3ptr83drop_in_place$LT$core..cell..UnsafeCell$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h72e0810a043e63f9E>:
80023114:	27bdffe8 	addiu	sp,sp,-24
80023118:	afbf0014 	sw	ra,20(sp)
8002311c:	afa40010 	sw	a0,16(sp)
80023120:	0c0089f4 	jal	800227d0 <_ZN4core3ptr53drop_in_place$LT$mos_6502..util..DoubleLinkedList$GT$17h67d4a9d468f9d458E>
80023124:	00000000 	nop
80023128:	8fbf0014 	lw	ra,20(sp)
8002312c:	27bd0018 	addiu	sp,sp,24
80023130:	03e00008 	jr	ra
80023134:	00000000 	nop

80023138 <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h31092ada86abafaeE>:
80023138:	27bdffe8 	addiu	sp,sp,-24
8002313c:	afbf0014 	sw	ra,20(sp)
80023140:	afa40010 	sw	a0,16(sp)
80023144:	0c00ac72 	jal	8002b1c8 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hfa0945e6c7ea9440E>
80023148:	00000000 	nop
8002314c:	8fbf0014 	lw	ra,20(sp)
80023150:	27bd0018 	addiu	sp,sp,24
80023154:	03e00008 	jr	ra
80023158:	00000000 	nop

8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>:
8002315c:	27bdffe8 	addiu	sp,sp,-24
80023160:	afbf0014 	sw	ra,20(sp)
80023164:	afa40010 	sw	a0,16(sp)
80023168:	0c00ac36 	jal	8002b0d8 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd01723aa21cc6706E>
8002316c:	00000000 	nop
80023170:	8fbf0014 	lw	ra,20(sp)
80023174:	27bd0018 	addiu	sp,sp,24
80023178:	03e00008 	jr	ra
8002317c:	00000000 	nop

80023180 <_ZN4core3ptr8metadata14from_raw_parts17hb59d268136aadc91E>:
///
/// [`slice::from_raw_parts`]: crate::slice::from_raw_parts
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts<T: ?Sized>(
80023180:	27bdffe8 	addiu	sp,sp,-24
80023184:	afa40010 	sw	a0,16(sp)
80023188:	afa50014 	sw	a1,20(sp)
    metadata: <T as Pointee>::Metadata,
) -> *const T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
8002318c:	afa40008 	sw	a0,8(sp)
80023190:	afa5000c 	sw	a1,12(sp)
80023194:	8fa20008 	lw	v0,8(sp)
80023198:	8fa1000c 	lw	at,12(sp)
8002319c:	afa20000 	sw	v0,0(sp)
800231a0:	afa10004 	sw	at,4(sp)
800231a4:	8fa20000 	lw	v0,0(sp)
800231a8:	8fa30004 	lw	v1,4(sp)
800231ac:	27bd0018 	addiu	sp,sp,24
}
800231b0:	03e00008 	jr	ra
800231b4:	00000000 	nop

800231b8 <_ZN4core3ptr8metadata14from_raw_parts17hd978c4c827169d83E>:
pub const fn from_raw_parts<T: ?Sized>(
800231b8:	27bdffe8 	addiu	sp,sp,-24
800231bc:	afa40010 	sw	a0,16(sp)
800231c0:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
800231c4:	afa40008 	sw	a0,8(sp)
800231c8:	afa5000c 	sw	a1,12(sp)
800231cc:	8fa20008 	lw	v0,8(sp)
800231d0:	8fa1000c 	lw	at,12(sp)
800231d4:	afa20000 	sw	v0,0(sp)
800231d8:	afa10004 	sw	at,4(sp)
800231dc:	8fa20000 	lw	v0,0(sp)
800231e0:	8fa30004 	lw	v1,4(sp)
800231e4:	27bd0018 	addiu	sp,sp,24
}
800231e8:	03e00008 	jr	ra
800231ec:	00000000 	nop

800231f0 <_ZN4core3ptr8metadata14from_raw_parts17hf170de74dceb0b26E>:
pub const fn from_raw_parts<T: ?Sized>(
800231f0:	27bdffe8 	addiu	sp,sp,-24
800231f4:	afa40010 	sw	a0,16(sp)
800231f8:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
800231fc:	afa40008 	sw	a0,8(sp)
80023200:	afa5000c 	sw	a1,12(sp)
80023204:	8fa20008 	lw	v0,8(sp)
80023208:	8fa1000c 	lw	at,12(sp)
8002320c:	afa20000 	sw	v0,0(sp)
80023210:	afa10004 	sw	at,4(sp)
80023214:	8fa20000 	lw	v0,0(sp)
80023218:	8fa30004 	lw	v1,4(sp)
8002321c:	27bd0018 	addiu	sp,sp,24
}
80023220:	03e00008 	jr	ra
80023224:	00000000 	nop

80023228 <_ZN4core3ptr8metadata18from_raw_parts_mut17h1c7d0f3fd63c0c2cE>:
///
/// See the documentation of [`from_raw_parts`] for more details.
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts_mut<T: ?Sized>(
80023228:	27bdffe8 	addiu	sp,sp,-24
8002322c:	afa40010 	sw	a0,16(sp)
80023230:	afa50014 	sw	a1,20(sp)
    metadata: <T as Pointee>::Metadata,
) -> *mut T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80023234:	afa40008 	sw	a0,8(sp)
80023238:	afa5000c 	sw	a1,12(sp)
8002323c:	8fa20008 	lw	v0,8(sp)
80023240:	8fa1000c 	lw	at,12(sp)
80023244:	afa20000 	sw	v0,0(sp)
80023248:	afa10004 	sw	at,4(sp)
8002324c:	8fa20000 	lw	v0,0(sp)
80023250:	8fa30004 	lw	v1,4(sp)
80023254:	27bd0018 	addiu	sp,sp,24
}
80023258:	03e00008 	jr	ra
8002325c:	00000000 	nop

80023260 <_ZN4core3ptr8metadata18from_raw_parts_mut17h2107842491d6db94E>:
pub const fn from_raw_parts_mut<T: ?Sized>(
80023260:	27bdffe8 	addiu	sp,sp,-24
80023264:	afa40010 	sw	a0,16(sp)
80023268:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8002326c:	afa40008 	sw	a0,8(sp)
80023270:	afa5000c 	sw	a1,12(sp)
80023274:	8fa20008 	lw	v0,8(sp)
80023278:	8fa1000c 	lw	at,12(sp)
8002327c:	afa20000 	sw	v0,0(sp)
80023280:	afa10004 	sw	at,4(sp)
80023284:	8fa20000 	lw	v0,0(sp)
80023288:	8fa30004 	lw	v1,4(sp)
8002328c:	27bd0018 	addiu	sp,sp,24
}
80023290:	03e00008 	jr	ra
80023294:	00000000 	nop

80023298 <_ZN4core3ptr8metadata18from_raw_parts_mut17h7050e98324e56259E>:
pub const fn from_raw_parts_mut<T: ?Sized>(
80023298:	27bdffe8 	addiu	sp,sp,-24
8002329c:	afa40010 	sw	a0,16(sp)
800232a0:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
800232a4:	afa40008 	sw	a0,8(sp)
800232a8:	afa5000c 	sw	a1,12(sp)
800232ac:	8fa20008 	lw	v0,8(sp)
800232b0:	8fa1000c 	lw	at,12(sp)
800232b4:	afa20000 	sw	v0,0(sp)
800232b8:	afa10004 	sw	at,4(sp)
800232bc:	8fa20000 	lw	v0,0(sp)
800232c0:	8fa30004 	lw	v1,4(sp)
800232c4:	27bd0018 	addiu	sp,sp,24
}
800232c8:	03e00008 	jr	ra
800232cc:	00000000 	nop

800232d0 <_ZN4core3ptr8metadata18from_raw_parts_mut17h9f89f0e9e8d23fa6E>:
pub const fn from_raw_parts_mut<T: ?Sized>(
800232d0:	27bdffe8 	addiu	sp,sp,-24
800232d4:	afa40010 	sw	a0,16(sp)
800232d8:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
800232dc:	afa40008 	sw	a0,8(sp)
800232e0:	afa5000c 	sw	a1,12(sp)
800232e4:	8fa20008 	lw	v0,8(sp)
800232e8:	8fa1000c 	lw	at,12(sp)
800232ec:	afa20000 	sw	v0,0(sp)
800232f0:	afa10004 	sw	at,4(sp)
800232f4:	8fa20000 	lw	v0,0(sp)
800232f8:	8fa30004 	lw	v1,4(sp)
800232fc:	27bd0018 	addiu	sp,sp,24
}
80023300:	03e00008 	jr	ra
80023304:	00000000 	nop

80023308 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he227b1b6c112b2d3E>:
    /// let ptr = unsafe { NonNull::<u32>::new_unchecked(std::ptr::null_mut()) };
    /// ```
    #[stable(feature = "nonnull", since = "1.25.0")]
    #[rustc_const_stable(feature = "const_nonnull_new_unchecked", since = "1.25.0")]
    #[inline]
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
80023308:	27bdffe0 	addiu	sp,sp,-32
8002330c:	afbf001c 	sw	ra,28(sp)
80023310:	afa40010 	sw	a0,16(sp)
80023314:	afa40018 	sw	a0,24(sp)
        // SAFETY: the caller must guarantee that `ptr` is non-null.
        unsafe {
            assert_unsafe_precondition!(
80023318:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
8002331c:	00000000 	nop
80023320:	1440000a 	bnez	v0,8002334c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he227b1b6c112b2d3E+0x44>
80023324:	00000000 	nop
80023328:	08008ccc 	j	80023330 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he227b1b6c112b2d3E+0x28>
8002332c:	00000000 	nop
                check_language_ub,
                "NonNull::new_unchecked requires that the pointer is non-null",
                (ptr: *mut () = ptr as *mut ()) => !ptr.is_null()
            );
            NonNull { pointer: ptr as _ }
80023330:	8fa10010 	lw	at,16(sp)
80023334:	afa10014 	sw	at,20(sp)
        }
    }
80023338:	8fa20014 	lw	v0,20(sp)
8002333c:	8fbf001c 	lw	ra,28(sp)
80023340:	27bd0020 	addiu	sp,sp,32
80023344:	03e00008 	jr	ra
80023348:	00000000 	nop
            assert_unsafe_precondition!(
8002334c:	8fa40010 	lw	a0,16(sp)
80023350:	0c008cd8 	jal	80023360 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17ha025ff33145322f0E>
80023354:	00000000 	nop
80023358:	08008ccc 	j	80023330 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he227b1b6c112b2d3E+0x28>
8002335c:	00000000 	nop

80023360 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17ha025ff33145322f0E>:
            const fn precondition_check($($name:$ty),*) {
80023360:	27bdffe8 	addiu	sp,sp,-24
80023364:	afbf0014 	sw	ra,20(sp)
80023368:	afa40010 	sw	a0,16(sp)
                (ptr: *mut () = ptr as *mut ()) => !ptr.is_null()
8002336c:	0c00dd33 	jal	800374cc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h70d2a8f8e7d9a2d4E>
80023370:	00000000 	nop
80023374:	14400007 	bnez	v0,80023394 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17ha025ff33145322f0E+0x34>
80023378:	00000000 	nop
8002337c:	08008ce1 	j	80023384 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17ha025ff33145322f0E+0x24>
80023380:	00000000 	nop
            }
80023384:	8fbf0014 	lw	ra,20(sp)
80023388:	27bd0018 	addiu	sp,sp,24
8002338c:	03e00008 	jr	ra
80023390:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80023394:	3c018105 	lui	at,0x8105
80023398:	2424c648 	addiu	a0,at,-14776
8002339c:	2405005d 	li	a1,93
800233a0:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800233a4:	00000000 	nop

800233a8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h33dfeb2c81aeecddE>:
    #[stable(feature = "nonnull_cast", since = "1.27.0")]
    #[rustc_const_stable(feature = "const_nonnull_cast", since = "1.36.0")]
    #[must_use = "this returns the result of the operation, \
                  without modifying the original"]
    #[inline]
    pub const fn cast<U>(self) -> NonNull<U> {
800233a8:	27bdffe8 	addiu	sp,sp,-24
800233ac:	afa40008 	sw	a0,8(sp)
800233b0:	afa5000c 	sw	a1,12(sp)
800233b4:	afa40010 	sw	a0,16(sp)
800233b8:	afa50014 	sw	a1,20(sp)
        // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
800233bc:	afa40004 	sw	a0,4(sp)
    }
800233c0:	8fa20004 	lw	v0,4(sp)
800233c4:	27bd0018 	addiu	sp,sp,24
800233c8:	03e00008 	jr	ra
800233cc:	00000000 	nop

800233d0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h42c4d8057a45caf9E>:
    pub const fn cast<U>(self) -> NonNull<U> {
800233d0:	27bdfff0 	addiu	sp,sp,-16
800233d4:	afa40008 	sw	a0,8(sp)
800233d8:	afa4000c 	sw	a0,12(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
800233dc:	afa40004 	sw	a0,4(sp)
    }
800233e0:	8fa20004 	lw	v0,4(sp)
800233e4:	27bd0010 	addiu	sp,sp,16
800233e8:	03e00008 	jr	ra
800233ec:	00000000 	nop

800233f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h52646379d7741329E>:
    pub const fn cast<U>(self) -> NonNull<U> {
800233f0:	27bdffe8 	addiu	sp,sp,-24
800233f4:	afa40008 	sw	a0,8(sp)
800233f8:	afa5000c 	sw	a1,12(sp)
800233fc:	afa40010 	sw	a0,16(sp)
80023400:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80023404:	afa40004 	sw	a0,4(sp)
    }
80023408:	8fa20004 	lw	v0,4(sp)
8002340c:	27bd0018 	addiu	sp,sp,24
80023410:	03e00008 	jr	ra
80023414:	00000000 	nop

80023418 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h63108a47c12bef08E>:
    pub const fn cast<U>(self) -> NonNull<U> {
80023418:	27bdfff0 	addiu	sp,sp,-16
8002341c:	afa40008 	sw	a0,8(sp)
80023420:	afa4000c 	sw	a0,12(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80023424:	afa40004 	sw	a0,4(sp)
    }
80023428:	8fa20004 	lw	v0,4(sp)
8002342c:	27bd0010 	addiu	sp,sp,16
80023430:	03e00008 	jr	ra
80023434:	00000000 	nop

80023438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h6bbb98116ae49f5eE>:
    pub const fn cast<U>(self) -> NonNull<U> {
80023438:	27bdfff0 	addiu	sp,sp,-16
8002343c:	afa40008 	sw	a0,8(sp)
80023440:	afa4000c 	sw	a0,12(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80023444:	afa40004 	sw	a0,4(sp)
    }
80023448:	8fa20004 	lw	v0,4(sp)
8002344c:	27bd0010 	addiu	sp,sp,16
80023450:	03e00008 	jr	ra
80023454:	00000000 	nop

80023458 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h6db627f7a723db8eE>:
    pub const fn cast<U>(self) -> NonNull<U> {
80023458:	27bdfff0 	addiu	sp,sp,-16
8002345c:	afa40008 	sw	a0,8(sp)
80023460:	afa4000c 	sw	a0,12(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80023464:	afa40004 	sw	a0,4(sp)
    }
80023468:	8fa20004 	lw	v0,4(sp)
8002346c:	27bd0010 	addiu	sp,sp,16
80023470:	03e00008 	jr	ra
80023474:	00000000 	nop

80023478 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hbca9ea7de1e2d828E>:
    pub const fn cast<U>(self) -> NonNull<U> {
80023478:	27bdffe8 	addiu	sp,sp,-24
8002347c:	afa40008 	sw	a0,8(sp)
80023480:	afa5000c 	sw	a1,12(sp)
80023484:	afa40010 	sw	a0,16(sp)
80023488:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8002348c:	afa40004 	sw	a0,4(sp)
    }
80023490:	8fa20004 	lw	v0,4(sp)
80023494:	27bd0018 	addiu	sp,sp,24
80023498:	03e00008 	jr	ra
8002349c:	00000000 	nop

800234a0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hdaafdb6287282da8E>:
    pub const fn cast<U>(self) -> NonNull<U> {
800234a0:	27bdffe8 	addiu	sp,sp,-24
800234a4:	afa40008 	sw	a0,8(sp)
800234a8:	afa5000c 	sw	a1,12(sp)
800234ac:	afa40010 	sw	a0,16(sp)
800234b0:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
800234b4:	afa40004 	sw	a0,4(sp)
    }
800234b8:	8fa20004 	lw	v0,4(sp)
800234bc:	27bd0018 	addiu	sp,sp,24
800234c0:	03e00008 	jr	ra
800234c4:	00000000 	nop

800234c8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hdd4c5b6486512244E>:
    pub const fn cast<U>(self) -> NonNull<U> {
800234c8:	27bdfff0 	addiu	sp,sp,-16
800234cc:	afa40008 	sw	a0,8(sp)
800234d0:	afa4000c 	sw	a0,12(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
800234d4:	afa40004 	sw	a0,4(sp)
    }
800234d8:	8fa20004 	lw	v0,4(sp)
800234dc:	27bd0010 	addiu	sp,sp,16
800234e0:	03e00008 	jr	ra
800234e4:	00000000 	nop

800234e8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hf84a72f408d64508E>:
    pub const fn cast<U>(self) -> NonNull<U> {
800234e8:	27bdfff0 	addiu	sp,sp,-16
800234ec:	afa40008 	sw	a0,8(sp)
800234f0:	afa4000c 	sw	a0,12(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
800234f4:	afa40004 	sw	a0,4(sp)
    }
800234f8:	8fa20004 	lw	v0,4(sp)
800234fc:	27bd0010 	addiu	sp,sp,16
80023500:	03e00008 	jr	ra
80023504:	00000000 	nop

80023508 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hfa6ebd554d4cc044E>:
    pub const fn cast<U>(self) -> NonNull<U> {
80023508:	27bdffe8 	addiu	sp,sp,-24
8002350c:	afa40008 	sw	a0,8(sp)
80023510:	afa5000c 	sw	a1,12(sp)
80023514:	afa40010 	sw	a0,16(sp)
80023518:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8002351c:	afa40004 	sw	a0,4(sp)
    }
80023520:	8fa20004 	lw	v0,4(sp)
80023524:	27bd0018 	addiu	sp,sp,24
80023528:	03e00008 	jr	ra
8002352c:	00000000 	nop

80023530 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hfa7f854c02987e34E>:
    pub const fn cast<U>(self) -> NonNull<U> {
80023530:	27bdfff0 	addiu	sp,sp,-16
80023534:	afa40008 	sw	a0,8(sp)
80023538:	afa4000c 	sw	a0,12(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8002353c:	afa40004 	sw	a0,4(sp)
    }
80023540:	8fa20004 	lw	v0,4(sp)
80023544:	27bd0010 	addiu	sp,sp,16
80023548:	03e00008 	jr	ra
8002354c:	00000000 	nop

80023550 <_ZN4core3ptr91drop_in_place$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h42eebb0d058a00c1E>:
80023550:	27bdffe8 	addiu	sp,sp,-24
80023554:	afbf0014 	sw	ra,20(sp)
80023558:	afa40010 	sw	a0,16(sp)
8002355c:	0c008d5d 	jal	80023574 <_ZN4core3ptr93drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h976c4161cbda049bE>
80023560:	00000000 	nop
80023564:	8fbf0014 	lw	ra,20(sp)
80023568:	27bd0018 	addiu	sp,sp,24
8002356c:	03e00008 	jr	ra
80023570:	00000000 	nop

80023574 <_ZN4core3ptr93drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h976c4161cbda049bE>:
80023574:	27bdffe8 	addiu	sp,sp,-24
80023578:	afbf0014 	sw	ra,20(sp)
8002357c:	afa40010 	sw	a0,16(sp)
80023580:	0c008b31 	jal	80022cc4 <_ZN4core3ptr63drop_in_place$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$17h7908463921a275f7E>
80023584:	00000000 	nop
80023588:	8fbf0014 	lw	ra,20(sp)
8002358c:	27bd0018 	addiu	sp,sp,24
80023590:	03e00008 	jr	ra
80023594:	00000000 	nop

80023598 <_ZN4core3ptr96drop_in_place$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h43239437a0ec2517E>:
80023598:	27bdffe8 	addiu	sp,sp,-24
8002359c:	afbf0014 	sw	ra,20(sp)
800235a0:	afa40010 	sw	a0,16(sp)
800235a4:	0c00aa59 	jal	8002a964 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3de24c32ea2e5272E>
800235a8:	00000000 	nop
800235ac:	8fbf0014 	lw	ra,20(sp)
800235b0:	27bd0018 	addiu	sp,sp,24
800235b4:	03e00008 	jr	ra
800235b8:	00000000 	nop

800235bc <_ZN4core3ptr96drop_in_place$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17he8a95683e273ddb5E>:
800235bc:	27bdffe8 	addiu	sp,sp,-24
800235c0:	afbf0014 	sw	ra,20(sp)
800235c4:	afa40010 	sw	a0,16(sp)
800235c8:	0c008d81 	jal	80023604 <_ZN4core3ptr98drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17h61a160343bd3c32dE>
800235cc:	00000000 	nop
800235d0:	8fbf0014 	lw	ra,20(sp)
800235d4:	27bd0018 	addiu	sp,sp,24
800235d8:	03e00008 	jr	ra
800235dc:	00000000 	nop

800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>:
800235e0:	27bdffe8 	addiu	sp,sp,-24
800235e4:	afbf0014 	sw	ra,20(sp)
800235e8:	afa40010 	sw	a0,16(sp)
800235ec:	0c00ac63 	jal	8002b18c <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17he2cc50fe24ba84c5E>
800235f0:	00000000 	nop
800235f4:	8fbf0014 	lw	ra,20(sp)
800235f8:	27bd0018 	addiu	sp,sp,24
800235fc:	03e00008 	jr	ra
80023600:	00000000 	nop

80023604 <_ZN4core3ptr98drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17h61a160343bd3c32dE>:
80023604:	27bdffe8 	addiu	sp,sp,-24
80023608:	afbf0014 	sw	ra,20(sp)
8002360c:	afa40010 	sw	a0,16(sp)
80023610:	0c008b4b 	jal	80022d2c <_ZN4core3ptr68drop_in_place$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$17h871a0fc1d6b69bd1E>
80023614:	00000000 	nop
80023618:	8fbf0014 	lw	ra,20(sp)
8002361c:	27bd0018 	addiu	sp,sp,24
80023620:	03e00008 	jr	ra
80023624:	00000000 	nop

80023628 <_ZN4core3ptr98drop_in_place$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$17h9a1b99208d1f4487E>:
80023628:	27bdffe8 	addiu	sp,sp,-24
8002362c:	afbf0014 	sw	ra,20(sp)
80023630:	afa40010 	sw	a0,16(sp)
80023634:	0c008691 	jal	80021a44 <_ZN4core3ptr100drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$17h42b8f788c5cd303aE>
80023638:	00000000 	nop
8002363c:	8fbf0014 	lw	ra,20(sp)
80023640:	27bd0018 	addiu	sp,sp,24
80023644:	03e00008 	jr	ra
80023648:	00000000 	nop

8002364c <_ZN4core3ptr9alignment9Alignment13new_unchecked17h8a9242fc8a1ea23bE>:
    /// Equivalently, it must be `1 << exp` for some `exp` in `0..usize::BITS`.
    /// It must *not* be zero.
    #[unstable(feature = "ptr_alignment_type", issue = "102070")]
    #[rustc_const_unstable(feature = "ptr_alignment_type", issue = "102070")]
    #[inline]
    pub const unsafe fn new_unchecked(align: usize) -> Self {
8002364c:	27bdffe0 	addiu	sp,sp,-32
80023650:	afbf001c 	sw	ra,28(sp)
80023654:	afa40014 	sw	a0,20(sp)
80023658:	afa40018 	sw	a0,24(sp)
        #[cfg(debug_assertions)]
        assert_unsafe_precondition!(
8002365c:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80023660:	00000000 	nop
80023664:	14400008 	bnez	v0,80023688 <_ZN4core3ptr9alignment9Alignment13new_unchecked17h8a9242fc8a1ea23bE+0x3c>
80023668:	00000000 	nop
8002366c:	08008d9d 	j	80023674 <_ZN4core3ptr9alignment9Alignment13new_unchecked17h8a9242fc8a1ea23bE+0x28>
80023670:	00000000 	nop
        );

        // SAFETY: By precondition, this must be a power of two, and
        // our variants encompass all possible powers of two.
        unsafe { mem::transmute::<usize, Alignment>(align) }
    }
80023674:	8fa20014 	lw	v0,20(sp)
80023678:	8fbf001c 	lw	ra,28(sp)
8002367c:	27bd0020 	addiu	sp,sp,32
80023680:	03e00008 	jr	ra
80023684:	00000000 	nop
        assert_unsafe_precondition!(
80023688:	8fa40014 	lw	a0,20(sp)
8002368c:	0c008da7 	jal	8002369c <_ZN4core3ptr9alignment9Alignment13new_unchecked18precondition_check17haf1202a7da1004caE>
80023690:	00000000 	nop
80023694:	08008d9d 	j	80023674 <_ZN4core3ptr9alignment9Alignment13new_unchecked17h8a9242fc8a1ea23bE+0x28>
80023698:	00000000 	nop

8002369c <_ZN4core3ptr9alignment9Alignment13new_unchecked18precondition_check17haf1202a7da1004caE>:
            const fn precondition_check($($name:$ty),*) {
8002369c:	27bdffe0 	addiu	sp,sp,-32
800236a0:	afa40010 	sw	a0,16(sp)
800236a4:	afa40014 	sw	a0,20(sp)
800236a8:	afa40018 	sw	a0,24(sp)
            intrinsics::ctpop(self as $ActualT) as u32
800236ac:	00040842 	srl	at,a0,0x1
800236b0:	3c025555 	lui	v0,0x5555
800236b4:	34425555 	ori	v0,v0,0x5555
800236b8:	00220824 	and	at,at,v0
800236bc:	00811023 	subu	v0,a0,at
800236c0:	3c013333 	lui	at,0x3333
800236c4:	34233333 	ori	v1,at,0x3333
800236c8:	00430824 	and	at,v0,v1
800236cc:	00021082 	srl	v0,v0,0x2
800236d0:	00431024 	and	v0,v0,v1
800236d4:	00220821 	addu	at,at,v0
800236d8:	00011102 	srl	v0,at,0x4
800236dc:	00220821 	addu	at,at,v0
800236e0:	3c020f0f 	lui	v0,0xf0f
800236e4:	34420f0f 	ori	v0,v0,0xf0f
800236e8:	00220824 	and	at,at,v0
800236ec:	00011200 	sll	v0,at,0x8
800236f0:	00411821 	addu	v1,v0,at
800236f4:	00011400 	sll	v0,at,0x10
800236f8:	00431021 	addu	v0,v0,v1
800236fc:	00010e00 	sll	at,at,0x18
80023700:	00220821 	addu	at,at,v0
80023704:	00010e02 	srl	at,at,0x18
80023708:	afa1001c 	sw	at,28(sp)
8002370c:	8fa1001c 	lw	at,28(sp)
80023710:	24020001 	li	v0,1
            (align: usize = align) => align.is_power_of_two()
80023714:	10220008 	beq	at,v0,80023738 <_ZN4core3ptr9alignment9Alignment13new_unchecked18precondition_check17haf1202a7da1004caE+0x9c>
80023718:	00000000 	nop
8002371c:	08008dc9 	j	80023724 <_ZN4core3ptr9alignment9Alignment13new_unchecked18precondition_check17haf1202a7da1004caE+0x88>
80023720:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80023724:	3c018105 	lui	at,0x8105
80023728:	2424c6a5 	addiu	a0,at,-14683
8002372c:	24050051 	li	a1,81
80023730:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80023734:	00000000 	nop
80023738:	27bd0020 	addiu	sp,sp,32
            }
8002373c:	03e00008 	jr	ra
80023740:	00000000 	nop

80023744 <_ZN4core3ptr9alignment9Alignment2of17h4e3214a32581e425E>:
    pub const fn of<T>() -> Self {
80023744:	27bdffe8 	addiu	sp,sp,-24
80023748:	afbf0014 	sw	ra,20(sp)
8002374c:	24040004 	li	a0,4
        unsafe { Alignment::new_unchecked(mem::align_of::<T>()) }
80023750:	0c008d93 	jal	8002364c <_ZN4core3ptr9alignment9Alignment13new_unchecked17h8a9242fc8a1ea23bE>
80023754:	00000000 	nop
    }
80023758:	8fbf0014 	lw	ra,20(sp)
8002375c:	27bd0018 	addiu	sp,sp,24
80023760:	03e00008 	jr	ra
80023764:	00000000 	nop

80023768 <_ZN4core3ptr9alignment9Alignment2of17ha540bb446aa53010E>:
    pub const fn of<T>() -> Self {
80023768:	27bdffe8 	addiu	sp,sp,-24
8002376c:	afbf0014 	sw	ra,20(sp)
80023770:	24040004 	li	a0,4
        unsafe { Alignment::new_unchecked(mem::align_of::<T>()) }
80023774:	0c008d93 	jal	8002364c <_ZN4core3ptr9alignment9Alignment13new_unchecked17h8a9242fc8a1ea23bE>
80023778:	00000000 	nop
    }
8002377c:	8fbf0014 	lw	ra,20(sp)
80023780:	27bd0018 	addiu	sp,sp,24
80023784:	03e00008 	jr	ra
80023788:	00000000 	nop

8002378c <_ZN4core3ptr9alignment9Alignment2of17hd184d9b73f3da3e0E>:
    pub const fn of<T>() -> Self {
8002378c:	27bdffe8 	addiu	sp,sp,-24
80023790:	afbf0014 	sw	ra,20(sp)
80023794:	24040004 	li	a0,4
        unsafe { Alignment::new_unchecked(mem::align_of::<T>()) }
80023798:	0c008d93 	jal	8002364c <_ZN4core3ptr9alignment9Alignment13new_unchecked17h8a9242fc8a1ea23bE>
8002379c:	00000000 	nop
    }
800237a0:	8fbf0014 	lw	ra,20(sp)
800237a4:	27bd0018 	addiu	sp,sp,24
800237a8:	03e00008 	jr	ra
800237ac:	00000000 	nop

800237b0 <_ZN4core3ptr9alignment9Alignment2of17hd9a420f531935417E>:
    pub const fn of<T>() -> Self {
800237b0:	27bdffe8 	addiu	sp,sp,-24
800237b4:	afbf0014 	sw	ra,20(sp)
800237b8:	24040004 	li	a0,4
        unsafe { Alignment::new_unchecked(mem::align_of::<T>()) }
800237bc:	0c008d93 	jal	8002364c <_ZN4core3ptr9alignment9Alignment13new_unchecked17h8a9242fc8a1ea23bE>
800237c0:	00000000 	nop
    }
800237c4:	8fbf0014 	lw	ra,20(sp)
800237c8:	27bd0018 	addiu	sp,sp,24
800237cc:	03e00008 	jr	ra
800237d0:	00000000 	nop

800237d4 <_ZN4core3ptr9alignment9Alignment8as_usize17hf7cabfadb2806268E>:

    /// Returns the alignment as a [`usize`].
    #[unstable(feature = "ptr_alignment_type", issue = "102070")]
    #[rustc_const_unstable(feature = "ptr_alignment_type", issue = "102070")]
    #[inline]
    pub const fn as_usize(self) -> usize {
800237d4:	27bdfff8 	addiu	sp,sp,-8
800237d8:	afa40004 	sw	a0,4(sp)
        self.0 as usize
800237dc:	afa40000 	sw	a0,0(sp)
800237e0:	8fa20000 	lw	v0,0(sp)
800237e4:	27bd0008 	addiu	sp,sp,8
    }
800237e8:	03e00008 	jr	ra
800237ec:	00000000 	nop

800237f0 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h769d45457e4c33b8E>:
    ///
    /// assert_eq!(None, chars.next());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn chars(&self) -> Chars<'_> {
800237f0:	27bdffd0 	addiu	sp,sp,-48
800237f4:	afbf002c 	sw	ra,44(sp)
800237f8:	afa4001c 	sw	a0,28(sp)
800237fc:	afa50020 	sw	a1,32(sp)
80023800:	afa40024 	sw	a0,36(sp)
80023804:	afa50028 	sw	a1,40(sp)
        Chars { iter: self.as_bytes().iter() }
80023808:	0c010948 	jal	80042520 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9fbf31f27946410E>
8002380c:	00000000 	nop
80023810:	afa20014 	sw	v0,20(sp)
80023814:	afa30018 	sw	v1,24(sp)
    }
80023818:	8fa20014 	lw	v0,20(sp)
8002381c:	8fa30018 	lw	v1,24(sp)
80023820:	8fbf002c 	lw	ra,44(sp)
80023824:	27bd0030 	addiu	sp,sp,48
80023828:	03e00008 	jr	ra
8002382c:	00000000 	nop

80023830 <_ZN4core3str8converts23from_utf8_unchecked_mut17h5e80aafc6c064612E>:
#[inline]
#[must_use]
#[stable(feature = "str_mut_extras", since = "1.20.0")]
#[rustc_const_unstable(feature = "const_str_from_utf8_unchecked_mut", issue = "91005")]
#[rustc_diagnostic_item = "str_from_utf8_unchecked_mut"]
pub const unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {
80023830:	27bdfff8 	addiu	sp,sp,-8
80023834:	00a01825 	move	v1,a1
80023838:	00801025 	move	v0,a0
8002383c:	afa20000 	sw	v0,0(sp)
80023840:	afa30004 	sw	v1,4(sp)
80023844:	27bd0008 	addiu	sp,sp,8
    // SAFETY: the caller must guarantee that the bytes `v`
    // are valid UTF-8, thus the cast to `*mut str` is safe.
    // Also, the pointer dereference is safe because that pointer
    // comes from a reference which is guaranteed to be valid for writes.
    unsafe { &mut *(v as *mut [u8] as *mut str) }
}
80023848:	03e00008 	jr	ra
8002384c:	00000000 	nop

80023850 <_ZN4core4cell12BorrowRefMut3new17h91c47d38e3f25840E>:
    }
}

impl<'b> BorrowRefMut<'b> {
    #[inline]
    fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
80023850:	27bdffd8 	addiu	sp,sp,-40
80023854:	afbf0024 	sw	ra,36(sp)
80023858:	afa40014 	sw	a0,20(sp)
8002385c:	afa40020 	sw	a0,32(sp)
        // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
        // mutable reference, and so there must currently be no existing
        // references. Thus, while clone increments the mutable refcount, here
        // we explicitly only allow going from UNUSED to UNUSED - 1.
        match borrow.get() {
80023860:	0c008e3b 	jal	800238ec <_ZN4core4cell13Cell$LT$T$GT$3get17hc3f8dbd3e71759e3E>
80023864:	00000000 	nop
80023868:	1440000a 	bnez	v0,80023894 <_ZN4core4cell12BorrowRefMut3new17h91c47d38e3f25840E+0x44>
8002386c:	00000000 	nop
80023870:	08008e1e 	j	80023878 <_ZN4core4cell12BorrowRefMut3new17h91c47d38e3f25840E+0x28>
80023874:	00000000 	nop
80023878:	2401ffff 	li	at,-1
8002387c:	afa10010 	sw	at,16(sp)
80023880:	24010000 	li	at,0
            UNUSED => {
                borrow.set(UNUSED - 1);
80023884:	14000010 	bnez	zero,800238c8 <_ZN4core4cell12BorrowRefMut3new17h91c47d38e3f25840E+0x78>
80023888:	00000000 	nop
8002388c:	08008e28 	j	800238a0 <_ZN4core4cell12BorrowRefMut3new17h91c47d38e3f25840E+0x50>
80023890:	00000000 	nop
                Some(BorrowRefMut { borrow })
            }
            _ => None,
80023894:	afa00018 	sw	zero,24(sp)
80023898:	08008e36 	j	800238d8 <_ZN4core4cell12BorrowRefMut3new17h91c47d38e3f25840E+0x88>
8002389c:	00000000 	nop
                borrow.set(UNUSED - 1);
800238a0:	8fa40014 	lw	a0,20(sp)
800238a4:	8fa50010 	lw	a1,16(sp)
800238a8:	0c008e4c 	jal	80023930 <_ZN4core4cell13Cell$LT$T$GT$3set17h64fa53eeb6bc3f51E>
800238ac:	00000000 	nop
800238b0:	8fa10014 	lw	at,20(sp)
                Some(BorrowRefMut { borrow })
800238b4:	afa1001c 	sw	at,28(sp)
800238b8:	8fa1001c 	lw	at,28(sp)
800238bc:	afa10018 	sw	at,24(sp)
800238c0:	08008e36 	j	800238d8 <_ZN4core4cell12BorrowRefMut3new17h91c47d38e3f25840E+0x88>
800238c4:	00000000 	nop
                borrow.set(UNUSED - 1);
800238c8:	3c018105 	lui	at,0x8105
800238cc:	2424c760 	addiu	a0,at,-14496
800238d0:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800238d4:	00000000 	nop
        }
    }
800238d8:	8fa20018 	lw	v0,24(sp)
800238dc:	8fbf0024 	lw	ra,36(sp)
800238e0:	27bd0028 	addiu	sp,sp,40
800238e4:	03e00008 	jr	ra
800238e8:	00000000 	nop

800238ec <_ZN4core4cell13Cell$LT$T$GT$3get17hc3f8dbd3e71759e3E>:
    pub fn get(&self) -> T {
800238ec:	27bdfff8 	addiu	sp,sp,-8
800238f0:	afa40000 	sw	a0,0(sp)
800238f4:	afa40004 	sw	a0,4(sp)
        unsafe { *self.value.get() }
800238f8:	8c820000 	lw	v0,0(a0)
800238fc:	27bd0008 	addiu	sp,sp,8
    }
80023900:	03e00008 	jr	ra
80023904:	00000000 	nop

80023908 <_ZN4core4cell13Cell$LT$T$GT$3new17hf1f889fa8d9fdf85E>:
    pub const fn new(value: T) -> Cell<T> {
80023908:	27bdfff0 	addiu	sp,sp,-16
8002390c:	afa40004 	sw	a0,4(sp)
80023910:	afa4000c 	sw	a0,12(sp)
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "const_unsafe_cell_new", since = "1.32.0")]
    #[inline(always)]
    pub const fn new(value: T) -> UnsafeCell<T> {
        UnsafeCell { value }
80023914:	afa40008 	sw	a0,8(sp)
    }
80023918:	8fa10008 	lw	at,8(sp)
        Cell { value: UnsafeCell::new(value) }
8002391c:	afa10000 	sw	at,0(sp)
    }
80023920:	8fa20000 	lw	v0,0(sp)
80023924:	27bd0010 	addiu	sp,sp,16
80023928:	03e00008 	jr	ra
8002392c:	00000000 	nop

80023930 <_ZN4core4cell13Cell$LT$T$GT$3set17h64fa53eeb6bc3f51E>:
    pub fn set(&self, val: T) {
80023930:	27bdffe0 	addiu	sp,sp,-32
80023934:	afbf001c 	sw	ra,28(sp)
80023938:	afa40014 	sw	a0,20(sp)
8002393c:	afa50018 	sw	a1,24(sp)
        self.replace(val);
80023940:	0c008e56 	jal	80023958 <_ZN4core4cell13Cell$LT$T$GT$7replace17hf658de83df7e44c3E>
80023944:	00000000 	nop
    }
80023948:	8fbf001c 	lw	ra,28(sp)
8002394c:	27bd0020 	addiu	sp,sp,32
80023950:	03e00008 	jr	ra
80023954:	00000000 	nop

80023958 <_ZN4core4cell13Cell$LT$T$GT$7replace17hf658de83df7e44c3E>:
    pub fn replace(&self, val: T) -> T {
80023958:	27bdffe0 	addiu	sp,sp,-32
8002395c:	afbf001c 	sw	ra,28(sp)
80023960:	afa40010 	sw	a0,16(sp)
80023964:	afa50014 	sw	a1,20(sp)
80023968:	afa40018 	sw	a0,24(sp)
        mem::replace(unsafe { &mut *self.value.get() }, val)
8002396c:	0c008471 	jal	800211c4 <_ZN4core3mem7replace17h268a053a65ac5a35E>
80023970:	00000000 	nop
    }
80023974:	8fbf001c 	lw	ra,28(sp)
80023978:	27bd0020 	addiu	sp,sp,32
8002397c:	03e00008 	jr	ra
80023980:	00000000 	nop

80023984 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17hb595252ccca38d48E>:
    pub fn borrow_mut(&self) -> RefMut<'_, T> {
80023984:	27bdffd0 	addiu	sp,sp,-48
80023988:	afbf002c 	sw	ra,44(sp)
8002398c:	afa50010 	sw	a1,16(sp)
            Err(err) => panic_already_borrowed(err),
80023990:	afa40020 	sw	a0,32(sp)
        match self.try_borrow_mut() {
80023994:	0c008ea0 	jal	80023a80 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17h7e068e1e87aed06cE>
80023998:	00000000 	nop
8002399c:	afa20018 	sw	v0,24(sp)
800239a0:	afa3001c 	sw	v1,28(sp)
800239a4:	8fa10018 	lw	at,24(sp)
800239a8:	1020000b 	beqz	at,800239d8 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17hb595252ccca38d48E+0x54>
800239ac:	00000000 	nop
800239b0:	08008e6e 	j	800239b8 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17hb595252ccca38d48E+0x34>
800239b4:	00000000 	nop
            Ok(b) => b,
800239b8:	8fa20018 	lw	v0,24(sp)
800239bc:	8fa3001c 	lw	v1,28(sp)
800239c0:	afa20024 	sw	v0,36(sp)
800239c4:	afa30028 	sw	v1,40(sp)
    }
800239c8:	8fbf002c 	lw	ra,44(sp)
800239cc:	27bd0030 	addiu	sp,sp,48
800239d0:	03e00008 	jr	ra
800239d4:	00000000 	nop
            Err(err) => panic_already_borrowed(err),
800239d8:	8fa40010 	lw	a0,16(sp)
800239dc:	0c00eb30 	jal	8003acc0 <_ZN4core4cell22panic_already_borrowed17h5cddcb2dc4be68f9E>
800239e0:	00000000 	nop

800239e4 <_ZN4core4cell16RefCell$LT$T$GT$10try_borrow17h98f072ace4b95955E>:
    pub fn try_borrow(&self) -> Result<Ref<'_, T>, BorrowError> {
800239e4:	27bdffc0 	addiu	sp,sp,-64
800239e8:	afbf003c 	sw	ra,60(sp)
800239ec:	afa40014 	sw	a0,20(sp)
800239f0:	afa4002c 	sw	a0,44(sp)
        match BorrowRef::new(&self.borrow) {
800239f4:	0c008efa 	jal	80023be8 <_ZN4core4cell9BorrowRef3new17h8559d8c2e226af21E>
800239f8:	00000000 	nop
800239fc:	afa20020 	sw	v0,32(sp)
80023a00:	8fa10020 	lw	at,32(sp)
80023a04:	14200006 	bnez	at,80023a20 <_ZN4core4cell16RefCell$LT$T$GT$10try_borrow17h98f072ace4b95955E+0x3c>
80023a08:	00000000 	nop
80023a0c:	08008e85 	j	80023a14 <_ZN4core4cell16RefCell$LT$T$GT$10try_borrow17h98f072ace4b95955E+0x30>
80023a10:	00000000 	nop
            None => Err(BorrowError {
80023a14:	afa00018 	sw	zero,24(sp)
            }),
80023a18:	08008e9a 	j	80023a68 <_ZN4core4cell16RefCell$LT$T$GT$10try_borrow17h98f072ace4b95955E+0x84>
80023a1c:	00000000 	nop
            Some(b) => {
80023a20:	8fa10014 	lw	at,20(sp)
80023a24:	8fa20020 	lw	v0,32(sp)
80023a28:	afa20010 	sw	v0,16(sp)
80023a2c:	afa20030 	sw	v0,48(sp)
                let value = unsafe { NonNull::new_unchecked(self.value.get()) };
80023a30:	24240004 	addiu	a0,at,4
80023a34:	afa40038 	sw	a0,56(sp)
80023a38:	0c008cc2 	jal	80023308 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he227b1b6c112b2d3E>
80023a3c:	00000000 	nop
80023a40:	8fa10010 	lw	at,16(sp)
80023a44:	afa20034 	sw	v0,52(sp)
                Ok(Ref { value, borrow: b })
80023a48:	afa20024 	sw	v0,36(sp)
80023a4c:	afa10028 	sw	at,40(sp)
80023a50:	8fa20024 	lw	v0,36(sp)
80023a54:	8fa10028 	lw	at,40(sp)
80023a58:	afa20018 	sw	v0,24(sp)
80023a5c:	afa1001c 	sw	at,28(sp)
    }
80023a60:	08008e9a 	j	80023a68 <_ZN4core4cell16RefCell$LT$T$GT$10try_borrow17h98f072ace4b95955E+0x84>
80023a64:	00000000 	nop
80023a68:	8fa20018 	lw	v0,24(sp)
80023a6c:	8fa3001c 	lw	v1,28(sp)
80023a70:	8fbf003c 	lw	ra,60(sp)
80023a74:	27bd0040 	addiu	sp,sp,64
80023a78:	03e00008 	jr	ra
80023a7c:	00000000 	nop

80023a80 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17h7e068e1e87aed06cE>:
    pub fn try_borrow_mut(&self) -> Result<RefMut<'_, T>, BorrowMutError> {
80023a80:	27bdffc0 	addiu	sp,sp,-64
80023a84:	afbf003c 	sw	ra,60(sp)
80023a88:	afa40014 	sw	a0,20(sp)
80023a8c:	afa4002c 	sw	a0,44(sp)
        match BorrowRefMut::new(&self.borrow) {
80023a90:	0c008e14 	jal	80023850 <_ZN4core4cell12BorrowRefMut3new17h91c47d38e3f25840E>
80023a94:	00000000 	nop
80023a98:	afa20020 	sw	v0,32(sp)
80023a9c:	8fa10020 	lw	at,32(sp)
80023aa0:	14200006 	bnez	at,80023abc <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17h7e068e1e87aed06cE+0x3c>
80023aa4:	00000000 	nop
80023aa8:	08008eac 	j	80023ab0 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17h7e068e1e87aed06cE+0x30>
80023aac:	00000000 	nop
            None => Err(BorrowMutError {
80023ab0:	afa00018 	sw	zero,24(sp)
            }),
80023ab4:	08008ec1 	j	80023b04 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17h7e068e1e87aed06cE+0x84>
80023ab8:	00000000 	nop
            Some(b) => {
80023abc:	8fa10014 	lw	at,20(sp)
80023ac0:	8fa20020 	lw	v0,32(sp)
80023ac4:	afa20010 	sw	v0,16(sp)
80023ac8:	afa20030 	sw	v0,48(sp)
                let value = unsafe { NonNull::new_unchecked(self.value.get()) };
80023acc:	24240004 	addiu	a0,at,4
80023ad0:	afa40038 	sw	a0,56(sp)
80023ad4:	0c008cc2 	jal	80023308 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he227b1b6c112b2d3E>
80023ad8:	00000000 	nop
80023adc:	8fa10010 	lw	at,16(sp)
80023ae0:	afa20034 	sw	v0,52(sp)
                Ok(RefMut { value, borrow: b, marker: PhantomData })
80023ae4:	afa20024 	sw	v0,36(sp)
80023ae8:	afa10028 	sw	at,40(sp)
80023aec:	8fa20024 	lw	v0,36(sp)
80023af0:	8fa10028 	lw	at,40(sp)
80023af4:	afa20018 	sw	v0,24(sp)
80023af8:	afa1001c 	sw	at,28(sp)
    }
80023afc:	08008ec1 	j	80023b04 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17h7e068e1e87aed06cE+0x84>
80023b00:	00000000 	nop
80023b04:	8fa20018 	lw	v0,24(sp)
80023b08:	8fa3001c 	lw	v1,28(sp)
80023b0c:	8fbf003c 	lw	ra,60(sp)
80023b10:	27bd0040 	addiu	sp,sp,64
80023b14:	03e00008 	jr	ra
80023b18:	00000000 	nop

80023b1c <_ZN4core4cell16RefCell$LT$T$GT$3new17hd6edfb8316fb4caaE>:
    pub const fn new(value: T) -> RefCell<T> {
80023b1c:	27bdffd8 	addiu	sp,sp,-40
80023b20:	afbf0024 	sw	ra,36(sp)
80023b24:	afa40010 	sw	a0,16(sp)
80023b28:	afa40014 	sw	a0,20(sp)
        UnsafeCell { value }
80023b2c:	8ca10008 	lw	at,8(a1)
80023b30:	afa10020 	sw	at,32(sp)
80023b34:	8ca10004 	lw	at,4(a1)
80023b38:	afa1001c 	sw	at,28(sp)
80023b3c:	8ca10000 	lw	at,0(a1)
80023b40:	afa10018 	sw	at,24(sp)
80023b44:	24040000 	li	a0,0
            borrow: Cell::new(UNUSED),
80023b48:	0c008e42 	jal	80023908 <_ZN4core4cell13Cell$LT$T$GT$3new17hf1f889fa8d9fdf85E>
80023b4c:	00000000 	nop
80023b50:	8fa40010 	lw	a0,16(sp)
80023b54:	00400825 	move	at,v0
        RefCell {
80023b58:	8fa20014 	lw	v0,20(sp)
80023b5c:	ac810000 	sw	at,0(a0)
80023b60:	8fa10020 	lw	at,32(sp)
80023b64:	ac81000c 	sw	at,12(a0)
80023b68:	8fa1001c 	lw	at,28(sp)
80023b6c:	ac810008 	sw	at,8(a0)
80023b70:	8fa10018 	lw	at,24(sp)
80023b74:	ac810004 	sw	at,4(a0)
    }
80023b78:	8fbf0024 	lw	ra,36(sp)
80023b7c:	27bd0028 	addiu	sp,sp,40
80023b80:	03e00008 	jr	ra
80023b84:	00000000 	nop

80023b88 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h0651cb519b6f324eE>:
    pub fn borrow(&self) -> Ref<'_, T> {
80023b88:	27bdffd0 	addiu	sp,sp,-48
80023b8c:	afbf002c 	sw	ra,44(sp)
80023b90:	afa50010 	sw	a1,16(sp)
            Err(err) => panic_already_mutably_borrowed(err),
80023b94:	afa40020 	sw	a0,32(sp)
        match self.try_borrow() {
80023b98:	0c008e79 	jal	800239e4 <_ZN4core4cell16RefCell$LT$T$GT$10try_borrow17h98f072ace4b95955E>
80023b9c:	00000000 	nop
80023ba0:	afa20018 	sw	v0,24(sp)
80023ba4:	afa3001c 	sw	v1,28(sp)
80023ba8:	8fa10018 	lw	at,24(sp)
80023bac:	1020000b 	beqz	at,80023bdc <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h0651cb519b6f324eE+0x54>
80023bb0:	00000000 	nop
80023bb4:	08008eef 	j	80023bbc <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h0651cb519b6f324eE+0x34>
80023bb8:	00000000 	nop
            Ok(b) => b,
80023bbc:	8fa20018 	lw	v0,24(sp)
80023bc0:	8fa3001c 	lw	v1,28(sp)
80023bc4:	afa20024 	sw	v0,36(sp)
80023bc8:	afa30028 	sw	v1,40(sp)
    }
80023bcc:	8fbf002c 	lw	ra,44(sp)
80023bd0:	27bd0030 	addiu	sp,sp,48
80023bd4:	03e00008 	jr	ra
80023bd8:	00000000 	nop
            Err(err) => panic_already_mutably_borrowed(err),
80023bdc:	8fa40010 	lw	a0,16(sp)
80023be0:	0c00eb4d 	jal	8003ad34 <_ZN4core4cell30panic_already_mutably_borrowed17h7c6bf9e42b40f6e0E>
80023be4:	00000000 	nop

80023be8 <_ZN4core4cell9BorrowRef3new17h8559d8c2e226af21E>:
    fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
80023be8:	27bdffc8 	addiu	sp,sp,-56
80023bec:	afbf0034 	sw	ra,52(sp)
80023bf0:	afa40010 	sw	a0,16(sp)
80023bf4:	afa40020 	sw	a0,32(sp)
        let b = borrow.get().wrapping_add(1);
80023bf8:	0c008e3b 	jal	800238ec <_ZN4core4cell13Cell$LT$T$GT$3get17hc3f8dbd3e71759e3E>
80023bfc:	00000000 	nop
80023c00:	afa20028 	sw	v0,40(sp)
80023c04:	24010001 	li	at,1
80023c08:	afa1002c 	sw	at,44(sp)
            intrinsics::wrapping_add(self, rhs)
80023c0c:	24410001 	addiu	at,v0,1
80023c10:	afa10014 	sw	at,20(sp)
80023c14:	afa10024 	sw	at,36(sp)
80023c18:	afa10030 	sw	at,48(sp)
        if !is_reading(b) {
80023c1c:	1c200006 	bgtz	at,80023c38 <_ZN4core4cell9BorrowRef3new17h8559d8c2e226af21E+0x50>
80023c20:	00000000 	nop
80023c24:	08008f0b 	j	80023c2c <_ZN4core4cell9BorrowRef3new17h8559d8c2e226af21E+0x44>
80023c28:	00000000 	nop
            None
80023c2c:	afa00018 	sw	zero,24(sp)
        if !is_reading(b) {
80023c30:	08008f18 	j	80023c60 <_ZN4core4cell9BorrowRef3new17h8559d8c2e226af21E+0x78>
80023c34:	00000000 	nop
            borrow.set(b);
80023c38:	8fa40010 	lw	a0,16(sp)
80023c3c:	8fa50014 	lw	a1,20(sp)
80023c40:	0c008e4c 	jal	80023930 <_ZN4core4cell13Cell$LT$T$GT$3set17h64fa53eeb6bc3f51E>
80023c44:	00000000 	nop
80023c48:	8fa10010 	lw	at,16(sp)
            Some(BorrowRef { borrow })
80023c4c:	afa1001c 	sw	at,28(sp)
80023c50:	8fa1001c 	lw	at,28(sp)
80023c54:	afa10018 	sw	at,24(sp)
        if !is_reading(b) {
80023c58:	08008f18 	j	80023c60 <_ZN4core4cell9BorrowRef3new17h8559d8c2e226af21E+0x78>
80023c5c:	00000000 	nop
    }
80023c60:	8fa20018 	lw	v0,24(sp)
80023c64:	8fbf0034 	lw	ra,52(sp)
80023c68:	27bd0038 	addiu	sp,sp,56
80023c6c:	03e00008 	jr	ra
80023c70:	00000000 	nop

80023c74 <_ZN4core4char7methods15encode_utf8_raw17haf3fd125db2bd06eE>:
/// Panics if the buffer is not large enough.
/// A buffer of length four is large enough to encode any `char`.
#[unstable(feature = "char_internals", reason = "exposed only for libstd", issue = "none")]
#[doc(hidden)]
#[inline]
pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
80023c74:	27bdff00 	addiu	sp,sp,-256
80023c78:	afbf00fc 	sw	ra,252(sp)
80023c7c:	afa60024 	sw	a2,36(sp)
80023c80:	afa50020 	sw	a1,32(sp)
80023c84:	afa40030 	sw	a0,48(sp)
80023c88:	afa5007c 	sw	a1,124(sp)
80023c8c:	afa60080 	sw	a2,128(sp)
    let len = len_utf8(code);
80023c90:	8fa40030 	lw	a0,48(sp)
80023c94:	0c008ff4 	jal	80023fd0 <_ZN4core4char7methods8len_utf817hede23865c78d9af8E>
80023c98:	00000000 	nop
80023c9c:	8fa40020 	lw	a0,32(sp)
80023ca0:	8fa50024 	lw	a1,36(sp)
80023ca4:	afa20034 	sw	v0,52(sp)
    match (len, &mut dst[..]) {
80023ca8:	8fa10034 	lw	at,52(sp)
80023cac:	afa10028 	sw	at,40(sp)
80023cb0:	afa400f4 	sw	a0,244(sp)
80023cb4:	afa500f8 	sw	a1,248(sp)
        index.index_mut(self)
80023cb8:	3c018105 	lui	at,0x8105
80023cbc:	2426c7e4 	addiu	a2,at,-14364
80023cc0:	0c0106ae 	jal	80041ab8 <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h0fbdbc71c20a79daE>
80023cc4:	00000000 	nop
80023cc8:	8fa10028 	lw	at,40(sp)
80023ccc:	afa10038 	sw	at,56(sp)
80023cd0:	afa2003c 	sw	v0,60(sp)
80023cd4:	afa30040 	sw	v1,64(sp)
80023cd8:	8fa10038 	lw	at,56(sp)
80023cdc:	2421ffff 	addiu	at,at,-1
80023ce0:	afa1002c 	sw	at,44(sp)
80023ce4:	2c210004 	sltiu	at,at,4
80023ce8:	10200008 	beqz	at,80023d0c <_ZN4core4char7methods15encode_utf8_raw17haf3fd125db2bd06eE+0x98>
80023cec:	00000000 	nop
80023cf0:	8fa1002c 	lw	at,44(sp)
80023cf4:	00010880 	sll	at,at,0x2
80023cf8:	3c028105 	lui	v0,0x8105
80023cfc:	00220821 	addu	at,at,v0
80023d00:	8c21c000 	lw	at,-16384(at)
80023d04:	00200008 	jr	at
80023d08:	00000000 	nop
80023d0c:	8fa20024 	lw	v0,36(sp)
80023d10:	27a30034 	addiu	v1,sp,52
80023d14:	afa300b0 	sw	v1,176(sp)
80023d18:	afa300c0 	sw	v1,192(sp)
80023d1c:	3c018004 	lui	at,0x8004
80023d20:	24217d60 	addiu	at,at,32096
80023d24:	afa100c4 	sw	at,196(sp)
        //     2. `&'b T` and `&'b Opaque` have the same memory layout
        //              (when `T` is `Sized`, as it is here)
        // `mem::transmute(f)` is safe since `fn(&T, &mut Formatter<'_>) -> Result`
        // and `fn(&Opaque, &mut Formatter<'_>) -> Result` have the same ABI
        // (as long as `T` is `Sized`)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80023d28:	afa300b8 	sw	v1,184(sp)
80023d2c:	afa100bc 	sw	at,188(sp)
    }
80023d30:	8fa600b8 	lw	a2,184(sp)
80023d34:	8fa500bc 	lw	a1,188(sp)
80023d38:	27a40030 	addiu	a0,sp,48
80023d3c:	afa400b4 	sw	a0,180(sp)
80023d40:	afa400e0 	sw	a0,224(sp)
80023d44:	3c038004 	lui	v1,0x8004
80023d48:	246373e4 	addiu	v1,v1,29668
80023d4c:	afa300e4 	sw	v1,228(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80023d50:	afa400d8 	sw	a0,216(sp)
80023d54:	afa300dc 	sw	v1,220(sp)
    }
80023d58:	8fa400d8 	lw	a0,216(sp)
80023d5c:	8fa300dc 	lw	v1,220(sp)
        }
        _ => panic!(
            "encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}",
            len,
            code,
            dst.len(),
80023d60:	afa20074 	sw	v0,116(sp)
80023d64:	27a20074 	addiu	v0,sp,116
80023d68:	afa200ac 	sw	v0,172(sp)
80023d6c:	afa200d0 	sw	v0,208(sp)
80023d70:	afa100d4 	sw	at,212(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80023d74:	afa200c8 	sw	v0,200(sp)
80023d78:	afa100cc 	sw	at,204(sp)
    }
80023d7c:	8fa200c8 	lw	v0,200(sp)
80023d80:	8fa100cc 	lw	at,204(sp)
        _ => panic!(
80023d84:	afa6005c 	sw	a2,92(sp)
80023d88:	afa50060 	sw	a1,96(sp)
80023d8c:	afa40064 	sw	a0,100(sp)
80023d90:	afa30068 	sw	v1,104(sp)
80023d94:	afa2006c 	sw	v0,108(sp)
80023d98:	afa10070 	sw	at,112(sp)
80023d9c:	03a00825 	move	at,sp
80023da0:	24060003 	li	a2,3
80023da4:	ac260010 	sw	a2,16(at)
80023da8:	3c018105 	lui	at,0x8105
80023dac:	2425c840 	addiu	a1,at,-14272
80023db0:	27a40044 	addiu	a0,sp,68
80023db4:	afa4001c 	sw	a0,28(sp)
80023db8:	27a7005c 	addiu	a3,sp,92
80023dbc:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
80023dc0:	00000000 	nop
80023dc4:	8fa4001c 	lw	a0,28(sp)
80023dc8:	3c018105 	lui	at,0x8105
80023dcc:	2425c858 	addiu	a1,at,-14248
80023dd0:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80023dd4:	00000000 	nop
        (1, [a, ..]) => {
80023dd8:	8fa10040 	lw	at,64(sp)
80023ddc:	14200015 	bnez	at,80023e34 <_ZN4core4char7methods15encode_utf8_raw17haf3fd125db2bd06eE+0x1c0>
80023de0:	00000000 	nop
80023de4:	08008f43 	j	80023d0c <_ZN4core4char7methods15encode_utf8_raw17haf3fd125db2bd06eE+0x98>
80023de8:	00000000 	nop
        (2, [a, b, ..]) => {
80023dec:	8fa10040 	lw	at,64(sp)
80023df0:	2c210002 	sltiu	at,at,2
80023df4:	10200025 	beqz	at,80023e8c <_ZN4core4char7methods15encode_utf8_raw17haf3fd125db2bd06eE+0x218>
80023df8:	00000000 	nop
80023dfc:	08008f43 	j	80023d0c <_ZN4core4char7methods15encode_utf8_raw17haf3fd125db2bd06eE+0x98>
80023e00:	00000000 	nop
        (3, [a, b, c, ..]) => {
80023e04:	8fa10040 	lw	at,64(sp)
80023e08:	2c210003 	sltiu	at,at,3
80023e0c:	1020002e 	beqz	at,80023ec8 <_ZN4core4char7methods15encode_utf8_raw17haf3fd125db2bd06eE+0x254>
80023e10:	00000000 	nop
80023e14:	08008f43 	j	80023d0c <_ZN4core4char7methods15encode_utf8_raw17haf3fd125db2bd06eE+0x98>
80023e18:	00000000 	nop
        (4, [a, b, c, d, ..]) => {
80023e1c:	8fa10040 	lw	at,64(sp)
80023e20:	2c210004 	sltiu	at,at,4
80023e24:	1020003e 	beqz	at,80023f20 <_ZN4core4char7methods15encode_utf8_raw17haf3fd125db2bd06eE+0x2ac>
80023e28:	00000000 	nop
80023e2c:	08008f43 	j	80023d0c <_ZN4core4char7methods15encode_utf8_raw17haf3fd125db2bd06eE+0x98>
80023e30:	00000000 	nop
        (1, [a, ..]) => {
80023e34:	8fa2003c 	lw	v0,60(sp)
80023e38:	afa20084 	sw	v0,132(sp)
            *a = code as u8;
80023e3c:	8fa10030 	lw	at,48(sp)
80023e40:	a0410000 	sb	at,0(v0)
        }
80023e44:	08008f93 	j	80023e4c <_ZN4core4char7methods15encode_utf8_raw17haf3fd125db2bd06eE+0x1d8>
80023e48:	00000000 	nop
        ),
    };
    &mut dst[..len]
80023e4c:	8fa60024 	lw	a2,36(sp)
80023e50:	8fa50020 	lw	a1,32(sp)
80023e54:	8fa10034 	lw	at,52(sp)
80023e58:	afa10078 	sw	at,120(sp)
80023e5c:	8fa40078 	lw	a0,120(sp)
80023e60:	afa500e8 	sw	a1,232(sp)
80023e64:	afa600ec 	sw	a2,236(sp)
80023e68:	afa400f0 	sw	a0,240(sp)
80023e6c:	3c018105 	lui	at,0x8105
80023e70:	2427c7f4 	addiu	a3,at,-14348
80023e74:	0c010616 	jal	80041858 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h939accfbe24507e3E>
80023e78:	00000000 	nop
}
80023e7c:	8fbf00fc 	lw	ra,252(sp)
80023e80:	27bd0100 	addiu	sp,sp,256
80023e84:	03e00008 	jr	ra
80023e88:	00000000 	nop
        (2, [a, b, ..]) => {
80023e8c:	8fa3003c 	lw	v1,60(sp)
80023e90:	afa30088 	sw	v1,136(sp)
80023e94:	8fa2003c 	lw	v0,60(sp)
80023e98:	24410001 	addiu	at,v0,1
80023e9c:	afa1008c 	sw	at,140(sp)
            *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
80023ea0:	8fa10030 	lw	at,48(sp)
80023ea4:	7c212180 	ext	at,at,0x6,0x5
80023ea8:	342100c0 	ori	at,at,0xc0
80023eac:	a0610000 	sb	at,0(v1)
            *b = (code & 0x3F) as u8 | TAG_CONT;
80023eb0:	93a10030 	lbu	at,48(sp)
80023eb4:	3021003f 	andi	at,at,0x3f
80023eb8:	34210080 	ori	at,at,0x80
80023ebc:	a0410001 	sb	at,1(v0)
        }
80023ec0:	08008f93 	j	80023e4c <_ZN4core4char7methods15encode_utf8_raw17haf3fd125db2bd06eE+0x1d8>
80023ec4:	00000000 	nop
        (3, [a, b, c, ..]) => {
80023ec8:	8fa4003c 	lw	a0,60(sp)
80023ecc:	afa40090 	sw	a0,144(sp)
80023ed0:	8fa3003c 	lw	v1,60(sp)
80023ed4:	24610001 	addiu	at,v1,1
80023ed8:	afa10094 	sw	at,148(sp)
80023edc:	8fa2003c 	lw	v0,60(sp)
80023ee0:	24410002 	addiu	at,v0,2
80023ee4:	afa10098 	sw	at,152(sp)
            *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
80023ee8:	8fa10030 	lw	at,48(sp)
80023eec:	7c211b00 	ext	at,at,0xc,0x4
80023ef0:	342100e0 	ori	at,at,0xe0
80023ef4:	a0810000 	sb	at,0(a0)
            *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
80023ef8:	8fa10030 	lw	at,48(sp)
80023efc:	7c212980 	ext	at,at,0x6,0x6
80023f00:	34210080 	ori	at,at,0x80
80023f04:	a0610001 	sb	at,1(v1)
            *c = (code & 0x3F) as u8 | TAG_CONT;
80023f08:	93a10030 	lbu	at,48(sp)
80023f0c:	3021003f 	andi	at,at,0x3f
80023f10:	34210080 	ori	at,at,0x80
80023f14:	a0410002 	sb	at,2(v0)
        }
80023f18:	08008f93 	j	80023e4c <_ZN4core4char7methods15encode_utf8_raw17haf3fd125db2bd06eE+0x1d8>
80023f1c:	00000000 	nop
        (4, [a, b, c, d, ..]) => {
80023f20:	8fa5003c 	lw	a1,60(sp)
80023f24:	afa5009c 	sw	a1,156(sp)
80023f28:	8fa4003c 	lw	a0,60(sp)
80023f2c:	24810001 	addiu	at,a0,1
80023f30:	afa100a0 	sw	at,160(sp)
80023f34:	8fa3003c 	lw	v1,60(sp)
80023f38:	24610002 	addiu	at,v1,2
80023f3c:	afa100a4 	sw	at,164(sp)
80023f40:	8fa2003c 	lw	v0,60(sp)
80023f44:	24410003 	addiu	at,v0,3
80023f48:	afa100a8 	sw	at,168(sp)
            *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
80023f4c:	8fa10030 	lw	at,48(sp)
80023f50:	7c211480 	ext	at,at,0x12,0x3
80023f54:	342100f0 	ori	at,at,0xf0
80023f58:	a0a10000 	sb	at,0(a1)
            *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
80023f5c:	8fa10030 	lw	at,48(sp)
80023f60:	7c212b00 	ext	at,at,0xc,0x6
80023f64:	34210080 	ori	at,at,0x80
80023f68:	a0810001 	sb	at,1(a0)
            *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
80023f6c:	8fa10030 	lw	at,48(sp)
80023f70:	7c212980 	ext	at,at,0x6,0x6
80023f74:	34210080 	ori	at,at,0x80
80023f78:	a0610002 	sb	at,2(v1)
            *d = (code & 0x3F) as u8 | TAG_CONT;
80023f7c:	93a10030 	lbu	at,48(sp)
80023f80:	3021003f 	andi	at,at,0x3f
80023f84:	34210080 	ori	at,at,0x80
80023f88:	a0410003 	sb	at,3(v0)
        }
80023f8c:	08008f93 	j	80023e4c <_ZN4core4char7methods15encode_utf8_raw17haf3fd125db2bd06eE+0x1d8>
80023f90:	00000000 	nop

80023f94 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h9a3c9e61a6ca84a6E>:
    pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {
80023f94:	27bdffe0 	addiu	sp,sp,-32
80023f98:	afbf001c 	sw	ra,28(sp)
80023f9c:	afa40010 	sw	a0,16(sp)
80023fa0:	afa50014 	sw	a1,20(sp)
80023fa4:	afa60018 	sw	a2,24(sp)
        unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
80023fa8:	0c008f1d 	jal	80023c74 <_ZN4core4char7methods15encode_utf8_raw17haf3fd125db2bd06eE>
80023fac:	00000000 	nop
80023fb0:	00402025 	move	a0,v0
80023fb4:	00602825 	move	a1,v1
80023fb8:	0c008e0c 	jal	80023830 <_ZN4core3str8converts23from_utf8_unchecked_mut17h5e80aafc6c064612E>
80023fbc:	00000000 	nop
    }
80023fc0:	8fbf001c 	lw	ra,28(sp)
80023fc4:	27bd0020 	addiu	sp,sp,32
80023fc8:	03e00008 	jr	ra
80023fcc:	00000000 	nop

80023fd0 <_ZN4core4char7methods8len_utf817hede23865c78d9af8E>:
const fn len_utf8(code: u32) -> usize {
80023fd0:	27bdfff0 	addiu	sp,sp,-16
80023fd4:	afa40004 	sw	a0,4(sp)
80023fd8:	afa4000c 	sw	a0,12(sp)
    if code < MAX_ONE_B {
80023fdc:	2c810080 	sltiu	at,a0,128
80023fe0:	14200009 	bnez	at,80024008 <_ZN4core4char7methods8len_utf817hede23865c78d9af8E+0x38>
80023fe4:	00000000 	nop
80023fe8:	08008ffc 	j	80023ff0 <_ZN4core4char7methods8len_utf817hede23865c78d9af8E+0x20>
80023fec:	00000000 	nop
    } else if code < MAX_TWO_B {
80023ff0:	8fa10004 	lw	at,4(sp)
80023ff4:	2c210800 	sltiu	at,at,2048
80023ff8:	1420000e 	bnez	at,80024034 <_ZN4core4char7methods8len_utf817hede23865c78d9af8E+0x64>
80023ffc:	00000000 	nop
80024000:	08009006 	j	80024018 <_ZN4core4char7methods8len_utf817hede23865c78d9af8E+0x48>
80024004:	00000000 	nop
80024008:	24010001 	li	at,1
        1
8002400c:	afa10008 	sw	at,8(sp)
    if code < MAX_ONE_B {
80024010:	08009019 	j	80024064 <_ZN4core4char7methods8len_utf817hede23865c78d9af8E+0x94>
80024014:	00000000 	nop
80024018:	8fa10004 	lw	at,4(sp)
8002401c:	3c020001 	lui	v0,0x1
    } else if code < MAX_THREE_B {
80024020:	0022082b 	sltu	at,at,v0
80024024:	1420000b 	bnez	at,80024054 <_ZN4core4char7methods8len_utf817hede23865c78d9af8E+0x84>
80024028:	00000000 	nop
8002402c:	08009011 	j	80024044 <_ZN4core4char7methods8len_utf817hede23865c78d9af8E+0x74>
80024030:	00000000 	nop
80024034:	24010002 	li	at,2
        2
80024038:	afa10008 	sw	at,8(sp)
    } else if code < MAX_TWO_B {
8002403c:	08009019 	j	80024064 <_ZN4core4char7methods8len_utf817hede23865c78d9af8E+0x94>
80024040:	00000000 	nop
80024044:	24010004 	li	at,4
        4
80024048:	afa10008 	sw	at,8(sp)
    } else if code < MAX_THREE_B {
8002404c:	08009019 	j	80024064 <_ZN4core4char7methods8len_utf817hede23865c78d9af8E+0x94>
80024050:	00000000 	nop
80024054:	24010003 	li	at,3
        3
80024058:	afa10008 	sw	at,8(sp)
    } else if code < MAX_THREE_B {
8002405c:	08009019 	j	80024064 <_ZN4core4char7methods8len_utf817hede23865c78d9af8E+0x94>
80024060:	00000000 	nop
}
80024064:	8fa20008 	lw	v0,8(sp)
80024068:	27bd0010 	addiu	sp,sp,16
8002406c:	03e00008 	jr	ra
80024070:	00000000 	nop

80024074 <_ZN4core4hint16assert_unchecked18precondition_check17h2f62c826c48aeb44E>:
            const fn precondition_check($($name:$ty),*) {
80024074:	27bdffe8 	addiu	sp,sp,-24
80024078:	a3a40017 	sb	a0,23(sp)
    // SAFETY: The caller promised `cond` is true.
    unsafe {
        ub_checks::assert_unsafe_precondition!(
            check_language_ub,
            "hint::assert_unchecked must never be called when the condition is false",
            (cond: bool = cond) => cond,
8002407c:	14800008 	bnez	a0,800240a0 <_ZN4core4hint16assert_unchecked18precondition_check17h2f62c826c48aeb44E+0x2c>
80024080:	00000000 	nop
80024084:	08009023 	j	8002408c <_ZN4core4hint16assert_unchecked18precondition_check17h2f62c826c48aeb44E+0x18>
80024088:	00000000 	nop
                    ::core::panicking::panic_nounwind(
8002408c:	3c018105 	lui	at,0x8105
80024090:	2424c868 	addiu	a0,at,-14232
80024094:	24050068 	li	a1,104
80024098:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8002409c:	00000000 	nop
800240a0:	27bd0018 	addiu	sp,sp,24
            }
800240a4:	03e00008 	jr	ra
800240a8:	00000000 	nop

800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>:
pub const unsafe fn unreachable_unchecked() -> ! {
800240ac:	27bdffe8 	addiu	sp,sp,-24
800240b0:	afbf0014 	sw	ra,20(sp)
    ub_checks::assert_unsafe_precondition!(
800240b4:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
800240b8:	00000000 	nop
800240bc:	14400004 	bnez	v0,800240d0 <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE+0x24>
800240c0:	00000000 	nop
800240c4:	08009033 	j	800240cc <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE+0x20>
800240c8:	00000000 	nop
    unsafe { intrinsics::unreachable() }
800240cc:	0000000d 	break
    ub_checks::assert_unsafe_precondition!(
800240d0:	0c009038 	jal	800240e0 <_ZN4core4hint21unreachable_unchecked18precondition_check17h2af2f7c1e1c324d5E>
800240d4:	00000000 	nop
800240d8:	08009033 	j	800240cc <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE+0x20>
800240dc:	00000000 	nop

800240e0 <_ZN4core4hint21unreachable_unchecked18precondition_check17h2af2f7c1e1c324d5E>:
            const fn precondition_check($($name:$ty),*) {
800240e0:	27bdfff0 	addiu	sp,sp,-16
        () => false
800240e4:	0800903b 	j	800240ec <_ZN4core4hint21unreachable_unchecked18precondition_check17h2af2f7c1e1c324d5E+0xc>
800240e8:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800240ec:	3c018105 	lui	at,0x8105
800240f0:	2424c8d0 	addiu	a0,at,-14128
800240f4:	24050052 	li	a1,82
800240f8:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800240fc:	00000000 	nop

80024100 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h69187781131097deE>:
    #[inline]
    #[stable(feature = "extended_compare_and_swap", since = "1.10.0")]
    #[doc(alias = "compare_and_swap")]
    #[cfg(target_has_atomic = "8")]
    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
    pub fn compare_exchange(
80024100:	27bdff80 	addiu	sp,sp,-128
80024104:	afbf007c 	sw	ra,124(sp)
80024108:	afa4001c 	sw	a0,28(sp)
8002410c:	8fa10090 	lw	at,144(sp)
80024110:	afa10020 	sw	at,32(sp)
80024114:	00e01025 	move	v0,a3
80024118:	afa20024 	sw	v0,36(sp)
8002411c:	00c01025 	move	v0,a2
80024120:	afa20028 	sw	v0,40(sp)
80024124:	00a01025 	move	v0,a1
80024128:	afa2002c 	sw	v0,44(sp)
8002412c:	afa4006c 	sw	a0,108(sp)
80024130:	a3a50072 	sb	a1,114(sp)
80024134:	a3a60073 	sb	a2,115(sp)
80024138:	a3a70074 	sb	a3,116(sp)
8002413c:	a3a10075 	sb	at,117(sp)
        current: bool,
        new: bool,
        success: Ordering,
        failure: Ordering,
    ) -> Result<bool, bool> {
        if EMULATE_ATOMIC_BOOL {
80024140:	08009052 	j	80024148 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h69187781131097deE+0x48>
80024144:	00000000 	nop
80024148:	8fa70024 	lw	a3,36(sp)
8002414c:	8fa4001c 	lw	a0,28(sp)
80024150:	8fa10028 	lw	at,40(sp)
80024154:	8fa2002c 	lw	v0,44(sp)
80024158:	8fa30020 	lw	v1,32(sp)
8002415c:	afa40078 	sw	a0,120(sp)
            };
            if old == current { Ok(old) } else { Err(old) }
        } else {
            // SAFETY: data races are prevented by atomic intrinsics.
            match unsafe {
                atomic_compare_exchange(self.v.get(), current as u8, new as u8, success, failure)
80024160:	03a02825 	move	a1,sp
80024164:	aca30010 	sw	v1,16(a1)
80024168:	30450001 	andi	a1,v0,0x1
8002416c:	30260001 	andi	a2,at,0x1
80024170:	0c00d67f 	jal	800359fc <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E>
80024174:	00000000 	nop
80024178:	30410001 	andi	at,v0,0x1
8002417c:	a3a1006a 	sb	at,106(sp)
80024180:	a3a3006b 	sb	v1,107(sp)
            match unsafe {
80024184:	93a1006a 	lbu	at,106(sp)
80024188:	30210001 	andi	at,at,0x1
8002418c:	1420000b 	bnez	at,800241bc <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h69187781131097deE+0xbc>
80024190:	00000000 	nop
80024194:	08009067 	j	8002419c <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h69187781131097deE+0x9c>
80024198:	00000000 	nop
            } {
                Ok(x) => Ok(x != 0),
8002419c:	93a1006b 	lbu	at,107(sp)
800241a0:	a3a10076 	sb	at,118(sp)
800241a4:	0001082b 	sltu	at,zero,at
800241a8:	a3a10034 	sb	at,52(sp)
800241ac:	24010000 	li	at,0
800241b0:	a3a00033 	sb	zero,51(sp)
800241b4:	08009077 	j	800241dc <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h69187781131097deE+0xdc>
800241b8:	00000000 	nop
                Err(x) => Err(x != 0),
800241bc:	93a1006b 	lbu	at,107(sp)
800241c0:	a3a10077 	sb	at,119(sp)
800241c4:	0001082b 	sltu	at,zero,at
800241c8:	a3a10034 	sb	at,52(sp)
800241cc:	24010001 	li	at,1
800241d0:	a3a10033 	sb	at,51(sp)
800241d4:	08009077 	j	800241dc <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h69187781131097deE+0xdc>
800241d8:	00000000 	nop
            }
        }
    }
800241dc:	93a20033 	lbu	v0,51(sp)
800241e0:	93a30034 	lbu	v1,52(sp)
800241e4:	8fbf007c 	lw	ra,124(sp)
800241e8:	27bd0080 	addiu	sp,sp,128
800241ec:	03e00008 	jr	ra
800241f0:	00000000 	nop

800241f4 <_ZN4core4sync6atomic10AtomicBool3new17h896af8836cb462e5E>:
    pub const fn new(v: bool) -> AtomicBool {
800241f4:	27bdfff8 	addiu	sp,sp,-8
800241f8:	a3a40005 	sb	a0,5(sp)
800241fc:	a3a40007 	sb	a0,7(sp)
        UnsafeCell { value }
80024200:	a3a40006 	sb	a0,6(sp)
    }
80024204:	93a10006 	lbu	at,6(sp)
        AtomicBool { v: UnsafeCell::new(v as u8) }
80024208:	a3a10004 	sb	at,4(sp)
    }
8002420c:	93a20004 	lbu	v0,4(sp)
80024210:	27bd0008 	addiu	sp,sp,8
80024214:	03e00008 	jr	ra
80024218:	00000000 	nop

8002421c <_ZN4core4sync6atomic10AtomicBool5store17hd204b6b24ee328d4E>:
    pub fn store(&self, val: bool, order: Ordering) {
8002421c:	27bdffe0 	addiu	sp,sp,-32
80024220:	afbf001c 	sw	ra,28(sp)
80024224:	afa40010 	sw	a0,16(sp)
80024228:	a3a50016 	sb	a1,22(sp)
8002422c:	a3a60017 	sb	a2,23(sp)
80024230:	afa40018 	sw	a0,24(sp)
            atomic_store(self.v.get(), val as u8, order);
80024234:	0c00d63f 	jal	800358fc <_ZN4core4sync6atomic12atomic_store17h97ba07a2f4ebd6c0E>
80024238:	00000000 	nop
    }
8002423c:	8fbf001c 	lw	ra,28(sp)
80024240:	27bd0020 	addiu	sp,sp,32
80024244:	03e00008 	jr	ra
80024248:	00000000 	nop

8002424c <_ZN4core4sync6atomic10atomic_add17h470f9ca2b37839ebE>:

/// Returns the previous value (like __sync_fetch_and_add).
#[inline]
#[cfg(target_has_atomic)]
#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
8002424c:	27bdffe0 	addiu	sp,sp,-32
80024250:	afa50004 	sw	a1,4(sp)
80024254:	afa40008 	sw	a0,8(sp)
80024258:	a3a60013 	sb	a2,19(sp)
8002425c:	afa40018 	sw	a0,24(sp)
80024260:	afa5001c 	sw	a1,28(sp)
    // SAFETY: the caller must uphold the safety contract for `atomic_add`.
    unsafe {
        match order {
80024264:	93a10013 	lbu	at,19(sp)
80024268:	afa1000c 	sw	at,12(sp)
8002426c:	8fa1000c 	lw	at,12(sp)
80024270:	00010880 	sll	at,at,0x2
80024274:	3c028105 	lui	v0,0x8105
80024278:	00220821 	addu	at,at,v0
8002427c:	8c21c010 	lw	at,-16368(at)
80024280:	00200008 	jr	at
80024284:	00000000 	nop
80024288:	0000000d 	break
            Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
8002428c:	8fa30008 	lw	v1,8(sp)
80024290:	8fa40004 	lw	a0,4(sp)
80024294:	c0610000 	ll	at,0(v1)
80024298:	00241021 	addu	v0,at,a0
8002429c:	e0620000 	sc	v0,0(v1)
800242a0:	1040fffc 	beqz	v0,80024294 <_ZN4core4sync6atomic10atomic_add17h470f9ca2b37839ebE+0x48>
800242a4:	00000000 	nop
800242a8:	afa10014 	sw	at,20(sp)
800242ac:	080090db 	j	8002436c <_ZN4core4sync6atomic10atomic_add17h470f9ca2b37839ebE+0x120>
800242b0:	00000000 	nop
            Acquire => intrinsics::atomic_xadd_acquire(dst, val),
            Release => intrinsics::atomic_xadd_release(dst, val),
800242b4:	8fa30008 	lw	v1,8(sp)
800242b8:	8fa40004 	lw	a0,4(sp)
800242bc:	0000000f 	sync
800242c0:	c0610000 	ll	at,0(v1)
800242c4:	00241021 	addu	v0,at,a0
800242c8:	e0620000 	sc	v0,0(v1)
800242cc:	1040fffc 	beqz	v0,800242c0 <_ZN4core4sync6atomic10atomic_add17h470f9ca2b37839ebE+0x74>
800242d0:	00000000 	nop
800242d4:	afa10014 	sw	at,20(sp)
800242d8:	080090db 	j	8002436c <_ZN4core4sync6atomic10atomic_add17h470f9ca2b37839ebE+0x120>
800242dc:	00000000 	nop
            Acquire => intrinsics::atomic_xadd_acquire(dst, val),
800242e0:	8fa30008 	lw	v1,8(sp)
800242e4:	8fa40004 	lw	a0,4(sp)
800242e8:	c0610000 	ll	at,0(v1)
800242ec:	00241021 	addu	v0,at,a0
800242f0:	e0620000 	sc	v0,0(v1)
800242f4:	1040fffc 	beqz	v0,800242e8 <_ZN4core4sync6atomic10atomic_add17h470f9ca2b37839ebE+0x9c>
800242f8:	00000000 	nop
800242fc:	0000000f 	sync
80024300:	afa10014 	sw	at,20(sp)
80024304:	080090db 	j	8002436c <_ZN4core4sync6atomic10atomic_add17h470f9ca2b37839ebE+0x120>
80024308:	00000000 	nop
            AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),
8002430c:	8fa30008 	lw	v1,8(sp)
80024310:	8fa40004 	lw	a0,4(sp)
80024314:	0000000f 	sync
80024318:	c0610000 	ll	at,0(v1)
8002431c:	00241021 	addu	v0,at,a0
80024320:	e0620000 	sc	v0,0(v1)
80024324:	1040fffc 	beqz	v0,80024318 <_ZN4core4sync6atomic10atomic_add17h470f9ca2b37839ebE+0xcc>
80024328:	00000000 	nop
8002432c:	0000000f 	sync
80024330:	afa10014 	sw	at,20(sp)
80024334:	080090db 	j	8002436c <_ZN4core4sync6atomic10atomic_add17h470f9ca2b37839ebE+0x120>
80024338:	00000000 	nop
            SeqCst => intrinsics::atomic_xadd_seqcst(dst, val),
8002433c:	8fa30008 	lw	v1,8(sp)
80024340:	8fa40004 	lw	a0,4(sp)
80024344:	0000000f 	sync
80024348:	c0610000 	ll	at,0(v1)
8002434c:	00241021 	addu	v0,at,a0
80024350:	e0620000 	sc	v0,0(v1)
80024354:	1040fffc 	beqz	v0,80024348 <_ZN4core4sync6atomic10atomic_add17h470f9ca2b37839ebE+0xfc>
80024358:	00000000 	nop
8002435c:	0000000f 	sync
80024360:	afa10014 	sw	at,20(sp)
80024364:	080090db 	j	8002436c <_ZN4core4sync6atomic10atomic_add17h470f9ca2b37839ebE+0x120>
80024368:	00000000 	nop
        }
    }
}
8002436c:	8fa20014 	lw	v0,20(sp)
80024370:	27bd0020 	addiu	sp,sp,32
80024374:	03e00008 	jr	ra
80024378:	00000000 	nop

8002437c <_ZN4core4sync6atomic10atomic_sub17hf1f5f480461a994aE>:

/// Returns the previous value (like __sync_fetch_and_sub).
#[inline]
#[cfg(target_has_atomic)]
#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
8002437c:	27bdffe0 	addiu	sp,sp,-32
80024380:	afa50004 	sw	a1,4(sp)
80024384:	afa40008 	sw	a0,8(sp)
80024388:	a3a60013 	sb	a2,19(sp)
8002438c:	afa40018 	sw	a0,24(sp)
80024390:	afa5001c 	sw	a1,28(sp)
    // SAFETY: the caller must uphold the safety contract for `atomic_sub`.
    unsafe {
        match order {
80024394:	93a10013 	lbu	at,19(sp)
80024398:	afa1000c 	sw	at,12(sp)
8002439c:	8fa1000c 	lw	at,12(sp)
800243a0:	00010880 	sll	at,at,0x2
800243a4:	3c028105 	lui	v0,0x8105
800243a8:	00220821 	addu	at,at,v0
800243ac:	8c21c024 	lw	at,-16348(at)
800243b0:	00200008 	jr	at
800243b4:	00000000 	nop
800243b8:	0000000d 	break
            Relaxed => intrinsics::atomic_xsub_relaxed(dst, val),
800243bc:	8fa30008 	lw	v1,8(sp)
800243c0:	8fa40004 	lw	a0,4(sp)
800243c4:	c0610000 	ll	at,0(v1)
800243c8:	00241023 	subu	v0,at,a0
800243cc:	e0620000 	sc	v0,0(v1)
800243d0:	1040fffc 	beqz	v0,800243c4 <_ZN4core4sync6atomic10atomic_sub17hf1f5f480461a994aE+0x48>
800243d4:	00000000 	nop
800243d8:	afa10014 	sw	at,20(sp)
800243dc:	08009127 	j	8002449c <_ZN4core4sync6atomic10atomic_sub17hf1f5f480461a994aE+0x120>
800243e0:	00000000 	nop
            Acquire => intrinsics::atomic_xsub_acquire(dst, val),
            Release => intrinsics::atomic_xsub_release(dst, val),
800243e4:	8fa30008 	lw	v1,8(sp)
800243e8:	8fa40004 	lw	a0,4(sp)
800243ec:	0000000f 	sync
800243f0:	c0610000 	ll	at,0(v1)
800243f4:	00241023 	subu	v0,at,a0
800243f8:	e0620000 	sc	v0,0(v1)
800243fc:	1040fffc 	beqz	v0,800243f0 <_ZN4core4sync6atomic10atomic_sub17hf1f5f480461a994aE+0x74>
80024400:	00000000 	nop
80024404:	afa10014 	sw	at,20(sp)
80024408:	08009127 	j	8002449c <_ZN4core4sync6atomic10atomic_sub17hf1f5f480461a994aE+0x120>
8002440c:	00000000 	nop
            Acquire => intrinsics::atomic_xsub_acquire(dst, val),
80024410:	8fa30008 	lw	v1,8(sp)
80024414:	8fa40004 	lw	a0,4(sp)
80024418:	c0610000 	ll	at,0(v1)
8002441c:	00241023 	subu	v0,at,a0
80024420:	e0620000 	sc	v0,0(v1)
80024424:	1040fffc 	beqz	v0,80024418 <_ZN4core4sync6atomic10atomic_sub17hf1f5f480461a994aE+0x9c>
80024428:	00000000 	nop
8002442c:	0000000f 	sync
80024430:	afa10014 	sw	at,20(sp)
80024434:	08009127 	j	8002449c <_ZN4core4sync6atomic10atomic_sub17hf1f5f480461a994aE+0x120>
80024438:	00000000 	nop
            AcqRel => intrinsics::atomic_xsub_acqrel(dst, val),
8002443c:	8fa30008 	lw	v1,8(sp)
80024440:	8fa40004 	lw	a0,4(sp)
80024444:	0000000f 	sync
80024448:	c0610000 	ll	at,0(v1)
8002444c:	00241023 	subu	v0,at,a0
80024450:	e0620000 	sc	v0,0(v1)
80024454:	1040fffc 	beqz	v0,80024448 <_ZN4core4sync6atomic10atomic_sub17hf1f5f480461a994aE+0xcc>
80024458:	00000000 	nop
8002445c:	0000000f 	sync
80024460:	afa10014 	sw	at,20(sp)
80024464:	08009127 	j	8002449c <_ZN4core4sync6atomic10atomic_sub17hf1f5f480461a994aE+0x120>
80024468:	00000000 	nop
            SeqCst => intrinsics::atomic_xsub_seqcst(dst, val),
8002446c:	8fa30008 	lw	v1,8(sp)
80024470:	8fa40004 	lw	a0,4(sp)
80024474:	0000000f 	sync
80024478:	c0610000 	ll	at,0(v1)
8002447c:	00241023 	subu	v0,at,a0
80024480:	e0620000 	sc	v0,0(v1)
80024484:	1040fffc 	beqz	v0,80024478 <_ZN4core4sync6atomic10atomic_sub17hf1f5f480461a994aE+0xfc>
80024488:	00000000 	nop
8002448c:	0000000f 	sync
80024490:	afa10014 	sw	at,20(sp)
80024494:	08009127 	j	8002449c <_ZN4core4sync6atomic10atomic_sub17hf1f5f480461a994aE+0x120>
80024498:	00000000 	nop
        }
    }
}
8002449c:	8fa20014 	lw	v0,20(sp)
800244a0:	27bd0020 	addiu	sp,sp,32
800244a4:	03e00008 	jr	ra
800244a8:	00000000 	nop

800244ac <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE>:
            pub fn compare_and_swap(&self,
800244ac:	27bdffb0 	addiu	sp,sp,-80
800244b0:	afbf004c 	sw	ra,76(sp)
800244b4:	afa70024 	sw	a3,36(sp)
800244b8:	afa60020 	sw	a2,32(sp)
800244bc:	afa5001c 	sw	a1,28(sp)
800244c0:	00800825 	move	at,a0
800244c4:	8fa40024 	lw	a0,36(sp)
800244c8:	afa10018 	sw	at,24(sp)
800244cc:	afa10034 	sw	at,52(sp)
800244d0:	afa50038 	sw	a1,56(sp)
800244d4:	afa6003c 	sw	a2,60(sp)
800244d8:	a3a40043 	sb	a0,67(sp)
                                            strongest_failure_ordering(order)) {
800244dc:	0c009364 	jal	80024d90 <_ZN4core4sync6atomic26strongest_failure_ordering17h66ecb62ee01f3ac5E>
800244e0:	00000000 	nop
800244e4:	8fa40018 	lw	a0,24(sp)
800244e8:	8fa5001c 	lw	a1,28(sp)
800244ec:	8fa60020 	lw	a2,32(sp)
800244f0:	8fa70024 	lw	a3,36(sp)
                match self.compare_exchange(current,
800244f4:	03a00825 	move	at,sp
800244f8:	ac220010 	sw	v0,16(at)
800244fc:	0c009157 	jal	8002455c <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17h5b6ac22a1c2a2045E>
80024500:	00000000 	nop
80024504:	afa2002c 	sw	v0,44(sp)
80024508:	afa30030 	sw	v1,48(sp)
8002450c:	8fa1002c 	lw	at,44(sp)
80024510:	14200008 	bnez	at,80024534 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE+0x88>
80024514:	00000000 	nop
80024518:	08009148 	j	80024520 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE+0x74>
8002451c:	00000000 	nop
                    Ok(x) => x,
80024520:	8fa10030 	lw	at,48(sp)
80024524:	afa10044 	sw	at,68(sp)
80024528:	afa10028 	sw	at,40(sp)
8002452c:	08009152 	j	80024548 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE+0x9c>
80024530:	00000000 	nop
                    Err(x) => x,
80024534:	8fa10030 	lw	at,48(sp)
80024538:	afa10048 	sw	at,72(sp)
8002453c:	afa10028 	sw	at,40(sp)
80024540:	08009152 	j	80024548 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE+0x9c>
80024544:	00000000 	nop
            }
80024548:	8fa20028 	lw	v0,40(sp)
8002454c:	8fbf004c 	lw	ra,76(sp)
80024550:	27bd0050 	addiu	sp,sp,80
80024554:	03e00008 	jr	ra
80024558:	00000000 	nop

8002455c <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17h5b6ac22a1c2a2045E>:
            pub fn compare_exchange(&self,
8002455c:	27bdffd0 	addiu	sp,sp,-48
80024560:	afbf002c 	sw	ra,44(sp)
80024564:	8fa10040 	lw	at,64(sp)
80024568:	afa40018 	sw	a0,24(sp)
8002456c:	afa5001c 	sw	a1,28(sp)
80024570:	afa60020 	sw	a2,32(sp)
80024574:	a3a70026 	sb	a3,38(sp)
80024578:	a3a10027 	sb	at,39(sp)
8002457c:	afa40028 	sw	a0,40(sp)
                unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }
80024580:	03a01025 	move	v0,sp
80024584:	ac410010 	sw	at,16(v0)
80024588:	0c0091a3 	jal	8002468c <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE>
8002458c:	00000000 	nop
            }
80024590:	8fbf002c 	lw	ra,44(sp)
80024594:	27bd0030 	addiu	sp,sp,48
80024598:	03e00008 	jr	ra
8002459c:	00000000 	nop

800245a0 <_ZN4core4sync6atomic11AtomicUsize3new17h71ece9cf1f00bce8E>:
            pub const fn new(v: $int_type) -> Self {
800245a0:	27bdfff0 	addiu	sp,sp,-16
800245a4:	afa40004 	sw	a0,4(sp)
800245a8:	afa4000c 	sw	a0,12(sp)
        UnsafeCell { value }
800245ac:	afa40008 	sw	a0,8(sp)
    }
800245b0:	8fa10008 	lw	at,8(sp)
                Self {v: UnsafeCell::new(v)}
800245b4:	afa10000 	sw	at,0(sp)
            }
800245b8:	8fa20000 	lw	v0,0(sp)
800245bc:	27bd0010 	addiu	sp,sp,16
800245c0:	03e00008 	jr	ra
800245c4:	00000000 	nop

800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>:
            pub fn load(&self, order: Ordering) -> $int_type {
800245c8:	27bdffe0 	addiu	sp,sp,-32
800245cc:	afbf001c 	sw	ra,28(sp)
800245d0:	afa40010 	sw	a0,16(sp)
800245d4:	a3a50017 	sb	a1,23(sp)
800245d8:	afa40018 	sw	a0,24(sp)
                unsafe { atomic_load(self.v.get(), order) }
800245dc:	0c00f542 	jal	8003d508 <_ZN4core4sync6atomic11atomic_load17h79b9762b4806e280E>
800245e0:	00000000 	nop
            }
800245e4:	8fbf001c 	lw	ra,28(sp)
800245e8:	27bd0020 	addiu	sp,sp,32
800245ec:	03e00008 	jr	ra
800245f0:	00000000 	nop

800245f4 <_ZN4core4sync6atomic11AtomicUsize5store17h7de3301adcc232e0E>:
            pub fn store(&self, val: $int_type, order: Ordering) {
800245f4:	27bdffd8 	addiu	sp,sp,-40
800245f8:	afbf0024 	sw	ra,36(sp)
800245fc:	afa40014 	sw	a0,20(sp)
80024600:	afa50018 	sw	a1,24(sp)
80024604:	a3a6001f 	sb	a2,31(sp)
80024608:	afa40020 	sw	a0,32(sp)
                unsafe { atomic_store(self.v.get(), val, order); }
8002460c:	0c00daa0 	jal	80036a80 <_ZN4core4sync6atomic12atomic_store17h2e8cbebea0e987eaE>
80024610:	00000000 	nop
            }
80024614:	8fbf0024 	lw	ra,36(sp)
80024618:	27bd0028 	addiu	sp,sp,40
8002461c:	03e00008 	jr	ra
80024620:	00000000 	nop

80024624 <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h659748e46f3b404bE>:
            pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
80024624:	27bdffd8 	addiu	sp,sp,-40
80024628:	afbf0024 	sw	ra,36(sp)
8002462c:	afa40014 	sw	a0,20(sp)
80024630:	afa50018 	sw	a1,24(sp)
80024634:	a3a6001f 	sb	a2,31(sp)
80024638:	afa40020 	sw	a0,32(sp)
                unsafe { atomic_add(self.v.get(), val, order) }
8002463c:	0c009093 	jal	8002424c <_ZN4core4sync6atomic10atomic_add17h470f9ca2b37839ebE>
80024640:	00000000 	nop
            }
80024644:	8fbf0024 	lw	ra,36(sp)
80024648:	27bd0028 	addiu	sp,sp,40
8002464c:	03e00008 	jr	ra
80024650:	00000000 	nop

80024654 <_ZN4core4sync6atomic11AtomicUsize9fetch_sub17hbf460cacea4d5f53E>:
            pub fn fetch_sub(&self, val: $int_type, order: Ordering) -> $int_type {
80024654:	27bdffd8 	addiu	sp,sp,-40
80024658:	afbf0024 	sw	ra,36(sp)
8002465c:	afa40014 	sw	a0,20(sp)
80024660:	afa50018 	sw	a1,24(sp)
80024664:	a3a6001f 	sb	a2,31(sp)
80024668:	afa40020 	sw	a0,32(sp)
                unsafe { atomic_sub(self.v.get(), val, order) }
8002466c:	0c0090df 	jal	8002437c <_ZN4core4sync6atomic10atomic_sub17hf1f5f480461a994aE>
80024670:	00000000 	nop
            }
80024674:	8fbf0024 	lw	ra,36(sp)
80024678:	27bd0028 	addiu	sp,sp,40
8002467c:	03e00008 	jr	ra
80024680:	00000000 	nop

80024684 <_ZN4core4sync6atomic14spin_loop_hint17he1304bcd04fc1e59E>:
#[inline]
#[stable(feature = "spin_loop_hint", since = "1.24.0")]
#[deprecated(since = "1.51.0", note = "use hint::spin_loop instead")]
pub fn spin_loop_hint() {
    spin_loop()
}
80024684:	03e00008 	jr	ra
80024688:	00000000 	nop

8002468c <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE>:
unsafe fn atomic_compare_exchange<T: Copy>(
8002468c:	27bdff60 	addiu	sp,sp,-160
80024690:	afbf009c 	sw	ra,156(sp)
80024694:	afa60030 	sw	a2,48(sp)
80024698:	afa50034 	sw	a1,52(sp)
8002469c:	afa40038 	sw	a0,56(sp)
800246a0:	8fa100b0 	lw	at,176(sp)
800246a4:	afa40084 	sw	a0,132(sp)
800246a8:	afa50088 	sw	a1,136(sp)
800246ac:	afa6008c 	sw	a2,140(sp)
800246b0:	a3a70092 	sb	a3,146(sp)
800246b4:	a3a10093 	sb	at,147(sp)
        match (success, failure) {
800246b8:	a3a70052 	sb	a3,82(sp)
800246bc:	a3a10053 	sb	at,83(sp)
800246c0:	93a10052 	lbu	at,82(sp)
800246c4:	afa1003c 	sw	at,60(sp)
800246c8:	8fa1003c 	lw	at,60(sp)
800246cc:	00010880 	sll	at,at,0x2
800246d0:	3c028105 	lui	v0,0x8105
800246d4:	00220821 	addu	at,at,v0
800246d8:	8c21c038 	lw	at,-16328(at)
800246dc:	00200008 	jr	at
800246e0:	00000000 	nop
800246e4:	0000000d 	break
800246e8:	93a10053 	lbu	at,83(sp)
800246ec:	afa1002c 	sw	at,44(sp)
800246f0:	1020005d 	beqz	at,80024868 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x1dc>
800246f4:	00000000 	nop
800246f8:	080091c0 	j	80024700 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x74>
800246fc:	00000000 	nop
80024700:	8fa1002c 	lw	at,44(sp)
80024704:	24020002 	li	v0,2
80024708:	10220068 	beq	at,v0,800248ac <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x220>
8002470c:	00000000 	nop
80024710:	080091c6 	j	80024718 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x8c>
80024714:	00000000 	nop
80024718:	8fa1002c 	lw	at,44(sp)
8002471c:	24020004 	li	v0,4
80024720:	10220074 	beq	at,v0,800248f4 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x268>
80024724:	00000000 	nop
80024728:	08009214 	j	80024850 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x1c4>
8002472c:	00000000 	nop
80024730:	93a10053 	lbu	at,83(sp)
80024734:	afa10028 	sw	at,40(sp)
80024738:	1020008b 	beqz	at,80024968 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2dc>
8002473c:	00000000 	nop
80024740:	080091d2 	j	80024748 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0xbc>
80024744:	00000000 	nop
80024748:	8fa10028 	lw	at,40(sp)
8002474c:	24020002 	li	v0,2
80024750:	10220097 	beq	at,v0,800249b0 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x324>
80024754:	00000000 	nop
80024758:	080091d8 	j	80024760 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0xd4>
8002475c:	00000000 	nop
80024760:	8fa10028 	lw	at,40(sp)
80024764:	24020004 	li	v0,4
80024768:	102200a4 	beq	at,v0,800249fc <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x370>
8002476c:	00000000 	nop
80024770:	08009214 	j	80024850 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x1c4>
80024774:	00000000 	nop
80024778:	93a10053 	lbu	at,83(sp)
8002477c:	afa10024 	sw	at,36(sp)
80024780:	102000b1 	beqz	at,80024a48 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x3bc>
80024784:	00000000 	nop
80024788:	080091e4 	j	80024790 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x104>
8002478c:	00000000 	nop
80024790:	8fa10024 	lw	at,36(sp)
80024794:	24020002 	li	v0,2
80024798:	102200bd 	beq	at,v0,80024a90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x404>
8002479c:	00000000 	nop
800247a0:	080091ea 	j	800247a8 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x11c>
800247a4:	00000000 	nop
800247a8:	8fa10024 	lw	at,36(sp)
800247ac:	24020004 	li	v0,4
800247b0:	102200c9 	beq	at,v0,80024ad8 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x44c>
800247b4:	00000000 	nop
800247b8:	08009214 	j	80024850 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x1c4>
800247bc:	00000000 	nop
800247c0:	93a10053 	lbu	at,83(sp)
800247c4:	afa10020 	sw	at,32(sp)
800247c8:	102000d6 	beqz	at,80024b24 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x498>
800247cc:	00000000 	nop
800247d0:	080091f6 	j	800247d8 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x14c>
800247d4:	00000000 	nop
800247d8:	8fa10020 	lw	at,32(sp)
800247dc:	24020002 	li	v0,2
800247e0:	102200e3 	beq	at,v0,80024b70 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x4e4>
800247e4:	00000000 	nop
800247e8:	080091fc 	j	800247f0 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x164>
800247ec:	00000000 	nop
800247f0:	8fa10020 	lw	at,32(sp)
800247f4:	24020004 	li	v0,4
800247f8:	102200f0 	beq	at,v0,80024bbc <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x530>
800247fc:	00000000 	nop
80024800:	08009214 	j	80024850 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x1c4>
80024804:	00000000 	nop
80024808:	93a10053 	lbu	at,83(sp)
8002480c:	afa1001c 	sw	at,28(sp)
80024810:	102000fd 	beqz	at,80024c08 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x57c>
80024814:	00000000 	nop
80024818:	08009208 	j	80024820 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x194>
8002481c:	00000000 	nop
80024820:	8fa1001c 	lw	at,28(sp)
80024824:	24020002 	li	v0,2
80024828:	1022010a 	beq	at,v0,80024c54 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x5c8>
8002482c:	00000000 	nop
80024830:	0800920e 	j	80024838 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x1ac>
80024834:	00000000 	nop
80024838:	8fa1001c 	lw	at,28(sp)
8002483c:	24020004 	li	v0,4
80024840:	10220117 	beq	at,v0,80024ca0 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x614>
80024844:	00000000 	nop
80024848:	08009214 	j	80024850 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x1c4>
8002484c:	00000000 	nop
80024850:	93a10053 	lbu	at,83(sp)
80024854:	24020001 	li	v0,1
80024858:	10220135 	beq	at,v0,80024d30 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x6a4>
8002485c:	00000000 	nop
80024860:	08009358 	j	80024d60 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x6d4>
80024864:	00000000 	nop
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed_relaxed(dst, old, new),
80024868:	8fa10034 	lw	at,52(sp)
8002486c:	8fa60030 	lw	a2,48(sp)
80024870:	8fa40038 	lw	a0,56(sp)
80024874:	00202825 	move	a1,at
80024878:	c0820000 	ll	v0,0(a0)
8002487c:	14450005 	bne	v0,a1,80024894 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x208>
80024880:	00000000 	nop
80024884:	00c01825 	move	v1,a2
80024888:	e0830000 	sc	v1,0(a0)
8002488c:	1060fffa 	beqz	v1,80024878 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x1ec>
80024890:	00000000 	nop
80024894:	00410826 	xor	at,v0,at
80024898:	2c210001 	sltiu	at,at,1
8002489c:	afa20048 	sw	v0,72(sp)
800248a0:	a3a1004c 	sb	at,76(sp)
800248a4:	08009250 	j	80024940 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2b4>
800248a8:	00000000 	nop
            (Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),
800248ac:	8fa10034 	lw	at,52(sp)
800248b0:	8fa60030 	lw	a2,48(sp)
800248b4:	8fa40038 	lw	a0,56(sp)
800248b8:	00202825 	move	a1,at
800248bc:	c0820000 	ll	v0,0(a0)
800248c0:	14450005 	bne	v0,a1,800248d8 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x24c>
800248c4:	00000000 	nop
800248c8:	00c01825 	move	v1,a2
800248cc:	e0830000 	sc	v1,0(a0)
800248d0:	1060fffa 	beqz	v1,800248bc <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x230>
800248d4:	00000000 	nop
800248d8:	00410826 	xor	at,v0,at
800248dc:	2c210001 	sltiu	at,at,1
800248e0:	0000000f 	sync
800248e4:	afa20048 	sw	v0,72(sp)
800248e8:	a3a1004c 	sb	at,76(sp)
800248ec:	08009250 	j	80024940 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2b4>
800248f0:	00000000 	nop
            (Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),
800248f4:	8fa10034 	lw	at,52(sp)
800248f8:	8fa60030 	lw	a2,48(sp)
800248fc:	8fa40038 	lw	a0,56(sp)
80024900:	0000000f 	sync
80024904:	00202825 	move	a1,at
80024908:	c0820000 	ll	v0,0(a0)
8002490c:	14450005 	bne	v0,a1,80024924 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x298>
80024910:	00000000 	nop
80024914:	00c01825 	move	v1,a2
80024918:	e0830000 	sc	v1,0(a0)
8002491c:	1060fffa 	beqz	v1,80024908 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x27c>
80024920:	00000000 	nop
80024924:	00410826 	xor	at,v0,at
80024928:	2c210001 	sltiu	at,at,1
8002492c:	0000000f 	sync
80024930:	afa20048 	sw	v0,72(sp)
80024934:	a3a1004c 	sb	at,76(sp)
80024938:	08009250 	j	80024940 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2b4>
8002493c:	00000000 	nop
    let (val, ok) = unsafe {
80024940:	8fa10048 	lw	at,72(sp)
80024944:	afa10018 	sw	at,24(sp)
80024948:	afa10094 	sw	at,148(sp)
8002494c:	93a1004c 	lbu	at,76(sp)
80024950:	30210001 	andi	at,at,0x1
80024954:	a3a1009b 	sb	at,155(sp)
    if ok { Ok(val) } else { Err(val) }
80024958:	142000ea 	bnez	at,80024d04 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x678>
8002495c:	00000000 	nop
80024960:	0800933b 	j	80024cec <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x660>
80024964:	00000000 	nop
            (Release, Relaxed) => intrinsics::atomic_cxchg_release_relaxed(dst, old, new),
80024968:	8fa10034 	lw	at,52(sp)
8002496c:	8fa60030 	lw	a2,48(sp)
80024970:	8fa40038 	lw	a0,56(sp)
80024974:	0000000f 	sync
80024978:	00202825 	move	a1,at
8002497c:	c0820000 	ll	v0,0(a0)
80024980:	14450005 	bne	v0,a1,80024998 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x30c>
80024984:	00000000 	nop
80024988:	00c01825 	move	v1,a2
8002498c:	e0830000 	sc	v1,0(a0)
80024990:	1060fffa 	beqz	v1,8002497c <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2f0>
80024994:	00000000 	nop
80024998:	00410826 	xor	at,v0,at
8002499c:	2c210001 	sltiu	at,at,1
800249a0:	afa20048 	sw	v0,72(sp)
800249a4:	a3a1004c 	sb	at,76(sp)
800249a8:	08009250 	j	80024940 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2b4>
800249ac:	00000000 	nop
            (Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),
800249b0:	8fa10034 	lw	at,52(sp)
800249b4:	8fa60030 	lw	a2,48(sp)
800249b8:	8fa40038 	lw	a0,56(sp)
800249bc:	0000000f 	sync
800249c0:	00202825 	move	a1,at
800249c4:	c0820000 	ll	v0,0(a0)
800249c8:	14450005 	bne	v0,a1,800249e0 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x354>
800249cc:	00000000 	nop
800249d0:	00c01825 	move	v1,a2
800249d4:	e0830000 	sc	v1,0(a0)
800249d8:	1060fffa 	beqz	v1,800249c4 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x338>
800249dc:	00000000 	nop
800249e0:	00410826 	xor	at,v0,at
800249e4:	2c210001 	sltiu	at,at,1
800249e8:	0000000f 	sync
800249ec:	afa20048 	sw	v0,72(sp)
800249f0:	a3a1004c 	sb	at,76(sp)
800249f4:	08009250 	j	80024940 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2b4>
800249f8:	00000000 	nop
            (Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),
800249fc:	8fa10034 	lw	at,52(sp)
80024a00:	8fa60030 	lw	a2,48(sp)
80024a04:	8fa40038 	lw	a0,56(sp)
80024a08:	0000000f 	sync
80024a0c:	00202825 	move	a1,at
80024a10:	c0820000 	ll	v0,0(a0)
80024a14:	14450005 	bne	v0,a1,80024a2c <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x3a0>
80024a18:	00000000 	nop
80024a1c:	00c01825 	move	v1,a2
80024a20:	e0830000 	sc	v1,0(a0)
80024a24:	1060fffa 	beqz	v1,80024a10 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x384>
80024a28:	00000000 	nop
80024a2c:	00410826 	xor	at,v0,at
80024a30:	2c210001 	sltiu	at,at,1
80024a34:	0000000f 	sync
80024a38:	afa20048 	sw	v0,72(sp)
80024a3c:	a3a1004c 	sb	at,76(sp)
80024a40:	08009250 	j	80024940 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2b4>
80024a44:	00000000 	nop
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),
80024a48:	8fa10034 	lw	at,52(sp)
80024a4c:	8fa60030 	lw	a2,48(sp)
80024a50:	8fa40038 	lw	a0,56(sp)
80024a54:	00202825 	move	a1,at
80024a58:	c0820000 	ll	v0,0(a0)
80024a5c:	14450005 	bne	v0,a1,80024a74 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x3e8>
80024a60:	00000000 	nop
80024a64:	00c01825 	move	v1,a2
80024a68:	e0830000 	sc	v1,0(a0)
80024a6c:	1060fffa 	beqz	v1,80024a58 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x3cc>
80024a70:	00000000 	nop
80024a74:	00410826 	xor	at,v0,at
80024a78:	2c210001 	sltiu	at,at,1
80024a7c:	0000000f 	sync
80024a80:	afa20048 	sw	v0,72(sp)
80024a84:	a3a1004c 	sb	at,76(sp)
80024a88:	08009250 	j	80024940 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2b4>
80024a8c:	00000000 	nop
            (Acquire, Acquire) => intrinsics::atomic_cxchg_acquire_acquire(dst, old, new),
80024a90:	8fa10034 	lw	at,52(sp)
80024a94:	8fa60030 	lw	a2,48(sp)
80024a98:	8fa40038 	lw	a0,56(sp)
80024a9c:	00202825 	move	a1,at
80024aa0:	c0820000 	ll	v0,0(a0)
80024aa4:	14450005 	bne	v0,a1,80024abc <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x430>
80024aa8:	00000000 	nop
80024aac:	00c01825 	move	v1,a2
80024ab0:	e0830000 	sc	v1,0(a0)
80024ab4:	1060fffa 	beqz	v1,80024aa0 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x414>
80024ab8:	00000000 	nop
80024abc:	00410826 	xor	at,v0,at
80024ac0:	2c210001 	sltiu	at,at,1
80024ac4:	0000000f 	sync
80024ac8:	afa20048 	sw	v0,72(sp)
80024acc:	a3a1004c 	sb	at,76(sp)
80024ad0:	08009250 	j	80024940 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2b4>
80024ad4:	00000000 	nop
            (Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),
80024ad8:	8fa10034 	lw	at,52(sp)
80024adc:	8fa60030 	lw	a2,48(sp)
80024ae0:	8fa40038 	lw	a0,56(sp)
80024ae4:	0000000f 	sync
80024ae8:	00202825 	move	a1,at
80024aec:	c0820000 	ll	v0,0(a0)
80024af0:	14450005 	bne	v0,a1,80024b08 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x47c>
80024af4:	00000000 	nop
80024af8:	00c01825 	move	v1,a2
80024afc:	e0830000 	sc	v1,0(a0)
80024b00:	1060fffa 	beqz	v1,80024aec <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x460>
80024b04:	00000000 	nop
80024b08:	00410826 	xor	at,v0,at
80024b0c:	2c210001 	sltiu	at,at,1
80024b10:	0000000f 	sync
80024b14:	afa20048 	sw	v0,72(sp)
80024b18:	a3a1004c 	sb	at,76(sp)
80024b1c:	08009250 	j	80024940 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2b4>
80024b20:	00000000 	nop
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_relaxed(dst, old, new),
80024b24:	8fa10034 	lw	at,52(sp)
80024b28:	8fa60030 	lw	a2,48(sp)
80024b2c:	8fa40038 	lw	a0,56(sp)
80024b30:	0000000f 	sync
80024b34:	00202825 	move	a1,at
80024b38:	c0820000 	ll	v0,0(a0)
80024b3c:	14450005 	bne	v0,a1,80024b54 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x4c8>
80024b40:	00000000 	nop
80024b44:	00c01825 	move	v1,a2
80024b48:	e0830000 	sc	v1,0(a0)
80024b4c:	1060fffa 	beqz	v1,80024b38 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x4ac>
80024b50:	00000000 	nop
80024b54:	00410826 	xor	at,v0,at
80024b58:	2c210001 	sltiu	at,at,1
80024b5c:	0000000f 	sync
80024b60:	afa20048 	sw	v0,72(sp)
80024b64:	a3a1004c 	sb	at,76(sp)
80024b68:	08009250 	j	80024940 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2b4>
80024b6c:	00000000 	nop
            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel_acquire(dst, old, new),
80024b70:	8fa10034 	lw	at,52(sp)
80024b74:	8fa60030 	lw	a2,48(sp)
80024b78:	8fa40038 	lw	a0,56(sp)
80024b7c:	0000000f 	sync
80024b80:	00202825 	move	a1,at
80024b84:	c0820000 	ll	v0,0(a0)
80024b88:	14450005 	bne	v0,a1,80024ba0 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x514>
80024b8c:	00000000 	nop
80024b90:	00c01825 	move	v1,a2
80024b94:	e0830000 	sc	v1,0(a0)
80024b98:	1060fffa 	beqz	v1,80024b84 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x4f8>
80024b9c:	00000000 	nop
80024ba0:	00410826 	xor	at,v0,at
80024ba4:	2c210001 	sltiu	at,at,1
80024ba8:	0000000f 	sync
80024bac:	afa20048 	sw	v0,72(sp)
80024bb0:	a3a1004c 	sb	at,76(sp)
80024bb4:	08009250 	j	80024940 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2b4>
80024bb8:	00000000 	nop
            (AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),
80024bbc:	8fa10034 	lw	at,52(sp)
80024bc0:	8fa60030 	lw	a2,48(sp)
80024bc4:	8fa40038 	lw	a0,56(sp)
80024bc8:	0000000f 	sync
80024bcc:	00202825 	move	a1,at
80024bd0:	c0820000 	ll	v0,0(a0)
80024bd4:	14450005 	bne	v0,a1,80024bec <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x560>
80024bd8:	00000000 	nop
80024bdc:	00c01825 	move	v1,a2
80024be0:	e0830000 	sc	v1,0(a0)
80024be4:	1060fffa 	beqz	v1,80024bd0 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x544>
80024be8:	00000000 	nop
80024bec:	00410826 	xor	at,v0,at
80024bf0:	2c210001 	sltiu	at,at,1
80024bf4:	0000000f 	sync
80024bf8:	afa20048 	sw	v0,72(sp)
80024bfc:	a3a1004c 	sb	at,76(sp)
80024c00:	08009250 	j	80024940 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2b4>
80024c04:	00000000 	nop
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_seqcst_relaxed(dst, old, new),
80024c08:	8fa10034 	lw	at,52(sp)
80024c0c:	8fa60030 	lw	a2,48(sp)
80024c10:	8fa40038 	lw	a0,56(sp)
80024c14:	0000000f 	sync
80024c18:	00202825 	move	a1,at
80024c1c:	c0820000 	ll	v0,0(a0)
80024c20:	14450005 	bne	v0,a1,80024c38 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x5ac>
80024c24:	00000000 	nop
80024c28:	00c01825 	move	v1,a2
80024c2c:	e0830000 	sc	v1,0(a0)
80024c30:	1060fffa 	beqz	v1,80024c1c <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x590>
80024c34:	00000000 	nop
80024c38:	00410826 	xor	at,v0,at
80024c3c:	2c210001 	sltiu	at,at,1
80024c40:	0000000f 	sync
80024c44:	afa20048 	sw	v0,72(sp)
80024c48:	a3a1004c 	sb	at,76(sp)
80024c4c:	08009250 	j	80024940 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2b4>
80024c50:	00000000 	nop
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_seqcst_acquire(dst, old, new),
80024c54:	8fa10034 	lw	at,52(sp)
80024c58:	8fa60030 	lw	a2,48(sp)
80024c5c:	8fa40038 	lw	a0,56(sp)
80024c60:	0000000f 	sync
80024c64:	00202825 	move	a1,at
80024c68:	c0820000 	ll	v0,0(a0)
80024c6c:	14450005 	bne	v0,a1,80024c84 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x5f8>
80024c70:	00000000 	nop
80024c74:	00c01825 	move	v1,a2
80024c78:	e0830000 	sc	v1,0(a0)
80024c7c:	1060fffa 	beqz	v1,80024c68 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x5dc>
80024c80:	00000000 	nop
80024c84:	00410826 	xor	at,v0,at
80024c88:	2c210001 	sltiu	at,at,1
80024c8c:	0000000f 	sync
80024c90:	afa20048 	sw	v0,72(sp)
80024c94:	a3a1004c 	sb	at,76(sp)
80024c98:	08009250 	j	80024940 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2b4>
80024c9c:	00000000 	nop
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg_seqcst_seqcst(dst, old, new),
80024ca0:	8fa10034 	lw	at,52(sp)
80024ca4:	8fa60030 	lw	a2,48(sp)
80024ca8:	8fa40038 	lw	a0,56(sp)
80024cac:	0000000f 	sync
80024cb0:	00202825 	move	a1,at
80024cb4:	c0820000 	ll	v0,0(a0)
80024cb8:	14450005 	bne	v0,a1,80024cd0 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x644>
80024cbc:	00000000 	nop
80024cc0:	00c01825 	move	v1,a2
80024cc4:	e0830000 	sc	v1,0(a0)
80024cc8:	1060fffa 	beqz	v1,80024cb4 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x628>
80024ccc:	00000000 	nop
80024cd0:	00410826 	xor	at,v0,at
80024cd4:	2c210001 	sltiu	at,at,1
80024cd8:	0000000f 	sync
80024cdc:	afa20048 	sw	v0,72(sp)
80024ce0:	a3a1004c 	sb	at,76(sp)
80024ce4:	08009250 	j	80024940 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x2b4>
80024ce8:	00000000 	nop
    if ok { Ok(val) } else { Err(val) }
80024cec:	8fa10018 	lw	at,24(sp)
80024cf0:	afa10044 	sw	at,68(sp)
80024cf4:	24010001 	li	at,1
80024cf8:	afa10040 	sw	at,64(sp)
80024cfc:	08009346 	j	80024d18 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x68c>
80024d00:	00000000 	nop
80024d04:	8fa10018 	lw	at,24(sp)
80024d08:	afa10044 	sw	at,68(sp)
80024d0c:	afa00040 	sw	zero,64(sp)
80024d10:	08009346 	j	80024d18 <_ZN4core4sync6atomic23atomic_compare_exchange17ha41b1635049181aaE+0x68c>
80024d14:	00000000 	nop
}
80024d18:	8fa20040 	lw	v0,64(sp)
80024d1c:	8fa30044 	lw	v1,68(sp)
80024d20:	8fbf009c 	lw	ra,156(sp)
80024d24:	27bd00a0 	addiu	sp,sp,160
80024d28:	03e00008 	jr	ra
80024d2c:	00000000 	nop
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
80024d30:	3c018105 	lui	at,0x8105
80024d34:	2425c958 	addiu	a1,at,-13992
80024d38:	27a4006c 	addiu	a0,sp,108
80024d3c:	afa40014 	sw	a0,20(sp)
80024d40:	24060001 	li	a2,1
80024d44:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
80024d48:	00000000 	nop
80024d4c:	8fa40014 	lw	a0,20(sp)
80024d50:	3c018105 	lui	at,0x8105
80024d54:	2425c9d4 	addiu	a1,at,-13868
80024d58:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80024d5c:	00000000 	nop
            (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
80024d60:	3c018105 	lui	at,0x8105
80024d64:	2425ca24 	addiu	a1,at,-13788
80024d68:	27a40054 	addiu	a0,sp,84
80024d6c:	afa40010 	sw	a0,16(sp)
80024d70:	24060001 	li	a2,1
80024d74:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
80024d78:	00000000 	nop
80024d7c:	8fa40010 	lw	a0,16(sp)
80024d80:	3c018105 	lui	at,0x8105
80024d84:	2425ca2c 	addiu	a1,at,-13780
80024d88:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80024d8c:	00000000 	nop

80024d90 <_ZN4core4sync6atomic26strongest_failure_ordering17h66ecb62ee01f3ac5E>:
fn strongest_failure_ordering(order: Ordering) -> Ordering {
80024d90:	27bdfff8 	addiu	sp,sp,-8
80024d94:	a3a40006 	sb	a0,6(sp)
    match order {
80024d98:	93a10006 	lbu	at,6(sp)
80024d9c:	afa10000 	sw	at,0(sp)
80024da0:	8fa10000 	lw	at,0(sp)
80024da4:	00010880 	sll	at,at,0x2
80024da8:	3c028105 	lui	v0,0x8105
80024dac:	00220821 	addu	at,at,v0
80024db0:	8c21c04c 	lw	at,-16308(at)
80024db4:	00200008 	jr	at
80024db8:	00000000 	nop
80024dbc:	0000000d 	break
80024dc0:	24010000 	li	at,0
        Relaxed => Relaxed,
80024dc4:	a3a00007 	sb	zero,7(sp)
80024dc8:	08009384 	j	80024e10 <_ZN4core4sync6atomic26strongest_failure_ordering17h66ecb62ee01f3ac5E+0x80>
80024dcc:	00000000 	nop
80024dd0:	24010000 	li	at,0
        Release => Relaxed,
80024dd4:	a3a00007 	sb	zero,7(sp)
80024dd8:	08009384 	j	80024e10 <_ZN4core4sync6atomic26strongest_failure_ordering17h66ecb62ee01f3ac5E+0x80>
80024ddc:	00000000 	nop
80024de0:	24010002 	li	at,2
        Acquire => Acquire,
80024de4:	a3a10007 	sb	at,7(sp)
80024de8:	08009384 	j	80024e10 <_ZN4core4sync6atomic26strongest_failure_ordering17h66ecb62ee01f3ac5E+0x80>
80024dec:	00000000 	nop
80024df0:	24010002 	li	at,2
        AcqRel => Acquire,
80024df4:	a3a10007 	sb	at,7(sp)
80024df8:	08009384 	j	80024e10 <_ZN4core4sync6atomic26strongest_failure_ordering17h66ecb62ee01f3ac5E+0x80>
80024dfc:	00000000 	nop
80024e00:	24010004 	li	at,4
        SeqCst => SeqCst,
80024e04:	a3a10007 	sb	at,7(sp)
80024e08:	08009384 	j	80024e10 <_ZN4core4sync6atomic26strongest_failure_ordering17h66ecb62ee01f3ac5E+0x80>
80024e0c:	00000000 	nop
}
80024e10:	93a20007 	lbu	v0,7(sp)
80024e14:	27bd0008 	addiu	sp,sp,8
80024e18:	03e00008 	jr	ra
80024e1c:	00000000 	nop

80024e20 <_ZN4core4sync6atomic5fence17h52296e36b6387b6dE>:
pub fn fence(order: Ordering) {
80024e20:	27bdffc8 	addiu	sp,sp,-56
80024e24:	afbf0034 	sw	ra,52(sp)
80024e28:	a3a4001b 	sb	a0,27(sp)
        match order {
80024e2c:	93a1001b 	lbu	at,27(sp)
80024e30:	afa10014 	sw	at,20(sp)
80024e34:	8fa10014 	lw	at,20(sp)
80024e38:	00010880 	sll	at,at,0x2
80024e3c:	3c028105 	lui	v0,0x8105
80024e40:	00220821 	addu	at,at,v0
80024e44:	8c21c060 	lw	at,-16288(at)
80024e48:	00200008 	jr	at
80024e4c:	00000000 	nop
80024e50:	0000000d 	break
            Relaxed => panic!("there is no such thing as a relaxed fence"),
80024e54:	3c018105 	lui	at,0x8105
80024e58:	2425ca68 	addiu	a1,at,-13720
80024e5c:	27a4001c 	addiu	a0,sp,28
80024e60:	afa40010 	sw	a0,16(sp)
80024e64:	24060001 	li	a2,1
80024e68:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
80024e6c:	00000000 	nop
80024e70:	8fa40010 	lw	a0,16(sp)
80024e74:	3c018105 	lui	at,0x8105
80024e78:	2425ca70 	addiu	a1,at,-13712
80024e7c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80024e80:	00000000 	nop
            Release => intrinsics::atomic_fence_release(),
80024e84:	0000000f 	sync
80024e88:	080093ad 	j	80024eb4 <_ZN4core4sync6atomic5fence17h52296e36b6387b6dE+0x94>
80024e8c:	00000000 	nop
            Acquire => intrinsics::atomic_fence_acquire(),
80024e90:	0000000f 	sync
80024e94:	080093ad 	j	80024eb4 <_ZN4core4sync6atomic5fence17h52296e36b6387b6dE+0x94>
80024e98:	00000000 	nop
            AcqRel => intrinsics::atomic_fence_acqrel(),
80024e9c:	0000000f 	sync
80024ea0:	080093ad 	j	80024eb4 <_ZN4core4sync6atomic5fence17h52296e36b6387b6dE+0x94>
80024ea4:	00000000 	nop
            SeqCst => intrinsics::atomic_fence_seqcst(),
80024ea8:	0000000f 	sync
80024eac:	080093ad 	j	80024eb4 <_ZN4core4sync6atomic5fence17h52296e36b6387b6dE+0x94>
80024eb0:	00000000 	nop
}
80024eb4:	8fbf0034 	lw	ra,52(sp)
80024eb8:	27bd0038 	addiu	sp,sp,56
80024ebc:	03e00008 	jr	ra
80024ec0:	00000000 	nop

80024ec4 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h247250169fbc7b0aE>:
    /// allocation error are encouraged to call the [`handle_alloc_error`] function,
    /// rather than directly invoking `panic!` or similar.
    ///
    /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html
    #[stable(feature = "global_alloc", since = "1.28.0")]
    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
80024ec4:	27bdffc0 	addiu	sp,sp,-64
80024ec8:	afbf003c 	sw	ra,60(sp)
80024ecc:	afa40010 	sw	a0,16(sp)
80024ed0:	afa5001c 	sw	a1,28(sp)
80024ed4:	afa60020 	sw	a2,32(sp)
80024ed8:	afa40024 	sw	a0,36(sp)
80024edc:	27a4001c 	addiu	a0,sp,28
        let size = layout.size();
80024ee0:	0c009495 	jal	80025254 <_ZN4core5alloc6layout6Layout4size17h270752b9ab6d7566E>
80024ee4:	00000000 	nop
80024ee8:	8fa40010 	lw	a0,16(sp)
80024eec:	00400825 	move	at,v0
80024ef0:	afa10014 	sw	at,20(sp)
80024ef4:	afa20028 	sw	v0,40(sp)
        // SAFETY: the safety contract for `alloc` must be upheld by the caller.
        let ptr = unsafe { self.alloc(layout) };
80024ef8:	8fa5001c 	lw	a1,28(sp)
80024efc:	8fa60020 	lw	a2,32(sp)
80024f00:	0c00d9bd 	jal	800366f4 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E>
80024f04:	00000000 	nop
80024f08:	00402025 	move	a0,v0
80024f0c:	00801025 	move	v0,a0
80024f10:	afa20018 	sw	v0,24(sp)
80024f14:	afa4002c 	sw	a0,44(sp)
        if !ptr.is_null() {
80024f18:	0c00dd28 	jal	800374a0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h15051cef55498a68E>
80024f1c:	00000000 	nop
80024f20:	1440001c 	bnez	v0,80024f94 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h247250169fbc7b0aE+0xd0>
80024f24:	00000000 	nop
80024f28:	080093cc 	j	80024f30 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h247250169fbc7b0aE+0x6c>
80024f2c:	00000000 	nop
80024f30:	8fa10014 	lw	at,20(sp)
80024f34:	8fa20018 	lw	v0,24(sp)
80024f38:	afa20030 	sw	v0,48(sp)
80024f3c:	24020000 	li	v0,0
80024f40:	a3a00037 	sb	zero,55(sp)
80024f44:	afa10038 	sw	at,56(sp)
        ub_checks::assert_unsafe_precondition!(
80024f48:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80024f4c:	00000000 	nop
80024f50:	10400009 	beqz	v0,80024f78 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h247250169fbc7b0aE+0xb4>
80024f54:	00000000 	nop
80024f58:	080093d8 	j	80024f60 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h247250169fbc7b0aE+0x9c>
80024f5c:	00000000 	nop
80024f60:	8fa40018 	lw	a0,24(sp)
80024f64:	24050001 	li	a1,1
80024f68:	0c008203 	jal	8002080c <_ZN4core10intrinsics11write_bytes18precondition_check17h3c18faa4f54e35eaE>
80024f6c:	00000000 	nop
80024f70:	080093de 	j	80024f78 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h247250169fbc7b0aE+0xb4>
80024f74:	00000000 	nop
        );
        write_bytes(dst, val, count)
80024f78:	8fa60014 	lw	a2,20(sp)
80024f7c:	8fa40018 	lw	a0,24(sp)
80024f80:	24050000 	li	a1,0
80024f84:	0c00d47d 	jal	800351f4 <memset>
80024f88:	00000000 	nop
            // SAFETY: as allocation succeeded, the region from `ptr`
            // of size `size` is guaranteed to be valid for writes.
            unsafe { ptr::write_bytes(ptr, 0, size) };
80024f8c:	080093e5 	j	80024f94 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h247250169fbc7b0aE+0xd0>
80024f90:	00000000 	nop
        }
        ptr
    }
80024f94:	8fa20018 	lw	v0,24(sp)
80024f98:	8fbf003c 	lw	ra,60(sp)
80024f9c:	27bd0040 	addiu	sp,sp,64
80024fa0:	03e00008 	jr	ra
80024fa4:	00000000 	nop

80024fa8 <_ZN4core5alloc6global11GlobalAlloc7realloc17h0be37c6890403ee7E>:
    /// reallocation error are encouraged to call the [`handle_alloc_error`] function,
    /// rather than directly invoking `panic!` or similar.
    ///
    /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html
    #[stable(feature = "global_alloc", since = "1.28.0")]
    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
80024fa8:	27bdffa8 	addiu	sp,sp,-88
80024fac:	afbf0054 	sw	ra,84(sp)
80024fb0:	afa5001c 	sw	a1,28(sp)
80024fb4:	afa40024 	sw	a0,36(sp)
80024fb8:	8fa10068 	lw	at,104(sp)
80024fbc:	afa10020 	sw	at,32(sp)
80024fc0:	afa6002c 	sw	a2,44(sp)
80024fc4:	afa70030 	sw	a3,48(sp)
80024fc8:	afa40034 	sw	a0,52(sp)
80024fcc:	afa50038 	sw	a1,56(sp)
80024fd0:	27a4002c 	addiu	a0,sp,44
        // SAFETY: the caller must ensure that the `new_size` does not overflow.
        // `layout.align()` comes from a `Layout` and is thus guaranteed to be valid.
        let new_layout = unsafe { Layout::from_size_align_unchecked(new_size, layout.align()) };
80024fd4:	0c00949b 	jal	8002526c <_ZN4core5alloc6layout6Layout5align17h1bc961b149ce744fE>
80024fd8:	00000000 	nop
80024fdc:	8fa40020 	lw	a0,32(sp)
80024fe0:	00402825 	move	a1,v0
80024fe4:	0c009482 	jal	80025208 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3d2659548699448fE>
80024fe8:	00000000 	nop
80024fec:	8fa40024 	lw	a0,36(sp)
80024ff0:	00402825 	move	a1,v0
80024ff4:	00603025 	move	a2,v1
80024ff8:	afa5003c 	sw	a1,60(sp)
80024ffc:	afa60040 	sw	a2,64(sp)
        // SAFETY: the caller must ensure that `new_layout` is greater than zero.
        let new_ptr = unsafe { self.alloc(new_layout) };
80025000:	0c00d9bd 	jal	800366f4 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E>
80025004:	00000000 	nop
80025008:	00402025 	move	a0,v0
8002500c:	00801025 	move	v0,a0
80025010:	afa20028 	sw	v0,40(sp)
80025014:	afa40044 	sw	a0,68(sp)
        if !new_ptr.is_null() {
80025018:	0c00dd28 	jal	800374a0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h15051cef55498a68E>
8002501c:	00000000 	nop
80025020:	1440002f 	bnez	v0,800250e0 <_ZN4core5alloc6global11GlobalAlloc7realloc17h0be37c6890403ee7E+0x138>
80025024:	00000000 	nop
80025028:	0800940c 	j	80025030 <_ZN4core5alloc6global11GlobalAlloc7realloc17h0be37c6890403ee7E+0x88>
8002502c:	00000000 	nop
80025030:	27a4002c 	addiu	a0,sp,44
            // SAFETY: the previously allocated block cannot overlap the newly allocated block.
            // The safety contract for `dealloc` must be upheld by the caller.
            unsafe {
                ptr::copy_nonoverlapping(ptr, new_ptr, cmp::min(layout.size(), new_size));
80025034:	0c009495 	jal	80025254 <_ZN4core5alloc6layout6Layout4size17h270752b9ab6d7566E>
80025038:	00000000 	nop
8002503c:	8fa50020 	lw	a1,32(sp)
80025040:	00402025 	move	a0,v0
80025044:	0c00e91c 	jal	8003a470 <_ZN4core3cmp3min17hec05a35ccdb294eaE>
80025048:	00000000 	nop
8002504c:	8fa3001c 	lw	v1,28(sp)
80025050:	8fa10028 	lw	at,40(sp)
80025054:	00402025 	move	a0,v0
80025058:	afa40018 	sw	a0,24(sp)
8002505c:	afa30048 	sw	v1,72(sp)
80025060:	afa1004c 	sw	at,76(sp)
80025064:	afa20050 	sw	v0,80(sp)
    ub_checks::assert_unsafe_precondition!(
80025068:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
8002506c:	00000000 	nop
80025070:	1040000e 	beqz	v0,800250ac <_ZN4core5alloc6global11GlobalAlloc7realloc17h0be37c6890403ee7E+0x104>
80025074:	00000000 	nop
80025078:	08009420 	j	80025080 <_ZN4core5alloc6global11GlobalAlloc7realloc17h0be37c6890403ee7E+0xd8>
8002507c:	00000000 	nop
80025080:	8fa50028 	lw	a1,40(sp)
80025084:	8fa4001c 	lw	a0,28(sp)
80025088:	8fa10018 	lw	at,24(sp)
8002508c:	03a01025 	move	v0,sp
80025090:	ac410010 	sw	at,16(v0)
80025094:	24070001 	li	a3,1
80025098:	00e03025 	move	a2,a3
8002509c:	0c008216 	jal	80020858 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h14137f51bd67fe62E>
800250a0:	00000000 	nop
800250a4:	0800942b 	j	800250ac <_ZN4core5alloc6global11GlobalAlloc7realloc17h0be37c6890403ee7E+0x104>
800250a8:	00000000 	nop
    unsafe { copy_nonoverlapping(src, dst, count) }
800250ac:	8fa5001c 	lw	a1,28(sp)
800250b0:	8fa60018 	lw	a2,24(sp)
800250b4:	8fa40028 	lw	a0,40(sp)
800250b8:	0c00d3fd 	jal	80034ff4 <memcpy>
800250bc:	00000000 	nop
800250c0:	8fa40024 	lw	a0,36(sp)
800250c4:	8fa5001c 	lw	a1,28(sp)
                self.dealloc(ptr, layout);
800250c8:	8fa6002c 	lw	a2,44(sp)
800250cc:	8fa70030 	lw	a3,48(sp)
800250d0:	0c00da60 	jal	80036980 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h60cbba0684ddd548E>
800250d4:	00000000 	nop
800250d8:	08009438 	j	800250e0 <_ZN4core5alloc6global11GlobalAlloc7realloc17h0be37c6890403ee7E+0x138>
800250dc:	00000000 	nop
            }
        }
        new_ptr
    }
800250e0:	8fa20028 	lw	v0,40(sp)
800250e4:	8fbf0054 	lw	ra,84(sp)
800250e8:	27bd0058 	addiu	sp,sp,88
800250ec:	03e00008 	jr	ra
800250f0:	00000000 	nop

800250f4 <_ZN4core5alloc6layout6Layout13for_value_raw17h3377abc1288301f2E>:
    /// [trait object]: ../../book/ch17-02-trait-objects.html
    /// [extern type]: ../../unstable-book/language-features/extern-types.html
    #[unstable(feature = "layout_for_ptr", issue = "69835")]
    #[rustc_const_unstable(feature = "const_alloc_layout", issue = "67521")]
    #[must_use]
    pub const unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {
800250f4:	27bdffd0 	addiu	sp,sp,-48
800250f8:	afbf002c 	sw	ra,44(sp)
800250fc:	afa40010 	sw	a0,16(sp)
80025100:	afa40020 	sw	a0,32(sp)
        // SAFETY: we pass along the prerequisites of these functions to the caller
        let (size, align) = unsafe { (mem::size_of_val_raw(t), mem::align_of_val_raw(t)) };
80025104:	0c008432 	jal	800210c8 <_ZN4core3mem15size_of_val_raw17he37f3b10432c5920E>
80025108:	00000000 	nop
8002510c:	8fa40010 	lw	a0,16(sp)
80025110:	afa20014 	sw	v0,20(sp)
80025114:	0c00843a 	jal	800210e8 <_ZN4core3mem16align_of_val_raw17h68f77781cf0849f8E>
80025118:	00000000 	nop
8002511c:	8fa10014 	lw	at,20(sp)
80025120:	afa10018 	sw	at,24(sp)
80025124:	afa2001c 	sw	v0,28(sp)
80025128:	8fa40018 	lw	a0,24(sp)
8002512c:	afa40024 	sw	a0,36(sp)
80025130:	8fa5001c 	lw	a1,28(sp)
80025134:	afa50028 	sw	a1,40(sp)
        // SAFETY: see rationale in `new` for why this is using the unsafe variant
        unsafe { Layout::from_size_align_unchecked(size, align) }
80025138:	0c009482 	jal	80025208 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3d2659548699448fE>
8002513c:	00000000 	nop
    }
80025140:	8fbf002c 	lw	ra,44(sp)
80025144:	27bd0030 	addiu	sp,sp,48
80025148:	03e00008 	jr	ra
8002514c:	00000000 	nop

80025150 <_ZN4core5alloc6layout6Layout13for_value_raw17h5c9242bdbd47222eE>:
    pub const unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {
80025150:	27bdffd0 	addiu	sp,sp,-48
80025154:	afbf002c 	sw	ra,44(sp)
80025158:	afa40010 	sw	a0,16(sp)
8002515c:	afa40020 	sw	a0,32(sp)
        let (size, align) = unsafe { (mem::size_of_val_raw(t), mem::align_of_val_raw(t)) };
80025160:	0c00842a 	jal	800210a8 <_ZN4core3mem15size_of_val_raw17h3b3d4bf1ceedee07E>
80025164:	00000000 	nop
80025168:	8fa40010 	lw	a0,16(sp)
8002516c:	afa20014 	sw	v0,20(sp)
80025170:	0c00844a 	jal	80021128 <_ZN4core3mem16align_of_val_raw17hd81d98ba5a3b2e70E>
80025174:	00000000 	nop
80025178:	8fa10014 	lw	at,20(sp)
8002517c:	afa10018 	sw	at,24(sp)
80025180:	afa2001c 	sw	v0,28(sp)
80025184:	8fa40018 	lw	a0,24(sp)
80025188:	afa40024 	sw	a0,36(sp)
8002518c:	8fa5001c 	lw	a1,28(sp)
80025190:	afa50028 	sw	a1,40(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
80025194:	0c009482 	jal	80025208 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3d2659548699448fE>
80025198:	00000000 	nop
    }
8002519c:	8fbf002c 	lw	ra,44(sp)
800251a0:	27bd0030 	addiu	sp,sp,48
800251a4:	03e00008 	jr	ra
800251a8:	00000000 	nop

800251ac <_ZN4core5alloc6layout6Layout13for_value_raw17heac6cb5d649a6702E>:
    pub const unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {
800251ac:	27bdffd0 	addiu	sp,sp,-48
800251b0:	afbf002c 	sw	ra,44(sp)
800251b4:	afa40010 	sw	a0,16(sp)
800251b8:	afa40020 	sw	a0,32(sp)
        let (size, align) = unsafe { (mem::size_of_val_raw(t), mem::align_of_val_raw(t)) };
800251bc:	0c008422 	jal	80021088 <_ZN4core3mem15size_of_val_raw17h0a51d1566e75c9efE>
800251c0:	00000000 	nop
800251c4:	8fa40010 	lw	a0,16(sp)
800251c8:	afa20014 	sw	v0,20(sp)
800251cc:	0c008442 	jal	80021108 <_ZN4core3mem16align_of_val_raw17hb124f5495e3d1a21E>
800251d0:	00000000 	nop
800251d4:	8fa10014 	lw	at,20(sp)
800251d8:	afa10018 	sw	at,24(sp)
800251dc:	afa2001c 	sw	v0,28(sp)
800251e0:	8fa40018 	lw	a0,24(sp)
800251e4:	afa40024 	sw	a0,36(sp)
800251e8:	8fa5001c 	lw	a1,28(sp)
800251ec:	afa50028 	sw	a1,40(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
800251f0:	0c009482 	jal	80025208 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3d2659548699448fE>
800251f4:	00000000 	nop
    }
800251f8:	8fbf002c 	lw	ra,44(sp)
800251fc:	27bd0030 	addiu	sp,sp,48
80025200:	03e00008 	jr	ra
80025204:	00000000 	nop

80025208 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3d2659548699448fE>:
    pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {
80025208:	27bdffd0 	addiu	sp,sp,-48
8002520c:	afbf002c 	sw	ra,44(sp)
80025210:	afa50014 	sw	a1,20(sp)
80025214:	00800825 	move	at,a0
80025218:	8fa40014 	lw	a0,20(sp)
8002521c:	afa10018 	sw	at,24(sp)
80025220:	afa10024 	sw	at,36(sp)
80025224:	afa40028 	sw	a0,40(sp)
        unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
80025228:	0c008d93 	jal	8002364c <_ZN4core3ptr9alignment9Alignment13new_unchecked17h8a9242fc8a1ea23bE>
8002522c:	00000000 	nop
80025230:	8fa40018 	lw	a0,24(sp)
80025234:	afa40020 	sw	a0,32(sp)
80025238:	afa2001c 	sw	v0,28(sp)
    }
8002523c:	8fa2001c 	lw	v0,28(sp)
80025240:	8fa30020 	lw	v1,32(sp)
80025244:	8fbf002c 	lw	ra,44(sp)
80025248:	27bd0030 	addiu	sp,sp,48
8002524c:	03e00008 	jr	ra
80025250:	00000000 	nop

80025254 <_ZN4core5alloc6layout6Layout4size17h270752b9ab6d7566E>:
    pub const fn size(&self) -> usize {
80025254:	27bdfff8 	addiu	sp,sp,-8
80025258:	afa40004 	sw	a0,4(sp)
        self.size
8002525c:	8c820004 	lw	v0,4(a0)
80025260:	27bd0008 	addiu	sp,sp,8
    }
80025264:	03e00008 	jr	ra
80025268:	00000000 	nop

8002526c <_ZN4core5alloc6layout6Layout5align17h1bc961b149ce744fE>:
    pub const fn align(&self) -> usize {
8002526c:	27bdffe8 	addiu	sp,sp,-24
80025270:	afbf0014 	sw	ra,20(sp)
80025274:	afa40010 	sw	a0,16(sp)
        self.align.as_usize()
80025278:	8c840000 	lw	a0,0(a0)
8002527c:	0c008df5 	jal	800237d4 <_ZN4core3ptr9alignment9Alignment8as_usize17hf7cabfadb2806268E>
80025280:	00000000 	nop
    }
80025284:	8fbf0014 	lw	ra,20(sp)
80025288:	27bd0018 	addiu	sp,sp,24
8002528c:	03e00008 	jr	ra
80025290:	00000000 	nop

80025294 <_ZN4core5alloc6layout6Layout5array17h0f7c6a6894c81edfE>:
    /// On arithmetic overflow or when the total size would exceed
    /// `isize::MAX`, returns `LayoutError`.
    #[stable(feature = "alloc_layout_manipulation", since = "1.44.0")]
    #[rustc_const_unstable(feature = "const_alloc_layout", issue = "67521")]
    #[inline]
    pub const fn array<T>(n: usize) -> Result<Self, LayoutError> {
80025294:	27bdffe0 	addiu	sp,sp,-32
80025298:	afbf001c 	sw	ra,28(sp)
8002529c:	afa40014 	sw	a0,20(sp)
800252a0:	afa40018 	sw	a0,24(sp)
        // Reduce the amount of code we need to monomorphize per `T`.
        return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
800252a4:	0c008dd1 	jal	80023744 <_ZN4core3ptr9alignment9Alignment2of17h4e3214a32581e425E>
800252a8:	00000000 	nop
800252ac:	8fa60014 	lw	a2,20(sp)
800252b0:	00402825 	move	a1,v0
800252b4:	24040020 	li	a0,32
800252b8:	0c0094e1 	jal	80025384 <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E>
800252bc:	00000000 	nop
            // SAFETY: We just checked above that the `array_size` will not
            // exceed `isize::MAX` even when rounded up to the alignment.
            // And `Alignment` guarantees it's a power of two.
            unsafe { Ok(Layout::from_size_align_unchecked(array_size, align.as_usize())) }
        }
    }
800252c0:	8fbf001c 	lw	ra,28(sp)
800252c4:	27bd0020 	addiu	sp,sp,32
800252c8:	03e00008 	jr	ra
800252cc:	00000000 	nop

800252d0 <_ZN4core5alloc6layout6Layout5array17h1e9b0c18ea3b3058E>:
    pub const fn array<T>(n: usize) -> Result<Self, LayoutError> {
800252d0:	27bdffe0 	addiu	sp,sp,-32
800252d4:	afbf001c 	sw	ra,28(sp)
800252d8:	afa40014 	sw	a0,20(sp)
800252dc:	afa40018 	sw	a0,24(sp)
        return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
800252e0:	0c008de3 	jal	8002378c <_ZN4core3ptr9alignment9Alignment2of17hd184d9b73f3da3e0E>
800252e4:	00000000 	nop
800252e8:	8fa60014 	lw	a2,20(sp)
800252ec:	00402825 	move	a1,v0
800252f0:	24040004 	li	a0,4
800252f4:	0c0094e1 	jal	80025384 <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E>
800252f8:	00000000 	nop
    }
800252fc:	8fbf001c 	lw	ra,28(sp)
80025300:	27bd0020 	addiu	sp,sp,32
80025304:	03e00008 	jr	ra
80025308:	00000000 	nop

8002530c <_ZN4core5alloc6layout6Layout5array17h7dcbab5d4b0b8936E>:
    pub const fn array<T>(n: usize) -> Result<Self, LayoutError> {
8002530c:	27bdffe0 	addiu	sp,sp,-32
80025310:	afbf001c 	sw	ra,28(sp)
80025314:	afa40014 	sw	a0,20(sp)
80025318:	afa40018 	sw	a0,24(sp)
        return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
8002531c:	0c008dec 	jal	800237b0 <_ZN4core3ptr9alignment9Alignment2of17hd9a420f531935417E>
80025320:	00000000 	nop
80025324:	8fa60014 	lw	a2,20(sp)
80025328:	00402825 	move	a1,v0
8002532c:	2404000c 	li	a0,12
80025330:	0c0094e1 	jal	80025384 <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E>
80025334:	00000000 	nop
    }
80025338:	8fbf001c 	lw	ra,28(sp)
8002533c:	27bd0020 	addiu	sp,sp,32
80025340:	03e00008 	jr	ra
80025344:	00000000 	nop

80025348 <_ZN4core5alloc6layout6Layout5array17hd2c3220bf4bb8aecE>:
    pub const fn array<T>(n: usize) -> Result<Self, LayoutError> {
80025348:	27bdffe0 	addiu	sp,sp,-32
8002534c:	afbf001c 	sw	ra,28(sp)
80025350:	afa40014 	sw	a0,20(sp)
80025354:	afa40018 	sw	a0,24(sp)
        return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
80025358:	0c008dda 	jal	80023768 <_ZN4core3ptr9alignment9Alignment2of17ha540bb446aa53010E>
8002535c:	00000000 	nop
80025360:	8fa60014 	lw	a2,20(sp)
80025364:	00402825 	move	a1,v0
80025368:	240400dc 	li	a0,220
8002536c:	0c0094e1 	jal	80025384 <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E>
80025370:	00000000 	nop
    }
80025374:	8fbf001c 	lw	ra,28(sp)
80025378:	27bd0020 	addiu	sp,sp,32
8002537c:	03e00008 	jr	ra
80025380:	00000000 	nop

80025384 <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E>:
        const fn inner(
80025384:	27bdffb0 	addiu	sp,sp,-80
80025388:	afbf004c 	sw	ra,76(sp)
8002538c:	afa6001c 	sw	a2,28(sp)
80025390:	afa50020 	sw	a1,32(sp)
80025394:	afa40024 	sw	a0,36(sp)
80025398:	afa40030 	sw	a0,48(sp)
8002539c:	afa50034 	sw	a1,52(sp)
800253a0:	afa60038 	sw	a2,56(sp)
            if element_size != 0 && n > Layout::max_size_for_align(align) / element_size {
800253a4:	14800015 	bnez	a0,800253fc <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E+0x78>
800253a8:	00000000 	nop
800253ac:	080094ed 	j	800253b4 <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E+0x30>
800253b0:	00000000 	nop
800253b4:	8fa40020 	lw	a0,32(sp)
800253b8:	8fa10024 	lw	at,36(sp)
800253bc:	8fa2001c 	lw	v0,28(sp)
800253c0:	afa10040 	sw	at,64(sp)
800253c4:	afa20044 	sw	v0,68(sp)
            unsafe { intrinsics::unchecked_mul(self, rhs) }
800253c8:	70220802 	mul	at,at,v0
800253cc:	afa10018 	sw	at,24(sp)
            let array_size = unsafe { element_size.unchecked_mul(n) };
800253d0:	afa1003c 	sw	at,60(sp)
            unsafe { Ok(Layout::from_size_align_unchecked(array_size, align.as_usize())) }
800253d4:	0c008df5 	jal	800237d4 <_ZN4core3ptr9alignment9Alignment8as_usize17hf7cabfadb2806268E>
800253d8:	00000000 	nop
800253dc:	8fa40018 	lw	a0,24(sp)
800253e0:	00402825 	move	a1,v0
800253e4:	0c009482 	jal	80025208 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3d2659548699448fE>
800253e8:	00000000 	nop
800253ec:	afa20028 	sw	v0,40(sp)
800253f0:	afa3002c 	sw	v1,44(sp)
        }
800253f4:	08009531 	j	800254c4 <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E+0x140>
800253f8:	00000000 	nop
800253fc:	8fa40020 	lw	a0,32(sp)
80025400:	afa40048 	sw	a0,72(sp)
        isize::MAX as usize - (align.as_usize() - 1)
80025404:	0c008df5 	jal	800237d4 <_ZN4core3ptr9alignment9Alignment8as_usize17hf7cabfadb2806268E>
80025408:	00000000 	nop
8002540c:	2441ffff 	addiu	at,v0,-1
80025410:	afa10014 	sw	at,20(sp)
80025414:	1040000c 	beqz	v0,80025448 <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E+0xc4>
80025418:	00000000 	nop
8002541c:	08009509 	j	80025424 <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E+0xa0>
80025420:	00000000 	nop
80025424:	8fa10014 	lw	at,20(sp)
80025428:	3c027fff 	lui	v0,0x7fff
8002542c:	3442ffff 	ori	v0,v0,0xffff
80025430:	00221026 	xor	v0,at,v0
80025434:	afa20010 	sw	v0,16(sp)
80025438:	04200007 	bltz	at,80025458 <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E+0xd4>
8002543c:	00000000 	nop
80025440:	0800951a 	j	80025468 <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E+0xe4>
80025444:	00000000 	nop
80025448:	3c018105 	lui	at,0x8105
8002544c:	2424caf4 	addiu	a0,at,-13580
80025450:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80025454:	00000000 	nop
80025458:	3c018105 	lui	at,0x8105
8002545c:	2424cb04 	addiu	a0,at,-13564
80025460:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80025464:	00000000 	nop
            if element_size != 0 && n > Layout::max_size_for_align(align) / element_size {
80025468:	8fa10024 	lw	at,36(sp)
8002546c:	1020000e 	beqz	at,800254a8 <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E+0x124>
80025470:	00000000 	nop
80025474:	0800951f 	j	8002547c <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E+0xf8>
80025478:	00000000 	nop
8002547c:	8fa2001c 	lw	v0,28(sp)
80025480:	8fa10024 	lw	at,36(sp)
80025484:	8fa30010 	lw	v1,16(sp)
80025488:	0061001b 	divu	zero,v1,at
8002548c:	002001f4 	teq	at,zero,0x7
80025490:	00000812 	mflo	at
80025494:	0022082b 	sltu	at,at,v0
80025498:	14200007 	bnez	at,800254b8 <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E+0x134>
8002549c:	00000000 	nop
800254a0:	080094ed 	j	800253b4 <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E+0x30>
800254a4:	00000000 	nop
800254a8:	3c018105 	lui	at,0x8105
800254ac:	2424cb14 	addiu	a0,at,-13548
800254b0:	0c011b70 	jal	80046dc0 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
800254b4:	00000000 	nop
                return Err(LayoutError);
800254b8:	afa00028 	sw	zero,40(sp)
        }
800254bc:	08009531 	j	800254c4 <_ZN4core5alloc6layout6Layout5array5inner17he54645c0443fba39E+0x140>
800254c0:	00000000 	nop
800254c4:	8fa20028 	lw	v0,40(sp)
800254c8:	8fa3002c 	lw	v1,44(sp)
800254cc:	8fbf004c 	lw	ra,76(sp)
800254d0:	27bd0050 	addiu	sp,sp,80
800254d4:	03e00008 	jr	ra
800254d8:	00000000 	nop

800254dc <_ZN4core5alloc6layout6Layout8dangling17hcd77505cee644f2cE>:
    pub const fn dangling(&self) -> NonNull<u8> {
800254dc:	27bdffe0 	addiu	sp,sp,-32
800254e0:	afbf001c 	sw	ra,28(sp)
800254e4:	afa40014 	sw	a0,20(sp)
        unsafe { NonNull::new_unchecked(crate::ptr::without_provenance_mut::<u8>(self.align())) }
800254e8:	0c00949b 	jal	8002526c <_ZN4core5alloc6layout6Layout5align17h1bc961b149ce744fE>
800254ec:	00000000 	nop
800254f0:	00402025 	move	a0,v0
800254f4:	afa40018 	sw	a0,24(sp)
800254f8:	0c00dd59 	jal	80037564 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h072c601e282e499eE>
800254fc:	00000000 	nop
    }
80025500:	8fbf001c 	lw	ra,28(sp)
80025504:	27bd0020 	addiu	sp,sp,32
80025508:	03e00008 	jr	ra
8002550c:	00000000 	nop

80025510 <_ZN4core5panic8location8Location4file17h5ffd641e60cf9cd8E>:
    /// ```
    #[must_use]
    #[stable(feature = "panic_hooks", since = "1.10.0")]
    #[rustc_const_stable(feature = "const_location_fields", since = "CURRENT_RUSTC_VERSION")]
    #[inline]
    pub const fn file(&self) -> &str {
80025510:	27bdfff8 	addiu	sp,sp,-8
80025514:	afa40004 	sw	a0,4(sp)
        self.file
80025518:	8c820000 	lw	v0,0(a0)
8002551c:	8c830004 	lw	v1,4(a0)
80025520:	27bd0008 	addiu	sp,sp,8
    }
80025524:	03e00008 	jr	ra
80025528:	00000000 	nop

8002552c <_ZN4core5panic8location8Location4line17h622766e7443d8efcE>:
    /// ```
    #[must_use]
    #[stable(feature = "panic_hooks", since = "1.10.0")]
    #[rustc_const_stable(feature = "const_location_fields", since = "CURRENT_RUSTC_VERSION")]
    #[inline]
    pub const fn line(&self) -> u32 {
8002552c:	27bdfff8 	addiu	sp,sp,-8
80025530:	afa40004 	sw	a0,4(sp)
        self.line
80025534:	8c820008 	lw	v0,8(a0)
80025538:	27bd0008 	addiu	sp,sp,8
    }
8002553c:	03e00008 	jr	ra
80025540:	00000000 	nop

80025544 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h0df9e517dc41b709E>:
    /// assert_eq!(iterator.next(), Some(&4));
    /// assert_eq!(iterator.next(), None);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn iter(&self) -> Iter<'_, T> {
80025544:	27bdffe0 	addiu	sp,sp,-32
80025548:	afbf001c 	sw	ra,28(sp)
8002554c:	afa40014 	sw	a0,20(sp)
80025550:	afa50018 	sw	a1,24(sp)
        Iter::new(self)
80025554:	0c00962b 	jal	800258ac <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h453e03d3f5fad032E>
80025558:	00000000 	nop
    }
8002555c:	8fbf001c 	lw	ra,28(sp)
80025560:	27bd0020 	addiu	sp,sp,32
80025564:	03e00008 	jr	ra
80025568:	00000000 	nop

8002556c <_ZN4core5slice3raw14from_raw_parts17h413d385a5ddbe99aE>:
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_stable(feature = "const_slice_from_raw_parts", since = "1.64.0")]
#[must_use]
#[rustc_diagnostic_item = "slice_from_raw_parts"]
pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
8002556c:	27bdffd8 	addiu	sp,sp,-40
80025570:	afbf0024 	sw	ra,36(sp)
80025574:	afa50014 	sw	a1,20(sp)
80025578:	afa40018 	sw	a0,24(sp)
8002557c:	afa4001c 	sw	a0,28(sp)
80025580:	afa50020 	sw	a1,32(sp)
    // SAFETY: the caller must uphold the safety contract for `from_raw_parts`.
    unsafe {
        ub_checks::assert_unsafe_precondition!(
80025584:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80025588:	00000000 	nop
8002558c:	1440000b 	bnez	v0,800255bc <_ZN4core5slice3raw14from_raw_parts17h413d385a5ddbe99aE+0x50>
80025590:	00000000 	nop
80025594:	08009567 	j	8002559c <_ZN4core5slice3raw14from_raw_parts17h413d385a5ddbe99aE+0x30>
80025598:	00000000 	nop
                len: usize = len,
            ) =>
            ub_checks::is_aligned_and_not_null(data, align)
                && ub_checks::is_valid_allocation_size(size, len)
        );
        &*ptr::slice_from_raw_parts(data, len)
8002559c:	8fa50014 	lw	a1,20(sp)
800255a0:	8fa40018 	lw	a0,24(sp)
800255a4:	0c008810 	jal	80022040 <_ZN4core3ptr20slice_from_raw_parts17h4e4fb1ef9eaff64bE>
800255a8:	00000000 	nop
    }
}
800255ac:	8fbf0024 	lw	ra,36(sp)
800255b0:	27bd0028 	addiu	sp,sp,40
800255b4:	03e00008 	jr	ra
800255b8:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800255bc:	8fa70014 	lw	a3,20(sp)
800255c0:	8fa40018 	lw	a0,24(sp)
800255c4:	2405000c 	li	a1,12
800255c8:	24060004 	li	a2,4
800255cc:	0c0095af 	jal	800256bc <_ZN4core5slice3raw14from_raw_parts18precondition_check17heb8307eed8f7cb61E>
800255d0:	00000000 	nop
800255d4:	08009567 	j	8002559c <_ZN4core5slice3raw14from_raw_parts17h413d385a5ddbe99aE+0x30>
800255d8:	00000000 	nop

800255dc <_ZN4core5slice3raw14from_raw_parts17ha6582de7ec239682E>:
pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
800255dc:	27bdffd8 	addiu	sp,sp,-40
800255e0:	afbf0024 	sw	ra,36(sp)
800255e4:	afa50014 	sw	a1,20(sp)
800255e8:	afa40018 	sw	a0,24(sp)
800255ec:	afa4001c 	sw	a0,28(sp)
800255f0:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
800255f4:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
800255f8:	00000000 	nop
800255fc:	1440000b 	bnez	v0,8002562c <_ZN4core5slice3raw14from_raw_parts17ha6582de7ec239682E+0x50>
80025600:	00000000 	nop
80025604:	08009583 	j	8002560c <_ZN4core5slice3raw14from_raw_parts17ha6582de7ec239682E+0x30>
80025608:	00000000 	nop
        &*ptr::slice_from_raw_parts(data, len)
8002560c:	8fa50014 	lw	a1,20(sp)
80025610:	8fa40018 	lw	a0,24(sp)
80025614:	0c008826 	jal	80022098 <_ZN4core3ptr20slice_from_raw_parts17h98db98e4d6f84fd6E>
80025618:	00000000 	nop
}
8002561c:	8fbf0024 	lw	ra,36(sp)
80025620:	27bd0028 	addiu	sp,sp,40
80025624:	03e00008 	jr	ra
80025628:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8002562c:	8fa70014 	lw	a3,20(sp)
80025630:	8fa40018 	lw	a0,24(sp)
80025634:	24050020 	li	a1,32
80025638:	24060004 	li	a2,4
8002563c:	0c0095af 	jal	800256bc <_ZN4core5slice3raw14from_raw_parts18precondition_check17heb8307eed8f7cb61E>
80025640:	00000000 	nop
80025644:	08009583 	j	8002560c <_ZN4core5slice3raw14from_raw_parts17ha6582de7ec239682E+0x30>
80025648:	00000000 	nop

8002564c <_ZN4core5slice3raw14from_raw_parts17hbd0363c6ae5ed338E>:
pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
8002564c:	27bdffd8 	addiu	sp,sp,-40
80025650:	afbf0024 	sw	ra,36(sp)
80025654:	afa50014 	sw	a1,20(sp)
80025658:	afa40018 	sw	a0,24(sp)
8002565c:	afa4001c 	sw	a0,28(sp)
80025660:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80025664:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80025668:	00000000 	nop
8002566c:	1440000b 	bnez	v0,8002569c <_ZN4core5slice3raw14from_raw_parts17hbd0363c6ae5ed338E+0x50>
80025670:	00000000 	nop
80025674:	0800959f 	j	8002567c <_ZN4core5slice3raw14from_raw_parts17hbd0363c6ae5ed338E+0x30>
80025678:	00000000 	nop
        &*ptr::slice_from_raw_parts(data, len)
8002567c:	8fa50014 	lw	a1,20(sp)
80025680:	8fa40018 	lw	a0,24(sp)
80025684:	0c00881b 	jal	8002206c <_ZN4core3ptr20slice_from_raw_parts17h9126b04c69abcb28E>
80025688:	00000000 	nop
}
8002568c:	8fbf0024 	lw	ra,36(sp)
80025690:	27bd0028 	addiu	sp,sp,40
80025694:	03e00008 	jr	ra
80025698:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8002569c:	8fa70014 	lw	a3,20(sp)
800256a0:	8fa40018 	lw	a0,24(sp)
800256a4:	240500dc 	li	a1,220
800256a8:	24060004 	li	a2,4
800256ac:	0c0095af 	jal	800256bc <_ZN4core5slice3raw14from_raw_parts18precondition_check17heb8307eed8f7cb61E>
800256b0:	00000000 	nop
800256b4:	0800959f 	j	8002567c <_ZN4core5slice3raw14from_raw_parts17hbd0363c6ae5ed338E+0x30>
800256b8:	00000000 	nop

800256bc <_ZN4core5slice3raw14from_raw_parts18precondition_check17heb8307eed8f7cb61E>:
            const fn precondition_check($($name:$ty),*) {
800256bc:	27bdffd0 	addiu	sp,sp,-48
800256c0:	afbf002c 	sw	ra,44(sp)
800256c4:	afa70010 	sw	a3,16(sp)
800256c8:	afa60014 	sw	a2,20(sp)
800256cc:	00a00825 	move	at,a1
800256d0:	8fa50014 	lw	a1,20(sp)
800256d4:	afa10018 	sw	at,24(sp)
800256d8:	afa4001c 	sw	a0,28(sp)
800256dc:	afa10020 	sw	at,32(sp)
800256e0:	afa50024 	sw	a1,36(sp)
800256e4:	afa70028 	sw	a3,40(sp)
            ub_checks::is_aligned_and_not_null(data, align)
800256e8:	0c00985f 	jal	8002617c <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE>
800256ec:	00000000 	nop
800256f0:	14400008 	bnez	v0,80025714 <_ZN4core5slice3raw14from_raw_parts18precondition_check17heb8307eed8f7cb61E+0x58>
800256f4:	00000000 	nop
800256f8:	080095c0 	j	80025700 <_ZN4core5slice3raw14from_raw_parts18precondition_check17heb8307eed8f7cb61E+0x44>
800256fc:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80025700:	3c018105 	lui	at,0x8105
80025704:	2424cb24 	addiu	a0,at,-13532
80025708:	240500a2 	li	a1,162
8002570c:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80025710:	00000000 	nop
                && ub_checks::is_valid_allocation_size(size, len)
80025714:	8fa50010 	lw	a1,16(sp)
80025718:	8fa40018 	lw	a0,24(sp)
8002571c:	0c00987c 	jal	800261f0 <_ZN4core9ub_checks24is_valid_allocation_size17h62ca39954c87599fE>
80025720:	00000000 	nop
80025724:	1040fff6 	beqz	v0,80025700 <_ZN4core5slice3raw14from_raw_parts18precondition_check17heb8307eed8f7cb61E+0x44>
80025728:	00000000 	nop
8002572c:	080095cd 	j	80025734 <_ZN4core5slice3raw14from_raw_parts18precondition_check17heb8307eed8f7cb61E+0x78>
80025730:	00000000 	nop
            }
80025734:	8fbf002c 	lw	ra,44(sp)
80025738:	27bd0030 	addiu	sp,sp,48
8002573c:	03e00008 	jr	ra
80025740:	00000000 	nop

80025744 <_ZN4core5slice3raw18from_raw_parts_mut17h4ad61fdf9ebe15c9E>:
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_slice_from_raw_parts_mut", issue = "67456")]
#[must_use]
#[rustc_diagnostic_item = "slice_from_raw_parts_mut"]
pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {
80025744:	27bdffd8 	addiu	sp,sp,-40
80025748:	afbf0024 	sw	ra,36(sp)
8002574c:	afa50014 	sw	a1,20(sp)
80025750:	afa40018 	sw	a0,24(sp)
80025754:	afa4001c 	sw	a0,28(sp)
80025758:	afa50020 	sw	a1,32(sp)
    // SAFETY: the caller must uphold the safety contract for `from_raw_parts_mut`.
    unsafe {
        ub_checks::assert_unsafe_precondition!(
8002575c:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80025760:	00000000 	nop
80025764:	1440000b 	bnez	v0,80025794 <_ZN4core5slice3raw18from_raw_parts_mut17h4ad61fdf9ebe15c9E+0x50>
80025768:	00000000 	nop
8002576c:	080095dd 	j	80025774 <_ZN4core5slice3raw18from_raw_parts_mut17h4ad61fdf9ebe15c9E+0x30>
80025770:	00000000 	nop
                len: usize = len,
            ) =>
            ub_checks::is_aligned_and_not_null(data, align)
                && ub_checks::is_valid_allocation_size(size, len)
        );
        &mut *ptr::slice_from_raw_parts_mut(data, len)
80025774:	8fa50014 	lw	a1,20(sp)
80025778:	8fa40018 	lw	a0,24(sp)
8002577c:	0c00883c 	jal	800220f0 <_ZN4core3ptr24slice_from_raw_parts_mut17h9ced3415d39e95e7E>
80025780:	00000000 	nop
    }
}
80025784:	8fbf0024 	lw	ra,36(sp)
80025788:	27bd0028 	addiu	sp,sp,40
8002578c:	03e00008 	jr	ra
80025790:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80025794:	8fa70014 	lw	a3,20(sp)
80025798:	8fa40018 	lw	a0,24(sp)
8002579c:	2405000c 	li	a1,12
800257a0:	24060004 	li	a2,4
800257a4:	0c009609 	jal	80025824 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h8ec2c795b9002950E>
800257a8:	00000000 	nop
800257ac:	080095dd 	j	80025774 <_ZN4core5slice3raw18from_raw_parts_mut17h4ad61fdf9ebe15c9E+0x30>
800257b0:	00000000 	nop

800257b4 <_ZN4core5slice3raw18from_raw_parts_mut17h4f51fd8f1dd8b743E>:
pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {
800257b4:	27bdffd8 	addiu	sp,sp,-40
800257b8:	afbf0024 	sw	ra,36(sp)
800257bc:	afa50014 	sw	a1,20(sp)
800257c0:	afa40018 	sw	a0,24(sp)
800257c4:	afa4001c 	sw	a0,28(sp)
800257c8:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
800257cc:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
800257d0:	00000000 	nop
800257d4:	1440000b 	bnez	v0,80025804 <_ZN4core5slice3raw18from_raw_parts_mut17h4f51fd8f1dd8b743E+0x50>
800257d8:	00000000 	nop
800257dc:	080095f9 	j	800257e4 <_ZN4core5slice3raw18from_raw_parts_mut17h4f51fd8f1dd8b743E+0x30>
800257e0:	00000000 	nop
        &mut *ptr::slice_from_raw_parts_mut(data, len)
800257e4:	8fa50014 	lw	a1,20(sp)
800257e8:	8fa40018 	lw	a0,24(sp)
800257ec:	0c008847 	jal	8002211c <_ZN4core3ptr24slice_from_raw_parts_mut17hd414fdcd3bae6beeE>
800257f0:	00000000 	nop
}
800257f4:	8fbf0024 	lw	ra,36(sp)
800257f8:	27bd0028 	addiu	sp,sp,40
800257fc:	03e00008 	jr	ra
80025800:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80025804:	8fa70014 	lw	a3,20(sp)
80025808:	8fa40018 	lw	a0,24(sp)
8002580c:	240500dc 	li	a1,220
80025810:	24060004 	li	a2,4
80025814:	0c009609 	jal	80025824 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h8ec2c795b9002950E>
80025818:	00000000 	nop
8002581c:	080095f9 	j	800257e4 <_ZN4core5slice3raw18from_raw_parts_mut17h4f51fd8f1dd8b743E+0x30>
80025820:	00000000 	nop

80025824 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h8ec2c795b9002950E>:
            const fn precondition_check($($name:$ty),*) {
80025824:	27bdffd0 	addiu	sp,sp,-48
80025828:	afbf002c 	sw	ra,44(sp)
8002582c:	afa70010 	sw	a3,16(sp)
80025830:	afa60014 	sw	a2,20(sp)
80025834:	00a00825 	move	at,a1
80025838:	8fa50014 	lw	a1,20(sp)
8002583c:	afa10018 	sw	at,24(sp)
80025840:	afa4001c 	sw	a0,28(sp)
80025844:	afa10020 	sw	at,32(sp)
80025848:	afa50024 	sw	a1,36(sp)
8002584c:	afa70028 	sw	a3,40(sp)
            ub_checks::is_aligned_and_not_null(data, align)
80025850:	0c00985f 	jal	8002617c <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE>
80025854:	00000000 	nop
80025858:	14400008 	bnez	v0,8002587c <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h8ec2c795b9002950E+0x58>
8002585c:	00000000 	nop
80025860:	0800961a 	j	80025868 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h8ec2c795b9002950E+0x44>
80025864:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80025868:	3c018105 	lui	at,0x8105
8002586c:	2424cbc6 	addiu	a0,at,-13370
80025870:	240500a6 	li	a1,166
80025874:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80025878:	00000000 	nop
                && ub_checks::is_valid_allocation_size(size, len)
8002587c:	8fa50010 	lw	a1,16(sp)
80025880:	8fa40018 	lw	a0,24(sp)
80025884:	0c00987c 	jal	800261f0 <_ZN4core9ub_checks24is_valid_allocation_size17h62ca39954c87599fE>
80025888:	00000000 	nop
8002588c:	1040fff6 	beqz	v0,80025868 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h8ec2c795b9002950E+0x44>
80025890:	00000000 	nop
80025894:	08009627 	j	8002589c <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h8ec2c795b9002950E+0x78>
80025898:	00000000 	nop
            }
8002589c:	8fbf002c 	lw	ra,44(sp)
800258a0:	27bd0030 	addiu	sp,sp,48
800258a4:	03e00008 	jr	ra
800258a8:	00000000 	nop

800258ac <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h453e03d3f5fad032E>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Sync> Send for Iter<'_, T> {}

impl<'a, T> Iter<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a [T]) -> Self {
800258ac:	27bdffb8 	addiu	sp,sp,-72
800258b0:	afbf0044 	sw	ra,68(sp)
800258b4:	afa50014 	sw	a1,20(sp)
800258b8:	afa40028 	sw	a0,40(sp)
800258bc:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
800258c0:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
800258c4:	0c00adf8 	jal	8002b7e0 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17heda53c7d1df8542bE>
800258c8:	00000000 	nop
800258cc:	00402025 	move	a0,v0
800258d0:	00602825 	move	a1,v1
800258d4:	0c008cfc 	jal	800233f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h52646379d7741329E>
800258d8:	00000000 	nop
800258dc:	00400825 	move	at,v0
800258e0:	afa10018 	sw	at,24(sp)
800258e4:	afa20034 	sw	v0,52(sp)
        // SAFETY: Similar to `IterMut::new`.
        unsafe {
            let end_or_len =
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
800258e8:	0800963c 	j	800258f0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h453e03d3f5fad032E+0x44>
800258ec:	00000000 	nop
800258f0:	8fa10018 	lw	at,24(sp)
800258f4:	8fa20014 	lw	v0,20(sp)
800258f8:	afa10040 	sw	at,64(sp)
800258fc:	afa10038 	sw	at,56(sp)
80025900:	afa2003c 	sw	v0,60(sp)
    pub const unsafe fn add(self, count: usize) -> Self
    where
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `offset`.
        unsafe { intrinsics::offset(self, count) }
80025904:	00021140 	sll	v0,v0,0x5
80025908:	00220821 	addu	at,at,v0
8002590c:	afa10024 	sw	at,36(sp)
80025910:	08009646 	j	80025918 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h453e03d3f5fad032E+0x6c>
80025914:	00000000 	nop

            Self { ptr, end_or_len, _marker: PhantomData }
80025918:	8fa20018 	lw	v0,24(sp)
8002591c:	8fa10024 	lw	at,36(sp)
80025920:	afa2001c 	sw	v0,28(sp)
80025924:	afa10020 	sw	at,32(sp)
        }
    }
80025928:	8fa2001c 	lw	v0,28(sp)
8002592c:	8fa30020 	lw	v1,32(sp)
80025930:	8fbf0044 	lw	ra,68(sp)
80025934:	27bd0048 	addiu	sp,sp,72
80025938:	03e00008 	jr	ra
8002593c:	00000000 	nop

80025940 <_ZN4core6option15Option$LT$T$GT$4take17h6b346601cf701b05E>:
    /// assert_eq!(y, None);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
    pub const fn take(&mut self) -> Option<T> {
80025940:	27bdffe0 	addiu	sp,sp,-32
80025944:	afbf001c 	sw	ra,28(sp)
80025948:	afa40018 	sw	a0,24(sp)
        // FIXME replace `mem::replace` by `mem::take` when the latter is const ready
        mem::replace(self, None)
8002594c:	afa00010 	sw	zero,16(sp)
80025950:	8fa50010 	lw	a1,16(sp)
80025954:	8fa60014 	lw	a2,20(sp)
80025958:	0c008484 	jal	80021210 <_ZN4core3mem7replace17h7c47d7cef2dd3d38E>
8002595c:	00000000 	nop
    }
80025960:	8fbf001c 	lw	ra,28(sp)
80025964:	27bd0020 	addiu	sp,sp,32
80025968:	03e00008 	jr	ra
8002596c:	00000000 	nop

80025970 <_ZN4core6option15Option$LT$T$GT$4take17h82d64be1993198aeE>:
    pub const fn take(&mut self) -> Option<T> {
80025970:	27bdffe0 	addiu	sp,sp,-32
80025974:	afbf001c 	sw	ra,28(sp)
80025978:	afa40018 	sw	a0,24(sp)
        mem::replace(self, None)
8002597c:	afa00014 	sw	zero,20(sp)
80025980:	8fa50014 	lw	a1,20(sp)
80025984:	0c00849d 	jal	80021274 <_ZN4core3mem7replace17he66a1b3d6b0db2d5E>
80025988:	00000000 	nop
    }
8002598c:	8fbf001c 	lw	ra,28(sp)
80025990:	27bd0020 	addiu	sp,sp,32
80025994:	03e00008 	jr	ra
80025998:	00000000 	nop

8002599c <_ZN4core6option15Option$LT$T$GT$5ok_or17h78b32bbff800a191E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
8002599c:	27bdffd8 	addiu	sp,sp,-40
800259a0:	afa70000 	sw	a3,0(sp)
800259a4:	afa60004 	sw	a2,4(sp)
800259a8:	afa50008 	sw	a1,8(sp)
800259ac:	afa4000c 	sw	a0,12(sp)
800259b0:	afa40010 	sw	a0,16(sp)
800259b4:	afa60018 	sw	a2,24(sp)
800259b8:	afa7001c 	sw	a3,28(sp)
800259bc:	24010000 	li	at,0
        match self {
800259c0:	a3a00017 	sb	zero,23(sp)
800259c4:	24010001 	li	at,1
800259c8:	a3a10017 	sb	at,23(sp)
800259cc:	8ca10000 	lw	at,0(a1)
800259d0:	1420000e 	bnez	at,80025a0c <_ZN4core6option15Option$LT$T$GT$5ok_or17h78b32bbff800a191E+0x70>
800259d4:	00000000 	nop
800259d8:	08009678 	j	800259e0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h78b32bbff800a191E+0x44>
800259dc:	00000000 	nop
800259e0:	8fa2000c 	lw	v0,12(sp)
800259e4:	8fa10000 	lw	at,0(sp)
800259e8:	8fa30004 	lw	v1,4(sp)
800259ec:	24040000 	li	a0,0
            None => Err(err),
800259f0:	a3a00017 	sb	zero,23(sp)
800259f4:	ac430004 	sw	v1,4(v0)
800259f8:	ac410008 	sw	at,8(v0)
800259fc:	24010001 	li	at,1
80025a00:	ac410000 	sw	at,0(v0)
80025a04:	0800968e 	j	80025a38 <_ZN4core6option15Option$LT$T$GT$5ok_or17h78b32bbff800a191E+0x9c>
80025a08:	00000000 	nop
            Some(v) => Ok(v),
80025a0c:	8fa1000c 	lw	at,12(sp)
80025a10:	8fa20008 	lw	v0,8(sp)
80025a14:	8c430004 	lw	v1,4(v0)
80025a18:	8c420008 	lw	v0,8(v0)
80025a1c:	afa30020 	sw	v1,32(sp)
80025a20:	afa20024 	sw	v0,36(sp)
80025a24:	ac230004 	sw	v1,4(at)
80025a28:	ac220008 	sw	v0,8(at)
80025a2c:	ac200000 	sw	zero,0(at)
80025a30:	0800968e 	j	80025a38 <_ZN4core6option15Option$LT$T$GT$5ok_or17h78b32bbff800a191E+0x9c>
80025a34:	00000000 	nop
    }
80025a38:	93a10017 	lbu	at,23(sp)
80025a3c:	30210001 	andi	at,at,0x1
80025a40:	14200007 	bnez	at,80025a60 <_ZN4core6option15Option$LT$T$GT$5ok_or17h78b32bbff800a191E+0xc4>
80025a44:	00000000 	nop
80025a48:	08009694 	j	80025a50 <_ZN4core6option15Option$LT$T$GT$5ok_or17h78b32bbff800a191E+0xb4>
80025a4c:	00000000 	nop
80025a50:	8fa20010 	lw	v0,16(sp)
80025a54:	27bd0028 	addiu	sp,sp,40
80025a58:	03e00008 	jr	ra
80025a5c:	00000000 	nop
80025a60:	08009694 	j	80025a50 <_ZN4core6option15Option$LT$T$GT$5ok_or17h78b32bbff800a191E+0xb4>
80025a64:	00000000 	nop

80025a68 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3e1c6d8ce9e61d08E>:
    pub const fn as_mut(&mut self) -> Option<&mut T> {
80025a68:	27bdfff0 	addiu	sp,sp,-16
80025a6c:	afa40000 	sw	a0,0(sp)
80025a70:	afa40008 	sw	a0,8(sp)
        match *self {
80025a74:	8c810000 	lw	at,0(a0)
80025a78:	14200006 	bnez	at,80025a94 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3e1c6d8ce9e61d08E+0x2c>
80025a7c:	00000000 	nop
80025a80:	080096a2 	j	80025a88 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3e1c6d8ce9e61d08E+0x20>
80025a84:	00000000 	nop
            None => None,
80025a88:	afa00004 	sw	zero,4(sp)
80025a8c:	080096ab 	j	80025aac <_ZN4core6option15Option$LT$T$GT$6as_mut17h3e1c6d8ce9e61d08E+0x44>
80025a90:	00000000 	nop
            Some(ref mut x) => Some(x),
80025a94:	8fa10000 	lw	at,0(sp)
80025a98:	24210004 	addiu	at,at,4
80025a9c:	afa1000c 	sw	at,12(sp)
80025aa0:	afa10004 	sw	at,4(sp)
80025aa4:	080096ab 	j	80025aac <_ZN4core6option15Option$LT$T$GT$6as_mut17h3e1c6d8ce9e61d08E+0x44>
80025aa8:	00000000 	nop
    }
80025aac:	8fa20004 	lw	v0,4(sp)
80025ab0:	27bd0010 	addiu	sp,sp,16
80025ab4:	03e00008 	jr	ra
80025ab8:	00000000 	nop

80025abc <_ZN4core6option15Option$LT$T$GT$6as_ref17h10548890c01f7b47E>:
    pub const fn as_ref(&self) -> Option<&T> {
80025abc:	27bdfff0 	addiu	sp,sp,-16
80025ac0:	afa40000 	sw	a0,0(sp)
80025ac4:	afa40008 	sw	a0,8(sp)
        match *self {
80025ac8:	8c810000 	lw	at,0(a0)
80025acc:	14200006 	bnez	at,80025ae8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h10548890c01f7b47E+0x2c>
80025ad0:	00000000 	nop
80025ad4:	080096b7 	j	80025adc <_ZN4core6option15Option$LT$T$GT$6as_ref17h10548890c01f7b47E+0x20>
80025ad8:	00000000 	nop
            None => None,
80025adc:	afa00004 	sw	zero,4(sp)
80025ae0:	080096c0 	j	80025b00 <_ZN4core6option15Option$LT$T$GT$6as_ref17h10548890c01f7b47E+0x44>
80025ae4:	00000000 	nop
            Some(ref x) => Some(x),
80025ae8:	8fa10000 	lw	at,0(sp)
80025aec:	24210004 	addiu	at,at,4
80025af0:	afa1000c 	sw	at,12(sp)
80025af4:	afa10004 	sw	at,4(sp)
80025af8:	080096c0 	j	80025b00 <_ZN4core6option15Option$LT$T$GT$6as_ref17h10548890c01f7b47E+0x44>
80025afc:	00000000 	nop
    }
80025b00:	8fa20004 	lw	v0,4(sp)
80025b04:	27bd0010 	addiu	sp,sp,16
80025b08:	03e00008 	jr	ra
80025b0c:	00000000 	nop

80025b10 <_ZN4core6option15Option$LT$T$GT$6as_ref17h1f1ee1a4372e0b44E>:
    pub const fn as_ref(&self) -> Option<&T> {
80025b10:	27bdfff0 	addiu	sp,sp,-16
80025b14:	afa40000 	sw	a0,0(sp)
80025b18:	afa40008 	sw	a0,8(sp)
        match *self {
80025b1c:	8c810000 	lw	at,0(a0)
80025b20:	14200006 	bnez	at,80025b3c <_ZN4core6option15Option$LT$T$GT$6as_ref17h1f1ee1a4372e0b44E+0x2c>
80025b24:	00000000 	nop
80025b28:	080096cc 	j	80025b30 <_ZN4core6option15Option$LT$T$GT$6as_ref17h1f1ee1a4372e0b44E+0x20>
80025b2c:	00000000 	nop
            None => None,
80025b30:	afa00004 	sw	zero,4(sp)
80025b34:	080096d5 	j	80025b54 <_ZN4core6option15Option$LT$T$GT$6as_ref17h1f1ee1a4372e0b44E+0x44>
80025b38:	00000000 	nop
            Some(ref x) => Some(x),
80025b3c:	8fa10000 	lw	at,0(sp)
80025b40:	24210004 	addiu	at,at,4
80025b44:	afa1000c 	sw	at,12(sp)
80025b48:	afa10004 	sw	at,4(sp)
80025b4c:	080096d5 	j	80025b54 <_ZN4core6option15Option$LT$T$GT$6as_ref17h1f1ee1a4372e0b44E+0x44>
80025b50:	00000000 	nop
    }
80025b54:	8fa20004 	lw	v0,4(sp)
80025b58:	27bd0010 	addiu	sp,sp,16
80025b5c:	03e00008 	jr	ra
80025b60:	00000000 	nop

80025b64 <_ZN4core6option15Option$LT$T$GT$6as_ref17h3c575f335eab059dE>:
    pub const fn as_ref(&self) -> Option<&T> {
80025b64:	27bdfff0 	addiu	sp,sp,-16
80025b68:	afa40000 	sw	a0,0(sp)
80025b6c:	afa40008 	sw	a0,8(sp)
        match *self {
80025b70:	8c810000 	lw	at,0(a0)
80025b74:	14200006 	bnez	at,80025b90 <_ZN4core6option15Option$LT$T$GT$6as_ref17h3c575f335eab059dE+0x2c>
80025b78:	00000000 	nop
80025b7c:	080096e1 	j	80025b84 <_ZN4core6option15Option$LT$T$GT$6as_ref17h3c575f335eab059dE+0x20>
80025b80:	00000000 	nop
            None => None,
80025b84:	afa00004 	sw	zero,4(sp)
80025b88:	080096ea 	j	80025ba8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h3c575f335eab059dE+0x44>
80025b8c:	00000000 	nop
            Some(ref x) => Some(x),
80025b90:	8fa10000 	lw	at,0(sp)
80025b94:	24210004 	addiu	at,at,4
80025b98:	afa1000c 	sw	at,12(sp)
80025b9c:	afa10004 	sw	at,4(sp)
80025ba0:	080096ea 	j	80025ba8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h3c575f335eab059dE+0x44>
80025ba4:	00000000 	nop
    }
80025ba8:	8fa20004 	lw	v0,4(sp)
80025bac:	27bd0010 	addiu	sp,sp,16
80025bb0:	03e00008 	jr	ra
80025bb4:	00000000 	nop

80025bb8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5534c7fa7abdf986E>:
    pub const fn as_ref(&self) -> Option<&T> {
80025bb8:	27bdfff0 	addiu	sp,sp,-16
80025bbc:	afa40000 	sw	a0,0(sp)
80025bc0:	afa40008 	sw	a0,8(sp)
        match *self {
80025bc4:	8c810000 	lw	at,0(a0)
80025bc8:	14200006 	bnez	at,80025be4 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5534c7fa7abdf986E+0x2c>
80025bcc:	00000000 	nop
80025bd0:	080096f6 	j	80025bd8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5534c7fa7abdf986E+0x20>
80025bd4:	00000000 	nop
            None => None,
80025bd8:	afa00004 	sw	zero,4(sp)
80025bdc:	080096ff 	j	80025bfc <_ZN4core6option15Option$LT$T$GT$6as_ref17h5534c7fa7abdf986E+0x44>
80025be0:	00000000 	nop
            Some(ref x) => Some(x),
80025be4:	8fa10000 	lw	at,0(sp)
80025be8:	24210004 	addiu	at,at,4
80025bec:	afa1000c 	sw	at,12(sp)
80025bf0:	afa10004 	sw	at,4(sp)
80025bf4:	080096ff 	j	80025bfc <_ZN4core6option15Option$LT$T$GT$6as_ref17h5534c7fa7abdf986E+0x44>
80025bf8:	00000000 	nop
    }
80025bfc:	8fa20004 	lw	v0,4(sp)
80025c00:	27bd0010 	addiu	sp,sp,16
80025c04:	03e00008 	jr	ra
80025c08:	00000000 	nop

80025c0c <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c59111f25b51ac4E>:
    pub const fn as_ref(&self) -> Option<&T> {
80025c0c:	27bdfff0 	addiu	sp,sp,-16
80025c10:	afa40000 	sw	a0,0(sp)
80025c14:	afa40008 	sw	a0,8(sp)
        match *self {
80025c18:	90810000 	lbu	at,0(a0)
80025c1c:	30210001 	andi	at,at,0x1
80025c20:	14200006 	bnez	at,80025c3c <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c59111f25b51ac4E+0x30>
80025c24:	00000000 	nop
80025c28:	0800970c 	j	80025c30 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c59111f25b51ac4E+0x24>
80025c2c:	00000000 	nop
            None => None,
80025c30:	afa00004 	sw	zero,4(sp)
80025c34:	08009715 	j	80025c54 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c59111f25b51ac4E+0x48>
80025c38:	00000000 	nop
            Some(ref x) => Some(x),
80025c3c:	8fa10000 	lw	at,0(sp)
80025c40:	24210001 	addiu	at,at,1
80025c44:	afa1000c 	sw	at,12(sp)
80025c48:	afa10004 	sw	at,4(sp)
80025c4c:	08009715 	j	80025c54 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c59111f25b51ac4E+0x48>
80025c50:	00000000 	nop
    }
80025c54:	8fa20004 	lw	v0,4(sp)
80025c58:	27bd0010 	addiu	sp,sp,16
80025c5c:	03e00008 	jr	ra
80025c60:	00000000 	nop

80025c64 <_ZN4core6option15Option$LT$T$GT$6as_ref17h722543dd1d3f6521E>:
    pub const fn as_ref(&self) -> Option<&T> {
80025c64:	27bdfff0 	addiu	sp,sp,-16
80025c68:	afa40000 	sw	a0,0(sp)
80025c6c:	afa40008 	sw	a0,8(sp)
        match *self {
80025c70:	8c810000 	lw	at,0(a0)
80025c74:	14200006 	bnez	at,80025c90 <_ZN4core6option15Option$LT$T$GT$6as_ref17h722543dd1d3f6521E+0x2c>
80025c78:	00000000 	nop
80025c7c:	08009721 	j	80025c84 <_ZN4core6option15Option$LT$T$GT$6as_ref17h722543dd1d3f6521E+0x20>
80025c80:	00000000 	nop
            None => None,
80025c84:	afa00004 	sw	zero,4(sp)
80025c88:	0800972a 	j	80025ca8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h722543dd1d3f6521E+0x44>
80025c8c:	00000000 	nop
            Some(ref x) => Some(x),
80025c90:	8fa10000 	lw	at,0(sp)
80025c94:	24210004 	addiu	at,at,4
80025c98:	afa1000c 	sw	at,12(sp)
80025c9c:	afa10004 	sw	at,4(sp)
80025ca0:	0800972a 	j	80025ca8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h722543dd1d3f6521E+0x44>
80025ca4:	00000000 	nop
    }
80025ca8:	8fa20004 	lw	v0,4(sp)
80025cac:	27bd0010 	addiu	sp,sp,16
80025cb0:	03e00008 	jr	ra
80025cb4:	00000000 	nop

80025cb8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h77b774657e4de1b2E>:
    pub const fn as_ref(&self) -> Option<&T> {
80025cb8:	27bdfff0 	addiu	sp,sp,-16
80025cbc:	afa40000 	sw	a0,0(sp)
80025cc0:	afa40008 	sw	a0,8(sp)
        match *self {
80025cc4:	8c810000 	lw	at,0(a0)
80025cc8:	14200006 	bnez	at,80025ce4 <_ZN4core6option15Option$LT$T$GT$6as_ref17h77b774657e4de1b2E+0x2c>
80025ccc:	00000000 	nop
80025cd0:	08009736 	j	80025cd8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h77b774657e4de1b2E+0x20>
80025cd4:	00000000 	nop
            None => None,
80025cd8:	afa00004 	sw	zero,4(sp)
80025cdc:	0800973f 	j	80025cfc <_ZN4core6option15Option$LT$T$GT$6as_ref17h77b774657e4de1b2E+0x44>
80025ce0:	00000000 	nop
            Some(ref x) => Some(x),
80025ce4:	8fa10000 	lw	at,0(sp)
80025ce8:	24210004 	addiu	at,at,4
80025cec:	afa1000c 	sw	at,12(sp)
80025cf0:	afa10004 	sw	at,4(sp)
80025cf4:	0800973f 	j	80025cfc <_ZN4core6option15Option$LT$T$GT$6as_ref17h77b774657e4de1b2E+0x44>
80025cf8:	00000000 	nop
    }
80025cfc:	8fa20004 	lw	v0,4(sp)
80025d00:	27bd0010 	addiu	sp,sp,16
80025d04:	03e00008 	jr	ra
80025d08:	00000000 	nop

80025d0c <_ZN4core6option15Option$LT$T$GT$6as_ref17h805f2a507d5a7be1E>:
    pub const fn as_ref(&self) -> Option<&T> {
80025d0c:	27bdfff0 	addiu	sp,sp,-16
80025d10:	afa40000 	sw	a0,0(sp)
80025d14:	afa40008 	sw	a0,8(sp)
        match *self {
80025d18:	8c810000 	lw	at,0(a0)
80025d1c:	14200006 	bnez	at,80025d38 <_ZN4core6option15Option$LT$T$GT$6as_ref17h805f2a507d5a7be1E+0x2c>
80025d20:	00000000 	nop
80025d24:	0800974b 	j	80025d2c <_ZN4core6option15Option$LT$T$GT$6as_ref17h805f2a507d5a7be1E+0x20>
80025d28:	00000000 	nop
            None => None,
80025d2c:	afa00004 	sw	zero,4(sp)
80025d30:	08009754 	j	80025d50 <_ZN4core6option15Option$LT$T$GT$6as_ref17h805f2a507d5a7be1E+0x44>
80025d34:	00000000 	nop
            Some(ref x) => Some(x),
80025d38:	8fa10000 	lw	at,0(sp)
80025d3c:	24210004 	addiu	at,at,4
80025d40:	afa1000c 	sw	at,12(sp)
80025d44:	afa10004 	sw	at,4(sp)
80025d48:	08009754 	j	80025d50 <_ZN4core6option15Option$LT$T$GT$6as_ref17h805f2a507d5a7be1E+0x44>
80025d4c:	00000000 	nop
    }
80025d50:	8fa20004 	lw	v0,4(sp)
80025d54:	27bd0010 	addiu	sp,sp,16
80025d58:	03e00008 	jr	ra
80025d5c:	00000000 	nop

80025d60 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb190c667aed8b03aE>:
    pub const fn as_ref(&self) -> Option<&T> {
80025d60:	27bdfff0 	addiu	sp,sp,-16
80025d64:	afa40000 	sw	a0,0(sp)
80025d68:	afa40008 	sw	a0,8(sp)
        match *self {
80025d6c:	8c810000 	lw	at,0(a0)
80025d70:	14200006 	bnez	at,80025d8c <_ZN4core6option15Option$LT$T$GT$6as_ref17hb190c667aed8b03aE+0x2c>
80025d74:	00000000 	nop
80025d78:	08009760 	j	80025d80 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb190c667aed8b03aE+0x20>
80025d7c:	00000000 	nop
            None => None,
80025d80:	afa00004 	sw	zero,4(sp)
80025d84:	08009769 	j	80025da4 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb190c667aed8b03aE+0x44>
80025d88:	00000000 	nop
            Some(ref x) => Some(x),
80025d8c:	8fa10000 	lw	at,0(sp)
80025d90:	24210004 	addiu	at,at,4
80025d94:	afa1000c 	sw	at,12(sp)
80025d98:	afa10004 	sw	at,4(sp)
80025d9c:	08009769 	j	80025da4 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb190c667aed8b03aE+0x44>
80025da0:	00000000 	nop
    }
80025da4:	8fa20004 	lw	v0,4(sp)
80025da8:	27bd0010 	addiu	sp,sp,16
80025dac:	03e00008 	jr	ra
80025db0:	00000000 	nop

80025db4 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb24f5faa8be68d6aE>:
    pub const fn as_ref(&self) -> Option<&T> {
80025db4:	27bdfff0 	addiu	sp,sp,-16
80025db8:	afa40000 	sw	a0,0(sp)
80025dbc:	afa40008 	sw	a0,8(sp)
        match *self {
80025dc0:	8c810000 	lw	at,0(a0)
80025dc4:	14200006 	bnez	at,80025de0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb24f5faa8be68d6aE+0x2c>
80025dc8:	00000000 	nop
80025dcc:	08009775 	j	80025dd4 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb24f5faa8be68d6aE+0x20>
80025dd0:	00000000 	nop
            None => None,
80025dd4:	afa00004 	sw	zero,4(sp)
80025dd8:	0800977e 	j	80025df8 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb24f5faa8be68d6aE+0x44>
80025ddc:	00000000 	nop
            Some(ref x) => Some(x),
80025de0:	8fa10000 	lw	at,0(sp)
80025de4:	24210004 	addiu	at,at,4
80025de8:	afa1000c 	sw	at,12(sp)
80025dec:	afa10004 	sw	at,4(sp)
80025df0:	0800977e 	j	80025df8 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb24f5faa8be68d6aE+0x44>
80025df4:	00000000 	nop
    }
80025df8:	8fa20004 	lw	v0,4(sp)
80025dfc:	27bd0010 	addiu	sp,sp,16
80025e00:	03e00008 	jr	ra
80025e04:	00000000 	nop

80025e08 <_ZN4core6option15Option$LT$T$GT$6expect17h8661283b38fde621E>:
    pub const fn expect(self, msg: &str) -> T {
80025e08:	27bdffd0 	addiu	sp,sp,-48
80025e0c:	afa70014 	sw	a3,20(sp)
80025e10:	afa60018 	sw	a2,24(sp)
80025e14:	afa5001c 	sw	a1,28(sp)
80025e18:	afa40020 	sw	a0,32(sp)
80025e1c:	afa50024 	sw	a1,36(sp)
80025e20:	afa60028 	sw	a2,40(sp)
        match self {
80025e24:	8fa10020 	lw	at,32(sp)
80025e28:	14200008 	bnez	at,80025e4c <_ZN4core6option15Option$LT$T$GT$6expect17h8661283b38fde621E+0x44>
80025e2c:	00000000 	nop
80025e30:	0800978e 	j	80025e38 <_ZN4core6option15Option$LT$T$GT$6expect17h8661283b38fde621E+0x30>
80025e34:	00000000 	nop
            None => expect_failed(msg),
80025e38:	8fa60014 	lw	a2,20(sp)
80025e3c:	8fa50018 	lw	a1,24(sp)
80025e40:	8fa4001c 	lw	a0,28(sp)
80025e44:	0c00f1bd 	jal	8003c6f4 <_ZN4core6option13expect_failed17h75c0aba452453316E>
80025e48:	00000000 	nop
            Some(val) => val,
80025e4c:	8fa20020 	lw	v0,32(sp)
80025e50:	afa2002c 	sw	v0,44(sp)
80025e54:	27bd0030 	addiu	sp,sp,48
    }
80025e58:	03e00008 	jr	ra
80025e5c:	00000000 	nop

80025e60 <_ZN4core6option15Option$LT$T$GT$7is_none17h243af1ceb393c575E>:
    pub const fn is_none(&self) -> bool {
80025e60:	27bdffe8 	addiu	sp,sp,-24
80025e64:	afbf0014 	sw	ra,20(sp)
80025e68:	afa40010 	sw	a0,16(sp)
        !self.is_some()
80025e6c:	0c0097a2 	jal	80025e88 <_ZN4core6option15Option$LT$T$GT$7is_some17hf52a02f5956ef8b9E>
80025e70:	00000000 	nop
80025e74:	38420001 	xori	v0,v0,0x1
    }
80025e78:	8fbf0014 	lw	ra,20(sp)
80025e7c:	27bd0018 	addiu	sp,sp,24
80025e80:	03e00008 	jr	ra
80025e84:	00000000 	nop

80025e88 <_ZN4core6option15Option$LT$T$GT$7is_some17hf52a02f5956ef8b9E>:
    pub const fn is_some(&self) -> bool {
80025e88:	27bdfff8 	addiu	sp,sp,-8
80025e8c:	afa40004 	sw	a0,4(sp)
        matches!(*self, Some(_))
80025e90:	8c810000 	lw	at,0(a0)
80025e94:	10200007 	beqz	at,80025eb4 <_ZN4core6option15Option$LT$T$GT$7is_some17hf52a02f5956ef8b9E+0x2c>
80025e98:	00000000 	nop
80025e9c:	080097a9 	j	80025ea4 <_ZN4core6option15Option$LT$T$GT$7is_some17hf52a02f5956ef8b9E+0x1c>
80025ea0:	00000000 	nop
80025ea4:	24010001 	li	at,1
80025ea8:	a3a10003 	sb	at,3(sp)
80025eac:	080097b1 	j	80025ec4 <_ZN4core6option15Option$LT$T$GT$7is_some17hf52a02f5956ef8b9E+0x3c>
80025eb0:	00000000 	nop
80025eb4:	24010000 	li	at,0
80025eb8:	a3a00003 	sb	zero,3(sp)
80025ebc:	080097b1 	j	80025ec4 <_ZN4core6option15Option$LT$T$GT$7is_some17hf52a02f5956ef8b9E+0x3c>
80025ec0:	00000000 	nop
    }
80025ec4:	93a10003 	lbu	at,3(sp)
80025ec8:	30220001 	andi	v0,at,0x1
80025ecc:	27bd0008 	addiu	sp,sp,8
80025ed0:	03e00008 	jr	ra
80025ed4:	00000000 	nop

80025ed8 <_ZN4core6option15Option$LT$T$GT$7replace17h1beeedc8961435aaE>:
    /// assert_eq!(old, None);
    /// ```
    #[inline]
    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
    #[stable(feature = "option_replace", since = "1.31.0")]
    pub const fn replace(&mut self, value: T) -> Option<T> {
80025ed8:	27bdffd8 	addiu	sp,sp,-40
80025edc:	afbf0024 	sw	ra,36(sp)
80025ee0:	afa4001c 	sw	a0,28(sp)
80025ee4:	afa50020 	sw	a1,32(sp)
        mem::replace(self, Some(value))
80025ee8:	afa50018 	sw	a1,24(sp)
80025eec:	24010001 	li	at,1
80025ef0:	afa10014 	sw	at,20(sp)
80025ef4:	8fa50014 	lw	a1,20(sp)
80025ef8:	8fa60018 	lw	a2,24(sp)
80025efc:	0c008484 	jal	80021210 <_ZN4core3mem7replace17h7c47d7cef2dd3d38E>
80025f00:	00000000 	nop
    }
80025f04:	8fbf0024 	lw	ra,36(sp)
80025f08:	27bd0028 	addiu	sp,sp,40
80025f0c:	03e00008 	jr	ra
80025f10:	00000000 	nop

80025f14 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h220eec6768f13486E>:
    pub fn expect(self, msg: &str) -> T
80025f14:	27bdffc0 	addiu	sp,sp,-64
80025f18:	afa70018 	sw	a3,24(sp)
80025f1c:	afa6001c 	sw	a2,28(sp)
80025f20:	8fa10050 	lw	at,80(sp)
80025f24:	afa10020 	sw	at,32(sp)
80025f28:	afa40024 	sw	a0,36(sp)
80025f2c:	afa50028 	sw	a1,40(sp)
80025f30:	afa60038 	sw	a2,56(sp)
80025f34:	afa7003c 	sw	a3,60(sp)
        match self {
80025f38:	8fa10024 	lw	at,36(sp)
80025f3c:	14200006 	bnez	at,80025f58 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h220eec6768f13486E+0x44>
80025f40:	00000000 	nop
80025f44:	080097d3 	j	80025f4c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h220eec6768f13486E+0x38>
80025f48:	00000000 	nop
80025f4c:	27bd0040 	addiu	sp,sp,64
    }
80025f50:	03e00008 	jr	ra
80025f54:	00000000 	nop
            Err(e) => unwrap_failed(msg, &e),
80025f58:	8fa50018 	lw	a1,24(sp)
80025f5c:	8fa4001c 	lw	a0,28(sp)
80025f60:	8fa10020 	lw	at,32(sp)
80025f64:	8fa30024 	lw	v1,36(sp)
80025f68:	8fa20028 	lw	v0,40(sp)
80025f6c:	afa3002c 	sw	v1,44(sp)
80025f70:	afa20030 	sw	v0,48(sp)
80025f74:	03a01025 	move	v0,sp
80025f78:	ac410010 	sw	at,16(v0)
80025f7c:	3c018105 	lui	at,0x8105
80025f80:	2427cc6c 	addiu	a3,at,-13204
80025f84:	27a6002c 	addiu	a2,sp,44
80025f88:	0c00f4d5 	jal	8003d354 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
80025f8c:	00000000 	nop

80025f90 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha2b50f6124887a8cE>:
    pub fn expect(self, msg: &str) -> T
80025f90:	27bdffc0 	addiu	sp,sp,-64
80025f94:	afa7001c 	sw	a3,28(sp)
80025f98:	afa60020 	sw	a2,32(sp)
80025f9c:	afa50024 	sw	a1,36(sp)
80025fa0:	afa40028 	sw	a0,40(sp)
80025fa4:	afa50034 	sw	a1,52(sp)
80025fa8:	afa60038 	sw	a2,56(sp)
        match self {
80025fac:	8c810000 	lw	at,0(a0)
80025fb0:	14200009 	bnez	at,80025fd8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha2b50f6124887a8cE+0x48>
80025fb4:	00000000 	nop
80025fb8:	080097f0 	j	80025fc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha2b50f6124887a8cE+0x30>
80025fbc:	00000000 	nop
            Ok(t) => t,
80025fc0:	8fa10028 	lw	at,40(sp)
80025fc4:	8c220004 	lw	v0,4(at)
80025fc8:	afa2003c 	sw	v0,60(sp)
80025fcc:	27bd0040 	addiu	sp,sp,64
    }
80025fd0:	03e00008 	jr	ra
80025fd4:	00000000 	nop
            Err(e) => unwrap_failed(msg, &e),
80025fd8:	8fa50020 	lw	a1,32(sp)
80025fdc:	8fa40024 	lw	a0,36(sp)
80025fe0:	8fa1001c 	lw	at,28(sp)
80025fe4:	8fa20028 	lw	v0,40(sp)
80025fe8:	8c430000 	lw	v1,0(v0)
80025fec:	8c420004 	lw	v0,4(v0)
80025ff0:	afa3002c 	sw	v1,44(sp)
80025ff4:	afa20030 	sw	v0,48(sp)
80025ff8:	03a01025 	move	v0,sp
80025ffc:	ac410010 	sw	at,16(v0)
80026000:	3c018105 	lui	at,0x8105
80026004:	2427cc6c 	addiu	a3,at,-13204
80026008:	27a6002c 	addiu	a2,sp,44
8002600c:	0c00f4d5 	jal	8003d354 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
80026010:	00000000 	nop

80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>:
///
/// The intention is to not do that when running in the interpreter, as that one has its own
/// language UB checks which generally produce better errors.
#[rustc_const_unstable(feature = "const_ub_checks", issue = "none")]
#[inline]
pub(crate) const fn check_language_ub() -> bool {
80026014:	27bdffe8 	addiu	sp,sp,-24
80026018:	afbf0014 	sw	ra,20(sp)
        // Always disable UB checks.
        false
    }

    // Only used for UB checks so we may const_eval_select.
    intrinsics::ub_checks() && const_eval_select((), comptime, runtime)
8002601c:	08009809 	j	80026024 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE+0x10>
80026020:	00000000 	nop
80026024:	0c009814 	jal	80026050 <_ZN4core9ub_checks17check_language_ub7runtime17h03877c430f5743f1E>
80026028:	00000000 	nop
8002602c:	a3a20013 	sb	v0,19(sp)
80026030:	0800980e 	j	80026038 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE+0x24>
80026034:	00000000 	nop
}
80026038:	93a10013 	lbu	at,19(sp)
8002603c:	30220001 	andi	v0,at,0x1
80026040:	8fbf0014 	lw	ra,20(sp)
80026044:	27bd0018 	addiu	sp,sp,24
80026048:	03e00008 	jr	ra
8002604c:	00000000 	nop

80026050 <_ZN4core9ub_checks17check_language_ub7runtime17h03877c430f5743f1E>:
    fn runtime() -> bool {
80026050:	24020001 	li	v0,1
    }
80026054:	03e00008 	jr	ra
80026058:	00000000 	nop

8002605c <_ZN4core9ub_checks17is_nonoverlapping17ha8e3a2bdfbbd3b1eE>:
/// `count * size` do *not* overlap.
///
/// Note that in const-eval this function just returns `true` and therefore must
/// only be used with `assert_unsafe_precondition!`, similar to `is_aligned_and_not_null`.
#[inline]
pub(crate) const fn is_nonoverlapping(
8002605c:	27bdffc8 	addiu	sp,sp,-56
80026060:	afbf0034 	sw	ra,52(sp)
80026064:	afa40024 	sw	a0,36(sp)
80026068:	afa50028 	sw	a1,40(sp)
8002606c:	afa6002c 	sw	a2,44(sp)
80026070:	afa70030 	sw	a3,48(sp)
    const fn comptime(_: *const (), _: *const (), _: usize, _: usize) -> bool {
        true
    }

    // This is just for safety checks so we can const_eval_select.
    const_eval_select((src, dst, size, count), comptime, runtime)
80026074:	afa40014 	sw	a0,20(sp)
80026078:	afa50018 	sw	a1,24(sp)
8002607c:	afa6001c 	sw	a2,28(sp)
80026080:	afa70020 	sw	a3,32(sp)
80026084:	8fa40014 	lw	a0,20(sp)
80026088:	8fa50018 	lw	a1,24(sp)
8002608c:	8fa6001c 	lw	a2,28(sp)
80026090:	8fa70020 	lw	a3,32(sp)
80026094:	0c00982b 	jal	800260ac <_ZN4core9ub_checks17is_nonoverlapping7runtime17h3a30eb8d84cd978fE>
80026098:	00000000 	nop
}
8002609c:	8fbf0034 	lw	ra,52(sp)
800260a0:	27bd0038 	addiu	sp,sp,56
800260a4:	03e00008 	jr	ra
800260a8:	00000000 	nop

800260ac <_ZN4core9ub_checks17is_nonoverlapping7runtime17h3a30eb8d84cd978fE>:
    fn runtime(src: *const (), dst: *const (), size: usize, count: usize) -> bool {
800260ac:	27bdffa0 	addiu	sp,sp,-96
800260b0:	afbf005c 	sw	ra,92(sp)
800260b4:	afa70014 	sw	a3,20(sp)
800260b8:	afa60018 	sw	a2,24(sp)
800260bc:	00a00825 	move	at,a1
800260c0:	8fa50014 	lw	a1,20(sp)
800260c4:	00801025 	move	v0,a0
800260c8:	8fa40018 	lw	a0,24(sp)
800260cc:	afa2002c 	sw	v0,44(sp)
800260d0:	afa10030 	sw	at,48(sp)
800260d4:	afa40034 	sw	a0,52(sp)
800260d8:	afa50038 	sw	a1,56(sp)
800260dc:	afa20050 	sw	v0,80(sp)
800260e0:	afa20054 	sw	v0,84(sp)
        unsafe { mem::transmute(self.cast::<()>()) }
800260e4:	00401825 	move	v1,v0
800260e8:	afa3001c 	sw	v1,28(sp)
        let src_usize = src.addr();
800260ec:	afa2003c 	sw	v0,60(sp)
800260f0:	afa1004c 	sw	at,76(sp)
800260f4:	afa10058 	sw	at,88(sp)
800260f8:	00201025 	move	v0,at
800260fc:	afa20020 	sw	v0,32(sp)
        let dst_usize = dst.addr();
80026100:	afa10040 	sw	at,64(sp)
        let Some(size) = size.checked_mul(count) else {
80026104:	0c008515 	jal	80021454 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h20af8f0316a1a66fE>
80026108:	00000000 	nop
8002610c:	afa20024 	sw	v0,36(sp)
80026110:	afa30028 	sw	v1,40(sp)
80026114:	8fa10024 	lw	at,36(sp)
80026118:	24020001 	li	v0,1
8002611c:	14220012 	bne	at,v0,80026168 <_ZN4core9ub_checks17is_nonoverlapping7runtime17h3a30eb8d84cd978fE+0xbc>
80026120:	00000000 	nop
80026124:	0800984b 	j	8002612c <_ZN4core9ub_checks17is_nonoverlapping7runtime17h3a30eb8d84cd978fE+0x80>
80026128:	00000000 	nop
8002612c:	8fa50020 	lw	a1,32(sp)
80026130:	8fa4001c 	lw	a0,28(sp)
80026134:	8fa10028 	lw	at,40(sp)
80026138:	afa10010 	sw	at,16(sp)
8002613c:	afa10044 	sw	at,68(sp)
        let diff = src_usize.abs_diff(dst_usize);
80026140:	0c00853d 	jal	800214f4 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h726667f057c65fedE>
80026144:	00000000 	nop
80026148:	8fa10010 	lw	at,16(sp)
8002614c:	afa20048 	sw	v0,72(sp)
        diff >= size
80026150:	0041082b 	sltu	at,v0,at
80026154:	38220001 	xori	v0,at,0x1
    }
80026158:	8fbf005c 	lw	ra,92(sp)
8002615c:	27bd0060 	addiu	sp,sp,96
80026160:	03e00008 	jr	ra
80026164:	00000000 	nop
            crate::panicking::panic_nounwind(
80026168:	3c018105 	lui	at,0x8105
8002616c:	2424ccb8 	addiu	a0,at,-13128
80026170:	2405003d 	li	a1,61
80026174:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80026178:	00000000 	nop

8002617c <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE>:
pub(crate) const fn is_aligned_and_not_null(ptr: *const (), align: usize) -> bool {
8002617c:	27bdffd8 	addiu	sp,sp,-40
80026180:	afbf0024 	sw	ra,36(sp)
80026184:	afa50010 	sw	a1,16(sp)
80026188:	afa40014 	sw	a0,20(sp)
8002618c:	afa4001c 	sw	a0,28(sp)
80026190:	afa50020 	sw	a1,32(sp)
    !ptr.is_null() && ptr.is_aligned_to(align)
80026194:	0c00e5c5 	jal	80039714 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h7332b93c4f97f066E>
80026198:	00000000 	nop
8002619c:	1440000a 	bnez	v0,800261c8 <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE+0x4c>
800261a0:	00000000 	nop
800261a4:	0800986b 	j	800261ac <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE+0x30>
800261a8:	00000000 	nop
800261ac:	8fa50010 	lw	a1,16(sp)
800261b0:	8fa40014 	lw	a0,20(sp)
800261b4:	0c00e61b 	jal	8003986c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to17hb855d440ce971e64E>
800261b8:	00000000 	nop
800261bc:	a3a2001b 	sb	v0,27(sp)
800261c0:	08009876 	j	800261d8 <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE+0x5c>
800261c4:	00000000 	nop
800261c8:	24010000 	li	at,0
800261cc:	a3a0001b 	sb	zero,27(sp)
800261d0:	08009876 	j	800261d8 <_ZN4core9ub_checks23is_aligned_and_not_null17h4b33966c6d4f005bE+0x5c>
800261d4:	00000000 	nop
}
800261d8:	93a1001b 	lbu	at,27(sp)
800261dc:	30220001 	andi	v0,at,0x1
800261e0:	8fbf0024 	lw	ra,36(sp)
800261e4:	27bd0028 	addiu	sp,sp,40
800261e8:	03e00008 	jr	ra
800261ec:	00000000 	nop

800261f0 <_ZN4core9ub_checks24is_valid_allocation_size17h62ca39954c87599fE>:
pub(crate) const fn is_valid_allocation_size(size: usize, len: usize) -> bool {
800261f0:	27bdffd8 	addiu	sp,sp,-40
800261f4:	afa50014 	sw	a1,20(sp)
800261f8:	afa40018 	sw	a0,24(sp)
800261fc:	afa40020 	sw	a0,32(sp)
80026200:	afa50024 	sw	a1,36(sp)
    let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
80026204:	14800007 	bnez	a0,80026224 <_ZN4core9ub_checks24is_valid_allocation_size17h62ca39954c87599fE+0x34>
80026208:	00000000 	nop
8002620c:	08009885 	j	80026214 <_ZN4core9ub_checks24is_valid_allocation_size17h62ca39954c87599fE+0x24>
80026210:	00000000 	nop
80026214:	2401ffff 	li	at,-1
80026218:	afa1001c 	sw	at,28(sp)
8002621c:	0800988e 	j	80026238 <_ZN4core9ub_checks24is_valid_allocation_size17h62ca39954c87599fE+0x48>
80026220:	00000000 	nop
80026224:	8fa10018 	lw	at,24(sp)
80026228:	10200013 	beqz	at,80026278 <_ZN4core9ub_checks24is_valid_allocation_size17h62ca39954c87599fE+0x88>
8002622c:	00000000 	nop
80026230:	08009895 	j	80026254 <_ZN4core9ub_checks24is_valid_allocation_size17h62ca39954c87599fE+0x64>
80026234:	00000000 	nop
    len <= max_len
80026238:	8fa20014 	lw	v0,20(sp)
8002623c:	8fa1001c 	lw	at,28(sp)
80026240:	0022082b 	sltu	at,at,v0
80026244:	38220001 	xori	v0,at,0x1
80026248:	27bd0028 	addiu	sp,sp,40
}
8002624c:	03e00008 	jr	ra
80026250:	00000000 	nop
80026254:	8fa10018 	lw	at,24(sp)
80026258:	3c027fff 	lui	v0,0x7fff
8002625c:	3442ffff 	ori	v0,v0,0xffff
    let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
80026260:	0041001b 	divu	zero,v0,at
80026264:	002001f4 	teq	at,zero,0x7
80026268:	00000812 	mflo	at
8002626c:	afa1001c 	sw	at,28(sp)
80026270:	0800988e 	j	80026238 <_ZN4core9ub_checks24is_valid_allocation_size17h62ca39954c87599fE+0x48>
80026274:	00000000 	nop
80026278:	3c018105 	lui	at,0x8105
8002627c:	2424cd64 	addiu	a0,at,-12956
80026280:	0c011b70 	jal	80046dc0 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
80026284:	00000000 	nop

80026288 <_ZN4spin4once13Once$LT$T$GT$9call_once17h2be03b50f406f1fdE>:
    /// fn expensive_computation() -> usize {
    ///     // ...
    /// # 2
    /// }
    /// ```
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80026288:	27bdff98 	addiu	sp,sp,-104
8002628c:	afbf0064 	sw	ra,100(sp)
80026290:	afa40020 	sw	a0,32(sp)
80026294:	afa40058 	sw	a0,88(sp)
80026298:	24010000 	li	at,0
                // This next line is strictly an optimization
                return self.force_get();
            }
        }

        loop {
8002629c:	a3a00057 	sb	zero,87(sp)
800262a0:	24010001 	li	at,1
800262a4:	a3a10057 	sb	at,87(sp)
        let mut status = self.state.load(Ordering::SeqCst);
800262a8:	24840010 	addiu	a0,a0,16
800262ac:	24010004 	li	at,4
800262b0:	a3a1002e 	sb	at,46(sp)
800262b4:	93a5002e 	lbu	a1,46(sp)
800262b8:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
800262bc:	00000000 	nop
800262c0:	afa20028 	sw	v0,40(sp)
        if status == INCOMPLETE {
800262c4:	8fa10028 	lw	at,40(sp)
800262c8:	1020000f 	beqz	at,80026308 <_ZN4spin4once13Once$LT$T$GT$9call_once17h2be03b50f406f1fdE+0x80>
800262cc:	00000000 	nop
800262d0:	080098b6 	j	800262d8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h2be03b50f406f1fdE+0x50>
800262d4:	00000000 	nop
            match status {
800262d8:	8fa10028 	lw	at,40(sp)
800262dc:	afa1001c 	sw	at,28(sp)
800262e0:	2c210004 	sltiu	at,at,4
800262e4:	1020004b 	beqz	at,80026414 <_ZN4spin4once13Once$LT$T$GT$9call_once17h2be03b50f406f1fdE+0x18c>
800262e8:	00000000 	nop
800262ec:	8fa1001c 	lw	at,28(sp)
800262f0:	00010880 	sll	at,at,0x2
800262f4:	3c028105 	lui	v0,0x8105
800262f8:	00220821 	addu	at,at,v0
800262fc:	8c21c074 	lw	at,-16268(at)
80026300:	00200008 	jr	at
80026304:	00000000 	nop
            status = self.state.compare_and_swap(INCOMPLETE,
80026308:	8fa10020 	lw	at,32(sp)
8002630c:	24240010 	addiu	a0,at,16
80026310:	24010004 	li	at,4
                                                 Ordering::SeqCst);
80026314:	a3a1002f 	sb	at,47(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
80026318:	93a7002f 	lbu	a3,47(sp)
8002631c:	24050000 	li	a1,0
80026320:	24060001 	li	a2,1
80026324:	0c00912b 	jal	800244ac <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE>
80026328:	00000000 	nop
8002632c:	afa20028 	sw	v0,40(sp)
            if status == INCOMPLETE { // We init
80026330:	8fa10028 	lw	at,40(sp)
80026334:	1420ffe8 	bnez	at,800262d8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h2be03b50f406f1fdE+0x50>
80026338:	00000000 	nop
8002633c:	080098d1 	j	80026344 <_ZN4spin4once13Once$LT$T$GT$9call_once17h2be03b50f406f1fdE+0xbc>
80026340:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
80026344:	8fa10020 	lw	at,32(sp)
80026348:	24210010 	addiu	at,at,16
8002634c:	afa10018 	sw	at,24(sp)
80026350:	afa10030 	sw	at,48(sp)
80026354:	24010001 	li	at,1
80026358:	afa10014 	sw	at,20(sp)
8002635c:	a3a10034 	sb	at,52(sp)
80026360:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
80026364:	a3a00057 	sb	zero,87(sp)
80026368:	27a40048 	addiu	a0,sp,72
8002636c:	0c00864f 	jal	8002193c <_ZN4core3ops8function6FnOnce9call_once17hb61953d0f4e9347cE>
80026370:	00000000 	nop
80026374:	8fa10014 	lw	at,20(sp)
80026378:	8fa40020 	lw	a0,32(sp)
8002637c:	8fa20050 	lw	v0,80(sp)
80026380:	afa20044 	sw	v0,68(sp)
80026384:	8fa2004c 	lw	v0,76(sp)
80026388:	afa20040 	sw	v0,64(sp)
8002638c:	8fa20048 	lw	v0,72(sp)
80026390:	afa2003c 	sw	v0,60(sp)
80026394:	afa10038 	sw	at,56(sp)
80026398:	afa40060 	sw	a0,96(sp)
8002639c:	0c0086d1 	jal	80021b44 <_ZN4core3ptr109drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$$GT$17h0b5c737bc5ff2950E>
800263a0:	00000000 	nop
800263a4:	8fa40018 	lw	a0,24(sp)
800263a8:	8fa20020 	lw	v0,32(sp)
800263ac:	8fa10044 	lw	at,68(sp)
800263b0:	ac41000c 	sw	at,12(v0)
800263b4:	8fa10040 	lw	at,64(sp)
800263b8:	ac410008 	sw	at,8(v0)
800263bc:	8fa1003c 	lw	at,60(sp)
800263c0:	ac410004 	sw	at,4(v0)
800263c4:	8fa10038 	lw	at,56(sp)
800263c8:	ac410000 	sw	at,0(v0)
                finish.panicked = false;
800263cc:	a3a00034 	sb	zero,52(sp)
800263d0:	24010002 	li	at,2
                status = COMPLETE;
800263d4:	afa10028 	sw	at,40(sp)
                self.state.store(status, Ordering::SeqCst);
800263d8:	8fa50028 	lw	a1,40(sp)
800263dc:	24010004 	li	at,4
800263e0:	a3a10055 	sb	at,85(sp)
800263e4:	93a60055 	lbu	a2,85(sp)
800263e8:	0c00917d 	jal	800245f4 <_ZN4core4sync6atomic11AtomicUsize5store17h7de3301adcc232e0E>
800263ec:	00000000 	nop
800263f0:	8fa40020 	lw	a0,32(sp)
                return self.force_get();
800263f4:	0c009f4e 	jal	80027d38 <_ZN4spin4once13Once$LT$T$GT$9force_get17h641b87987d15afacE>
800263f8:	00000000 	nop
800263fc:	afa20024 	sw	v0,36(sp)
80026400:	27a40030 	addiu	a0,sp,48
            }
80026404:	0c00886c 	jal	800221b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hf75b1038f2f395baE>
80026408:	00000000 	nop
8002640c:	08009927 	j	8002649c <_ZN4spin4once13Once$LT$T$GT$9call_once17h2be03b50f406f1fdE+0x214>
80026410:	00000000 	nop
                    cpu_relax();
                    status = self.state.load(Ordering::SeqCst)
                },
                PANICKED => panic!("Once has panicked"),
                COMPLETE => return self.force_get(),
                _ => unsafe { unreachable() },
80026414:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80026418:	00000000 	nop
                INCOMPLETE => unreachable!(),
8002641c:	3c018105 	lui	at,0x8105
80026420:	2424cd74 	addiu	a0,at,-12940
80026424:	3c018105 	lui	at,0x8105
80026428:	2426cdf0 	addiu	a2,at,-12816
8002642c:	24050028 	li	a1,40
80026430:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80026434:	00000000 	nop
                    cpu_relax();
80026438:	0c0091a1 	jal	80024684 <_ZN4core4sync6atomic14spin_loop_hint17he1304bcd04fc1e59E>
8002643c:	00000000 	nop
80026440:	8fa10020 	lw	at,32(sp)
                    status = self.state.load(Ordering::SeqCst)
80026444:	24240010 	addiu	a0,at,16
80026448:	24010004 	li	at,4
8002644c:	a3a10056 	sb	at,86(sp)
80026450:	93a50056 	lbu	a1,86(sp)
80026454:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
80026458:	00000000 	nop
8002645c:	afa20028 	sw	v0,40(sp)
80026460:	080098b6 	j	800262d8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h2be03b50f406f1fdE+0x50>
80026464:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
80026468:	3c018105 	lui	at,0x8105
8002646c:	2424ce00 	addiu	a0,at,-12800
80026470:	3c018105 	lui	at,0x8105
80026474:	2426ce14 	addiu	a2,at,-12780
80026478:	24050011 	li	a1,17
8002647c:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80026480:	00000000 	nop
                COMPLETE => return self.force_get(),
80026484:	8fa40020 	lw	a0,32(sp)
80026488:	0c009f4e 	jal	80027d38 <_ZN4spin4once13Once$LT$T$GT$9force_get17h641b87987d15afacE>
8002648c:	00000000 	nop
80026490:	afa20024 	sw	v0,36(sp)
#![cfg_attr(target_arch = "mips", feature(asm_experimental_arch))]
80026494:	08009927 	j	8002649c <_ZN4spin4once13Once$LT$T$GT$9call_once17h2be03b50f406f1fdE+0x214>
80026498:	00000000 	nop
            }
        }
    }
8002649c:	93a10057 	lbu	at,87(sp)
800264a0:	30210001 	andi	at,at,0x1
800264a4:	14200008 	bnez	at,800264c8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h2be03b50f406f1fdE+0x240>
800264a8:	00000000 	nop
800264ac:	0800992d 	j	800264b4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h2be03b50f406f1fdE+0x22c>
800264b0:	00000000 	nop
800264b4:	8fa20024 	lw	v0,36(sp)
800264b8:	8fbf0064 	lw	ra,100(sp)
800264bc:	27bd0068 	addiu	sp,sp,104
800264c0:	03e00008 	jr	ra
800264c4:	00000000 	nop
800264c8:	0800992d 	j	800264b4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h2be03b50f406f1fdE+0x22c>
800264cc:	00000000 	nop

800264d0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h327844d4de27f3a8E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
800264d0:	27bdffa8 	addiu	sp,sp,-88
800264d4:	afbf0054 	sw	ra,84(sp)
800264d8:	afa40018 	sw	a0,24(sp)
800264dc:	afa40048 	sw	a0,72(sp)
800264e0:	24010000 	li	at,0
        loop {
800264e4:	a3a00047 	sb	zero,71(sp)
800264e8:	24010001 	li	at,1
800264ec:	a3a10047 	sb	at,71(sp)
800264f0:	24010004 	li	at,4
        let mut status = self.state.load(Ordering::SeqCst);
800264f4:	a3a10026 	sb	at,38(sp)
800264f8:	93a50026 	lbu	a1,38(sp)
800264fc:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
80026500:	00000000 	nop
80026504:	afa20020 	sw	v0,32(sp)
        if status == INCOMPLETE {
80026508:	8fa10020 	lw	at,32(sp)
8002650c:	1020000f 	beqz	at,8002654c <_ZN4spin4once13Once$LT$T$GT$9call_once17h327844d4de27f3a8E+0x7c>
80026510:	00000000 	nop
80026514:	08009947 	j	8002651c <_ZN4spin4once13Once$LT$T$GT$9call_once17h327844d4de27f3a8E+0x4c>
80026518:	00000000 	nop
            match status {
8002651c:	8fa10020 	lw	at,32(sp)
80026520:	afa10014 	sw	at,20(sp)
80026524:	2c210004 	sltiu	at,at,4
80026528:	10200044 	beqz	at,8002663c <_ZN4spin4once13Once$LT$T$GT$9call_once17h327844d4de27f3a8E+0x16c>
8002652c:	00000000 	nop
80026530:	8fa10014 	lw	at,20(sp)
80026534:	00010880 	sll	at,at,0x2
80026538:	3c028105 	lui	v0,0x8105
8002653c:	00220821 	addu	at,at,v0
80026540:	8c21c084 	lw	at,-16252(at)
80026544:	00200008 	jr	at
80026548:	00000000 	nop
8002654c:	8fa40018 	lw	a0,24(sp)
80026550:	24010004 	li	at,4
                                                 Ordering::SeqCst);
80026554:	a3a10027 	sb	at,39(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
80026558:	93a70027 	lbu	a3,39(sp)
8002655c:	24050000 	li	a1,0
80026560:	24060001 	li	a2,1
80026564:	0c00912b 	jal	800244ac <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE>
80026568:	00000000 	nop
8002656c:	afa20020 	sw	v0,32(sp)
            if status == INCOMPLETE { // We init
80026570:	8fa10020 	lw	at,32(sp)
80026574:	1420ffe9 	bnez	at,8002651c <_ZN4spin4once13Once$LT$T$GT$9call_once17h327844d4de27f3a8E+0x4c>
80026578:	00000000 	nop
8002657c:	08009961 	j	80026584 <_ZN4spin4once13Once$LT$T$GT$9call_once17h327844d4de27f3a8E+0xb4>
80026580:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
80026584:	8fa10018 	lw	at,24(sp)
80026588:	afa10028 	sw	at,40(sp)
8002658c:	24010001 	li	at,1
80026590:	afa10010 	sw	at,16(sp)
80026594:	a3a1002c 	sb	at,44(sp)
80026598:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
8002659c:	a3a00047 	sb	zero,71(sp)
800265a0:	27a4003c 	addiu	a0,sp,60
800265a4:	0c008607 	jal	8002181c <_ZN4core3ops8function6FnOnce9call_once17h567bd086a7405f98E>
800265a8:	00000000 	nop
800265ac:	8fa20010 	lw	v0,16(sp)
800265b0:	8fa10018 	lw	at,24(sp)
800265b4:	8fa30040 	lw	v1,64(sp)
800265b8:	afa30038 	sw	v1,56(sp)
800265bc:	8fa3003c 	lw	v1,60(sp)
800265c0:	afa30034 	sw	v1,52(sp)
800265c4:	afa20030 	sw	v0,48(sp)
800265c8:	24240004 	addiu	a0,at,4
800265cc:	afa40050 	sw	a0,80(sp)
800265d0:	0c008741 	jal	80021d04 <_ZN4core3ptr132drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$$GT$17heb5c6c7a44bde47fE>
800265d4:	00000000 	nop
800265d8:	8fa40018 	lw	a0,24(sp)
800265dc:	8fa10038 	lw	at,56(sp)
800265e0:	ac81000c 	sw	at,12(a0)
800265e4:	8fa10034 	lw	at,52(sp)
800265e8:	ac810008 	sw	at,8(a0)
800265ec:	8fa10030 	lw	at,48(sp)
800265f0:	ac810004 	sw	at,4(a0)
                finish.panicked = false;
800265f4:	a3a0002c 	sb	zero,44(sp)
800265f8:	24010002 	li	at,2
                status = COMPLETE;
800265fc:	afa10020 	sw	at,32(sp)
                self.state.store(status, Ordering::SeqCst);
80026600:	8fa50020 	lw	a1,32(sp)
80026604:	24010004 	li	at,4
80026608:	a3a10045 	sb	at,69(sp)
8002660c:	93a60045 	lbu	a2,69(sp)
80026610:	0c00917d 	jal	800245f4 <_ZN4core4sync6atomic11AtomicUsize5store17h7de3301adcc232e0E>
80026614:	00000000 	nop
80026618:	8fa40018 	lw	a0,24(sp)
                return self.force_get();
8002661c:	0c009f39 	jal	80027ce4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5bb97189227823e5E>
80026620:	00000000 	nop
80026624:	afa2001c 	sw	v0,28(sp)
80026628:	27a40028 	addiu	a0,sp,40
            }
8002662c:	0c00886c 	jal	800221b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hf75b1038f2f395baE>
80026630:	00000000 	nop
80026634:	080099b0 	j	800266c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h327844d4de27f3a8E+0x1f0>
80026638:	00000000 	nop
                _ => unsafe { unreachable() },
8002663c:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80026640:	00000000 	nop
                INCOMPLETE => unreachable!(),
80026644:	3c018105 	lui	at,0x8105
80026648:	2424cd74 	addiu	a0,at,-12940
8002664c:	3c018105 	lui	at,0x8105
80026650:	2426cdf0 	addiu	a2,at,-12816
80026654:	24050028 	li	a1,40
80026658:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
8002665c:	00000000 	nop
                    cpu_relax();
80026660:	0c0091a1 	jal	80024684 <_ZN4core4sync6atomic14spin_loop_hint17he1304bcd04fc1e59E>
80026664:	00000000 	nop
80026668:	8fa40018 	lw	a0,24(sp)
8002666c:	24010004 	li	at,4
                    status = self.state.load(Ordering::SeqCst)
80026670:	a3a10046 	sb	at,70(sp)
80026674:	93a50046 	lbu	a1,70(sp)
80026678:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
8002667c:	00000000 	nop
80026680:	afa20020 	sw	v0,32(sp)
80026684:	08009947 	j	8002651c <_ZN4spin4once13Once$LT$T$GT$9call_once17h327844d4de27f3a8E+0x4c>
80026688:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
8002668c:	3c018105 	lui	at,0x8105
80026690:	2424ce00 	addiu	a0,at,-12800
80026694:	3c018105 	lui	at,0x8105
80026698:	2426ce14 	addiu	a2,at,-12780
8002669c:	24050011 	li	a1,17
800266a0:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
800266a4:	00000000 	nop
                COMPLETE => return self.force_get(),
800266a8:	8fa40018 	lw	a0,24(sp)
800266ac:	0c009f39 	jal	80027ce4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5bb97189227823e5E>
800266b0:	00000000 	nop
800266b4:	afa2001c 	sw	v0,28(sp)
800266b8:	080099b0 	j	800266c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h327844d4de27f3a8E+0x1f0>
800266bc:	00000000 	nop
    }
800266c0:	93a10047 	lbu	at,71(sp)
800266c4:	30210001 	andi	at,at,0x1
800266c8:	14200008 	bnez	at,800266ec <_ZN4spin4once13Once$LT$T$GT$9call_once17h327844d4de27f3a8E+0x21c>
800266cc:	00000000 	nop
800266d0:	080099b6 	j	800266d8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h327844d4de27f3a8E+0x208>
800266d4:	00000000 	nop
800266d8:	8fa2001c 	lw	v0,28(sp)
800266dc:	8fbf0054 	lw	ra,84(sp)
800266e0:	27bd0058 	addiu	sp,sp,88
800266e4:	03e00008 	jr	ra
800266e8:	00000000 	nop
800266ec:	080099b6 	j	800266d8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h327844d4de27f3a8E+0x208>
800266f0:	00000000 	nop

800266f4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h32876f3aa2e00162E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
800266f4:	27bdff98 	addiu	sp,sp,-104
800266f8:	afbf0064 	sw	ra,100(sp)
800266fc:	afa40018 	sw	a0,24(sp)
80026700:	afa40058 	sw	a0,88(sp)
80026704:	24010000 	li	at,0
        loop {
80026708:	a3a00057 	sb	zero,87(sp)
8002670c:	24010001 	li	at,1
80026710:	a3a10057 	sb	at,87(sp)
80026714:	24010004 	li	at,4
        let mut status = self.state.load(Ordering::SeqCst);
80026718:	a3a10026 	sb	at,38(sp)
8002671c:	93a50026 	lbu	a1,38(sp)
80026720:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
80026724:	00000000 	nop
80026728:	afa20020 	sw	v0,32(sp)
        if status == INCOMPLETE {
8002672c:	8fa10020 	lw	at,32(sp)
80026730:	1020000f 	beqz	at,80026770 <_ZN4spin4once13Once$LT$T$GT$9call_once17h32876f3aa2e00162E+0x7c>
80026734:	00000000 	nop
80026738:	080099d0 	j	80026740 <_ZN4spin4once13Once$LT$T$GT$9call_once17h32876f3aa2e00162E+0x4c>
8002673c:	00000000 	nop
            match status {
80026740:	8fa10020 	lw	at,32(sp)
80026744:	afa10014 	sw	at,20(sp)
80026748:	2c210004 	sltiu	at,at,4
8002674c:	1020004c 	beqz	at,80026880 <_ZN4spin4once13Once$LT$T$GT$9call_once17h32876f3aa2e00162E+0x18c>
80026750:	00000000 	nop
80026754:	8fa10014 	lw	at,20(sp)
80026758:	00010880 	sll	at,at,0x2
8002675c:	3c028105 	lui	v0,0x8105
80026760:	00220821 	addu	at,at,v0
80026764:	8c21c094 	lw	at,-16236(at)
80026768:	00200008 	jr	at
8002676c:	00000000 	nop
80026770:	8fa40018 	lw	a0,24(sp)
80026774:	24010004 	li	at,4
                                                 Ordering::SeqCst);
80026778:	a3a10027 	sb	at,39(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
8002677c:	93a70027 	lbu	a3,39(sp)
80026780:	24050000 	li	a1,0
80026784:	24060001 	li	a2,1
80026788:	0c00912b 	jal	800244ac <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE>
8002678c:	00000000 	nop
80026790:	afa20020 	sw	v0,32(sp)
            if status == INCOMPLETE { // We init
80026794:	8fa10020 	lw	at,32(sp)
80026798:	1420ffe9 	bnez	at,80026740 <_ZN4spin4once13Once$LT$T$GT$9call_once17h32876f3aa2e00162E+0x4c>
8002679c:	00000000 	nop
800267a0:	080099ea 	j	800267a8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h32876f3aa2e00162E+0xb4>
800267a4:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
800267a8:	8fa10018 	lw	at,24(sp)
800267ac:	afa10028 	sw	at,40(sp)
800267b0:	24010001 	li	at,1
800267b4:	afa10010 	sw	at,16(sp)
800267b8:	a3a1002c 	sb	at,44(sp)
800267bc:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
800267c0:	a3a00057 	sb	zero,87(sp)
800267c4:	27a40044 	addiu	a0,sp,68
800267c8:	0c00863e 	jal	800218f8 <_ZN4core3ops8function6FnOnce9call_once17haf1fe901da4aff33E>
800267cc:	00000000 	nop
800267d0:	8fa20010 	lw	v0,16(sp)
800267d4:	8fa10018 	lw	at,24(sp)
800267d8:	8fa30050 	lw	v1,80(sp)
800267dc:	afa30040 	sw	v1,64(sp)
800267e0:	8fa3004c 	lw	v1,76(sp)
800267e4:	afa3003c 	sw	v1,60(sp)
800267e8:	8fa30048 	lw	v1,72(sp)
800267ec:	afa30038 	sw	v1,56(sp)
800267f0:	8fa30044 	lw	v1,68(sp)
800267f4:	afa30034 	sw	v1,52(sp)
800267f8:	afa20030 	sw	v0,48(sp)
800267fc:	24240004 	addiu	a0,at,4
80026800:	afa40060 	sw	a0,96(sp)
80026804:	0c00871b 	jal	80021c6c <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$$GT$17hc7bff919d8a7068eE>
80026808:	00000000 	nop
8002680c:	8fa40018 	lw	a0,24(sp)
80026810:	8fa10040 	lw	at,64(sp)
80026814:	ac810014 	sw	at,20(a0)
80026818:	8fa1003c 	lw	at,60(sp)
8002681c:	ac810010 	sw	at,16(a0)
80026820:	8fa10038 	lw	at,56(sp)
80026824:	ac81000c 	sw	at,12(a0)
80026828:	8fa10034 	lw	at,52(sp)
8002682c:	ac810008 	sw	at,8(a0)
80026830:	8fa10030 	lw	at,48(sp)
80026834:	ac810004 	sw	at,4(a0)
                finish.panicked = false;
80026838:	a3a0002c 	sb	zero,44(sp)
8002683c:	24010002 	li	at,2
                status = COMPLETE;
80026840:	afa10020 	sw	at,32(sp)
                self.state.store(status, Ordering::SeqCst);
80026844:	8fa50020 	lw	a1,32(sp)
80026848:	24010004 	li	at,4
8002684c:	a3a10055 	sb	at,85(sp)
80026850:	93a60055 	lbu	a2,85(sp)
80026854:	0c00917d 	jal	800245f4 <_ZN4core4sync6atomic11AtomicUsize5store17h7de3301adcc232e0E>
80026858:	00000000 	nop
8002685c:	8fa40018 	lw	a0,24(sp)
                return self.force_get();
80026860:	0c009f0f 	jal	80027c3c <_ZN4spin4once13Once$LT$T$GT$9force_get17h3c1cb2ea872c114bE>
80026864:	00000000 	nop
80026868:	afa2001c 	sw	v0,28(sp)
8002686c:	27a40028 	addiu	a0,sp,40
            }
80026870:	0c00886c 	jal	800221b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hf75b1038f2f395baE>
80026874:	00000000 	nop
80026878:	08009a41 	j	80026904 <_ZN4spin4once13Once$LT$T$GT$9call_once17h32876f3aa2e00162E+0x210>
8002687c:	00000000 	nop
                _ => unsafe { unreachable() },
80026880:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80026884:	00000000 	nop
                INCOMPLETE => unreachable!(),
80026888:	3c018105 	lui	at,0x8105
8002688c:	2424cd74 	addiu	a0,at,-12940
80026890:	3c018105 	lui	at,0x8105
80026894:	2426cdf0 	addiu	a2,at,-12816
80026898:	24050028 	li	a1,40
8002689c:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
800268a0:	00000000 	nop
                    cpu_relax();
800268a4:	0c0091a1 	jal	80024684 <_ZN4core4sync6atomic14spin_loop_hint17he1304bcd04fc1e59E>
800268a8:	00000000 	nop
800268ac:	8fa40018 	lw	a0,24(sp)
800268b0:	24010004 	li	at,4
                    status = self.state.load(Ordering::SeqCst)
800268b4:	a3a10056 	sb	at,86(sp)
800268b8:	93a50056 	lbu	a1,86(sp)
800268bc:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
800268c0:	00000000 	nop
800268c4:	afa20020 	sw	v0,32(sp)
800268c8:	080099d0 	j	80026740 <_ZN4spin4once13Once$LT$T$GT$9call_once17h32876f3aa2e00162E+0x4c>
800268cc:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
800268d0:	3c018105 	lui	at,0x8105
800268d4:	2424ce00 	addiu	a0,at,-12800
800268d8:	3c018105 	lui	at,0x8105
800268dc:	2426ce14 	addiu	a2,at,-12780
800268e0:	24050011 	li	a1,17
800268e4:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
800268e8:	00000000 	nop
                COMPLETE => return self.force_get(),
800268ec:	8fa40018 	lw	a0,24(sp)
800268f0:	0c009f0f 	jal	80027c3c <_ZN4spin4once13Once$LT$T$GT$9force_get17h3c1cb2ea872c114bE>
800268f4:	00000000 	nop
800268f8:	afa2001c 	sw	v0,28(sp)
800268fc:	08009a41 	j	80026904 <_ZN4spin4once13Once$LT$T$GT$9call_once17h32876f3aa2e00162E+0x210>
80026900:	00000000 	nop
    }
80026904:	93a10057 	lbu	at,87(sp)
80026908:	30210001 	andi	at,at,0x1
8002690c:	14200008 	bnez	at,80026930 <_ZN4spin4once13Once$LT$T$GT$9call_once17h32876f3aa2e00162E+0x23c>
80026910:	00000000 	nop
80026914:	08009a47 	j	8002691c <_ZN4spin4once13Once$LT$T$GT$9call_once17h32876f3aa2e00162E+0x228>
80026918:	00000000 	nop
8002691c:	8fa2001c 	lw	v0,28(sp)
80026920:	8fbf0064 	lw	ra,100(sp)
80026924:	27bd0068 	addiu	sp,sp,104
80026928:	03e00008 	jr	ra
8002692c:	00000000 	nop
80026930:	08009a47 	j	8002691c <_ZN4spin4once13Once$LT$T$GT$9call_once17h32876f3aa2e00162E+0x228>
80026934:	00000000 	nop

80026938 <_ZN4spin4once13Once$LT$T$GT$9call_once17h339d9108e2beff77E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80026938:	27bdff98 	addiu	sp,sp,-104
8002693c:	afbf0064 	sw	ra,100(sp)
80026940:	afa40018 	sw	a0,24(sp)
80026944:	afa40058 	sw	a0,88(sp)
80026948:	24010000 	li	at,0
        loop {
8002694c:	a3a00057 	sb	zero,87(sp)
80026950:	24010001 	li	at,1
80026954:	a3a10057 	sb	at,87(sp)
80026958:	24010004 	li	at,4
        let mut status = self.state.load(Ordering::SeqCst);
8002695c:	a3a10026 	sb	at,38(sp)
80026960:	93a50026 	lbu	a1,38(sp)
80026964:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
80026968:	00000000 	nop
8002696c:	afa20020 	sw	v0,32(sp)
        if status == INCOMPLETE {
80026970:	8fa10020 	lw	at,32(sp)
80026974:	1020000f 	beqz	at,800269b4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h339d9108e2beff77E+0x7c>
80026978:	00000000 	nop
8002697c:	08009a61 	j	80026984 <_ZN4spin4once13Once$LT$T$GT$9call_once17h339d9108e2beff77E+0x4c>
80026980:	00000000 	nop
            match status {
80026984:	8fa10020 	lw	at,32(sp)
80026988:	afa10014 	sw	at,20(sp)
8002698c:	2c210004 	sltiu	at,at,4
80026990:	1020004c 	beqz	at,80026ac4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h339d9108e2beff77E+0x18c>
80026994:	00000000 	nop
80026998:	8fa10014 	lw	at,20(sp)
8002699c:	00010880 	sll	at,at,0x2
800269a0:	3c028105 	lui	v0,0x8105
800269a4:	00220821 	addu	at,at,v0
800269a8:	8c21c0a4 	lw	at,-16220(at)
800269ac:	00200008 	jr	at
800269b0:	00000000 	nop
800269b4:	8fa40018 	lw	a0,24(sp)
800269b8:	24010004 	li	at,4
                                                 Ordering::SeqCst);
800269bc:	a3a10027 	sb	at,39(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
800269c0:	93a70027 	lbu	a3,39(sp)
800269c4:	24050000 	li	a1,0
800269c8:	24060001 	li	a2,1
800269cc:	0c00912b 	jal	800244ac <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE>
800269d0:	00000000 	nop
800269d4:	afa20020 	sw	v0,32(sp)
            if status == INCOMPLETE { // We init
800269d8:	8fa10020 	lw	at,32(sp)
800269dc:	1420ffe9 	bnez	at,80026984 <_ZN4spin4once13Once$LT$T$GT$9call_once17h339d9108e2beff77E+0x4c>
800269e0:	00000000 	nop
800269e4:	08009a7b 	j	800269ec <_ZN4spin4once13Once$LT$T$GT$9call_once17h339d9108e2beff77E+0xb4>
800269e8:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
800269ec:	8fa10018 	lw	at,24(sp)
800269f0:	afa10028 	sw	at,40(sp)
800269f4:	24010001 	li	at,1
800269f8:	afa10010 	sw	at,16(sp)
800269fc:	a3a1002c 	sb	at,44(sp)
80026a00:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
80026a04:	a3a00057 	sb	zero,87(sp)
80026a08:	27a40044 	addiu	a0,sp,68
80026a0c:	0c008680 	jal	80021a00 <_ZN4core3ops8function6FnOnce9call_once17hf906e7e90bd437eaE>
80026a10:	00000000 	nop
80026a14:	8fa20010 	lw	v0,16(sp)
80026a18:	8fa10018 	lw	at,24(sp)
80026a1c:	8fa30050 	lw	v1,80(sp)
80026a20:	afa30040 	sw	v1,64(sp)
80026a24:	8fa3004c 	lw	v1,76(sp)
80026a28:	afa3003c 	sw	v1,60(sp)
80026a2c:	8fa30048 	lw	v1,72(sp)
80026a30:	afa30038 	sw	v1,56(sp)
80026a34:	8fa30044 	lw	v1,68(sp)
80026a38:	afa30034 	sw	v1,52(sp)
80026a3c:	afa20030 	sw	v0,48(sp)
80026a40:	24240004 	addiu	a0,at,4
80026a44:	afa40060 	sw	a0,96(sp)
80026a48:	0c0086ed 	jal	80021bb4 <_ZN4core3ptr119drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$$GT$17h5a6d57ebe1df8df0E>
80026a4c:	00000000 	nop
80026a50:	8fa40018 	lw	a0,24(sp)
80026a54:	8fa10040 	lw	at,64(sp)
80026a58:	ac810014 	sw	at,20(a0)
80026a5c:	8fa1003c 	lw	at,60(sp)
80026a60:	ac810010 	sw	at,16(a0)
80026a64:	8fa10038 	lw	at,56(sp)
80026a68:	ac81000c 	sw	at,12(a0)
80026a6c:	8fa10034 	lw	at,52(sp)
80026a70:	ac810008 	sw	at,8(a0)
80026a74:	8fa10030 	lw	at,48(sp)
80026a78:	ac810004 	sw	at,4(a0)
                finish.panicked = false;
80026a7c:	a3a0002c 	sb	zero,44(sp)
80026a80:	24010002 	li	at,2
                status = COMPLETE;
80026a84:	afa10020 	sw	at,32(sp)
                self.state.store(status, Ordering::SeqCst);
80026a88:	8fa50020 	lw	a1,32(sp)
80026a8c:	24010004 	li	at,4
80026a90:	a3a10055 	sb	at,85(sp)
80026a94:	93a60055 	lbu	a2,85(sp)
80026a98:	0c00917d 	jal	800245f4 <_ZN4core4sync6atomic11AtomicUsize5store17h7de3301adcc232e0E>
80026a9c:	00000000 	nop
80026aa0:	8fa40018 	lw	a0,24(sp)
                return self.force_get();
80026aa4:	0c009efa 	jal	80027be8 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3285100b4cedab94E>
80026aa8:	00000000 	nop
80026aac:	afa2001c 	sw	v0,28(sp)
80026ab0:	27a40028 	addiu	a0,sp,40
            }
80026ab4:	0c00886c 	jal	800221b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hf75b1038f2f395baE>
80026ab8:	00000000 	nop
80026abc:	08009ad2 	j	80026b48 <_ZN4spin4once13Once$LT$T$GT$9call_once17h339d9108e2beff77E+0x210>
80026ac0:	00000000 	nop
                _ => unsafe { unreachable() },
80026ac4:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80026ac8:	00000000 	nop
                INCOMPLETE => unreachable!(),
80026acc:	3c018105 	lui	at,0x8105
80026ad0:	2424cd74 	addiu	a0,at,-12940
80026ad4:	3c018105 	lui	at,0x8105
80026ad8:	2426cdf0 	addiu	a2,at,-12816
80026adc:	24050028 	li	a1,40
80026ae0:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80026ae4:	00000000 	nop
                    cpu_relax();
80026ae8:	0c0091a1 	jal	80024684 <_ZN4core4sync6atomic14spin_loop_hint17he1304bcd04fc1e59E>
80026aec:	00000000 	nop
80026af0:	8fa40018 	lw	a0,24(sp)
80026af4:	24010004 	li	at,4
                    status = self.state.load(Ordering::SeqCst)
80026af8:	a3a10056 	sb	at,86(sp)
80026afc:	93a50056 	lbu	a1,86(sp)
80026b00:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
80026b04:	00000000 	nop
80026b08:	afa20020 	sw	v0,32(sp)
80026b0c:	08009a61 	j	80026984 <_ZN4spin4once13Once$LT$T$GT$9call_once17h339d9108e2beff77E+0x4c>
80026b10:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
80026b14:	3c018105 	lui	at,0x8105
80026b18:	2424ce00 	addiu	a0,at,-12800
80026b1c:	3c018105 	lui	at,0x8105
80026b20:	2426ce14 	addiu	a2,at,-12780
80026b24:	24050011 	li	a1,17
80026b28:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80026b2c:	00000000 	nop
                COMPLETE => return self.force_get(),
80026b30:	8fa40018 	lw	a0,24(sp)
80026b34:	0c009efa 	jal	80027be8 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3285100b4cedab94E>
80026b38:	00000000 	nop
80026b3c:	afa2001c 	sw	v0,28(sp)
80026b40:	08009ad2 	j	80026b48 <_ZN4spin4once13Once$LT$T$GT$9call_once17h339d9108e2beff77E+0x210>
80026b44:	00000000 	nop
    }
80026b48:	93a10057 	lbu	at,87(sp)
80026b4c:	30210001 	andi	at,at,0x1
80026b50:	14200008 	bnez	at,80026b74 <_ZN4spin4once13Once$LT$T$GT$9call_once17h339d9108e2beff77E+0x23c>
80026b54:	00000000 	nop
80026b58:	08009ad8 	j	80026b60 <_ZN4spin4once13Once$LT$T$GT$9call_once17h339d9108e2beff77E+0x228>
80026b5c:	00000000 	nop
80026b60:	8fa2001c 	lw	v0,28(sp)
80026b64:	8fbf0064 	lw	ra,100(sp)
80026b68:	27bd0068 	addiu	sp,sp,104
80026b6c:	03e00008 	jr	ra
80026b70:	00000000 	nop
80026b74:	08009ad8 	j	80026b60 <_ZN4spin4once13Once$LT$T$GT$9call_once17h339d9108e2beff77E+0x228>
80026b78:	00000000 	nop

80026b7c <_ZN4spin4once13Once$LT$T$GT$9call_once17h39716770cb989dafE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80026b7c:	27bdff98 	addiu	sp,sp,-104
80026b80:	afbf0064 	sw	ra,100(sp)
80026b84:	afa40020 	sw	a0,32(sp)
80026b88:	afa40058 	sw	a0,88(sp)
80026b8c:	24010000 	li	at,0
        loop {
80026b90:	a3a00057 	sb	zero,87(sp)
80026b94:	24010001 	li	at,1
80026b98:	a3a10057 	sb	at,87(sp)
        let mut status = self.state.load(Ordering::SeqCst);
80026b9c:	24840010 	addiu	a0,a0,16
80026ba0:	24010004 	li	at,4
80026ba4:	a3a1002e 	sb	at,46(sp)
80026ba8:	93a5002e 	lbu	a1,46(sp)
80026bac:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
80026bb0:	00000000 	nop
80026bb4:	afa20028 	sw	v0,40(sp)
        if status == INCOMPLETE {
80026bb8:	8fa10028 	lw	at,40(sp)
80026bbc:	1020000f 	beqz	at,80026bfc <_ZN4spin4once13Once$LT$T$GT$9call_once17h39716770cb989dafE+0x80>
80026bc0:	00000000 	nop
80026bc4:	08009af3 	j	80026bcc <_ZN4spin4once13Once$LT$T$GT$9call_once17h39716770cb989dafE+0x50>
80026bc8:	00000000 	nop
            match status {
80026bcc:	8fa10028 	lw	at,40(sp)
80026bd0:	afa1001c 	sw	at,28(sp)
80026bd4:	2c210004 	sltiu	at,at,4
80026bd8:	1020004b 	beqz	at,80026d08 <_ZN4spin4once13Once$LT$T$GT$9call_once17h39716770cb989dafE+0x18c>
80026bdc:	00000000 	nop
80026be0:	8fa1001c 	lw	at,28(sp)
80026be4:	00010880 	sll	at,at,0x2
80026be8:	3c028105 	lui	v0,0x8105
80026bec:	00220821 	addu	at,at,v0
80026bf0:	8c21c0b4 	lw	at,-16204(at)
80026bf4:	00200008 	jr	at
80026bf8:	00000000 	nop
            status = self.state.compare_and_swap(INCOMPLETE,
80026bfc:	8fa10020 	lw	at,32(sp)
80026c00:	24240010 	addiu	a0,at,16
80026c04:	24010004 	li	at,4
                                                 Ordering::SeqCst);
80026c08:	a3a1002f 	sb	at,47(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
80026c0c:	93a7002f 	lbu	a3,47(sp)
80026c10:	24050000 	li	a1,0
80026c14:	24060001 	li	a2,1
80026c18:	0c00912b 	jal	800244ac <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE>
80026c1c:	00000000 	nop
80026c20:	afa20028 	sw	v0,40(sp)
            if status == INCOMPLETE { // We init
80026c24:	8fa10028 	lw	at,40(sp)
80026c28:	1420ffe8 	bnez	at,80026bcc <_ZN4spin4once13Once$LT$T$GT$9call_once17h39716770cb989dafE+0x50>
80026c2c:	00000000 	nop
80026c30:	08009b0e 	j	80026c38 <_ZN4spin4once13Once$LT$T$GT$9call_once17h39716770cb989dafE+0xbc>
80026c34:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
80026c38:	8fa10020 	lw	at,32(sp)
80026c3c:	24210010 	addiu	at,at,16
80026c40:	afa10018 	sw	at,24(sp)
80026c44:	afa10030 	sw	at,48(sp)
80026c48:	24010001 	li	at,1
80026c4c:	afa10014 	sw	at,20(sp)
80026c50:	a3a10034 	sb	at,52(sp)
80026c54:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
80026c58:	a3a00057 	sb	zero,87(sp)
80026c5c:	27a40048 	addiu	a0,sp,72
80026c60:	0c0085f7 	jal	800217dc <_ZN4core3ops8function6FnOnce9call_once17h3fe145e35bb1d824E>
80026c64:	00000000 	nop
80026c68:	8fa10014 	lw	at,20(sp)
80026c6c:	8fa40020 	lw	a0,32(sp)
80026c70:	8fa20050 	lw	v0,80(sp)
80026c74:	afa20044 	sw	v0,68(sp)
80026c78:	8fa2004c 	lw	v0,76(sp)
80026c7c:	afa20040 	sw	v0,64(sp)
80026c80:	8fa20048 	lw	v0,72(sp)
80026c84:	afa2003c 	sw	v0,60(sp)
80026c88:	afa10038 	sw	at,56(sp)
80026c8c:	afa40060 	sw	a0,96(sp)
80026c90:	0c0086d1 	jal	80021b44 <_ZN4core3ptr109drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..DoubleLinkedList$GT$$GT$$GT$17h0b5c737bc5ff2950E>
80026c94:	00000000 	nop
80026c98:	8fa40018 	lw	a0,24(sp)
80026c9c:	8fa20020 	lw	v0,32(sp)
80026ca0:	8fa10044 	lw	at,68(sp)
80026ca4:	ac41000c 	sw	at,12(v0)
80026ca8:	8fa10040 	lw	at,64(sp)
80026cac:	ac410008 	sw	at,8(v0)
80026cb0:	8fa1003c 	lw	at,60(sp)
80026cb4:	ac410004 	sw	at,4(v0)
80026cb8:	8fa10038 	lw	at,56(sp)
80026cbc:	ac410000 	sw	at,0(v0)
                finish.panicked = false;
80026cc0:	a3a00034 	sb	zero,52(sp)
80026cc4:	24010002 	li	at,2
                status = COMPLETE;
80026cc8:	afa10028 	sw	at,40(sp)
                self.state.store(status, Ordering::SeqCst);
80026ccc:	8fa50028 	lw	a1,40(sp)
80026cd0:	24010004 	li	at,4
80026cd4:	a3a10055 	sb	at,85(sp)
80026cd8:	93a60055 	lbu	a2,85(sp)
80026cdc:	0c00917d 	jal	800245f4 <_ZN4core4sync6atomic11AtomicUsize5store17h7de3301adcc232e0E>
80026ce0:	00000000 	nop
80026ce4:	8fa40020 	lw	a0,32(sp)
                return self.force_get();
80026ce8:	0c009f4e 	jal	80027d38 <_ZN4spin4once13Once$LT$T$GT$9force_get17h641b87987d15afacE>
80026cec:	00000000 	nop
80026cf0:	afa20024 	sw	v0,36(sp)
80026cf4:	27a40030 	addiu	a0,sp,48
            }
80026cf8:	0c00886c 	jal	800221b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hf75b1038f2f395baE>
80026cfc:	00000000 	nop
80026d00:	08009b64 	j	80026d90 <_ZN4spin4once13Once$LT$T$GT$9call_once17h39716770cb989dafE+0x214>
80026d04:	00000000 	nop
                _ => unsafe { unreachable() },
80026d08:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80026d0c:	00000000 	nop
                INCOMPLETE => unreachable!(),
80026d10:	3c018105 	lui	at,0x8105
80026d14:	2424cd74 	addiu	a0,at,-12940
80026d18:	3c018105 	lui	at,0x8105
80026d1c:	2426cdf0 	addiu	a2,at,-12816
80026d20:	24050028 	li	a1,40
80026d24:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80026d28:	00000000 	nop
                    cpu_relax();
80026d2c:	0c0091a1 	jal	80024684 <_ZN4core4sync6atomic14spin_loop_hint17he1304bcd04fc1e59E>
80026d30:	00000000 	nop
80026d34:	8fa10020 	lw	at,32(sp)
                    status = self.state.load(Ordering::SeqCst)
80026d38:	24240010 	addiu	a0,at,16
80026d3c:	24010004 	li	at,4
80026d40:	a3a10056 	sb	at,86(sp)
80026d44:	93a50056 	lbu	a1,86(sp)
80026d48:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
80026d4c:	00000000 	nop
80026d50:	afa20028 	sw	v0,40(sp)
80026d54:	08009af3 	j	80026bcc <_ZN4spin4once13Once$LT$T$GT$9call_once17h39716770cb989dafE+0x50>
80026d58:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
80026d5c:	3c018105 	lui	at,0x8105
80026d60:	2424ce00 	addiu	a0,at,-12800
80026d64:	3c018105 	lui	at,0x8105
80026d68:	2426ce14 	addiu	a2,at,-12780
80026d6c:	24050011 	li	a1,17
80026d70:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80026d74:	00000000 	nop
                COMPLETE => return self.force_get(),
80026d78:	8fa40020 	lw	a0,32(sp)
80026d7c:	0c009f4e 	jal	80027d38 <_ZN4spin4once13Once$LT$T$GT$9force_get17h641b87987d15afacE>
80026d80:	00000000 	nop
80026d84:	afa20024 	sw	v0,36(sp)
80026d88:	08009b64 	j	80026d90 <_ZN4spin4once13Once$LT$T$GT$9call_once17h39716770cb989dafE+0x214>
80026d8c:	00000000 	nop
    }
80026d90:	93a10057 	lbu	at,87(sp)
80026d94:	30210001 	andi	at,at,0x1
80026d98:	14200008 	bnez	at,80026dbc <_ZN4spin4once13Once$LT$T$GT$9call_once17h39716770cb989dafE+0x240>
80026d9c:	00000000 	nop
80026da0:	08009b6a 	j	80026da8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h39716770cb989dafE+0x22c>
80026da4:	00000000 	nop
80026da8:	8fa20024 	lw	v0,36(sp)
80026dac:	8fbf0064 	lw	ra,100(sp)
80026db0:	27bd0068 	addiu	sp,sp,104
80026db4:	03e00008 	jr	ra
80026db8:	00000000 	nop
80026dbc:	08009b6a 	j	80026da8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h39716770cb989dafE+0x22c>
80026dc0:	00000000 	nop

80026dc4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h3ff08e92182fc9fdE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80026dc4:	27bdffa8 	addiu	sp,sp,-88
80026dc8:	afbf0054 	sw	ra,84(sp)
80026dcc:	afa40018 	sw	a0,24(sp)
80026dd0:	afa40048 	sw	a0,72(sp)
80026dd4:	24010000 	li	at,0
        loop {
80026dd8:	a3a00047 	sb	zero,71(sp)
80026ddc:	24010001 	li	at,1
80026de0:	a3a10047 	sb	at,71(sp)
80026de4:	24010004 	li	at,4
        let mut status = self.state.load(Ordering::SeqCst);
80026de8:	a3a10026 	sb	at,38(sp)
80026dec:	93a50026 	lbu	a1,38(sp)
80026df0:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
80026df4:	00000000 	nop
80026df8:	afa20020 	sw	v0,32(sp)
        if status == INCOMPLETE {
80026dfc:	8fa10020 	lw	at,32(sp)
80026e00:	1020000f 	beqz	at,80026e40 <_ZN4spin4once13Once$LT$T$GT$9call_once17h3ff08e92182fc9fdE+0x7c>
80026e04:	00000000 	nop
80026e08:	08009b84 	j	80026e10 <_ZN4spin4once13Once$LT$T$GT$9call_once17h3ff08e92182fc9fdE+0x4c>
80026e0c:	00000000 	nop
            match status {
80026e10:	8fa10020 	lw	at,32(sp)
80026e14:	afa10014 	sw	at,20(sp)
80026e18:	2c210004 	sltiu	at,at,4
80026e1c:	10200041 	beqz	at,80026f24 <_ZN4spin4once13Once$LT$T$GT$9call_once17h3ff08e92182fc9fdE+0x160>
80026e20:	00000000 	nop
80026e24:	8fa10014 	lw	at,20(sp)
80026e28:	00010880 	sll	at,at,0x2
80026e2c:	3c028105 	lui	v0,0x8105
80026e30:	00220821 	addu	at,at,v0
80026e34:	8c21c0c4 	lw	at,-16188(at)
80026e38:	00200008 	jr	at
80026e3c:	00000000 	nop
80026e40:	8fa40018 	lw	a0,24(sp)
80026e44:	24010004 	li	at,4
                                                 Ordering::SeqCst);
80026e48:	a3a10027 	sb	at,39(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
80026e4c:	93a70027 	lbu	a3,39(sp)
80026e50:	24050000 	li	a1,0
80026e54:	24060001 	li	a2,1
80026e58:	0c00912b 	jal	800244ac <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE>
80026e5c:	00000000 	nop
80026e60:	afa20020 	sw	v0,32(sp)
            if status == INCOMPLETE { // We init
80026e64:	8fa10020 	lw	at,32(sp)
80026e68:	1420ffe9 	bnez	at,80026e10 <_ZN4spin4once13Once$LT$T$GT$9call_once17h3ff08e92182fc9fdE+0x4c>
80026e6c:	00000000 	nop
80026e70:	08009b9e 	j	80026e78 <_ZN4spin4once13Once$LT$T$GT$9call_once17h3ff08e92182fc9fdE+0xb4>
80026e74:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
80026e78:	8fa10018 	lw	at,24(sp)
80026e7c:	afa10028 	sw	at,40(sp)
80026e80:	24010001 	li	at,1
80026e84:	afa10010 	sw	at,16(sp)
80026e88:	a3a1002c 	sb	at,44(sp)
80026e8c:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
80026e90:	a3a00047 	sb	zero,71(sp)
80026e94:	27a4003c 	addiu	a0,sp,60
80026e98:	0c008632 	jal	800218c8 <_ZN4core3ops8function6FnOnce9call_once17ha5fb2ccb77ae3e3cE>
80026e9c:	00000000 	nop
80026ea0:	8fa10010 	lw	at,16(sp)
80026ea4:	8fa40018 	lw	a0,24(sp)
80026ea8:	8fa20040 	lw	v0,64(sp)
80026eac:	afa20038 	sw	v0,56(sp)
80026eb0:	8fa2003c 	lw	v0,60(sp)
80026eb4:	afa20034 	sw	v0,52(sp)
80026eb8:	afa10030 	sw	at,48(sp)
80026ebc:	24810004 	addiu	at,a0,4
80026ec0:	afa10050 	sw	at,80(sp)
80026ec4:	8fa10038 	lw	at,56(sp)
80026ec8:	ac81000c 	sw	at,12(a0)
80026ecc:	8fa10034 	lw	at,52(sp)
80026ed0:	ac810008 	sw	at,8(a0)
80026ed4:	8fa10030 	lw	at,48(sp)
80026ed8:	ac810004 	sw	at,4(a0)
                finish.panicked = false;
80026edc:	a3a0002c 	sb	zero,44(sp)
80026ee0:	24010002 	li	at,2
                status = COMPLETE;
80026ee4:	afa10020 	sw	at,32(sp)
                self.state.store(status, Ordering::SeqCst);
80026ee8:	8fa50020 	lw	a1,32(sp)
80026eec:	24010004 	li	at,4
80026ef0:	a3a10045 	sb	at,69(sp)
80026ef4:	93a60045 	lbu	a2,69(sp)
80026ef8:	0c00917d 	jal	800245f4 <_ZN4core4sync6atomic11AtomicUsize5store17h7de3301adcc232e0E>
80026efc:	00000000 	nop
80026f00:	8fa40018 	lw	a0,24(sp)
                return self.force_get();
80026f04:	0c009ea7 	jal	80027a9c <_ZN4spin4once13Once$LT$T$GT$9force_get17h1ab57d1e7277bf35E>
80026f08:	00000000 	nop
80026f0c:	afa2001c 	sw	v0,28(sp)
80026f10:	27a40028 	addiu	a0,sp,40
            }
80026f14:	0c00886c 	jal	800221b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hf75b1038f2f395baE>
80026f18:	00000000 	nop
80026f1c:	08009bea 	j	80026fa8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h3ff08e92182fc9fdE+0x1e4>
80026f20:	00000000 	nop
                _ => unsafe { unreachable() },
80026f24:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80026f28:	00000000 	nop
                INCOMPLETE => unreachable!(),
80026f2c:	3c018105 	lui	at,0x8105
80026f30:	2424cd74 	addiu	a0,at,-12940
80026f34:	3c018105 	lui	at,0x8105
80026f38:	2426cdf0 	addiu	a2,at,-12816
80026f3c:	24050028 	li	a1,40
80026f40:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80026f44:	00000000 	nop
                    cpu_relax();
80026f48:	0c0091a1 	jal	80024684 <_ZN4core4sync6atomic14spin_loop_hint17he1304bcd04fc1e59E>
80026f4c:	00000000 	nop
80026f50:	8fa40018 	lw	a0,24(sp)
80026f54:	24010004 	li	at,4
                    status = self.state.load(Ordering::SeqCst)
80026f58:	a3a10046 	sb	at,70(sp)
80026f5c:	93a50046 	lbu	a1,70(sp)
80026f60:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
80026f64:	00000000 	nop
80026f68:	afa20020 	sw	v0,32(sp)
80026f6c:	08009b84 	j	80026e10 <_ZN4spin4once13Once$LT$T$GT$9call_once17h3ff08e92182fc9fdE+0x4c>
80026f70:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
80026f74:	3c018105 	lui	at,0x8105
80026f78:	2424ce00 	addiu	a0,at,-12800
80026f7c:	3c018105 	lui	at,0x8105
80026f80:	2426ce14 	addiu	a2,at,-12780
80026f84:	24050011 	li	a1,17
80026f88:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80026f8c:	00000000 	nop
                COMPLETE => return self.force_get(),
80026f90:	8fa40018 	lw	a0,24(sp)
80026f94:	0c009ea7 	jal	80027a9c <_ZN4spin4once13Once$LT$T$GT$9force_get17h1ab57d1e7277bf35E>
80026f98:	00000000 	nop
80026f9c:	afa2001c 	sw	v0,28(sp)
80026fa0:	08009bea 	j	80026fa8 <_ZN4spin4once13Once$LT$T$GT$9call_once17h3ff08e92182fc9fdE+0x1e4>
80026fa4:	00000000 	nop
    }
80026fa8:	93a10047 	lbu	at,71(sp)
80026fac:	30210001 	andi	at,at,0x1
80026fb0:	14200008 	bnez	at,80026fd4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h3ff08e92182fc9fdE+0x210>
80026fb4:	00000000 	nop
80026fb8:	08009bf0 	j	80026fc0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h3ff08e92182fc9fdE+0x1fc>
80026fbc:	00000000 	nop
80026fc0:	8fa2001c 	lw	v0,28(sp)
80026fc4:	8fbf0054 	lw	ra,84(sp)
80026fc8:	27bd0058 	addiu	sp,sp,88
80026fcc:	03e00008 	jr	ra
80026fd0:	00000000 	nop
80026fd4:	08009bf0 	j	80026fc0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h3ff08e92182fc9fdE+0x1fc>
80026fd8:	00000000 	nop

80026fdc <_ZN4spin4once13Once$LT$T$GT$9call_once17h68c4bc128e61e204E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80026fdc:	27bdff98 	addiu	sp,sp,-104
80026fe0:	afbf0064 	sw	ra,100(sp)
80026fe4:	afa40020 	sw	a0,32(sp)
80026fe8:	afa40058 	sw	a0,88(sp)
80026fec:	24010000 	li	at,0
        loop {
80026ff0:	a3a00057 	sb	zero,87(sp)
80026ff4:	24010001 	li	at,1
80026ff8:	a3a10057 	sb	at,87(sp)
        let mut status = self.state.load(Ordering::SeqCst);
80026ffc:	24840010 	addiu	a0,a0,16
80027000:	24010004 	li	at,4
80027004:	a3a1002e 	sb	at,46(sp)
80027008:	93a5002e 	lbu	a1,46(sp)
8002700c:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
80027010:	00000000 	nop
80027014:	afa20028 	sw	v0,40(sp)
        if status == INCOMPLETE {
80027018:	8fa10028 	lw	at,40(sp)
8002701c:	1020000f 	beqz	at,8002705c <_ZN4spin4once13Once$LT$T$GT$9call_once17h68c4bc128e61e204E+0x80>
80027020:	00000000 	nop
80027024:	08009c0b 	j	8002702c <_ZN4spin4once13Once$LT$T$GT$9call_once17h68c4bc128e61e204E+0x50>
80027028:	00000000 	nop
            match status {
8002702c:	8fa10028 	lw	at,40(sp)
80027030:	afa1001c 	sw	at,28(sp)
80027034:	2c210004 	sltiu	at,at,4
80027038:	10200048 	beqz	at,8002715c <_ZN4spin4once13Once$LT$T$GT$9call_once17h68c4bc128e61e204E+0x180>
8002703c:	00000000 	nop
80027040:	8fa1001c 	lw	at,28(sp)
80027044:	00010880 	sll	at,at,0x2
80027048:	3c028105 	lui	v0,0x8105
8002704c:	00220821 	addu	at,at,v0
80027050:	8c21c0d4 	lw	at,-16172(at)
80027054:	00200008 	jr	at
80027058:	00000000 	nop
            status = self.state.compare_and_swap(INCOMPLETE,
8002705c:	8fa10020 	lw	at,32(sp)
80027060:	24240010 	addiu	a0,at,16
80027064:	24010004 	li	at,4
                                                 Ordering::SeqCst);
80027068:	a3a1002f 	sb	at,47(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
8002706c:	93a7002f 	lbu	a3,47(sp)
80027070:	24050000 	li	a1,0
80027074:	24060001 	li	a2,1
80027078:	0c00912b 	jal	800244ac <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE>
8002707c:	00000000 	nop
80027080:	afa20028 	sw	v0,40(sp)
            if status == INCOMPLETE { // We init
80027084:	8fa10028 	lw	at,40(sp)
80027088:	1420ffe8 	bnez	at,8002702c <_ZN4spin4once13Once$LT$T$GT$9call_once17h68c4bc128e61e204E+0x50>
8002708c:	00000000 	nop
80027090:	08009c26 	j	80027098 <_ZN4spin4once13Once$LT$T$GT$9call_once17h68c4bc128e61e204E+0xbc>
80027094:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
80027098:	8fa10020 	lw	at,32(sp)
8002709c:	24210010 	addiu	at,at,16
800270a0:	afa10018 	sw	at,24(sp)
800270a4:	afa10030 	sw	at,48(sp)
800270a8:	24010001 	li	at,1
800270ac:	afa10014 	sw	at,20(sp)
800270b0:	a3a10034 	sb	at,52(sp)
800270b4:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
800270b8:	a3a00057 	sb	zero,87(sp)
800270bc:	27a40048 	addiu	a0,sp,72
800270c0:	0c0085e9 	jal	800217a4 <_ZN4core3ops8function6FnOnce9call_once17h1d05c79268c1f277E>
800270c4:	00000000 	nop
800270c8:	8fa10014 	lw	at,20(sp)
800270cc:	8fa40018 	lw	a0,24(sp)
800270d0:	8fa20020 	lw	v0,32(sp)
800270d4:	8fa30050 	lw	v1,80(sp)
800270d8:	afa30044 	sw	v1,68(sp)
800270dc:	8fa3004c 	lw	v1,76(sp)
800270e0:	afa30040 	sw	v1,64(sp)
800270e4:	8fa30048 	lw	v1,72(sp)
800270e8:	afa3003c 	sw	v1,60(sp)
800270ec:	afa10038 	sw	at,56(sp)
800270f0:	afa20060 	sw	v0,96(sp)
800270f4:	8fa10044 	lw	at,68(sp)
800270f8:	ac41000c 	sw	at,12(v0)
800270fc:	8fa10040 	lw	at,64(sp)
80027100:	ac410008 	sw	at,8(v0)
80027104:	8fa1003c 	lw	at,60(sp)
80027108:	ac410004 	sw	at,4(v0)
8002710c:	8fa10038 	lw	at,56(sp)
80027110:	ac410000 	sw	at,0(v0)
                finish.panicked = false;
80027114:	a3a00034 	sb	zero,52(sp)
80027118:	24010002 	li	at,2
                status = COMPLETE;
8002711c:	afa10028 	sw	at,40(sp)
                self.state.store(status, Ordering::SeqCst);
80027120:	8fa50028 	lw	a1,40(sp)
80027124:	24010004 	li	at,4
80027128:	a3a10055 	sb	at,85(sp)
8002712c:	93a60055 	lbu	a2,85(sp)
80027130:	0c00917d 	jal	800245f4 <_ZN4core4sync6atomic11AtomicUsize5store17h7de3301adcc232e0E>
80027134:	00000000 	nop
80027138:	8fa40020 	lw	a0,32(sp)
                return self.force_get();
8002713c:	0c009ebc 	jal	80027af0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h1f7f06acd22e2eb0E>
80027140:	00000000 	nop
80027144:	afa20024 	sw	v0,36(sp)
80027148:	27a40030 	addiu	a0,sp,48
            }
8002714c:	0c00886c 	jal	800221b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hf75b1038f2f395baE>
80027150:	00000000 	nop
80027154:	08009c79 	j	800271e4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h68c4bc128e61e204E+0x208>
80027158:	00000000 	nop
                _ => unsafe { unreachable() },
8002715c:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80027160:	00000000 	nop
                INCOMPLETE => unreachable!(),
80027164:	3c018105 	lui	at,0x8105
80027168:	2424cd74 	addiu	a0,at,-12940
8002716c:	3c018105 	lui	at,0x8105
80027170:	2426cdf0 	addiu	a2,at,-12816
80027174:	24050028 	li	a1,40
80027178:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
8002717c:	00000000 	nop
                    cpu_relax();
80027180:	0c0091a1 	jal	80024684 <_ZN4core4sync6atomic14spin_loop_hint17he1304bcd04fc1e59E>
80027184:	00000000 	nop
80027188:	8fa10020 	lw	at,32(sp)
                    status = self.state.load(Ordering::SeqCst)
8002718c:	24240010 	addiu	a0,at,16
80027190:	24010004 	li	at,4
80027194:	a3a10056 	sb	at,86(sp)
80027198:	93a50056 	lbu	a1,86(sp)
8002719c:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
800271a0:	00000000 	nop
800271a4:	afa20028 	sw	v0,40(sp)
800271a8:	08009c0b 	j	8002702c <_ZN4spin4once13Once$LT$T$GT$9call_once17h68c4bc128e61e204E+0x50>
800271ac:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
800271b0:	3c018105 	lui	at,0x8105
800271b4:	2424ce00 	addiu	a0,at,-12800
800271b8:	3c018105 	lui	at,0x8105
800271bc:	2426ce14 	addiu	a2,at,-12780
800271c0:	24050011 	li	a1,17
800271c4:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
800271c8:	00000000 	nop
                COMPLETE => return self.force_get(),
800271cc:	8fa40020 	lw	a0,32(sp)
800271d0:	0c009ebc 	jal	80027af0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h1f7f06acd22e2eb0E>
800271d4:	00000000 	nop
800271d8:	afa20024 	sw	v0,36(sp)
800271dc:	08009c79 	j	800271e4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h68c4bc128e61e204E+0x208>
800271e0:	00000000 	nop
    }
800271e4:	93a10057 	lbu	at,87(sp)
800271e8:	30210001 	andi	at,at,0x1
800271ec:	14200008 	bnez	at,80027210 <_ZN4spin4once13Once$LT$T$GT$9call_once17h68c4bc128e61e204E+0x234>
800271f0:	00000000 	nop
800271f4:	08009c7f 	j	800271fc <_ZN4spin4once13Once$LT$T$GT$9call_once17h68c4bc128e61e204E+0x220>
800271f8:	00000000 	nop
800271fc:	8fa20024 	lw	v0,36(sp)
80027200:	8fbf0064 	lw	ra,100(sp)
80027204:	27bd0068 	addiu	sp,sp,104
80027208:	03e00008 	jr	ra
8002720c:	00000000 	nop
80027210:	08009c7f 	j	800271fc <_ZN4spin4once13Once$LT$T$GT$9call_once17h68c4bc128e61e204E+0x220>
80027214:	00000000 	nop

80027218 <_ZN4spin4once13Once$LT$T$GT$9call_once17h89d692836bb1bde3E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80027218:	27bdffb8 	addiu	sp,sp,-72
8002721c:	afbf0044 	sw	ra,68(sp)
80027220:	afa40018 	sw	a0,24(sp)
80027224:	afa40038 	sw	a0,56(sp)
80027228:	24010000 	li	at,0
        loop {
8002722c:	a3a00037 	sb	zero,55(sp)
80027230:	24010001 	li	at,1
80027234:	a3a10037 	sb	at,55(sp)
80027238:	24010004 	li	at,4
        let mut status = self.state.load(Ordering::SeqCst);
8002723c:	a3a10026 	sb	at,38(sp)
80027240:	93a50026 	lbu	a1,38(sp)
80027244:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
80027248:	00000000 	nop
8002724c:	afa20020 	sw	v0,32(sp)
        if status == INCOMPLETE {
80027250:	8fa10020 	lw	at,32(sp)
80027254:	1020000f 	beqz	at,80027294 <_ZN4spin4once13Once$LT$T$GT$9call_once17h89d692836bb1bde3E+0x7c>
80027258:	00000000 	nop
8002725c:	08009c99 	j	80027264 <_ZN4spin4once13Once$LT$T$GT$9call_once17h89d692836bb1bde3E+0x4c>
80027260:	00000000 	nop
            match status {
80027264:	8fa10020 	lw	at,32(sp)
80027268:	afa10014 	sw	at,20(sp)
8002726c:	2c210004 	sltiu	at,at,4
80027270:	1020003f 	beqz	at,80027370 <_ZN4spin4once13Once$LT$T$GT$9call_once17h89d692836bb1bde3E+0x158>
80027274:	00000000 	nop
80027278:	8fa10014 	lw	at,20(sp)
8002727c:	00010880 	sll	at,at,0x2
80027280:	3c028105 	lui	v0,0x8105
80027284:	00220821 	addu	at,at,v0
80027288:	8c21c0e4 	lw	at,-16156(at)
8002728c:	00200008 	jr	at
80027290:	00000000 	nop
80027294:	8fa40018 	lw	a0,24(sp)
80027298:	24010004 	li	at,4
                                                 Ordering::SeqCst);
8002729c:	a3a10027 	sb	at,39(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
800272a0:	93a70027 	lbu	a3,39(sp)
800272a4:	24050000 	li	a1,0
800272a8:	24060001 	li	a2,1
800272ac:	0c00912b 	jal	800244ac <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE>
800272b0:	00000000 	nop
800272b4:	afa20020 	sw	v0,32(sp)
            if status == INCOMPLETE { // We init
800272b8:	8fa10020 	lw	at,32(sp)
800272bc:	1420ffe9 	bnez	at,80027264 <_ZN4spin4once13Once$LT$T$GT$9call_once17h89d692836bb1bde3E+0x4c>
800272c0:	00000000 	nop
800272c4:	08009cb3 	j	800272cc <_ZN4spin4once13Once$LT$T$GT$9call_once17h89d692836bb1bde3E+0xb4>
800272c8:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
800272cc:	8fa10018 	lw	at,24(sp)
800272d0:	afa10028 	sw	at,40(sp)
800272d4:	24010001 	li	at,1
800272d8:	afa10010 	sw	at,16(sp)
800272dc:	a3a1002c 	sb	at,44(sp)
800272e0:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
800272e4:	a3a00037 	sb	zero,55(sp)
800272e8:	0c008670 	jal	800219c0 <_ZN4core3ops8function6FnOnce9call_once17hc0e153de29f39202E>
800272ec:	00000000 	nop
800272f0:	8fa10010 	lw	at,16(sp)
800272f4:	8fa40018 	lw	a0,24(sp)
800272f8:	a3a2003f 	sb	v0,63(sp)
800272fc:	93a2003f 	lbu	v0,63(sp)
80027300:	a3a20034 	sb	v0,52(sp)
80027304:	93a20034 	lbu	v0,52(sp)
80027308:	a3a20033 	sb	v0,51(sp)
8002730c:	a3a10032 	sb	at,50(sp)
80027310:	24810004 	addiu	at,a0,4
80027314:	afa10040 	sw	at,64(sp)
80027318:	93a10033 	lbu	at,51(sp)
8002731c:	a0810005 	sb	at,5(a0)
80027320:	93a10032 	lbu	at,50(sp)
80027324:	a0810004 	sb	at,4(a0)
                finish.panicked = false;
80027328:	a3a0002c 	sb	zero,44(sp)
8002732c:	24010002 	li	at,2
                status = COMPLETE;
80027330:	afa10020 	sw	at,32(sp)
                self.state.store(status, Ordering::SeqCst);
80027334:	8fa50020 	lw	a1,32(sp)
80027338:	24010004 	li	at,4
8002733c:	a3a10035 	sb	at,53(sp)
80027340:	93a60035 	lbu	a2,53(sp)
80027344:	0c00917d 	jal	800245f4 <_ZN4core4sync6atomic11AtomicUsize5store17h7de3301adcc232e0E>
80027348:	00000000 	nop
8002734c:	8fa40018 	lw	a0,24(sp)
                return self.force_get();
80027350:	0c009f24 	jal	80027c90 <_ZN4spin4once13Once$LT$T$GT$9force_get17h59152dbbe23069f4E>
80027354:	00000000 	nop
80027358:	afa2001c 	sw	v0,28(sp)
8002735c:	27a40028 	addiu	a0,sp,40
            }
80027360:	0c00886c 	jal	800221b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hf75b1038f2f395baE>
80027364:	00000000 	nop
80027368:	08009cfd 	j	800273f4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h89d692836bb1bde3E+0x1dc>
8002736c:	00000000 	nop
                _ => unsafe { unreachable() },
80027370:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80027374:	00000000 	nop
                INCOMPLETE => unreachable!(),
80027378:	3c018105 	lui	at,0x8105
8002737c:	2424cd74 	addiu	a0,at,-12940
80027380:	3c018105 	lui	at,0x8105
80027384:	2426cdf0 	addiu	a2,at,-12816
80027388:	24050028 	li	a1,40
8002738c:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80027390:	00000000 	nop
                    cpu_relax();
80027394:	0c0091a1 	jal	80024684 <_ZN4core4sync6atomic14spin_loop_hint17he1304bcd04fc1e59E>
80027398:	00000000 	nop
8002739c:	8fa40018 	lw	a0,24(sp)
800273a0:	24010004 	li	at,4
                    status = self.state.load(Ordering::SeqCst)
800273a4:	a3a10036 	sb	at,54(sp)
800273a8:	93a50036 	lbu	a1,54(sp)
800273ac:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
800273b0:	00000000 	nop
800273b4:	afa20020 	sw	v0,32(sp)
800273b8:	08009c99 	j	80027264 <_ZN4spin4once13Once$LT$T$GT$9call_once17h89d692836bb1bde3E+0x4c>
800273bc:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
800273c0:	3c018105 	lui	at,0x8105
800273c4:	2424ce00 	addiu	a0,at,-12800
800273c8:	3c018105 	lui	at,0x8105
800273cc:	2426ce14 	addiu	a2,at,-12780
800273d0:	24050011 	li	a1,17
800273d4:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
800273d8:	00000000 	nop
                COMPLETE => return self.force_get(),
800273dc:	8fa40018 	lw	a0,24(sp)
800273e0:	0c009f24 	jal	80027c90 <_ZN4spin4once13Once$LT$T$GT$9force_get17h59152dbbe23069f4E>
800273e4:	00000000 	nop
800273e8:	afa2001c 	sw	v0,28(sp)
800273ec:	08009cfd 	j	800273f4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h89d692836bb1bde3E+0x1dc>
800273f0:	00000000 	nop
    }
800273f4:	93a10037 	lbu	at,55(sp)
800273f8:	30210001 	andi	at,at,0x1
800273fc:	14200008 	bnez	at,80027420 <_ZN4spin4once13Once$LT$T$GT$9call_once17h89d692836bb1bde3E+0x208>
80027400:	00000000 	nop
80027404:	08009d03 	j	8002740c <_ZN4spin4once13Once$LT$T$GT$9call_once17h89d692836bb1bde3E+0x1f4>
80027408:	00000000 	nop
8002740c:	8fa2001c 	lw	v0,28(sp)
80027410:	8fbf0044 	lw	ra,68(sp)
80027414:	27bd0048 	addiu	sp,sp,72
80027418:	03e00008 	jr	ra
8002741c:	00000000 	nop
80027420:	08009d03 	j	8002740c <_ZN4spin4once13Once$LT$T$GT$9call_once17h89d692836bb1bde3E+0x1f4>
80027424:	00000000 	nop

80027428 <_ZN4spin4once13Once$LT$T$GT$9call_once17ha37f5453c824b1d8E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80027428:	27bdffb0 	addiu	sp,sp,-80
8002742c:	afbf004c 	sw	ra,76(sp)
80027430:	afa40018 	sw	a0,24(sp)
80027434:	afa40040 	sw	a0,64(sp)
80027438:	24010000 	li	at,0
        loop {
8002743c:	a3a0003f 	sb	zero,63(sp)
80027440:	24010001 	li	at,1
80027444:	a3a1003f 	sb	at,63(sp)
80027448:	24010004 	li	at,4
        let mut status = self.state.load(Ordering::SeqCst);
8002744c:	a3a10026 	sb	at,38(sp)
80027450:	93a50026 	lbu	a1,38(sp)
80027454:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
80027458:	00000000 	nop
8002745c:	afa20020 	sw	v0,32(sp)
        if status == INCOMPLETE {
80027460:	8fa10020 	lw	at,32(sp)
80027464:	1020000f 	beqz	at,800274a4 <_ZN4spin4once13Once$LT$T$GT$9call_once17ha37f5453c824b1d8E+0x7c>
80027468:	00000000 	nop
8002746c:	08009d1d 	j	80027474 <_ZN4spin4once13Once$LT$T$GT$9call_once17ha37f5453c824b1d8E+0x4c>
80027470:	00000000 	nop
            match status {
80027474:	8fa10020 	lw	at,32(sp)
80027478:	afa10014 	sw	at,20(sp)
8002747c:	2c210004 	sltiu	at,at,4
80027480:	1020003e 	beqz	at,8002757c <_ZN4spin4once13Once$LT$T$GT$9call_once17ha37f5453c824b1d8E+0x154>
80027484:	00000000 	nop
80027488:	8fa10014 	lw	at,20(sp)
8002748c:	00010880 	sll	at,at,0x2
80027490:	3c028105 	lui	v0,0x8105
80027494:	00220821 	addu	at,at,v0
80027498:	8c21c0f4 	lw	at,-16140(at)
8002749c:	00200008 	jr	at
800274a0:	00000000 	nop
800274a4:	8fa40018 	lw	a0,24(sp)
800274a8:	24010004 	li	at,4
                                                 Ordering::SeqCst);
800274ac:	a3a10027 	sb	at,39(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
800274b0:	93a70027 	lbu	a3,39(sp)
800274b4:	24050000 	li	a1,0
800274b8:	24060001 	li	a2,1
800274bc:	0c00912b 	jal	800244ac <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE>
800274c0:	00000000 	nop
800274c4:	afa20020 	sw	v0,32(sp)
            if status == INCOMPLETE { // We init
800274c8:	8fa10020 	lw	at,32(sp)
800274cc:	1420ffe9 	bnez	at,80027474 <_ZN4spin4once13Once$LT$T$GT$9call_once17ha37f5453c824b1d8E+0x4c>
800274d0:	00000000 	nop
800274d4:	08009d37 	j	800274dc <_ZN4spin4once13Once$LT$T$GT$9call_once17ha37f5453c824b1d8E+0xb4>
800274d8:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
800274dc:	8fa10018 	lw	at,24(sp)
800274e0:	afa10028 	sw	at,40(sp)
800274e4:	24010001 	li	at,1
800274e8:	afa10010 	sw	at,16(sp)
800274ec:	a3a1002c 	sb	at,44(sp)
800274f0:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
800274f4:	a3a0003f 	sb	zero,63(sp)
800274f8:	0c008623 	jal	8002188c <_ZN4core3ops8function6FnOnce9call_once17h5bab3f328586f6d1E>
800274fc:	00000000 	nop
80027500:	8fa10010 	lw	at,16(sp)
80027504:	8fa40018 	lw	a0,24(sp)
80027508:	afa20034 	sw	v0,52(sp)
8002750c:	afa30038 	sw	v1,56(sp)
80027510:	afa10030 	sw	at,48(sp)
80027514:	24810004 	addiu	at,a0,4
80027518:	afa10048 	sw	at,72(sp)
8002751c:	8fa10038 	lw	at,56(sp)
80027520:	ac81000c 	sw	at,12(a0)
80027524:	8fa10034 	lw	at,52(sp)
80027528:	ac810008 	sw	at,8(a0)
8002752c:	8fa10030 	lw	at,48(sp)
80027530:	ac810004 	sw	at,4(a0)
                finish.panicked = false;
80027534:	a3a0002c 	sb	zero,44(sp)
80027538:	24010002 	li	at,2
                status = COMPLETE;
8002753c:	afa10020 	sw	at,32(sp)
                self.state.store(status, Ordering::SeqCst);
80027540:	8fa50020 	lw	a1,32(sp)
80027544:	24010004 	li	at,4
80027548:	a3a1003d 	sb	at,61(sp)
8002754c:	93a6003d 	lbu	a2,61(sp)
80027550:	0c00917d 	jal	800245f4 <_ZN4core4sync6atomic11AtomicUsize5store17h7de3301adcc232e0E>
80027554:	00000000 	nop
80027558:	8fa40018 	lw	a0,24(sp)
                return self.force_get();
8002755c:	0c009f62 	jal	80027d88 <_ZN4spin4once13Once$LT$T$GT$9force_get17hd648ab0765b62a0dE>
80027560:	00000000 	nop
80027564:	afa2001c 	sw	v0,28(sp)
80027568:	27a40028 	addiu	a0,sp,40
            }
8002756c:	0c00886c 	jal	800221b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hf75b1038f2f395baE>
80027570:	00000000 	nop
80027574:	08009d80 	j	80027600 <_ZN4spin4once13Once$LT$T$GT$9call_once17ha37f5453c824b1d8E+0x1d8>
80027578:	00000000 	nop
                _ => unsafe { unreachable() },
8002757c:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80027580:	00000000 	nop
                INCOMPLETE => unreachable!(),
80027584:	3c018105 	lui	at,0x8105
80027588:	2424cd74 	addiu	a0,at,-12940
8002758c:	3c018105 	lui	at,0x8105
80027590:	2426cdf0 	addiu	a2,at,-12816
80027594:	24050028 	li	a1,40
80027598:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
8002759c:	00000000 	nop
                    cpu_relax();
800275a0:	0c0091a1 	jal	80024684 <_ZN4core4sync6atomic14spin_loop_hint17he1304bcd04fc1e59E>
800275a4:	00000000 	nop
800275a8:	8fa40018 	lw	a0,24(sp)
800275ac:	24010004 	li	at,4
                    status = self.state.load(Ordering::SeqCst)
800275b0:	a3a1003e 	sb	at,62(sp)
800275b4:	93a5003e 	lbu	a1,62(sp)
800275b8:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
800275bc:	00000000 	nop
800275c0:	afa20020 	sw	v0,32(sp)
800275c4:	08009d1d 	j	80027474 <_ZN4spin4once13Once$LT$T$GT$9call_once17ha37f5453c824b1d8E+0x4c>
800275c8:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
800275cc:	3c018105 	lui	at,0x8105
800275d0:	2424ce00 	addiu	a0,at,-12800
800275d4:	3c018105 	lui	at,0x8105
800275d8:	2426ce14 	addiu	a2,at,-12780
800275dc:	24050011 	li	a1,17
800275e0:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
800275e4:	00000000 	nop
                COMPLETE => return self.force_get(),
800275e8:	8fa40018 	lw	a0,24(sp)
800275ec:	0c009f62 	jal	80027d88 <_ZN4spin4once13Once$LT$T$GT$9force_get17hd648ab0765b62a0dE>
800275f0:	00000000 	nop
800275f4:	afa2001c 	sw	v0,28(sp)
800275f8:	08009d80 	j	80027600 <_ZN4spin4once13Once$LT$T$GT$9call_once17ha37f5453c824b1d8E+0x1d8>
800275fc:	00000000 	nop
    }
80027600:	93a1003f 	lbu	at,63(sp)
80027604:	30210001 	andi	at,at,0x1
80027608:	14200008 	bnez	at,8002762c <_ZN4spin4once13Once$LT$T$GT$9call_once17ha37f5453c824b1d8E+0x204>
8002760c:	00000000 	nop
80027610:	08009d86 	j	80027618 <_ZN4spin4once13Once$LT$T$GT$9call_once17ha37f5453c824b1d8E+0x1f0>
80027614:	00000000 	nop
80027618:	8fa2001c 	lw	v0,28(sp)
8002761c:	8fbf004c 	lw	ra,76(sp)
80027620:	27bd0050 	addiu	sp,sp,80
80027624:	03e00008 	jr	ra
80027628:	00000000 	nop
8002762c:	08009d86 	j	80027618 <_ZN4spin4once13Once$LT$T$GT$9call_once17ha37f5453c824b1d8E+0x1f0>
80027630:	00000000 	nop

80027634 <_ZN4spin4once13Once$LT$T$GT$9call_once17hba3edf05fe18c9bbE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80027634:	27bdffa8 	addiu	sp,sp,-88
80027638:	afbf0054 	sw	ra,84(sp)
8002763c:	afa40018 	sw	a0,24(sp)
80027640:	afa40048 	sw	a0,72(sp)
80027644:	24010000 	li	at,0
        loop {
80027648:	a3a00047 	sb	zero,71(sp)
8002764c:	24010001 	li	at,1
80027650:	a3a10047 	sb	at,71(sp)
80027654:	24010004 	li	at,4
        let mut status = self.state.load(Ordering::SeqCst);
80027658:	a3a10026 	sb	at,38(sp)
8002765c:	93a50026 	lbu	a1,38(sp)
80027660:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
80027664:	00000000 	nop
80027668:	afa20020 	sw	v0,32(sp)
        if status == INCOMPLETE {
8002766c:	8fa10020 	lw	at,32(sp)
80027670:	1020000f 	beqz	at,800276b0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hba3edf05fe18c9bbE+0x7c>
80027674:	00000000 	nop
80027678:	08009da0 	j	80027680 <_ZN4spin4once13Once$LT$T$GT$9call_once17hba3edf05fe18c9bbE+0x4c>
8002767c:	00000000 	nop
            match status {
80027680:	8fa10020 	lw	at,32(sp)
80027684:	afa10014 	sw	at,20(sp)
80027688:	2c210004 	sltiu	at,at,4
8002768c:	10200044 	beqz	at,800277a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hba3edf05fe18c9bbE+0x16c>
80027690:	00000000 	nop
80027694:	8fa10014 	lw	at,20(sp)
80027698:	00010880 	sll	at,at,0x2
8002769c:	3c028105 	lui	v0,0x8105
800276a0:	00220821 	addu	at,at,v0
800276a4:	8c21c104 	lw	at,-16124(at)
800276a8:	00200008 	jr	at
800276ac:	00000000 	nop
800276b0:	8fa40018 	lw	a0,24(sp)
800276b4:	24010004 	li	at,4
                                                 Ordering::SeqCst);
800276b8:	a3a10027 	sb	at,39(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
800276bc:	93a70027 	lbu	a3,39(sp)
800276c0:	24050000 	li	a1,0
800276c4:	24060001 	li	a2,1
800276c8:	0c00912b 	jal	800244ac <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE>
800276cc:	00000000 	nop
800276d0:	afa20020 	sw	v0,32(sp)
            if status == INCOMPLETE { // We init
800276d4:	8fa10020 	lw	at,32(sp)
800276d8:	1420ffe9 	bnez	at,80027680 <_ZN4spin4once13Once$LT$T$GT$9call_once17hba3edf05fe18c9bbE+0x4c>
800276dc:	00000000 	nop
800276e0:	08009dba 	j	800276e8 <_ZN4spin4once13Once$LT$T$GT$9call_once17hba3edf05fe18c9bbE+0xb4>
800276e4:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
800276e8:	8fa10018 	lw	at,24(sp)
800276ec:	afa10028 	sw	at,40(sp)
800276f0:	24010001 	li	at,1
800276f4:	afa10010 	sw	at,16(sp)
800276f8:	a3a1002c 	sb	at,44(sp)
800276fc:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
80027700:	a3a00047 	sb	zero,71(sp)
80027704:	27a4003c 	addiu	a0,sp,60
80027708:	0c0085c0 	jal	80021700 <_ZN4core3ops8function6FnOnce9call_once17h048a3acad00559d2E>
8002770c:	00000000 	nop
80027710:	8fa20010 	lw	v0,16(sp)
80027714:	8fa10018 	lw	at,24(sp)
80027718:	8fa30040 	lw	v1,64(sp)
8002771c:	afa30038 	sw	v1,56(sp)
80027720:	8fa3003c 	lw	v1,60(sp)
80027724:	afa30034 	sw	v1,52(sp)
80027728:	afa20030 	sw	v0,48(sp)
8002772c:	24240004 	addiu	a0,at,4
80027730:	afa40050 	sw	a0,80(sp)
80027734:	0c00872e 	jal	80021cb8 <_ZN4core3ptr126drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$$GT$17h88ae9a08191793a2E>
80027738:	00000000 	nop
8002773c:	8fa40018 	lw	a0,24(sp)
80027740:	8fa10038 	lw	at,56(sp)
80027744:	ac81000c 	sw	at,12(a0)
80027748:	8fa10034 	lw	at,52(sp)
8002774c:	ac810008 	sw	at,8(a0)
80027750:	8fa10030 	lw	at,48(sp)
80027754:	ac810004 	sw	at,4(a0)
                finish.panicked = false;
80027758:	a3a0002c 	sb	zero,44(sp)
8002775c:	24010002 	li	at,2
                status = COMPLETE;
80027760:	afa10020 	sw	at,32(sp)
                self.state.store(status, Ordering::SeqCst);
80027764:	8fa50020 	lw	a1,32(sp)
80027768:	24010004 	li	at,4
8002776c:	a3a10045 	sb	at,69(sp)
80027770:	93a60045 	lbu	a2,69(sp)
80027774:	0c00917d 	jal	800245f4 <_ZN4core4sync6atomic11AtomicUsize5store17h7de3301adcc232e0E>
80027778:	00000000 	nop
8002777c:	8fa40018 	lw	a0,24(sp)
                return self.force_get();
80027780:	0c009ee5 	jal	80027b94 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2e081f3ba60f232aE>
80027784:	00000000 	nop
80027788:	afa2001c 	sw	v0,28(sp)
8002778c:	27a40028 	addiu	a0,sp,40
            }
80027790:	0c00886c 	jal	800221b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hf75b1038f2f395baE>
80027794:	00000000 	nop
80027798:	08009e09 	j	80027824 <_ZN4spin4once13Once$LT$T$GT$9call_once17hba3edf05fe18c9bbE+0x1f0>
8002779c:	00000000 	nop
                _ => unsafe { unreachable() },
800277a0:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
800277a4:	00000000 	nop
                INCOMPLETE => unreachable!(),
800277a8:	3c018105 	lui	at,0x8105
800277ac:	2424cd74 	addiu	a0,at,-12940
800277b0:	3c018105 	lui	at,0x8105
800277b4:	2426cdf0 	addiu	a2,at,-12816
800277b8:	24050028 	li	a1,40
800277bc:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
800277c0:	00000000 	nop
                    cpu_relax();
800277c4:	0c0091a1 	jal	80024684 <_ZN4core4sync6atomic14spin_loop_hint17he1304bcd04fc1e59E>
800277c8:	00000000 	nop
800277cc:	8fa40018 	lw	a0,24(sp)
800277d0:	24010004 	li	at,4
                    status = self.state.load(Ordering::SeqCst)
800277d4:	a3a10046 	sb	at,70(sp)
800277d8:	93a50046 	lbu	a1,70(sp)
800277dc:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
800277e0:	00000000 	nop
800277e4:	afa20020 	sw	v0,32(sp)
800277e8:	08009da0 	j	80027680 <_ZN4spin4once13Once$LT$T$GT$9call_once17hba3edf05fe18c9bbE+0x4c>
800277ec:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
800277f0:	3c018105 	lui	at,0x8105
800277f4:	2424ce00 	addiu	a0,at,-12800
800277f8:	3c018105 	lui	at,0x8105
800277fc:	2426ce14 	addiu	a2,at,-12780
80027800:	24050011 	li	a1,17
80027804:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80027808:	00000000 	nop
                COMPLETE => return self.force_get(),
8002780c:	8fa40018 	lw	a0,24(sp)
80027810:	0c009ee5 	jal	80027b94 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2e081f3ba60f232aE>
80027814:	00000000 	nop
80027818:	afa2001c 	sw	v0,28(sp)
8002781c:	08009e09 	j	80027824 <_ZN4spin4once13Once$LT$T$GT$9call_once17hba3edf05fe18c9bbE+0x1f0>
80027820:	00000000 	nop
    }
80027824:	93a10047 	lbu	at,71(sp)
80027828:	30210001 	andi	at,at,0x1
8002782c:	14200008 	bnez	at,80027850 <_ZN4spin4once13Once$LT$T$GT$9call_once17hba3edf05fe18c9bbE+0x21c>
80027830:	00000000 	nop
80027834:	08009e0f 	j	8002783c <_ZN4spin4once13Once$LT$T$GT$9call_once17hba3edf05fe18c9bbE+0x208>
80027838:	00000000 	nop
8002783c:	8fa2001c 	lw	v0,28(sp)
80027840:	8fbf0054 	lw	ra,84(sp)
80027844:	27bd0058 	addiu	sp,sp,88
80027848:	03e00008 	jr	ra
8002784c:	00000000 	nop
80027850:	08009e0f 	j	8002783c <_ZN4spin4once13Once$LT$T$GT$9call_once17hba3edf05fe18c9bbE+0x208>
80027854:	00000000 	nop

80027858 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf8d98bf6aa4e2ccdE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80027858:	27bdff98 	addiu	sp,sp,-104
8002785c:	afbf0064 	sw	ra,100(sp)
80027860:	afa40018 	sw	a0,24(sp)
80027864:	afa40058 	sw	a0,88(sp)
80027868:	24010000 	li	at,0
        loop {
8002786c:	a3a00057 	sb	zero,87(sp)
80027870:	24010001 	li	at,1
80027874:	a3a10057 	sb	at,87(sp)
80027878:	24010004 	li	at,4
        let mut status = self.state.load(Ordering::SeqCst);
8002787c:	a3a10026 	sb	at,38(sp)
80027880:	93a50026 	lbu	a1,38(sp)
80027884:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
80027888:	00000000 	nop
8002788c:	afa20020 	sw	v0,32(sp)
        if status == INCOMPLETE {
80027890:	8fa10020 	lw	at,32(sp)
80027894:	1020000f 	beqz	at,800278d4 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf8d98bf6aa4e2ccdE+0x7c>
80027898:	00000000 	nop
8002789c:	08009e29 	j	800278a4 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf8d98bf6aa4e2ccdE+0x4c>
800278a0:	00000000 	nop
            match status {
800278a4:	8fa10020 	lw	at,32(sp)
800278a8:	afa10014 	sw	at,20(sp)
800278ac:	2c210004 	sltiu	at,at,4
800278b0:	1020004c 	beqz	at,800279e4 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf8d98bf6aa4e2ccdE+0x18c>
800278b4:	00000000 	nop
800278b8:	8fa10014 	lw	at,20(sp)
800278bc:	00010880 	sll	at,at,0x2
800278c0:	3c028105 	lui	v0,0x8105
800278c4:	00220821 	addu	at,at,v0
800278c8:	8c21c114 	lw	at,-16108(at)
800278cc:	00200008 	jr	at
800278d0:	00000000 	nop
800278d4:	8fa40018 	lw	a0,24(sp)
800278d8:	24010004 	li	at,4
                                                 Ordering::SeqCst);
800278dc:	a3a10027 	sb	at,39(sp)
            status = self.state.compare_and_swap(INCOMPLETE,
800278e0:	93a70027 	lbu	a3,39(sp)
800278e4:	24050000 	li	a1,0
800278e8:	24060001 	li	a2,1
800278ec:	0c00912b 	jal	800244ac <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h12b72efbaab3ba5eE>
800278f0:	00000000 	nop
800278f4:	afa20020 	sw	v0,32(sp)
            if status == INCOMPLETE { // We init
800278f8:	8fa10020 	lw	at,32(sp)
800278fc:	1420ffe9 	bnez	at,800278a4 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf8d98bf6aa4e2ccdE+0x4c>
80027900:	00000000 	nop
80027904:	08009e43 	j	8002790c <_ZN4spin4once13Once$LT$T$GT$9call_once17hf8d98bf6aa4e2ccdE+0xb4>
80027908:	00000000 	nop
                let mut finish = Finish { state: &self.state, panicked: true };
8002790c:	8fa10018 	lw	at,24(sp)
80027910:	afa10028 	sw	at,40(sp)
80027914:	24010001 	li	at,1
80027918:	afa10010 	sw	at,16(sp)
8002791c:	a3a1002c 	sb	at,44(sp)
80027920:	24010000 	li	at,0
                unsafe { *self.data.get() = Some(builder()) };
80027924:	a3a00057 	sb	zero,87(sp)
80027928:	27a40044 	addiu	a0,sp,68
8002792c:	0c00865f 	jal	8002197c <_ZN4core3ops8function6FnOnce9call_once17hbe66f081a8e08aeaE>
80027930:	00000000 	nop
80027934:	8fa20010 	lw	v0,16(sp)
80027938:	8fa10018 	lw	at,24(sp)
8002793c:	8fa30050 	lw	v1,80(sp)
80027940:	afa30040 	sw	v1,64(sp)
80027944:	8fa3004c 	lw	v1,76(sp)
80027948:	afa3003c 	sw	v1,60(sp)
8002794c:	8fa30048 	lw	v1,72(sp)
80027950:	afa30038 	sw	v1,56(sp)
80027954:	8fa30044 	lw	v1,68(sp)
80027958:	afa30034 	sw	v1,52(sp)
8002795c:	afa20030 	sw	v0,48(sp)
80027960:	24240004 	addiu	a0,at,4
80027964:	afa40060 	sw	a0,96(sp)
80027968:	0c0086a3 	jal	80021a8c <_ZN4core3ptr103drop_in_place$LT$core..option..Option$LT$sync..spin..Spinlock$LT$mos_6502..util..IndexStack$GT$$GT$$GT$17h5fb8064cfd67b339E>
8002796c:	00000000 	nop
80027970:	8fa40018 	lw	a0,24(sp)
80027974:	8fa10040 	lw	at,64(sp)
80027978:	ac810014 	sw	at,20(a0)
8002797c:	8fa1003c 	lw	at,60(sp)
80027980:	ac810010 	sw	at,16(a0)
80027984:	8fa10038 	lw	at,56(sp)
80027988:	ac81000c 	sw	at,12(a0)
8002798c:	8fa10034 	lw	at,52(sp)
80027990:	ac810008 	sw	at,8(a0)
80027994:	8fa10030 	lw	at,48(sp)
80027998:	ac810004 	sw	at,4(a0)
                finish.panicked = false;
8002799c:	a3a0002c 	sb	zero,44(sp)
800279a0:	24010002 	li	at,2
                status = COMPLETE;
800279a4:	afa10020 	sw	at,32(sp)
                self.state.store(status, Ordering::SeqCst);
800279a8:	8fa50020 	lw	a1,32(sp)
800279ac:	24010004 	li	at,4
800279b0:	a3a10055 	sb	at,85(sp)
800279b4:	93a60055 	lbu	a2,85(sp)
800279b8:	0c00917d 	jal	800245f4 <_ZN4core4sync6atomic11AtomicUsize5store17h7de3301adcc232e0E>
800279bc:	00000000 	nop
800279c0:	8fa40018 	lw	a0,24(sp)
                return self.force_get();
800279c4:	0c009ed0 	jal	80027b40 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2c1aafac316f6d16E>
800279c8:	00000000 	nop
800279cc:	afa2001c 	sw	v0,28(sp)
800279d0:	27a40028 	addiu	a0,sp,40
            }
800279d4:	0c00886c 	jal	800221b0 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hf75b1038f2f395baE>
800279d8:	00000000 	nop
800279dc:	08009e9a 	j	80027a68 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf8d98bf6aa4e2ccdE+0x210>
800279e0:	00000000 	nop
                _ => unsafe { unreachable() },
800279e4:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
800279e8:	00000000 	nop
                INCOMPLETE => unreachable!(),
800279ec:	3c018105 	lui	at,0x8105
800279f0:	2424cd74 	addiu	a0,at,-12940
800279f4:	3c018105 	lui	at,0x8105
800279f8:	2426cdf0 	addiu	a2,at,-12816
800279fc:	24050028 	li	a1,40
80027a00:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80027a04:	00000000 	nop
                    cpu_relax();
80027a08:	0c0091a1 	jal	80024684 <_ZN4core4sync6atomic14spin_loop_hint17he1304bcd04fc1e59E>
80027a0c:	00000000 	nop
80027a10:	8fa40018 	lw	a0,24(sp)
80027a14:	24010004 	li	at,4
                    status = self.state.load(Ordering::SeqCst)
80027a18:	a3a10056 	sb	at,86(sp)
80027a1c:	93a50056 	lbu	a1,86(sp)
80027a20:	0c009172 	jal	800245c8 <_ZN4core4sync6atomic11AtomicUsize4load17hb606725b62e90ff7E>
80027a24:	00000000 	nop
80027a28:	afa20020 	sw	v0,32(sp)
80027a2c:	08009e29 	j	800278a4 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf8d98bf6aa4e2ccdE+0x4c>
80027a30:	00000000 	nop
                PANICKED => panic!("Once has panicked"),
80027a34:	3c018105 	lui	at,0x8105
80027a38:	2424ce00 	addiu	a0,at,-12800
80027a3c:	3c018105 	lui	at,0x8105
80027a40:	2426ce14 	addiu	a2,at,-12780
80027a44:	24050011 	li	a1,17
80027a48:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80027a4c:	00000000 	nop
                COMPLETE => return self.force_get(),
80027a50:	8fa40018 	lw	a0,24(sp)
80027a54:	0c009ed0 	jal	80027b40 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2c1aafac316f6d16E>
80027a58:	00000000 	nop
80027a5c:	afa2001c 	sw	v0,28(sp)
80027a60:	08009e9a 	j	80027a68 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf8d98bf6aa4e2ccdE+0x210>
80027a64:	00000000 	nop
    }
80027a68:	93a10057 	lbu	at,87(sp)
80027a6c:	30210001 	andi	at,at,0x1
80027a70:	14200008 	bnez	at,80027a94 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf8d98bf6aa4e2ccdE+0x23c>
80027a74:	00000000 	nop
80027a78:	08009ea0 	j	80027a80 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf8d98bf6aa4e2ccdE+0x228>
80027a7c:	00000000 	nop
80027a80:	8fa2001c 	lw	v0,28(sp)
80027a84:	8fbf0064 	lw	ra,100(sp)
80027a88:	27bd0068 	addiu	sp,sp,104
80027a8c:	03e00008 	jr	ra
80027a90:	00000000 	nop
80027a94:	08009ea0 	j	80027a80 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf8d98bf6aa4e2ccdE+0x228>
80027a98:	00000000 	nop

80027a9c <_ZN4spin4once13Once$LT$T$GT$9force_get17h1ab57d1e7277bf35E>:
    fn force_get<'a>(&'a self) -> &'a T {
80027a9c:	27bdffd8 	addiu	sp,sp,-40
80027aa0:	afbf0024 	sw	ra,36(sp)
80027aa4:	afa40018 	sw	a0,24(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027aa8:	24840004 	addiu	a0,a0,4
80027aac:	afa40020 	sw	a0,32(sp)
80027ab0:	0c009719 	jal	80025c64 <_ZN4core6option15Option$LT$T$GT$6as_ref17h722543dd1d3f6521E>
80027ab4:	00000000 	nop
80027ab8:	afa20014 	sw	v0,20(sp)
80027abc:	8fa10014 	lw	at,20(sp)
80027ac0:	14200005 	bnez	at,80027ad8 <_ZN4spin4once13Once$LT$T$GT$9force_get17h1ab57d1e7277bf35E+0x3c>
80027ac4:	00000000 	nop
80027ac8:	08009eb4 	j	80027ad0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h1ab57d1e7277bf35E+0x34>
80027acc:	00000000 	nop
            None    => unsafe { unreachable() },
80027ad0:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80027ad4:	00000000 	nop
            Some(p) => p,
80027ad8:	8fa20014 	lw	v0,20(sp)
80027adc:	afa2001c 	sw	v0,28(sp)
    }
80027ae0:	8fbf0024 	lw	ra,36(sp)
80027ae4:	27bd0028 	addiu	sp,sp,40
80027ae8:	03e00008 	jr	ra
80027aec:	00000000 	nop

80027af0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h1f7f06acd22e2eb0E>:
    fn force_get<'a>(&'a self) -> &'a T {
80027af0:	27bdffd8 	addiu	sp,sp,-40
80027af4:	afbf0024 	sw	ra,36(sp)
80027af8:	afa40018 	sw	a0,24(sp)
80027afc:	afa40020 	sw	a0,32(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027b00:	0c00972e 	jal	80025cb8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h77b774657e4de1b2E>
80027b04:	00000000 	nop
80027b08:	afa20014 	sw	v0,20(sp)
80027b0c:	8fa10014 	lw	at,20(sp)
80027b10:	14200005 	bnez	at,80027b28 <_ZN4spin4once13Once$LT$T$GT$9force_get17h1f7f06acd22e2eb0E+0x38>
80027b14:	00000000 	nop
80027b18:	08009ec8 	j	80027b20 <_ZN4spin4once13Once$LT$T$GT$9force_get17h1f7f06acd22e2eb0E+0x30>
80027b1c:	00000000 	nop
            None    => unsafe { unreachable() },
80027b20:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80027b24:	00000000 	nop
            Some(p) => p,
80027b28:	8fa20014 	lw	v0,20(sp)
80027b2c:	afa2001c 	sw	v0,28(sp)
    }
80027b30:	8fbf0024 	lw	ra,36(sp)
80027b34:	27bd0028 	addiu	sp,sp,40
80027b38:	03e00008 	jr	ra
80027b3c:	00000000 	nop

80027b40 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2c1aafac316f6d16E>:
    fn force_get<'a>(&'a self) -> &'a T {
80027b40:	27bdffd8 	addiu	sp,sp,-40
80027b44:	afbf0024 	sw	ra,36(sp)
80027b48:	afa40018 	sw	a0,24(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027b4c:	24840004 	addiu	a0,a0,4
80027b50:	afa40020 	sw	a0,32(sp)
80027b54:	0c00976d 	jal	80025db4 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb24f5faa8be68d6aE>
80027b58:	00000000 	nop
80027b5c:	afa20014 	sw	v0,20(sp)
80027b60:	8fa10014 	lw	at,20(sp)
80027b64:	14200005 	bnez	at,80027b7c <_ZN4spin4once13Once$LT$T$GT$9force_get17h2c1aafac316f6d16E+0x3c>
80027b68:	00000000 	nop
80027b6c:	08009edd 	j	80027b74 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2c1aafac316f6d16E+0x34>
80027b70:	00000000 	nop
            None    => unsafe { unreachable() },
80027b74:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80027b78:	00000000 	nop
            Some(p) => p,
80027b7c:	8fa20014 	lw	v0,20(sp)
80027b80:	afa2001c 	sw	v0,28(sp)
    }
80027b84:	8fbf0024 	lw	ra,36(sp)
80027b88:	27bd0028 	addiu	sp,sp,40
80027b8c:	03e00008 	jr	ra
80027b90:	00000000 	nop

80027b94 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2e081f3ba60f232aE>:
    fn force_get<'a>(&'a self) -> &'a T {
80027b94:	27bdffd8 	addiu	sp,sp,-40
80027b98:	afbf0024 	sw	ra,36(sp)
80027b9c:	afa40018 	sw	a0,24(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027ba0:	24840004 	addiu	a0,a0,4
80027ba4:	afa40020 	sw	a0,32(sp)
80027ba8:	0c0096ee 	jal	80025bb8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5534c7fa7abdf986E>
80027bac:	00000000 	nop
80027bb0:	afa20014 	sw	v0,20(sp)
80027bb4:	8fa10014 	lw	at,20(sp)
80027bb8:	14200005 	bnez	at,80027bd0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2e081f3ba60f232aE+0x3c>
80027bbc:	00000000 	nop
80027bc0:	08009ef2 	j	80027bc8 <_ZN4spin4once13Once$LT$T$GT$9force_get17h2e081f3ba60f232aE+0x34>
80027bc4:	00000000 	nop
            None    => unsafe { unreachable() },
80027bc8:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80027bcc:	00000000 	nop
            Some(p) => p,
80027bd0:	8fa20014 	lw	v0,20(sp)
80027bd4:	afa2001c 	sw	v0,28(sp)
    }
80027bd8:	8fbf0024 	lw	ra,36(sp)
80027bdc:	27bd0028 	addiu	sp,sp,40
80027be0:	03e00008 	jr	ra
80027be4:	00000000 	nop

80027be8 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3285100b4cedab94E>:
    fn force_get<'a>(&'a self) -> &'a T {
80027be8:	27bdffd8 	addiu	sp,sp,-40
80027bec:	afbf0024 	sw	ra,36(sp)
80027bf0:	afa40018 	sw	a0,24(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027bf4:	24840004 	addiu	a0,a0,4
80027bf8:	afa40020 	sw	a0,32(sp)
80027bfc:	0c0096d9 	jal	80025b64 <_ZN4core6option15Option$LT$T$GT$6as_ref17h3c575f335eab059dE>
80027c00:	00000000 	nop
80027c04:	afa20014 	sw	v0,20(sp)
80027c08:	8fa10014 	lw	at,20(sp)
80027c0c:	14200005 	bnez	at,80027c24 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3285100b4cedab94E+0x3c>
80027c10:	00000000 	nop
80027c14:	08009f07 	j	80027c1c <_ZN4spin4once13Once$LT$T$GT$9force_get17h3285100b4cedab94E+0x34>
80027c18:	00000000 	nop
            None    => unsafe { unreachable() },
80027c1c:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80027c20:	00000000 	nop
            Some(p) => p,
80027c24:	8fa20014 	lw	v0,20(sp)
80027c28:	afa2001c 	sw	v0,28(sp)
    }
80027c2c:	8fbf0024 	lw	ra,36(sp)
80027c30:	27bd0028 	addiu	sp,sp,40
80027c34:	03e00008 	jr	ra
80027c38:	00000000 	nop

80027c3c <_ZN4spin4once13Once$LT$T$GT$9force_get17h3c1cb2ea872c114bE>:
    fn force_get<'a>(&'a self) -> &'a T {
80027c3c:	27bdffd8 	addiu	sp,sp,-40
80027c40:	afbf0024 	sw	ra,36(sp)
80027c44:	afa40018 	sw	a0,24(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027c48:	24840004 	addiu	a0,a0,4
80027c4c:	afa40020 	sw	a0,32(sp)
80027c50:	0c009743 	jal	80025d0c <_ZN4core6option15Option$LT$T$GT$6as_ref17h805f2a507d5a7be1E>
80027c54:	00000000 	nop
80027c58:	afa20014 	sw	v0,20(sp)
80027c5c:	8fa10014 	lw	at,20(sp)
80027c60:	14200005 	bnez	at,80027c78 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3c1cb2ea872c114bE+0x3c>
80027c64:	00000000 	nop
80027c68:	08009f1c 	j	80027c70 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3c1cb2ea872c114bE+0x34>
80027c6c:	00000000 	nop
            None    => unsafe { unreachable() },
80027c70:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80027c74:	00000000 	nop
            Some(p) => p,
80027c78:	8fa20014 	lw	v0,20(sp)
80027c7c:	afa2001c 	sw	v0,28(sp)
    }
80027c80:	8fbf0024 	lw	ra,36(sp)
80027c84:	27bd0028 	addiu	sp,sp,40
80027c88:	03e00008 	jr	ra
80027c8c:	00000000 	nop

80027c90 <_ZN4spin4once13Once$LT$T$GT$9force_get17h59152dbbe23069f4E>:
    fn force_get<'a>(&'a self) -> &'a T {
80027c90:	27bdffd8 	addiu	sp,sp,-40
80027c94:	afbf0024 	sw	ra,36(sp)
80027c98:	afa40018 	sw	a0,24(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027c9c:	24840004 	addiu	a0,a0,4
80027ca0:	afa40020 	sw	a0,32(sp)
80027ca4:	0c009703 	jal	80025c0c <_ZN4core6option15Option$LT$T$GT$6as_ref17h5c59111f25b51ac4E>
80027ca8:	00000000 	nop
80027cac:	afa20014 	sw	v0,20(sp)
80027cb0:	8fa10014 	lw	at,20(sp)
80027cb4:	14200005 	bnez	at,80027ccc <_ZN4spin4once13Once$LT$T$GT$9force_get17h59152dbbe23069f4E+0x3c>
80027cb8:	00000000 	nop
80027cbc:	08009f31 	j	80027cc4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h59152dbbe23069f4E+0x34>
80027cc0:	00000000 	nop
            None    => unsafe { unreachable() },
80027cc4:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80027cc8:	00000000 	nop
            Some(p) => p,
80027ccc:	8fa20014 	lw	v0,20(sp)
80027cd0:	afa2001c 	sw	v0,28(sp)
    }
80027cd4:	8fbf0024 	lw	ra,36(sp)
80027cd8:	27bd0028 	addiu	sp,sp,40
80027cdc:	03e00008 	jr	ra
80027ce0:	00000000 	nop

80027ce4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5bb97189227823e5E>:
    fn force_get<'a>(&'a self) -> &'a T {
80027ce4:	27bdffd8 	addiu	sp,sp,-40
80027ce8:	afbf0024 	sw	ra,36(sp)
80027cec:	afa40018 	sw	a0,24(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027cf0:	24840004 	addiu	a0,a0,4
80027cf4:	afa40020 	sw	a0,32(sp)
80027cf8:	0c0096c4 	jal	80025b10 <_ZN4core6option15Option$LT$T$GT$6as_ref17h1f1ee1a4372e0b44E>
80027cfc:	00000000 	nop
80027d00:	afa20014 	sw	v0,20(sp)
80027d04:	8fa10014 	lw	at,20(sp)
80027d08:	14200005 	bnez	at,80027d20 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5bb97189227823e5E+0x3c>
80027d0c:	00000000 	nop
80027d10:	08009f46 	j	80027d18 <_ZN4spin4once13Once$LT$T$GT$9force_get17h5bb97189227823e5E+0x34>
80027d14:	00000000 	nop
            None    => unsafe { unreachable() },
80027d18:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80027d1c:	00000000 	nop
            Some(p) => p,
80027d20:	8fa20014 	lw	v0,20(sp)
80027d24:	afa2001c 	sw	v0,28(sp)
    }
80027d28:	8fbf0024 	lw	ra,36(sp)
80027d2c:	27bd0028 	addiu	sp,sp,40
80027d30:	03e00008 	jr	ra
80027d34:	00000000 	nop

80027d38 <_ZN4spin4once13Once$LT$T$GT$9force_get17h641b87987d15afacE>:
    fn force_get<'a>(&'a self) -> &'a T {
80027d38:	27bdffd8 	addiu	sp,sp,-40
80027d3c:	afbf0024 	sw	ra,36(sp)
80027d40:	afa40018 	sw	a0,24(sp)
80027d44:	afa40020 	sw	a0,32(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027d48:	0c009758 	jal	80025d60 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb190c667aed8b03aE>
80027d4c:	00000000 	nop
80027d50:	afa20014 	sw	v0,20(sp)
80027d54:	8fa10014 	lw	at,20(sp)
80027d58:	14200005 	bnez	at,80027d70 <_ZN4spin4once13Once$LT$T$GT$9force_get17h641b87987d15afacE+0x38>
80027d5c:	00000000 	nop
80027d60:	08009f5a 	j	80027d68 <_ZN4spin4once13Once$LT$T$GT$9force_get17h641b87987d15afacE+0x30>
80027d64:	00000000 	nop
            None    => unsafe { unreachable() },
80027d68:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80027d6c:	00000000 	nop
            Some(p) => p,
80027d70:	8fa20014 	lw	v0,20(sp)
80027d74:	afa2001c 	sw	v0,28(sp)
    }
80027d78:	8fbf0024 	lw	ra,36(sp)
80027d7c:	27bd0028 	addiu	sp,sp,40
80027d80:	03e00008 	jr	ra
80027d84:	00000000 	nop

80027d88 <_ZN4spin4once13Once$LT$T$GT$9force_get17hd648ab0765b62a0dE>:
    fn force_get<'a>(&'a self) -> &'a T {
80027d88:	27bdffd8 	addiu	sp,sp,-40
80027d8c:	afbf0024 	sw	ra,36(sp)
80027d90:	afa40018 	sw	a0,24(sp)
        match unsafe { &*self.data.get() }.as_ref() {
80027d94:	24840004 	addiu	a0,a0,4
80027d98:	afa40020 	sw	a0,32(sp)
80027d9c:	0c0096af 	jal	80025abc <_ZN4core6option15Option$LT$T$GT$6as_ref17h10548890c01f7b47E>
80027da0:	00000000 	nop
80027da4:	afa20014 	sw	v0,20(sp)
80027da8:	8fa10014 	lw	at,20(sp)
80027dac:	14200005 	bnez	at,80027dc4 <_ZN4spin4once13Once$LT$T$GT$9force_get17hd648ab0765b62a0dE+0x3c>
80027db0:	00000000 	nop
80027db4:	08009f6f 	j	80027dbc <_ZN4spin4once13Once$LT$T$GT$9force_get17hd648ab0765b62a0dE+0x34>
80027db8:	00000000 	nop
            None    => unsafe { unreachable() },
80027dbc:	0c00902b 	jal	800240ac <_ZN4core4hint21unreachable_unchecked17h1594c5569d8f0d8cE>
80027dc0:	00000000 	nop
            Some(p) => p,
80027dc4:	8fa20014 	lw	v0,20(sp)
80027dc8:	afa2001c 	sw	v0,28(sp)
    }
80027dcc:	8fbf0024 	lw	ra,36(sp)
80027dd0:	27bd0028 	addiu	sp,sp,40
80027dd4:	03e00008 	jr	ra
80027dd8:	00000000 	nop

80027ddc <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h1c98ce120fe876cdE>:
unsafe impl<T> Sync for Spinlock<T> {}

unsafe impl<T> Send for Spinlock<T> {}

impl<T> Spinlock<T> {
    pub const fn new(data: T) -> Self {
80027ddc:	27bdffc8 	addiu	sp,sp,-56
80027de0:	afbf0034 	sw	ra,52(sp)
80027de4:	afa50014 	sw	a1,20(sp)
80027de8:	afa40018 	sw	a0,24(sp)
80027dec:	afa4001c 	sw	a0,28(sp)
80027df0:	afa50024 	sw	a1,36(sp)
80027df4:	24040000 	li	a0,0
        Spinlock {
            lock: AtomicBool::new(false),
80027df8:	0c00907d 	jal	800241f4 <_ZN4core4sync6atomic10AtomicBool3new17h896af8836cb462e5E>
80027dfc:	00000000 	nop
80027e00:	8fa50014 	lw	a1,20(sp)
80027e04:	8fa40018 	lw	a0,24(sp)
80027e08:	00400825 	move	at,v0
80027e0c:	8fa2001c 	lw	v0,28(sp)
80027e10:	a3a1002b 	sb	at,43(sp)
80027e14:	93a1002b 	lbu	at,43(sp)
80027e18:	a3a10023 	sb	at,35(sp)
80027e1c:	afa50030 	sw	a1,48(sp)
        UnsafeCell { value }
80027e20:	afa5002c 	sw	a1,44(sp)
    }
80027e24:	8fa1002c 	lw	at,44(sp)
        Spinlock {
80027e28:	93a30023 	lbu	v1,35(sp)
80027e2c:	a0830004 	sb	v1,4(a0)
80027e30:	ac810000 	sw	at,0(a0)
            data: UnsafeCell::new(data),
        }
    }
80027e34:	8fbf0034 	lw	ra,52(sp)
80027e38:	27bd0038 	addiu	sp,sp,56
80027e3c:	03e00008 	jr	ra
80027e40:	00000000 	nop

80027e44 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h403bff75c175d0beE>:
    pub const fn new(data: T) -> Self {
80027e44:	27bdffc8 	addiu	sp,sp,-56
80027e48:	afbf0034 	sw	ra,52(sp)
80027e4c:	afa50014 	sw	a1,20(sp)
80027e50:	afa40018 	sw	a0,24(sp)
80027e54:	afa4001c 	sw	a0,28(sp)
80027e58:	24040000 	li	a0,0
            lock: AtomicBool::new(false),
80027e5c:	0c00907d 	jal	800241f4 <_ZN4core4sync6atomic10AtomicBool3new17h896af8836cb462e5E>
80027e60:	00000000 	nop
80027e64:	8fa50014 	lw	a1,20(sp)
80027e68:	8fa40018 	lw	a0,24(sp)
80027e6c:	00400825 	move	at,v0
80027e70:	8fa2001c 	lw	v0,28(sp)
80027e74:	a3a10033 	sb	at,51(sp)
80027e78:	93a10033 	lbu	at,51(sp)
80027e7c:	a3a10023 	sb	at,35(sp)
        UnsafeCell { value }
80027e80:	8ca10008 	lw	at,8(a1)
80027e84:	afa1002c 	sw	at,44(sp)
80027e88:	8ca10004 	lw	at,4(a1)
80027e8c:	afa10028 	sw	at,40(sp)
80027e90:	8ca10000 	lw	at,0(a1)
80027e94:	afa10024 	sw	at,36(sp)
        Spinlock {
80027e98:	93a10023 	lbu	at,35(sp)
80027e9c:	a081000c 	sb	at,12(a0)
80027ea0:	8fa1002c 	lw	at,44(sp)
80027ea4:	ac810008 	sw	at,8(a0)
80027ea8:	8fa10028 	lw	at,40(sp)
80027eac:	ac810004 	sw	at,4(a0)
80027eb0:	8fa10024 	lw	at,36(sp)
80027eb4:	ac810000 	sw	at,0(a0)
    }
80027eb8:	8fbf0034 	lw	ra,52(sp)
80027ebc:	27bd0038 	addiu	sp,sp,56
80027ec0:	03e00008 	jr	ra
80027ec4:	00000000 	nop

80027ec8 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h44e6f7c2bc4d3f59E>:
    pub const fn new(data: T) -> Self {
80027ec8:	27bdffb8 	addiu	sp,sp,-72
80027ecc:	afbf0044 	sw	ra,68(sp)
80027ed0:	afa60018 	sw	a2,24(sp)
80027ed4:	afa50014 	sw	a1,20(sp)
80027ed8:	afa4001c 	sw	a0,28(sp)
80027edc:	afa40020 	sw	a0,32(sp)
80027ee0:	afa50028 	sw	a1,40(sp)
80027ee4:	afa6002c 	sw	a2,44(sp)
80027ee8:	24040000 	li	a0,0
            lock: AtomicBool::new(false),
80027eec:	0c00907d 	jal	800241f4 <_ZN4core4sync6atomic10AtomicBool3new17h896af8836cb462e5E>
80027ef0:	00000000 	nop
80027ef4:	8fa50014 	lw	a1,20(sp)
80027ef8:	8fa60018 	lw	a2,24(sp)
80027efc:	8fa4001c 	lw	a0,28(sp)
80027f00:	00400825 	move	at,v0
80027f04:	8fa20020 	lw	v0,32(sp)
80027f08:	a3a10033 	sb	at,51(sp)
80027f0c:	93a10033 	lbu	at,51(sp)
80027f10:	a3a10027 	sb	at,39(sp)
80027f14:	afa5003c 	sw	a1,60(sp)
80027f18:	afa60040 	sw	a2,64(sp)
80027f1c:	afa50034 	sw	a1,52(sp)
80027f20:	afa60038 	sw	a2,56(sp)
    }
80027f24:	8fa30034 	lw	v1,52(sp)
80027f28:	8fa10038 	lw	at,56(sp)
        Spinlock {
80027f2c:	93a50027 	lbu	a1,39(sp)
80027f30:	a0850008 	sb	a1,8(a0)
80027f34:	ac830000 	sw	v1,0(a0)
80027f38:	ac810004 	sw	at,4(a0)
    }
80027f3c:	8fbf0044 	lw	ra,68(sp)
80027f40:	27bd0048 	addiu	sp,sp,72
80027f44:	03e00008 	jr	ra
80027f48:	00000000 	nop

80027f4c <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h77753f9317498940E>:
    pub const fn new(data: T) -> Self {
80027f4c:	27bdffc8 	addiu	sp,sp,-56
80027f50:	afbf0034 	sw	ra,52(sp)
80027f54:	afa50014 	sw	a1,20(sp)
80027f58:	afa40018 	sw	a0,24(sp)
80027f5c:	afa4001c 	sw	a0,28(sp)
80027f60:	24040000 	li	a0,0
            lock: AtomicBool::new(false),
80027f64:	0c00907d 	jal	800241f4 <_ZN4core4sync6atomic10AtomicBool3new17h896af8836cb462e5E>
80027f68:	00000000 	nop
80027f6c:	8fa50014 	lw	a1,20(sp)
80027f70:	8fa40018 	lw	a0,24(sp)
80027f74:	00400825 	move	at,v0
80027f78:	8fa2001c 	lw	v0,28(sp)
80027f7c:	a3a10033 	sb	at,51(sp)
80027f80:	93a10033 	lbu	at,51(sp)
80027f84:	a3a10023 	sb	at,35(sp)
        UnsafeCell { value }
80027f88:	8ca10008 	lw	at,8(a1)
80027f8c:	afa1002c 	sw	at,44(sp)
80027f90:	8ca10004 	lw	at,4(a1)
80027f94:	afa10028 	sw	at,40(sp)
80027f98:	8ca10000 	lw	at,0(a1)
80027f9c:	afa10024 	sw	at,36(sp)
        Spinlock {
80027fa0:	93a10023 	lbu	at,35(sp)
80027fa4:	a081000c 	sb	at,12(a0)
80027fa8:	8fa1002c 	lw	at,44(sp)
80027fac:	ac810008 	sw	at,8(a0)
80027fb0:	8fa10028 	lw	at,40(sp)
80027fb4:	ac810004 	sw	at,4(a0)
80027fb8:	8fa10024 	lw	at,36(sp)
80027fbc:	ac810000 	sw	at,0(a0)
    }
80027fc0:	8fbf0034 	lw	ra,52(sp)
80027fc4:	27bd0038 	addiu	sp,sp,56
80027fc8:	03e00008 	jr	ra
80027fcc:	00000000 	nop

80027fd0 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h9ffec41f5a06abadE>:
    pub const fn new(data: T) -> Self {
80027fd0:	27bdffc8 	addiu	sp,sp,-56
80027fd4:	afbf0034 	sw	ra,52(sp)
80027fd8:	afa50014 	sw	a1,20(sp)
80027fdc:	afa40018 	sw	a0,24(sp)
80027fe0:	afa4001c 	sw	a0,28(sp)
80027fe4:	24040000 	li	a0,0
            lock: AtomicBool::new(false),
80027fe8:	0c00907d 	jal	800241f4 <_ZN4core4sync6atomic10AtomicBool3new17h896af8836cb462e5E>
80027fec:	00000000 	nop
80027ff0:	8fa50014 	lw	a1,20(sp)
80027ff4:	8fa40018 	lw	a0,24(sp)
80027ff8:	00400825 	move	at,v0
80027ffc:	8fa2001c 	lw	v0,28(sp)
80028000:	a3a10033 	sb	at,51(sp)
80028004:	93a10033 	lbu	at,51(sp)
80028008:	a3a10023 	sb	at,35(sp)
8002800c:	8ca10008 	lw	at,8(a1)
80028010:	afa1002c 	sw	at,44(sp)
80028014:	8ca10004 	lw	at,4(a1)
80028018:	afa10028 	sw	at,40(sp)
8002801c:	8ca10000 	lw	at,0(a1)
80028020:	afa10024 	sw	at,36(sp)
        Spinlock {
80028024:	93a10023 	lbu	at,35(sp)
80028028:	a081000c 	sb	at,12(a0)
8002802c:	8fa1002c 	lw	at,44(sp)
80028030:	ac810008 	sw	at,8(a0)
80028034:	8fa10028 	lw	at,40(sp)
80028038:	ac810004 	sw	at,4(a0)
8002803c:	8fa10024 	lw	at,36(sp)
80028040:	ac810000 	sw	at,0(a0)
    }
80028044:	8fbf0034 	lw	ra,52(sp)
80028048:	27bd0038 	addiu	sp,sp,56
8002804c:	03e00008 	jr	ra
80028050:	00000000 	nop

80028054 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17he1ef2946989b755dE>:
    pub const fn new(data: T) -> Self {
80028054:	27bdffc8 	addiu	sp,sp,-56
80028058:	afbf0034 	sw	ra,52(sp)
8002805c:	afa50014 	sw	a1,20(sp)
80028060:	afa40018 	sw	a0,24(sp)
80028064:	afa4001c 	sw	a0,28(sp)
80028068:	afa50024 	sw	a1,36(sp)
8002806c:	24040000 	li	a0,0
            lock: AtomicBool::new(false),
80028070:	0c00907d 	jal	800241f4 <_ZN4core4sync6atomic10AtomicBool3new17h896af8836cb462e5E>
80028074:	00000000 	nop
80028078:	8fa50014 	lw	a1,20(sp)
8002807c:	8fa40018 	lw	a0,24(sp)
80028080:	00400825 	move	at,v0
80028084:	8fa2001c 	lw	v0,28(sp)
80028088:	a3a1002b 	sb	at,43(sp)
8002808c:	93a1002b 	lbu	at,43(sp)
80028090:	a3a10023 	sb	at,35(sp)
80028094:	afa50030 	sw	a1,48(sp)
80028098:	afa5002c 	sw	a1,44(sp)
    }
8002809c:	8fa1002c 	lw	at,44(sp)
        Spinlock {
800280a0:	93a30023 	lbu	v1,35(sp)
800280a4:	a0830004 	sb	v1,4(a0)
800280a8:	ac810000 	sw	at,0(a0)
    }
800280ac:	8fbf0034 	lw	ra,52(sp)
800280b0:	27bd0038 	addiu	sp,sp,56
800280b4:	03e00008 	jr	ra
800280b8:	00000000 	nop

800280bc <_ZN4sync4spin17Spinlock$LT$T$GT$3new17hefebc169ec246889E>:
    pub const fn new(data: T) -> Self {
800280bc:	27bdffe8 	addiu	sp,sp,-24
800280c0:	afbf0014 	sw	ra,20(sp)
800280c4:	24040000 	li	a0,0
            lock: AtomicBool::new(false),
800280c8:	0c00907d 	jal	800241f4 <_ZN4core4sync6atomic10AtomicBool3new17h896af8836cb462e5E>
800280cc:	00000000 	nop
800280d0:	a3a20013 	sb	v0,19(sp)
800280d4:	93a10013 	lbu	at,19(sp)
800280d8:	a3a10011 	sb	at,17(sp)
        Spinlock {
800280dc:	93a10011 	lbu	at,17(sp)
800280e0:	a3a10010 	sb	at,16(sp)
    }
800280e4:	93a20010 	lbu	v0,16(sp)
800280e8:	8fbf0014 	lw	ra,20(sp)
800280ec:	27bd0018 	addiu	sp,sp,24
800280f0:	03e00008 	jr	ra
800280f4:	00000000 	nop

800280f8 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17hf3704ce077c64a34E>:
    pub const fn new(data: T) -> Self {
800280f8:	27bdffb8 	addiu	sp,sp,-72
800280fc:	afbf0044 	sw	ra,68(sp)
80028100:	afa60018 	sw	a2,24(sp)
80028104:	afa50014 	sw	a1,20(sp)
80028108:	afa4001c 	sw	a0,28(sp)
8002810c:	afa40020 	sw	a0,32(sp)
80028110:	afa50028 	sw	a1,40(sp)
80028114:	afa6002c 	sw	a2,44(sp)
80028118:	24040000 	li	a0,0
            lock: AtomicBool::new(false),
8002811c:	0c00907d 	jal	800241f4 <_ZN4core4sync6atomic10AtomicBool3new17h896af8836cb462e5E>
80028120:	00000000 	nop
80028124:	8fa50014 	lw	a1,20(sp)
80028128:	8fa60018 	lw	a2,24(sp)
8002812c:	8fa4001c 	lw	a0,28(sp)
80028130:	00400825 	move	at,v0
80028134:	8fa20020 	lw	v0,32(sp)
80028138:	a3a10033 	sb	at,51(sp)
8002813c:	93a10033 	lbu	at,51(sp)
80028140:	a3a10027 	sb	at,39(sp)
80028144:	afa5003c 	sw	a1,60(sp)
80028148:	afa60040 	sw	a2,64(sp)
        UnsafeCell { value }
8002814c:	afa50034 	sw	a1,52(sp)
80028150:	afa60038 	sw	a2,56(sp)
    }
80028154:	8fa30034 	lw	v1,52(sp)
80028158:	8fa10038 	lw	at,56(sp)
        Spinlock {
8002815c:	93a50027 	lbu	a1,39(sp)
80028160:	a0850008 	sb	a1,8(a0)
80028164:	ac830000 	sw	v1,0(a0)
80028168:	ac810004 	sw	at,4(a0)
    }
8002816c:	8fbf0044 	lw	ra,68(sp)
80028170:	27bd0048 	addiu	sp,sp,72
80028174:	03e00008 	jr	ra
80028178:	00000000 	nop

8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>:

    pub fn lock(&self) -> SpinlockGuard<T> {
8002817c:	27bdffd0 	addiu	sp,sp,-48
80028180:	afbf002c 	sw	ra,44(sp)
80028184:	afa4001c 	sw	a0,28(sp)
80028188:	afa40028 	sw	a0,40(sp)
        loop {
8002818c:	0800a065 	j	80028194 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE+0x18>
80028190:	00000000 	nop
            match self
80028194:	8fa1001c 	lw	at,28(sp)
80028198:	2424000c 	addiu	a0,at,12
8002819c:	24010002 	li	at,2
                .lock
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
800281a0:	a3a10026 	sb	at,38(sp)
800281a4:	a3a10027 	sb	at,39(sp)
            match self
800281a8:	93a70026 	lbu	a3,38(sp)
800281ac:	93a10027 	lbu	at,39(sp)
800281b0:	03a01025 	move	v0,sp
800281b4:	ac410010 	sw	at,16(v0)
800281b8:	24050000 	li	a1,0
800281bc:	24060001 	li	a2,1
800281c0:	0c009040 	jal	80024100 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h69187781131097deE>
800281c4:	00000000 	nop
800281c8:	30410001 	andi	at,v0,0x1
800281cc:	a3a10024 	sb	at,36(sp)
800281d0:	a3a30025 	sb	v1,37(sp)
800281d4:	93a10024 	lbu	at,36(sp)
800281d8:	30210001 	andi	at,at,0x1
800281dc:	1420000a 	bnez	at,80028208 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE+0x8c>
800281e0:	00000000 	nop
800281e4:	0800a07b 	j	800281ec <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE+0x70>
800281e8:	00000000 	nop
                    core::hint::spin_loop();
                }
            }
        }

        SpinlockGuard { lock: self }
800281ec:	8fa1001c 	lw	at,28(sp)
800281f0:	afa10020 	sw	at,32(sp)
    }
800281f4:	8fa20020 	lw	v0,32(sp)
800281f8:	8fbf002c 	lw	ra,44(sp)
800281fc:	27bd0030 	addiu	sp,sp,48
80028200:	03e00008 	jr	ra
80028204:	00000000 	nop
                    core::hint::spin_loop();
80028208:	0800a065 	j	80028194 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE+0x18>
8002820c:	00000000 	nop

80028210 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h47a3699dcff6eb57E>:
    pub fn lock(&self) -> SpinlockGuard<T> {
80028210:	27bdffd0 	addiu	sp,sp,-48
80028214:	afbf002c 	sw	ra,44(sp)
80028218:	afa4001c 	sw	a0,28(sp)
8002821c:	afa40028 	sw	a0,40(sp)
        loop {
80028220:	0800a08a 	j	80028228 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h47a3699dcff6eb57E+0x18>
80028224:	00000000 	nop
            match self
80028228:	8fa1001c 	lw	at,28(sp)
8002822c:	2424000c 	addiu	a0,at,12
80028230:	24010002 	li	at,2
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
80028234:	a3a10026 	sb	at,38(sp)
80028238:	a3a10027 	sb	at,39(sp)
            match self
8002823c:	93a70026 	lbu	a3,38(sp)
80028240:	93a10027 	lbu	at,39(sp)
80028244:	03a01025 	move	v0,sp
80028248:	ac410010 	sw	at,16(v0)
8002824c:	24050000 	li	a1,0
80028250:	24060001 	li	a2,1
80028254:	0c009040 	jal	80024100 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h69187781131097deE>
80028258:	00000000 	nop
8002825c:	30410001 	andi	at,v0,0x1
80028260:	a3a10024 	sb	at,36(sp)
80028264:	a3a30025 	sb	v1,37(sp)
80028268:	93a10024 	lbu	at,36(sp)
8002826c:	30210001 	andi	at,at,0x1
80028270:	1420000a 	bnez	at,8002829c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h47a3699dcff6eb57E+0x8c>
80028274:	00000000 	nop
80028278:	0800a0a0 	j	80028280 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h47a3699dcff6eb57E+0x70>
8002827c:	00000000 	nop
        SpinlockGuard { lock: self }
80028280:	8fa1001c 	lw	at,28(sp)
80028284:	afa10020 	sw	at,32(sp)
    }
80028288:	8fa20020 	lw	v0,32(sp)
8002828c:	8fbf002c 	lw	ra,44(sp)
80028290:	27bd0030 	addiu	sp,sp,48
80028294:	03e00008 	jr	ra
80028298:	00000000 	nop
                    core::hint::spin_loop();
8002829c:	0800a08a 	j	80028228 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h47a3699dcff6eb57E+0x18>
800282a0:	00000000 	nop

800282a4 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h66b6d58b2df95132E>:
    pub fn lock(&self) -> SpinlockGuard<T> {
800282a4:	27bdffd0 	addiu	sp,sp,-48
800282a8:	afbf002c 	sw	ra,44(sp)
800282ac:	afa4001c 	sw	a0,28(sp)
800282b0:	afa40028 	sw	a0,40(sp)
        loop {
800282b4:	0800a0af 	j	800282bc <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h66b6d58b2df95132E+0x18>
800282b8:	00000000 	nop
            match self
800282bc:	8fa1001c 	lw	at,28(sp)
800282c0:	24240004 	addiu	a0,at,4
800282c4:	24010002 	li	at,2
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
800282c8:	a3a10026 	sb	at,38(sp)
800282cc:	a3a10027 	sb	at,39(sp)
            match self
800282d0:	93a70026 	lbu	a3,38(sp)
800282d4:	93a10027 	lbu	at,39(sp)
800282d8:	03a01025 	move	v0,sp
800282dc:	ac410010 	sw	at,16(v0)
800282e0:	24050000 	li	a1,0
800282e4:	24060001 	li	a2,1
800282e8:	0c009040 	jal	80024100 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h69187781131097deE>
800282ec:	00000000 	nop
800282f0:	30410001 	andi	at,v0,0x1
800282f4:	a3a10024 	sb	at,36(sp)
800282f8:	a3a30025 	sb	v1,37(sp)
800282fc:	93a10024 	lbu	at,36(sp)
80028300:	30210001 	andi	at,at,0x1
80028304:	1420000a 	bnez	at,80028330 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h66b6d58b2df95132E+0x8c>
80028308:	00000000 	nop
8002830c:	0800a0c5 	j	80028314 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h66b6d58b2df95132E+0x70>
80028310:	00000000 	nop
        SpinlockGuard { lock: self }
80028314:	8fa1001c 	lw	at,28(sp)
80028318:	afa10020 	sw	at,32(sp)
    }
8002831c:	8fa20020 	lw	v0,32(sp)
80028320:	8fbf002c 	lw	ra,44(sp)
80028324:	27bd0030 	addiu	sp,sp,48
80028328:	03e00008 	jr	ra
8002832c:	00000000 	nop
                    core::hint::spin_loop();
80028330:	0800a0af 	j	800282bc <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h66b6d58b2df95132E+0x18>
80028334:	00000000 	nop

80028338 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h74e841895f509cabE>:
    pub fn lock(&self) -> SpinlockGuard<T> {
80028338:	27bdffd0 	addiu	sp,sp,-48
8002833c:	afbf002c 	sw	ra,44(sp)
80028340:	afa4001c 	sw	a0,28(sp)
80028344:	afa40028 	sw	a0,40(sp)
        loop {
80028348:	0800a0d4 	j	80028350 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h74e841895f509cabE+0x18>
8002834c:	00000000 	nop
80028350:	8fa4001c 	lw	a0,28(sp)
80028354:	24010002 	li	at,2
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
80028358:	a3a10026 	sb	at,38(sp)
8002835c:	a3a10027 	sb	at,39(sp)
            match self
80028360:	93a70026 	lbu	a3,38(sp)
80028364:	93a10027 	lbu	at,39(sp)
80028368:	03a01025 	move	v0,sp
8002836c:	ac410010 	sw	at,16(v0)
80028370:	24050000 	li	a1,0
80028374:	24060001 	li	a2,1
80028378:	0c009040 	jal	80024100 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h69187781131097deE>
8002837c:	00000000 	nop
80028380:	30410001 	andi	at,v0,0x1
80028384:	a3a10024 	sb	at,36(sp)
80028388:	a3a30025 	sb	v1,37(sp)
8002838c:	93a10024 	lbu	at,36(sp)
80028390:	30210001 	andi	at,at,0x1
80028394:	1420000a 	bnez	at,800283c0 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h74e841895f509cabE+0x88>
80028398:	00000000 	nop
8002839c:	0800a0e9 	j	800283a4 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h74e841895f509cabE+0x6c>
800283a0:	00000000 	nop
        SpinlockGuard { lock: self }
800283a4:	8fa1001c 	lw	at,28(sp)
800283a8:	afa10020 	sw	at,32(sp)
    }
800283ac:	8fa20020 	lw	v0,32(sp)
800283b0:	8fbf002c 	lw	ra,44(sp)
800283b4:	27bd0030 	addiu	sp,sp,48
800283b8:	03e00008 	jr	ra
800283bc:	00000000 	nop
                    core::hint::spin_loop();
800283c0:	0800a0d4 	j	80028350 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h74e841895f509cabE+0x18>
800283c4:	00000000 	nop

800283c8 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8991a443a24f4781E>:
    pub fn lock(&self) -> SpinlockGuard<T> {
800283c8:	27bdffd0 	addiu	sp,sp,-48
800283cc:	afbf002c 	sw	ra,44(sp)
800283d0:	afa4001c 	sw	a0,28(sp)
800283d4:	afa40028 	sw	a0,40(sp)
        loop {
800283d8:	0800a0f8 	j	800283e0 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8991a443a24f4781E+0x18>
800283dc:	00000000 	nop
            match self
800283e0:	8fa1001c 	lw	at,28(sp)
800283e4:	24240004 	addiu	a0,at,4
800283e8:	24010002 	li	at,2
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
800283ec:	a3a10026 	sb	at,38(sp)
800283f0:	a3a10027 	sb	at,39(sp)
            match self
800283f4:	93a70026 	lbu	a3,38(sp)
800283f8:	93a10027 	lbu	at,39(sp)
800283fc:	03a01025 	move	v0,sp
80028400:	ac410010 	sw	at,16(v0)
80028404:	24050000 	li	a1,0
80028408:	24060001 	li	a2,1
8002840c:	0c009040 	jal	80024100 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h69187781131097deE>
80028410:	00000000 	nop
80028414:	30410001 	andi	at,v0,0x1
80028418:	a3a10024 	sb	at,36(sp)
8002841c:	a3a30025 	sb	v1,37(sp)
80028420:	93a10024 	lbu	at,36(sp)
80028424:	30210001 	andi	at,at,0x1
80028428:	1420000a 	bnez	at,80028454 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8991a443a24f4781E+0x8c>
8002842c:	00000000 	nop
80028430:	0800a10e 	j	80028438 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8991a443a24f4781E+0x70>
80028434:	00000000 	nop
        SpinlockGuard { lock: self }
80028438:	8fa1001c 	lw	at,28(sp)
8002843c:	afa10020 	sw	at,32(sp)
    }
80028440:	8fa20020 	lw	v0,32(sp)
80028444:	8fbf002c 	lw	ra,44(sp)
80028448:	27bd0030 	addiu	sp,sp,48
8002844c:	03e00008 	jr	ra
80028450:	00000000 	nop
                    core::hint::spin_loop();
80028454:	0800a0f8 	j	800283e0 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8991a443a24f4781E+0x18>
80028458:	00000000 	nop

8002845c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8c3735c4a0bdf507E>:
    pub fn lock(&self) -> SpinlockGuard<T> {
8002845c:	27bdffd0 	addiu	sp,sp,-48
80028460:	afbf002c 	sw	ra,44(sp)
80028464:	afa4001c 	sw	a0,28(sp)
80028468:	afa40028 	sw	a0,40(sp)
        loop {
8002846c:	0800a11d 	j	80028474 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8c3735c4a0bdf507E+0x18>
80028470:	00000000 	nop
            match self
80028474:	8fa1001c 	lw	at,28(sp)
80028478:	24240008 	addiu	a0,at,8
8002847c:	24010002 	li	at,2
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
80028480:	a3a10026 	sb	at,38(sp)
80028484:	a3a10027 	sb	at,39(sp)
            match self
80028488:	93a70026 	lbu	a3,38(sp)
8002848c:	93a10027 	lbu	at,39(sp)
80028490:	03a01025 	move	v0,sp
80028494:	ac410010 	sw	at,16(v0)
80028498:	24050000 	li	a1,0
8002849c:	24060001 	li	a2,1
800284a0:	0c009040 	jal	80024100 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h69187781131097deE>
800284a4:	00000000 	nop
800284a8:	30410001 	andi	at,v0,0x1
800284ac:	a3a10024 	sb	at,36(sp)
800284b0:	a3a30025 	sb	v1,37(sp)
800284b4:	93a10024 	lbu	at,36(sp)
800284b8:	30210001 	andi	at,at,0x1
800284bc:	1420000a 	bnez	at,800284e8 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8c3735c4a0bdf507E+0x8c>
800284c0:	00000000 	nop
800284c4:	0800a133 	j	800284cc <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8c3735c4a0bdf507E+0x70>
800284c8:	00000000 	nop
        SpinlockGuard { lock: self }
800284cc:	8fa1001c 	lw	at,28(sp)
800284d0:	afa10020 	sw	at,32(sp)
    }
800284d4:	8fa20020 	lw	v0,32(sp)
800284d8:	8fbf002c 	lw	ra,44(sp)
800284dc:	27bd0030 	addiu	sp,sp,48
800284e0:	03e00008 	jr	ra
800284e4:	00000000 	nop
                    core::hint::spin_loop();
800284e8:	0800a11d 	j	80028474 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8c3735c4a0bdf507E+0x18>
800284ec:	00000000 	nop

800284f0 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hce0bedb7dbc5e59aE>:
    pub fn lock(&self) -> SpinlockGuard<T> {
800284f0:	27bdffd0 	addiu	sp,sp,-48
800284f4:	afbf002c 	sw	ra,44(sp)
800284f8:	afa4001c 	sw	a0,28(sp)
800284fc:	afa40028 	sw	a0,40(sp)
        loop {
80028500:	0800a142 	j	80028508 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hce0bedb7dbc5e59aE+0x18>
80028504:	00000000 	nop
            match self
80028508:	8fa1001c 	lw	at,28(sp)
8002850c:	2424000c 	addiu	a0,at,12
80028510:	24010002 	li	at,2
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
80028514:	a3a10026 	sb	at,38(sp)
80028518:	a3a10027 	sb	at,39(sp)
            match self
8002851c:	93a70026 	lbu	a3,38(sp)
80028520:	93a10027 	lbu	at,39(sp)
80028524:	03a01025 	move	v0,sp
80028528:	ac410010 	sw	at,16(v0)
8002852c:	24050000 	li	a1,0
80028530:	24060001 	li	a2,1
80028534:	0c009040 	jal	80024100 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h69187781131097deE>
80028538:	00000000 	nop
8002853c:	30410001 	andi	at,v0,0x1
80028540:	a3a10024 	sb	at,36(sp)
80028544:	a3a30025 	sb	v1,37(sp)
80028548:	93a10024 	lbu	at,36(sp)
8002854c:	30210001 	andi	at,at,0x1
80028550:	1420000a 	bnez	at,8002857c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hce0bedb7dbc5e59aE+0x8c>
80028554:	00000000 	nop
80028558:	0800a158 	j	80028560 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hce0bedb7dbc5e59aE+0x70>
8002855c:	00000000 	nop
        SpinlockGuard { lock: self }
80028560:	8fa1001c 	lw	at,28(sp)
80028564:	afa10020 	sw	at,32(sp)
    }
80028568:	8fa20020 	lw	v0,32(sp)
8002856c:	8fbf002c 	lw	ra,44(sp)
80028570:	27bd0030 	addiu	sp,sp,48
80028574:	03e00008 	jr	ra
80028578:	00000000 	nop
                    core::hint::spin_loop();
8002857c:	0800a142 	j	80028508 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hce0bedb7dbc5e59aE+0x18>
80028580:	00000000 	nop

80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>:
    pub fn lock(&self) -> SpinlockGuard<T> {
80028584:	27bdffd0 	addiu	sp,sp,-48
80028588:	afbf002c 	sw	ra,44(sp)
8002858c:	afa4001c 	sw	a0,28(sp)
80028590:	afa40028 	sw	a0,40(sp)
        loop {
80028594:	0800a167 	j	8002859c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE+0x18>
80028598:	00000000 	nop
            match self
8002859c:	8fa1001c 	lw	at,28(sp)
800285a0:	24240008 	addiu	a0,at,8
800285a4:	24010002 	li	at,2
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
800285a8:	a3a10026 	sb	at,38(sp)
800285ac:	a3a10027 	sb	at,39(sp)
            match self
800285b0:	93a70026 	lbu	a3,38(sp)
800285b4:	93a10027 	lbu	at,39(sp)
800285b8:	03a01025 	move	v0,sp
800285bc:	ac410010 	sw	at,16(v0)
800285c0:	24050000 	li	a1,0
800285c4:	24060001 	li	a2,1
800285c8:	0c009040 	jal	80024100 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h69187781131097deE>
800285cc:	00000000 	nop
800285d0:	30410001 	andi	at,v0,0x1
800285d4:	a3a10024 	sb	at,36(sp)
800285d8:	a3a30025 	sb	v1,37(sp)
800285dc:	93a10024 	lbu	at,36(sp)
800285e0:	30210001 	andi	at,at,0x1
800285e4:	1420000a 	bnez	at,80028610 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE+0x8c>
800285e8:	00000000 	nop
800285ec:	0800a17d 	j	800285f4 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE+0x70>
800285f0:	00000000 	nop
        SpinlockGuard { lock: self }
800285f4:	8fa1001c 	lw	at,28(sp)
800285f8:	afa10020 	sw	at,32(sp)
    }
800285fc:	8fa20020 	lw	v0,32(sp)
80028600:	8fbf002c 	lw	ra,44(sp)
80028604:	27bd0030 	addiu	sp,sp,48
80028608:	03e00008 	jr	ra
8002860c:	00000000 	nop
                    core::hint::spin_loop();
80028610:	0800a167 	j	8002859c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE+0x18>
80028614:	00000000 	nop

80028618 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h1413aa14d136e74dE>:
    ///
    /// That is, this conversion is whatever the implementation of
    /// <code>[From]&lt;T&gt; for U</code> chooses to do.
    #[inline]
    #[track_caller]
    fn into(self) -> U {
80028618:	27bdffe8 	addiu	sp,sp,-24
8002861c:	afbf0014 	sw	ra,20(sp)
80028620:	afa40010 	sw	a0,16(sp)
        U::from(self)
80028624:	0c00af58 	jal	8002bd60 <_ZN81_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17hb599be5559987ce0E>
80028628:	00000000 	nop
    }
8002862c:	8fbf0014 	lw	ra,20(sp)
80028630:	27bd0018 	addiu	sp,sp,24
80028634:	03e00008 	jr	ra
80028638:	00000000 	nop

8002863c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h2078caf144522ce6E>:
    fn into(self) -> U {
8002863c:	27bdffe8 	addiu	sp,sp,-24
80028640:	afbf0014 	sw	ra,20(sp)
80028644:	afa40010 	sw	a0,16(sp)
        U::from(self)
80028648:	0c00af50 	jal	8002bd40 <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h6ea8d698280004a0E>
8002864c:	00000000 	nop
    }
80028650:	8fbf0014 	lw	ra,20(sp)
80028654:	27bd0018 	addiu	sp,sp,24
80028658:	03e00008 	jr	ra
8002865c:	00000000 	nop

80028660 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h2d9fefc39387fa18E>:
    fn into(self) -> U {
80028660:	27bdfff8 	addiu	sp,sp,-8
80028664:	a3a40006 	sb	a0,6(sp)
80028668:	a3a40007 	sb	a0,7(sp)
            // Rustdocs on the impl block show a "[+] show undocumented items" toggle.
            // Rustdocs on functions do not.
            #[doc = $doc]
            #[inline(always)]
            fn from(small: $Small) -> Self {
                small as Self
8002866c:	308200ff 	andi	v0,a0,0xff
80028670:	27bd0008 	addiu	sp,sp,8
    }
80028674:	03e00008 	jr	ra
80028678:	00000000 	nop

8002867c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h83e5aa922d8ace36E>:
    fn into(self) -> U {
8002867c:	27bdffe8 	addiu	sp,sp,-24
80028680:	afbf0014 	sw	ra,20(sp)
80028684:	afa40010 	sw	a0,16(sp)
        U::from(self)
80028688:	0c00b0be 	jal	8002c2f8 <_ZN85_$LT$mos_6502..mm..pgtable..Permssion$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17hff6de3248d103707E>
8002868c:	00000000 	nop
    }
80028690:	8fbf0014 	lw	ra,20(sp)
80028694:	27bd0018 	addiu	sp,sp,24
80028698:	03e00008 	jr	ra
8002869c:	00000000 	nop

800286a0 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17ha604063855dcff4bE>:
    fn into(self) -> U {
800286a0:	27bdffe8 	addiu	sp,sp,-24
800286a4:	afbf0014 	sw	ra,20(sp)
800286a8:	afa40010 	sw	a0,16(sp)
        U::from(self)
800286ac:	0c00b6ac 	jal	8002dab0 <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17ha2cf53909d2bfa9cE>
800286b0:	00000000 	nop
    }
800286b4:	8fbf0014 	lw	ra,20(sp)
800286b8:	27bd0018 	addiu	sp,sp,24
800286bc:	03e00008 	jr	ra
800286c0:	00000000 	nop

800286c4 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hd11d919552d6394eE>:
    fn into(self) -> U {
800286c4:	27bdffe8 	addiu	sp,sp,-24
800286c8:	afbf0014 	sw	ra,20(sp)
800286cc:	afa40010 	sw	a0,16(sp)
        U::from(self)
800286d0:	0c00ae57 	jal	8002b95c <_ZN98_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h6720554aaa9e668aE>
800286d4:	00000000 	nop
    }
800286d8:	8fbf0014 	lw	ra,20(sp)
800286dc:	27bd0018 	addiu	sp,sp,24
800286e0:	03e00008 	jr	ra
800286e4:	00000000 	nop

800286e8 <_ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h5e55048404453558E>:
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
800286e8:	27bdffe0 	addiu	sp,sp,-32
800286ec:	afbf001c 	sw	ra,28(sp)
800286f0:	afa50010 	sw	a1,16(sp)
800286f4:	00800825 	move	at,a0
800286f8:	8fa40010 	lw	a0,16(sp)
800286fc:	afa10014 	sw	at,20(sp)
80028700:	afa40018 	sw	a0,24(sp)
80028704:	3c018105 	lui	at,0x8105
80028708:	2425ce24 	addiu	a1,at,-12764
8002870c:	24060005 	li	a2,5
80028710:	0c01017c 	jal	800405f0 <_ZN4core3fmt9Formatter9write_str17h2077d209297f8673E>
80028714:	00000000 	nop
80028718:	8fbf001c 	lw	ra,28(sp)
8002871c:	27bd0020 	addiu	sp,sp,32
80028720:	03e00008 	jr	ra
80028724:	00000000 	nop

80028728 <_ZN59_$LT$alloc..alloc..Global$u20$as$u20$core..clone..Clone$GT$5clone17hf1d159ddd3c08c93E>:
/// if there is one, or the `std` crate’s default.
///
/// Note: while this type is unstable, the functionality it provides can be
/// accessed through the [free functions in `alloc`](self#functions).
#[unstable(feature = "allocator_api", issue = "32838")]
#[derive(Copy, Clone, Default, Debug)]
80028728:	27bdfff8 	addiu	sp,sp,-8
8002872c:	afa40004 	sw	a0,4(sp)
80028730:	27bd0008 	addiu	sp,sp,8
80028734:	03e00008 	jr	ra
80028738:	00000000 	nop

8002873c <_ZN5alloc2rc11is_dangling17hf1f34119c9b22be4E>:
            alloc,
        }
    }
}

pub(crate) fn is_dangling<T: ?Sized>(ptr: *const T) -> bool {
8002873c:	27bdfff0 	addiu	sp,sp,-16
80028740:	afa40000 	sw	a0,0(sp)
80028744:	afa4000c 	sw	a0,12(sp)
80028748:	afa40004 	sw	a0,4(sp)
8002874c:	afa40008 	sw	a0,8(sp)
80028750:	2401ffff 	li	at,-1
    (ptr.cast::<()>()).addr() == usize::MAX
80028754:	00810826 	xor	at,a0,at
80028758:	2c220001 	sltiu	v0,at,1
8002875c:	27bd0010 	addiu	sp,sp,16
}
80028760:	03e00008 	jr	ra
80028764:	00000000 	nop

80028768 <_ZN5alloc3vec12Vec$LT$T$GT$3new17h6244962cf2e35ae2E>:
    /// ```
    #[inline]
    #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[must_use]
    pub const fn new() -> Self {
80028768:	00801025 	move	v0,a0
        Vec { buf: RawVec::NEW, len: 0 }
8002876c:	ac800000 	sw	zero,0(a0)
80028770:	24010004 	li	at,4
80028774:	ac810004 	sw	at,4(a0)
80028778:	ac800008 	sw	zero,8(a0)
    }
8002877c:	03e00008 	jr	ra
80028780:	00000000 	nop

80028784 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hc07920d6db91e3eeE>:
    pub const fn new() -> Self {
80028784:	00801025 	move	v0,a0
        Vec { buf: RawVec::NEW, len: 0 }
80028788:	ac800000 	sw	zero,0(a0)
8002878c:	24010004 	li	at,4
80028790:	ac810004 	sw	at,4(a0)
80028794:	ac800008 	sw	zero,8(a0)
    }
80028798:	03e00008 	jr	ra
8002879c:	00000000 	nop

800287a0 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hca45c7a2705b6dbbE>:
    pub const fn new() -> Self {
800287a0:	00801025 	move	v0,a0
        Vec { buf: RawVec::NEW, len: 0 }
800287a4:	ac800000 	sw	zero,0(a0)
800287a8:	24010004 	li	at,4
800287ac:	ac810004 	sw	at,4(a0)
800287b0:	ac800008 	sw	zero,8(a0)
    }
800287b4:	03e00008 	jr	ra
800287b8:	00000000 	nop

800287bc <_ZN5alloc3vec12Vec$LT$T$GT$3new17hdab6f1750d2b3e22E>:
    pub const fn new() -> Self {
800287bc:	00801025 	move	v0,a0
        Vec { buf: RawVec::NEW, len: 0 }
800287c0:	ac800000 	sw	zero,0(a0)
800287c4:	24010004 	li	at,4
800287c8:	ac810004 	sw	at,4(a0)
800287cc:	ac800008 	sw	zero,8(a0)
    }
800287d0:	03e00008 	jr	ra
800287d4:	00000000 	nop

800287d8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h76e38f988b90ebefE>:
    /// [`as_mut_ptr`]: Vec::as_mut_ptr
    /// [`as_ptr`]: Vec::as_ptr
    #[stable(feature = "vec_as_ptr", since = "1.37.0")]
    #[rustc_never_returns_null_ptr]
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
800287d8:	27bdffe8 	addiu	sp,sp,-24
800287dc:	afbf0014 	sw	ra,20(sp)
800287e0:	afa40010 	sw	a0,16(sp)
        // We shadow the slice method of the same name to avoid going through
        // `deref_mut`, which creates an intermediate reference.
        self.buf.ptr()
800287e4:	0c00a8e0 	jal	8002a380 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17heae0b931d7695f00E>
800287e8:	00000000 	nop
    }
800287ec:	8fbf0014 	lw	ra,20(sp)
800287f0:	27bd0018 	addiu	sp,sp,24
800287f4:	03e00008 	jr	ra
800287f8:	00000000 	nop

800287fc <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h88b58b9ee077356cE>:
    pub fn as_mut_ptr(&mut self) -> *mut T {
800287fc:	27bdffe8 	addiu	sp,sp,-24
80028800:	afbf0014 	sw	ra,20(sp)
80028804:	afa40010 	sw	a0,16(sp)
        self.buf.ptr()
80028808:	0c00a8c2 	jal	8002a308 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h28b7d7624a090b25E>
8002880c:	00000000 	nop
    }
80028810:	8fbf0014 	lw	ra,20(sp)
80028814:	27bd0018 	addiu	sp,sp,24
80028818:	03e00008 	jr	ra
8002881c:	00000000 	nop

80028820 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17ha3ed0cbea5abdeddE>:
    pub fn as_mut_ptr(&mut self) -> *mut T {
80028820:	27bdffe8 	addiu	sp,sp,-24
80028824:	afbf0014 	sw	ra,20(sp)
80028828:	afa40010 	sw	a0,16(sp)
        self.buf.ptr()
8002882c:	0c00a8cc 	jal	8002a330 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h5a9f471c1256b736E>
80028830:	00000000 	nop
    }
80028834:	8fbf0014 	lw	ra,20(sp)
80028838:	27bd0018 	addiu	sp,sp,24
8002883c:	03e00008 	jr	ra
80028840:	00000000 	nop

80028844 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17hdce895f5c65c48a4E>:
    pub fn as_mut_ptr(&mut self) -> *mut T {
80028844:	27bdffe8 	addiu	sp,sp,-24
80028848:	afbf0014 	sw	ra,20(sp)
8002884c:	afa40010 	sw	a0,16(sp)
        self.buf.ptr()
80028850:	0c00a8d6 	jal	8002a358 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17hb09faf528c7b0109E>
80028854:	00000000 	nop
    }
80028858:	8fbf0014 	lw	ra,20(sp)
8002885c:	27bd0018 	addiu	sp,sp,24
80028860:	03e00008 	jr	ra
80028864:	00000000 	nop

80028868 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h21a561bf51af16e4E>:
    /// assert_eq!(a.len(), 3);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_confusables("length", "size")]
    pub fn len(&self) -> usize {
80028868:	27bdfff8 	addiu	sp,sp,-8
8002886c:	afa40004 	sw	a0,4(sp)
        self.len
80028870:	8c820008 	lw	v0,8(a0)
80028874:	27bd0008 	addiu	sp,sp,8
    }
80028878:	03e00008 	jr	ra
8002887c:	00000000 	nop

80028880 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h8d08a014a9a0c95bE>:
    pub fn len(&self) -> usize {
80028880:	27bdfff8 	addiu	sp,sp,-8
80028884:	afa40004 	sw	a0,4(sp)
        self.len
80028888:	8c820008 	lw	v0,8(a0)
8002888c:	27bd0008 	addiu	sp,sp,8
    }
80028890:	03e00008 	jr	ra
80028894:	00000000 	nop

80028898 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17hed962bae03803936E>:
    pub fn pop(&mut self) -> Option<T> {
80028898:	27bdffc0 	addiu	sp,sp,-64
8002889c:	afbf003c 	sw	ra,60(sp)
800288a0:	afa40020 	sw	a0,32(sp)
800288a4:	afa4002c 	sw	a0,44(sp)
        if self.len == 0 {
800288a8:	8c810008 	lw	at,8(a0)
800288ac:	14200006 	bnez	at,800288c8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17hed962bae03803936E+0x30>
800288b0:	00000000 	nop
800288b4:	0800a22f 	j	800288bc <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17hed962bae03803936E+0x24>
800288b8:	00000000 	nop
            None
800288bc:	afa00024 	sw	zero,36(sp)
        if self.len == 0 {
800288c0:	0800a23a 	j	800288e8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17hed962bae03803936E+0x50>
800288c4:	00000000 	nop
                self.len -= 1;
800288c8:	8fa10020 	lw	at,32(sp)
800288cc:	8c210008 	lw	at,8(at)
800288d0:	2422ffff 	addiu	v0,at,-1
800288d4:	afa2001c 	sw	v0,28(sp)
800288d8:	10200034 	beqz	at,800289ac <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17hed962bae03803936E+0x114>
800288dc:	00000000 	nop
800288e0:	0800a240 	j	80028900 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17hed962bae03803936E+0x68>
800288e4:	00000000 	nop
    }
800288e8:	8fa20024 	lw	v0,36(sp)
800288ec:	8fa30028 	lw	v1,40(sp)
800288f0:	8fbf003c 	lw	ra,60(sp)
800288f4:	27bd0040 	addiu	sp,sp,64
800288f8:	03e00008 	jr	ra
800288fc:	00000000 	nop
                self.len -= 1;
80028900:	8fa40020 	lw	a0,32(sp)
80028904:	8fa1001c 	lw	at,28(sp)
80028908:	ac810008 	sw	at,8(a0)
                core::hint::assert_unchecked(self.len < self.capacity());
8002890c:	8c810008 	lw	at,8(a0)
80028910:	afa10014 	sw	at,20(sp)
80028914:	0c00a366 	jal	80028d98 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8capacity17h6957ed8dc6e7ae47E>
80028918:	00000000 	nop
8002891c:	8fa10014 	lw	at,20(sp)
80028920:	0022082b 	sltu	at,at,v0
80028924:	afa10018 	sw	at,24(sp)
80028928:	a3a1003b 	sb	at,59(sp)
        ub_checks::assert_unsafe_precondition!(
8002892c:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80028930:	00000000 	nop
80028934:	10400009 	beqz	v0,8002895c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17hed962bae03803936E+0xc4>
80028938:	00000000 	nop
8002893c:	0800a251 	j	80028944 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17hed962bae03803936E+0xac>
80028940:	00000000 	nop
80028944:	8fa10018 	lw	at,24(sp)
80028948:	30240001 	andi	a0,at,0x1
8002894c:	0c00901d 	jal	80024074 <_ZN4core4hint16assert_unchecked18precondition_check17h2f62c826c48aeb44E>
80028950:	00000000 	nop
80028954:	0800a257 	j	8002895c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17hed962bae03803936E+0xc4>
80028958:	00000000 	nop
                Some(ptr::read(self.as_ptr().add(self.len())))
8002895c:	8fa40020 	lw	a0,32(sp)
80028960:	0c00a342 	jal	80028d08 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h0b43026f5294e2f0E>
80028964:	00000000 	nop
80028968:	8fa40020 	lw	a0,32(sp)
8002896c:	afa20010 	sw	v0,16(sp)
80028970:	0c00a21a 	jal	80028868 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h21a561bf51af16e4E>
80028974:	00000000 	nop
80028978:	00400825 	move	at,v0
8002897c:	8fa20010 	lw	v0,16(sp)
80028980:	afa20030 	sw	v0,48(sp)
80028984:	afa10034 	sw	at,52(sp)
    pub const unsafe fn add(self, count: usize) -> Self
    where
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `offset`.
        unsafe { intrinsics::offset(self, count) }
80028988:	00010880 	sll	at,at,0x2
8002898c:	00412021 	addu	a0,v0,at
80028990:	0c0088ef 	jal	800223bc <_ZN4core3ptr4read17h5654c04943492f3dE>
80028994:	00000000 	nop
80028998:	afa20028 	sw	v0,40(sp)
8002899c:	24010001 	li	at,1
800289a0:	afa10024 	sw	at,36(sp)
        if self.len == 0 {
800289a4:	0800a23a 	j	800288e8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17hed962bae03803936E+0x50>
800289a8:	00000000 	nop
                self.len -= 1;
800289ac:	3c018105 	lui	at,0x8105
800289b0:	2424ce98 	addiu	a0,at,-12648
800289b4:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800289b8:	00000000 	nop

800289bc <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h610fc5f9c6011211E>:
    pub fn push(&mut self, value: T) {
800289bc:	27bdffc8 	addiu	sp,sp,-56
800289c0:	afbf0034 	sw	ra,52(sp)
800289c4:	afa50014 	sw	a1,20(sp)
800289c8:	afa40018 	sw	a0,24(sp)
800289cc:	afa4001c 	sw	a0,28(sp)
        if self.len == self.buf.capacity() {
800289d0:	8c810008 	lw	at,8(a0)
800289d4:	afa40030 	sw	a0,48(sp)
    /// Gets the capacity of the allocation.
    ///
    /// This will always be `usize::MAX` if `T` is zero-sized.
    #[inline(always)]
    pub fn capacity(&self) -> usize {
        if T::IS_ZST { usize::MAX } else { self.cap.0 }
800289d8:	8c820000 	lw	v0,0(a0)
800289dc:	afa2002c 	sw	v0,44(sp)
    }
800289e0:	8fa2002c 	lw	v0,44(sp)
800289e4:	1022001c 	beq	at,v0,80028a58 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h610fc5f9c6011211E+0x9c>
800289e8:	00000000 	nop
800289ec:	0800a27d 	j	800289f4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h610fc5f9c6011211E+0x38>
800289f0:	00000000 	nop
            let end = self.as_mut_ptr().add(self.len);
800289f4:	8fa40018 	lw	a0,24(sp)
800289f8:	0c00a1ff 	jal	800287fc <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h88b58b9ee077356cE>
800289fc:	00000000 	nop
80028a00:	8fa50014 	lw	a1,20(sp)
80028a04:	8fa10018 	lw	at,24(sp)
80028a08:	8c210008 	lw	at,8(at)
80028a0c:	afa20024 	sw	v0,36(sp)
80028a10:	afa10028 	sw	at,40(sp)
80028a14:	00012080 	sll	a0,at,0x2
80028a18:	00011940 	sll	v1,at,0x5
80028a1c:	00641821 	addu	v1,v1,a0
80028a20:	00010a00 	sll	at,at,0x8
80028a24:	00230823 	subu	at,at,v1
80028a28:	00412021 	addu	a0,v0,at
80028a2c:	afa40020 	sw	a0,32(sp)
            ptr::write(end, value);
80028a30:	0c008b04 	jal	80022c10 <_ZN4core3ptr5write17hfe147acf65d13d27E>
80028a34:	00000000 	nop
80028a38:	8fa10018 	lw	at,24(sp)
            self.len += 1;
80028a3c:	8c210008 	lw	at,8(at)
80028a40:	24210001 	addiu	at,at,1
80028a44:	afa10010 	sw	at,16(sp)
80028a48:	1020000f 	beqz	at,80028a88 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h610fc5f9c6011211E+0xcc>
80028a4c:	00000000 	nop
80028a50:	0800a29b 	j	80028a6c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h610fc5f9c6011211E+0xb0>
80028a54:	00000000 	nop
            self.buf.grow_one();
80028a58:	8fa40018 	lw	a0,24(sp)
80028a5c:	0c00a904 	jal	8002a410 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h3db60e8b0c4ab50dE>
80028a60:	00000000 	nop
80028a64:	0800a27d 	j	800289f4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h610fc5f9c6011211E+0x38>
80028a68:	00000000 	nop
            self.len += 1;
80028a6c:	8fa10010 	lw	at,16(sp)
80028a70:	8fa20018 	lw	v0,24(sp)
80028a74:	ac410008 	sw	at,8(v0)
    }
80028a78:	8fbf0034 	lw	ra,52(sp)
80028a7c:	27bd0038 	addiu	sp,sp,56
80028a80:	03e00008 	jr	ra
80028a84:	00000000 	nop
            self.len += 1;
80028a88:	3c018105 	lui	at,0x8105
80028a8c:	2424cea8 	addiu	a0,at,-12632
80028a90:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80028a94:	00000000 	nop

80028a98 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h7030e8082cdb5ed5E>:
    pub fn push(&mut self, value: T) {
80028a98:	27bdffc8 	addiu	sp,sp,-56
80028a9c:	afbf0034 	sw	ra,52(sp)
80028aa0:	afa50014 	sw	a1,20(sp)
80028aa4:	afa40018 	sw	a0,24(sp)
80028aa8:	afa4001c 	sw	a0,28(sp)
        if self.len == self.buf.capacity() {
80028aac:	8c810008 	lw	at,8(a0)
80028ab0:	afa40030 	sw	a0,48(sp)
        if T::IS_ZST { usize::MAX } else { self.cap.0 }
80028ab4:	8c820000 	lw	v0,0(a0)
80028ab8:	afa2002c 	sw	v0,44(sp)
    }
80028abc:	8fa2002c 	lw	v0,44(sp)
80028ac0:	10220018 	beq	at,v0,80028b24 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h7030e8082cdb5ed5E+0x8c>
80028ac4:	00000000 	nop
80028ac8:	0800a2b4 	j	80028ad0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h7030e8082cdb5ed5E+0x38>
80028acc:	00000000 	nop
            let end = self.as_mut_ptr().add(self.len);
80028ad0:	8fa40018 	lw	a0,24(sp)
80028ad4:	0c00a208 	jal	80028820 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17ha3ed0cbea5abdeddE>
80028ad8:	00000000 	nop
80028adc:	8fa50014 	lw	a1,20(sp)
80028ae0:	8fa10018 	lw	at,24(sp)
80028ae4:	8c210008 	lw	at,8(at)
80028ae8:	afa20024 	sw	v0,36(sp)
80028aec:	afa10028 	sw	at,40(sp)
80028af0:	00010940 	sll	at,at,0x5
80028af4:	00412021 	addu	a0,v0,at
80028af8:	afa40020 	sw	a0,32(sp)
            ptr::write(end, value);
80028afc:	0c008ac4 	jal	80022b10 <_ZN4core3ptr5write17he474ee23ff04a518E>
80028b00:	00000000 	nop
80028b04:	8fa10018 	lw	at,24(sp)
            self.len += 1;
80028b08:	8c210008 	lw	at,8(at)
80028b0c:	24210001 	addiu	at,at,1
80028b10:	afa10010 	sw	at,16(sp)
80028b14:	1020000f 	beqz	at,80028b54 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h7030e8082cdb5ed5E+0xbc>
80028b18:	00000000 	nop
80028b1c:	0800a2ce 	j	80028b38 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h7030e8082cdb5ed5E+0xa0>
80028b20:	00000000 	nop
            self.buf.grow_one();
80028b24:	8fa40018 	lw	a0,24(sp)
80028b28:	0c00a938 	jal	8002a4e0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hf970053023bae9baE>
80028b2c:	00000000 	nop
80028b30:	0800a2b4 	j	80028ad0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h7030e8082cdb5ed5E+0x38>
80028b34:	00000000 	nop
            self.len += 1;
80028b38:	8fa10010 	lw	at,16(sp)
80028b3c:	8fa20018 	lw	v0,24(sp)
80028b40:	ac410008 	sw	at,8(v0)
    }
80028b44:	8fbf0034 	lw	ra,52(sp)
80028b48:	27bd0038 	addiu	sp,sp,56
80028b4c:	03e00008 	jr	ra
80028b50:	00000000 	nop
            self.len += 1;
80028b54:	3c018105 	lui	at,0x8105
80028b58:	2424cea8 	addiu	a0,at,-12632
80028b5c:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80028b60:	00000000 	nop

80028b64 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h731fd43dd034a6deE>:
    pub fn push(&mut self, value: T) {
80028b64:	27bdffc0 	addiu	sp,sp,-64
80028b68:	afbf003c 	sw	ra,60(sp)
80028b6c:	afa50018 	sw	a1,24(sp)
80028b70:	afa4001c 	sw	a0,28(sp)
80028b74:	afa40020 	sw	a0,32(sp)
80028b78:	afa50024 	sw	a1,36(sp)
        if self.len == self.buf.capacity() {
80028b7c:	8c810008 	lw	at,8(a0)
80028b80:	afa40038 	sw	a0,56(sp)
        if T::IS_ZST { usize::MAX } else { self.cap.0 }
80028b84:	8c820000 	lw	v0,0(a0)
80028b88:	afa20034 	sw	v0,52(sp)
    }
80028b8c:	8fa20034 	lw	v0,52(sp)
80028b90:	10220018 	beq	at,v0,80028bf4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h731fd43dd034a6deE+0x90>
80028b94:	00000000 	nop
80028b98:	0800a2e8 	j	80028ba0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h731fd43dd034a6deE+0x3c>
80028b9c:	00000000 	nop
            let end = self.as_mut_ptr().add(self.len);
80028ba0:	8fa4001c 	lw	a0,28(sp)
80028ba4:	0c00a211 	jal	80028844 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17hdce895f5c65c48a4E>
80028ba8:	00000000 	nop
80028bac:	8fa50018 	lw	a1,24(sp)
80028bb0:	8fa1001c 	lw	at,28(sp)
80028bb4:	8c210008 	lw	at,8(at)
80028bb8:	afa2002c 	sw	v0,44(sp)
80028bbc:	afa10030 	sw	at,48(sp)
80028bc0:	00010880 	sll	at,at,0x2
80028bc4:	00412021 	addu	a0,v0,at
80028bc8:	afa40028 	sw	a0,40(sp)
            ptr::write(end, value);
80028bcc:	0c008a28 	jal	800228a0 <_ZN4core3ptr5write17h4fb1223197ffc296E>
80028bd0:	00000000 	nop
80028bd4:	8fa1001c 	lw	at,28(sp)
            self.len += 1;
80028bd8:	8c210008 	lw	at,8(at)
80028bdc:	24210001 	addiu	at,at,1
80028be0:	afa10014 	sw	at,20(sp)
80028be4:	1020000f 	beqz	at,80028c24 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h731fd43dd034a6deE+0xc0>
80028be8:	00000000 	nop
80028bec:	0800a302 	j	80028c08 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h731fd43dd034a6deE+0xa4>
80028bf0:	00000000 	nop
            self.buf.grow_one();
80028bf4:	8fa4001c 	lw	a0,28(sp)
80028bf8:	0c00a8ea 	jal	8002a3a8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h13b3d982bee3656fE>
80028bfc:	00000000 	nop
80028c00:	0800a2e8 	j	80028ba0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h731fd43dd034a6deE+0x3c>
80028c04:	00000000 	nop
            self.len += 1;
80028c08:	8fa10014 	lw	at,20(sp)
80028c0c:	8fa2001c 	lw	v0,28(sp)
80028c10:	ac410008 	sw	at,8(v0)
    }
80028c14:	8fbf003c 	lw	ra,60(sp)
80028c18:	27bd0040 	addiu	sp,sp,64
80028c1c:	03e00008 	jr	ra
80028c20:	00000000 	nop
            self.len += 1;
80028c24:	3c018105 	lui	at,0x8105
80028c28:	2424cea8 	addiu	a0,at,-12632
80028c2c:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80028c30:	00000000 	nop

80028c34 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha972278a66e8b2beE>:
    pub fn push(&mut self, value: T) {
80028c34:	27bdffc8 	addiu	sp,sp,-56
80028c38:	afbf0034 	sw	ra,52(sp)
80028c3c:	afa50014 	sw	a1,20(sp)
80028c40:	afa40018 	sw	a0,24(sp)
80028c44:	afa4001c 	sw	a0,28(sp)
        if self.len == self.buf.capacity() {
80028c48:	8c810008 	lw	at,8(a0)
80028c4c:	afa40030 	sw	a0,48(sp)
        if T::IS_ZST { usize::MAX } else { self.cap.0 }
80028c50:	8c820000 	lw	v0,0(a0)
80028c54:	afa2002c 	sw	v0,44(sp)
    }
80028c58:	8fa2002c 	lw	v0,44(sp)
80028c5c:	1022001a 	beq	at,v0,80028cc8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha972278a66e8b2beE+0x94>
80028c60:	00000000 	nop
80028c64:	0800a31b 	j	80028c6c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha972278a66e8b2beE+0x38>
80028c68:	00000000 	nop
            let end = self.as_mut_ptr().add(self.len);
80028c6c:	8fa40018 	lw	a0,24(sp)
80028c70:	0c00a1f6 	jal	800287d8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h76e38f988b90ebefE>
80028c74:	00000000 	nop
80028c78:	8fa50014 	lw	a1,20(sp)
80028c7c:	8fa10018 	lw	at,24(sp)
80028c80:	8c210008 	lw	at,8(at)
80028c84:	afa20024 	sw	v0,36(sp)
80028c88:	afa10028 	sw	at,40(sp)
80028c8c:	00011880 	sll	v1,at,0x2
80028c90:	000108c0 	sll	at,at,0x3
80028c94:	00230821 	addu	at,at,v1
80028c98:	00412021 	addu	a0,v0,at
80028c9c:	afa40020 	sw	a0,32(sp)
            ptr::write(end, value);
80028ca0:	0c008aa7 	jal	80022a9c <_ZN4core3ptr5write17ha2a2bc1814b9cecbE>
80028ca4:	00000000 	nop
80028ca8:	8fa10018 	lw	at,24(sp)
            self.len += 1;
80028cac:	8c210008 	lw	at,8(at)
80028cb0:	24210001 	addiu	at,at,1
80028cb4:	afa10010 	sw	at,16(sp)
80028cb8:	1020000f 	beqz	at,80028cf8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha972278a66e8b2beE+0xc4>
80028cbc:	00000000 	nop
80028cc0:	0800a337 	j	80028cdc <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha972278a66e8b2beE+0xa8>
80028cc4:	00000000 	nop
            self.buf.grow_one();
80028cc8:	8fa40018 	lw	a0,24(sp)
80028ccc:	0c00a91e 	jal	8002a478 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h902f9d9be612bf8aE>
80028cd0:	00000000 	nop
80028cd4:	0800a31b 	j	80028c6c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha972278a66e8b2beE+0x38>
80028cd8:	00000000 	nop
            self.len += 1;
80028cdc:	8fa10010 	lw	at,16(sp)
80028ce0:	8fa20018 	lw	v0,24(sp)
80028ce4:	ac410008 	sw	at,8(v0)
    }
80028ce8:	8fbf0034 	lw	ra,52(sp)
80028cec:	27bd0038 	addiu	sp,sp,56
80028cf0:	03e00008 	jr	ra
80028cf4:	00000000 	nop
            self.len += 1;
80028cf8:	3c018105 	lui	at,0x8105
80028cfc:	2424cea8 	addiu	a0,at,-12632
80028d00:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80028d04:	00000000 	nop

80028d08 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h0b43026f5294e2f0E>:
    pub fn as_ptr(&self) -> *const T {
80028d08:	27bdffe8 	addiu	sp,sp,-24
80028d0c:	afbf0014 	sw	ra,20(sp)
80028d10:	afa40010 	sw	a0,16(sp)
        self.buf.ptr()
80028d14:	0c00a8d6 	jal	8002a358 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17hb09faf528c7b0109E>
80028d18:	00000000 	nop
    }
80028d1c:	8fbf0014 	lw	ra,20(sp)
80028d20:	27bd0018 	addiu	sp,sp,24
80028d24:	03e00008 	jr	ra
80028d28:	00000000 	nop

80028d2c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h829501f8939a52e5E>:
    pub fn as_ptr(&self) -> *const T {
80028d2c:	27bdffe8 	addiu	sp,sp,-24
80028d30:	afbf0014 	sw	ra,20(sp)
80028d34:	afa40010 	sw	a0,16(sp)
        self.buf.ptr()
80028d38:	0c00a8e0 	jal	8002a380 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17heae0b931d7695f00E>
80028d3c:	00000000 	nop
    }
80028d40:	8fbf0014 	lw	ra,20(sp)
80028d44:	27bd0018 	addiu	sp,sp,24
80028d48:	03e00008 	jr	ra
80028d4c:	00000000 	nop

80028d50 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h9e05305e907a4850E>:
    pub fn as_ptr(&self) -> *const T {
80028d50:	27bdffe8 	addiu	sp,sp,-24
80028d54:	afbf0014 	sw	ra,20(sp)
80028d58:	afa40010 	sw	a0,16(sp)
        self.buf.ptr()
80028d5c:	0c00a8cc 	jal	8002a330 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h5a9f471c1256b736E>
80028d60:	00000000 	nop
    }
80028d64:	8fbf0014 	lw	ra,20(sp)
80028d68:	27bd0018 	addiu	sp,sp,24
80028d6c:	03e00008 	jr	ra
80028d70:	00000000 	nop

80028d74 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hf0345009f98289e0E>:
    pub fn as_ptr(&self) -> *const T {
80028d74:	27bdffe8 	addiu	sp,sp,-24
80028d78:	afbf0014 	sw	ra,20(sp)
80028d7c:	afa40010 	sw	a0,16(sp)
        self.buf.ptr()
80028d80:	0c00a8c2 	jal	8002a308 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h28b7d7624a090b25E>
80028d84:	00000000 	nop
    }
80028d88:	8fbf0014 	lw	ra,20(sp)
80028d8c:	27bd0018 	addiu	sp,sp,24
80028d90:	03e00008 	jr	ra
80028d94:	00000000 	nop

80028d98 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8capacity17h6957ed8dc6e7ae47E>:
    pub fn capacity(&self) -> usize {
80028d98:	27bdfff0 	addiu	sp,sp,-16
80028d9c:	afa40004 	sw	a0,4(sp)
80028da0:	afa4000c 	sw	a0,12(sp)
        if T::IS_ZST { usize::MAX } else { self.cap.0 }
80028da4:	8c810000 	lw	at,0(a0)
80028da8:	afa10008 	sw	at,8(sp)
    }
80028dac:	8fa20008 	lw	v0,8(sp)
80028db0:	27bd0010 	addiu	sp,sp,16
    }
80028db4:	03e00008 	jr	ra
80028db8:	00000000 	nop

80028dbc <_ZN5alloc4sync12Arc$LT$T$GT$10from_inner17h1cf48866e2d21943E>:

#[unstable(feature = "dispatch_from_dyn", issue = "none")]
impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Arc<U>> for Arc<T> {}

impl<T: ?Sized> Arc<T> {
    unsafe fn from_inner(ptr: NonNull<ArcInner<T>>) -> Self {
80028dbc:	27bdffe8 	addiu	sp,sp,-24
80028dc0:	afbf0014 	sw	ra,20(sp)
80028dc4:	afa40010 	sw	a0,16(sp)
        unsafe { Self::from_inner_in(ptr, Global) }
80028dc8:	0c00a3b5 	jal	80028ed4 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$13from_inner_in17h3712adb806ff97e5E>
80028dcc:	00000000 	nop
    }
80028dd0:	8fbf0014 	lw	ra,20(sp)
80028dd4:	27bd0018 	addiu	sp,sp,24
80028dd8:	03e00008 	jr	ra
80028ddc:	00000000 	nop

80028de0 <_ZN5alloc4sync12Arc$LT$T$GT$3new17h3ae7f2a40b298a9cE>:
    /// let five = Arc::new(5);
    /// ```
    #[cfg(not(no_global_oom_handling))]
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn new(data: T) -> Arc<T> {
80028de0:	27bdffb8 	addiu	sp,sp,-72
80028de4:	afbf0044 	sw	ra,68(sp)
80028de8:	afa40014 	sw	a0,20(sp)
80028dec:	24040001 	li	a0,1
80028df0:	afa40010 	sw	a0,16(sp)
        // Start the weak pointer count as 1 which is the weak pointer that's
        // held by all the strong pointers (kinda), see std/rc.rs for more info
        let x: Box<_> = Box::new(ArcInner {
            strong: atomic::AtomicUsize::new(1),
80028df4:	0c009168 	jal	800245a0 <_ZN4core4sync6atomic11AtomicUsize3new17h71ece9cf1f00bce8E>
80028df8:	00000000 	nop
80028dfc:	8fa40010 	lw	a0,16(sp)
80028e00:	afa20038 	sw	v0,56(sp)
80028e04:	8fa10038 	lw	at,56(sp)
80028e08:	afa10030 	sw	at,48(sp)
            weak: atomic::AtomicUsize::new(1),
80028e0c:	0c009168 	jal	800245a0 <_ZN4core4sync6atomic11AtomicUsize3new17h71ece9cf1f00bce8E>
80028e10:	00000000 	nop
80028e14:	8fa40014 	lw	a0,20(sp)
80028e18:	afa2003c 	sw	v0,60(sp)
80028e1c:	8fa1003c 	lw	at,60(sp)
80028e20:	afa10034 	sw	at,52(sp)
        let x: Box<_> = Box::new(ArcInner {
80028e24:	8fa10030 	lw	at,48(sp)
80028e28:	afa10018 	sw	at,24(sp)
80028e2c:	8fa10034 	lw	at,52(sp)
80028e30:	afa1001c 	sw	at,28(sp)
80028e34:	8c81000c 	lw	at,12(a0)
80028e38:	afa1002c 	sw	at,44(sp)
80028e3c:	8c810008 	lw	at,8(a0)
80028e40:	afa10028 	sw	at,40(sp)
80028e44:	8c810004 	lw	at,4(a0)
80028e48:	afa10024 	sw	at,36(sp)
80028e4c:	8c810000 	lw	at,0(a0)
80028e50:	afa10020 	sw	at,32(sp)
80028e54:	24040018 	li	a0,24
80028e58:	24050004 	li	a1,4
80028e5c:	0c00a417 	jal	8002905c <_ZN5alloc5alloc15exchange_malloc17h9c97cc714fefd6e9E>
80028e60:	00000000 	nop
80028e64:	00402025 	move	a0,v0
80028e68:	8fa1002c 	lw	at,44(sp)
80028e6c:	ac810014 	sw	at,20(a0)
80028e70:	8fa10028 	lw	at,40(sp)
80028e74:	ac810010 	sw	at,16(a0)
80028e78:	8fa10024 	lw	at,36(sp)
80028e7c:	ac81000c 	sw	at,12(a0)
80028e80:	8fa10020 	lw	at,32(sp)
80028e84:	ac810008 	sw	at,8(a0)
80028e88:	8fa1001c 	lw	at,28(sp)
80028e8c:	ac810004 	sw	at,4(a0)
80028e90:	8fa10018 	lw	at,24(sp)
80028e94:	ac810000 	sw	at,0(a0)
80028e98:	afa40040 	sw	a0,64(sp)
            data,
        });
        unsafe { Self::from_inner(Box::leak(x).into()) }
80028e9c:	0c00a4db 	jal	8002936c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h2fd91475cbeaa19bE>
80028ea0:	00000000 	nop
80028ea4:	00402025 	move	a0,v0
80028ea8:	3c018105 	lui	at,0x8105
80028eac:	2425cf24 	addiu	a1,at,-12508
80028eb0:	0c00a1b1 	jal	800286c4 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hd11d919552d6394eE>
80028eb4:	00000000 	nop
80028eb8:	00402025 	move	a0,v0
80028ebc:	0c00a36f 	jal	80028dbc <_ZN5alloc4sync12Arc$LT$T$GT$10from_inner17h1cf48866e2d21943E>
80028ec0:	00000000 	nop
    }
80028ec4:	8fbf0044 	lw	ra,68(sp)
80028ec8:	27bd0048 	addiu	sp,sp,72
80028ecc:	03e00008 	jr	ra
80028ed0:	00000000 	nop

80028ed4 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$13from_inner_in17h3712adb806ff97e5E>:
    unsafe fn from_inner_in(ptr: NonNull<ArcInner<T>>, alloc: A) -> Self {
80028ed4:	27bdfff0 	addiu	sp,sp,-16
80028ed8:	afa40008 	sw	a0,8(sp)
        Self { ptr, phantom: PhantomData, alloc }
80028edc:	afa40004 	sw	a0,4(sp)
    }
80028ee0:	8fa20004 	lw	v0,4(sp)
80028ee4:	27bd0010 	addiu	sp,sp,16
80028ee8:	03e00008 	jr	ra
80028eec:	00000000 	nop

80028ef0 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$17get_mut_unchecked17h03689f51044694feE>:
    /// }
    /// println!("{}", &*x); // Use-after-free
    /// ```
    #[inline]
    #[unstable(feature = "get_mut_unchecked", issue = "63292")]
    pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {
80028ef0:	27bdfff8 	addiu	sp,sp,-8
80028ef4:	afa40000 	sw	a0,0(sp)
        // We are careful to *not* create a reference covering the "count" fields, as
        // this would alias with concurrent access to the reference counts (e.g. by `Weak`).
        unsafe { &mut (*this.ptr.as_ptr()).data }
80028ef8:	8c810000 	lw	at,0(a0)
80028efc:	afa10004 	sw	at,4(sp)
80028f00:	24220008 	addiu	v0,at,8
80028f04:	27bd0008 	addiu	sp,sp,8
    }
80028f08:	03e00008 	jr	ra
80028f0c:	00000000 	nop

80028f10 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$5inner17h2df8804a64a2e42bE>:
    fn inner(&self) -> &ArcInner<T> {
80028f10:	27bdfff0 	addiu	sp,sp,-16
80028f14:	afa40000 	sw	a0,0(sp)
80028f18:	afa40004 	sw	a0,4(sp)
        unsafe { &*self.as_ptr().cast_const() }
80028f1c:	8c820000 	lw	v0,0(a0)
80028f20:	afa2000c 	sw	v0,12(sp)
80028f24:	afa20008 	sw	v0,8(sp)
80028f28:	27bd0010 	addiu	sp,sp,16
    }
80028f2c:	03e00008 	jr	ra
80028f30:	00000000 	nop

80028f34 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9drop_slow17he0e4f340bd736593E>:
    unsafe fn drop_slow(&mut self) {
80028f34:	27bdffd8 	addiu	sp,sp,-40
80028f38:	afbf0024 	sw	ra,36(sp)
80028f3c:	afa40014 	sw	a0,20(sp)
80028f40:	afa40020 	sw	a0,32(sp)
        unsafe { ptr::drop_in_place(Self::get_mut_unchecked(self)) };
80028f44:	0c00a3bc 	jal	80028ef0 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$17get_mut_unchecked17h03689f51044694feE>
80028f48:	00000000 	nop
80028f4c:	00402025 	move	a0,v0
80028f50:	0c008bf3 	jal	80022fcc <_ZN4core3ptr72drop_in_place$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$17h6c0ca15fa8cd2e2cE>
80028f54:	00000000 	nop
80028f58:	8fa40014 	lw	a0,20(sp)
        drop(Weak { ptr: self.ptr, alloc: &self.alloc });
80028f5c:	8c820000 	lw	v0,0(a0)
80028f60:	24810004 	addiu	at,a0,4
80028f64:	afa20018 	sw	v0,24(sp)
80028f68:	afa1001c 	sw	at,28(sp)
80028f6c:	8fa40018 	lw	a0,24(sp)
80028f70:	8fa5001c 	lw	a1,28(sp)
80028f74:	0c008452 	jal	80021148 <_ZN4core3mem4drop17h200bb2365d423976E>
80028f78:	00000000 	nop
    }
80028f7c:	8fbf0024 	lw	ra,36(sp)
80028f80:	27bd0028 	addiu	sp,sp,40
80028f84:	03e00008 	jr	ra
80028f88:	00000000 	nop

80028f8c <_ZN5alloc4sync17Weak$LT$T$C$A$GT$5inner17h8dfd93f03290850eE>:
    }

    /// Returns `None` when the pointer is dangling and there is no allocated `ArcInner`,
    /// (i.e., when this `Weak` was created by `Weak::new`).
    #[inline]
    fn inner(&self) -> Option<WeakInner<'_>> {
80028f8c:	27bdffc8 	addiu	sp,sp,-56
80028f90:	afbf0034 	sw	ra,52(sp)
80028f94:	afa40028 	sw	a0,40(sp)
        let ptr = self.ptr.as_ptr();
80028f98:	8c840000 	lw	a0,0(a0)
80028f9c:	afa40014 	sw	a0,20(sp)
80028fa0:	afa40030 	sw	a0,48(sp)
80028fa4:	afa4002c 	sw	a0,44(sp)
        if is_dangling(ptr) {
80028fa8:	0c00a1cf 	jal	8002873c <_ZN5alloc2rc11is_dangling17hf1f34119c9b22be4E>
80028fac:	00000000 	nop
80028fb0:	1440000d 	bnez	v0,80028fe8 <_ZN5alloc4sync17Weak$LT$T$C$A$GT$5inner17h8dfd93f03290850eE+0x5c>
80028fb4:	00000000 	nop
80028fb8:	0800a3f0 	j	80028fc0 <_ZN5alloc4sync17Weak$LT$T$C$A$GT$5inner17h8dfd93f03290850eE+0x34>
80028fbc:	00000000 	nop
            None
        } else {
            // We are careful to *not* create a reference covering the "data" field, as
            // the field may be mutated concurrently (for example, if the last `Arc`
            // is dropped, the data field will be dropped in-place).
            Some(unsafe { WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak } })
80028fc0:	8fa10014 	lw	at,20(sp)
80028fc4:	24220004 	addiu	v0,at,4
80028fc8:	afa20020 	sw	v0,32(sp)
80028fcc:	afa10024 	sw	at,36(sp)
80028fd0:	8fa20020 	lw	v0,32(sp)
80028fd4:	8fa10024 	lw	at,36(sp)
80028fd8:	afa20018 	sw	v0,24(sp)
80028fdc:	afa1001c 	sw	at,28(sp)
        if is_dangling(ptr) {
80028fe0:	0800a3fd 	j	80028ff4 <_ZN5alloc4sync17Weak$LT$T$C$A$GT$5inner17h8dfd93f03290850eE+0x68>
80028fe4:	00000000 	nop
            None
80028fe8:	afa00018 	sw	zero,24(sp)
        if is_dangling(ptr) {
80028fec:	0800a3fd 	j	80028ff4 <_ZN5alloc4sync17Weak$LT$T$C$A$GT$5inner17h8dfd93f03290850eE+0x68>
80028ff0:	00000000 	nop
        }
    }
80028ff4:	8fa20018 	lw	v0,24(sp)
80028ff8:	8fa3001c 	lw	v1,28(sp)
80028ffc:	8fbf0034 	lw	ra,52(sp)
80029000:	27bd0038 	addiu	sp,sp,56
80029004:	03e00008 	jr	ra
80029008:	00000000 	nop

8002900c <_ZN5alloc5alloc12alloc_zeroed17h131171c86eca49a7E>:
/// }
/// ```
#[stable(feature = "global_alloc", since = "1.28.0")]
#[must_use = "losing the pointer will leak memory"]
#[inline]
pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
8002900c:	27bdffd8 	addiu	sp,sp,-40
80029010:	afbf0024 	sw	ra,36(sp)
80029014:	afa4001c 	sw	a0,28(sp)
80029018:	afa50020 	sw	a1,32(sp)
8002901c:	27a4001c 	addiu	a0,sp,28
80029020:	afa40014 	sw	a0,20(sp)
    unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
80029024:	0c009495 	jal	80025254 <_ZN4core5alloc6layout6Layout4size17h270752b9ab6d7566E>
80029028:	00000000 	nop
8002902c:	8fa40014 	lw	a0,20(sp)
80029030:	afa20018 	sw	v0,24(sp)
80029034:	0c00949b 	jal	8002526c <_ZN4core5alloc6layout6Layout5align17h1bc961b149ce744fE>
80029038:	00000000 	nop
8002903c:	8fa40018 	lw	a0,24(sp)
80029040:	00402825 	move	a1,v0
80029044:	0c00d379 	jal	80034de4 <__rust_alloc_zeroed>
80029048:	00000000 	nop
}
8002904c:	8fbf0024 	lw	ra,36(sp)
80029050:	27bd0028 	addiu	sp,sp,40
80029054:	03e00008 	jr	ra
80029058:	00000000 	nop

8002905c <_ZN5alloc5alloc15exchange_malloc17h9c97cc714fefd6e9E>:

/// The allocator for unique pointers.
#[cfg(all(not(no_global_oom_handling), not(test)))]
#[lang = "exchange_malloc"]
#[inline]
unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {
8002905c:	27bdffc0 	addiu	sp,sp,-64
80029060:	afbf003c 	sw	ra,60(sp)
80029064:	afa40024 	sw	a0,36(sp)
80029068:	afa50028 	sw	a1,40(sp)
    let layout = unsafe { Layout::from_size_align_unchecked(size, align) };
8002906c:	0c009482 	jal	80025208 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3d2659548699448fE>
80029070:	00000000 	nop
80029074:	00402825 	move	a1,v0
80029078:	00603025 	move	a2,v1
8002907c:	00a01025 	move	v0,a1
80029080:	afa20014 	sw	v0,20(sp)
80029084:	00c01825 	move	v1,a2
80029088:	afa30018 	sw	v1,24(sp)
8002908c:	afa5002c 	sw	a1,44(sp)
80029090:	afa60030 	sw	a2,48(sp)
    match Global.allocate(layout) {
80029094:	3c018105 	lui	at,0x8105
80029098:	2424c35c 	addiu	a0,at,-15524
8002909c:	0c00a96c 	jal	8002a5b0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h47e3fa2273581c39E>
800290a0:	00000000 	nop
800290a4:	afa2001c 	sw	v0,28(sp)
800290a8:	afa30020 	sw	v1,32(sp)
800290ac:	8fa1001c 	lw	at,28(sp)
800290b0:	1020000d 	beqz	at,800290e8 <_ZN5alloc5alloc15exchange_malloc17h9c97cc714fefd6e9E+0x8c>
800290b4:	00000000 	nop
800290b8:	0800a430 	j	800290c0 <_ZN5alloc5alloc15exchange_malloc17h9c97cc714fefd6e9E+0x64>
800290bc:	00000000 	nop
        Ok(ptr) => ptr.as_mut_ptr(),
800290c0:	8fa4001c 	lw	a0,28(sp)
800290c4:	8fa50020 	lw	a1,32(sp)
800290c8:	afa40034 	sw	a0,52(sp)
800290cc:	afa50038 	sw	a1,56(sp)
800290d0:	0c00dd99 	jal	80037664 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h334546e067f56e32E>
800290d4:	00000000 	nop
        Err(_) => handle_alloc_error(layout),
    }
}
800290d8:	8fbf003c 	lw	ra,60(sp)
800290dc:	27bd0040 	addiu	sp,sp,64
800290e0:	03e00008 	jr	ra
800290e4:	00000000 	nop
        Err(_) => handle_alloc_error(layout),
800290e8:	8fa50018 	lw	a1,24(sp)
800290ec:	8fa40014 	lw	a0,20(sp)
800290f0:	0c00e33c 	jal	80038cf0 <_ZN5alloc5alloc18handle_alloc_error17h19617bae871f3d42E>
800290f4:	00000000 	nop

800290f8 <_ZN5alloc5alloc5alloc17h84416cd4d0d0edd5E>:
pub unsafe fn alloc(layout: Layout) -> *mut u8 {
800290f8:	27bdffd8 	addiu	sp,sp,-40
800290fc:	afbf0024 	sw	ra,36(sp)
80029100:	afa4001c 	sw	a0,28(sp)
80029104:	afa50020 	sw	a1,32(sp)
        core::ptr::read_volatile(&__rust_no_alloc_shim_is_unstable);
80029108:	3c018105 	lui	at,0x8105
8002910c:	2424b0d0 	addiu	a0,at,-20272
80029110:	0c00dc9b 	jal	8003726c <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E>
80029114:	00000000 	nop
80029118:	27a4001c 	addiu	a0,sp,28
8002911c:	afa40014 	sw	a0,20(sp)
        __rust_alloc(layout.size(), layout.align())
80029120:	0c009495 	jal	80025254 <_ZN4core5alloc6layout6Layout4size17h270752b9ab6d7566E>
80029124:	00000000 	nop
80029128:	8fa40014 	lw	a0,20(sp)
8002912c:	afa20018 	sw	v0,24(sp)
80029130:	0c00949b 	jal	8002526c <_ZN4core5alloc6layout6Layout5align17h1bc961b149ce744fE>
80029134:	00000000 	nop
80029138:	8fa40018 	lw	a0,24(sp)
8002913c:	00402825 	move	a1,v0
80029140:	0c00d332 	jal	80034cc8 <__rust_alloc>
80029144:	00000000 	nop
}
80029148:	8fbf0024 	lw	ra,36(sp)
8002914c:	27bd0028 	addiu	sp,sp,40
80029150:	03e00008 	jr	ra
80029154:	00000000 	nop

80029158 <_ZN5alloc5alloc6Global10alloc_impl17hcfc800e0c918eb89E>:
    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {
80029158:	27bdffb8 	addiu	sp,sp,-72
8002915c:	afbf0044 	sw	ra,68(sp)
80029160:	00e00825 	move	at,a3
80029164:	afa10010 	sw	at,16(sp)
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
80029168:	afa5001c 	sw	a1,28(sp)
8002916c:	afa60020 	sw	a2,32(sp)
80029170:	afa40034 	sw	a0,52(sp)
80029174:	a3a7003b 	sb	a3,59(sp)
80029178:	27a4001c 	addiu	a0,sp,28
        match layout.size() {
8002917c:	0c009495 	jal	80025254 <_ZN4core5alloc6layout6Layout4size17h270752b9ab6d7566E>
80029180:	00000000 	nop
80029184:	00400825 	move	at,v0
80029188:	afa10014 	sw	at,20(sp)
8002918c:	afa2003c 	sw	v0,60(sp)
80029190:	1440000e 	bnez	v0,800291cc <_ZN5alloc5alloc6Global10alloc_impl17hcfc800e0c918eb89E+0x74>
80029194:	00000000 	nop
80029198:	0800a468 	j	800291a0 <_ZN5alloc5alloc6Global10alloc_impl17hcfc800e0c918eb89E+0x48>
8002919c:	00000000 	nop
800291a0:	27a4001c 	addiu	a0,sp,28
            0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
800291a4:	0c009537 	jal	800254dc <_ZN4core5alloc6layout6Layout8dangling17hcd77505cee644f2cE>
800291a8:	00000000 	nop
800291ac:	00402025 	move	a0,v0
800291b0:	24050000 	li	a1,0
800291b4:	0c00ddae 	jal	800376b8 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h25684dcbb1a3276fE>
800291b8:	00000000 	nop
800291bc:	afa20024 	sw	v0,36(sp)
800291c0:	afa30028 	sw	v1,40(sp)
800291c4:	0800a479 	j	800291e4 <_ZN5alloc5alloc6Global10alloc_impl17hcfc800e0c918eb89E+0x8c>
800291c8:	00000000 	nop
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
800291cc:	8fa10010 	lw	at,16(sp)
800291d0:	30210001 	andi	at,at,0x1
800291d4:	14200010 	bnez	at,80029218 <_ZN5alloc5alloc6Global10alloc_impl17hcfc800e0c918eb89E+0xc0>
800291d8:	00000000 	nop
800291dc:	0800a47f 	j	800291fc <_ZN5alloc5alloc6Global10alloc_impl17hcfc800e0c918eb89E+0xa4>
800291e0:	00000000 	nop
    }
800291e4:	8fa20024 	lw	v0,36(sp)
800291e8:	8fa30028 	lw	v1,40(sp)
800291ec:	8fbf0044 	lw	ra,68(sp)
800291f0:	27bd0048 	addiu	sp,sp,72
800291f4:	03e00008 	jr	ra
800291f8:	00000000 	nop
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
800291fc:	8fa4001c 	lw	a0,28(sp)
80029200:	8fa50020 	lw	a1,32(sp)
80029204:	0c00a43e 	jal	800290f8 <_ZN5alloc5alloc5alloc17h84416cd4d0d0edd5E>
80029208:	00000000 	nop
8002920c:	afa2002c 	sw	v0,44(sp)
80029210:	0800a48d 	j	80029234 <_ZN5alloc5alloc6Global10alloc_impl17hcfc800e0c918eb89E+0xdc>
80029214:	00000000 	nop
80029218:	8fa4001c 	lw	a0,28(sp)
8002921c:	8fa50020 	lw	a1,32(sp)
80029220:	0c00a403 	jal	8002900c <_ZN5alloc5alloc12alloc_zeroed17h131171c86eca49a7E>
80029224:	00000000 	nop
80029228:	afa2002c 	sw	v0,44(sp)
8002922c:	0800a48d 	j	80029234 <_ZN5alloc5alloc6Global10alloc_impl17hcfc800e0c918eb89E+0xdc>
80029230:	00000000 	nop
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
80029234:	8fa4002c 	lw	a0,44(sp)
80029238:	0c00dd81 	jal	80037604 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E>
8002923c:	00000000 	nop
80029240:	00402025 	move	a0,v0
80029244:	0c00ddef 	jal	800377bc <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE>
80029248:	00000000 	nop
8002924c:	00402025 	move	a0,v0
80029250:	0c00dfd8 	jal	80037f60 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE>
80029254:	00000000 	nop
80029258:	afa20030 	sw	v0,48(sp)
8002925c:	8fa10030 	lw	at,48(sp)
80029260:	1020000c 	beqz	at,80029294 <_ZN5alloc5alloc6Global10alloc_impl17hcfc800e0c918eb89E+0x13c>
80029264:	00000000 	nop
80029268:	0800a49c 	j	80029270 <_ZN5alloc5alloc6Global10alloc_impl17hcfc800e0c918eb89E+0x118>
8002926c:	00000000 	nop
80029270:	8fa50014 	lw	a1,20(sp)
80029274:	8fa40030 	lw	a0,48(sp)
80029278:	afa40040 	sw	a0,64(sp)
                Ok(NonNull::slice_from_raw_parts(ptr, size))
8002927c:	0c00ddae 	jal	800376b8 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h25684dcbb1a3276fE>
80029280:	00000000 	nop
80029284:	afa20024 	sw	v0,36(sp)
80029288:	afa30028 	sw	v1,40(sp)
            },
8002928c:	0800a479 	j	800291e4 <_ZN5alloc5alloc6Global10alloc_impl17hcfc800e0c918eb89E+0x8c>
80029290:	00000000 	nop
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
80029294:	3c018105 	lui	at,0x8105
80029298:	2424cfa0 	addiu	a0,at,-12384
8002929c:	0c00db4a 	jal	80036d28 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hb6ff685e17a0e3feE>
800292a0:	00000000 	nop
800292a4:	afa20024 	sw	v0,36(sp)
800292a8:	afa30028 	sw	v1,40(sp)
800292ac:	0800a479 	j	800291e4 <_ZN5alloc5alloc6Global10alloc_impl17hcfc800e0c918eb89E+0x8c>
800292b0:	00000000 	nop

800292b4 <_ZN5alloc5alloc7dealloc17hb317e1dc93fc0a61E>:
pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {
800292b4:	27bdffd0 	addiu	sp,sp,-48
800292b8:	afbf002c 	sw	ra,44(sp)
800292bc:	afa40018 	sw	a0,24(sp)
800292c0:	afa50020 	sw	a1,32(sp)
800292c4:	afa60024 	sw	a2,36(sp)
800292c8:	afa40028 	sw	a0,40(sp)
800292cc:	27a40020 	addiu	a0,sp,32
800292d0:	afa40014 	sw	a0,20(sp)
    unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
800292d4:	0c009495 	jal	80025254 <_ZN4core5alloc6layout6Layout4size17h270752b9ab6d7566E>
800292d8:	00000000 	nop
800292dc:	8fa40014 	lw	a0,20(sp)
800292e0:	afa2001c 	sw	v0,28(sp)
800292e4:	0c00949b 	jal	8002526c <_ZN4core5alloc6layout6Layout5align17h1bc961b149ce744fE>
800292e8:	00000000 	nop
800292ec:	8fa40018 	lw	a0,24(sp)
800292f0:	8fa5001c 	lw	a1,28(sp)
800292f4:	00403025 	move	a2,v0
800292f8:	0c00d342 	jal	80034d08 <__rust_dealloc>
800292fc:	00000000 	nop
}
80029300:	8fbf002c 	lw	ra,44(sp)
80029304:	27bd0030 	addiu	sp,sp,48
80029308:	03e00008 	jr	ra
8002930c:	00000000 	nop

80029310 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17hb0e8d8b53931c032E>:
    /// ```
    ///
    /// [memory layout]: self#memory-layout
    #[unstable(feature = "allocator_api", issue = "32838")]
    #[inline]
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
80029310:	27bdffc0 	addiu	sp,sp,-64
80029314:	afbf003c 	sw	ra,60(sp)
80029318:	afa40020 	sw	a0,32(sp)
8002931c:	afa40030 	sw	a0,48(sp)
    #[must_use = "if you don't need the wrapper, you can use `mem::forget` instead"]
    #[stable(feature = "manually_drop", since = "1.20.0")]
    #[rustc_const_stable(feature = "const_manually_drop", since = "1.32.0")]
    #[inline(always)]
    pub const fn new(value: T) -> ManuallyDrop<T> {
        ManuallyDrop { value }
80029320:	afa4002c 	sw	a0,44(sp)
    }
80029324:	8fa1002c 	lw	at,44(sp)
        let mut b = mem::ManuallyDrop::new(b);
80029328:	afa1001c 	sw	at,28(sp)
8002932c:	27a1001c 	addiu	at,sp,28
80029330:	afa10038 	sw	at,56(sp)
        // We carefully get the raw pointer out in a way that Miri's aliasing model understands what
        // is happening: using the primitive "deref" of `Box`.
        let ptr = addr_of_mut!(**b);
80029334:	8fa2001c 	lw	v0,28(sp)
80029338:	afa20014 	sw	v0,20(sp)
8002933c:	afa20028 	sw	v0,40(sp)
80029340:	afa10034 	sw	at,52(sp)
        let alloc = unsafe { ptr::read(&b.1) };
80029344:	24240004 	addiu	a0,at,4
80029348:	0c00dcc6 	jal	80037318 <_ZN4core3ptr4read17h0aafdd8ed9711880E>
8002934c:	00000000 	nop
80029350:	8fa10014 	lw	at,20(sp)
        (ptr, alloc)
80029354:	afa10018 	sw	at,24(sp)
    }
80029358:	8fa20018 	lw	v0,24(sp)
8002935c:	8fbf003c 	lw	ra,60(sp)
80029360:	27bd0040 	addiu	sp,sp,64
80029364:	03e00008 	jr	ra
80029368:	00000000 	nop

8002936c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h2fd91475cbeaa19bE>:
    /// static_ref[0] = 4;
    /// assert_eq!(*static_ref, [4, 2, 3]);
    /// ```
    #[stable(feature = "box_leak", since = "1.26.0")]
    #[inline]
    pub fn leak<'a>(b: Self) -> &'a mut T
8002936c:	27bdffe8 	addiu	sp,sp,-24
80029370:	afbf0014 	sw	ra,20(sp)
80029374:	afa40010 	sw	a0,16(sp)
    where
        A: 'a,
    {
        unsafe { &mut *Box::into_raw(b) }
80029378:	0c00a4e4 	jal	80029390 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h5feb8cabe578c354E>
8002937c:	00000000 	nop
    }
80029380:	8fbf0014 	lw	ra,20(sp)
80029384:	27bd0018 	addiu	sp,sp,24
80029388:	03e00008 	jr	ra
8002938c:	00000000 	nop

80029390 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h5feb8cabe578c354E>:
    pub fn into_raw(b: Self) -> *mut T {
80029390:	27bdffe8 	addiu	sp,sp,-24
80029394:	afbf0014 	sw	ra,20(sp)
80029398:	afa40010 	sw	a0,16(sp)
        Self::into_raw_with_allocator(b).0
8002939c:	0c00a4c4 	jal	80029310 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17hb0e8d8b53931c032E>
800293a0:	00000000 	nop
    }
800293a4:	8fbf0014 	lw	ra,20(sp)
800293a8:	27bd0018 	addiu	sp,sp,24
800293ac:	03e00008 	jr	ra
800293b0:	00000000 	nop

800293b4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h002f4768f944ce89E>:
    /// Returns a shared reference to the allocator backing this `RawVec`.
    pub fn allocator(&self) -> &A {
        &self.alloc
    }

    fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
800293b4:	27bdffb0 	addiu	sp,sp,-80
800293b8:	afbf004c 	sw	ra,76(sp)
800293bc:	afa50018 	sw	a1,24(sp)
800293c0:	afa4001c 	sw	a0,28(sp)
800293c4:	afa40020 	sw	a0,32(sp)
800293c8:	afa50030 	sw	a1,48(sp)
        if T::IS_ZST || self.cap.0 == 0 {
800293cc:	0800a4f5 	j	800293d4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h002f4768f944ce89E+0x20>
800293d0:	00000000 	nop
800293d4:	8fa10018 	lw	at,24(sp)
800293d8:	8c210000 	lw	at,0(at)
800293dc:	14200007 	bnez	at,800293fc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h002f4768f944ce89E+0x48>
800293e0:	00000000 	nop
800293e4:	0800a4fb 	j	800293ec <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h002f4768f944ce89E+0x38>
800293e8:	00000000 	nop
            None
800293ec:	8fa1001c 	lw	at,28(sp)
800293f0:	ac200004 	sw	zero,4(at)
        if T::IS_ZST || self.cap.0 == 0 {
800293f4:	0800a525 	j	80029494 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h002f4768f944ce89E+0xe0>
800293f8:	00000000 	nop
800293fc:	8fa10018 	lw	at,24(sp)
80029400:	24050004 	li	a1,4
            // and could hypothetically handle differences between stride and size, but this memory
            // has already been allocated so we know it can't overflow and currently Rust does not
            // support such types. So we can do better by skipping some checks and avoid an unwrap.
            const { assert!(mem::size_of::<T>() % mem::align_of::<T>() == 0) };
            unsafe {
                let align = mem::align_of::<T>();
80029404:	afa50034 	sw	a1,52(sp)
                let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
80029408:	8c210000 	lw	at,0(at)
8002940c:	afa50044 	sw	a1,68(sp)
80029410:	afa10048 	sw	at,72(sp)
80029414:	00012080 	sll	a0,at,0x2
80029418:	afa40038 	sw	a0,56(sp)
                let layout = Layout::from_size_align_unchecked(size, align);
8002941c:	0c009482 	jal	80025208 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3d2659548699448fE>
80029420:	00000000 	nop
80029424:	8fa10018 	lw	at,24(sp)
80029428:	afa20010 	sw	v0,16(sp)
8002942c:	afa30014 	sw	v1,20(sp)
80029430:	afa2003c 	sw	v0,60(sp)
80029434:	afa30040 	sw	v1,64(sp)
                Some((self.ptr.cast().into(), layout))
80029438:	8c240004 	lw	a0,4(at)
8002943c:	0c008b99 	jal	80022e64 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hda8456c8eaa83cb6E>
80029440:	00000000 	nop
80029444:	00402025 	move	a0,v0
80029448:	3c018105 	lui	at,0x8105
8002944c:	2425d020 	addiu	a1,at,-12256
80029450:	0c00df41 	jal	80037d04 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hd5655c75390c7c35E>
80029454:	00000000 	nop
80029458:	8fa10010 	lw	at,16(sp)
8002945c:	8fa30014 	lw	v1,20(sp)
80029460:	00402025 	move	a0,v0
80029464:	8fa2001c 	lw	v0,28(sp)
80029468:	afa40024 	sw	a0,36(sp)
8002946c:	afa10028 	sw	at,40(sp)
80029470:	afa3002c 	sw	v1,44(sp)
80029474:	8fa1002c 	lw	at,44(sp)
80029478:	ac410008 	sw	at,8(v0)
8002947c:	8fa10028 	lw	at,40(sp)
80029480:	ac410004 	sw	at,4(v0)
80029484:	8fa10024 	lw	at,36(sp)
80029488:	ac410000 	sw	at,0(v0)
        if T::IS_ZST || self.cap.0 == 0 {
8002948c:	0800a525 	j	80029494 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h002f4768f944ce89E+0xe0>
80029490:	00000000 	nop
            }
        }
    }
80029494:	8fa20020 	lw	v0,32(sp)
80029498:	8fbf004c 	lw	ra,76(sp)
8002949c:	27bd0050 	addiu	sp,sp,80
800294a0:	03e00008 	jr	ra
800294a4:	00000000 	nop

800294a8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h1c76a0a2f758789cE>:
    fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
800294a8:	27bdffb0 	addiu	sp,sp,-80
800294ac:	afbf004c 	sw	ra,76(sp)
800294b0:	afa50018 	sw	a1,24(sp)
800294b4:	afa4001c 	sw	a0,28(sp)
800294b8:	afa40020 	sw	a0,32(sp)
800294bc:	afa50030 	sw	a1,48(sp)
        if T::IS_ZST || self.cap.0 == 0 {
800294c0:	0800a532 	j	800294c8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h1c76a0a2f758789cE+0x20>
800294c4:	00000000 	nop
800294c8:	8fa10018 	lw	at,24(sp)
800294cc:	8c210000 	lw	at,0(at)
800294d0:	14200007 	bnez	at,800294f0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h1c76a0a2f758789cE+0x48>
800294d4:	00000000 	nop
800294d8:	0800a538 	j	800294e0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h1c76a0a2f758789cE+0x38>
800294dc:	00000000 	nop
            None
800294e0:	8fa1001c 	lw	at,28(sp)
800294e4:	ac200004 	sw	zero,4(at)
        if T::IS_ZST || self.cap.0 == 0 {
800294e8:	0800a563 	j	8002958c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h1c76a0a2f758789cE+0xe4>
800294ec:	00000000 	nop
800294f0:	8fa10018 	lw	at,24(sp)
800294f4:	24050004 	li	a1,4
                let align = mem::align_of::<T>();
800294f8:	afa50034 	sw	a1,52(sp)
                let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
800294fc:	8c210000 	lw	at,0(at)
80029500:	24020020 	li	v0,32
80029504:	afa20044 	sw	v0,68(sp)
80029508:	afa10048 	sw	at,72(sp)
8002950c:	00012140 	sll	a0,at,0x5
80029510:	afa40038 	sw	a0,56(sp)
                let layout = Layout::from_size_align_unchecked(size, align);
80029514:	0c009482 	jal	80025208 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3d2659548699448fE>
80029518:	00000000 	nop
8002951c:	8fa10018 	lw	at,24(sp)
80029520:	afa20010 	sw	v0,16(sp)
80029524:	afa30014 	sw	v1,20(sp)
80029528:	afa2003c 	sw	v0,60(sp)
8002952c:	afa30040 	sw	v1,64(sp)
                Some((self.ptr.cast().into(), layout))
80029530:	8c240004 	lw	a0,4(at)
80029534:	0c008b78 	jal	80022de0 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h90757a3db4a88b8fE>
80029538:	00000000 	nop
8002953c:	00402025 	move	a0,v0
80029540:	3c018105 	lui	at,0x8105
80029544:	2425d020 	addiu	a1,at,-12256
80029548:	0c00df41 	jal	80037d04 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hd5655c75390c7c35E>
8002954c:	00000000 	nop
80029550:	8fa10010 	lw	at,16(sp)
80029554:	8fa30014 	lw	v1,20(sp)
80029558:	00402025 	move	a0,v0
8002955c:	8fa2001c 	lw	v0,28(sp)
80029560:	afa40024 	sw	a0,36(sp)
80029564:	afa10028 	sw	at,40(sp)
80029568:	afa3002c 	sw	v1,44(sp)
8002956c:	8fa1002c 	lw	at,44(sp)
80029570:	ac410008 	sw	at,8(v0)
80029574:	8fa10028 	lw	at,40(sp)
80029578:	ac410004 	sw	at,4(v0)
8002957c:	8fa10024 	lw	at,36(sp)
80029580:	ac410000 	sw	at,0(v0)
        if T::IS_ZST || self.cap.0 == 0 {
80029584:	0800a563 	j	8002958c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h1c76a0a2f758789cE+0xe4>
80029588:	00000000 	nop
    }
8002958c:	8fa20020 	lw	v0,32(sp)
80029590:	8fbf004c 	lw	ra,76(sp)
80029594:	27bd0050 	addiu	sp,sp,80
80029598:	03e00008 	jr	ra
8002959c:	00000000 	nop

800295a0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h789acbee032259d8E>:
    fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
800295a0:	27bdffb0 	addiu	sp,sp,-80
800295a4:	afbf004c 	sw	ra,76(sp)
800295a8:	afa50018 	sw	a1,24(sp)
800295ac:	afa4001c 	sw	a0,28(sp)
800295b0:	afa40020 	sw	a0,32(sp)
800295b4:	afa50030 	sw	a1,48(sp)
        if T::IS_ZST || self.cap.0 == 0 {
800295b8:	0800a570 	j	800295c0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h789acbee032259d8E+0x20>
800295bc:	00000000 	nop
800295c0:	8fa10018 	lw	at,24(sp)
800295c4:	8c210000 	lw	at,0(at)
800295c8:	14200007 	bnez	at,800295e8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h789acbee032259d8E+0x48>
800295cc:	00000000 	nop
800295d0:	0800a576 	j	800295d8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h789acbee032259d8E+0x38>
800295d4:	00000000 	nop
            None
800295d8:	8fa1001c 	lw	at,28(sp)
800295dc:	ac200004 	sw	zero,4(at)
        if T::IS_ZST || self.cap.0 == 0 {
800295e0:	0800a5a3 	j	8002968c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h789acbee032259d8E+0xec>
800295e4:	00000000 	nop
800295e8:	8fa10018 	lw	at,24(sp)
800295ec:	24050004 	li	a1,4
                let align = mem::align_of::<T>();
800295f0:	afa50034 	sw	a1,52(sp)
                let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
800295f4:	8c210000 	lw	at,0(at)
800295f8:	2402000c 	li	v0,12
800295fc:	afa20044 	sw	v0,68(sp)
80029600:	afa10048 	sw	at,72(sp)
80029604:	00011080 	sll	v0,at,0x2
80029608:	000108c0 	sll	at,at,0x3
8002960c:	00222021 	addu	a0,at,v0
80029610:	afa40038 	sw	a0,56(sp)
                let layout = Layout::from_size_align_unchecked(size, align);
80029614:	0c009482 	jal	80025208 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3d2659548699448fE>
80029618:	00000000 	nop
8002961c:	8fa10018 	lw	at,24(sp)
80029620:	afa20010 	sw	v0,16(sp)
80029624:	afa30014 	sw	v1,20(sp)
80029628:	afa2003c 	sw	v0,60(sp)
8002962c:	afa30040 	sw	v1,64(sp)
                Some((self.ptr.cast().into(), layout))
80029630:	8c240004 	lw	a0,4(at)
80029634:	0c008b83 	jal	80022e0c <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17ha231a7e5ea593e4fE>
80029638:	00000000 	nop
8002963c:	00402025 	move	a0,v0
80029640:	3c018105 	lui	at,0x8105
80029644:	2425d020 	addiu	a1,at,-12256
80029648:	0c00df41 	jal	80037d04 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hd5655c75390c7c35E>
8002964c:	00000000 	nop
80029650:	8fa10010 	lw	at,16(sp)
80029654:	8fa30014 	lw	v1,20(sp)
80029658:	00402025 	move	a0,v0
8002965c:	8fa2001c 	lw	v0,28(sp)
80029660:	afa40024 	sw	a0,36(sp)
80029664:	afa10028 	sw	at,40(sp)
80029668:	afa3002c 	sw	v1,44(sp)
8002966c:	8fa1002c 	lw	at,44(sp)
80029670:	ac410008 	sw	at,8(v0)
80029674:	8fa10028 	lw	at,40(sp)
80029678:	ac410004 	sw	at,4(v0)
8002967c:	8fa10024 	lw	at,36(sp)
80029680:	ac410000 	sw	at,0(v0)
        if T::IS_ZST || self.cap.0 == 0 {
80029684:	0800a5a3 	j	8002968c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h789acbee032259d8E+0xec>
80029688:	00000000 	nop
    }
8002968c:	8fa20020 	lw	v0,32(sp)
80029690:	8fbf004c 	lw	ra,76(sp)
80029694:	27bd0050 	addiu	sp,sp,80
80029698:	03e00008 	jr	ra
8002969c:	00000000 	nop

800296a0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hadeffd32dff95350E>:
    fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
800296a0:	27bdffb0 	addiu	sp,sp,-80
800296a4:	afbf004c 	sw	ra,76(sp)
800296a8:	afa50018 	sw	a1,24(sp)
800296ac:	afa4001c 	sw	a0,28(sp)
800296b0:	afa40020 	sw	a0,32(sp)
800296b4:	afa50030 	sw	a1,48(sp)
        if T::IS_ZST || self.cap.0 == 0 {
800296b8:	0800a5b0 	j	800296c0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hadeffd32dff95350E+0x20>
800296bc:	00000000 	nop
800296c0:	8fa10018 	lw	at,24(sp)
800296c4:	8c210000 	lw	at,0(at)
800296c8:	14200007 	bnez	at,800296e8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hadeffd32dff95350E+0x48>
800296cc:	00000000 	nop
800296d0:	0800a5b6 	j	800296d8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hadeffd32dff95350E+0x38>
800296d4:	00000000 	nop
            None
800296d8:	8fa1001c 	lw	at,28(sp)
800296dc:	ac200004 	sw	zero,4(at)
        if T::IS_ZST || self.cap.0 == 0 {
800296e0:	0800a5e5 	j	80029794 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hadeffd32dff95350E+0xf4>
800296e4:	00000000 	nop
800296e8:	8fa10018 	lw	at,24(sp)
800296ec:	24050004 	li	a1,4
                let align = mem::align_of::<T>();
800296f0:	afa50034 	sw	a1,52(sp)
                let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
800296f4:	8c210000 	lw	at,0(at)
800296f8:	240200dc 	li	v0,220
800296fc:	afa20044 	sw	v0,68(sp)
80029700:	afa10048 	sw	at,72(sp)
80029704:	00011880 	sll	v1,at,0x2
80029708:	00011140 	sll	v0,at,0x5
8002970c:	00431021 	addu	v0,v0,v1
80029710:	00010a00 	sll	at,at,0x8
80029714:	00222023 	subu	a0,at,v0
80029718:	afa40038 	sw	a0,56(sp)
                let layout = Layout::from_size_align_unchecked(size, align);
8002971c:	0c009482 	jal	80025208 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3d2659548699448fE>
80029720:	00000000 	nop
80029724:	8fa10018 	lw	at,24(sp)
80029728:	afa20010 	sw	v0,16(sp)
8002972c:	afa30014 	sw	v1,20(sp)
80029730:	afa2003c 	sw	v0,60(sp)
80029734:	afa30040 	sw	v1,64(sp)
                Some((self.ptr.cast().into(), layout))
80029738:	8c240004 	lw	a0,4(at)
8002973c:	0c008b62 	jal	80022d88 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h1fce356a6ca5d3bbE>
80029740:	00000000 	nop
80029744:	00402025 	move	a0,v0
80029748:	3c018105 	lui	at,0x8105
8002974c:	2425d020 	addiu	a1,at,-12256
80029750:	0c00df41 	jal	80037d04 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hd5655c75390c7c35E>
80029754:	00000000 	nop
80029758:	8fa10010 	lw	at,16(sp)
8002975c:	8fa30014 	lw	v1,20(sp)
80029760:	00402025 	move	a0,v0
80029764:	8fa2001c 	lw	v0,28(sp)
80029768:	afa40024 	sw	a0,36(sp)
8002976c:	afa10028 	sw	at,40(sp)
80029770:	afa3002c 	sw	v1,44(sp)
80029774:	8fa1002c 	lw	at,44(sp)
80029778:	ac410008 	sw	at,8(v0)
8002977c:	8fa10028 	lw	at,40(sp)
80029780:	ac410004 	sw	at,4(v0)
80029784:	8fa10024 	lw	at,36(sp)
80029788:	ac410000 	sw	at,0(v0)
        if T::IS_ZST || self.cap.0 == 0 {
8002978c:	0800a5e5 	j	80029794 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hadeffd32dff95350E+0xf4>
80029790:	00000000 	nop
    }
80029794:	8fa20020 	lw	v0,32(sp)
80029798:	8fbf004c 	lw	ra,76(sp)
8002979c:	27bd0050 	addiu	sp,sp,80
800297a0:	03e00008 	jr	ra
800297a4:	00000000 	nop

800297a8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h0cc24ecc084feeaeE>:
    // its contents to be statically computable as possible, to make the
    // generated code run faster. Therefore, this method is carefully written
    // so that all of the code that depends on `T` is within it, while as much
    // of the code that doesn't depend on `T` as possible is in functions that
    // are non-generic over `T`.
    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
800297a8:	27bdff30 	addiu	sp,sp,-208
800297ac:	afbf00cc 	sw	ra,204(sp)
800297b0:	afa6003c 	sw	a2,60(sp)
800297b4:	afa50040 	sw	a1,64(sp)
800297b8:	afa40044 	sw	a0,68(sp)
800297bc:	afa40094 	sw	a0,148(sp)
800297c0:	afa50098 	sw	a1,152(sp)
800297c4:	afa6009c 	sw	a2,156(sp)
        // This is ensured by the calling contexts.
        debug_assert!(additional > 0);
800297c8:	0800a5f4 	j	800297d0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h0cc24ecc084feeaeE+0x28>
800297cc:	00000000 	nop
800297d0:	8fa1003c 	lw	at,60(sp)
800297d4:	1420000a 	bnez	at,80029800 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h0cc24ecc084feeaeE+0x58>
800297d8:	00000000 	nop
800297dc:	0800a5f9 	j	800297e4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h0cc24ecc084feeaeE+0x3c>
800297e0:	00000000 	nop
800297e4:	3c018105 	lui	at,0x8105
800297e8:	2424d030 	addiu	a0,at,-12240
800297ec:	3c018105 	lui	at,0x8105
800297f0:	2426d0b0 	addiu	a2,at,-12112
800297f4:	24050020 	li	a1,32
800297f8:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
800297fc:	00000000 	nop

        if T::IS_ZST {
80029800:	0800a602 	j	80029808 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h0cc24ecc084feeaeE+0x60>
80029804:	00000000 	nop
            // 0, getting to here necessarily means the `RawVec` is overfull.
            return Err(CapacityOverflow.into());
        }

        // Nothing we can really do about these checks, sadly.
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80029808:	8fa5003c 	lw	a1,60(sp)
8002980c:	8fa40040 	lw	a0,64(sp)
80029810:	0c0084d0 	jal	80021340 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h19af5c025cf15bd5E>
80029814:	00000000 	nop
80029818:	00402825 	move	a1,v0
8002981c:	00603025 	move	a2,v1
80029820:	afa00068 	sw	zero,104(sp)
80029824:	8fa70068 	lw	a3,104(sp)
80029828:	8fa1006c 	lw	at,108(sp)
8002982c:	03a01025 	move	v0,sp
80029830:	ac410010 	sw	at,16(v0)
80029834:	27a40060 	addiu	a0,sp,96
80029838:	afa40038 	sw	a0,56(sp)
8002983c:	0c00de10 	jal	80037840 <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E>
80029840:	00000000 	nop
80029844:	8fa50038 	lw	a1,56(sp)
80029848:	27a40058 	addiu	a0,sp,88
8002984c:	0c00df91 	jal	80037e44 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E>
80029850:	00000000 	nop
80029854:	8fa10058 	lw	at,88(sp)
80029858:	3c028000 	lui	v0,0x8000
8002985c:	34420001 	ori	v0,v0,0x1
80029860:	1422000f 	bne	at,v0,800298a0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h0cc24ecc084feeaeE+0xf8>
80029864:	00000000 	nop
80029868:	0800a61c 	j	80029870 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h0cc24ecc084feeaeE+0xc8>
8002986c:	00000000 	nop
80029870:	8fa10044 	lw	at,68(sp)
80029874:	8fa2005c 	lw	v0,92(sp)
80029878:	afa20030 	sw	v0,48(sp)
8002987c:	afa200a0 	sw	v0,160(sp)

        // This guarantees exponential growth. The doubling cannot overflow
        // because `cap <= isize::MAX` and the type of `cap` is `usize`.
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029880:	8c220000 	lw	v0,0(at)
80029884:	00420821 	addu	at,v0,v0
80029888:	afa10034 	sw	at,52(sp)
8002988c:	0022082b 	sltu	at,at,v0
80029890:	1420003b 	bnez	at,80029980 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h0cc24ecc084feeaeE+0x1d8>
80029894:	00000000 	nop
80029898:	0800a634 	j	800298d0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h0cc24ecc084feeaeE+0x128>
8002989c:	00000000 	nop
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
800298a0:	8fa40058 	lw	a0,88(sp)
800298a4:	8fa5005c 	lw	a1,92(sp)
800298a8:	afa400c4 	sw	a0,196(sp)
800298ac:	afa500c8 	sw	a1,200(sp)
800298b0:	3c018105 	lui	at,0x8105
800298b4:	2426d0e0 	addiu	a2,at,-12064
800298b8:	0c00db27 	jal	80036c9c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h76db6800faa68b03E>
800298bc:	00000000 	nop
800298c0:	afa20048 	sw	v0,72(sp)
800298c4:	afa3004c 	sw	v1,76(sp)
800298c8:	0800a67d 	j	800299f4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h0cc24ecc084feeaeE+0x24c>
800298cc:	00000000 	nop
        let cap = cmp::max(self.cap.0 * 2, required_cap);
800298d0:	8fa50030 	lw	a1,48(sp)
800298d4:	8fa40034 	lw	a0,52(sp)
800298d8:	0c00e965 	jal	8003a594 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>
800298dc:	00000000 	nop
800298e0:	00402825 	move	a1,v0
800298e4:	afa500a4 	sw	a1,164(sp)
800298e8:	24040004 	li	a0,4
        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
800298ec:	0c00e965 	jal	8003a594 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>
800298f0:	00000000 	nop
800298f4:	00402025 	move	a0,v0
800298f8:	00801025 	move	v0,a0
800298fc:	afa2001c 	sw	v0,28(sp)
80029900:	afa400a8 	sw	a0,168(sp)

        let new_layout = Layout::array::<T>(cap);
80029904:	0c0094c3 	jal	8002530c <_ZN4core5alloc6layout6Layout5array17h7dcbab5d4b0b8936E>
80029908:	00000000 	nop
8002990c:	8fa50044 	lw	a1,68(sp)
80029910:	afa20020 	sw	v0,32(sp)
80029914:	afa30024 	sw	v1,36(sp)
80029918:	afa200ac 	sw	v0,172(sp)
8002991c:	afa300b0 	sw	v1,176(sp)
80029920:	27a40088 	addiu	a0,sp,136
80029924:	afa40028 	sw	a0,40(sp)

        // `finish_grow` is non-generic over `T`.
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80029928:	0c00a568 	jal	800295a0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h789acbee032259d8E>
8002992c:	00000000 	nop
80029930:	8fa10044 	lw	at,68(sp)
80029934:	8fa50020 	lw	a1,32(sp)
80029938:	8fa60024 	lw	a2,36(sp)
8002993c:	8fa70028 	lw	a3,40(sp)
80029940:	24210008 	addiu	at,at,8
80029944:	03a01025 	move	v0,sp
80029948:	ac410010 	sw	at,16(v0)
8002994c:	27a4007c 	addiu	a0,sp,124
80029950:	afa4002c 	sw	a0,44(sp)
80029954:	0c00e021 	jal	80038084 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E>
80029958:	00000000 	nop
8002995c:	8fa5002c 	lw	a1,44(sp)
80029960:	27a40070 	addiu	a0,sp,112
80029964:	0c00dfeb 	jal	80037fac <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E>
80029968:	00000000 	nop
8002996c:	8fa10070 	lw	at,112(sp)
80029970:	10200007 	beqz	at,80029990 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h0cc24ecc084feeaeE+0x1e8>
80029974:	00000000 	nop
80029978:	0800a671 	j	800299c4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h0cc24ecc084feeaeE+0x21c>
8002997c:	00000000 	nop
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029980:	3c018105 	lui	at,0x8105
80029984:	2424d0c0 	addiu	a0,at,-12096
80029988:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002998c:	00000000 	nop
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80029990:	8fa7001c 	lw	a3,28(sp)
80029994:	8fa40044 	lw	a0,68(sp)
80029998:	8fa50074 	lw	a1,116(sp)
8002999c:	8fa60078 	lw	a2,120(sp)
800299a0:	afa500b4 	sw	a1,180(sp)
800299a4:	afa600b8 	sw	a2,184(sp)
        // SAFETY: finish_grow would have resulted in a capacity overflow if we tried to allocate more than isize::MAX items
        unsafe { self.set_ptr_and_cap(ptr, cap) };
800299a8:	0c00a86b 	jal	8002a1ac <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17h5517a8a62ae8499aE>
800299ac:	00000000 	nop
800299b0:	3c018000 	lui	at,0x8000
800299b4:	34210001 	ori	at,at,0x1
        Ok(())
800299b8:	afa10048 	sw	at,72(sp)
    }
800299bc:	0800a67d 	j	800299f4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h0cc24ecc084feeaeE+0x24c>
800299c0:	00000000 	nop
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
800299c4:	8fa40074 	lw	a0,116(sp)
800299c8:	8fa50078 	lw	a1,120(sp)
800299cc:	afa400bc 	sw	a0,188(sp)
800299d0:	afa500c0 	sw	a1,192(sp)
800299d4:	3c018105 	lui	at,0x8105
800299d8:	2426d0d0 	addiu	a2,at,-12080
800299dc:	0c00db00 	jal	80036c00 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h491e696a56edf9eeE>
800299e0:	00000000 	nop
800299e4:	afa20048 	sw	v0,72(sp)
800299e8:	afa3004c 	sw	v1,76(sp)
800299ec:	0800a67d 	j	800299f4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h0cc24ecc084feeaeE+0x24c>
800299f0:	00000000 	nop
    }
800299f4:	8fa20048 	lw	v0,72(sp)
800299f8:	8fa3004c 	lw	v1,76(sp)
800299fc:	8fbf00cc 	lw	ra,204(sp)
80029a00:	27bd00d0 	addiu	sp,sp,208
80029a04:	03e00008 	jr	ra
80029a08:	00000000 	nop

80029a0c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1ef00eaeb5d3df16E>:
    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
80029a0c:	27bdff30 	addiu	sp,sp,-208
80029a10:	afbf00cc 	sw	ra,204(sp)
80029a14:	afa6003c 	sw	a2,60(sp)
80029a18:	afa50040 	sw	a1,64(sp)
80029a1c:	afa40044 	sw	a0,68(sp)
80029a20:	afa40094 	sw	a0,148(sp)
80029a24:	afa50098 	sw	a1,152(sp)
80029a28:	afa6009c 	sw	a2,156(sp)
        debug_assert!(additional > 0);
80029a2c:	0800a68d 	j	80029a34 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1ef00eaeb5d3df16E+0x28>
80029a30:	00000000 	nop
80029a34:	8fa1003c 	lw	at,60(sp)
80029a38:	1420000a 	bnez	at,80029a64 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1ef00eaeb5d3df16E+0x58>
80029a3c:	00000000 	nop
80029a40:	0800a692 	j	80029a48 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1ef00eaeb5d3df16E+0x3c>
80029a44:	00000000 	nop
80029a48:	3c018105 	lui	at,0x8105
80029a4c:	2424d030 	addiu	a0,at,-12240
80029a50:	3c018105 	lui	at,0x8105
80029a54:	2426d0b0 	addiu	a2,at,-12112
80029a58:	24050020 	li	a1,32
80029a5c:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80029a60:	00000000 	nop
        if T::IS_ZST {
80029a64:	0800a69b 	j	80029a6c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1ef00eaeb5d3df16E+0x60>
80029a68:	00000000 	nop
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80029a6c:	8fa5003c 	lw	a1,60(sp)
80029a70:	8fa40040 	lw	a0,64(sp)
80029a74:	0c0084d0 	jal	80021340 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h19af5c025cf15bd5E>
80029a78:	00000000 	nop
80029a7c:	00402825 	move	a1,v0
80029a80:	00603025 	move	a2,v1
80029a84:	afa00068 	sw	zero,104(sp)
80029a88:	8fa70068 	lw	a3,104(sp)
80029a8c:	8fa1006c 	lw	at,108(sp)
80029a90:	03a01025 	move	v0,sp
80029a94:	ac410010 	sw	at,16(v0)
80029a98:	27a40060 	addiu	a0,sp,96
80029a9c:	afa40038 	sw	a0,56(sp)
80029aa0:	0c00de10 	jal	80037840 <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E>
80029aa4:	00000000 	nop
80029aa8:	8fa50038 	lw	a1,56(sp)
80029aac:	27a40058 	addiu	a0,sp,88
80029ab0:	0c00df91 	jal	80037e44 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E>
80029ab4:	00000000 	nop
80029ab8:	8fa10058 	lw	at,88(sp)
80029abc:	3c028000 	lui	v0,0x8000
80029ac0:	34420001 	ori	v0,v0,0x1
80029ac4:	1422000f 	bne	at,v0,80029b04 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1ef00eaeb5d3df16E+0xf8>
80029ac8:	00000000 	nop
80029acc:	0800a6b5 	j	80029ad4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1ef00eaeb5d3df16E+0xc8>
80029ad0:	00000000 	nop
80029ad4:	8fa10044 	lw	at,68(sp)
80029ad8:	8fa2005c 	lw	v0,92(sp)
80029adc:	afa20030 	sw	v0,48(sp)
80029ae0:	afa200a0 	sw	v0,160(sp)
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029ae4:	8c220000 	lw	v0,0(at)
80029ae8:	00420821 	addu	at,v0,v0
80029aec:	afa10034 	sw	at,52(sp)
80029af0:	0022082b 	sltu	at,at,v0
80029af4:	1420003b 	bnez	at,80029be4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1ef00eaeb5d3df16E+0x1d8>
80029af8:	00000000 	nop
80029afc:	0800a6cd 	j	80029b34 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1ef00eaeb5d3df16E+0x128>
80029b00:	00000000 	nop
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80029b04:	8fa40058 	lw	a0,88(sp)
80029b08:	8fa5005c 	lw	a1,92(sp)
80029b0c:	afa400c4 	sw	a0,196(sp)
80029b10:	afa500c8 	sw	a1,200(sp)
80029b14:	3c018105 	lui	at,0x8105
80029b18:	2426d0e0 	addiu	a2,at,-12064
80029b1c:	0c00db27 	jal	80036c9c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h76db6800faa68b03E>
80029b20:	00000000 	nop
80029b24:	afa20048 	sw	v0,72(sp)
80029b28:	afa3004c 	sw	v1,76(sp)
80029b2c:	0800a716 	j	80029c58 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1ef00eaeb5d3df16E+0x24c>
80029b30:	00000000 	nop
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029b34:	8fa50030 	lw	a1,48(sp)
80029b38:	8fa40034 	lw	a0,52(sp)
80029b3c:	0c00e965 	jal	8003a594 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>
80029b40:	00000000 	nop
80029b44:	00402825 	move	a1,v0
80029b48:	afa500a4 	sw	a1,164(sp)
80029b4c:	24040004 	li	a0,4
        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
80029b50:	0c00e965 	jal	8003a594 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>
80029b54:	00000000 	nop
80029b58:	00402025 	move	a0,v0
80029b5c:	00801025 	move	v0,a0
80029b60:	afa2001c 	sw	v0,28(sp)
80029b64:	afa400a8 	sw	a0,168(sp)
        let new_layout = Layout::array::<T>(cap);
80029b68:	0c0094d2 	jal	80025348 <_ZN4core5alloc6layout6Layout5array17hd2c3220bf4bb8aecE>
80029b6c:	00000000 	nop
80029b70:	8fa50044 	lw	a1,68(sp)
80029b74:	afa20020 	sw	v0,32(sp)
80029b78:	afa30024 	sw	v1,36(sp)
80029b7c:	afa200ac 	sw	v0,172(sp)
80029b80:	afa300b0 	sw	v1,176(sp)
80029b84:	27a40088 	addiu	a0,sp,136
80029b88:	afa40028 	sw	a0,40(sp)
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80029b8c:	0c00a5a8 	jal	800296a0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hadeffd32dff95350E>
80029b90:	00000000 	nop
80029b94:	8fa10044 	lw	at,68(sp)
80029b98:	8fa50020 	lw	a1,32(sp)
80029b9c:	8fa60024 	lw	a2,36(sp)
80029ba0:	8fa70028 	lw	a3,40(sp)
80029ba4:	24210008 	addiu	at,at,8
80029ba8:	03a01025 	move	v0,sp
80029bac:	ac410010 	sw	at,16(v0)
80029bb0:	27a4007c 	addiu	a0,sp,124
80029bb4:	afa4002c 	sw	a0,44(sp)
80029bb8:	0c00e021 	jal	80038084 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E>
80029bbc:	00000000 	nop
80029bc0:	8fa5002c 	lw	a1,44(sp)
80029bc4:	27a40070 	addiu	a0,sp,112
80029bc8:	0c00dfeb 	jal	80037fac <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E>
80029bcc:	00000000 	nop
80029bd0:	8fa10070 	lw	at,112(sp)
80029bd4:	10200007 	beqz	at,80029bf4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1ef00eaeb5d3df16E+0x1e8>
80029bd8:	00000000 	nop
80029bdc:	0800a70a 	j	80029c28 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1ef00eaeb5d3df16E+0x21c>
80029be0:	00000000 	nop
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029be4:	3c018105 	lui	at,0x8105
80029be8:	2424d0c0 	addiu	a0,at,-12096
80029bec:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
80029bf0:	00000000 	nop
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80029bf4:	8fa7001c 	lw	a3,28(sp)
80029bf8:	8fa40044 	lw	a0,68(sp)
80029bfc:	8fa50074 	lw	a1,116(sp)
80029c00:	8fa60078 	lw	a2,120(sp)
80029c04:	afa500b4 	sw	a1,180(sp)
80029c08:	afa600b8 	sw	a2,184(sp)
        unsafe { self.set_ptr_and_cap(ptr, cap) };
80029c0c:	0c00a84e 	jal	8002a138 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17h4f3fe559c2aa4de9E>
80029c10:	00000000 	nop
80029c14:	3c018000 	lui	at,0x8000
80029c18:	34210001 	ori	at,at,0x1
        Ok(())
80029c1c:	afa10048 	sw	at,72(sp)
    }
80029c20:	0800a716 	j	80029c58 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1ef00eaeb5d3df16E+0x24c>
80029c24:	00000000 	nop
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80029c28:	8fa40074 	lw	a0,116(sp)
80029c2c:	8fa50078 	lw	a1,120(sp)
80029c30:	afa400bc 	sw	a0,188(sp)
80029c34:	afa500c0 	sw	a1,192(sp)
80029c38:	3c018105 	lui	at,0x8105
80029c3c:	2426d0d0 	addiu	a2,at,-12080
80029c40:	0c00db00 	jal	80036c00 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h491e696a56edf9eeE>
80029c44:	00000000 	nop
80029c48:	afa20048 	sw	v0,72(sp)
80029c4c:	afa3004c 	sw	v1,76(sp)
80029c50:	0800a716 	j	80029c58 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1ef00eaeb5d3df16E+0x24c>
80029c54:	00000000 	nop
    }
80029c58:	8fa20048 	lw	v0,72(sp)
80029c5c:	8fa3004c 	lw	v1,76(sp)
80029c60:	8fbf00cc 	lw	ra,204(sp)
80029c64:	27bd00d0 	addiu	sp,sp,208
80029c68:	03e00008 	jr	ra
80029c6c:	00000000 	nop

80029c70 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h262c13e7ee41f10cE>:
    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
80029c70:	27bdff30 	addiu	sp,sp,-208
80029c74:	afbf00cc 	sw	ra,204(sp)
80029c78:	afa6003c 	sw	a2,60(sp)
80029c7c:	afa50040 	sw	a1,64(sp)
80029c80:	afa40044 	sw	a0,68(sp)
80029c84:	afa40094 	sw	a0,148(sp)
80029c88:	afa50098 	sw	a1,152(sp)
80029c8c:	afa6009c 	sw	a2,156(sp)
        debug_assert!(additional > 0);
80029c90:	0800a726 	j	80029c98 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h262c13e7ee41f10cE+0x28>
80029c94:	00000000 	nop
80029c98:	8fa1003c 	lw	at,60(sp)
80029c9c:	1420000a 	bnez	at,80029cc8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h262c13e7ee41f10cE+0x58>
80029ca0:	00000000 	nop
80029ca4:	0800a72b 	j	80029cac <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h262c13e7ee41f10cE+0x3c>
80029ca8:	00000000 	nop
80029cac:	3c018105 	lui	at,0x8105
80029cb0:	2424d030 	addiu	a0,at,-12240
80029cb4:	3c018105 	lui	at,0x8105
80029cb8:	2426d0b0 	addiu	a2,at,-12112
80029cbc:	24050020 	li	a1,32
80029cc0:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80029cc4:	00000000 	nop
        if T::IS_ZST {
80029cc8:	0800a734 	j	80029cd0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h262c13e7ee41f10cE+0x60>
80029ccc:	00000000 	nop
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80029cd0:	8fa5003c 	lw	a1,60(sp)
80029cd4:	8fa40040 	lw	a0,64(sp)
80029cd8:	0c0084d0 	jal	80021340 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h19af5c025cf15bd5E>
80029cdc:	00000000 	nop
80029ce0:	00402825 	move	a1,v0
80029ce4:	00603025 	move	a2,v1
80029ce8:	afa00068 	sw	zero,104(sp)
80029cec:	8fa70068 	lw	a3,104(sp)
80029cf0:	8fa1006c 	lw	at,108(sp)
80029cf4:	03a01025 	move	v0,sp
80029cf8:	ac410010 	sw	at,16(v0)
80029cfc:	27a40060 	addiu	a0,sp,96
80029d00:	afa40038 	sw	a0,56(sp)
80029d04:	0c00de10 	jal	80037840 <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E>
80029d08:	00000000 	nop
80029d0c:	8fa50038 	lw	a1,56(sp)
80029d10:	27a40058 	addiu	a0,sp,88
80029d14:	0c00df91 	jal	80037e44 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E>
80029d18:	00000000 	nop
80029d1c:	8fa10058 	lw	at,88(sp)
80029d20:	3c028000 	lui	v0,0x8000
80029d24:	34420001 	ori	v0,v0,0x1
80029d28:	1422000f 	bne	at,v0,80029d68 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h262c13e7ee41f10cE+0xf8>
80029d2c:	00000000 	nop
80029d30:	0800a74e 	j	80029d38 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h262c13e7ee41f10cE+0xc8>
80029d34:	00000000 	nop
80029d38:	8fa10044 	lw	at,68(sp)
80029d3c:	8fa2005c 	lw	v0,92(sp)
80029d40:	afa20030 	sw	v0,48(sp)
80029d44:	afa200a0 	sw	v0,160(sp)
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029d48:	8c220000 	lw	v0,0(at)
80029d4c:	00420821 	addu	at,v0,v0
80029d50:	afa10034 	sw	at,52(sp)
80029d54:	0022082b 	sltu	at,at,v0
80029d58:	1420003b 	bnez	at,80029e48 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h262c13e7ee41f10cE+0x1d8>
80029d5c:	00000000 	nop
80029d60:	0800a766 	j	80029d98 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h262c13e7ee41f10cE+0x128>
80029d64:	00000000 	nop
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80029d68:	8fa40058 	lw	a0,88(sp)
80029d6c:	8fa5005c 	lw	a1,92(sp)
80029d70:	afa400c4 	sw	a0,196(sp)
80029d74:	afa500c8 	sw	a1,200(sp)
80029d78:	3c018105 	lui	at,0x8105
80029d7c:	2426d0e0 	addiu	a2,at,-12064
80029d80:	0c00db27 	jal	80036c9c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h76db6800faa68b03E>
80029d84:	00000000 	nop
80029d88:	afa20048 	sw	v0,72(sp)
80029d8c:	afa3004c 	sw	v1,76(sp)
80029d90:	0800a7af 	j	80029ebc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h262c13e7ee41f10cE+0x24c>
80029d94:	00000000 	nop
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029d98:	8fa50030 	lw	a1,48(sp)
80029d9c:	8fa40034 	lw	a0,52(sp)
80029da0:	0c00e965 	jal	8003a594 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>
80029da4:	00000000 	nop
80029da8:	00402825 	move	a1,v0
80029dac:	afa500a4 	sw	a1,164(sp)
80029db0:	24040004 	li	a0,4
        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
80029db4:	0c00e965 	jal	8003a594 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>
80029db8:	00000000 	nop
80029dbc:	00402025 	move	a0,v0
80029dc0:	00801025 	move	v0,a0
80029dc4:	afa2001c 	sw	v0,28(sp)
80029dc8:	afa400a8 	sw	a0,168(sp)
        let new_layout = Layout::array::<T>(cap);
80029dcc:	0c0094b4 	jal	800252d0 <_ZN4core5alloc6layout6Layout5array17h1e9b0c18ea3b3058E>
80029dd0:	00000000 	nop
80029dd4:	8fa50044 	lw	a1,68(sp)
80029dd8:	afa20020 	sw	v0,32(sp)
80029ddc:	afa30024 	sw	v1,36(sp)
80029de0:	afa200ac 	sw	v0,172(sp)
80029de4:	afa300b0 	sw	v1,176(sp)
80029de8:	27a40088 	addiu	a0,sp,136
80029dec:	afa40028 	sw	a0,40(sp)
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80029df0:	0c00a4ed 	jal	800293b4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h002f4768f944ce89E>
80029df4:	00000000 	nop
80029df8:	8fa10044 	lw	at,68(sp)
80029dfc:	8fa50020 	lw	a1,32(sp)
80029e00:	8fa60024 	lw	a2,36(sp)
80029e04:	8fa70028 	lw	a3,40(sp)
80029e08:	24210008 	addiu	at,at,8
80029e0c:	03a01025 	move	v0,sp
80029e10:	ac410010 	sw	at,16(v0)
80029e14:	27a4007c 	addiu	a0,sp,124
80029e18:	afa4002c 	sw	a0,44(sp)
80029e1c:	0c00e021 	jal	80038084 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E>
80029e20:	00000000 	nop
80029e24:	8fa5002c 	lw	a1,44(sp)
80029e28:	27a40070 	addiu	a0,sp,112
80029e2c:	0c00dfeb 	jal	80037fac <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E>
80029e30:	00000000 	nop
80029e34:	8fa10070 	lw	at,112(sp)
80029e38:	10200007 	beqz	at,80029e58 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h262c13e7ee41f10cE+0x1e8>
80029e3c:	00000000 	nop
80029e40:	0800a7a3 	j	80029e8c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h262c13e7ee41f10cE+0x21c>
80029e44:	00000000 	nop
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029e48:	3c018105 	lui	at,0x8105
80029e4c:	2424d0c0 	addiu	a0,at,-12096
80029e50:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
80029e54:	00000000 	nop
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80029e58:	8fa7001c 	lw	a3,28(sp)
80029e5c:	8fa40044 	lw	a0,68(sp)
80029e60:	8fa50074 	lw	a1,116(sp)
80029e64:	8fa60078 	lw	a2,120(sp)
80029e68:	afa500b4 	sw	a1,180(sp)
80029e6c:	afa600b8 	sw	a2,184(sp)
        unsafe { self.set_ptr_and_cap(ptr, cap) };
80029e70:	0c00a8a5 	jal	8002a294 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17h8cc92109efb8dd08E>
80029e74:	00000000 	nop
80029e78:	3c018000 	lui	at,0x8000
80029e7c:	34210001 	ori	at,at,0x1
        Ok(())
80029e80:	afa10048 	sw	at,72(sp)
    }
80029e84:	0800a7af 	j	80029ebc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h262c13e7ee41f10cE+0x24c>
80029e88:	00000000 	nop
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80029e8c:	8fa40074 	lw	a0,116(sp)
80029e90:	8fa50078 	lw	a1,120(sp)
80029e94:	afa400bc 	sw	a0,188(sp)
80029e98:	afa500c0 	sw	a1,192(sp)
80029e9c:	3c018105 	lui	at,0x8105
80029ea0:	2426d0d0 	addiu	a2,at,-12080
80029ea4:	0c00db00 	jal	80036c00 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h491e696a56edf9eeE>
80029ea8:	00000000 	nop
80029eac:	afa20048 	sw	v0,72(sp)
80029eb0:	afa3004c 	sw	v1,76(sp)
80029eb4:	0800a7af 	j	80029ebc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h262c13e7ee41f10cE+0x24c>
80029eb8:	00000000 	nop
    }
80029ebc:	8fa20048 	lw	v0,72(sp)
80029ec0:	8fa3004c 	lw	v1,76(sp)
80029ec4:	8fbf00cc 	lw	ra,204(sp)
80029ec8:	27bd00d0 	addiu	sp,sp,208
80029ecc:	03e00008 	jr	ra
80029ed0:	00000000 	nop

80029ed4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7bce651e41d62ac1E>:
    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
80029ed4:	27bdff30 	addiu	sp,sp,-208
80029ed8:	afbf00cc 	sw	ra,204(sp)
80029edc:	afa6003c 	sw	a2,60(sp)
80029ee0:	afa50040 	sw	a1,64(sp)
80029ee4:	afa40044 	sw	a0,68(sp)
80029ee8:	afa40094 	sw	a0,148(sp)
80029eec:	afa50098 	sw	a1,152(sp)
80029ef0:	afa6009c 	sw	a2,156(sp)
        debug_assert!(additional > 0);
80029ef4:	0800a7bf 	j	80029efc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7bce651e41d62ac1E+0x28>
80029ef8:	00000000 	nop
80029efc:	8fa1003c 	lw	at,60(sp)
80029f00:	1420000a 	bnez	at,80029f2c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7bce651e41d62ac1E+0x58>
80029f04:	00000000 	nop
80029f08:	0800a7c4 	j	80029f10 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7bce651e41d62ac1E+0x3c>
80029f0c:	00000000 	nop
80029f10:	3c018105 	lui	at,0x8105
80029f14:	2424d030 	addiu	a0,at,-12240
80029f18:	3c018105 	lui	at,0x8105
80029f1c:	2426d0b0 	addiu	a2,at,-12112
80029f20:	24050020 	li	a1,32
80029f24:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80029f28:	00000000 	nop
        if T::IS_ZST {
80029f2c:	0800a7cd 	j	80029f34 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7bce651e41d62ac1E+0x60>
80029f30:	00000000 	nop
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80029f34:	8fa5003c 	lw	a1,60(sp)
80029f38:	8fa40040 	lw	a0,64(sp)
80029f3c:	0c0084d0 	jal	80021340 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h19af5c025cf15bd5E>
80029f40:	00000000 	nop
80029f44:	00402825 	move	a1,v0
80029f48:	00603025 	move	a2,v1
80029f4c:	afa00068 	sw	zero,104(sp)
80029f50:	8fa70068 	lw	a3,104(sp)
80029f54:	8fa1006c 	lw	at,108(sp)
80029f58:	03a01025 	move	v0,sp
80029f5c:	ac410010 	sw	at,16(v0)
80029f60:	27a40060 	addiu	a0,sp,96
80029f64:	afa40038 	sw	a0,56(sp)
80029f68:	0c00de10 	jal	80037840 <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E>
80029f6c:	00000000 	nop
80029f70:	8fa50038 	lw	a1,56(sp)
80029f74:	27a40058 	addiu	a0,sp,88
80029f78:	0c00df91 	jal	80037e44 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E>
80029f7c:	00000000 	nop
80029f80:	8fa10058 	lw	at,88(sp)
80029f84:	3c028000 	lui	v0,0x8000
80029f88:	34420001 	ori	v0,v0,0x1
80029f8c:	1422000f 	bne	at,v0,80029fcc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7bce651e41d62ac1E+0xf8>
80029f90:	00000000 	nop
80029f94:	0800a7e7 	j	80029f9c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7bce651e41d62ac1E+0xc8>
80029f98:	00000000 	nop
80029f9c:	8fa10044 	lw	at,68(sp)
80029fa0:	8fa2005c 	lw	v0,92(sp)
80029fa4:	afa20030 	sw	v0,48(sp)
80029fa8:	afa200a0 	sw	v0,160(sp)
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029fac:	8c220000 	lw	v0,0(at)
80029fb0:	00420821 	addu	at,v0,v0
80029fb4:	afa10034 	sw	at,52(sp)
80029fb8:	0022082b 	sltu	at,at,v0
80029fbc:	1420003b 	bnez	at,8002a0ac <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7bce651e41d62ac1E+0x1d8>
80029fc0:	00000000 	nop
80029fc4:	0800a7ff 	j	80029ffc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7bce651e41d62ac1E+0x128>
80029fc8:	00000000 	nop
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80029fcc:	8fa40058 	lw	a0,88(sp)
80029fd0:	8fa5005c 	lw	a1,92(sp)
80029fd4:	afa400c4 	sw	a0,196(sp)
80029fd8:	afa500c8 	sw	a1,200(sp)
80029fdc:	3c018105 	lui	at,0x8105
80029fe0:	2426d0e0 	addiu	a2,at,-12064
80029fe4:	0c00db27 	jal	80036c9c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h76db6800faa68b03E>
80029fe8:	00000000 	nop
80029fec:	afa20048 	sw	v0,72(sp)
80029ff0:	afa3004c 	sw	v1,76(sp)
80029ff4:	0800a848 	j	8002a120 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7bce651e41d62ac1E+0x24c>
80029ff8:	00000000 	nop
        let cap = cmp::max(self.cap.0 * 2, required_cap);
80029ffc:	8fa50030 	lw	a1,48(sp)
8002a000:	8fa40034 	lw	a0,52(sp)
8002a004:	0c00e965 	jal	8003a594 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>
8002a008:	00000000 	nop
8002a00c:	00402825 	move	a1,v0
8002a010:	afa500a4 	sw	a1,164(sp)
8002a014:	24040004 	li	a0,4
        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
8002a018:	0c00e965 	jal	8003a594 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>
8002a01c:	00000000 	nop
8002a020:	00402025 	move	a0,v0
8002a024:	00801025 	move	v0,a0
8002a028:	afa2001c 	sw	v0,28(sp)
8002a02c:	afa400a8 	sw	a0,168(sp)
        let new_layout = Layout::array::<T>(cap);
8002a030:	0c0094a5 	jal	80025294 <_ZN4core5alloc6layout6Layout5array17h0f7c6a6894c81edfE>
8002a034:	00000000 	nop
8002a038:	8fa50044 	lw	a1,68(sp)
8002a03c:	afa20020 	sw	v0,32(sp)
8002a040:	afa30024 	sw	v1,36(sp)
8002a044:	afa200ac 	sw	v0,172(sp)
8002a048:	afa300b0 	sw	v1,176(sp)
8002a04c:	27a40088 	addiu	a0,sp,136
8002a050:	afa40028 	sw	a0,40(sp)
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
8002a054:	0c00a52a 	jal	800294a8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h1c76a0a2f758789cE>
8002a058:	00000000 	nop
8002a05c:	8fa10044 	lw	at,68(sp)
8002a060:	8fa50020 	lw	a1,32(sp)
8002a064:	8fa60024 	lw	a2,36(sp)
8002a068:	8fa70028 	lw	a3,40(sp)
8002a06c:	24210008 	addiu	at,at,8
8002a070:	03a01025 	move	v0,sp
8002a074:	ac410010 	sw	at,16(v0)
8002a078:	27a4007c 	addiu	a0,sp,124
8002a07c:	afa4002c 	sw	a0,44(sp)
8002a080:	0c00e021 	jal	80038084 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E>
8002a084:	00000000 	nop
8002a088:	8fa5002c 	lw	a1,44(sp)
8002a08c:	27a40070 	addiu	a0,sp,112
8002a090:	0c00dfeb 	jal	80037fac <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E>
8002a094:	00000000 	nop
8002a098:	8fa10070 	lw	at,112(sp)
8002a09c:	10200007 	beqz	at,8002a0bc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7bce651e41d62ac1E+0x1e8>
8002a0a0:	00000000 	nop
8002a0a4:	0800a83c 	j	8002a0f0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7bce651e41d62ac1E+0x21c>
8002a0a8:	00000000 	nop
        let cap = cmp::max(self.cap.0 * 2, required_cap);
8002a0ac:	3c018105 	lui	at,0x8105
8002a0b0:	2424d0c0 	addiu	a0,at,-12096
8002a0b4:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002a0b8:	00000000 	nop
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
8002a0bc:	8fa7001c 	lw	a3,28(sp)
8002a0c0:	8fa40044 	lw	a0,68(sp)
8002a0c4:	8fa50074 	lw	a1,116(sp)
8002a0c8:	8fa60078 	lw	a2,120(sp)
8002a0cc:	afa500b4 	sw	a1,180(sp)
8002a0d0:	afa600b8 	sw	a2,184(sp)
        unsafe { self.set_ptr_and_cap(ptr, cap) };
8002a0d4:	0c00a888 	jal	8002a220 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17h64d6b7871815e7dbE>
8002a0d8:	00000000 	nop
8002a0dc:	3c018000 	lui	at,0x8000
8002a0e0:	34210001 	ori	at,at,0x1
        Ok(())
8002a0e4:	afa10048 	sw	at,72(sp)
    }
8002a0e8:	0800a848 	j	8002a120 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7bce651e41d62ac1E+0x24c>
8002a0ec:	00000000 	nop
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
8002a0f0:	8fa40074 	lw	a0,116(sp)
8002a0f4:	8fa50078 	lw	a1,120(sp)
8002a0f8:	afa400bc 	sw	a0,188(sp)
8002a0fc:	afa500c0 	sw	a1,192(sp)
8002a100:	3c018105 	lui	at,0x8105
8002a104:	2426d0d0 	addiu	a2,at,-12080
8002a108:	0c00db00 	jal	80036c00 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h491e696a56edf9eeE>
8002a10c:	00000000 	nop
8002a110:	afa20048 	sw	v0,72(sp)
8002a114:	afa3004c 	sw	v1,76(sp)
8002a118:	0800a848 	j	8002a120 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7bce651e41d62ac1E+0x24c>
8002a11c:	00000000 	nop
    }
8002a120:	8fa20048 	lw	v0,72(sp)
8002a124:	8fa3004c 	lw	v1,76(sp)
8002a128:	8fbf00cc 	lw	ra,204(sp)
8002a12c:	27bd00d0 	addiu	sp,sp,208
8002a130:	03e00008 	jr	ra
8002a134:	00000000 	nop

8002a138 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17h4f3fe559c2aa4de9E>:
    unsafe fn set_ptr_and_cap(&mut self, ptr: NonNull<[u8]>, cap: usize) {
8002a138:	27bdffc8 	addiu	sp,sp,-56
8002a13c:	afbf0034 	sw	ra,52(sp)
8002a140:	afa70018 	sw	a3,24(sp)
8002a144:	afa60010 	sw	a2,16(sp)
8002a148:	00a00825 	move	at,a1
8002a14c:	8fa50010 	lw	a1,16(sp)
8002a150:	afa10014 	sw	at,20(sp)
8002a154:	00800825 	move	at,a0
8002a158:	8fa40014 	lw	a0,20(sp)
8002a15c:	afa1001c 	sw	at,28(sp)
8002a160:	afa10024 	sw	at,36(sp)
8002a164:	afa40028 	sw	a0,40(sp)
8002a168:	afa5002c 	sw	a1,44(sp)
8002a16c:	afa70030 	sw	a3,48(sp)
        self.ptr = Unique::from(ptr.cast());
8002a170:	0c008d1e 	jal	80023478 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hbca9ea7de1e2d828E>
8002a174:	00000000 	nop
8002a178:	00402025 	move	a0,v0
8002a17c:	0c00808f 	jal	8002023c <_ZN119_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..non_null..NonNull$LT$T$GT$$GT$$GT$4from17h9e9992d89e51b79bE>
8002a180:	00000000 	nop
8002a184:	8fa70018 	lw	a3,24(sp)
8002a188:	8fa4001c 	lw	a0,28(sp)
8002a18c:	ac820004 	sw	v0,4(a0)
        self.cap = unsafe { Cap(cap) };
8002a190:	afa70020 	sw	a3,32(sp)
8002a194:	8fa10020 	lw	at,32(sp)
8002a198:	ac810000 	sw	at,0(a0)
    }
8002a19c:	8fbf0034 	lw	ra,52(sp)
8002a1a0:	27bd0038 	addiu	sp,sp,56
8002a1a4:	03e00008 	jr	ra
8002a1a8:	00000000 	nop

8002a1ac <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17h5517a8a62ae8499aE>:
    unsafe fn set_ptr_and_cap(&mut self, ptr: NonNull<[u8]>, cap: usize) {
8002a1ac:	27bdffc8 	addiu	sp,sp,-56
8002a1b0:	afbf0034 	sw	ra,52(sp)
8002a1b4:	afa70018 	sw	a3,24(sp)
8002a1b8:	afa60010 	sw	a2,16(sp)
8002a1bc:	00a00825 	move	at,a1
8002a1c0:	8fa50010 	lw	a1,16(sp)
8002a1c4:	afa10014 	sw	at,20(sp)
8002a1c8:	00800825 	move	at,a0
8002a1cc:	8fa40014 	lw	a0,20(sp)
8002a1d0:	afa1001c 	sw	at,28(sp)
8002a1d4:	afa10024 	sw	at,36(sp)
8002a1d8:	afa40028 	sw	a0,40(sp)
8002a1dc:	afa5002c 	sw	a1,44(sp)
8002a1e0:	afa70030 	sw	a3,48(sp)
        self.ptr = Unique::from(ptr.cast());
8002a1e4:	0c008d28 	jal	800234a0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hdaafdb6287282da8E>
8002a1e8:	00000000 	nop
8002a1ec:	00402025 	move	a0,v0
8002a1f0:	0c008096 	jal	80020258 <_ZN119_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..non_null..NonNull$LT$T$GT$$GT$$GT$4from17hd2a865911a51e15cE>
8002a1f4:	00000000 	nop
8002a1f8:	8fa70018 	lw	a3,24(sp)
8002a1fc:	8fa4001c 	lw	a0,28(sp)
8002a200:	ac820004 	sw	v0,4(a0)
        self.cap = unsafe { Cap(cap) };
8002a204:	afa70020 	sw	a3,32(sp)
8002a208:	8fa10020 	lw	at,32(sp)
8002a20c:	ac810000 	sw	at,0(a0)
    }
8002a210:	8fbf0034 	lw	ra,52(sp)
8002a214:	27bd0038 	addiu	sp,sp,56
8002a218:	03e00008 	jr	ra
8002a21c:	00000000 	nop

8002a220 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17h64d6b7871815e7dbE>:
    unsafe fn set_ptr_and_cap(&mut self, ptr: NonNull<[u8]>, cap: usize) {
8002a220:	27bdffc8 	addiu	sp,sp,-56
8002a224:	afbf0034 	sw	ra,52(sp)
8002a228:	afa70018 	sw	a3,24(sp)
8002a22c:	afa60010 	sw	a2,16(sp)
8002a230:	00a00825 	move	at,a1
8002a234:	8fa50010 	lw	a1,16(sp)
8002a238:	afa10014 	sw	at,20(sp)
8002a23c:	00800825 	move	at,a0
8002a240:	8fa40014 	lw	a0,20(sp)
8002a244:	afa1001c 	sw	at,28(sp)
8002a248:	afa10024 	sw	at,36(sp)
8002a24c:	afa40028 	sw	a0,40(sp)
8002a250:	afa5002c 	sw	a1,44(sp)
8002a254:	afa70030 	sw	a3,48(sp)
        self.ptr = Unique::from(ptr.cast());
8002a258:	0c008d42 	jal	80023508 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hfa6ebd554d4cc044E>
8002a25c:	00000000 	nop
8002a260:	00402025 	move	a0,v0
8002a264:	0c008081 	jal	80020204 <_ZN119_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..non_null..NonNull$LT$T$GT$$GT$$GT$4from17h06d182927884a928E>
8002a268:	00000000 	nop
8002a26c:	8fa70018 	lw	a3,24(sp)
8002a270:	8fa4001c 	lw	a0,28(sp)
8002a274:	ac820004 	sw	v0,4(a0)
        self.cap = unsafe { Cap(cap) };
8002a278:	afa70020 	sw	a3,32(sp)
8002a27c:	8fa10020 	lw	at,32(sp)
8002a280:	ac810000 	sw	at,0(a0)
    }
8002a284:	8fbf0034 	lw	ra,52(sp)
8002a288:	27bd0038 	addiu	sp,sp,56
8002a28c:	03e00008 	jr	ra
8002a290:	00000000 	nop

8002a294 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17h8cc92109efb8dd08E>:
    unsafe fn set_ptr_and_cap(&mut self, ptr: NonNull<[u8]>, cap: usize) {
8002a294:	27bdffc8 	addiu	sp,sp,-56
8002a298:	afbf0034 	sw	ra,52(sp)
8002a29c:	afa70018 	sw	a3,24(sp)
8002a2a0:	afa60010 	sw	a2,16(sp)
8002a2a4:	00a00825 	move	at,a1
8002a2a8:	8fa50010 	lw	a1,16(sp)
8002a2ac:	afa10014 	sw	at,20(sp)
8002a2b0:	00800825 	move	at,a0
8002a2b4:	8fa40014 	lw	a0,20(sp)
8002a2b8:	afa1001c 	sw	at,28(sp)
8002a2bc:	afa10024 	sw	at,36(sp)
8002a2c0:	afa40028 	sw	a0,40(sp)
8002a2c4:	afa5002c 	sw	a1,44(sp)
8002a2c8:	afa70030 	sw	a3,48(sp)
        self.ptr = Unique::from(ptr.cast());
8002a2cc:	0c008cea 	jal	800233a8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h33dfeb2c81aeecddE>
8002a2d0:	00000000 	nop
8002a2d4:	00402025 	move	a0,v0
8002a2d8:	0c008088 	jal	80020220 <_ZN119_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..non_null..NonNull$LT$T$GT$$GT$$GT$4from17h32b9bf787645d82eE>
8002a2dc:	00000000 	nop
8002a2e0:	8fa70018 	lw	a3,24(sp)
8002a2e4:	8fa4001c 	lw	a0,28(sp)
8002a2e8:	ac820004 	sw	v0,4(a0)
        self.cap = unsafe { Cap(cap) };
8002a2ec:	afa70020 	sw	a3,32(sp)
8002a2f0:	8fa10020 	lw	at,32(sp)
8002a2f4:	ac810000 	sw	at,0(a0)
    }
8002a2f8:	8fbf0034 	lw	ra,52(sp)
8002a2fc:	27bd0038 	addiu	sp,sp,56
8002a300:	03e00008 	jr	ra
8002a304:	00000000 	nop

8002a308 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h28b7d7624a090b25E>:
    pub fn ptr(&self) -> *mut T {
8002a308:	27bdffe8 	addiu	sp,sp,-24
8002a30c:	afbf0014 	sw	ra,20(sp)
8002a310:	afa40010 	sw	a0,16(sp)
        self.ptr.as_ptr()
8002a314:	8c840004 	lw	a0,4(a0)
8002a318:	0c008ba4 	jal	80022e90 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h149ee85b337f4835E>
8002a31c:	00000000 	nop
    }
8002a320:	8fbf0014 	lw	ra,20(sp)
8002a324:	27bd0018 	addiu	sp,sp,24
8002a328:	03e00008 	jr	ra
8002a32c:	00000000 	nop

8002a330 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h5a9f471c1256b736E>:
    pub fn ptr(&self) -> *mut T {
8002a330:	27bdffe8 	addiu	sp,sp,-24
8002a334:	afbf0014 	sw	ra,20(sp)
8002a338:	afa40010 	sw	a0,16(sp)
        self.ptr.as_ptr()
8002a33c:	8c840004 	lw	a0,4(a0)
8002a340:	0c008bb2 	jal	80022ec8 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h7015d2a56fd10b2dE>
8002a344:	00000000 	nop
    }
8002a348:	8fbf0014 	lw	ra,20(sp)
8002a34c:	27bd0018 	addiu	sp,sp,24
8002a350:	03e00008 	jr	ra
8002a354:	00000000 	nop

8002a358 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17hb09faf528c7b0109E>:
    pub fn ptr(&self) -> *mut T {
8002a358:	27bdffe8 	addiu	sp,sp,-24
8002a35c:	afbf0014 	sw	ra,20(sp)
8002a360:	afa40010 	sw	a0,16(sp)
        self.ptr.as_ptr()
8002a364:	8c840004 	lw	a0,4(a0)
8002a368:	0c008bc7 	jal	80022f1c <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hdeab6bfa5b80ed76E>
8002a36c:	00000000 	nop
    }
8002a370:	8fbf0014 	lw	ra,20(sp)
8002a374:	27bd0018 	addiu	sp,sp,24
8002a378:	03e00008 	jr	ra
8002a37c:	00000000 	nop

8002a380 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17heae0b931d7695f00E>:
    pub fn ptr(&self) -> *mut T {
8002a380:	27bdffe8 	addiu	sp,sp,-24
8002a384:	afbf0014 	sw	ra,20(sp)
8002a388:	afa40010 	sw	a0,16(sp)
        self.ptr.as_ptr()
8002a38c:	8c840004 	lw	a0,4(a0)
8002a390:	0c008bb9 	jal	80022ee4 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h86d395a73b569234E>
8002a394:	00000000 	nop
    }
8002a398:	8fbf0014 	lw	ra,20(sp)
8002a39c:	27bd0018 	addiu	sp,sp,24
8002a3a0:	03e00008 	jr	ra
8002a3a4:	00000000 	nop

8002a3a8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h13b3d982bee3656fE>:
    pub fn grow_one(&mut self) {
8002a3a8:	27bdffd8 	addiu	sp,sp,-40
8002a3ac:	afbf0024 	sw	ra,36(sp)
8002a3b0:	afa40018 	sw	a0,24(sp)
        if let Err(err) = self.grow_amortized(self.cap.0, 1) {
8002a3b4:	8c850000 	lw	a1,0(a0)
8002a3b8:	24060001 	li	a2,1
8002a3bc:	0c00a71c 	jal	80029c70 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h262c13e7ee41f10cE>
8002a3c0:	00000000 	nop
8002a3c4:	afa20010 	sw	v0,16(sp)
8002a3c8:	afa30014 	sw	v1,20(sp)
8002a3cc:	8fa10010 	lw	at,16(sp)
8002a3d0:	3c028000 	lui	v0,0x8000
8002a3d4:	34420001 	ori	v0,v0,0x1
8002a3d8:	10220009 	beq	at,v0,8002a400 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h13b3d982bee3656fE+0x58>
8002a3dc:	00000000 	nop
8002a3e0:	0800a8fa 	j	8002a3e8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h13b3d982bee3656fE+0x40>
8002a3e4:	00000000 	nop
8002a3e8:	8fa40010 	lw	a0,16(sp)
8002a3ec:	8fa50014 	lw	a1,20(sp)
8002a3f0:	afa4001c 	sw	a0,28(sp)
8002a3f4:	afa50020 	sw	a1,32(sp)
            handle_error(err);
8002a3f8:	0c00e0f4 	jal	800383d0 <_ZN5alloc7raw_vec12handle_error17hfb0478db9ca6b296E>
8002a3fc:	00000000 	nop
    }
8002a400:	8fbf0024 	lw	ra,36(sp)
8002a404:	27bd0028 	addiu	sp,sp,40
8002a408:	03e00008 	jr	ra
8002a40c:	00000000 	nop

8002a410 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h3db60e8b0c4ab50dE>:
    pub fn grow_one(&mut self) {
8002a410:	27bdffd8 	addiu	sp,sp,-40
8002a414:	afbf0024 	sw	ra,36(sp)
8002a418:	afa40018 	sw	a0,24(sp)
        if let Err(err) = self.grow_amortized(self.cap.0, 1) {
8002a41c:	8c850000 	lw	a1,0(a0)
8002a420:	24060001 	li	a2,1
8002a424:	0c00a683 	jal	80029a0c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1ef00eaeb5d3df16E>
8002a428:	00000000 	nop
8002a42c:	afa20010 	sw	v0,16(sp)
8002a430:	afa30014 	sw	v1,20(sp)
8002a434:	8fa10010 	lw	at,16(sp)
8002a438:	3c028000 	lui	v0,0x8000
8002a43c:	34420001 	ori	v0,v0,0x1
8002a440:	10220009 	beq	at,v0,8002a468 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h3db60e8b0c4ab50dE+0x58>
8002a444:	00000000 	nop
8002a448:	0800a914 	j	8002a450 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h3db60e8b0c4ab50dE+0x40>
8002a44c:	00000000 	nop
8002a450:	8fa40010 	lw	a0,16(sp)
8002a454:	8fa50014 	lw	a1,20(sp)
8002a458:	afa4001c 	sw	a0,28(sp)
8002a45c:	afa50020 	sw	a1,32(sp)
            handle_error(err);
8002a460:	0c00e0f4 	jal	800383d0 <_ZN5alloc7raw_vec12handle_error17hfb0478db9ca6b296E>
8002a464:	00000000 	nop
    }
8002a468:	8fbf0024 	lw	ra,36(sp)
8002a46c:	27bd0028 	addiu	sp,sp,40
8002a470:	03e00008 	jr	ra
8002a474:	00000000 	nop

8002a478 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h902f9d9be612bf8aE>:
    pub fn grow_one(&mut self) {
8002a478:	27bdffd8 	addiu	sp,sp,-40
8002a47c:	afbf0024 	sw	ra,36(sp)
8002a480:	afa40018 	sw	a0,24(sp)
        if let Err(err) = self.grow_amortized(self.cap.0, 1) {
8002a484:	8c850000 	lw	a1,0(a0)
8002a488:	24060001 	li	a2,1
8002a48c:	0c00a5ea 	jal	800297a8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h0cc24ecc084feeaeE>
8002a490:	00000000 	nop
8002a494:	afa20010 	sw	v0,16(sp)
8002a498:	afa30014 	sw	v1,20(sp)
8002a49c:	8fa10010 	lw	at,16(sp)
8002a4a0:	3c028000 	lui	v0,0x8000
8002a4a4:	34420001 	ori	v0,v0,0x1
8002a4a8:	10220009 	beq	at,v0,8002a4d0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h902f9d9be612bf8aE+0x58>
8002a4ac:	00000000 	nop
8002a4b0:	0800a92e 	j	8002a4b8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h902f9d9be612bf8aE+0x40>
8002a4b4:	00000000 	nop
8002a4b8:	8fa40010 	lw	a0,16(sp)
8002a4bc:	8fa50014 	lw	a1,20(sp)
8002a4c0:	afa4001c 	sw	a0,28(sp)
8002a4c4:	afa50020 	sw	a1,32(sp)
            handle_error(err);
8002a4c8:	0c00e0f4 	jal	800383d0 <_ZN5alloc7raw_vec12handle_error17hfb0478db9ca6b296E>
8002a4cc:	00000000 	nop
    }
8002a4d0:	8fbf0024 	lw	ra,36(sp)
8002a4d4:	27bd0028 	addiu	sp,sp,40
8002a4d8:	03e00008 	jr	ra
8002a4dc:	00000000 	nop

8002a4e0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hf970053023bae9baE>:
    pub fn grow_one(&mut self) {
8002a4e0:	27bdffd8 	addiu	sp,sp,-40
8002a4e4:	afbf0024 	sw	ra,36(sp)
8002a4e8:	afa40018 	sw	a0,24(sp)
        if let Err(err) = self.grow_amortized(self.cap.0, 1) {
8002a4ec:	8c850000 	lw	a1,0(a0)
8002a4f0:	24060001 	li	a2,1
8002a4f4:	0c00a7b5 	jal	80029ed4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h7bce651e41d62ac1E>
8002a4f8:	00000000 	nop
8002a4fc:	afa20010 	sw	v0,16(sp)
8002a500:	afa30014 	sw	v1,20(sp)
8002a504:	8fa10010 	lw	at,16(sp)
8002a508:	3c028000 	lui	v0,0x8000
8002a50c:	34420001 	ori	v0,v0,0x1
8002a510:	10220009 	beq	at,v0,8002a538 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hf970053023bae9baE+0x58>
8002a514:	00000000 	nop
8002a518:	0800a948 	j	8002a520 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hf970053023bae9baE+0x40>
8002a51c:	00000000 	nop
8002a520:	8fa40010 	lw	a0,16(sp)
8002a524:	8fa50014 	lw	a1,20(sp)
8002a528:	afa4001c 	sw	a0,28(sp)
8002a52c:	afa50020 	sw	a1,32(sp)
            handle_error(err);
8002a530:	0c00e0f4 	jal	800383d0 <_ZN5alloc7raw_vec12handle_error17hfb0478db9ca6b296E>
8002a534:	00000000 	nop
    }
8002a538:	8fbf0024 	lw	ra,36(sp)
8002a53c:	27bd0028 	addiu	sp,sp,40
8002a540:	03e00008 	jr	ra
8002a544:	00000000 	nop

8002a548 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4828aa49855ab74bE>:
    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {
8002a548:	27bdffd0 	addiu	sp,sp,-48
8002a54c:	afbf002c 	sw	ra,44(sp)
8002a550:	afa50014 	sw	a1,20(sp)
8002a554:	afa60018 	sw	a2,24(sp)
8002a558:	afa7001c 	sw	a3,28(sp)
8002a55c:	afa40020 	sw	a0,32(sp)
8002a560:	afa50024 	sw	a1,36(sp)
8002a564:	27a40018 	addiu	a0,sp,24
        if layout.size() != 0 {
8002a568:	0c009495 	jal	80025254 <_ZN4core5alloc6layout6Layout4size17h270752b9ab6d7566E>
8002a56c:	00000000 	nop
8002a570:	14400007 	bnez	v0,8002a590 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4828aa49855ab74bE+0x48>
8002a574:	00000000 	nop
8002a578:	0800a960 	j	8002a580 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4828aa49855ab74bE+0x38>
8002a57c:	00000000 	nop
    }
8002a580:	8fbf002c 	lw	ra,44(sp)
8002a584:	27bd0030 	addiu	sp,sp,48
8002a588:	03e00008 	jr	ra
8002a58c:	00000000 	nop
8002a590:	8fa40014 	lw	a0,20(sp)
8002a594:	afa40028 	sw	a0,40(sp)
            unsafe { dealloc(ptr.as_ptr(), layout) }
8002a598:	8fa50018 	lw	a1,24(sp)
8002a59c:	8fa6001c 	lw	a2,28(sp)
8002a5a0:	0c00a4ad 	jal	800292b4 <_ZN5alloc5alloc7dealloc17hb317e1dc93fc0a61E>
8002a5a4:	00000000 	nop
8002a5a8:	0800a960 	j	8002a580 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4828aa49855ab74bE+0x38>
8002a5ac:	00000000 	nop

8002a5b0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h47e3fa2273581c39E>:
    fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
8002a5b0:	27bdffe0 	addiu	sp,sp,-32
8002a5b4:	afbf001c 	sw	ra,28(sp)
8002a5b8:	afa40010 	sw	a0,16(sp)
8002a5bc:	afa50014 	sw	a1,20(sp)
8002a5c0:	afa60018 	sw	a2,24(sp)
8002a5c4:	24070000 	li	a3,0
        self.alloc_impl(layout, false)
8002a5c8:	0c00a456 	jal	80029158 <_ZN5alloc5alloc6Global10alloc_impl17hcfc800e0c918eb89E>
8002a5cc:	00000000 	nop
    }
8002a5d0:	8fbf001c 	lw	ra,28(sp)
8002a5d4:	27bd0020 	addiu	sp,sp,32
8002a5d8:	03e00008 	jr	ra
8002a5dc:	00000000 	nop

8002a5e0 <_ZN63_$LT$core..cell..BorrowRef$u20$as$u20$core..ops..drop..Drop$GT$4drop17h56474d439e35c7d0E>:
    fn drop(&mut self) {
8002a5e0:	27bdffd0 	addiu	sp,sp,-48
8002a5e4:	afbf002c 	sw	ra,44(sp)
8002a5e8:	afa40018 	sw	a0,24(sp)
8002a5ec:	afa40020 	sw	a0,32(sp)
        let borrow = self.borrow.get();
8002a5f0:	8c840000 	lw	a0,0(a0)
8002a5f4:	0c008e3b 	jal	800238ec <_ZN4core4cell13Cell$LT$T$GT$3get17hc3f8dbd3e71759e3E>
8002a5f8:	00000000 	nop
8002a5fc:	00400825 	move	at,v0
8002a600:	afa1001c 	sw	at,28(sp)
8002a604:	afa20024 	sw	v0,36(sp)
        debug_assert!(is_reading(borrow));
8002a608:	0800a984 	j	8002a610 <_ZN63_$LT$core..cell..BorrowRef$u20$as$u20$core..ops..drop..Drop$GT$4drop17h56474d439e35c7d0E+0x30>
8002a60c:	00000000 	nop
8002a610:	8fa1001c 	lw	at,28(sp)
8002a614:	afa10028 	sw	at,40(sp)
8002a618:	1c20000a 	bgtz	at,8002a644 <_ZN63_$LT$core..cell..BorrowRef$u20$as$u20$core..ops..drop..Drop$GT$4drop17h56474d439e35c7d0E+0x64>
8002a61c:	00000000 	nop
8002a620:	0800a98a 	j	8002a628 <_ZN63_$LT$core..cell..BorrowRef$u20$as$u20$core..ops..drop..Drop$GT$4drop17h56474d439e35c7d0E+0x48>
8002a624:	00000000 	nop
8002a628:	3c018105 	lui	at,0x8105
8002a62c:	2424d0f0 	addiu	a0,at,-12048
8002a630:	3c018105 	lui	at,0x8105
8002a634:	2426d114 	addiu	a2,at,-12012
8002a638:	24050024 	li	a1,36
8002a63c:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
8002a640:	00000000 	nop
        self.borrow.set(borrow - 1);
8002a644:	8fa2001c 	lw	v0,28(sp)
8002a648:	8fa10018 	lw	at,24(sp)
8002a64c:	8c210000 	lw	at,0(at)
8002a650:	afa10010 	sw	at,16(sp)
8002a654:	2441ffff 	addiu	at,v0,-1
8002a658:	afa10014 	sw	at,20(sp)
8002a65c:	0022082a 	slt	at,at,v0
8002a660:	1020000b 	beqz	at,8002a690 <_ZN63_$LT$core..cell..BorrowRef$u20$as$u20$core..ops..drop..Drop$GT$4drop17h56474d439e35c7d0E+0xb0>
8002a664:	00000000 	nop
8002a668:	0800a99c 	j	8002a670 <_ZN63_$LT$core..cell..BorrowRef$u20$as$u20$core..ops..drop..Drop$GT$4drop17h56474d439e35c7d0E+0x90>
8002a66c:	00000000 	nop
8002a670:	8fa50014 	lw	a1,20(sp)
8002a674:	8fa40010 	lw	a0,16(sp)
8002a678:	0c008e4c 	jal	80023930 <_ZN4core4cell13Cell$LT$T$GT$3set17h64fa53eeb6bc3f51E>
8002a67c:	00000000 	nop
    }
8002a680:	8fbf002c 	lw	ra,44(sp)
8002a684:	27bd0030 	addiu	sp,sp,48
8002a688:	03e00008 	jr	ra
8002a68c:	00000000 	nop
        self.borrow.set(borrow - 1);
8002a690:	3c018105 	lui	at,0x8105
8002a694:	2424d124 	addiu	a0,at,-11996
8002a698:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002a69c:	00000000 	nop

8002a6a0 <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17h734312a022f35e3aE>:
    fn drop(&mut self) {
8002a6a0:	27bdffd0 	addiu	sp,sp,-48
8002a6a4:	afbf002c 	sw	ra,44(sp)
8002a6a8:	afa40018 	sw	a0,24(sp)
8002a6ac:	afa40020 	sw	a0,32(sp)
        let borrow = self.borrow.get();
8002a6b0:	8c840000 	lw	a0,0(a0)
8002a6b4:	0c008e3b 	jal	800238ec <_ZN4core4cell13Cell$LT$T$GT$3get17hc3f8dbd3e71759e3E>
8002a6b8:	00000000 	nop
8002a6bc:	00400825 	move	at,v0
8002a6c0:	afa1001c 	sw	at,28(sp)
8002a6c4:	afa20024 	sw	v0,36(sp)
        debug_assert!(is_writing(borrow));
8002a6c8:	0800a9b4 	j	8002a6d0 <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17h734312a022f35e3aE+0x30>
8002a6cc:	00000000 	nop
8002a6d0:	8fa1001c 	lw	at,28(sp)
8002a6d4:	afa10028 	sw	at,40(sp)
8002a6d8:	0420000a 	bltz	at,8002a704 <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17h734312a022f35e3aE+0x64>
8002a6dc:	00000000 	nop
8002a6e0:	0800a9ba 	j	8002a6e8 <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17h734312a022f35e3aE+0x48>
8002a6e4:	00000000 	nop
8002a6e8:	3c018105 	lui	at,0x8105
8002a6ec:	2424d134 	addiu	a0,at,-11980
8002a6f0:	3c018105 	lui	at,0x8105
8002a6f4:	2426d158 	addiu	a2,at,-11944
8002a6f8:	24050024 	li	a1,36
8002a6fc:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
8002a700:	00000000 	nop
        self.borrow.set(borrow + 1);
8002a704:	8fa2001c 	lw	v0,28(sp)
8002a708:	8fa10018 	lw	at,24(sp)
8002a70c:	8c210000 	lw	at,0(at)
8002a710:	afa10010 	sw	at,16(sp)
8002a714:	24410001 	addiu	at,v0,1
8002a718:	afa10014 	sw	at,20(sp)
8002a71c:	0022082a 	slt	at,at,v0
8002a720:	1420000b 	bnez	at,8002a750 <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17h734312a022f35e3aE+0xb0>
8002a724:	00000000 	nop
8002a728:	0800a9cc 	j	8002a730 <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17h734312a022f35e3aE+0x90>
8002a72c:	00000000 	nop
8002a730:	8fa50014 	lw	a1,20(sp)
8002a734:	8fa40010 	lw	a0,16(sp)
8002a738:	0c008e4c 	jal	80023930 <_ZN4core4cell13Cell$LT$T$GT$3set17h64fa53eeb6bc3f51E>
8002a73c:	00000000 	nop
    }
8002a740:	8fbf002c 	lw	ra,44(sp)
8002a744:	27bd0030 	addiu	sp,sp,48
8002a748:	03e00008 	jr	ra
8002a74c:	00000000 	nop
        self.borrow.set(borrow + 1);
8002a750:	3c018105 	lui	at,0x8105
8002a754:	2424d168 	addiu	a0,at,-11928
8002a758:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002a75c:	00000000 	nop

8002a760 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h9bd1f6a6a34f5585E>:
    fn clone(&self) -> Arc<T, A> {
8002a760:	27bdffd8 	addiu	sp,sp,-40
8002a764:	afbf0024 	sw	ra,36(sp)
8002a768:	afa40014 	sw	a0,20(sp)
8002a76c:	afa4001c 	sw	a0,28(sp)
        let old_size = self.inner().strong.fetch_add(1, Relaxed);
8002a770:	0c00a3c4 	jal	80028f10 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$5inner17h2df8804a64a2e42bE>
8002a774:	00000000 	nop
8002a778:	00402025 	move	a0,v0
8002a77c:	24010000 	li	at,0
8002a780:	a3a0001b 	sb	zero,27(sp)
8002a784:	93a6001b 	lbu	a2,27(sp)
8002a788:	24050001 	li	a1,1
8002a78c:	0c009189 	jal	80024624 <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h659748e46f3b404bE>
8002a790:	00000000 	nop
8002a794:	afa20020 	sw	v0,32(sp)
        if old_size > MAX_REFCOUNT {
8002a798:	04400010 	bltz	v0,8002a7dc <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h9bd1f6a6a34f5585E+0x7c>
8002a79c:	00000000 	nop
8002a7a0:	0800a9ea 	j	8002a7a8 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h9bd1f6a6a34f5585E+0x48>
8002a7a4:	00000000 	nop
        unsafe { Self::from_inner_in(self.ptr, self.alloc.clone()) }
8002a7a8:	8fa10014 	lw	at,20(sp)
8002a7ac:	8c220000 	lw	v0,0(at)
8002a7b0:	afa20010 	sw	v0,16(sp)
8002a7b4:	24240004 	addiu	a0,at,4
8002a7b8:	0c00a1ca 	jal	80028728 <_ZN59_$LT$alloc..alloc..Global$u20$as$u20$core..clone..Clone$GT$5clone17hf1d159ddd3c08c93E>
8002a7bc:	00000000 	nop
8002a7c0:	8fa40010 	lw	a0,16(sp)
8002a7c4:	0c00a3b5 	jal	80028ed4 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$13from_inner_in17h3712adb806ff97e5E>
8002a7c8:	00000000 	nop
    }
8002a7cc:	8fbf0024 	lw	ra,36(sp)
8002a7d0:	27bd0028 	addiu	sp,sp,40
8002a7d4:	03e00008 	jr	ra
8002a7d8:	00000000 	nop
            abort();
8002a7dc:	0000000d 	break

8002a7e0 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hefea2bce46aaade6E>:
    fn deref(&self) -> &T {
8002a7e0:	27bdfff0 	addiu	sp,sp,-16
8002a7e4:	afa40000 	sw	a0,0(sp)
8002a7e8:	afa40004 	sw	a0,4(sp)
8002a7ec:	8c820000 	lw	v0,0(a0)
8002a7f0:	afa2000c 	sw	v0,12(sp)
8002a7f4:	afa20008 	sw	v0,8(sp)
8002a7f8:	27bd0010 	addiu	sp,sp,16
    }
8002a7fc:	03e00008 	jr	ra
8002a800:	00000000 	nop

8002a804 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E>:
impl<T> Clone for Option<T>
where
    T: Clone,
{
    #[inline]
    fn clone(&self) -> Self {
8002a804:	27bdffd8 	addiu	sp,sp,-40
8002a808:	afbf0024 	sw	ra,36(sp)
8002a80c:	afa40014 	sw	a0,20(sp)
8002a810:	afa4001c 	sw	a0,28(sp)
        match self {
8002a814:	8c810000 	lw	at,0(a0)
8002a818:	14200006 	bnez	at,8002a834 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E+0x30>
8002a81c:	00000000 	nop
8002a820:	0800aa0a 	j	8002a828 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E+0x24>
8002a824:	00000000 	nop
            Some(x) => Some(x.clone()),
            None => None,
8002a828:	afa00018 	sw	zero,24(sp)
8002a82c:	0800aa14 	j	8002a850 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E+0x4c>
8002a830:	00000000 	nop
            Some(x) => Some(x.clone()),
8002a834:	8fa40014 	lw	a0,20(sp)
8002a838:	afa40020 	sw	a0,32(sp)
8002a83c:	0c00a9d8 	jal	8002a760 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h9bd1f6a6a34f5585E>
8002a840:	00000000 	nop
8002a844:	afa20018 	sw	v0,24(sp)
8002a848:	0800aa14 	j	8002a850 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E+0x4c>
8002a84c:	00000000 	nop
        }
    }
8002a850:	8fa20018 	lw	v0,24(sp)
8002a854:	8fbf0024 	lw	ra,36(sp)
8002a858:	27bd0028 	addiu	sp,sp,40
8002a85c:	03e00008 	jr	ra
8002a860:	00000000 	nop

8002a864 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1107a2a2cd50b6edE>:
    }
}

#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
    fn drop(&mut self) {
8002a864:	27bdffe0 	addiu	sp,sp,-32
8002a868:	afbf001c 	sw	ra,28(sp)
8002a86c:	afa40014 	sw	a0,20(sp)
8002a870:	afa40018 	sw	a0,24(sp)
        unsafe {
            // use drop for [T]
            // use a raw slice to refer to the elements of the vector as weakest necessary type;
            // could avoid questions of validity in certain cases
            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
8002a874:	0c00a211 	jal	80028844 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17hdce895f5c65c48a4E>
8002a878:	00000000 	nop
8002a87c:	8fa10014 	lw	at,20(sp)
8002a880:	00402025 	move	a0,v0
8002a884:	8c250008 	lw	a1,8(at)
8002a888:	0c008852 	jal	80022148 <_ZN4core3ptr24slice_from_raw_parts_mut17hea5f30a960da8ec9E>
8002a88c:	00000000 	nop
        }
        // RawVec handles deallocation
    }
8002a890:	8fbf001c 	lw	ra,28(sp)
8002a894:	27bd0020 	addiu	sp,sp,32
8002a898:	03e00008 	jr	ra
8002a89c:	00000000 	nop

8002a8a0 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h2a916fd5bbc2c2d9E>:
    fn drop(&mut self) {
8002a8a0:	27bdffe0 	addiu	sp,sp,-32
8002a8a4:	afbf001c 	sw	ra,28(sp)
8002a8a8:	afa40014 	sw	a0,20(sp)
8002a8ac:	afa40018 	sw	a0,24(sp)
            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
8002a8b0:	0c00a208 	jal	80028820 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17ha3ed0cbea5abdeddE>
8002a8b4:	00000000 	nop
8002a8b8:	8fa10014 	lw	at,20(sp)
8002a8bc:	00402025 	move	a0,v0
8002a8c0:	8c250008 	lw	a1,8(at)
8002a8c4:	0c008831 	jal	800220c4 <_ZN4core3ptr24slice_from_raw_parts_mut17h9b983c4771f33289E>
8002a8c8:	00000000 	nop
    }
8002a8cc:	8fbf001c 	lw	ra,28(sp)
8002a8d0:	27bd0020 	addiu	sp,sp,32
8002a8d4:	03e00008 	jr	ra
8002a8d8:	00000000 	nop

8002a8dc <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h583d4c8ae50ae747E>:
    fn drop(&mut self) {
8002a8dc:	27bdffe0 	addiu	sp,sp,-32
8002a8e0:	afbf001c 	sw	ra,28(sp)
8002a8e4:	afa40014 	sw	a0,20(sp)
8002a8e8:	afa40018 	sw	a0,24(sp)
            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
8002a8ec:	0c00a1ff 	jal	800287fc <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h88b58b9ee077356cE>
8002a8f0:	00000000 	nop
8002a8f4:	8fa10014 	lw	at,20(sp)
8002a8f8:	00402025 	move	a0,v0
8002a8fc:	8c250008 	lw	a1,8(at)
8002a900:	0c008847 	jal	8002211c <_ZN4core3ptr24slice_from_raw_parts_mut17hd414fdcd3bae6beeE>
8002a904:	00000000 	nop
8002a908:	00402025 	move	a0,v0
8002a90c:	00602825 	move	a1,v1
8002a910:	0c0089d3 	jal	8002274c <_ZN4core3ptr50drop_in_place$LT$$u5b$mos_6502..proc..Env$u5d$$GT$17h852b86370fe92da8E>
8002a914:	00000000 	nop
    }
8002a918:	8fbf001c 	lw	ra,28(sp)
8002a91c:	27bd0020 	addiu	sp,sp,32
8002a920:	03e00008 	jr	ra
8002a924:	00000000 	nop

8002a928 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc1ecc4732b3d1965E>:
    fn drop(&mut self) {
8002a928:	27bdffe0 	addiu	sp,sp,-32
8002a92c:	afbf001c 	sw	ra,28(sp)
8002a930:	afa40014 	sw	a0,20(sp)
8002a934:	afa40018 	sw	a0,24(sp)
            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
8002a938:	0c00a1f6 	jal	800287d8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h76e38f988b90ebefE>
8002a93c:	00000000 	nop
8002a940:	8fa10014 	lw	at,20(sp)
8002a944:	00402025 	move	a0,v0
8002a948:	8c250008 	lw	a1,8(at)
8002a94c:	0c00883c 	jal	800220f0 <_ZN4core3ptr24slice_from_raw_parts_mut17h9ced3415d39e95e7E>
8002a950:	00000000 	nop
    }
8002a954:	8fbf001c 	lw	ra,28(sp)
8002a958:	27bd0020 	addiu	sp,sp,32
8002a95c:	03e00008 	jr	ra
8002a960:	00000000 	nop

8002a964 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3de24c32ea2e5272E>:
    fn drop(&mut self) {
8002a964:	27bdffd8 	addiu	sp,sp,-40
8002a968:	afbf0024 	sw	ra,36(sp)
8002a96c:	afa40014 	sw	a0,20(sp)
8002a970:	afa40020 	sw	a0,32(sp)
        if self.inner().strong.fetch_sub(1, Release) != 1 {
8002a974:	0c00a3c4 	jal	80028f10 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$5inner17h2df8804a64a2e42bE>
8002a978:	00000000 	nop
8002a97c:	00402025 	move	a0,v0
8002a980:	24050001 	li	a1,1
8002a984:	afa50018 	sw	a1,24(sp)
8002a988:	a3a5001e 	sb	a1,30(sp)
8002a98c:	93a6001e 	lbu	a2,30(sp)
8002a990:	0c009195 	jal	80024654 <_ZN4core4sync6atomic11AtomicUsize9fetch_sub17hbf460cacea4d5f53E>
8002a994:	00000000 	nop
8002a998:	8fa10018 	lw	at,24(sp)
8002a99c:	1441000d 	bne	v0,at,8002a9d4 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3de24c32ea2e5272E+0x70>
8002a9a0:	00000000 	nop
8002a9a4:	0800aa6b 	j	8002a9ac <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3de24c32ea2e5272E+0x48>
8002a9a8:	00000000 	nop
8002a9ac:	24010002 	li	at,2
        acquire!(self.inner().strong);
8002a9b0:	a3a1001f 	sb	at,31(sp)
8002a9b4:	93a4001f 	lbu	a0,31(sp)
8002a9b8:	0c009388 	jal	80024e20 <_ZN4core4sync6atomic5fence17h52296e36b6387b6dE>
8002a9bc:	00000000 	nop
8002a9c0:	8fa40014 	lw	a0,20(sp)
            self.drop_slow();
8002a9c4:	0c00a3cd 	jal	80028f34 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9drop_slow17he0e4f340bd736593E>
8002a9c8:	00000000 	nop
8002a9cc:	0800aa75 	j	8002a9d4 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3de24c32ea2e5272E+0x70>
8002a9d0:	00000000 	nop
    }
8002a9d4:	8fbf0024 	lw	ra,36(sp)
8002a9d8:	27bd0028 	addiu	sp,sp,40
8002a9dc:	03e00008 	jr	ra
8002a9e0:	00000000 	nop

8002a9e4 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0a1c2fef9dbeda5aE>:
}

#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<#[may_dangle] T: ?Sized, A: Allocator> Drop for Box<T, A> {
    #[inline]
    fn drop(&mut self) {
8002a9e4:	27bdffd0 	addiu	sp,sp,-48
8002a9e8:	afbf002c 	sw	ra,44(sp)
8002a9ec:	afa40014 	sw	a0,20(sp)
8002a9f0:	afa40024 	sw	a0,36(sp)
        // the T in the Box is dropped by the compiler before the destructor is run

        let ptr = self.0;
8002a9f4:	8c840000 	lw	a0,0(a0)
8002a9f8:	afa40018 	sw	a0,24(sp)
8002a9fc:	afa40028 	sw	a0,40(sp)

        unsafe {
            let layout = Layout::for_value_raw(ptr.as_ptr());
8002aa00:	0c008bab 	jal	80022eac <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h2572cc213fe617c2E>
8002aa04:	00000000 	nop
8002aa08:	00402025 	move	a0,v0
8002aa0c:	0c00946b 	jal	800251ac <_ZN4core5alloc6layout6Layout13for_value_raw17heac6cb5d649a6702E>
8002aa10:	00000000 	nop
8002aa14:	afa2001c 	sw	v0,28(sp)
8002aa18:	afa30020 	sw	v1,32(sp)
8002aa1c:	27a4001c 	addiu	a0,sp,28
            if layout.size() != 0 {
8002aa20:	0c009495 	jal	80025254 <_ZN4core5alloc6layout6Layout4size17h270752b9ab6d7566E>
8002aa24:	00000000 	nop
8002aa28:	14400007 	bnez	v0,8002aa48 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0a1c2fef9dbeda5aE+0x64>
8002aa2c:	00000000 	nop
8002aa30:	0800aa8e 	j	8002aa38 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0a1c2fef9dbeda5aE+0x54>
8002aa34:	00000000 	nop
                self.1.deallocate(From::from(ptr.cast()), layout);
            }
        }
    }
8002aa38:	8fbf002c 	lw	ra,44(sp)
8002aa3c:	27bd0030 	addiu	sp,sp,48
8002aa40:	03e00008 	jr	ra
8002aa44:	00000000 	nop
                self.1.deallocate(From::from(ptr.cast()), layout);
8002aa48:	8fa40018 	lw	a0,24(sp)
8002aa4c:	8fa10014 	lw	at,20(sp)
8002aa50:	24210004 	addiu	at,at,4
8002aa54:	afa10010 	sw	at,16(sp)
8002aa58:	0c008b6d 	jal	80022db4 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h35a531e5b86c77a8E>
8002aa5c:	00000000 	nop
8002aa60:	00402025 	move	a0,v0
8002aa64:	0c00daf7 	jal	80036bdc <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17hdecfcf5c197a58d9E>
8002aa68:	00000000 	nop
8002aa6c:	8fa40010 	lw	a0,16(sp)
8002aa70:	00402825 	move	a1,v0
8002aa74:	8fa6001c 	lw	a2,28(sp)
8002aa78:	8fa70020 	lw	a3,32(sp)
8002aa7c:	0c00a952 	jal	8002a548 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4828aa49855ab74bE>
8002aa80:	00000000 	nop
8002aa84:	0800aa8e 	j	8002aa38 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0a1c2fef9dbeda5aE+0x54>
8002aa88:	00000000 	nop

8002aa8c <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h65242802018127baE>:
    fn drop(&mut self) {
8002aa8c:	27bdffd0 	addiu	sp,sp,-48
8002aa90:	afbf002c 	sw	ra,44(sp)
8002aa94:	afa40014 	sw	a0,20(sp)
8002aa98:	afa40024 	sw	a0,36(sp)
        let ptr = self.0;
8002aa9c:	8c840000 	lw	a0,0(a0)
8002aaa0:	afa40018 	sw	a0,24(sp)
8002aaa4:	afa40028 	sw	a0,40(sp)
            let layout = Layout::for_value_raw(ptr.as_ptr());
8002aaa8:	0c008bc0 	jal	80022f00 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h9dda5f1ab39cb168E>
8002aaac:	00000000 	nop
8002aab0:	00402025 	move	a0,v0
8002aab4:	0c009454 	jal	80025150 <_ZN4core5alloc6layout6Layout13for_value_raw17h5c9242bdbd47222eE>
8002aab8:	00000000 	nop
8002aabc:	afa2001c 	sw	v0,28(sp)
8002aac0:	afa30020 	sw	v1,32(sp)
8002aac4:	27a4001c 	addiu	a0,sp,28
            if layout.size() != 0 {
8002aac8:	0c009495 	jal	80025254 <_ZN4core5alloc6layout6Layout4size17h270752b9ab6d7566E>
8002aacc:	00000000 	nop
8002aad0:	14400007 	bnez	v0,8002aaf0 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h65242802018127baE+0x64>
8002aad4:	00000000 	nop
8002aad8:	0800aab8 	j	8002aae0 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h65242802018127baE+0x54>
8002aadc:	00000000 	nop
    }
8002aae0:	8fbf002c 	lw	ra,44(sp)
8002aae4:	27bd0030 	addiu	sp,sp,48
8002aae8:	03e00008 	jr	ra
8002aaec:	00000000 	nop
                self.1.deallocate(From::from(ptr.cast()), layout);
8002aaf0:	8fa40018 	lw	a0,24(sp)
8002aaf4:	8fa10014 	lw	at,20(sp)
8002aaf8:	24210004 	addiu	at,at,4
8002aafc:	afa10010 	sw	at,16(sp)
8002ab00:	0c008b8e 	jal	80022e38 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17hd217371ff3fca20bE>
8002ab04:	00000000 	nop
8002ab08:	00402025 	move	a0,v0
8002ab0c:	0c00daf7 	jal	80036bdc <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17hdecfcf5c197a58d9E>
8002ab10:	00000000 	nop
8002ab14:	8fa40010 	lw	a0,16(sp)
8002ab18:	00402825 	move	a1,v0
8002ab1c:	8fa6001c 	lw	a2,28(sp)
8002ab20:	8fa70020 	lw	a3,32(sp)
8002ab24:	0c00a952 	jal	8002a548 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4828aa49855ab74bE>
8002ab28:	00000000 	nop
8002ab2c:	0800aab8 	j	8002aae0 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h65242802018127baE+0x54>
8002ab30:	00000000 	nop

8002ab34 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h21b7b36c050b0ee7E>:
    /// drop(weak_foo);   // Doesn't print anything
    /// drop(foo);        // Prints "dropped!"
    ///
    /// assert!(other_weak_foo.upgrade().is_none());
    /// ```
    fn drop(&mut self) {
8002ab34:	27bdffc0 	addiu	sp,sp,-64
8002ab38:	afbf003c 	sw	ra,60(sp)
8002ab3c:	afa4001c 	sw	a0,28(sp)
8002ab40:	afa40034 	sw	a0,52(sp)
        //
        // It's not necessary to check for the locked state here, because the
        // weak count can only be locked if there was precisely one weak ref,
        // meaning that drop could only subsequently run ON that remaining weak
        // ref, which can only happen after the lock is released.
        let inner = if let Some(inner) = self.inner() { inner } else { return };
8002ab44:	0c00a3e3 	jal	80028f8c <_ZN5alloc4sync17Weak$LT$T$C$A$GT$5inner17h8dfd93f03290850eE>
8002ab48:	00000000 	nop
8002ab4c:	afa20020 	sw	v0,32(sp)
8002ab50:	afa30024 	sw	v1,36(sp)
8002ab54:	8fa10020 	lw	at,32(sp)
8002ab58:	10200013 	beqz	at,8002aba8 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h21b7b36c050b0ee7E+0x74>
8002ab5c:	00000000 	nop
8002ab60:	0800aada 	j	8002ab68 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h21b7b36c050b0ee7E+0x34>
8002ab64:	00000000 	nop
8002ab68:	8fa20020 	lw	v0,32(sp)
8002ab6c:	8fa10024 	lw	at,36(sp)
8002ab70:	afa20028 	sw	v0,40(sp)
8002ab74:	afa1002c 	sw	at,44(sp)

        if inner.weak.fetch_sub(1, Release) == 1 {
8002ab78:	8fa40028 	lw	a0,40(sp)
8002ab7c:	24050001 	li	a1,1
8002ab80:	afa50018 	sw	a1,24(sp)
8002ab84:	a3a50032 	sb	a1,50(sp)
8002ab88:	93a60032 	lbu	a2,50(sp)
8002ab8c:	0c009195 	jal	80024654 <_ZN4core4sync6atomic11AtomicUsize9fetch_sub17hbf460cacea4d5f53E>
8002ab90:	00000000 	nop
8002ab94:	8fa10018 	lw	at,24(sp)
8002ab98:	10410007 	beq	v0,at,8002abb8 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h21b7b36c050b0ee7E+0x84>
8002ab9c:	00000000 	nop
8002aba0:	0800aaea 	j	8002aba8 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h21b7b36c050b0ee7E+0x74>
8002aba4:	00000000 	nop
            acquire!(inner.weak);
            unsafe {
                self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
            }
        }
    }
8002aba8:	8fbf003c 	lw	ra,60(sp)
8002abac:	27bd0040 	addiu	sp,sp,64
8002abb0:	03e00008 	jr	ra
8002abb4:	00000000 	nop
8002abb8:	24010002 	li	at,2
            acquire!(inner.weak);
8002abbc:	a3a10033 	sb	at,51(sp)
8002abc0:	93a40033 	lbu	a0,51(sp)
8002abc4:	0c009388 	jal	80024e20 <_ZN4core4sync6atomic5fence17h52296e36b6387b6dE>
8002abc8:	00000000 	nop
8002abcc:	8fa1001c 	lw	at,28(sp)
                self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
8002abd0:	24220004 	addiu	v0,at,4
8002abd4:	afa20010 	sw	v0,16(sp)
8002abd8:	8c240000 	lw	a0,0(at)
8002abdc:	0c008cf4 	jal	800233d0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h42c4d8057a45caf9E>
8002abe0:	00000000 	nop
8002abe4:	8fa1001c 	lw	at,28(sp)
8002abe8:	afa20014 	sw	v0,20(sp)
8002abec:	8c240000 	lw	a0,0(at)
8002abf0:	afa40038 	sw	a0,56(sp)
8002abf4:	0c00943d 	jal	800250f4 <_ZN4core5alloc6layout6Layout13for_value_raw17h3377abc1288301f2E>
8002abf8:	00000000 	nop
8002abfc:	8fa40010 	lw	a0,16(sp)
8002ac00:	8fa50014 	lw	a1,20(sp)
8002ac04:	00403025 	move	a2,v0
8002ac08:	00603825 	move	a3,v1
8002ac0c:	0c0081f6 	jal	800207d8 <_ZN48_$LT$$RF$A$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h9b551b2221fd2dceE>
8002ac10:	00000000 	nop
8002ac14:	0800aaea 	j	8002aba8 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h21b7b36c050b0ee7E+0x74>
8002ac18:	00000000 	nop

8002ac1c <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h181d71002ee560d6E>:
    fn deref(&self) -> &[T] {
8002ac1c:	27bdffe0 	addiu	sp,sp,-32
8002ac20:	afbf001c 	sw	ra,28(sp)
8002ac24:	afa40014 	sw	a0,20(sp)
8002ac28:	afa40018 	sw	a0,24(sp)
        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
8002ac2c:	0c00a354 	jal	80028d50 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h9e05305e907a4850E>
8002ac30:	00000000 	nop
8002ac34:	8fa10014 	lw	at,20(sp)
8002ac38:	00402025 	move	a0,v0
8002ac3c:	8c250008 	lw	a1,8(at)
8002ac40:	0c009577 	jal	800255dc <_ZN4core5slice3raw14from_raw_parts17ha6582de7ec239682E>
8002ac44:	00000000 	nop
    }
8002ac48:	8fbf001c 	lw	ra,28(sp)
8002ac4c:	27bd0020 	addiu	sp,sp,32
8002ac50:	03e00008 	jr	ra
8002ac54:	00000000 	nop

8002ac58 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h81709deb2750d0d5E>:
    fn deref(&self) -> &[T] {
8002ac58:	27bdffe0 	addiu	sp,sp,-32
8002ac5c:	afbf001c 	sw	ra,28(sp)
8002ac60:	afa40014 	sw	a0,20(sp)
8002ac64:	afa40018 	sw	a0,24(sp)
        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
8002ac68:	0c00a35d 	jal	80028d74 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hf0345009f98289e0E>
8002ac6c:	00000000 	nop
8002ac70:	8fa10014 	lw	at,20(sp)
8002ac74:	00402025 	move	a0,v0
8002ac78:	8c250008 	lw	a1,8(at)
8002ac7c:	0c009593 	jal	8002564c <_ZN4core5slice3raw14from_raw_parts17hbd0363c6ae5ed338E>
8002ac80:	00000000 	nop
    }
8002ac84:	8fbf001c 	lw	ra,28(sp)
8002ac88:	27bd0020 	addiu	sp,sp,32
8002ac8c:	03e00008 	jr	ra
8002ac90:	00000000 	nop

8002ac94 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hdad2804de09ebf1bE>:
    fn deref(&self) -> &[T] {
8002ac94:	27bdffe0 	addiu	sp,sp,-32
8002ac98:	afbf001c 	sw	ra,28(sp)
8002ac9c:	afa40014 	sw	a0,20(sp)
8002aca0:	afa40018 	sw	a0,24(sp)
        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
8002aca4:	0c00a34b 	jal	80028d2c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h829501f8939a52e5E>
8002aca8:	00000000 	nop
8002acac:	8fa10014 	lw	at,20(sp)
8002acb0:	00402025 	move	a0,v0
8002acb4:	8c250008 	lw	a1,8(at)
8002acb8:	0c00955b 	jal	8002556c <_ZN4core5slice3raw14from_raw_parts17h413d385a5ddbe99aE>
8002acbc:	00000000 	nop
    }
8002acc0:	8fbf001c 	lw	ra,28(sp)
8002acc4:	27bd0020 	addiu	sp,sp,32
8002acc8:	03e00008 	jr	ra
8002accc:	00000000 	nop

8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>:
    fn deref(&self) -> &T {
8002acd0:	27bdffe8 	addiu	sp,sp,-24
8002acd4:	afbf0014 	sw	ra,20(sp)
8002acd8:	afa40010 	sw	a0,16(sp)
        &self.inner().data
8002acdc:	0c00a3c4 	jal	80028f10 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$5inner17h2df8804a64a2e42bE>
8002ace0:	00000000 	nop
8002ace4:	24420008 	addiu	v0,v0,8
    }
8002ace8:	8fbf0014 	lw	ra,20(sp)
8002acec:	27bd0018 	addiu	sp,sp,24
8002acf0:	03e00008 	jr	ra
8002acf4:	00000000 	nop

8002acf8 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2feec4d0c6d8f526E>:
    fn deref_mut(&mut self) -> &mut T {
8002acf8:	27bdfff0 	addiu	sp,sp,-16
8002acfc:	afa40004 	sw	a0,4(sp)
8002ad00:	afa40008 	sw	a0,8(sp)
        unsafe { &mut *self.as_ptr() }
8002ad04:	8c820000 	lw	v0,0(a0)
8002ad08:	afa2000c 	sw	v0,12(sp)
8002ad0c:	27bd0010 	addiu	sp,sp,16
    }
8002ad10:	03e00008 	jr	ra
8002ad14:	00000000 	nop

8002ad18 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17hbc7da274b1fc061bE>:
            fn spec_write_fmt(self, args: Arguments<'_>) -> Result {
8002ad18:	27bdffb0 	addiu	sp,sp,-80
8002ad1c:	afbf004c 	sw	ra,76(sp)
8002ad20:	afa50014 	sw	a1,20(sp)
8002ad24:	00800825 	move	at,a0
8002ad28:	8fa40014 	lw	a0,20(sp)
8002ad2c:	afa10018 	sw	at,24(sp)
8002ad30:	afa10040 	sw	at,64(sp)
                if let Some(s) = args.as_statically_known_str() {
8002ad34:	0c00835c 	jal	80020d70 <_ZN4core3fmt9Arguments23as_statically_known_str17h91b747e551ac0b82E>
8002ad38:	00000000 	nop
8002ad3c:	afa20020 	sw	v0,32(sp)
8002ad40:	afa30024 	sw	v1,36(sp)
8002ad44:	8fa10020 	lw	at,32(sp)
8002ad48:	1020000d 	beqz	at,8002ad80 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17hbc7da274b1fc061bE+0x68>
8002ad4c:	00000000 	nop
8002ad50:	0800ab56 	j	8002ad58 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17hbc7da274b1fc061bE+0x40>
8002ad54:	00000000 	nop
8002ad58:	8fa40018 	lw	a0,24(sp)
8002ad5c:	8fa50020 	lw	a1,32(sp)
8002ad60:	8fa60024 	lw	a2,36(sp)
8002ad64:	afa50044 	sw	a1,68(sp)
8002ad68:	afa60048 	sw	a2,72(sp)
                    self.write_str(s)
8002ad6c:	0c00b414 	jal	8002d050 <_ZN60_$LT$mos_6502..print..Stdout$u20$as$u20$core..fmt..Write$GT$9write_str17h298c6c8c2ecb7df6E>
8002ad70:	00000000 	nop
8002ad74:	a3a2001f 	sb	v0,31(sp)
8002ad78:	0800ab76 	j	8002add8 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17hbc7da274b1fc061bE+0xc0>
8002ad7c:	00000000 	nop
                    write(self, args)
8002ad80:	8fa40018 	lw	a0,24(sp)
8002ad84:	8fa10014 	lw	at,20(sp)
8002ad88:	8c220014 	lw	v0,20(at)
8002ad8c:	afa2003c 	sw	v0,60(sp)
8002ad90:	8c220010 	lw	v0,16(at)
8002ad94:	afa20038 	sw	v0,56(sp)
8002ad98:	8c22000c 	lw	v0,12(at)
8002ad9c:	afa20034 	sw	v0,52(sp)
8002ada0:	8c220008 	lw	v0,8(at)
8002ada4:	afa20030 	sw	v0,48(sp)
8002ada8:	8c220004 	lw	v0,4(at)
8002adac:	afa2002c 	sw	v0,44(sp)
8002adb0:	8c210000 	lw	at,0(at)
8002adb4:	afa10028 	sw	at,40(sp)
8002adb8:	3c018105 	lui	at,0x8105
8002adbc:	2425d178 	addiu	a1,at,-11912
8002adc0:	27a60028 	addiu	a2,sp,40
8002adc4:	0c00fbe6 	jal	8003ef98 <_ZN4core3fmt5write17h6036e54969122141E>
8002adc8:	00000000 	nop
8002adcc:	a3a2001f 	sb	v0,31(sp)
8002add0:	0800ab76 	j	8002add8 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17hbc7da274b1fc061bE+0xc0>
8002add4:	00000000 	nop
            }
8002add8:	93a1001f 	lbu	at,31(sp)
8002addc:	30220001 	andi	v0,at,0x1
8002ade0:	8fbf004c 	lw	ra,76(sp)
8002ade4:	27bd0050 	addiu	sp,sp,80
8002ade8:	03e00008 	jr	ra
8002adec:	00000000 	nop

8002adf0 <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h35d9669d0fbfb917E>:
    fn deref_mut(&mut self) -> &mut [T] {
8002adf0:	27bdffe0 	addiu	sp,sp,-32
8002adf4:	afbf001c 	sw	ra,28(sp)
8002adf8:	afa40014 	sw	a0,20(sp)
8002adfc:	afa40018 	sw	a0,24(sp)
        unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
8002ae00:	0c00a1ff 	jal	800287fc <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h88b58b9ee077356cE>
8002ae04:	00000000 	nop
8002ae08:	8fa10014 	lw	at,20(sp)
8002ae0c:	00402025 	move	a0,v0
8002ae10:	8c250008 	lw	a1,8(at)
8002ae14:	0c0095ed 	jal	800257b4 <_ZN4core5slice3raw18from_raw_parts_mut17h4f51fd8f1dd8b743E>
8002ae18:	00000000 	nop
    }
8002ae1c:	8fbf001c 	lw	ra,28(sp)
8002ae20:	27bd0020 	addiu	sp,sp,32
8002ae24:	03e00008 	jr	ra
8002ae28:	00000000 	nop

8002ae2c <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hee2e4ccdfec18d6dE>:
    fn deref_mut(&mut self) -> &mut [T] {
8002ae2c:	27bdffe0 	addiu	sp,sp,-32
8002ae30:	afbf001c 	sw	ra,28(sp)
8002ae34:	afa40014 	sw	a0,20(sp)
8002ae38:	afa40018 	sw	a0,24(sp)
        unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
8002ae3c:	0c00a1f6 	jal	800287d8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h76e38f988b90ebefE>
8002ae40:	00000000 	nop
8002ae44:	8fa10014 	lw	at,20(sp)
8002ae48:	00402025 	move	a0,v0
8002ae4c:	8c250008 	lw	a1,8(at)
8002ae50:	0c0095d1 	jal	80025744 <_ZN4core5slice3raw18from_raw_parts_mut17h4ad61fdf9ebe15c9E>
8002ae54:	00000000 	nop
    }
8002ae58:	8fbf001c 	lw	ra,28(sp)
8002ae5c:	27bd0020 	addiu	sp,sp,32
8002ae60:	03e00008 	jr	ra
8002ae64:	00000000 	nop

8002ae68 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h99b7bac897557df0E>:
    fn index(self, slice: &[T]) -> &T {
8002ae68:	27bdffd0 	addiu	sp,sp,-48
8002ae6c:	afa70014 	sw	a3,20(sp)
8002ae70:	afa60018 	sw	a2,24(sp)
8002ae74:	afa5001c 	sw	a1,28(sp)
8002ae78:	afa40020 	sw	a0,32(sp)
8002ae7c:	afa40024 	sw	a0,36(sp)
8002ae80:	afa50028 	sw	a1,40(sp)
8002ae84:	afa6002c 	sw	a2,44(sp)
        &(*slice)[self]
8002ae88:	0086082b 	sltu	at,a0,a2
8002ae8c:	1020000c 	beqz	at,8002aec0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h99b7bac897557df0E+0x58>
8002ae90:	00000000 	nop
8002ae94:	0800aba7 	j	8002ae9c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h99b7bac897557df0E+0x34>
8002ae98:	00000000 	nop
8002ae9c:	8fa1001c 	lw	at,28(sp)
8002aea0:	8fa20020 	lw	v0,32(sp)
8002aea4:	00021880 	sll	v1,v0,0x2
8002aea8:	000210c0 	sll	v0,v0,0x3
8002aeac:	00431021 	addu	v0,v0,v1
8002aeb0:	00221021 	addu	v0,at,v0
8002aeb4:	27bd0030 	addiu	sp,sp,48
    }
8002aeb8:	03e00008 	jr	ra
8002aebc:	00000000 	nop
        &(*slice)[self]
8002aec0:	8fa60014 	lw	a2,20(sp)
8002aec4:	8fa50018 	lw	a1,24(sp)
8002aec8:	8fa40020 	lw	a0,32(sp)
8002aecc:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002aed0:	00000000 	nop

8002aed4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17had6431dbf3e5f541E>:
    fn index(self, slice: &[T]) -> &T {
8002aed4:	27bdffd0 	addiu	sp,sp,-48
8002aed8:	afa70014 	sw	a3,20(sp)
8002aedc:	afa60018 	sw	a2,24(sp)
8002aee0:	afa5001c 	sw	a1,28(sp)
8002aee4:	afa40020 	sw	a0,32(sp)
8002aee8:	afa40024 	sw	a0,36(sp)
8002aeec:	afa50028 	sw	a1,40(sp)
8002aef0:	afa6002c 	sw	a2,44(sp)
        &(*slice)[self]
8002aef4:	0086082b 	sltu	at,a0,a2
8002aef8:	1020000e 	beqz	at,8002af34 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17had6431dbf3e5f541E+0x60>
8002aefc:	00000000 	nop
8002af00:	0800abc2 	j	8002af08 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17had6431dbf3e5f541E+0x34>
8002af04:	00000000 	nop
8002af08:	8fa1001c 	lw	at,28(sp)
8002af0c:	8fa20020 	lw	v0,32(sp)
8002af10:	00022080 	sll	a0,v0,0x2
8002af14:	00021940 	sll	v1,v0,0x5
8002af18:	00641821 	addu	v1,v1,a0
8002af1c:	00021200 	sll	v0,v0,0x8
8002af20:	00431023 	subu	v0,v0,v1
8002af24:	00221021 	addu	v0,at,v0
8002af28:	27bd0030 	addiu	sp,sp,48
    }
8002af2c:	03e00008 	jr	ra
8002af30:	00000000 	nop
        &(*slice)[self]
8002af34:	8fa60014 	lw	a2,20(sp)
8002af38:	8fa50018 	lw	a1,24(sp)
8002af3c:	8fa40020 	lw	a0,32(sp)
8002af40:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002af44:	00000000 	nop

8002af48 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h16ba6ec526ba9b19E>:
    fn index_mut(self, slice: &mut [T]) -> &mut T {
8002af48:	27bdffd0 	addiu	sp,sp,-48
8002af4c:	afa70014 	sw	a3,20(sp)
8002af50:	afa60018 	sw	a2,24(sp)
8002af54:	afa5001c 	sw	a1,28(sp)
8002af58:	afa40020 	sw	a0,32(sp)
8002af5c:	afa40024 	sw	a0,36(sp)
8002af60:	afa50028 	sw	a1,40(sp)
8002af64:	afa6002c 	sw	a2,44(sp)
        &mut (*slice)[self]
8002af68:	0086082b 	sltu	at,a0,a2
8002af6c:	1020000e 	beqz	at,8002afa8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h16ba6ec526ba9b19E+0x60>
8002af70:	00000000 	nop
8002af74:	0800abdf 	j	8002af7c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h16ba6ec526ba9b19E+0x34>
8002af78:	00000000 	nop
8002af7c:	8fa1001c 	lw	at,28(sp)
8002af80:	8fa20020 	lw	v0,32(sp)
8002af84:	00022080 	sll	a0,v0,0x2
8002af88:	00021940 	sll	v1,v0,0x5
8002af8c:	00641821 	addu	v1,v1,a0
8002af90:	00021200 	sll	v0,v0,0x8
8002af94:	00431023 	subu	v0,v0,v1
8002af98:	00221021 	addu	v0,at,v0
8002af9c:	27bd0030 	addiu	sp,sp,48
    }
8002afa0:	03e00008 	jr	ra
8002afa4:	00000000 	nop
        &mut (*slice)[self]
8002afa8:	8fa60014 	lw	a2,20(sp)
8002afac:	8fa50018 	lw	a1,24(sp)
8002afb0:	8fa40020 	lw	a0,32(sp)
8002afb4:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002afb8:	00000000 	nop

8002afbc <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h1a4e1347bb061092E>:
    fn index_mut(self, slice: &mut [T]) -> &mut T {
8002afbc:	27bdffd0 	addiu	sp,sp,-48
8002afc0:	afa70014 	sw	a3,20(sp)
8002afc4:	afa60018 	sw	a2,24(sp)
8002afc8:	afa5001c 	sw	a1,28(sp)
8002afcc:	afa40020 	sw	a0,32(sp)
8002afd0:	afa40024 	sw	a0,36(sp)
8002afd4:	afa50028 	sw	a1,40(sp)
8002afd8:	afa6002c 	sw	a2,44(sp)
        &mut (*slice)[self]
8002afdc:	0086082b 	sltu	at,a0,a2
8002afe0:	1020000c 	beqz	at,8002b014 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h1a4e1347bb061092E+0x58>
8002afe4:	00000000 	nop
8002afe8:	0800abfc 	j	8002aff0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h1a4e1347bb061092E+0x34>
8002afec:	00000000 	nop
8002aff0:	8fa1001c 	lw	at,28(sp)
8002aff4:	8fa20020 	lw	v0,32(sp)
8002aff8:	00021880 	sll	v1,v0,0x2
8002affc:	000210c0 	sll	v0,v0,0x3
8002b000:	00431021 	addu	v0,v0,v1
8002b004:	00221021 	addu	v0,at,v0
8002b008:	27bd0030 	addiu	sp,sp,48
    }
8002b00c:	03e00008 	jr	ra
8002b010:	00000000 	nop
        &mut (*slice)[self]
8002b014:	8fa60014 	lw	a2,20(sp)
8002b018:	8fa50018 	lw	a1,24(sp)
8002b01c:	8fa40020 	lw	a0,32(sp)
8002b020:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002b024:	00000000 	nop

8002b028 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h37af461b48751fe2E>:
pub struct SpinlockGuard<'a, T> {
    lock: &'a Spinlock<T>,
}

impl<'a, T> Drop for SpinlockGuard<'a, T> {
    fn drop(&mut self) {
8002b028:	27bdffe0 	addiu	sp,sp,-32
8002b02c:	afbf001c 	sw	ra,28(sp)
8002b030:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8002b034:	8c810000 	lw	at,0(a0)
8002b038:	24240004 	addiu	a0,at,4
8002b03c:	24010001 	li	at,1
8002b040:	a3a10017 	sb	at,23(sp)
8002b044:	93a60017 	lbu	a2,23(sp)
8002b048:	24050000 	li	a1,0
8002b04c:	0c009087 	jal	8002421c <_ZN4core4sync6atomic10AtomicBool5store17hd204b6b24ee328d4E>
8002b050:	00000000 	nop
    }
8002b054:	8fbf001c 	lw	ra,28(sp)
8002b058:	27bd0020 	addiu	sp,sp,32
8002b05c:	03e00008 	jr	ra
8002b060:	00000000 	nop

8002b064 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7ae85152e90520ddE>:
    fn drop(&mut self) {
8002b064:	27bdffe0 	addiu	sp,sp,-32
8002b068:	afbf001c 	sw	ra,28(sp)
8002b06c:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8002b070:	8c810000 	lw	at,0(a0)
8002b074:	2424000c 	addiu	a0,at,12
8002b078:	24010001 	li	at,1
8002b07c:	a3a10017 	sb	at,23(sp)
8002b080:	93a60017 	lbu	a2,23(sp)
8002b084:	24050000 	li	a1,0
8002b088:	0c009087 	jal	8002421c <_ZN4core4sync6atomic10AtomicBool5store17hd204b6b24ee328d4E>
8002b08c:	00000000 	nop
    }
8002b090:	8fbf001c 	lw	ra,28(sp)
8002b094:	27bd0020 	addiu	sp,sp,32
8002b098:	03e00008 	jr	ra
8002b09c:	00000000 	nop

8002b0a0 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hac47ac83e465d440E>:
    fn drop(&mut self) {
8002b0a0:	27bdffe0 	addiu	sp,sp,-32
8002b0a4:	afbf001c 	sw	ra,28(sp)
8002b0a8:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8002b0ac:	8c840000 	lw	a0,0(a0)
8002b0b0:	24010001 	li	at,1
8002b0b4:	a3a10017 	sb	at,23(sp)
8002b0b8:	93a60017 	lbu	a2,23(sp)
8002b0bc:	24050000 	li	a1,0
8002b0c0:	0c009087 	jal	8002421c <_ZN4core4sync6atomic10AtomicBool5store17hd204b6b24ee328d4E>
8002b0c4:	00000000 	nop
    }
8002b0c8:	8fbf001c 	lw	ra,28(sp)
8002b0cc:	27bd0020 	addiu	sp,sp,32
8002b0d0:	03e00008 	jr	ra
8002b0d4:	00000000 	nop

8002b0d8 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd01723aa21cc6706E>:
    fn drop(&mut self) {
8002b0d8:	27bdffe0 	addiu	sp,sp,-32
8002b0dc:	afbf001c 	sw	ra,28(sp)
8002b0e0:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8002b0e4:	8c810000 	lw	at,0(a0)
8002b0e8:	24240008 	addiu	a0,at,8
8002b0ec:	24010001 	li	at,1
8002b0f0:	a3a10017 	sb	at,23(sp)
8002b0f4:	93a60017 	lbu	a2,23(sp)
8002b0f8:	24050000 	li	a1,0
8002b0fc:	0c009087 	jal	8002421c <_ZN4core4sync6atomic10AtomicBool5store17hd204b6b24ee328d4E>
8002b100:	00000000 	nop
    }
8002b104:	8fbf001c 	lw	ra,28(sp)
8002b108:	27bd0020 	addiu	sp,sp,32
8002b10c:	03e00008 	jr	ra
8002b110:	00000000 	nop

8002b114 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd34e950b06f698efE>:
    fn drop(&mut self) {
8002b114:	27bdffe0 	addiu	sp,sp,-32
8002b118:	afbf001c 	sw	ra,28(sp)
8002b11c:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8002b120:	8c810000 	lw	at,0(a0)
8002b124:	2424000c 	addiu	a0,at,12
8002b128:	24010001 	li	at,1
8002b12c:	a3a10017 	sb	at,23(sp)
8002b130:	93a60017 	lbu	a2,23(sp)
8002b134:	24050000 	li	a1,0
8002b138:	0c009087 	jal	8002421c <_ZN4core4sync6atomic10AtomicBool5store17hd204b6b24ee328d4E>
8002b13c:	00000000 	nop
    }
8002b140:	8fbf001c 	lw	ra,28(sp)
8002b144:	27bd0020 	addiu	sp,sp,32
8002b148:	03e00008 	jr	ra
8002b14c:	00000000 	nop

8002b150 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd9c5374843be042dE>:
    fn drop(&mut self) {
8002b150:	27bdffe0 	addiu	sp,sp,-32
8002b154:	afbf001c 	sw	ra,28(sp)
8002b158:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8002b15c:	8c810000 	lw	at,0(a0)
8002b160:	24240004 	addiu	a0,at,4
8002b164:	24010001 	li	at,1
8002b168:	a3a10017 	sb	at,23(sp)
8002b16c:	93a60017 	lbu	a2,23(sp)
8002b170:	24050000 	li	a1,0
8002b174:	0c009087 	jal	8002421c <_ZN4core4sync6atomic10AtomicBool5store17hd204b6b24ee328d4E>
8002b178:	00000000 	nop
    }
8002b17c:	8fbf001c 	lw	ra,28(sp)
8002b180:	27bd0020 	addiu	sp,sp,32
8002b184:	03e00008 	jr	ra
8002b188:	00000000 	nop

8002b18c <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17he2cc50fe24ba84c5E>:
    fn drop(&mut self) {
8002b18c:	27bdffe0 	addiu	sp,sp,-32
8002b190:	afbf001c 	sw	ra,28(sp)
8002b194:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8002b198:	8c810000 	lw	at,0(a0)
8002b19c:	2424000c 	addiu	a0,at,12
8002b1a0:	24010001 	li	at,1
8002b1a4:	a3a10017 	sb	at,23(sp)
8002b1a8:	93a60017 	lbu	a2,23(sp)
8002b1ac:	24050000 	li	a1,0
8002b1b0:	0c009087 	jal	8002421c <_ZN4core4sync6atomic10AtomicBool5store17hd204b6b24ee328d4E>
8002b1b4:	00000000 	nop
    }
8002b1b8:	8fbf001c 	lw	ra,28(sp)
8002b1bc:	27bd0020 	addiu	sp,sp,32
8002b1c0:	03e00008 	jr	ra
8002b1c4:	00000000 	nop

8002b1c8 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hfa0945e6c7ea9440E>:
    fn drop(&mut self) {
8002b1c8:	27bdffe0 	addiu	sp,sp,-32
8002b1cc:	afbf001c 	sw	ra,28(sp)
8002b1d0:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8002b1d4:	8c810000 	lw	at,0(a0)
8002b1d8:	24240008 	addiu	a0,at,8
8002b1dc:	24010001 	li	at,1
8002b1e0:	a3a10017 	sb	at,23(sp)
8002b1e4:	93a60017 	lbu	a2,23(sp)
8002b1e8:	24050000 	li	a1,0
8002b1ec:	0c009087 	jal	8002421c <_ZN4core4sync6atomic10AtomicBool5store17hd204b6b24ee328d4E>
8002b1f0:	00000000 	nop
    }
8002b1f4:	8fbf001c 	lw	ra,28(sp)
8002b1f8:	27bd0020 	addiu	sp,sp,32
8002b1fc:	03e00008 	jr	ra
8002b200:	00000000 	nop

8002b204 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3795f766eb4d33e3E>:
    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
}

unsafe impl<#[may_dangle] T, A: Allocator> Drop for RawVec<T, A> {
    /// Frees the memory owned by the `RawVec` *without* trying to drop its contents.
    fn drop(&mut self) {
8002b204:	27bdffc8 	addiu	sp,sp,-56
8002b208:	afbf0034 	sw	ra,52(sp)
8002b20c:	00802825 	move	a1,a0
8002b210:	afa50014 	sw	a1,20(sp)
8002b214:	afa50024 	sw	a1,36(sp)
8002b218:	27a40018 	addiu	a0,sp,24
        if let Some((ptr, layout)) = self.current_memory() {
8002b21c:	0c00a52a 	jal	800294a8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h1c76a0a2f758789cE>
8002b220:	00000000 	nop
8002b224:	8fa1001c 	lw	at,28(sp)
8002b228:	1020000f 	beqz	at,8002b268 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3795f766eb4d33e3E+0x64>
8002b22c:	00000000 	nop
8002b230:	0800ac8e 	j	8002b238 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3795f766eb4d33e3E+0x34>
8002b234:	00000000 	nop
8002b238:	8fa10014 	lw	at,20(sp)
8002b23c:	8fa50018 	lw	a1,24(sp)
8002b240:	afa50028 	sw	a1,40(sp)
8002b244:	8fa6001c 	lw	a2,28(sp)
8002b248:	8fa70020 	lw	a3,32(sp)
8002b24c:	afa6002c 	sw	a2,44(sp)
8002b250:	afa70030 	sw	a3,48(sp)
            unsafe { self.alloc.deallocate(ptr, layout) }
8002b254:	24240008 	addiu	a0,at,8
8002b258:	0c00a952 	jal	8002a548 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4828aa49855ab74bE>
8002b25c:	00000000 	nop
8002b260:	0800ac9a 	j	8002b268 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3795f766eb4d33e3E+0x64>
8002b264:	00000000 	nop
        }
    }
8002b268:	8fbf0034 	lw	ra,52(sp)
8002b26c:	27bd0038 	addiu	sp,sp,56
8002b270:	03e00008 	jr	ra
8002b274:	00000000 	nop

8002b278 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h82a934d90c5bbe9eE>:
    fn drop(&mut self) {
8002b278:	27bdffc8 	addiu	sp,sp,-56
8002b27c:	afbf0034 	sw	ra,52(sp)
8002b280:	00802825 	move	a1,a0
8002b284:	afa50014 	sw	a1,20(sp)
8002b288:	afa50024 	sw	a1,36(sp)
8002b28c:	27a40018 	addiu	a0,sp,24
        if let Some((ptr, layout)) = self.current_memory() {
8002b290:	0c00a5a8 	jal	800296a0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hadeffd32dff95350E>
8002b294:	00000000 	nop
8002b298:	8fa1001c 	lw	at,28(sp)
8002b29c:	1020000f 	beqz	at,8002b2dc <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h82a934d90c5bbe9eE+0x64>
8002b2a0:	00000000 	nop
8002b2a4:	0800acab 	j	8002b2ac <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h82a934d90c5bbe9eE+0x34>
8002b2a8:	00000000 	nop
8002b2ac:	8fa10014 	lw	at,20(sp)
8002b2b0:	8fa50018 	lw	a1,24(sp)
8002b2b4:	afa50028 	sw	a1,40(sp)
8002b2b8:	8fa6001c 	lw	a2,28(sp)
8002b2bc:	8fa70020 	lw	a3,32(sp)
8002b2c0:	afa6002c 	sw	a2,44(sp)
8002b2c4:	afa70030 	sw	a3,48(sp)
            unsafe { self.alloc.deallocate(ptr, layout) }
8002b2c8:	24240008 	addiu	a0,at,8
8002b2cc:	0c00a952 	jal	8002a548 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4828aa49855ab74bE>
8002b2d0:	00000000 	nop
8002b2d4:	0800acb7 	j	8002b2dc <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h82a934d90c5bbe9eE+0x64>
8002b2d8:	00000000 	nop
    }
8002b2dc:	8fbf0034 	lw	ra,52(sp)
8002b2e0:	27bd0038 	addiu	sp,sp,56
8002b2e4:	03e00008 	jr	ra
8002b2e8:	00000000 	nop

8002b2ec <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc7610c512fe89e5fE>:
    fn drop(&mut self) {
8002b2ec:	27bdffc8 	addiu	sp,sp,-56
8002b2f0:	afbf0034 	sw	ra,52(sp)
8002b2f4:	00802825 	move	a1,a0
8002b2f8:	afa50014 	sw	a1,20(sp)
8002b2fc:	afa50024 	sw	a1,36(sp)
8002b300:	27a40018 	addiu	a0,sp,24
        if let Some((ptr, layout)) = self.current_memory() {
8002b304:	0c00a4ed 	jal	800293b4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h002f4768f944ce89E>
8002b308:	00000000 	nop
8002b30c:	8fa1001c 	lw	at,28(sp)
8002b310:	1020000f 	beqz	at,8002b350 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc7610c512fe89e5fE+0x64>
8002b314:	00000000 	nop
8002b318:	0800acc8 	j	8002b320 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc7610c512fe89e5fE+0x34>
8002b31c:	00000000 	nop
8002b320:	8fa10014 	lw	at,20(sp)
8002b324:	8fa50018 	lw	a1,24(sp)
8002b328:	afa50028 	sw	a1,40(sp)
8002b32c:	8fa6001c 	lw	a2,28(sp)
8002b330:	8fa70020 	lw	a3,32(sp)
8002b334:	afa6002c 	sw	a2,44(sp)
8002b338:	afa70030 	sw	a3,48(sp)
            unsafe { self.alloc.deallocate(ptr, layout) }
8002b33c:	24240008 	addiu	a0,at,8
8002b340:	0c00a952 	jal	8002a548 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4828aa49855ab74bE>
8002b344:	00000000 	nop
8002b348:	0800acd4 	j	8002b350 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc7610c512fe89e5fE+0x64>
8002b34c:	00000000 	nop
    }
8002b350:	8fbf0034 	lw	ra,52(sp)
8002b354:	27bd0038 	addiu	sp,sp,56
8002b358:	03e00008 	jr	ra
8002b35c:	00000000 	nop

8002b360 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hfe8fb7d1e318c03fE>:
    fn drop(&mut self) {
8002b360:	27bdffc8 	addiu	sp,sp,-56
8002b364:	afbf0034 	sw	ra,52(sp)
8002b368:	00802825 	move	a1,a0
8002b36c:	afa50014 	sw	a1,20(sp)
8002b370:	afa50024 	sw	a1,36(sp)
8002b374:	27a40018 	addiu	a0,sp,24
        if let Some((ptr, layout)) = self.current_memory() {
8002b378:	0c00a568 	jal	800295a0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h789acbee032259d8E>
8002b37c:	00000000 	nop
8002b380:	8fa1001c 	lw	at,28(sp)
8002b384:	1020000f 	beqz	at,8002b3c4 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hfe8fb7d1e318c03fE+0x64>
8002b388:	00000000 	nop
8002b38c:	0800ace5 	j	8002b394 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hfe8fb7d1e318c03fE+0x34>
8002b390:	00000000 	nop
8002b394:	8fa10014 	lw	at,20(sp)
8002b398:	8fa50018 	lw	a1,24(sp)
8002b39c:	afa50028 	sw	a1,40(sp)
8002b3a0:	8fa6001c 	lw	a2,28(sp)
8002b3a4:	8fa70020 	lw	a3,32(sp)
8002b3a8:	afa6002c 	sw	a2,44(sp)
8002b3ac:	afa70030 	sw	a3,48(sp)
            unsafe { self.alloc.deallocate(ptr, layout) }
8002b3b0:	24240008 	addiu	a0,at,8
8002b3b4:	0c00a952 	jal	8002a548 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h4828aa49855ab74bE>
8002b3b8:	00000000 	nop
8002b3bc:	0800acf1 	j	8002b3c4 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hfe8fb7d1e318c03fE+0x64>
8002b3c0:	00000000 	nop
    }
8002b3c4:	8fbf0034 	lw	ra,52(sp)
8002b3c8:	27bd0038 	addiu	sp,sp,56
8002b3cc:	03e00008 	jr	ra
8002b3d0:	00000000 	nop

8002b3d4 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h8fd0c6612c7e9fb8E>:

#[stable(feature = "nonnull", since = "1.25.0")]
impl<T: ?Sized> PartialEq for NonNull<T> {
    #[inline]
    #[allow(ambiguous_wide_pointer_comparisons)]
    fn eq(&self, other: &Self) -> bool {
8002b3d4:	27bdfff0 	addiu	sp,sp,-16
8002b3d8:	afa40000 	sw	a0,0(sp)
8002b3dc:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
8002b3e0:	8c810000 	lw	at,0(a0)
8002b3e4:	afa1000c 	sw	at,12(sp)
8002b3e8:	8ca20000 	lw	v0,0(a1)
8002b3ec:	afa20008 	sw	v0,8(sp)
8002b3f0:	00220826 	xor	at,at,v0
8002b3f4:	2c220001 	sltiu	v0,at,1
8002b3f8:	27bd0010 	addiu	sp,sp,16
    }
8002b3fc:	03e00008 	jr	ra
8002b400:	00000000 	nop

8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>:
}

impl<'a, T> core::ops::Deref for SpinlockGuard<'a, T> {
    type Target = T;

    fn deref(&self) -> &T {
8002b404:	27bdfff8 	addiu	sp,sp,-8
8002b408:	afa40000 	sw	a0,0(sp)
        unsafe { &*self.lock.data.get() }
8002b40c:	8c820000 	lw	v0,0(a0)
8002b410:	afa20004 	sw	v0,4(sp)
8002b414:	27bd0008 	addiu	sp,sp,8
    }
8002b418:	03e00008 	jr	ra
8002b41c:	00000000 	nop

8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>:
    fn deref(&self) -> &T {
8002b420:	27bdfff8 	addiu	sp,sp,-8
8002b424:	afa40000 	sw	a0,0(sp)
        unsafe { &*self.lock.data.get() }
8002b428:	8c820000 	lw	v0,0(a0)
8002b42c:	afa20004 	sw	v0,4(sp)
8002b430:	27bd0008 	addiu	sp,sp,8
    }
8002b434:	03e00008 	jr	ra
8002b438:	00000000 	nop

8002b43c <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3a0f34af52e01fabE>:
    fn deref(&self) -> &T {
8002b43c:	27bdfff8 	addiu	sp,sp,-8
8002b440:	afa40000 	sw	a0,0(sp)
        unsafe { &*self.lock.data.get() }
8002b444:	8c820000 	lw	v0,0(a0)
8002b448:	afa20004 	sw	v0,4(sp)
8002b44c:	27bd0008 	addiu	sp,sp,8
    }
8002b450:	03e00008 	jr	ra
8002b454:	00000000 	nop

8002b458 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3ddafff8840f2a13E>:
    fn deref(&self) -> &T {
8002b458:	27bdfff8 	addiu	sp,sp,-8
8002b45c:	afa40000 	sw	a0,0(sp)
        unsafe { &*self.lock.data.get() }
8002b460:	8c820000 	lw	v0,0(a0)
8002b464:	afa20004 	sw	v0,4(sp)
8002b468:	27bd0008 	addiu	sp,sp,8
    }
8002b46c:	03e00008 	jr	ra
8002b470:	00000000 	nop

8002b474 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h4afbedf5a8873a0aE>:
    fn deref(&self) -> &T {
8002b474:	27bdfff8 	addiu	sp,sp,-8
8002b478:	afa40000 	sw	a0,0(sp)
        unsafe { &*self.lock.data.get() }
8002b47c:	8c820000 	lw	v0,0(a0)
8002b480:	afa20004 	sw	v0,4(sp)
8002b484:	27bd0008 	addiu	sp,sp,8
    }
8002b488:	03e00008 	jr	ra
8002b48c:	00000000 	nop

8002b490 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17ha580692a78d50a4dE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8002b490:	27bdffd8 	addiu	sp,sp,-40
8002b494:	afa50004 	sw	a1,4(sp)
8002b498:	afa40008 	sw	a0,8(sp)
8002b49c:	afa4000c 	sw	a0,12(sp)
        match self {
8002b4a0:	8ca10000 	lw	at,0(a1)
8002b4a4:	1420000e 	bnez	at,8002b4e0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17ha580692a78d50a4dE+0x50>
8002b4a8:	00000000 	nop
8002b4ac:	0800ad2d 	j	8002b4b4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17ha580692a78d50a4dE+0x24>
8002b4b0:	00000000 	nop
            Ok(v) => ControlFlow::Continue(v),
8002b4b4:	8fa10008 	lw	at,8(sp)
8002b4b8:	8fa20004 	lw	v0,4(sp)
8002b4bc:	8c430004 	lw	v1,4(v0)
8002b4c0:	8c420008 	lw	v0,8(v0)
8002b4c4:	afa30018 	sw	v1,24(sp)
8002b4c8:	afa2001c 	sw	v0,28(sp)
8002b4cc:	ac230004 	sw	v1,4(at)
8002b4d0:	ac220008 	sw	v0,8(at)
8002b4d4:	ac200000 	sw	zero,0(at)
8002b4d8:	0800ad48 	j	8002b520 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17ha580692a78d50a4dE+0x90>
8002b4dc:	00000000 	nop
            Err(e) => ControlFlow::Break(Err(e)),
8002b4e0:	8fa20008 	lw	v0,8(sp)
8002b4e4:	8fa10004 	lw	at,4(sp)
8002b4e8:	8c230004 	lw	v1,4(at)
8002b4ec:	8c210008 	lw	at,8(at)
8002b4f0:	afa30020 	sw	v1,32(sp)
8002b4f4:	afa10024 	sw	at,36(sp)
8002b4f8:	afa30010 	sw	v1,16(sp)
8002b4fc:	afa10014 	sw	at,20(sp)
8002b500:	8fa30010 	lw	v1,16(sp)
8002b504:	8fa10014 	lw	at,20(sp)
8002b508:	ac430004 	sw	v1,4(v0)
8002b50c:	ac410008 	sw	at,8(v0)
8002b510:	24010001 	li	at,1
8002b514:	ac410000 	sw	at,0(v0)
8002b518:	0800ad48 	j	8002b520 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17ha580692a78d50a4dE+0x90>
8002b51c:	00000000 	nop
    }
8002b520:	8fa2000c 	lw	v0,12(sp)
8002b524:	27bd0028 	addiu	sp,sp,40
8002b528:	03e00008 	jr	ra
8002b52c:	00000000 	nop

8002b530 <_ZN80_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..convert..AsMut$LT$T$GT$$GT$6as_mut17h49855ee6c6232af0E>:
    }
}

#[stable(since = "1.5.0", feature = "smart_ptr_as_ref")]
impl<T: ?Sized, A: Allocator> AsMut<T> for Box<T, A> {
    fn as_mut(&mut self) -> &mut T {
8002b530:	27bdfff8 	addiu	sp,sp,-8
8002b534:	afa40004 	sw	a0,4(sp)
        &mut **self
8002b538:	8c820000 	lw	v0,0(a0)
8002b53c:	27bd0008 	addiu	sp,sp,8
    }
8002b540:	03e00008 	jr	ra
8002b544:	00000000 	nop

8002b548 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hb87fda22e18ebe52E>:
    fn index(&self, index: I) -> &Self::Output {
8002b548:	27bdffd0 	addiu	sp,sp,-48
8002b54c:	afbf002c 	sw	ra,44(sp)
8002b550:	afa60014 	sw	a2,20(sp)
8002b554:	afa50010 	sw	a1,16(sp)
8002b558:	afa40018 	sw	a0,24(sp)
8002b55c:	afa5001c 	sw	a1,28(sp)
        Index::index(&**self, index)
8002b560:	0c00ab25 	jal	8002ac94 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hdad2804de09ebf1bE>
8002b564:	00000000 	nop
8002b568:	8fa40010 	lw	a0,16(sp)
8002b56c:	8fa70014 	lw	a3,20(sp)
8002b570:	00402825 	move	a1,v0
8002b574:	00603025 	move	a2,v1
8002b578:	afa50020 	sw	a1,32(sp)
8002b57c:	afa60024 	sw	a2,36(sp)
8002b580:	afa40028 	sw	a0,40(sp)
        index.index(self)
8002b584:	0c00ab9a 	jal	8002ae68 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h99b7bac897557df0E>
8002b588:	00000000 	nop
    }
8002b58c:	8fbf002c 	lw	ra,44(sp)
8002b590:	27bd0030 	addiu	sp,sp,48
8002b594:	03e00008 	jr	ra
8002b598:	00000000 	nop

8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>:
    fn index(&self, index: I) -> &Self::Output {
8002b59c:	27bdffd0 	addiu	sp,sp,-48
8002b5a0:	afbf002c 	sw	ra,44(sp)
8002b5a4:	afa60014 	sw	a2,20(sp)
8002b5a8:	afa50010 	sw	a1,16(sp)
8002b5ac:	afa40018 	sw	a0,24(sp)
8002b5b0:	afa5001c 	sw	a1,28(sp)
        Index::index(&**self, index)
8002b5b4:	0c00ab16 	jal	8002ac58 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h81709deb2750d0d5E>
8002b5b8:	00000000 	nop
8002b5bc:	8fa40010 	lw	a0,16(sp)
8002b5c0:	8fa70014 	lw	a3,20(sp)
8002b5c4:	00402825 	move	a1,v0
8002b5c8:	00603025 	move	a2,v1
8002b5cc:	afa50020 	sw	a1,32(sp)
8002b5d0:	afa60024 	sw	a2,36(sp)
8002b5d4:	afa40028 	sw	a0,40(sp)
8002b5d8:	0c00abb5 	jal	8002aed4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17had6431dbf3e5f541E>
8002b5dc:	00000000 	nop
    }
8002b5e0:	8fbf002c 	lw	ra,44(sp)
8002b5e4:	27bd0030 	addiu	sp,sp,48
8002b5e8:	03e00008 	jr	ra
8002b5ec:	00000000 	nop

8002b5f0 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3cba91d3402abfcfE>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<'a> Iterator for Chars<'a> {
    type Item = char;

    #[inline]
    fn next(&mut self) -> Option<char> {
8002b5f0:	27bdffe8 	addiu	sp,sp,-24
8002b5f4:	afbf0014 	sw	ra,20(sp)
8002b5f8:	afa40010 	sw	a0,16(sp)
        // SAFETY: `str` invariant says `self.iter` is a valid UTF-8 string and
        // the resulting `ch` is a valid Unicode Scalar Value.
        unsafe { next_code_point(&mut self.iter).map(|ch| char::from_u32_unchecked(ch)) }
8002b5fc:	0c011121 	jal	80044484 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E>
8002b600:	00000000 	nop
8002b604:	00402025 	move	a0,v0
8002b608:	00602825 	move	a1,v1
8002b60c:	0c00f116 	jal	8003c458 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE>
8002b610:	00000000 	nop
    }
8002b614:	8fbf0014 	lw	ra,20(sp)
8002b618:	27bd0018 	addiu	sp,sp,24
8002b61c:	03e00008 	jr	ra
8002b620:	00000000 	nop

8002b624 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h05e23529e4b1162bE>:
}

impl<'a, T> core::ops::DerefMut for SpinlockGuard<'a, T> {
    fn deref_mut(&mut self) -> &mut T {
8002b624:	27bdfff8 	addiu	sp,sp,-8
8002b628:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
8002b62c:	8c820000 	lw	v0,0(a0)
8002b630:	afa20004 	sw	v0,4(sp)
8002b634:	27bd0008 	addiu	sp,sp,8
    }
8002b638:	03e00008 	jr	ra
8002b63c:	00000000 	nop

8002b640 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4f3cf81814853911E>:
    fn deref_mut(&mut self) -> &mut T {
8002b640:	27bdfff8 	addiu	sp,sp,-8
8002b644:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
8002b648:	8c820000 	lw	v0,0(a0)
8002b64c:	afa20004 	sw	v0,4(sp)
8002b650:	27bd0008 	addiu	sp,sp,8
    }
8002b654:	03e00008 	jr	ra
8002b658:	00000000 	nop

8002b65c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h5e2ac1a0b7298187E>:
    fn deref_mut(&mut self) -> &mut T {
8002b65c:	27bdfff8 	addiu	sp,sp,-8
8002b660:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
8002b664:	8c820000 	lw	v0,0(a0)
8002b668:	afa20004 	sw	v0,4(sp)
8002b66c:	27bd0008 	addiu	sp,sp,8
    }
8002b670:	03e00008 	jr	ra
8002b674:	00000000 	nop

8002b678 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6712fe53c4d3d854E>:
    fn deref_mut(&mut self) -> &mut T {
8002b678:	27bdfff8 	addiu	sp,sp,-8
8002b67c:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
8002b680:	8c820000 	lw	v0,0(a0)
8002b684:	afa20004 	sw	v0,4(sp)
8002b688:	27bd0008 	addiu	sp,sp,8
    }
8002b68c:	03e00008 	jr	ra
8002b690:	00000000 	nop

8002b694 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7ebfdd9bd9706eb1E>:
    fn deref_mut(&mut self) -> &mut T {
8002b694:	27bdfff8 	addiu	sp,sp,-8
8002b698:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
8002b69c:	8c820000 	lw	v0,0(a0)
8002b6a0:	afa20004 	sw	v0,4(sp)
8002b6a4:	27bd0008 	addiu	sp,sp,8
    }
8002b6a8:	03e00008 	jr	ra
8002b6ac:	00000000 	nop

8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>:
    fn deref_mut(&mut self) -> &mut T {
8002b6b0:	27bdfff8 	addiu	sp,sp,-8
8002b6b4:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
8002b6b8:	8c820000 	lw	v0,0(a0)
8002b6bc:	afa20004 	sw	v0,4(sp)
8002b6c0:	27bd0008 	addiu	sp,sp,8
    }
8002b6c4:	03e00008 	jr	ra
8002b6c8:	00000000 	nop

8002b6cc <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc76053e0a705b1f2E>:
    fn deref_mut(&mut self) -> &mut T {
8002b6cc:	27bdfff8 	addiu	sp,sp,-8
8002b6d0:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
8002b6d4:	8c820000 	lw	v0,0(a0)
8002b6d8:	afa20004 	sw	v0,4(sp)
8002b6dc:	27bd0008 	addiu	sp,sp,8
    }
8002b6e0:	03e00008 	jr	ra
8002b6e4:	00000000 	nop

8002b6e8 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf0535cea5076f729E>:
    fn deref_mut(&mut self) -> &mut T {
8002b6e8:	27bdfff8 	addiu	sp,sp,-8
8002b6ec:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
8002b6f0:	8c810000 	lw	at,0(a0)
8002b6f4:	24220001 	addiu	v0,at,1
8002b6f8:	afa20004 	sw	v0,4(sp)
8002b6fc:	27bd0008 	addiu	sp,sp,8
    }
8002b700:	03e00008 	jr	ra
8002b704:	00000000 	nop

8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>:
    fn index_mut(&mut self, index: I) -> &mut Self::Output {
8002b708:	27bdffd0 	addiu	sp,sp,-48
8002b70c:	afbf002c 	sw	ra,44(sp)
8002b710:	afa60014 	sw	a2,20(sp)
8002b714:	afa50010 	sw	a1,16(sp)
8002b718:	afa40018 	sw	a0,24(sp)
8002b71c:	afa5001c 	sw	a1,28(sp)
        IndexMut::index_mut(&mut **self, index)
8002b720:	0c00ab7c 	jal	8002adf0 <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h35d9669d0fbfb917E>
8002b724:	00000000 	nop
8002b728:	8fa40010 	lw	a0,16(sp)
8002b72c:	8fa70014 	lw	a3,20(sp)
8002b730:	00402825 	move	a1,v0
8002b734:	00603025 	move	a2,v1
8002b738:	afa50020 	sw	a1,32(sp)
8002b73c:	afa60024 	sw	a2,36(sp)
8002b740:	afa40028 	sw	a0,40(sp)
        index.index_mut(self)
8002b744:	0c00abd2 	jal	8002af48 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h16ba6ec526ba9b19E>
8002b748:	00000000 	nop
    }
8002b74c:	8fbf002c 	lw	ra,44(sp)
8002b750:	27bd0030 	addiu	sp,sp,48
8002b754:	03e00008 	jr	ra
8002b758:	00000000 	nop

8002b75c <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hdd771664a10c7b91E>:
    fn index_mut(&mut self, index: I) -> &mut Self::Output {
8002b75c:	27bdffd0 	addiu	sp,sp,-48
8002b760:	afbf002c 	sw	ra,44(sp)
8002b764:	afa60014 	sw	a2,20(sp)
8002b768:	afa50010 	sw	a1,16(sp)
8002b76c:	afa40018 	sw	a0,24(sp)
8002b770:	afa5001c 	sw	a1,28(sp)
        IndexMut::index_mut(&mut **self, index)
8002b774:	0c00ab8b 	jal	8002ae2c <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hee2e4ccdfec18d6dE>
8002b778:	00000000 	nop
8002b77c:	8fa40010 	lw	a0,16(sp)
8002b780:	8fa70014 	lw	a3,20(sp)
8002b784:	00402825 	move	a1,v0
8002b788:	00603025 	move	a2,v1
8002b78c:	afa50020 	sw	a1,32(sp)
8002b790:	afa60024 	sw	a2,36(sp)
8002b794:	afa40028 	sw	a0,40(sp)
8002b798:	0c00abef 	jal	8002afbc <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h1a4e1347bb061092E>
8002b79c:	00000000 	nop
    }
8002b7a0:	8fbf002c 	lw	ra,44(sp)
8002b7a4:	27bd0030 	addiu	sp,sp,48
8002b7a8:	03e00008 	jr	ra
8002b7ac:	00000000 	nop

8002b7b0 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h62b6624e912c198cE>:
}

#[unstable(feature = "try_trait_v2", issue = "84277")]
impl<T> ops::FromResidual for Option<T> {
    #[inline]
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
8002b7b0:	27bdfff8 	addiu	sp,sp,-8
8002b7b4:	00801025 	move	v0,a0
        match residual {
            None => None,
8002b7b8:	ac800000 	sw	zero,0(a0)
8002b7bc:	27bd0008 	addiu	sp,sp,8
        }
    }
8002b7c0:	03e00008 	jr	ra
8002b7c4:	00000000 	nop

8002b7c8 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17h9ee86a43448771d0E>:
    }

    /**
    Get the flags value of this flag.
    */
    pub const fn value(&self) -> &B {
8002b7c8:	27bdfff8 	addiu	sp,sp,-8
8002b7cc:	afa40004 	sw	a0,4(sp)
        &self.value
8002b7d0:	24820008 	addiu	v0,a0,8
8002b7d4:	27bd0008 	addiu	sp,sp,8
    }
8002b7d8:	03e00008 	jr	ra
8002b7dc:	00000000 	nop

8002b7e0 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17heda53c7d1df8542bE>:
impl<T: ?Sized> From<&T> for NonNull<T> {
    /// Converts a `&T` to a `NonNull<T>`.
    ///
    /// This conversion is safe and infallible since references cannot be null.
    #[inline]
    fn from(reference: &T) -> Self {
8002b7e0:	27bdfff0 	addiu	sp,sp,-16
8002b7e4:	afa40008 	sw	a0,8(sp)
8002b7e8:	afa5000c 	sw	a1,12(sp)
        // SAFETY: A reference cannot be null.
        unsafe { NonNull { pointer: reference as *const T } }
8002b7ec:	afa40000 	sw	a0,0(sp)
8002b7f0:	afa50004 	sw	a1,4(sp)
    }
8002b7f4:	8fa20000 	lw	v0,0(sp)
8002b7f8:	8fa30004 	lw	v1,4(sp)
8002b7fc:	27bd0010 	addiu	sp,sp,16
8002b800:	03e00008 	jr	ra
8002b804:	00000000 	nop

8002b808 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h91714cb079cc8eeaE>:
        #[stable(feature = "rust1", since = "1.0.0")]
        impl<'a, T> Iterator for $name<'a, T> {
            type Item = $elem;

            #[inline]
            fn next(&mut self) -> Option<$elem> {
8002b808:	27bdffa0 	addiu	sp,sp,-96
8002b80c:	afbf005c 	sw	ra,92(sp)
8002b810:	afa40014 	sw	a0,20(sp)
8002b814:	afa40028 	sw	a0,40(sp)
                // could be implemented with slices, but this avoids bounds checks

                // SAFETY: The call to `next_unchecked!` is
                // safe since we check if the iterator is empty first.
                unsafe {
                    if is_empty!(self) {
8002b818:	0800ae08 	j	8002b820 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h91714cb079cc8eeaE+0x18>
8002b81c:	00000000 	nop
8002b820:	8fa40014 	lw	a0,20(sp)
8002b824:	24810004 	addiu	at,a0,4
8002b828:	afa10038 	sw	at,56(sp)
8002b82c:	8c810004 	lw	at,4(a0)
8002b830:	afa10020 	sw	at,32(sp)
8002b834:	27a50020 	addiu	a1,sp,32
8002b838:	0c00acf5 	jal	8002b3d4 <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h8fd0c6612c7e9fb8E>
8002b83c:	00000000 	nop
8002b840:	a3a2001f 	sb	v0,31(sp)
8002b844:	0800ae13 	j	8002b84c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h91714cb079cc8eeaE+0x44>
8002b848:	00000000 	nop
8002b84c:	93a1001f 	lbu	at,31(sp)
8002b850:	30210001 	andi	at,at,0x1
8002b854:	1420001c 	bnez	at,8002b8c8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h91714cb079cc8eeaE+0xc0>
8002b858:	00000000 	nop
8002b85c:	0800ae19 	j	8002b864 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h91714cb079cc8eeaE+0x5c>
8002b860:	00000000 	nop
8002b864:	8fa30014 	lw	v1,20(sp)
8002b868:	afa3003c 	sw	v1,60(sp)
8002b86c:	24040001 	li	a0,1
8002b870:	afa40040 	sw	a0,64(sp)
                let old = self.ptr;
8002b874:	8c610000 	lw	at,0(v1)
8002b878:	afa10044 	sw	at,68(sp)
                    if_zst!(mut self,
8002b87c:	24620004 	addiu	v0,v1,4
8002b880:	afa2004c 	sw	v0,76(sp)
8002b884:	afa20048 	sw	v0,72(sp)
                        _end => self.ptr = self.ptr.add(offset),
8002b888:	8c620000 	lw	v0,0(v1)
8002b88c:	afa20054 	sw	v0,84(sp)
8002b890:	afa40058 	sw	a0,88(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8002b894:	24420020 	addiu	v0,v0,32
8002b898:	afa20050 	sw	v0,80(sp)
    }
8002b89c:	8fa20050 	lw	v0,80(sp)
8002b8a0:	ac620000 	sw	v0,0(v1)
                        None
                    } else {
                        Some(next_unchecked!(self))
8002b8a4:	afa10024 	sw	at,36(sp)
8002b8a8:	27a10024 	addiu	at,sp,36
8002b8ac:	afa1002c 	sw	at,44(sp)
        unsafe { &*self.as_ptr().cast_const() }
8002b8b0:	8fa10024 	lw	at,36(sp)
8002b8b4:	afa10034 	sw	at,52(sp)
8002b8b8:	afa10030 	sw	at,48(sp)
8002b8bc:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
8002b8c0:	0800ae35 	j	8002b8d4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h91714cb079cc8eeaE+0xcc>
8002b8c4:	00000000 	nop
                        None
8002b8c8:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
8002b8cc:	0800ae35 	j	8002b8d4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h91714cb079cc8eeaE+0xcc>
8002b8d0:	00000000 	nop
                    }
                }
            }
8002b8d4:	8fa20018 	lw	v0,24(sp)
8002b8d8:	8fbf005c 	lw	ra,92(sp)
8002b8dc:	27bd0060 	addiu	sp,sp,96
8002b8e0:	03e00008 	jr	ra
8002b8e4:	00000000 	nop

8002b8e8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd0cc1702afaa7098E>:

            // We override the default implementation, which uses `try_fold`,
            // because this simple implementation generates less LLVM IR and is
            // faster to compile.
            #[inline]
            fn for_each<F>(mut self, mut f: F)
8002b8e8:	27bdffd0 	addiu	sp,sp,-48
8002b8ec:	afbf002c 	sw	ra,44(sp)
8002b8f0:	afa60014 	sw	a2,20(sp)
8002b8f4:	afa40018 	sw	a0,24(sp)
8002b8f8:	afa5001c 	sw	a1,28(sp)
            where
                Self: Sized,
                F: FnMut(Self::Item),
            {
                while let Some(x) = self.next() {
8002b8fc:	0800ae41 	j	8002b904 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd0cc1702afaa7098E+0x1c>
8002b900:	00000000 	nop
8002b904:	27a40018 	addiu	a0,sp,24
8002b908:	0c00ae02 	jal	8002b808 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h91714cb079cc8eeaE>
8002b90c:	00000000 	nop
8002b910:	afa20020 	sw	v0,32(sp)
8002b914:	8fa10020 	lw	at,32(sp)
8002b918:	1020000c 	beqz	at,8002b94c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd0cc1702afaa7098E+0x64>
8002b91c:	00000000 	nop
8002b920:	0800ae4a 	j	8002b928 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd0cc1702afaa7098E+0x40>
8002b924:	00000000 	nop
8002b928:	8fa40014 	lw	a0,20(sp)
8002b92c:	8fa10020 	lw	at,32(sp)
8002b930:	afa10028 	sw	at,40(sp)
                    f(x);
8002b934:	afa10024 	sw	at,36(sp)
8002b938:	8fa50024 	lw	a1,36(sp)
8002b93c:	0c00b84b 	jal	8002e12c <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E>
8002b940:	00000000 	nop
8002b944:	0800ae41 	j	8002b904 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd0cc1702afaa7098E+0x1c>
8002b948:	00000000 	nop
                }
            }
8002b94c:	8fbf002c 	lw	ra,44(sp)
8002b950:	27bd0030 	addiu	sp,sp,48
8002b954:	03e00008 	jr	ra
8002b958:	00000000 	nop

8002b95c <_ZN98_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h6720554aaa9e668aE>:
    fn from(reference: &mut T) -> Self {
8002b95c:	27bdfff8 	addiu	sp,sp,-8
8002b960:	afa40004 	sw	a0,4(sp)
        unsafe { NonNull { pointer: reference as *mut T } }
8002b964:	afa40000 	sw	a0,0(sp)
    }
8002b968:	8fa20000 	lw	v0,0(sp)
8002b96c:	27bd0008 	addiu	sp,sp,8
8002b970:	03e00008 	jr	ra
8002b974:	00000000 	nop

8002b978 <_ZN8mos_65023dev4uart8Ns16550a3new17ha30db7ddc0d8193eE>:
    pub const fn new(base: VirtAddr, size: usize) -> Self {
8002b978:	27bdfff0 	addiu	sp,sp,-16
8002b97c:	afa40008 	sw	a0,8(sp)
8002b980:	afa5000c 	sw	a1,12(sp)
        Ns16550a { base, size }
8002b984:	afa40000 	sw	a0,0(sp)
8002b988:	afa50004 	sw	a1,4(sp)
    }
8002b98c:	8fa20000 	lw	v0,0(sp)
8002b990:	8fa30004 	lw	v1,4(sp)
8002b994:	27bd0010 	addiu	sp,sp,16
8002b998:	03e00008 	jr	ra
8002b99c:	00000000 	nop

8002b9a0 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17hdc63989b1e2e1ef3E>:
    fn putchar(&self, c: u32) {
8002b9a0:	27bdffc8 	addiu	sp,sp,-56
8002b9a4:	afbf0034 	sw	ra,52(sp)
8002b9a8:	afa50010 	sw	a1,16(sp)
8002b9ac:	afa40014 	sw	a0,20(sp)
8002b9b0:	afa40020 	sw	a0,32(sp)
8002b9b4:	afa50024 	sw	a1,36(sp)
        while self.base.add(MALTA_SERIAL_LSR).read_volatile::<u8>() & MALTA_SERIAL_THR_EMPTY == 0 {}
8002b9b8:	0800ae70 	j	8002b9c0 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17hdc63989b1e2e1ef3E+0x20>
8002b9bc:	00000000 	nop
8002b9c0:	8fa10014 	lw	at,20(sp)
8002b9c4:	8c240000 	lw	a0,0(at)
8002b9c8:	24050005 	li	a1,5
8002b9cc:	0c00af2c 	jal	8002bcb0 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17hf63c307524190caaE>
8002b9d0:	00000000 	nop
8002b9d4:	afa20018 	sw	v0,24(sp)
8002b9d8:	27a10018 	addiu	at,sp,24
8002b9dc:	afa10030 	sw	at,48(sp)
    pub fn read<T>(&self) -> T {
        unsafe { ptr::read(self.raw as *const T) }
    }
    #[inline(always)]
    pub fn read_volatile<T>(&self) -> T {
        unsafe { ptr::read_volatile(self.raw as *const T) }
8002b9e0:	8fa40018 	lw	a0,24(sp)
8002b9e4:	0c00dc9b 	jal	8003726c <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E>
8002b9e8:	00000000 	nop
8002b9ec:	30410020 	andi	at,v0,0x20
8002b9f0:	1020fff3 	beqz	at,8002b9c0 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17hdc63989b1e2e1ef3E+0x20>
8002b9f4:	00000000 	nop
8002b9f8:	0800ae80 	j	8002ba00 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17hdc63989b1e2e1ef3E+0x60>
8002b9fc:	00000000 	nop
        self.base.add(MALTA_SERIAL_DATA).write_volatile(c as u8);
8002ba00:	8fa10014 	lw	at,20(sp)
8002ba04:	8c240000 	lw	a0,0(at)
8002ba08:	24050000 	li	a1,0
8002ba0c:	0c00af2c 	jal	8002bcb0 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17hf63c307524190caaE>
8002ba10:	00000000 	nop
8002ba14:	8fa50010 	lw	a1,16(sp)
8002ba18:	afa2001c 	sw	v0,28(sp)
8002ba1c:	27a1001c 	addiu	at,sp,28
8002ba20:	afa10028 	sw	at,40(sp)
8002ba24:	a3a5002f 	sb	a1,47(sp)
            ptr::write_volatile(self.raw as *mut T, src);
8002ba28:	8fa4001c 	lw	a0,28(sp)
8002ba2c:	0c0087ca 	jal	80021f28 <_ZN4core3ptr14write_volatile17h99ef45963f1b3816E>
8002ba30:	00000000 	nop
    }
8002ba34:	8fbf0034 	lw	ra,52(sp)
8002ba38:	27bd0038 	addiu	sp,sp,56
8002ba3c:	03e00008 	jr	ra
8002ba40:	00000000 	nop

8002ba44 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7getchar17h2f3df2b143c58da1E>:
    fn getchar(&self) -> u32 {
8002ba44:	27bdffd0 	addiu	sp,sp,-48
8002ba48:	afbf002c 	sw	ra,44(sp)
8002ba4c:	afa40014 	sw	a0,20(sp)
8002ba50:	afa40020 	sw	a0,32(sp)
        while self.base.add(MALTA_SERIAL_LSR).read_volatile::<u8>() & MALTA_SERIAL_DATA_READY == 0 {
8002ba54:	0800ae97 	j	8002ba5c <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7getchar17h2f3df2b143c58da1E+0x18>
8002ba58:	00000000 	nop
8002ba5c:	8fa10014 	lw	at,20(sp)
8002ba60:	8c240000 	lw	a0,0(at)
8002ba64:	24050005 	li	a1,5
8002ba68:	0c00af2c 	jal	8002bcb0 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17hf63c307524190caaE>
8002ba6c:	00000000 	nop
8002ba70:	afa20018 	sw	v0,24(sp)
8002ba74:	27a10018 	addiu	at,sp,24
8002ba78:	afa10028 	sw	at,40(sp)
        unsafe { ptr::read_volatile(self.raw as *const T) }
8002ba7c:	8fa40018 	lw	a0,24(sp)
8002ba80:	0c00dc9b 	jal	8003726c <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E>
8002ba84:	00000000 	nop
8002ba88:	30410001 	andi	at,v0,0x1
8002ba8c:	1020fff3 	beqz	at,8002ba5c <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7getchar17h2f3df2b143c58da1E+0x18>
8002ba90:	00000000 	nop
8002ba94:	0800aea7 	j	8002ba9c <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7getchar17h2f3df2b143c58da1E+0x58>
8002ba98:	00000000 	nop
        self.base.add(MALTA_SERIAL_DATA).read_volatile()
8002ba9c:	8fa10014 	lw	at,20(sp)
8002baa0:	8c240000 	lw	a0,0(at)
8002baa4:	24050000 	li	a1,0
8002baa8:	0c00af2c 	jal	8002bcb0 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17hf63c307524190caaE>
8002baac:	00000000 	nop
8002bab0:	afa2001c 	sw	v0,28(sp)
8002bab4:	27a1001c 	addiu	at,sp,28
8002bab8:	afa10024 	sw	at,36(sp)
8002babc:	8fa4001c 	lw	a0,28(sp)
8002bac0:	0c008754 	jal	80021d50 <_ZN4core3ptr13read_volatile17h148fdf7017203b24E>
8002bac4:	00000000 	nop
    }
8002bac8:	8fbf002c 	lw	ra,44(sp)
8002bacc:	27bd0030 	addiu	sp,sp,48
8002bad0:	03e00008 	jr	ra
8002bad4:	00000000 	nop

8002bad8 <_ZN8mos_65023dev4halt17hed598abf4ab60b77E>:
pub mod uart;
use crate::mm::addr::VirtAddr;
const MALTA_FPGA_HALT: VirtAddr = VirtAddr::new(0xbf000000 + 0x500);

pub fn halt() -> ! {
8002bad8:	27bdffb8 	addiu	sp,sp,-72
8002badc:	afbf0044 	sw	ra,68(sp)
8002bae0:	3c018105 	lui	at,0x8105
8002bae4:	2421d190 	addiu	at,at,-11888
8002bae8:	afa1003c 	sw	at,60(sp)
8002baec:	24050042 	li	a1,66
8002baf0:	afa50040 	sw	a1,64(sp)
8002baf4:	3c01bf00 	lui	at,0xbf00
8002baf8:	34240500 	ori	a0,at,0x500
            ptr::write_volatile(self.raw as *mut T, src);
8002bafc:	0c008797 	jal	80021e5c <_ZN4core3ptr14write_volatile17h0453af2c98ac534dE>
8002bb00:	00000000 	nop
    MALTA_FPGA_HALT.write_volatile(0x42);
    unreachable!("halt failed.\n");
8002bb04:	03a00825 	move	at,sp
8002bb08:	ac200010 	sw	zero,16(at)
8002bb0c:	3c018105 	lui	at,0x8105
8002bb10:	2425d1f8 	addiu	a1,at,-11784
8002bb14:	27a40020 	addiu	a0,sp,32
8002bb18:	afa4001c 	sw	a0,28(sp)
8002bb1c:	24060001 	li	a2,1
8002bb20:	27a70038 	addiu	a3,sp,56
8002bb24:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
8002bb28:	00000000 	nop
8002bb2c:	8fa4001c 	lw	a0,28(sp)
8002bb30:	3c018105 	lui	at,0x8105
8002bb34:	2425d214 	addiu	a1,at,-11756
8002bb38:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002bb3c:	00000000 	nop

8002bb40 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Sub$GT$3sub17h38d137ed76a3fbcaE>:
    fn sub(self, rhs: VirtAddr) -> Self::Output {
8002bb40:	27bdffe0 	addiu	sp,sp,-32
8002bb44:	afa40018 	sw	a0,24(sp)
8002bb48:	afa5001c 	sw	a1,28(sp)
            raw: self.raw - rhs.raw,
8002bb4c:	00850823 	subu	at,a0,a1
8002bb50:	afa10010 	sw	at,16(sp)
8002bb54:	0085082b 	sltu	at,a0,a1
8002bb58:	14200009 	bnez	at,8002bb80 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Sub$GT$3sub17h38d137ed76a3fbcaE+0x40>
8002bb5c:	00000000 	nop
8002bb60:	0800aeda 	j	8002bb68 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Sub$GT$3sub17h38d137ed76a3fbcaE+0x28>
8002bb64:	00000000 	nop
        VirtAddr {
8002bb68:	8fa10010 	lw	at,16(sp)
8002bb6c:	afa10014 	sw	at,20(sp)
    }
8002bb70:	8fa20014 	lw	v0,20(sp)
8002bb74:	27bd0020 	addiu	sp,sp,32
8002bb78:	03e00008 	jr	ra
8002bb7c:	00000000 	nop
            raw: self.raw - rhs.raw,
8002bb80:	3c018105 	lui	at,0x8105
8002bb84:	2424d238 	addiu	a0,at,-11720
8002bb88:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002bb8c:	00000000 	nop

8002bb90 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..bit..BitOr$LT$usize$GT$$GT$5bitor17hcf7cabf5339499d8E>:
    fn bitor(self, rhs: usize) -> Self::Output {
8002bb90:	27bdfff8 	addiu	sp,sp,-8
8002bb94:	afa40000 	sw	a0,0(sp)
8002bb98:	afa50004 	sw	a1,4(sp)
        self.raw | rhs
8002bb9c:	00851025 	or	v0,a0,a1
8002bba0:	27bd0008 	addiu	sp,sp,8
    }
8002bba4:	03e00008 	jr	ra
8002bba8:	00000000 	nop

8002bbac <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17ha11bcadcd9aaea1bE>:
    fn rem(self, rhs: usize) -> Self::Output {
8002bbac:	27bdffe0 	addiu	sp,sp,-32
8002bbb0:	afa50010 	sw	a1,16(sp)
8002bbb4:	afa40014 	sw	a0,20(sp)
8002bbb8:	afa40018 	sw	a0,24(sp)
8002bbbc:	afa5001c 	sw	a1,28(sp)
        self.raw % rhs
8002bbc0:	10a0000b 	beqz	a1,8002bbf0 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17ha11bcadcd9aaea1bE+0x44>
8002bbc4:	00000000 	nop
8002bbc8:	0800aef4 	j	8002bbd0 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17ha11bcadcd9aaea1bE+0x24>
8002bbcc:	00000000 	nop
8002bbd0:	8fa10010 	lw	at,16(sp)
8002bbd4:	8fa20014 	lw	v0,20(sp)
8002bbd8:	0041001b 	divu	zero,v0,at
8002bbdc:	002001f4 	teq	at,zero,0x7
8002bbe0:	00001010 	mfhi	v0
8002bbe4:	27bd0020 	addiu	sp,sp,32
    }
8002bbe8:	03e00008 	jr	ra
8002bbec:	00000000 	nop
        self.raw % rhs
8002bbf0:	3c018105 	lui	at,0x8105
8002bbf4:	2424d248 	addiu	a0,at,-11704
8002bbf8:	0c011b7e 	jal	80046df8 <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
8002bbfc:	00000000 	nop

8002bc00 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17ha0cf15c56b191f6dE>:
    fn rem(self, rhs: usize) -> Self::Output {
8002bc00:	27bdffe0 	addiu	sp,sp,-32
8002bc04:	afa50010 	sw	a1,16(sp)
8002bc08:	afa40014 	sw	a0,20(sp)
8002bc0c:	afa40018 	sw	a0,24(sp)
8002bc10:	afa5001c 	sw	a1,28(sp)
        self.raw % rhs
8002bc14:	10a0000b 	beqz	a1,8002bc44 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17ha0cf15c56b191f6dE+0x44>
8002bc18:	00000000 	nop
8002bc1c:	0800af09 	j	8002bc24 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17ha0cf15c56b191f6dE+0x24>
8002bc20:	00000000 	nop
8002bc24:	8fa10010 	lw	at,16(sp)
8002bc28:	8fa20014 	lw	v0,20(sp)
8002bc2c:	0041001b 	divu	zero,v0,at
8002bc30:	002001f4 	teq	at,zero,0x7
8002bc34:	00001010 	mfhi	v0
8002bc38:	27bd0020 	addiu	sp,sp,32
    }
8002bc3c:	03e00008 	jr	ra
8002bc40:	00000000 	nop
        self.raw % rhs
8002bc44:	3c018105 	lui	at,0x8105
8002bc48:	2424d258 	addiu	a0,at,-11688
8002bc4c:	0c011b7e 	jal	80046df8 <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
8002bc50:	00000000 	nop

8002bc54 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17h6ea80ec8117a07c6E>:
    fn add(self, other: usize) -> Self::Output {
8002bc54:	27bdffd8 	addiu	sp,sp,-40
8002bc58:	afbf0024 	sw	ra,36(sp)
8002bc5c:	afa4001c 	sw	a0,28(sp)
8002bc60:	afa50020 	sw	a1,32(sp)
            raw: self
8002bc64:	0c0084d0 	jal	80021340 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h19af5c025cf15bd5E>
8002bc68:	00000000 	nop
8002bc6c:	00402025 	move	a0,v0
8002bc70:	00602825 	move	a1,v1
8002bc74:	3c018105 	lui	at,0x8105
8002bc78:	2421d280 	addiu	at,at,-11648
8002bc7c:	03a01025 	move	v0,sp
8002bc80:	ac410010 	sw	at,16(v0)
8002bc84:	3c018105 	lui	at,0x8105
8002bc88:	2426d268 	addiu	a2,at,-11672
8002bc8c:	24070018 	li	a3,24
8002bc90:	0c00de41 	jal	80037904 <_ZN4core6option15Option$LT$T$GT$6expect17h537867a9d3760452E>
8002bc94:	00000000 	nop
        PhysAddr {
8002bc98:	afa20018 	sw	v0,24(sp)
    }
8002bc9c:	8fa20018 	lw	v0,24(sp)
8002bca0:	8fbf0024 	lw	ra,36(sp)
8002bca4:	27bd0028 	addiu	sp,sp,40
8002bca8:	03e00008 	jr	ra
8002bcac:	00000000 	nop

8002bcb0 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17hf63c307524190caaE>:
    fn add(self, other: usize) -> Self::Output {
8002bcb0:	27bdffd8 	addiu	sp,sp,-40
8002bcb4:	afbf0024 	sw	ra,36(sp)
8002bcb8:	afa4001c 	sw	a0,28(sp)
8002bcbc:	afa50020 	sw	a1,32(sp)
            raw: self
8002bcc0:	0c0084d0 	jal	80021340 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h19af5c025cf15bd5E>
8002bcc4:	00000000 	nop
8002bcc8:	00402025 	move	a0,v0
8002bccc:	00602825 	move	a1,v1
8002bcd0:	3c018105 	lui	at,0x8105
8002bcd4:	2421d2a8 	addiu	at,at,-11608
8002bcd8:	03a01025 	move	v0,sp
8002bcdc:	ac410010 	sw	at,16(v0)
8002bce0:	3c018105 	lui	at,0x8105
8002bce4:	2426d290 	addiu	a2,at,-11632
8002bce8:	24070018 	li	a3,24
8002bcec:	0c00de41 	jal	80037904 <_ZN4core6option15Option$LT$T$GT$6expect17h537867a9d3760452E>
8002bcf0:	00000000 	nop
        VirtAddr {
8002bcf4:	afa20018 	sw	v0,24(sp)
    }
8002bcf8:	8fa20018 	lw	v0,24(sp)
8002bcfc:	8fbf0024 	lw	ra,36(sp)
8002bd00:	27bd0028 	addiu	sp,sp,40
8002bd04:	03e00008 	jr	ra
8002bd08:	00000000 	nop

8002bd0c <_ZN90_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..convert..Into$LT$$BP$mut$u20$u8$GT$$GT$4into17hacc3b62dc999f2feE>:
    }

}

impl Into<*mut u8> for PhysAddr {
    fn into(self) -> *mut u8 {
8002bd0c:	27bdfff8 	addiu	sp,sp,-8
8002bd10:	00801025 	move	v0,a0
8002bd14:	afa20004 	sw	v0,4(sp)
8002bd18:	27bd0008 	addiu	sp,sp,8
        self.raw as *mut u8
    }
8002bd1c:	03e00008 	jr	ra
8002bd20:	00000000 	nop

8002bd24 <_ZN8mos_65022mm4addr8PhysAddr3new17h277f42c1e1d5d6f9E>:

}

impl PhysAddr {
    pub const fn new(raw: usize) -> Self {
8002bd24:	27bdfff8 	addiu	sp,sp,-8
8002bd28:	afa40004 	sw	a0,4(sp)
        PhysAddr { raw }
8002bd2c:	afa40000 	sw	a0,0(sp)
    }
8002bd30:	8fa20000 	lw	v0,0(sp)
8002bd34:	27bd0008 	addiu	sp,sp,8
8002bd38:	03e00008 	jr	ra
8002bd3c:	00000000 	nop

8002bd40 <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h6ea8d698280004a0E>:
        unsafe { ptr::read_volatile(self.raw as *const T) }
    }
}

impl From<usize> for VirtAddr {
    fn from(raw: usize) -> Self {
8002bd40:	27bdfff0 	addiu	sp,sp,-16
8002bd44:	afa40004 	sw	a0,4(sp)
8002bd48:	afa4000c 	sw	a0,12(sp)
        VirtAddr { raw }
8002bd4c:	afa40008 	sw	a0,8(sp)
    }
8002bd50:	8fa20008 	lw	v0,8(sp)
8002bd54:	27bd0010 	addiu	sp,sp,16
        VirtAddr::new(raw)
    }
8002bd58:	03e00008 	jr	ra
8002bd5c:	00000000 	nop

8002bd60 <_ZN81_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17hb599be5559987ce0E>:
}

impl From<usize> for PhysAddr {
    fn from(raw: usize) -> Self {
8002bd60:	27bdffe8 	addiu	sp,sp,-24
8002bd64:	afbf0014 	sw	ra,20(sp)
8002bd68:	afa40010 	sw	a0,16(sp)
        PhysAddr::new(raw)
8002bd6c:	0c00af49 	jal	8002bd24 <_ZN8mos_65022mm4addr8PhysAddr3new17h277f42c1e1d5d6f9E>
8002bd70:	00000000 	nop
    }
8002bd74:	8fbf0014 	lw	ra,20(sp)
8002bd78:	27bd0018 	addiu	sp,sp,24
8002bd7c:	03e00008 	jr	ra
8002bd80:	00000000 	nop

8002bd84 <_ZN8mos_65022mm4page4Page3new17ha14396c2b1592825E>:
    pub const fn new() -> Self {
8002bd84:	27bdffe0 	addiu	sp,sp,-32
8002bd88:	afbf001c 	sw	ra,28(sp)
8002bd8c:	afa40014 	sw	a0,20(sp)
8002bd90:	afa40018 	sw	a0,24(sp)
8002bd94:	24040000 	li	a0,0
            p_pa: PhysAddr::new(0),
8002bd98:	0c00af49 	jal	8002bd24 <_ZN8mos_65022mm4addr8PhysAddr3new17h277f42c1e1d5d6f9E>
8002bd9c:	00000000 	nop
8002bda0:	8fa40014 	lw	a0,20(sp)
8002bda4:	00400825 	move	at,v0
        Self {
8002bda8:	8fa20018 	lw	v0,24(sp)
8002bdac:	ac800000 	sw	zero,0(a0)
8002bdb0:	ac810004 	sw	at,4(a0)
8002bdb4:	a4800008 	sh	zero,8(a0)
    }
8002bdb8:	8fbf001c 	lw	ra,28(sp)
8002bdbc:	27bd0020 	addiu	sp,sp,32
8002bdc0:	03e00008 	jr	ra
8002bdc4:	00000000 	nop

8002bdc8 <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E>:

extern "C" {
    pub static stack_end: usize;
}

pub(super) fn page_init(mem_sz: usize) {
8002bdc8:	27bdff80 	addiu	sp,sp,-128
8002bdcc:	afbf007c 	sw	ra,124(sp)
8002bdd0:	afa40068 	sw	a0,104(sp)
    let count = mem_sz / PAGE_SIZE;
8002bdd4:	00040b02 	srl	at,a0,0xc
8002bdd8:	afa10024 	sw	at,36(sp)
8002bddc:	afa1006c 	sw	at,108(sp)
    let mut pages = PAGES.lock();
8002bde0:	3c018105 	lui	at,0x8105
8002bde4:	2424e6a4 	addiu	a0,at,-6492
8002bde8:	0c00d17a 	jal	800345e8 <_ZN69_$LT$mos_6502..mm..page..PAGES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h60478cac0dea9383E>
8002bdec:	00000000 	nop
8002bdf0:	00402025 	move	a0,v0
8002bdf4:	0c00a13c 	jal	800284f0 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hce0bedb7dbc5e59aE>
8002bdf8:	00000000 	nop
8002bdfc:	afa20028 	sw	v0,40(sp)
    let mut page_list = PAGE_LIST.lock();
8002be00:	3c018105 	lui	at,0x8105
8002be04:	2424e6a4 	addiu	a0,at,-6492
8002be08:	0c00d186 	jal	80034618 <_ZN73_$LT$mos_6502..mm..page..PAGE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h6a3c89b4135f7721E>
8002be0c:	00000000 	nop
8002be10:	00402025 	move	a0,v0
8002be14:	0c00a084 	jal	80028210 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h47a3699dcff6eb57E>
8002be18:	00000000 	nop
8002be1c:	8fa10024 	lw	at,36(sp)
8002be20:	afa2002c 	sw	v0,44(sp)
8002be24:	3c028108 	lui	v0,0x8108
8002be28:	24426000 	addiu	v0,v0,24576
8002be2c:	afa20078 	sw	v0,120(sp)
        VirtAddr { raw }
8002be30:	afa20074 	sw	v0,116(sp)
    }
8002be34:	8fa20074 	lw	v0,116(sp)
    let kernel_end = unsafe { VirtAddr::new(&stack_end as *const usize as usize) };
8002be38:	afa20030 	sw	v0,48(sp)
    for i in 0..count {
8002be3c:	afa00034 	sw	zero,52(sp)
8002be40:	afa10038 	sw	at,56(sp)
8002be44:	8fa40034 	lw	a0,52(sp)
8002be48:	8fa50038 	lw	a1,56(sp)
8002be4c:	0c0123e2 	jal	80048f88 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
8002be50:	00000000 	nop
8002be54:	afa2003c 	sw	v0,60(sp)
8002be58:	afa30040 	sw	v1,64(sp)
8002be5c:	0800af99 	j	8002be64 <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E+0x9c>
8002be60:	00000000 	nop
8002be64:	27a4003c 	addiu	a0,sp,60
8002be68:	0c0123d9 	jal	80048f64 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
8002be6c:	00000000 	nop
8002be70:	afa20044 	sw	v0,68(sp)
8002be74:	afa30048 	sw	v1,72(sp)
8002be78:	8fa10044 	lw	at,68(sp)
8002be7c:	1420000d 	bnez	at,8002beb4 <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E+0xec>
8002be80:	00000000 	nop
8002be84:	0800afa3 	j	8002be8c <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E+0xc4>
8002be88:	00000000 	nop
8002be8c:	27a4002c 	addiu	a0,sp,44
        } else {
            page.p_ref = 1;
        }
        pages.push(page);
    }
}
8002be90:	0c008c33 	jal	800230cc <_ZN4core3ptr80drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..IndexStack$GT$$GT$17h08c93b0e868b9ccbE>
8002be94:	00000000 	nop
8002be98:	27a40028 	addiu	a0,sp,40
8002be9c:	0c00869a 	jal	80021a68 <_ZN4core3ptr101drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17h7b0d47e3718e675cE>
8002bea0:	00000000 	nop
8002bea4:	8fbf007c 	lw	ra,124(sp)
8002bea8:	27bd0080 	addiu	sp,sp,128
8002beac:	03e00008 	jr	ra
8002beb0:	00000000 	nop
    for i in 0..count {
8002beb4:	8fa10048 	lw	at,72(sp)
8002beb8:	afa1001c 	sw	at,28(sp)
8002bebc:	afa10070 	sw	at,112(sp)
8002bec0:	27a4004c 	addiu	a0,sp,76
        let mut page = Page::new();
8002bec4:	0c00af61 	jal	8002bd84 <_ZN8mos_65022mm4page4Page3new17ha14396c2b1592825E>
8002bec8:	00000000 	nop
8002becc:	8fa2001c 	lw	v0,28(sp)
        page.p_no = i as u32;
8002bed0:	afa2004c 	sw	v0,76(sp)
        page.p_pa = PhysAddr::new(KSEG0.raw + i * PAGE_SIZE);
8002bed4:	00020b00 	sll	at,v0,0xc
8002bed8:	afa10020 	sw	at,32(sp)
8002bedc:	7c419800 	ext	at,v0,0x0,0x14
8002bee0:	1422000c 	bne	at,v0,8002bf14 <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E+0x14c>
8002bee4:	00000000 	nop
8002bee8:	0800afbc 	j	8002bef0 <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E+0x128>
8002beec:	00000000 	nop
8002bef0:	8fa20020 	lw	v0,32(sp)
8002bef4:	3c018000 	lui	at,0x8000
8002bef8:	00410821 	addu	at,v0,at
8002befc:	afa10018 	sw	at,24(sp)
8002bf00:	0022082b 	sltu	at,at,v0
8002bf04:	14200014 	bnez	at,8002bf58 <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E+0x190>
8002bf08:	00000000 	nop
8002bf0c:	0800afc9 	j	8002bf24 <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E+0x15c>
8002bf10:	00000000 	nop
8002bf14:	3c018105 	lui	at,0x8105
8002bf18:	2424d2cc 	addiu	a0,at,-11572
8002bf1c:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002bf20:	00000000 	nop
8002bf24:	8fa40018 	lw	a0,24(sp)
8002bf28:	0c00af49 	jal	8002bd24 <_ZN8mos_65022mm4addr8PhysAddr3new17h277f42c1e1d5d6f9E>
8002bf2c:	00000000 	nop
8002bf30:	00400825 	move	at,v0
8002bf34:	8fa2001c 	lw	v0,28(sp)
8002bf38:	afa10050 	sw	at,80(sp)
        if KSEG0.add(i * PAGE_SIZE) >= kernel_end {
8002bf3c:	00020b00 	sll	at,v0,0xc
8002bf40:	afa10014 	sw	at,20(sp)
8002bf44:	7c419800 	ext	at,v0,0x0,0x14
8002bf48:	14220014 	bne	at,v0,8002bf9c <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E+0x1d4>
8002bf4c:	00000000 	nop
8002bf50:	0800afda 	j	8002bf68 <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E+0x1a0>
8002bf54:	00000000 	nop
        page.p_pa = PhysAddr::new(KSEG0.raw + i * PAGE_SIZE);
8002bf58:	3c018105 	lui	at,0x8105
8002bf5c:	2424d2dc 	addiu	a0,at,-11556
8002bf60:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002bf64:	00000000 	nop
        if KSEG0.add(i * PAGE_SIZE) >= kernel_end {
8002bf68:	8fa50014 	lw	a1,20(sp)
8002bf6c:	3c048000 	lui	a0,0x8000
8002bf70:	0c00af2c 	jal	8002bcb0 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17hf63c307524190caaE>
8002bf74:	00000000 	nop
8002bf78:	afa20058 	sw	v0,88(sp)
8002bf7c:	27a40058 	addiu	a0,sp,88
8002bf80:	27a50030 	addiu	a1,sp,48
8002bf84:	0c008265 	jal	80020994 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE>
8002bf88:	00000000 	nop
8002bf8c:	1440000b 	bnez	v0,8002bfbc <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E+0x1f4>
8002bf90:	00000000 	nop
8002bf94:	0800afeb 	j	8002bfac <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E+0x1e4>
8002bf98:	00000000 	nop
8002bf9c:	3c018105 	lui	at,0x8105
8002bfa0:	2424d2ec 	addiu	a0,at,-11540
8002bfa4:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002bfa8:	00000000 	nop
8002bfac:	24010001 	li	at,1
            page.p_ref = 1;
8002bfb0:	a7a10054 	sh	at,84(sp)
        if KSEG0.add(i * PAGE_SIZE) >= kernel_end {
8002bfb4:	0800aff8 	j	8002bfe0 <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E+0x218>
8002bfb8:	00000000 	nop
8002bfbc:	27a4002c 	addiu	a0,sp,44
            page_list.push(i);
8002bfc0:	0c00ad90 	jal	8002b640 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4f3cf81814853911E>
8002bfc4:	00000000 	nop
8002bfc8:	8fa5001c 	lw	a1,28(sp)
8002bfcc:	00402025 	move	a0,v0
8002bfd0:	0c00ce0a 	jal	80033828 <_ZN8mos_65024util10IndexStack4push17hbb874716fcbf35ecE>
8002bfd4:	00000000 	nop
8002bfd8:	0800aff8 	j	8002bfe0 <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E+0x218>
8002bfdc:	00000000 	nop
8002bfe0:	27a40028 	addiu	a0,sp,40
        pages.push(page);
8002bfe4:	0c00ad97 	jal	8002b65c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h5e2ac1a0b7298187E>
8002bfe8:	00000000 	nop
8002bfec:	00402025 	move	a0,v0
8002bff0:	8fa10054 	lw	at,84(sp)
8002bff4:	afa10064 	sw	at,100(sp)
8002bff8:	8fa10050 	lw	at,80(sp)
8002bffc:	afa10060 	sw	at,96(sp)
8002c000:	8fa1004c 	lw	at,76(sp)
8002c004:	afa1005c 	sw	at,92(sp)
8002c008:	27a5005c 	addiu	a1,sp,92
8002c00c:	0c00a30d 	jal	80028c34 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha972278a66e8b2beE>
8002c010:	00000000 	nop
8002c014:	0800af99 	j	8002be64 <_ZN8mos_65022mm4page9page_init17ha53c27b2f7d9cfc7E+0x9c>
8002c018:	00000000 	nop

8002c01c <_ZN8mos_65022mm4page10page_alloc17ha38ea23af0abb5c5E>:
#[inline(always)]
pub fn get_page_index_by_kvaddr(kvaddr: VirtAddr) -> Option<PageIndex> {
    Some(kvaddr.sub(KSEG0).raw.checked_div(PAGE_SIZE)?)
}

pub fn page_alloc() -> Option<(PageIndex, PhysAddr)> {
8002c01c:	27bdffb8 	addiu	sp,sp,-72
8002c020:	afbf0044 	sw	ra,68(sp)
8002c024:	afa4001c 	sw	a0,28(sp)
8002c028:	afa40020 	sw	a0,32(sp)
    let mut page_list = PAGE_LIST.lock();
8002c02c:	3c018105 	lui	at,0x8105
8002c030:	2424e6a4 	addiu	a0,at,-6492
8002c034:	0c00d186 	jal	80034618 <_ZN73_$LT$mos_6502..mm..page..PAGE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h6a3c89b4135f7721E>
8002c038:	00000000 	nop
8002c03c:	00402025 	move	a0,v0
8002c040:	0c00a084 	jal	80028210 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h47a3699dcff6eb57E>
8002c044:	00000000 	nop
8002c048:	afa20028 	sw	v0,40(sp)
    let pages = PAGES.lock();
8002c04c:	3c018105 	lui	at,0x8105
8002c050:	2424e6a4 	addiu	a0,at,-6492
8002c054:	0c00d17a 	jal	800345e8 <_ZN69_$LT$mos_6502..mm..page..PAGES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h60478cac0dea9383E>
8002c058:	00000000 	nop
8002c05c:	00402025 	move	a0,v0
8002c060:	0c00a13c 	jal	800284f0 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hce0bedb7dbc5e59aE>
8002c064:	00000000 	nop
8002c068:	afa2002c 	sw	v0,44(sp)
8002c06c:	27a40028 	addiu	a0,sp,40
    let pno = page_list.pop()?;
8002c070:	0c00ad90 	jal	8002b640 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4f3cf81814853911E>
8002c074:	00000000 	nop
8002c078:	00402025 	move	a0,v0
8002c07c:	0c00ce14 	jal	80033850 <_ZN8mos_65024util10IndexStack3pop17h7c01a72a1ae025c2E>
8002c080:	00000000 	nop
8002c084:	00402025 	move	a0,v0
8002c088:	00602825 	move	a1,v1
8002c08c:	0c00f1d5 	jal	8003c754 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h46f0356384a6ddb1E>
8002c090:	00000000 	nop
8002c094:	afa20030 	sw	v0,48(sp)
8002c098:	afa30034 	sw	v1,52(sp)
8002c09c:	8fa10030 	lw	at,48(sp)
8002c0a0:	14200024 	bnez	at,8002c134 <_ZN8mos_65022mm4page10page_alloc17ha38ea23af0abb5c5E+0x118>
8002c0a4:	00000000 	nop
8002c0a8:	0800b02c 	j	8002c0b0 <_ZN8mos_65022mm4page10page_alloc17ha38ea23af0abb5c5E+0x94>
8002c0ac:	00000000 	nop
8002c0b0:	8fa10034 	lw	at,52(sp)
8002c0b4:	afa10014 	sw	at,20(sp)
8002c0b8:	afa10040 	sw	at,64(sp)
8002c0bc:	27a4002c 	addiu	a0,sp,44
8002c0c0:	afa40018 	sw	a0,24(sp)
    Some((pno, pages[pno].p_pa))
8002c0c4:	0c00ad16 	jal	8002b458 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3ddafff8840f2a13E>
8002c0c8:	00000000 	nop
8002c0cc:	8fa50014 	lw	a1,20(sp)
8002c0d0:	00402025 	move	a0,v0
8002c0d4:	3c018105 	lui	at,0x8105
8002c0d8:	2426d2fc 	addiu	a2,at,-11524
8002c0dc:	0c00ad52 	jal	8002b548 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hb87fda22e18ebe52E>
8002c0e0:	00000000 	nop
8002c0e4:	8fa30014 	lw	v1,20(sp)
8002c0e8:	8fa40018 	lw	a0,24(sp)
8002c0ec:	00400825 	move	at,v0
8002c0f0:	8fa2001c 	lw	v0,28(sp)
8002c0f4:	8c210004 	lw	at,4(at)
8002c0f8:	afa30038 	sw	v1,56(sp)
8002c0fc:	afa1003c 	sw	at,60(sp)
8002c100:	8fa30038 	lw	v1,56(sp)
8002c104:	8fa1003c 	lw	at,60(sp)
8002c108:	ac430004 	sw	v1,4(v0)
8002c10c:	ac410008 	sw	at,8(v0)
8002c110:	24010001 	li	at,1
8002c114:	ac410000 	sw	at,0(v0)
}
8002c118:	0c00869a 	jal	80021a68 <_ZN4core3ptr101drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17h7b0d47e3718e675cE>
8002c11c:	00000000 	nop
8002c120:	27a40028 	addiu	a0,sp,40
8002c124:	0c008c33 	jal	800230cc <_ZN4core3ptr80drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..IndexStack$GT$$GT$17h08c93b0e868b9ccbE>
8002c128:	00000000 	nop
8002c12c:	0800b058 	j	8002c160 <_ZN8mos_65022mm4page10page_alloc17ha38ea23af0abb5c5E+0x144>
8002c130:	00000000 	nop
    let pno = page_list.pop()?;
8002c134:	8fa4001c 	lw	a0,28(sp)
8002c138:	0c00adec 	jal	8002b7b0 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h62b6624e912c198cE>
8002c13c:	00000000 	nop
8002c140:	27a4002c 	addiu	a0,sp,44
}
8002c144:	0c00869a 	jal	80021a68 <_ZN4core3ptr101drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17h7b0d47e3718e675cE>
8002c148:	00000000 	nop
8002c14c:	27a40028 	addiu	a0,sp,40
8002c150:	0c008c33 	jal	800230cc <_ZN4core3ptr80drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..IndexStack$GT$$GT$17h08c93b0e868b9ccbE>
8002c154:	00000000 	nop
8002c158:	0800b058 	j	8002c160 <_ZN8mos_65022mm4page10page_alloc17ha38ea23af0abb5c5E+0x144>
8002c15c:	00000000 	nop
8002c160:	8fa20020 	lw	v0,32(sp)
8002c164:	8fbf0044 	lw	ra,68(sp)
8002c168:	27bd0048 	addiu	sp,sp,72
8002c16c:	03e00008 	jr	ra
8002c170:	00000000 	nop

8002c174 <_ZN8mos_65022mm4page11page_decref17h05cfef4ab9fc53fdE>:
pub fn page_incref(p: PageIndex) {
    let mut pages = PAGES.lock();
    pages[p].p_ref += 1;
}

pub fn page_decref(p: PageIndex) {
8002c174:	27bdffd0 	addiu	sp,sp,-48
8002c178:	afbf002c 	sw	ra,44(sp)
8002c17c:	afa40014 	sw	a0,20(sp)
8002c180:	afa40028 	sw	a0,40(sp)
    let mut pages = PAGES.lock();
8002c184:	3c018105 	lui	at,0x8105
8002c188:	2424e6a4 	addiu	a0,at,-6492
8002c18c:	0c00d17a 	jal	800345e8 <_ZN69_$LT$mos_6502..mm..page..PAGES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h60478cac0dea9383E>
8002c190:	00000000 	nop
8002c194:	00402025 	move	a0,v0
8002c198:	0c00a13c 	jal	800284f0 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hce0bedb7dbc5e59aE>
8002c19c:	00000000 	nop
8002c1a0:	afa20020 	sw	v0,32(sp)
8002c1a4:	27a40020 	addiu	a0,sp,32
    pages[p].p_ref -= 1;
8002c1a8:	0c00ad97 	jal	8002b65c <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h5e2ac1a0b7298187E>
8002c1ac:	00000000 	nop
8002c1b0:	8fa50014 	lw	a1,20(sp)
8002c1b4:	00402025 	move	a0,v0
8002c1b8:	3c018105 	lui	at,0x8105
8002c1bc:	2426d30c 	addiu	a2,at,-11508
8002c1c0:	0c00add7 	jal	8002b75c <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hdd771664a10c7b91E>
8002c1c4:	00000000 	nop
8002c1c8:	00400825 	move	at,v0
8002c1cc:	afa10018 	sw	at,24(sp)
8002c1d0:	94410008 	lhu	at,8(v0)
8002c1d4:	2422ffff 	addiu	v0,at,-1
8002c1d8:	afa2001c 	sw	v0,28(sp)
8002c1dc:	10200014 	beqz	at,8002c230 <_ZN8mos_65022mm4page11page_decref17h05cfef4ab9fc53fdE+0xbc>
8002c1e0:	00000000 	nop
8002c1e4:	0800b07b 	j	8002c1ec <_ZN8mos_65022mm4page11page_decref17h05cfef4ab9fc53fdE+0x78>
8002c1e8:	00000000 	nop
8002c1ec:	8fa1001c 	lw	at,28(sp)
8002c1f0:	8fa20018 	lw	v0,24(sp)
8002c1f4:	a4410008 	sh	at,8(v0)
8002c1f8:	27a40020 	addiu	a0,sp,32
    if pages[p].p_ref == 0 {
8002c1fc:	0c00ad16 	jal	8002b458 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3ddafff8840f2a13E>
8002c200:	00000000 	nop
8002c204:	8fa50014 	lw	a1,20(sp)
8002c208:	00402025 	move	a0,v0
8002c20c:	3c018105 	lui	at,0x8105
8002c210:	2426d32c 	addiu	a2,at,-11476
8002c214:	0c00ad52 	jal	8002b548 <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hb87fda22e18ebe52E>
8002c218:	00000000 	nop
8002c21c:	94410008 	lhu	at,8(v0)
8002c220:	10200007 	beqz	at,8002c240 <_ZN8mos_65022mm4page11page_decref17h05cfef4ab9fc53fdE+0xcc>
8002c224:	00000000 	nop
8002c228:	0800b0a5 	j	8002c294 <_ZN8mos_65022mm4page11page_decref17h05cfef4ab9fc53fdE+0x120>
8002c22c:	00000000 	nop
    pages[p].p_ref -= 1;
8002c230:	3c018105 	lui	at,0x8105
8002c234:	2424d31c 	addiu	a0,at,-11492
8002c238:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002c23c:	00000000 	nop
        let mut page_list = PAGE_LIST.lock();
8002c240:	3c018105 	lui	at,0x8105
8002c244:	2424e6a4 	addiu	a0,at,-6492
8002c248:	0c00d186 	jal	80034618 <_ZN73_$LT$mos_6502..mm..page..PAGE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h6a3c89b4135f7721E>
8002c24c:	00000000 	nop
8002c250:	00402025 	move	a0,v0
8002c254:	0c00a084 	jal	80028210 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h47a3699dcff6eb57E>
8002c258:	00000000 	nop
8002c25c:	afa20024 	sw	v0,36(sp)
8002c260:	27a40024 	addiu	a0,sp,36
8002c264:	afa40010 	sw	a0,16(sp)
        page_list.push(p);
8002c268:	0c00ad90 	jal	8002b640 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4f3cf81814853911E>
8002c26c:	00000000 	nop
8002c270:	8fa50014 	lw	a1,20(sp)
8002c274:	00402025 	move	a0,v0
8002c278:	0c00ce0a 	jal	80033828 <_ZN8mos_65024util10IndexStack4push17hbb874716fcbf35ecE>
8002c27c:	00000000 	nop
8002c280:	8fa40010 	lw	a0,16(sp)
    }
8002c284:	0c008c33 	jal	800230cc <_ZN4core3ptr80drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..IndexStack$GT$$GT$17h08c93b0e868b9ccbE>
8002c288:	00000000 	nop
8002c28c:	0800b0a5 	j	8002c294 <_ZN8mos_65022mm4page11page_decref17h05cfef4ab9fc53fdE+0x120>
8002c290:	00000000 	nop
8002c294:	27a40020 	addiu	a0,sp,32
}
8002c298:	0c00869a 	jal	80021a68 <_ZN4core3ptr101drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17h7b0d47e3718e675cE>
8002c29c:	00000000 	nop
8002c2a0:	8fbf002c 	lw	ra,44(sp)
8002c2a4:	27bd0030 	addiu	sp,sp,48
8002c2a8:	03e00008 	jr	ra
8002c2ac:	00000000 	nop

8002c2b0 <_ZN118_$LT$mos_6502..mm..pgtable..PgtableEntry$u20$as$u20$core..ops..bit..BitAnd$LT$mos_6502..mm..pgtable..Permssion$GT$$GT$6bitand17ha3bbb08dd2659910E>:
    raw_entry: usize,
}

impl BitAnd<Permssion> for PgtableEntry {
    type Output = bool;
    fn bitand(self, rhs: Permssion) -> bool {
8002c2b0:	27bdffd8 	addiu	sp,sp,-40
8002c2b4:	afbf0024 	sw	ra,36(sp)
8002c2b8:	afa4001c 	sw	a0,28(sp)
8002c2bc:	8fa1001c 	lw	at,28(sp)
8002c2c0:	afa10018 	sw	at,24(sp)
8002c2c4:	afa50020 	sw	a1,32(sp)
        self.raw_entry & (rhs.bits() as usize) != 0
8002c2c8:	8fa10018 	lw	at,24(sp)
8002c2cc:	afa10014 	sw	at,20(sp)
8002c2d0:	27a40020 	addiu	a0,sp,32
8002c2d4:	0c00d308 	jal	80034c20 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17hf2d8d1380f723ecbE>
8002c2d8:	00000000 	nop
8002c2dc:	8fa10014 	lw	at,20(sp)
8002c2e0:	00220824 	and	at,at,v0
8002c2e4:	0001102b 	sltu	v0,zero,at
    }
8002c2e8:	8fbf0024 	lw	ra,36(sp)
8002c2ec:	27bd0028 	addiu	sp,sp,40
8002c2f0:	03e00008 	jr	ra
8002c2f4:	00000000 	nop

8002c2f8 <_ZN85_$LT$mos_6502..mm..pgtable..Permssion$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17hff6de3248d103707E>:
        const PTE_G = 0x0001 << PTE_HARDFLAG_SHIFT;
    }
}

impl From<usize> for Permssion {
    fn from(value: usize) -> Self {
8002c2f8:	27bdffe8 	addiu	sp,sp,-24
8002c2fc:	afbf0014 	sw	ra,20(sp)
8002c300:	afa40010 	sw	a0,16(sp)
        Permssion::from_bits_truncate(value)
8002c304:	0c00d311 	jal	80034c44 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$18from_bits_truncate17h3f9dde299002b59cE>
8002c308:	00000000 	nop
    }
8002c30c:	8fbf0014 	lw	ra,20(sp)
8002c310:	27bd0018 	addiu	sp,sp,24
8002c314:	03e00008 	jr	ra
8002c318:	00000000 	nop

8002c31c <_ZN8mos_65022mm7pgtable12PgtableEntry3new17hc4f18eb2f746fbbdE>:
}

impl PgtableEntry {
    pub const fn new() -> Self {
8002c31c:	27bdfff8 	addiu	sp,sp,-8
        PgtableEntry { raw_entry: 0 }
8002c320:	afa00004 	sw	zero,4(sp)
    }
8002c324:	8fa20004 	lw	v0,4(sp)
8002c328:	27bd0008 	addiu	sp,sp,8
8002c32c:	03e00008 	jr	ra
8002c330:	00000000 	nop

8002c334 <_ZN8mos_65022mm7pgtable12PgtableEntry7to_addr17h6424a844238169a1E>:
    pub fn to_addr(&self) -> PhysAddr {
8002c334:	27bdffe8 	addiu	sp,sp,-24
8002c338:	afbf0014 	sw	ra,20(sp)
8002c33c:	afa40010 	sw	a0,16(sp)
        PhysAddr::new(self.raw_entry & 0xfffff000)
8002c340:	8c810000 	lw	at,0(a0)
8002c344:	2402f000 	li	v0,-4096
8002c348:	00222024 	and	a0,at,v0
8002c34c:	0c00af49 	jal	8002bd24 <_ZN8mos_65022mm4addr8PhysAddr3new17h277f42c1e1d5d6f9E>
8002c350:	00000000 	nop
    }
8002c354:	8fbf0014 	lw	ra,20(sp)
8002c358:	27bd0018 	addiu	sp,sp,24
8002c35c:	03e00008 	jr	ra
8002c360:	00000000 	nop

8002c364 <_ZN8mos_65022mm7pgtable12PgtableEntry3set17h7c34148efb7412b3E>:

    pub fn set(&mut self, ppn: PhysAddr, flags: &Permssion) {
8002c364:	27bdffd0 	addiu	sp,sp,-48
8002c368:	afbf002c 	sw	ra,44(sp)
8002c36c:	afa60014 	sw	a2,20(sp)
8002c370:	afa50018 	sw	a1,24(sp)
8002c374:	00800825 	move	at,a0
8002c378:	8fa40014 	lw	a0,20(sp)
8002c37c:	afa1001c 	sw	at,28(sp)
8002c380:	afa10020 	sw	at,32(sp)
8002c384:	afa50024 	sw	a1,36(sp)
8002c388:	afa40028 	sw	a0,40(sp)
        self.raw_entry = ppn | flags.bits();
8002c38c:	0c00d308 	jal	80034c20 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17hf2d8d1380f723ecbE>
8002c390:	00000000 	nop
8002c394:	8fa40018 	lw	a0,24(sp)
8002c398:	00402825 	move	a1,v0
8002c39c:	0c00aee4 	jal	8002bb90 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..bit..BitOr$LT$usize$GT$$GT$5bitor17hcf7cabf5339499d8E>
8002c3a0:	00000000 	nop
8002c3a4:	8fa4001c 	lw	a0,28(sp)
8002c3a8:	ac820000 	sw	v0,0(a0)
    }
8002c3ac:	8fbf002c 	lw	ra,44(sp)
8002c3b0:	27bd0030 	addiu	sp,sp,48
8002c3b4:	03e00008 	jr	ra
8002c3b8:	00000000 	nop

8002c3bc <_ZN8mos_65022mm7pgtable7Pgtable3new17haa656bcf79ee3c84E>:
        self.raw_entry
    }
}

impl Pgtable {
    pub const fn new() -> Self {
8002c3bc:	27bdefd0 	addiu	sp,sp,-4144
8002c3c0:	afbf102c 	sw	ra,4140(sp)
8002c3c4:	afa40018 	sw	a0,24(sp)
8002c3c8:	afa4001c 	sw	a0,28(sp)
        Pgtable {
            entries: [PgtableEntry::new(); 1024],
8002c3cc:	0c00b0c7 	jal	8002c31c <_ZN8mos_65022mm7pgtable12PgtableEntry3new17hc4f18eb2f746fbbdE>
8002c3d0:	00000000 	nop
8002c3d4:	afa21028 	sw	v0,4136(sp)
8002c3d8:	8fa11028 	lw	at,4136(sp)
8002c3dc:	afa11024 	sw	at,4132(sp)
8002c3e0:	24010000 	li	at,0
8002c3e4:	afa10020 	sw	at,32(sp)
8002c3e8:	0800b0fc 	j	8002c3f0 <_ZN8mos_65022mm7pgtable7Pgtable3new17haa656bcf79ee3c84E+0x34>
8002c3ec:	00000000 	nop
8002c3f0:	8fa10020 	lw	at,32(sp)
8002c3f4:	afa10014 	sw	at,20(sp)
8002c3f8:	2c210400 	sltiu	at,at,1024
8002c3fc:	1020000d 	beqz	at,8002c434 <_ZN8mos_65022mm7pgtable7Pgtable3new17haa656bcf79ee3c84E+0x78>
8002c400:	00000000 	nop
8002c404:	0800b103 	j	8002c40c <_ZN8mos_65022mm7pgtable7Pgtable3new17haa656bcf79ee3c84E+0x50>
8002c408:	00000000 	nop
8002c40c:	8fa10014 	lw	at,20(sp)
8002c410:	00011880 	sll	v1,at,0x2
8002c414:	27a20024 	addiu	v0,sp,36
8002c418:	00431821 	addu	v1,v0,v1
8002c41c:	8fa21024 	lw	v0,4132(sp)
8002c420:	ac620000 	sw	v0,0(v1)
8002c424:	24210001 	addiu	at,at,1
8002c428:	afa10020 	sw	at,32(sp)
8002c42c:	0800b0fc 	j	8002c3f0 <_ZN8mos_65022mm7pgtable7Pgtable3new17haa656bcf79ee3c84E+0x34>
8002c430:	00000000 	nop
        Pgtable {
8002c434:	8fa40018 	lw	a0,24(sp)
8002c438:	27a50024 	addiu	a1,sp,36
8002c43c:	24061000 	li	a2,4096
8002c440:	0c00d3fd 	jal	80034ff4 <memcpy>
8002c444:	00000000 	nop
        }
    }
8002c448:	8fa2001c 	lw	v0,28(sp)
8002c44c:	8fbf102c 	lw	ra,4140(sp)
8002c450:	27bd1030 	addiu	sp,sp,4144
8002c454:	03e00008 	jr	ra
8002c458:	00000000 	nop

8002c45c <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE>:
    pub fn map_va_to_pa(
8002c45c:	27bdfe90 	addiu	sp,sp,-368
8002c460:	afbf016c 	sw	ra,364(sp)
8002c464:	afa60060 	sw	a2,96(sp)
8002c468:	afa50064 	sw	a1,100(sp)
8002c46c:	afa40068 	sw	a0,104(sp)
8002c470:	8fa10184 	lw	at,388(sp)
8002c474:	afa1006c 	sw	at,108(sp)
8002c478:	8fa20180 	lw	v0,384(sp)
8002c47c:	afa20070 	sw	v0,112(sp)
8002c480:	afa400f4 	sw	a0,244(sp)
8002c484:	afa500f8 	sw	a1,248(sp)
8002c488:	afa600fc 	sw	a2,252(sp)
8002c48c:	afa70100 	sw	a3,256(sp)
8002c490:	a3a10107 	sb	at,263(sp)
        pa: PhysAddr,
        count: usize,
        flags: &Permssion,
        reset: bool,
    ) -> Result<(), &'static str> {
        for i in 0..count {
8002c494:	afa0007c 	sw	zero,124(sp)
8002c498:	afa70080 	sw	a3,128(sp)
8002c49c:	8fa4007c 	lw	a0,124(sp)
8002c4a0:	8fa50080 	lw	a1,128(sp)
8002c4a4:	0c0123e2 	jal	80048f88 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
8002c4a8:	00000000 	nop
8002c4ac:	afa20084 	sw	v0,132(sp)
8002c4b0:	afa30088 	sw	v1,136(sp)
8002c4b4:	0800b12f 	j	8002c4bc <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x60>
8002c4b8:	00000000 	nop
8002c4bc:	27a40084 	addiu	a0,sp,132
8002c4c0:	0c0123d9 	jal	80048f64 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
8002c4c4:	00000000 	nop
8002c4c8:	afa2008c 	sw	v0,140(sp)
8002c4cc:	afa30090 	sw	v1,144(sp)
8002c4d0:	8fa1008c 	lw	at,140(sp)
8002c4d4:	14200006 	bnez	at,8002c4f0 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x94>
8002c4d8:	00000000 	nop
8002c4dc:	0800b139 	j	8002c4e4 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x88>
8002c4e0:	00000000 	nop
                    return Err("Page already mapped");
                }
            }
            pgd.entries[vpn & 0x3ff].set(pa, &(*flags | Permssion::PTE_V));
        }
        Ok(())
8002c4e4:	afa00074 	sw	zero,116(sp)
    }
8002c4e8:	0800b150 	j	8002c540 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0xe4>
8002c4ec:	00000000 	nop
        for i in 0..count {
8002c4f0:	8fa40064 	lw	a0,100(sp)
8002c4f4:	8fa10090 	lw	at,144(sp)
8002c4f8:	afa10108 	sw	at,264(sp)
            let vpn = va.add(i << 12).get_vpn();
8002c4fc:	00012b00 	sll	a1,at,0xc
8002c500:	0c00af2c 	jal	8002bcb0 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17hf63c307524190caaE>
8002c504:	00000000 	nop
8002c508:	afa20094 	sw	v0,148(sp)
8002c50c:	27a10094 	addiu	at,sp,148
8002c510:	afa10150 	sw	at,336(sp)
        self.raw >> PAGE_SHIFT
8002c514:	8fa10094 	lw	at,148(sp)
8002c518:	00011302 	srl	v0,at,0xc
8002c51c:	afa20058 	sw	v0,88(sp)
8002c520:	afa2010c 	sw	v0,268(sp)
            if !(self.entries[vpn >> 10] & Permssion::PTE_V) {
8002c524:	00010d82 	srl	at,at,0x16
8002c528:	afa1005c 	sw	at,92(sp)
8002c52c:	2c210400 	sltiu	at,at,1024
8002c530:	14200009 	bnez	at,8002c558 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0xfc>
8002c534:	00000000 	nop
8002c538:	0800b166 	j	8002c598 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x13c>
8002c53c:	00000000 	nop
    }
8002c540:	8fa20074 	lw	v0,116(sp)
8002c544:	8fa30078 	lw	v1,120(sp)
8002c548:	8fbf016c 	lw	ra,364(sp)
8002c54c:	27bd0170 	addiu	sp,sp,368
8002c550:	03e00008 	jr	ra
8002c554:	00000000 	nop
            if !(self.entries[vpn >> 10] & Permssion::PTE_V) {
8002c558:	8fa10068 	lw	at,104(sp)
8002c55c:	8fa2005c 	lw	v0,92(sp)
8002c560:	00021080 	sll	v0,v0,0x2
8002c564:	00220821 	addu	at,at,v0
8002c568:	8c210000 	lw	at,0(at)
8002c56c:	afa10098 	sw	at,152(sp)
8002c570:	8fa10098 	lw	at,152(sp)
8002c574:	afa10110 	sw	at,272(sp)
8002c578:	8fa40110 	lw	a0,272(sp)
8002c57c:	24050080 	li	a1,128
8002c580:	0c00b0ac 	jal	8002c2b0 <_ZN118_$LT$mos_6502..mm..pgtable..PgtableEntry$u20$as$u20$core..ops..bit..BitAnd$LT$mos_6502..mm..pgtable..Permssion$GT$$GT$6bitand17ha3bbb08dd2659910E>
8002c584:	00000000 	nop
8002c588:	1440001e 	bnez	v0,8002c604 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x1a8>
8002c58c:	00000000 	nop
8002c590:	0800b16c 	j	8002c5b0 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x154>
8002c594:	00000000 	nop
8002c598:	8fa4005c 	lw	a0,92(sp)
8002c59c:	3c018105 	lui	at,0x8105
8002c5a0:	2426d350 	addiu	a2,at,-11440
8002c5a4:	24050400 	li	a1,1024
8002c5a8:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002c5ac:	00000000 	nop
8002c5b0:	27a400b4 	addiu	a0,sp,180
8002c5b4:	afa40050 	sw	a0,80(sp)
                let (_, pa) = page_alloc().ok_or("No more pages")?;
8002c5b8:	0c00b007 	jal	8002c01c <_ZN8mos_65022mm4page10page_alloc17ha38ea23af0abb5c5E>
8002c5bc:	00000000 	nop
8002c5c0:	8fa50050 	lw	a1,80(sp)
8002c5c4:	3c018105 	lui	at,0x8105
8002c5c8:	2426d360 	addiu	a2,at,-11424
8002c5cc:	27a400a8 	addiu	a0,sp,168
8002c5d0:	afa40054 	sw	a0,84(sp)
8002c5d4:	2407000d 	li	a3,13
8002c5d8:	0c009667 	jal	8002599c <_ZN4core6option15Option$LT$T$GT$5ok_or17h78b32bbff800a191E>
8002c5dc:	00000000 	nop
8002c5e0:	8fa50054 	lw	a1,84(sp)
8002c5e4:	27a4009c 	addiu	a0,sp,156
8002c5e8:	0c00ad24 	jal	8002b490 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17ha580692a78d50a4dE>
8002c5ec:	00000000 	nop
8002c5f0:	8fa1009c 	lw	at,156(sp)
8002c5f4:	1020000b 	beqz	at,8002c624 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x1c8>
8002c5f8:	00000000 	nop
8002c5fc:	0800b197 	j	8002c65c <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x200>
8002c600:	00000000 	nop
                unsafe { &mut *(self.entries[vpn >> 10].to_addr().raw as *mut Pgtable) };
8002c604:	8fa10058 	lw	at,88(sp)
8002c608:	00010a82 	srl	at,at,0xa
8002c60c:	afa1004c 	sw	at,76(sp)
8002c610:	2c210400 	sltiu	at,at,1024
8002c614:	14200035 	bnez	at,8002c6ec <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x290>
8002c618:	00000000 	nop
8002c61c:	0800b1cc 	j	8002c730 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x2d4>
8002c620:	00000000 	nop
                let (_, pa) = page_alloc().ok_or("No more pages")?;
8002c624:	8fa10058 	lw	at,88(sp)
8002c628:	8fa300a0 	lw	v1,160(sp)
8002c62c:	8fa200a4 	lw	v0,164(sp)
8002c630:	afa20044 	sw	v0,68(sp)
8002c634:	afa30114 	sw	v1,276(sp)
8002c638:	afa20118 	sw	v0,280(sp)
8002c63c:	afa2011c 	sw	v0,284(sp)
                self.entries[vpn >> 10].set(pa, &(*flags | Permssion::PTE_V));
8002c640:	00010a82 	srl	at,at,0xa
8002c644:	afa10048 	sw	at,72(sp)
8002c648:	2c210400 	sltiu	at,at,1024
8002c64c:	1420000f 	bnez	at,8002c68c <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x230>
8002c650:	00000000 	nop
8002c654:	0800b1b5 	j	8002c6d4 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x278>
8002c658:	00000000 	nop
                let (_, pa) = page_alloc().ok_or("No more pages")?;
8002c65c:	8fa400a0 	lw	a0,160(sp)
8002c660:	8fa500a4 	lw	a1,164(sp)
8002c664:	afa40120 	sw	a0,288(sp)
8002c668:	afa50124 	sw	a1,292(sp)
8002c66c:	3c018105 	lui	at,0x8105
8002c670:	2426d380 	addiu	a2,at,-11392
8002c674:	0c00809d 	jal	80020274 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hc0dd7e832e7e990eE>
8002c678:	00000000 	nop
8002c67c:	afa20074 	sw	v0,116(sp)
8002c680:	afa30078 	sw	v1,120(sp)
8002c684:	0800b150 	j	8002c540 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0xe4>
8002c688:	00000000 	nop
                self.entries[vpn >> 10].set(pa, &(*flags | Permssion::PTE_V));
8002c68c:	8fa10070 	lw	at,112(sp)
8002c690:	8fa20068 	lw	v0,104(sp)
8002c694:	8fa30048 	lw	v1,72(sp)
8002c698:	00031880 	sll	v1,v1,0x2
8002c69c:	00431021 	addu	v0,v0,v1
8002c6a0:	afa20040 	sw	v0,64(sp)
8002c6a4:	8c240000 	lw	a0,0(at)
8002c6a8:	24050080 	li	a1,128
8002c6ac:	0c00d328 	jal	80034ca0 <_ZN8mos_65022mm7pgtable1_84_$LT$impl$u20$core..ops..bit..BitOr$u20$for$u20$mos_6502..mm..pgtable..Permssion$GT$5bitor17h535389841f955927E>
8002c6b0:	00000000 	nop
8002c6b4:	8fa40040 	lw	a0,64(sp)
8002c6b8:	8fa50044 	lw	a1,68(sp)
8002c6bc:	afa200c0 	sw	v0,192(sp)
8002c6c0:	27a600c0 	addiu	a2,sp,192
8002c6c4:	0c00b0d9 	jal	8002c364 <_ZN8mos_65022mm7pgtable12PgtableEntry3set17h7c34148efb7412b3E>
8002c6c8:	00000000 	nop
8002c6cc:	0800b181 	j	8002c604 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x1a8>
8002c6d0:	00000000 	nop
8002c6d4:	8fa40048 	lw	a0,72(sp)
8002c6d8:	3c018105 	lui	at,0x8105
8002c6dc:	2426d370 	addiu	a2,at,-11408
8002c6e0:	24050400 	li	a1,1024
8002c6e4:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002c6e8:	00000000 	nop
                unsafe { &mut *(self.entries[vpn >> 10].to_addr().raw as *mut Pgtable) };
8002c6ec:	8fa10068 	lw	at,104(sp)
8002c6f0:	8fa2004c 	lw	v0,76(sp)
8002c6f4:	00021080 	sll	v0,v0,0x2
8002c6f8:	00222021 	addu	a0,at,v0
8002c6fc:	0c00b0cd 	jal	8002c334 <_ZN8mos_65022mm7pgtable12PgtableEntry7to_addr17h6424a844238169a1E>
8002c700:	00000000 	nop
8002c704:	8fa10058 	lw	at,88(sp)
8002c708:	00401825 	move	v1,v0
8002c70c:	afa30038 	sw	v1,56(sp)
8002c710:	afa20128 	sw	v0,296(sp)
            if pgd.entries[vpn & 0x3ff] & Permssion::PTE_V {
8002c714:	302103ff 	andi	at,at,0x3ff
8002c718:	afa1003c 	sw	at,60(sp)
8002c71c:	2c210400 	sltiu	at,at,1024
8002c720:	14200009 	bnez	at,8002c748 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x2ec>
8002c724:	00000000 	nop
8002c728:	0800b1e2 	j	8002c788 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x32c>
8002c72c:	00000000 	nop
                unsafe { &mut *(self.entries[vpn >> 10].to_addr().raw as *mut Pgtable) };
8002c730:	8fa4004c 	lw	a0,76(sp)
8002c734:	3c018105 	lui	at,0x8105
8002c738:	2426d390 	addiu	a2,at,-11376
8002c73c:	24050400 	li	a1,1024
8002c740:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002c744:	00000000 	nop
            if pgd.entries[vpn & 0x3ff] & Permssion::PTE_V {
8002c748:	8fa10038 	lw	at,56(sp)
8002c74c:	8fa2003c 	lw	v0,60(sp)
8002c750:	00021080 	sll	v0,v0,0x2
8002c754:	00220821 	addu	at,at,v0
8002c758:	8c210000 	lw	at,0(at)
8002c75c:	afa100c4 	sw	at,196(sp)
8002c760:	8fa100c4 	lw	at,196(sp)
8002c764:	afa1012c 	sw	at,300(sp)
8002c768:	8fa4012c 	lw	a0,300(sp)
8002c76c:	24050080 	li	a1,128
8002c770:	0c00b0ac 	jal	8002c2b0 <_ZN118_$LT$mos_6502..mm..pgtable..PgtableEntry$u20$as$u20$core..ops..bit..BitAnd$LT$mos_6502..mm..pgtable..Permssion$GT$$GT$6bitand17ha3bbb08dd2659910E>
8002c774:	00000000 	nop
8002c778:	14400011 	bnez	v0,8002c7c0 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x364>
8002c77c:	00000000 	nop
8002c780:	0800b1e8 	j	8002c7a0 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x344>
8002c784:	00000000 	nop
8002c788:	8fa4003c 	lw	a0,60(sp)
8002c78c:	3c018105 	lui	at,0x8105
8002c790:	2426d3a0 	addiu	a2,at,-11360
8002c794:	24050400 	li	a1,1024
8002c798:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002c79c:	00000000 	nop
            pgd.entries[vpn & 0x3ff].set(pa, &(*flags | Permssion::PTE_V));
8002c7a0:	8fa10058 	lw	at,88(sp)
8002c7a4:	302103ff 	andi	at,at,0x3ff
8002c7a8:	afa10034 	sw	at,52(sp)
8002c7ac:	2c210400 	sltiu	at,at,1024
8002c7b0:	1420009d 	bnez	at,8002ca28 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x5cc>
8002c7b4:	00000000 	nop
8002c7b8:	0800b29c 	j	8002ca70 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x614>
8002c7bc:	00000000 	nop
                if reset {
8002c7c0:	8fa1006c 	lw	at,108(sp)
8002c7c4:	30210001 	andi	at,at,0x1
8002c7c8:	1420000a 	bnez	at,8002c7f4 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x398>
8002c7cc:	00000000 	nop
8002c7d0:	0800b1f6 	j	8002c7d8 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x37c>
8002c7d4:	00000000 	nop
                    return Err("Page already mapped");
8002c7d8:	3c018105 	lui	at,0x8105
8002c7dc:	2421d3b0 	addiu	at,at,-11344
8002c7e0:	afa10074 	sw	at,116(sp)
8002c7e4:	24010013 	li	at,19
8002c7e8:	afa10078 	sw	at,120(sp)
8002c7ec:	0800b150 	j	8002c540 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0xe4>
8002c7f0:	00000000 	nop
8002c7f4:	27a400e0 	addiu	a0,sp,224
8002c7f8:	afa4002c 	sw	a0,44(sp)
                    let (_, pa) = page_alloc().ok_or("No more pages")?;
8002c7fc:	0c00b007 	jal	8002c01c <_ZN8mos_65022mm4page10page_alloc17ha38ea23af0abb5c5E>
8002c800:	00000000 	nop
8002c804:	8fa5002c 	lw	a1,44(sp)
8002c808:	3c018105 	lui	at,0x8105
8002c80c:	2426d360 	addiu	a2,at,-11424
8002c810:	27a400d4 	addiu	a0,sp,212
8002c814:	afa40030 	sw	a0,48(sp)
8002c818:	2407000d 	li	a3,13
8002c81c:	0c009667 	jal	8002599c <_ZN4core6option15Option$LT$T$GT$5ok_or17h78b32bbff800a191E>
8002c820:	00000000 	nop
8002c824:	8fa50030 	lw	a1,48(sp)
8002c828:	27a400c8 	addiu	a0,sp,200
8002c82c:	0c00ad24 	jal	8002b490 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17ha580692a78d50a4dE>
8002c830:	00000000 	nop
8002c834:	8fa100c8 	lw	at,200(sp)
8002c838:	14200011 	bnez	at,8002c880 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x424>
8002c83c:	00000000 	nop
8002c840:	0800b212 	j	8002c848 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x3ec>
8002c844:	00000000 	nop
8002c848:	8fa10058 	lw	at,88(sp)
8002c84c:	8fa300cc 	lw	v1,204(sp)
8002c850:	8fa200d0 	lw	v0,208(sp)
8002c854:	afa20024 	sw	v0,36(sp)
8002c858:	afa30130 	sw	v1,304(sp)
8002c85c:	afa20134 	sw	v0,308(sp)
8002c860:	afa20138 	sw	v0,312(sp)
                    let pg = pgd.entries[vpn & 0x3ff].to_addr();
8002c864:	302103ff 	andi	at,at,0x3ff
8002c868:	afa10028 	sw	at,40(sp)
8002c86c:	2c210400 	sltiu	at,at,1024
8002c870:	1420000f 	bnez	at,8002c8b0 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x454>
8002c874:	00000000 	nop
8002c878:	0800b26c 	j	8002c9b0 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x554>
8002c87c:	00000000 	nop
                    let (_, pa) = page_alloc().ok_or("No more pages")?;
8002c880:	8fa400cc 	lw	a0,204(sp)
8002c884:	8fa500d0 	lw	a1,208(sp)
8002c888:	afa40140 	sw	a0,320(sp)
8002c88c:	afa50144 	sw	a1,324(sp)
8002c890:	3c018105 	lui	at,0x8105
8002c894:	2426d428 	addiu	a2,at,-11224
8002c898:	0c00809d 	jal	80020274 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hc0dd7e832e7e990eE>
8002c89c:	00000000 	nop
8002c8a0:	afa20074 	sw	v0,116(sp)
8002c8a4:	afa30078 	sw	v1,120(sp)
8002c8a8:	0800b150 	j	8002c540 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0xe4>
8002c8ac:	00000000 	nop
                    let pg = pgd.entries[vpn & 0x3ff].to_addr();
8002c8b0:	8fa10038 	lw	at,56(sp)
8002c8b4:	8fa20028 	lw	v0,40(sp)
8002c8b8:	00021080 	sll	v0,v0,0x2
8002c8bc:	00222021 	addu	a0,at,v0
8002c8c0:	0c00b0cd 	jal	8002c334 <_ZN8mos_65022mm7pgtable12PgtableEntry7to_addr17h6424a844238169a1E>
8002c8c4:	00000000 	nop
8002c8c8:	afa2013c 	sw	v0,316(sp)
8002c8cc:	afa2014c 	sw	v0,332(sp)
        VirtAddr { raw }
8002c8d0:	afa20148 	sw	v0,328(sp)
    }
8002c8d4:	8fa40148 	lw	a0,328(sp)
    Some(kvaddr.sub(KSEG0).raw.checked_div(PAGE_SIZE)?)
8002c8d8:	afa40164 	sw	a0,356(sp)
8002c8dc:	3c058000 	lui	a1,0x8000
8002c8e0:	0c00aed0 	jal	8002bb40 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Sub$GT$3sub17h38d137ed76a3fbcaE>
8002c8e4:	00000000 	nop
8002c8e8:	00402025 	move	a0,v0
8002c8ec:	24051000 	li	a1,4096
8002c8f0:	0c0084f6 	jal	800213d8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h500b128e668a335cE>
8002c8f4:	00000000 	nop
8002c8f8:	00402025 	move	a0,v0
8002c8fc:	00602825 	move	a1,v1
8002c900:	0c00f1d5 	jal	8003c754 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h46f0356384a6ddb1E>
8002c904:	00000000 	nop
8002c908:	afa2015c 	sw	v0,348(sp)
8002c90c:	afa30160 	sw	v1,352(sp)
8002c910:	8fa1015c 	lw	at,348(sp)
8002c914:	1420000a 	bnez	at,8002c940 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x4e4>
8002c918:	00000000 	nop
8002c91c:	0800b249 	j	8002c924 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x4c8>
8002c920:	00000000 	nop
8002c924:	8fa10160 	lw	at,352(sp)
8002c928:	afa10168 	sw	at,360(sp)
8002c92c:	afa10158 	sw	at,344(sp)
8002c930:	24010001 	li	at,1
8002c934:	afa10154 	sw	at,340(sp)
}
8002c938:	0800b256 	j	8002c958 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x4fc>
8002c93c:	00000000 	nop
    Some(kvaddr.sub(KSEG0).raw.checked_div(PAGE_SIZE)?)
8002c940:	0c00f23c 	jal	8003c8f0 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h67c5eb85b2796ddcE>
8002c944:	00000000 	nop
8002c948:	afa20154 	sw	v0,340(sp)
8002c94c:	afa30158 	sw	v1,344(sp)
8002c950:	0800b256 	j	8002c958 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x4fc>
8002c954:	00000000 	nop
}
8002c958:	8fa40154 	lw	a0,340(sp)
8002c95c:	8fa50158 	lw	a1,344(sp)
                        get_page_index_by_kvaddr(VirtAddr::new(pg.raw as usize))
8002c960:	3c018105 	lui	at,0x8105
8002c964:	2421d3f8 	addiu	at,at,-11272
8002c968:	03a01025 	move	v0,sp
8002c96c:	ac410010 	sw	at,16(v0)
8002c970:	3c018105 	lui	at,0x8105
8002c974:	2426d3d4 	addiu	a2,at,-11308
8002c978:	24070023 	li	a3,35
8002c97c:	0c00de41 	jal	80037904 <_ZN4core6option15Option$LT$T$GT$6expect17h537867a9d3760452E>
8002c980:	00000000 	nop
8002c984:	00402025 	move	a0,v0
                    page_decref(
8002c988:	0c00b05d 	jal	8002c174 <_ZN8mos_65022mm4page11page_decref17h05cfef4ab9fc53fdE>
8002c98c:	00000000 	nop
8002c990:	8fa10058 	lw	at,88(sp)
                    pgd.entries[vpn & 0x3ff].set(pa, &(*flags | Permssion::PTE_V));
8002c994:	302103ff 	andi	at,at,0x3ff
8002c998:	afa10020 	sw	at,32(sp)
8002c99c:	2c210400 	sltiu	at,at,1024
8002c9a0:	14200009 	bnez	at,8002c9c8 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x56c>
8002c9a4:	00000000 	nop
8002c9a8:	0800b284 	j	8002ca10 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x5b4>
8002c9ac:	00000000 	nop
                    let pg = pgd.entries[vpn & 0x3ff].to_addr();
8002c9b0:	8fa40028 	lw	a0,40(sp)
8002c9b4:	3c018105 	lui	at,0x8105
8002c9b8:	2426d3c4 	addiu	a2,at,-11324
8002c9bc:	24050400 	li	a1,1024
8002c9c0:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002c9c4:	00000000 	nop
                    pgd.entries[vpn & 0x3ff].set(pa, &(*flags | Permssion::PTE_V));
8002c9c8:	8fa10070 	lw	at,112(sp)
8002c9cc:	8fa20038 	lw	v0,56(sp)
8002c9d0:	8fa30020 	lw	v1,32(sp)
8002c9d4:	00031880 	sll	v1,v1,0x2
8002c9d8:	00431021 	addu	v0,v0,v1
8002c9dc:	afa2001c 	sw	v0,28(sp)
8002c9e0:	8c240000 	lw	a0,0(at)
8002c9e4:	24050080 	li	a1,128
8002c9e8:	0c00d328 	jal	80034ca0 <_ZN8mos_65022mm7pgtable1_84_$LT$impl$u20$core..ops..bit..BitOr$u20$for$u20$mos_6502..mm..pgtable..Permssion$GT$5bitor17h535389841f955927E>
8002c9ec:	00000000 	nop
8002c9f0:	8fa4001c 	lw	a0,28(sp)
8002c9f4:	8fa50024 	lw	a1,36(sp)
8002c9f8:	afa200ec 	sw	v0,236(sp)
8002c9fc:	27a600ec 	addiu	a2,sp,236
8002ca00:	0c00b0d9 	jal	8002c364 <_ZN8mos_65022mm7pgtable12PgtableEntry3set17h7c34148efb7412b3E>
8002ca04:	00000000 	nop
8002ca08:	0800b1e8 	j	8002c7a0 <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x344>
8002ca0c:	00000000 	nop
8002ca10:	8fa40020 	lw	a0,32(sp)
8002ca14:	3c018105 	lui	at,0x8105
8002ca18:	2426d408 	addiu	a2,at,-11256
8002ca1c:	24050400 	li	a1,1024
8002ca20:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002ca24:	00000000 	nop
            pgd.entries[vpn & 0x3ff].set(pa, &(*flags | Permssion::PTE_V));
8002ca28:	8fa10070 	lw	at,112(sp)
8002ca2c:	8fa20038 	lw	v0,56(sp)
8002ca30:	8fa30034 	lw	v1,52(sp)
8002ca34:	00031880 	sll	v1,v1,0x2
8002ca38:	00431021 	addu	v0,v0,v1
8002ca3c:	afa20018 	sw	v0,24(sp)
8002ca40:	8c240000 	lw	a0,0(at)
8002ca44:	24050080 	li	a1,128
8002ca48:	0c00d328 	jal	80034ca0 <_ZN8mos_65022mm7pgtable1_84_$LT$impl$u20$core..ops..bit..BitOr$u20$for$u20$mos_6502..mm..pgtable..Permssion$GT$5bitor17h535389841f955927E>
8002ca4c:	00000000 	nop
8002ca50:	8fa40018 	lw	a0,24(sp)
8002ca54:	8fa50060 	lw	a1,96(sp)
8002ca58:	afa200f0 	sw	v0,240(sp)
8002ca5c:	27a600f0 	addiu	a2,sp,240
8002ca60:	0c00b0d9 	jal	8002c364 <_ZN8mos_65022mm7pgtable12PgtableEntry3set17h7c34148efb7412b3E>
8002ca64:	00000000 	nop
8002ca68:	0800b12f 	j	8002c4bc <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE+0x60>
8002ca6c:	00000000 	nop
8002ca70:	8fa40034 	lw	a0,52(sp)
8002ca74:	3c018105 	lui	at,0x8105
8002ca78:	2426d418 	addiu	a2,at,-11240
8002ca7c:	24050400 	li	a1,1024
8002ca80:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002ca84:	00000000 	nop

8002ca88 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E>:
    pub fn unmap_va(&mut self, va: VirtAddr) -> Result<(), &'static str> {
8002ca88:	27bdff68 	addiu	sp,sp,-152
8002ca8c:	afbf0094 	sw	ra,148(sp)
8002ca90:	afa40034 	sw	a0,52(sp)
8002ca94:	afa50040 	sw	a1,64(sp)
8002ca98:	afa40058 	sw	a0,88(sp)
8002ca9c:	27a10040 	addiu	at,sp,64
8002caa0:	afa10078 	sw	at,120(sp)
        self.raw >> PAGE_SHIFT
8002caa4:	8fa10040 	lw	at,64(sp)
8002caa8:	00011302 	srl	v0,at,0xc
8002caac:	afa20038 	sw	v0,56(sp)
        let vpn = va.get_vpn();
8002cab0:	afa2005c 	sw	v0,92(sp)
        // self.entries[vpn].set(0, &Permssion::empty());
        if !(self.entries[vpn >> 10] & Permssion::PTE_V) {
8002cab4:	00010d82 	srl	at,at,0x16
8002cab8:	afa1003c 	sw	at,60(sp)
8002cabc:	2c210400 	sltiu	at,at,1024
8002cac0:	10200013 	beqz	at,8002cb10 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0x88>
8002cac4:	00000000 	nop
8002cac8:	0800b2b4 	j	8002cad0 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0x48>
8002cacc:	00000000 	nop
8002cad0:	8fa10034 	lw	at,52(sp)
8002cad4:	8fa2003c 	lw	v0,60(sp)
8002cad8:	00021080 	sll	v0,v0,0x2
8002cadc:	00220821 	addu	at,at,v0
8002cae0:	8c210000 	lw	at,0(at)
8002cae4:	afa1004c 	sw	at,76(sp)
8002cae8:	8fa1004c 	lw	at,76(sp)
8002caec:	afa10060 	sw	at,96(sp)
8002caf0:	8fa40060 	lw	a0,96(sp)
8002caf4:	24050080 	li	a1,128
8002caf8:	0c00b0ac 	jal	8002c2b0 <_ZN118_$LT$mos_6502..mm..pgtable..PgtableEntry$u20$as$u20$core..ops..bit..BitAnd$LT$mos_6502..mm..pgtable..Permssion$GT$$GT$6bitand17ha3bbb08dd2659910E>
8002cafc:	00000000 	nop
8002cb00:	14400010 	bnez	v0,8002cb44 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0xbc>
8002cb04:	00000000 	nop
8002cb08:	0800b2ca 	j	8002cb28 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0xa0>
8002cb0c:	00000000 	nop
8002cb10:	8fa4003c 	lw	a0,60(sp)
8002cb14:	3c018105 	lui	at,0x8105
8002cb18:	2426d438 	addiu	a2,at,-11208
8002cb1c:	24050400 	li	a1,1024
8002cb20:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002cb24:	00000000 	nop
            return Err("the page is not mapped");
8002cb28:	3c018105 	lui	at,0x8105
8002cb2c:	2421d448 	addiu	at,at,-11192
8002cb30:	afa10044 	sw	at,68(sp)
8002cb34:	24010016 	li	at,22
8002cb38:	afa10048 	sw	at,72(sp)
8002cb3c:	0800b2d9 	j	8002cb64 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0xdc>
8002cb40:	00000000 	nop
        }
        let pgd: &mut Pgtable =
            unsafe { &mut *(self.entries[vpn >> 10].to_addr().raw as *mut Pgtable) };
8002cb44:	8fa10038 	lw	at,56(sp)
8002cb48:	00010a82 	srl	at,at,0xa
8002cb4c:	afa10030 	sw	at,48(sp)
8002cb50:	2c210400 	sltiu	at,at,1024
8002cb54:	14200009 	bnez	at,8002cb7c <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0xf4>
8002cb58:	00000000 	nop
8002cb5c:	0800b2f0 	j	8002cbc0 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0x138>
8002cb60:	00000000 	nop
            get_page_index_by_kvaddr(VirtAddr::new(pg.raw as usize))
                .expect("The mapped memory should be a page."),
        );
        pgd.entries[vpn & 0x3ff].set(PhysAddr::new(0), &Permssion::empty());
        Ok(())
    }
8002cb64:	8fa20044 	lw	v0,68(sp)
8002cb68:	8fa30048 	lw	v1,72(sp)
8002cb6c:	8fbf0094 	lw	ra,148(sp)
8002cb70:	27bd0098 	addiu	sp,sp,152
8002cb74:	03e00008 	jr	ra
8002cb78:	00000000 	nop
            unsafe { &mut *(self.entries[vpn >> 10].to_addr().raw as *mut Pgtable) };
8002cb7c:	8fa10034 	lw	at,52(sp)
8002cb80:	8fa20030 	lw	v0,48(sp)
8002cb84:	00021080 	sll	v0,v0,0x2
8002cb88:	00222021 	addu	a0,at,v0
8002cb8c:	0c00b0cd 	jal	8002c334 <_ZN8mos_65022mm7pgtable12PgtableEntry7to_addr17h6424a844238169a1E>
8002cb90:	00000000 	nop
8002cb94:	8fa10038 	lw	at,56(sp)
8002cb98:	00401825 	move	v1,v0
8002cb9c:	afa30028 	sw	v1,40(sp)
8002cba0:	afa20064 	sw	v0,100(sp)
        if !(pgd.entries[vpn & 0x3ff] & Permssion::PTE_V) {
8002cba4:	302103ff 	andi	at,at,0x3ff
8002cba8:	afa1002c 	sw	at,44(sp)
8002cbac:	2c210400 	sltiu	at,at,1024
8002cbb0:	14200009 	bnez	at,8002cbd8 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0x150>
8002cbb4:	00000000 	nop
8002cbb8:	0800b306 	j	8002cc18 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0x190>
8002cbbc:	00000000 	nop
            unsafe { &mut *(self.entries[vpn >> 10].to_addr().raw as *mut Pgtable) };
8002cbc0:	8fa40030 	lw	a0,48(sp)
8002cbc4:	3c018105 	lui	at,0x8105
8002cbc8:	2426d460 	addiu	a2,at,-11168
8002cbcc:	24050400 	li	a1,1024
8002cbd0:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002cbd4:	00000000 	nop
        if !(pgd.entries[vpn & 0x3ff] & Permssion::PTE_V) {
8002cbd8:	8fa10028 	lw	at,40(sp)
8002cbdc:	8fa2002c 	lw	v0,44(sp)
8002cbe0:	00021080 	sll	v0,v0,0x2
8002cbe4:	00220821 	addu	at,at,v0
8002cbe8:	8c210000 	lw	at,0(at)
8002cbec:	afa10050 	sw	at,80(sp)
8002cbf0:	8fa10050 	lw	at,80(sp)
8002cbf4:	afa10068 	sw	at,104(sp)
8002cbf8:	8fa40068 	lw	a0,104(sp)
8002cbfc:	24050080 	li	a1,128
8002cc00:	0c00b0ac 	jal	8002c2b0 <_ZN118_$LT$mos_6502..mm..pgtable..PgtableEntry$u20$as$u20$core..ops..bit..BitAnd$LT$mos_6502..mm..pgtable..Permssion$GT$$GT$6bitand17ha3bbb08dd2659910E>
8002cc04:	00000000 	nop
8002cc08:	14400010 	bnez	v0,8002cc4c <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0x1c4>
8002cc0c:	00000000 	nop
8002cc10:	0800b30c 	j	8002cc30 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0x1a8>
8002cc14:	00000000 	nop
8002cc18:	8fa4002c 	lw	a0,44(sp)
8002cc1c:	3c018105 	lui	at,0x8105
8002cc20:	2426d470 	addiu	a2,at,-11152
8002cc24:	24050400 	li	a1,1024
8002cc28:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002cc2c:	00000000 	nop
            return Err("the page is not mapped");
8002cc30:	3c018105 	lui	at,0x8105
8002cc34:	2421d448 	addiu	at,at,-11192
8002cc38:	afa10044 	sw	at,68(sp)
8002cc3c:	24010016 	li	at,22
8002cc40:	afa10048 	sw	at,72(sp)
8002cc44:	0800b2d9 	j	8002cb64 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0xdc>
8002cc48:	00000000 	nop
        let pg = pgd.entries[vpn & 0x3ff].to_addr();
8002cc4c:	8fa10038 	lw	at,56(sp)
8002cc50:	302103ff 	andi	at,at,0x3ff
8002cc54:	afa10024 	sw	at,36(sp)
8002cc58:	2c210400 	sltiu	at,at,1024
8002cc5c:	10200043 	beqz	at,8002cd6c <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0x2e4>
8002cc60:	00000000 	nop
8002cc64:	0800b31b 	j	8002cc6c <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0x1e4>
8002cc68:	00000000 	nop
8002cc6c:	8fa10028 	lw	at,40(sp)
8002cc70:	8fa20024 	lw	v0,36(sp)
8002cc74:	00021080 	sll	v0,v0,0x2
8002cc78:	00222021 	addu	a0,at,v0
8002cc7c:	0c00b0cd 	jal	8002c334 <_ZN8mos_65022mm7pgtable12PgtableEntry7to_addr17h6424a844238169a1E>
8002cc80:	00000000 	nop
8002cc84:	afa2006c 	sw	v0,108(sp)
8002cc88:	afa20074 	sw	v0,116(sp)
        VirtAddr { raw }
8002cc8c:	afa20070 	sw	v0,112(sp)
    }
8002cc90:	8fa40070 	lw	a0,112(sp)
    Some(kvaddr.sub(KSEG0).raw.checked_div(PAGE_SIZE)?)
8002cc94:	afa4008c 	sw	a0,140(sp)
8002cc98:	3c058000 	lui	a1,0x8000
8002cc9c:	0c00aed0 	jal	8002bb40 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Sub$GT$3sub17h38d137ed76a3fbcaE>
8002cca0:	00000000 	nop
8002cca4:	00402025 	move	a0,v0
8002cca8:	24051000 	li	a1,4096
8002ccac:	0c0084f6 	jal	800213d8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_div17h500b128e668a335cE>
8002ccb0:	00000000 	nop
8002ccb4:	00402025 	move	a0,v0
8002ccb8:	00602825 	move	a1,v1
8002ccbc:	0c00f1d5 	jal	8003c754 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h46f0356384a6ddb1E>
8002ccc0:	00000000 	nop
8002ccc4:	afa20084 	sw	v0,132(sp)
8002ccc8:	afa30088 	sw	v1,136(sp)
8002cccc:	8fa10084 	lw	at,132(sp)
8002ccd0:	1420000a 	bnez	at,8002ccfc <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0x274>
8002ccd4:	00000000 	nop
8002ccd8:	0800b338 	j	8002cce0 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0x258>
8002ccdc:	00000000 	nop
8002cce0:	8fa10088 	lw	at,136(sp)
8002cce4:	afa10090 	sw	at,144(sp)
8002cce8:	afa10080 	sw	at,128(sp)
8002ccec:	24010001 	li	at,1
8002ccf0:	afa1007c 	sw	at,124(sp)
}
8002ccf4:	0800b345 	j	8002cd14 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0x28c>
8002ccf8:	00000000 	nop
    Some(kvaddr.sub(KSEG0).raw.checked_div(PAGE_SIZE)?)
8002ccfc:	0c00f23c 	jal	8003c8f0 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h67c5eb85b2796ddcE>
8002cd00:	00000000 	nop
8002cd04:	afa2007c 	sw	v0,124(sp)
8002cd08:	afa30080 	sw	v1,128(sp)
8002cd0c:	0800b345 	j	8002cd14 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0x28c>
8002cd10:	00000000 	nop
}
8002cd14:	8fa4007c 	lw	a0,124(sp)
8002cd18:	8fa50080 	lw	a1,128(sp)
            get_page_index_by_kvaddr(VirtAddr::new(pg.raw as usize))
8002cd1c:	3c018105 	lui	at,0x8105
8002cd20:	2421d490 	addiu	at,at,-11120
8002cd24:	03a01025 	move	v0,sp
8002cd28:	ac410010 	sw	at,16(v0)
8002cd2c:	3c018105 	lui	at,0x8105
8002cd30:	2426d3d4 	addiu	a2,at,-11308
8002cd34:	24070023 	li	a3,35
8002cd38:	0c00de41 	jal	80037904 <_ZN4core6option15Option$LT$T$GT$6expect17h537867a9d3760452E>
8002cd3c:	00000000 	nop
8002cd40:	00402025 	move	a0,v0
        page_decref(
8002cd44:	0c00b05d 	jal	8002c174 <_ZN8mos_65022mm4page11page_decref17h05cfef4ab9fc53fdE>
8002cd48:	00000000 	nop
8002cd4c:	8fa10038 	lw	at,56(sp)
        pgd.entries[vpn & 0x3ff].set(PhysAddr::new(0), &Permssion::empty());
8002cd50:	302103ff 	andi	at,at,0x3ff
8002cd54:	afa10020 	sw	at,32(sp)
8002cd58:	2c210400 	sltiu	at,at,1024
8002cd5c:	14200009 	bnez	at,8002cd84 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0x2fc>
8002cd60:	00000000 	nop
8002cd64:	0800b375 	j	8002cdd4 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0x34c>
8002cd68:	00000000 	nop
        let pg = pgd.entries[vpn & 0x3ff].to_addr();
8002cd6c:	8fa40024 	lw	a0,36(sp)
8002cd70:	3c018105 	lui	at,0x8105
8002cd74:	2426d480 	addiu	a2,at,-11136
8002cd78:	24050400 	li	a1,1024
8002cd7c:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002cd80:	00000000 	nop
        pgd.entries[vpn & 0x3ff].set(PhysAddr::new(0), &Permssion::empty());
8002cd84:	8fa10028 	lw	at,40(sp)
8002cd88:	8fa20020 	lw	v0,32(sp)
8002cd8c:	00021080 	sll	v0,v0,0x2
8002cd90:	00220821 	addu	at,at,v0
8002cd94:	afa10018 	sw	at,24(sp)
8002cd98:	24040000 	li	a0,0
8002cd9c:	0c00af49 	jal	8002bd24 <_ZN8mos_65022mm4addr8PhysAddr3new17h277f42c1e1d5d6f9E>
8002cda0:	00000000 	nop
8002cda4:	afa2001c 	sw	v0,28(sp)
8002cda8:	0c00d2fe 	jal	80034bf8 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$5empty17h7848d888f7322300E>
8002cdac:	00000000 	nop
8002cdb0:	8fa40018 	lw	a0,24(sp)
8002cdb4:	8fa5001c 	lw	a1,28(sp)
8002cdb8:	afa20054 	sw	v0,84(sp)
8002cdbc:	27a60054 	addiu	a2,sp,84
8002cdc0:	0c00b0d9 	jal	8002c364 <_ZN8mos_65022mm7pgtable12PgtableEntry3set17h7c34148efb7412b3E>
8002cdc4:	00000000 	nop
        Ok(())
8002cdc8:	afa00044 	sw	zero,68(sp)
    }
8002cdcc:	0800b2d9 	j	8002cb64 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E+0xdc>
8002cdd0:	00000000 	nop
        pgd.entries[vpn & 0x3ff].set(PhysAddr::new(0), &Permssion::empty());
8002cdd4:	8fa40020 	lw	a0,32(sp)
8002cdd8:	3c018105 	lui	at,0x8105
8002cddc:	2426d4a0 	addiu	a2,at,-11104
8002cde0:	24050400 	li	a1,1024
8002cde4:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002cde8:	00000000 	nop

8002cdec <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E>:

    pub fn va_to_pa(&self, va: VirtAddr) -> Option<(&PgtableEntry, PhysAddr)> {
8002cdec:	27bdff90 	addiu	sp,sp,-112
8002cdf0:	afbf006c 	sw	ra,108(sp)
8002cdf4:	afa4002c 	sw	a0,44(sp)
8002cdf8:	afa50038 	sw	a1,56(sp)
8002cdfc:	afa40054 	sw	a0,84(sp)
8002ce00:	27a10038 	addiu	at,sp,56
8002ce04:	afa10068 	sw	at,104(sp)
        self.raw >> PAGE_SHIFT
8002ce08:	8fa10038 	lw	at,56(sp)
8002ce0c:	00011302 	srl	v0,at,0xc
8002ce10:	afa20030 	sw	v0,48(sp)
        let vpn = va.get_vpn();
8002ce14:	afa20058 	sw	v0,88(sp)
        if !(self.entries[vpn >> 10] & Permssion::PTE_V) {
8002ce18:	00010d82 	srl	at,at,0x16
8002ce1c:	afa10034 	sw	at,52(sp)
8002ce20:	2c210400 	sltiu	at,at,1024
8002ce24:	10200013 	beqz	at,8002ce74 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0x88>
8002ce28:	00000000 	nop
8002ce2c:	0800b38d 	j	8002ce34 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0x48>
8002ce30:	00000000 	nop
8002ce34:	8fa1002c 	lw	at,44(sp)
8002ce38:	8fa20034 	lw	v0,52(sp)
8002ce3c:	00021080 	sll	v0,v0,0x2
8002ce40:	00220821 	addu	at,at,v0
8002ce44:	8c210000 	lw	at,0(at)
8002ce48:	afa10044 	sw	at,68(sp)
8002ce4c:	8fa10044 	lw	at,68(sp)
8002ce50:	afa1005c 	sw	at,92(sp)
8002ce54:	8fa4005c 	lw	a0,92(sp)
8002ce58:	24050080 	li	a1,128
8002ce5c:	0c00b0ac 	jal	8002c2b0 <_ZN118_$LT$mos_6502..mm..pgtable..PgtableEntry$u20$as$u20$core..ops..bit..BitAnd$LT$mos_6502..mm..pgtable..Permssion$GT$$GT$6bitand17ha3bbb08dd2659910E>
8002ce60:	00000000 	nop
8002ce64:	1440000c 	bnez	v0,8002ce98 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0xac>
8002ce68:	00000000 	nop
8002ce6c:	0800b3a3 	j	8002ce8c <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0xa0>
8002ce70:	00000000 	nop
8002ce74:	8fa40034 	lw	a0,52(sp)
8002ce78:	3c018105 	lui	at,0x8105
8002ce7c:	2426d4b0 	addiu	a2,at,-11088
8002ce80:	24050400 	li	a1,1024
8002ce84:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002ce88:	00000000 	nop
            return None;
8002ce8c:	afa0003c 	sw	zero,60(sp)
8002ce90:	0800b3ae 	j	8002ceb8 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0xcc>
8002ce94:	00000000 	nop
        }
        let pgd: &Pgtable = unsafe { &*(self.entries[vpn >> 10].to_addr().raw as *const Pgtable) };
8002ce98:	8fa10030 	lw	at,48(sp)
8002ce9c:	00010a82 	srl	at,at,0xa
8002cea0:	afa10028 	sw	at,40(sp)
8002cea4:	2c210400 	sltiu	at,at,1024
8002cea8:	14200009 	bnez	at,8002ced0 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0xe4>
8002ceac:	00000000 	nop
8002ceb0:	0800b3c5 	j	8002cf14 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0x128>
8002ceb4:	00000000 	nop
        }
        Some((
            &pgd.entries[vpn & 0x3ff],
            pgd.entries[vpn & 0x3ff].to_addr(),
        ))
    }
8002ceb8:	8fa2003c 	lw	v0,60(sp)
8002cebc:	8fa30040 	lw	v1,64(sp)
8002cec0:	8fbf006c 	lw	ra,108(sp)
8002cec4:	27bd0070 	addiu	sp,sp,112
8002cec8:	03e00008 	jr	ra
8002cecc:	00000000 	nop
        let pgd: &Pgtable = unsafe { &*(self.entries[vpn >> 10].to_addr().raw as *const Pgtable) };
8002ced0:	8fa1002c 	lw	at,44(sp)
8002ced4:	8fa20028 	lw	v0,40(sp)
8002ced8:	00021080 	sll	v0,v0,0x2
8002cedc:	00222021 	addu	a0,at,v0
8002cee0:	0c00b0cd 	jal	8002c334 <_ZN8mos_65022mm7pgtable12PgtableEntry7to_addr17h6424a844238169a1E>
8002cee4:	00000000 	nop
8002cee8:	8fa10030 	lw	at,48(sp)
8002ceec:	00401825 	move	v1,v0
8002cef0:	afa30020 	sw	v1,32(sp)
8002cef4:	afa20060 	sw	v0,96(sp)
        if !(pgd.entries[vpn & 0x3ff] & Permssion::PTE_V) {
8002cef8:	302103ff 	andi	at,at,0x3ff
8002cefc:	afa10024 	sw	at,36(sp)
8002cf00:	2c210400 	sltiu	at,at,1024
8002cf04:	14200009 	bnez	at,8002cf2c <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0x140>
8002cf08:	00000000 	nop
8002cf0c:	0800b3db 	j	8002cf6c <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0x180>
8002cf10:	00000000 	nop
        let pgd: &Pgtable = unsafe { &*(self.entries[vpn >> 10].to_addr().raw as *const Pgtable) };
8002cf14:	8fa40028 	lw	a0,40(sp)
8002cf18:	3c018105 	lui	at,0x8105
8002cf1c:	2426d4c0 	addiu	a2,at,-11072
8002cf20:	24050400 	li	a1,1024
8002cf24:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002cf28:	00000000 	nop
        if !(pgd.entries[vpn & 0x3ff] & Permssion::PTE_V) {
8002cf2c:	8fa10020 	lw	at,32(sp)
8002cf30:	8fa20024 	lw	v0,36(sp)
8002cf34:	00021080 	sll	v0,v0,0x2
8002cf38:	00220821 	addu	at,at,v0
8002cf3c:	8c210000 	lw	at,0(at)
8002cf40:	afa10048 	sw	at,72(sp)
8002cf44:	8fa10048 	lw	at,72(sp)
8002cf48:	afa10064 	sw	at,100(sp)
8002cf4c:	8fa40064 	lw	a0,100(sp)
8002cf50:	24050080 	li	a1,128
8002cf54:	0c00b0ac 	jal	8002c2b0 <_ZN118_$LT$mos_6502..mm..pgtable..PgtableEntry$u20$as$u20$core..ops..bit..BitAnd$LT$mos_6502..mm..pgtable..Permssion$GT$$GT$6bitand17ha3bbb08dd2659910E>
8002cf58:	00000000 	nop
8002cf5c:	1440000c 	bnez	v0,8002cf90 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0x1a4>
8002cf60:	00000000 	nop
8002cf64:	0800b3e1 	j	8002cf84 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0x198>
8002cf68:	00000000 	nop
8002cf6c:	8fa40024 	lw	a0,36(sp)
8002cf70:	3c018105 	lui	at,0x8105
8002cf74:	2426d4d0 	addiu	a2,at,-11056
8002cf78:	24050400 	li	a1,1024
8002cf7c:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002cf80:	00000000 	nop
            return None;
8002cf84:	afa0003c 	sw	zero,60(sp)
8002cf88:	0800b3ae 	j	8002ceb8 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0xcc>
8002cf8c:	00000000 	nop
            &pgd.entries[vpn & 0x3ff],
8002cf90:	8fa10030 	lw	at,48(sp)
8002cf94:	302103ff 	andi	at,at,0x3ff
8002cf98:	afa1001c 	sw	at,28(sp)
8002cf9c:	2c210400 	sltiu	at,at,1024
8002cfa0:	10200010 	beqz	at,8002cfe4 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0x1f8>
8002cfa4:	00000000 	nop
8002cfa8:	0800b3ec 	j	8002cfb0 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0x1c4>
8002cfac:	00000000 	nop
8002cfb0:	8fa10030 	lw	at,48(sp)
8002cfb4:	8fa20020 	lw	v0,32(sp)
8002cfb8:	8fa3001c 	lw	v1,28(sp)
8002cfbc:	00031880 	sll	v1,v1,0x2
8002cfc0:	00431021 	addu	v0,v0,v1
8002cfc4:	afa20014 	sw	v0,20(sp)
            pgd.entries[vpn & 0x3ff].to_addr(),
8002cfc8:	302103ff 	andi	at,at,0x3ff
8002cfcc:	afa10018 	sw	at,24(sp)
8002cfd0:	2c210400 	sltiu	at,at,1024
8002cfd4:	14200009 	bnez	at,8002cffc <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0x210>
8002cfd8:	00000000 	nop
8002cfdc:	0800b40e 	j	8002d038 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0x24c>
8002cfe0:	00000000 	nop
            &pgd.entries[vpn & 0x3ff],
8002cfe4:	8fa4001c 	lw	a0,28(sp)
8002cfe8:	3c018105 	lui	at,0x8105
8002cfec:	2426d4e0 	addiu	a2,at,-11040
8002cff0:	24050400 	li	a1,1024
8002cff4:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002cff8:	00000000 	nop
            pgd.entries[vpn & 0x3ff].to_addr(),
8002cffc:	8fa10020 	lw	at,32(sp)
8002d000:	8fa20018 	lw	v0,24(sp)
8002d004:	00021080 	sll	v0,v0,0x2
8002d008:	00222021 	addu	a0,at,v0
8002d00c:	0c00b0cd 	jal	8002c334 <_ZN8mos_65022mm7pgtable12PgtableEntry7to_addr17h6424a844238169a1E>
8002d010:	00000000 	nop
8002d014:	8fa10014 	lw	at,20(sp)
        Some((
8002d018:	afa1004c 	sw	at,76(sp)
8002d01c:	afa20050 	sw	v0,80(sp)
8002d020:	8fa2004c 	lw	v0,76(sp)
8002d024:	8fa10050 	lw	at,80(sp)
8002d028:	afa2003c 	sw	v0,60(sp)
8002d02c:	afa10040 	sw	at,64(sp)
    }
8002d030:	0800b3ae 	j	8002ceb8 <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E+0xcc>
8002d034:	00000000 	nop
            pgd.entries[vpn & 0x3ff].to_addr(),
8002d038:	8fa40018 	lw	a0,24(sp)
8002d03c:	3c018105 	lui	at,0x8105
8002d040:	2426d4f0 	addiu	a2,at,-11024
8002d044:	24050400 	li	a1,1024
8002d048:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002d04c:	00000000 	nop

8002d050 <_ZN60_$LT$mos_6502..print..Stdout$u20$as$u20$core..fmt..Write$GT$9write_str17h298c6c8c2ecb7df6E>:
}

impl fmt::Write for Stdout {
    fn write_str(&mut self, s: &str) -> fmt::Result {
8002d050:	27bdffc0 	addiu	sp,sp,-64
8002d054:	afbf003c 	sw	ra,60(sp)
8002d058:	afa60014 	sw	a2,20(sp)
8002d05c:	00a00825 	move	at,a1
8002d060:	8fa50014 	lw	a1,20(sp)
8002d064:	afa10018 	sw	at,24(sp)
8002d068:	00800825 	move	at,a0
8002d06c:	8fa40018 	lw	a0,24(sp)
8002d070:	afa1002c 	sw	at,44(sp)
8002d074:	afa40030 	sw	a0,48(sp)
8002d078:	afa50034 	sw	a1,52(sp)
        for c in s.chars() {
8002d07c:	0c008dfc 	jal	800237f0 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h769d45457e4c33b8E>
8002d080:	00000000 	nop
8002d084:	00402025 	move	a0,v0
8002d088:	00602825 	move	a1,v1
8002d08c:	0c00ef45 	jal	8003bd14 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17heb520da55e95499cE>
8002d090:	00000000 	nop
8002d094:	afa20020 	sw	v0,32(sp)
8002d098:	afa30024 	sw	v1,36(sp)
8002d09c:	0800b429 	j	8002d0a4 <_ZN60_$LT$mos_6502..print..Stdout$u20$as$u20$core..fmt..Write$GT$9write_str17h298c6c8c2ecb7df6E+0x54>
8002d0a0:	00000000 	nop
8002d0a4:	27a40020 	addiu	a0,sp,32
8002d0a8:	0c00ad7c 	jal	8002b5f0 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3cba91d3402abfcfE>
8002d0ac:	00000000 	nop
8002d0b0:	afa20028 	sw	v0,40(sp)
8002d0b4:	8fa10028 	lw	at,40(sp)
8002d0b8:	3c020011 	lui	v0,0x11
8002d0bc:	1422000b 	bne	at,v0,8002d0ec <_ZN60_$LT$mos_6502..print..Stdout$u20$as$u20$core..fmt..Write$GT$9write_str17h298c6c8c2ecb7df6E+0x9c>
8002d0c0:	00000000 	nop
8002d0c4:	0800b433 	j	8002d0cc <_ZN60_$LT$mos_6502..print..Stdout$u20$as$u20$core..fmt..Write$GT$9write_str17h298c6c8c2ecb7df6E+0x7c>
8002d0c8:	00000000 	nop
8002d0cc:	24010000 	li	at,0
            NS16550A.putchar(c as u32);
        }
        Ok(())
8002d0d0:	a3a0001f 	sb	zero,31(sp)
    }
8002d0d4:	93a1001f 	lbu	at,31(sp)
8002d0d8:	30220001 	andi	v0,at,0x1
8002d0dc:	8fbf003c 	lw	ra,60(sp)
8002d0e0:	27bd0040 	addiu	sp,sp,64
8002d0e4:	03e00008 	jr	ra
8002d0e8:	00000000 	nop
        for c in s.chars() {
8002d0ec:	8fa10028 	lw	at,40(sp)
8002d0f0:	afa10010 	sw	at,16(sp)
8002d0f4:	afa10038 	sw	at,56(sp)
            NS16550A.putchar(c as u32);
8002d0f8:	3c018105 	lui	at,0x8105
8002d0fc:	2424e6a4 	addiu	a0,at,-6492
8002d100:	0c00d150 	jal	80034540 <_ZN73_$LT$mos_6502..dev..uart..NS16550A$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbf8d16e6e776ffa2E>
8002d104:	00000000 	nop
8002d108:	8fa50010 	lw	a1,16(sp)
8002d10c:	00402025 	move	a0,v0
8002d110:	0c00ae68 	jal	8002b9a0 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17hdc63989b1e2e1ef3E>
8002d114:	00000000 	nop
8002d118:	0800b429 	j	8002d0a4 <_ZN60_$LT$mos_6502..print..Stdout$u20$as$u20$core..fmt..Write$GT$9write_str17h298c6c8c2ecb7df6E+0x54>
8002d11c:	00000000 	nop

8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>:
}

pub fn _print(args: fmt::Arguments) {
8002d120:	27bdffc0 	addiu	sp,sp,-64
8002d124:	afbf003c 	sw	ra,60(sp)
8002d128:	afa40018 	sw	a0,24(sp)
    STDOUT.lock().write_fmt(args).unwrap();
8002d12c:	3c018105 	lui	at,0x8105
8002d130:	2424e74c 	addiu	a0,at,-6324
8002d134:	0c00d389 	jal	80034e24 <_ZN67_$LT$mos_6502..print..STDOUT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f561a1cd0d5888aE>
8002d138:	00000000 	nop
8002d13c:	00402025 	move	a0,v0
8002d140:	0c00a0ce 	jal	80028338 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h74e841895f509cabE>
8002d144:	00000000 	nop
8002d148:	afa2001c 	sw	v0,28(sp)
8002d14c:	27a4001c 	addiu	a0,sp,28
8002d150:	0c00adba 	jal	8002b6e8 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf0535cea5076f729E>
8002d154:	00000000 	nop
8002d158:	8fa10018 	lw	at,24(sp)
8002d15c:	00402025 	move	a0,v0
8002d160:	8c220014 	lw	v0,20(at)
8002d164:	afa20034 	sw	v0,52(sp)
8002d168:	8c220010 	lw	v0,16(at)
8002d16c:	afa20030 	sw	v0,48(sp)
8002d170:	8c22000c 	lw	v0,12(at)
8002d174:	afa2002c 	sw	v0,44(sp)
8002d178:	8c220008 	lw	v0,8(at)
8002d17c:	afa20028 	sw	v0,40(sp)
8002d180:	8c220004 	lw	v0,4(at)
8002d184:	afa20024 	sw	v0,36(sp)
8002d188:	8c210000 	lw	at,0(at)
8002d18c:	afa10020 	sw	at,32(sp)
8002d190:	27a50020 	addiu	a1,sp,32
8002d194:	0c008346 	jal	80020d18 <_ZN4core3fmt5Write9write_fmt17h63a32e972762cdc9E>
8002d198:	00000000 	nop
8002d19c:	a3a2003a 	sb	v0,58(sp)
        match self {
8002d1a0:	93a1003a 	lbu	at,58(sp)
8002d1a4:	30210001 	andi	at,at,0x1
8002d1a8:	1020000f 	beqz	at,8002d1e8 <_ZN8mos_65025print6_print17h030db2bfde9ae274E+0xc8>
8002d1ac:	00000000 	nop
8002d1b0:	0800b46e 	j	8002d1b8 <_ZN8mos_65025print6_print17h030db2bfde9ae274E+0x98>
8002d1b4:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002d1b8:	3c018105 	lui	at,0x8105
8002d1bc:	2421d510 	addiu	at,at,-10992
8002d1c0:	03a01025 	move	v0,sp
8002d1c4:	ac410010 	sw	at,16(v0)
8002d1c8:	3c018105 	lui	at,0x8105
8002d1cc:	2424cc7c 	addiu	a0,at,-13188
8002d1d0:	3c018105 	lui	at,0x8105
8002d1d4:	2427cca8 	addiu	a3,at,-13144
8002d1d8:	2405002b 	li	a1,43
8002d1dc:	27a6003b 	addiu	a2,sp,59
8002d1e0:	0c00f4d5 	jal	8003d354 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002d1e4:	00000000 	nop
8002d1e8:	27a4001c 	addiu	a0,sp,28
8002d1ec:	0c008c2a 	jal	800230a8 <_ZN4core3ptr77drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..print..Stdout$GT$$GT$17h0418d9ed0f393f8dE>
8002d1f0:	00000000 	nop
}
8002d1f4:	8fbf003c 	lw	ra,60(sp)
8002d1f8:	27bd0040 	addiu	sp,sp,64
8002d1fc:	03e00008 	jr	ra
8002d200:	00000000 	nop

8002d204 <rust_begin_unwind>:
        $crate::print!(concat!($fmt, "\n"), $($arg)*);
    };
}

#[panic_handler]
fn panic(info: &panic::PanicInfo) -> ! {
8002d204:	27bdfef0 	addiu	sp,sp,-272
8002d208:	afbf010c 	sw	ra,268(sp)
8002d20c:	afa40038 	sw	a0,56(sp)
8002d210:	afa400a4 	sw	a0,164(sp)
    if let Some(location) = info.location() {
8002d214:	0c00f26b 	jal	8003c9ac <_ZN4core5panic10panic_info9PanicInfo8location17hd53a7358fb18b234E>
8002d218:	00000000 	nop
8002d21c:	afa2003c 	sw	v0,60(sp)
8002d220:	8fa1003c 	lw	at,60(sp)
8002d224:	1020005a 	beqz	at,8002d390 <rust_begin_unwind+0x18c>
8002d228:	00000000 	nop
8002d22c:	0800b48d 	j	8002d234 <rust_begin_unwind+0x30>
8002d230:	00000000 	nop
8002d234:	8fa4003c 	lw	a0,60(sp)
8002d238:	afa40024 	sw	a0,36(sp)
8002d23c:	afa400a8 	sw	a0,168(sp)
        println!(
            "Panic at {}:{} {}",
            location.file(),
8002d240:	0c009544 	jal	80025510 <_ZN4core5panic8location8Location4file17h5ffd641e60cf9cd8E>
8002d244:	00000000 	nop
8002d248:	8fa40024 	lw	a0,36(sp)
8002d24c:	afa20070 	sw	v0,112(sp)
8002d250:	afa30074 	sw	v1,116(sp)
8002d254:	27a20070 	addiu	v0,sp,112
8002d258:	afa200b8 	sw	v0,184(sp)
8002d25c:	afa200c4 	sw	v0,196(sp)
8002d260:	3c018004 	lui	at,0x8004
8002d264:	24217e68 	addiu	at,at,32360
8002d268:	afa100c8 	sw	at,200(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002d26c:	afa200bc 	sw	v0,188(sp)
8002d270:	afa100c0 	sw	at,192(sp)
    }
8002d274:	8fa100bc 	lw	at,188(sp)
8002d278:	afa10028 	sw	at,40(sp)
8002d27c:	8fa100c0 	lw	at,192(sp)
8002d280:	afa1002c 	sw	at,44(sp)
            location.line(),
8002d284:	0c00954b 	jal	8002552c <_ZN4core5panic8location8Location4line17h622766e7443d8efcE>
8002d288:	00000000 	nop
8002d28c:	8fa40038 	lw	a0,56(sp)
8002d290:	afa20078 	sw	v0,120(sp)
8002d294:	27a20078 	addiu	v0,sp,120
8002d298:	afa200b4 	sw	v0,180(sp)
8002d29c:	afa200d4 	sw	v0,212(sp)
8002d2a0:	3c018004 	lui	at,0x8004
8002d2a4:	24217cbc 	addiu	at,at,31932
8002d2a8:	afa100d8 	sw	at,216(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002d2ac:	afa200cc 	sw	v0,204(sp)
8002d2b0:	afa100d0 	sw	at,208(sp)
    }
8002d2b4:	8fa100cc 	lw	at,204(sp)
8002d2b8:	afa10030 	sw	at,48(sp)
8002d2bc:	8fa100d0 	lw	at,208(sp)
8002d2c0:	afa10034 	sw	at,52(sp)
            info.message().unwrap()
8002d2c4:	0c00f265 	jal	8003c994 <_ZN4core5panic10panic_info9PanicInfo7message17h276618d293c608e9E>
8002d2c8:	00000000 	nop
8002d2cc:	afa20104 	sw	v0,260(sp)
        match self {
8002d2d0:	8fa10104 	lw	at,260(sp)
8002d2d4:	14200007 	bnez	at,8002d2f4 <rust_begin_unwind+0xf0>
8002d2d8:	00000000 	nop
8002d2dc:	0800b4b9 	j	8002d2e4 <rust_begin_unwind+0xe0>
8002d2e0:	00000000 	nop
            None => unwrap_failed(),
8002d2e4:	3c018105 	lui	at,0x8105
8002d2e8:	2424d54c 	addiu	a0,at,-10932
8002d2ec:	0c00f1b6 	jal	8003c6d8 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
8002d2f0:	00000000 	nop
            Some(val) => val,
8002d2f4:	8fa30034 	lw	v1,52(sp)
8002d2f8:	8fa40030 	lw	a0,48(sp)
8002d2fc:	8fa5002c 	lw	a1,44(sp)
8002d300:	8fa60028 	lw	a2,40(sp)
8002d304:	8fa10104 	lw	at,260(sp)
8002d308:	afa10108 	sw	at,264(sp)
8002d30c:	afa1007c 	sw	at,124(sp)
8002d310:	27a2007c 	addiu	v0,sp,124
8002d314:	afa200b0 	sw	v0,176(sp)
8002d318:	afa200e4 	sw	v0,228(sp)
8002d31c:	3c018002 	lui	at,0x8002
8002d320:	242107ac 	addiu	at,at,1964
8002d324:	afa100e8 	sw	at,232(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002d328:	afa200dc 	sw	v0,220(sp)
8002d32c:	afa100e0 	sw	at,224(sp)
    }
8002d330:	8fa200dc 	lw	v0,220(sp)
8002d334:	8fa100e0 	lw	at,224(sp)
        println!(
8002d338:	afa60058 	sw	a2,88(sp)
8002d33c:	afa5005c 	sw	a1,92(sp)
8002d340:	afa40060 	sw	a0,96(sp)
8002d344:	afa30064 	sw	v1,100(sp)
8002d348:	afa20068 	sw	v0,104(sp)
8002d34c:	afa1006c 	sw	at,108(sp)
8002d350:	03a01025 	move	v0,sp
8002d354:	24010003 	li	at,3
8002d358:	ac410010 	sw	at,16(v0)
8002d35c:	3c018105 	lui	at,0x8105
8002d360:	2425d52c 	addiu	a1,at,-10964
8002d364:	27a40040 	addiu	a0,sp,64
8002d368:	afa40020 	sw	a0,32(sp)
8002d36c:	24060004 	li	a2,4
8002d370:	27a70058 	addiu	a3,sp,88
8002d374:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
8002d378:	00000000 	nop
8002d37c:	8fa40020 	lw	a0,32(sp)
8002d380:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
8002d384:	00000000 	nop
8002d388:	0800b510 	j	8002d440 <rust_begin_unwind+0x23c>
8002d38c:	00000000 	nop
        );
    } else {
        println!("Panic at unknown location: {}", info.message().unwrap());
8002d390:	8fa40038 	lw	a0,56(sp)
8002d394:	0c00f265 	jal	8003c994 <_ZN4core5panic10panic_info9PanicInfo7message17h276618d293c608e9E>
8002d398:	00000000 	nop
8002d39c:	afa200fc 	sw	v0,252(sp)
        match self {
8002d3a0:	8fa100fc 	lw	at,252(sp)
8002d3a4:	14200007 	bnez	at,8002d3c4 <rust_begin_unwind+0x1c0>
8002d3a8:	00000000 	nop
8002d3ac:	0800b4ed 	j	8002d3b4 <rust_begin_unwind+0x1b0>
8002d3b0:	00000000 	nop
            None => unwrap_failed(),
8002d3b4:	3c018105 	lui	at,0x8105
8002d3b8:	2424d588 	addiu	a0,at,-10872
8002d3bc:	0c00f1b6 	jal	8003c6d8 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
8002d3c0:	00000000 	nop
            Some(val) => val,
8002d3c4:	8fa100fc 	lw	at,252(sp)
8002d3c8:	afa10100 	sw	at,256(sp)
8002d3cc:	afa100a0 	sw	at,160(sp)
8002d3d0:	27a200a0 	addiu	v0,sp,160
8002d3d4:	afa200ac 	sw	v0,172(sp)
8002d3d8:	afa200f4 	sw	v0,244(sp)
8002d3dc:	3c018002 	lui	at,0x8002
8002d3e0:	242107ac 	addiu	at,at,1964
8002d3e4:	afa100f8 	sw	at,248(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002d3e8:	afa200ec 	sw	v0,236(sp)
8002d3ec:	afa100f0 	sw	at,240(sp)
    }
8002d3f0:	8fa200ec 	lw	v0,236(sp)
8002d3f4:	8fa100f0 	lw	at,240(sp)
8002d3f8:	afa20098 	sw	v0,152(sp)
8002d3fc:	afa1009c 	sw	at,156(sp)
8002d400:	03a01025 	move	v0,sp
8002d404:	24010001 	li	at,1
8002d408:	ac410010 	sw	at,16(v0)
8002d40c:	3c018105 	lui	at,0x8105
8002d410:	2425d578 	addiu	a1,at,-10888
8002d414:	27a40080 	addiu	a0,sp,128
8002d418:	afa4001c 	sw	a0,28(sp)
8002d41c:	24060002 	li	a2,2
8002d420:	27a70098 	addiu	a3,sp,152
8002d424:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
8002d428:	00000000 	nop
8002d42c:	8fa4001c 	lw	a0,28(sp)
8002d430:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
8002d434:	00000000 	nop
8002d438:	0800b510 	j	8002d440 <rust_begin_unwind+0x23c>
8002d43c:	00000000 	nop
    }
    dev::halt();
8002d440:	0c00aeb6 	jal	8002bad8 <_ZN8mos_65023dev4halt17hed598abf4ab60b77E>
8002d444:	00000000 	nop

8002d448 <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E>:
use crate::proc::ENV_LIST;
use crate::proc::NENV;
use crate::trap;
use crate::trap::trapframe::Trapframe;

pub fn schedule(y: bool) {
8002d448:	27bdff08 	addiu	sp,sp,-248
8002d44c:	afbf00f4 	sw	ra,244(sp)
8002d450:	00800825 	move	at,a0
8002d454:	afa1005c 	sw	at,92(sp)
8002d458:	a3a400df 	sb	a0,223(sp)
    trap::int::disable_timer_interrupt();
8002d45c:	0c00be3f 	jal	8002f8fc <_ZN8mos_65024trap3int23disable_timer_interrupt17hdaba7597ae262726E>
8002d460:	00000000 	nop
    println!("schedule\n");
8002d464:	3c018105 	lui	at,0x8105
8002d468:	2425d5a4 	addiu	a1,at,-10844
8002d46c:	27a40070 	addiu	a0,sp,112
8002d470:	afa40060 	sw	a0,96(sp)
8002d474:	24060001 	li	a2,1
8002d478:	afa60064 	sw	a2,100(sp)
8002d47c:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
8002d480:	00000000 	nop
8002d484:	8fa40060 	lw	a0,96(sp)
8002d488:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
8002d48c:	00000000 	nop
    let curenv_id = CUR_ENV.lock();
8002d490:	3c018105 	lui	at,0x8105
8002d494:	2424e74c 	addiu	a0,at,-6324
8002d498:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
8002d49c:	00000000 	nop
8002d4a0:	00402025 	move	a0,v0
8002d4a4:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
8002d4a8:	00000000 	nop
8002d4ac:	8fa60064 	lw	a2,100(sp)
8002d4b0:	afa20088 	sw	v0,136(sp)
    println!("curenv_id");
8002d4b4:	3c018105 	lui	at,0x8105
8002d4b8:	2425d5b8 	addiu	a1,at,-10824
8002d4bc:	27a4008c 	addiu	a0,sp,140
8002d4c0:	afa40068 	sw	a0,104(sp)
8002d4c4:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
8002d4c8:	00000000 	nop
8002d4cc:	8fa40068 	lw	a0,104(sp)
8002d4d0:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
8002d4d4:	00000000 	nop
8002d4d8:	27a40088 	addiu	a0,sp,136
    let idx = match *curenv_id {
8002d4dc:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
8002d4e0:	00000000 	nop
8002d4e4:	00400825 	move	at,v0
8002d4e8:	afa1006c 	sw	at,108(sp)
8002d4ec:	8c410000 	lw	at,0(v0)
8002d4f0:	14200050 	bnez	at,8002d634 <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x1ec>
8002d4f4:	00000000 	nop
8002d4f8:	0800b540 	j	8002d500 <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0xb8>
8002d4fc:	00000000 	nop
                CUR_ENV.lock().replace(idx);
                idx
            }
        }
        None => {
            drop(curenv_id);
8002d500:	8fa40088 	lw	a0,136(sp)
8002d504:	0c00845d 	jal	80021174 <_ZN4core3mem4drop17h57b29ba27a256b10E>
8002d508:	00000000 	nop
            {
                let mut env_sched_list = ENV_SCHED_LIST.lock();
8002d50c:	3c018105 	lui	at,0x8105
8002d510:	2424e74c 	addiu	a0,at,-6324
8002d514:	0c00d3c5 	jal	80034f14 <_ZN74_$LT$mos_6502..proc..ENV_SCHED_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0db1b016a4f27e1fE>
8002d518:	00000000 	nop
8002d51c:	00402025 	move	a0,v0
8002d520:	0c00a117 	jal	8002845c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8c3735c4a0bdf507E>
8002d524:	00000000 	nop
8002d528:	afa200c4 	sw	v0,196(sp)
8002d52c:	27a400c4 	addiu	a0,sp,196
8002d530:	afa40058 	sw	a0,88(sp)
                let node = env_sched_list.pop().expect("No env to run.");
8002d534:	0c00ad89 	jal	8002b624 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h05e23529e4b1162bE>
8002d538:	00000000 	nop
8002d53c:	00402025 	move	a0,v0
8002d540:	0c00d022 	jal	80034088 <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E>
8002d544:	00000000 	nop
8002d548:	00402025 	move	a0,v0
8002d54c:	3c018105 	lui	at,0x8105
8002d550:	2425d5c0 	addiu	a1,at,-10816
8002d554:	3c018105 	lui	at,0x8105
8002d558:	2427d5e4 	addiu	a3,at,-10780
8002d55c:	2406000e 	li	a2,14
8002d560:	0c009782 	jal	80025e08 <_ZN4core6option15Option$LT$T$GT$6expect17h8661283b38fde621E>
8002d564:	00000000 	nop
8002d568:	afa200c8 	sw	v0,200(sp)
8002d56c:	27a400c8 	addiu	a0,sp,200
8002d570:	afa40054 	sw	a0,84(sp)
                let idx = node.borrow().idx;
8002d574:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
8002d578:	00000000 	nop
8002d57c:	00402025 	move	a0,v0
8002d580:	3c018105 	lui	at,0x8105
8002d584:	2425d5f4 	addiu	a1,at,-10764
8002d588:	0c008ee2 	jal	80023b88 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h0651cb519b6f324eE>
8002d58c:	00000000 	nop
8002d590:	afa200cc 	sw	v0,204(sp)
8002d594:	afa300d0 	sw	v1,208(sp)
8002d598:	27a400cc 	addiu	a0,sp,204
8002d59c:	afa40048 	sw	a0,72(sp)
8002d5a0:	0c00a9f8 	jal	8002a7e0 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hefea2bce46aaade6E>
8002d5a4:	00000000 	nop
8002d5a8:	8fa40048 	lw	a0,72(sp)
8002d5ac:	8c410008 	lw	at,8(v0)
8002d5b0:	afa10050 	sw	at,80(sp)
8002d5b4:	afa100e0 	sw	at,224(sp)
8002d5b8:	0c008b58 	jal	80022d60 <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d64f236e3cdb092E>
8002d5bc:	00000000 	nop
                CUR_ENV.lock().replace(idx);
8002d5c0:	3c018105 	lui	at,0x8105
8002d5c4:	2424e74c 	addiu	a0,at,-6324
8002d5c8:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
8002d5cc:	00000000 	nop
8002d5d0:	00402025 	move	a0,v0
8002d5d4:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
8002d5d8:	00000000 	nop
8002d5dc:	afa200d4 	sw	v0,212(sp)
8002d5e0:	27a400d4 	addiu	a0,sp,212
8002d5e4:	afa4004c 	sw	a0,76(sp)
8002d5e8:	0c00adb3 	jal	8002b6cc <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc76053e0a705b1f2E>
8002d5ec:	00000000 	nop
8002d5f0:	8fa50050 	lw	a1,80(sp)
8002d5f4:	00402025 	move	a0,v0
8002d5f8:	0c0097b6 	jal	80025ed8 <_ZN4core6option15Option$LT$T$GT$7replace17h1beeedc8961435aaE>
8002d5fc:	00000000 	nop
8002d600:	8fa4004c 	lw	a0,76(sp)
8002d604:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
8002d608:	00000000 	nop
8002d60c:	8fa10050 	lw	at,80(sp)
8002d610:	8fa40054 	lw	a0,84(sp)
                idx
8002d614:	afa100a4 	sw	at,164(sp)
            }
8002d618:	0c008d66 	jal	80023598 <_ZN4core3ptr96drop_in_place$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h43239437a0ec2517E>
8002d61c:	00000000 	nop
8002d620:	8fa40058 	lw	a0,88(sp)
8002d624:	0c008c4e 	jal	80023138 <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h31092ada86abafaeE>
8002d628:	00000000 	nop
8002d62c:	0800b5a7 	j	8002d69c <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x254>
8002d630:	00000000 	nop
        Some(idx) => {
8002d634:	8fa1006c 	lw	at,108(sp)
8002d638:	8c210004 	lw	at,4(at)
8002d63c:	afa10044 	sw	at,68(sp)
8002d640:	afa100e4 	sw	at,228(sp)
            let mut envs = ENV_LIST.lock();
8002d644:	3c018105 	lui	at,0x8105
8002d648:	2424e74c 	addiu	a0,at,-6324
8002d64c:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
8002d650:	00000000 	nop
8002d654:	00402025 	move	a0,v0
8002d658:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
8002d65c:	00000000 	nop
8002d660:	afa200a8 	sw	v0,168(sp)
8002d664:	27a400a8 	addiu	a0,sp,168
            if envs[idx].env_cur_runs <= 0 || y || envs[idx].env_status != EnvStatus::EnvRunnable {
8002d668:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
8002d66c:	00000000 	nop
8002d670:	8fa50044 	lw	a1,68(sp)
8002d674:	00402025 	move	a0,v0
8002d678:	3c018105 	lui	at,0x8105
8002d67c:	2426d604 	addiu	a2,at,-10748
8002d680:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
8002d684:	00000000 	nop
8002d688:	8c4100b8 	lw	at,184(v0)
8002d68c:	1820000f 	blez	at,8002d6cc <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x284>
8002d690:	00000000 	nop
8002d694:	0800b5ad 	j	8002d6b4 <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x26c>
8002d698:	00000000 	nop
        }
    };

    assert!(idx < NENV);
8002d69c:	8fa100a4 	lw	at,164(sp)
8002d6a0:	2c210400 	sltiu	at,at,1024
8002d6a4:	142000bd 	bnez	at,8002d99c <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x554>
8002d6a8:	00000000 	nop
8002d6ac:	0800b660 	j	8002d980 <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x538>
8002d6b0:	00000000 	nop
            if envs[idx].env_cur_runs <= 0 || y || envs[idx].env_status != EnvStatus::EnvRunnable {
8002d6b4:	8fa1005c 	lw	at,92(sp)
8002d6b8:	30210001 	andi	at,at,0x1
8002d6bc:	10200015 	beqz	at,8002d714 <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x2cc>
8002d6c0:	00000000 	nop
8002d6c4:	0800b5b3 	j	8002d6cc <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x284>
8002d6c8:	00000000 	nop
8002d6cc:	27a400a8 	addiu	a0,sp,168
                if envs[idx].env_status == EnvStatus::EnvRunnable {
8002d6d0:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
8002d6d4:	00000000 	nop
8002d6d8:	8fa50044 	lw	a1,68(sp)
8002d6dc:	00402025 	move	a0,v0
8002d6e0:	3c018105 	lui	at,0x8105
8002d6e4:	2426d624 	addiu	a2,at,-10716
8002d6e8:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
8002d6ec:	00000000 	nop
8002d6f0:	244400ac 	addiu	a0,v0,172
8002d6f4:	3c018105 	lui	at,0x8105
8002d6f8:	2425d194 	addiu	a1,at,-11884
8002d6fc:	0c00d395 	jal	80034e54 <_ZN66_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd4d1600a4ff7132eE>
8002d700:	00000000 	nop
8002d704:	14400065 	bnez	v0,8002d89c <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x454>
8002d708:	00000000 	nop
8002d70c:	0800b5d7 	j	8002d75c <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x314>
8002d710:	00000000 	nop
8002d714:	27a400a8 	addiu	a0,sp,168
            if envs[idx].env_cur_runs <= 0 || y || envs[idx].env_status != EnvStatus::EnvRunnable {
8002d718:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
8002d71c:	00000000 	nop
8002d720:	8fa50044 	lw	a1,68(sp)
8002d724:	00402025 	move	a0,v0
8002d728:	3c018105 	lui	at,0x8105
8002d72c:	2426d614 	addiu	a2,at,-10732
8002d730:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
8002d734:	00000000 	nop
8002d738:	244400ac 	addiu	a0,v0,172
8002d73c:	3c018105 	lui	at,0x8105
8002d740:	2425d194 	addiu	a1,at,-11884
8002d744:	0c008325 	jal	80020c94 <_ZN4core3cmp9PartialEq2ne17hfe354b8f92e886abE>
8002d748:	00000000 	nop
8002d74c:	1440ffdf 	bnez	v0,8002d6cc <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x284>
8002d750:	00000000 	nop
8002d754:	0800b5d7 	j	8002d75c <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x314>
8002d758:	00000000 	nop
            drop(envs);
8002d75c:	8fa400a8 	lw	a0,168(sp)
8002d760:	0c008467 	jal	8002119c <_ZN4core3mem4drop17ha0064f35510a6787E>
8002d764:	00000000 	nop
            drop(curenv_id);
8002d768:	8fa40088 	lw	a0,136(sp)
8002d76c:	0c00845d 	jal	80021174 <_ZN4core3mem4drop17h57b29ba27a256b10E>
8002d770:	00000000 	nop
                let mut env_sched_list = ENV_SCHED_LIST.lock();
8002d774:	3c018105 	lui	at,0x8105
8002d778:	2424e74c 	addiu	a0,at,-6324
8002d77c:	0c00d3c5 	jal	80034f14 <_ZN74_$LT$mos_6502..proc..ENV_SCHED_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0db1b016a4f27e1fE>
8002d780:	00000000 	nop
8002d784:	00402025 	move	a0,v0
8002d788:	0c00a117 	jal	8002845c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8c3735c4a0bdf507E>
8002d78c:	00000000 	nop
8002d790:	afa200b0 	sw	v0,176(sp)
8002d794:	27a400b0 	addiu	a0,sp,176
8002d798:	afa40040 	sw	a0,64(sp)
                let node = env_sched_list.pop().expect("No env to run.");
8002d79c:	0c00ad89 	jal	8002b624 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h05e23529e4b1162bE>
8002d7a0:	00000000 	nop
8002d7a4:	00402025 	move	a0,v0
8002d7a8:	0c00d022 	jal	80034088 <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E>
8002d7ac:	00000000 	nop
8002d7b0:	00402025 	move	a0,v0
8002d7b4:	3c018105 	lui	at,0x8105
8002d7b8:	2425d5c0 	addiu	a1,at,-10816
8002d7bc:	3c018105 	lui	at,0x8105
8002d7c0:	2427d664 	addiu	a3,at,-10652
8002d7c4:	2406000e 	li	a2,14
8002d7c8:	0c009782 	jal	80025e08 <_ZN4core6option15Option$LT$T$GT$6expect17h8661283b38fde621E>
8002d7cc:	00000000 	nop
8002d7d0:	afa200b4 	sw	v0,180(sp)
8002d7d4:	27a400b4 	addiu	a0,sp,180
8002d7d8:	afa4003c 	sw	a0,60(sp)
                let idx = node.borrow().idx;
8002d7dc:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
8002d7e0:	00000000 	nop
8002d7e4:	00402025 	move	a0,v0
8002d7e8:	3c018105 	lui	at,0x8105
8002d7ec:	2425d674 	addiu	a1,at,-10636
8002d7f0:	0c008ee2 	jal	80023b88 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h0651cb519b6f324eE>
8002d7f4:	00000000 	nop
8002d7f8:	afa200b8 	sw	v0,184(sp)
8002d7fc:	afa300bc 	sw	v1,188(sp)
8002d800:	27a400b8 	addiu	a0,sp,184
8002d804:	afa40030 	sw	a0,48(sp)
8002d808:	0c00a9f8 	jal	8002a7e0 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hefea2bce46aaade6E>
8002d80c:	00000000 	nop
8002d810:	8fa40030 	lw	a0,48(sp)
8002d814:	8c410008 	lw	at,8(v0)
8002d818:	afa10038 	sw	at,56(sp)
8002d81c:	afa100e8 	sw	at,232(sp)
8002d820:	0c008b58 	jal	80022d60 <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d64f236e3cdb092E>
8002d824:	00000000 	nop
                CUR_ENV.lock().replace(idx);
8002d828:	3c018105 	lui	at,0x8105
8002d82c:	2424e74c 	addiu	a0,at,-6324
8002d830:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
8002d834:	00000000 	nop
8002d838:	00402025 	move	a0,v0
8002d83c:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
8002d840:	00000000 	nop
8002d844:	afa200c0 	sw	v0,192(sp)
8002d848:	27a400c0 	addiu	a0,sp,192
8002d84c:	afa40034 	sw	a0,52(sp)
8002d850:	0c00adb3 	jal	8002b6cc <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc76053e0a705b1f2E>
8002d854:	00000000 	nop
8002d858:	8fa50038 	lw	a1,56(sp)
8002d85c:	00402025 	move	a0,v0
8002d860:	0c0097b6 	jal	80025ed8 <_ZN4core6option15Option$LT$T$GT$7replace17h1beeedc8961435aaE>
8002d864:	00000000 	nop
8002d868:	8fa40034 	lw	a0,52(sp)
8002d86c:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
8002d870:	00000000 	nop
8002d874:	8fa10038 	lw	at,56(sp)
8002d878:	8fa4003c 	lw	a0,60(sp)
                idx
8002d87c:	afa100a4 	sw	at,164(sp)
            }
8002d880:	0c008d66 	jal	80023598 <_ZN4core3ptr96drop_in_place$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h43239437a0ec2517E>
8002d884:	00000000 	nop
8002d888:	8fa40040 	lw	a0,64(sp)
8002d88c:	0c008c4e 	jal	80023138 <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h31092ada86abafaeE>
8002d890:	00000000 	nop
8002d894:	0800b5a7 	j	8002d69c <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x254>
8002d898:	00000000 	nop
                    let mut env_sched_list = ENV_SCHED_LIST.lock();
8002d89c:	3c018105 	lui	at,0x8105
8002d8a0:	2424e74c 	addiu	a0,at,-6324
8002d8a4:	0c00d3c5 	jal	80034f14 <_ZN74_$LT$mos_6502..proc..ENV_SCHED_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0db1b016a4f27e1fE>
8002d8a8:	00000000 	nop
8002d8ac:	00402025 	move	a0,v0
8002d8b0:	0c00a117 	jal	8002845c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8c3735c4a0bdf507E>
8002d8b4:	00000000 	nop
8002d8b8:	afa200ac 	sw	v0,172(sp)
8002d8bc:	27a400ac 	addiu	a0,sp,172
8002d8c0:	afa4002c 	sw	a0,44(sp)
                    env_sched_list.push(envs[idx].env_sched_link.clone());
8002d8c4:	0c00ad89 	jal	8002b624 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h05e23529e4b1162bE>
8002d8c8:	00000000 	nop
8002d8cc:	afa20020 	sw	v0,32(sp)
8002d8d0:	27a400a8 	addiu	a0,sp,168
8002d8d4:	afa40024 	sw	a0,36(sp)
8002d8d8:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
8002d8dc:	00000000 	nop
8002d8e0:	8fa50044 	lw	a1,68(sp)
8002d8e4:	00402025 	move	a0,v0
8002d8e8:	3c018105 	lui	at,0x8105
8002d8ec:	2426d634 	addiu	a2,at,-10700
8002d8f0:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
8002d8f4:	00000000 	nop
8002d8f8:	244400b4 	addiu	a0,v0,180
8002d8fc:	0c00a9d8 	jal	8002a760 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h9bd1f6a6a34f5585E>
8002d900:	00000000 	nop
8002d904:	8fa40020 	lw	a0,32(sp)
8002d908:	00402825 	move	a1,v0
8002d90c:	0c00ce36 	jal	800338d8 <_ZN8mos_65024util16DoubleLinkedList4push17h4baa579cb5c043f4E>
8002d910:	00000000 	nop
8002d914:	8fa40024 	lw	a0,36(sp)
                    envs[idx].env_cur_runs = envs[idx].env_pri as isize;
8002d918:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
8002d91c:	00000000 	nop
8002d920:	8fa50044 	lw	a1,68(sp)
8002d924:	00402025 	move	a0,v0
8002d928:	3c018105 	lui	at,0x8105
8002d92c:	2426d644 	addiu	a2,at,-10684
8002d930:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
8002d934:	00000000 	nop
8002d938:	8fa40024 	lw	a0,36(sp)
8002d93c:	8c4100bc 	lw	at,188(v0)
8002d940:	afa10028 	sw	at,40(sp)
8002d944:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
8002d948:	00000000 	nop
8002d94c:	8fa50044 	lw	a1,68(sp)
8002d950:	00402025 	move	a0,v0
8002d954:	3c018105 	lui	at,0x8105
8002d958:	2426d654 	addiu	a2,at,-10668
8002d95c:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
8002d960:	00000000 	nop
8002d964:	8fa10028 	lw	at,40(sp)
8002d968:	8fa4002c 	lw	a0,44(sp)
8002d96c:	ac4100b8 	sw	at,184(v0)
                }
8002d970:	0c008c4e 	jal	80023138 <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h31092ada86abafaeE>
8002d974:	00000000 	nop
8002d978:	0800b5d7 	j	8002d75c <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x314>
8002d97c:	00000000 	nop
    assert!(idx < NENV);
8002d980:	3c018105 	lui	at,0x8105
8002d984:	2424d684 	addiu	a0,at,-10620
8002d988:	3c018105 	lui	at,0x8105
8002d98c:	2426d6a0 	addiu	a2,at,-10592
8002d990:	2405001c 	li	a1,28
8002d994:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
8002d998:	00000000 	nop
    let mut env_list = ENV_LIST.lock();
8002d99c:	3c018105 	lui	at,0x8105
8002d9a0:	2424e74c 	addiu	a0,at,-6324
8002d9a4:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
8002d9a8:	00000000 	nop
8002d9ac:	00402025 	move	a0,v0
8002d9b0:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
8002d9b4:	00000000 	nop
8002d9b8:	afa200d8 	sw	v0,216(sp)
8002d9bc:	27a400d8 	addiu	a0,sp,216
    env_list[idx].env_cur_runs -= 1;
8002d9c0:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
8002d9c4:	00000000 	nop
8002d9c8:	00402025 	move	a0,v0
8002d9cc:	8fa500a4 	lw	a1,164(sp)
8002d9d0:	3c018105 	lui	at,0x8105
8002d9d4:	2426d6b0 	addiu	a2,at,-10576
8002d9d8:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
8002d9dc:	00000000 	nop
8002d9e0:	00400825 	move	at,v0
8002d9e4:	afa10018 	sw	at,24(sp)
8002d9e8:	8c4200b8 	lw	v0,184(v0)
8002d9ec:	2441ffff 	addiu	at,v0,-1
8002d9f0:	afa1001c 	sw	at,28(sp)
8002d9f4:	0022082a 	slt	at,at,v0
8002d9f8:	10200029 	beqz	at,8002daa0 <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x658>
8002d9fc:	00000000 	nop
8002da00:	0800b682 	j	8002da08 <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E+0x5c0>
8002da04:	00000000 	nop
8002da08:	8fa1001c 	lw	at,28(sp)
8002da0c:	8fa20018 	lw	v0,24(sp)
8002da10:	ac4100b8 	sw	at,184(v0)
8002da14:	27a400d8 	addiu	a0,sp,216
8002da18:	afa40014 	sw	a0,20(sp)
    cp0::entryhi::write(env_list[idx].env_asid);
8002da1c:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
8002da20:	00000000 	nop
8002da24:	00402025 	move	a0,v0
8002da28:	8fa500a4 	lw	a1,164(sp)
8002da2c:	3c018105 	lui	at,0x8105
8002da30:	2426d6d0 	addiu	a2,at,-10544
8002da34:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
8002da38:	00000000 	nop
8002da3c:	8fa40014 	lw	a0,20(sp)
8002da40:	8c4100a4 	lw	at,164(v0)
8002da44:	afa100f0 	sw	at,240(sp)
                _ret
            }
            #[inline(always)]
            fn write(val: usize) {
                unsafe {
                    asm!(concat!(".set noat\nmtc0 {}, ",$no,"\n.set at\n"),in(reg) val,options(nomem,nostack));
8002da48:	40815000 	mtc0	at,c0_entryhi
    gpr::sp::write(&env_list[idx].env_tf as *const Trapframe as usize);
8002da4c:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
8002da50:	00000000 	nop
8002da54:	00402025 	move	a0,v0
8002da58:	8fa500a4 	lw	a1,164(sp)
8002da5c:	3c018105 	lui	at,0x8105
8002da60:	2426d6e0 	addiu	a2,at,-10528
8002da64:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
8002da68:	00000000 	nop
8002da6c:	afa200ec 	sw	v0,236(sp)
                _ret
            }
            #[inline(always)]
            fn write(val: usize) {
                unsafe {
                    asm!(concat!(".set noat\nmove ",$str,",{}\n.set at\n"),in(reg) val,options(nomem,nostack));
8002da70:	0040e825 	move	sp,v0
    drop(env_list);
8002da74:	8fa400d8 	lw	a0,216(sp)
8002da78:	0c008467 	jal	8002119c <_ZN4core3mem4drop17ha0064f35510a6787E>
8002da7c:	00000000 	nop
    trap::int::enable_timer_interrupt();
8002da80:	0c00be24 	jal	8002f890 <_ZN8mos_65024trap3int22enable_timer_interrupt17ha8adfedf201babfbE>
8002da84:	00000000 	nop
    unsafe {
        arch::asm!("j ret_from_exception");
8002da88:	0800009b 	j	8000026c <ret_from_exception>
8002da8c:	00000000 	nop
    }
}
8002da90:	8fbf00f4 	lw	ra,244(sp)
8002da94:	27bd00f8 	addiu	sp,sp,248
8002da98:	03e00008 	jr	ra
8002da9c:	00000000 	nop
    env_list[idx].env_cur_runs -= 1;
8002daa0:	3c018105 	lui	at,0x8105
8002daa4:	2424d6c0 	addiu	a0,at,-10560
8002daa8:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002daac:	00000000 	nop

8002dab0 <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17ha2cf53909d2bfa9cE>:
    fn from(value: usize) -> Self {
8002dab0:	27bdffc0 	addiu	sp,sp,-64
8002dab4:	afbf003c 	sw	ra,60(sp)
8002dab8:	afa40018 	sw	a0,24(sp)
8002dabc:	afa40038 	sw	a0,56(sp)
        match value {
8002dac0:	1080001b 	beqz	a0,8002db30 <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17ha2cf53909d2bfa9cE+0x80>
8002dac4:	00000000 	nop
8002dac8:	0800b6b4 	j	8002dad0 <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17ha2cf53909d2bfa9cE+0x20>
8002dacc:	00000000 	nop
8002dad0:	8fa10018 	lw	at,24(sp)
8002dad4:	24020001 	li	v0,1
8002dad8:	10220018 	beq	at,v0,8002db3c <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17ha2cf53909d2bfa9cE+0x8c>
8002dadc:	00000000 	nop
8002dae0:	0800b6ba 	j	8002dae8 <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17ha2cf53909d2bfa9cE+0x38>
8002dae4:	00000000 	nop
8002dae8:	8fa10018 	lw	at,24(sp)
8002daec:	24020002 	li	v0,2
8002daf0:	10220016 	beq	at,v0,8002db4c <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17ha2cf53909d2bfa9cE+0x9c>
8002daf4:	00000000 	nop
8002daf8:	0800b6c0 	j	8002db00 <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17ha2cf53909d2bfa9cE+0x50>
8002dafc:	00000000 	nop
            _ => panic!("Invalid EnvStatus.\n"),
8002db00:	3c018105 	lui	at,0x8105
8002db04:	2425d704 	addiu	a1,at,-10492
8002db08:	27a40020 	addiu	a0,sp,32
8002db0c:	afa40014 	sw	a0,20(sp)
8002db10:	24060001 	li	a2,1
8002db14:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
8002db18:	00000000 	nop
8002db1c:	8fa40014 	lw	a0,20(sp)
8002db20:	3c018105 	lui	at,0x8105
8002db24:	2425d720 	addiu	a1,at,-10464
8002db28:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002db2c:	00000000 	nop
            0 => EnvStatus::EnvFree,
8002db30:	afa0001c 	sw	zero,28(sp)
8002db34:	0800b6d7 	j	8002db5c <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17ha2cf53909d2bfa9cE+0xac>
8002db38:	00000000 	nop
8002db3c:	24010001 	li	at,1
            1 => EnvStatus::EnvRunnable,
8002db40:	afa1001c 	sw	at,28(sp)
8002db44:	0800b6d7 	j	8002db5c <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17ha2cf53909d2bfa9cE+0xac>
8002db48:	00000000 	nop
8002db4c:	24010002 	li	at,2
            2 => EnvStatus::EnvNotRunnable,
8002db50:	afa1001c 	sw	at,28(sp)
8002db54:	0800b6d7 	j	8002db5c <_ZN78_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17ha2cf53909d2bfa9cE+0xac>
8002db58:	00000000 	nop
    }
8002db5c:	8fa2001c 	lw	v0,28(sp)
8002db60:	8fbf003c 	lw	ra,60(sp)
8002db64:	27bd0040 	addiu	sp,sp,64
8002db68:	03e00008 	jr	ra
8002db6c:	00000000 	nop

8002db70 <_ZN8mos_65024proc3Env3new17he1c85554c5615b74E>:
    pub fn new(idx: usize) -> Self {
8002db70:	27bdee40 	addiu	sp,sp,-4544
8002db74:	afbf11bc 	sw	ra,4540(sp)
8002db78:	afa5002c 	sw	a1,44(sp)
8002db7c:	afa40050 	sw	a0,80(sp)
8002db80:	afa40054 	sw	a0,84(sp)
8002db84:	afa51130 	sw	a1,4400(sp)
8002db88:	27a4113c 	addiu	a0,sp,4412
8002db8c:	afa40014 	sw	a0,20(sp)
8002db90:	24050000 	li	a1,0
8002db94:	24060080 	li	a2,128
8002db98:	afa60018 	sw	a2,24(sp)

impl Trapframe {
    #[inline(always)]
    pub const fn new() -> Self {
        Self {
            regs: [0; 32],
8002db9c:	0c00d47d 	jal	800351f4 <memset>
8002dba0:	00000000 	nop
8002dba4:	8fa50014 	lw	a1,20(sp)
8002dba8:	8fa60018 	lw	a2,24(sp)
8002dbac:	27a40058 	addiu	a0,sp,88
8002dbb0:	afa40038 	sw	a0,56(sp)
        Self {
8002dbb4:	0c00d3fd 	jal	80034ff4 <memcpy>
8002dbb8:	00000000 	nop
8002dbbc:	8fa5002c 	lw	a1,44(sp)
8002dbc0:	afa000d8 	sw	zero,216(sp)
8002dbc4:	afa000dc 	sw	zero,220(sp)
8002dbc8:	afa000e0 	sw	zero,224(sp)
8002dbcc:	afa000e4 	sw	zero,228(sp)
8002dbd0:	afa000e8 	sw	zero,232(sp)
8002dbd4:	afa000ec 	sw	zero,236(sp)
8002dbd8:	27a40100 	addiu	a0,sp,256
8002dbdc:	afa4001c 	sw	a0,28(sp)
            env_link: Arc::new(RefCell::new(ListNode::new(idx))),
8002dbe0:	0c00ce1d 	jal	80033874 <_ZN8mos_65024util8ListNode3new17hcac65a712c835584E>
8002dbe4:	00000000 	nop
8002dbe8:	8fa5001c 	lw	a1,28(sp)
8002dbec:	27a400f0 	addiu	a0,sp,240
8002dbf0:	afa40020 	sw	a0,32(sp)
8002dbf4:	0c008ec7 	jal	80023b1c <_ZN4core4cell16RefCell$LT$T$GT$3new17hd6edfb8316fb4caaE>
8002dbf8:	00000000 	nop
8002dbfc:	8fa40020 	lw	a0,32(sp)
8002dc00:	0c00a378 	jal	80028de0 <_ZN5alloc4sync12Arc$LT$T$GT$3new17h3ae7f2a40b298a9cE>
8002dc04:	00000000 	nop
8002dc08:	afa2003c 	sw	v0,60(sp)
            env_status: EnvStatus::EnvFree,
8002dc0c:	afa0010c 	sw	zero,268(sp)
8002dc10:	27a40110 	addiu	a0,sp,272
8002dc14:	afa40024 	sw	a0,36(sp)
            env_pgdir: Box::new(Pgtable::new()),
8002dc18:	0c00b0ef 	jal	8002c3bc <_ZN8mos_65022mm7pgtable7Pgtable3new17haa656bcf79ee3c84E>
8002dc1c:	00000000 	nop
8002dc20:	24041000 	li	a0,4096
8002dc24:	afa40028 	sw	a0,40(sp)
8002dc28:	24050004 	li	a1,4
        Box::new(x)
8002dc2c:	0c00a417 	jal	8002905c <_ZN5alloc5alloc15exchange_malloc17h9c97cc714fefd6e9E>
8002dc30:	00000000 	nop
8002dc34:	8fa50024 	lw	a1,36(sp)
8002dc38:	8fa60028 	lw	a2,40(sp)
8002dc3c:	00402025 	move	a0,v0
8002dc40:	afa40040 	sw	a0,64(sp)
8002dc44:	0c00d3fd 	jal	80034ff4 <memcpy>
8002dc48:	00000000 	nop
8002dc4c:	8fa5002c 	lw	a1,44(sp)
8002dc50:	27a41120 	addiu	a0,sp,4384
8002dc54:	afa40030 	sw	a0,48(sp)
            env_sched_link: Arc::new(RefCell::new(ListNode::new(idx))),
8002dc58:	0c00ce1d 	jal	80033874 <_ZN8mos_65024util8ListNode3new17hcac65a712c835584E>
8002dc5c:	00000000 	nop
8002dc60:	8fa50030 	lw	a1,48(sp)
8002dc64:	27a41110 	addiu	a0,sp,4368
8002dc68:	afa40034 	sw	a0,52(sp)
8002dc6c:	0c008ec7 	jal	80023b1c <_ZN4core4cell16RefCell$LT$T$GT$3new17hd6edfb8316fb4caaE>
8002dc70:	00000000 	nop
8002dc74:	8fa40034 	lw	a0,52(sp)
8002dc78:	0c00a378 	jal	80028de0 <_ZN5alloc4sync12Arc$LT$T$GT$3new17h3ae7f2a40b298a9cE>
8002dc7c:	00000000 	nop
8002dc80:	afa20044 	sw	v0,68(sp)
8002dc84:	afa01138 	sw	zero,4408(sp)
        VirtAddr { raw }
8002dc88:	afa01134 	sw	zero,4404(sp)
    }
8002dc8c:	8fa11134 	lw	at,4404(sp)
8002dc90:	afa10048 	sw	at,72(sp)
            env_ipc_perm: Permssion::empty(),
8002dc94:	0c00d2fe 	jal	80034bf8 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$5empty17h7848d888f7322300E>
8002dc98:	00000000 	nop
8002dc9c:	8fa50038 	lw	a1,56(sp)
8002dca0:	8fa40050 	lw	a0,80(sp)
8002dca4:	afa2004c 	sw	v0,76(sp)
            env_padding1: [0; 4],
8002dca8:	afa0112c 	sw	zero,4396(sp)
8002dcac:	24060098 	li	a2,152
        Self {
8002dcb0:	0c00d3fd 	jal	80034ff4 <memcpy>
8002dcb4:	00000000 	nop
8002dcb8:	8fa7003c 	lw	a3,60(sp)
8002dcbc:	8fa60040 	lw	a2,64(sp)
8002dcc0:	8fa50044 	lw	a1,68(sp)
8002dcc4:	8fa30048 	lw	v1,72(sp)
8002dcc8:	8fa1004c 	lw	at,76(sp)
8002dccc:	8fa40050 	lw	a0,80(sp)
8002dcd0:	8fa20054 	lw	v0,84(sp)
8002dcd4:	ac870098 	sw	a3,152(a0)
8002dcd8:	8fa7112c 	lw	a3,4396(sp)
8002dcdc:	a887009f 	swl	a3,159(a0)
8002dce0:	b887009c 	swr	a3,156(a0)
8002dce4:	ac8000a0 	sw	zero,160(a0)
8002dce8:	ac8000a4 	sw	zero,164(a0)
8002dcec:	ac8000a8 	sw	zero,168(a0)
8002dcf0:	8fa7010c 	lw	a3,268(sp)
8002dcf4:	ac8700ac 	sw	a3,172(a0)
8002dcf8:	ac8600b0 	sw	a2,176(a0)
8002dcfc:	ac8500b4 	sw	a1,180(a0)
8002dd00:	ac8000b8 	sw	zero,184(a0)
8002dd04:	ac8000bc 	sw	zero,188(a0)
8002dd08:	ac8000c0 	sw	zero,192(a0)
8002dd0c:	ac8000c4 	sw	zero,196(a0)
8002dd10:	ac8000c8 	sw	zero,200(a0)
8002dd14:	ac8300cc 	sw	v1,204(a0)
8002dd18:	ac8100d0 	sw	at,208(a0)
8002dd1c:	ac8000d4 	sw	zero,212(a0)
8002dd20:	ac8000d8 	sw	zero,216(a0)
    }
8002dd24:	8fbf11bc 	lw	ra,4540(sp)
8002dd28:	27bd11c0 	addiu	sp,sp,4544
8002dd2c:	03e00008 	jr	ra
8002dd30:	00000000 	nop

8002dd34 <_ZN8mos_65024proc3Env6create17ha75a6b5e02f2fb32E>:
    pub fn create(&mut self, elf_data: &[u8]) {
8002dd34:	27bdfed0 	addiu	sp,sp,-304
8002dd38:	afbf012c 	sw	ra,300(sp)
8002dd3c:	afa60028 	sw	a2,40(sp)
8002dd40:	afa5002c 	sw	a1,44(sp)
8002dd44:	afa40030 	sw	a0,48(sp)
8002dd48:	afa400fc 	sw	a0,252(sp)
8002dd4c:	afa50100 	sw	a1,256(sp)
8002dd50:	afa60104 	sw	a2,260(sp)
8002dd54:	24010001 	li	at,1
        self.env_pri = DEFAULT_PRIO;
8002dd58:	ac8100bc 	sw	at,188(a0)
8002dd5c:	27a40044 	addiu	a0,sp,68
        let elf_ident = elf::ElfIdent::try_load(elf_data).unwrap();
8002dd60:	0c00d52a 	jal	800354a8 <_ZN3elf8ElfIdent8try_load17h26e2e1735a220c10E>
8002dd64:	00000000 	nop
        match self {
8002dd68:	93a10044 	lbu	at,68(sp)
8002dd6c:	30210001 	andi	at,at,0x1
8002dd70:	10200013 	beqz	at,8002ddc0 <_ZN8mos_65024proc3Env6create17ha75a6b5e02f2fb32E+0x8c>
8002dd74:	00000000 	nop
8002dd78:	0800b760 	j	8002dd80 <_ZN8mos_65024proc3Env6create17ha75a6b5e02f2fb32E+0x4c>
8002dd7c:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002dd80:	8fa20048 	lw	v0,72(sp)
8002dd84:	8fa1004c 	lw	at,76(sp)
8002dd88:	afa20110 	sw	v0,272(sp)
8002dd8c:	afa10114 	sw	at,276(sp)
8002dd90:	3c018105 	lui	at,0x8105
8002dd94:	2421d730 	addiu	at,at,-10448
8002dd98:	03a01025 	move	v0,sp
8002dd9c:	ac410010 	sw	at,16(v0)
8002dda0:	3c018105 	lui	at,0x8105
8002dda4:	2424cc7c 	addiu	a0,at,-13188
8002dda8:	3c018105 	lui	at,0x8105
8002ddac:	2427cc6c 	addiu	a3,at,-13204
8002ddb0:	2405002b 	li	a1,43
8002ddb4:	27a60110 	addiu	a2,sp,272
8002ddb8:	0c00f4d5 	jal	8003d354 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002ddbc:	00000000 	nop
8002ddc0:	8fa60028 	lw	a2,40(sp)
8002ddc4:	8fa5002c 	lw	a1,44(sp)
            Ok(t) => t,
8002ddc8:	8ba10054 	lwl	at,84(sp)
8002ddcc:	9ba10051 	lwr	at,81(sp)
8002ddd0:	afa10040 	sw	at,64(sp)
8002ddd4:	8ba10050 	lwl	at,80(sp)
8002ddd8:	9ba1004d 	lwr	at,77(sp)
8002dddc:	afa1003c 	sw	at,60(sp)
8002dde0:	8ba1004c 	lwl	at,76(sp)
8002dde4:	9ba10049 	lwr	at,73(sp)
8002dde8:	afa10038 	sw	at,56(sp)
8002ddec:	8ba10048 	lwl	at,72(sp)
8002ddf0:	9ba10045 	lwr	at,69(sp)
8002ddf4:	afa10034 	sw	at,52(sp)
8002ddf8:	27a4008c 	addiu	a0,sp,140
8002ddfc:	27a70034 	addiu	a3,sp,52
        let elf_header = elf::load_elf_header::<elf::ElfHeader32>(elf_data, &elf_ident).unwrap();
8002de00:	0c0080ad 	jal	800202b4 <_ZN3elf15load_elf_header17h8287d9bd209cd195E>
8002de04:	00000000 	nop
        match self {
8002de08:	8fa1008c 	lw	at,140(sp)
8002de0c:	10200013 	beqz	at,8002de5c <_ZN8mos_65024proc3Env6create17ha75a6b5e02f2fb32E+0x128>
8002de10:	00000000 	nop
8002de14:	0800b787 	j	8002de1c <_ZN8mos_65024proc3Env6create17ha75a6b5e02f2fb32E+0xe8>
8002de18:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002de1c:	8fa20090 	lw	v0,144(sp)
8002de20:	8fa10094 	lw	at,148(sp)
8002de24:	afa20118 	sw	v0,280(sp)
8002de28:	afa1011c 	sw	at,284(sp)
8002de2c:	3c018105 	lui	at,0x8105
8002de30:	2421d740 	addiu	at,at,-10432
8002de34:	03a01025 	move	v0,sp
8002de38:	ac410010 	sw	at,16(v0)
8002de3c:	3c018105 	lui	at,0x8105
8002de40:	2424cc7c 	addiu	a0,at,-13188
8002de44:	3c018105 	lui	at,0x8105
8002de48:	2427cc6c 	addiu	a3,at,-13204
8002de4c:	2405002b 	li	a1,43
8002de50:	27a60118 	addiu	a2,sp,280
8002de54:	0c00f4d5 	jal	8003d354 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002de58:	00000000 	nop
            Ok(t) => t,
8002de5c:	8fa60028 	lw	a2,40(sp)
8002de60:	8fa5002c 	lw	a1,44(sp)
8002de64:	8fa100c0 	lw	at,192(sp)
8002de68:	afa10088 	sw	at,136(sp)
8002de6c:	8fa100bc 	lw	at,188(sp)
8002de70:	afa10084 	sw	at,132(sp)
8002de74:	8fa100b8 	lw	at,184(sp)
8002de78:	afa10080 	sw	at,128(sp)
8002de7c:	8fa100b4 	lw	at,180(sp)
8002de80:	afa1007c 	sw	at,124(sp)
8002de84:	8fa100b0 	lw	at,176(sp)
8002de88:	afa10078 	sw	at,120(sp)
8002de8c:	8fa100ac 	lw	at,172(sp)
8002de90:	afa10074 	sw	at,116(sp)
8002de94:	8fa100a8 	lw	at,168(sp)
8002de98:	afa10070 	sw	at,112(sp)
8002de9c:	8fa100a4 	lw	at,164(sp)
8002dea0:	afa1006c 	sw	at,108(sp)
8002dea4:	8fa100a0 	lw	at,160(sp)
8002dea8:	afa10068 	sw	at,104(sp)
8002deac:	8fa1009c 	lw	at,156(sp)
8002deb0:	afa10064 	sw	at,100(sp)
8002deb4:	8fa10098 	lw	at,152(sp)
8002deb8:	afa10060 	sw	at,96(sp)
8002debc:	8fa10094 	lw	at,148(sp)
8002dec0:	afa1005c 	sw	at,92(sp)
8002dec4:	8fa10090 	lw	at,144(sp)
8002dec8:	afa10058 	sw	at,88(sp)
            elf::load_elf_program_headers::<elf::ProgramHeader32>(elf_data, &elf_header).unwrap();
8002decc:	3c018105 	lui	at,0x8105
8002ded0:	2421d750 	addiu	at,at,-10416
8002ded4:	03a01025 	move	v0,sp
8002ded8:	ac410010 	sw	at,16(v0)
8002dedc:	27a400d0 	addiu	a0,sp,208
8002dee0:	27a70058 	addiu	a3,sp,88
8002dee4:	0c008108 	jal	80020420 <_ZN3elf24load_elf_program_headers17ha52662ab45d7d6f1E>
8002dee8:	00000000 	nop
        match self {
8002deec:	8fa100d0 	lw	at,208(sp)
8002def0:	3c028000 	lui	v0,0x8000
8002def4:	14220013 	bne	at,v0,8002df44 <_ZN8mos_65024proc3Env6create17ha75a6b5e02f2fb32E+0x210>
8002def8:	00000000 	nop
8002defc:	0800b7c1 	j	8002df04 <_ZN8mos_65024proc3Env6create17ha75a6b5e02f2fb32E+0x1d0>
8002df00:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002df04:	8fa200d4 	lw	v0,212(sp)
8002df08:	8fa100d8 	lw	at,216(sp)
8002df0c:	afa20108 	sw	v0,264(sp)
8002df10:	afa1010c 	sw	at,268(sp)
8002df14:	3c018105 	lui	at,0x8105
8002df18:	2421d77c 	addiu	at,at,-10372
8002df1c:	03a01025 	move	v0,sp
8002df20:	ac410010 	sw	at,16(v0)
8002df24:	3c018105 	lui	at,0x8105
8002df28:	2424cc7c 	addiu	a0,at,-13188
8002df2c:	3c018105 	lui	at,0x8105
8002df30:	2427cc6c 	addiu	a3,at,-13204
8002df34:	2405002b 	li	a1,43
8002df38:	27a60108 	addiu	a2,sp,264
8002df3c:	0c00f4d5 	jal	8003d354 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002df40:	00000000 	nop
            Ok(t) => t,
8002df44:	8fa100d8 	lw	at,216(sp)
8002df48:	afa100cc 	sw	at,204(sp)
8002df4c:	8fa100d4 	lw	at,212(sp)
8002df50:	afa100c8 	sw	at,200(sp)
8002df54:	8fa100d0 	lw	at,208(sp)
8002df58:	afa100c4 	sw	at,196(sp)
8002df5c:	27a400c4 	addiu	a0,sp,196
        elf_program_headers.iter().for_each(|ph| {
8002df60:	0c00ab07 	jal	8002ac1c <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h181d71002ee560d6E>
8002df64:	00000000 	nop
8002df68:	00402025 	move	a0,v0
8002df6c:	00602825 	move	a1,v1
8002df70:	0c009551 	jal	80025544 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h0df9e517dc41b709E>
8002df74:	00000000 	nop
8002df78:	8fa10028 	lw	at,40(sp)
8002df7c:	00402025 	move	a0,v0
8002df80:	8fa2002c 	lw	v0,44(sp)
8002df84:	00602825 	move	a1,v1
8002df88:	8fa30030 	lw	v1,48(sp)
8002df8c:	246300b0 	addiu	v1,v1,176
8002df90:	afa300dc 	sw	v1,220(sp)
8002df94:	afa200e0 	sw	v0,224(sp)
8002df98:	afa100e4 	sw	at,228(sp)
8002df9c:	27a600dc 	addiu	a2,sp,220
8002dfa0:	0c00ae3a 	jal	8002b8e8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd0cc1702afaa7098E>
8002dfa4:	00000000 	nop
8002dfa8:	8fa10030 	lw	at,48(sp)
        self.env_id = mkenvid(self.env_link.borrow().idx);
8002dfac:	24240098 	addiu	a0,at,152
8002dfb0:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
8002dfb4:	00000000 	nop
8002dfb8:	00402025 	move	a0,v0
8002dfbc:	3c018105 	lui	at,0x8105
8002dfc0:	2425d78c 	addiu	a1,at,-10356
8002dfc4:	0c008ee2 	jal	80023b88 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h0651cb519b6f324eE>
8002dfc8:	00000000 	nop
8002dfcc:	afa200e8 	sw	v0,232(sp)
8002dfd0:	afa300ec 	sw	v1,236(sp)
8002dfd4:	27a400e8 	addiu	a0,sp,232
8002dfd8:	afa40024 	sw	a0,36(sp)
8002dfdc:	0c00a9f8 	jal	8002a7e0 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hefea2bce46aaade6E>
8002dfe0:	00000000 	nop
8002dfe4:	8c440008 	lw	a0,8(v0)
8002dfe8:	0c00baaf 	jal	8002eabc <_ZN8mos_65024proc7mkenvid17he74f31e9a592da87E>
8002dfec:	00000000 	nop
8002dff0:	8fa10030 	lw	at,48(sp)
8002dff4:	8fa40024 	lw	a0,36(sp)
8002dff8:	ac2200a0 	sw	v0,160(at)
8002dffc:	0c008b58 	jal	80022d60 <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d64f236e3cdb092E>
8002e000:	00000000 	nop
8002e004:	27a400f0 	addiu	a0,sp,240
        self.env_asid = asid_alloc().unwrap();
8002e008:	0c00baf8 	jal	8002ebe0 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E>
8002e00c:	00000000 	nop
        match self {
8002e010:	8fa100f0 	lw	at,240(sp)
8002e014:	10200013 	beqz	at,8002e064 <_ZN8mos_65024proc3Env6create17ha75a6b5e02f2fb32E+0x330>
8002e018:	00000000 	nop
8002e01c:	0800b809 	j	8002e024 <_ZN8mos_65024proc3Env6create17ha75a6b5e02f2fb32E+0x2f0>
8002e020:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002e024:	8fa200f0 	lw	v0,240(sp)
8002e028:	8fa100f4 	lw	at,244(sp)
8002e02c:	afa20120 	sw	v0,288(sp)
8002e030:	afa10124 	sw	at,292(sp)
8002e034:	3c018105 	lui	at,0x8105
8002e038:	2421d79c 	addiu	at,at,-10340
8002e03c:	03a01025 	move	v0,sp
8002e040:	ac410010 	sw	at,16(v0)
8002e044:	3c018105 	lui	at,0x8105
8002e048:	2424cc7c 	addiu	a0,at,-13188
8002e04c:	3c018105 	lui	at,0x8105
8002e050:	2427cc6c 	addiu	a3,at,-13204
8002e054:	2405002b 	li	a1,43
8002e058:	27a60120 	addiu	a2,sp,288
8002e05c:	0c00f4d5 	jal	8003d354 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002e060:	00000000 	nop
            Ok(t) => t,
8002e064:	8fa20030 	lw	v0,48(sp)
8002e068:	8fa100f4 	lw	at,244(sp)
8002e06c:	afa10128 	sw	at,296(sp)
8002e070:	ac4100a4 	sw	at,164(v0)
8002e074:	24010001 	li	at,1
        self.env_status = EnvStatus::EnvRunnable;
8002e078:	afa100f8 	sw	at,248(sp)
8002e07c:	8fa100f8 	lw	at,248(sp)
8002e080:	ac4100ac 	sw	at,172(v0)
8002e084:	27a40058 	addiu	a0,sp,88
        self.env_tf.epc = elf_header.get_entry() as usize;
8002e088:	0c00d56e 	jal	800355b8 <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$9get_entry17h0a3ae17a333176ceE>
8002e08c:	00000000 	nop
8002e090:	8fa10030 	lw	at,48(sp)
8002e094:	ac220094 	sw	v0,148(at)
8002e098:	24010008 	li	at,8
8002e09c:	afa10020 	sw	at,32(sp)
8002e0a0:	24010000 	li	at,0
        self.env_tf.regs[29] = USTACKTOP.raw - size_of::<usize>() * 2;
8002e0a4:	1400000d 	bnez	zero,8002e0dc <_ZN8mos_65024proc3Env6create17ha75a6b5e02f2fb32E+0x3a8>
8002e0a8:	00000000 	nop
8002e0ac:	0800b82d 	j	8002e0b4 <_ZN8mos_65024proc3Env6create17ha75a6b5e02f2fb32E+0x380>
8002e0b0:	00000000 	nop
8002e0b4:	8fa20020 	lw	v0,32(sp)
8002e0b8:	3c017f3f 	lui	at,0x7f3f
8002e0bc:	3421d000 	ori	at,at,0xd000
8002e0c0:	00221823 	subu	v1,at,v0
8002e0c4:	afa3001c 	sw	v1,28(sp)
8002e0c8:	0022082b 	sltu	at,at,v0
8002e0cc:	14200013 	bnez	at,8002e11c <_ZN8mos_65024proc3Env6create17ha75a6b5e02f2fb32E+0x3e8>
8002e0d0:	00000000 	nop
8002e0d4:	0800b83b 	j	8002e0ec <_ZN8mos_65024proc3Env6create17ha75a6b5e02f2fb32E+0x3b8>
8002e0d8:	00000000 	nop
8002e0dc:	3c018105 	lui	at,0x8105
8002e0e0:	2424d7ac 	addiu	a0,at,-10324
8002e0e4:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002e0e8:	00000000 	nop
8002e0ec:	8fa20030 	lw	v0,48(sp)
8002e0f0:	8fa1001c 	lw	at,28(sp)
8002e0f4:	ac410074 	sw	at,116(v0)
8002e0f8:	34018013 	li	at,0x8013
        self.env_tf.status = ST_IM7 | ST_IE | ST_EXL | ST_UM;
8002e0fc:	ac410080 	sw	at,128(v0)
8002e100:	27a400c4 	addiu	a0,sp,196
    }
8002e104:	0c008b3e 	jal	80022cf8 <_ZN4core3ptr64drop_in_place$LT$alloc..vec..Vec$LT$elf..ProgramHeader32$GT$$GT$17ha2f5ee124d3de492E>
8002e108:	00000000 	nop
8002e10c:	8fbf012c 	lw	ra,300(sp)
8002e110:	27bd0130 	addiu	sp,sp,304
8002e114:	03e00008 	jr	ra
8002e118:	00000000 	nop
        self.env_tf.regs[29] = USTACKTOP.raw - size_of::<usize>() * 2;
8002e11c:	3c018105 	lui	at,0x8105
8002e120:	2424d7bc 	addiu	a0,at,-10308
8002e124:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002e128:	00000000 	nop

8002e12c <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E>:
        elf_program_headers.iter().for_each(|ph| {
8002e12c:	27bdff10 	addiu	sp,sp,-240
8002e130:	afbf00ec 	sw	ra,236(sp)
8002e134:	afa50060 	sw	a1,96(sp)
8002e138:	00800825 	move	at,a0
8002e13c:	8fa40060 	lw	a0,96(sp)
8002e140:	afa10064 	sw	at,100(sp)
8002e144:	afa10090 	sw	at,144(sp)
8002e148:	afa40094 	sw	a0,148(sp)
            if ph.get_type() != elf::PT_LOAD {
8002e14c:	0c00d592 	jal	80035648 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$8get_type17h9b03f961e4fd3778E>
8002e150:	00000000 	nop
8002e154:	24010001 	li	at,1
8002e158:	14410031 	bne	v0,at,8002e220 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0xf4>
8002e15c:	00000000 	nop
8002e160:	0800b85a 	j	8002e168 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x3c>
8002e164:	00000000 	nop
            let va = VirtAddr::new(ph.get_vaddr() as usize);
8002e168:	8fa40060 	lw	a0,96(sp)
8002e16c:	0c00d59e 	jal	80035678 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$9get_vaddr17hc5412ead21e5bcdeE>
8002e170:	00000000 	nop
8002e174:	8fa40060 	lw	a0,96(sp)
8002e178:	afa200e8 	sw	v0,232(sp)
        VirtAddr { raw }
8002e17c:	afa200e4 	sw	v0,228(sp)
    }
8002e180:	8fa100e4 	lw	at,228(sp)
8002e184:	afa10050 	sw	at,80(sp)
8002e188:	afa10098 	sw	at,152(sp)
            let memsz = ph.get_memsz() as usize;
8002e18c:	0c00d5aa 	jal	800356a8 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$9get_memsz17hfb2cd24d087e8cc9E>
8002e190:	00000000 	nop
8002e194:	8fa40060 	lw	a0,96(sp)
8002e198:	afa2005c 	sw	v0,92(sp)
8002e19c:	afa2009c 	sw	v0,156(sp)
            let file_offset = ph.get_offset() as usize;
8002e1a0:	0c00d598 	jal	80035660 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$10get_offset17h45a757a961e3a8d3E>
8002e1a4:	00000000 	nop
8002e1a8:	8fa40060 	lw	a0,96(sp)
8002e1ac:	00400825 	move	at,v0
8002e1b0:	afa10054 	sw	at,84(sp)
8002e1b4:	afa200a0 	sw	v0,160(sp)
            let file_sz = ph.get_filesz() as usize;
8002e1b8:	0c00d5a4 	jal	80035690 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$10get_filesz17hd60e41e25cbcff0fE>
8002e1bc:	00000000 	nop
8002e1c0:	00400825 	move	at,v0
8002e1c4:	afa10058 	sw	at,88(sp)
8002e1c8:	afa200a4 	sw	v0,164(sp)
8002e1cc:	24040080 	li	a0,128
8002e1d0:	24050100 	li	a1,256
            let perm = Permssion::PTE_V | Permssion::PTE_D;
8002e1d4:	0c00d328 	jal	80034ca0 <_ZN8mos_65022mm7pgtable1_84_$LT$impl$u20$core..ops..bit..BitOr$u20$for$u20$mos_6502..mm..pgtable..Permssion$GT$5bitor17h535389841f955927E>
8002e1d8:	00000000 	nop
8002e1dc:	8fa4005c 	lw	a0,92(sp)
8002e1e0:	afa20068 	sw	v0,104(sp)
            for i in 0..memsz.div_ceil(PAGE_SIZE) {
8002e1e4:	3c018105 	lui	at,0x8105
8002e1e8:	2426d7cc 	addiu	a2,at,-10292
8002e1ec:	24051000 	li	a1,4096
8002e1f0:	0c008580 	jal	80021600 <_ZN4core3num23_$LT$impl$u20$usize$GT$8div_ceil17h3e5dfe6e2f907330E>
8002e1f4:	00000000 	nop
8002e1f8:	afa0006c 	sw	zero,108(sp)
8002e1fc:	afa20070 	sw	v0,112(sp)
8002e200:	8fa4006c 	lw	a0,108(sp)
8002e204:	8fa50070 	lw	a1,112(sp)
8002e208:	0c0123e2 	jal	80048f88 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
8002e20c:	00000000 	nop
8002e210:	afa20074 	sw	v0,116(sp)
8002e214:	afa30078 	sw	v1,120(sp)
8002e218:	0800b88c 	j	8002e230 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x104>
8002e21c:	00000000 	nop
        });
8002e220:	8fbf00ec 	lw	ra,236(sp)
8002e224:	27bd00f0 	addiu	sp,sp,240
8002e228:	03e00008 	jr	ra
8002e22c:	00000000 	nop
8002e230:	27a40074 	addiu	a0,sp,116
            for i in 0..memsz.div_ceil(PAGE_SIZE) {
8002e234:	0c0123d9 	jal	80048f64 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
8002e238:	00000000 	nop
8002e23c:	afa2007c 	sw	v0,124(sp)
8002e240:	afa30080 	sw	v1,128(sp)
8002e244:	8fa1007c 	lw	at,124(sp)
8002e248:	1020fff5 	beqz	at,8002e220 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0xf4>
8002e24c:	00000000 	nop
8002e250:	0800b896 	j	8002e258 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x12c>
8002e254:	00000000 	nop
8002e258:	8fa10080 	lw	at,128(sp)
8002e25c:	afa1004c 	sw	at,76(sp)
8002e260:	afa100a8 	sw	at,168(sp)
8002e264:	27a40084 	addiu	a0,sp,132
                let (_, page_pa) = page_alloc().unwrap();
8002e268:	0c00b007 	jal	8002c01c <_ZN8mos_65022mm4page10page_alloc17ha38ea23af0abb5c5E>
8002e26c:	00000000 	nop
        match self {
8002e270:	8fa10084 	lw	at,132(sp)
8002e274:	14200007 	bnez	at,8002e294 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x168>
8002e278:	00000000 	nop
8002e27c:	0800b8a1 	j	8002e284 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x158>
8002e280:	00000000 	nop
            None => unwrap_failed(),
8002e284:	3c018105 	lui	at,0x8105
8002e288:	2424d7dc 	addiu	a0,at,-10276
8002e28c:	0c00f1b6 	jal	8003c6d8 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
8002e290:	00000000 	nop
            Some(val) => val,
8002e294:	8fa10064 	lw	at,100(sp)
8002e298:	8fa30088 	lw	v1,136(sp)
8002e29c:	8fa2008c 	lw	v0,140(sp)
8002e2a0:	afa20040 	sw	v0,64(sp)
8002e2a4:	afa300cc 	sw	v1,204(sp)
8002e2a8:	afa200d0 	sw	v0,208(sp)
8002e2ac:	afa200ac 	sw	v0,172(sp)
                self.env_pgdir
8002e2b0:	8c240000 	lw	a0,0(at)
8002e2b4:	0c00ad4c 	jal	8002b530 <_ZN80_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..convert..AsMut$LT$T$GT$$GT$6as_mut17h49855ee6c6232af0E>
8002e2b8:	00000000 	nop
8002e2bc:	00400825 	move	at,v0
8002e2c0:	8fa2004c 	lw	v0,76(sp)
8002e2c4:	afa10044 	sw	at,68(sp)
                    .map_va_to_pa(va.add(i * PAGE_SIZE), page_pa, 1, &perm, false)
8002e2c8:	00020b00 	sll	at,v0,0xc
8002e2cc:	afa10048 	sw	at,72(sp)
8002e2d0:	7c419800 	ext	at,v0,0x0,0x14
8002e2d4:	14220030 	bne	at,v0,8002e398 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x26c>
8002e2d8:	00000000 	nop
8002e2dc:	0800b8b9 	j	8002e2e4 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x1b8>
8002e2e0:	00000000 	nop
8002e2e4:	8fa50048 	lw	a1,72(sp)
8002e2e8:	8fa40050 	lw	a0,80(sp)
8002e2ec:	0c00af2c 	jal	8002bcb0 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17hf63c307524190caaE>
8002e2f0:	00000000 	nop
8002e2f4:	8fa40044 	lw	a0,68(sp)
8002e2f8:	8fa60040 	lw	a2,64(sp)
8002e2fc:	00402825 	move	a1,v0
                self.env_pgdir
8002e300:	03a00825 	move	at,sp
8002e304:	27a20068 	addiu	v0,sp,104
8002e308:	ac220010 	sw	v0,16(at)
8002e30c:	ac200014 	sw	zero,20(at)
8002e310:	24070001 	li	a3,1
8002e314:	0c00b117 	jal	8002c45c <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE>
8002e318:	00000000 	nop
8002e31c:	afa200d4 	sw	v0,212(sp)
8002e320:	afa300d8 	sw	v1,216(sp)
        match self {
8002e324:	8fa100d4 	lw	at,212(sp)
8002e328:	10200013 	beqz	at,8002e378 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x24c>
8002e32c:	00000000 	nop
8002e330:	0800b8ce 	j	8002e338 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x20c>
8002e334:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002e338:	8fa200d4 	lw	v0,212(sp)
8002e33c:	8fa100d8 	lw	at,216(sp)
8002e340:	afa200dc 	sw	v0,220(sp)
8002e344:	afa100e0 	sw	at,224(sp)
8002e348:	3c018105 	lui	at,0x8105
8002e34c:	2421d7fc 	addiu	at,at,-10244
8002e350:	03a01025 	move	v0,sp
8002e354:	ac410010 	sw	at,16(v0)
8002e358:	3c018105 	lui	at,0x8105
8002e35c:	2424cc7c 	addiu	a0,at,-13188
8002e360:	3c018105 	lui	at,0x8105
8002e364:	2427cc6c 	addiu	a3,at,-13204
8002e368:	2405002b 	li	a1,43
8002e36c:	27a600dc 	addiu	a2,sp,220
8002e370:	0c00f4d5 	jal	8003d354 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002e374:	00000000 	nop
                    if i * PAGE_SIZE < file_sz {
8002e378:	8fa2004c 	lw	v0,76(sp)
8002e37c:	00020b00 	sll	at,v0,0xc
8002e380:	afa1003c 	sw	at,60(sp)
8002e384:	7c419800 	ext	at,v0,0x0,0x14
8002e388:	1422000e 	bne	at,v0,8002e3c4 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x298>
8002e38c:	00000000 	nop
8002e390:	0800b8ea 	j	8002e3a8 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x27c>
8002e394:	00000000 	nop
                    .map_va_to_pa(va.add(i * PAGE_SIZE), page_pa, 1, &perm, false)
8002e398:	3c018105 	lui	at,0x8105
8002e39c:	2424d7ec 	addiu	a0,at,-10260
8002e3a0:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002e3a4:	00000000 	nop
                    if i * PAGE_SIZE < file_sz {
8002e3a8:	8fa1003c 	lw	at,60(sp)
8002e3ac:	8fa20058 	lw	v0,88(sp)
8002e3b0:	0022082b 	sltu	at,at,v0
8002e3b4:	14200007 	bnez	at,8002e3d4 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x2a8>
8002e3b8:	00000000 	nop
8002e3bc:	0800b88c 	j	8002e230 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x104>
8002e3c0:	00000000 	nop
8002e3c4:	3c018105 	lui	at,0x8105
8002e3c8:	2424d80c 	addiu	a0,at,-10228
8002e3cc:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002e3d0:	00000000 	nop
                            elf_data.as_ptr().add(file_offset + i * PAGE_SIZE),
8002e3d4:	8fa2004c 	lw	v0,76(sp)
8002e3d8:	8fa10064 	lw	at,100(sp)
8002e3dc:	8c230004 	lw	v1,4(at)
8002e3e0:	afa30034 	sw	v1,52(sp)
8002e3e4:	8c210008 	lw	at,8(at)
8002e3e8:	afa300c4 	sw	v1,196(sp)
8002e3ec:	afa100c8 	sw	at,200(sp)
8002e3f0:	00020b00 	sll	at,v0,0xc
8002e3f4:	afa10038 	sw	at,56(sp)
8002e3f8:	7c419800 	ext	at,v0,0x0,0x14
8002e3fc:	1422000c 	bne	at,v0,8002e430 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x304>
8002e400:	00000000 	nop
8002e404:	0800b903 	j	8002e40c <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x2e0>
8002e408:	00000000 	nop
8002e40c:	8fa20054 	lw	v0,84(sp)
8002e410:	8fa10038 	lw	at,56(sp)
8002e414:	00410821 	addu	at,v0,at
8002e418:	afa10030 	sw	at,48(sp)
8002e41c:	0022082b 	sltu	at,at,v0
8002e420:	1420001a 	bnez	at,8002e48c <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x360>
8002e424:	00000000 	nop
8002e428:	0800b910 	j	8002e440 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x314>
8002e42c:	00000000 	nop
8002e430:	3c018105 	lui	at,0x8105
8002e434:	2424d81c 	addiu	a0,at,-10212
8002e438:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002e43c:	00000000 	nop
8002e440:	8fa40040 	lw	a0,64(sp)
8002e444:	8fa10034 	lw	at,52(sp)
8002e448:	8fa20030 	lw	v0,48(sp)
8002e44c:	afa100bc 	sw	at,188(sp)
8002e450:	afa200c0 	sw	v0,192(sp)
8002e454:	00220821 	addu	at,at,v0
8002e458:	afa10024 	sw	at,36(sp)
                            page_pa.into(),
8002e45c:	0c00af43 	jal	8002bd0c <_ZN90_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..convert..Into$LT$$BP$mut$u20$u8$GT$$GT$4into17hacc3b62dc999f2feE>
8002e460:	00000000 	nop
8002e464:	00400825 	move	at,v0
8002e468:	8fa2004c 	lw	v0,76(sp)
8002e46c:	afa10028 	sw	at,40(sp)
                            core::cmp::min(PAGE_SIZE, file_sz - i * PAGE_SIZE),
8002e470:	00020b00 	sll	at,v0,0xc
8002e474:	afa1002c 	sw	at,44(sp)
8002e478:	7c419800 	ext	at,v0,0x0,0x14
8002e47c:	14220010 	bne	at,v0,8002e4c0 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x394>
8002e480:	00000000 	nop
8002e484:	0800b927 	j	8002e49c <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x370>
8002e488:	00000000 	nop
                            elf_data.as_ptr().add(file_offset + i * PAGE_SIZE),
8002e48c:	3c018105 	lui	at,0x8105
8002e490:	2424d82c 	addiu	a0,at,-10196
8002e494:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002e498:	00000000 	nop
                            core::cmp::min(PAGE_SIZE, file_sz - i * PAGE_SIZE),
8002e49c:	8fa10058 	lw	at,88(sp)
8002e4a0:	8fa2002c 	lw	v0,44(sp)
8002e4a4:	00221823 	subu	v1,at,v0
8002e4a8:	afa30020 	sw	v1,32(sp)
8002e4ac:	0022082b 	sltu	at,at,v0
8002e4b0:	14200026 	bnez	at,8002e54c <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x420>
8002e4b4:	00000000 	nop
8002e4b8:	0800b934 	j	8002e4d0 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x3a4>
8002e4bc:	00000000 	nop
8002e4c0:	3c018105 	lui	at,0x8105
8002e4c4:	2424d83c 	addiu	a0,at,-10180
8002e4c8:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002e4cc:	00000000 	nop
8002e4d0:	8fa50020 	lw	a1,32(sp)
8002e4d4:	24041000 	li	a0,4096
8002e4d8:	0c00e91c 	jal	8003a470 <_ZN4core3cmp3min17hec05a35ccdb294eaE>
8002e4dc:	00000000 	nop
8002e4e0:	8fa30024 	lw	v1,36(sp)
8002e4e4:	8fa10028 	lw	at,40(sp)
8002e4e8:	00402025 	move	a0,v0
8002e4ec:	afa4001c 	sw	a0,28(sp)
8002e4f0:	afa300b0 	sw	v1,176(sp)
8002e4f4:	afa100b4 	sw	at,180(sp)
8002e4f8:	afa200b8 	sw	v0,184(sp)
        ub_checks::assert_unsafe_precondition!(
8002e4fc:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
8002e500:	00000000 	nop
8002e504:	1040000a 	beqz	v0,8002e530 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x404>
8002e508:	00000000 	nop
8002e50c:	0800b945 	j	8002e514 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x3e8>
8002e510:	00000000 	nop
8002e514:	8fa50028 	lw	a1,40(sp)
8002e518:	8fa40024 	lw	a0,36(sp)
8002e51c:	24060001 	li	a2,1
8002e520:	0c008245 	jal	80020914 <_ZN4core10intrinsics4copy18precondition_check17h1848046f8d12e669E>
8002e524:	00000000 	nop
8002e528:	0800b94c 	j	8002e530 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x404>
8002e52c:	00000000 	nop
        copy(src, dst, count)
8002e530:	8fa6001c 	lw	a2,28(sp)
8002e534:	8fa50024 	lw	a1,36(sp)
8002e538:	8fa40028 	lw	a0,40(sp)
8002e53c:	0c00d0e1 	jal	80034384 <memmove>
8002e540:	00000000 	nop
                        core::ptr::copy(
8002e544:	0800b88c 	j	8002e230 <_ZN8mos_65024proc3Env6create28_$u7b$$u7b$closure$u7d$$u7d$17hd68d93771af3aaf4E+0x104>
8002e548:	00000000 	nop
                            core::cmp::min(PAGE_SIZE, file_sz - i * PAGE_SIZE),
8002e54c:	3c018105 	lui	at,0x8105
8002e550:	2424d84c 	addiu	a0,at,-10164
8002e554:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002e558:	00000000 	nop

8002e55c <_ZN8mos_65024proc3Env9get_envid17h6804e3baab9ab4b9E>:
    pub fn get_envid(&self) -> usize {
8002e55c:	27bdfff8 	addiu	sp,sp,-8
8002e560:	afa40004 	sw	a0,4(sp)
        self.env_id
8002e564:	8c8200a0 	lw	v0,160(a0)
8002e568:	27bd0008 	addiu	sp,sp,8
    }
8002e56c:	03e00008 	jr	ra
8002e570:	00000000 	nop

8002e574 <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E>:
}

fn map_pre_pgdir(envs: &Vec<Env>) {
8002e574:	27bdff68 	addiu	sp,sp,-152
8002e578:	afbf0094 	sw	ra,148(sp)
8002e57c:	afa40048 	sw	a0,72(sp)
8002e580:	afa40068 	sw	a0,104(sp)
    let mut pre_pgtable = PRE_PGTABLE.lock();
8002e584:	3c018105 	lui	at,0x8105
8002e588:	2424e74c 	addiu	a0,at,-6324
8002e58c:	0c00d3e9 	jal	80034fa4 <_ZN71_$LT$mos_6502..proc..PRE_PGTABLE$u20$as$u20$core..ops..deref..Deref$GT$5deref17h05b2e27cdcbf19dbE>
8002e590:	00000000 	nop
8002e594:	00402025 	move	a0,v0
8002e598:	0c00a0a9 	jal	800282a4 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h66b6d58b2df95132E>
8002e59c:	00000000 	nop
8002e5a0:	afa20058 	sw	v0,88(sp)
8002e5a4:	27a40058 	addiu	a0,sp,88
    pre_pgtable
8002e5a8:	0c00ada5 	jal	8002b694 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7ebfdd9bd9706eb1E>
8002e5ac:	00000000 	nop
8002e5b0:	8fa40048 	lw	a0,72(sp)
8002e5b4:	8c410000 	lw	at,0(v0)
8002e5b8:	afa1004c 	sw	at,76(sp)
        .map_va_to_pa(
            UENVS,
            (envs.as_ptr() as usize).into(),
8002e5bc:	0c00a35d 	jal	80028d74 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hf0345009f98289e0E>
8002e5c0:	00000000 	nop
8002e5c4:	00402025 	move	a0,v0
8002e5c8:	3c018105 	lui	at,0x8105
8002e5cc:	2425d85c 	addiu	a1,at,-10148
8002e5d0:	0c00a186 	jal	80028618 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h1413aa14d136e74dE>
8002e5d4:	00000000 	nop
8002e5d8:	afa20050 	sw	v0,80(sp)
8002e5dc:	3c010003 	lui	at,0x3
8002e5e0:	34217000 	ori	at,at,0x7000
8002e5e4:	afa10054 	sw	at,84(sp)
8002e5e8:	24010000 	li	at,0
            (NENV * size_of::<Env>() + PAGE_SIZE - 1) / PAGE_SIZE,
8002e5ec:	1400000b 	bnez	zero,8002e61c <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0xa8>
8002e5f0:	00000000 	nop
8002e5f4:	0800b97f 	j	8002e5fc <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0x88>
8002e5f8:	00000000 	nop
8002e5fc:	8fa20054 	lw	v0,84(sp)
8002e600:	24411000 	addiu	at,v0,4096
8002e604:	afa10044 	sw	at,68(sp)
8002e608:	0022082b 	sltu	at,at,v0
8002e60c:	1420000e 	bnez	at,8002e648 <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0xd4>
8002e610:	00000000 	nop
8002e614:	0800b98b 	j	8002e62c <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0xb8>
8002e618:	00000000 	nop
8002e61c:	3c018105 	lui	at,0x8105
8002e620:	2424d86c 	addiu	a0,at,-10132
8002e624:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002e628:	00000000 	nop
8002e62c:	8fa10044 	lw	at,68(sp)
8002e630:	2422ffff 	addiu	v0,at,-1
8002e634:	afa20040 	sw	v0,64(sp)
8002e638:	10200063 	beqz	at,8002e7c8 <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0x254>
8002e63c:	00000000 	nop
8002e640:	0800b996 	j	8002e658 <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0xe4>
8002e644:	00000000 	nop
8002e648:	3c018105 	lui	at,0x8105
8002e64c:	2424d86c 	addiu	a0,at,-10132
8002e650:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002e654:	00000000 	nop
8002e658:	8fa60050 	lw	a2,80(sp)
8002e65c:	8fa4004c 	lw	a0,76(sp)
8002e660:	8fa10040 	lw	at,64(sp)
8002e664:	00013b02 	srl	a3,at,0xc
    pre_pgtable
8002e668:	3c018105 	lui	at,0x8105
8002e66c:	2422d198 	addiu	v0,at,-11880
8002e670:	03a00825 	move	at,sp
8002e674:	ac220010 	sw	v0,16(at)
8002e678:	ac200014 	sw	zero,20(at)
8002e67c:	3c057f40 	lui	a1,0x7f40
8002e680:	0c00b117 	jal	8002c45c <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE>
8002e684:	00000000 	nop
8002e688:	afa20084 	sw	v0,132(sp)
8002e68c:	afa30088 	sw	v1,136(sp)
        match self {
8002e690:	8fa10084 	lw	at,132(sp)
8002e694:	10200013 	beqz	at,8002e6e4 <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0x170>
8002e698:	00000000 	nop
8002e69c:	0800b9a9 	j	8002e6a4 <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0x130>
8002e6a0:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002e6a4:	8fa20084 	lw	v0,132(sp)
8002e6a8:	8fa10088 	lw	at,136(sp)
8002e6ac:	afa2008c 	sw	v0,140(sp)
8002e6b0:	afa10090 	sw	at,144(sp)
8002e6b4:	3c018105 	lui	at,0x8105
8002e6b8:	2421d88c 	addiu	at,at,-10100
8002e6bc:	03a01025 	move	v0,sp
8002e6c0:	ac410010 	sw	at,16(v0)
8002e6c4:	3c018105 	lui	at,0x8105
8002e6c8:	2424cc7c 	addiu	a0,at,-13188
8002e6cc:	3c018105 	lui	at,0x8105
8002e6d0:	2427cc6c 	addiu	a3,at,-13204
8002e6d4:	2405002b 	li	a1,43
8002e6d8:	27a6008c 	addiu	a2,sp,140
8002e6dc:	0c00f4d5 	jal	8003d354 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002e6e0:	00000000 	nop
            &Permssion::PTE_G,
            false,
        )
        .unwrap();
    let (pages_len, pages_vaddr) = {
        let pages = crate::mm::page::PAGES.lock();
8002e6e4:	3c018105 	lui	at,0x8105
8002e6e8:	2424e6a4 	addiu	a0,at,-6492
8002e6ec:	0c00d17a 	jal	800345e8 <_ZN69_$LT$mos_6502..mm..page..PAGES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h60478cac0dea9383E>
8002e6f0:	00000000 	nop
8002e6f4:	00402025 	move	a0,v0
8002e6f8:	0c00a13c 	jal	800284f0 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hce0bedb7dbc5e59aE>
8002e6fc:	00000000 	nop
8002e700:	afa20064 	sw	v0,100(sp)
8002e704:	27a40064 	addiu	a0,sp,100
8002e708:	afa40028 	sw	a0,40(sp)
        (pages.len(), pages.as_ptr() as usize)
8002e70c:	0c00ad16 	jal	8002b458 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3ddafff8840f2a13E>
8002e710:	00000000 	nop
8002e714:	00402025 	move	a0,v0
8002e718:	0c00a220 	jal	80028880 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h8d08a014a9a0c95bE>
8002e71c:	00000000 	nop
8002e720:	8fa40028 	lw	a0,40(sp)
8002e724:	afa20024 	sw	v0,36(sp)
8002e728:	0c00ad16 	jal	8002b458 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3ddafff8840f2a13E>
8002e72c:	00000000 	nop
8002e730:	00402025 	move	a0,v0
8002e734:	0c00a34b 	jal	80028d2c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h829501f8939a52e5E>
8002e738:	00000000 	nop
8002e73c:	8fa10024 	lw	at,36(sp)
8002e740:	8fa40028 	lw	a0,40(sp)
8002e744:	afa1005c 	sw	at,92(sp)
8002e748:	afa20060 	sw	v0,96(sp)
    };
8002e74c:	0c00869a 	jal	80021a68 <_ZN4core3ptr101drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..mm..page..Page$GT$$GT$$GT$17h7b0d47e3718e675cE>
8002e750:	00000000 	nop
    let (pages_len, pages_vaddr) = {
8002e754:	8fa1005c 	lw	at,92(sp)
8002e758:	afa10034 	sw	at,52(sp)
8002e75c:	afa1006c 	sw	at,108(sp)
8002e760:	8fa10060 	lw	at,96(sp)
8002e764:	afa1002c 	sw	at,44(sp)
8002e768:	afa10070 	sw	at,112(sp)
8002e76c:	27a40058 	addiu	a0,sp,88
    pre_pgtable
8002e770:	0c00ada5 	jal	8002b694 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7ebfdd9bd9706eb1E>
8002e774:	00000000 	nop
8002e778:	8fa4002c 	lw	a0,44(sp)
8002e77c:	8c410000 	lw	at,0(v0)
8002e780:	afa10030 	sw	at,48(sp)
        .map_va_to_pa(
            UPAGES,
            pages_vaddr.into(),
8002e784:	3c018105 	lui	at,0x8105
8002e788:	2425d89c 	addiu	a1,at,-10084
8002e78c:	0c00a186 	jal	80028618 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h1413aa14d136e74dE>
8002e790:	00000000 	nop
8002e794:	8fa10034 	lw	at,52(sp)
8002e798:	afa20038 	sw	v0,56(sp)
            (pages_len * size_of::<Page>() + PAGE_SIZE - 1) / PAGE_SIZE,
8002e79c:	00011880 	sll	v1,at,0x2
8002e7a0:	000110c0 	sll	v0,at,0x3
8002e7a4:	00431021 	addu	v0,v0,v1
8002e7a8:	afa2003c 	sw	v0,60(sp)
8002e7ac:	2402000c 	li	v0,12
8002e7b0:	00220019 	multu	at,v0
8002e7b4:	00000810 	mfhi	at
8002e7b8:	1420000f 	bnez	at,8002e7f8 <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0x284>
8002e7bc:	00000000 	nop
8002e7c0:	0800b9f6 	j	8002e7d8 <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0x264>
8002e7c4:	00000000 	nop
            (NENV * size_of::<Env>() + PAGE_SIZE - 1) / PAGE_SIZE,
8002e7c8:	3c018105 	lui	at,0x8105
8002e7cc:	2424d87c 	addiu	a0,at,-10116
8002e7d0:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002e7d4:	00000000 	nop
            (pages_len * size_of::<Page>() + PAGE_SIZE - 1) / PAGE_SIZE,
8002e7d8:	8fa2003c 	lw	v0,60(sp)
8002e7dc:	24411000 	addiu	at,v0,4096
8002e7e0:	afa10020 	sw	at,32(sp)
8002e7e4:	0022082b 	sltu	at,at,v0
8002e7e8:	1420000e 	bnez	at,8002e824 <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0x2b0>
8002e7ec:	00000000 	nop
8002e7f0:	0800ba02 	j	8002e808 <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0x294>
8002e7f4:	00000000 	nop
8002e7f8:	3c018105 	lui	at,0x8105
8002e7fc:	2424d8ac 	addiu	a0,at,-10068
8002e800:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
8002e804:	00000000 	nop
8002e808:	8fa10020 	lw	at,32(sp)
8002e80c:	2422ffff 	addiu	v0,at,-1
8002e810:	afa2001c 	sw	v0,28(sp)
8002e814:	10200031 	beqz	at,8002e8dc <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0x368>
8002e818:	00000000 	nop
8002e81c:	0800ba0d 	j	8002e834 <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0x2c0>
8002e820:	00000000 	nop
8002e824:	3c018105 	lui	at,0x8105
8002e828:	2424d8ac 	addiu	a0,at,-10068
8002e82c:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002e830:	00000000 	nop
8002e834:	8fa60038 	lw	a2,56(sp)
8002e838:	8fa40030 	lw	a0,48(sp)
8002e83c:	8fa1001c 	lw	at,28(sp)
8002e840:	00013b02 	srl	a3,at,0xc
    pre_pgtable
8002e844:	3c018105 	lui	at,0x8105
8002e848:	2422d198 	addiu	v0,at,-11880
8002e84c:	03a00825 	move	at,sp
8002e850:	ac220010 	sw	v0,16(at)
8002e854:	ac200014 	sw	zero,20(at)
8002e858:	3c057f80 	lui	a1,0x7f80
8002e85c:	0c00b117 	jal	8002c45c <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE>
8002e860:	00000000 	nop
8002e864:	afa20074 	sw	v0,116(sp)
8002e868:	afa30078 	sw	v1,120(sp)
        match self {
8002e86c:	8fa10074 	lw	at,116(sp)
8002e870:	10200013 	beqz	at,8002e8c0 <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0x34c>
8002e874:	00000000 	nop
8002e878:	0800ba20 	j	8002e880 <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E+0x30c>
8002e87c:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002e880:	8fa20074 	lw	v0,116(sp)
8002e884:	8fa10078 	lw	at,120(sp)
8002e888:	afa2007c 	sw	v0,124(sp)
8002e88c:	afa10080 	sw	at,128(sp)
8002e890:	3c018105 	lui	at,0x8105
8002e894:	2421d8cc 	addiu	at,at,-10036
8002e898:	03a01025 	move	v0,sp
8002e89c:	ac410010 	sw	at,16(v0)
8002e8a0:	3c018105 	lui	at,0x8105
8002e8a4:	2424cc7c 	addiu	a0,at,-13188
8002e8a8:	3c018105 	lui	at,0x8105
8002e8ac:	2427cc6c 	addiu	a3,at,-13204
8002e8b0:	2405002b 	li	a1,43
8002e8b4:	27a6007c 	addiu	a2,sp,124
8002e8b8:	0c00f4d5 	jal	8003d354 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002e8bc:	00000000 	nop
8002e8c0:	27a40058 	addiu	a0,sp,88
            &Permssion::PTE_G,
            false,
        )
        .unwrap();
}
8002e8c4:	0c0086e4 	jal	80021b90 <_ZN4core3ptr109drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$17h0c5ae4a09bee8480E>
8002e8c8:	00000000 	nop
8002e8cc:	8fbf0094 	lw	ra,148(sp)
8002e8d0:	27bd0098 	addiu	sp,sp,152
8002e8d4:	03e00008 	jr	ra
8002e8d8:	00000000 	nop
            (pages_len * size_of::<Page>() + PAGE_SIZE - 1) / PAGE_SIZE,
8002e8dc:	3c018105 	lui	at,0x8105
8002e8e0:	2424d8bc 	addiu	a0,at,-10052
8002e8e4:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8002e8e8:	00000000 	nop

8002e8ec <_ZN8mos_65024proc8env_init17hc9ab69d3ac65283fE>:

pub fn env_init() {
8002e8ec:	27bdfdf8 	addiu	sp,sp,-520
8002e8f0:	afbf0204 	sw	ra,516(sp)
    #[cfg(feature = "fit-cmos")]
    {
        assert!(LOG2NENV == 10);
8002e8f4:	0800ba3f 	j	8002e8fc <_ZN8mos_65024proc8env_init17hc9ab69d3ac65283fE+0x10>
8002e8f8:	00000000 	nop
8002e8fc:	24010000 	li	at,0
        assert!(size_of::<Env>() == 0xdc);
8002e900:	14000008 	bnez	zero,8002e924 <_ZN8mos_65024proc8env_init17hc9ab69d3ac65283fE+0x38>
8002e904:	00000000 	nop
8002e908:	0800ba44 	j	8002e910 <_ZN8mos_65024proc8env_init17hc9ab69d3ac65283fE+0x24>
8002e90c:	00000000 	nop
8002e910:	24010001 	li	at,1
        assert!(size_of::<Trapframe>() == 0x98);
8002e914:	1420000a 	bnez	at,8002e940 <_ZN8mos_65024proc8env_init17hc9ab69d3ac65283fE+0x54>
8002e918:	00000000 	nop
8002e91c:	0800ba6b 	j	8002e9ac <_ZN8mos_65024proc8env_init17hc9ab69d3ac65283fE+0xc0>
8002e920:	00000000 	nop
        assert!(size_of::<Env>() == 0xdc);
8002e924:	3c018105 	lui	at,0x8105
8002e928:	2424d91c 	addiu	a0,at,-9956
8002e92c:	3c018105 	lui	at,0x8105
8002e930:	2426d948 	addiu	a2,at,-9912
8002e934:	2405002a 	li	a1,42
8002e938:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
8002e93c:	00000000 	nop
    }
    let mut envs = ENV_LIST.lock();
8002e940:	3c018105 	lui	at,0x8105
8002e944:	2424e74c 	addiu	a0,at,-6324
8002e948:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
8002e94c:	00000000 	nop
8002e950:	00402025 	move	a0,v0
8002e954:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
8002e958:	00000000 	nop
8002e95c:	afa20028 	sw	v0,40(sp)
    let mut env_free_list = ENV_FREE_LIST.lock();
8002e960:	3c018105 	lui	at,0x8105
8002e964:	2424e74c 	addiu	a0,at,-6324
8002e968:	0c00d3b9 	jal	80034ee4 <_ZN73_$LT$mos_6502..proc..ENV_FREE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h815af74f94b7a4d1E>
8002e96c:	00000000 	nop
8002e970:	00402025 	move	a0,v0
8002e974:	0c00a117 	jal	8002845c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8c3735c4a0bdf507E>
8002e978:	00000000 	nop
8002e97c:	afa2002c 	sw	v0,44(sp)
    for i in 0..NENV {
8002e980:	afa00030 	sw	zero,48(sp)
8002e984:	24010400 	li	at,1024
8002e988:	afa10034 	sw	at,52(sp)
8002e98c:	8fa40030 	lw	a0,48(sp)
8002e990:	8fa50034 	lw	a1,52(sp)
8002e994:	0c0123e2 	jal	80048f88 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
8002e998:	00000000 	nop
8002e99c:	afa20038 	sw	v0,56(sp)
8002e9a0:	afa3003c 	sw	v1,60(sp)
8002e9a4:	0800ba72 	j	8002e9c8 <_ZN8mos_65024proc8env_init17hc9ab69d3ac65283fE+0xdc>
8002e9a8:	00000000 	nop
        assert!(size_of::<Trapframe>() == 0x98);
8002e9ac:	3c018105 	lui	at,0x8105
8002e9b0:	2424d8dc 	addiu	a0,at,-10020
8002e9b4:	3c018105 	lui	at,0x8105
8002e9b8:	2426d90c 	addiu	a2,at,-9972
8002e9bc:	24050030 	li	a1,48
8002e9c0:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
8002e9c4:	00000000 	nop
8002e9c8:	27a40038 	addiu	a0,sp,56
    for i in 0..NENV {
8002e9cc:	0c0123d9 	jal	80048f64 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
8002e9d0:	00000000 	nop
8002e9d4:	afa20040 	sw	v0,64(sp)
8002e9d8:	afa30044 	sw	v1,68(sp)
8002e9dc:	8fa10040 	lw	at,64(sp)
8002e9e0:	14200014 	bnez	at,8002ea34 <_ZN8mos_65024proc8env_init17hc9ab69d3ac65283fE+0x148>
8002e9e4:	00000000 	nop
8002e9e8:	0800ba7c 	j	8002e9f0 <_ZN8mos_65024proc8env_init17hc9ab69d3ac65283fE+0x104>
8002e9ec:	00000000 	nop
8002e9f0:	27a40028 	addiu	a0,sp,40
8002e9f4:	afa40024 	sw	a0,36(sp)
        let env = Env::new(i);
        env_free_list.push(env.env_link.clone());
        envs.push(env);
    }
    map_pre_pgdir(&envs);
8002e9f8:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
8002e9fc:	00000000 	nop
8002ea00:	00402025 	move	a0,v0
8002ea04:	0c00b95d 	jal	8002e574 <_ZN8mos_65024proc13map_pre_pgdir17h0b12d7b5d964a235E>
8002ea08:	00000000 	nop
8002ea0c:	27a4002c 	addiu	a0,sp,44
}
8002ea10:	0c008c4e 	jal	80023138 <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h31092ada86abafaeE>
8002ea14:	00000000 	nop
8002ea18:	8fa40024 	lw	a0,36(sp)
8002ea1c:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
8002ea20:	00000000 	nop
8002ea24:	8fbf0204 	lw	ra,516(sp)
8002ea28:	27bd0208 	addiu	sp,sp,520
8002ea2c:	03e00008 	jr	ra
8002ea30:	00000000 	nop
    for i in 0..NENV {
8002ea34:	8fa50044 	lw	a1,68(sp)
8002ea38:	afa50200 	sw	a1,512(sp)
8002ea3c:	27a40048 	addiu	a0,sp,72
8002ea40:	afa40018 	sw	a0,24(sp)
        let env = Env::new(i);
8002ea44:	0c00b6dc 	jal	8002db70 <_ZN8mos_65024proc3Env3new17he1c85554c5615b74E>
8002ea48:	00000000 	nop
8002ea4c:	27a4002c 	addiu	a0,sp,44
        env_free_list.push(env.env_link.clone());
8002ea50:	0c00ad89 	jal	8002b624 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h05e23529e4b1162bE>
8002ea54:	00000000 	nop
8002ea58:	8fa10018 	lw	at,24(sp)
8002ea5c:	afa20014 	sw	v0,20(sp)
8002ea60:	24240098 	addiu	a0,at,152
8002ea64:	0c00a9d8 	jal	8002a760 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h9bd1f6a6a34f5585E>
8002ea68:	00000000 	nop
8002ea6c:	8fa40014 	lw	a0,20(sp)
8002ea70:	00402825 	move	a1,v0
8002ea74:	0c00ce36 	jal	800338d8 <_ZN8mos_65024util16DoubleLinkedList4push17h4baa579cb5c043f4E>
8002ea78:	00000000 	nop
8002ea7c:	27a40028 	addiu	a0,sp,40
        envs.push(env);
8002ea80:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
8002ea84:	00000000 	nop
8002ea88:	8fa50018 	lw	a1,24(sp)
8002ea8c:	afa2001c 	sw	v0,28(sp)
8002ea90:	27a40124 	addiu	a0,sp,292
8002ea94:	afa40020 	sw	a0,32(sp)
8002ea98:	240600dc 	li	a2,220
8002ea9c:	0c00d3fd 	jal	80034ff4 <memcpy>
8002eaa0:	00000000 	nop
8002eaa4:	8fa4001c 	lw	a0,28(sp)
8002eaa8:	8fa50020 	lw	a1,32(sp)
8002eaac:	0c00a26f 	jal	800289bc <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h610fc5f9c6011211E>
8002eab0:	00000000 	nop
8002eab4:	0800ba72 	j	8002e9c8 <_ZN8mos_65024proc8env_init17hc9ab69d3ac65283fE+0xdc>
8002eab8:	00000000 	nop

8002eabc <_ZN8mos_65024proc7mkenvid17he74f31e9a592da87E>:
        }
    }
    return envid & (NENV - 1);
}

fn mkenvid(idx: usize) -> usize {
8002eabc:	27bdffc0 	addiu	sp,sp,-64
8002eac0:	afbf003c 	sw	ra,60(sp)
8002eac4:	afa4001c 	sw	a0,28(sp)
8002eac8:	afa40034 	sw	a0,52(sp)
    let mut locked_next_env_id = NEXT_ALLOC_ENV_ID.lock();
8002eacc:	3c018105 	lui	at,0x8105
8002ead0:	2424e74c 	addiu	a0,at,-6324
8002ead4:	0c00d3dd 	jal	80034f74 <_ZN77_$LT$mos_6502..proc..NEXT_ALLOC_ENV_ID$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d74252fce6a3866E>
8002ead8:	00000000 	nop
8002eadc:	00402025 	move	a0,v0
8002eae0:	0c00d97b 	jal	800365ec <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hafd71da544aa2524E>
8002eae4:	00000000 	nop
8002eae8:	afa20030 	sw	v0,48(sp)
8002eaec:	27a40030 	addiu	a0,sp,48
8002eaf0:	afa40020 	sw	a0,32(sp)
    let ret = *locked_next_env_id;
8002eaf4:	0c00d9af 	jal	800366bc <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd6ca4e449f1bf8a4E>
8002eaf8:	00000000 	nop
8002eafc:	8fa40020 	lw	a0,32(sp)
8002eb00:	8c410000 	lw	at,0(v0)
8002eb04:	afa10024 	sw	at,36(sp)
8002eb08:	afa10038 	sw	at,56(sp)
    *locked_next_env_id += 1;
8002eb0c:	0c00d9b6 	jal	800366d8 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h8bb5d72a010452a3E>
8002eb10:	00000000 	nop
8002eb14:	00400825 	move	at,v0
8002eb18:	afa10028 	sw	at,40(sp)
8002eb1c:	8c410000 	lw	at,0(v0)
8002eb20:	24210001 	addiu	at,at,1
8002eb24:	afa1002c 	sw	at,44(sp)
8002eb28:	1020000d 	beqz	at,8002eb60 <_ZN8mos_65024proc7mkenvid17he74f31e9a592da87E+0xa4>
8002eb2c:	00000000 	nop
8002eb30:	0800bace 	j	8002eb38 <_ZN8mos_65024proc7mkenvid17he74f31e9a592da87E+0x7c>
8002eb34:	00000000 	nop
8002eb38:	8fa1002c 	lw	at,44(sp)
8002eb3c:	8fa20028 	lw	v0,40(sp)
8002eb40:	ac410000 	sw	at,0(v0)
8002eb44:	2401000b 	li	at,11
8002eb48:	afa10018 	sw	at,24(sp)
8002eb4c:	24010000 	li	at,0
    return ret << (1 + LOG2NENV) | idx;
8002eb50:	1400000d 	bnez	zero,8002eb88 <_ZN8mos_65024proc7mkenvid17he74f31e9a592da87E+0xcc>
8002eb54:	00000000 	nop
8002eb58:	0800badc 	j	8002eb70 <_ZN8mos_65024proc7mkenvid17he74f31e9a592da87E+0xb4>
8002eb5c:	00000000 	nop
    *locked_next_env_id += 1;
8002eb60:	3c018105 	lui	at,0x8105
8002eb64:	2424d990 	addiu	a0,at,-9840
8002eb68:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002eb6c:	00000000 	nop
    return ret << (1 + LOG2NENV) | idx;
8002eb70:	8fa10018 	lw	at,24(sp)
8002eb74:	2c210020 	sltiu	at,at,32
8002eb78:	14200007 	bnez	at,8002eb98 <_ZN8mos_65024proc7mkenvid17he74f31e9a592da87E+0xdc>
8002eb7c:	00000000 	nop
8002eb80:	0800baf4 	j	8002ebd0 <_ZN8mos_65024proc7mkenvid17he74f31e9a592da87E+0x114>
8002eb84:	00000000 	nop
8002eb88:	3c018105 	lui	at,0x8105
8002eb8c:	2424d9a0 	addiu	a0,at,-9824
8002eb90:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8002eb94:	00000000 	nop
8002eb98:	8fa2001c 	lw	v0,28(sp)
8002eb9c:	8fa10024 	lw	at,36(sp)
8002eba0:	8fa30018 	lw	v1,24(sp)
8002eba4:	00610804 	sllv	at,at,v1
8002eba8:	00220825 	or	at,at,v0
8002ebac:	afa10014 	sw	at,20(sp)
8002ebb0:	27a40030 	addiu	a0,sp,48
}
8002ebb4:	0c00d5dc 	jal	80035770 <_ZN4core3ptr59drop_in_place$LT$sync..spin..SpinlockGuard$LT$usize$GT$$GT$17hdd6ed9792ea7c554E>
8002ebb8:	00000000 	nop
8002ebbc:	8fa20014 	lw	v0,20(sp)
8002ebc0:	8fbf003c 	lw	ra,60(sp)
8002ebc4:	27bd0040 	addiu	sp,sp,64
8002ebc8:	03e00008 	jr	ra
8002ebcc:	00000000 	nop
    return ret << (1 + LOG2NENV) | idx;
8002ebd0:	3c018105 	lui	at,0x8105
8002ebd4:	2424d9b0 	addiu	a0,at,-9808
8002ebd8:	0c011b62 	jal	80046d88 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h6a79b323d0787a78E>
8002ebdc:	00000000 	nop

8002ebe0 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E>:

fn asid_alloc() -> Result<usize, &'static str> {
8002ebe0:	27bdff88 	addiu	sp,sp,-120
8002ebe4:	afbf0074 	sw	ra,116(sp)
8002ebe8:	afa40044 	sw	a0,68(sp)
8002ebec:	afa40048 	sw	a0,72(sp)
    let mut locked_asid_bitmap = ASID_BITMAP.lock();
8002ebf0:	3c018105 	lui	at,0x8105
8002ebf4:	2424e74c 	addiu	a0,at,-6324
8002ebf8:	0c00d3d1 	jal	80034f44 <_ZN71_$LT$mos_6502..proc..ASID_BITMAP$u20$as$u20$core..ops..deref..Deref$GT$5deref17h6499748a96406b76E>
8002ebfc:	00000000 	nop
8002ec00:	00402025 	move	a0,v0
8002ec04:	0c00a0f2 	jal	800283c8 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8991a443a24f4781E>
8002ec08:	00000000 	nop
8002ec0c:	afa2004c 	sw	v0,76(sp)
    for i in 0..NASID {
8002ec10:	afa00050 	sw	zero,80(sp)
8002ec14:	24010100 	li	at,256
8002ec18:	afa10054 	sw	at,84(sp)
8002ec1c:	8fa40050 	lw	a0,80(sp)
8002ec20:	8fa50054 	lw	a1,84(sp)
8002ec24:	0c0123e2 	jal	80048f88 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
8002ec28:	00000000 	nop
8002ec2c:	afa20058 	sw	v0,88(sp)
8002ec30:	afa3005c 	sw	v1,92(sp)
8002ec34:	0800bb0f 	j	8002ec3c <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x5c>
8002ec38:	00000000 	nop
8002ec3c:	27a40058 	addiu	a0,sp,88
8002ec40:	0c0123d9 	jal	80048f64 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
8002ec44:	00000000 	nop
8002ec48:	afa20060 	sw	v0,96(sp)
8002ec4c:	afa30064 	sw	v1,100(sp)
8002ec50:	8fa10060 	lw	at,96(sp)
8002ec54:	1420000b 	bnez	at,8002ec84 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0xa4>
8002ec58:	00000000 	nop
8002ec5c:	0800bb19 	j	8002ec64 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x84>
8002ec60:	00000000 	nop
        if locked_asid_bitmap[index] & (1 << inner) == 0 {
            locked_asid_bitmap[index] |= 1 << inner;
            return Ok(i);
        }
    }
    return Err("No more free asid.");
8002ec64:	8fa20044 	lw	v0,68(sp)
8002ec68:	3c018105 	lui	at,0x8105
8002ec6c:	2421d9c0 	addiu	at,at,-9792
8002ec70:	ac410000 	sw	at,0(v0)
8002ec74:	24010012 	li	at,18
8002ec78:	ac410004 	sw	at,4(v0)
8002ec7c:	0800bb34 	j	8002ecd0 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0xf0>
8002ec80:	00000000 	nop
    for i in 0..NASID {
8002ec84:	8fa10064 	lw	at,100(sp)
8002ec88:	afa10034 	sw	at,52(sp)
8002ec8c:	afa10068 	sw	at,104(sp)
        let index = i >> 5;
8002ec90:	00011142 	srl	v0,at,0x5
8002ec94:	afa2003c 	sw	v0,60(sp)
8002ec98:	afa2006c 	sw	v0,108(sp)
        let inner = i & 31;
8002ec9c:	3021001f 	andi	at,at,0x1f
8002eca0:	afa10038 	sw	at,56(sp)
8002eca4:	afa10070 	sw	at,112(sp)
8002eca8:	27a4004c 	addiu	a0,sp,76
        if locked_asid_bitmap[index] & (1 << inner) == 0 {
8002ecac:	0c00ad0f 	jal	8002b43c <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3a0f34af52e01fabE>
8002ecb0:	00000000 	nop
8002ecb4:	8fa1003c 	lw	at,60(sp)
8002ecb8:	afa20040 	sw	v0,64(sp)
8002ecbc:	2c210008 	sltiu	at,at,8
8002ecc0:	1420000b 	bnez	at,8002ecf0 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x110>
8002ecc4:	00000000 	nop
8002ecc8:	0800bb46 	j	8002ed18 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x138>
8002eccc:	00000000 	nop
8002ecd0:	27a4004c 	addiu	a0,sp,76
}
8002ecd4:	0c0086b6 	jal	80021ad8 <_ZN4core3ptr103drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..boxed..Box$LT$$u5b$u32$u3b$$u20$8$u5d$$GT$$GT$$GT$17hfa01eb322879470aE>
8002ecd8:	00000000 	nop
8002ecdc:	8fa20048 	lw	v0,72(sp)
8002ece0:	8fbf0074 	lw	ra,116(sp)
8002ece4:	27bd0078 	addiu	sp,sp,120
8002ece8:	03e00008 	jr	ra
8002ecec:	00000000 	nop
        if locked_asid_bitmap[index] & (1 << inner) == 0 {
8002ecf0:	8fa10040 	lw	at,64(sp)
8002ecf4:	8c210000 	lw	at,0(at)
8002ecf8:	afa1002c 	sw	at,44(sp)
8002ecfc:	00201025 	move	v0,at
8002ed00:	afa20030 	sw	v0,48(sp)
8002ed04:	30210003 	andi	at,at,0x3
8002ed08:	10200009 	beqz	at,8002ed30 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x150>
8002ed0c:	00000000 	nop
8002ed10:	0800bb58 	j	8002ed60 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x180>
8002ed14:	00000000 	nop
8002ed18:	8fa4003c 	lw	a0,60(sp)
8002ed1c:	3c018105 	lui	at,0x8105
8002ed20:	2426d9d4 	addiu	a2,at,-9772
8002ed24:	24050008 	li	a1,8
8002ed28:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002ed2c:	00000000 	nop
8002ed30:	8fa10038 	lw	at,56(sp)
8002ed34:	8fa20030 	lw	v0,48(sp)
8002ed38:	8fa3003c 	lw	v1,60(sp)
8002ed3c:	00031880 	sll	v1,v1,0x2
8002ed40:	00431021 	addu	v0,v0,v1
8002ed44:	8c420000 	lw	v0,0(v0)
8002ed48:	afa20028 	sw	v0,40(sp)
8002ed4c:	2c210020 	sltiu	at,at,32
8002ed50:	14200009 	bnez	at,8002ed78 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x198>
8002ed54:	00000000 	nop
8002ed58:	0800bb66 	j	8002ed98 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x1b8>
8002ed5c:	00000000 	nop
8002ed60:	8fa5002c 	lw	a1,44(sp)
8002ed64:	3c018105 	lui	at,0x8105
8002ed68:	2426d9d4 	addiu	a2,at,-9772
8002ed6c:	24040004 	li	a0,4
8002ed70:	0c00f32e 	jal	8003ccb8 <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
8002ed74:	00000000 	nop
8002ed78:	8fa10028 	lw	at,40(sp)
8002ed7c:	8fa20038 	lw	v0,56(sp)
8002ed80:	00410806 	srlv	at,at,v0
8002ed84:	30210001 	andi	at,at,0x1
8002ed88:	10200007 	beqz	at,8002eda8 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x1c8>
8002ed8c:	00000000 	nop
8002ed90:	0800bb0f 	j	8002ec3c <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x5c>
8002ed94:	00000000 	nop
8002ed98:	3c018105 	lui	at,0x8105
8002ed9c:	2424d9e4 	addiu	a0,at,-9756
8002eda0:	0c011b62 	jal	80046d88 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h6a79b323d0787a78E>
8002eda4:	00000000 	nop
            locked_asid_bitmap[index] |= 1 << inner;
8002eda8:	8fa10038 	lw	at,56(sp)
8002edac:	2c210020 	sltiu	at,at,32
8002edb0:	10200011 	beqz	at,8002edf8 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x218>
8002edb4:	00000000 	nop
8002edb8:	0800bb70 	j	8002edc0 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x1e0>
8002edbc:	00000000 	nop
8002edc0:	8fa20038 	lw	v0,56(sp)
8002edc4:	24010001 	li	at,1
8002edc8:	00410804 	sllv	at,at,v0
8002edcc:	afa10020 	sw	at,32(sp)
8002edd0:	27a4004c 	addiu	a0,sp,76
8002edd4:	0c00ad9e 	jal	8002b678 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6712fe53c4d3d854E>
8002edd8:	00000000 	nop
8002eddc:	8fa1003c 	lw	at,60(sp)
8002ede0:	afa20024 	sw	v0,36(sp)
8002ede4:	2c210008 	sltiu	at,at,8
8002ede8:	14200007 	bnez	at,8002ee08 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x228>
8002edec:	00000000 	nop
8002edf0:	0800bb8e 	j	8002ee38 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x258>
8002edf4:	00000000 	nop
8002edf8:	3c018105 	lui	at,0x8105
8002edfc:	2424d9f4 	addiu	a0,at,-9740
8002ee00:	0c011b62 	jal	80046d88 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h6a79b323d0787a78E>
8002ee04:	00000000 	nop
8002ee08:	8fa10024 	lw	at,36(sp)
8002ee0c:	8c210000 	lw	at,0(at)
8002ee10:	afa10014 	sw	at,20(sp)
8002ee14:	00201025 	move	v0,at
8002ee18:	afa20018 	sw	v0,24(sp)
8002ee1c:	00201025 	move	v0,at
8002ee20:	afa2001c 	sw	v0,28(sp)
8002ee24:	30210003 	andi	at,at,0x3
8002ee28:	10200009 	beqz	at,8002ee50 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x270>
8002ee2c:	00000000 	nop
8002ee30:	0800bb9c 	j	8002ee70 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x290>
8002ee34:	00000000 	nop
8002ee38:	8fa4003c 	lw	a0,60(sp)
8002ee3c:	3c018105 	lui	at,0x8105
8002ee40:	2426da04 	addiu	a2,at,-9724
8002ee44:	24050008 	li	a1,8
8002ee48:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002ee4c:	00000000 	nop
8002ee50:	8fa10018 	lw	at,24(sp)
8002ee54:	00201025 	move	v0,at
8002ee58:	afa20010 	sw	v0,16(sp)
8002ee5c:	30210003 	andi	at,at,0x3
8002ee60:	10200009 	beqz	at,8002ee88 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x2a8>
8002ee64:	00000000 	nop
8002ee68:	0800bbb2 	j	8002eec8 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0x2e8>
8002ee6c:	00000000 	nop
8002ee70:	8fa50014 	lw	a1,20(sp)
8002ee74:	3c018105 	lui	at,0x8105
8002ee78:	2426da04 	addiu	a2,at,-9724
8002ee7c:	24040004 	li	a0,4
8002ee80:	0c00f32e 	jal	8003ccb8 <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
8002ee84:	00000000 	nop
8002ee88:	8fa10044 	lw	at,68(sp)
8002ee8c:	8fa20034 	lw	v0,52(sp)
8002ee90:	8fa50020 	lw	a1,32(sp)
8002ee94:	8fa3001c 	lw	v1,28(sp)
8002ee98:	8fa40018 	lw	a0,24(sp)
8002ee9c:	8fa6003c 	lw	a2,60(sp)
8002eea0:	00063080 	sll	a2,a2,0x2
8002eea4:	00862021 	addu	a0,a0,a2
8002eea8:	00661821 	addu	v1,v1,a2
8002eeac:	8c630000 	lw	v1,0(v1)
8002eeb0:	00651825 	or	v1,v1,a1
8002eeb4:	ac830000 	sw	v1,0(a0)
            return Ok(i);
8002eeb8:	ac220004 	sw	v0,4(at)
8002eebc:	ac200000 	sw	zero,0(at)
8002eec0:	0800bb34 	j	8002ecd0 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E+0xf0>
8002eec4:	00000000 	nop
            locked_asid_bitmap[index] |= 1 << inner;
8002eec8:	8fa50010 	lw	a1,16(sp)
8002eecc:	3c018105 	lui	at,0x8105
8002eed0:	2426da04 	addiu	a2,at,-9724
8002eed4:	24040004 	li	a0,4
8002eed8:	0c00f32e 	jal	8003ccb8 <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
8002eedc:	00000000 	nop

8002eee0 <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE>:

pub fn env_alloc(parent_id: Option<usize>) -> Result<EnvIndex, &'static str> {
8002eee0:	27bdff48 	addiu	sp,sp,-184
8002eee4:	afbf00b4 	sw	ra,180(sp)
8002eee8:	afa60030 	sw	a2,48(sp)
8002eeec:	afa50034 	sw	a1,52(sp)
8002eef0:	afa40038 	sw	a0,56(sp)
8002eef4:	afa4003c 	sw	a0,60(sp)
8002eef8:	afa50094 	sw	a1,148(sp)
8002eefc:	afa60098 	sw	a2,152(sp)
    let node = ENV_FREE_LIST.lock().pop().expect("No more free env.");
8002ef00:	3c018105 	lui	at,0x8105
8002ef04:	2424e74c 	addiu	a0,at,-6324
8002ef08:	0c00d3b9 	jal	80034ee4 <_ZN73_$LT$mos_6502..proc..ENV_FREE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h815af74f94b7a4d1E>
8002ef0c:	00000000 	nop
8002ef10:	00402025 	move	a0,v0
8002ef14:	0c00a117 	jal	8002845c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8c3735c4a0bdf507E>
8002ef18:	00000000 	nop
8002ef1c:	afa20058 	sw	v0,88(sp)
8002ef20:	27a40058 	addiu	a0,sp,88
8002ef24:	afa40040 	sw	a0,64(sp)
8002ef28:	0c00ad89 	jal	8002b624 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h05e23529e4b1162bE>
8002ef2c:	00000000 	nop
8002ef30:	00402025 	move	a0,v0
8002ef34:	0c00d022 	jal	80034088 <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E>
8002ef38:	00000000 	nop
8002ef3c:	00402025 	move	a0,v0
8002ef40:	3c018105 	lui	at,0x8105
8002ef44:	2425da14 	addiu	a1,at,-9708
8002ef48:	3c018105 	lui	at,0x8105
8002ef4c:	2427da28 	addiu	a3,at,-9688
8002ef50:	24060011 	li	a2,17
8002ef54:	0c009782 	jal	80025e08 <_ZN4core6option15Option$LT$T$GT$6expect17h8661283b38fde621E>
8002ef58:	00000000 	nop
8002ef5c:	8fa40040 	lw	a0,64(sp)
8002ef60:	afa20054 	sw	v0,84(sp)
8002ef64:	0c008c4e 	jal	80023138 <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h31092ada86abafaeE>
8002ef68:	00000000 	nop
8002ef6c:	27a40054 	addiu	a0,sp,84
    let idx = node.borrow().idx;
8002ef70:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
8002ef74:	00000000 	nop
8002ef78:	00402025 	move	a0,v0
8002ef7c:	3c018105 	lui	at,0x8105
8002ef80:	2425da38 	addiu	a1,at,-9672
8002ef84:	0c008ee2 	jal	80023b88 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h0651cb519b6f324eE>
8002ef88:	00000000 	nop
8002ef8c:	afa2005c 	sw	v0,92(sp)
8002ef90:	afa30060 	sw	v1,96(sp)
8002ef94:	27a4005c 	addiu	a0,sp,92
8002ef98:	afa40044 	sw	a0,68(sp)
8002ef9c:	0c00a9f8 	jal	8002a7e0 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hefea2bce46aaade6E>
8002efa0:	00000000 	nop
8002efa4:	8fa40044 	lw	a0,68(sp)
8002efa8:	8c410008 	lw	at,8(v0)
8002efac:	afa10048 	sw	at,72(sp)
8002efb0:	afa1009c 	sw	at,156(sp)
8002efb4:	0c008b58 	jal	80022d60 <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d64f236e3cdb092E>
8002efb8:	00000000 	nop
    let env = &mut ENV_LIST.lock()[idx];
8002efbc:	3c018105 	lui	at,0x8105
8002efc0:	2424e74c 	addiu	a0,at,-6324
8002efc4:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
8002efc8:	00000000 	nop
8002efcc:	00402025 	move	a0,v0
8002efd0:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
8002efd4:	00000000 	nop
8002efd8:	afa20064 	sw	v0,100(sp)
8002efdc:	27a40064 	addiu	a0,sp,100
8002efe0:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
8002efe4:	00000000 	nop
8002efe8:	8fa50048 	lw	a1,72(sp)
8002efec:	00402025 	move	a0,v0
8002eff0:	3c018105 	lui	at,0x8105
8002eff4:	2426da48 	addiu	a2,at,-9656
8002eff8:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
8002effc:	00000000 	nop
8002f000:	8fa40048 	lw	a0,72(sp)
8002f004:	afa20050 	sw	v0,80(sp)
8002f008:	00400825 	move	at,v0
8002f00c:	afa1004c 	sw	at,76(sp)
8002f010:	afa200a0 	sw	v0,160(sp)
8002f014:	24010001 	li	at,1
    env.env_status = EnvStatus::EnvRunnable;
8002f018:	afa10068 	sw	at,104(sp)
8002f01c:	8fa10068 	lw	at,104(sp)
8002f020:	ac4100ac 	sw	at,172(v0)
    env.env_id = mkenvid(idx);
8002f024:	0c00baaf 	jal	8002eabc <_ZN8mos_65024proc7mkenvid17he74f31e9a592da87E>
8002f028:	00000000 	nop
8002f02c:	8fa10050 	lw	at,80(sp)
8002f030:	ac2200a0 	sw	v0,160(at)
8002f034:	27a4006c 	addiu	a0,sp,108
    env.env_asid = asid_alloc().unwrap();
8002f038:	0c00baf8 	jal	8002ebe0 <_ZN8mos_65024proc10asid_alloc17h8f9cacc29a604278E>
8002f03c:	00000000 	nop
        match self {
8002f040:	8fa1006c 	lw	at,108(sp)
8002f044:	10200013 	beqz	at,8002f094 <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE+0x1b4>
8002f048:	00000000 	nop
8002f04c:	0800bc15 	j	8002f054 <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE+0x174>
8002f050:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002f054:	8fa2006c 	lw	v0,108(sp)
8002f058:	8fa10070 	lw	at,112(sp)
8002f05c:	afa200a8 	sw	v0,168(sp)
8002f060:	afa100ac 	sw	at,172(sp)
8002f064:	3c018105 	lui	at,0x8105
8002f068:	2421da58 	addiu	at,at,-9640
8002f06c:	03a01025 	move	v0,sp
8002f070:	ac410010 	sw	at,16(v0)
8002f074:	3c018105 	lui	at,0x8105
8002f078:	2424cc7c 	addiu	a0,at,-13188
8002f07c:	3c018105 	lui	at,0x8105
8002f080:	2427cc6c 	addiu	a3,at,-13204
8002f084:	2405002b 	li	a1,43
8002f088:	27a600a8 	addiu	a2,sp,168
8002f08c:	0c00f4d5 	jal	8003d354 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002f090:	00000000 	nop
            Ok(t) => t,
8002f094:	8fa2004c 	lw	v0,76(sp)
8002f098:	8fa50030 	lw	a1,48(sp)
8002f09c:	8fa40034 	lw	a0,52(sp)
8002f0a0:	8fa10070 	lw	at,112(sp)
8002f0a4:	afa100b0 	sw	at,176(sp)
8002f0a8:	ac4100a4 	sw	at,164(v0)
8002f0ac:	24060000 	li	a2,0
    env.env_parent_id = parent_id.unwrap_or(0);
8002f0b0:	0c00f0aa 	jal	8003c2a8 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE>
8002f0b4:	00000000 	nop
8002f0b8:	8fa1004c 	lw	at,76(sp)
8002f0bc:	ac2200a8 	sw	v0,168(at)
    env.env_runs = 0;
8002f0c0:	ac2000d8 	sw	zero,216(at)
    let pre_table = PRE_PGTABLE.lock();
8002f0c4:	3c018105 	lui	at,0x8105
8002f0c8:	2424e74c 	addiu	a0,at,-6324
8002f0cc:	0c00d3e9 	jal	80034fa4 <_ZN71_$LT$mos_6502..proc..PRE_PGTABLE$u20$as$u20$core..ops..deref..Deref$GT$5deref17h05b2e27cdcbf19dbE>
8002f0d0:	00000000 	nop
8002f0d4:	00402025 	move	a0,v0
8002f0d8:	0c00a0a9 	jal	800282a4 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h66b6d58b2df95132E>
8002f0dc:	00000000 	nop
8002f0e0:	afa20074 	sw	v0,116(sp)
8002f0e4:	240101fd 	li	at,509
    for i in (UTOP.raw >> 22)..(UVPT.raw >> 22) {
8002f0e8:	afa10078 	sw	at,120(sp)
8002f0ec:	240101ff 	li	at,511
8002f0f0:	afa1007c 	sw	at,124(sp)
8002f0f4:	8fa40078 	lw	a0,120(sp)
8002f0f8:	8fa5007c 	lw	a1,124(sp)
8002f0fc:	0c0123e2 	jal	80048f88 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
8002f100:	00000000 	nop
8002f104:	afa20080 	sw	v0,128(sp)
8002f108:	afa30084 	sw	v1,132(sp)
8002f10c:	0800bc45 	j	8002f114 <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE+0x234>
8002f110:	00000000 	nop
8002f114:	27a40080 	addiu	a0,sp,128
8002f118:	0c0123d9 	jal	80048f64 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
8002f11c:	00000000 	nop
8002f120:	afa20088 	sw	v0,136(sp)
8002f124:	afa3008c 	sw	v1,140(sp)
8002f128:	8fa10088 	lw	at,136(sp)
8002f12c:	14200015 	bnez	at,8002f184 <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE+0x2a4>
8002f130:	00000000 	nop
8002f134:	0800bc4f 	j	8002f13c <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE+0x25c>
8002f138:	00000000 	nop
        env.env_pgdir.entries[i] = pre_table.entries[i];
    }
    return Ok(idx);
8002f13c:	8fa10038 	lw	at,56(sp)
8002f140:	8fa20048 	lw	v0,72(sp)
8002f144:	ac220004 	sw	v0,4(at)
8002f148:	ac200000 	sw	zero,0(at)
8002f14c:	27a40074 	addiu	a0,sp,116
}
8002f150:	0c0086e4 	jal	80021b90 <_ZN4core3ptr109drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..boxed..Box$LT$mos_6502..mm..pgtable..Pgtable$GT$$GT$$GT$17h0c5ae4a09bee8480E>
8002f154:	00000000 	nop
8002f158:	27a40064 	addiu	a0,sp,100
8002f15c:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
8002f160:	00000000 	nop
8002f164:	27a40054 	addiu	a0,sp,84
8002f168:	0c008d66 	jal	80023598 <_ZN4core3ptr96drop_in_place$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h43239437a0ec2517E>
8002f16c:	00000000 	nop
8002f170:	8fa2003c 	lw	v0,60(sp)
8002f174:	8fbf00b4 	lw	ra,180(sp)
8002f178:	27bd00b8 	addiu	sp,sp,184
8002f17c:	03e00008 	jr	ra
8002f180:	00000000 	nop
    for i in (UTOP.raw >> 22)..(UVPT.raw >> 22) {
8002f184:	8fa1008c 	lw	at,140(sp)
8002f188:	afa10028 	sw	at,40(sp)
8002f18c:	afa100a4 	sw	at,164(sp)
8002f190:	27a40074 	addiu	a0,sp,116
        env.env_pgdir.entries[i] = pre_table.entries[i];
8002f194:	0c00ad1d 	jal	8002b474 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h4afbedf5a8873a0aE>
8002f198:	00000000 	nop
8002f19c:	8fa10028 	lw	at,40(sp)
8002f1a0:	afa2002c 	sw	v0,44(sp)
8002f1a4:	2c210400 	sltiu	at,at,1024
8002f1a8:	1020000d 	beqz	at,8002f1e0 <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE+0x300>
8002f1ac:	00000000 	nop
8002f1b0:	0800bc6e 	j	8002f1b8 <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE+0x2d8>
8002f1b4:	00000000 	nop
8002f1b8:	8fa1002c 	lw	at,44(sp)
8002f1bc:	8c210000 	lw	at,0(at)
8002f1c0:	afa10020 	sw	at,32(sp)
8002f1c4:	00201025 	move	v0,at
8002f1c8:	afa20024 	sw	v0,36(sp)
8002f1cc:	30210003 	andi	at,at,0x3
8002f1d0:	10200009 	beqz	at,8002f1f8 <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE+0x318>
8002f1d4:	00000000 	nop
8002f1d8:	0800bc89 	j	8002f224 <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE+0x344>
8002f1dc:	00000000 	nop
8002f1e0:	8fa40028 	lw	a0,40(sp)
8002f1e4:	3c018105 	lui	at,0x8105
8002f1e8:	2426da68 	addiu	a2,at,-9624
8002f1ec:	24050400 	li	a1,1024
8002f1f0:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002f1f4:	00000000 	nop
8002f1f8:	8fa10028 	lw	at,40(sp)
8002f1fc:	8fa20024 	lw	v0,36(sp)
8002f200:	00011880 	sll	v1,at,0x2
8002f204:	00431021 	addu	v0,v0,v1
8002f208:	8c420000 	lw	v0,0(v0)
8002f20c:	afa20090 	sw	v0,144(sp)
8002f210:	2c210400 	sltiu	at,at,1024
8002f214:	14200009 	bnez	at,8002f23c <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE+0x35c>
8002f218:	00000000 	nop
8002f21c:	0800bc99 	j	8002f264 <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE+0x384>
8002f220:	00000000 	nop
8002f224:	8fa50020 	lw	a1,32(sp)
8002f228:	3c018105 	lui	at,0x8105
8002f22c:	2426da68 	addiu	a2,at,-9624
8002f230:	24040004 	li	a0,4
8002f234:	0c00f32e 	jal	8003ccb8 <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
8002f238:	00000000 	nop
8002f23c:	8fa1004c 	lw	at,76(sp)
8002f240:	8c2100b0 	lw	at,176(at)
8002f244:	afa10018 	sw	at,24(sp)
8002f248:	00201025 	move	v0,at
8002f24c:	afa2001c 	sw	v0,28(sp)
8002f250:	30210003 	andi	at,at,0x3
8002f254:	10200009 	beqz	at,8002f27c <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE+0x39c>
8002f258:	00000000 	nop
8002f25c:	0800bca7 	j	8002f29c <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE+0x3bc>
8002f260:	00000000 	nop
8002f264:	8fa40028 	lw	a0,40(sp)
8002f268:	3c018105 	lui	at,0x8105
8002f26c:	2426da78 	addiu	a2,at,-9608
8002f270:	24050400 	li	a1,1024
8002f274:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8002f278:	00000000 	nop
8002f27c:	8fa1001c 	lw	at,28(sp)
8002f280:	8fa20028 	lw	v0,40(sp)
8002f284:	00021080 	sll	v0,v0,0x2
8002f288:	00221021 	addu	v0,at,v0
8002f28c:	8fa10090 	lw	at,144(sp)
8002f290:	ac410000 	sw	at,0(v0)
    for i in (UTOP.raw >> 22)..(UVPT.raw >> 22) {
8002f294:	0800bc45 	j	8002f114 <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE+0x234>
8002f298:	00000000 	nop
        env.env_pgdir.entries[i] = pre_table.entries[i];
8002f29c:	8fa50018 	lw	a1,24(sp)
8002f2a0:	3c018105 	lui	at,0x8105
8002f2a4:	2426da78 	addiu	a2,at,-9608
8002f2a8:	24040004 	li	a0,4
8002f2ac:	0c00f32e 	jal	8003ccb8 <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
8002f2b0:	00000000 	nop

8002f2b4 <_ZN8mos_65024proc10env_create17h022332862736453bE>:

pub const DEFAULT_PRIO: usize = 1;

pub fn env_create(elf_data: &[u8]) {
8002f2b4:	27bdff98 	addiu	sp,sp,-104
8002f2b8:	afbf0064 	sw	ra,100(sp)
8002f2bc:	afa5002c 	sw	a1,44(sp)
8002f2c0:	afa40030 	sw	a0,48(sp)
8002f2c4:	afa4004c 	sw	a0,76(sp)
8002f2c8:	afa50050 	sw	a1,80(sp)
    let env_idx = env_alloc(None).unwrap();
8002f2cc:	afa0003c 	sw	zero,60(sp)
8002f2d0:	8fa5003c 	lw	a1,60(sp)
8002f2d4:	8fa60040 	lw	a2,64(sp)
8002f2d8:	27a40034 	addiu	a0,sp,52
8002f2dc:	0c00bbb8 	jal	8002eee0 <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE>
8002f2e0:	00000000 	nop
        match self {
8002f2e4:	8fa10034 	lw	at,52(sp)
8002f2e8:	10200013 	beqz	at,8002f338 <_ZN8mos_65024proc10env_create17h022332862736453bE+0x84>
8002f2ec:	00000000 	nop
8002f2f0:	0800bcbe 	j	8002f2f8 <_ZN8mos_65024proc10env_create17h022332862736453bE+0x44>
8002f2f4:	00000000 	nop
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
8002f2f8:	8fa20034 	lw	v0,52(sp)
8002f2fc:	8fa10038 	lw	at,56(sp)
8002f300:	afa20058 	sw	v0,88(sp)
8002f304:	afa1005c 	sw	at,92(sp)
8002f308:	3c018105 	lui	at,0x8105
8002f30c:	2421da88 	addiu	at,at,-9592
8002f310:	03a01025 	move	v0,sp
8002f314:	ac410010 	sw	at,16(v0)
8002f318:	3c018105 	lui	at,0x8105
8002f31c:	2424cc7c 	addiu	a0,at,-13188
8002f320:	3c018105 	lui	at,0x8105
8002f324:	2427cc6c 	addiu	a3,at,-13204
8002f328:	2405002b 	li	a1,43
8002f32c:	27a60058 	addiu	a2,sp,88
8002f330:	0c00f4d5 	jal	8003d354 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>
8002f334:	00000000 	nop
            Ok(t) => t,
8002f338:	8fa10038 	lw	at,56(sp)
8002f33c:	afa1001c 	sw	at,28(sp)
8002f340:	afa10060 	sw	at,96(sp)
8002f344:	afa10054 	sw	at,84(sp)
    let mut envs = ENV_LIST.lock();
8002f348:	3c018105 	lui	at,0x8105
8002f34c:	2424e74c 	addiu	a0,at,-6324
8002f350:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
8002f354:	00000000 	nop
8002f358:	00402025 	move	a0,v0
8002f35c:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
8002f360:	00000000 	nop
8002f364:	afa20044 	sw	v0,68(sp)
    let mut env_sched_list = ENV_SCHED_LIST.lock();
8002f368:	3c018105 	lui	at,0x8105
8002f36c:	2424e74c 	addiu	a0,at,-6324
8002f370:	0c00d3c5 	jal	80034f14 <_ZN74_$LT$mos_6502..proc..ENV_SCHED_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0db1b016a4f27e1fE>
8002f374:	00000000 	nop
8002f378:	00402025 	move	a0,v0
8002f37c:	0c00a117 	jal	8002845c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8c3735c4a0bdf507E>
8002f380:	00000000 	nop
8002f384:	afa20048 	sw	v0,72(sp)
8002f388:	27a40044 	addiu	a0,sp,68
8002f38c:	afa40028 	sw	a0,40(sp)
    envs[env_idx].create(elf_data);
8002f390:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
8002f394:	00000000 	nop
8002f398:	8fa5001c 	lw	a1,28(sp)
8002f39c:	00402025 	move	a0,v0
8002f3a0:	3c018105 	lui	at,0x8105
8002f3a4:	2426da98 	addiu	a2,at,-9576
8002f3a8:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
8002f3ac:	00000000 	nop
8002f3b0:	8fa50030 	lw	a1,48(sp)
8002f3b4:	8fa6002c 	lw	a2,44(sp)
8002f3b8:	00402025 	move	a0,v0
8002f3bc:	0c00b74d 	jal	8002dd34 <_ZN8mos_65024proc3Env6create17ha75a6b5e02f2fb32E>
8002f3c0:	00000000 	nop
8002f3c4:	27a40048 	addiu	a0,sp,72
8002f3c8:	afa40024 	sw	a0,36(sp)
    env_sched_list.push(envs[env_idx].env_sched_link.clone());
8002f3cc:	0c00ad89 	jal	8002b624 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h05e23529e4b1162bE>
8002f3d0:	00000000 	nop
8002f3d4:	8fa40028 	lw	a0,40(sp)
8002f3d8:	afa20020 	sw	v0,32(sp)
8002f3dc:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
8002f3e0:	00000000 	nop
8002f3e4:	8fa5001c 	lw	a1,28(sp)
8002f3e8:	00402025 	move	a0,v0
8002f3ec:	3c018105 	lui	at,0x8105
8002f3f0:	2426daa8 	addiu	a2,at,-9560
8002f3f4:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
8002f3f8:	00000000 	nop
8002f3fc:	244400b4 	addiu	a0,v0,180
8002f400:	0c00a9d8 	jal	8002a760 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h9bd1f6a6a34f5585E>
8002f404:	00000000 	nop
8002f408:	8fa40020 	lw	a0,32(sp)
8002f40c:	00402825 	move	a1,v0
8002f410:	0c00ce36 	jal	800338d8 <_ZN8mos_65024util16DoubleLinkedList4push17h4baa579cb5c043f4E>
8002f414:	00000000 	nop
8002f418:	8fa40024 	lw	a0,36(sp)
}
8002f41c:	0c008c4e 	jal	80023138 <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h31092ada86abafaeE>
8002f420:	00000000 	nop
8002f424:	8fa40028 	lw	a0,40(sp)
8002f428:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
8002f42c:	00000000 	nop
8002f430:	8fbf0064 	lw	ra,100(sp)
8002f434:	27bd0068 	addiu	sp,sp,104
8002f438:	03e00008 	jr	ra
8002f43c:	00000000 	nop

8002f440 <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE>:
    Reg,
};

pub const TIME_INTERVAL: usize = 500000;

pub(super) fn do_interrupt(trapframe: &mut Trapframe) {
8002f440:	27bdfe18 	addiu	sp,sp,-488
8002f444:	afbf01e4 	sw	ra,484(sp)
8002f448:	afa40140 	sw	a0,320(sp)
    let cause = trapframe.cause;
8002f44c:	8c810090 	lw	at,144(a0)
8002f450:	afa1003c 	sw	at,60(sp)
    if cause & ST_IM7 != 0 {
8002f454:	93a1003d 	lbu	at,61(sp)
8002f458:	30210080 	andi	at,at,0x80
8002f45c:	14200009 	bnez	at,8002f484 <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0x44>
8002f460:	00000000 	nop
8002f464:	0800bd1b 	j	8002f46c <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0x2c>
8002f468:	00000000 	nop
        schedule(false);
    } else if cause & ST_IM6 != 0 {
8002f46c:	93a1003d 	lbu	at,61(sp)
8002f470:	30210040 	andi	at,at,0x40
8002f474:	1020000a 	beqz	at,8002f4a0 <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0x60>
8002f478:	00000000 	nop
8002f47c:	0800bd2e 	j	8002f4b8 <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0x78>
8002f480:	00000000 	nop
8002f484:	24040000 	li	a0,0
        schedule(false);
8002f488:	0c00b512 	jal	8002d448 <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E>
8002f48c:	00000000 	nop
    } else if cause & ST_IM0 != 0 {
        panic!("do_interrupt: unexpected interrupt, cause: {:x}", cause);
    } else {
        panic!("do_interrupt: unexpected interrupt, cause: {:x}", cause);
    }
}
8002f490:	8fbf01e4 	lw	ra,484(sp)
8002f494:	27bd01e8 	addiu	sp,sp,488
8002f498:	03e00008 	jr	ra
8002f49c:	00000000 	nop
    } else if cause & ST_IM5 != 0 {
8002f4a0:	93a1003d 	lbu	at,61(sp)
8002f4a4:	30210020 	andi	at,at,0x20
8002f4a8:	1020001e 	beqz	at,8002f524 <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0xe4>
8002f4ac:	00000000 	nop
8002f4b0:	0800bd4f 	j	8002f53c <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0xfc>
8002f4b4:	00000000 	nop
8002f4b8:	27a2003c 	addiu	v0,sp,60
8002f4bc:	afa20144 	sw	v0,324(sp)
8002f4c0:	afa201dc 	sw	v0,476(sp)
8002f4c4:	3c018004 	lui	at,0x8004
8002f4c8:	24217304 	addiu	at,at,29444
8002f4cc:	afa101e0 	sw	at,480(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002f4d0:	afa201d4 	sw	v0,468(sp)
8002f4d4:	afa101d8 	sw	at,472(sp)
    }
8002f4d8:	8fa201d4 	lw	v0,468(sp)
8002f4dc:	8fa101d8 	lw	at,472(sp)
        panic!("do_interrupt: unexpected interrupt, cause: {:x}", cause);
8002f4e0:	afa20058 	sw	v0,88(sp)
8002f4e4:	afa1005c 	sw	at,92(sp)
8002f4e8:	03a00825 	move	at,sp
8002f4ec:	24060001 	li	a2,1
8002f4f0:	ac260010 	sw	a2,16(at)
8002f4f4:	3c018105 	lui	at,0x8105
8002f4f8:	2425dae4 	addiu	a1,at,-9500
8002f4fc:	27a40040 	addiu	a0,sp,64
8002f500:	afa40038 	sw	a0,56(sp)
8002f504:	27a70058 	addiu	a3,sp,88
8002f508:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
8002f50c:	00000000 	nop
8002f510:	8fa40038 	lw	a0,56(sp)
8002f514:	3c018105 	lui	at,0x8105
8002f518:	2425db70 	addiu	a1,at,-9360
8002f51c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002f520:	00000000 	nop
    } else if cause & ST_IM4 != 0 {
8002f524:	93a1003d 	lbu	at,61(sp)
8002f528:	30210010 	andi	at,at,0x10
8002f52c:	1020001e 	beqz	at,8002f5a8 <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0x168>
8002f530:	00000000 	nop
8002f534:	0800bd70 	j	8002f5c0 <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0x180>
8002f538:	00000000 	nop
8002f53c:	27a2003c 	addiu	v0,sp,60
8002f540:	afa20148 	sw	v0,328(sp)
8002f544:	afa201cc 	sw	v0,460(sp)
8002f548:	3c018004 	lui	at,0x8004
8002f54c:	24217304 	addiu	at,at,29444
8002f550:	afa101d0 	sw	at,464(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002f554:	afa201c4 	sw	v0,452(sp)
8002f558:	afa101c8 	sw	at,456(sp)
    }
8002f55c:	8fa201c4 	lw	v0,452(sp)
8002f560:	8fa101c8 	lw	at,456(sp)
        panic!("do_interrupt: unexpected interrupt, cause: {:x}", cause);
8002f564:	afa20078 	sw	v0,120(sp)
8002f568:	afa1007c 	sw	at,124(sp)
8002f56c:	03a00825 	move	at,sp
8002f570:	24060001 	li	a2,1
8002f574:	ac260010 	sw	a2,16(at)
8002f578:	3c018105 	lui	at,0x8105
8002f57c:	2425dae4 	addiu	a1,at,-9500
8002f580:	27a40060 	addiu	a0,sp,96
8002f584:	afa40034 	sw	a0,52(sp)
8002f588:	27a70078 	addiu	a3,sp,120
8002f58c:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
8002f590:	00000000 	nop
8002f594:	8fa40034 	lw	a0,52(sp)
8002f598:	3c018105 	lui	at,0x8105
8002f59c:	2425db60 	addiu	a1,at,-9376
8002f5a0:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002f5a4:	00000000 	nop
    } else if cause & ST_IM3 != 0 {
8002f5a8:	93a1003d 	lbu	at,61(sp)
8002f5ac:	30210008 	andi	at,at,0x8
8002f5b0:	1020001e 	beqz	at,8002f62c <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0x1ec>
8002f5b4:	00000000 	nop
8002f5b8:	0800bd91 	j	8002f644 <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0x204>
8002f5bc:	00000000 	nop
8002f5c0:	27a2003c 	addiu	v0,sp,60
8002f5c4:	afa2014c 	sw	v0,332(sp)
8002f5c8:	afa201bc 	sw	v0,444(sp)
8002f5cc:	3c018004 	lui	at,0x8004
8002f5d0:	24217304 	addiu	at,at,29444
8002f5d4:	afa101c0 	sw	at,448(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002f5d8:	afa201b4 	sw	v0,436(sp)
8002f5dc:	afa101b8 	sw	at,440(sp)
    }
8002f5e0:	8fa201b4 	lw	v0,436(sp)
8002f5e4:	8fa101b8 	lw	at,440(sp)
        panic!("do_interrupt: unexpected interrupt, cause: {:x}", cause);
8002f5e8:	afa20098 	sw	v0,152(sp)
8002f5ec:	afa1009c 	sw	at,156(sp)
8002f5f0:	03a00825 	move	at,sp
8002f5f4:	24060001 	li	a2,1
8002f5f8:	ac260010 	sw	a2,16(at)
8002f5fc:	3c018105 	lui	at,0x8105
8002f600:	2425dae4 	addiu	a1,at,-9500
8002f604:	27a40080 	addiu	a0,sp,128
8002f608:	afa40030 	sw	a0,48(sp)
8002f60c:	27a70098 	addiu	a3,sp,152
8002f610:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
8002f614:	00000000 	nop
8002f618:	8fa40030 	lw	a0,48(sp)
8002f61c:	3c018105 	lui	at,0x8105
8002f620:	2425db50 	addiu	a1,at,-9392
8002f624:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002f628:	00000000 	nop
    } else if cause & ST_IM2 != 0 {
8002f62c:	93a1003d 	lbu	at,61(sp)
8002f630:	30210004 	andi	at,at,0x4
8002f634:	1020001e 	beqz	at,8002f6b0 <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0x270>
8002f638:	00000000 	nop
8002f63c:	0800bdb2 	j	8002f6c8 <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0x288>
8002f640:	00000000 	nop
8002f644:	27a2003c 	addiu	v0,sp,60
8002f648:	afa20150 	sw	v0,336(sp)
8002f64c:	afa201ac 	sw	v0,428(sp)
8002f650:	3c018004 	lui	at,0x8004
8002f654:	24217304 	addiu	at,at,29444
8002f658:	afa101b0 	sw	at,432(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002f65c:	afa201a4 	sw	v0,420(sp)
8002f660:	afa101a8 	sw	at,424(sp)
    }
8002f664:	8fa201a4 	lw	v0,420(sp)
8002f668:	8fa101a8 	lw	at,424(sp)
        panic!("do_interrupt: unexpected interrupt, cause: {:x}", cause);
8002f66c:	afa200b8 	sw	v0,184(sp)
8002f670:	afa100bc 	sw	at,188(sp)
8002f674:	03a00825 	move	at,sp
8002f678:	24060001 	li	a2,1
8002f67c:	ac260010 	sw	a2,16(at)
8002f680:	3c018105 	lui	at,0x8105
8002f684:	2425dae4 	addiu	a1,at,-9500
8002f688:	27a400a0 	addiu	a0,sp,160
8002f68c:	afa4002c 	sw	a0,44(sp)
8002f690:	27a700b8 	addiu	a3,sp,184
8002f694:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
8002f698:	00000000 	nop
8002f69c:	8fa4002c 	lw	a0,44(sp)
8002f6a0:	3c018105 	lui	at,0x8105
8002f6a4:	2425db40 	addiu	a1,at,-9408
8002f6a8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002f6ac:	00000000 	nop
    } else if cause & ST_IM1 != 0 {
8002f6b0:	93a1003d 	lbu	at,61(sp)
8002f6b4:	30210002 	andi	at,at,0x2
8002f6b8:	1020001e 	beqz	at,8002f734 <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0x2f4>
8002f6bc:	00000000 	nop
8002f6c0:	0800bdd3 	j	8002f74c <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0x30c>
8002f6c4:	00000000 	nop
8002f6c8:	27a2003c 	addiu	v0,sp,60
8002f6cc:	afa20154 	sw	v0,340(sp)
8002f6d0:	afa2019c 	sw	v0,412(sp)
8002f6d4:	3c018004 	lui	at,0x8004
8002f6d8:	24217304 	addiu	at,at,29444
8002f6dc:	afa101a0 	sw	at,416(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002f6e0:	afa20194 	sw	v0,404(sp)
8002f6e4:	afa10198 	sw	at,408(sp)
    }
8002f6e8:	8fa20194 	lw	v0,404(sp)
8002f6ec:	8fa10198 	lw	at,408(sp)
        panic!("do_interrupt: unexpected interrupt, cause: {:x}", cause);
8002f6f0:	afa200d8 	sw	v0,216(sp)
8002f6f4:	afa100dc 	sw	at,220(sp)
8002f6f8:	03a00825 	move	at,sp
8002f6fc:	24060001 	li	a2,1
8002f700:	ac260010 	sw	a2,16(at)
8002f704:	3c018105 	lui	at,0x8105
8002f708:	2425dae4 	addiu	a1,at,-9500
8002f70c:	27a400c0 	addiu	a0,sp,192
8002f710:	afa40028 	sw	a0,40(sp)
8002f714:	27a700d8 	addiu	a3,sp,216
8002f718:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
8002f71c:	00000000 	nop
8002f720:	8fa40028 	lw	a0,40(sp)
8002f724:	3c018105 	lui	at,0x8105
8002f728:	2425db30 	addiu	a1,at,-9424
8002f72c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002f730:	00000000 	nop
    } else if cause & ST_IM0 != 0 {
8002f734:	93a1003d 	lbu	at,61(sp)
8002f738:	30210001 	andi	at,at,0x1
8002f73c:	1020001e 	beqz	at,8002f7b8 <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0x378>
8002f740:	00000000 	nop
8002f744:	0800be09 	j	8002f824 <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE+0x3e4>
8002f748:	00000000 	nop
8002f74c:	27a2003c 	addiu	v0,sp,60
8002f750:	afa20158 	sw	v0,344(sp)
8002f754:	afa2018c 	sw	v0,396(sp)
8002f758:	3c018004 	lui	at,0x8004
8002f75c:	24217304 	addiu	at,at,29444
8002f760:	afa10190 	sw	at,400(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002f764:	afa20184 	sw	v0,388(sp)
8002f768:	afa10188 	sw	at,392(sp)
    }
8002f76c:	8fa20184 	lw	v0,388(sp)
8002f770:	8fa10188 	lw	at,392(sp)
        panic!("do_interrupt: unexpected interrupt, cause: {:x}", cause);
8002f774:	afa200f8 	sw	v0,248(sp)
8002f778:	afa100fc 	sw	at,252(sp)
8002f77c:	03a00825 	move	at,sp
8002f780:	24060001 	li	a2,1
8002f784:	ac260010 	sw	a2,16(at)
8002f788:	3c018105 	lui	at,0x8105
8002f78c:	2425dae4 	addiu	a1,at,-9500
8002f790:	27a400e0 	addiu	a0,sp,224
8002f794:	afa40024 	sw	a0,36(sp)
8002f798:	27a700f8 	addiu	a3,sp,248
8002f79c:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
8002f7a0:	00000000 	nop
8002f7a4:	8fa40024 	lw	a0,36(sp)
8002f7a8:	3c018105 	lui	at,0x8105
8002f7ac:	2425db20 	addiu	a1,at,-9440
8002f7b0:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002f7b4:	00000000 	nop
8002f7b8:	27a2003c 	addiu	v0,sp,60
8002f7bc:	afa20160 	sw	v0,352(sp)
8002f7c0:	afa2016c 	sw	v0,364(sp)
8002f7c4:	3c018004 	lui	at,0x8004
8002f7c8:	24217304 	addiu	at,at,29444
8002f7cc:	afa10170 	sw	at,368(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002f7d0:	afa20164 	sw	v0,356(sp)
8002f7d4:	afa10168 	sw	at,360(sp)
    }
8002f7d8:	8fa20164 	lw	v0,356(sp)
8002f7dc:	8fa10168 	lw	at,360(sp)
        panic!("do_interrupt: unexpected interrupt, cause: {:x}", cause);
8002f7e0:	afa20138 	sw	v0,312(sp)
8002f7e4:	afa1013c 	sw	at,316(sp)
8002f7e8:	03a00825 	move	at,sp
8002f7ec:	24060001 	li	a2,1
8002f7f0:	ac260010 	sw	a2,16(at)
8002f7f4:	3c018105 	lui	at,0x8105
8002f7f8:	2425dae4 	addiu	a1,at,-9500
8002f7fc:	27a40120 	addiu	a0,sp,288
8002f800:	afa40020 	sw	a0,32(sp)
8002f804:	27a70138 	addiu	a3,sp,312
8002f808:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
8002f80c:	00000000 	nop
8002f810:	8fa40020 	lw	a0,32(sp)
8002f814:	3c018105 	lui	at,0x8105
8002f818:	2425db00 	addiu	a1,at,-9472
8002f81c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002f820:	00000000 	nop
8002f824:	27a2003c 	addiu	v0,sp,60
8002f828:	afa2015c 	sw	v0,348(sp)
8002f82c:	afa2017c 	sw	v0,380(sp)
8002f830:	3c018004 	lui	at,0x8004
8002f834:	24217304 	addiu	at,at,29444
8002f838:	afa10180 	sw	at,384(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002f83c:	afa20174 	sw	v0,372(sp)
8002f840:	afa10178 	sw	at,376(sp)
    }
8002f844:	8fa20174 	lw	v0,372(sp)
8002f848:	8fa10178 	lw	at,376(sp)
        panic!("do_interrupt: unexpected interrupt, cause: {:x}", cause);
8002f84c:	afa20118 	sw	v0,280(sp)
8002f850:	afa1011c 	sw	at,284(sp)
8002f854:	03a00825 	move	at,sp
8002f858:	24060001 	li	a2,1
8002f85c:	ac260010 	sw	a2,16(at)
8002f860:	3c018105 	lui	at,0x8105
8002f864:	2425dae4 	addiu	a1,at,-9500
8002f868:	27a40100 	addiu	a0,sp,256
8002f86c:	afa4001c 	sw	a0,28(sp)
8002f870:	27a70118 	addiu	a3,sp,280
8002f874:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
8002f878:	00000000 	nop
8002f87c:	8fa4001c 	lw	a0,28(sp)
8002f880:	3c018105 	lui	at,0x8105
8002f884:	2425db10 	addiu	a1,at,-9456
8002f888:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002f88c:	00000000 	nop

8002f890 <_ZN8mos_65024trap3int22enable_timer_interrupt17ha8adfedf201babfbE>:

pub fn enable_timer_interrupt() {
8002f890:	27bdfff0 	addiu	sp,sp,-16
8002f894:	afa00008 	sw	zero,8(sp)
8002f898:	24010000 	li	at,0
8002f89c:	40814800 	mtc0	at,c0_count
8002f8a0:	3c010007 	lui	at,0x7
8002f8a4:	3421a120 	ori	at,at,0xa120
8002f8a8:	afa1000c 	sw	at,12(sp)
8002f8ac:	40815800 	mtc0	at,c0_compare
                    asm!(concat!(".set noat\nmfc0 {}, ",$no,"\n.set at\n"),out(reg) _ret,options(nomem,nostack));
8002f8b0:	40016000 	mfc0	at,c0_status
8002f8b4:	afa10000 	sw	at,0(sp)
                _ret
8002f8b8:	8fa10000 	lw	at,0(sp)
    cp0::count::write(0);
    cp0::compare::write(TIME_INTERVAL);
    sr::write(sr::read() | ST_IM7);
8002f8bc:	34218000 	ori	at,at,0x8000
8002f8c0:	afa10004 	sw	at,4(sp)
                    asm!(concat!(".set noat\nmtc0 {}, ",$no,"\n.set at\n"),in(reg) val,options(nomem,nostack));
8002f8c4:	40816000 	mtc0	at,c0_status
8002f8c8:	27bd0010 	addiu	sp,sp,16
}
8002f8cc:	03e00008 	jr	ra
8002f8d0:	00000000 	nop

8002f8d4 <_ZN8mos_65024trap3int16enable_interrupt17h6652561978ef1f38E>:

pub fn enable_interrupt() {
8002f8d4:	27bdfff8 	addiu	sp,sp,-8
                    asm!(concat!(".set noat\nmfc0 {}, ",$no,"\n.set at\n"),out(reg) _ret,options(nomem,nostack));
8002f8d8:	40016000 	mfc0	at,c0_status
8002f8dc:	afa10000 	sw	at,0(sp)
                _ret
8002f8e0:	8fa10000 	lw	at,0(sp)
    sr::write(sr::read() | ST_IE);
8002f8e4:	34210001 	ori	at,at,0x1
8002f8e8:	afa10004 	sw	at,4(sp)
                    asm!(concat!(".set noat\nmtc0 {}, ",$no,"\n.set at\n"),in(reg) val,options(nomem,nostack));
8002f8ec:	40816000 	mtc0	at,c0_status
8002f8f0:	27bd0008 	addiu	sp,sp,8
}
8002f8f4:	03e00008 	jr	ra
8002f8f8:	00000000 	nop

8002f8fc <_ZN8mos_65024trap3int23disable_timer_interrupt17hdaba7597ae262726E>:

pub fn disable_timer_interrupt() {
8002f8fc:	27bdfff8 	addiu	sp,sp,-8
                    asm!(concat!(".set noat\nmfc0 {}, ",$no,"\n.set at\n"),out(reg) _ret,options(nomem,nostack));
8002f900:	40016000 	mfc0	at,c0_status
8002f904:	afa10000 	sw	at,0(sp)
                _ret
8002f908:	8fa10000 	lw	at,0(sp)
8002f90c:	3c02ffff 	lui	v0,0xffff
8002f910:	34427fff 	ori	v0,v0,0x7fff
    sr::write(sr::read() & !ST_IM7);
8002f914:	00220824 	and	at,at,v0
8002f918:	afa10004 	sw	at,4(sp)
                    asm!(concat!(".set noat\nmtc0 {}, ",$no,"\n.set at\n"),in(reg) val,options(nomem,nostack));
8002f91c:	40816000 	mtc0	at,c0_status
8002f920:	27bd0008 	addiu	sp,sp,8
}
8002f924:	03e00008 	jr	ra
8002f928:	00000000 	nop

8002f92c <_ZN8mos_65024trap7syscall11sys_putchar17h42103aa23915fc30E>:
const SYS_CGETC: usize = 15;
const SYS_WRITE_DEV: usize = 16;
const SYS_READ_DEV: usize = 17;
const MAX_SYSNO: usize = 18;

fn sys_putchar(c: u32) -> i32 {
8002f92c:	27bdffe0 	addiu	sp,sp,-32
8002f930:	afbf001c 	sw	ra,28(sp)
8002f934:	afa40014 	sw	a0,20(sp)
8002f938:	afa40018 	sw	a0,24(sp)
    NS16550A.putchar(c);
8002f93c:	3c018105 	lui	at,0x8105
8002f940:	2424e6a4 	addiu	a0,at,-6492
8002f944:	0c00d150 	jal	80034540 <_ZN73_$LT$mos_6502..dev..uart..NS16550A$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbf8d16e6e776ffa2E>
8002f948:	00000000 	nop
8002f94c:	8fa50014 	lw	a1,20(sp)
8002f950:	00402025 	move	a0,v0
8002f954:	0c00ae68 	jal	8002b9a0 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17hdc63989b1e2e1ef3E>
8002f958:	00000000 	nop
8002f95c:	24020000 	li	v0,0
    return 0;
}
8002f960:	8fbf001c 	lw	ra,28(sp)
8002f964:	27bd0020 	addiu	sp,sp,32
8002f968:	03e00008 	jr	ra
8002f96c:	00000000 	nop

8002f970 <_ZN8mos_65024trap7syscall14sys_print_cons17h3c712e5b22b95e3cE>:

fn sys_print_cons(s: VirtAddr, num: usize) -> i32 {
8002f970:	27bdffb0 	addiu	sp,sp,-80
8002f974:	afbf004c 	sw	ra,76(sp)
8002f978:	afa4001c 	sw	a0,28(sp)
8002f97c:	afa4003c 	sw	a0,60(sp)
8002f980:	afa50040 	sw	a1,64(sp)
    for i in 0..num {
8002f984:	afa00020 	sw	zero,32(sp)
8002f988:	afa50024 	sw	a1,36(sp)
8002f98c:	8fa40020 	lw	a0,32(sp)
8002f990:	8fa50024 	lw	a1,36(sp)
8002f994:	0c0123e2 	jal	80048f88 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
8002f998:	00000000 	nop
8002f99c:	afa20028 	sw	v0,40(sp)
8002f9a0:	afa3002c 	sw	v1,44(sp)
8002f9a4:	0800be6b 	j	8002f9ac <_ZN8mos_65024trap7syscall14sys_print_cons17h3c712e5b22b95e3cE+0x3c>
8002f9a8:	00000000 	nop
8002f9ac:	27a40028 	addiu	a0,sp,40
8002f9b0:	0c0123d9 	jal	80048f64 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
8002f9b4:	00000000 	nop
8002f9b8:	afa20030 	sw	v0,48(sp)
8002f9bc:	afa30034 	sw	v1,52(sp)
8002f9c0:	8fa10030 	lw	at,48(sp)
8002f9c4:	14200008 	bnez	at,8002f9e8 <_ZN8mos_65024trap7syscall14sys_print_cons17h3c712e5b22b95e3cE+0x78>
8002f9c8:	00000000 	nop
8002f9cc:	0800be75 	j	8002f9d4 <_ZN8mos_65024trap7syscall14sys_print_cons17h3c712e5b22b95e3cE+0x64>
8002f9d0:	00000000 	nop
8002f9d4:	24020000 	li	v0,0
        NS16550A.putchar(s.add(i).read::<u8>().into());
    }
    return 0;
}
8002f9d8:	8fbf004c 	lw	ra,76(sp)
8002f9dc:	27bd0050 	addiu	sp,sp,80
8002f9e0:	03e00008 	jr	ra
8002f9e4:	00000000 	nop
    for i in 0..num {
8002f9e8:	8fa10034 	lw	at,52(sp)
8002f9ec:	afa10014 	sw	at,20(sp)
8002f9f0:	afa10044 	sw	at,68(sp)
        NS16550A.putchar(s.add(i).read::<u8>().into());
8002f9f4:	3c018105 	lui	at,0x8105
8002f9f8:	2424e6a4 	addiu	a0,at,-6492
8002f9fc:	0c00d150 	jal	80034540 <_ZN73_$LT$mos_6502..dev..uart..NS16550A$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbf8d16e6e776ffa2E>
8002fa00:	00000000 	nop
8002fa04:	8fa4001c 	lw	a0,28(sp)
8002fa08:	8fa50014 	lw	a1,20(sp)
8002fa0c:	afa20018 	sw	v0,24(sp)
8002fa10:	0c00af2c 	jal	8002bcb0 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17hf63c307524190caaE>
8002fa14:	00000000 	nop
8002fa18:	afa20038 	sw	v0,56(sp)
8002fa1c:	27a10038 	addiu	at,sp,56
8002fa20:	afa10048 	sw	at,72(sp)
        unsafe { ptr::read(self.raw as *const T) }
8002fa24:	8fa40038 	lw	a0,56(sp)
8002fa28:	0c00e708 	jal	80039c20 <_ZN4core3ptr4read17h577826971f2136a4E>
8002fa2c:	00000000 	nop
8002fa30:	00402025 	move	a0,v0
8002fa34:	3c018105 	lui	at,0x8105
8002fa38:	2425db98 	addiu	a1,at,-9320
8002fa3c:	0c00a198 	jal	80028660 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h2d9fefc39387fa18E>
8002fa40:	00000000 	nop
8002fa44:	8fa40018 	lw	a0,24(sp)
8002fa48:	00402825 	move	a1,v0
8002fa4c:	0c00ae68 	jal	8002b9a0 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17hdc63989b1e2e1ef3E>
8002fa50:	00000000 	nop
8002fa54:	0800be6b 	j	8002f9ac <_ZN8mos_65024trap7syscall14sys_print_cons17h3c712e5b22b95e3cE+0x3c>
8002fa58:	00000000 	nop

8002fa5c <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE>:
        return -E_INVAL;
    }
    return 0;
}

fn sys_read_dev(va: VirtAddr, pa: PhysAddr, len: usize) -> i32 {
8002fa5c:	27bdffb0 	addiu	sp,sp,-80
8002fa60:	afbf004c 	sw	ra,76(sp)
8002fa64:	afa60014 	sw	a2,20(sp)
8002fa68:	00a00825 	move	at,a1
8002fa6c:	8fa50014 	lw	a1,20(sp)
8002fa70:	afa40018 	sw	a0,24(sp)
8002fa74:	afa1001c 	sw	at,28(sp)
8002fa78:	afa50024 	sw	a1,36(sp)
    if is_illegal_va_range(va, len) || is_illegal_dev_range(pa, len) || va % len != 0 {
8002fa7c:	8fa40018 	lw	a0,24(sp)
8002fa80:	0c00c7c4 	jal	80031f10 <_ZN8mos_65024trap7syscall19is_illegal_va_range17h6dfe818f16dcee9dE>
8002fa84:	00000000 	nop
8002fa88:	1440000b 	bnez	v0,8002fab8 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0x5c>
8002fa8c:	00000000 	nop
8002fa90:	0800bea6 	j	8002fa98 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0x3c>
8002fa94:	00000000 	nop
8002fa98:	8fa50014 	lw	a1,20(sp)
8002fa9c:	8fa4001c 	lw	a0,28(sp)
8002faa0:	0c00c73e 	jal	80031cf8 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E>
8002faa4:	00000000 	nop
8002faa8:	10400007 	beqz	v0,8002fac8 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0x6c>
8002faac:	00000000 	nop
8002fab0:	0800beae 	j	8002fab8 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0x5c>
8002fab4:	00000000 	nop
8002fab8:	2401fffd 	li	at,-3
        return -E_INVAL;
8002fabc:	afa10020 	sw	at,32(sp)
8002fac0:	0800befd 	j	8002fbf4 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0x198>
8002fac4:	00000000 	nop
    if is_illegal_va_range(va, len) || is_illegal_dev_range(pa, len) || va % len != 0 {
8002fac8:	8fa50014 	lw	a1,20(sp)
8002facc:	8fa40018 	lw	a0,24(sp)
8002fad0:	0c00af00 	jal	8002bc00 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17ha0cf15c56b191f6dE>
8002fad4:	00000000 	nop
8002fad8:	1440fff7 	bnez	v0,8002fab8 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0x5c>
8002fadc:	00000000 	nop
8002fae0:	0800beba 	j	8002fae8 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0x8c>
8002fae4:	00000000 	nop
8002fae8:	8fa10014 	lw	at,20(sp)
8002faec:	24020004 	li	v0,4
    }
    if len == 4 {
8002faf0:	14220011 	bne	at,v0,8002fb38 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0xdc>
8002faf4:	00000000 	nop
8002faf8:	0800bec0 	j	8002fb00 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0xa4>
8002fafc:	00000000 	nop
8002fb00:	27a1001c 	addiu	at,sp,28
8002fb04:	afa10044 	sw	at,68(sp)
        unsafe { ptr::read_volatile(self.raw as *const T) }
8002fb08:	8fa4001c 	lw	a0,28(sp)
8002fb0c:	0c008754 	jal	80021d50 <_ZN4core3ptr13read_volatile17h148fdf7017203b24E>
8002fb10:	00000000 	nop
8002fb14:	00402825 	move	a1,v0
8002fb18:	27a10018 	addiu	at,sp,24
8002fb1c:	afa10028 	sw	at,40(sp)
8002fb20:	afa5002c 	sw	a1,44(sp)
            ptr::write(self.raw as *mut T, src);
8002fb24:	8fa40018 	lw	a0,24(sp)
8002fb28:	0c008aeb 	jal	80022bac <_ZN4core3ptr5write17hf0d293e3f7e01836E>
8002fb2c:	00000000 	nop
        va.write(pa.read_volatile::<u32>());
8002fb30:	0800bed4 	j	8002fb50 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0xf4>
8002fb34:	00000000 	nop
8002fb38:	8fa10014 	lw	at,20(sp)
8002fb3c:	24020002 	li	v0,2
    } else if len == 2 {
8002fb40:	10220006 	beq	at,v0,8002fb5c <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0x100>
8002fb44:	00000000 	nop
8002fb48:	0800bee5 	j	8002fb94 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0x138>
8002fb4c:	00000000 	nop
    } else if len == 1 {
        va.write(pa.read_volatile::<u8>());
    } else {
        return -E_INVAL;
    }
    return 0;
8002fb50:	afa00020 	sw	zero,32(sp)
8002fb54:	0800befd 	j	8002fbf4 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0x198>
8002fb58:	00000000 	nop
8002fb5c:	27a1001c 	addiu	at,sp,28
8002fb60:	afa10048 	sw	at,72(sp)
        unsafe { ptr::read_volatile(self.raw as *const T) }
8002fb64:	8fa4001c 	lw	a0,28(sp)
8002fb68:	0c00876c 	jal	80021db0 <_ZN4core3ptr13read_volatile17hb8eb22eda6c35f8aE>
8002fb6c:	00000000 	nop
8002fb70:	00402825 	move	a1,v0
8002fb74:	27a10018 	addiu	at,sp,24
8002fb78:	afa10038 	sw	at,56(sp)
8002fb7c:	a7a5003e 	sh	a1,62(sp)
            ptr::write(self.raw as *mut T, src);
8002fb80:	8fa40018 	lw	a0,24(sp)
8002fb84:	0c008a8d 	jal	80022a34 <_ZN4core3ptr5write17h9e2179c4aa64964eE>
8002fb88:	00000000 	nop
        va.write(pa.read_volatile::<u16>());
8002fb8c:	0800bed4 	j	8002fb50 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0xf4>
8002fb90:	00000000 	nop
8002fb94:	8fa10014 	lw	at,20(sp)
8002fb98:	24020001 	li	v0,1
    } else if len == 1 {
8002fb9c:	14220011 	bne	at,v0,8002fbe4 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0x188>
8002fba0:	00000000 	nop
8002fba4:	0800beeb 	j	8002fbac <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0x150>
8002fba8:	00000000 	nop
8002fbac:	27a1001c 	addiu	at,sp,28
8002fbb0:	afa10040 	sw	at,64(sp)
        unsafe { ptr::read_volatile(self.raw as *const T) }
8002fbb4:	8fa4001c 	lw	a0,28(sp)
8002fbb8:	0c00dc9b 	jal	8003726c <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E>
8002fbbc:	00000000 	nop
8002fbc0:	00402825 	move	a1,v0
8002fbc4:	27a10018 	addiu	at,sp,24
8002fbc8:	afa10030 	sw	at,48(sp)
8002fbcc:	a3a50037 	sb	a1,55(sp)
            ptr::write(self.raw as *mut T, src);
8002fbd0:	8fa40018 	lw	a0,24(sp)
8002fbd4:	0c00dced 	jal	800373b4 <_ZN4core3ptr5write17heb431dbdaac243d9E>
8002fbd8:	00000000 	nop
        va.write(pa.read_volatile::<u8>());
8002fbdc:	0800bed4 	j	8002fb50 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0xf4>
8002fbe0:	00000000 	nop
8002fbe4:	2401fffd 	li	at,-3
        return -E_INVAL;
8002fbe8:	afa10020 	sw	at,32(sp)
8002fbec:	0800befd 	j	8002fbf4 <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE+0x198>
8002fbf0:	00000000 	nop
}
8002fbf4:	8fa20020 	lw	v0,32(sp)
8002fbf8:	8fbf004c 	lw	ra,76(sp)
8002fbfc:	27bd0050 	addiu	sp,sp,80
8002fc00:	03e00008 	jr	ra
8002fc04:	00000000 	nop

8002fc08 <_ZN8mos_65024trap7syscall12sys_getenvid17hbc8da0d19c0f778bE>:

fn sys_getenvid() -> i32 {
8002fc08:	27bdffd0 	addiu	sp,sp,-48
8002fc0c:	afbf002c 	sw	ra,44(sp)
    let mut envid: usize = 0;
8002fc10:	afa0001c 	sw	zero,28(sp)
    let locked_cur_env_idx = CUR_ENV.lock();
8002fc14:	3c018105 	lui	at,0x8105
8002fc18:	2424e74c 	addiu	a0,at,-6324
8002fc1c:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
8002fc20:	00000000 	nop
8002fc24:	00402025 	move	a0,v0
8002fc28:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
8002fc2c:	00000000 	nop
8002fc30:	afa20020 	sw	v0,32(sp)
    let locked_envs = ENV_LIST.lock();
8002fc34:	3c018105 	lui	at,0x8105
8002fc38:	2424e74c 	addiu	a0,at,-6324
8002fc3c:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
8002fc40:	00000000 	nop
8002fc44:	00402025 	move	a0,v0
8002fc48:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
8002fc4c:	00000000 	nop
8002fc50:	afa20024 	sw	v0,36(sp)
8002fc54:	27a40020 	addiu	a0,sp,32
    if let Some(env_idx) = *locked_cur_env_idx {
8002fc58:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
8002fc5c:	00000000 	nop
8002fc60:	00400825 	move	at,v0
8002fc64:	afa10018 	sw	at,24(sp)
8002fc68:	8c410000 	lw	at,0(v0)
8002fc6c:	24020001 	li	v0,1
8002fc70:	14220016 	bne	at,v0,8002fccc <_ZN8mos_65024trap7syscall12sys_getenvid17hbc8da0d19c0f778bE+0xc4>
8002fc74:	00000000 	nop
8002fc78:	0800bf20 	j	8002fc80 <_ZN8mos_65024trap7syscall12sys_getenvid17hbc8da0d19c0f778bE+0x78>
8002fc7c:	00000000 	nop
8002fc80:	8fa10018 	lw	at,24(sp)
8002fc84:	8c210004 	lw	at,4(at)
8002fc88:	afa10014 	sw	at,20(sp)
8002fc8c:	afa10028 	sw	at,40(sp)
8002fc90:	27a40024 	addiu	a0,sp,36
        envid = locked_envs[env_idx].get_envid();
8002fc94:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
8002fc98:	00000000 	nop
8002fc9c:	8fa50014 	lw	a1,20(sp)
8002fca0:	00402025 	move	a0,v0
8002fca4:	3c018105 	lui	at,0x8105
8002fca8:	2426dba8 	addiu	a2,at,-9304
8002fcac:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
8002fcb0:	00000000 	nop
8002fcb4:	00402025 	move	a0,v0
8002fcb8:	0c00b957 	jal	8002e55c <_ZN8mos_65024proc3Env9get_envid17h6804e3baab9ab4b9E>
8002fcbc:	00000000 	nop
8002fcc0:	afa2001c 	sw	v0,28(sp)
    if let Some(env_idx) = *locked_cur_env_idx {
8002fcc4:	0800bf33 	j	8002fccc <_ZN8mos_65024trap7syscall12sys_getenvid17hbc8da0d19c0f778bE+0xc4>
8002fcc8:	00000000 	nop
    }
    return envid as i32;
8002fccc:	8fa1001c 	lw	at,28(sp)
8002fcd0:	afa10010 	sw	at,16(sp)
8002fcd4:	27a40024 	addiu	a0,sp,36
}
8002fcd8:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
8002fcdc:	00000000 	nop
8002fce0:	27a40020 	addiu	a0,sp,32
8002fce4:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
8002fce8:	00000000 	nop
8002fcec:	8fa20010 	lw	v0,16(sp)
8002fcf0:	8fbf002c 	lw	ra,44(sp)
8002fcf4:	27bd0030 	addiu	sp,sp,48
8002fcf8:	03e00008 	jr	ra
8002fcfc:	00000000 	nop

8002fd00 <_ZN8mos_65024trap7syscall9sys_yield17hee2ecc9add84bf45E>:

fn sys_yield() -> ! {
8002fd00:	27bdffc0 	addiu	sp,sp,-64
8002fd04:	afbf003c 	sw	ra,60(sp)
8002fd08:	24040001 	li	a0,1
8002fd0c:	afa40018 	sw	a0,24(sp)
    schedule(true);
8002fd10:	0c00b512 	jal	8002d448 <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E>
8002fd14:	00000000 	nop
8002fd18:	8fa60018 	lw	a2,24(sp)
    unreachable!("sys_yield");
8002fd1c:	03a00825 	move	at,sp
8002fd20:	ac200010 	sw	zero,16(at)
8002fd24:	3c018105 	lui	at,0x8105
8002fd28:	2425dbec 	addiu	a1,at,-9236
8002fd2c:	27a40020 	addiu	a0,sp,32
8002fd30:	afa4001c 	sw	a0,28(sp)
8002fd34:	27a70038 	addiu	a3,sp,56
8002fd38:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
8002fd3c:	00000000 	nop
8002fd40:	8fa4001c 	lw	a0,28(sp)
8002fd44:	3c018105 	lui	at,0x8105
8002fd48:	2425dbf4 	addiu	a1,at,-9228
8002fd4c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002fd50:	00000000 	nop

8002fd54 <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E>:
}

fn sys_env_destroy(envid: usize) -> i32 {
8002fd54:	27bdff20 	addiu	sp,sp,-224
8002fd58:	afbf00dc 	sw	ra,220(sp)
8002fd5c:	afa40048 	sw	a0,72(sp)
8002fd60:	afa40088 	sw	a0,136(sp)
8002fd64:	24010000 	li	at,0
    let idx = get_idx_by_envid(envid);
8002fd68:	a3a00087 	sb	zero,135(sp)
8002fd6c:	a3a00086 	sb	zero,134(sp)
8002fd70:	afa400d4 	sw	a0,212(sp)
    if envid == 0 {
8002fd74:	14800016 	bnez	a0,8002fdd0 <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x7c>
8002fd78:	00000000 	nop
8002fd7c:	0800bf61 	j	8002fd84 <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x30>
8002fd80:	00000000 	nop
        let cur_env = CUR_ENV.lock();
8002fd84:	3c018105 	lui	at,0x8105
8002fd88:	2424e74c 	addiu	a0,at,-6324
8002fd8c:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
8002fd90:	00000000 	nop
8002fd94:	00402025 	move	a0,v0
8002fd98:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
8002fd9c:	00000000 	nop
8002fda0:	afa200b8 	sw	v0,184(sp)
8002fda4:	27a400b8 	addiu	a0,sp,184
        if let Some(idx) = *cur_env {
8002fda8:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
8002fdac:	00000000 	nop
8002fdb0:	00400825 	move	at,v0
8002fdb4:	afa10044 	sw	at,68(sp)
8002fdb8:	8c410000 	lw	at,0(v0)
8002fdbc:	24020001 	li	v0,1
8002fdc0:	10220008 	beq	at,v0,8002fde4 <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x90>
8002fdc4:	00000000 	nop
8002fdc8:	0800bf82 	j	8002fe08 <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0xb4>
8002fdcc:	00000000 	nop
    return envid & (NENV - 1);
8002fdd0:	8fa10048 	lw	at,72(sp)
8002fdd4:	302103ff 	andi	at,at,0x3ff
8002fdd8:	afa100b4 	sw	at,180(sp)
8002fddc:	0800bf8e 	j	8002fe38 <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0xe4>
8002fde0:	00000000 	nop
        if let Some(idx) = *cur_env {
8002fde4:	8fa10044 	lw	at,68(sp)
8002fde8:	8c210004 	lw	at,4(at)
8002fdec:	afa100d8 	sw	at,216(sp)
            return idx;
8002fdf0:	afa100b4 	sw	at,180(sp)
8002fdf4:	27a400b8 	addiu	a0,sp,184
    }
8002fdf8:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
8002fdfc:	00000000 	nop
8002fe00:	0800bf8e 	j	8002fe38 <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0xe4>
8002fe04:	00000000 	nop
            panic!("No current env.\n");
8002fe08:	3c018105 	lui	at,0x8105
8002fe0c:	2425d978 	addiu	a1,at,-9864
8002fe10:	27a400bc 	addiu	a0,sp,188
8002fe14:	afa40040 	sw	a0,64(sp)
8002fe18:	24060001 	li	a2,1
8002fe1c:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
8002fe20:	00000000 	nop
8002fe24:	8fa40040 	lw	a0,64(sp)
8002fe28:	3c018105 	lui	at,0x8105
8002fe2c:	2425d980 	addiu	a1,at,-9856
8002fe30:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8002fe34:	00000000 	nop
}
8002fe38:	8fa100b4 	lw	at,180(sp)
8002fe3c:	afa1004c 	sw	at,76(sp)
8002fe40:	27a2004c 	addiu	v0,sp,76
8002fe44:	afa20094 	sw	v0,148(sp)
8002fe48:	afa200a0 	sw	v0,160(sp)
8002fe4c:	3c018004 	lui	at,0x8004
8002fe50:	24217304 	addiu	at,at,29444
8002fe54:	afa100a4 	sw	at,164(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8002fe58:	afa20098 	sw	v0,152(sp)
8002fe5c:	afa1009c 	sw	at,156(sp)
    }
8002fe60:	8fa20098 	lw	v0,152(sp)
8002fe64:	8fa1009c 	lw	at,156(sp)
    println!("sys_env_destroy: idx = {:x}\n", idx);
8002fe68:	afa20068 	sw	v0,104(sp)
8002fe6c:	afa1006c 	sw	at,108(sp)
8002fe70:	03a01025 	move	v0,sp
8002fe74:	24010001 	li	at,1
8002fe78:	afa10038 	sw	at,56(sp)
8002fe7c:	ac410010 	sw	at,16(v0)
8002fe80:	3c018105 	lui	at,0x8105
8002fe84:	2425dc20 	addiu	a1,at,-9184
8002fe88:	27a40050 	addiu	a0,sp,80
8002fe8c:	afa40020 	sw	a0,32(sp)
8002fe90:	24060002 	li	a2,2
8002fe94:	27a70068 	addiu	a3,sp,104
8002fe98:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
8002fe9c:	00000000 	nop
8002fea0:	8fa40020 	lw	a0,32(sp)
8002fea4:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
8002fea8:	00000000 	nop
    let mut env_list = ENV_LIST.lock();
8002feac:	3c018105 	lui	at,0x8105
8002feb0:	2424e74c 	addiu	a0,at,-6324
8002feb4:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
8002feb8:	00000000 	nop
8002febc:	00402025 	move	a0,v0
8002fec0:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
8002fec4:	00000000 	nop
8002fec8:	8fa10038 	lw	at,56(sp)
8002fecc:	afa20070 	sw	v0,112(sp)
8002fed0:	a3a10087 	sb	at,135(sp)
8002fed4:	27a40070 	addiu	a0,sp,112
    let env: &mut Env = &mut env_list[idx];
8002fed8:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
8002fedc:	00000000 	nop
8002fee0:	00402025 	move	a0,v0
8002fee4:	8fa5004c 	lw	a1,76(sp)
8002fee8:	3c018105 	lui	at,0x8105
8002feec:	2426dc30 	addiu	a2,at,-9168
8002fef0:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
8002fef4:	00000000 	nop
8002fef8:	afa2002c 	sw	v0,44(sp)
8002fefc:	afa2008c 	sw	v0,140(sp)
    env.env_status = EnvStatus::EnvFree;
8002ff00:	afa00074 	sw	zero,116(sp)
8002ff04:	8fa10074 	lw	at,116(sp)
8002ff08:	ac4100ac 	sw	at,172(v0)
    ENV_SCHED_LIST.lock().remove(env.env_sched_link.clone());
8002ff0c:	3c018105 	lui	at,0x8105
8002ff10:	2424e74c 	addiu	a0,at,-6324
8002ff14:	0c00d3c5 	jal	80034f14 <_ZN74_$LT$mos_6502..proc..ENV_SCHED_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0db1b016a4f27e1fE>
8002ff18:	00000000 	nop
8002ff1c:	00402025 	move	a0,v0
8002ff20:	0c00a117 	jal	8002845c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8c3735c4a0bdf507E>
8002ff24:	00000000 	nop
8002ff28:	afa20078 	sw	v0,120(sp)
8002ff2c:	27a40078 	addiu	a0,sp,120
8002ff30:	afa40028 	sw	a0,40(sp)
8002ff34:	0c00ad89 	jal	8002b624 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h05e23529e4b1162bE>
8002ff38:	00000000 	nop
8002ff3c:	00400825 	move	at,v0
8002ff40:	8fa2002c 	lw	v0,44(sp)
8002ff44:	afa10024 	sw	at,36(sp)
8002ff48:	244400b4 	addiu	a0,v0,180
8002ff4c:	0c00a9d8 	jal	8002a760 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h9bd1f6a6a34f5585E>
8002ff50:	00000000 	nop
8002ff54:	8fa40024 	lw	a0,36(sp)
8002ff58:	00402825 	move	a1,v0
8002ff5c:	0c00ceb2 	jal	80033ac8 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E>
8002ff60:	00000000 	nop
8002ff64:	8fa40028 	lw	a0,40(sp)
8002ff68:	0c008c4e 	jal	80023138 <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h31092ada86abafaeE>
8002ff6c:	00000000 	nop
    ENV_FREE_LIST.lock().push(env.env_link.clone());
8002ff70:	3c018105 	lui	at,0x8105
8002ff74:	2424e74c 	addiu	a0,at,-6324
8002ff78:	0c00d3b9 	jal	80034ee4 <_ZN73_$LT$mos_6502..proc..ENV_FREE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h815af74f94b7a4d1E>
8002ff7c:	00000000 	nop
8002ff80:	00402025 	move	a0,v0
8002ff84:	0c00a117 	jal	8002845c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8c3735c4a0bdf507E>
8002ff88:	00000000 	nop
8002ff8c:	afa2007c 	sw	v0,124(sp)
8002ff90:	27a4007c 	addiu	a0,sp,124
8002ff94:	afa40034 	sw	a0,52(sp)
8002ff98:	0c00ad89 	jal	8002b624 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h05e23529e4b1162bE>
8002ff9c:	00000000 	nop
8002ffa0:	00400825 	move	at,v0
8002ffa4:	8fa2002c 	lw	v0,44(sp)
8002ffa8:	afa10030 	sw	at,48(sp)
8002ffac:	24440098 	addiu	a0,v0,152
8002ffb0:	0c00a9d8 	jal	8002a760 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h9bd1f6a6a34f5585E>
8002ffb4:	00000000 	nop
8002ffb8:	8fa40030 	lw	a0,48(sp)
8002ffbc:	00402825 	move	a1,v0
8002ffc0:	0c00ce36 	jal	800338d8 <_ZN8mos_65024util16DoubleLinkedList4push17h4baa579cb5c043f4E>
8002ffc4:	00000000 	nop
8002ffc8:	8fa40034 	lw	a0,52(sp)
8002ffcc:	0c008c4e 	jal	80023138 <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h31092ada86abafaeE>
8002ffd0:	00000000 	nop
    let mut curenv = CUR_ENV.lock();
8002ffd4:	3c018105 	lui	at,0x8105
8002ffd8:	2424e74c 	addiu	a0,at,-6324
8002ffdc:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
8002ffe0:	00000000 	nop
8002ffe4:	00402025 	move	a0,v0
8002ffe8:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
8002ffec:	00000000 	nop
8002fff0:	8fa10038 	lw	at,56(sp)
8002fff4:	afa20080 	sw	v0,128(sp)
8002fff8:	a3a10086 	sb	at,134(sp)
8002fffc:	27a40080 	addiu	a0,sp,128
    if let Some(curidx) = *curenv {
80030000:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
80030004:	00000000 	nop
80030008:	00400825 	move	at,v0
8003000c:	8fa20038 	lw	v0,56(sp)
80030010:	00201825 	move	v1,at
80030014:	afa3003c 	sw	v1,60(sp)
80030018:	8c210000 	lw	at,0(at)
8003001c:	1422000b 	bne	at,v0,8003004c <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x2f8>
80030020:	00000000 	nop
80030024:	0800c00b 	j	8003002c <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x2d8>
80030028:	00000000 	nop
8003002c:	8fa1003c 	lw	at,60(sp)
80030030:	8c210004 	lw	at,4(at)
80030034:	afa10090 	sw	at,144(sp)
        if curidx == idx {
80030038:	8fa2004c 	lw	v0,76(sp)
8003003c:	10220009 	beq	at,v0,80030064 <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x310>
80030040:	00000000 	nop
80030044:	0800c013 	j	8003004c <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x2f8>
80030048:	00000000 	nop
            drop(env_list);
            schedule(false);
        }
    }
    return 0;
}
8003004c:	93a10086 	lbu	at,134(sp)
80030050:	30210001 	andi	at,at,0x1
80030054:	1420002d 	bnez	at,8003010c <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x3b8>
80030058:	00000000 	nop
8003005c:	0800c03b 	j	800300ec <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x398>
80030060:	00000000 	nop
80030064:	27a40080 	addiu	a0,sp,128
            curenv.take().unwrap();
80030068:	0c00adb3 	jal	8002b6cc <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc76053e0a705b1f2E>
8003006c:	00000000 	nop
80030070:	00402025 	move	a0,v0
80030074:	0c009650 	jal	80025940 <_ZN4core6option15Option$LT$T$GT$4take17h6b346601cf701b05E>
80030078:	00000000 	nop
8003007c:	afa200a8 	sw	v0,168(sp)
80030080:	afa300ac 	sw	v1,172(sp)
        match self {
80030084:	8fa100a8 	lw	at,168(sp)
80030088:	14200007 	bnez	at,800300a8 <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x354>
8003008c:	00000000 	nop
80030090:	0800c026 	j	80030098 <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x344>
80030094:	00000000 	nop
            None => unwrap_failed(),
80030098:	3c018105 	lui	at,0x8105
8003009c:	2424dc40 	addiu	a0,at,-9152
800300a0:	0c00f1b6 	jal	8003c6d8 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
800300a4:	00000000 	nop
            Some(val) => val,
800300a8:	8fa100ac 	lw	at,172(sp)
800300ac:	afa100b0 	sw	at,176(sp)
800300b0:	24010000 	li	at,0
800300b4:	afa1001c 	sw	at,28(sp)
            drop(curenv);
800300b8:	a3a00086 	sb	zero,134(sp)
800300bc:	8fa40080 	lw	a0,128(sp)
800300c0:	0c00845d 	jal	80021174 <_ZN4core3mem4drop17h57b29ba27a256b10E>
800300c4:	00000000 	nop
            drop(env_list);
800300c8:	a3a00087 	sb	zero,135(sp)
800300cc:	8fa40070 	lw	a0,112(sp)
800300d0:	0c008467 	jal	8002119c <_ZN4core3mem4drop17ha0064f35510a6787E>
800300d4:	00000000 	nop
800300d8:	8fa4001c 	lw	a0,28(sp)
            schedule(false);
800300dc:	0c00b512 	jal	8002d448 <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E>
800300e0:	00000000 	nop
800300e4:	0800c013 	j	8003004c <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x2f8>
800300e8:	00000000 	nop
800300ec:	24010000 	li	at,0
}
800300f0:	a3a00086 	sb	zero,134(sp)
800300f4:	93a10087 	lbu	at,135(sp)
800300f8:	30210001 	andi	at,at,0x1
800300fc:	1420000e 	bnez	at,80030138 <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x3e4>
80030100:	00000000 	nop
80030104:	0800c048 	j	80030120 <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x3cc>
80030108:	00000000 	nop
8003010c:	27a40080 	addiu	a0,sp,128
80030110:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
80030114:	00000000 	nop
80030118:	0800c03b 	j	800300ec <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x398>
8003011c:	00000000 	nop
80030120:	24020000 	li	v0,0
80030124:	a3a00087 	sb	zero,135(sp)
80030128:	8fbf00dc 	lw	ra,220(sp)
8003012c:	27bd00e0 	addiu	sp,sp,224
80030130:	03e00008 	jr	ra
80030134:	00000000 	nop
80030138:	27a40070 	addiu	a0,sp,112
8003013c:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
80030140:	00000000 	nop
80030144:	0800c048 	j	80030120 <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E+0x3cc>
80030148:	00000000 	nop

8003014c <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17hdfb40fab8e4d9146E>:

fn sys_set_tlb_mod_entry(envid: usize, func: usize) -> i32 {
8003014c:	27bdff98 	addiu	sp,sp,-104
80030150:	afbf0064 	sw	ra,100(sp)
80030154:	afa50024 	sw	a1,36(sp)
80030158:	afa40028 	sw	a0,40(sp)
8003015c:	afa40030 	sw	a0,48(sp)
80030160:	afa50034 	sw	a1,52(sp)
80030164:	afa4005c 	sw	a0,92(sp)
    if envid == 0 {
80030168:	14800016 	bnez	a0,800301c4 <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17hdfb40fab8e4d9146E+0x78>
8003016c:	00000000 	nop
80030170:	0800c05e 	j	80030178 <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17hdfb40fab8e4d9146E+0x2c>
80030174:	00000000 	nop
        let cur_env = CUR_ENV.lock();
80030178:	3c018105 	lui	at,0x8105
8003017c:	2424e74c 	addiu	a0,at,-6324
80030180:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
80030184:	00000000 	nop
80030188:	00402025 	move	a0,v0
8003018c:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
80030190:	00000000 	nop
80030194:	afa20040 	sw	v0,64(sp)
80030198:	27a40040 	addiu	a0,sp,64
        if let Some(idx) = *cur_env {
8003019c:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
800301a0:	00000000 	nop
800301a4:	00400825 	move	at,v0
800301a8:	afa10020 	sw	at,32(sp)
800301ac:	8c410000 	lw	at,0(v0)
800301b0:	24020001 	li	v0,1
800301b4:	10220008 	beq	at,v0,800301d8 <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17hdfb40fab8e4d9146E+0x8c>
800301b8:	00000000 	nop
800301bc:	0800c07f 	j	800301fc <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17hdfb40fab8e4d9146E+0xb0>
800301c0:	00000000 	nop
    return envid & (NENV - 1);
800301c4:	8fa10028 	lw	at,40(sp)
800301c8:	302103ff 	andi	at,at,0x3ff
800301cc:	afa1003c 	sw	at,60(sp)
800301d0:	0800c08b 	j	8003022c <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17hdfb40fab8e4d9146E+0xe0>
800301d4:	00000000 	nop
        if let Some(idx) = *cur_env {
800301d8:	8fa10020 	lw	at,32(sp)
800301dc:	8c210004 	lw	at,4(at)
800301e0:	afa10060 	sw	at,96(sp)
            return idx;
800301e4:	afa1003c 	sw	at,60(sp)
800301e8:	27a40040 	addiu	a0,sp,64
    }
800301ec:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
800301f0:	00000000 	nop
800301f4:	0800c08b 	j	8003022c <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17hdfb40fab8e4d9146E+0xe0>
800301f8:	00000000 	nop
            panic!("No current env.\n");
800301fc:	3c018105 	lui	at,0x8105
80030200:	2425d978 	addiu	a1,at,-9864
80030204:	27a40044 	addiu	a0,sp,68
80030208:	afa4001c 	sw	a0,28(sp)
8003020c:	24060001 	li	a2,1
80030210:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
80030214:	00000000 	nop
80030218:	8fa4001c 	lw	a0,28(sp)
8003021c:	3c018105 	lui	at,0x8105
80030220:	2425d980 	addiu	a1,at,-9856
80030224:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80030228:	00000000 	nop
}
8003022c:	8fa1003c 	lw	at,60(sp)
80030230:	afa10014 	sw	at,20(sp)
    let idx = get_idx_by_envid(envid);
80030234:	afa10038 	sw	at,56(sp)
    let mut envs = ENV_LIST.lock();
80030238:	3c018105 	lui	at,0x8105
8003023c:	2424e74c 	addiu	a0,at,-6324
80030240:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
80030244:	00000000 	nop
80030248:	00402025 	move	a0,v0
8003024c:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
80030250:	00000000 	nop
80030254:	afa2002c 	sw	v0,44(sp)
80030258:	27a4002c 	addiu	a0,sp,44
8003025c:	afa40018 	sw	a0,24(sp)
    envs[idx].env_user_tlb_mod_entry = func;
80030260:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
80030264:	00000000 	nop
80030268:	8fa50014 	lw	a1,20(sp)
8003026c:	00402025 	move	a0,v0
80030270:	3c018105 	lui	at,0x8105
80030274:	2426dc50 	addiu	a2,at,-9136
80030278:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
8003027c:	00000000 	nop
80030280:	8fa10024 	lw	at,36(sp)
80030284:	8fa40018 	lw	a0,24(sp)
80030288:	ac4100d4 	sw	at,212(v0)
    return 0;
}
8003028c:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
80030290:	00000000 	nop
80030294:	24020000 	li	v0,0
80030298:	8fbf0064 	lw	ra,100(sp)
8003029c:	27bd0068 	addiu	sp,sp,104
800302a0:	03e00008 	jr	ra
800302a4:	00000000 	nop

800302a8 <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E>:

fn sys_mem_alloc(envid: usize, va: VirtAddr, perm: Permssion) -> i32 {
800302a8:	27bdff60 	addiu	sp,sp,-160
800302ac:	afbf009c 	sw	ra,156(sp)
800302b0:	afa50028 	sw	a1,40(sp)
800302b4:	afa4002c 	sw	a0,44(sp)
800302b8:	afa60030 	sw	a2,48(sp)
800302bc:	afa40050 	sw	a0,80(sp)
800302c0:	afa50054 	sw	a1,84(sp)
800302c4:	afa50094 	sw	a1,148(sp)
    }
}

#[inline(always)]
fn is_illegal_va(va: VirtAddr) -> bool {
    return va < UTEMP || va >= UTOP;
800302c8:	3c018105 	lui	at,0x8105
800302cc:	2425d1a4 	addiu	a1,at,-11868
800302d0:	27a40094 	addiu	a0,sp,148
800302d4:	0c0082ef 	jal	80020bbc <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E>
800302d8:	00000000 	nop
800302dc:	1440000b 	bnez	v0,8003030c <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x64>
800302e0:	00000000 	nop
800302e4:	0800c0bb 	j	800302ec <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x44>
800302e8:	00000000 	nop
800302ec:	3c018105 	lui	at,0x8105
800302f0:	2425d1a8 	addiu	a1,at,-11864
800302f4:	27a40094 	addiu	a0,sp,148
800302f8:	0c008265 	jal	80020994 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE>
800302fc:	00000000 	nop
80030300:	a3a2009b 	sb	v0,155(sp)
80030304:	0800c0c7 	j	8003031c <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x74>
80030308:	00000000 	nop
8003030c:	24010001 	li	at,1
80030310:	a3a1009b 	sb	at,155(sp)
80030314:	0800c0c7 	j	8003031c <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x74>
80030318:	00000000 	nop
}
8003031c:	93a1009b 	lbu	at,155(sp)
80030320:	30210001 	andi	at,at,0x1
    if is_illegal_va(va) {
80030324:	1420006f 	bnez	at,800304e4 <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x23c>
80030328:	00000000 	nop
8003032c:	0800c0cd 	j	80030334 <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x8c>
80030330:	00000000 	nop
80030334:	8fa1002c 	lw	at,44(sp)
80030338:	afa1008c 	sw	at,140(sp)
    if envid == 0 {
8003033c:	14200016 	bnez	at,80030398 <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0xf0>
80030340:	00000000 	nop
80030344:	0800c0d3 	j	8003034c <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0xa4>
80030348:	00000000 	nop
        let cur_env = CUR_ENV.lock();
8003034c:	3c018105 	lui	at,0x8105
80030350:	2424e74c 	addiu	a0,at,-6324
80030354:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
80030358:	00000000 	nop
8003035c:	00402025 	move	a0,v0
80030360:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
80030364:	00000000 	nop
80030368:	afa20070 	sw	v0,112(sp)
8003036c:	27a40070 	addiu	a0,sp,112
        if let Some(idx) = *cur_env {
80030370:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
80030374:	00000000 	nop
80030378:	00400825 	move	at,v0
8003037c:	afa10024 	sw	at,36(sp)
80030380:	8c410000 	lw	at,0(v0)
80030384:	24020001 	li	v0,1
80030388:	10220008 	beq	at,v0,800303ac <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x104>
8003038c:	00000000 	nop
80030390:	0800c0f4 	j	800303d0 <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x128>
80030394:	00000000 	nop
    return envid & (NENV - 1);
80030398:	8fa1002c 	lw	at,44(sp)
8003039c:	302103ff 	andi	at,at,0x3ff
800303a0:	afa1006c 	sw	at,108(sp)
800303a4:	0800c100 	j	80030400 <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x158>
800303a8:	00000000 	nop
        if let Some(idx) = *cur_env {
800303ac:	8fa10024 	lw	at,36(sp)
800303b0:	8c210004 	lw	at,4(at)
800303b4:	afa10090 	sw	at,144(sp)
            return idx;
800303b8:	afa1006c 	sw	at,108(sp)
800303bc:	27a40070 	addiu	a0,sp,112
    }
800303c0:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
800303c4:	00000000 	nop
800303c8:	0800c100 	j	80030400 <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x158>
800303cc:	00000000 	nop
            panic!("No current env.\n");
800303d0:	3c018105 	lui	at,0x8105
800303d4:	2425d978 	addiu	a1,at,-9864
800303d8:	27a40074 	addiu	a0,sp,116
800303dc:	afa40020 	sw	a0,32(sp)
800303e0:	24060001 	li	a2,1
800303e4:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
800303e8:	00000000 	nop
800303ec:	8fa40020 	lw	a0,32(sp)
800303f0:	3c018105 	lui	at,0x8105
800303f4:	2425d980 	addiu	a1,at,-9856
800303f8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800303fc:	00000000 	nop
}
80030400:	8fa1006c 	lw	at,108(sp)
80030404:	afa10018 	sw	at,24(sp)
    let idx = get_idx_by_envid(envid);
80030408:	afa10058 	sw	at,88(sp)
    let mut envs = ENV_LIST.lock();
8003040c:	3c018105 	lui	at,0x8105
80030410:	2424e74c 	addiu	a0,at,-6324
80030414:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
80030418:	00000000 	nop
8003041c:	00402025 	move	a0,v0
80030420:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
80030424:	00000000 	nop
80030428:	afa20038 	sw	v0,56(sp)
8003042c:	27a40038 	addiu	a0,sp,56
    let env = &mut envs[idx];
80030430:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
80030434:	00000000 	nop
80030438:	8fa50018 	lw	a1,24(sp)
8003043c:	00402025 	move	a0,v0
80030440:	3c018105 	lui	at,0x8105
80030444:	2426dc60 	addiu	a2,at,-9120
80030448:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
8003044c:	00000000 	nop
80030450:	00400825 	move	at,v0
80030454:	afa1001c 	sw	at,28(sp)
80030458:	afa2005c 	sw	v0,92(sp)
8003045c:	27a4003c 	addiu	a0,sp,60
    let (_, page_pa) = page_alloc().unwrap();
80030460:	0c00b007 	jal	8002c01c <_ZN8mos_65022mm4page10page_alloc17ha38ea23af0abb5c5E>
80030464:	00000000 	nop
        match self {
80030468:	8fa1003c 	lw	at,60(sp)
8003046c:	14200007 	bnez	at,8003048c <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x1e4>
80030470:	00000000 	nop
80030474:	0800c11f 	j	8003047c <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x1d4>
80030478:	00000000 	nop
            None => unwrap_failed(),
8003047c:	3c018105 	lui	at,0x8105
80030480:	2424dc70 	addiu	a0,at,-9104
80030484:	0c00f1b6 	jal	8003c6d8 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
80030488:	00000000 	nop
            Some(val) => val,
8003048c:	8fa50028 	lw	a1,40(sp)
80030490:	8fa1001c 	lw	at,28(sp)
80030494:	8fa20040 	lw	v0,64(sp)
80030498:	8fa60044 	lw	a2,68(sp)
8003049c:	afa20064 	sw	v0,100(sp)
800304a0:	afa60068 	sw	a2,104(sp)
800304a4:	afa60060 	sw	a2,96(sp)
    let result = env.env_pgdir.map_va_to_pa(va, page_pa, 1, &perm, false);
800304a8:	8c2400b0 	lw	a0,176(at)
800304ac:	03a00825 	move	at,sp
800304b0:	27a20030 	addiu	v0,sp,48
800304b4:	ac220010 	sw	v0,16(at)
800304b8:	ac200014 	sw	zero,20(at)
800304bc:	24070001 	li	a3,1
800304c0:	0c00b117 	jal	8002c45c <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE>
800304c4:	00000000 	nop
800304c8:	afa20048 	sw	v0,72(sp)
800304cc:	afa3004c 	sw	v1,76(sp)
    if let Ok(_) = result {
800304d0:	8fa10048 	lw	at,72(sp)
800304d4:	10200007 	beqz	at,800304f4 <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x24c>
800304d8:	00000000 	nop
800304dc:	0800c140 	j	80030500 <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x258>
800304e0:	00000000 	nop
800304e4:	2401fffd 	li	at,-3
        return -E_INVAL;
800304e8:	afa10034 	sw	at,52(sp)
800304ec:	0800c149 	j	80030524 <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x27c>
800304f0:	00000000 	nop
        return 0;
800304f4:	afa00034 	sw	zero,52(sp)
800304f8:	0800c144 	j	80030510 <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x268>
800304fc:	00000000 	nop
80030500:	2401fffd 	li	at,-3
        return -E_INVAL;
80030504:	afa10034 	sw	at,52(sp)
80030508:	0800c144 	j	80030510 <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x268>
8003050c:	00000000 	nop
80030510:	27a40038 	addiu	a0,sp,56
}
80030514:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
80030518:	00000000 	nop
8003051c:	0800c149 	j	80030524 <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E+0x27c>
80030520:	00000000 	nop
80030524:	8fa20034 	lw	v0,52(sp)
80030528:	8fbf009c 	lw	ra,156(sp)
8003052c:	27bd00a0 	addiu	sp,sp,160
80030530:	03e00008 	jr	ra
80030534:	00000000 	nop

80030538 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E>:
fn sys_mem_map(
80030538:	27bdff18 	addiu	sp,sp,-232
8003053c:	afbf00e4 	sw	ra,228(sp)
80030540:	afa70038 	sw	a3,56(sp)
80030544:	afa6003c 	sw	a2,60(sp)
80030548:	afa50040 	sw	a1,64(sp)
8003054c:	afa40044 	sw	a0,68(sp)
80030550:	8fa100f8 	lw	at,248(sp)
80030554:	afa40060 	sw	a0,96(sp)
80030558:	afa50064 	sw	a1,100(sp)
8003055c:	afa60068 	sw	a2,104(sp)
80030560:	afa7006c 	sw	a3,108(sp)
80030564:	afa500dc 	sw	a1,220(sp)
    return va < UTEMP || va >= UTOP;
80030568:	3c018105 	lui	at,0x8105
8003056c:	2425d1a4 	addiu	a1,at,-11868
80030570:	27a400dc 	addiu	a0,sp,220
80030574:	0c0082ef 	jal	80020bbc <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E>
80030578:	00000000 	nop
8003057c:	1440000b 	bnez	v0,800305ac <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x74>
80030580:	00000000 	nop
80030584:	0800c163 	j	8003058c <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x54>
80030588:	00000000 	nop
8003058c:	3c018105 	lui	at,0x8105
80030590:	2425d1a8 	addiu	a1,at,-11864
80030594:	27a400dc 	addiu	a0,sp,220
80030598:	0c008265 	jal	80020994 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE>
8003059c:	00000000 	nop
800305a0:	a3a200e3 	sb	v0,227(sp)
800305a4:	0800c16f 	j	800305bc <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x84>
800305a8:	00000000 	nop
800305ac:	24010001 	li	at,1
800305b0:	a3a100e3 	sb	at,227(sp)
800305b4:	0800c16f 	j	800305bc <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x84>
800305b8:	00000000 	nop
}
800305bc:	93a100e3 	lbu	at,227(sp)
800305c0:	30210001 	andi	at,at,0x1
    if is_illegal_va(srcva) || is_illegal_va(dstva) {
800305c4:	14200020 	bnez	at,80030648 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x110>
800305c8:	00000000 	nop
800305cc:	0800c175 	j	800305d4 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x9c>
800305d0:	00000000 	nop
800305d4:	8fa10038 	lw	at,56(sp)
800305d8:	afa100d4 	sw	at,212(sp)
    return va < UTEMP || va >= UTOP;
800305dc:	3c018105 	lui	at,0x8105
800305e0:	2425d1a4 	addiu	a1,at,-11868
800305e4:	27a400d4 	addiu	a0,sp,212
800305e8:	0c0082ef 	jal	80020bbc <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E>
800305ec:	00000000 	nop
800305f0:	1440000b 	bnez	v0,80030620 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0xe8>
800305f4:	00000000 	nop
800305f8:	0800c180 	j	80030600 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0xc8>
800305fc:	00000000 	nop
80030600:	3c018105 	lui	at,0x8105
80030604:	2425d1a8 	addiu	a1,at,-11864
80030608:	27a400d4 	addiu	a0,sp,212
8003060c:	0c008265 	jal	80020994 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE>
80030610:	00000000 	nop
80030614:	a3a200db 	sb	v0,219(sp)
80030618:	0800c18c 	j	80030630 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0xf8>
8003061c:	00000000 	nop
80030620:	24010001 	li	at,1
80030624:	a3a100db 	sb	at,219(sp)
80030628:	0800c18c 	j	80030630 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0xf8>
8003062c:	00000000 	nop
}
80030630:	93a100db 	lbu	at,219(sp)
80030634:	30210001 	andi	at,at,0x1
    if is_illegal_va(srcva) || is_illegal_va(dstva) {
80030638:	10200007 	beqz	at,80030658 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x120>
8003063c:	00000000 	nop
80030640:	0800c192 	j	80030648 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x110>
80030644:	00000000 	nop
80030648:	2401fffd 	li	at,-3
        return -E_INVAL;
8003064c:	afa10048 	sw	at,72(sp)
80030650:	0800c24d 	j	80030934 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x3fc>
80030654:	00000000 	nop
80030658:	8fa10044 	lw	at,68(sp)
8003065c:	afa100cc 	sw	at,204(sp)
    if envid == 0 {
80030660:	14200016 	bnez	at,800306bc <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x184>
80030664:	00000000 	nop
80030668:	0800c19c 	j	80030670 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x138>
8003066c:	00000000 	nop
        let cur_env = CUR_ENV.lock();
80030670:	3c018105 	lui	at,0x8105
80030674:	2424e74c 	addiu	a0,at,-6324
80030678:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
8003067c:	00000000 	nop
80030680:	00402025 	move	a0,v0
80030684:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
80030688:	00000000 	nop
8003068c:	afa200b0 	sw	v0,176(sp)
80030690:	27a400b0 	addiu	a0,sp,176
        if let Some(idx) = *cur_env {
80030694:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
80030698:	00000000 	nop
8003069c:	00400825 	move	at,v0
800306a0:	afa10034 	sw	at,52(sp)
800306a4:	8c410000 	lw	at,0(v0)
800306a8:	24020001 	li	v0,1
800306ac:	10220008 	beq	at,v0,800306d0 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x198>
800306b0:	00000000 	nop
800306b4:	0800c1bd 	j	800306f4 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x1bc>
800306b8:	00000000 	nop
    return envid & (NENV - 1);
800306bc:	8fa10044 	lw	at,68(sp)
800306c0:	302103ff 	andi	at,at,0x3ff
800306c4:	afa100ac 	sw	at,172(sp)
800306c8:	0800c1c9 	j	80030724 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x1ec>
800306cc:	00000000 	nop
        if let Some(idx) = *cur_env {
800306d0:	8fa10034 	lw	at,52(sp)
800306d4:	8c210004 	lw	at,4(at)
800306d8:	afa100d0 	sw	at,208(sp)
            return idx;
800306dc:	afa100ac 	sw	at,172(sp)
800306e0:	27a400b0 	addiu	a0,sp,176
    }
800306e4:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
800306e8:	00000000 	nop
800306ec:	0800c1c9 	j	80030724 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x1ec>
800306f0:	00000000 	nop
            panic!("No current env.\n");
800306f4:	3c018105 	lui	at,0x8105
800306f8:	2425d978 	addiu	a1,at,-9864
800306fc:	27a400b4 	addiu	a0,sp,180
80030700:	afa40030 	sw	a0,48(sp)
80030704:	24060001 	li	a2,1
80030708:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
8003070c:	00000000 	nop
80030710:	8fa40030 	lw	a0,48(sp)
80030714:	3c018105 	lui	at,0x8105
80030718:	2425d980 	addiu	a1,at,-9856
8003071c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80030720:	00000000 	nop
}
80030724:	8fa1003c 	lw	at,60(sp)
80030728:	8fa200ac 	lw	v0,172(sp)
8003072c:	afa2002c 	sw	v0,44(sp)
    let srcidx = get_idx_by_envid(srcid);
80030730:	afa20070 	sw	v0,112(sp)
80030734:	afa100a4 	sw	at,164(sp)
    if envid == 0 {
80030738:	14200016 	bnez	at,80030794 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x25c>
8003073c:	00000000 	nop
80030740:	0800c1d2 	j	80030748 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x210>
80030744:	00000000 	nop
        let cur_env = CUR_ENV.lock();
80030748:	3c018105 	lui	at,0x8105
8003074c:	2424e74c 	addiu	a0,at,-6324
80030750:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
80030754:	00000000 	nop
80030758:	00402025 	move	a0,v0
8003075c:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
80030760:	00000000 	nop
80030764:	afa20088 	sw	v0,136(sp)
80030768:	27a40088 	addiu	a0,sp,136
        if let Some(idx) = *cur_env {
8003076c:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
80030770:	00000000 	nop
80030774:	00400825 	move	at,v0
80030778:	afa10028 	sw	at,40(sp)
8003077c:	8c410000 	lw	at,0(v0)
80030780:	24020001 	li	v0,1
80030784:	10220008 	beq	at,v0,800307a8 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x270>
80030788:	00000000 	nop
8003078c:	0800c1f3 	j	800307cc <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x294>
80030790:	00000000 	nop
    return envid & (NENV - 1);
80030794:	8fa1003c 	lw	at,60(sp)
80030798:	302103ff 	andi	at,at,0x3ff
8003079c:	afa10084 	sw	at,132(sp)
800307a0:	0800c1ff 	j	800307fc <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x2c4>
800307a4:	00000000 	nop
        if let Some(idx) = *cur_env {
800307a8:	8fa10028 	lw	at,40(sp)
800307ac:	8c210004 	lw	at,4(at)
800307b0:	afa100a8 	sw	at,168(sp)
            return idx;
800307b4:	afa10084 	sw	at,132(sp)
800307b8:	27a40088 	addiu	a0,sp,136
    }
800307bc:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
800307c0:	00000000 	nop
800307c4:	0800c1ff 	j	800307fc <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x2c4>
800307c8:	00000000 	nop
            panic!("No current env.\n");
800307cc:	3c018105 	lui	at,0x8105
800307d0:	2425d978 	addiu	a1,at,-9864
800307d4:	27a4008c 	addiu	a0,sp,140
800307d8:	afa40024 	sw	a0,36(sp)
800307dc:	24060001 	li	a2,1
800307e0:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
800307e4:	00000000 	nop
800307e8:	8fa40024 	lw	a0,36(sp)
800307ec:	3c018105 	lui	at,0x8105
800307f0:	2425d980 	addiu	a1,at,-9856
800307f4:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800307f8:	00000000 	nop
}
800307fc:	8fa10084 	lw	at,132(sp)
80030800:	afa10020 	sw	at,32(sp)
    let dstidx = get_idx_by_envid(dstid);
80030804:	afa10074 	sw	at,116(sp)
    let mut envs = ENV_LIST.lock();
80030808:	3c018105 	lui	at,0x8105
8003080c:	2424e74c 	addiu	a0,at,-6324
80030810:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
80030814:	00000000 	nop
80030818:	00402025 	move	a0,v0
8003081c:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
80030820:	00000000 	nop
80030824:	afa2004c 	sw	v0,76(sp)
80030828:	27a4004c 	addiu	a0,sp,76
        let srcenv = &envs[srcidx];
8003082c:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
80030830:	00000000 	nop
80030834:	8fa5002c 	lw	a1,44(sp)
80030838:	00402025 	move	a0,v0
8003083c:	3c018105 	lui	at,0x8105
80030840:	2426dc80 	addiu	a2,at,-9088
80030844:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
80030848:	00000000 	nop
8003084c:	8fa50040 	lw	a1,64(sp)
80030850:	afa20078 	sw	v0,120(sp)
        match srcenv.env_pgdir.va_to_pa(srcva) {
80030854:	8c4400b0 	lw	a0,176(v0)
80030858:	0c00b37b 	jal	8002cdec <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E>
8003085c:	00000000 	nop
80030860:	afa20050 	sw	v0,80(sp)
80030864:	afa30054 	sw	v1,84(sp)
80030868:	8fa10050 	lw	at,80(sp)
8003086c:	10200021 	beqz	at,800308f4 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x3bc>
80030870:	00000000 	nop
80030874:	0800c21f 	j	8003087c <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x344>
80030878:	00000000 	nop
            Some((_, pa)) => pa,
8003087c:	8fa10054 	lw	at,84(sp)
80030880:	afa1001c 	sw	at,28(sp)
80030884:	afa1007c 	sw	at,124(sp)
80030888:	27a4004c 	addiu	a0,sp,76
    let dstenv = &mut envs[dstidx];
8003088c:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
80030890:	00000000 	nop
80030894:	8fa50020 	lw	a1,32(sp)
80030898:	00402025 	move	a0,v0
8003089c:	3c018105 	lui	at,0x8105
800308a0:	2426dc90 	addiu	a2,at,-9072
800308a4:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
800308a8:	00000000 	nop
800308ac:	8fa50038 	lw	a1,56(sp)
800308b0:	8fa6001c 	lw	a2,28(sp)
800308b4:	afa20080 	sw	v0,128(sp)
    let result = dstenv.env_pgdir.map_va_to_pa(dstva, pa, 1, &flags, false);
800308b8:	8c4400b0 	lw	a0,176(v0)
800308bc:	03a00825 	move	at,sp
800308c0:	27a200f8 	addiu	v0,sp,248
800308c4:	ac220010 	sw	v0,16(at)
800308c8:	ac200014 	sw	zero,20(at)
800308cc:	24070001 	li	a3,1
800308d0:	0c00b117 	jal	8002c45c <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE>
800308d4:	00000000 	nop
800308d8:	afa20058 	sw	v0,88(sp)
800308dc:	afa3005c 	sw	v1,92(sp)
    if let Ok(_) = result {
800308e0:	8fa10058 	lw	at,88(sp)
800308e4:	10200007 	beqz	at,80030904 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x3cc>
800308e8:	00000000 	nop
800308ec:	0800c244 	j	80030910 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x3d8>
800308f0:	00000000 	nop
800308f4:	2401fffd 	li	at,-3
            _ => return -E_INVAL,
800308f8:	afa10048 	sw	at,72(sp)
800308fc:	0800c248 	j	80030920 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x3e8>
80030900:	00000000 	nop
        return 0;
80030904:	afa00048 	sw	zero,72(sp)
80030908:	0800c248 	j	80030920 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x3e8>
8003090c:	00000000 	nop
80030910:	2401fffd 	li	at,-3
        return -E_INVAL;
80030914:	afa10048 	sw	at,72(sp)
80030918:	0800c248 	j	80030920 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x3e8>
8003091c:	00000000 	nop
80030920:	27a4004c 	addiu	a0,sp,76
}
80030924:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
80030928:	00000000 	nop
8003092c:	0800c24d 	j	80030934 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E+0x3fc>
80030930:	00000000 	nop
80030934:	8fa20048 	lw	v0,72(sp)
80030938:	8fbf00e4 	lw	ra,228(sp)
8003093c:	27bd00e8 	addiu	sp,sp,232
80030940:	03e00008 	jr	ra
80030944:	00000000 	nop

80030948 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E>:
fn sys_mem_unmap(envid: EnvIndex, va: VirtAddr) -> i32 {
80030948:	27bdff88 	addiu	sp,sp,-120
8003094c:	afbf0074 	sw	ra,116(sp)
80030950:	afa5001c 	sw	a1,28(sp)
80030954:	afa40020 	sw	a0,32(sp)
80030958:	afa40034 	sw	a0,52(sp)
8003095c:	afa50038 	sw	a1,56(sp)
80030960:	afa5006c 	sw	a1,108(sp)
    return va < UTEMP || va >= UTOP;
80030964:	3c018105 	lui	at,0x8105
80030968:	2425d1a4 	addiu	a1,at,-11868
8003096c:	27a4006c 	addiu	a0,sp,108
80030970:	0c0082ef 	jal	80020bbc <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E>
80030974:	00000000 	nop
80030978:	1440000b 	bnez	v0,800309a8 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x60>
8003097c:	00000000 	nop
80030980:	0800c262 	j	80030988 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x40>
80030984:	00000000 	nop
80030988:	3c018105 	lui	at,0x8105
8003098c:	2425d1a8 	addiu	a1,at,-11864
80030990:	27a4006c 	addiu	a0,sp,108
80030994:	0c008265 	jal	80020994 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE>
80030998:	00000000 	nop
8003099c:	a3a20073 	sb	v0,115(sp)
800309a0:	0800c26e 	j	800309b8 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x70>
800309a4:	00000000 	nop
800309a8:	24010001 	li	at,1
800309ac:	a3a10073 	sb	at,115(sp)
800309b0:	0800c26e 	j	800309b8 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x70>
800309b4:	00000000 	nop
}
800309b8:	93a10073 	lbu	at,115(sp)
800309bc:	30210001 	andi	at,at,0x1
    if is_illegal_va(va) {
800309c0:	14200056 	bnez	at,80030b1c <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x1d4>
800309c4:	00000000 	nop
800309c8:	0800c274 	j	800309d0 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x88>
800309cc:	00000000 	nop
800309d0:	8fa10020 	lw	at,32(sp)
800309d4:	afa10064 	sw	at,100(sp)
    if envid == 0 {
800309d8:	14200016 	bnez	at,80030a34 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0xec>
800309dc:	00000000 	nop
800309e0:	0800c27a 	j	800309e8 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0xa0>
800309e4:	00000000 	nop
        let cur_env = CUR_ENV.lock();
800309e8:	3c018105 	lui	at,0x8105
800309ec:	2424e74c 	addiu	a0,at,-6324
800309f0:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
800309f4:	00000000 	nop
800309f8:	00402025 	move	a0,v0
800309fc:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
80030a00:	00000000 	nop
80030a04:	afa20048 	sw	v0,72(sp)
80030a08:	27a40048 	addiu	a0,sp,72
        if let Some(idx) = *cur_env {
80030a0c:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
80030a10:	00000000 	nop
80030a14:	00400825 	move	at,v0
80030a18:	afa10018 	sw	at,24(sp)
80030a1c:	8c410000 	lw	at,0(v0)
80030a20:	24020001 	li	v0,1
80030a24:	10220008 	beq	at,v0,80030a48 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x100>
80030a28:	00000000 	nop
80030a2c:	0800c29b 	j	80030a6c <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x124>
80030a30:	00000000 	nop
    return envid & (NENV - 1);
80030a34:	8fa10020 	lw	at,32(sp)
80030a38:	302103ff 	andi	at,at,0x3ff
80030a3c:	afa10044 	sw	at,68(sp)
80030a40:	0800c2a7 	j	80030a9c <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x154>
80030a44:	00000000 	nop
        if let Some(idx) = *cur_env {
80030a48:	8fa10018 	lw	at,24(sp)
80030a4c:	8c210004 	lw	at,4(at)
80030a50:	afa10068 	sw	at,104(sp)
            return idx;
80030a54:	afa10044 	sw	at,68(sp)
80030a58:	27a40048 	addiu	a0,sp,72
    }
80030a5c:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
80030a60:	00000000 	nop
80030a64:	0800c2a7 	j	80030a9c <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x154>
80030a68:	00000000 	nop
            panic!("No current env.\n");
80030a6c:	3c018105 	lui	at,0x8105
80030a70:	2425d978 	addiu	a1,at,-9864
80030a74:	27a4004c 	addiu	a0,sp,76
80030a78:	afa40014 	sw	a0,20(sp)
80030a7c:	24060001 	li	a2,1
80030a80:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
80030a84:	00000000 	nop
80030a88:	8fa40014 	lw	a0,20(sp)
80030a8c:	3c018105 	lui	at,0x8105
80030a90:	2425d980 	addiu	a1,at,-9856
80030a94:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80030a98:	00000000 	nop
}
80030a9c:	8fa10044 	lw	at,68(sp)
80030aa0:	afa10010 	sw	at,16(sp)
    let idx = get_idx_by_envid(envid);
80030aa4:	afa1003c 	sw	at,60(sp)
    let mut envs = ENV_LIST.lock();
80030aa8:	3c018105 	lui	at,0x8105
80030aac:	2424e74c 	addiu	a0,at,-6324
80030ab0:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
80030ab4:	00000000 	nop
80030ab8:	00402025 	move	a0,v0
80030abc:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
80030ac0:	00000000 	nop
80030ac4:	afa20028 	sw	v0,40(sp)
80030ac8:	27a40028 	addiu	a0,sp,40
    let env = &mut envs[idx];
80030acc:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
80030ad0:	00000000 	nop
80030ad4:	8fa50010 	lw	a1,16(sp)
80030ad8:	00402025 	move	a0,v0
80030adc:	3c018105 	lui	at,0x8105
80030ae0:	2426dca0 	addiu	a2,at,-9056
80030ae4:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
80030ae8:	00000000 	nop
80030aec:	8fa5001c 	lw	a1,28(sp)
80030af0:	afa20040 	sw	v0,64(sp)
    if let Ok(_) = env.env_pgdir.unmap_va(va) {
80030af4:	8c4400b0 	lw	a0,176(v0)
80030af8:	0c00b2a2 	jal	8002ca88 <_ZN8mos_65022mm7pgtable7Pgtable8unmap_va17hf2273051dc0bde66E>
80030afc:	00000000 	nop
80030b00:	afa2002c 	sw	v0,44(sp)
80030b04:	afa30030 	sw	v1,48(sp)
80030b08:	8fa1002c 	lw	at,44(sp)
80030b0c:	10200007 	beqz	at,80030b2c <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x1e4>
80030b10:	00000000 	nop
80030b14:	0800c2ce 	j	80030b38 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x1f0>
80030b18:	00000000 	nop
80030b1c:	2401fffd 	li	at,-3
        return -E_INVAL;
80030b20:	afa10024 	sw	at,36(sp)
80030b24:	0800c2d7 	j	80030b5c <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x214>
80030b28:	00000000 	nop
        return 0;
80030b2c:	afa00024 	sw	zero,36(sp)
80030b30:	0800c2d2 	j	80030b48 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x200>
80030b34:	00000000 	nop
80030b38:	2401fffd 	li	at,-3
        return -E_INVAL;
80030b3c:	afa10024 	sw	at,36(sp)
80030b40:	0800c2d2 	j	80030b48 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x200>
80030b44:	00000000 	nop
80030b48:	27a40028 	addiu	a0,sp,40
}
80030b4c:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
80030b50:	00000000 	nop
80030b54:	0800c2d7 	j	80030b5c <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E+0x214>
80030b58:	00000000 	nop
80030b5c:	8fa20024 	lw	v0,36(sp)
80030b60:	8fbf0074 	lw	ra,116(sp)
80030b64:	27bd0078 	addiu	sp,sp,120
80030b68:	03e00008 	jr	ra
80030b6c:	00000000 	nop

80030b70 <_ZN8mos_65024trap7syscall11sys_exofork17h5eccdf66243b4c7eE>:
fn sys_exofork() -> i32 {
80030b70:	27bdff50 	addiu	sp,sp,-176
80030b74:	afbf00ac 	sw	ra,172(sp)
        let envs = ENV_LIST.lock();
80030b78:	3c018105 	lui	at,0x8105
80030b7c:	2424e74c 	addiu	a0,at,-6324
80030b80:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
80030b84:	00000000 	nop
80030b88:	00402025 	move	a0,v0
80030b8c:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
80030b90:	00000000 	nop
80030b94:	afa20050 	sw	v0,80(sp)
        let curenv_idx = CUR_ENV.lock();
80030b98:	3c018105 	lui	at,0x8105
80030b9c:	2424e74c 	addiu	a0,at,-6324
80030ba0:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
80030ba4:	00000000 	nop
80030ba8:	00402025 	move	a0,v0
80030bac:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
80030bb0:	00000000 	nop
80030bb4:	afa20054 	sw	v0,84(sp)
80030bb8:	27a40054 	addiu	a0,sp,84
        let curenv = match *curenv_idx {
80030bbc:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
80030bc0:	00000000 	nop
80030bc4:	00400825 	move	at,v0
80030bc8:	afa10044 	sw	at,68(sp)
80030bcc:	8c410000 	lw	at,0(v0)
80030bd0:	1420000f 	bnez	at,80030c10 <_ZN8mos_65024trap7syscall11sys_exofork17h5eccdf66243b4c7eE+0xa0>
80030bd4:	00000000 	nop
80030bd8:	0800c2f8 	j	80030be0 <_ZN8mos_65024trap7syscall11sys_exofork17h5eccdf66243b4c7eE+0x70>
80030bdc:	00000000 	nop
            None => panic!("sys_exofork: no curenv"),
80030be0:	3c018105 	lui	at,0x8105
80030be4:	2425dcc8 	addiu	a1,at,-9016
80030be8:	27a40058 	addiu	a0,sp,88
80030bec:	afa40040 	sw	a0,64(sp)
80030bf0:	24060001 	li	a2,1
80030bf4:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
80030bf8:	00000000 	nop
80030bfc:	8fa40040 	lw	a0,64(sp)
80030c00:	3c018105 	lui	at,0x8105
80030c04:	2425dcd0 	addiu	a1,at,-9008
80030c08:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80030c0c:	00000000 	nop
            Some(curidx) => &envs[curidx],
80030c10:	8fa10044 	lw	at,68(sp)
80030c14:	8c210004 	lw	at,4(at)
80030c18:	afa10024 	sw	at,36(sp)
80030c1c:	afa10088 	sw	at,136(sp)
80030c20:	27a40050 	addiu	a0,sp,80
80030c24:	afa40028 	sw	a0,40(sp)
80030c28:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
80030c2c:	00000000 	nop
80030c30:	8fa50024 	lw	a1,36(sp)
80030c34:	00402025 	move	a0,v0
80030c38:	3c018105 	lui	at,0x8105
80030c3c:	2426dce0 	addiu	a2,at,-8992
80030c40:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
80030c44:	00000000 	nop
80030c48:	00400825 	move	at,v0
80030c4c:	afa1008c 	sw	at,140(sp)
        (curenv.env_id, curenv.env_pri)
80030c50:	8c2200a0 	lw	v0,160(at)
80030c54:	8c2100bc 	lw	at,188(at)
80030c58:	afa20048 	sw	v0,72(sp)
80030c5c:	afa1004c 	sw	at,76(sp)
80030c60:	27a40054 	addiu	a0,sp,84
    };
80030c64:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
80030c68:	00000000 	nop
80030c6c:	8fa40028 	lw	a0,40(sp)
80030c70:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
80030c74:	00000000 	nop
    let (env_parent_id, env_pri) = {
80030c78:	8fa10048 	lw	at,72(sp)
80030c7c:	afa10090 	sw	at,144(sp)
80030c80:	8fa2004c 	lw	v0,76(sp)
80030c84:	afa2002c 	sw	v0,44(sp)
80030c88:	afa20094 	sw	v0,148(sp)
    let idx = proc::env_alloc(Some(env_parent_id)).expect("sys_exofork: env_alloc failed");
80030c8c:	afa1007c 	sw	at,124(sp)
80030c90:	24010001 	li	at,1
80030c94:	afa10078 	sw	at,120(sp)
80030c98:	8fa50078 	lw	a1,120(sp)
80030c9c:	8fa6007c 	lw	a2,124(sp)
80030ca0:	27a40070 	addiu	a0,sp,112
80030ca4:	afa40030 	sw	a0,48(sp)
80030ca8:	0c00bbb8 	jal	8002eee0 <_ZN8mos_65024proc9env_alloc17h5780294966a3eb3cE>
80030cac:	00000000 	nop
80030cb0:	8fa40030 	lw	a0,48(sp)
80030cb4:	3c018105 	lui	at,0x8105
80030cb8:	2425dcf0 	addiu	a1,at,-8976
80030cbc:	3c018105 	lui	at,0x8105
80030cc0:	2427dd10 	addiu	a3,at,-8944
80030cc4:	2406001d 	li	a2,29
80030cc8:	0c0097e4 	jal	80025f90 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha2b50f6124887a8cE>
80030ccc:	00000000 	nop
80030cd0:	afa20034 	sw	v0,52(sp)
80030cd4:	afa20098 	sw	v0,152(sp)
    let mut envs = ENV_LIST.lock();
80030cd8:	3c018105 	lui	at,0x8105
80030cdc:	2424e74c 	addiu	a0,at,-6324
80030ce0:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
80030ce4:	00000000 	nop
80030ce8:	00402025 	move	a0,v0
80030cec:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
80030cf0:	00000000 	nop
80030cf4:	afa20080 	sw	v0,128(sp)
80030cf8:	27a40080 	addiu	a0,sp,128
    let env = &mut envs[idx];
80030cfc:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
80030d00:	00000000 	nop
80030d04:	8fa50034 	lw	a1,52(sp)
80030d08:	00402025 	move	a0,v0
80030d0c:	3c018105 	lui	at,0x8105
80030d10:	2426dd20 	addiu	a2,at,-8928
80030d14:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
80030d18:	00000000 	nop
80030d1c:	00400825 	move	at,v0
80030d20:	afa10038 	sw	at,56(sp)
80030d24:	afa2009c 	sw	v0,156(sp)
            (&stack_end as *const usize as *const Trapframe as usize - size_of::<Trapframe>())
80030d28:	3c018108 	lui	at,0x8108
80030d2c:	24216000 	addiu	at,at,24576
80030d30:	2422ff68 	addiu	v0,at,-152
80030d34:	afa2003c 	sw	v0,60(sp)
80030d38:	2c210098 	sltiu	at,at,152
80030d3c:	14200033 	bnez	at,80030e0c <_ZN8mos_65024trap7syscall11sys_exofork17h5eccdf66243b4c7eE+0x29c>
80030d40:	00000000 	nop
80030d44:	0800c353 	j	80030d4c <_ZN8mos_65024trap7syscall11sys_exofork17h5eccdf66243b4c7eE+0x1dc>
80030d48:	00000000 	nop
80030d4c:	8fa10038 	lw	at,56(sp)
80030d50:	8fa2003c 	lw	v0,60(sp)
80030d54:	00401825 	move	v1,v0
80030d58:	afa30020 	sw	v1,32(sp)
80030d5c:	afa200a0 	sw	v0,160(sp)
80030d60:	afa100a4 	sw	at,164(sp)
80030d64:	24010001 	li	at,1
80030d68:	afa100a8 	sw	at,168(sp)
    ub_checks::assert_unsafe_precondition!(
80030d6c:	0c009805 	jal	80026014 <_ZN4core9ub_checks17check_language_ub17h12084e2c8033f9ddE>
80030d70:	00000000 	nop
80030d74:	1040000e 	beqz	v0,80030db0 <_ZN8mos_65024trap7syscall11sys_exofork17h5eccdf66243b4c7eE+0x240>
80030d78:	00000000 	nop
80030d7c:	0800c361 	j	80030d84 <_ZN8mos_65024trap7syscall11sys_exofork17h5eccdf66243b4c7eE+0x214>
80030d80:	00000000 	nop
80030d84:	8fa50038 	lw	a1,56(sp)
80030d88:	8fa40020 	lw	a0,32(sp)
80030d8c:	03a01025 	move	v0,sp
80030d90:	24010001 	li	at,1
80030d94:	ac410010 	sw	at,16(v0)
80030d98:	24060098 	li	a2,152
80030d9c:	24070004 	li	a3,4
80030da0:	0c008216 	jal	80020858 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h14137f51bd67fe62E>
80030da4:	00000000 	nop
80030da8:	0800c36c 	j	80030db0 <_ZN8mos_65024trap7syscall11sys_exofork17h5eccdf66243b4c7eE+0x240>
80030dac:	00000000 	nop
    unsafe { copy_nonoverlapping(src, dst, count) }
80030db0:	8fa40038 	lw	a0,56(sp)
80030db4:	8fa50020 	lw	a1,32(sp)
80030db8:	24060098 	li	a2,152
80030dbc:	0c00d3fd 	jal	80034ff4 <memcpy>
80030dc0:	00000000 	nop
80030dc4:	8fa10038 	lw	at,56(sp)
    env.env_tf.regs[2] = 0;
80030dc8:	8fa2002c 	lw	v0,44(sp)
80030dcc:	ac200008 	sw	zero,8(at)
80030dd0:	24030002 	li	v1,2
    env.env_status = EnvStatus::EnvNotRunnable;
80030dd4:	afa30084 	sw	v1,132(sp)
80030dd8:	8fa30084 	lw	v1,132(sp)
80030ddc:	ac2300ac 	sw	v1,172(at)
    env.env_pri = env_pri;
80030de0:	ac2200bc 	sw	v0,188(at)
    return env.env_id as i32;
80030de4:	8c2100a0 	lw	at,160(at)
80030de8:	afa1001c 	sw	at,28(sp)
80030dec:	27a40080 	addiu	a0,sp,128
}
80030df0:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
80030df4:	00000000 	nop
80030df8:	8fa2001c 	lw	v0,28(sp)
80030dfc:	8fbf00ac 	lw	ra,172(sp)
80030e00:	27bd00b0 	addiu	sp,sp,176
80030e04:	03e00008 	jr	ra
80030e08:	00000000 	nop
            (&stack_end as *const usize as *const Trapframe as usize - size_of::<Trapframe>())
80030e0c:	3c018105 	lui	at,0x8105
80030e10:	2424dd30 	addiu	a0,at,-8912
80030e14:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80030e18:	00000000 	nop

80030e1c <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E>:
fn sys_set_env_status(envid: usize, status: EnvStatus) -> i32 {
80030e1c:	27bdff80 	addiu	sp,sp,-128
80030e20:	afbf007c 	sw	ra,124(sp)
80030e24:	afa40034 	sw	a0,52(sp)
80030e28:	afa50038 	sw	a1,56(sp)
80030e2c:	afa4004c 	sw	a0,76(sp)
    if status != EnvStatus::EnvFree
80030e30:	3c018105 	lui	at,0x8105
80030e34:	2425d19c 	addiu	a1,at,-11876
80030e38:	27a40038 	addiu	a0,sp,56
80030e3c:	0c008325 	jal	80020c94 <_ZN4core3cmp9PartialEq2ne17hfe354b8f92e886abE>
80030e40:	00000000 	nop
80030e44:	14400053 	bnez	v0,80030f94 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x178>
80030e48:	00000000 	nop
80030e4c:	0800c395 	j	80030e54 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x38>
80030e50:	00000000 	nop
80030e54:	8fa10034 	lw	at,52(sp)
80030e58:	afa10074 	sw	at,116(sp)
    if envid == 0 {
80030e5c:	14200016 	bnez	at,80030eb8 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x9c>
80030e60:	00000000 	nop
80030e64:	0800c39b 	j	80030e6c <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x50>
80030e68:	00000000 	nop
        let cur_env = CUR_ENV.lock();
80030e6c:	3c018105 	lui	at,0x8105
80030e70:	2424e74c 	addiu	a0,at,-6324
80030e74:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
80030e78:	00000000 	nop
80030e7c:	00402025 	move	a0,v0
80030e80:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
80030e84:	00000000 	nop
80030e88:	afa20058 	sw	v0,88(sp)
80030e8c:	27a40058 	addiu	a0,sp,88
        if let Some(idx) = *cur_env {
80030e90:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
80030e94:	00000000 	nop
80030e98:	00400825 	move	at,v0
80030e9c:	afa10030 	sw	at,48(sp)
80030ea0:	8c410000 	lw	at,0(v0)
80030ea4:	24020001 	li	v0,1
80030ea8:	10220008 	beq	at,v0,80030ecc <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0xb0>
80030eac:	00000000 	nop
80030eb0:	0800c3bc 	j	80030ef0 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0xd4>
80030eb4:	00000000 	nop
    return envid & (NENV - 1);
80030eb8:	8fa10034 	lw	at,52(sp)
80030ebc:	302103ff 	andi	at,at,0x3ff
80030ec0:	afa10054 	sw	at,84(sp)
80030ec4:	0800c3c8 	j	80030f20 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x104>
80030ec8:	00000000 	nop
        if let Some(idx) = *cur_env {
80030ecc:	8fa10030 	lw	at,48(sp)
80030ed0:	8c210004 	lw	at,4(at)
80030ed4:	afa10078 	sw	at,120(sp)
            return idx;
80030ed8:	afa10054 	sw	at,84(sp)
80030edc:	27a40058 	addiu	a0,sp,88
    }
80030ee0:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
80030ee4:	00000000 	nop
80030ee8:	0800c3c8 	j	80030f20 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x104>
80030eec:	00000000 	nop
            panic!("No current env.\n");
80030ef0:	3c018105 	lui	at,0x8105
80030ef4:	2425d978 	addiu	a1,at,-9864
80030ef8:	27a4005c 	addiu	a0,sp,92
80030efc:	afa4002c 	sw	a0,44(sp)
80030f00:	24060001 	li	a2,1
80030f04:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
80030f08:	00000000 	nop
80030f0c:	8fa4002c 	lw	a0,44(sp)
80030f10:	3c018105 	lui	at,0x8105
80030f14:	2425d980 	addiu	a1,at,-9856
80030f18:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80030f1c:	00000000 	nop
}
80030f20:	8fa10054 	lw	at,84(sp)
80030f24:	afa10028 	sw	at,40(sp)
    let idx = get_idx_by_envid(envid);
80030f28:	afa10050 	sw	at,80(sp)
    let mut envs = ENV_LIST.lock();
80030f2c:	3c018105 	lui	at,0x8105
80030f30:	2424e74c 	addiu	a0,at,-6324
80030f34:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
80030f38:	00000000 	nop
80030f3c:	00402025 	move	a0,v0
80030f40:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
80030f44:	00000000 	nop
80030f48:	afa20040 	sw	v0,64(sp)
80030f4c:	27a40040 	addiu	a0,sp,64
        if envs[idx].env_status != EnvStatus::EnvRunnable && status == EnvStatus::EnvRunnable {
80030f50:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
80030f54:	00000000 	nop
80030f58:	8fa50028 	lw	a1,40(sp)
80030f5c:	00402025 	move	a0,v0
80030f60:	3c018105 	lui	at,0x8105
80030f64:	2426dd40 	addiu	a2,at,-8896
80030f68:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
80030f6c:	00000000 	nop
80030f70:	244400ac 	addiu	a0,v0,172
80030f74:	3c018105 	lui	at,0x8105
80030f78:	2425d194 	addiu	a1,at,-11884
80030f7c:	0c008325 	jal	80020c94 <_ZN4core3cmp9PartialEq2ne17hfe354b8f92e886abE>
80030f80:	00000000 	nop
80030f84:	1440002b 	bnez	v0,80031034 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x218>
80030f88:	00000000 	nop
80030f8c:	0800c3fb 	j	80030fec <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x1d0>
80030f90:	00000000 	nop
        && status != EnvStatus::EnvRunnable
80030f94:	3c018105 	lui	at,0x8105
80030f98:	2425d194 	addiu	a1,at,-11884
80030f9c:	27a40038 	addiu	a0,sp,56
80030fa0:	0c008325 	jal	80020c94 <_ZN4core3cmp9PartialEq2ne17hfe354b8f92e886abE>
80030fa4:	00000000 	nop
80030fa8:	1040ffaa 	beqz	v0,80030e54 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x38>
80030fac:	00000000 	nop
80030fb0:	0800c3ee 	j	80030fb8 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x19c>
80030fb4:	00000000 	nop
        && status != EnvStatus::EnvNotRunnable
80030fb8:	3c018105 	lui	at,0x8105
80030fbc:	2425d1a0 	addiu	a1,at,-11872
80030fc0:	27a40038 	addiu	a0,sp,56
80030fc4:	0c008325 	jal	80020c94 <_ZN4core3cmp9PartialEq2ne17hfe354b8f92e886abE>
80030fc8:	00000000 	nop
80030fcc:	1040ffa1 	beqz	v0,80030e54 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x38>
80030fd0:	00000000 	nop
80030fd4:	0800c3f7 	j	80030fdc <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x1c0>
80030fd8:	00000000 	nop
80030fdc:	2401fffd 	li	at,-3
        return -E_INVAL;
80030fe0:	afa1003c 	sw	at,60(sp)
80030fe4:	0800c477 	j	800311dc <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x3c0>
80030fe8:	00000000 	nop
80030fec:	27a40040 	addiu	a0,sp,64
        } else if envs[idx].env_status == EnvStatus::EnvRunnable && status != EnvStatus::EnvRunnable
80030ff0:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
80030ff4:	00000000 	nop
80030ff8:	8fa50028 	lw	a1,40(sp)
80030ffc:	00402025 	move	a0,v0
80031000:	3c018105 	lui	at,0x8105
80031004:	2426dd50 	addiu	a2,at,-8880
80031008:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
8003100c:	00000000 	nop
80031010:	244400ac 	addiu	a0,v0,172
80031014:	3c018105 	lui	at,0x8105
80031018:	2425d194 	addiu	a1,at,-11884
8003101c:	0c00d395 	jal	80034e54 <_ZN66_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd4d1600a4ff7132eE>
80031020:	00000000 	nop
80031024:	14400042 	bnez	v0,80031130 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x314>
80031028:	00000000 	nop
8003102c:	0800c438 	j	800310e0 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x2c4>
80031030:	00000000 	nop
        if envs[idx].env_status != EnvStatus::EnvRunnable && status == EnvStatus::EnvRunnable {
80031034:	3c018105 	lui	at,0x8105
80031038:	2425d194 	addiu	a1,at,-11884
8003103c:	27a40038 	addiu	a0,sp,56
80031040:	0c00d395 	jal	80034e54 <_ZN66_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd4d1600a4ff7132eE>
80031044:	00000000 	nop
80031048:	1040ffe8 	beqz	v0,80030fec <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x1d0>
8003104c:	00000000 	nop
80031050:	0800c416 	j	80031058 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x23c>
80031054:	00000000 	nop
            let mut env_sched_list = ENV_SCHED_LIST.lock();
80031058:	3c018105 	lui	at,0x8105
8003105c:	2424e74c 	addiu	a0,at,-6324
80031060:	0c00d3c5 	jal	80034f14 <_ZN74_$LT$mos_6502..proc..ENV_SCHED_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0db1b016a4f27e1fE>
80031064:	00000000 	nop
80031068:	00402025 	move	a0,v0
8003106c:	0c00a117 	jal	8002845c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8c3735c4a0bdf507E>
80031070:	00000000 	nop
80031074:	afa20044 	sw	v0,68(sp)
80031078:	27a40044 	addiu	a0,sp,68
8003107c:	afa40024 	sw	a0,36(sp)
            env_sched_list.push(envs[idx].env_sched_link.clone());
80031080:	0c00ad89 	jal	8002b624 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h05e23529e4b1162bE>
80031084:	00000000 	nop
80031088:	afa20020 	sw	v0,32(sp)
8003108c:	27a40040 	addiu	a0,sp,64
80031090:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
80031094:	00000000 	nop
80031098:	8fa50028 	lw	a1,40(sp)
8003109c:	00402025 	move	a0,v0
800310a0:	3c018105 	lui	at,0x8105
800310a4:	2426dd70 	addiu	a2,at,-8848
800310a8:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
800310ac:	00000000 	nop
800310b0:	244400b4 	addiu	a0,v0,180
800310b4:	0c00a9d8 	jal	8002a760 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h9bd1f6a6a34f5585E>
800310b8:	00000000 	nop
800310bc:	8fa40020 	lw	a0,32(sp)
800310c0:	00402825 	move	a1,v0
800310c4:	0c00ce36 	jal	800338d8 <_ZN8mos_65024util16DoubleLinkedList4push17h4baa579cb5c043f4E>
800310c8:	00000000 	nop
800310cc:	8fa40024 	lw	a0,36(sp)
        } else if envs[idx].env_status == EnvStatus::EnvRunnable && status != EnvStatus::EnvRunnable
800310d0:	0c008c4e 	jal	80023138 <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h31092ada86abafaeE>
800310d4:	00000000 	nop
800310d8:	0800c438 	j	800310e0 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x2c4>
800310dc:	00000000 	nop
    envs[idx].env_status = status;
800310e0:	8fa10038 	lw	at,56(sp)
800310e4:	afa10018 	sw	at,24(sp)
800310e8:	27a40040 	addiu	a0,sp,64
800310ec:	afa4001c 	sw	a0,28(sp)
800310f0:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
800310f4:	00000000 	nop
800310f8:	8fa50028 	lw	a1,40(sp)
800310fc:	00402025 	move	a0,v0
80031100:	3c018105 	lui	at,0x8105
80031104:	2426dd80 	addiu	a2,at,-8832
80031108:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
8003110c:	00000000 	nop
80031110:	8fa10018 	lw	at,24(sp)
80031114:	8fa4001c 	lw	a0,28(sp)
80031118:	ac4100ac 	sw	at,172(v0)
    return 0;
8003111c:	afa0003c 	sw	zero,60(sp)
}
80031120:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
80031124:	00000000 	nop
80031128:	0800c477 	j	800311dc <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x3c0>
8003112c:	00000000 	nop
        } else if envs[idx].env_status == EnvStatus::EnvRunnable && status != EnvStatus::EnvRunnable
80031130:	3c018105 	lui	at,0x8105
80031134:	2425d194 	addiu	a1,at,-11884
80031138:	27a40038 	addiu	a0,sp,56
8003113c:	0c008325 	jal	80020c94 <_ZN4core3cmp9PartialEq2ne17hfe354b8f92e886abE>
80031140:	00000000 	nop
80031144:	1040ffe6 	beqz	v0,800310e0 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x2c4>
80031148:	00000000 	nop
8003114c:	0800c455 	j	80031154 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x338>
80031150:	00000000 	nop
            let mut env_sched_list = ENV_SCHED_LIST.lock();
80031154:	3c018105 	lui	at,0x8105
80031158:	2424e74c 	addiu	a0,at,-6324
8003115c:	0c00d3c5 	jal	80034f14 <_ZN74_$LT$mos_6502..proc..ENV_SCHED_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0db1b016a4f27e1fE>
80031160:	00000000 	nop
80031164:	00402025 	move	a0,v0
80031168:	0c00a117 	jal	8002845c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h8c3735c4a0bdf507E>
8003116c:	00000000 	nop
80031170:	afa20048 	sw	v0,72(sp)
80031174:	27a40048 	addiu	a0,sp,72
80031178:	afa40014 	sw	a0,20(sp)
            env_sched_list.remove(envs[idx].env_sched_link.clone());
8003117c:	0c00ad89 	jal	8002b624 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h05e23529e4b1162bE>
80031180:	00000000 	nop
80031184:	afa20010 	sw	v0,16(sp)
80031188:	27a40040 	addiu	a0,sp,64
8003118c:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
80031190:	00000000 	nop
80031194:	8fa50028 	lw	a1,40(sp)
80031198:	00402025 	move	a0,v0
8003119c:	3c018105 	lui	at,0x8105
800311a0:	2426dd60 	addiu	a2,at,-8864
800311a4:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
800311a8:	00000000 	nop
800311ac:	244400b4 	addiu	a0,v0,180
800311b0:	0c00a9d8 	jal	8002a760 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h9bd1f6a6a34f5585E>
800311b4:	00000000 	nop
800311b8:	8fa40010 	lw	a0,16(sp)
800311bc:	00402825 	move	a1,v0
800311c0:	0c00ceb2 	jal	80033ac8 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E>
800311c4:	00000000 	nop
800311c8:	8fa40014 	lw	a0,20(sp)
        }
800311cc:	0c008c4e 	jal	80023138 <_ZN4core3ptr86drop_in_place$LT$sync..spin..SpinlockGuard$LT$mos_6502..util..DoubleLinkedList$GT$$GT$17h31092ada86abafaeE>
800311d0:	00000000 	nop
800311d4:	0800c438 	j	800310e0 <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E+0x2c4>
800311d8:	00000000 	nop
}
800311dc:	8fa2003c 	lw	v0,60(sp)
800311e0:	8fbf007c 	lw	ra,124(sp)
800311e4:	27bd0080 	addiu	sp,sp,128
800311e8:	03e00008 	jr	ra
800311ec:	00000000 	nop

800311f0 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E>:
fn sys_set_trapframe(envid: usize, tf: VirtAddr) -> i32 {
800311f0:	27bdfe20 	addiu	sp,sp,-480
800311f4:	afbf01dc 	sw	ra,476(sp)
800311f8:	afa40034 	sw	a0,52(sp)
800311fc:	afa50038 	sw	a1,56(sp)
80031200:	afa40194 	sw	a0,404(sp)
    if is_illegal_va_range(tf, size_of::<Trapframe>()) {
80031204:	8fa40038 	lw	a0,56(sp)
80031208:	24050098 	li	a1,152
8003120c:	0c00c7c4 	jal	80031f10 <_ZN8mos_65024trap7syscall19is_illegal_va_range17h6dfe818f16dcee9dE>
80031210:	00000000 	nop
80031214:	14400054 	bnez	v0,80031368 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x178>
80031218:	00000000 	nop
8003121c:	0800c489 	j	80031224 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x34>
80031220:	00000000 	nop
80031224:	8fa10034 	lw	at,52(sp)
80031228:	afa101d4 	sw	at,468(sp)
    if envid == 0 {
8003122c:	14200016 	bnez	at,80031288 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x98>
80031230:	00000000 	nop
80031234:	0800c48f 	j	8003123c <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x4c>
80031238:	00000000 	nop
        let cur_env = CUR_ENV.lock();
8003123c:	3c018105 	lui	at,0x8105
80031240:	2424e74c 	addiu	a0,at,-6324
80031244:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
80031248:	00000000 	nop
8003124c:	00402025 	move	a0,v0
80031250:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
80031254:	00000000 	nop
80031258:	afa201b8 	sw	v0,440(sp)
8003125c:	27a401b8 	addiu	a0,sp,440
        if let Some(idx) = *cur_env {
80031260:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
80031264:	00000000 	nop
80031268:	00400825 	move	at,v0
8003126c:	afa10030 	sw	at,48(sp)
80031270:	8c410000 	lw	at,0(v0)
80031274:	24020001 	li	v0,1
80031278:	10220008 	beq	at,v0,8003129c <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0xac>
8003127c:	00000000 	nop
80031280:	0800c4b0 	j	800312c0 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0xd0>
80031284:	00000000 	nop
    return envid & (NENV - 1);
80031288:	8fa10034 	lw	at,52(sp)
8003128c:	302103ff 	andi	at,at,0x3ff
80031290:	afa101b4 	sw	at,436(sp)
80031294:	0800c4bc 	j	800312f0 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x100>
80031298:	00000000 	nop
        if let Some(idx) = *cur_env {
8003129c:	8fa10030 	lw	at,48(sp)
800312a0:	8c210004 	lw	at,4(at)
800312a4:	afa101d8 	sw	at,472(sp)
            return idx;
800312a8:	afa101b4 	sw	at,436(sp)
800312ac:	27a401b8 	addiu	a0,sp,440
    }
800312b0:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
800312b4:	00000000 	nop
800312b8:	0800c4bc 	j	800312f0 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x100>
800312bc:	00000000 	nop
            panic!("No current env.\n");
800312c0:	3c018105 	lui	at,0x8105
800312c4:	2425d978 	addiu	a1,at,-9864
800312c8:	27a401bc 	addiu	a0,sp,444
800312cc:	afa4002c 	sw	a0,44(sp)
800312d0:	24060001 	li	a2,1
800312d4:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
800312d8:	00000000 	nop
800312dc:	8fa4002c 	lw	a0,44(sp)
800312e0:	3c018105 	lui	at,0x8105
800312e4:	2425d980 	addiu	a1,at,-9856
800312e8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800312ec:	00000000 	nop
}
800312f0:	8fa101b4 	lw	at,436(sp)
800312f4:	afa10024 	sw	at,36(sp)
    let idx = get_idx_by_envid(envid);
800312f8:	afa10198 	sw	at,408(sp)
    let mut envs = ENV_LIST.lock();
800312fc:	3c018105 	lui	at,0x8105
80031300:	2424e74c 	addiu	a0,at,-6324
80031304:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
80031308:	00000000 	nop
8003130c:	00402025 	move	a0,v0
80031310:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
80031314:	00000000 	nop
80031318:	afa20040 	sw	v0,64(sp)
    let curenv_idx = CUR_ENV.lock();
8003131c:	3c018105 	lui	at,0x8105
80031320:	2424e74c 	addiu	a0,at,-6324
80031324:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
80031328:	00000000 	nop
8003132c:	00402025 	move	a0,v0
80031330:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
80031334:	00000000 	nop
80031338:	afa20044 	sw	v0,68(sp)
8003133c:	27a40044 	addiu	a0,sp,68
    if let Some(curidx) = *curenv_idx {
80031340:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
80031344:	00000000 	nop
80031348:	00400825 	move	at,v0
8003134c:	afa10028 	sw	at,40(sp)
80031350:	8c410000 	lw	at,0(v0)
80031354:	24020001 	li	v0,1
80031358:	10220007 	beq	at,v0,80031378 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x188>
8003135c:	00000000 	nop
80031360:	0800c4e6 	j	80031398 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x1a8>
80031364:	00000000 	nop
80031368:	2401fffd 	li	at,-3
        return -E_INVAL;
8003136c:	afa1003c 	sw	at,60(sp)
80031370:	0800c533 	j	800314cc <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x2dc>
80031374:	00000000 	nop
    if let Some(curidx) = *curenv_idx {
80031378:	8fa20024 	lw	v0,36(sp)
8003137c:	8fa10028 	lw	at,40(sp)
80031380:	8c210004 	lw	at,4(at)
80031384:	afa1019c 	sw	at,412(sp)
        if curidx != idx {
80031388:	14220018 	bne	at,v0,800313ec <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x1fc>
8003138c:	00000000 	nop
80031390:	0800c4f2 	j	800313c8 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x1d8>
80031394:	00000000 	nop
        panic!("sys_set_trapframe: no curenv");
80031398:	3c018105 	lui	at,0x8105
8003139c:	2425ddcc 	addiu	a1,at,-8756
800313a0:	27a4017c 	addiu	a0,sp,380
800313a4:	afa40020 	sw	a0,32(sp)
800313a8:	24060001 	li	a2,1
800313ac:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
800313b0:	00000000 	nop
800313b4:	8fa40020 	lw	a0,32(sp)
800313b8:	3c018105 	lui	at,0x8105
800313bc:	2425ddd4 	addiu	a1,at,-8748
800313c0:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800313c4:	00000000 	nop
                VirtAddr::new(stack_end as usize - size_of::<Trapframe>())
800313c8:	3c018108 	lui	at,0x8108
800313cc:	8c216000 	lw	at,24576(at)
800313d0:	2422ff68 	addiu	v0,at,-152
800313d4:	afa2001c 	sw	v0,28(sp)
800313d8:	2c210098 	sltiu	at,at,152
800313dc:	1420002e 	bnez	at,80031498 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x2a8>
800313e0:	00000000 	nop
800313e4:	0800c512 	j	80031448 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x258>
800313e8:	00000000 	nop
800313ec:	27a10038 	addiu	at,sp,56
800313f0:	afa101ac 	sw	at,428(sp)
        unsafe { ptr::read(self.raw as *const T) }
800313f4:	8fa50038 	lw	a1,56(sp)
800313f8:	27a40048 	addiu	a0,sp,72
800313fc:	afa40018 	sw	a0,24(sp)
80031400:	0c00898e 	jal	80022638 <_ZN4core3ptr4read17hb2fc3976f3669be9E>
80031404:	00000000 	nop
80031408:	27a40040 	addiu	a0,sp,64
            envs[idx].env_tf = tf.read();
8003140c:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
80031410:	00000000 	nop
80031414:	8fa50024 	lw	a1,36(sp)
80031418:	00402025 	move	a0,v0
8003141c:	3c018105 	lui	at,0x8105
80031420:	2426dda0 	addiu	a2,at,-8800
80031424:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
80031428:	00000000 	nop
8003142c:	8fa50018 	lw	a1,24(sp)
80031430:	00402025 	move	a0,v0
80031434:	24060098 	li	a2,152
80031438:	0c00d3fd 	jal	80034ff4 <memcpy>
8003143c:	00000000 	nop
        if curidx != idx {
80031440:	0800c52a 	j	800314a8 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x2b8>
80031444:	00000000 	nop
80031448:	8fa1001c 	lw	at,28(sp)
8003144c:	afa101a4 	sw	at,420(sp)
        VirtAddr { raw }
80031450:	afa101a0 	sw	at,416(sp)
    }
80031454:	8fa101a0 	lw	at,416(sp)
                VirtAddr::new(stack_end as usize - size_of::<Trapframe>())
80031458:	afa100e0 	sw	at,224(sp)
8003145c:	27a10038 	addiu	at,sp,56
80031460:	afa101b0 	sw	at,432(sp)
        unsafe { ptr::read(self.raw as *const T) }
80031464:	8fa50038 	lw	a1,56(sp)
80031468:	27a400e4 	addiu	a0,sp,228
8003146c:	afa40014 	sw	a0,20(sp)
80031470:	0c00898e 	jal	80022638 <_ZN4core3ptr4read17hb2fc3976f3669be9E>
80031474:	00000000 	nop
80031478:	8fa50014 	lw	a1,20(sp)
8003147c:	27a100e0 	addiu	at,sp,224
80031480:	afa101a8 	sw	at,424(sp)
            ptr::write(self.raw as *mut T, src);
80031484:	8fa400e0 	lw	a0,224(sp)
80031488:	0c008a5a 	jal	80022968 <_ZN4core3ptr5write17h57dba2268c05fb43E>
8003148c:	00000000 	nop
80031490:	0800c52a 	j	800314a8 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x2b8>
80031494:	00000000 	nop
80031498:	3c018105 	lui	at,0x8105
8003149c:	2424dd90 	addiu	a0,at,-8816
800314a0:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800314a4:	00000000 	nop
    return 0;
800314a8:	afa0003c 	sw	zero,60(sp)
800314ac:	27a40044 	addiu	a0,sp,68
}
800314b0:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
800314b4:	00000000 	nop
800314b8:	27a40040 	addiu	a0,sp,64
800314bc:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
800314c0:	00000000 	nop
800314c4:	0800c533 	j	800314cc <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E+0x2dc>
800314c8:	00000000 	nop
800314cc:	8fa2003c 	lw	v0,60(sp)
800314d0:	8fbf01dc 	lw	ra,476(sp)
800314d4:	27bd01e0 	addiu	sp,sp,480
800314d8:	03e00008 	jr	ra
800314dc:	00000000 	nop

800314e0 <_ZN8mos_65024trap7syscall9sys_panic17h4c99e4f832c261e4E>:
fn sys_panic(msg: VirtAddr) -> ! {
800314e0:	27bdffb0 	addiu	sp,sp,-80
800314e4:	afbf004c 	sw	ra,76(sp)
800314e8:	afa40018 	sw	a0,24(sp)
800314ec:	afa40040 	sw	a0,64(sp)
    let mut i = 0;
800314f0:	afa00020 	sw	zero,32(sp)
    print!("user panic: ");
800314f4:	3c018105 	lui	at,0x8105
800314f8:	2425ddf0 	addiu	a1,at,-8720
800314fc:	27a40024 	addiu	a0,sp,36
80031500:	afa4001c 	sw	a0,28(sp)
80031504:	24060001 	li	a2,1
80031508:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
8003150c:	00000000 	nop
80031510:	8fa4001c 	lw	a0,28(sp)
80031514:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
80031518:	00000000 	nop
8003151c:	0800c549 	j	80031524 <_ZN8mos_65024trap7syscall9sys_panic17h4c99e4f832c261e4E+0x44>
80031520:	00000000 	nop
        ch = msg.add(i).read::<u8>().into();
80031524:	8fa40018 	lw	a0,24(sp)
80031528:	8fa50020 	lw	a1,32(sp)
8003152c:	0c00af2c 	jal	8002bcb0 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17hf63c307524190caaE>
80031530:	00000000 	nop
80031534:	afa2003c 	sw	v0,60(sp)
80031538:	27a1003c 	addiu	at,sp,60
8003153c:	afa10048 	sw	at,72(sp)
        unsafe { ptr::read(self.raw as *const T) }
80031540:	8fa4003c 	lw	a0,60(sp)
80031544:	0c00e708 	jal	80039c20 <_ZN4core3ptr4read17h577826971f2136a4E>
80031548:	00000000 	nop
8003154c:	00402025 	move	a0,v0
80031550:	3c018105 	lui	at,0x8105
80031554:	2425ddf8 	addiu	a1,at,-8712
80031558:	0c00a198 	jal	80028660 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h2d9fefc39387fa18E>
8003155c:	00000000 	nop
80031560:	00400825 	move	at,v0
80031564:	afa10014 	sw	at,20(sp)
80031568:	afa20044 	sw	v0,68(sp)
        if ch == 0 {
8003156c:	14400005 	bnez	v0,80031584 <_ZN8mos_65024trap7syscall9sys_panic17h4c99e4f832c261e4E+0xa4>
80031570:	00000000 	nop
80031574:	0800c55f 	j	8003157c <_ZN8mos_65024trap7syscall9sys_panic17h4c99e4f832c261e4E+0x9c>
80031578:	00000000 	nop
    dev::halt();
8003157c:	0c00aeb6 	jal	8002bad8 <_ZN8mos_65023dev4halt17hed598abf4ab60b77E>
80031580:	00000000 	nop
        NS16550A.putchar(ch);
80031584:	3c018105 	lui	at,0x8105
80031588:	2424e6a4 	addiu	a0,at,-6492
8003158c:	0c00d150 	jal	80034540 <_ZN73_$LT$mos_6502..dev..uart..NS16550A$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbf8d16e6e776ffa2E>
80031590:	00000000 	nop
80031594:	8fa50014 	lw	a1,20(sp)
80031598:	00402025 	move	a0,v0
8003159c:	0c00ae68 	jal	8002b9a0 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7putchar17hdc63989b1e2e1ef3E>
800315a0:	00000000 	nop
        i += 1;
800315a4:	8fa10020 	lw	at,32(sp)
800315a8:	24210001 	addiu	at,at,1
800315ac:	afa10010 	sw	at,16(sp)
800315b0:	10200007 	beqz	at,800315d0 <_ZN8mos_65024trap7syscall9sys_panic17h4c99e4f832c261e4E+0xf0>
800315b4:	00000000 	nop
800315b8:	0800c570 	j	800315c0 <_ZN8mos_65024trap7syscall9sys_panic17h4c99e4f832c261e4E+0xe0>
800315bc:	00000000 	nop
800315c0:	8fa10010 	lw	at,16(sp)
800315c4:	afa10020 	sw	at,32(sp)
    loop {
800315c8:	0800c549 	j	80031524 <_ZN8mos_65024trap7syscall9sys_panic17h4c99e4f832c261e4E+0x44>
800315cc:	00000000 	nop
        i += 1;
800315d0:	3c018105 	lui	at,0x8105
800315d4:	2424de08 	addiu	a0,at,-8696
800315d8:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800315dc:	00000000 	nop

800315e0 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h2dd315ca08668515E>:
fn sys_ipc_recv(dstva: VirtAddr) -> i32 {
800315e0:	27bdff98 	addiu	sp,sp,-104
800315e4:	afbf0064 	sw	ra,100(sp)
800315e8:	afa40020 	sw	a0,32(sp)
        VirtAddr { raw: 0 }
800315ec:	afa00058 	sw	zero,88(sp)
    }
800315f0:	8fa10058 	lw	at,88(sp)
    if dstva != VirtAddr::zero() && is_illegal_va(dstva) {
800315f4:	afa10028 	sw	at,40(sp)
800315f8:	27a40020 	addiu	a0,sp,32
800315fc:	27a50028 	addiu	a1,sp,40
80031600:	0c00831a 	jal	80020c68 <_ZN4core3cmp9PartialEq2ne17h891c3ce2f32ed7c8E>
80031604:	00000000 	nop
80031608:	1440001e 	bnez	v0,80031684 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h2dd315ca08668515E+0xa4>
8003160c:	00000000 	nop
80031610:	0800c586 	j	80031618 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h2dd315ca08668515E+0x38>
80031614:	00000000 	nop
    let mut envs = ENV_LIST.lock();
80031618:	3c018105 	lui	at,0x8105
8003161c:	2424e74c 	addiu	a0,at,-6324
80031620:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
80031624:	00000000 	nop
80031628:	00402025 	move	a0,v0
8003162c:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
80031630:	00000000 	nop
80031634:	afa2002c 	sw	v0,44(sp)
    let curenv_idx = CUR_ENV.lock();
80031638:	3c018105 	lui	at,0x8105
8003163c:	2424e74c 	addiu	a0,at,-6324
80031640:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
80031644:	00000000 	nop
80031648:	00402025 	move	a0,v0
8003164c:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
80031650:	00000000 	nop
80031654:	afa20030 	sw	v0,48(sp)
80031658:	27a40030 	addiu	a0,sp,48
    if let Some(curidx) = *curenv_idx {
8003165c:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
80031660:	00000000 	nop
80031664:	00400825 	move	at,v0
80031668:	afa1001c 	sw	at,28(sp)
8003166c:	8c410000 	lw	at,0(v0)
80031670:	24020001 	li	v0,1
80031674:	10220024 	beq	at,v0,80031708 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h2dd315ca08668515E+0x128>
80031678:	00000000 	nop
8003167c:	0800c5e4 	j	80031790 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h2dd315ca08668515E+0x1b0>
80031680:	00000000 	nop
    if dstva != VirtAddr::zero() && is_illegal_va(dstva) {
80031684:	8fa10020 	lw	at,32(sp)
80031688:	afa1005c 	sw	at,92(sp)
    return va < UTEMP || va >= UTOP;
8003168c:	3c018105 	lui	at,0x8105
80031690:	2425d1a4 	addiu	a1,at,-11868
80031694:	27a4005c 	addiu	a0,sp,92
80031698:	0c0082ef 	jal	80020bbc <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E>
8003169c:	00000000 	nop
800316a0:	1440000b 	bnez	v0,800316d0 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h2dd315ca08668515E+0xf0>
800316a4:	00000000 	nop
800316a8:	0800c5ac 	j	800316b0 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h2dd315ca08668515E+0xd0>
800316ac:	00000000 	nop
800316b0:	3c018105 	lui	at,0x8105
800316b4:	2425d1a8 	addiu	a1,at,-11864
800316b8:	27a4005c 	addiu	a0,sp,92
800316bc:	0c008265 	jal	80020994 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE>
800316c0:	00000000 	nop
800316c4:	a3a20063 	sb	v0,99(sp)
800316c8:	0800c5b8 	j	800316e0 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h2dd315ca08668515E+0x100>
800316cc:	00000000 	nop
800316d0:	24010001 	li	at,1
800316d4:	a3a10063 	sb	at,99(sp)
800316d8:	0800c5b8 	j	800316e0 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h2dd315ca08668515E+0x100>
800316dc:	00000000 	nop
}
800316e0:	93a10063 	lbu	at,99(sp)
800316e4:	30210001 	andi	at,at,0x1
    if dstva != VirtAddr::zero() && is_illegal_va(dstva) {
800316e8:	1020ffcb 	beqz	at,80031618 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h2dd315ca08668515E+0x38>
800316ec:	00000000 	nop
800316f0:	0800c5be 	j	800316f8 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h2dd315ca08668515E+0x118>
800316f4:	00000000 	nop
800316f8:	2401fffd 	li	at,-3
        return -E_INVAL;
800316fc:	afa10024 	sw	at,36(sp)
80031700:	0800c5f0 	j	800317c0 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h2dd315ca08668515E+0x1e0>
80031704:	00000000 	nop
    if let Some(curidx) = *curenv_idx {
80031708:	8fa1001c 	lw	at,28(sp)
8003170c:	8c210004 	lw	at,4(at)
80031710:	afa10014 	sw	at,20(sp)
80031714:	afa10050 	sw	at,80(sp)
80031718:	27a4002c 	addiu	a0,sp,44
8003171c:	afa40018 	sw	a0,24(sp)
        let curenv = &mut envs[curidx];
80031720:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
80031724:	00000000 	nop
80031728:	8fa50014 	lw	a1,20(sp)
8003172c:	00402025 	move	a0,v0
80031730:	3c018105 	lui	at,0x8105
80031734:	2426de18 	addiu	a2,at,-8680
80031738:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
8003173c:	00000000 	nop
80031740:	afa20054 	sw	v0,84(sp)
        curenv.env_ipc_dstva = dstva;
80031744:	8fa10020 	lw	at,32(sp)
80031748:	ac4100cc 	sw	at,204(v0)
8003174c:	24040001 	li	a0,1
        curenv.env_ipc_recving = 1;
80031750:	ac4400c8 	sw	a0,200(v0)
80031754:	24010002 	li	at,2
        curenv.env_status = EnvStatus::EnvNotRunnable;
80031758:	afa10034 	sw	at,52(sp)
8003175c:	8fa10034 	lw	at,52(sp)
80031760:	ac4100ac 	sw	at,172(v0)
        schedule(true);
80031764:	0c00b512 	jal	8002d448 <_ZN8mos_65024proc5sched8schedule17hbc54cc333e1e6d61E>
80031768:	00000000 	nop
    return 0;
8003176c:	afa00024 	sw	zero,36(sp)
80031770:	27a40030 	addiu	a0,sp,48
}
80031774:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
80031778:	00000000 	nop
8003177c:	8fa40018 	lw	a0,24(sp)
80031780:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
80031784:	00000000 	nop
80031788:	0800c5f0 	j	800317c0 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h2dd315ca08668515E+0x1e0>
8003178c:	00000000 	nop
        panic!("sys_ipc_recv: no curenv");
80031790:	3c018105 	lui	at,0x8105
80031794:	2425de40 	addiu	a1,at,-8640
80031798:	27a40038 	addiu	a0,sp,56
8003179c:	afa40010 	sw	a0,16(sp)
800317a0:	24060001 	li	a2,1
800317a4:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
800317a8:	00000000 	nop
800317ac:	8fa40010 	lw	a0,16(sp)
800317b0:	3c018105 	lui	at,0x8105
800317b4:	2425de48 	addiu	a1,at,-8632
800317b8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800317bc:	00000000 	nop
}
800317c0:	8fa20024 	lw	v0,36(sp)
800317c4:	8fbf0064 	lw	ra,100(sp)
800317c8:	27bd0068 	addiu	sp,sp,104
800317cc:	03e00008 	jr	ra
800317d0:	00000000 	nop

800317d4 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E>:
fn sys_ipc_try_send(envid: usize, val: usize, srcva: VirtAddr, perm: Permssion) -> i32 {
800317d4:	27bdff08 	addiu	sp,sp,-248
800317d8:	afbf00f4 	sw	ra,244(sp)
800317dc:	afa50044 	sw	a1,68(sp)
800317e0:	afa40048 	sw	a0,72(sp)
800317e4:	afa6004c 	sw	a2,76(sp)
800317e8:	afa70050 	sw	a3,80(sp)
800317ec:	afa4007c 	sw	a0,124(sp)
800317f0:	afa50080 	sw	a1,128(sp)
        VirtAddr { raw: 0 }
800317f4:	afa00098 	sw	zero,152(sp)
    }
800317f8:	8fa10098 	lw	at,152(sp)
    if srcva != VirtAddr::zero() && is_illegal_va(srcva) {
800317fc:	afa10058 	sw	at,88(sp)
80031800:	27a4004c 	addiu	a0,sp,76
80031804:	27a50058 	addiu	a1,sp,88
80031808:	0c00831a 	jal	80020c68 <_ZN4core3cmp9PartialEq2ne17h891c3ce2f32ed7c8E>
8003180c:	00000000 	nop
80031810:	1440009e 	bnez	v0,80031a8c <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x2b8>
80031814:	00000000 	nop
80031818:	0800c608 	j	80031820 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x4c>
8003181c:	00000000 	nop
80031820:	8fa10048 	lw	at,72(sp)
80031824:	afa100e4 	sw	at,228(sp)
    if envid == 0 {
80031828:	14200016 	bnez	at,80031884 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0xb0>
8003182c:	00000000 	nop
80031830:	0800c60e 	j	80031838 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x64>
80031834:	00000000 	nop
        let cur_env = CUR_ENV.lock();
80031838:	3c018105 	lui	at,0x8105
8003183c:	2424e74c 	addiu	a0,at,-6324
80031840:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
80031844:	00000000 	nop
80031848:	00402025 	move	a0,v0
8003184c:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
80031850:	00000000 	nop
80031854:	afa200c8 	sw	v0,200(sp)
80031858:	27a400c8 	addiu	a0,sp,200
        if let Some(idx) = *cur_env {
8003185c:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
80031860:	00000000 	nop
80031864:	00400825 	move	at,v0
80031868:	afa10040 	sw	at,64(sp)
8003186c:	8c410000 	lw	at,0(v0)
80031870:	24020001 	li	v0,1
80031874:	10220008 	beq	at,v0,80031898 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0xc4>
80031878:	00000000 	nop
8003187c:	0800c62f 	j	800318bc <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0xe8>
80031880:	00000000 	nop
    return envid & (NENV - 1);
80031884:	8fa10048 	lw	at,72(sp)
80031888:	302103ff 	andi	at,at,0x3ff
8003188c:	afa100c4 	sw	at,196(sp)
80031890:	0800c63b 	j	800318ec <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x118>
80031894:	00000000 	nop
        if let Some(idx) = *cur_env {
80031898:	8fa10040 	lw	at,64(sp)
8003189c:	8c210004 	lw	at,4(at)
800318a0:	afa100e8 	sw	at,232(sp)
            return idx;
800318a4:	afa100c4 	sw	at,196(sp)
800318a8:	27a400c8 	addiu	a0,sp,200
    }
800318ac:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
800318b0:	00000000 	nop
800318b4:	0800c63b 	j	800318ec <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x118>
800318b8:	00000000 	nop
            panic!("No current env.\n");
800318bc:	3c018105 	lui	at,0x8105
800318c0:	2425d978 	addiu	a1,at,-9864
800318c4:	27a400cc 	addiu	a0,sp,204
800318c8:	afa4003c 	sw	a0,60(sp)
800318cc:	24060001 	li	a2,1
800318d0:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
800318d4:	00000000 	nop
800318d8:	8fa4003c 	lw	a0,60(sp)
800318dc:	3c018105 	lui	at,0x8105
800318e0:	2425d980 	addiu	a1,at,-9856
800318e4:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800318e8:	00000000 	nop
}
800318ec:	8fa100c4 	lw	at,196(sp)
800318f0:	afa10028 	sw	at,40(sp)
    let idx = get_idx_by_envid(envid);
800318f4:	afa10084 	sw	at,132(sp)
    let env: &mut Env = { &mut ENV_LIST.lock()[idx] };
800318f8:	3c018105 	lui	at,0x8105
800318fc:	2424e74c 	addiu	a0,at,-6324
80031900:	afa4002c 	sw	a0,44(sp)
80031904:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
80031908:	00000000 	nop
8003190c:	00402025 	move	a0,v0
80031910:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
80031914:	00000000 	nop
80031918:	afa2005c 	sw	v0,92(sp)
8003191c:	27a4005c 	addiu	a0,sp,92
80031920:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
80031924:	00000000 	nop
80031928:	8fa50028 	lw	a1,40(sp)
8003192c:	00402025 	move	a0,v0
80031930:	3c018105 	lui	at,0x8105
80031934:	2426de58 	addiu	a2,at,-8616
80031938:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
8003193c:	00000000 	nop
80031940:	8fa4002c 	lw	a0,44(sp)
80031944:	00400825 	move	at,v0
80031948:	afa10030 	sw	at,48(sp)
8003194c:	afa20088 	sw	v0,136(sp)
    let curenv: &mut Env = { &mut ENV_LIST.lock()[get_idx_by_envid(sys_getenvid() as usize)] };
80031950:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
80031954:	00000000 	nop
80031958:	00402025 	move	a0,v0
8003195c:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
80031960:	00000000 	nop
80031964:	afa20060 	sw	v0,96(sp)
80031968:	27a40060 	addiu	a0,sp,96
8003196c:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
80031970:	00000000 	nop
80031974:	afa20034 	sw	v0,52(sp)
80031978:	0c00bf02 	jal	8002fc08 <_ZN8mos_65024trap7syscall12sys_getenvid17hbc8da0d19c0f778bE>
8003197c:	00000000 	nop
80031980:	00400825 	move	at,v0
80031984:	afa10038 	sw	at,56(sp)
80031988:	afa200bc 	sw	v0,188(sp)
    if envid == 0 {
8003198c:	14400016 	bnez	v0,800319e8 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x214>
80031990:	00000000 	nop
80031994:	0800c667 	j	8003199c <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x1c8>
80031998:	00000000 	nop
        let cur_env = CUR_ENV.lock();
8003199c:	3c018105 	lui	at,0x8105
800319a0:	2424e74c 	addiu	a0,at,-6324
800319a4:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
800319a8:	00000000 	nop
800319ac:	00402025 	move	a0,v0
800319b0:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
800319b4:	00000000 	nop
800319b8:	afa200a0 	sw	v0,160(sp)
800319bc:	27a400a0 	addiu	a0,sp,160
        if let Some(idx) = *cur_env {
800319c0:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
800319c4:	00000000 	nop
800319c8:	00400825 	move	at,v0
800319cc:	afa10024 	sw	at,36(sp)
800319d0:	8c410000 	lw	at,0(v0)
800319d4:	24020001 	li	v0,1
800319d8:	10220008 	beq	at,v0,800319fc <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x228>
800319dc:	00000000 	nop
800319e0:	0800c688 	j	80031a20 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x24c>
800319e4:	00000000 	nop
    return envid & (NENV - 1);
800319e8:	8fa10038 	lw	at,56(sp)
800319ec:	302103ff 	andi	at,at,0x3ff
800319f0:	afa1009c 	sw	at,156(sp)
800319f4:	0800c694 	j	80031a50 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x27c>
800319f8:	00000000 	nop
        if let Some(idx) = *cur_env {
800319fc:	8fa10024 	lw	at,36(sp)
80031a00:	8c210004 	lw	at,4(at)
80031a04:	afa100c0 	sw	at,192(sp)
            return idx;
80031a08:	afa1009c 	sw	at,156(sp)
80031a0c:	27a400a0 	addiu	a0,sp,160
    }
80031a10:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
80031a14:	00000000 	nop
80031a18:	0800c694 	j	80031a50 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x27c>
80031a1c:	00000000 	nop
            panic!("No current env.\n");
80031a20:	3c018105 	lui	at,0x8105
80031a24:	2425d978 	addiu	a1,at,-9864
80031a28:	27a400a4 	addiu	a0,sp,164
80031a2c:	afa40020 	sw	a0,32(sp)
80031a30:	24060001 	li	a2,1
80031a34:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
80031a38:	00000000 	nop
80031a3c:	8fa40020 	lw	a0,32(sp)
80031a40:	3c018105 	lui	at,0x8105
80031a44:	2425d980 	addiu	a1,at,-9856
80031a48:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80031a4c:	00000000 	nop
}
80031a50:	8fa40034 	lw	a0,52(sp)
80031a54:	8fa5009c 	lw	a1,156(sp)
80031a58:	3c018105 	lui	at,0x8105
80031a5c:	2426de68 	addiu	a2,at,-8600
80031a60:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
80031a64:	00000000 	nop
80031a68:	8fa10030 	lw	at,48(sp)
80031a6c:	00401825 	move	v1,v0
80031a70:	afa3001c 	sw	v1,28(sp)
80031a74:	afa2008c 	sw	v0,140(sp)
    if env.env_ipc_recving == 0 {
80031a78:	8c2100c8 	lw	at,200(at)
80031a7c:	10200024 	beqz	at,80031b10 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x33c>
80031a80:	00000000 	nop
80031a84:	0800c6c8 	j	80031b20 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x34c>
80031a88:	00000000 	nop
    if srcva != VirtAddr::zero() && is_illegal_va(srcva) {
80031a8c:	8fa1004c 	lw	at,76(sp)
80031a90:	afa100ec 	sw	at,236(sp)
    return va < UTEMP || va >= UTOP;
80031a94:	3c018105 	lui	at,0x8105
80031a98:	2425d1a4 	addiu	a1,at,-11868
80031a9c:	27a400ec 	addiu	a0,sp,236
80031aa0:	0c0082ef 	jal	80020bbc <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E>
80031aa4:	00000000 	nop
80031aa8:	1440000b 	bnez	v0,80031ad8 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x304>
80031aac:	00000000 	nop
80031ab0:	0800c6ae 	j	80031ab8 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x2e4>
80031ab4:	00000000 	nop
80031ab8:	3c018105 	lui	at,0x8105
80031abc:	2425d1a8 	addiu	a1,at,-11864
80031ac0:	27a400ec 	addiu	a0,sp,236
80031ac4:	0c008265 	jal	80020994 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE>
80031ac8:	00000000 	nop
80031acc:	a3a200f3 	sb	v0,243(sp)
80031ad0:	0800c6ba 	j	80031ae8 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x314>
80031ad4:	00000000 	nop
80031ad8:	24010001 	li	at,1
80031adc:	a3a100f3 	sb	at,243(sp)
80031ae0:	0800c6ba 	j	80031ae8 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x314>
80031ae4:	00000000 	nop
}
80031ae8:	93a100f3 	lbu	at,243(sp)
80031aec:	30210001 	andi	at,at,0x1
    if srcva != VirtAddr::zero() && is_illegal_va(srcva) {
80031af0:	1020ff4b 	beqz	at,80031820 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x4c>
80031af4:	00000000 	nop
80031af8:	0800c6c0 	j	80031b00 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x32c>
80031afc:	00000000 	nop
80031b00:	2401fffd 	li	at,-3
        return -E_INVAL;
80031b04:	afa10054 	sw	at,84(sp)
80031b08:	0800c722 	j	80031c88 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x4b4>
80031b0c:	00000000 	nop
80031b10:	2401fffd 	li	at,-3
        return -E_INVAL;
80031b14:	afa10054 	sw	at,84(sp)
80031b18:	0800c6e5 	j	80031b94 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x3c0>
80031b1c:	00000000 	nop
    env.env_ipc_value = val;
80031b20:	8fa20030 	lw	v0,48(sp)
80031b24:	8fa1001c 	lw	at,28(sp)
80031b28:	8fa30044 	lw	v1,68(sp)
80031b2c:	ac4300c0 	sw	v1,192(v0)
    env.env_ipc_from = curenv.env_id;
80031b30:	8c2100a0 	lw	at,160(at)
80031b34:	ac4100c4 	sw	at,196(v0)
    env.env_ipc_perm = perm | Permssion::PTE_V;
80031b38:	8fa40050 	lw	a0,80(sp)
80031b3c:	24050080 	li	a1,128
80031b40:	0c00d328 	jal	80034ca0 <_ZN8mos_65022mm7pgtable1_84_$LT$impl$u20$core..ops..bit..BitOr$u20$for$u20$mos_6502..mm..pgtable..Permssion$GT$5bitor17h535389841f955927E>
80031b44:	00000000 	nop
80031b48:	00400825 	move	at,v0
80031b4c:	8fa20030 	lw	v0,48(sp)
80031b50:	ac4100d0 	sw	at,208(v0)
    env.env_ipc_recving = 0;
80031b54:	ac4000c8 	sw	zero,200(v0)
80031b58:	24010001 	li	at,1
    env.env_status = EnvStatus::EnvRunnable;
80031b5c:	afa10064 	sw	at,100(sp)
80031b60:	8fa10064 	lw	at,100(sp)
80031b64:	ac4100ac 	sw	at,172(v0)
        VirtAddr { raw: 0 }
80031b68:	afa00094 	sw	zero,148(sp)
    }
80031b6c:	8fa10094 	lw	at,148(sp)
    if srcva == VirtAddr::zero() {
80031b70:	afa10068 	sw	at,104(sp)
80031b74:	27a4004c 	addiu	a0,sp,76
80031b78:	27a50068 	addiu	a1,sp,104
80031b7c:	0c00d15c 	jal	80034570 <_ZN69_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..cmp..PartialEq$GT$2eq17hde20d5cb95aa44f1E>
80031b80:	00000000 	nop
80031b84:	14400017 	bnez	v0,80031be4 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x410>
80031b88:	00000000 	nop
80031b8c:	0800c6ed 	j	80031bb4 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x3e0>
80031b90:	00000000 	nop
80031b94:	27a40060 	addiu	a0,sp,96
}
80031b98:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
80031b9c:	00000000 	nop
80031ba0:	27a4005c 	addiu	a0,sp,92
80031ba4:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
80031ba8:	00000000 	nop
80031bac:	0800c722 	j	80031c88 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x4b4>
80031bb0:	00000000 	nop
    match curenv.env_pgdir.va_to_pa(srcva) {
80031bb4:	8fa1001c 	lw	at,28(sp)
80031bb8:	8c2400b0 	lw	a0,176(at)
80031bbc:	8fa5004c 	lw	a1,76(sp)
80031bc0:	0c00b37b 	jal	8002cdec <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E>
80031bc4:	00000000 	nop
80031bc8:	afa2006c 	sw	v0,108(sp)
80031bcc:	afa30070 	sw	v1,112(sp)
80031bd0:	8fa1006c 	lw	at,108(sp)
80031bd4:	14200006 	bnez	at,80031bf0 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x41c>
80031bd8:	00000000 	nop
80031bdc:	0800c70f 	j	80031c3c <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x468>
80031be0:	00000000 	nop
        return 0;
80031be4:	afa00054 	sw	zero,84(sp)
80031be8:	0800c6e5 	j	80031b94 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x3c0>
80031bec:	00000000 	nop
        Some((_, pa)) => {
80031bf0:	8fa10030 	lw	at,48(sp)
80031bf4:	8fa60070 	lw	a2,112(sp)
80031bf8:	afa60090 	sw	a2,144(sp)
            let result = env
80031bfc:	8c2400b0 	lw	a0,176(at)
                .map_va_to_pa(env.env_ipc_dstva, pa, 1, &perm, false);
80031c00:	8c2500cc 	lw	a1,204(at)
            let result = env
80031c04:	03a00825 	move	at,sp
80031c08:	27a20050 	addiu	v0,sp,80
80031c0c:	ac220010 	sw	v0,16(at)
80031c10:	ac200014 	sw	zero,20(at)
80031c14:	24070001 	li	a3,1
80031c18:	0c00b117 	jal	8002c45c <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE>
80031c1c:	00000000 	nop
80031c20:	afa20074 	sw	v0,116(sp)
80031c24:	afa30078 	sw	v1,120(sp)
            if let Ok(_) = result {
80031c28:	8fa10074 	lw	at,116(sp)
80031c2c:	10200007 	beqz	at,80031c4c <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x478>
80031c30:	00000000 	nop
80031c34:	0800c716 	j	80031c58 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x484>
80031c38:	00000000 	nop
80031c3c:	2401fffd 	li	at,-3
        _ => return -E_INVAL,
80031c40:	afa10054 	sw	at,84(sp)
80031c44:	0800c71a 	j	80031c68 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x494>
80031c48:	00000000 	nop
                return 0;
80031c4c:	afa00054 	sw	zero,84(sp)
80031c50:	0800c71a 	j	80031c68 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x494>
80031c54:	00000000 	nop
80031c58:	2401fffd 	li	at,-3
                return -E_INVAL;
80031c5c:	afa10054 	sw	at,84(sp)
80031c60:	0800c71a 	j	80031c68 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x494>
80031c64:	00000000 	nop
80031c68:	27a40060 	addiu	a0,sp,96
}
80031c6c:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
80031c70:	00000000 	nop
80031c74:	27a4005c 	addiu	a0,sp,92
80031c78:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
80031c7c:	00000000 	nop
80031c80:	0800c722 	j	80031c88 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E+0x4b4>
80031c84:	00000000 	nop
80031c88:	8fa20054 	lw	v0,84(sp)
80031c8c:	8fbf00f4 	lw	ra,244(sp)
80031c90:	27bd00f8 	addiu	sp,sp,248
80031c94:	03e00008 	jr	ra
80031c98:	00000000 	nop

80031c9c <_ZN8mos_65024trap7syscall9sys_cgetc17hc918faff8d8abb25E>:
fn sys_cgetc() -> i32 {
80031c9c:	27bdffe0 	addiu	sp,sp,-32
80031ca0:	afbf001c 	sw	ra,28(sp)
    loop {
80031ca4:	0800c72b 	j	80031cac <_ZN8mos_65024trap7syscall9sys_cgetc17hc918faff8d8abb25E+0x10>
80031ca8:	00000000 	nop
        ch = NS16550A.getchar();
80031cac:	3c018105 	lui	at,0x8105
80031cb0:	2424e6a4 	addiu	a0,at,-6492
80031cb4:	0c00d150 	jal	80034540 <_ZN73_$LT$mos_6502..dev..uart..NS16550A$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbf8d16e6e776ffa2E>
80031cb8:	00000000 	nop
80031cbc:	00402025 	move	a0,v0
80031cc0:	0c00ae91 	jal	8002ba44 <_ZN75_$LT$mos_6502..dev..uart..Ns16550a$u20$as$u20$mos_6502..dev..uart..Uart$GT$7getchar17h2f3df2b143c58da1E>
80031cc4:	00000000 	nop
80031cc8:	00400825 	move	at,v0
80031ccc:	afa10014 	sw	at,20(sp)
80031cd0:	afa20018 	sw	v0,24(sp)
        if ch != 0 {
80031cd4:	1040fff5 	beqz	v0,80031cac <_ZN8mos_65024trap7syscall9sys_cgetc17hc918faff8d8abb25E+0x10>
80031cd8:	00000000 	nop
80031cdc:	0800c739 	j	80031ce4 <_ZN8mos_65024trap7syscall9sys_cgetc17hc918faff8d8abb25E+0x48>
80031ce0:	00000000 	nop
}
80031ce4:	8fa20014 	lw	v0,20(sp)
80031ce8:	8fbf001c 	lw	ra,28(sp)
80031cec:	27bd0020 	addiu	sp,sp,32
80031cf0:	03e00008 	jr	ra
80031cf4:	00000000 	nop

80031cf8 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E>:
const VALID_ADDR_START: [PhysAddr; VALID_ADDR_SPACE_NUM] =
    [PhysAddr::new(0x180003f8), PhysAddr::new(0x180001f0)];
const VALID_ADDR_END: [PhysAddr; VALID_ADDR_SPACE_NUM] =
    [PhysAddr::new(0x180003f8 + 0x20), PhysAddr::new(0x180001f8)];

fn is_illegal_dev_range(pa: PhysAddr, len: usize) -> bool {
80031cf8:	27bdffb0 	addiu	sp,sp,-80
80031cfc:	afbf004c 	sw	ra,76(sp)
80031d00:	afa50014 	sw	a1,20(sp)
80031d04:	afa40018 	sw	a0,24(sp)
80031d08:	afa40040 	sw	a0,64(sp)
80031d0c:	afa50044 	sw	a1,68(sp)
80031d10:	24050004 	li	a1,4
    if (pa % 4 != 0 && len != 1 && len != 2) || (pa % 2 != 0 && len != 1) {
80031d14:	0c00aeeb 	jal	8002bbac <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17ha11bcadcd9aaea1bE>
80031d18:	00000000 	nop
80031d1c:	1440000b 	bnez	v0,80031d4c <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x54>
80031d20:	00000000 	nop
80031d24:	0800c74b 	j	80031d2c <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x34>
80031d28:	00000000 	nop
80031d2c:	8fa40018 	lw	a0,24(sp)
80031d30:	24050002 	li	a1,2
80031d34:	0c00aeeb 	jal	8002bbac <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17ha11bcadcd9aaea1bE>
80031d38:	00000000 	nop
80031d3c:	10400013 	beqz	v0,80031d8c <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x94>
80031d40:	00000000 	nop
80031d44:	0800c774 	j	80031dd0 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0xd8>
80031d48:	00000000 	nop
80031d4c:	8fa10014 	lw	at,20(sp)
80031d50:	24020001 	li	v0,1
80031d54:	1022fff5 	beq	at,v0,80031d2c <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x34>
80031d58:	00000000 	nop
80031d5c:	0800c759 	j	80031d64 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x6c>
80031d60:	00000000 	nop
80031d64:	8fa10014 	lw	at,20(sp)
80031d68:	24020002 	li	v0,2
80031d6c:	1022ffef 	beq	at,v0,80031d2c <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x34>
80031d70:	00000000 	nop
80031d74:	0800c75f 	j	80031d7c <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x84>
80031d78:	00000000 	nop
80031d7c:	24010001 	li	at,1
        return true;
80031d80:	a3a1001f 	sb	at,31(sp)
80031d84:	0800c790 	j	80031e40 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x148>
80031d88:	00000000 	nop
    }
    let target_start: PhysAddr = pa;
80031d8c:	8fa50014 	lw	a1,20(sp)
80031d90:	8fa40018 	lw	a0,24(sp)
80031d94:	afa40020 	sw	a0,32(sp)
    let target_end: PhysAddr = pa + len;
80031d98:	0c00af15 	jal	8002bc54 <_ZN83_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17h6ea80ec8117a07c6E>
80031d9c:	00000000 	nop
80031da0:	afa20024 	sw	v0,36(sp)
    for i in 0..VALID_ADDR_SPACE_NUM {
80031da4:	afa00028 	sw	zero,40(sp)
80031da8:	24010002 	li	at,2
80031dac:	afa1002c 	sw	at,44(sp)
80031db0:	8fa40028 	lw	a0,40(sp)
80031db4:	8fa5002c 	lw	a1,44(sp)
80031db8:	0c0123e2 	jal	80048f88 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>
80031dbc:	00000000 	nop
80031dc0:	afa20030 	sw	v0,48(sp)
80031dc4:	afa30034 	sw	v1,52(sp)
80031dc8:	0800c77a 	j	80031de8 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0xf0>
80031dcc:	00000000 	nop
80031dd0:	8fa10014 	lw	at,20(sp)
80031dd4:	24020001 	li	v0,1
    if (pa % 4 != 0 && len != 1 && len != 2) || (pa % 2 != 0 && len != 1) {
80031dd8:	1022ffec 	beq	at,v0,80031d8c <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x94>
80031ddc:	00000000 	nop
80031de0:	0800c75f 	j	80031d7c <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x84>
80031de4:	00000000 	nop
80031de8:	27a40030 	addiu	a0,sp,48
    for i in 0..VALID_ADDR_SPACE_NUM {
80031dec:	0c0123d9 	jal	80048f64 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>
80031df0:	00000000 	nop
80031df4:	afa20038 	sw	v0,56(sp)
80031df8:	afa3003c 	sw	v1,60(sp)
80031dfc:	8fa10038 	lw	at,56(sp)
80031e00:	14200007 	bnez	at,80031e20 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x128>
80031e04:	00000000 	nop
80031e08:	0800c784 	j	80031e10 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x118>
80031e0c:	00000000 	nop
80031e10:	24010001 	li	at,1
        if target_start >= VALID_ADDR_START[i] && target_end <= VALID_ADDR_END[i] {
            return false;
        }
    }
    return true;
80031e14:	a3a1001f 	sb	at,31(sp)
80031e18:	0800c790 	j	80031e40 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x148>
80031e1c:	00000000 	nop
    for i in 0..VALID_ADDR_SPACE_NUM {
80031e20:	8fa1003c 	lw	at,60(sp)
80031e24:	afa10010 	sw	at,16(sp)
80031e28:	afa10048 	sw	at,72(sp)
        if target_start >= VALID_ADDR_START[i] && target_end <= VALID_ADDR_END[i] {
80031e2c:	2c210002 	sltiu	at,at,2
80031e30:	14200009 	bnez	at,80031e58 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x160>
80031e34:	00000000 	nop
80031e38:	0800c7a2 	j	80031e88 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x190>
80031e3c:	00000000 	nop
}
80031e40:	93a1001f 	lbu	at,31(sp)
80031e44:	30220001 	andi	v0,at,0x1
80031e48:	8fbf004c 	lw	ra,76(sp)
80031e4c:	27bd0050 	addiu	sp,sp,80
80031e50:	03e00008 	jr	ra
80031e54:	00000000 	nop
        if target_start >= VALID_ADDR_START[i] && target_end <= VALID_ADDR_END[i] {
80031e58:	8fa10010 	lw	at,16(sp)
80031e5c:	00011080 	sll	v0,at,0x2
80031e60:	3c018105 	lui	at,0x8105
80031e64:	2421de88 	addiu	at,at,-8568
80031e68:	00222821 	addu	a1,at,v0
80031e6c:	27a40020 	addiu	a0,sp,32
80031e70:	0c008289 	jal	80020a24 <_ZN4core3cmp10PartialOrd2ge17hbf6fc991f1eaf49dE>
80031e74:	00000000 	nop
80031e78:	14400009 	bnez	v0,80031ea0 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x1a8>
80031e7c:	00000000 	nop
80031e80:	0800c77a 	j	80031de8 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0xf0>
80031e84:	00000000 	nop
80031e88:	8fa40010 	lw	a0,16(sp)
80031e8c:	3c018105 	lui	at,0x8105
80031e90:	2426de78 	addiu	a2,at,-8584
80031e94:	24050002 	li	a1,2
80031e98:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80031e9c:	00000000 	nop
80031ea0:	8fa10010 	lw	at,16(sp)
80031ea4:	2c210002 	sltiu	at,at,2
80031ea8:	1020000f 	beqz	at,80031ee8 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x1f0>
80031eac:	00000000 	nop
80031eb0:	0800c7ae 	j	80031eb8 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x1c0>
80031eb4:	00000000 	nop
80031eb8:	8fa10010 	lw	at,16(sp)
80031ebc:	00011080 	sll	v0,at,0x2
80031ec0:	3c018105 	lui	at,0x8105
80031ec4:	2421de90 	addiu	at,at,-8560
80031ec8:	00222821 	addu	a1,at,v0
80031ecc:	27a40024 	addiu	a0,sp,36
80031ed0:	0c0082cb 	jal	80020b2c <_ZN4core3cmp10PartialOrd2le17hd147b9903c116495E>
80031ed4:	00000000 	nop
80031ed8:	14400009 	bnez	v0,80031f00 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x208>
80031edc:	00000000 	nop
80031ee0:	0800c77a 	j	80031de8 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0xf0>
80031ee4:	00000000 	nop
80031ee8:	8fa40010 	lw	a0,16(sp)
80031eec:	3c018105 	lui	at,0x8105
80031ef0:	2426de98 	addiu	a2,at,-8552
80031ef4:	24050002 	li	a1,2
80031ef8:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80031efc:	00000000 	nop
80031f00:	24010000 	li	at,0
            return false;
80031f04:	a3a0001f 	sb	zero,31(sp)
80031f08:	0800c790 	j	80031e40 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E+0x148>
80031f0c:	00000000 	nop

80031f10 <_ZN8mos_65024trap7syscall19is_illegal_va_range17h6dfe818f16dcee9dE>:

fn is_illegal_va_range(va: VirtAddr, len: usize) -> bool {
80031f10:	27bdffd0 	addiu	sp,sp,-48
80031f14:	afbf002c 	sw	ra,44(sp)
80031f18:	afa50014 	sw	a1,20(sp)
80031f1c:	afa40018 	sw	a0,24(sp)
80031f20:	afa50028 	sw	a1,40(sp)
    if len == 0 {
80031f24:	14a00007 	bnez	a1,80031f44 <_ZN8mos_65024trap7syscall19is_illegal_va_range17h6dfe818f16dcee9dE+0x34>
80031f28:	00000000 	nop
80031f2c:	0800c7cd 	j	80031f34 <_ZN8mos_65024trap7syscall19is_illegal_va_range17h6dfe818f16dcee9dE+0x24>
80031f30:	00000000 	nop
80031f34:	24010000 	li	at,0
        return false;
80031f38:	a3a0001f 	sb	zero,31(sp)
80031f3c:	0800c7de 	j	80031f78 <_ZN8mos_65024trap7syscall19is_illegal_va_range17h6dfe818f16dcee9dE+0x68>
80031f40:	00000000 	nop
    }
    return (va + len) < va || va < UTEMP || (va + len) > UTOP;
80031f44:	8fa50014 	lw	a1,20(sp)
80031f48:	8fa40018 	lw	a0,24(sp)
80031f4c:	0c00af2c 	jal	8002bcb0 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17hf63c307524190caaE>
80031f50:	00000000 	nop
80031f54:	afa20020 	sw	v0,32(sp)
80031f58:	27a40020 	addiu	a0,sp,32
80031f5c:	27a50018 	addiu	a1,sp,24
80031f60:	0c0082ef 	jal	80020bbc <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E>
80031f64:	00000000 	nop
80031f68:	14400012 	bnez	v0,80031fb4 <_ZN8mos_65024trap7syscall19is_illegal_va_range17h6dfe818f16dcee9dE+0xa4>
80031f6c:	00000000 	nop
80031f70:	0800c7e4 	j	80031f90 <_ZN8mos_65024trap7syscall19is_illegal_va_range17h6dfe818f16dcee9dE+0x80>
80031f74:	00000000 	nop
}
80031f78:	93a1001f 	lbu	at,31(sp)
80031f7c:	30220001 	andi	v0,at,0x1
80031f80:	8fbf002c 	lw	ra,44(sp)
80031f84:	27bd0030 	addiu	sp,sp,48
80031f88:	03e00008 	jr	ra
80031f8c:	00000000 	nop
    return (va + len) < va || va < UTEMP || (va + len) > UTOP;
80031f90:	3c018105 	lui	at,0x8105
80031f94:	2425d1a4 	addiu	a1,at,-11868
80031f98:	27a40018 	addiu	a0,sp,24
80031f9c:	0c0082ef 	jal	80020bbc <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E>
80031fa0:	00000000 	nop
80031fa4:	10400007 	beqz	v0,80031fc4 <_ZN8mos_65024trap7syscall19is_illegal_va_range17h6dfe818f16dcee9dE+0xb4>
80031fa8:	00000000 	nop
80031fac:	0800c7ed 	j	80031fb4 <_ZN8mos_65024trap7syscall19is_illegal_va_range17h6dfe818f16dcee9dE+0xa4>
80031fb0:	00000000 	nop
80031fb4:	24010001 	li	at,1
80031fb8:	a3a1001f 	sb	at,31(sp)
80031fbc:	0800c7de 	j	80031f78 <_ZN8mos_65024trap7syscall19is_illegal_va_range17h6dfe818f16dcee9dE+0x68>
80031fc0:	00000000 	nop
80031fc4:	8fa50014 	lw	a1,20(sp)
80031fc8:	8fa40018 	lw	a0,24(sp)
80031fcc:	0c00af2c 	jal	8002bcb0 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Add$LT$usize$GT$$GT$3add17hf63c307524190caaE>
80031fd0:	00000000 	nop
80031fd4:	afa20024 	sw	v0,36(sp)
80031fd8:	3c018105 	lui	at,0x8105
80031fdc:	2425d1a8 	addiu	a1,at,-11864
80031fe0:	27a40024 	addiu	a0,sp,36
80031fe4:	0c0082ad 	jal	80020ab4 <_ZN4core3cmp10PartialOrd2gt17h52788a992f16be48E>
80031fe8:	00000000 	nop
80031fec:	a3a2001f 	sb	v0,31(sp)
80031ff0:	0800c7de 	j	80031f78 <_ZN8mos_65024trap7syscall19is_illegal_va_range17h6dfe818f16dcee9dE+0x68>
80031ff4:	00000000 	nop

80031ff8 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE>:

pub fn do_syscall(trapframe: &mut Trapframe) {
80031ff8:	27bdfeb0 	addiu	sp,sp,-336
80031ffc:	afbf014c 	sw	ra,332(sp)
80032000:	afa40070 	sw	a0,112(sp)
80032004:	afa4007c 	sw	a0,124(sp)
    trapframe.epc += 4;
80032008:	8c820094 	lw	v0,148(a0)
8003200c:	24410004 	addiu	at,v0,4
80032010:	afa10074 	sw	at,116(sp)
80032014:	0022082b 	sltu	at,at,v0
80032018:	14200012 	bnez	at,80032064 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x6c>
8003201c:	00000000 	nop
80032020:	0800c80a 	j	80032028 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x30>
80032024:	00000000 	nop
80032028:	8fa10070 	lw	at,112(sp)
8003202c:	8fa20074 	lw	v0,116(sp)
80032030:	ac220094 	sw	v0,148(at)
    let ret: i32 = match trapframe.regs[4] {
80032034:	8c210010 	lw	at,16(at)
80032038:	afa1006c 	sw	at,108(sp)
8003203c:	2c210012 	sltiu	at,at,18
80032040:	1020000c 	beqz	at,80032074 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x7c>
80032044:	00000000 	nop
80032048:	8fa1006c 	lw	at,108(sp)
8003204c:	00010880 	sll	at,at,0x2
80032050:	3c028105 	lui	v0,0x8105
80032054:	00220821 	addu	at,at,v0
80032058:	8c21c124 	lw	at,-16092(at)
8003205c:	00200008 	jr	at
80032060:	00000000 	nop
    trapframe.epc += 4;
80032064:	3c018105 	lui	at,0x8105
80032068:	2424dea8 	addiu	a0,at,-8536
8003206c:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80032070:	00000000 	nop
80032074:	2401fffd 	li	at,-3
        SYS_READ_DEV => sys_read_dev(
            trapframe.get_arg0().into(),
            trapframe.get_arg1().into(),
            trapframe.get_arg2(),
        ),
        _ => -E_INVAL,
80032078:	afa10078 	sw	at,120(sp)
8003207c:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
80032080:	00000000 	nop
        SYS_CGETC => sys_cgetc(),
80032084:	0c00c727 	jal	80031c9c <_ZN8mos_65024trap7syscall9sys_cgetc17hc918faff8d8abb25E>
80032088:	00000000 	nop
8003208c:	afa20078 	sw	v0,120(sp)
80032090:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
80032094:	00000000 	nop
80032098:	8fa10070 	lw	at,112(sp)
8003209c:	afa100e8 	sw	at,232(sp)
            epc: 0,
        }
    }
    #[inline(always)]
    pub fn get_arg0(&self) -> usize {
        self.regs[5]
800320a0:	8c240014 	lw	a0,20(at)
        SYS_PUTCHAR => sys_putchar(trapframe.get_arg0() as u32),
800320a4:	0c00be4b 	jal	8002f92c <_ZN8mos_65024trap7syscall11sys_putchar17h42103aa23915fc30E>
800320a8:	00000000 	nop
800320ac:	afa20078 	sw	v0,120(sp)
800320b0:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
800320b4:	00000000 	nop
800320b8:	8fa10070 	lw	at,112(sp)
800320bc:	afa100e4 	sw	at,228(sp)
800320c0:	8c240014 	lw	a0,20(at)
        SYS_PRINT_CONS => sys_print_cons(trapframe.get_arg0().into(), trapframe.get_arg1()),
800320c4:	3c018105 	lui	at,0x8105
800320c8:	2425deb8 	addiu	a1,at,-8520
800320cc:	0c00a18f 	jal	8002863c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h2078caf144522ce6E>
800320d0:	00000000 	nop
800320d4:	8fa10070 	lw	at,112(sp)
800320d8:	00402025 	move	a0,v0
800320dc:	afa10110 	sw	at,272(sp)
    }
    #[inline(always)]
    pub fn get_arg1(&self) -> usize {
        self.regs[6]
800320e0:	8c250018 	lw	a1,24(at)
800320e4:	0c00be5c 	jal	8002f970 <_ZN8mos_65024trap7syscall14sys_print_cons17h3c712e5b22b95e3cE>
800320e8:	00000000 	nop
800320ec:	afa20078 	sw	v0,120(sp)
800320f0:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
800320f4:	00000000 	nop
        SYS_GETENVID => sys_getenvid(),
800320f8:	0c00bf02 	jal	8002fc08 <_ZN8mos_65024trap7syscall12sys_getenvid17hbc8da0d19c0f778bE>
800320fc:	00000000 	nop
80032100:	afa20078 	sw	v0,120(sp)
80032104:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
80032108:	00000000 	nop
        SYS_YIELD => sys_yield(),
8003210c:	0c00bf40 	jal	8002fd00 <_ZN8mos_65024trap7syscall9sys_yield17hee2ecc9add84bf45E>
80032110:	00000000 	nop
80032114:	8fa10070 	lw	at,112(sp)
80032118:	afa100e0 	sw	at,224(sp)
        self.regs[5]
8003211c:	8c240014 	lw	a0,20(at)
        SYS_ENV_DESTROY => sys_env_destroy(trapframe.get_arg0()),
80032120:	0c00bf55 	jal	8002fd54 <_ZN8mos_65024trap7syscall15sys_env_destroy17h0c4cfe82a4cb80b2E>
80032124:	00000000 	nop
80032128:	afa20078 	sw	v0,120(sp)
8003212c:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
80032130:	00000000 	nop
80032134:	8fa10070 	lw	at,112(sp)
80032138:	afa100dc 	sw	at,220(sp)
8003213c:	8c240014 	lw	a0,20(at)
80032140:	afa1010c 	sw	at,268(sp)
        self.regs[6]
80032144:	8c250018 	lw	a1,24(at)
        SYS_SET_TLB_MOD_ENTRY => sys_set_tlb_mod_entry(trapframe.get_arg0(), trapframe.get_arg1()),
80032148:	0c00c053 	jal	8003014c <_ZN8mos_65024trap7syscall21sys_set_tlb_mod_entry17hdfb40fab8e4d9146E>
8003214c:	00000000 	nop
80032150:	afa20078 	sw	v0,120(sp)
80032154:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
80032158:	00000000 	nop
8003215c:	8fa10070 	lw	at,112(sp)
80032160:	afa100d8 	sw	at,216(sp)
        self.regs[5]
80032164:	8c220014 	lw	v0,20(at)
80032168:	afa20064 	sw	v0,100(sp)
8003216c:	afa10108 	sw	at,264(sp)
        self.regs[6]
80032170:	8c240018 	lw	a0,24(at)
            trapframe.get_arg1().into(),
80032174:	3c018105 	lui	at,0x8105
80032178:	2425dec8 	addiu	a1,at,-8504
8003217c:	0c00a18f 	jal	8002863c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h2078caf144522ce6E>
80032180:	00000000 	nop
80032184:	8fa10070 	lw	at,112(sp)
80032188:	afa20068 	sw	v0,104(sp)
8003218c:	afa10124 	sw	at,292(sp)
    }
    #[inline(always)]
    pub fn get_arg2(&self) -> usize {
        self.regs[7]
80032190:	8c24001c 	lw	a0,28(at)
            trapframe.get_arg2().into(),
80032194:	3c018105 	lui	at,0x8105
80032198:	2425ded8 	addiu	a1,at,-8488
8003219c:	0c00a19f 	jal	8002867c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h83e5aa922d8ace36E>
800321a0:	00000000 	nop
800321a4:	8fa40064 	lw	a0,100(sp)
800321a8:	8fa50068 	lw	a1,104(sp)
800321ac:	00403025 	move	a2,v0
        SYS_MEM_ALLOC => sys_mem_alloc(
800321b0:	0c00c0aa 	jal	800302a8 <_ZN8mos_65024trap7syscall13sys_mem_alloc17hc760a943975f3587E>
800321b4:	00000000 	nop
800321b8:	afa20078 	sw	v0,120(sp)
800321bc:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
800321c0:	00000000 	nop
800321c4:	8fa10070 	lw	at,112(sp)
800321c8:	afa100d4 	sw	at,212(sp)
        self.regs[5]
800321cc:	8c220014 	lw	v0,20(at)
800321d0:	afa20050 	sw	v0,80(sp)
800321d4:	afa10104 	sw	at,260(sp)
        self.regs[6]
800321d8:	8c240018 	lw	a0,24(at)
            trapframe.get_arg1().into(),
800321dc:	3c018105 	lui	at,0x8105
800321e0:	2425dee8 	addiu	a1,at,-8472
800321e4:	0c00a18f 	jal	8002863c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h2078caf144522ce6E>
800321e8:	00000000 	nop
800321ec:	8fa10070 	lw	at,112(sp)
800321f0:	afa20054 	sw	v0,84(sp)
800321f4:	afa10120 	sw	at,288(sp)
        self.regs[7]
800321f8:	8c22001c 	lw	v0,28(at)
800321fc:	afa20058 	sw	v0,88(sp)
80032200:	afa10134 	sw	at,308(sp)
    }
    #[inline(always)]
    pub fn get_arg3(&self) -> usize {
        unsafe { *(self.regs[29] as *const usize).offset(4) }
80032204:	8c210074 	lw	at,116(at)
80032208:	afa10138 	sw	at,312(sp)
8003220c:	24020004 	li	v0,4
80032210:	afa2013c 	sw	v0,316(sp)
        unsafe { intrinsics::offset(self, count) }
80032214:	24210010 	addiu	at,at,16
80032218:	afa1005c 	sw	at,92(sp)
8003221c:	00201025 	move	v0,at
80032220:	afa20060 	sw	v0,96(sp)
80032224:	30210003 	andi	at,at,0x3
80032228:	10200009 	beqz	at,80032250 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x258>
8003222c:	00000000 	nop
80032230:	0800c88e 	j	80032238 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x240>
80032234:	00000000 	nop
80032238:	8fa5005c 	lw	a1,92(sp)
8003223c:	3c018105 	lui	at,0x8105
80032240:	2426e214 	addiu	a2,at,-7660
80032244:	24040004 	li	a0,4
80032248:	0c00f32e 	jal	8003ccb8 <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
8003224c:	00000000 	nop
80032250:	8fa10060 	lw	at,96(sp)
80032254:	8c240000 	lw	a0,0(at)
            trapframe.get_arg3().into(),
80032258:	3c018105 	lui	at,0x8105
8003225c:	2425def8 	addiu	a1,at,-8456
80032260:	0c00a18f 	jal	8002863c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h2078caf144522ce6E>
80032264:	00000000 	nop
80032268:	8fa10070 	lw	at,112(sp)
8003226c:	afa20044 	sw	v0,68(sp)
80032270:	afa10140 	sw	at,320(sp)
    }
    #[inline(always)]
    pub fn get_arg4(&self) -> usize {
        unsafe { *(self.regs[29] as *const usize).offset(5) }
80032274:	8c210074 	lw	at,116(at)
80032278:	afa10144 	sw	at,324(sp)
8003227c:	24020005 	li	v0,5
80032280:	afa20148 	sw	v0,328(sp)
80032284:	24210014 	addiu	at,at,20
80032288:	afa10048 	sw	at,72(sp)
8003228c:	00201025 	move	v0,at
80032290:	afa2004c 	sw	v0,76(sp)
80032294:	30210003 	andi	at,at,0x3
80032298:	10200009 	beqz	at,800322c0 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x2c8>
8003229c:	00000000 	nop
800322a0:	0800c8aa 	j	800322a8 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x2b0>
800322a4:	00000000 	nop
800322a8:	8fa50048 	lw	a1,72(sp)
800322ac:	3c018105 	lui	at,0x8105
800322b0:	2426e224 	addiu	a2,at,-7644
800322b4:	24040004 	li	a0,4
800322b8:	0c00f32e 	jal	8003ccb8 <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
800322bc:	00000000 	nop
800322c0:	8fa1004c 	lw	at,76(sp)
800322c4:	8c240000 	lw	a0,0(at)
            trapframe.get_arg4().into(),
800322c8:	3c018105 	lui	at,0x8105
800322cc:	2425df08 	addiu	a1,at,-8440
800322d0:	0c00a19f 	jal	8002867c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h83e5aa922d8ace36E>
800322d4:	00000000 	nop
800322d8:	8fa40050 	lw	a0,80(sp)
800322dc:	8fa50054 	lw	a1,84(sp)
800322e0:	8fa60058 	lw	a2,88(sp)
800322e4:	8fa70044 	lw	a3,68(sp)
        SYS_MEM_MAP => sys_mem_map(
800322e8:	03a00825 	move	at,sp
800322ec:	ac220010 	sw	v0,16(at)
800322f0:	0c00c14e 	jal	80030538 <_ZN8mos_65024trap7syscall11sys_mem_map17h7f763300bf1f6453E>
800322f4:	00000000 	nop
800322f8:	afa20078 	sw	v0,120(sp)
800322fc:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
80032300:	00000000 	nop
80032304:	8fa10070 	lw	at,112(sp)
80032308:	afa100d0 	sw	at,208(sp)
        self.regs[5]
8003230c:	8c220014 	lw	v0,20(at)
80032310:	afa20040 	sw	v0,64(sp)
80032314:	afa10100 	sw	at,256(sp)
        self.regs[6]
80032318:	8c240018 	lw	a0,24(at)
        SYS_MEM_UNMAP => sys_mem_unmap(trapframe.get_arg0(), trapframe.get_arg1().into()),
8003231c:	3c018105 	lui	at,0x8105
80032320:	2425df18 	addiu	a1,at,-8424
80032324:	0c00a18f 	jal	8002863c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h2078caf144522ce6E>
80032328:	00000000 	nop
8003232c:	8fa40040 	lw	a0,64(sp)
80032330:	00402825 	move	a1,v0
80032334:	0c00c252 	jal	80030948 <_ZN8mos_65024trap7syscall13sys_mem_unmap17h0f6d9cd8c68cee90E>
80032338:	00000000 	nop
8003233c:	afa20078 	sw	v0,120(sp)
80032340:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
80032344:	00000000 	nop
        SYS_EXOFORK => sys_exofork(),
80032348:	0c00c2dc 	jal	80030b70 <_ZN8mos_65024trap7syscall11sys_exofork17h5eccdf66243b4c7eE>
8003234c:	00000000 	nop
80032350:	afa20078 	sw	v0,120(sp)
80032354:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
80032358:	00000000 	nop
8003235c:	8fa10070 	lw	at,112(sp)
80032360:	afa100cc 	sw	at,204(sp)
        self.regs[5]
80032364:	8c220014 	lw	v0,20(at)
80032368:	afa2003c 	sw	v0,60(sp)
8003236c:	afa100fc 	sw	at,252(sp)
        self.regs[6]
80032370:	8c240018 	lw	a0,24(at)
        SYS_SET_ENV_STATUS => sys_set_env_status(trapframe.get_arg0(), trapframe.get_arg1().into()),
80032374:	3c018105 	lui	at,0x8105
80032378:	2425df28 	addiu	a1,at,-8408
8003237c:	0c00a1a8 	jal	800286a0 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17ha604063855dcff4bE>
80032380:	00000000 	nop
80032384:	8fa4003c 	lw	a0,60(sp)
80032388:	00402825 	move	a1,v0
8003238c:	0c00c387 	jal	80030e1c <_ZN8mos_65024trap7syscall18sys_set_env_status17h29816a51ce434510E>
80032390:	00000000 	nop
80032394:	afa20078 	sw	v0,120(sp)
80032398:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
8003239c:	00000000 	nop
800323a0:	8fa10070 	lw	at,112(sp)
800323a4:	afa100c8 	sw	at,200(sp)
        self.regs[5]
800323a8:	8c220014 	lw	v0,20(at)
800323ac:	afa20038 	sw	v0,56(sp)
800323b0:	afa100f8 	sw	at,248(sp)
        self.regs[6]
800323b4:	8c240018 	lw	a0,24(at)
        SYS_SET_TRAPFRAME => sys_set_trapframe(trapframe.get_arg0(), trapframe.get_arg1().into()),
800323b8:	3c018105 	lui	at,0x8105
800323bc:	2425df38 	addiu	a1,at,-8392
800323c0:	0c00a18f 	jal	8002863c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h2078caf144522ce6E>
800323c4:	00000000 	nop
800323c8:	8fa40038 	lw	a0,56(sp)
800323cc:	00402825 	move	a1,v0
800323d0:	0c00c47c 	jal	800311f0 <_ZN8mos_65024trap7syscall17sys_set_trapframe17hd5904a5e6d1be1d6E>
800323d4:	00000000 	nop
800323d8:	afa20078 	sw	v0,120(sp)
800323dc:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
800323e0:	00000000 	nop
800323e4:	8fa10070 	lw	at,112(sp)
800323e8:	afa100c4 	sw	at,196(sp)
        self.regs[5]
800323ec:	8c240014 	lw	a0,20(at)
        SYS_PANIC => sys_panic(trapframe.get_arg0().into()),
800323f0:	3c018105 	lui	at,0x8105
800323f4:	2425df48 	addiu	a1,at,-8376
800323f8:	0c00a18f 	jal	8002863c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h2078caf144522ce6E>
800323fc:	00000000 	nop
80032400:	00402025 	move	a0,v0
80032404:	0c00c538 	jal	800314e0 <_ZN8mos_65024trap7syscall9sys_panic17h4c99e4f832c261e4E>
80032408:	00000000 	nop
8003240c:	8fa10070 	lw	at,112(sp)
80032410:	afa100c0 	sw	at,192(sp)
80032414:	8c240014 	lw	a0,20(at)
        SYS_IPC_RECV => sys_ipc_recv(trapframe.get_arg0().into()),
80032418:	3c018105 	lui	at,0x8105
8003241c:	2425df58 	addiu	a1,at,-8360
80032420:	0c00a18f 	jal	8002863c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h2078caf144522ce6E>
80032424:	00000000 	nop
80032428:	00402025 	move	a0,v0
8003242c:	0c00c578 	jal	800315e0 <_ZN8mos_65024trap7syscall12sys_ipc_recv17h2dd315ca08668515E>
80032430:	00000000 	nop
80032434:	afa20078 	sw	v0,120(sp)
80032438:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
8003243c:	00000000 	nop
80032440:	8fa10070 	lw	at,112(sp)
80032444:	afa100bc 	sw	at,188(sp)
80032448:	8c220014 	lw	v0,20(at)
8003244c:	afa20024 	sw	v0,36(sp)
80032450:	afa100f4 	sw	at,244(sp)
        self.regs[6]
80032454:	8c220018 	lw	v0,24(at)
80032458:	afa20028 	sw	v0,40(sp)
8003245c:	afa1011c 	sw	at,284(sp)
        self.regs[7]
80032460:	8c24001c 	lw	a0,28(at)
            trapframe.get_arg2().into(),
80032464:	3c018105 	lui	at,0x8105
80032468:	2425df68 	addiu	a1,at,-8344
8003246c:	0c00a18f 	jal	8002863c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h2078caf144522ce6E>
80032470:	00000000 	nop
80032474:	8fa10070 	lw	at,112(sp)
80032478:	afa2002c 	sw	v0,44(sp)
8003247c:	afa10128 	sw	at,296(sp)
        unsafe { *(self.regs[29] as *const usize).offset(4) }
80032480:	8c210074 	lw	at,116(at)
80032484:	afa1012c 	sw	at,300(sp)
80032488:	24020004 	li	v0,4
8003248c:	afa20130 	sw	v0,304(sp)
80032490:	24210010 	addiu	at,at,16
80032494:	afa10030 	sw	at,48(sp)
80032498:	00201025 	move	v0,at
8003249c:	afa20034 	sw	v0,52(sp)
800324a0:	30210003 	andi	at,at,0x3
800324a4:	10200009 	beqz	at,800324cc <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x4d4>
800324a8:	00000000 	nop
800324ac:	0800c92d 	j	800324b4 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x4bc>
800324b0:	00000000 	nop
800324b4:	8fa50030 	lw	a1,48(sp)
800324b8:	3c018105 	lui	at,0x8105
800324bc:	2426e214 	addiu	a2,at,-7660
800324c0:	24040004 	li	a0,4
800324c4:	0c00f32e 	jal	8003ccb8 <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>
800324c8:	00000000 	nop
800324cc:	8fa10034 	lw	at,52(sp)
800324d0:	8c240000 	lw	a0,0(at)
            trapframe.get_arg3().into(),
800324d4:	3c018105 	lui	at,0x8105
800324d8:	2425df78 	addiu	a1,at,-8328
800324dc:	0c00a19f 	jal	8002867c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h83e5aa922d8ace36E>
800324e0:	00000000 	nop
800324e4:	8fa40024 	lw	a0,36(sp)
800324e8:	8fa50028 	lw	a1,40(sp)
800324ec:	8fa6002c 	lw	a2,44(sp)
800324f0:	00403825 	move	a3,v0
        SYS_IPC_TRY_SEND => sys_ipc_try_send(
800324f4:	0c00c5f5 	jal	800317d4 <_ZN8mos_65024trap7syscall16sys_ipc_try_send17haf29a640d227be93E>
800324f8:	00000000 	nop
800324fc:	afa20078 	sw	v0,120(sp)
80032500:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
80032504:	00000000 	nop
80032508:	8fa10070 	lw	at,112(sp)
8003250c:	afa100b8 	sw	at,184(sp)
        self.regs[5]
80032510:	8c240014 	lw	a0,20(at)
            trapframe.get_arg0().into(),
80032514:	3c018105 	lui	at,0x8105
80032518:	2425df88 	addiu	a1,at,-8312
8003251c:	0c00a18f 	jal	8002863c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h2078caf144522ce6E>
80032520:	00000000 	nop
80032524:	8fa10070 	lw	at,112(sp)
80032528:	afa2001c 	sw	v0,28(sp)
8003252c:	afa100f0 	sw	at,240(sp)
        self.regs[6]
80032530:	8c240018 	lw	a0,24(at)
            trapframe.get_arg1().into(),
80032534:	3c018105 	lui	at,0x8105
80032538:	2425df98 	addiu	a1,at,-8296
8003253c:	0c00a186 	jal	80028618 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h1413aa14d136e74dE>
80032540:	00000000 	nop
80032544:	8fa30070 	lw	v1,112(sp)
80032548:	8fa1001c 	lw	at,28(sp)
8003254c:	afa30118 	sw	v1,280(sp)
        self.regs[7]
80032550:	8c65001c 	lw	a1,28(v1)
80032554:	afa50020 	sw	a1,32(sp)
80032558:	afa10080 	sw	at,128(sp)
8003255c:	afa20084 	sw	v0,132(sp)
80032560:	afa5008c 	sw	a1,140(sp)
    if is_illegal_va_range(va, len) || is_illegal_dev_range(pa, len) || va % len != 0 {
80032564:	8fa40080 	lw	a0,128(sp)
80032568:	0c00c7c4 	jal	80031f10 <_ZN8mos_65024trap7syscall19is_illegal_va_range17h6dfe818f16dcee9dE>
8003256c:	00000000 	nop
80032570:	1440000b 	bnez	v0,800325a0 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x5a8>
80032574:	00000000 	nop
80032578:	0800c960 	j	80032580 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x588>
8003257c:	00000000 	nop
80032580:	8fa50020 	lw	a1,32(sp)
80032584:	8fa40084 	lw	a0,132(sp)
80032588:	0c00c73e 	jal	80031cf8 <_ZN8mos_65024trap7syscall20is_illegal_dev_range17h859ce1179d41d108E>
8003258c:	00000000 	nop
80032590:	10400007 	beqz	v0,800325b0 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x5b8>
80032594:	00000000 	nop
80032598:	0800c968 	j	800325a0 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x5a8>
8003259c:	00000000 	nop
800325a0:	2401fffd 	li	at,-3
        return -E_INVAL;
800325a4:	afa10088 	sw	at,136(sp)
800325a8:	0800c9b7 	j	800326dc <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x6e4>
800325ac:	00000000 	nop
    if is_illegal_va_range(va, len) || is_illegal_dev_range(pa, len) || va % len != 0 {
800325b0:	8fa50020 	lw	a1,32(sp)
800325b4:	8fa40080 	lw	a0,128(sp)
800325b8:	0c00af00 	jal	8002bc00 <_ZN83_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..ops..arith..Rem$LT$usize$GT$$GT$3rem17ha0cf15c56b191f6dE>
800325bc:	00000000 	nop
800325c0:	1440fff7 	bnez	v0,800325a0 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x5a8>
800325c4:	00000000 	nop
800325c8:	0800c974 	j	800325d0 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x5d8>
800325cc:	00000000 	nop
800325d0:	8fa10020 	lw	at,32(sp)
800325d4:	24020004 	li	v0,4
    if len == 4 {
800325d8:	14220011 	bne	at,v0,80032620 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x628>
800325dc:	00000000 	nop
800325e0:	0800c97a 	j	800325e8 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x5f0>
800325e4:	00000000 	nop
800325e8:	27a10080 	addiu	at,sp,128
800325ec:	afa10094 	sw	at,148(sp)
        unsafe { ptr::read(self.raw as *const T) }
800325f0:	8fa40080 	lw	a0,128(sp)
800325f4:	0c008905 	jal	80022414 <_ZN4core3ptr4read17h59f708089ca8ed17E>
800325f8:	00000000 	nop
800325fc:	00402825 	move	a1,v0
80032600:	27a10084 	addiu	at,sp,132
80032604:	afa100ac 	sw	at,172(sp)
80032608:	afa500b0 	sw	a1,176(sp)
            ptr::write_volatile(self.raw as *mut T, src);
8003260c:	8fa40084 	lw	a0,132(sp)
80032610:	0c0087e4 	jal	80021f90 <_ZN4core3ptr14write_volatile17hde9c9a09a11e40d5E>
80032614:	00000000 	nop
        pa.write_volatile::<u32>(va.read());
80032618:	0800c98e 	j	80032638 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x640>
8003261c:	00000000 	nop
80032620:	8fa10020 	lw	at,32(sp)
80032624:	24020002 	li	v0,2
    } else if len == 2 {
80032628:	10220006 	beq	at,v0,80032644 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x64c>
8003262c:	00000000 	nop
80032630:	0800c99f 	j	8003267c <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x684>
80032634:	00000000 	nop
    return 0;
80032638:	afa00088 	sw	zero,136(sp)
8003263c:	0800c9b7 	j	800326dc <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x6e4>
80032640:	00000000 	nop
80032644:	27a10080 	addiu	at,sp,128
80032648:	afa10098 	sw	at,152(sp)
        unsafe { ptr::read(self.raw as *const T) }
8003264c:	8fa40080 	lw	a0,128(sp)
80032650:	0c0089aa 	jal	800226a8 <_ZN4core3ptr4read17he7e341b878a42480E>
80032654:	00000000 	nop
80032658:	00402825 	move	a1,v0
8003265c:	27a10084 	addiu	at,sp,132
80032660:	afa100a4 	sw	at,164(sp)
80032664:	a7a500aa 	sh	a1,170(sp)
            ptr::write_volatile(self.raw as *mut T, src);
80032668:	8fa40084 	lw	a0,132(sp)
8003266c:	0c0087b0 	jal	80021ec0 <_ZN4core3ptr14write_volatile17h55747bd762833743E>
80032670:	00000000 	nop
        pa.write_volatile::<u16>(va.read());
80032674:	0800c98e 	j	80032638 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x640>
80032678:	00000000 	nop
8003267c:	8fa10020 	lw	at,32(sp)
80032680:	24020001 	li	v0,1
    } else if len == 1 {
80032684:	14220011 	bne	at,v0,800326cc <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x6d4>
80032688:	00000000 	nop
8003268c:	0800c9a5 	j	80032694 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x69c>
80032690:	00000000 	nop
80032694:	27a10080 	addiu	at,sp,128
80032698:	afa10090 	sw	at,144(sp)
        unsafe { ptr::read(self.raw as *const T) }
8003269c:	8fa40080 	lw	a0,128(sp)
800326a0:	0c00e708 	jal	80039c20 <_ZN4core3ptr4read17h577826971f2136a4E>
800326a4:	00000000 	nop
800326a8:	00402825 	move	a1,v0
800326ac:	27a10084 	addiu	at,sp,132
800326b0:	afa1009c 	sw	at,156(sp)
800326b4:	a3a500a3 	sb	a1,163(sp)
            ptr::write_volatile(self.raw as *mut T, src);
800326b8:	8fa40084 	lw	a0,132(sp)
800326bc:	0c0087ca 	jal	80021f28 <_ZN4core3ptr14write_volatile17h99ef45963f1b3816E>
800326c0:	00000000 	nop
        pa.write_volatile::<u8>(va.read());
800326c4:	0800c98e 	j	80032638 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x640>
800326c8:	00000000 	nop
800326cc:	2401fffd 	li	at,-3
        return -E_INVAL;
800326d0:	afa10088 	sw	at,136(sp)
800326d4:	0800c9b7 	j	800326dc <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x6e4>
800326d8:	00000000 	nop
}
800326dc:	8fa10088 	lw	at,136(sp)
        SYS_WRITE_DEV => sys_write_dev(
800326e0:	afa10078 	sw	at,120(sp)
800326e4:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
800326e8:	00000000 	nop
800326ec:	8fa10070 	lw	at,112(sp)
800326f0:	afa100b4 	sw	at,180(sp)
        self.regs[5]
800326f4:	8c240014 	lw	a0,20(at)
            trapframe.get_arg0().into(),
800326f8:	3c018105 	lui	at,0x8105
800326fc:	2425dfa8 	addiu	a1,at,-8280
80032700:	0c00a18f 	jal	8002863c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h2078caf144522ce6E>
80032704:	00000000 	nop
80032708:	8fa10070 	lw	at,112(sp)
8003270c:	afa20018 	sw	v0,24(sp)
80032710:	afa100ec 	sw	at,236(sp)
        self.regs[6]
80032714:	8c240018 	lw	a0,24(at)
            trapframe.get_arg1().into(),
80032718:	3c018105 	lui	at,0x8105
8003271c:	2425dfb8 	addiu	a1,at,-8264
80032720:	0c00a186 	jal	80028618 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h1413aa14d136e74dE>
80032724:	00000000 	nop
80032728:	8fa10070 	lw	at,112(sp)
8003272c:	8fa40018 	lw	a0,24(sp)
80032730:	00402825 	move	a1,v0
80032734:	afa10114 	sw	at,276(sp)
        self.regs[7]
80032738:	8c26001c 	lw	a2,28(at)
        SYS_READ_DEV => sys_read_dev(
8003273c:	0c00be97 	jal	8002fa5c <_ZN8mos_65024trap7syscall12sys_read_dev17hc996742aaa61341cE>
80032740:	00000000 	nop
80032744:	afa20078 	sw	v0,120(sp)
80032748:	0800c9d4 	j	80032750 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE+0x758>
8003274c:	00000000 	nop
    };
    trapframe.regs[2] = ret as usize;
80032750:	8fa20070 	lw	v0,112(sp)
80032754:	8fa10078 	lw	at,120(sp)
80032758:	ac410008 	sw	at,8(v0)
}
8003275c:	8fbf014c 	lw	ra,332(sp)
80032760:	27bd0150 	addiu	sp,sp,336
80032764:	03e00008 	jr	ra
80032768:	00000000 	nop

8003276c <_ZN8mos_65024trap3tlb10do_tlb_mod17hff0d14b5c580100aE>:
    trap::trapframe,
};
use core::mem::size_of;
use mips32::{cp0, Reg};

pub(super) fn do_tlb_mod(trapframe: &mut trapframe::Trapframe) {
8003276c:	27bdfed8 	addiu	sp,sp,-296
80032770:	afbf0124 	sw	ra,292(sp)
80032774:	afa40030 	sw	a0,48(sp)
80032778:	afa40110 	sw	a0,272(sp)
    let tmp_tf = VirtAddr::from(trapframe as *const trapframe::Trapframe as usize)
8003277c:	0c00af50 	jal	8002bd40 <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h6ea8d698280004a0E>
80032780:	00000000 	nop
80032784:	afa200cc 	sw	v0,204(sp)
80032788:	27a100cc 	addiu	at,sp,204
8003278c:	afa10120 	sw	at,288(sp)
        unsafe { ptr::read(self.raw as *const T) }
80032790:	8fa500cc 	lw	a1,204(sp)
80032794:	27a40034 	addiu	a0,sp,52
80032798:	0c00898e 	jal	80022638 <_ZN4core3ptr4read17hb2fc3976f3669be9E>
8003279c:	00000000 	nop
800327a0:	8fa40030 	lw	a0,48(sp)
        .read::<trapframe::Trapframe>();
    if trapframe.regs[29] < USTACKTOP.raw || trapframe.regs[29] >= UXSTACKTOP.raw {
800327a4:	8c810074 	lw	at,116(a0)
800327a8:	3c027f3f 	lui	v0,0x7f3f
800327ac:	3442d000 	ori	v0,v0,0xd000
800327b0:	0022082b 	sltu	at,at,v0
800327b4:	1420000b 	bnez	at,800327e4 <_ZN8mos_65024trap3tlb10do_tlb_mod17hff0d14b5c580100aE+0x78>
800327b8:	00000000 	nop
800327bc:	0800c9f1 	j	800327c4 <_ZN8mos_65024trap3tlb10do_tlb_mod17hff0d14b5c580100aE+0x58>
800327c0:	00000000 	nop
800327c4:	8fa10030 	lw	at,48(sp)
800327c8:	8c210074 	lw	at,116(at)
800327cc:	3c027f40 	lui	v0,0x7f40
800327d0:	0022082b 	sltu	at,at,v0
800327d4:	14200008 	bnez	at,800327f8 <_ZN8mos_65024trap3tlb10do_tlb_mod17hff0d14b5c580100aE+0x8c>
800327d8:	00000000 	nop
800327dc:	0800c9f9 	j	800327e4 <_ZN8mos_65024trap3tlb10do_tlb_mod17hff0d14b5c580100aE+0x78>
800327e0:	00000000 	nop
800327e4:	8fa20030 	lw	v0,48(sp)
800327e8:	3c017f40 	lui	at,0x7f40
        trapframe.regs[29] = UXSTACKTOP.raw;
800327ec:	ac410074 	sw	at,116(v0)
    if trapframe.regs[29] < USTACKTOP.raw || trapframe.regs[29] >= UXSTACKTOP.raw {
800327f0:	0800c9fe 	j	800327f8 <_ZN8mos_65024trap3tlb10do_tlb_mod17hff0d14b5c580100aE+0x8c>
800327f4:	00000000 	nop
    }
    trapframe.regs[29] -= size_of::<trapframe::Trapframe>();
800327f8:	8fa10030 	lw	at,48(sp)
800327fc:	8c210074 	lw	at,116(at)
80032800:	2422ff68 	addiu	v0,at,-152
80032804:	afa2002c 	sw	v0,44(sp)
80032808:	2c210098 	sltiu	at,at,152
8003280c:	14200024 	bnez	at,800328a0 <_ZN8mos_65024trap3tlb10do_tlb_mod17hff0d14b5c580100aE+0x134>
80032810:	00000000 	nop
80032814:	0800ca07 	j	8003281c <_ZN8mos_65024trap3tlb10do_tlb_mod17hff0d14b5c580100aE+0xb0>
80032818:	00000000 	nop
8003281c:	8fa10030 	lw	at,48(sp)
80032820:	8fa2002c 	lw	v0,44(sp)
80032824:	ac220074 	sw	v0,116(at)
    VirtAddr::from(trapframe.regs[29]).write(tmp_tf);
80032828:	8c240074 	lw	a0,116(at)
8003282c:	0c00af50 	jal	8002bd40 <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h6ea8d698280004a0E>
80032830:	00000000 	nop
80032834:	afa200d0 	sw	v0,208(sp)
80032838:	27a100d0 	addiu	at,sp,208
8003283c:	afa1011c 	sw	at,284(sp)
            ptr::write(self.raw as *mut T, src);
80032840:	8fa400d0 	lw	a0,208(sp)
80032844:	27a50034 	addiu	a1,sp,52
80032848:	0c008a5a 	jal	80022968 <_ZN4core3ptr5write17h57dba2268c05fb43E>
8003284c:	00000000 	nop
    let curenv = {
        match CUR_ENV.lock().as_mut() {
80032850:	3c018105 	lui	at,0x8105
80032854:	2424e74c 	addiu	a0,at,-6324
80032858:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
8003285c:	00000000 	nop
80032860:	00402025 	move	a0,v0
80032864:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
80032868:	00000000 	nop
8003286c:	afa200d8 	sw	v0,216(sp)
80032870:	27a400d8 	addiu	a0,sp,216
80032874:	0c00adb3 	jal	8002b6cc <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc76053e0a705b1f2E>
80032878:	00000000 	nop
8003287c:	00402025 	move	a0,v0
80032880:	0c00969a 	jal	80025a68 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3e1c6d8ce9e61d08E>
80032884:	00000000 	nop
80032888:	afa200d4 	sw	v0,212(sp)
8003288c:	8fa100d4 	lw	at,212(sp)
80032890:	10200007 	beqz	at,800328b0 <_ZN8mos_65024trap3tlb10do_tlb_mod17hff0d14b5c580100aE+0x144>
80032894:	00000000 	nop
80032898:	0800ca38 	j	800328e0 <_ZN8mos_65024trap3tlb10do_tlb_mod17hff0d14b5c580100aE+0x174>
8003289c:	00000000 	nop
    trapframe.regs[29] -= size_of::<trapframe::Trapframe>();
800328a0:	3c018105 	lui	at,0x8105
800328a4:	2424dfdc 	addiu	a0,at,-8228
800328a8:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800328ac:	00000000 	nop
            Some(idx) => &ENV_LIST.lock()[*idx],
            None => panic!("do_tlb_mod: no env to run"),
800328b0:	3c018105 	lui	at,0x8105
800328b4:	2425e008 	addiu	a1,at,-8184
800328b8:	27a400e0 	addiu	a0,sp,224
800328bc:	afa40028 	sw	a0,40(sp)
800328c0:	24060001 	li	a2,1
800328c4:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
800328c8:	00000000 	nop
800328cc:	8fa40028 	lw	a0,40(sp)
800328d0:	3c018105 	lui	at,0x8105
800328d4:	2425e010 	addiu	a1,at,-8176
800328d8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800328dc:	00000000 	nop
            Some(idx) => &ENV_LIST.lock()[*idx],
800328e0:	8fa100d4 	lw	at,212(sp)
800328e4:	afa1001c 	sw	at,28(sp)
800328e8:	afa10114 	sw	at,276(sp)
800328ec:	3c018105 	lui	at,0x8105
800328f0:	2424e74c 	addiu	a0,at,-6324
800328f4:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
800328f8:	00000000 	nop
800328fc:	00402025 	move	a0,v0
80032900:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
80032904:	00000000 	nop
80032908:	afa200dc 	sw	v0,220(sp)
8003290c:	27a400dc 	addiu	a0,sp,220
80032910:	0c00ad01 	jal	8002b404 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h20b5075732bdd7e1E>
80032914:	00000000 	nop
80032918:	8fa1001c 	lw	at,28(sp)
8003291c:	00402025 	move	a0,v0
80032920:	8c250000 	lw	a1,0(at)
80032924:	3c018105 	lui	at,0x8105
80032928:	2426e020 	addiu	a2,at,-8160
8003292c:	0c00ad67 	jal	8002b59c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hd991529710152bc1E>
80032930:	00000000 	nop
80032934:	afa20024 	sw	v0,36(sp)
80032938:	00400825 	move	at,v0
8003293c:	afa10020 	sw	at,32(sp)
80032940:	afa20118 	sw	v0,280(sp)
80032944:	27a400d8 	addiu	a0,sp,216
        }
    };
80032948:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
8003294c:	00000000 	nop
80032950:	8fa20024 	lw	v0,36(sp)
    if curenv.env_user_tlb_mod_entry == 0 {
80032954:	8c4100d4 	lw	at,212(v0)
80032958:	1420000f 	bnez	at,80032998 <_ZN8mos_65024trap3tlb10do_tlb_mod17hff0d14b5c580100aE+0x22c>
8003295c:	00000000 	nop
80032960:	0800ca5a 	j	80032968 <_ZN8mos_65024trap3tlb10do_tlb_mod17hff0d14b5c580100aE+0x1fc>
80032964:	00000000 	nop
        panic!("TLB Mod but no user handler registered.");
80032968:	3c018105 	lui	at,0x8105
8003296c:	2425e058 	addiu	a1,at,-8104
80032970:	27a400f8 	addiu	a0,sp,248
80032974:	afa40018 	sw	a0,24(sp)
80032978:	24060001 	li	a2,1
8003297c:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
80032980:	00000000 	nop
80032984:	8fa40018 	lw	a0,24(sp)
80032988:	3c018105 	lui	at,0x8105
8003298c:	2425e060 	addiu	a1,at,-8096
80032990:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80032994:	00000000 	nop
    }
    trapframe.regs[4] = trapframe.regs[29];
80032998:	8fa10030 	lw	at,48(sp)
8003299c:	8c220074 	lw	v0,116(at)
800329a0:	ac220010 	sw	v0,16(at)
    trapframe.regs[29] -= size_of::<usize>();
800329a4:	8c210074 	lw	at,116(at)
800329a8:	2422fffc 	addiu	v0,at,-4
800329ac:	afa20014 	sw	v0,20(sp)
800329b0:	2c210004 	sltiu	at,at,4
800329b4:	14200010 	bnez	at,800329f8 <_ZN8mos_65024trap3tlb10do_tlb_mod17hff0d14b5c580100aE+0x28c>
800329b8:	00000000 	nop
800329bc:	0800ca71 	j	800329c4 <_ZN8mos_65024trap3tlb10do_tlb_mod17hff0d14b5c580100aE+0x258>
800329c0:	00000000 	nop
800329c4:	8fa20030 	lw	v0,48(sp)
800329c8:	8fa10020 	lw	at,32(sp)
800329cc:	8fa30014 	lw	v1,20(sp)
800329d0:	ac430074 	sw	v1,116(v0)
    trapframe.epc = curenv.env_user_tlb_mod_entry;
800329d4:	8c2100d4 	lw	at,212(at)
800329d8:	ac410094 	sw	at,148(v0)
800329dc:	27a400dc 	addiu	a0,sp,220
}
800329e0:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
800329e4:	00000000 	nop
800329e8:	8fbf0124 	lw	ra,292(sp)
800329ec:	27bd0128 	addiu	sp,sp,296
800329f0:	03e00008 	jr	ra
800329f4:	00000000 	nop
    trapframe.regs[29] -= size_of::<usize>();
800329f8:	3c018105 	lui	at,0x8105
800329fc:	2424e070 	addiu	a0,at,-8080
80032a00:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80032a04:	00000000 	nop

80032a08 <_ZN8mos_65024trap3tlb7do_tlbs17h69cbd1141486ca9aE>:

pub(super) fn do_tlbs(trapframe: &mut trapframe::Trapframe) {
80032a08:	27bdffe8 	addiu	sp,sp,-24
80032a0c:	afbf0014 	sw	ra,20(sp)
80032a10:	afa40010 	sw	a0,16(sp)
    do_tlb_refill(trapframe);
80032a14:	0c00cb3f 	jal	80032cfc <_ZN8mos_65024trap3tlb13do_tlb_refill17hc30a12ef73181cd7E>
80032a18:	00000000 	nop
}
80032a1c:	8fbf0014 	lw	ra,20(sp)
80032a20:	27bd0018 	addiu	sp,sp,24
80032a24:	03e00008 	jr	ra
80032a28:	00000000 	nop

80032a2c <_ZN8mos_65024trap3tlb7do_tlbl17h81678d34081ec62aE>:

pub(super) fn do_tlbl(trapframe: &mut trapframe::Trapframe) {
80032a2c:	27bdffe8 	addiu	sp,sp,-24
80032a30:	afbf0014 	sw	ra,20(sp)
80032a34:	afa40010 	sw	a0,16(sp)
    do_tlb_refill(trapframe);
80032a38:	0c00cb3f 	jal	80032cfc <_ZN8mos_65024trap3tlb13do_tlb_refill17hc30a12ef73181cd7E>
80032a3c:	00000000 	nop
}
80032a40:	8fbf0014 	lw	ra,20(sp)
80032a44:	27bd0018 	addiu	sp,sp,24
80032a48:	03e00008 	jr	ra
80032a4c:	00000000 	nop

80032a50 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E>:

fn passive_alloc(env: &mut Env, va: VirtAddr) -> Result<(), &'static str> {
80032a50:	27bdff90 	addiu	sp,sp,-112
80032a54:	afbf006c 	sw	ra,108(sp)
80032a58:	afa40020 	sw	a0,32(sp)
80032a5c:	afa50024 	sw	a1,36(sp)
80032a60:	afa40054 	sw	a0,84(sp)
    if va < UTEMP {
80032a64:	3c018105 	lui	at,0x8105
80032a68:	2425d1a4 	addiu	a1,at,-11868
80032a6c:	27a40024 	addiu	a0,sp,36
80032a70:	0c0082ef 	jal	80020bbc <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E>
80032a74:	00000000 	nop
80032a78:	1440000c 	bnez	v0,80032aac <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x5c>
80032a7c:	00000000 	nop
80032a80:	0800caa2 	j	80032a88 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x38>
80032a84:	00000000 	nop
        return Err("passive_alloc: va < UTEMP");
    }
    if va >= USTACKTOP && va < UXSTACKTOP {
80032a88:	3c018105 	lui	at,0x8105
80032a8c:	2425d1ac 	addiu	a1,at,-11860
80032a90:	27a40024 	addiu	a0,sp,36
80032a94:	0c008265 	jal	80020994 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE>
80032a98:	00000000 	nop
80032a9c:	14400013 	bnez	v0,80032aec <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x9c>
80032aa0:	00000000 	nop
80032aa4:	0800cab2 	j	80032ac8 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x78>
80032aa8:	00000000 	nop
        return Err("passive_alloc: va < UTEMP");
80032aac:	3c018105 	lui	at,0x8105
80032ab0:	2421e12c 	addiu	at,at,-7892
80032ab4:	afa10028 	sw	at,40(sp)
80032ab8:	24010019 	li	at,25
80032abc:	afa1002c 	sw	at,44(sp)
80032ac0:	0800cb39 	j	80032ce4 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x294>
80032ac4:	00000000 	nop
        return Err("passive_alloc: va >= USTACKTOP && va < UXSTACKTOP");
    }
    if va >= UENVS && va < UPAGES {
80032ac8:	3c018105 	lui	at,0x8105
80032acc:	2425d1a8 	addiu	a1,at,-11864
80032ad0:	27a40024 	addiu	a0,sp,36
80032ad4:	0c008265 	jal	80020994 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE>
80032ad8:	00000000 	nop
80032adc:	1440001c 	bnez	v0,80032b50 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x100>
80032ae0:	00000000 	nop
80032ae4:	0800cacb 	j	80032b2c <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0xdc>
80032ae8:	00000000 	nop
    if va >= USTACKTOP && va < UXSTACKTOP {
80032aec:	3c018105 	lui	at,0x8105
80032af0:	2425d1a8 	addiu	a1,at,-11864
80032af4:	27a40024 	addiu	a0,sp,36
80032af8:	0c0082ef 	jal	80020bbc <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E>
80032afc:	00000000 	nop
80032b00:	1040fff1 	beqz	v0,80032ac8 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x78>
80032b04:	00000000 	nop
80032b08:	0800cac4 	j	80032b10 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0xc0>
80032b0c:	00000000 	nop
        return Err("passive_alloc: va >= USTACKTOP && va < UXSTACKTOP");
80032b10:	3c018105 	lui	at,0x8105
80032b14:	2421e0fb 	addiu	at,at,-7941
80032b18:	afa10028 	sw	at,40(sp)
80032b1c:	24010031 	li	at,49
80032b20:	afa1002c 	sw	at,44(sp)
80032b24:	0800cb39 	j	80032ce4 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x294>
80032b28:	00000000 	nop
        return Err("passive_alloc: va >= UENVS && va < UPAGES");
    }
    if va >= UPAGES && va < UVPT {
80032b2c:	3c018105 	lui	at,0x8105
80032b30:	2425d1b0 	addiu	a1,at,-11856
80032b34:	27a40024 	addiu	a0,sp,36
80032b38:	0c008265 	jal	80020994 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE>
80032b3c:	00000000 	nop
80032b40:	1440001c 	bnez	v0,80032bb4 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x164>
80032b44:	00000000 	nop
80032b48:	0800cae4 	j	80032b90 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x140>
80032b4c:	00000000 	nop
    if va >= UENVS && va < UPAGES {
80032b50:	3c018105 	lui	at,0x8105
80032b54:	2425d1b0 	addiu	a1,at,-11856
80032b58:	27a40024 	addiu	a0,sp,36
80032b5c:	0c0082ef 	jal	80020bbc <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E>
80032b60:	00000000 	nop
80032b64:	1040fff1 	beqz	v0,80032b2c <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0xdc>
80032b68:	00000000 	nop
80032b6c:	0800cadd 	j	80032b74 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x124>
80032b70:	00000000 	nop
        return Err("passive_alloc: va >= UENVS && va < UPAGES");
80032b74:	3c018105 	lui	at,0x8105
80032b78:	2421e0d2 	addiu	at,at,-7982
80032b7c:	afa10028 	sw	at,40(sp)
80032b80:	24010029 	li	at,41
80032b84:	afa1002c 	sw	at,44(sp)
80032b88:	0800cb39 	j	80032ce4 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x294>
80032b8c:	00000000 	nop
        return Err("passive_alloc: va >= UPAGES && va < UVPT");
    }
    if va >= KSEG0 {
80032b90:	3c018105 	lui	at,0x8105
80032b94:	2425d1b8 	addiu	a1,at,-11848
80032b98:	27a40024 	addiu	a0,sp,36
80032b9c:	0c008265 	jal	80020994 <_ZN4core3cmp10PartialOrd2ge17h163944d9286eb78fE>
80032ba0:	00000000 	nop
80032ba4:	14400028 	bnez	v0,80032c48 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x1f8>
80032ba8:	00000000 	nop
80032bac:	0800cafd 	j	80032bf4 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x1a4>
80032bb0:	00000000 	nop
    if va >= UPAGES && va < UVPT {
80032bb4:	3c018105 	lui	at,0x8105
80032bb8:	2425d1b4 	addiu	a1,at,-11852
80032bbc:	27a40024 	addiu	a0,sp,36
80032bc0:	0c0082ef 	jal	80020bbc <_ZN4core3cmp10PartialOrd2lt17h35112acdc134d719E>
80032bc4:	00000000 	nop
80032bc8:	1040fff1 	beqz	v0,80032b90 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x140>
80032bcc:	00000000 	nop
80032bd0:	0800caf6 	j	80032bd8 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x188>
80032bd4:	00000000 	nop
        return Err("passive_alloc: va >= UPAGES && va < UVPT");
80032bd8:	3c018105 	lui	at,0x8105
80032bdc:	2421e0aa 	addiu	at,at,-8022
80032be0:	afa10028 	sw	at,40(sp)
80032be4:	24010028 	li	at,40
80032be8:	afa1002c 	sw	at,44(sp)
80032bec:	0800cb39 	j	80032ce4 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x294>
80032bf0:	00000000 	nop
80032bf4:	27a40048 	addiu	a0,sp,72
80032bf8:	afa40018 	sw	a0,24(sp)
        return Err("passive_alloc: va >= KSEG0");
    }
    let (_, page_pa) = page_alloc().ok_or("No more pages")?;
80032bfc:	0c00b007 	jal	8002c01c <_ZN8mos_65022mm4page10page_alloc17ha38ea23af0abb5c5E>
80032c00:	00000000 	nop
80032c04:	8fa50018 	lw	a1,24(sp)
80032c08:	3c018105 	lui	at,0x8105
80032c0c:	2426d360 	addiu	a2,at,-11424
80032c10:	27a4003c 	addiu	a0,sp,60
80032c14:	afa4001c 	sw	a0,28(sp)
80032c18:	2407000d 	li	a3,13
80032c1c:	0c009667 	jal	8002599c <_ZN4core6option15Option$LT$T$GT$5ok_or17h78b32bbff800a191E>
80032c20:	00000000 	nop
80032c24:	8fa5001c 	lw	a1,28(sp)
80032c28:	27a40030 	addiu	a0,sp,48
80032c2c:	0c00ad24 	jal	8002b490 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17ha580692a78d50a4dE>
80032c30:	00000000 	nop
80032c34:	8fa10030 	lw	at,48(sp)
80032c38:	1020000a 	beqz	at,80032c64 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x214>
80032c3c:	00000000 	nop
80032c40:	0800cb2d 	j	80032cb4 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x264>
80032c44:	00000000 	nop
        return Err("passive_alloc: va >= KSEG0");
80032c48:	3c018105 	lui	at,0x8105
80032c4c:	2421e090 	addiu	at,at,-8048
80032c50:	afa10028 	sw	at,40(sp)
80032c54:	2401001a 	li	at,26
80032c58:	afa1002c 	sw	at,44(sp)
80032c5c:	0800cb39 	j	80032ce4 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x294>
80032c60:	00000000 	nop
    let (_, page_pa) = page_alloc().ok_or("No more pages")?;
80032c64:	8fa10020 	lw	at,32(sp)
80032c68:	8fa20034 	lw	v0,52(sp)
80032c6c:	8fa60038 	lw	a2,56(sp)
80032c70:	afa20058 	sw	v0,88(sp)
80032c74:	afa6005c 	sw	a2,92(sp)
80032c78:	afa60060 	sw	a2,96(sp)
    env.env_pgdir
80032c7c:	8c2400b0 	lw	a0,176(at)
        .map_va_to_pa(va, page_pa, 1, &Permssion::PTE_D, false)
80032c80:	8fa50024 	lw	a1,36(sp)
    env.env_pgdir
80032c84:	3c018105 	lui	at,0x8105
80032c88:	2422d1bc 	addiu	v0,at,-11844
80032c8c:	03a00825 	move	at,sp
80032c90:	ac220010 	sw	v0,16(at)
80032c94:	ac200014 	sw	zero,20(at)
80032c98:	24070001 	li	a3,1
80032c9c:	0c00b117 	jal	8002c45c <_ZN8mos_65022mm7pgtable7Pgtable12map_va_to_pa17h26bd7c338fefffddE>
80032ca0:	00000000 	nop
80032ca4:	afa20028 	sw	v0,40(sp)
80032ca8:	afa3002c 	sw	v1,44(sp)
80032cac:	0800cb39 	j	80032ce4 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x294>
80032cb0:	00000000 	nop
    let (_, page_pa) = page_alloc().ok_or("No more pages")?;
80032cb4:	8fa40034 	lw	a0,52(sp)
80032cb8:	8fa50038 	lw	a1,56(sp)
80032cbc:	afa40064 	sw	a0,100(sp)
80032cc0:	afa50068 	sw	a1,104(sp)
80032cc4:	3c018105 	lui	at,0x8105
80032cc8:	2426e080 	addiu	a2,at,-8064
80032ccc:	0c00809d 	jal	80020274 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hc0dd7e832e7e990eE>
80032cd0:	00000000 	nop
80032cd4:	afa20028 	sw	v0,40(sp)
80032cd8:	afa3002c 	sw	v1,44(sp)
80032cdc:	0800cb39 	j	80032ce4 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E+0x294>
80032ce0:	00000000 	nop
}
80032ce4:	8fa20028 	lw	v0,40(sp)
80032ce8:	8fa3002c 	lw	v1,44(sp)
80032cec:	8fbf006c 	lw	ra,108(sp)
80032cf0:	27bd0070 	addiu	sp,sp,112
80032cf4:	03e00008 	jr	ra
80032cf8:	00000000 	nop

80032cfc <_ZN8mos_65024trap3tlb13do_tlb_refill17hc30a12ef73181cd7E>:

// #[inline(always)]
fn do_tlb_refill(trapframe: &mut trapframe::Trapframe) {
80032cfc:	27bdff18 	addiu	sp,sp,-232
80032d00:	afbf00e4 	sw	ra,228(sp)
80032d04:	afa4003c 	sw	a0,60(sp)
80032d08:	afa40098 	sw	a0,152(sp)
    let badvaddr = trapframe.badvaddr;
80032d0c:	8c81008c 	lw	at,140(a0)
80032d10:	afa10044 	sw	at,68(sp)
80032d14:	27a20044 	addiu	v0,sp,68
80032d18:	afa200b8 	sw	v0,184(sp)
80032d1c:	afa200c4 	sw	v0,196(sp)
80032d20:	3c018004 	lui	at,0x8004
80032d24:	24217304 	addiu	at,at,29444
80032d28:	afa100c8 	sw	at,200(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80032d2c:	afa200bc 	sw	v0,188(sp)
80032d30:	afa100c0 	sw	at,192(sp)
    }
80032d34:	8fa200bc 	lw	v0,188(sp)
80032d38:	8fa100c0 	lw	at,192(sp)
    println!("do_tlb_refill,the badvaddr is {:x}\n", badvaddr);
80032d3c:	afa20060 	sw	v0,96(sp)
80032d40:	afa10064 	sw	at,100(sp)
80032d44:	03a01025 	move	v0,sp
80032d48:	24010001 	li	at,1
80032d4c:	ac410010 	sw	at,16(v0)
80032d50:	3c018105 	lui	at,0x8105
80032d54:	2425e164 	addiu	a1,at,-7836
80032d58:	27a40048 	addiu	a0,sp,72
80032d5c:	afa40038 	sw	a0,56(sp)
80032d60:	24060002 	li	a2,2
80032d64:	27a70060 	addiu	a3,sp,96
80032d68:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
80032d6c:	00000000 	nop
80032d70:	8fa40038 	lw	a0,56(sp)
80032d74:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
80032d78:	00000000 	nop
80032d7c:	8fa4003c 	lw	a0,60(sp)
    let asid = trapframe.hi & 0xff;
80032d80:	90810084 	lbu	at,132(a0)
80032d84:	afa1009c 	sw	at,156(sp)
    mips32::tlb::tlb_invalidate(badvaddr, asid);
80032d88:	8fa20044 	lw	v0,68(sp)
80032d8c:	afa200d4 	sw	v0,212(sp)
80032d90:	afa100d8 	sw	at,216(sp)
    let cur_env_idx = CUR_ENV.lock();
80032d94:	3c018105 	lui	at,0x8105
80032d98:	2424e74c 	addiu	a0,at,-6324
80032d9c:	0c00d3ad 	jal	80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>
80032da0:	00000000 	nop
80032da4:	00402025 	move	a0,v0
80032da8:	0c00a161 	jal	80028584 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hebacd50eaf91aa8cE>
80032dac:	00000000 	nop
80032db0:	afa20068 	sw	v0,104(sp)
80032db4:	27a40068 	addiu	a0,sp,104
    let curenvidx = match *cur_env_idx {
80032db8:	0c00ad08 	jal	8002b420 <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2d6867b46e7bbf5cE>
80032dbc:	00000000 	nop
80032dc0:	00400825 	move	at,v0
80032dc4:	afa10040 	sw	at,64(sp)
80032dc8:	8c410000 	lw	at,0(v0)
80032dcc:	1420000f 	bnez	at,80032e0c <_ZN8mos_65024trap3tlb13do_tlb_refill17hc30a12ef73181cd7E+0x110>
80032dd0:	00000000 	nop
80032dd4:	0800cb77 	j	80032ddc <_ZN8mos_65024trap3tlb13do_tlb_refill17hc30a12ef73181cd7E+0xe0>
80032dd8:	00000000 	nop
        Some(idx) => idx,
        None => panic!("do_tlb_refill: no env to run"),
80032ddc:	3c018105 	lui	at,0x8105
80032de0:	2425e190 	addiu	a1,at,-7792
80032de4:	27a4006c 	addiu	a0,sp,108
80032de8:	afa40034 	sw	a0,52(sp)
80032dec:	24060001 	li	a2,1
80032df0:	0c0083f6 	jal	80020fd8 <_ZN4core3fmt9Arguments9new_const17hcff36e2d07a00cf5E>
80032df4:	00000000 	nop
80032df8:	8fa40034 	lw	a0,52(sp)
80032dfc:	3c018105 	lui	at,0x8105
80032e00:	2425e198 	addiu	a1,at,-7784
80032e04:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80032e08:	00000000 	nop
        Some(idx) => idx,
80032e0c:	8fa10040 	lw	at,64(sp)
80032e10:	8c210004 	lw	at,4(at)
80032e14:	afa1002c 	sw	at,44(sp)
80032e18:	afa100a0 	sw	at,160(sp)
    };
    let curenv = &mut ENV_LIST.lock()[curenvidx];
80032e1c:	3c018105 	lui	at,0x8105
80032e20:	2424e74c 	addiu	a0,at,-6324
80032e24:	0c00d3a1 	jal	80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>
80032e28:	00000000 	nop
80032e2c:	00402025 	move	a0,v0
80032e30:	0c00a05f 	jal	8002817c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17h34cbf03c3b6cba6dE>
80032e34:	00000000 	nop
80032e38:	afa20084 	sw	v0,132(sp)
80032e3c:	27a40084 	addiu	a0,sp,132
80032e40:	0c00adac 	jal	8002b6b0 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbbb3049756e7550aE>
80032e44:	00000000 	nop
80032e48:	8fa5002c 	lw	a1,44(sp)
80032e4c:	00402025 	move	a0,v0
80032e50:	3c018105 	lui	at,0x8105
80032e54:	2426e1a8 	addiu	a2,at,-7768
80032e58:	0c00adc2 	jal	8002b708 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17h04c6bf60a3a419bcE>
80032e5c:	00000000 	nop
80032e60:	00400825 	move	at,v0
80032e64:	afa10030 	sw	at,48(sp)
80032e68:	afa200a4 	sw	v0,164(sp)
    let ptentry: &PgtableEntry;
    loop {
80032e6c:	0800cb9d 	j	80032e74 <_ZN8mos_65024trap3tlb13do_tlb_refill17hc30a12ef73181cd7E+0x178>
80032e70:	00000000 	nop
        match curenv.env_pgdir.va_to_pa(VirtAddr::from(badvaddr)) {
80032e74:	8fa10030 	lw	at,48(sp)
80032e78:	8c2100b0 	lw	at,176(at)
80032e7c:	afa10028 	sw	at,40(sp)
80032e80:	8fa40044 	lw	a0,68(sp)
80032e84:	0c00af50 	jal	8002bd40 <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h6ea8d698280004a0E>
80032e88:	00000000 	nop
80032e8c:	8fa40028 	lw	a0,40(sp)
80032e90:	00402825 	move	a1,v0
80032e94:	0c00b37b 	jal	8002cdec <_ZN8mos_65022mm7pgtable7Pgtable8va_to_pa17h6ea832b98c059333E>
80032e98:	00000000 	nop
80032e9c:	afa20088 	sw	v0,136(sp)
80032ea0:	afa3008c 	sw	v1,140(sp)
80032ea4:	8fa10088 	lw	at,136(sp)
80032ea8:	14200017 	bnez	at,80032f08 <_ZN8mos_65024trap3tlb13do_tlb_refill17hc30a12ef73181cd7E+0x20c>
80032eac:	00000000 	nop
80032eb0:	0800cbae 	j	80032eb8 <_ZN8mos_65024trap3tlb13do_tlb_refill17hc30a12ef73181cd7E+0x1bc>
80032eb4:	00000000 	nop
            Some((p, _)) => {
                ptentry = p;
                break;
            }
            None => {
                passive_alloc(curenv, VirtAddr::from(badvaddr))
80032eb8:	8fa40044 	lw	a0,68(sp)
80032ebc:	0c00af50 	jal	8002bd40 <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h6ea8d698280004a0E>
80032ec0:	00000000 	nop
80032ec4:	8fa40030 	lw	a0,48(sp)
80032ec8:	00402825 	move	a1,v0
80032ecc:	0c00ca94 	jal	80032a50 <_ZN8mos_65024trap3tlb13passive_alloc17h604d6699708c84b5E>
80032ed0:	00000000 	nop
80032ed4:	00402025 	move	a0,v0
80032ed8:	00602825 	move	a1,v1
80032edc:	3c018105 	lui	at,0x8105
80032ee0:	2421e1dc 	addiu	at,at,-7716
80032ee4:	03a01025 	move	v0,sp
80032ee8:	ac410010 	sw	at,16(v0)
80032eec:	3c018105 	lui	at,0x8105
80032ef0:	2426e1b8 	addiu	a2,at,-7752
80032ef4:	24070023 	li	a3,35
80032ef8:	0c0097c5 	jal	80025f14 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h220eec6768f13486E>
80032efc:	00000000 	nop
80032f00:	0800cb9d 	j	80032e74 <_ZN8mos_65024trap3tlb13do_tlb_refill17hc30a12ef73181cd7E+0x178>
80032f04:	00000000 	nop
            Some((p, _)) => {
80032f08:	8fa10088 	lw	at,136(sp)
80032f0c:	afa1001c 	sw	at,28(sp)
80032f10:	afa100a8 	sw	at,168(sp)
80032f14:	2402fff8 	li	v0,-8
                    .expect("do_tlb_refill: passive_alloc failed");
            }
        };
    }
    let ppte = (ptentry as *const PgtableEntry as usize & !0x7) as usize;
80032f18:	00222024 	and	a0,at,v0
80032f1c:	afa400ac 	sw	a0,172(sp)
    let lo0 = VirtAddr::from(ppte).read::<usize>() >> 6;
80032f20:	0c00af50 	jal	8002bd40 <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h6ea8d698280004a0E>
80032f24:	00000000 	nop
80032f28:	afa20090 	sw	v0,144(sp)
80032f2c:	27a10090 	addiu	at,sp,144
80032f30:	afa100e0 	sw	at,224(sp)
        unsafe { ptr::read(self.raw as *const T) }
80032f34:	8fa40090 	lw	a0,144(sp)
80032f38:	0c0088ef 	jal	800223bc <_ZN4core3ptr4read17h5654c04943492f3dE>
80032f3c:	00000000 	nop
80032f40:	8fa1001c 	lw	at,28(sp)
80032f44:	00021182 	srl	v0,v0,0x6
80032f48:	afa20020 	sw	v0,32(sp)
80032f4c:	afa200b0 	sw	v0,176(sp)
80032f50:	24020004 	li	v0,4
    let lo1 = VirtAddr::from(ppte + size_of::<PgtableEntry>()).read::<usize>() >> 6;
80032f54:	7c411004 	ins	at,v0,0x0,0x3
80032f58:	afa10024 	sw	at,36(sp)
80032f5c:	24010000 	li	at,0
80032f60:	1400001f 	bnez	zero,80032fe0 <_ZN8mos_65024trap3tlb13do_tlb_refill17hc30a12ef73181cd7E+0x2e4>
80032f64:	00000000 	nop
80032f68:	0800cbdc 	j	80032f70 <_ZN8mos_65024trap3tlb13do_tlb_refill17hc30a12ef73181cd7E+0x274>
80032f6c:	00000000 	nop
80032f70:	8fa40024 	lw	a0,36(sp)
80032f74:	0c00af50 	jal	8002bd40 <_ZN81_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h6ea8d698280004a0E>
80032f78:	00000000 	nop
80032f7c:	afa20094 	sw	v0,148(sp)
80032f80:	27a10094 	addiu	at,sp,148
80032f84:	afa100dc 	sw	at,220(sp)
80032f88:	8fa40094 	lw	a0,148(sp)
80032f8c:	0c0088ef 	jal	800223bc <_ZN4core3ptr4read17h5654c04943492f3dE>
80032f90:	00000000 	nop
80032f94:	00400825 	move	at,v0
80032f98:	8fa20020 	lw	v0,32(sp)
80032f9c:	00010982 	srl	at,at,0x6
80032fa0:	afa100b4 	sw	at,180(sp)
80032fa4:	afa200cc 	sw	v0,204(sp)
80032fa8:	40821000 	mtc0	v0,c0_entrylo0
80032fac:	afa100d0 	sw	at,208(sp)
80032fb0:	40811800 	mtc0	at,c0_entrylo1
}

#[inline(always)]
pub fn tlbwr() {
    unsafe {
        arch::asm!("tlbwr");
80032fb4:	42000006 	tlbwr
80032fb8:	27a40084 	addiu	a0,sp,132
    cp0::entrylo0::write(lo0);
    cp0::entrylo1::write(lo1);
    mips32::tlb::tlbwr();
}
80032fbc:	0c008d78 	jal	800235e0 <_ZN4core3ptr96drop_in_place$LT$sync..spin..SpinlockGuard$LT$alloc..vec..Vec$LT$mos_6502..proc..Env$GT$$GT$$GT$17h9bf6a82f9ba8359eE>
80032fc0:	00000000 	nop
80032fc4:	27a40068 	addiu	a0,sp,104
80032fc8:	0c008c57 	jal	8002315c <_ZN4core3ptr87drop_in_place$LT$sync..spin..SpinlockGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h9757ceb0d75f3e4aE>
80032fcc:	00000000 	nop
80032fd0:	8fbf00e4 	lw	ra,228(sp)
80032fd4:	27bd00e8 	addiu	sp,sp,232
80032fd8:	03e00008 	jr	ra
80032fdc:	00000000 	nop
    let lo1 = VirtAddr::from(ppte + size_of::<PgtableEntry>()).read::<usize>() >> 6;
80032fe0:	3c018105 	lui	at,0x8105
80032fe4:	2424e1ec 	addiu	a0,at,-7700
80032fe8:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80032fec:	00000000 	nop

80032ff0 <trap_init>:
const EXC_CODE_TRAP: usize = 13;
const EXC_CODE_FPE: usize = 15;
const EXC_CODE_C2E: usize = 18;

#[no_mangle]
pub fn trap_init() {
80032ff0:	27bdffe8 	addiu	sp,sp,-24
80032ff4:	afbf0014 	sw	ra,20(sp)
    enable_interrupt();
80032ff8:	0c00be35 	jal	8002f8d4 <_ZN8mos_65024trap3int16enable_interrupt17h6652561978ef1f38E>
80032ffc:	00000000 	nop

}
80033000:	8fbf0014 	lw	ra,20(sp)
80033004:	27bd0018 	addiu	sp,sp,24
80033008:	03e00008 	jr	ra
8003300c:	00000000 	nop

80033010 <_ZN8mos_65024trap6do_c2e17hbe019d7661c154b4E>:

fn do_c2e(trapframe: &mut trapframe::Trapframe) {
80033010:	27bdffa8 	addiu	sp,sp,-88
80033014:	afbf0054 	sw	ra,84(sp)
80033018:	afa4003c 	sw	a0,60(sp)
    panic!("Coprocessor 2 exception: {:x}", trapframe.epc);
8003301c:	24820094 	addiu	v0,a0,148
80033020:	afa20040 	sw	v0,64(sp)
80033024:	afa2004c 	sw	v0,76(sp)
80033028:	3c018004 	lui	at,0x8004
8003302c:	24217304 	addiu	at,at,29444
80033030:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80033034:	afa20044 	sw	v0,68(sp)
80033038:	afa10048 	sw	at,72(sp)
    }
8003303c:	8fa20044 	lw	v0,68(sp)
80033040:	8fa10048 	lw	at,72(sp)
80033044:	afa20034 	sw	v0,52(sp)
80033048:	afa10038 	sw	at,56(sp)
8003304c:	03a00825 	move	at,sp
80033050:	24060001 	li	a2,1
80033054:	ac260010 	sw	a2,16(at)
80033058:	3c018105 	lui	at,0x8105
8003305c:	2425e250 	addiu	a1,at,-7600
80033060:	27a4001c 	addiu	a0,sp,28
80033064:	afa40018 	sw	a0,24(sp)
80033068:	27a70034 	addiu	a3,sp,52
8003306c:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
80033070:	00000000 	nop
80033074:	8fa40018 	lw	a0,24(sp)
80033078:	3c018105 	lui	at,0x8105
8003307c:	2425e26c 	addiu	a1,at,-7572
80033080:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80033084:	00000000 	nop

80033088 <_ZN8mos_65024trap6do_fpe17hde6786f7b6b4b218E>:
}

fn do_fpe(trapframe: &mut trapframe::Trapframe) {
80033088:	27bdffa8 	addiu	sp,sp,-88
8003308c:	afbf0054 	sw	ra,84(sp)
80033090:	afa4003c 	sw	a0,60(sp)
    panic!("Floating point exception: {:x}", trapframe.epc);
80033094:	24820094 	addiu	v0,a0,148
80033098:	afa20040 	sw	v0,64(sp)
8003309c:	afa2004c 	sw	v0,76(sp)
800330a0:	3c018004 	lui	at,0x8004
800330a4:	24217304 	addiu	at,at,29444
800330a8:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
800330ac:	afa20044 	sw	v0,68(sp)
800330b0:	afa10048 	sw	at,72(sp)
    }
800330b4:	8fa20044 	lw	v0,68(sp)
800330b8:	8fa10048 	lw	at,72(sp)
800330bc:	afa20034 	sw	v0,52(sp)
800330c0:	afa10038 	sw	at,56(sp)
800330c4:	03a00825 	move	at,sp
800330c8:	24060001 	li	a2,1
800330cc:	ac260010 	sw	a2,16(at)
800330d0:	3c018105 	lui	at,0x8105
800330d4:	2425e298 	addiu	a1,at,-7528
800330d8:	27a4001c 	addiu	a0,sp,28
800330dc:	afa40018 	sw	a0,24(sp)
800330e0:	27a70034 	addiu	a3,sp,52
800330e4:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
800330e8:	00000000 	nop
800330ec:	8fa40018 	lw	a0,24(sp)
800330f0:	3c018105 	lui	at,0x8105
800330f4:	2425e2a0 	addiu	a1,at,-7520
800330f8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800330fc:	00000000 	nop

80033100 <_ZN8mos_65024trap7do_trap17h2e628936d4d9fc82E>:
}

fn do_trap(trapframe: &mut trapframe::Trapframe) {
80033100:	27bdffa8 	addiu	sp,sp,-88
80033104:	afbf0054 	sw	ra,84(sp)
80033108:	afa4003c 	sw	a0,60(sp)
    panic!("Trap exception: {:x}", trapframe.epc);
8003310c:	24820094 	addiu	v0,a0,148
80033110:	afa20040 	sw	v0,64(sp)
80033114:	afa2004c 	sw	v0,76(sp)
80033118:	3c018004 	lui	at,0x8004
8003311c:	24217304 	addiu	at,at,29444
80033120:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80033124:	afa20044 	sw	v0,68(sp)
80033128:	afa10048 	sw	at,72(sp)
    }
8003312c:	8fa20044 	lw	v0,68(sp)
80033130:	8fa10048 	lw	at,72(sp)
80033134:	afa20034 	sw	v0,52(sp)
80033138:	afa10038 	sw	at,56(sp)
8003313c:	03a00825 	move	at,sp
80033140:	24060001 	li	a2,1
80033144:	ac260010 	sw	a2,16(at)
80033148:	3c018105 	lui	at,0x8105
8003314c:	2425e2b0 	addiu	a1,at,-7504
80033150:	27a4001c 	addiu	a0,sp,28
80033154:	afa40018 	sw	a0,24(sp)
80033158:	27a70034 	addiu	a3,sp,52
8003315c:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
80033160:	00000000 	nop
80033164:	8fa40018 	lw	a0,24(sp)
80033168:	3c018105 	lui	at,0x8105
8003316c:	2425e2b8 	addiu	a1,at,-7496
80033170:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80033174:	00000000 	nop

80033178 <_ZN8mos_65024trap5do_ov17ha902642cd7dc780bE>:
}

fn do_ov(trapframe: &mut trapframe::Trapframe) {
80033178:	27bdffa8 	addiu	sp,sp,-88
8003317c:	afbf0054 	sw	ra,84(sp)
80033180:	afa4003c 	sw	a0,60(sp)
    panic!("Overflow exception: {:x}", trapframe.epc);
80033184:	24820094 	addiu	v0,a0,148
80033188:	afa20040 	sw	v0,64(sp)
8003318c:	afa2004c 	sw	v0,76(sp)
80033190:	3c018004 	lui	at,0x8004
80033194:	24217304 	addiu	at,at,29444
80033198:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003319c:	afa20044 	sw	v0,68(sp)
800331a0:	afa10048 	sw	at,72(sp)
    }
800331a4:	8fa20044 	lw	v0,68(sp)
800331a8:	8fa10048 	lw	at,72(sp)
800331ac:	afa20034 	sw	v0,52(sp)
800331b0:	afa10038 	sw	at,56(sp)
800331b4:	03a00825 	move	at,sp
800331b8:	24060001 	li	a2,1
800331bc:	ac260010 	sw	a2,16(at)
800331c0:	3c018105 	lui	at,0x8105
800331c4:	2425e2dc 	addiu	a1,at,-7460
800331c8:	27a4001c 	addiu	a0,sp,28
800331cc:	afa40018 	sw	a0,24(sp)
800331d0:	27a70034 	addiu	a3,sp,52
800331d4:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
800331d8:	00000000 	nop
800331dc:	8fa40018 	lw	a0,24(sp)
800331e0:	3c018105 	lui	at,0x8105
800331e4:	2425e2e4 	addiu	a1,at,-7452
800331e8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800331ec:	00000000 	nop

800331f0 <_ZN8mos_65024trap6do_cpu17hbc2914911717796aE>:
}

fn do_cpu(trapframe: &mut trapframe::Trapframe) {
800331f0:	27bdffa8 	addiu	sp,sp,-88
800331f4:	afbf0054 	sw	ra,84(sp)
800331f8:	afa4003c 	sw	a0,60(sp)
    panic!("Coprocessor unusable exception: {:x}", trapframe.epc);
800331fc:	24820094 	addiu	v0,a0,148
80033200:	afa20040 	sw	v0,64(sp)
80033204:	afa2004c 	sw	v0,76(sp)
80033208:	3c018004 	lui	at,0x8004
8003320c:	24217304 	addiu	at,at,29444
80033210:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80033214:	afa20044 	sw	v0,68(sp)
80033218:	afa10048 	sw	at,72(sp)
    }
8003321c:	8fa20044 	lw	v0,68(sp)
80033220:	8fa10048 	lw	at,72(sp)
80033224:	afa20034 	sw	v0,52(sp)
80033228:	afa10038 	sw	at,56(sp)
8003322c:	03a00825 	move	at,sp
80033230:	24060001 	li	a2,1
80033234:	ac260010 	sw	a2,16(at)
80033238:	3c018105 	lui	at,0x8105
8003323c:	2425e2f4 	addiu	a1,at,-7436
80033240:	27a4001c 	addiu	a0,sp,28
80033244:	afa40018 	sw	a0,24(sp)
80033248:	27a70034 	addiu	a3,sp,52
8003324c:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
80033250:	00000000 	nop
80033254:	8fa40018 	lw	a0,24(sp)
80033258:	3c018105 	lui	at,0x8105
8003325c:	2425e2fc 	addiu	a1,at,-7428
80033260:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80033264:	00000000 	nop

80033268 <_ZN8mos_65024trap5do_ri17h09747212202c9f0aE>:
}

fn do_ri(trapframe: &mut trapframe::Trapframe) {
80033268:	27bdffa8 	addiu	sp,sp,-88
8003326c:	afbf0054 	sw	ra,84(sp)
80033270:	afa4003c 	sw	a0,60(sp)
    panic!("Reserved instruction exception: {:x}", trapframe.epc);
80033274:	24820094 	addiu	v0,a0,148
80033278:	afa20040 	sw	v0,64(sp)
8003327c:	afa2004c 	sw	v0,76(sp)
80033280:	3c018004 	lui	at,0x8004
80033284:	24217304 	addiu	at,at,29444
80033288:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003328c:	afa20044 	sw	v0,68(sp)
80033290:	afa10048 	sw	at,72(sp)
    }
80033294:	8fa20044 	lw	v0,68(sp)
80033298:	8fa10048 	lw	at,72(sp)
8003329c:	afa20034 	sw	v0,52(sp)
800332a0:	afa10038 	sw	at,56(sp)
800332a4:	03a00825 	move	at,sp
800332a8:	24060001 	li	a2,1
800332ac:	ac260010 	sw	a2,16(at)
800332b0:	3c018105 	lui	at,0x8105
800332b4:	2425e30c 	addiu	a1,at,-7412
800332b8:	27a4001c 	addiu	a0,sp,28
800332bc:	afa40018 	sw	a0,24(sp)
800332c0:	27a70034 	addiu	a3,sp,52
800332c4:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
800332c8:	00000000 	nop
800332cc:	8fa40018 	lw	a0,24(sp)
800332d0:	3c018105 	lui	at,0x8105
800332d4:	2425e314 	addiu	a1,at,-7404
800332d8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800332dc:	00000000 	nop

800332e0 <_ZN8mos_65024trap5do_bp17heb4a108d92935235E>:
}

fn do_bp(trapframe: &mut trapframe::Trapframe) {
800332e0:	27bdffa8 	addiu	sp,sp,-88
800332e4:	afbf0054 	sw	ra,84(sp)
800332e8:	afa4003c 	sw	a0,60(sp)
    panic!("Breakpoint exception: {:x}", trapframe.epc);
800332ec:	24820094 	addiu	v0,a0,148
800332f0:	afa20040 	sw	v0,64(sp)
800332f4:	afa2004c 	sw	v0,76(sp)
800332f8:	3c018004 	lui	at,0x8004
800332fc:	24217304 	addiu	at,at,29444
80033300:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80033304:	afa20044 	sw	v0,68(sp)
80033308:	afa10048 	sw	at,72(sp)
    }
8003330c:	8fa20044 	lw	v0,68(sp)
80033310:	8fa10048 	lw	at,72(sp)
80033314:	afa20034 	sw	v0,52(sp)
80033318:	afa10038 	sw	at,56(sp)
8003331c:	03a00825 	move	at,sp
80033320:	24060001 	li	a2,1
80033324:	ac260010 	sw	a2,16(at)
80033328:	3c018105 	lui	at,0x8105
8003332c:	2425e33c 	addiu	a1,at,-7364
80033330:	27a4001c 	addiu	a0,sp,28
80033334:	afa40018 	sw	a0,24(sp)
80033338:	27a70034 	addiu	a3,sp,52
8003333c:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
80033340:	00000000 	nop
80033344:	8fa40018 	lw	a0,24(sp)
80033348:	3c018105 	lui	at,0x8105
8003334c:	2425e344 	addiu	a1,at,-7356
80033350:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80033354:	00000000 	nop

80033358 <_ZN8mos_65024trap6do_dbe17hd75a68e885ad9f77E>:
}

fn do_dbe(trapframe: &mut trapframe::Trapframe) {
80033358:	27bdffa8 	addiu	sp,sp,-88
8003335c:	afbf0054 	sw	ra,84(sp)
80033360:	afa4003c 	sw	a0,60(sp)
    panic!("Data bus error exception: {:x}", trapframe.badvaddr);
80033364:	2482008c 	addiu	v0,a0,140
80033368:	afa20040 	sw	v0,64(sp)
8003336c:	afa2004c 	sw	v0,76(sp)
80033370:	3c018004 	lui	at,0x8004
80033374:	24217304 	addiu	at,at,29444
80033378:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003337c:	afa20044 	sw	v0,68(sp)
80033380:	afa10048 	sw	at,72(sp)
    }
80033384:	8fa20044 	lw	v0,68(sp)
80033388:	8fa10048 	lw	at,72(sp)
8003338c:	afa20034 	sw	v0,52(sp)
80033390:	afa10038 	sw	at,56(sp)
80033394:	03a00825 	move	at,sp
80033398:	24060001 	li	a2,1
8003339c:	ac260010 	sw	a2,16(at)
800333a0:	3c018105 	lui	at,0x8105
800333a4:	2425e370 	addiu	a1,at,-7312
800333a8:	27a4001c 	addiu	a0,sp,28
800333ac:	afa40018 	sw	a0,24(sp)
800333b0:	27a70034 	addiu	a3,sp,52
800333b4:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
800333b8:	00000000 	nop
800333bc:	8fa40018 	lw	a0,24(sp)
800333c0:	3c018105 	lui	at,0x8105
800333c4:	2425e378 	addiu	a1,at,-7304
800333c8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800333cc:	00000000 	nop

800333d0 <_ZN8mos_65024trap6do_ibe17hbd3c2514f0829defE>:
}

fn do_ibe(trapframe: &mut trapframe::Trapframe) {
800333d0:	27bdffa8 	addiu	sp,sp,-88
800333d4:	afbf0054 	sw	ra,84(sp)
800333d8:	afa4003c 	sw	a0,60(sp)
    panic!("Instruction bus error exception: {:x}", trapframe.badvaddr);
800333dc:	2482008c 	addiu	v0,a0,140
800333e0:	afa20040 	sw	v0,64(sp)
800333e4:	afa2004c 	sw	v0,76(sp)
800333e8:	3c018004 	lui	at,0x8004
800333ec:	24217304 	addiu	at,at,29444
800333f0:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
800333f4:	afa20044 	sw	v0,68(sp)
800333f8:	afa10048 	sw	at,72(sp)
    }
800333fc:	8fa20044 	lw	v0,68(sp)
80033400:	8fa10048 	lw	at,72(sp)
80033404:	afa20034 	sw	v0,52(sp)
80033408:	afa10038 	sw	at,56(sp)
8003340c:	03a00825 	move	at,sp
80033410:	24060001 	li	a2,1
80033414:	ac260010 	sw	a2,16(at)
80033418:	3c018105 	lui	at,0x8105
8003341c:	2425e3ac 	addiu	a1,at,-7252
80033420:	27a4001c 	addiu	a0,sp,28
80033424:	afa40018 	sw	a0,24(sp)
80033428:	27a70034 	addiu	a3,sp,52
8003342c:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
80033430:	00000000 	nop
80033434:	8fa40018 	lw	a0,24(sp)
80033438:	3c018105 	lui	at,0x8105
8003343c:	2425e3b4 	addiu	a1,at,-7244
80033440:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80033444:	00000000 	nop

80033448 <_ZN8mos_65024trap7do_ades17hb7954c27e5a967c1E>:
}

fn do_ades(trapframe: &mut trapframe::Trapframe) {
80033448:	27bdffa8 	addiu	sp,sp,-88
8003344c:	afbf0054 	sw	ra,84(sp)
80033450:	afa4003c 	sw	a0,60(sp)
    panic!("Address error exception: {:x}", trapframe.badvaddr);
80033454:	2482008c 	addiu	v0,a0,140
80033458:	afa20040 	sw	v0,64(sp)
8003345c:	afa2004c 	sw	v0,76(sp)
80033460:	3c018004 	lui	at,0x8004
80033464:	24217304 	addiu	at,at,29444
80033468:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003346c:	afa20044 	sw	v0,68(sp)
80033470:	afa10048 	sw	at,72(sp)
    }
80033474:	8fa20044 	lw	v0,68(sp)
80033478:	8fa10048 	lw	at,72(sp)
8003347c:	afa20034 	sw	v0,52(sp)
80033480:	afa10038 	sw	at,56(sp)
80033484:	03a00825 	move	at,sp
80033488:	24060001 	li	a2,1
8003348c:	ac260010 	sw	a2,16(at)
80033490:	3c018105 	lui	at,0x8105
80033494:	2425e3e0 	addiu	a1,at,-7200
80033498:	27a4001c 	addiu	a0,sp,28
8003349c:	afa40018 	sw	a0,24(sp)
800334a0:	27a70034 	addiu	a3,sp,52
800334a4:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
800334a8:	00000000 	nop
800334ac:	8fa40018 	lw	a0,24(sp)
800334b0:	3c018105 	lui	at,0x8105
800334b4:	2425e3e8 	addiu	a1,at,-7192
800334b8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800334bc:	00000000 	nop

800334c0 <_ZN8mos_65024trap7do_adel17h0f6dd041f06065caE>:
}

fn do_adel(trapframe: &mut trapframe::Trapframe) {
800334c0:	27bdffa8 	addiu	sp,sp,-88
800334c4:	afbf0054 	sw	ra,84(sp)
800334c8:	afa4003c 	sw	a0,60(sp)
    panic!("Address error exception: {:x}", trapframe.badvaddr);
800334cc:	2482008c 	addiu	v0,a0,140
800334d0:	afa20040 	sw	v0,64(sp)
800334d4:	afa2004c 	sw	v0,76(sp)
800334d8:	3c018004 	lui	at,0x8004
800334dc:	24217304 	addiu	at,at,29444
800334e0:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
800334e4:	afa20044 	sw	v0,68(sp)
800334e8:	afa10048 	sw	at,72(sp)
    }
800334ec:	8fa20044 	lw	v0,68(sp)
800334f0:	8fa10048 	lw	at,72(sp)
800334f4:	afa20034 	sw	v0,52(sp)
800334f8:	afa10038 	sw	at,56(sp)
800334fc:	03a00825 	move	at,sp
80033500:	24060001 	li	a2,1
80033504:	ac260010 	sw	a2,16(at)
80033508:	3c018105 	lui	at,0x8105
8003350c:	2425e3e0 	addiu	a1,at,-7200
80033510:	27a4001c 	addiu	a0,sp,28
80033514:	afa40018 	sw	a0,24(sp)
80033518:	27a70034 	addiu	a3,sp,52
8003351c:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
80033520:	00000000 	nop
80033524:	8fa40018 	lw	a0,24(sp)
80033528:	3c018105 	lui	at,0x8105
8003352c:	2425e3f8 	addiu	a1,at,-7176
80033530:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80033534:	00000000 	nop

80033538 <_ZN8mos_65024trap20do_unknown_exception17h1a3af8cbb10a3292E>:
}

fn do_unknown_exception(trapframe: &mut trapframe::Trapframe) {
80033538:	27bdffa8 	addiu	sp,sp,-88
8003353c:	afbf0054 	sw	ra,84(sp)
80033540:	afa4003c 	sw	a0,60(sp)
    panic!("Unknown exception: {:x}", trapframe.cause);
80033544:	24820090 	addiu	v0,a0,144
80033548:	afa20040 	sw	v0,64(sp)
8003354c:	afa2004c 	sw	v0,76(sp)
80033550:	3c018004 	lui	at,0x8004
80033554:	24217304 	addiu	at,at,29444
80033558:	afa10050 	sw	at,80(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003355c:	afa20044 	sw	v0,68(sp)
80033560:	afa10048 	sw	at,72(sp)
    }
80033564:	8fa20044 	lw	v0,68(sp)
80033568:	8fa10048 	lw	at,72(sp)
8003356c:	afa20034 	sw	v0,52(sp)
80033570:	afa10038 	sw	at,56(sp)
80033574:	03a00825 	move	at,sp
80033578:	24060001 	li	a2,1
8003357c:	ac260010 	sw	a2,16(at)
80033580:	3c018105 	lui	at,0x8105
80033584:	2425e41c 	addiu	a1,at,-7140
80033588:	27a4001c 	addiu	a0,sp,28
8003358c:	afa40018 	sw	a0,24(sp)
80033590:	27a70034 	addiu	a3,sp,52
80033594:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
80033598:	00000000 	nop
8003359c:	8fa40018 	lw	a0,24(sp)
800335a0:	3c018105 	lui	at,0x8105
800335a4:	2425e424 	addiu	a1,at,-7132
800335a8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800335ac:	00000000 	nop

800335b0 <trap_handler>:
    fn exc_gen_entry();
    fn tlb_miss_entry();
}

#[no_mangle]
extern "C" fn trap_handler(trapframe: &mut trapframe::Trapframe) {
800335b0:	27bdffd8 	addiu	sp,sp,-40
800335b4:	afbf0024 	sw	ra,36(sp)
800335b8:	afa40014 	sw	a0,20(sp)
800335bc:	afa4001c 	sw	a0,28(sp)
    let cause = (trapframe.cause >> 2) & 0x1f;
800335c0:	8c810090 	lw	at,144(a0)
800335c4:	7c212080 	ext	at,at,0x2,0x5
800335c8:	afa10018 	sw	at,24(sp)
800335cc:	afa10020 	sw	at,32(sp)
    match cause {
800335d0:	2c210013 	sltiu	at,at,19
800335d4:	10200008 	beqz	at,800335f8 <trap_handler+0x48>
800335d8:	00000000 	nop
800335dc:	8fa10018 	lw	at,24(sp)
800335e0:	00010880 	sll	at,at,0x2
800335e4:	3c028105 	lui	v0,0x8105
800335e8:	00220821 	addu	at,at,v0
800335ec:	8c21c16c 	lw	at,-16020(at)
800335f0:	00200008 	jr	at
800335f4:	00000000 	nop
        EXC_CODE_CPU => do_cpu(trapframe),
        EXC_CODE_OV => do_ov(trapframe),
        EXC_CODE_TRAP => do_trap(trapframe),
        EXC_CODE_FPE => do_fpe(trapframe),
        EXC_CODE_C2E => do_c2e(trapframe),
        _ => do_unknown_exception(trapframe),
800335f8:	8fa40014 	lw	a0,20(sp)
800335fc:	0c00cd4e 	jal	80033538 <_ZN8mos_65024trap20do_unknown_exception17h1a3af8cbb10a3292E>
80033600:	00000000 	nop
80033604:	0800cdd3 	j	8003374c <trap_handler+0x19c>
80033608:	00000000 	nop
        EXC_CODE_INT => int::do_interrupt(trapframe),
8003360c:	8fa40014 	lw	a0,20(sp)
80033610:	0c00bd10 	jal	8002f440 <_ZN8mos_65024trap3int12do_interrupt17h7bbd9c82dbba84aaE>
80033614:	00000000 	nop
80033618:	0800cdd3 	j	8003374c <trap_handler+0x19c>
8003361c:	00000000 	nop
        EXC_CODE_MOD => tlb::do_tlb_mod(trapframe),
80033620:	8fa40014 	lw	a0,20(sp)
80033624:	0c00c9db 	jal	8003276c <_ZN8mos_65024trap3tlb10do_tlb_mod17hff0d14b5c580100aE>
80033628:	00000000 	nop
8003362c:	0800cdd3 	j	8003374c <trap_handler+0x19c>
80033630:	00000000 	nop
        EXC_CODE_TLBL => tlb::do_tlbl(trapframe),
80033634:	8fa40014 	lw	a0,20(sp)
80033638:	0c00ca8b 	jal	80032a2c <_ZN8mos_65024trap3tlb7do_tlbl17h81678d34081ec62aE>
8003363c:	00000000 	nop
80033640:	0800cdd3 	j	8003374c <trap_handler+0x19c>
80033644:	00000000 	nop
        EXC_CODE_TLBS => tlb::do_tlbs(trapframe),
80033648:	8fa40014 	lw	a0,20(sp)
8003364c:	0c00ca82 	jal	80032a08 <_ZN8mos_65024trap3tlb7do_tlbs17h69cbd1141486ca9aE>
80033650:	00000000 	nop
80033654:	0800cdd3 	j	8003374c <trap_handler+0x19c>
80033658:	00000000 	nop
        EXC_CODE_ADEL => do_adel(trapframe),
8003365c:	8fa40014 	lw	a0,20(sp)
80033660:	0c00cd30 	jal	800334c0 <_ZN8mos_65024trap7do_adel17h0f6dd041f06065caE>
80033664:	00000000 	nop
80033668:	0800cdd3 	j	8003374c <trap_handler+0x19c>
8003366c:	00000000 	nop
        EXC_CODE_ADES => do_ades(trapframe),
80033670:	8fa40014 	lw	a0,20(sp)
80033674:	0c00cd12 	jal	80033448 <_ZN8mos_65024trap7do_ades17hb7954c27e5a967c1E>
80033678:	00000000 	nop
8003367c:	0800cdd3 	j	8003374c <trap_handler+0x19c>
80033680:	00000000 	nop
        EXC_CODE_IBE => do_ibe(trapframe),
80033684:	8fa40014 	lw	a0,20(sp)
80033688:	0c00ccf4 	jal	800333d0 <_ZN8mos_65024trap6do_ibe17hbd3c2514f0829defE>
8003368c:	00000000 	nop
80033690:	0800cdd3 	j	8003374c <trap_handler+0x19c>
80033694:	00000000 	nop
        EXC_CODE_DBE => do_dbe(trapframe),
80033698:	8fa40014 	lw	a0,20(sp)
8003369c:	0c00ccd6 	jal	80033358 <_ZN8mos_65024trap6do_dbe17hd75a68e885ad9f77E>
800336a0:	00000000 	nop
800336a4:	0800cdd3 	j	8003374c <trap_handler+0x19c>
800336a8:	00000000 	nop
        EXC_CODE_SYS => syscall::do_syscall(trapframe),
800336ac:	8fa40014 	lw	a0,20(sp)
800336b0:	0c00c7fe 	jal	80031ff8 <_ZN8mos_65024trap7syscall10do_syscall17h65296df34bba603dE>
800336b4:	00000000 	nop
800336b8:	0800cdd3 	j	8003374c <trap_handler+0x19c>
800336bc:	00000000 	nop
        EXC_CODE_BP => do_bp(trapframe),
800336c0:	8fa40014 	lw	a0,20(sp)
800336c4:	0c00ccb8 	jal	800332e0 <_ZN8mos_65024trap5do_bp17heb4a108d92935235E>
800336c8:	00000000 	nop
800336cc:	0800cdd3 	j	8003374c <trap_handler+0x19c>
800336d0:	00000000 	nop
        EXC_CODE_RI => do_ri(trapframe),
800336d4:	8fa40014 	lw	a0,20(sp)
800336d8:	0c00cc9a 	jal	80033268 <_ZN8mos_65024trap5do_ri17h09747212202c9f0aE>
800336dc:	00000000 	nop
800336e0:	0800cdd3 	j	8003374c <trap_handler+0x19c>
800336e4:	00000000 	nop
        EXC_CODE_CPU => do_cpu(trapframe),
800336e8:	8fa40014 	lw	a0,20(sp)
800336ec:	0c00cc7c 	jal	800331f0 <_ZN8mos_65024trap6do_cpu17hbc2914911717796aE>
800336f0:	00000000 	nop
800336f4:	0800cdd3 	j	8003374c <trap_handler+0x19c>
800336f8:	00000000 	nop
        EXC_CODE_OV => do_ov(trapframe),
800336fc:	8fa40014 	lw	a0,20(sp)
80033700:	0c00cc5e 	jal	80033178 <_ZN8mos_65024trap5do_ov17ha902642cd7dc780bE>
80033704:	00000000 	nop
80033708:	0800cdd3 	j	8003374c <trap_handler+0x19c>
8003370c:	00000000 	nop
        EXC_CODE_TRAP => do_trap(trapframe),
80033710:	8fa40014 	lw	a0,20(sp)
80033714:	0c00cc40 	jal	80033100 <_ZN8mos_65024trap7do_trap17h2e628936d4d9fc82E>
80033718:	00000000 	nop
8003371c:	0800cdd3 	j	8003374c <trap_handler+0x19c>
80033720:	00000000 	nop
        EXC_CODE_FPE => do_fpe(trapframe),
80033724:	8fa40014 	lw	a0,20(sp)
80033728:	0c00cc22 	jal	80033088 <_ZN8mos_65024trap6do_fpe17hde6786f7b6b4b218E>
8003372c:	00000000 	nop
80033730:	0800cdd3 	j	8003374c <trap_handler+0x19c>
80033734:	00000000 	nop
        EXC_CODE_C2E => do_c2e(trapframe),
80033738:	8fa40014 	lw	a0,20(sp)
8003373c:	0c00cc04 	jal	80033010 <_ZN8mos_65024trap6do_c2e17hbe019d7661c154b4E>
80033740:	00000000 	nop
80033744:	0800cdd3 	j	8003374c <trap_handler+0x19c>
80033748:	00000000 	nop
    }
}
8003374c:	8fbf0024 	lw	ra,36(sp)
80033750:	27bd0028 	addiu	sp,sp,40
80033754:	03e00008 	jr	ra
80033758:	00000000 	nop

8003375c <_ZN8mos_65024trap33___avoid_fk_compiler_optimization17h29848f219578d1b2E>:

// acutally this function will never be called, just to avoid the compiler optimization
// fk rust optimization
pub fn ___avoid_fk_compiler_optimization() {
8003375c:	27bdfec8 	addiu	sp,sp,-312
80033760:	afbf0134 	sw	ra,308(sp)
80033764:	27a400b4 	addiu	a0,sp,180
80033768:	afa40010 	sw	a0,16(sp)
8003376c:	24050000 	li	a1,0
80033770:	24060080 	li	a2,128
80033774:	afa60014 	sw	a2,20(sp)
            regs: [0; 32],
80033778:	0c00d47d 	jal	800351f4 <memset>
8003377c:	00000000 	nop
80033780:	8fa50010 	lw	a1,16(sp)
80033784:	8fa60014 	lw	a2,20(sp)
80033788:	27a4001c 	addiu	a0,sp,28
8003378c:	afa40018 	sw	a0,24(sp)
        Self {
80033790:	0c00d3fd 	jal	80034ff4 <memcpy>
80033794:	00000000 	nop
80033798:	8fa40018 	lw	a0,24(sp)
8003379c:	afa0009c 	sw	zero,156(sp)
800337a0:	afa000a0 	sw	zero,160(sp)
800337a4:	afa000a4 	sw	zero,164(sp)
800337a8:	afa000a8 	sw	zero,168(sp)
800337ac:	afa000ac 	sw	zero,172(sp)
800337b0:	afa000b0 	sw	zero,176(sp)
    //! just to call it to avoid the compiler optimization
    unsafe {
        trap_handler(&mut trapframe::Trapframe::new());
800337b4:	0c00cd6c 	jal	800335b0 <trap_handler>
800337b8:	00000000 	nop
        exc_gen_entry();
800337bc:	0c000060 	jal	80000180 <exc_gen_entry>
800337c0:	00000000 	nop
        tlb_miss_entry();
800337c4:	0c000000 	jal	80000000 <tlb_miss_entry>
800337c8:	00000000 	nop
    }
}
800337cc:	8fbf0134 	lw	ra,308(sp)
800337d0:	27bd0138 	addiu	sp,sp,312
800337d4:	03e00008 	jr	ra
800337d8:	00000000 	nop

800337dc <_ZN8mos_65024util10IndexStack3new17he9d447517edb046bE>:
pub struct IndexStack {
    stack: Vec<usize>,
}

impl IndexStack {
    pub fn new() -> Self {
800337dc:	27bdffd8 	addiu	sp,sp,-40
800337e0:	afbf0024 	sw	ra,36(sp)
800337e4:	afa40010 	sw	a0,16(sp)
800337e8:	afa40014 	sw	a0,20(sp)
800337ec:	27a40018 	addiu	a0,sp,24
        IndexStack { stack: Vec::new() }
800337f0:	0c00a1da 	jal	80028768 <_ZN5alloc3vec12Vec$LT$T$GT$3new17h6244962cf2e35ae2E>
800337f4:	00000000 	nop
800337f8:	8fa40010 	lw	a0,16(sp)
800337fc:	8fa20014 	lw	v0,20(sp)
80033800:	8fa10020 	lw	at,32(sp)
80033804:	ac810008 	sw	at,8(a0)
80033808:	8fa1001c 	lw	at,28(sp)
8003380c:	ac810004 	sw	at,4(a0)
80033810:	8fa10018 	lw	at,24(sp)
80033814:	ac810000 	sw	at,0(a0)
    }
80033818:	8fbf0024 	lw	ra,36(sp)
8003381c:	27bd0028 	addiu	sp,sp,40
80033820:	03e00008 	jr	ra
80033824:	00000000 	nop

80033828 <_ZN8mos_65024util10IndexStack4push17hbb874716fcbf35ecE>:

    pub fn push(&mut self, index: usize) {
80033828:	27bdffe0 	addiu	sp,sp,-32
8003382c:	afbf001c 	sw	ra,28(sp)
80033830:	afa40014 	sw	a0,20(sp)
80033834:	afa50018 	sw	a1,24(sp)
        self.stack.push(index);
80033838:	0c00a2d9 	jal	80028b64 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h731fd43dd034a6deE>
8003383c:	00000000 	nop
    }
80033840:	8fbf001c 	lw	ra,28(sp)
80033844:	27bd0020 	addiu	sp,sp,32
80033848:	03e00008 	jr	ra
8003384c:	00000000 	nop

80033850 <_ZN8mos_65024util10IndexStack3pop17h7c01a72a1ae025c2E>:

    pub fn pop(&mut self) -> Option<usize> {
80033850:	27bdffe8 	addiu	sp,sp,-24
80033854:	afbf0014 	sw	ra,20(sp)
80033858:	afa40010 	sw	a0,16(sp)
        self.stack.pop()
8003385c:	0c00a226 	jal	80028898 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17hed962bae03803936E>
80033860:	00000000 	nop
    }
80033864:	8fbf0014 	lw	ra,20(sp)
80033868:	27bd0018 	addiu	sp,sp,24
8003386c:	03e00008 	jr	ra
80033870:	00000000 	nop

80033874 <_ZN8mos_65024util8ListNode3new17hcac65a712c835584E>:
    pub head: Option<Arc<RefCell<ListNode>>>,
    pub tail: Option<Arc<RefCell<ListNode>>>,
}

impl ListNode {
    pub const fn new(idx: usize) -> Self {
80033874:	27bdfff0 	addiu	sp,sp,-16
80033878:	00801025 	move	v0,a0
8003387c:	afa5000c 	sw	a1,12(sp)
        Self {
            next: None,
80033880:	afa00004 	sw	zero,4(sp)
            prev: None,
80033884:	afa00008 	sw	zero,8(sp)
        Self {
80033888:	8fa10004 	lw	at,4(sp)
8003388c:	ac810000 	sw	at,0(a0)
80033890:	8fa10008 	lw	at,8(sp)
80033894:	ac810004 	sw	at,4(a0)
80033898:	ac850008 	sw	a1,8(a0)
8003389c:	27bd0010 	addiu	sp,sp,16
            idx,
        }
    }
800338a0:	03e00008 	jr	ra
800338a4:	00000000 	nop

800338a8 <_ZN8mos_65024util16DoubleLinkedList3new17h2ff340b806dbc593E>:
}

impl DoubleLinkedList {
    pub const fn new() -> Self {
800338a8:	27bdfff0 	addiu	sp,sp,-16
        Self {
            head: None,
800338ac:	afa00008 	sw	zero,8(sp)
            tail: None,
800338b0:	afa0000c 	sw	zero,12(sp)
        Self {
800338b4:	8fa10008 	lw	at,8(sp)
800338b8:	afa10000 	sw	at,0(sp)
800338bc:	8fa1000c 	lw	at,12(sp)
800338c0:	afa10004 	sw	at,4(sp)
        }
    }
800338c4:	8fa20000 	lw	v0,0(sp)
800338c8:	8fa30004 	lw	v1,4(sp)
800338cc:	27bd0010 	addiu	sp,sp,16
800338d0:	03e00008 	jr	ra
800338d4:	00000000 	nop

800338d8 <_ZN8mos_65024util16DoubleLinkedList4push17h4baa579cb5c043f4E>:
    pub fn push(&mut self, node: Arc<RefCell<ListNode>>) {
800338d8:	27bdff98 	addiu	sp,sp,-104
800338dc:	afbf0064 	sw	ra,100(sp)
800338e0:	afa40028 	sw	a0,40(sp)
800338e4:	afa5002c 	sw	a1,44(sp)
800338e8:	afa40058 	sw	a0,88(sp)
        if self.head.is_none() {
800338ec:	0c009798 	jal	80025e60 <_ZN4core6option15Option$LT$T$GT$7is_none17h243af1ceb393c575E>
800338f0:	00000000 	nop
800338f4:	1440005c 	bnez	v0,80033a68 <_ZN8mos_65024util16DoubleLinkedList4push17h4baa579cb5c043f4E+0x190>
800338f8:	00000000 	nop
800338fc:	0800ce41 	j	80033904 <_ZN8mos_65024util16DoubleLinkedList4push17h4baa579cb5c043f4E+0x2c>
80033900:	00000000 	nop
            self.head = Some(node.clone());
            self.tail = Some(node);
        } else {
            let tail = self.tail.take().unwrap();
80033904:	8fa10028 	lw	at,40(sp)
80033908:	24240004 	addiu	a0,at,4
8003390c:	0c00965c 	jal	80025970 <_ZN4core6option15Option$LT$T$GT$4take17h82d64be1993198aeE>
80033910:	00000000 	nop
80033914:	afa2005c 	sw	v0,92(sp)
        match self {
80033918:	8fa1005c 	lw	at,92(sp)
8003391c:	14200007 	bnez	at,8003393c <_ZN8mos_65024util16DoubleLinkedList4push17h4baa579cb5c043f4E+0x64>
80033920:	00000000 	nop
80033924:	0800ce4b 	j	8003392c <_ZN8mos_65024util16DoubleLinkedList4push17h4baa579cb5c043f4E+0x54>
80033928:	00000000 	nop
            None => unwrap_failed(),
8003392c:	3c018105 	lui	at,0x8105
80033930:	2424e444 	addiu	a0,at,-7100
80033934:	0c00f1b6 	jal	8003c6d8 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
80033938:	00000000 	nop
            Some(val) => val,
8003393c:	8fa1005c 	lw	at,92(sp)
80033940:	afa10060 	sw	at,96(sp)
80033944:	afa10038 	sw	at,56(sp)
80033948:	27a4002c 	addiu	a0,sp,44
8003394c:	afa40018 	sw	a0,24(sp)
            tail.borrow_mut().next = Some(node.clone());
80033950:	0c00a9d8 	jal	8002a760 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h9bd1f6a6a34f5585E>
80033954:	00000000 	nop
80033958:	afa2003c 	sw	v0,60(sp)
8003395c:	27a40038 	addiu	a0,sp,56
80033960:	afa40024 	sw	a0,36(sp)
80033964:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
80033968:	00000000 	nop
8003396c:	00402025 	move	a0,v0
80033970:	3c018105 	lui	at,0x8105
80033974:	2425e454 	addiu	a1,at,-7084
80033978:	0c008e61 	jal	80023984 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17hb595252ccca38d48E>
8003397c:	00000000 	nop
80033980:	afa20040 	sw	v0,64(sp)
80033984:	afa30044 	sw	v1,68(sp)
80033988:	27a40040 	addiu	a0,sp,64
8003398c:	afa40014 	sw	a0,20(sp)
80033990:	0c00ab3e 	jal	8002acf8 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2feec4d0c6d8f526E>
80033994:	00000000 	nop
80033998:	00402025 	move	a0,v0
8003399c:	afa40010 	sw	a0,16(sp)
800339a0:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
800339a4:	00000000 	nop
800339a8:	8fa20010 	lw	v0,16(sp)
800339ac:	8fa40014 	lw	a0,20(sp)
800339b0:	8fa1003c 	lw	at,60(sp)
800339b4:	ac410000 	sw	at,0(v0)
800339b8:	0c008be9 	jal	80022fa4 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17hae5dae7ed76ef803E>
800339bc:	00000000 	nop
800339c0:	8fa40024 	lw	a0,36(sp)
            node.borrow_mut().prev = Some(tail.clone());
800339c4:	0c00a9d8 	jal	8002a760 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h9bd1f6a6a34f5585E>
800339c8:	00000000 	nop
800339cc:	8fa40018 	lw	a0,24(sp)
800339d0:	afa20048 	sw	v0,72(sp)
800339d4:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
800339d8:	00000000 	nop
800339dc:	00402025 	move	a0,v0
800339e0:	3c018105 	lui	at,0x8105
800339e4:	2425e464 	addiu	a1,at,-7068
800339e8:	0c008e61 	jal	80023984 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17hb595252ccca38d48E>
800339ec:	00000000 	nop
800339f0:	afa2004c 	sw	v0,76(sp)
800339f4:	afa30050 	sw	v1,80(sp)
800339f8:	27a4004c 	addiu	a0,sp,76
800339fc:	afa40020 	sw	a0,32(sp)
80033a00:	0c00ab3e 	jal	8002acf8 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2feec4d0c6d8f526E>
80033a04:	00000000 	nop
80033a08:	afa2001c 	sw	v0,28(sp)
80033a0c:	24440004 	addiu	a0,v0,4
80033a10:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80033a14:	00000000 	nop
80033a18:	8fa2001c 	lw	v0,28(sp)
80033a1c:	8fa40020 	lw	a0,32(sp)
80033a20:	8fa10048 	lw	at,72(sp)
80033a24:	ac410004 	sw	at,4(v0)
80033a28:	0c008be9 	jal	80022fa4 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17hae5dae7ed76ef803E>
80033a2c:	00000000 	nop
80033a30:	8fa10028 	lw	at,40(sp)
            self.tail = Some(node);
80033a34:	8fa2002c 	lw	v0,44(sp)
80033a38:	afa20054 	sw	v0,84(sp)
80033a3c:	24240004 	addiu	a0,at,4
80033a40:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80033a44:	00000000 	nop
80033a48:	8fa20028 	lw	v0,40(sp)
80033a4c:	8fa40024 	lw	a0,36(sp)
80033a50:	8fa10054 	lw	at,84(sp)
80033a54:	ac410004 	sw	at,4(v0)
        }
80033a58:	0c008d66 	jal	80023598 <_ZN4core3ptr96drop_in_place$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h43239437a0ec2517E>
80033a5c:	00000000 	nop
80033a60:	0800ceae 	j	80033ab8 <_ZN8mos_65024util16DoubleLinkedList4push17h4baa579cb5c043f4E+0x1e0>
80033a64:	00000000 	nop
80033a68:	27a4002c 	addiu	a0,sp,44
            self.head = Some(node.clone());
80033a6c:	0c00a9d8 	jal	8002a760 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h9bd1f6a6a34f5585E>
80033a70:	00000000 	nop
80033a74:	8fa40028 	lw	a0,40(sp)
80033a78:	afa20030 	sw	v0,48(sp)
80033a7c:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80033a80:	00000000 	nop
80033a84:	8fa10028 	lw	at,40(sp)
80033a88:	8fa20030 	lw	v0,48(sp)
80033a8c:	ac220000 	sw	v0,0(at)
            self.tail = Some(node);
80033a90:	8fa2002c 	lw	v0,44(sp)
80033a94:	afa20034 	sw	v0,52(sp)
80033a98:	24240004 	addiu	a0,at,4
80033a9c:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80033aa0:	00000000 	nop
80033aa4:	8fa20028 	lw	v0,40(sp)
80033aa8:	8fa10034 	lw	at,52(sp)
80033aac:	ac410004 	sw	at,4(v0)
        if self.head.is_none() {
80033ab0:	0800ceae 	j	80033ab8 <_ZN8mos_65024util16DoubleLinkedList4push17h4baa579cb5c043f4E+0x1e0>
80033ab4:	00000000 	nop
    }
80033ab8:	8fbf0064 	lw	ra,100(sp)
80033abc:	27bd0068 	addiu	sp,sp,104
80033ac0:	03e00008 	jr	ra
80033ac4:	00000000 	nop

80033ac8 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E>:
    pub fn remove(&mut self, node: Arc<RefCell<ListNode>>) {
80033ac8:	27bdfef0 	addiu	sp,sp,-272
80033acc:	afbf010c 	sw	ra,268(sp)
80033ad0:	afa40054 	sw	a0,84(sp)
80033ad4:	afa5006c 	sw	a1,108(sp)
80033ad8:	afa400f4 	sw	a0,244(sp)
80033adc:	24010000 	li	at,0
        println!("remove node: {}", node.borrow().idx);
80033ae0:	a3a000f2 	sb	zero,242(sp)
80033ae4:	a3a000f3 	sb	zero,243(sp)
80033ae8:	27a4006c 	addiu	a0,sp,108
80033aec:	afa40064 	sw	a0,100(sp)
80033af0:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
80033af4:	00000000 	nop
80033af8:	00402025 	move	a0,v0
80033afc:	3c018105 	lui	at,0x8105
80033b00:	2425e494 	addiu	a1,at,-7020
80033b04:	0c008ee2 	jal	80023b88 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h0651cb519b6f324eE>
80033b08:	00000000 	nop
80033b0c:	afa20090 	sw	v0,144(sp)
80033b10:	afa30094 	sw	v1,148(sp)
80033b14:	27a40090 	addiu	a0,sp,144
80033b18:	afa4005c 	sw	a0,92(sp)
80033b1c:	0c00a9f8 	jal	8002a7e0 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hefea2bce46aaade6E>
80033b20:	00000000 	nop
80033b24:	24420008 	addiu	v0,v0,8
80033b28:	afa200f8 	sw	v0,248(sp)
80033b2c:	afa20104 	sw	v0,260(sp)
80033b30:	3c018004 	lui	at,0x8004
80033b34:	24217d60 	addiu	at,at,32096
80033b38:	afa10108 	sw	at,264(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80033b3c:	afa200fc 	sw	v0,252(sp)
80033b40:	afa10100 	sw	at,256(sp)
    }
80033b44:	8fa200fc 	lw	v0,252(sp)
80033b48:	8fa10100 	lw	at,256(sp)
80033b4c:	afa20088 	sw	v0,136(sp)
80033b50:	afa1008c 	sw	at,140(sp)
80033b54:	03a01025 	move	v0,sp
80033b58:	24010001 	li	at,1
80033b5c:	ac410010 	sw	at,16(v0)
80033b60:	3c018105 	lui	at,0x8105
80033b64:	2425e484 	addiu	a1,at,-7036
80033b68:	27a40070 	addiu	a0,sp,112
80033b6c:	afa40058 	sw	a0,88(sp)
80033b70:	24060002 	li	a2,2
80033b74:	27a70088 	addiu	a3,sp,136
80033b78:	0c0083b3 	jal	80020ecc <_ZN4core3fmt9Arguments6new_v117hf2163b5a4f110e05E>
80033b7c:	00000000 	nop
80033b80:	8fa40058 	lw	a0,88(sp)
80033b84:	0c00b448 	jal	8002d120 <_ZN8mos_65025print6_print17h030db2bfde9ae274E>
80033b88:	00000000 	nop
80033b8c:	8fa4005c 	lw	a0,92(sp)
80033b90:	0c008b58 	jal	80022d60 <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d64f236e3cdb092E>
80033b94:	00000000 	nop
80033b98:	8fa40064 	lw	a0,100(sp)
        let prev = node.borrow().prev.clone();
80033b9c:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
80033ba0:	00000000 	nop
80033ba4:	00402025 	move	a0,v0
80033ba8:	3c018105 	lui	at,0x8105
80033bac:	2425e4a4 	addiu	a1,at,-7004
80033bb0:	0c008ee2 	jal	80023b88 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h0651cb519b6f324eE>
80033bb4:	00000000 	nop
80033bb8:	afa2009c 	sw	v0,156(sp)
80033bbc:	afa300a0 	sw	v1,160(sp)
80033bc0:	27a4009c 	addiu	a0,sp,156
80033bc4:	afa40060 	sw	a0,96(sp)
80033bc8:	0c00a9f8 	jal	8002a7e0 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hefea2bce46aaade6E>
80033bcc:	00000000 	nop
80033bd0:	24440004 	addiu	a0,v0,4
80033bd4:	0c00aa01 	jal	8002a804 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E>
80033bd8:	00000000 	nop
80033bdc:	8fa40060 	lw	a0,96(sp)
80033be0:	afa20098 	sw	v0,152(sp)
80033be4:	0c008b58 	jal	80022d60 <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d64f236e3cdb092E>
80033be8:	00000000 	nop
80033bec:	8fa40064 	lw	a0,100(sp)
        let next = node.borrow().next.clone();
80033bf0:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
80033bf4:	00000000 	nop
80033bf8:	00402025 	move	a0,v0
80033bfc:	3c018105 	lui	at,0x8105
80033c00:	2425e4b4 	addiu	a1,at,-6988
80033c04:	0c008ee2 	jal	80023b88 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h0651cb519b6f324eE>
80033c08:	00000000 	nop
80033c0c:	afa200a8 	sw	v0,168(sp)
80033c10:	afa300ac 	sw	v1,172(sp)
80033c14:	27a400a8 	addiu	a0,sp,168
80033c18:	afa40068 	sw	a0,104(sp)
80033c1c:	0c00a9f8 	jal	8002a7e0 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hefea2bce46aaade6E>
80033c20:	00000000 	nop
80033c24:	00402025 	move	a0,v0
80033c28:	0c00aa01 	jal	8002a804 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E>
80033c2c:	00000000 	nop
80033c30:	8fa40068 	lw	a0,104(sp)
80033c34:	afa200a4 	sw	v0,164(sp)
80033c38:	0c008b58 	jal	80022d60 <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d64f236e3cdb092E>
80033c3c:	00000000 	nop
80033c40:	27a40098 	addiu	a0,sp,152
        if prev.clone().is_none() && next.clone().is_none() {
80033c44:	0c00aa01 	jal	8002a804 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E>
80033c48:	00000000 	nop
80033c4c:	afa200b0 	sw	v0,176(sp)
80033c50:	27a400b0 	addiu	a0,sp,176
80033c54:	0c009798 	jal	80025e60 <_ZN4core6option15Option$LT$T$GT$7is_none17h243af1ceb393c575E>
80033c58:	00000000 	nop
80033c5c:	14400008 	bnez	v0,80033c80 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x1b8>
80033c60:	00000000 	nop
80033c64:	0800cf1b 	j	80033c6c <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x1a4>
80033c68:	00000000 	nop
80033c6c:	27a400b0 	addiu	a0,sp,176
80033c70:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80033c74:	00000000 	nop
80033c78:	0800cf2e 	j	80033cb8 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x1f0>
80033c7c:	00000000 	nop
80033c80:	27a400b0 	addiu	a0,sp,176
80033c84:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80033c88:	00000000 	nop
80033c8c:	27a400a4 	addiu	a0,sp,164
80033c90:	0c00aa01 	jal	8002a804 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E>
80033c94:	00000000 	nop
80033c98:	afa200b4 	sw	v0,180(sp)
80033c9c:	27a400b4 	addiu	a0,sp,180
80033ca0:	0c009798 	jal	80025e60 <_ZN4core6option15Option$LT$T$GT$7is_none17h243af1ceb393c575E>
80033ca4:	00000000 	nop
80033ca8:	14400013 	bnez	v0,80033cf8 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x230>
80033cac:	00000000 	nop
80033cb0:	0800cf39 	j	80033ce4 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x21c>
80033cb4:	00000000 	nop
80033cb8:	27a40098 	addiu	a0,sp,152
            return;
        }
        if let Some(prev) = prev.clone() {
80033cbc:	0c00aa01 	jal	8002a804 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E>
80033cc0:	00000000 	nop
80033cc4:	afa200b8 	sw	v0,184(sp)
80033cc8:	24010001 	li	at,1
80033ccc:	a3a100f2 	sb	at,242(sp)
80033cd0:	8fa100b8 	lw	at,184(sp)
80033cd4:	14200016 	bnez	at,80033d30 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x268>
80033cd8:	00000000 	nop
80033cdc:	0800cf72 	j	80033dc8 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x300>
80033ce0:	00000000 	nop
80033ce4:	27a400b4 	addiu	a0,sp,180
        if prev.clone().is_none() && next.clone().is_none() {
80033ce8:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80033cec:	00000000 	nop
80033cf0:	0800cf2e 	j	80033cb8 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x1f0>
80033cf4:	00000000 	nop
80033cf8:	27a400b4 	addiu	a0,sp,180
80033cfc:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80033d00:	00000000 	nop
80033d04:	27a400a4 	addiu	a0,sp,164
        } else {
            self.tail = prev.clone();
        }
        node.borrow_mut().next = None;
        node.borrow_mut().prev = None;
    }
80033d08:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80033d0c:	00000000 	nop
80033d10:	27a40098 	addiu	a0,sp,152
80033d14:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80033d18:	00000000 	nop
80033d1c:	27a4006c 	addiu	a0,sp,108
80033d20:	0c008d66 	jal	80023598 <_ZN4core3ptr96drop_in_place$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h43239437a0ec2517E>
80033d24:	00000000 	nop
80033d28:	0800d01e 	j	80034078 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x5b0>
80033d2c:	00000000 	nop
80033d30:	24010000 	li	at,0
        if let Some(prev) = prev.clone() {
80033d34:	a3a000f2 	sb	zero,242(sp)
80033d38:	8fa100b8 	lw	at,184(sp)
80033d3c:	afa100bc 	sw	at,188(sp)
80033d40:	27a400a4 	addiu	a0,sp,164
            prev.borrow_mut().next = next.clone();
80033d44:	0c00aa01 	jal	8002a804 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E>
80033d48:	00000000 	nop
80033d4c:	afa20048 	sw	v0,72(sp)
80033d50:	27a400bc 	addiu	a0,sp,188
80033d54:	afa40050 	sw	a0,80(sp)
80033d58:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
80033d5c:	00000000 	nop
80033d60:	00402025 	move	a0,v0
80033d64:	3c018105 	lui	at,0x8105
80033d68:	2425e4c4 	addiu	a1,at,-6972
80033d6c:	0c008e61 	jal	80023984 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17hb595252ccca38d48E>
80033d70:	00000000 	nop
80033d74:	afa200c0 	sw	v0,192(sp)
80033d78:	afa300c4 	sw	v1,196(sp)
80033d7c:	27a400c0 	addiu	a0,sp,192
80033d80:	afa4004c 	sw	a0,76(sp)
80033d84:	0c00ab3e 	jal	8002acf8 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2feec4d0c6d8f526E>
80033d88:	00000000 	nop
80033d8c:	00402025 	move	a0,v0
80033d90:	afa40044 	sw	a0,68(sp)
80033d94:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80033d98:	00000000 	nop
80033d9c:	8fa10044 	lw	at,68(sp)
80033da0:	8fa20048 	lw	v0,72(sp)
80033da4:	8fa4004c 	lw	a0,76(sp)
80033da8:	ac220000 	sw	v0,0(at)
80033dac:	0c008be9 	jal	80022fa4 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17hae5dae7ed76ef803E>
80033db0:	00000000 	nop
80033db4:	8fa40050 	lw	a0,80(sp)
        } else {
80033db8:	0c008d66 	jal	80023598 <_ZN4core3ptr96drop_in_place$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h43239437a0ec2517E>
80033dbc:	00000000 	nop
80033dc0:	0800cf7e 	j	80033df8 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x330>
80033dc4:	00000000 	nop
80033dc8:	27a400a4 	addiu	a0,sp,164
            self.head = next.clone();
80033dcc:	0c00aa01 	jal	8002a804 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E>
80033dd0:	00000000 	nop
80033dd4:	8fa40054 	lw	a0,84(sp)
80033dd8:	afa20040 	sw	v0,64(sp)
80033ddc:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80033de0:	00000000 	nop
80033de4:	8fa10054 	lw	at,84(sp)
80033de8:	8fa20040 	lw	v0,64(sp)
80033dec:	ac220000 	sw	v0,0(at)
        }
80033df0:	0800cf7e 	j	80033df8 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x330>
80033df4:	00000000 	nop
80033df8:	8fa100b8 	lw	at,184(sp)
80033dfc:	10200009 	beqz	at,80033e24 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x35c>
80033e00:	00000000 	nop
80033e04:	0800cf83 	j	80033e0c <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x344>
80033e08:	00000000 	nop
80033e0c:	93a100f2 	lbu	at,242(sp)
80033e10:	30210001 	andi	at,at,0x1
80033e14:	14200010 	bnez	at,80033e58 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x390>
80033e18:	00000000 	nop
80033e1c:	0800cf89 	j	80033e24 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x35c>
80033e20:	00000000 	nop
80033e24:	24010000 	li	at,0
80033e28:	a3a000f2 	sb	zero,242(sp)
80033e2c:	27a400a4 	addiu	a0,sp,164
        if let Some(next) = next.clone() {
80033e30:	0c00aa01 	jal	8002a804 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E>
80033e34:	00000000 	nop
80033e38:	afa200c8 	sw	v0,200(sp)
80033e3c:	24010001 	li	at,1
80033e40:	a3a100f3 	sb	at,243(sp)
80033e44:	8fa100c8 	lw	at,200(sp)
80033e48:	14200008 	bnez	at,80033e6c <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x3a4>
80033e4c:	00000000 	nop
80033e50:	0800cfc1 	j	80033f04 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x43c>
80033e54:	00000000 	nop
80033e58:	27a400b8 	addiu	a0,sp,184
        }
80033e5c:	0c008d66 	jal	80023598 <_ZN4core3ptr96drop_in_place$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h43239437a0ec2517E>
80033e60:	00000000 	nop
80033e64:	0800cf89 	j	80033e24 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x35c>
80033e68:	00000000 	nop
80033e6c:	24010000 	li	at,0
        if let Some(next) = next.clone() {
80033e70:	a3a000f3 	sb	zero,243(sp)
80033e74:	8fa100c8 	lw	at,200(sp)
80033e78:	afa100cc 	sw	at,204(sp)
80033e7c:	27a40098 	addiu	a0,sp,152
            next.borrow_mut().prev = prev.clone();
80033e80:	0c00aa01 	jal	8002a804 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E>
80033e84:	00000000 	nop
80033e88:	afa20034 	sw	v0,52(sp)
80033e8c:	27a400cc 	addiu	a0,sp,204
80033e90:	afa4003c 	sw	a0,60(sp)
80033e94:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
80033e98:	00000000 	nop
80033e9c:	00402025 	move	a0,v0
80033ea0:	3c018105 	lui	at,0x8105
80033ea4:	2425e4d4 	addiu	a1,at,-6956
80033ea8:	0c008e61 	jal	80023984 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17hb595252ccca38d48E>
80033eac:	00000000 	nop
80033eb0:	afa200d0 	sw	v0,208(sp)
80033eb4:	afa300d4 	sw	v1,212(sp)
80033eb8:	27a400d0 	addiu	a0,sp,208
80033ebc:	afa40038 	sw	a0,56(sp)
80033ec0:	0c00ab3e 	jal	8002acf8 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2feec4d0c6d8f526E>
80033ec4:	00000000 	nop
80033ec8:	afa20030 	sw	v0,48(sp)
80033ecc:	24440004 	addiu	a0,v0,4
80033ed0:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80033ed4:	00000000 	nop
80033ed8:	8fa10030 	lw	at,48(sp)
80033edc:	8fa20034 	lw	v0,52(sp)
80033ee0:	8fa40038 	lw	a0,56(sp)
80033ee4:	ac220004 	sw	v0,4(at)
80033ee8:	0c008be9 	jal	80022fa4 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17hae5dae7ed76ef803E>
80033eec:	00000000 	nop
80033ef0:	8fa4003c 	lw	a0,60(sp)
        } else {
80033ef4:	0c008d66 	jal	80023598 <_ZN4core3ptr96drop_in_place$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h43239437a0ec2517E>
80033ef8:	00000000 	nop
80033efc:	0800cfce 	j	80033f38 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x470>
80033f00:	00000000 	nop
80033f04:	27a40098 	addiu	a0,sp,152
            self.tail = prev.clone();
80033f08:	0c00aa01 	jal	8002a804 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E>
80033f0c:	00000000 	nop
80033f10:	8fa10054 	lw	at,84(sp)
80033f14:	afa2002c 	sw	v0,44(sp)
80033f18:	24240004 	addiu	a0,at,4
80033f1c:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80033f20:	00000000 	nop
80033f24:	8fa10054 	lw	at,84(sp)
80033f28:	8fa2002c 	lw	v0,44(sp)
80033f2c:	ac220004 	sw	v0,4(at)
        }
80033f30:	0800cfce 	j	80033f38 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x470>
80033f34:	00000000 	nop
80033f38:	8fa100c8 	lw	at,200(sp)
80033f3c:	10200009 	beqz	at,80033f64 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x49c>
80033f40:	00000000 	nop
80033f44:	0800cfd3 	j	80033f4c <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x484>
80033f48:	00000000 	nop
80033f4c:	93a100f3 	lbu	at,243(sp)
80033f50:	30210001 	andi	at,at,0x1
80033f54:	14200043 	bnez	at,80034064 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x59c>
80033f58:	00000000 	nop
80033f5c:	0800cfd9 	j	80033f64 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x49c>
80033f60:	00000000 	nop
80033f64:	24010000 	li	at,0
80033f68:	a3a000f3 	sb	zero,243(sp)
        node.borrow_mut().next = None;
80033f6c:	afa000d8 	sw	zero,216(sp)
80033f70:	27a4006c 	addiu	a0,sp,108
80033f74:	afa40028 	sw	a0,40(sp)
80033f78:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
80033f7c:	00000000 	nop
80033f80:	00402025 	move	a0,v0
80033f84:	3c018105 	lui	at,0x8105
80033f88:	2425e4e4 	addiu	a1,at,-6940
80033f8c:	0c008e61 	jal	80023984 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17hb595252ccca38d48E>
80033f90:	00000000 	nop
80033f94:	afa200dc 	sw	v0,220(sp)
80033f98:	afa300e0 	sw	v1,224(sp)
80033f9c:	27a400dc 	addiu	a0,sp,220
80033fa0:	afa4001c 	sw	a0,28(sp)
80033fa4:	0c00ab3e 	jal	8002acf8 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2feec4d0c6d8f526E>
80033fa8:	00000000 	nop
80033fac:	00402025 	move	a0,v0
80033fb0:	afa40018 	sw	a0,24(sp)
80033fb4:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80033fb8:	00000000 	nop
80033fbc:	8fa20018 	lw	v0,24(sp)
80033fc0:	8fa4001c 	lw	a0,28(sp)
80033fc4:	8fa100d8 	lw	at,216(sp)
80033fc8:	ac410000 	sw	at,0(v0)
80033fcc:	0c008be9 	jal	80022fa4 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17hae5dae7ed76ef803E>
80033fd0:	00000000 	nop
80033fd4:	8fa40028 	lw	a0,40(sp)
        node.borrow_mut().prev = None;
80033fd8:	afa000e4 	sw	zero,228(sp)
80033fdc:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
80033fe0:	00000000 	nop
80033fe4:	00402025 	move	a0,v0
80033fe8:	3c018105 	lui	at,0x8105
80033fec:	2425e4f4 	addiu	a1,at,-6924
80033ff0:	0c008e61 	jal	80023984 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17hb595252ccca38d48E>
80033ff4:	00000000 	nop
80033ff8:	afa200e8 	sw	v0,232(sp)
80033ffc:	afa300ec 	sw	v1,236(sp)
80034000:	27a400e8 	addiu	a0,sp,232
80034004:	afa40024 	sw	a0,36(sp)
80034008:	0c00ab3e 	jal	8002acf8 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2feec4d0c6d8f526E>
8003400c:	00000000 	nop
80034010:	afa20020 	sw	v0,32(sp)
80034014:	24440004 	addiu	a0,v0,4
80034018:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
8003401c:	00000000 	nop
80034020:	8fa20020 	lw	v0,32(sp)
80034024:	8fa40024 	lw	a0,36(sp)
80034028:	8fa100e4 	lw	at,228(sp)
8003402c:	ac410004 	sw	at,4(v0)
80034030:	0c008be9 	jal	80022fa4 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17hae5dae7ed76ef803E>
80034034:	00000000 	nop
80034038:	27a400a4 	addiu	a0,sp,164
    }
8003403c:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80034040:	00000000 	nop
80034044:	27a40098 	addiu	a0,sp,152
80034048:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
8003404c:	00000000 	nop
80034050:	8fa40028 	lw	a0,40(sp)
80034054:	0c008d66 	jal	80023598 <_ZN4core3ptr96drop_in_place$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h43239437a0ec2517E>
80034058:	00000000 	nop
8003405c:	0800d01e 	j	80034078 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x5b0>
80034060:	00000000 	nop
80034064:	27a400c8 	addiu	a0,sp,200
        }
80034068:	0c008d66 	jal	80023598 <_ZN4core3ptr96drop_in_place$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h43239437a0ec2517E>
8003406c:	00000000 	nop
80034070:	0800cfd9 	j	80033f64 <_ZN8mos_65024util16DoubleLinkedList6remove17hdb8252839df5f038E+0x49c>
80034074:	00000000 	nop
    }
80034078:	8fbf010c 	lw	ra,268(sp)
8003407c:	27bd0110 	addiu	sp,sp,272
80034080:	03e00008 	jr	ra
80034084:	00000000 	nop

80034088 <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E>:
    pub fn pop(&mut self) -> Option<Arc<RefCell<ListNode>>> {
80034088:	27bdff70 	addiu	sp,sp,-144
8003408c:	afbf008c 	sw	ra,140(sp)
80034090:	afa40030 	sw	a0,48(sp)
80034094:	afa40080 	sw	a0,128(sp)
80034098:	24010000 	li	at,0
        if self.head.is_none() {
8003409c:	a3a0007f 	sb	zero,127(sp)
800340a0:	0c009798 	jal	80025e60 <_ZN4core6option15Option$LT$T$GT$7is_none17h243af1ceb393c575E>
800340a4:	00000000 	nop
800340a8:	1440002b 	bnez	v0,80034158 <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E+0xd0>
800340ac:	00000000 	nop
800340b0:	0800d02e 	j	800340b8 <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E+0x30>
800340b4:	00000000 	nop
            return None;
        }
        let head = self.head.take().unwrap();
800340b8:	8fa40030 	lw	a0,48(sp)
800340bc:	0c00965c 	jal	80025970 <_ZN4core6option15Option$LT$T$GT$4take17h82d64be1993198aeE>
800340c0:	00000000 	nop
800340c4:	afa20084 	sw	v0,132(sp)
        match self {
800340c8:	8fa10084 	lw	at,132(sp)
800340cc:	14200007 	bnez	at,800340ec <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E+0x64>
800340d0:	00000000 	nop
800340d4:	0800d037 	j	800340dc <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E+0x54>
800340d8:	00000000 	nop
            None => unwrap_failed(),
800340dc:	3c018105 	lui	at,0x8105
800340e0:	2424e504 	addiu	a0,at,-6908
800340e4:	0c00f1b6 	jal	8003c6d8 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
800340e8:	00000000 	nop
            Some(val) => val,
800340ec:	8fa10084 	lw	at,132(sp)
800340f0:	afa10088 	sw	at,136(sp)
800340f4:	afa10038 	sw	at,56(sp)
800340f8:	27a40038 	addiu	a0,sp,56
        if let Some(next) = head.borrow().next.clone() {
800340fc:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
80034100:	00000000 	nop
80034104:	00402025 	move	a0,v0
80034108:	3c018105 	lui	at,0x8105
8003410c:	2425e514 	addiu	a1,at,-6892
80034110:	0c008ee2 	jal	80023b88 <_ZN4core4cell16RefCell$LT$T$GT$6borrow17h0651cb519b6f324eE>
80034114:	00000000 	nop
80034118:	afa20040 	sw	v0,64(sp)
8003411c:	afa30044 	sw	v1,68(sp)
80034120:	27a40040 	addiu	a0,sp,64
80034124:	0c00a9f8 	jal	8002a7e0 <_ZN68_$LT$core..cell..Ref$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hefea2bce46aaade6E>
80034128:	00000000 	nop
8003412c:	00402025 	move	a0,v0
80034130:	0c00aa01 	jal	8002a804 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h66326969665f9c81E>
80034134:	00000000 	nop
80034138:	afa2003c 	sw	v0,60(sp)
8003413c:	24010001 	li	at,1
80034140:	a3a1007f 	sb	at,127(sp)
80034144:	8fa1003c 	lw	at,60(sp)
80034148:	14200006 	bnez	at,80034164 <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E+0xdc>
8003414c:	00000000 	nop
80034150:	0800d080 	j	80034200 <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E+0x178>
80034154:	00000000 	nop
            return None;
80034158:	afa00034 	sw	zero,52(sp)
            self.head = None;
        }
        head.borrow_mut().next = None;
        head.borrow_mut().prev = None;
        Some(head)
    }
8003415c:	0800d0dc 	j	80034370 <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E+0x2e8>
80034160:	00000000 	nop
80034164:	24010000 	li	at,0
        if let Some(next) = head.borrow().next.clone() {
80034168:	a3a0007f 	sb	zero,127(sp)
8003416c:	8fa1003c 	lw	at,60(sp)
80034170:	afa10048 	sw	at,72(sp)
            next.borrow_mut().prev = None;
80034174:	afa0004c 	sw	zero,76(sp)
80034178:	27a40048 	addiu	a0,sp,72
8003417c:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
80034180:	00000000 	nop
80034184:	00402025 	move	a0,v0
80034188:	3c018105 	lui	at,0x8105
8003418c:	2425e524 	addiu	a1,at,-6876
80034190:	0c008e61 	jal	80023984 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17hb595252ccca38d48E>
80034194:	00000000 	nop
80034198:	afa20050 	sw	v0,80(sp)
8003419c:	afa30054 	sw	v1,84(sp)
800341a0:	27a40050 	addiu	a0,sp,80
800341a4:	afa4002c 	sw	a0,44(sp)
800341a8:	0c00ab3e 	jal	8002acf8 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2feec4d0c6d8f526E>
800341ac:	00000000 	nop
800341b0:	afa20028 	sw	v0,40(sp)
800341b4:	24440004 	addiu	a0,v0,4
800341b8:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
800341bc:	00000000 	nop
800341c0:	8fa20028 	lw	v0,40(sp)
800341c4:	8fa4002c 	lw	a0,44(sp)
800341c8:	8fa1004c 	lw	at,76(sp)
800341cc:	ac410004 	sw	at,4(v0)
800341d0:	0c008be9 	jal	80022fa4 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17hae5dae7ed76ef803E>
800341d4:	00000000 	nop
800341d8:	8fa40030 	lw	a0,48(sp)
            self.head = Some(next);
800341dc:	8fa10048 	lw	at,72(sp)
800341e0:	afa10058 	sw	at,88(sp)
800341e4:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
800341e8:	00000000 	nop
800341ec:	8fa20030 	lw	v0,48(sp)
800341f0:	8fa10058 	lw	at,88(sp)
800341f4:	ac410000 	sw	at,0(v0)
        if let Some(next) = head.borrow().next.clone() {
800341f8:	0800d090 	j	80034240 <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E+0x1b8>
800341fc:	00000000 	nop
            self.tail = None;
80034200:	8fa10030 	lw	at,48(sp)
80034204:	afa0005c 	sw	zero,92(sp)
80034208:	24240004 	addiu	a0,at,4
8003420c:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80034210:	00000000 	nop
80034214:	8fa40030 	lw	a0,48(sp)
80034218:	8fa1005c 	lw	at,92(sp)
8003421c:	ac810004 	sw	at,4(a0)
            self.head = None;
80034220:	afa00060 	sw	zero,96(sp)
80034224:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80034228:	00000000 	nop
8003422c:	8fa20030 	lw	v0,48(sp)
80034230:	8fa10060 	lw	at,96(sp)
80034234:	ac410000 	sw	at,0(v0)
        if let Some(next) = head.borrow().next.clone() {
80034238:	0800d090 	j	80034240 <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E+0x1b8>
8003423c:	00000000 	nop
        }
80034240:	8fa1003c 	lw	at,60(sp)
80034244:	10200009 	beqz	at,8003426c <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E+0x1e4>
80034248:	00000000 	nop
8003424c:	0800d095 	j	80034254 <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E+0x1cc>
80034250:	00000000 	nop
80034254:	93a1007f 	lbu	at,127(sp)
80034258:	30210001 	andi	at,at,0x1
8003425c:	1420003f 	bnez	at,8003435c <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E+0x2d4>
80034260:	00000000 	nop
80034264:	0800d09b 	j	8003426c <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E+0x1e4>
80034268:	00000000 	nop
8003426c:	27a40040 	addiu	a0,sp,64
80034270:	0c008b58 	jal	80022d60 <_ZN4core3ptr68drop_in_place$LT$core..cell..Ref$LT$mos_6502..util..ListNode$GT$$GT$17h1d64f236e3cdb092E>
80034274:	00000000 	nop
80034278:	24010000 	li	at,0
8003427c:	a3a0007f 	sb	zero,127(sp)
        head.borrow_mut().next = None;
80034280:	afa00064 	sw	zero,100(sp)
80034284:	27a40038 	addiu	a0,sp,56
80034288:	afa4001c 	sw	a0,28(sp)
8003428c:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
80034290:	00000000 	nop
80034294:	00402025 	move	a0,v0
80034298:	3c018105 	lui	at,0x8105
8003429c:	2425e534 	addiu	a1,at,-6860
800342a0:	0c008e61 	jal	80023984 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17hb595252ccca38d48E>
800342a4:	00000000 	nop
800342a8:	afa20068 	sw	v0,104(sp)
800342ac:	afa3006c 	sw	v1,108(sp)
800342b0:	27a40068 	addiu	a0,sp,104
800342b4:	afa40018 	sw	a0,24(sp)
800342b8:	0c00ab3e 	jal	8002acf8 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2feec4d0c6d8f526E>
800342bc:	00000000 	nop
800342c0:	00402025 	move	a0,v0
800342c4:	afa40014 	sw	a0,20(sp)
800342c8:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
800342cc:	00000000 	nop
800342d0:	8fa20014 	lw	v0,20(sp)
800342d4:	8fa40018 	lw	a0,24(sp)
800342d8:	8fa10064 	lw	at,100(sp)
800342dc:	ac410000 	sw	at,0(v0)
800342e0:	0c008be9 	jal	80022fa4 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17hae5dae7ed76ef803E>
800342e4:	00000000 	nop
800342e8:	8fa4001c 	lw	a0,28(sp)
        head.borrow_mut().prev = None;
800342ec:	afa00070 	sw	zero,112(sp)
800342f0:	0c00ab34 	jal	8002acd0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2bd46fa389eb4d08E>
800342f4:	00000000 	nop
800342f8:	00402025 	move	a0,v0
800342fc:	3c018105 	lui	at,0x8105
80034300:	2425e544 	addiu	a1,at,-6844
80034304:	0c008e61 	jal	80023984 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17hb595252ccca38d48E>
80034308:	00000000 	nop
8003430c:	afa20074 	sw	v0,116(sp)
80034310:	afa30078 	sw	v1,120(sp)
80034314:	27a40074 	addiu	a0,sp,116
80034318:	afa40024 	sw	a0,36(sp)
8003431c:	0c00ab3e 	jal	8002acf8 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2feec4d0c6d8f526E>
80034320:	00000000 	nop
80034324:	afa20020 	sw	v0,32(sp)
80034328:	24440004 	addiu	a0,v0,4
8003432c:	0c008709 	jal	80021c24 <_ZN4core3ptr124drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$$GT$17hf4bbda8e4eb08e18E>
80034330:	00000000 	nop
80034334:	8fa20020 	lw	v0,32(sp)
80034338:	8fa40024 	lw	a0,36(sp)
8003433c:	8fa10070 	lw	at,112(sp)
80034340:	ac410004 	sw	at,4(v0)
80034344:	0c008be9 	jal	80022fa4 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$mos_6502..util..ListNode$GT$$GT$17hae5dae7ed76ef803E>
80034348:	00000000 	nop
        Some(head)
8003434c:	8fa10038 	lw	at,56(sp)
80034350:	afa10034 	sw	at,52(sp)
    }
80034354:	0800d0dc 	j	80034370 <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E+0x2e8>
80034358:	00000000 	nop
8003435c:	27a4003c 	addiu	a0,sp,60
        }
80034360:	0c008d66 	jal	80023598 <_ZN4core3ptr96drop_in_place$LT$alloc..sync..Arc$LT$core..cell..RefCell$LT$mos_6502..util..ListNode$GT$$GT$$GT$17h43239437a0ec2517E>
80034364:	00000000 	nop
80034368:	0800d09b 	j	8003426c <_ZN8mos_65024util16DoubleLinkedList3pop17hf816da7666af0fa7E+0x1e4>
8003436c:	00000000 	nop
    }
80034370:	8fa20034 	lw	v0,52(sp)
80034374:	8fbf008c 	lw	ra,140(sp)
80034378:	27bd0090 	addiu	sp,sp,144
8003437c:	03e00008 	jr	ra
80034380:	00000000 	nop

80034384 <memmove>:
    }
    return 0;
}

#[no_mangle]
extern "C" fn memmove(dst: *mut u8, src: *const u8, n: usize) -> *mut u8 {
80034384:	27bdffa0 	addiu	sp,sp,-96
80034388:	afa60024 	sw	a2,36(sp)
8003438c:	afa50028 	sw	a1,40(sp)
80034390:	afa4002c 	sw	a0,44(sp)
80034394:	afa40034 	sw	a0,52(sp)
80034398:	afa50038 	sw	a1,56(sp)
8003439c:	afa6003c 	sw	a2,60(sp)
    let mut i = 0;
800343a0:	afa00030 	sw	zero,48(sp)
    if dst < src as *mut u8 {
800343a4:	0085082b 	sltu	at,a0,a1
800343a8:	14200007 	bnez	at,800343c8 <memmove+0x44>
800343ac:	00000000 	nop
800343b0:	0800d0ee 	j	800343b8 <memmove+0x34>
800343b4:	00000000 	nop
                *dst.add(i) = *src.add(i);
            }
            i += 1;
        }
    } else {
        i = n;
800343b8:	8fa10024 	lw	at,36(sp)
800343bc:	afa10030 	sw	at,48(sp)
        while i > 0 {
800343c0:	0800d0f9 	j	800343e4 <memmove+0x60>
800343c4:	00000000 	nop
        while i < n {
800343c8:	8fa20024 	lw	v0,36(sp)
800343cc:	8fa10030 	lw	at,48(sp)
800343d0:	0022082b 	sltu	at,at,v0
800343d4:	1420003f 	bnez	at,800344d4 <memmove+0x150>
800343d8:	00000000 	nop
800343dc:	0800d0fe 	j	800343f8 <memmove+0x74>
800343e0:	00000000 	nop
        while i > 0 {
800343e4:	8fa10030 	lw	at,48(sp)
800343e8:	14200007 	bnez	at,80034408 <memmove+0x84>
800343ec:	00000000 	nop
800343f0:	0800d0fe 	j	800343f8 <memmove+0x74>
800343f4:	00000000 	nop
            }
            i -= 1;
        }
    }
    return dst;
}
800343f8:	8fa2002c 	lw	v0,44(sp)
800343fc:	27bd0060 	addiu	sp,sp,96
80034400:	03e00008 	jr	ra
80034404:	00000000 	nop
                *dst.add(i - 1) = *src.add(i - 1);
80034408:	8fa10030 	lw	at,48(sp)
8003440c:	2422ffff 	addiu	v0,at,-1
80034410:	afa20020 	sw	v0,32(sp)
80034414:	10200011 	beqz	at,8003445c <memmove+0xd8>
80034418:	00000000 	nop
8003441c:	0800d109 	j	80034424 <memmove+0xa0>
80034420:	00000000 	nop
80034424:	8fa10028 	lw	at,40(sp)
80034428:	8fa20020 	lw	v0,32(sp)
8003442c:	afa10058 	sw	at,88(sp)
80034430:	afa2005c 	sw	v0,92(sp)
        unsafe { intrinsics::offset(self, count) }
80034434:	00220821 	addu	at,at,v0
80034438:	90210000 	lbu	at,0(at)
8003443c:	afa10018 	sw	at,24(sp)
80034440:	8fa10030 	lw	at,48(sp)
80034444:	2422ffff 	addiu	v0,at,-1
80034448:	afa2001c 	sw	v0,28(sp)
8003444c:	10200015 	beqz	at,800344a4 <memmove+0x120>
80034450:	00000000 	nop
80034454:	0800d11b 	j	8003446c <memmove+0xe8>
80034458:	00000000 	nop
8003445c:	3c018105 	lui	at,0x8105
80034460:	2424e554 	addiu	a0,at,-6828
80034464:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80034468:	00000000 	nop
8003446c:	8fa10018 	lw	at,24(sp)
80034470:	8fa2002c 	lw	v0,44(sp)
80034474:	8fa3001c 	lw	v1,28(sp)
80034478:	afa20048 	sw	v0,72(sp)
8003447c:	afa3004c 	sw	v1,76(sp)
80034480:	00431021 	addu	v0,v0,v1
80034484:	a0410000 	sb	at,0(v0)
            i -= 1;
80034488:	8fa10030 	lw	at,48(sp)
8003448c:	2422ffff 	addiu	v0,at,-1
80034490:	afa20014 	sw	v0,20(sp)
80034494:	1020000b 	beqz	at,800344c4 <memmove+0x140>
80034498:	00000000 	nop
8003449c:	0800d12d 	j	800344b4 <memmove+0x130>
800344a0:	00000000 	nop
                *dst.add(i - 1) = *src.add(i - 1);
800344a4:	3c018105 	lui	at,0x8105
800344a8:	2424e564 	addiu	a0,at,-6812
800344ac:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800344b0:	00000000 	nop
            i -= 1;
800344b4:	8fa10014 	lw	at,20(sp)
800344b8:	afa10030 	sw	at,48(sp)
        while i > 0 {
800344bc:	0800d0f9 	j	800343e4 <memmove+0x60>
800344c0:	00000000 	nop
            i -= 1;
800344c4:	3c018105 	lui	at,0x8105
800344c8:	2424e574 	addiu	a0,at,-6796
800344cc:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800344d0:	00000000 	nop
                *dst.add(i) = *src.add(i);
800344d4:	8fa2002c 	lw	v0,44(sp)
800344d8:	8fa10028 	lw	at,40(sp)
800344dc:	8fa30030 	lw	v1,48(sp)
800344e0:	afa10050 	sw	at,80(sp)
800344e4:	afa30054 	sw	v1,84(sp)
800344e8:	00230821 	addu	at,at,v1
800344ec:	90210000 	lbu	at,0(at)
800344f0:	8fa30030 	lw	v1,48(sp)
800344f4:	afa20040 	sw	v0,64(sp)
800344f8:	afa30044 	sw	v1,68(sp)
800344fc:	00431021 	addu	v0,v0,v1
80034500:	a0410000 	sb	at,0(v0)
            i += 1;
80034504:	8fa10030 	lw	at,48(sp)
80034508:	24210001 	addiu	at,at,1
8003450c:	afa10010 	sw	at,16(sp)
80034510:	10200007 	beqz	at,80034530 <memmove+0x1ac>
80034514:	00000000 	nop
80034518:	0800d148 	j	80034520 <memmove+0x19c>
8003451c:	00000000 	nop
80034520:	8fa10010 	lw	at,16(sp)
80034524:	afa10030 	sw	at,48(sp)
        while i < n {
80034528:	0800d0f2 	j	800343c8 <memmove+0x44>
8003452c:	00000000 	nop
            i += 1;
80034530:	3c018105 	lui	at,0x8105
80034534:	2424e584 	addiu	a0,at,-6780
80034538:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003453c:	00000000 	nop

80034540 <_ZN73_$LT$mos_6502..dev..uart..NS16550A$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbf8d16e6e776ffa2E>:
            fn deref(&self) -> &$T {
80034540:	27bdffe0 	addiu	sp,sp,-32
80034544:	afbf001c 	sw	ra,28(sp)
80034548:	afa40014 	sw	a0,20(sp)
8003454c:	3c018005 	lui	at,0x8005
80034550:	2424b000 	addiu	a0,at,-20480
80034554:	afa40018 	sw	a0,24(sp)

    #[inline(always)]
    pub fn get<F>(&'static self, builder: F) -> &T
        where F: FnOnce() -> T
    {
        self.0.call_once(builder)
80034558:	0c009d0a 	jal	80027428 <_ZN4spin4once13Once$LT$T$GT$9call_once17ha37f5453c824b1d8E>
8003455c:	00000000 	nop
                fn __stability() -> &'static $T {
                    __lazy_static_create!(LAZY, $T);
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
80034560:	8fbf001c 	lw	ra,28(sp)
80034564:	27bd0020 	addiu	sp,sp,32
80034568:	03e00008 	jr	ra
8003456c:	00000000 	nop

80034570 <_ZN69_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..cmp..PartialEq$GT$2eq17hde20d5cb95aa44f1E>:
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy)]
80034570:	27bdfff8 	addiu	sp,sp,-8
80034574:	afa40000 	sw	a0,0(sp)
80034578:	afa50004 	sw	a1,4(sp)
    pub raw: usize,
8003457c:	8c810000 	lw	at,0(a0)
80034580:	8ca20000 	lw	v0,0(a1)
80034584:	00220826 	xor	at,at,v0
80034588:	2c220001 	sltiu	v0,at,1
8003458c:	27bd0008 	addiu	sp,sp,8
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy)]
80034590:	03e00008 	jr	ra
80034594:	00000000 	nop

80034598 <_ZN70_$LT$mos_6502..mm..addr..VirtAddr$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h73757ab0d94b9ac5E>:
80034598:	27bdffe0 	addiu	sp,sp,-32
8003459c:	afbf001c 	sw	ra,28(sp)
800345a0:	afa40014 	sw	a0,20(sp)
800345a4:	afa50018 	sw	a1,24(sp)
    pub raw: usize,
800345a8:	0c00830d 	jal	80020c34 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$11partial_cmp17h18ce96e5ef800831E>
800345ac:	00000000 	nop
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy)]
800345b0:	8fbf001c 	lw	ra,28(sp)
800345b4:	27bd0020 	addiu	sp,sp,32
800345b8:	03e00008 	jr	ra
800345bc:	00000000 	nop

800345c0 <_ZN70_$LT$mos_6502..mm..addr..PhysAddr$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17ha1ecdd73b3c254daE>:
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy)]
800345c0:	27bdffe0 	addiu	sp,sp,-32
800345c4:	afbf001c 	sw	ra,28(sp)
800345c8:	afa40014 	sw	a0,20(sp)
800345cc:	afa50018 	sw	a1,24(sp)
    pub raw: usize,
800345d0:	0c00830d 	jal	80020c34 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$11partial_cmp17h18ce96e5ef800831E>
800345d4:	00000000 	nop
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy)]
800345d8:	8fbf001c 	lw	ra,28(sp)
800345dc:	27bd0020 	addiu	sp,sp,32
800345e0:	03e00008 	jr	ra
800345e4:	00000000 	nop

800345e8 <_ZN69_$LT$mos_6502..mm..page..PAGES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h60478cac0dea9383E>:
            fn deref(&self) -> &$T {
800345e8:	27bdffe0 	addiu	sp,sp,-32
800345ec:	afbf001c 	sw	ra,28(sp)
800345f0:	afa40014 	sw	a0,20(sp)
800345f4:	3c018005 	lui	at,0x8005
800345f8:	2424b010 	addiu	a0,at,-20464
800345fc:	afa40018 	sw	a0,24(sp)
80034600:	0c0099bd 	jal	800266f4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h32876f3aa2e00162E>
80034604:	00000000 	nop
            }
80034608:	8fbf001c 	lw	ra,28(sp)
8003460c:	27bd0020 	addiu	sp,sp,32
80034610:	03e00008 	jr	ra
80034614:	00000000 	nop

80034618 <_ZN73_$LT$mos_6502..mm..page..PAGE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h6a3c89b4135f7721E>:
            fn deref(&self) -> &$T {
80034618:	27bdffe0 	addiu	sp,sp,-32
8003461c:	afbf001c 	sw	ra,28(sp)
80034620:	afa40014 	sw	a0,20(sp)
80034624:	3c018005 	lui	at,0x8005
80034628:	2424b028 	addiu	a0,at,-20440
8003462c:	afa40018 	sw	a0,24(sp)
80034630:	0c009e16 	jal	80027858 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf8d98bf6aa4e2ccdE>
80034634:	00000000 	nop
            }
80034638:	8fbf001c 	lw	ra,28(sp)
8003463c:	27bd0020 	addiu	sp,sp,32
80034640:	03e00008 	jr	ra
80034644:	00000000 	nop

80034648 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags5empty17h78c5c8fce66d1a07E>:
    ) => {
        #[allow(dead_code, deprecated, unused_attributes)]
        impl $PublicBitFlags {
            /// Get a flags value with all bits unset.
            #[inline]
            pub const fn empty() -> Self {
80034648:	27bdfff8 	addiu	sp,sp,-8
bitflags::bitflags! {
8003464c:	afa00004 	sw	zero,4(sp)
                $empty
            }
80034650:	8fa20004 	lw	v0,4(sp)
80034654:	27bd0008 	addiu	sp,sp,8
80034658:	03e00008 	jr	ra
8003465c:	00000000 	nop

80034660 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE>:

            /// Get a flags value with all known bits set.
            #[inline]
            pub const fn all() -> Self {
80034660:	27bdff90 	addiu	sp,sp,-112
80034664:	afbf006c 	sw	ra,108(sp)
80034668:	afa00048 	sw	zero,72(sp)
8003466c:	afa0004c 	sw	zero,76(sp)
80034670:	8fa1004c 	lw	at,76(sp)
80034674:	afa10044 	sw	at,68(sp)
80034678:	2c210007 	sltiu	at,at,7
8003467c:	1020001a 	beqz	at,800346e8 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x88>
80034680:	00000000 	nop
80034684:	0800d1a3 	j	8003468c <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x2c>
80034688:	00000000 	nop
8003468c:	8fa10044 	lw	at,68(sp)
80034690:	00011080 	sll	v0,at,0x2
80034694:	000108c0 	sll	at,at,0x3
80034698:	00221021 	addu	v0,at,v0
8003469c:	3c018105 	lui	at,0x8105
800346a0:	2421e6e8 	addiu	at,at,-6424
800346a4:	00222021 	addu	a0,at,v0
800346a8:	0c00adf2 	jal	8002b7c8 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17h9ee86a43448771d0E>
800346ac:	00000000 	nop
800346b0:	00402025 	move	a0,v0
800346b4:	0c00d308 	jal	80034c20 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17hf2d8d1380f723ecbE>
800346b8:	00000000 	nop
800346bc:	afa20050 	sw	v0,80(sp)
800346c0:	8fa10048 	lw	at,72(sp)
800346c4:	00220825 	or	at,at,v0
800346c8:	afa10048 	sw	at,72(sp)
800346cc:	8fa1004c 	lw	at,76(sp)
800346d0:	24210001 	addiu	at,at,1
800346d4:	afa10040 	sw	at,64(sp)
800346d8:	10200012 	beqz	at,80034724 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0xc4>
800346dc:	00000000 	nop
800346e0:	0800d1c0 	j	80034700 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0xa0>
800346e4:	00000000 	nop
800346e8:	8fa40044 	lw	a0,68(sp)
800346ec:	3c018105 	lui	at,0x8105
800346f0:	2426e73c 	addiu	a2,at,-6340
800346f4:	24050007 	li	a1,7
800346f8:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
800346fc:	00000000 	nop
80034700:	8fa10040 	lw	at,64(sp)
80034704:	afa1004c 	sw	at,76(sp)
80034708:	8fa1004c 	lw	at,76(sp)
8003470c:	afa1003c 	sw	at,60(sp)
80034710:	2c210007 	sltiu	at,at,7
80034714:	14200007 	bnez	at,80034734 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0xd4>
80034718:	00000000 	nop
8003471c:	0800d1e4 	j	80034790 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x130>
80034720:	00000000 	nop
80034724:	3c018105 	lui	at,0x8105
80034728:	2424e73c 	addiu	a0,at,-6340
8003472c:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80034730:	00000000 	nop
80034734:	8fa1003c 	lw	at,60(sp)
80034738:	00011080 	sll	v0,at,0x2
8003473c:	000108c0 	sll	at,at,0x3
80034740:	00221021 	addu	v0,at,v0
80034744:	3c018105 	lui	at,0x8105
80034748:	2421e6e8 	addiu	at,at,-6424
8003474c:	00222021 	addu	a0,at,v0
80034750:	0c00adf2 	jal	8002b7c8 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17h9ee86a43448771d0E>
80034754:	00000000 	nop
80034758:	00402025 	move	a0,v0
8003475c:	0c00d308 	jal	80034c20 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17hf2d8d1380f723ecbE>
80034760:	00000000 	nop
80034764:	afa20054 	sw	v0,84(sp)
80034768:	8fa10048 	lw	at,72(sp)
8003476c:	00220825 	or	at,at,v0
80034770:	afa10048 	sw	at,72(sp)
80034774:	8fa1004c 	lw	at,76(sp)
80034778:	24210001 	addiu	at,at,1
8003477c:	afa10038 	sw	at,56(sp)
80034780:	10200012 	beqz	at,800347cc <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x16c>
80034784:	00000000 	nop
80034788:	0800d1ea 	j	800347a8 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x148>
8003478c:	00000000 	nop
80034790:	8fa4003c 	lw	a0,60(sp)
80034794:	3c018105 	lui	at,0x8105
80034798:	2426e73c 	addiu	a2,at,-6340
8003479c:	24050007 	li	a1,7
800347a0:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
800347a4:	00000000 	nop
800347a8:	8fa10038 	lw	at,56(sp)
800347ac:	afa1004c 	sw	at,76(sp)
800347b0:	8fa1004c 	lw	at,76(sp)
800347b4:	afa10034 	sw	at,52(sp)
800347b8:	2c210007 	sltiu	at,at,7
800347bc:	14200007 	bnez	at,800347dc <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x17c>
800347c0:	00000000 	nop
800347c4:	0800d20e 	j	80034838 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x1d8>
800347c8:	00000000 	nop
800347cc:	3c018105 	lui	at,0x8105
800347d0:	2424e73c 	addiu	a0,at,-6340
800347d4:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800347d8:	00000000 	nop
800347dc:	8fa10034 	lw	at,52(sp)
800347e0:	00011080 	sll	v0,at,0x2
800347e4:	000108c0 	sll	at,at,0x3
800347e8:	00221021 	addu	v0,at,v0
800347ec:	3c018105 	lui	at,0x8105
800347f0:	2421e6e8 	addiu	at,at,-6424
800347f4:	00222021 	addu	a0,at,v0
800347f8:	0c00adf2 	jal	8002b7c8 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17h9ee86a43448771d0E>
800347fc:	00000000 	nop
80034800:	00402025 	move	a0,v0
80034804:	0c00d308 	jal	80034c20 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17hf2d8d1380f723ecbE>
80034808:	00000000 	nop
8003480c:	afa20058 	sw	v0,88(sp)
80034810:	8fa10048 	lw	at,72(sp)
80034814:	00220825 	or	at,at,v0
80034818:	afa10048 	sw	at,72(sp)
8003481c:	8fa1004c 	lw	at,76(sp)
80034820:	24210001 	addiu	at,at,1
80034824:	afa10030 	sw	at,48(sp)
80034828:	10200012 	beqz	at,80034874 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x214>
8003482c:	00000000 	nop
80034830:	0800d214 	j	80034850 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x1f0>
80034834:	00000000 	nop
80034838:	8fa40034 	lw	a0,52(sp)
8003483c:	3c018105 	lui	at,0x8105
80034840:	2426e73c 	addiu	a2,at,-6340
80034844:	24050007 	li	a1,7
80034848:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8003484c:	00000000 	nop
80034850:	8fa10030 	lw	at,48(sp)
80034854:	afa1004c 	sw	at,76(sp)
80034858:	8fa1004c 	lw	at,76(sp)
8003485c:	afa1002c 	sw	at,44(sp)
80034860:	2c210007 	sltiu	at,at,7
80034864:	14200007 	bnez	at,80034884 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x224>
80034868:	00000000 	nop
8003486c:	0800d238 	j	800348e0 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x280>
80034870:	00000000 	nop
80034874:	3c018105 	lui	at,0x8105
80034878:	2424e73c 	addiu	a0,at,-6340
8003487c:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80034880:	00000000 	nop
80034884:	8fa1002c 	lw	at,44(sp)
80034888:	00011080 	sll	v0,at,0x2
8003488c:	000108c0 	sll	at,at,0x3
80034890:	00221021 	addu	v0,at,v0
80034894:	3c018105 	lui	at,0x8105
80034898:	2421e6e8 	addiu	at,at,-6424
8003489c:	00222021 	addu	a0,at,v0
800348a0:	0c00adf2 	jal	8002b7c8 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17h9ee86a43448771d0E>
800348a4:	00000000 	nop
800348a8:	00402025 	move	a0,v0
800348ac:	0c00d308 	jal	80034c20 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17hf2d8d1380f723ecbE>
800348b0:	00000000 	nop
800348b4:	afa2005c 	sw	v0,92(sp)
800348b8:	8fa10048 	lw	at,72(sp)
800348bc:	00220825 	or	at,at,v0
800348c0:	afa10048 	sw	at,72(sp)
800348c4:	8fa1004c 	lw	at,76(sp)
800348c8:	24210001 	addiu	at,at,1
800348cc:	afa10028 	sw	at,40(sp)
800348d0:	10200012 	beqz	at,8003491c <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x2bc>
800348d4:	00000000 	nop
800348d8:	0800d23e 	j	800348f8 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x298>
800348dc:	00000000 	nop
800348e0:	8fa4002c 	lw	a0,44(sp)
800348e4:	3c018105 	lui	at,0x8105
800348e8:	2426e73c 	addiu	a2,at,-6340
800348ec:	24050007 	li	a1,7
800348f0:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
800348f4:	00000000 	nop
800348f8:	8fa10028 	lw	at,40(sp)
800348fc:	afa1004c 	sw	at,76(sp)
80034900:	8fa1004c 	lw	at,76(sp)
80034904:	afa10024 	sw	at,36(sp)
80034908:	2c210007 	sltiu	at,at,7
8003490c:	14200007 	bnez	at,8003492c <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x2cc>
80034910:	00000000 	nop
80034914:	0800d262 	j	80034988 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x328>
80034918:	00000000 	nop
8003491c:	3c018105 	lui	at,0x8105
80034920:	2424e73c 	addiu	a0,at,-6340
80034924:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80034928:	00000000 	nop
8003492c:	8fa10024 	lw	at,36(sp)
80034930:	00011080 	sll	v0,at,0x2
80034934:	000108c0 	sll	at,at,0x3
80034938:	00221021 	addu	v0,at,v0
8003493c:	3c018105 	lui	at,0x8105
80034940:	2421e6e8 	addiu	at,at,-6424
80034944:	00222021 	addu	a0,at,v0
80034948:	0c00adf2 	jal	8002b7c8 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17h9ee86a43448771d0E>
8003494c:	00000000 	nop
80034950:	00402025 	move	a0,v0
80034954:	0c00d308 	jal	80034c20 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17hf2d8d1380f723ecbE>
80034958:	00000000 	nop
8003495c:	afa20060 	sw	v0,96(sp)
80034960:	8fa10048 	lw	at,72(sp)
80034964:	00220825 	or	at,at,v0
80034968:	afa10048 	sw	at,72(sp)
8003496c:	8fa1004c 	lw	at,76(sp)
80034970:	24210001 	addiu	at,at,1
80034974:	afa10020 	sw	at,32(sp)
80034978:	10200012 	beqz	at,800349c4 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x364>
8003497c:	00000000 	nop
80034980:	0800d268 	j	800349a0 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x340>
80034984:	00000000 	nop
80034988:	8fa40024 	lw	a0,36(sp)
8003498c:	3c018105 	lui	at,0x8105
80034990:	2426e73c 	addiu	a2,at,-6340
80034994:	24050007 	li	a1,7
80034998:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8003499c:	00000000 	nop
800349a0:	8fa10020 	lw	at,32(sp)
800349a4:	afa1004c 	sw	at,76(sp)
800349a8:	8fa1004c 	lw	at,76(sp)
800349ac:	afa1001c 	sw	at,28(sp)
800349b0:	2c210007 	sltiu	at,at,7
800349b4:	14200007 	bnez	at,800349d4 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x374>
800349b8:	00000000 	nop
800349bc:	0800d28c 	j	80034a30 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x3d0>
800349c0:	00000000 	nop
800349c4:	3c018105 	lui	at,0x8105
800349c8:	2424e73c 	addiu	a0,at,-6340
800349cc:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800349d0:	00000000 	nop
800349d4:	8fa1001c 	lw	at,28(sp)
800349d8:	00011080 	sll	v0,at,0x2
800349dc:	000108c0 	sll	at,at,0x3
800349e0:	00221021 	addu	v0,at,v0
800349e4:	3c018105 	lui	at,0x8105
800349e8:	2421e6e8 	addiu	at,at,-6424
800349ec:	00222021 	addu	a0,at,v0
800349f0:	0c00adf2 	jal	8002b7c8 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17h9ee86a43448771d0E>
800349f4:	00000000 	nop
800349f8:	00402025 	move	a0,v0
800349fc:	0c00d308 	jal	80034c20 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17hf2d8d1380f723ecbE>
80034a00:	00000000 	nop
80034a04:	afa20064 	sw	v0,100(sp)
80034a08:	8fa10048 	lw	at,72(sp)
80034a0c:	00220825 	or	at,at,v0
80034a10:	afa10048 	sw	at,72(sp)
80034a14:	8fa1004c 	lw	at,76(sp)
80034a18:	24210001 	addiu	at,at,1
80034a1c:	afa10018 	sw	at,24(sp)
80034a20:	10200012 	beqz	at,80034a6c <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x40c>
80034a24:	00000000 	nop
80034a28:	0800d292 	j	80034a48 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x3e8>
80034a2c:	00000000 	nop
80034a30:	8fa4001c 	lw	a0,28(sp)
80034a34:	3c018105 	lui	at,0x8105
80034a38:	2426e73c 	addiu	a2,at,-6340
80034a3c:	24050007 	li	a1,7
80034a40:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80034a44:	00000000 	nop
80034a48:	8fa10018 	lw	at,24(sp)
80034a4c:	afa1004c 	sw	at,76(sp)
80034a50:	8fa1004c 	lw	at,76(sp)
80034a54:	afa10014 	sw	at,20(sp)
80034a58:	2c210007 	sltiu	at,at,7
80034a5c:	14200007 	bnez	at,80034a7c <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x41c>
80034a60:	00000000 	nop
80034a64:	0800d2b6 	j	80034ad8 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x478>
80034a68:	00000000 	nop
80034a6c:	3c018105 	lui	at,0x8105
80034a70:	2424e73c 	addiu	a0,at,-6340
80034a74:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80034a78:	00000000 	nop
80034a7c:	8fa10014 	lw	at,20(sp)
80034a80:	00011080 	sll	v0,at,0x2
80034a84:	000108c0 	sll	at,at,0x3
80034a88:	00221021 	addu	v0,at,v0
80034a8c:	3c018105 	lui	at,0x8105
80034a90:	2421e6e8 	addiu	at,at,-6424
80034a94:	00222021 	addu	a0,at,v0
80034a98:	0c00adf2 	jal	8002b7c8 <_ZN8bitflags6traits13Flag$LT$B$GT$5value17h9ee86a43448771d0E>
80034a9c:	00000000 	nop
80034aa0:	00402025 	move	a0,v0
80034aa4:	0c00d308 	jal	80034c20 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17hf2d8d1380f723ecbE>
80034aa8:	00000000 	nop
80034aac:	afa20068 	sw	v0,104(sp)
80034ab0:	8fa10048 	lw	at,72(sp)
80034ab4:	00220825 	or	at,at,v0
80034ab8:	afa10048 	sw	at,72(sp)
80034abc:	8fa1004c 	lw	at,76(sp)
80034ac0:	24210001 	addiu	at,at,1
80034ac4:	afa10010 	sw	at,16(sp)
80034ac8:	10200012 	beqz	at,80034b14 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x4b4>
80034acc:	00000000 	nop
80034ad0:	0800d2bc 	j	80034af0 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE+0x490>
80034ad4:	00000000 	nop
80034ad8:	8fa40014 	lw	a0,20(sp)
80034adc:	3c018105 	lui	at,0x8105
80034ae0:	2426e73c 	addiu	a2,at,-6340
80034ae4:	24050007 	li	a1,7
80034ae8:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80034aec:	00000000 	nop
80034af0:	8fa10010 	lw	at,16(sp)
80034af4:	afa1004c 	sw	at,76(sp)
80034af8:	8fa40048 	lw	a0,72(sp)
80034afc:	0c00d2e1 	jal	80034b84 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags16from_bits_retain17h3f420ac3ba8cd146E>
80034b00:	00000000 	nop
                $all
            }
80034b04:	8fbf006c 	lw	ra,108(sp)
80034b08:	27bd0070 	addiu	sp,sp,112
80034b0c:	03e00008 	jr	ra
80034b10:	00000000 	nop
80034b14:	3c018105 	lui	at,0x8105
80034b18:	2424e73c 	addiu	a0,at,-6340
80034b1c:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80034b20:	00000000 	nop

80034b24 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags4bits17h57a4880fb717259eE>:

            /// Get the underlying bits value.
            ///
            /// The returned value is exactly the bits set in this flags value.
            #[inline]
            pub const fn bits(&self) -> $T {
80034b24:	27bdfff8 	addiu	sp,sp,-8
80034b28:	afa40004 	sw	a0,4(sp)
80034b2c:	8c820000 	lw	v0,0(a0)
80034b30:	27bd0008 	addiu	sp,sp,8
                let $bits0 = self;
                $bits
            }
80034b34:	03e00008 	jr	ra
80034b38:	00000000 	nop

80034b3c <_ZN8mos_65022mm7pgtable1_16InternalBitFlags18from_bits_truncate17h270efee86c41e5d8E>:
                $from_bits
            }

            /// Convert from a bits value, unsetting any unknown bits.
            #[inline]
            pub const fn from_bits_truncate(bits: $T) -> Self {
80034b3c:	27bdffd8 	addiu	sp,sp,-40
80034b40:	afbf0024 	sw	ra,36(sp)
80034b44:	afa40014 	sw	a0,20(sp)
80034b48:	afa40020 	sw	a0,32(sp)
80034b4c:	0c00d198 	jal	80034660 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags3all17hff0bf4a0d44f74adE>
80034b50:	00000000 	nop
80034b54:	afa2001c 	sw	v0,28(sp)
80034b58:	27a4001c 	addiu	a0,sp,28
80034b5c:	0c00d2c9 	jal	80034b24 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags4bits17h57a4880fb717259eE>
80034b60:	00000000 	nop
80034b64:	8fa40014 	lw	a0,20(sp)
80034b68:	00820824 	and	at,a0,v0
80034b6c:	afa10018 	sw	at,24(sp)
                let $from_bits_truncate0 = bits;
                $from_bits_truncate
            }
80034b70:	8fa20018 	lw	v0,24(sp)
80034b74:	8fbf0024 	lw	ra,36(sp)
80034b78:	27bd0028 	addiu	sp,sp,40
80034b7c:	03e00008 	jr	ra
80034b80:	00000000 	nop

80034b84 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags16from_bits_retain17h3f420ac3ba8cd146E>:

            /// Convert from a bits value exactly.
            #[inline]
            pub const fn from_bits_retain(bits: $T) -> Self {
80034b84:	27bdfff8 	addiu	sp,sp,-8
80034b88:	afa40004 	sw	a0,4(sp)
80034b8c:	afa40000 	sw	a0,0(sp)
                let $from_bits_retain0 = bits;
                $from_bits_retain
            }
80034b90:	8fa20000 	lw	v0,0(sp)
80034b94:	27bd0008 	addiu	sp,sp,8
80034b98:	03e00008 	jr	ra
80034b9c:	00000000 	nop

80034ba0 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags5union17h8b6d1531ea77fc59E>:
            }

            /// The bitwise or (`|`) of the bits in two flags values.
            #[inline]
            #[must_use]
            pub const fn union(self, other: Self) -> Self {
80034ba0:	27bdffd8 	addiu	sp,sp,-40
80034ba4:	afbf0024 	sw	ra,36(sp)
80034ba8:	afa4001c 	sw	a0,28(sp)
80034bac:	afa50020 	sw	a1,32(sp)
                let $union0 = self;
80034bb0:	afa40014 	sw	a0,20(sp)
                let $union1 = other;
80034bb4:	afa50018 	sw	a1,24(sp)
80034bb8:	27a40014 	addiu	a0,sp,20
80034bbc:	0c00d2c9 	jal	80034b24 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags4bits17h57a4880fb717259eE>
80034bc0:	00000000 	nop
80034bc4:	afa20010 	sw	v0,16(sp)
80034bc8:	27a40018 	addiu	a0,sp,24
80034bcc:	0c00d2c9 	jal	80034b24 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags4bits17h57a4880fb717259eE>
80034bd0:	00000000 	nop
80034bd4:	00400825 	move	at,v0
80034bd8:	8fa20010 	lw	v0,16(sp)
80034bdc:	00412025 	or	a0,v0,at
80034be0:	0c00d2e1 	jal	80034b84 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags16from_bits_retain17h3f420ac3ba8cd146E>
80034be4:	00000000 	nop
                $union
            }
80034be8:	8fbf0024 	lw	ra,36(sp)
80034bec:	27bd0028 	addiu	sp,sp,40
80034bf0:	03e00008 	jr	ra
80034bf4:	00000000 	nop

80034bf8 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$5empty17h7848d888f7322300E>:
            pub const fn empty() -> Self {
80034bf8:	27bdffe8 	addiu	sp,sp,-24
80034bfc:	afbf0014 	sw	ra,20(sp)
80034c00:	0c00d192 	jal	80034648 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags5empty17h78c5c8fce66d1a07E>
80034c04:	00000000 	nop
80034c08:	afa20010 	sw	v0,16(sp)
            }
80034c0c:	8fa20010 	lw	v0,16(sp)
80034c10:	8fbf0014 	lw	ra,20(sp)
80034c14:	27bd0018 	addiu	sp,sp,24
80034c18:	03e00008 	jr	ra
80034c1c:	00000000 	nop

80034c20 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$4bits17hf2d8d1380f723ecbE>:
            pub const fn bits(&self) -> $T {
80034c20:	27bdffe8 	addiu	sp,sp,-24
80034c24:	afbf0014 	sw	ra,20(sp)
80034c28:	afa40010 	sw	a0,16(sp)
80034c2c:	0c00d2c9 	jal	80034b24 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags4bits17h57a4880fb717259eE>
80034c30:	00000000 	nop
            }
80034c34:	8fbf0014 	lw	ra,20(sp)
80034c38:	27bd0018 	addiu	sp,sp,24
80034c3c:	03e00008 	jr	ra
80034c40:	00000000 	nop

80034c44 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$18from_bits_truncate17h3f9dde299002b59cE>:
            pub const fn from_bits_truncate(bits: $T) -> Self {
80034c44:	27bdffe0 	addiu	sp,sp,-32
80034c48:	afbf001c 	sw	ra,28(sp)
80034c4c:	afa40018 	sw	a0,24(sp)
80034c50:	0c00d2cf 	jal	80034b3c <_ZN8mos_65022mm7pgtable1_16InternalBitFlags18from_bits_truncate17h270efee86c41e5d8E>
80034c54:	00000000 	nop
80034c58:	afa20014 	sw	v0,20(sp)
            }
80034c5c:	8fa20014 	lw	v0,20(sp)
80034c60:	8fbf001c 	lw	ra,28(sp)
80034c64:	27bd0020 	addiu	sp,sp,32
80034c68:	03e00008 	jr	ra
80034c6c:	00000000 	nop

80034c70 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$5union17hbc78f78c08688ebeE>:
            pub const fn union(self, other: Self) -> Self {
80034c70:	27bdffe0 	addiu	sp,sp,-32
80034c74:	afbf001c 	sw	ra,28(sp)
80034c78:	afa40014 	sw	a0,20(sp)
80034c7c:	afa50018 	sw	a1,24(sp)
80034c80:	0c00d2e8 	jal	80034ba0 <_ZN8mos_65022mm7pgtable1_16InternalBitFlags5union17h8b6d1531ea77fc59E>
80034c84:	00000000 	nop
80034c88:	afa20010 	sw	v0,16(sp)
            }
80034c8c:	8fa20010 	lw	v0,16(sp)
80034c90:	8fbf001c 	lw	ra,28(sp)
80034c94:	27bd0020 	addiu	sp,sp,32
80034c98:	03e00008 	jr	ra
80034c9c:	00000000 	nop

80034ca0 <_ZN8mos_65022mm7pgtable1_84_$LT$impl$u20$core..ops..bit..BitOr$u20$for$u20$mos_6502..mm..pgtable..Permssion$GT$5bitor17h535389841f955927E>:
        impl $crate::__private::core::ops::BitOr for $PublicBitFlags {
            type Output = Self;

            /// The bitwise or (`|`) of the bits in two flags values.
            #[inline]
            fn bitor(self, other: $PublicBitFlags) -> Self {
80034ca0:	27bdffe0 	addiu	sp,sp,-32
80034ca4:	afbf001c 	sw	ra,28(sp)
80034ca8:	afa40014 	sw	a0,20(sp)
80034cac:	afa50018 	sw	a1,24(sp)
                self.union(other)
80034cb0:	0c00d31c 	jal	80034c70 <_ZN8mos_65022mm7pgtable1_50_$LT$impl$u20$mos_6502..mm..pgtable..Permssion$GT$5union17hbc78f78c08688ebeE>
80034cb4:	00000000 	nop
            }
80034cb8:	8fbf001c 	lw	ra,28(sp)
80034cbc:	27bd0020 	addiu	sp,sp,32
80034cc0:	03e00008 	jr	ra
80034cc4:	00000000 	nop

80034cc8 <__rust_alloc>:
#[define_simple_allocator(KERNEL_HEAP_SIZE)]
80034cc8:	27bdffe0 	addiu	sp,sp,-32
80034ccc:	afbf001c 	sw	ra,28(sp)
80034cd0:	afa40014 	sw	a0,20(sp)
80034cd4:	afa50018 	sw	a1,24(sp)
80034cd8:	0c009482 	jal	80025208 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3d2659548699448fE>
80034cdc:	00000000 	nop
80034ce0:	00402825 	move	a1,v0
80034ce4:	00603025 	move	a2,v1
80034ce8:	3c018005 	lui	at,0x8005
80034cec:	2424a000 	addiu	a0,at,-24576
80034cf0:	0c00d9bd 	jal	800366f4 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E>
80034cf4:	00000000 	nop
80034cf8:	8fbf001c 	lw	ra,28(sp)
80034cfc:	27bd0020 	addiu	sp,sp,32
80034d00:	03e00008 	jr	ra
80034d04:	00000000 	nop

80034d08 <__rust_dealloc>:
80034d08:	27bdffd0 	addiu	sp,sp,-48
80034d0c:	afbf002c 	sw	ra,44(sp)
80034d10:	afa60014 	sw	a2,20(sp)
80034d14:	00a00825 	move	at,a1
80034d18:	8fa50014 	lw	a1,20(sp)
80034d1c:	afa10018 	sw	at,24(sp)
80034d20:	00800825 	move	at,a0
80034d24:	8fa40018 	lw	a0,24(sp)
80034d28:	afa1001c 	sw	at,28(sp)
80034d2c:	afa10020 	sw	at,32(sp)
80034d30:	afa40024 	sw	a0,36(sp)
80034d34:	afa50028 	sw	a1,40(sp)
80034d38:	0c009482 	jal	80025208 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3d2659548699448fE>
80034d3c:	00000000 	nop
80034d40:	8fa5001c 	lw	a1,28(sp)
80034d44:	00403025 	move	a2,v0
80034d48:	00603825 	move	a3,v1
80034d4c:	3c018005 	lui	at,0x8005
80034d50:	2424a000 	addiu	a0,at,-24576
80034d54:	0c00da60 	jal	80036980 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h60cbba0684ddd548E>
80034d58:	00000000 	nop
80034d5c:	8fbf002c 	lw	ra,44(sp)
80034d60:	27bd0030 	addiu	sp,sp,48
80034d64:	03e00008 	jr	ra
80034d68:	00000000 	nop

80034d6c <__rust_realloc>:
80034d6c:	27bdffc0 	addiu	sp,sp,-64
80034d70:	afbf003c 	sw	ra,60(sp)
80034d74:	afa70024 	sw	a3,36(sp)
80034d78:	afa6001c 	sw	a2,28(sp)
80034d7c:	00a00825 	move	at,a1
80034d80:	8fa5001c 	lw	a1,28(sp)
80034d84:	afa10020 	sw	at,32(sp)
80034d88:	00800825 	move	at,a0
80034d8c:	8fa40020 	lw	a0,32(sp)
80034d90:	afa10028 	sw	at,40(sp)
80034d94:	afa1002c 	sw	at,44(sp)
80034d98:	afa40030 	sw	a0,48(sp)
80034d9c:	afa50034 	sw	a1,52(sp)
80034da0:	afa70038 	sw	a3,56(sp)
80034da4:	0c009482 	jal	80025208 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3d2659548699448fE>
80034da8:	00000000 	nop
80034dac:	8fa10024 	lw	at,36(sp)
80034db0:	8fa50028 	lw	a1,40(sp)
80034db4:	00403025 	move	a2,v0
80034db8:	00603825 	move	a3,v1
80034dbc:	03a01025 	move	v0,sp
80034dc0:	ac410010 	sw	at,16(v0)
80034dc4:	3c018005 	lui	at,0x8005
80034dc8:	2424a000 	addiu	a0,at,-24576
80034dcc:	0c0093ea 	jal	80024fa8 <_ZN4core5alloc6global11GlobalAlloc7realloc17h0be37c6890403ee7E>
80034dd0:	00000000 	nop
80034dd4:	8fbf003c 	lw	ra,60(sp)
80034dd8:	27bd0040 	addiu	sp,sp,64
80034ddc:	03e00008 	jr	ra
80034de0:	00000000 	nop

80034de4 <__rust_alloc_zeroed>:
80034de4:	27bdffe0 	addiu	sp,sp,-32
80034de8:	afbf001c 	sw	ra,28(sp)
80034dec:	afa40014 	sw	a0,20(sp)
80034df0:	afa50018 	sw	a1,24(sp)
80034df4:	0c009482 	jal	80025208 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h3d2659548699448fE>
80034df8:	00000000 	nop
80034dfc:	00402825 	move	a1,v0
80034e00:	00603025 	move	a2,v1
80034e04:	3c018005 	lui	at,0x8005
80034e08:	2424a000 	addiu	a0,at,-24576
80034e0c:	0c0093b1 	jal	80024ec4 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h247250169fbc7b0aE>
80034e10:	00000000 	nop
80034e14:	8fbf001c 	lw	ra,28(sp)
80034e18:	27bd0020 	addiu	sp,sp,32
80034e1c:	03e00008 	jr	ra
80034e20:	00000000 	nop

80034e24 <_ZN67_$LT$mos_6502..print..STDOUT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f561a1cd0d5888aE>:
            fn deref(&self) -> &$T {
80034e24:	27bdffe0 	addiu	sp,sp,-32
80034e28:	afbf001c 	sw	ra,28(sp)
80034e2c:	afa40014 	sw	a0,20(sp)
80034e30:	3c018105 	lui	at,0x8105
80034e34:	2424b040 	addiu	a0,at,-20416
80034e38:	afa40018 	sw	a0,24(sp)
80034e3c:	0c009c86 	jal	80027218 <_ZN4spin4once13Once$LT$T$GT$9call_once17h89d692836bb1bde3E>
80034e40:	00000000 	nop
            }
80034e44:	8fbf001c 	lw	ra,28(sp)
80034e48:	27bd0020 	addiu	sp,sp,32
80034e4c:	03e00008 	jr	ra
80034e50:	00000000 	nop

80034e54 <_ZN66_$LT$mos_6502..proc..EnvStatus$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd4d1600a4ff7132eE>:
#[derive(PartialEq)]
80034e54:	27bdfff0 	addiu	sp,sp,-16
80034e58:	afa40000 	sw	a0,0(sp)
80034e5c:	afa50004 	sw	a1,4(sp)
80034e60:	8c810000 	lw	at,0(a0)
80034e64:	afa10008 	sw	at,8(sp)
80034e68:	8ca20000 	lw	v0,0(a1)
80034e6c:	afa2000c 	sw	v0,12(sp)
80034e70:	00220826 	xor	at,at,v0
80034e74:	2c220001 	sltiu	v0,at,1
80034e78:	27bd0010 	addiu	sp,sp,16
80034e7c:	03e00008 	jr	ra
80034e80:	00000000 	nop

80034e84 <_ZN68_$LT$mos_6502..proc..ENV_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h793af4a9cb061149E>:
            fn deref(&self) -> &$T {
80034e84:	27bdffe0 	addiu	sp,sp,-32
80034e88:	afbf001c 	sw	ra,28(sp)
80034e8c:	afa40014 	sw	a0,20(sp)
80034e90:	3c018105 	lui	at,0x8105
80034e94:	2424b048 	addiu	a0,at,-20408
80034e98:	afa40018 	sw	a0,24(sp)
80034e9c:	0c009a4e 	jal	80026938 <_ZN4spin4once13Once$LT$T$GT$9call_once17h339d9108e2beff77E>
80034ea0:	00000000 	nop
            }
80034ea4:	8fbf001c 	lw	ra,28(sp)
80034ea8:	27bd0020 	addiu	sp,sp,32
80034eac:	03e00008 	jr	ra
80034eb0:	00000000 	nop

80034eb4 <_ZN67_$LT$mos_6502..proc..CUR_ENV$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3b29f22545b34f17E>:
            fn deref(&self) -> &$T {
80034eb4:	27bdffe0 	addiu	sp,sp,-32
80034eb8:	afbf001c 	sw	ra,28(sp)
80034ebc:	afa40014 	sw	a0,20(sp)
80034ec0:	3c018105 	lui	at,0x8105
80034ec4:	2424b060 	addiu	a0,at,-20384
80034ec8:	afa40018 	sw	a0,24(sp)
80034ecc:	0c009bf7 	jal	80026fdc <_ZN4spin4once13Once$LT$T$GT$9call_once17h68c4bc128e61e204E>
80034ed0:	00000000 	nop
            }
80034ed4:	8fbf001c 	lw	ra,28(sp)
80034ed8:	27bd0020 	addiu	sp,sp,32
80034edc:	03e00008 	jr	ra
80034ee0:	00000000 	nop

80034ee4 <_ZN73_$LT$mos_6502..proc..ENV_FREE_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h815af74f94b7a4d1E>:
            fn deref(&self) -> &$T {
80034ee4:	27bdffe0 	addiu	sp,sp,-32
80034ee8:	afbf001c 	sw	ra,28(sp)
80034eec:	afa40014 	sw	a0,20(sp)
80034ef0:	3c018105 	lui	at,0x8105
80034ef4:	2424b074 	addiu	a0,at,-20364
80034ef8:	afa40018 	sw	a0,24(sp)
80034efc:	0c0098a2 	jal	80026288 <_ZN4spin4once13Once$LT$T$GT$9call_once17h2be03b50f406f1fdE>
80034f00:	00000000 	nop
            }
80034f04:	8fbf001c 	lw	ra,28(sp)
80034f08:	27bd0020 	addiu	sp,sp,32
80034f0c:	03e00008 	jr	ra
80034f10:	00000000 	nop

80034f14 <_ZN74_$LT$mos_6502..proc..ENV_SCHED_LIST$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0db1b016a4f27e1fE>:
            fn deref(&self) -> &$T {
80034f14:	27bdffe0 	addiu	sp,sp,-32
80034f18:	afbf001c 	sw	ra,28(sp)
80034f1c:	afa40014 	sw	a0,20(sp)
80034f20:	3c018105 	lui	at,0x8105
80034f24:	2424b088 	addiu	a0,at,-20344
80034f28:	afa40018 	sw	a0,24(sp)
80034f2c:	0c009adf 	jal	80026b7c <_ZN4spin4once13Once$LT$T$GT$9call_once17h39716770cb989dafE>
80034f30:	00000000 	nop
            }
80034f34:	8fbf001c 	lw	ra,28(sp)
80034f38:	27bd0020 	addiu	sp,sp,32
80034f3c:	03e00008 	jr	ra
80034f40:	00000000 	nop

80034f44 <_ZN71_$LT$mos_6502..proc..ASID_BITMAP$u20$as$u20$core..ops..deref..Deref$GT$5deref17h6499748a96406b76E>:
            fn deref(&self) -> &$T {
80034f44:	27bdffe0 	addiu	sp,sp,-32
80034f48:	afbf001c 	sw	ra,28(sp)
80034f4c:	afa40014 	sw	a0,20(sp)
80034f50:	3c018105 	lui	at,0x8105
80034f54:	2424b09c 	addiu	a0,at,-20324
80034f58:	afa40018 	sw	a0,24(sp)
80034f5c:	0c009d8d 	jal	80027634 <_ZN4spin4once13Once$LT$T$GT$9call_once17hba3edf05fe18c9bbE>
80034f60:	00000000 	nop
            }
80034f64:	8fbf001c 	lw	ra,28(sp)
80034f68:	27bd0020 	addiu	sp,sp,32
80034f6c:	03e00008 	jr	ra
80034f70:	00000000 	nop

80034f74 <_ZN77_$LT$mos_6502..proc..NEXT_ALLOC_ENV_ID$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8d74252fce6a3866E>:
            fn deref(&self) -> &$T {
80034f74:	27bdffe0 	addiu	sp,sp,-32
80034f78:	afbf001c 	sw	ra,28(sp)
80034f7c:	afa40014 	sw	a0,20(sp)
80034f80:	3c018105 	lui	at,0x8105
80034f84:	2424b0ac 	addiu	a0,at,-20308
80034f88:	afa40018 	sw	a0,24(sp)
80034f8c:	0c009b71 	jal	80026dc4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h3ff08e92182fc9fdE>
80034f90:	00000000 	nop
            }
80034f94:	8fbf001c 	lw	ra,28(sp)
80034f98:	27bd0020 	addiu	sp,sp,32
80034f9c:	03e00008 	jr	ra
80034fa0:	00000000 	nop

80034fa4 <_ZN71_$LT$mos_6502..proc..PRE_PGTABLE$u20$as$u20$core..ops..deref..Deref$GT$5deref17h05b2e27cdcbf19dbE>:
            fn deref(&self) -> &$T {
80034fa4:	27bdffe0 	addiu	sp,sp,-32
80034fa8:	afbf001c 	sw	ra,28(sp)
80034fac:	afa40014 	sw	a0,20(sp)
80034fb0:	3c018105 	lui	at,0x8105
80034fb4:	2424b0bc 	addiu	a0,at,-20292
80034fb8:	afa40018 	sw	a0,24(sp)
80034fbc:	0c009934 	jal	800264d0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h327844d4de27f3a8E>
80034fc0:	00000000 	nop
            }
80034fc4:	8fbf001c 	lw	ra,28(sp)
80034fc8:	27bd0020 	addiu	sp,sp,32
80034fcc:	03e00008 	jr	ra
80034fd0:	00000000 	nop

80034fd4 <__rust_alloc_error_handler>:
80034fd4:	27bdffe8 	addiu	sp,sp,-24
80034fd8:	afbf0014 	sw	ra,20(sp)
80034fdc:	0c00e355 	jal	80038d54 <__rdl_oom>
80034fe0:	00000000 	nop
80034fe4:	8fbf0014 	lw	ra,20(sp)
80034fe8:	27bd0018 	addiu	sp,sp,24
80034fec:	03e00008 	jr	ra
80034ff0:	00000000 	nop

80034ff4 <memcpy>:
80034ff4:	00a41826 	xor	v1,a1,a0
80034ff8:	00801025 	move	v0,a0
80034ffc:	30640003 	andi	a0,v1,0x3
80035000:	00465821 	addu	t3,v0,a2
80035004:	00a01825 	move	v1,a1
80035008:	1480003f 	bnez	a0,80035108 <memcpy+0x114>
8003500c:	00403825 	move	a3,v0
80035010:	30430003 	andi	v1,v0,0x3
80035014:	10600075 	beqz	v1,800351ec <memcpy+0x1f8>
80035018:	004b202b 	sltu	a0,v0,t3
8003501c:	14800005 	bnez	a0,80035034 <memcpy+0x40>
80035020:	00401825 	move	v1,v0
80035024:	10000056 	b	80035180 <memcpy+0x18c>
80035028:	246c0004 	addiu	t4,v1,4
8003502c:	11630054 	beq	t3,v1,80035180 <memcpy+0x18c>
80035030:	246c0004 	addiu	t4,v1,4
80035034:	80a70000 	lb	a3,0(a1)
80035038:	24630001 	addiu	v1,v1,1
8003503c:	30660003 	andi	a2,v1,0x3
80035040:	24a50001 	addiu	a1,a1,1
80035044:	14c0fff9 	bnez	a2,8003502c <memcpy+0x38>
80035048:	a067ffff 	sb	a3,-1(v1)
8003504c:	246c0004 	addiu	t4,v1,4
80035050:	016c202b 	sltu	a0,t3,t4
80035054:	14800019 	bnez	a0,800350bc <memcpy+0xc8>
80035058:	006b202b 	sltu	a0,v1,t3
8003505c:	01803825 	move	a3,t4
80035060:	00a03025 	move	a2,a1
80035064:	8cca0000 	lw	t2,0(a2)
80035068:	00604825 	move	t1,v1
8003506c:	00e01825 	move	v1,a3
80035070:	24e70004 	addiu	a3,a3,4
80035074:	0167402b 	sltu	t0,t3,a3
80035078:	ad2a0000 	sw	t2,0(t1)
8003507c:	1100fff9 	beqz	t0,80035064 <memcpy+0x70>
80035080:	24c60004 	addiu	a2,a2,4
80035084:	016c1823 	subu	v1,t3,t4
80035088:	00031882 	srl	v1,v1,0x2
8003508c:	25870001 	addiu	a3,t4,1
80035090:	24660001 	addiu	a2,v1,1
80035094:	25640001 	addiu	a0,t3,1
80035098:	0087202b 	sltu	a0,a0,a3
8003509c:	00031880 	sll	v1,v1,0x2
800350a0:	00063080 	sll	a2,a2,0x2
800350a4:	24070004 	li	a3,4
800350a8:	0004180b 	movn	v1,zero,a0
800350ac:	00e4300b 	movn	a2,a3,a0
800350b0:	01831821 	addu	v1,t4,v1
800350b4:	00a62821 	addu	a1,a1,a2
800350b8:	006b202b 	sltu	a0,v1,t3
800350bc:	1080002e 	beqz	a0,80035178 <memcpy+0x184>
800350c0:	24640001 	addiu	a0,v1,1
800350c4:	80a60000 	lb	a2,0(a1)
800350c8:	008b202b 	sltu	a0,a0,t3
800350cc:	1080002a 	beqz	a0,80035178 <memcpy+0x184>
800350d0:	a0660000 	sb	a2,0(v1)
800350d4:	80a60001 	lb	a2,1(a1)
800350d8:	24640002 	addiu	a0,v1,2
800350dc:	008b202b 	sltu	a0,a0,t3
800350e0:	10800025 	beqz	a0,80035178 <memcpy+0x184>
800350e4:	a0660001 	sb	a2,1(v1)
800350e8:	80a60002 	lb	a2,2(a1)
800350ec:	24640003 	addiu	a0,v1,3
800350f0:	008b582b 	sltu	t3,a0,t3
800350f4:	11600020 	beqz	t3,80035178 <memcpy+0x184>
800350f8:	a0660002 	sb	a2,2(v1)
800350fc:	80a40003 	lb	a0,3(a1)
80035100:	03e00008 	jr	ra
80035104:	a0640003 	sb	a0,3(v1)
80035108:	004b202b 	sltu	a0,v0,t3
8003510c:	1080001a 	beqz	a0,80035178 <memcpy+0x184>
80035110:	24a80001 	addiu	t0,a1,1
80035114:	00a22025 	or	a0,a1,v0
80035118:	00484823 	subu	t1,v0,t0
8003511c:	30840003 	andi	a0,a0,0x3
80035120:	2d290003 	sltiu	t1,t1,3
80035124:	2c840001 	sltiu	a0,a0,1
80035128:	39290001 	xori	t1,t1,0x1
8003512c:	00892024 	and	a0,a0,t1
80035130:	10800025 	beqz	a0,800351c8 <memcpy+0x1d4>
80035134:	24c4ffff 	addiu	a0,a2,-1
80035138:	2c840009 	sltiu	a0,a0,9
8003513c:	54800025 	bnezl	a0,800351d4 <memcpy+0x1e0>
80035140:	00401825 	move	v1,v0
80035144:	00064082 	srl	t0,a2,0x2
80035148:	00084080 	sll	t0,t0,0x2
8003514c:	01054021 	addu	t0,t0,a1
80035150:	8c640000 	lw	a0,0(v1)
80035154:	24630004 	addiu	v1,v1,4
80035158:	ace40000 	sw	a0,0(a3)
8003515c:	1468fffc 	bne	v1,t0,80035150 <memcpy+0x15c>
80035160:	24e70004 	addiu	a3,a3,4
80035164:	2403fffc 	li	v1,-4
80035168:	00c31824 	and	v1,a2,v1
8003516c:	00432021 	addu	a0,v0,v1
80035170:	14c30008 	bne	a2,v1,80035194 <memcpy+0x1a0>
80035174:	00a32821 	addu	a1,a1,v1
80035178:	03e00008 	jr	ra
8003517c:	00000000 	nop
80035180:	016c202b 	sltu	a0,t3,t4
80035184:	1080ffb6 	beqz	a0,80035060 <memcpy+0x6c>
80035188:	01803825 	move	a3,t4
8003518c:	03e00008 	jr	ra
80035190:	00000000 	nop
80035194:	80a60000 	lb	a2,0(a1)
80035198:	24830001 	addiu	v1,a0,1
8003519c:	006b182b 	sltu	v1,v1,t3
800351a0:	1060fff5 	beqz	v1,80035178 <memcpy+0x184>
800351a4:	a0860000 	sb	a2,0(a0)
800351a8:	80a60001 	lb	a2,1(a1)
800351ac:	24830002 	addiu	v1,a0,2
800351b0:	006b582b 	sltu	t3,v1,t3
800351b4:	1160fff0 	beqz	t3,80035178 <memcpy+0x184>
800351b8:	a0860001 	sb	a2,1(a0)
800351bc:	80a30002 	lb	v1,2(a1)
800351c0:	03e00008 	jr	ra
800351c4:	a0830002 	sb	v1,2(a0)
800351c8:	10000002 	b	800351d4 <memcpy+0x1e0>
800351cc:	00401825 	move	v1,v0
800351d0:	25080001 	addiu	t0,t0,1
800351d4:	8104ffff 	lb	a0,-1(t0)
800351d8:	24630001 	addiu	v1,v1,1
800351dc:	1563fffc 	bne	t3,v1,800351d0 <memcpy+0x1dc>
800351e0:	a064ffff 	sb	a0,-1(v1)
800351e4:	03e00008 	jr	ra
800351e8:	00000000 	nop
800351ec:	1000ff97 	b	8003504c <memcpy+0x58>
800351f0:	00401825 	move	v1,v0

800351f4 <memset>:
800351f4:	30aa00ff 	andi	t2,a1,0xff
800351f8:	000a3c00 	sll	a3,t2,0x10
800351fc:	000a1a00 	sll	v1,t2,0x8
80035200:	00671825 	or	v1,v1,a3
80035204:	00801025 	move	v0,a0
80035208:	006a1825 	or	v1,v1,t2
8003520c:	30840003 	andi	a0,a0,0x3
80035210:	000a5600 	sll	t2,t2,0x18
80035214:	00463021 	addu	a2,v0,a2
80035218:	30a700ff 	andi	a3,a1,0xff
8003521c:	10800035 	beqz	a0,800352f4 <memset+0x100>
80035220:	006a5025 	or	t2,v1,t2
80035224:	0046182b 	sltu	v1,v0,a2
80035228:	1060002c 	beqz	v1,800352dc <memset+0xe8>
8003522c:	00401825 	move	v1,v0
80035230:	10000004 	b	80035244 <memset+0x50>
80035234:	24630001 	addiu	v1,v1,1
80035238:	10c30029 	beq	a2,v1,800352e0 <memset+0xec>
8003523c:	246b0004 	addiu	t3,v1,4
80035240:	24630001 	addiu	v1,v1,1
80035244:	30650003 	andi	a1,v1,0x3
80035248:	14a0fffb 	bnez	a1,80035238 <memset+0x44>
8003524c:	a067ffff 	sb	a3,-1(v1)
80035250:	246b0004 	addiu	t3,v1,4
80035254:	00cb202b 	sltu	a0,a2,t3
80035258:	14800011 	bnez	a0,800352a0 <memset+0xac>
8003525c:	0066202b 	sltu	a0,v1,a2
80035260:	01602825 	move	a1,t3
80035264:	00604825 	move	t1,v1
80035268:	00a01825 	move	v1,a1
8003526c:	24a50004 	addiu	a1,a1,4
80035270:	00c5402b 	sltu	t0,a2,a1
80035274:	1100fffb 	beqz	t0,80035264 <memset+0x70>
80035278:	ad2a0000 	sw	t2,0(t1)
8003527c:	00cb1823 	subu	v1,a2,t3
80035280:	00031882 	srl	v1,v1,0x2
80035284:	24c50001 	addiu	a1,a2,1
80035288:	25640001 	addiu	a0,t3,1
8003528c:	00031880 	sll	v1,v1,0x2
80035290:	00a4282b 	sltu	a1,a1,a0
80035294:	0005180b 	movn	v1,zero,a1
80035298:	01631821 	addu	v1,t3,v1
8003529c:	0066202b 	sltu	a0,v1,a2
800352a0:	10800012 	beqz	a0,800352ec <memset+0xf8>
800352a4:	24640001 	addiu	a0,v1,1
800352a8:	0086202b 	sltu	a0,a0,a2
800352ac:	1080000f 	beqz	a0,800352ec <memset+0xf8>
800352b0:	a0670000 	sb	a3,0(v1)
800352b4:	24640002 	addiu	a0,v1,2
800352b8:	0086202b 	sltu	a0,a0,a2
800352bc:	1080000b 	beqz	a0,800352ec <memset+0xf8>
800352c0:	a0670001 	sb	a3,1(v1)
800352c4:	24640003 	addiu	a0,v1,3
800352c8:	0086302b 	sltu	a2,a0,a2
800352cc:	10c00007 	beqz	a2,800352ec <memset+0xf8>
800352d0:	a0670002 	sb	a3,2(v1)
800352d4:	03e00008 	jr	ra
800352d8:	a0670003 	sb	a3,3(v1)
800352dc:	246b0004 	addiu	t3,v1,4
800352e0:	00cb202b 	sltu	a0,a2,t3
800352e4:	1080ffdf 	beqz	a0,80035264 <memset+0x70>
800352e8:	01602825 	move	a1,t3
800352ec:	03e00008 	jr	ra
800352f0:	00000000 	nop
800352f4:	1000ffd6 	b	80035250 <memset+0x5c>
800352f8:	00401825 	move	v1,v0

800352fc <_ZN4core3ptr4read17h89a81d997b243ea1E>:
pub const unsafe fn read<T>(src: *const T) -> T {
800352fc:	27bdffd8 	addiu	sp,sp,-40
80035300:	afbf0024 	sw	ra,36(sp)
80035304:	afa50014 	sw	a1,20(sp)
80035308:	afa40018 	sw	a0,24(sp)
8003530c:	afa4001c 	sw	a0,28(sp)
80035310:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80035314:	0c00d4fb 	jal	800353ec <_ZN4core9ub_checks17check_language_ub17he72e217001181654E>
80035318:	00000000 	nop
8003531c:	1440001a 	bnez	v0,80035388 <_ZN4core3ptr4read17h89a81d997b243ea1E+0x8c>
80035320:	00000000 	nop
80035324:	0800d4cb 	j	8003532c <_ZN4core3ptr4read17h89a81d997b243ea1E+0x30>
80035328:	00000000 	nop
8003532c:	8fa2001c 	lw	v0,28(sp)
80035330:	8fa30018 	lw	v1,24(sp)
80035334:	8fa70014 	lw	a3,20(sp)
        crate::intrinsics::read_via_copy(src)
80035338:	88e6000f 	lwl	a2,15(a3)
8003533c:	98e6000c 	lwr	a2,12(a3)
80035340:	a866000f 	swl	a2,15(v1)
80035344:	88e5000b 	lwl	a1,11(a3)
80035348:	98e50008 	lwr	a1,8(a3)
8003534c:	a865000b 	swl	a1,11(v1)
80035350:	88e40007 	lwl	a0,7(a3)
80035354:	98e40004 	lwr	a0,4(a3)
80035358:	a8640007 	swl	a0,7(v1)
8003535c:	88e10003 	lwl	at,3(a3)
80035360:	98e10000 	lwr	at,0(a3)
80035364:	a8610003 	swl	at,3(v1)
80035368:	b866000c 	swr	a2,12(v1)
8003536c:	b8650008 	swr	a1,8(v1)
80035370:	b8640004 	swr	a0,4(v1)
80035374:	b8610000 	swr	at,0(v1)
}
80035378:	8fbf0024 	lw	ra,36(sp)
8003537c:	27bd0028 	addiu	sp,sp,40
80035380:	03e00008 	jr	ra
80035384:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80035388:	8fa40014 	lw	a0,20(sp)
8003538c:	24050001 	li	a1,1
80035390:	0c00d4e8 	jal	800353a0 <_ZN4core3ptr4read18precondition_check17h0185d8ec93224476E>
80035394:	00000000 	nop
80035398:	0800d4cb 	j	8003532c <_ZN4core3ptr4read17h89a81d997b243ea1E+0x30>
8003539c:	00000000 	nop

800353a0 <_ZN4core3ptr4read18precondition_check17h0185d8ec93224476E>:
            const fn precondition_check($($name:$ty),*) {
800353a0:	27bdffe0 	addiu	sp,sp,-32
800353a4:	afbf001c 	sw	ra,28(sp)
800353a8:	afa40014 	sw	a0,20(sp)
800353ac:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
800353b0:	0c00d50d 	jal	80035434 <_ZN4core9ub_checks23is_aligned_and_not_null17ha649c18beaafd555E>
800353b4:	00000000 	nop
800353b8:	14400008 	bnez	v0,800353dc <_ZN4core3ptr4read18precondition_check17h0185d8ec93224476E+0x3c>
800353bc:	00000000 	nop
800353c0:	0800d4f2 	j	800353c8 <_ZN4core3ptr4read18precondition_check17h0185d8ec93224476E+0x28>
800353c4:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800353c8:	3c018108 	lui	at,0x8108
800353cc:	2424a2fc 	addiu	a0,at,-23812
800353d0:	24050065 	li	a1,101
800353d4:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800353d8:	00000000 	nop
            }
800353dc:	8fbf001c 	lw	ra,28(sp)
800353e0:	27bd0020 	addiu	sp,sp,32
800353e4:	03e00008 	jr	ra
800353e8:	00000000 	nop

800353ec <_ZN4core9ub_checks17check_language_ub17he72e217001181654E>:
pub(crate) const fn check_language_ub() -> bool {
800353ec:	27bdffe8 	addiu	sp,sp,-24
800353f0:	afbf0014 	sw	ra,20(sp)
    intrinsics::ub_checks() && const_eval_select((), comptime, runtime)
800353f4:	0800d4ff 	j	800353fc <_ZN4core9ub_checks17check_language_ub17he72e217001181654E+0x10>
800353f8:	00000000 	nop
800353fc:	0c00d50a 	jal	80035428 <_ZN4core9ub_checks17check_language_ub7runtime17he325ce83748d3a74E>
80035400:	00000000 	nop
80035404:	a3a20013 	sb	v0,19(sp)
80035408:	0800d504 	j	80035410 <_ZN4core9ub_checks17check_language_ub17he72e217001181654E+0x24>
8003540c:	00000000 	nop
}
80035410:	93a10013 	lbu	at,19(sp)
80035414:	30220001 	andi	v0,at,0x1
80035418:	8fbf0014 	lw	ra,20(sp)
8003541c:	27bd0018 	addiu	sp,sp,24
80035420:	03e00008 	jr	ra
80035424:	00000000 	nop

80035428 <_ZN4core9ub_checks17check_language_ub7runtime17he325ce83748d3a74E>:
    fn runtime() -> bool {
80035428:	24020001 	li	v0,1
    }
8003542c:	03e00008 	jr	ra
80035430:	00000000 	nop

80035434 <_ZN4core9ub_checks23is_aligned_and_not_null17ha649c18beaafd555E>:
pub(crate) const fn is_aligned_and_not_null(ptr: *const (), align: usize) -> bool {
80035434:	27bdffd8 	addiu	sp,sp,-40
80035438:	afbf0024 	sw	ra,36(sp)
8003543c:	afa50010 	sw	a1,16(sp)
80035440:	afa40014 	sw	a0,20(sp)
80035444:	afa4001c 	sw	a0,28(sp)
80035448:	afa50020 	sw	a1,32(sp)
    !ptr.is_null() && ptr.is_aligned_to(align)
8003544c:	0c00e5c5 	jal	80039714 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h7332b93c4f97f066E>
80035450:	00000000 	nop
80035454:	1440000a 	bnez	v0,80035480 <_ZN4core9ub_checks23is_aligned_and_not_null17ha649c18beaafd555E+0x4c>
80035458:	00000000 	nop
8003545c:	0800d519 	j	80035464 <_ZN4core9ub_checks23is_aligned_and_not_null17ha649c18beaafd555E+0x30>
80035460:	00000000 	nop
80035464:	8fa50010 	lw	a1,16(sp)
80035468:	8fa40014 	lw	a0,20(sp)
8003546c:	0c00e61b 	jal	8003986c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to17hb855d440ce971e64E>
80035470:	00000000 	nop
80035474:	a3a2001b 	sb	v0,27(sp)
80035478:	0800d524 	j	80035490 <_ZN4core9ub_checks23is_aligned_and_not_null17ha649c18beaafd555E+0x5c>
8003547c:	00000000 	nop
80035480:	24010000 	li	at,0
80035484:	a3a0001b 	sb	zero,27(sp)
80035488:	0800d524 	j	80035490 <_ZN4core9ub_checks23is_aligned_and_not_null17ha649c18beaafd555E+0x5c>
8003548c:	00000000 	nop
}
80035490:	93a1001b 	lbu	at,27(sp)
80035494:	30220001 	andi	v0,at,0x1
80035498:	8fbf0024 	lw	ra,36(sp)
8003549c:	27bd0028 	addiu	sp,sp,40
800354a0:	03e00008 	jr	ra
800354a4:	00000000 	nop

800354a8 <_ZN3elf8ElfIdent8try_load17h26e2e1735a220c10E>:
    pub fn try_load(data: &[u8]) -> Result<ElfIdent, &'static str> {
800354a8:	27bdffb8 	addiu	sp,sp,-72
800354ac:	afbf0044 	sw	ra,68(sp)
800354b0:	afa60014 	sw	a2,20(sp)
800354b4:	afa50018 	sw	a1,24(sp)
800354b8:	afa4001c 	sw	a0,28(sp)
800354bc:	afa40020 	sw	a0,32(sp)
800354c0:	afa50034 	sw	a1,52(sp)
800354c4:	afa60038 	sw	a2,56(sp)
        if data.len() < core::mem::size_of::<ElfIdent>() {
800354c8:	2cc10010 	sltiu	at,a2,16
800354cc:	1420001f 	bnez	at,8003554c <_ZN3elf8ElfIdent8try_load17h26e2e1735a220c10E+0xa4>
800354d0:	00000000 	nop
800354d4:	0800d537 	j	800354dc <_ZN3elf8ElfIdent8try_load17h26e2e1735a220c10E+0x34>
800354d8:	00000000 	nop
800354dc:	8fa50018 	lw	a1,24(sp)
800354e0:	8fa10014 	lw	at,20(sp)
800354e4:	afa5003c 	sw	a1,60(sp)
800354e8:	afa10040 	sw	at,64(sp)
800354ec:	27a40024 	addiu	a0,sp,36
        let pre_header = unsafe { core::ptr::read(data.as_ptr() as *const ElfIdent) };
800354f0:	0c00d4bf 	jal	800352fc <_ZN4core3ptr4read17h89a81d997b243ea1E>
800354f4:	00000000 	nop
800354f8:	8fa1001c 	lw	at,28(sp)
        Ok(pre_header)
800354fc:	8ba50033 	lwl	a1,51(sp)
80035500:	9ba50030 	lwr	a1,48(sp)
80035504:	a8250010 	swl	a1,16(at)
80035508:	8ba4002f 	lwl	a0,47(sp)
8003550c:	9ba4002c 	lwr	a0,44(sp)
80035510:	a824000c 	swl	a0,12(at)
80035514:	8ba3002b 	lwl	v1,43(sp)
80035518:	9ba30028 	lwr	v1,40(sp)
8003551c:	a8230008 	swl	v1,8(at)
80035520:	8ba20027 	lwl	v0,39(sp)
80035524:	9ba20024 	lwr	v0,36(sp)
80035528:	a8220004 	swl	v0,4(at)
8003552c:	b825000d 	swr	a1,13(at)
80035530:	b8240009 	swr	a0,9(at)
80035534:	b8230005 	swr	v1,5(at)
80035538:	b8220001 	swr	v0,1(at)
8003553c:	24020000 	li	v0,0
80035540:	a0200000 	sb	zero,0(at)
    }
80035544:	0800d55d 	j	80035574 <_ZN3elf8ElfIdent8try_load17h26e2e1735a220c10E+0xcc>
80035548:	00000000 	nop
            return Err("data is too short");
8003554c:	8fa2001c 	lw	v0,28(sp)
80035550:	3c018108 	lui	at,0x8108
80035554:	2421a361 	addiu	at,at,-23711
80035558:	ac410004 	sw	at,4(v0)
8003555c:	24010011 	li	at,17
80035560:	ac410008 	sw	at,8(v0)
80035564:	24010001 	li	at,1
80035568:	a0410000 	sb	at,0(v0)
    }
8003556c:	0800d55d 	j	80035574 <_ZN3elf8ElfIdent8try_load17h26e2e1735a220c10E+0xcc>
80035570:	00000000 	nop
80035574:	8fa20020 	lw	v0,32(sp)
80035578:	8fbf0044 	lw	ra,68(sp)
8003557c:	27bd0048 	addiu	sp,sp,72
80035580:	03e00008 	jr	ra
80035584:	00000000 	nop

80035588 <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$22get_program_header_num17h655ffc9dec1f862aE>:
    fn get_program_header_num(&self) -> usize {
80035588:	27bdfff8 	addiu	sp,sp,-8
8003558c:	afa40004 	sw	a0,4(sp)
        self.e_phnum as usize
80035590:	9482002c 	lhu	v0,44(a0)
80035594:	27bd0008 	addiu	sp,sp,8
    }
80035598:	03e00008 	jr	ra
8003559c:	00000000 	nop

800355a0 <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$22get_section_header_num17h31b4e27a28efd244E>:
    fn get_section_header_num(&self) -> usize {
800355a0:	27bdfff8 	addiu	sp,sp,-8
800355a4:	afa40004 	sw	a0,4(sp)
        self.e_shnum as usize
800355a8:	94820030 	lhu	v0,48(a0)
800355ac:	27bd0008 	addiu	sp,sp,8
    }
800355b0:	03e00008 	jr	ra
800355b4:	00000000 	nop

800355b8 <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$9get_entry17h0a3ae17a333176ceE>:
    fn get_entry(&self) -> usize {
800355b8:	27bdfff8 	addiu	sp,sp,-8
800355bc:	afa40004 	sw	a0,4(sp)
        self.e_entry as usize
800355c0:	8c820018 	lw	v0,24(a0)
800355c4:	27bd0008 	addiu	sp,sp,8
    }
800355c8:	03e00008 	jr	ra
800355cc:	00000000 	nop

800355d0 <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$25get_program_header_offset17hb8b776a8e763a259E>:
    fn get_program_header_offset(&self) -> usize {
800355d0:	27bdfff8 	addiu	sp,sp,-8
800355d4:	afa40004 	sw	a0,4(sp)
        self.e_phoff as usize
800355d8:	8c82001c 	lw	v0,28(a0)
800355dc:	27bd0008 	addiu	sp,sp,8
    }
800355e0:	03e00008 	jr	ra
800355e4:	00000000 	nop

800355e8 <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$23get_program_header_size17hf87f1bdfce3985beE>:
    fn get_program_header_size(&self) -> usize {
800355e8:	27bdfff8 	addiu	sp,sp,-8
800355ec:	afa40004 	sw	a0,4(sp)
800355f0:	24020020 	li	v0,32
800355f4:	27bd0008 	addiu	sp,sp,8
    }
800355f8:	03e00008 	jr	ra
800355fc:	00000000 	nop

80035600 <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$25get_section_header_offset17h39389eaad83ec33fE>:
    fn get_section_header_offset(&self) -> usize {
80035600:	27bdfff8 	addiu	sp,sp,-8
80035604:	afa40004 	sw	a0,4(sp)
        self.e_shoff as usize
80035608:	8c820020 	lw	v0,32(a0)
8003560c:	27bd0008 	addiu	sp,sp,8
    }
80035610:	03e00008 	jr	ra
80035614:	00000000 	nop

80035618 <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$23get_section_header_size17h8a38ee3417ea7f58E>:
    fn get_section_header_size(&self) -> usize {
80035618:	27bdfff8 	addiu	sp,sp,-8
8003561c:	afa40004 	sw	a0,4(sp)
80035620:	24020028 	li	v0,40
80035624:	27bd0008 	addiu	sp,sp,8
    }
80035628:	03e00008 	jr	ra
8003562c:	00000000 	nop

80035630 <_ZN51_$LT$elf..ElfHeader32$u20$as$u20$elf..ElfHeader$GT$18get_elf_pre_header17hb0ad52d27cd275c3E>:
    fn get_elf_pre_header(&self) -> &ElfIdent {
80035630:	27bdfff8 	addiu	sp,sp,-8
80035634:	00801025 	move	v0,a0
80035638:	afa20004 	sw	v0,4(sp)
8003563c:	27bd0008 	addiu	sp,sp,8
    }
80035640:	03e00008 	jr	ra
80035644:	00000000 	nop

80035648 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$8get_type17h9b03f961e4fd3778E>:
    fn get_type(&self) -> u32 {
80035648:	27bdfff8 	addiu	sp,sp,-8
8003564c:	afa40004 	sw	a0,4(sp)
        self.p_type
80035650:	8c820000 	lw	v0,0(a0)
80035654:	27bd0008 	addiu	sp,sp,8
    }
80035658:	03e00008 	jr	ra
8003565c:	00000000 	nop

80035660 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$10get_offset17h45a757a961e3a8d3E>:
    fn get_offset(&self) -> usize {
80035660:	27bdfff8 	addiu	sp,sp,-8
80035664:	afa40004 	sw	a0,4(sp)
        self.p_offset as usize
80035668:	8c820004 	lw	v0,4(a0)
8003566c:	27bd0008 	addiu	sp,sp,8
    }
80035670:	03e00008 	jr	ra
80035674:	00000000 	nop

80035678 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$9get_vaddr17hc5412ead21e5bcdeE>:
    fn get_vaddr(&self) -> usize {
80035678:	27bdfff8 	addiu	sp,sp,-8
8003567c:	afa40004 	sw	a0,4(sp)
        self.p_vaddr as usize
80035680:	8c820008 	lw	v0,8(a0)
80035684:	27bd0008 	addiu	sp,sp,8
    }
80035688:	03e00008 	jr	ra
8003568c:	00000000 	nop

80035690 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$10get_filesz17hd60e41e25cbcff0fE>:
    fn get_filesz(&self) -> usize {
80035690:	27bdfff8 	addiu	sp,sp,-8
80035694:	afa40004 	sw	a0,4(sp)
        self.p_filesz as usize
80035698:	8c820010 	lw	v0,16(a0)
8003569c:	27bd0008 	addiu	sp,sp,8
    }
800356a0:	03e00008 	jr	ra
800356a4:	00000000 	nop

800356a8 <_ZN59_$LT$elf..ProgramHeader32$u20$as$u20$elf..ProgramHeader$GT$9get_memsz17hfb2cd24d087e8cc9E>:
    fn get_memsz(&self) -> usize {
800356a8:	27bdfff8 	addiu	sp,sp,-8
800356ac:	afa40004 	sw	a0,4(sp)
        self.p_memsz as usize
800356b0:	8c820014 	lw	v0,20(a0)
800356b4:	27bd0008 	addiu	sp,sp,8
    }
800356b8:	03e00008 	jr	ra
800356bc:	00000000 	nop

800356c0 <_ZN4core3fmt9Arguments9new_const17hd12992beeaf27947E>:
    pub const fn new_const(pieces: &'a [&'static str]) -> Self {
800356c0:	27bdffb0 	addiu	sp,sp,-80
800356c4:	afbf004c 	sw	ra,76(sp)
800356c8:	afa60014 	sw	a2,20(sp)
800356cc:	afa50018 	sw	a1,24(sp)
800356d0:	afa4001c 	sw	a0,28(sp)
800356d4:	afa40020 	sw	a0,32(sp)
800356d8:	afa50044 	sw	a1,68(sp)
800356dc:	afa60048 	sw	a2,72(sp)
        if pieces.len() > 1 {
800356e0:	2cc10002 	sltiu	at,a2,2
800356e4:	10200016 	beqz	at,80035740 <_ZN4core3fmt9Arguments9new_const17hd12992beeaf27947E+0x80>
800356e8:	00000000 	nop
800356ec:	0800d5bd 	j	800356f4 <_ZN4core3fmt9Arguments9new_const17hd12992beeaf27947E+0x34>
800356f0:	00000000 	nop
        Arguments { pieces, fmt: None, args: &[] }
800356f4:	8fa20020 	lw	v0,32(sp)
800356f8:	8fa1001c 	lw	at,28(sp)
800356fc:	8fa30014 	lw	v1,20(sp)
80035700:	8fa40018 	lw	a0,24(sp)
80035704:	afa0003c 	sw	zero,60(sp)
80035708:	ac240000 	sw	a0,0(at)
8003570c:	ac230004 	sw	v1,4(at)
80035710:	8fa4003c 	lw	a0,60(sp)
80035714:	8fa30040 	lw	v1,64(sp)
80035718:	ac240010 	sw	a0,16(at)
8003571c:	ac230014 	sw	v1,20(at)
80035720:	3c038108 	lui	v1,0x8108
80035724:	2463a39c 	addiu	v1,v1,-23652
80035728:	ac230008 	sw	v1,8(at)
8003572c:	ac20000c 	sw	zero,12(at)
    }
80035730:	8fbf004c 	lw	ra,76(sp)
80035734:	27bd0050 	addiu	sp,sp,80
80035738:	03e00008 	jr	ra
8003573c:	00000000 	nop
            panic!("invalid args");
80035740:	3c018108 	lui	at,0x8108
80035744:	2425a3a8 	addiu	a1,at,-23640
80035748:	27a40024 	addiu	a0,sp,36
8003574c:	afa40010 	sw	a0,16(sp)
80035750:	24060001 	li	a2,1
80035754:	0c00d5b0 	jal	800356c0 <_ZN4core3fmt9Arguments9new_const17hd12992beeaf27947E>
80035758:	00000000 	nop
8003575c:	8fa40010 	lw	a0,16(sp)
80035760:	3c018108 	lui	at,0x8108
80035764:	2425a420 	addiu	a1,at,-23520
80035768:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003576c:	00000000 	nop

80035770 <_ZN4core3ptr59drop_in_place$LT$sync..spin..SpinlockGuard$LT$usize$GT$$GT$17hdd6ed9792ea7c554E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80035770:	27bdffe8 	addiu	sp,sp,-24
80035774:	afbf0014 	sw	ra,20(sp)
80035778:	afa40010 	sw	a0,16(sp)
8003577c:	0c00d9a0 	jal	80036680 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb2e885d1cbd6caa1E>
80035780:	00000000 	nop
80035784:	8fbf0014 	lw	ra,20(sp)
80035788:	27bd0018 	addiu	sp,sp,24
8003578c:	03e00008 	jr	ra
80035790:	00000000 	nop

80035794 <_ZN4core3ptr9alignment9Alignment8as_usize17h86f1e2a5fdfbc9c4E>:
    pub const fn as_usize(self) -> usize {
80035794:	27bdfff8 	addiu	sp,sp,-8
80035798:	afa40004 	sw	a0,4(sp)
        self.0 as usize
8003579c:	afa40000 	sw	a0,0(sp)
800357a0:	8fa20000 	lw	v0,0(sp)
800357a4:	27bd0008 	addiu	sp,sp,8
    }
800357a8:	03e00008 	jr	ra
800357ac:	00000000 	nop

800357b0 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h0990b8152150dc4aE>:
    pub fn compare_exchange(
800357b0:	27bdff80 	addiu	sp,sp,-128
800357b4:	afbf007c 	sw	ra,124(sp)
800357b8:	afa4001c 	sw	a0,28(sp)
800357bc:	8fa10090 	lw	at,144(sp)
800357c0:	afa10020 	sw	at,32(sp)
800357c4:	00e01025 	move	v0,a3
800357c8:	afa20024 	sw	v0,36(sp)
800357cc:	00c01025 	move	v0,a2
800357d0:	afa20028 	sw	v0,40(sp)
800357d4:	00a01025 	move	v0,a1
800357d8:	afa2002c 	sw	v0,44(sp)
800357dc:	afa4006c 	sw	a0,108(sp)
800357e0:	a3a50072 	sb	a1,114(sp)
800357e4:	a3a60073 	sb	a2,115(sp)
800357e8:	a3a70074 	sb	a3,116(sp)
800357ec:	a3a10075 	sb	at,117(sp)
        if EMULATE_ATOMIC_BOOL {
800357f0:	0800d5fe 	j	800357f8 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h0990b8152150dc4aE+0x48>
800357f4:	00000000 	nop
800357f8:	8fa70024 	lw	a3,36(sp)
800357fc:	8fa4001c 	lw	a0,28(sp)
80035800:	8fa10028 	lw	at,40(sp)
80035804:	8fa2002c 	lw	v0,44(sp)
80035808:	8fa30020 	lw	v1,32(sp)
8003580c:	afa40078 	sw	a0,120(sp)
                atomic_compare_exchange(self.v.get(), current as u8, new as u8, success, failure)
80035810:	03a02825 	move	a1,sp
80035814:	aca30010 	sw	v1,16(a1)
80035818:	30450001 	andi	a1,v0,0x1
8003581c:	30260001 	andi	a2,at,0x1
80035820:	0c00d67f 	jal	800359fc <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E>
80035824:	00000000 	nop
80035828:	30410001 	andi	at,v0,0x1
8003582c:	a3a1006a 	sb	at,106(sp)
80035830:	a3a3006b 	sb	v1,107(sp)
            match unsafe {
80035834:	93a1006a 	lbu	at,106(sp)
80035838:	30210001 	andi	at,at,0x1
8003583c:	1420000b 	bnez	at,8003586c <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h0990b8152150dc4aE+0xbc>
80035840:	00000000 	nop
80035844:	0800d613 	j	8003584c <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h0990b8152150dc4aE+0x9c>
80035848:	00000000 	nop
                Ok(x) => Ok(x != 0),
8003584c:	93a1006b 	lbu	at,107(sp)
80035850:	a3a10076 	sb	at,118(sp)
80035854:	0001082b 	sltu	at,zero,at
80035858:	a3a10034 	sb	at,52(sp)
8003585c:	24010000 	li	at,0
80035860:	a3a00033 	sb	zero,51(sp)
80035864:	0800d623 	j	8003588c <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h0990b8152150dc4aE+0xdc>
80035868:	00000000 	nop
                Err(x) => Err(x != 0),
8003586c:	93a1006b 	lbu	at,107(sp)
80035870:	a3a10077 	sb	at,119(sp)
80035874:	0001082b 	sltu	at,zero,at
80035878:	a3a10034 	sb	at,52(sp)
8003587c:	24010001 	li	at,1
80035880:	a3a10033 	sb	at,51(sp)
80035884:	0800d623 	j	8003588c <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h0990b8152150dc4aE+0xdc>
80035888:	00000000 	nop
    }
8003588c:	93a20033 	lbu	v0,51(sp)
80035890:	93a30034 	lbu	v1,52(sp)
80035894:	8fbf007c 	lw	ra,124(sp)
80035898:	27bd0080 	addiu	sp,sp,128
8003589c:	03e00008 	jr	ra
800358a0:	00000000 	nop

800358a4 <_ZN4core4sync6atomic10AtomicBool3new17h346c794fd026d51cE>:
    pub const fn new(v: bool) -> AtomicBool {
800358a4:	27bdfff8 	addiu	sp,sp,-8
800358a8:	a3a40005 	sb	a0,5(sp)
800358ac:	a3a40007 	sb	a0,7(sp)
        UnsafeCell { value }
800358b0:	a3a40006 	sb	a0,6(sp)
    }
800358b4:	93a10006 	lbu	at,6(sp)
        AtomicBool { v: UnsafeCell::new(v as u8) }
800358b8:	a3a10004 	sb	at,4(sp)
    }
800358bc:	93a20004 	lbu	v0,4(sp)
800358c0:	27bd0008 	addiu	sp,sp,8
800358c4:	03e00008 	jr	ra
800358c8:	00000000 	nop

800358cc <_ZN4core4sync6atomic10AtomicBool5store17hd0ce91a55a0b2fb8E>:
    pub fn store(&self, val: bool, order: Ordering) {
800358cc:	27bdffe0 	addiu	sp,sp,-32
800358d0:	afbf001c 	sw	ra,28(sp)
800358d4:	afa40010 	sw	a0,16(sp)
800358d8:	a3a50016 	sb	a1,22(sp)
800358dc:	a3a60017 	sb	a2,23(sp)
800358e0:	afa40018 	sw	a0,24(sp)
            atomic_store(self.v.get(), val as u8, order);
800358e4:	0c00d63f 	jal	800358fc <_ZN4core4sync6atomic12atomic_store17h97ba07a2f4ebd6c0E>
800358e8:	00000000 	nop
    }
800358ec:	8fbf001c 	lw	ra,28(sp)
800358f0:	27bd0020 	addiu	sp,sp,32
800358f4:	03e00008 	jr	ra
800358f8:	00000000 	nop

800358fc <_ZN4core4sync6atomic12atomic_store17h97ba07a2f4ebd6c0E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
800358fc:	27bdff98 	addiu	sp,sp,-104
80035900:	afbf0064 	sw	ra,100(sp)
80035904:	afa4001c 	sw	a0,28(sp)
80035908:	00a00825 	move	at,a1
8003590c:	afa10020 	sw	at,32(sp)
80035910:	a3a6002b 	sb	a2,43(sp)
80035914:	afa4005c 	sw	a0,92(sp)
80035918:	a3a50063 	sb	a1,99(sp)
        match order {
8003591c:	93a1002b 	lbu	at,43(sp)
80035920:	afa10024 	sw	at,36(sp)
80035924:	8fa10024 	lw	at,36(sp)
80035928:	00010880 	sll	at,at,0x2
8003592c:	3c028108 	lui	v0,0x8108
80035930:	00220821 	addu	at,at,v0
80035934:	8c21a374 	lw	at,-23692(at)
80035938:	00200008 	jr	at
8003593c:	00000000 	nop
80035940:	0000000d 	break
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
80035944:	8fa10020 	lw	at,32(sp)
80035948:	8fa2001c 	lw	v0,28(sp)
8003594c:	a0410000 	sb	at,0(v0)
80035950:	0800d67b 	j	800359ec <_ZN4core4sync6atomic12atomic_store17h97ba07a2f4ebd6c0E+0xf0>
80035954:	00000000 	nop
            Release => intrinsics::atomic_store_release(dst, val),
80035958:	8fa10020 	lw	at,32(sp)
8003595c:	8fa2001c 	lw	v0,28(sp)
80035960:	0000000f 	sync
80035964:	a0410000 	sb	at,0(v0)
80035968:	0800d67b 	j	800359ec <_ZN4core4sync6atomic12atomic_store17h97ba07a2f4ebd6c0E+0xf0>
8003596c:	00000000 	nop
            Acquire => panic!("there is no such thing as an acquire store"),
80035970:	3c018108 	lui	at,0x8108
80035974:	2425a45c 	addiu	a1,at,-23460
80035978:	27a4002c 	addiu	a0,sp,44
8003597c:	afa40018 	sw	a0,24(sp)
80035980:	24060001 	li	a2,1
80035984:	0c00d5b0 	jal	800356c0 <_ZN4core3fmt9Arguments9new_const17hd12992beeaf27947E>
80035988:	00000000 	nop
8003598c:	8fa40018 	lw	a0,24(sp)
80035990:	3c018108 	lui	at,0x8108
80035994:	2425a4d8 	addiu	a1,at,-23336
80035998:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003599c:	00000000 	nop
            AcqRel => panic!("there is no such thing as an acquire-release store"),
800359a0:	3c018108 	lui	at,0x8108
800359a4:	2425a51c 	addiu	a1,at,-23268
800359a8:	27a40044 	addiu	a0,sp,68
800359ac:	afa40014 	sw	a0,20(sp)
800359b0:	24060001 	li	a2,1
800359b4:	0c00d5b0 	jal	800356c0 <_ZN4core3fmt9Arguments9new_const17hd12992beeaf27947E>
800359b8:	00000000 	nop
800359bc:	8fa40014 	lw	a0,20(sp)
800359c0:	3c018108 	lui	at,0x8108
800359c4:	2425a524 	addiu	a1,at,-23260
800359c8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
800359cc:	00000000 	nop
            SeqCst => intrinsics::atomic_store_seqcst(dst, val),
800359d0:	8fa10020 	lw	at,32(sp)
800359d4:	8fa2001c 	lw	v0,28(sp)
800359d8:	0000000f 	sync
800359dc:	a0410000 	sb	at,0(v0)
800359e0:	0000000f 	sync
800359e4:	0800d67b 	j	800359ec <_ZN4core4sync6atomic12atomic_store17h97ba07a2f4ebd6c0E+0xf0>
800359e8:	00000000 	nop
}
800359ec:	8fbf0064 	lw	ra,100(sp)
800359f0:	27bd0068 	addiu	sp,sp,104
800359f4:	03e00008 	jr	ra
800359f8:	00000000 	nop

800359fc <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E>:
unsafe fn atomic_compare_exchange<T: Copy>(
800359fc:	27bdff38 	addiu	sp,sp,-200
80035a00:	afbf00c4 	sw	ra,196(sp)
80035a04:	afa40070 	sw	a0,112(sp)
80035a08:	8fa100d8 	lw	at,216(sp)
80035a0c:	00c01025 	move	v0,a2
80035a10:	afa20074 	sw	v0,116(sp)
80035a14:	00a01025 	move	v0,a1
80035a18:	afa20078 	sw	v0,120(sp)
80035a1c:	afa400b8 	sw	a0,184(sp)
80035a20:	a3a500be 	sb	a1,190(sp)
80035a24:	a3a600bf 	sb	a2,191(sp)
80035a28:	a3a700c0 	sb	a3,192(sp)
80035a2c:	a3a100c1 	sb	at,193(sp)
        match (success, failure) {
80035a30:	a3a70086 	sb	a3,134(sp)
80035a34:	a3a10087 	sb	at,135(sp)
80035a38:	93a10086 	lbu	at,134(sp)
80035a3c:	afa1007c 	sw	at,124(sp)
80035a40:	8fa1007c 	lw	at,124(sp)
80035a44:	00010880 	sll	at,at,0x2
80035a48:	3c028108 	lui	v0,0x8108
80035a4c:	00220821 	addu	at,at,v0
80035a50:	8c21a388 	lw	at,-23672(at)
80035a54:	00200008 	jr	at
80035a58:	00000000 	nop
80035a5c:	0000000d 	break
80035a60:	93a10087 	lbu	at,135(sp)
80035a64:	afa1006c 	sw	at,108(sp)
80035a68:	1020005d 	beqz	at,80035be0 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x1e4>
80035a6c:	00000000 	nop
80035a70:	0800d69e 	j	80035a78 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x7c>
80035a74:	00000000 	nop
80035a78:	8fa1006c 	lw	at,108(sp)
80035a7c:	24020002 	li	v0,2
80035a80:	1022007a 	beq	at,v0,80035c6c <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x270>
80035a84:	00000000 	nop
80035a88:	0800d6a4 	j	80035a90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x94>
80035a8c:	00000000 	nop
80035a90:	8fa1006c 	lw	at,108(sp)
80035a94:	24020004 	li	v0,4
80035a98:	10220098 	beq	at,v0,80035cfc <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x300>
80035a9c:	00000000 	nop
80035aa0:	0800d6f2 	j	80035bc8 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x1cc>
80035aa4:	00000000 	nop
80035aa8:	93a10087 	lbu	at,135(sp)
80035aac:	afa10068 	sw	at,104(sp)
80035ab0:	102000c1 	beqz	at,80035db8 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x3bc>
80035ab4:	00000000 	nop
80035ab8:	0800d6b0 	j	80035ac0 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0xc4>
80035abc:	00000000 	nop
80035ac0:	8fa10068 	lw	at,104(sp)
80035ac4:	24020002 	li	v0,2
80035ac8:	102200df 	beq	at,v0,80035e48 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x44c>
80035acc:	00000000 	nop
80035ad0:	0800d6b6 	j	80035ad8 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0xdc>
80035ad4:	00000000 	nop
80035ad8:	8fa10068 	lw	at,104(sp)
80035adc:	24020004 	li	v0,4
80035ae0:	102200fe 	beq	at,v0,80035edc <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x4e0>
80035ae4:	00000000 	nop
80035ae8:	0800d6f2 	j	80035bc8 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x1cc>
80035aec:	00000000 	nop
80035af0:	93a10087 	lbu	at,135(sp)
80035af4:	afa10064 	sw	at,100(sp)
80035af8:	1020011d 	beqz	at,80035f70 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x574>
80035afc:	00000000 	nop
80035b00:	0800d6c2 	j	80035b08 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x10c>
80035b04:	00000000 	nop
80035b08:	8fa10064 	lw	at,100(sp)
80035b0c:	24020002 	li	v0,2
80035b10:	1022013b 	beq	at,v0,80036000 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x604>
80035b14:	00000000 	nop
80035b18:	0800d6c8 	j	80035b20 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x124>
80035b1c:	00000000 	nop
80035b20:	8fa10064 	lw	at,100(sp)
80035b24:	24020004 	li	v0,4
80035b28:	10220159 	beq	at,v0,80036090 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x694>
80035b2c:	00000000 	nop
80035b30:	0800d6f2 	j	80035bc8 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x1cc>
80035b34:	00000000 	nop
80035b38:	93a10087 	lbu	at,135(sp)
80035b3c:	afa10060 	sw	at,96(sp)
80035b40:	10200178 	beqz	at,80036124 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x728>
80035b44:	00000000 	nop
80035b48:	0800d6d4 	j	80035b50 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x154>
80035b4c:	00000000 	nop
80035b50:	8fa10060 	lw	at,96(sp)
80035b54:	24020002 	li	v0,2
80035b58:	10220197 	beq	at,v0,800361b8 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x7bc>
80035b5c:	00000000 	nop
80035b60:	0800d6da 	j	80035b68 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x16c>
80035b64:	00000000 	nop
80035b68:	8fa10060 	lw	at,96(sp)
80035b6c:	24020004 	li	v0,4
80035b70:	102201b6 	beq	at,v0,8003624c <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x850>
80035b74:	00000000 	nop
80035b78:	0800d6f2 	j	80035bc8 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x1cc>
80035b7c:	00000000 	nop
80035b80:	93a10087 	lbu	at,135(sp)
80035b84:	afa1005c 	sw	at,92(sp)
80035b88:	102001d5 	beqz	at,800362e0 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x8e4>
80035b8c:	00000000 	nop
80035b90:	0800d6e6 	j	80035b98 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x19c>
80035b94:	00000000 	nop
80035b98:	8fa1005c 	lw	at,92(sp)
80035b9c:	24020002 	li	v0,2
80035ba0:	102201f4 	beq	at,v0,80036374 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x978>
80035ba4:	00000000 	nop
80035ba8:	0800d6ec 	j	80035bb0 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x1b4>
80035bac:	00000000 	nop
80035bb0:	8fa1005c 	lw	at,92(sp)
80035bb4:	24020004 	li	v0,4
80035bb8:	10220213 	beq	at,v0,80036408 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0xa0c>
80035bbc:	00000000 	nop
80035bc0:	0800d6f2 	j	80035bc8 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x1cc>
80035bc4:	00000000 	nop
80035bc8:	93a10087 	lbu	at,135(sp)
80035bcc:	24020001 	li	v0,1
80035bd0:	10220244 	beq	at,v0,800364e4 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0xae8>
80035bd4:	00000000 	nop
80035bd8:	0800d945 	j	80036514 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0xb18>
80035bdc:	00000000 	nop
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed_relaxed(dst, old, new),
80035be0:	8fa10074 	lw	at,116(sp)
80035be4:	8fa20078 	lw	v0,120(sp)
80035be8:	8fa30070 	lw	v1,112(sp)
80035bec:	2404fffc 	li	a0,-4
80035bf0:	00642024 	and	a0,v1,a0
80035bf4:	30630003 	andi	v1,v1,0x3
80035bf8:	000348c0 	sll	t1,v1,0x3
80035bfc:	340300ff 	li	v1,0xff
80035c00:	01232804 	sllv	a1,v1,t1
80035c04:	00053827 	nor	a3,zero,a1
80035c08:	304200ff 	andi	v0,v0,0xff
80035c0c:	01223004 	sllv	a2,v0,t1
80035c10:	302100ff 	andi	at,at,0xff
80035c14:	01214004 	sllv	t0,at,t1
80035c18:	c0820000 	ll	v0,0(a0)
80035c1c:	00451824 	and	v1,v0,a1
80035c20:	14660006 	bne	v1,a2,80035c3c <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x240>
80035c24:	00000000 	nop
80035c28:	00471024 	and	v0,v0,a3
80035c2c:	00481025 	or	v0,v0,t0
80035c30:	e0820000 	sc	v0,0(a0)
80035c34:	1040fff8 	beqz	v0,80035c18 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x21c>
80035c38:	00000000 	nop
80035c3c:	01230806 	srlv	at,v1,t1
80035c40:	7c010c20 	seb	at,at
80035c44:	afa10058 	sw	at,88(sp)
80035c48:	8fa20058 	lw	v0,88(sp)
80035c4c:	8fa10078 	lw	at,120(sp)
80035c50:	7c010c20 	seb	at,at
80035c54:	00410826 	xor	at,v0,at
80035c58:	2c210001 	sltiu	at,at,1
80035c5c:	a3a20084 	sb	v0,132(sp)
80035c60:	a3a10085 	sb	at,133(sp)
80035c64:	0800d764 	j	80035d90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x394>
80035c68:	00000000 	nop
            (Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),
80035c6c:	8fa10074 	lw	at,116(sp)
80035c70:	8fa20078 	lw	v0,120(sp)
80035c74:	8fa30070 	lw	v1,112(sp)
80035c78:	2404fffc 	li	a0,-4
80035c7c:	00642024 	and	a0,v1,a0
80035c80:	30630003 	andi	v1,v1,0x3
80035c84:	000348c0 	sll	t1,v1,0x3
80035c88:	340300ff 	li	v1,0xff
80035c8c:	01232804 	sllv	a1,v1,t1
80035c90:	00053827 	nor	a3,zero,a1
80035c94:	304200ff 	andi	v0,v0,0xff
80035c98:	01223004 	sllv	a2,v0,t1
80035c9c:	302100ff 	andi	at,at,0xff
80035ca0:	01214004 	sllv	t0,at,t1
80035ca4:	c0820000 	ll	v0,0(a0)
80035ca8:	00451824 	and	v1,v0,a1
80035cac:	14660006 	bne	v1,a2,80035cc8 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x2cc>
80035cb0:	00000000 	nop
80035cb4:	00471024 	and	v0,v0,a3
80035cb8:	00481025 	or	v0,v0,t0
80035cbc:	e0820000 	sc	v0,0(a0)
80035cc0:	1040fff8 	beqz	v0,80035ca4 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x2a8>
80035cc4:	00000000 	nop
80035cc8:	01230806 	srlv	at,v1,t1
80035ccc:	7c010c20 	seb	at,at
80035cd0:	afa10054 	sw	at,84(sp)
80035cd4:	8fa20054 	lw	v0,84(sp)
80035cd8:	8fa10078 	lw	at,120(sp)
80035cdc:	7c010c20 	seb	at,at
80035ce0:	00410826 	xor	at,v0,at
80035ce4:	2c210001 	sltiu	at,at,1
80035ce8:	0000000f 	sync
80035cec:	a3a20084 	sb	v0,132(sp)
80035cf0:	a3a10085 	sb	at,133(sp)
80035cf4:	0800d764 	j	80035d90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x394>
80035cf8:	00000000 	nop
            (Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),
80035cfc:	8fa10074 	lw	at,116(sp)
80035d00:	8fa20078 	lw	v0,120(sp)
80035d04:	8fa30070 	lw	v1,112(sp)
80035d08:	0000000f 	sync
80035d0c:	2404fffc 	li	a0,-4
80035d10:	00642024 	and	a0,v1,a0
80035d14:	30630003 	andi	v1,v1,0x3
80035d18:	000348c0 	sll	t1,v1,0x3
80035d1c:	340300ff 	li	v1,0xff
80035d20:	01232804 	sllv	a1,v1,t1
80035d24:	00053827 	nor	a3,zero,a1
80035d28:	304200ff 	andi	v0,v0,0xff
80035d2c:	01223004 	sllv	a2,v0,t1
80035d30:	302100ff 	andi	at,at,0xff
80035d34:	01214004 	sllv	t0,at,t1
80035d38:	c0820000 	ll	v0,0(a0)
80035d3c:	00451824 	and	v1,v0,a1
80035d40:	14660006 	bne	v1,a2,80035d5c <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x360>
80035d44:	00000000 	nop
80035d48:	00471024 	and	v0,v0,a3
80035d4c:	00481025 	or	v0,v0,t0
80035d50:	e0820000 	sc	v0,0(a0)
80035d54:	1040fff8 	beqz	v0,80035d38 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x33c>
80035d58:	00000000 	nop
80035d5c:	01230806 	srlv	at,v1,t1
80035d60:	7c010c20 	seb	at,at
80035d64:	afa10050 	sw	at,80(sp)
80035d68:	8fa20050 	lw	v0,80(sp)
80035d6c:	8fa10078 	lw	at,120(sp)
80035d70:	7c010c20 	seb	at,at
80035d74:	00410826 	xor	at,v0,at
80035d78:	2c210001 	sltiu	at,at,1
80035d7c:	0000000f 	sync
80035d80:	a3a20084 	sb	v0,132(sp)
80035d84:	a3a10085 	sb	at,133(sp)
80035d88:	0800d764 	j	80035d90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x394>
80035d8c:	00000000 	nop
    let (val, ok) = unsafe {
80035d90:	93a10084 	lbu	at,132(sp)
80035d94:	afa1004c 	sw	at,76(sp)
80035d98:	a3a100c2 	sb	at,194(sp)
80035d9c:	93a10085 	lbu	at,133(sp)
80035da0:	30210001 	andi	at,at,0x1
80035da4:	a3a100c3 	sb	at,195(sp)
    if ok { Ok(val) } else { Err(val) }
80035da8:	142001c2 	bnez	at,800364b4 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0xab8>
80035dac:	00000000 	nop
80035db0:	0800d927 	j	8003649c <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0xaa0>
80035db4:	00000000 	nop
            (Release, Relaxed) => intrinsics::atomic_cxchg_release_relaxed(dst, old, new),
80035db8:	8fa10074 	lw	at,116(sp)
80035dbc:	8fa20078 	lw	v0,120(sp)
80035dc0:	8fa30070 	lw	v1,112(sp)
80035dc4:	0000000f 	sync
80035dc8:	2404fffc 	li	a0,-4
80035dcc:	00642024 	and	a0,v1,a0
80035dd0:	30630003 	andi	v1,v1,0x3
80035dd4:	000348c0 	sll	t1,v1,0x3
80035dd8:	340300ff 	li	v1,0xff
80035ddc:	01232804 	sllv	a1,v1,t1
80035de0:	00053827 	nor	a3,zero,a1
80035de4:	304200ff 	andi	v0,v0,0xff
80035de8:	01223004 	sllv	a2,v0,t1
80035dec:	302100ff 	andi	at,at,0xff
80035df0:	01214004 	sllv	t0,at,t1
80035df4:	c0820000 	ll	v0,0(a0)
80035df8:	00451824 	and	v1,v0,a1
80035dfc:	14660006 	bne	v1,a2,80035e18 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x41c>
80035e00:	00000000 	nop
80035e04:	00471024 	and	v0,v0,a3
80035e08:	00481025 	or	v0,v0,t0
80035e0c:	e0820000 	sc	v0,0(a0)
80035e10:	1040fff8 	beqz	v0,80035df4 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x3f8>
80035e14:	00000000 	nop
80035e18:	01230806 	srlv	at,v1,t1
80035e1c:	7c010c20 	seb	at,at
80035e20:	afa10048 	sw	at,72(sp)
80035e24:	8fa20048 	lw	v0,72(sp)
80035e28:	8fa10078 	lw	at,120(sp)
80035e2c:	7c010c20 	seb	at,at
80035e30:	00410826 	xor	at,v0,at
80035e34:	2c210001 	sltiu	at,at,1
80035e38:	a3a20084 	sb	v0,132(sp)
80035e3c:	a3a10085 	sb	at,133(sp)
80035e40:	0800d764 	j	80035d90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x394>
80035e44:	00000000 	nop
            (Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),
80035e48:	8fa10074 	lw	at,116(sp)
80035e4c:	8fa20078 	lw	v0,120(sp)
80035e50:	8fa30070 	lw	v1,112(sp)
80035e54:	0000000f 	sync
80035e58:	2404fffc 	li	a0,-4
80035e5c:	00642024 	and	a0,v1,a0
80035e60:	30630003 	andi	v1,v1,0x3
80035e64:	000348c0 	sll	t1,v1,0x3
80035e68:	340300ff 	li	v1,0xff
80035e6c:	01232804 	sllv	a1,v1,t1
80035e70:	00053827 	nor	a3,zero,a1
80035e74:	304200ff 	andi	v0,v0,0xff
80035e78:	01223004 	sllv	a2,v0,t1
80035e7c:	302100ff 	andi	at,at,0xff
80035e80:	01214004 	sllv	t0,at,t1
80035e84:	c0820000 	ll	v0,0(a0)
80035e88:	00451824 	and	v1,v0,a1
80035e8c:	14660006 	bne	v1,a2,80035ea8 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x4ac>
80035e90:	00000000 	nop
80035e94:	00471024 	and	v0,v0,a3
80035e98:	00481025 	or	v0,v0,t0
80035e9c:	e0820000 	sc	v0,0(a0)
80035ea0:	1040fff8 	beqz	v0,80035e84 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x488>
80035ea4:	00000000 	nop
80035ea8:	01230806 	srlv	at,v1,t1
80035eac:	7c010c20 	seb	at,at
80035eb0:	afa10044 	sw	at,68(sp)
80035eb4:	8fa20044 	lw	v0,68(sp)
80035eb8:	8fa10078 	lw	at,120(sp)
80035ebc:	7c010c20 	seb	at,at
80035ec0:	00410826 	xor	at,v0,at
80035ec4:	2c210001 	sltiu	at,at,1
80035ec8:	0000000f 	sync
80035ecc:	a3a20084 	sb	v0,132(sp)
80035ed0:	a3a10085 	sb	at,133(sp)
80035ed4:	0800d764 	j	80035d90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x394>
80035ed8:	00000000 	nop
            (Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),
80035edc:	8fa10074 	lw	at,116(sp)
80035ee0:	8fa20078 	lw	v0,120(sp)
80035ee4:	8fa30070 	lw	v1,112(sp)
80035ee8:	0000000f 	sync
80035eec:	2404fffc 	li	a0,-4
80035ef0:	00642024 	and	a0,v1,a0
80035ef4:	30630003 	andi	v1,v1,0x3
80035ef8:	000348c0 	sll	t1,v1,0x3
80035efc:	340300ff 	li	v1,0xff
80035f00:	01232804 	sllv	a1,v1,t1
80035f04:	00053827 	nor	a3,zero,a1
80035f08:	304200ff 	andi	v0,v0,0xff
80035f0c:	01223004 	sllv	a2,v0,t1
80035f10:	302100ff 	andi	at,at,0xff
80035f14:	01214004 	sllv	t0,at,t1
80035f18:	c0820000 	ll	v0,0(a0)
80035f1c:	00451824 	and	v1,v0,a1
80035f20:	14660006 	bne	v1,a2,80035f3c <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x540>
80035f24:	00000000 	nop
80035f28:	00471024 	and	v0,v0,a3
80035f2c:	00481025 	or	v0,v0,t0
80035f30:	e0820000 	sc	v0,0(a0)
80035f34:	1040fff8 	beqz	v0,80035f18 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x51c>
80035f38:	00000000 	nop
80035f3c:	01230806 	srlv	at,v1,t1
80035f40:	7c010c20 	seb	at,at
80035f44:	afa10040 	sw	at,64(sp)
80035f48:	8fa20040 	lw	v0,64(sp)
80035f4c:	8fa10078 	lw	at,120(sp)
80035f50:	7c010c20 	seb	at,at
80035f54:	00410826 	xor	at,v0,at
80035f58:	2c210001 	sltiu	at,at,1
80035f5c:	0000000f 	sync
80035f60:	a3a20084 	sb	v0,132(sp)
80035f64:	a3a10085 	sb	at,133(sp)
80035f68:	0800d764 	j	80035d90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x394>
80035f6c:	00000000 	nop
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),
80035f70:	8fa10074 	lw	at,116(sp)
80035f74:	8fa20078 	lw	v0,120(sp)
80035f78:	8fa30070 	lw	v1,112(sp)
80035f7c:	2404fffc 	li	a0,-4
80035f80:	00642024 	and	a0,v1,a0
80035f84:	30630003 	andi	v1,v1,0x3
80035f88:	000348c0 	sll	t1,v1,0x3
80035f8c:	340300ff 	li	v1,0xff
80035f90:	01232804 	sllv	a1,v1,t1
80035f94:	00053827 	nor	a3,zero,a1
80035f98:	304200ff 	andi	v0,v0,0xff
80035f9c:	01223004 	sllv	a2,v0,t1
80035fa0:	302100ff 	andi	at,at,0xff
80035fa4:	01214004 	sllv	t0,at,t1
80035fa8:	c0820000 	ll	v0,0(a0)
80035fac:	00451824 	and	v1,v0,a1
80035fb0:	14660006 	bne	v1,a2,80035fcc <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x5d0>
80035fb4:	00000000 	nop
80035fb8:	00471024 	and	v0,v0,a3
80035fbc:	00481025 	or	v0,v0,t0
80035fc0:	e0820000 	sc	v0,0(a0)
80035fc4:	1040fff8 	beqz	v0,80035fa8 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x5ac>
80035fc8:	00000000 	nop
80035fcc:	01230806 	srlv	at,v1,t1
80035fd0:	7c010c20 	seb	at,at
80035fd4:	afa1003c 	sw	at,60(sp)
80035fd8:	8fa2003c 	lw	v0,60(sp)
80035fdc:	8fa10078 	lw	at,120(sp)
80035fe0:	7c010c20 	seb	at,at
80035fe4:	00410826 	xor	at,v0,at
80035fe8:	2c210001 	sltiu	at,at,1
80035fec:	0000000f 	sync
80035ff0:	a3a20084 	sb	v0,132(sp)
80035ff4:	a3a10085 	sb	at,133(sp)
80035ff8:	0800d764 	j	80035d90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x394>
80035ffc:	00000000 	nop
            (Acquire, Acquire) => intrinsics::atomic_cxchg_acquire_acquire(dst, old, new),
80036000:	8fa10074 	lw	at,116(sp)
80036004:	8fa20078 	lw	v0,120(sp)
80036008:	8fa30070 	lw	v1,112(sp)
8003600c:	2404fffc 	li	a0,-4
80036010:	00642024 	and	a0,v1,a0
80036014:	30630003 	andi	v1,v1,0x3
80036018:	000348c0 	sll	t1,v1,0x3
8003601c:	340300ff 	li	v1,0xff
80036020:	01232804 	sllv	a1,v1,t1
80036024:	00053827 	nor	a3,zero,a1
80036028:	304200ff 	andi	v0,v0,0xff
8003602c:	01223004 	sllv	a2,v0,t1
80036030:	302100ff 	andi	at,at,0xff
80036034:	01214004 	sllv	t0,at,t1
80036038:	c0820000 	ll	v0,0(a0)
8003603c:	00451824 	and	v1,v0,a1
80036040:	14660006 	bne	v1,a2,8003605c <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x660>
80036044:	00000000 	nop
80036048:	00471024 	and	v0,v0,a3
8003604c:	00481025 	or	v0,v0,t0
80036050:	e0820000 	sc	v0,0(a0)
80036054:	1040fff8 	beqz	v0,80036038 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x63c>
80036058:	00000000 	nop
8003605c:	01230806 	srlv	at,v1,t1
80036060:	7c010c20 	seb	at,at
80036064:	afa10038 	sw	at,56(sp)
80036068:	8fa20038 	lw	v0,56(sp)
8003606c:	8fa10078 	lw	at,120(sp)
80036070:	7c010c20 	seb	at,at
80036074:	00410826 	xor	at,v0,at
80036078:	2c210001 	sltiu	at,at,1
8003607c:	0000000f 	sync
80036080:	a3a20084 	sb	v0,132(sp)
80036084:	a3a10085 	sb	at,133(sp)
80036088:	0800d764 	j	80035d90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x394>
8003608c:	00000000 	nop
            (Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),
80036090:	8fa10074 	lw	at,116(sp)
80036094:	8fa20078 	lw	v0,120(sp)
80036098:	8fa30070 	lw	v1,112(sp)
8003609c:	0000000f 	sync
800360a0:	2404fffc 	li	a0,-4
800360a4:	00642024 	and	a0,v1,a0
800360a8:	30630003 	andi	v1,v1,0x3
800360ac:	000348c0 	sll	t1,v1,0x3
800360b0:	340300ff 	li	v1,0xff
800360b4:	01232804 	sllv	a1,v1,t1
800360b8:	00053827 	nor	a3,zero,a1
800360bc:	304200ff 	andi	v0,v0,0xff
800360c0:	01223004 	sllv	a2,v0,t1
800360c4:	302100ff 	andi	at,at,0xff
800360c8:	01214004 	sllv	t0,at,t1
800360cc:	c0820000 	ll	v0,0(a0)
800360d0:	00451824 	and	v1,v0,a1
800360d4:	14660006 	bne	v1,a2,800360f0 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x6f4>
800360d8:	00000000 	nop
800360dc:	00471024 	and	v0,v0,a3
800360e0:	00481025 	or	v0,v0,t0
800360e4:	e0820000 	sc	v0,0(a0)
800360e8:	1040fff8 	beqz	v0,800360cc <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x6d0>
800360ec:	00000000 	nop
800360f0:	01230806 	srlv	at,v1,t1
800360f4:	7c010c20 	seb	at,at
800360f8:	afa10034 	sw	at,52(sp)
800360fc:	8fa20034 	lw	v0,52(sp)
80036100:	8fa10078 	lw	at,120(sp)
80036104:	7c010c20 	seb	at,at
80036108:	00410826 	xor	at,v0,at
8003610c:	2c210001 	sltiu	at,at,1
80036110:	0000000f 	sync
80036114:	a3a20084 	sb	v0,132(sp)
80036118:	a3a10085 	sb	at,133(sp)
8003611c:	0800d764 	j	80035d90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x394>
80036120:	00000000 	nop
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_relaxed(dst, old, new),
80036124:	8fa10074 	lw	at,116(sp)
80036128:	8fa20078 	lw	v0,120(sp)
8003612c:	8fa30070 	lw	v1,112(sp)
80036130:	0000000f 	sync
80036134:	2404fffc 	li	a0,-4
80036138:	00642024 	and	a0,v1,a0
8003613c:	30630003 	andi	v1,v1,0x3
80036140:	000348c0 	sll	t1,v1,0x3
80036144:	340300ff 	li	v1,0xff
80036148:	01232804 	sllv	a1,v1,t1
8003614c:	00053827 	nor	a3,zero,a1
80036150:	304200ff 	andi	v0,v0,0xff
80036154:	01223004 	sllv	a2,v0,t1
80036158:	302100ff 	andi	at,at,0xff
8003615c:	01214004 	sllv	t0,at,t1
80036160:	c0820000 	ll	v0,0(a0)
80036164:	00451824 	and	v1,v0,a1
80036168:	14660006 	bne	v1,a2,80036184 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x788>
8003616c:	00000000 	nop
80036170:	00471024 	and	v0,v0,a3
80036174:	00481025 	or	v0,v0,t0
80036178:	e0820000 	sc	v0,0(a0)
8003617c:	1040fff8 	beqz	v0,80036160 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x764>
80036180:	00000000 	nop
80036184:	01230806 	srlv	at,v1,t1
80036188:	7c010c20 	seb	at,at
8003618c:	afa10030 	sw	at,48(sp)
80036190:	8fa20030 	lw	v0,48(sp)
80036194:	8fa10078 	lw	at,120(sp)
80036198:	7c010c20 	seb	at,at
8003619c:	00410826 	xor	at,v0,at
800361a0:	2c210001 	sltiu	at,at,1
800361a4:	0000000f 	sync
800361a8:	a3a20084 	sb	v0,132(sp)
800361ac:	a3a10085 	sb	at,133(sp)
800361b0:	0800d764 	j	80035d90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x394>
800361b4:	00000000 	nop
            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel_acquire(dst, old, new),
800361b8:	8fa10074 	lw	at,116(sp)
800361bc:	8fa20078 	lw	v0,120(sp)
800361c0:	8fa30070 	lw	v1,112(sp)
800361c4:	0000000f 	sync
800361c8:	2404fffc 	li	a0,-4
800361cc:	00642024 	and	a0,v1,a0
800361d0:	30630003 	andi	v1,v1,0x3
800361d4:	000348c0 	sll	t1,v1,0x3
800361d8:	340300ff 	li	v1,0xff
800361dc:	01232804 	sllv	a1,v1,t1
800361e0:	00053827 	nor	a3,zero,a1
800361e4:	304200ff 	andi	v0,v0,0xff
800361e8:	01223004 	sllv	a2,v0,t1
800361ec:	302100ff 	andi	at,at,0xff
800361f0:	01214004 	sllv	t0,at,t1
800361f4:	c0820000 	ll	v0,0(a0)
800361f8:	00451824 	and	v1,v0,a1
800361fc:	14660006 	bne	v1,a2,80036218 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x81c>
80036200:	00000000 	nop
80036204:	00471024 	and	v0,v0,a3
80036208:	00481025 	or	v0,v0,t0
8003620c:	e0820000 	sc	v0,0(a0)
80036210:	1040fff8 	beqz	v0,800361f4 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x7f8>
80036214:	00000000 	nop
80036218:	01230806 	srlv	at,v1,t1
8003621c:	7c010c20 	seb	at,at
80036220:	afa1002c 	sw	at,44(sp)
80036224:	8fa2002c 	lw	v0,44(sp)
80036228:	8fa10078 	lw	at,120(sp)
8003622c:	7c010c20 	seb	at,at
80036230:	00410826 	xor	at,v0,at
80036234:	2c210001 	sltiu	at,at,1
80036238:	0000000f 	sync
8003623c:	a3a20084 	sb	v0,132(sp)
80036240:	a3a10085 	sb	at,133(sp)
80036244:	0800d764 	j	80035d90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x394>
80036248:	00000000 	nop
            (AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),
8003624c:	8fa10074 	lw	at,116(sp)
80036250:	8fa20078 	lw	v0,120(sp)
80036254:	8fa30070 	lw	v1,112(sp)
80036258:	0000000f 	sync
8003625c:	2404fffc 	li	a0,-4
80036260:	00642024 	and	a0,v1,a0
80036264:	30630003 	andi	v1,v1,0x3
80036268:	000348c0 	sll	t1,v1,0x3
8003626c:	340300ff 	li	v1,0xff
80036270:	01232804 	sllv	a1,v1,t1
80036274:	00053827 	nor	a3,zero,a1
80036278:	304200ff 	andi	v0,v0,0xff
8003627c:	01223004 	sllv	a2,v0,t1
80036280:	302100ff 	andi	at,at,0xff
80036284:	01214004 	sllv	t0,at,t1
80036288:	c0820000 	ll	v0,0(a0)
8003628c:	00451824 	and	v1,v0,a1
80036290:	14660006 	bne	v1,a2,800362ac <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x8b0>
80036294:	00000000 	nop
80036298:	00471024 	and	v0,v0,a3
8003629c:	00481025 	or	v0,v0,t0
800362a0:	e0820000 	sc	v0,0(a0)
800362a4:	1040fff8 	beqz	v0,80036288 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x88c>
800362a8:	00000000 	nop
800362ac:	01230806 	srlv	at,v1,t1
800362b0:	7c010c20 	seb	at,at
800362b4:	afa10028 	sw	at,40(sp)
800362b8:	8fa20028 	lw	v0,40(sp)
800362bc:	8fa10078 	lw	at,120(sp)
800362c0:	7c010c20 	seb	at,at
800362c4:	00410826 	xor	at,v0,at
800362c8:	2c210001 	sltiu	at,at,1
800362cc:	0000000f 	sync
800362d0:	a3a20084 	sb	v0,132(sp)
800362d4:	a3a10085 	sb	at,133(sp)
800362d8:	0800d764 	j	80035d90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x394>
800362dc:	00000000 	nop
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_seqcst_relaxed(dst, old, new),
800362e0:	8fa10074 	lw	at,116(sp)
800362e4:	8fa20078 	lw	v0,120(sp)
800362e8:	8fa30070 	lw	v1,112(sp)
800362ec:	0000000f 	sync
800362f0:	2404fffc 	li	a0,-4
800362f4:	00642024 	and	a0,v1,a0
800362f8:	30630003 	andi	v1,v1,0x3
800362fc:	000348c0 	sll	t1,v1,0x3
80036300:	340300ff 	li	v1,0xff
80036304:	01232804 	sllv	a1,v1,t1
80036308:	00053827 	nor	a3,zero,a1
8003630c:	304200ff 	andi	v0,v0,0xff
80036310:	01223004 	sllv	a2,v0,t1
80036314:	302100ff 	andi	at,at,0xff
80036318:	01214004 	sllv	t0,at,t1
8003631c:	c0820000 	ll	v0,0(a0)
80036320:	00451824 	and	v1,v0,a1
80036324:	14660006 	bne	v1,a2,80036340 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x944>
80036328:	00000000 	nop
8003632c:	00471024 	and	v0,v0,a3
80036330:	00481025 	or	v0,v0,t0
80036334:	e0820000 	sc	v0,0(a0)
80036338:	1040fff8 	beqz	v0,8003631c <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x920>
8003633c:	00000000 	nop
80036340:	01230806 	srlv	at,v1,t1
80036344:	7c010c20 	seb	at,at
80036348:	afa10024 	sw	at,36(sp)
8003634c:	8fa20024 	lw	v0,36(sp)
80036350:	8fa10078 	lw	at,120(sp)
80036354:	7c010c20 	seb	at,at
80036358:	00410826 	xor	at,v0,at
8003635c:	2c210001 	sltiu	at,at,1
80036360:	0000000f 	sync
80036364:	a3a20084 	sb	v0,132(sp)
80036368:	a3a10085 	sb	at,133(sp)
8003636c:	0800d764 	j	80035d90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x394>
80036370:	00000000 	nop
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_seqcst_acquire(dst, old, new),
80036374:	8fa10074 	lw	at,116(sp)
80036378:	8fa20078 	lw	v0,120(sp)
8003637c:	8fa30070 	lw	v1,112(sp)
80036380:	0000000f 	sync
80036384:	2404fffc 	li	a0,-4
80036388:	00642024 	and	a0,v1,a0
8003638c:	30630003 	andi	v1,v1,0x3
80036390:	000348c0 	sll	t1,v1,0x3
80036394:	340300ff 	li	v1,0xff
80036398:	01232804 	sllv	a1,v1,t1
8003639c:	00053827 	nor	a3,zero,a1
800363a0:	304200ff 	andi	v0,v0,0xff
800363a4:	01223004 	sllv	a2,v0,t1
800363a8:	302100ff 	andi	at,at,0xff
800363ac:	01214004 	sllv	t0,at,t1
800363b0:	c0820000 	ll	v0,0(a0)
800363b4:	00451824 	and	v1,v0,a1
800363b8:	14660006 	bne	v1,a2,800363d4 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x9d8>
800363bc:	00000000 	nop
800363c0:	00471024 	and	v0,v0,a3
800363c4:	00481025 	or	v0,v0,t0
800363c8:	e0820000 	sc	v0,0(a0)
800363cc:	1040fff8 	beqz	v0,800363b0 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x9b4>
800363d0:	00000000 	nop
800363d4:	01230806 	srlv	at,v1,t1
800363d8:	7c010c20 	seb	at,at
800363dc:	afa10020 	sw	at,32(sp)
800363e0:	8fa20020 	lw	v0,32(sp)
800363e4:	8fa10078 	lw	at,120(sp)
800363e8:	7c010c20 	seb	at,at
800363ec:	00410826 	xor	at,v0,at
800363f0:	2c210001 	sltiu	at,at,1
800363f4:	0000000f 	sync
800363f8:	a3a20084 	sb	v0,132(sp)
800363fc:	a3a10085 	sb	at,133(sp)
80036400:	0800d764 	j	80035d90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x394>
80036404:	00000000 	nop
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg_seqcst_seqcst(dst, old, new),
80036408:	8fa10074 	lw	at,116(sp)
8003640c:	8fa20078 	lw	v0,120(sp)
80036410:	8fa30070 	lw	v1,112(sp)
80036414:	0000000f 	sync
80036418:	2404fffc 	li	a0,-4
8003641c:	00642024 	and	a0,v1,a0
80036420:	30630003 	andi	v1,v1,0x3
80036424:	000348c0 	sll	t1,v1,0x3
80036428:	340300ff 	li	v1,0xff
8003642c:	01232804 	sllv	a1,v1,t1
80036430:	00053827 	nor	a3,zero,a1
80036434:	304200ff 	andi	v0,v0,0xff
80036438:	01223004 	sllv	a2,v0,t1
8003643c:	302100ff 	andi	at,at,0xff
80036440:	01214004 	sllv	t0,at,t1
80036444:	c0820000 	ll	v0,0(a0)
80036448:	00451824 	and	v1,v0,a1
8003644c:	14660006 	bne	v1,a2,80036468 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0xa6c>
80036450:	00000000 	nop
80036454:	00471024 	and	v0,v0,a3
80036458:	00481025 	or	v0,v0,t0
8003645c:	e0820000 	sc	v0,0(a0)
80036460:	1040fff8 	beqz	v0,80036444 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0xa48>
80036464:	00000000 	nop
80036468:	01230806 	srlv	at,v1,t1
8003646c:	7c010c20 	seb	at,at
80036470:	afa1001c 	sw	at,28(sp)
80036474:	8fa2001c 	lw	v0,28(sp)
80036478:	8fa10078 	lw	at,120(sp)
8003647c:	7c010c20 	seb	at,at
80036480:	00410826 	xor	at,v0,at
80036484:	2c210001 	sltiu	at,at,1
80036488:	0000000f 	sync
8003648c:	a3a20084 	sb	v0,132(sp)
80036490:	a3a10085 	sb	at,133(sp)
80036494:	0800d764 	j	80035d90 <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0x394>
80036498:	00000000 	nop
    if ok { Ok(val) } else { Err(val) }
8003649c:	8fa1004c 	lw	at,76(sp)
800364a0:	a3a10083 	sb	at,131(sp)
800364a4:	24010001 	li	at,1
800364a8:	a3a10082 	sb	at,130(sp)
800364ac:	0800d933 	j	800364cc <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0xad0>
800364b0:	00000000 	nop
800364b4:	8fa1004c 	lw	at,76(sp)
800364b8:	a3a10083 	sb	at,131(sp)
800364bc:	24010000 	li	at,0
800364c0:	a3a00082 	sb	zero,130(sp)
800364c4:	0800d933 	j	800364cc <_ZN4core4sync6atomic23atomic_compare_exchange17ha27434aa9ed4e084E+0xad0>
800364c8:	00000000 	nop
}
800364cc:	93a20082 	lbu	v0,130(sp)
800364d0:	93a30083 	lbu	v1,131(sp)
800364d4:	8fbf00c4 	lw	ra,196(sp)
800364d8:	27bd00c8 	addiu	sp,sp,200
800364dc:	03e00008 	jr	ra
800364e0:	00000000 	nop
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
800364e4:	3c018108 	lui	at,0x8108
800364e8:	2425a568 	addiu	a1,at,-23192
800364ec:	27a400a0 	addiu	a0,sp,160
800364f0:	afa40018 	sw	a0,24(sp)
800364f4:	24060001 	li	a2,1
800364f8:	0c00d5b0 	jal	800356c0 <_ZN4core3fmt9Arguments9new_const17hd12992beeaf27947E>
800364fc:	00000000 	nop
80036500:	8fa40018 	lw	a0,24(sp)
80036504:	3c018108 	lui	at,0x8108
80036508:	2425a570 	addiu	a1,at,-23184
8003650c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80036510:	00000000 	nop
            (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
80036514:	3c018108 	lui	at,0x8108
80036518:	2425a5c0 	addiu	a1,at,-23104
8003651c:	27a40088 	addiu	a0,sp,136
80036520:	afa40014 	sw	a0,20(sp)
80036524:	24060001 	li	a2,1
80036528:	0c00d5b0 	jal	800356c0 <_ZN4core3fmt9Arguments9new_const17hd12992beeaf27947E>
8003652c:	00000000 	nop
80036530:	8fa40014 	lw	a0,20(sp)
80036534:	3c018108 	lui	at,0x8108
80036538:	2425a5c8 	addiu	a1,at,-23096
8003653c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80036540:	00000000 	nop

80036544 <_ZN4core5alloc6layout6Layout4size17hff94f820d3a45325E>:
    pub const fn size(&self) -> usize {
80036544:	27bdfff8 	addiu	sp,sp,-8
80036548:	afa40004 	sw	a0,4(sp)
        self.size
8003654c:	8c820004 	lw	v0,4(a0)
80036550:	27bd0008 	addiu	sp,sp,8
    }
80036554:	03e00008 	jr	ra
80036558:	00000000 	nop

8003655c <_ZN4core5alloc6layout6Layout5align17h7f18a0cf8372e663E>:
    pub const fn align(&self) -> usize {
8003655c:	27bdffe8 	addiu	sp,sp,-24
80036560:	afbf0014 	sw	ra,20(sp)
80036564:	afa40010 	sw	a0,16(sp)
        self.align.as_usize()
80036568:	8c840000 	lw	a0,0(a0)
8003656c:	0c00d5e5 	jal	80035794 <_ZN4core3ptr9alignment9Alignment8as_usize17h86f1e2a5fdfbc9c4E>
80036570:	00000000 	nop
    }
80036574:	8fbf0014 	lw	ra,20(sp)
80036578:	27bd0018 	addiu	sp,sp,24
8003657c:	03e00008 	jr	ra
80036580:	00000000 	nop

80036584 <_ZN4sync4spin17Spinlock$LT$T$GT$3new17h5196e7e4a3a8e545E>:
    pub const fn new(data: T) -> Self {
80036584:	27bdffc8 	addiu	sp,sp,-56
80036588:	afbf0034 	sw	ra,52(sp)
8003658c:	afa50014 	sw	a1,20(sp)
80036590:	afa40018 	sw	a0,24(sp)
80036594:	afa4001c 	sw	a0,28(sp)
80036598:	afa50024 	sw	a1,36(sp)
8003659c:	24040000 	li	a0,0
            lock: AtomicBool::new(false),
800365a0:	0c00d629 	jal	800358a4 <_ZN4core4sync6atomic10AtomicBool3new17h346c794fd026d51cE>
800365a4:	00000000 	nop
800365a8:	8fa50014 	lw	a1,20(sp)
800365ac:	8fa40018 	lw	a0,24(sp)
800365b0:	00400825 	move	at,v0
800365b4:	8fa2001c 	lw	v0,28(sp)
800365b8:	a3a1002b 	sb	at,43(sp)
800365bc:	93a1002b 	lbu	at,43(sp)
800365c0:	a3a10023 	sb	at,35(sp)
800365c4:	afa50030 	sw	a1,48(sp)
        UnsafeCell { value }
800365c8:	afa5002c 	sw	a1,44(sp)
    }
800365cc:	8fa1002c 	lw	at,44(sp)
        Spinlock {
800365d0:	93a30023 	lbu	v1,35(sp)
800365d4:	a0830004 	sb	v1,4(a0)
800365d8:	ac810000 	sw	at,0(a0)
    }
800365dc:	8fbf0034 	lw	ra,52(sp)
800365e0:	27bd0038 	addiu	sp,sp,56
800365e4:	03e00008 	jr	ra
800365e8:	00000000 	nop

800365ec <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hafd71da544aa2524E>:
    pub fn lock(&self) -> SpinlockGuard<T> {
800365ec:	27bdffd0 	addiu	sp,sp,-48
800365f0:	afbf002c 	sw	ra,44(sp)
800365f4:	afa4001c 	sw	a0,28(sp)
800365f8:	afa40028 	sw	a0,40(sp)
        loop {
800365fc:	0800d981 	j	80036604 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hafd71da544aa2524E+0x18>
80036600:	00000000 	nop
            match self
80036604:	8fa1001c 	lw	at,28(sp)
80036608:	24240004 	addiu	a0,at,4
8003660c:	24010002 	li	at,2
                .compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire)
80036610:	a3a10026 	sb	at,38(sp)
80036614:	a3a10027 	sb	at,39(sp)
            match self
80036618:	93a70026 	lbu	a3,38(sp)
8003661c:	93a10027 	lbu	at,39(sp)
80036620:	03a01025 	move	v0,sp
80036624:	ac410010 	sw	at,16(v0)
80036628:	24050000 	li	a1,0
8003662c:	24060001 	li	a2,1
80036630:	0c00d5ec 	jal	800357b0 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17h0990b8152150dc4aE>
80036634:	00000000 	nop
80036638:	30410001 	andi	at,v0,0x1
8003663c:	a3a10024 	sb	at,36(sp)
80036640:	a3a30025 	sb	v1,37(sp)
80036644:	93a10024 	lbu	at,36(sp)
80036648:	30210001 	andi	at,at,0x1
8003664c:	1420000a 	bnez	at,80036678 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hafd71da544aa2524E+0x8c>
80036650:	00000000 	nop
80036654:	0800d997 	j	8003665c <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hafd71da544aa2524E+0x70>
80036658:	00000000 	nop
        SpinlockGuard { lock: self }
8003665c:	8fa1001c 	lw	at,28(sp)
80036660:	afa10020 	sw	at,32(sp)
    }
80036664:	8fa20020 	lw	v0,32(sp)
80036668:	8fbf002c 	lw	ra,44(sp)
8003666c:	27bd0030 	addiu	sp,sp,48
80036670:	03e00008 	jr	ra
80036674:	00000000 	nop
                    core::hint::spin_loop();
80036678:	0800d981 	j	80036604 <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hafd71da544aa2524E+0x18>
8003667c:	00000000 	nop

80036680 <_ZN76_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb2e885d1cbd6caa1E>:
    fn drop(&mut self) {
80036680:	27bdffe0 	addiu	sp,sp,-32
80036684:	afbf001c 	sw	ra,28(sp)
80036688:	afa40018 	sw	a0,24(sp)
        self.lock.lock.store(false, Ordering::Release);
8003668c:	8c810000 	lw	at,0(a0)
80036690:	24240004 	addiu	a0,at,4
80036694:	24010001 	li	at,1
80036698:	a3a10017 	sb	at,23(sp)
8003669c:	93a60017 	lbu	a2,23(sp)
800366a0:	24050000 	li	a1,0
800366a4:	0c00d633 	jal	800358cc <_ZN4core4sync6atomic10AtomicBool5store17hd0ce91a55a0b2fb8E>
800366a8:	00000000 	nop
    }
800366ac:	8fbf001c 	lw	ra,28(sp)
800366b0:	27bd0020 	addiu	sp,sp,32
800366b4:	03e00008 	jr	ra
800366b8:	00000000 	nop

800366bc <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd6ca4e449f1bf8a4E>:
    fn deref(&self) -> &T {
800366bc:	27bdfff8 	addiu	sp,sp,-8
800366c0:	afa40000 	sw	a0,0(sp)
        unsafe { &*self.lock.data.get() }
800366c4:	8c820000 	lw	v0,0(a0)
800366c8:	afa20004 	sw	v0,4(sp)
800366cc:	27bd0008 	addiu	sp,sp,8
    }
800366d0:	03e00008 	jr	ra
800366d4:	00000000 	nop

800366d8 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h8bb5d72a010452a3E>:
    fn deref_mut(&mut self) -> &mut T {
800366d8:	27bdfff8 	addiu	sp,sp,-8
800366dc:	afa40000 	sw	a0,0(sp)
        unsafe { &mut *self.lock.data.get() }
800366e0:	8c820000 	lw	v0,0(a0)
800366e4:	afa20004 	sw	v0,4(sp)
800366e8:	27bd0008 	addiu	sp,sp,8
    }
800366ec:	03e00008 	jr	ra
800366f0:	00000000 	nop

800366f4 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E>:
        }
    }
}

unsafe impl GlobalAlloc for SimpleAllocator {
    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
800366f4:	27bdff80 	addiu	sp,sp,-128
800366f8:	afbf007c 	sw	ra,124(sp)
800366fc:	afa40030 	sw	a0,48(sp)
80036700:	afa5003c 	sw	a1,60(sp)
80036704:	afa60040 	sw	a2,64(sp)
80036708:	afa40060 	sw	a0,96(sp)
        let mut offset = self.offset.lock();
8003670c:	24840008 	addiu	a0,a0,8
80036710:	0c00d97b 	jal	800365ec <_ZN4sync4spin17Spinlock$LT$T$GT$4lock17hafd71da544aa2524E>
80036714:	00000000 	nop
80036718:	8fa40030 	lw	a0,48(sp)
8003671c:	afa20044 	sw	v0,68(sp)
        let mem_start = self.memory.as_ptr() as usize;
80036720:	8c810000 	lw	at,0(a0)
80036724:	afa10034 	sw	at,52(sp)
80036728:	8c820004 	lw	v0,4(a0)
8003672c:	afa10074 	sw	at,116(sp)
80036730:	afa20078 	sw	v0,120(sp)
80036734:	afa10064 	sw	at,100(sp)
80036738:	27a40044 	addiu	a0,sp,68

        let start = (*offset + mem_start + layout.align() - 1) & !(layout.align() - 1);
8003673c:	0c00d9af 	jal	800366bc <_ZN78_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd6ca4e449f1bf8a4E>
80036740:	00000000 	nop
80036744:	8fa10034 	lw	at,52(sp)
80036748:	8c420000 	lw	v0,0(v0)
8003674c:	00410821 	addu	at,v0,at
80036750:	afa10038 	sw	at,56(sp)
80036754:	0022082b 	sltu	at,at,v0
80036758:	1420000f 	bnez	at,80036798 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0xa4>
8003675c:	00000000 	nop
80036760:	0800d9da 	j	80036768 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0x74>
80036764:	00000000 	nop
80036768:	27a4003c 	addiu	a0,sp,60
8003676c:	0c00d957 	jal	8003655c <_ZN4core5alloc6layout6Layout5align17h7f18a0cf8372e663E>
80036770:	00000000 	nop
80036774:	00400825 	move	at,v0
80036778:	8fa20038 	lw	v0,56(sp)
8003677c:	00410821 	addu	at,v0,at
80036780:	afa1002c 	sw	at,44(sp)
80036784:	0022082b 	sltu	at,at,v0
80036788:	1420000e 	bnez	at,800367c4 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0xd0>
8003678c:	00000000 	nop
80036790:	0800d9ea 	j	800367a8 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0xb4>
80036794:	00000000 	nop
80036798:	3c018108 	lui	at,0x8108
8003679c:	2424a5f0 	addiu	a0,at,-23056
800367a0:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800367a4:	00000000 	nop
800367a8:	8fa1002c 	lw	at,44(sp)
800367ac:	2422ffff 	addiu	v0,at,-1
800367b0:	afa20028 	sw	v0,40(sp)
800367b4:	10200010 	beqz	at,800367f8 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0x104>
800367b8:	00000000 	nop
800367bc:	0800d9f5 	j	800367d4 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0xe0>
800367c0:	00000000 	nop
800367c4:	3c018108 	lui	at,0x8108
800367c8:	2424a5f0 	addiu	a0,at,-23056
800367cc:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800367d0:	00000000 	nop
800367d4:	27a4003c 	addiu	a0,sp,60
800367d8:	0c00d957 	jal	8003655c <_ZN4core5alloc6layout6Layout5align17h7f18a0cf8372e663E>
800367dc:	00000000 	nop
800367e0:	2441ffff 	addiu	at,v0,-1
800367e4:	afa10024 	sw	at,36(sp)
800367e8:	10400014 	beqz	v0,8003683c <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0x148>
800367ec:	00000000 	nop
800367f0:	0800da02 	j	80036808 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0x114>
800367f4:	00000000 	nop
800367f8:	3c018108 	lui	at,0x8108
800367fc:	2424a600 	addiu	a0,at,-23040
80036800:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80036804:	00000000 	nop
80036808:	8fa20034 	lw	v0,52(sp)
8003680c:	8fa10028 	lw	at,40(sp)
80036810:	8fa30024 	lw	v1,36(sp)
80036814:	00601827 	nor	v1,v1,zero
80036818:	00230824 	and	at,at,v1
8003681c:	afa10068 	sw	at,104(sp)
        let start = start - mem_start;
80036820:	00221823 	subu	v1,at,v0
80036824:	afa30020 	sw	v1,32(sp)
80036828:	0022082b 	sltu	at,at,v0
8003682c:	14200015 	bnez	at,80036884 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0x190>
80036830:	00000000 	nop
80036834:	0800da13 	j	8003684c <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0x158>
80036838:	00000000 	nop
        let start = (*offset + mem_start + layout.align() - 1) & !(layout.align() - 1);
8003683c:	3c018108 	lui	at,0x8108
80036840:	2424a610 	addiu	a0,at,-23024
80036844:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80036848:	00000000 	nop
        let start = start - mem_start;
8003684c:	8fa10020 	lw	at,32(sp)
80036850:	afa1006c 	sw	at,108(sp)
80036854:	27a4003c 	addiu	a0,sp,60
        let end = start + layout.size();
80036858:	0c00d951 	jal	80036544 <_ZN4core5alloc6layout6Layout4size17hff94f820d3a45325E>
8003685c:	00000000 	nop
80036860:	00400825 	move	at,v0
80036864:	8fa20020 	lw	v0,32(sp)
80036868:	00410821 	addu	at,v0,at
8003686c:	afa1001c 	sw	at,28(sp)
80036870:	0022082b 	sltu	at,at,v0
80036874:	14200016 	bnez	at,800368d0 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0x1dc>
80036878:	00000000 	nop
8003687c:	0800da25 	j	80036894 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0x1a0>
80036880:	00000000 	nop
        let start = start - mem_start;
80036884:	3c018108 	lui	at,0x8108
80036888:	2424a620 	addiu	a0,at,-23008
8003688c:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80036890:	00000000 	nop
        let end = start + layout.size();
80036894:	8fa1001c 	lw	at,28(sp)
80036898:	afa10070 	sw	at,112(sp)
8003689c:	27a40044 	addiu	a0,sp,68
        *offset = end;
800368a0:	0c00d9b6 	jal	800366d8 <_ZN81_$LT$sync..spin..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h8bb5d72a010452a3E>
800368a4:	00000000 	nop
800368a8:	8fa10030 	lw	at,48(sp)
800368ac:	00401825 	move	v1,v0
800368b0:	8fa2001c 	lw	v0,28(sp)
800368b4:	ac620000 	sw	v0,0(v1)
        if end > self.memory.len() {
800368b8:	8c210004 	lw	at,4(at)
800368bc:	0022082b 	sltu	at,at,v0
800368c0:	14200010 	bnez	at,80036904 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0x210>
800368c4:	00000000 	nop
800368c8:	0800da38 	j	800368e0 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0x1ec>
800368cc:	00000000 	nop
        let end = start + layout.size();
800368d0:	3c018108 	lui	at,0x8108
800368d4:	2424a630 	addiu	a0,at,-22992
800368d8:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800368dc:	00000000 	nop
            panic!("SimpleAllocator: out of memory");
        } else {
            &self.memory[start] as *const u8 as *mut u8
800368e0:	8fa10020 	lw	at,32(sp)
800368e4:	8fa20030 	lw	v0,48(sp)
800368e8:	8c420004 	lw	v0,4(v0)
800368ec:	afa20018 	sw	v0,24(sp)
800368f0:	0022082b 	sltu	at,at,v0
800368f4:	1420000f 	bnez	at,80036934 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0x240>
800368f8:	00000000 	nop
800368fc:	0800da5a 	j	80036968 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h669a65bb7584b8e7E+0x274>
80036900:	00000000 	nop
            panic!("SimpleAllocator: out of memory");
80036904:	3c018108 	lui	at,0x8108
80036908:	2425a670 	addiu	a1,at,-22928
8003690c:	27a40048 	addiu	a0,sp,72
80036910:	afa40014 	sw	a0,20(sp)
80036914:	24060001 	li	a2,1
80036918:	0c00d5b0 	jal	800356c0 <_ZN4core3fmt9Arguments9new_const17hd12992beeaf27947E>
8003691c:	00000000 	nop
80036920:	8fa40014 	lw	a0,20(sp)
80036924:	3c018108 	lui	at,0x8108
80036928:	2425a678 	addiu	a1,at,-22920
8003692c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80036930:	00000000 	nop
            &self.memory[start] as *const u8 as *mut u8
80036934:	8fa20020 	lw	v0,32(sp)
80036938:	8fa10030 	lw	at,48(sp)
8003693c:	8c210000 	lw	at,0(at)
80036940:	00220821 	addu	at,at,v0
80036944:	afa10010 	sw	at,16(sp)
80036948:	27a40044 	addiu	a0,sp,68
        }
    }
8003694c:	0c00d5dc 	jal	80035770 <_ZN4core3ptr59drop_in_place$LT$sync..spin..SpinlockGuard$LT$usize$GT$$GT$17hdd6ed9792ea7c554E>
80036950:	00000000 	nop
80036954:	8fa20010 	lw	v0,16(sp)
80036958:	8fbf007c 	lw	ra,124(sp)
8003695c:	27bd0080 	addiu	sp,sp,128
80036960:	03e00008 	jr	ra
80036964:	00000000 	nop
            &self.memory[start] as *const u8 as *mut u8
80036968:	8fa50018 	lw	a1,24(sp)
8003696c:	8fa40020 	lw	a0,32(sp)
80036970:	3c018108 	lui	at,0x8108
80036974:	2426a640 	addiu	a2,at,-22976
80036978:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8003697c:	00000000 	nop

80036980 <_ZN83_$LT$buddy..simple..SimpleAllocator$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h60cbba0684ddd548E>:

    unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {
80036980:	27bdfff0 	addiu	sp,sp,-16
80036984:	afa40000 	sw	a0,0(sp)
80036988:	afa50004 	sw	a1,4(sp)
8003698c:	afa60008 	sw	a2,8(sp)
80036990:	afa7000c 	sw	a3,12(sp)
80036994:	27bd0010 	addiu	sp,sp,16
        // not implemented
    }
80036998:	03e00008 	jr	ra
8003699c:	00000000 	nop

800369a0 <_ZN4core3fmt9Arguments9new_const17hde2ac8fbfaba0b59E>:
    pub const fn new_const(pieces: &'a [&'static str]) -> Self {
800369a0:	27bdffb0 	addiu	sp,sp,-80
800369a4:	afbf004c 	sw	ra,76(sp)
800369a8:	afa60014 	sw	a2,20(sp)
800369ac:	afa50018 	sw	a1,24(sp)
800369b0:	afa4001c 	sw	a0,28(sp)
800369b4:	afa40020 	sw	a0,32(sp)
800369b8:	afa50044 	sw	a1,68(sp)
800369bc:	afa60048 	sw	a2,72(sp)
        if pieces.len() > 1 {
800369c0:	2cc10002 	sltiu	at,a2,2
800369c4:	10200016 	beqz	at,80036a20 <_ZN4core3fmt9Arguments9new_const17hde2ac8fbfaba0b59E+0x80>
800369c8:	00000000 	nop
800369cc:	0800da75 	j	800369d4 <_ZN4core3fmt9Arguments9new_const17hde2ac8fbfaba0b59E+0x34>
800369d0:	00000000 	nop
        Arguments { pieces, fmt: None, args: &[] }
800369d4:	8fa20020 	lw	v0,32(sp)
800369d8:	8fa1001c 	lw	at,28(sp)
800369dc:	8fa30014 	lw	v1,20(sp)
800369e0:	8fa40018 	lw	a0,24(sp)
800369e4:	afa0003c 	sw	zero,60(sp)
800369e8:	ac240000 	sw	a0,0(at)
800369ec:	ac230004 	sw	v1,4(at)
800369f0:	8fa4003c 	lw	a0,60(sp)
800369f4:	8fa30040 	lw	v1,64(sp)
800369f8:	ac240010 	sw	a0,16(at)
800369fc:	ac230014 	sw	v1,20(at)
80036a00:	3c038108 	lui	v1,0x8108
80036a04:	2463a69c 	addiu	v1,v1,-22884
80036a08:	ac230008 	sw	v1,8(at)
80036a0c:	ac20000c 	sw	zero,12(at)
    }
80036a10:	8fbf004c 	lw	ra,76(sp)
80036a14:	27bd0050 	addiu	sp,sp,80
80036a18:	03e00008 	jr	ra
80036a1c:	00000000 	nop
            panic!("invalid args");
80036a20:	3c018108 	lui	at,0x8108
80036a24:	2425a6a8 	addiu	a1,at,-22872
80036a28:	27a40024 	addiu	a0,sp,36
80036a2c:	afa40010 	sw	a0,16(sp)
80036a30:	24060001 	li	a2,1
80036a34:	0c00da68 	jal	800369a0 <_ZN4core3fmt9Arguments9new_const17hde2ac8fbfaba0b59E>
80036a38:	00000000 	nop
80036a3c:	8fa40010 	lw	a0,16(sp)
80036a40:	3c018108 	lui	at,0x8108
80036a44:	2425a720 	addiu	a1,at,-22752
80036a48:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80036a4c:	00000000 	nop

80036a50 <_ZN4core4sync6atomic11AtomicUsize5store17h36157a8618278e0eE>:
            pub fn store(&self, val: $int_type, order: Ordering) {
80036a50:	27bdffd8 	addiu	sp,sp,-40
80036a54:	afbf0024 	sw	ra,36(sp)
80036a58:	afa40014 	sw	a0,20(sp)
80036a5c:	afa50018 	sw	a1,24(sp)
80036a60:	a3a6001f 	sb	a2,31(sp)
80036a64:	afa40020 	sw	a0,32(sp)
                unsafe { atomic_store(self.v.get(), val, order); }
80036a68:	0c00daa0 	jal	80036a80 <_ZN4core4sync6atomic12atomic_store17h2e8cbebea0e987eaE>
80036a6c:	00000000 	nop
            }
80036a70:	8fbf0024 	lw	ra,36(sp)
80036a74:	27bd0028 	addiu	sp,sp,40
80036a78:	03e00008 	jr	ra
80036a7c:	00000000 	nop

80036a80 <_ZN4core4sync6atomic12atomic_store17h2e8cbebea0e987eaE>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
80036a80:	27bdff98 	addiu	sp,sp,-104
80036a84:	afbf0064 	sw	ra,100(sp)
80036a88:	afa5001c 	sw	a1,28(sp)
80036a8c:	afa40020 	sw	a0,32(sp)
80036a90:	a3a6002b 	sb	a2,43(sp)
80036a94:	afa4005c 	sw	a0,92(sp)
80036a98:	afa50060 	sw	a1,96(sp)
        match order {
80036a9c:	93a1002b 	lbu	at,43(sp)
80036aa0:	afa10024 	sw	at,36(sp)
80036aa4:	8fa10024 	lw	at,36(sp)
80036aa8:	00010880 	sll	at,at,0x2
80036aac:	3c028108 	lui	v0,0x8108
80036ab0:	00220821 	addu	at,at,v0
80036ab4:	8c21a688 	lw	at,-22904(at)
80036ab8:	00200008 	jr	at
80036abc:	00000000 	nop
80036ac0:	0000000d 	break
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
80036ac4:	8fa1001c 	lw	at,28(sp)
80036ac8:	8fa20020 	lw	v0,32(sp)
80036acc:	ac410000 	sw	at,0(v0)
80036ad0:	0800dadb 	j	80036b6c <_ZN4core4sync6atomic12atomic_store17h2e8cbebea0e987eaE+0xec>
80036ad4:	00000000 	nop
            Release => intrinsics::atomic_store_release(dst, val),
80036ad8:	8fa1001c 	lw	at,28(sp)
80036adc:	8fa20020 	lw	v0,32(sp)
80036ae0:	0000000f 	sync
80036ae4:	ac410000 	sw	at,0(v0)
80036ae8:	0800dadb 	j	80036b6c <_ZN4core4sync6atomic12atomic_store17h2e8cbebea0e987eaE+0xec>
80036aec:	00000000 	nop
            Acquire => panic!("there is no such thing as an acquire store"),
80036af0:	3c018108 	lui	at,0x8108
80036af4:	2425a75c 	addiu	a1,at,-22692
80036af8:	27a4002c 	addiu	a0,sp,44
80036afc:	afa40018 	sw	a0,24(sp)
80036b00:	24060001 	li	a2,1
80036b04:	0c00da68 	jal	800369a0 <_ZN4core3fmt9Arguments9new_const17hde2ac8fbfaba0b59E>
80036b08:	00000000 	nop
80036b0c:	8fa40018 	lw	a0,24(sp)
80036b10:	3c018108 	lui	at,0x8108
80036b14:	2425a7d8 	addiu	a1,at,-22568
80036b18:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80036b1c:	00000000 	nop
            AcqRel => panic!("there is no such thing as an acquire-release store"),
80036b20:	3c018108 	lui	at,0x8108
80036b24:	2425a81c 	addiu	a1,at,-22500
80036b28:	27a40044 	addiu	a0,sp,68
80036b2c:	afa40014 	sw	a0,20(sp)
80036b30:	24060001 	li	a2,1
80036b34:	0c00da68 	jal	800369a0 <_ZN4core3fmt9Arguments9new_const17hde2ac8fbfaba0b59E>
80036b38:	00000000 	nop
80036b3c:	8fa40014 	lw	a0,20(sp)
80036b40:	3c018108 	lui	at,0x8108
80036b44:	2425a824 	addiu	a1,at,-22492
80036b48:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80036b4c:	00000000 	nop
            SeqCst => intrinsics::atomic_store_seqcst(dst, val),
80036b50:	8fa1001c 	lw	at,28(sp)
80036b54:	8fa20020 	lw	v0,32(sp)
80036b58:	0000000f 	sync
80036b5c:	ac410000 	sw	at,0(v0)
80036b60:	0000000f 	sync
80036b64:	0800dadb 	j	80036b6c <_ZN4core4sync6atomic12atomic_store17h2e8cbebea0e987eaE+0xec>
80036b68:	00000000 	nop
}
80036b6c:	8fbf0064 	lw	ra,100(sp)
80036b70:	27bd0068 	addiu	sp,sp,104
80036b74:	03e00008 	jr	ra
80036b78:	00000000 	nop

80036b7c <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb39f41787bed263eE>:
    state: &'a AtomicUsize,
    panicked: bool,
}

impl<'a> Drop for Finish<'a> {
    fn drop(&mut self) {
80036b7c:	27bdffe0 	addiu	sp,sp,-32
80036b80:	afbf001c 	sw	ra,28(sp)
80036b84:	afa40010 	sw	a0,16(sp)
80036b88:	afa40018 	sw	a0,24(sp)
        if self.panicked {
80036b8c:	90810004 	lbu	at,4(a0)
80036b90:	30210001 	andi	at,at,0x1
80036b94:	14200007 	bnez	at,80036bb4 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb39f41787bed263eE+0x38>
80036b98:	00000000 	nop
80036b9c:	0800dae9 	j	80036ba4 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb39f41787bed263eE+0x28>
80036ba0:	00000000 	nop
            self.state.store(PANICKED, Ordering::SeqCst);
        }
    }
80036ba4:	8fbf001c 	lw	ra,28(sp)
80036ba8:	27bd0020 	addiu	sp,sp,32
80036bac:	03e00008 	jr	ra
80036bb0:	00000000 	nop
            self.state.store(PANICKED, Ordering::SeqCst);
80036bb4:	8fa10010 	lw	at,16(sp)
80036bb8:	8c240000 	lw	a0,0(at)
80036bbc:	24010004 	li	at,4
80036bc0:	a3a10017 	sb	at,23(sp)
80036bc4:	93a60017 	lbu	a2,23(sp)
80036bc8:	24050003 	li	a1,3
80036bcc:	0c00da94 	jal	80036a50 <_ZN4core4sync6atomic11AtomicUsize5store17h36157a8618278e0eE>
80036bd0:	00000000 	nop
80036bd4:	0800dae9 	j	80036ba4 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb39f41787bed263eE+0x28>
80036bd8:	00000000 	nop

80036bdc <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17hdecfcf5c197a58d9E>:
    fn from(unique: Unique<T>) -> Self {
80036bdc:	27bdffe8 	addiu	sp,sp,-24
80036be0:	afbf0014 	sw	ra,20(sp)
80036be4:	afa40010 	sw	a0,16(sp)
        unique.as_non_null_ptr()
80036be8:	0c00dd1a 	jal	80037468 <_ZN4core3ptr6unique15Unique$LT$T$GT$15as_non_null_ptr17h03a0340f5557557cE>
80036bec:	00000000 	nop
    }
80036bf0:	8fbf0014 	lw	ra,20(sp)
80036bf4:	27bd0018 	addiu	sp,sp,24
80036bf8:	03e00008 	jr	ra
80036bfc:	00000000 	nop

80036c00 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h491e696a56edf9eeE>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
80036c00:	27bdffe0 	addiu	sp,sp,-32
80036c04:	afa40000 	sw	a0,0(sp)
80036c08:	afa50004 	sw	a1,4(sp)
            Err(e) => Err(From::from(e)),
80036c0c:	8fa20000 	lw	v0,0(sp)
80036c10:	8fa10004 	lw	at,4(sp)
80036c14:	afa20010 	sw	v0,16(sp)
80036c18:	afa10014 	sw	at,20(sp)
80036c1c:	afa20018 	sw	v0,24(sp)
80036c20:	afa1001c 	sw	at,28(sp)
80036c24:	afa20008 	sw	v0,8(sp)
80036c28:	afa1000c 	sw	at,12(sp)
    }
80036c2c:	8fa20008 	lw	v0,8(sp)
80036c30:	8fa3000c 	lw	v1,12(sp)
80036c34:	27bd0020 	addiu	sp,sp,32
80036c38:	03e00008 	jr	ra
80036c3c:	00000000 	nop

80036c40 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h64c4e0aa33532904E>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
80036c40:	27bdffd0 	addiu	sp,sp,-48
80036c44:	afbf002c 	sw	ra,44(sp)
80036c48:	afa40014 	sw	a0,20(sp)
80036c4c:	afa40018 	sw	a0,24(sp)
80036c50:	afa5001c 	sw	a1,28(sp)
80036c54:	afa60020 	sw	a2,32(sp)
            Err(e) => Err(From::from(e)),
80036c58:	8fa4001c 	lw	a0,28(sp)
80036c5c:	8fa50020 	lw	a1,32(sp)
80036c60:	afa40024 	sw	a0,36(sp)
80036c64:	afa50028 	sw	a1,40(sp)
80036c68:	0c00e3a1 	jal	80038e84 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17h136c3be8ef9c5cdbE>
80036c6c:	00000000 	nop
80036c70:	8fa40014 	lw	a0,20(sp)
80036c74:	00400825 	move	at,v0
80036c78:	8fa20018 	lw	v0,24(sp)
80036c7c:	ac810004 	sw	at,4(a0)
80036c80:	ac830008 	sw	v1,8(a0)
80036c84:	24010001 	li	at,1
80036c88:	ac810000 	sw	at,0(a0)
    }
80036c8c:	8fbf002c 	lw	ra,44(sp)
80036c90:	27bd0030 	addiu	sp,sp,48
80036c94:	03e00008 	jr	ra
80036c98:	00000000 	nop

80036c9c <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h76db6800faa68b03E>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
80036c9c:	27bdffd0 	addiu	sp,sp,-48
80036ca0:	afbf002c 	sw	ra,44(sp)
80036ca4:	afa40014 	sw	a0,20(sp)
80036ca8:	afa50018 	sw	a1,24(sp)
            Err(e) => Err(From::from(e)),
80036cac:	8fa40014 	lw	a0,20(sp)
80036cb0:	8fa50018 	lw	a1,24(sp)
80036cb4:	afa40024 	sw	a0,36(sp)
80036cb8:	afa50028 	sw	a1,40(sp)
80036cbc:	0c00e3a1 	jal	80038e84 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17h136c3be8ef9c5cdbE>
80036cc0:	00000000 	nop
80036cc4:	afa2001c 	sw	v0,28(sp)
80036cc8:	afa30020 	sw	v1,32(sp)
    }
80036ccc:	8fa2001c 	lw	v0,28(sp)
80036cd0:	8fa30020 	lw	v1,32(sp)
80036cd4:	8fbf002c 	lw	ra,44(sp)
80036cd8:	27bd0030 	addiu	sp,sp,48
80036cdc:	03e00008 	jr	ra
80036ce0:	00000000 	nop

80036ce4 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h8156b4d53ed91be5E>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
80036ce4:	27bdffe8 	addiu	sp,sp,-24
80036ce8:	00801025 	move	v0,a0
80036cec:	afa50000 	sw	a1,0(sp)
80036cf0:	afa60004 	sw	a2,4(sp)
            Err(e) => Err(From::from(e)),
80036cf4:	8fa30000 	lw	v1,0(sp)
80036cf8:	8fa10004 	lw	at,4(sp)
80036cfc:	afa30008 	sw	v1,8(sp)
80036d00:	afa1000c 	sw	at,12(sp)
80036d04:	afa30010 	sw	v1,16(sp)
80036d08:	afa10014 	sw	at,20(sp)
80036d0c:	ac830004 	sw	v1,4(a0)
80036d10:	ac810008 	sw	at,8(a0)
80036d14:	24010001 	li	at,1
80036d18:	ac810000 	sw	at,0(a0)
80036d1c:	27bd0018 	addiu	sp,sp,24
    }
80036d20:	03e00008 	jr	ra
80036d24:	00000000 	nop

80036d28 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hb6ff685e17a0e3feE>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
80036d28:	27bdfff0 	addiu	sp,sp,-16
            Err(e) => Err(From::from(e)),
80036d2c:	afa00004 	sw	zero,4(sp)
    }
80036d30:	8fa20004 	lw	v0,4(sp)
80036d34:	8fa30008 	lw	v1,8(sp)
80036d38:	27bd0010 	addiu	sp,sp,16
80036d3c:	03e00008 	jr	ra
80036d40:	00000000 	nop

80036d44 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h053a40136b7b5e8cE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
80036d44:	27bdffe0 	addiu	sp,sp,-32
80036d48:	afbf001c 	sw	ra,28(sp)
80036d4c:	00a03025 	move	a2,a1
80036d50:	00800825 	move	at,a0
80036d54:	afa10014 	sw	at,20(sp)
80036d58:	afa60018 	sw	a2,24(sp)
80036d5c:	8c240000 	lw	a0,0(at)
80036d60:	8c250004 	lw	a1,4(at)
80036d64:	0c010207 	jal	8004081c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E>
80036d68:	00000000 	nop
80036d6c:	8fbf001c 	lw	ra,28(sp)
80036d70:	27bd0020 	addiu	sp,sp,32
80036d74:	03e00008 	jr	ra
80036d78:	00000000 	nop

80036d7c <_ZN4core10intrinsics11write_bytes18precondition_check17hb30bbc705cf97fb4E>:
            const fn precondition_check($($name:$ty),*) {
80036d7c:	27bdffe0 	addiu	sp,sp,-32
80036d80:	afbf001c 	sw	ra,28(sp)
80036d84:	afa40014 	sw	a0,20(sp)
80036d88:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80036d8c:	0c00df1a 	jal	80037c68 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E>
80036d90:	00000000 	nop
80036d94:	14400008 	bnez	v0,80036db8 <_ZN4core10intrinsics11write_bytes18precondition_check17hb30bbc705cf97fb4E+0x3c>
80036d98:	00000000 	nop
80036d9c:	0800db69 	j	80036da4 <_ZN4core10intrinsics11write_bytes18precondition_check17hb30bbc705cf97fb4E+0x28>
80036da0:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80036da4:	3c018108 	lui	at,0x8108
80036da8:	2424a834 	addiu	a0,at,-22476
80036dac:	2405006f 	li	a1,111
80036db0:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80036db4:	00000000 	nop
            }
80036db8:	8fbf001c 	lw	ra,28(sp)
80036dbc:	27bd0020 	addiu	sp,sp,32
80036dc0:	03e00008 	jr	ra
80036dc4:	00000000 	nop

80036dc8 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E>:
            const fn precondition_check($($name:$ty),*) {
80036dc8:	27bdffc8 	addiu	sp,sp,-56
80036dcc:	afbf0034 	sw	ra,52(sp)
80036dd0:	afa70014 	sw	a3,20(sp)
80036dd4:	afa60010 	sw	a2,16(sp)
80036dd8:	00a00825 	move	at,a1
80036ddc:	8fa50014 	lw	a1,20(sp)
80036de0:	afa10018 	sw	at,24(sp)
80036de4:	afa4001c 	sw	a0,28(sp)
80036de8:	8fa20048 	lw	v0,72(sp)
80036dec:	afa20020 	sw	v0,32(sp)
80036df0:	afa40024 	sw	a0,36(sp)
80036df4:	afa10028 	sw	at,40(sp)
80036df8:	afa6002c 	sw	a2,44(sp)
80036dfc:	afa50030 	sw	a1,48(sp)
        ub_checks::is_aligned_and_not_null(src, align)
80036e00:	0c00df1a 	jal	80037c68 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E>
80036e04:	00000000 	nop
80036e08:	14400008 	bnez	v0,80036e2c <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E+0x64>
80036e0c:	00000000 	nop
80036e10:	0800db86 	j	80036e18 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E+0x50>
80036e14:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80036e18:	3c018108 	lui	at,0x8108
80036e1c:	2424a8a3 	addiu	a0,at,-22365
80036e20:	240500a6 	li	a1,166
80036e24:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80036e28:	00000000 	nop
            && ub_checks::is_aligned_and_not_null(dst, align)
80036e2c:	8fa50014 	lw	a1,20(sp)
80036e30:	8fa40018 	lw	a0,24(sp)
80036e34:	0c00df1a 	jal	80037c68 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E>
80036e38:	00000000 	nop
80036e3c:	1040fff6 	beqz	v0,80036e18 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E+0x50>
80036e40:	00000000 	nop
80036e44:	0800db93 	j	80036e4c <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E+0x84>
80036e48:	00000000 	nop
            && ub_checks::is_nonoverlapping(src, dst, size, count)
80036e4c:	8fa70020 	lw	a3,32(sp)
80036e50:	8fa60010 	lw	a2,16(sp)
80036e54:	8fa50018 	lw	a1,24(sp)
80036e58:	8fa4001c 	lw	a0,28(sp)
80036e5c:	0c00ded2 	jal	80037b48 <_ZN4core9ub_checks17is_nonoverlapping17h9bdec536d9cabb31E>
80036e60:	00000000 	nop
80036e64:	1040ffec 	beqz	v0,80036e18 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E+0x50>
80036e68:	00000000 	nop
80036e6c:	0800db9d 	j	80036e74 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E+0xac>
80036e70:	00000000 	nop
            }
80036e74:	8fbf0034 	lw	ra,52(sp)
80036e78:	27bd0038 	addiu	sp,sp,56
80036e7c:	03e00008 	jr	ra
80036e80:	00000000 	nop

80036e84 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE>:
    pub fn new_v1(pieces: &'a [&'static str], args: &'a [rt::Argument<'a>]) -> Arguments<'a> {
80036e84:	27bdff98 	addiu	sp,sp,-104
80036e88:	afbf0064 	sw	ra,100(sp)
80036e8c:	afa7001c 	sw	a3,28(sp)
80036e90:	afa60020 	sw	a2,32(sp)
80036e94:	afa50024 	sw	a1,36(sp)
80036e98:	afa40028 	sw	a0,40(sp)
80036e9c:	afa4002c 	sw	a0,44(sp)
80036ea0:	8fa10078 	lw	at,120(sp)
80036ea4:	afa10030 	sw	at,48(sp)
80036ea8:	afa50054 	sw	a1,84(sp)
80036eac:	afa60058 	sw	a2,88(sp)
80036eb0:	afa7005c 	sw	a3,92(sp)
80036eb4:	afa10060 	sw	at,96(sp)
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
80036eb8:	00c1082b 	sltu	at,a2,at
80036ebc:	1420000a 	bnez	at,80036ee8 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE+0x64>
80036ec0:	00000000 	nop
80036ec4:	0800dbb3 	j	80036ecc <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE+0x48>
80036ec8:	00000000 	nop
80036ecc:	8fa10030 	lw	at,48(sp)
80036ed0:	24210001 	addiu	at,at,1
80036ed4:	afa10018 	sw	at,24(sp)
80036ed8:	10200016 	beqz	at,80036f34 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE+0xb0>
80036edc:	00000000 	nop
80036ee0:	0800dbc6 	j	80036f18 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE+0x94>
80036ee4:	00000000 	nop
            panic!("invalid args");
80036ee8:	3c018108 	lui	at,0x8108
80036eec:	2425a9d4 	addiu	a1,at,-22060
80036ef0:	27a40034 	addiu	a0,sp,52
80036ef4:	afa40014 	sw	a0,20(sp)
80036ef8:	24060001 	li	a2,1
80036efc:	0c00dbe4 	jal	80036f90 <_ZN4core3fmt9Arguments9new_const17h2470b053bfe06b9fE>
80036f00:	00000000 	nop
80036f04:	8fa40014 	lw	a0,20(sp)
80036f08:	3c018108 	lui	at,0x8108
80036f0c:	2425a9dc 	addiu	a1,at,-22052
80036f10:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80036f14:	00000000 	nop
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
80036f18:	8fa10018 	lw	at,24(sp)
80036f1c:	8fa20020 	lw	v0,32(sp)
80036f20:	0022082b 	sltu	at,at,v0
80036f24:	1420fff0 	bnez	at,80036ee8 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE+0x64>
80036f28:	00000000 	nop
80036f2c:	0800dbd1 	j	80036f44 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE+0xc0>
80036f30:	00000000 	nop
80036f34:	3c018108 	lui	at,0x8108
80036f38:	2424a9b8 	addiu	a0,at,-22088
80036f3c:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80036f40:	00000000 	nop
        Arguments { pieces, fmt: None, args }
80036f44:	8fa2002c 	lw	v0,44(sp)
80036f48:	8fa10030 	lw	at,48(sp)
80036f4c:	8fa30028 	lw	v1,40(sp)
80036f50:	8fa4001c 	lw	a0,28(sp)
80036f54:	8fa50020 	lw	a1,32(sp)
80036f58:	8fa60024 	lw	a2,36(sp)
80036f5c:	afa0004c 	sw	zero,76(sp)
80036f60:	ac660000 	sw	a2,0(v1)
80036f64:	ac650004 	sw	a1,4(v1)
80036f68:	8fa6004c 	lw	a2,76(sp)
80036f6c:	8fa50050 	lw	a1,80(sp)
80036f70:	ac660010 	sw	a2,16(v1)
80036f74:	ac650014 	sw	a1,20(v1)
80036f78:	ac640008 	sw	a0,8(v1)
80036f7c:	ac61000c 	sw	at,12(v1)
    }
80036f80:	8fbf0064 	lw	ra,100(sp)
80036f84:	27bd0068 	addiu	sp,sp,104
80036f88:	03e00008 	jr	ra
80036f8c:	00000000 	nop

80036f90 <_ZN4core3fmt9Arguments9new_const17h2470b053bfe06b9fE>:
    pub const fn new_const(pieces: &'a [&'static str]) -> Self {
80036f90:	27bdffb0 	addiu	sp,sp,-80
80036f94:	afbf004c 	sw	ra,76(sp)
80036f98:	afa60014 	sw	a2,20(sp)
80036f9c:	afa50018 	sw	a1,24(sp)
80036fa0:	afa4001c 	sw	a0,28(sp)
80036fa4:	afa40020 	sw	a0,32(sp)
80036fa8:	afa50044 	sw	a1,68(sp)
80036fac:	afa60048 	sw	a2,72(sp)
        if pieces.len() > 1 {
80036fb0:	2cc10002 	sltiu	at,a2,2
80036fb4:	10200016 	beqz	at,80037010 <_ZN4core3fmt9Arguments9new_const17h2470b053bfe06b9fE+0x80>
80036fb8:	00000000 	nop
80036fbc:	0800dbf1 	j	80036fc4 <_ZN4core3fmt9Arguments9new_const17h2470b053bfe06b9fE+0x34>
80036fc0:	00000000 	nop
        Arguments { pieces, fmt: None, args: &[] }
80036fc4:	8fa20020 	lw	v0,32(sp)
80036fc8:	8fa1001c 	lw	at,28(sp)
80036fcc:	8fa30014 	lw	v1,20(sp)
80036fd0:	8fa40018 	lw	a0,24(sp)
80036fd4:	afa0003c 	sw	zero,60(sp)
80036fd8:	ac240000 	sw	a0,0(at)
80036fdc:	ac230004 	sw	v1,4(at)
80036fe0:	8fa4003c 	lw	a0,60(sp)
80036fe4:	8fa30040 	lw	v1,64(sp)
80036fe8:	ac240010 	sw	a0,16(at)
80036fec:	ac230014 	sw	v1,20(at)
80036ff0:	3c038108 	lui	v1,0x8108
80036ff4:	2463a9b8 	addiu	v1,v1,-22088
80036ff8:	ac230008 	sw	v1,8(at)
80036ffc:	ac20000c 	sw	zero,12(at)
    }
80037000:	8fbf004c 	lw	ra,76(sp)
80037004:	27bd0050 	addiu	sp,sp,80
80037008:	03e00008 	jr	ra
8003700c:	00000000 	nop
            panic!("invalid args");
80037010:	3c018108 	lui	at,0x8108
80037014:	2425a9d4 	addiu	a1,at,-22060
80037018:	27a40024 	addiu	a0,sp,36
8003701c:	afa40010 	sw	a0,16(sp)
80037020:	24060001 	li	a2,1
80037024:	0c00dbe4 	jal	80036f90 <_ZN4core3fmt9Arguments9new_const17h2470b053bfe06b9fE>
80037028:	00000000 	nop
8003702c:	8fa40010 	lw	a0,16(sp)
80037030:	3c018108 	lui	at,0x8108
80037034:	2425a9ec 	addiu	a1,at,-22036
80037038:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003703c:	00000000 	nop

80037040 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE>:
        pub const fn abs(self) -> Self {
80037040:	27bdffe0 	addiu	sp,sp,-32
80037044:	afa40010 	sw	a0,16(sp)
80037048:	afa40018 	sw	a0,24(sp)
8003704c:	afa4001c 	sw	a0,28(sp)
            if self.is_negative() {
80037050:	04800007 	bltz	a0,80037070 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE+0x30>
80037054:	00000000 	nop
80037058:	0800dc18 	j	80037060 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE+0x20>
8003705c:	00000000 	nop
                self
80037060:	8fa10010 	lw	at,16(sp)
80037064:	afa10014 	sw	at,20(sp)
            if self.is_negative() {
80037068:	0800dc22 	j	80037088 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE+0x48>
8003706c:	00000000 	nop
80037070:	8fa10010 	lw	at,16(sp)
80037074:	3c028000 	lui	v0,0x8000
                -self
80037078:	1022000d 	beq	at,v0,800370b0 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE+0x70>
8003707c:	00000000 	nop
80037080:	0800dc26 	j	80037098 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE+0x58>
80037084:	00000000 	nop
        }
80037088:	8fa20014 	lw	v0,20(sp)
8003708c:	27bd0020 	addiu	sp,sp,32
80037090:	03e00008 	jr	ra
80037094:	00000000 	nop
80037098:	8fa10010 	lw	at,16(sp)
8003709c:	24020000 	li	v0,0
                -self
800370a0:	00010823 	negu	at,at
800370a4:	afa10014 	sw	at,20(sp)
            if self.is_negative() {
800370a8:	0800dc22 	j	80037088 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE+0x48>
800370ac:	00000000 	nop
                -self
800370b0:	3c018108 	lui	at,0x8108
800370b4:	2424aa6c 	addiu	a0,at,-21908
800370b8:	0c011b46 	jal	80046d18 <_ZN4core9panicking11panic_const24panic_const_neg_overflow17h933ac1df2ff681f7E>
800370bc:	00000000 	nop

800370c0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17he7df2978cdc70b82E>:
        pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
800370c0:	27bdffc8 	addiu	sp,sp,-56
800370c4:	afa40010 	sw	a0,16(sp)
800370c8:	afa50014 	sw	a1,20(sp)
800370cc:	afa40028 	sw	a0,40(sp)
800370d0:	afa5002c 	sw	a1,44(sp)
            let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
800370d4:	00850019 	multu	a0,a1
800370d8:	00000810 	mfhi	at
800370dc:	0001082b 	sltu	at,zero,at
800370e0:	70851002 	mul	v0,a0,a1
800370e4:	afa20030 	sw	v0,48(sp)
800370e8:	a3a10037 	sb	at,55(sp)
            (a as Self, b)
800370ec:	afa20020 	sw	v0,32(sp)
800370f0:	a3a10024 	sb	at,36(sp)
        }
800370f4:	8fa20020 	lw	v0,32(sp)
800370f8:	afa20004 	sw	v0,4(sp)
800370fc:	93a10024 	lbu	at,36(sp)
            let (a, b) = self.overflowing_mul(rhs);
80037100:	afa20018 	sw	v0,24(sp)
80037104:	30210001 	andi	at,at,0x1
80037108:	a3a1001e 	sb	at,30(sp)
            if unlikely!(b) { None } else { Some(a) }
8003710c:	a3a1001f 	sb	at,31(sp)
80037110:	93a1001f 	lbu	at,31(sp)
80037114:	30210001 	andi	at,at,0x1
80037118:	14200009 	bnez	at,80037140 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17he7df2978cdc70b82E+0x80>
8003711c:	00000000 	nop
80037120:	0800dc4a 	j	80037128 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17he7df2978cdc70b82E+0x68>
80037124:	00000000 	nop
80037128:	8fa10004 	lw	at,4(sp)
8003712c:	afa1000c 	sw	at,12(sp)
80037130:	24010001 	li	at,1
80037134:	afa10008 	sw	at,8(sp)
80037138:	0800dc53 	j	8003714c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17he7df2978cdc70b82E+0x8c>
8003713c:	00000000 	nop
80037140:	afa00008 	sw	zero,8(sp)
80037144:	0800dc53 	j	8003714c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17he7df2978cdc70b82E+0x8c>
80037148:	00000000 	nop
        }
8003714c:	8fa20008 	lw	v0,8(sp)
80037150:	8fa3000c 	lw	v1,12(sp)
80037154:	27bd0038 	addiu	sp,sp,56
80037158:	03e00008 	jr	ra
8003715c:	00000000 	nop

80037160 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E>:
        pub const fn abs_diff(self, other: Self) -> Self {
80037160:	27bdffc8 	addiu	sp,sp,-56
80037164:	afbf0034 	sw	ra,52(sp)
80037168:	afa50018 	sw	a1,24(sp)
8003716c:	afa4001c 	sw	a0,28(sp)
80037170:	afa40024 	sw	a0,36(sp)
80037174:	afa50028 	sw	a1,40(sp)
80037178:	24010001 	li	at,1
            if mem::size_of::<Self>() == 1 {
8003717c:	1420000d 	bnez	at,800371b4 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0x54>
80037180:	00000000 	nop
80037184:	0800dc63 	j	8003718c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0x2c>
80037188:	00000000 	nop
8003718c:	8fa1001c 	lw	at,28(sp)
80037190:	8fa20018 	lw	v0,24(sp)
80037194:	afa1002c 	sw	at,44(sp)
80037198:	afa20030 	sw	v0,48(sp)
            intrinsics::wrapping_sub(self, rhs)
8003719c:	00222023 	subu	a0,at,v0
                (self as i32).wrapping_sub(other as i32).abs() as Self
800371a0:	0c00dc10 	jal	80037040 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17hc36c912bc65620afE>
800371a4:	00000000 	nop
800371a8:	afa20020 	sw	v0,32(sp)
            if mem::size_of::<Self>() == 1 {
800371ac:	0800dc74 	j	800371d0 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0x70>
800371b0:	00000000 	nop
                if self < other {
800371b4:	8fa1001c 	lw	at,28(sp)
800371b8:	8fa20018 	lw	v0,24(sp)
800371bc:	0022082b 	sltu	at,at,v0
800371c0:	14200011 	bnez	at,80037208 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0xa8>
800371c4:	00000000 	nop
800371c8:	0800dc79 	j	800371e4 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0x84>
800371cc:	00000000 	nop
        }
800371d0:	8fa20020 	lw	v0,32(sp)
800371d4:	8fbf0034 	lw	ra,52(sp)
800371d8:	27bd0038 	addiu	sp,sp,56
800371dc:	03e00008 	jr	ra
800371e0:	00000000 	nop
                    self - other
800371e4:	8fa1001c 	lw	at,28(sp)
800371e8:	8fa20018 	lw	v0,24(sp)
800371ec:	00221823 	subu	v1,at,v0
800371f0:	afa30014 	sw	v1,20(sp)
800371f4:	0022082b 	sltu	at,at,v0
800371f8:	14200010 	bnez	at,8003723c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0xdc>
800371fc:	00000000 	nop
80037200:	0800dc8b 	j	8003722c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0xcc>
80037204:	00000000 	nop
                    other - self
80037208:	8fa10018 	lw	at,24(sp)
8003720c:	8fa2001c 	lw	v0,28(sp)
80037210:	00221823 	subu	v1,at,v0
80037214:	afa30010 	sw	v1,16(sp)
80037218:	0022082b 	sltu	at,at,v0
8003721c:	1420000f 	bnez	at,8003725c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0xfc>
80037220:	00000000 	nop
80037224:	0800dc93 	j	8003724c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0xec>
80037228:	00000000 	nop
                    self - other
8003722c:	8fa10014 	lw	at,20(sp)
80037230:	afa10020 	sw	at,32(sp)
                if self < other {
80037234:	0800dc74 	j	800371d0 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0x70>
80037238:	00000000 	nop
                    self - other
8003723c:	3c018108 	lui	at,0x8108
80037240:	2424aa7c 	addiu	a0,at,-21892
80037244:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80037248:	00000000 	nop
                    other - self
8003724c:	8fa10010 	lw	at,16(sp)
80037250:	afa10020 	sw	at,32(sp)
                if self < other {
80037254:	0800dc74 	j	800371d0 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E+0x70>
80037258:	00000000 	nop
                    other - self
8003725c:	3c018108 	lui	at,0x8108
80037260:	2424aa7c 	addiu	a0,at,-21892
80037264:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80037268:	00000000 	nop

8003726c <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E>:
pub unsafe fn read_volatile<T>(src: *const T) -> T {
8003726c:	27bdffe0 	addiu	sp,sp,-32
80037270:	afbf001c 	sw	ra,28(sp)
80037274:	afa40010 	sw	a0,16(sp)
80037278:	afa40014 	sw	a0,20(sp)
        ub_checks::assert_unsafe_precondition!(
8003727c:	0c00dec0 	jal	80037b00 <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
80037280:	00000000 	nop
80037284:	1440000b 	bnez	v0,800372b4 <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E+0x48>
80037288:	00000000 	nop
8003728c:	0800dca5 	j	80037294 <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E+0x28>
80037290:	00000000 	nop
        intrinsics::volatile_load(src)
80037294:	8fa10010 	lw	at,16(sp)
80037298:	90210000 	lbu	at,0(at)
8003729c:	a3a1001b 	sb	at,27(sp)
}
800372a0:	93a2001b 	lbu	v0,27(sp)
800372a4:	8fbf001c 	lw	ra,28(sp)
800372a8:	27bd0020 	addiu	sp,sp,32
800372ac:	03e00008 	jr	ra
800372b0:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800372b4:	8fa40010 	lw	a0,16(sp)
800372b8:	24050001 	li	a1,1
800372bc:	0c00dcb3 	jal	800372cc <_ZN4core3ptr13read_volatile18precondition_check17ha41bf3002e470377E>
800372c0:	00000000 	nop
800372c4:	0800dca5 	j	80037294 <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E+0x28>
800372c8:	00000000 	nop

800372cc <_ZN4core3ptr13read_volatile18precondition_check17ha41bf3002e470377E>:
            const fn precondition_check($($name:$ty),*) {
800372cc:	27bdffe0 	addiu	sp,sp,-32
800372d0:	afbf001c 	sw	ra,28(sp)
800372d4:	afa40014 	sw	a0,20(sp)
800372d8:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
800372dc:	0c00df1a 	jal	80037c68 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E>
800372e0:	00000000 	nop
800372e4:	14400008 	bnez	v0,80037308 <_ZN4core3ptr13read_volatile18precondition_check17ha41bf3002e470377E+0x3c>
800372e8:	00000000 	nop
800372ec:	0800dcbd 	j	800372f4 <_ZN4core3ptr13read_volatile18precondition_check17ha41bf3002e470377E+0x28>
800372f0:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800372f4:	3c018108 	lui	at,0x8108
800372f8:	2424aa8c 	addiu	a0,at,-21876
800372fc:	2405006e 	li	a1,110
80037300:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80037304:	00000000 	nop
            }
80037308:	8fbf001c 	lw	ra,28(sp)
8003730c:	27bd0020 	addiu	sp,sp,32
80037310:	03e00008 	jr	ra
80037314:	00000000 	nop

80037318 <_ZN4core3ptr4read17h0aafdd8ed9711880E>:
pub const unsafe fn read<T>(src: *const T) -> T {
80037318:	27bdffe0 	addiu	sp,sp,-32
8003731c:	afbf001c 	sw	ra,28(sp)
80037320:	afa40014 	sw	a0,20(sp)
80037324:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80037328:	0c00dec0 	jal	80037b00 <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
8003732c:	00000000 	nop
80037330:	14400007 	bnez	v0,80037350 <_ZN4core3ptr4read17h0aafdd8ed9711880E+0x38>
80037334:	00000000 	nop
80037338:	0800dcd0 	j	80037340 <_ZN4core3ptr4read17h0aafdd8ed9711880E+0x28>
8003733c:	00000000 	nop
}
80037340:	8fbf001c 	lw	ra,28(sp)
80037344:	27bd0020 	addiu	sp,sp,32
80037348:	03e00008 	jr	ra
8003734c:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80037350:	8fa40014 	lw	a0,20(sp)
80037354:	24050001 	li	a1,1
80037358:	0c00dcda 	jal	80037368 <_ZN4core3ptr4read18precondition_check17ha141e0efafa76268E>
8003735c:	00000000 	nop
80037360:	0800dcd0 	j	80037340 <_ZN4core3ptr4read17h0aafdd8ed9711880E+0x28>
80037364:	00000000 	nop

80037368 <_ZN4core3ptr4read18precondition_check17ha141e0efafa76268E>:
            const fn precondition_check($($name:$ty),*) {
80037368:	27bdffe0 	addiu	sp,sp,-32
8003736c:	afbf001c 	sw	ra,28(sp)
80037370:	afa40014 	sw	a0,20(sp)
80037374:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80037378:	0c00df1a 	jal	80037c68 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E>
8003737c:	00000000 	nop
80037380:	14400008 	bnez	v0,800373a4 <_ZN4core3ptr4read18precondition_check17ha141e0efafa76268E+0x3c>
80037384:	00000000 	nop
80037388:	0800dce4 	j	80037390 <_ZN4core3ptr4read18precondition_check17ha141e0efafa76268E+0x28>
8003738c:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80037390:	3c018108 	lui	at,0x8108
80037394:	2424aafa 	addiu	a0,at,-21766
80037398:	24050065 	li	a1,101
8003739c:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800373a0:	00000000 	nop
            }
800373a4:	8fbf001c 	lw	ra,28(sp)
800373a8:	27bd0020 	addiu	sp,sp,32
800373ac:	03e00008 	jr	ra
800373b0:	00000000 	nop

800373b4 <_ZN4core3ptr5write17heb431dbdaac243d9E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
800373b4:	27bdffd8 	addiu	sp,sp,-40
800373b8:	afbf0024 	sw	ra,36(sp)
800373bc:	afa40014 	sw	a0,20(sp)
800373c0:	00a00825 	move	at,a1
800373c4:	afa10018 	sw	at,24(sp)
800373c8:	afa4001c 	sw	a0,28(sp)
800373cc:	a3a50023 	sb	a1,35(sp)
        ub_checks::assert_unsafe_precondition!(
800373d0:	0c00dec0 	jal	80037b00 <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
800373d4:	00000000 	nop
800373d8:	1440000a 	bnez	v0,80037404 <_ZN4core3ptr5write17heb431dbdaac243d9E+0x50>
800373dc:	00000000 	nop
800373e0:	0800dcfa 	j	800373e8 <_ZN4core3ptr5write17heb431dbdaac243d9E+0x34>
800373e4:	00000000 	nop
        intrinsics::write_via_move(dst, src)
800373e8:	8fa10018 	lw	at,24(sp)
800373ec:	8fa20014 	lw	v0,20(sp)
800373f0:	a0410000 	sb	at,0(v0)
}
800373f4:	8fbf0024 	lw	ra,36(sp)
800373f8:	27bd0028 	addiu	sp,sp,40
800373fc:	03e00008 	jr	ra
80037400:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80037404:	8fa40014 	lw	a0,20(sp)
80037408:	24050001 	li	a1,1
8003740c:	0c00dd07 	jal	8003741c <_ZN4core3ptr5write18precondition_check17h0e280678aa8b5e7eE>
80037410:	00000000 	nop
80037414:	0800dcfa 	j	800373e8 <_ZN4core3ptr5write17heb431dbdaac243d9E+0x34>
80037418:	00000000 	nop

8003741c <_ZN4core3ptr5write18precondition_check17h0e280678aa8b5e7eE>:
            const fn precondition_check($($name:$ty),*) {
8003741c:	27bdffe0 	addiu	sp,sp,-32
80037420:	afbf001c 	sw	ra,28(sp)
80037424:	afa40014 	sw	a0,20(sp)
80037428:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
8003742c:	0c00df1a 	jal	80037c68 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E>
80037430:	00000000 	nop
80037434:	14400008 	bnez	v0,80037458 <_ZN4core3ptr5write18precondition_check17h0e280678aa8b5e7eE+0x3c>
80037438:	00000000 	nop
8003743c:	0800dd11 	j	80037444 <_ZN4core3ptr5write18precondition_check17h0e280678aa8b5e7eE+0x28>
80037440:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80037444:	3c018108 	lui	at,0x8108
80037448:	2424ab5f 	addiu	a0,at,-21665
8003744c:	24050066 	li	a1,102
80037450:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80037454:	00000000 	nop
            }
80037458:	8fbf001c 	lw	ra,28(sp)
8003745c:	27bd0020 	addiu	sp,sp,32
80037460:	03e00008 	jr	ra
80037464:	00000000 	nop

80037468 <_ZN4core3ptr6unique15Unique$LT$T$GT$15as_non_null_ptr17h03a0340f5557557cE>:
    pub const fn as_non_null_ptr(self) -> NonNull<T> {
80037468:	27bdfff8 	addiu	sp,sp,-8
8003746c:	00801025 	move	v0,a0
80037470:	afa20004 	sw	v0,4(sp)
80037474:	27bd0008 	addiu	sp,sp,8
    }
80037478:	03e00008 	jr	ra
8003747c:	00000000 	nop

80037480 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17h3f273559bc39e390E>:
        fn runtime_impl(ptr: *mut u8) -> bool {
80037480:	27bdfff0 	addiu	sp,sp,-16
80037484:	afa40004 	sw	a0,4(sp)
80037488:	afa40008 	sw	a0,8(sp)
8003748c:	afa4000c 	sw	a0,12(sp)
            ptr.addr() == 0
80037490:	2c820001 	sltiu	v0,a0,1
80037494:	27bd0010 	addiu	sp,sp,16
        }
80037498:	03e00008 	jr	ra
8003749c:	00000000 	nop

800374a0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h15051cef55498a68E>:
    pub const fn is_null(self) -> bool {
800374a0:	27bdffe0 	addiu	sp,sp,-32
800374a4:	afbf001c 	sw	ra,28(sp)
800374a8:	afa40018 	sw	a0,24(sp)
        const_eval_select((self as *mut u8,), const_impl, runtime_impl)
800374ac:	afa40014 	sw	a0,20(sp)
800374b0:	8fa40014 	lw	a0,20(sp)
800374b4:	0c00dd20 	jal	80037480 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17h3f273559bc39e390E>
800374b8:	00000000 	nop
    }
800374bc:	8fbf001c 	lw	ra,28(sp)
800374c0:	27bd0020 	addiu	sp,sp,32
800374c4:	03e00008 	jr	ra
800374c8:	00000000 	nop

800374cc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h70d2a8f8e7d9a2d4E>:
    pub const fn is_null(self) -> bool {
800374cc:	27bdffe0 	addiu	sp,sp,-32
800374d0:	afbf001c 	sw	ra,28(sp)
800374d4:	afa40018 	sw	a0,24(sp)
        const_eval_select((self as *mut u8,), const_impl, runtime_impl)
800374d8:	afa40014 	sw	a0,20(sp)
800374dc:	8fa40014 	lw	a0,20(sp)
800374e0:	0c00dd20 	jal	80037480 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17h3f273559bc39e390E>
800374e4:	00000000 	nop
    }
800374e8:	8fbf001c 	lw	ra,28(sp)
800374ec:	27bd0020 	addiu	sp,sp,32
800374f0:	03e00008 	jr	ra
800374f4:	00000000 	nop

800374f8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h04ab63b66ca68e7bE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
800374f8:	27bdffd0 	addiu	sp,sp,-48
800374fc:	afbf002c 	sw	ra,44(sp)
80037500:	afa50014 	sw	a1,20(sp)
80037504:	afa40018 	sw	a0,24(sp)
80037508:	afa40024 	sw	a0,36(sp)
8003750c:	afa50028 	sw	a1,40(sp)
            assert_unsafe_precondition!(
80037510:	0c00dec0 	jal	80037b00 <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
80037514:	00000000 	nop
80037518:	1440000d 	bnez	v0,80037550 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h04ab63b66ca68e7bE+0x58>
8003751c:	00000000 	nop
80037520:	0800dd4a 	j	80037528 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h04ab63b66ca68e7bE+0x30>
80037524:	00000000 	nop
            NonNull { pointer: ptr as _ }
80037528:	8fa10014 	lw	at,20(sp)
8003752c:	8fa20018 	lw	v0,24(sp)
80037530:	afa2001c 	sw	v0,28(sp)
80037534:	afa10020 	sw	at,32(sp)
    }
80037538:	8fa2001c 	lw	v0,28(sp)
8003753c:	8fa30020 	lw	v1,32(sp)
80037540:	8fbf002c 	lw	ra,44(sp)
80037544:	27bd0030 	addiu	sp,sp,48
80037548:	03e00008 	jr	ra
8003754c:	00000000 	nop
            assert_unsafe_precondition!(
80037550:	8fa40018 	lw	a0,24(sp)
80037554:	0c00dd6f 	jal	800375bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h888d3639802ac370E>
80037558:	00000000 	nop
8003755c:	0800dd4a 	j	80037528 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h04ab63b66ca68e7bE+0x30>
80037560:	00000000 	nop

80037564 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h072c601e282e499eE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
80037564:	27bdffe0 	addiu	sp,sp,-32
80037568:	afbf001c 	sw	ra,28(sp)
8003756c:	afa40010 	sw	a0,16(sp)
80037570:	afa40018 	sw	a0,24(sp)
            assert_unsafe_precondition!(
80037574:	0c00dec0 	jal	80037b00 <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
80037578:	00000000 	nop
8003757c:	1440000a 	bnez	v0,800375a8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h072c601e282e499eE+0x44>
80037580:	00000000 	nop
80037584:	0800dd63 	j	8003758c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h072c601e282e499eE+0x28>
80037588:	00000000 	nop
            NonNull { pointer: ptr as _ }
8003758c:	8fa10010 	lw	at,16(sp)
80037590:	afa10014 	sw	at,20(sp)
    }
80037594:	8fa20014 	lw	v0,20(sp)
80037598:	8fbf001c 	lw	ra,28(sp)
8003759c:	27bd0020 	addiu	sp,sp,32
800375a0:	03e00008 	jr	ra
800375a4:	00000000 	nop
            assert_unsafe_precondition!(
800375a8:	8fa40010 	lw	a0,16(sp)
800375ac:	0c00dd6f 	jal	800375bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h888d3639802ac370E>
800375b0:	00000000 	nop
800375b4:	0800dd63 	j	8003758c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h072c601e282e499eE+0x28>
800375b8:	00000000 	nop

800375bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h888d3639802ac370E>:
            const fn precondition_check($($name:$ty),*) {
800375bc:	27bdffe8 	addiu	sp,sp,-24
800375c0:	afbf0014 	sw	ra,20(sp)
800375c4:	afa40010 	sw	a0,16(sp)
                (ptr: *mut () = ptr as *mut ()) => !ptr.is_null()
800375c8:	0c00dd33 	jal	800374cc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h70d2a8f8e7d9a2d4E>
800375cc:	00000000 	nop
800375d0:	14400007 	bnez	v0,800375f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h888d3639802ac370E+0x34>
800375d4:	00000000 	nop
800375d8:	0800dd78 	j	800375e0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h888d3639802ac370E+0x24>
800375dc:	00000000 	nop
            }
800375e0:	8fbf0014 	lw	ra,20(sp)
800375e4:	27bd0018 	addiu	sp,sp,24
800375e8:	03e00008 	jr	ra
800375ec:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800375f0:	3c018108 	lui	at,0x8108
800375f4:	2424abc5 	addiu	a0,at,-21563
800375f8:	2405005d 	li	a1,93
800375fc:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80037600:	00000000 	nop

80037604 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E>:
    pub const fn new(ptr: *mut T) -> Option<Self> {
80037604:	27bdffe0 	addiu	sp,sp,-32
80037608:	afbf001c 	sw	ra,28(sp)
8003760c:	afa40010 	sw	a0,16(sp)
80037610:	afa40018 	sw	a0,24(sp)
        if !ptr.is_null() {
80037614:	0c00dd28 	jal	800374a0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h15051cef55498a68E>
80037618:	00000000 	nop
8003761c:	14400009 	bnez	v0,80037644 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E+0x40>
80037620:	00000000 	nop
80037624:	0800dd8b 	j	8003762c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E+0x28>
80037628:	00000000 	nop
            Some(unsafe { Self::new_unchecked(ptr) })
8003762c:	8fa40010 	lw	a0,16(sp)
80037630:	0c00dd59 	jal	80037564 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h072c601e282e499eE>
80037634:	00000000 	nop
80037638:	afa20014 	sw	v0,20(sp)
        if !ptr.is_null() {
8003763c:	0800dd94 	j	80037650 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E+0x4c>
80037640:	00000000 	nop
            None
80037644:	afa00014 	sw	zero,20(sp)
        if !ptr.is_null() {
80037648:	0800dd94 	j	80037650 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E+0x4c>
8003764c:	00000000 	nop
    }
80037650:	8fa20014 	lw	v0,20(sp)
80037654:	8fbf001c 	lw	ra,28(sp)
80037658:	27bd0020 	addiu	sp,sp,32
8003765c:	03e00008 	jr	ra
80037660:	00000000 	nop

80037664 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h334546e067f56e32E>:
    pub const fn as_mut_ptr(self) -> *mut T {
80037664:	27bdffe0 	addiu	sp,sp,-32
80037668:	afbf001c 	sw	ra,28(sp)
8003766c:	afa40010 	sw	a0,16(sp)
80037670:	afa50014 	sw	a1,20(sp)
        self.as_non_null_ptr().as_ptr()
80037674:	0c00dda4 	jal	80037690 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17hc520dd9289351540E>
80037678:	00000000 	nop
8003767c:	afa20018 	sw	v0,24(sp)
    }
80037680:	8fbf001c 	lw	ra,28(sp)
80037684:	27bd0020 	addiu	sp,sp,32
80037688:	03e00008 	jr	ra
8003768c:	00000000 	nop

80037690 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17hc520dd9289351540E>:
    pub const fn as_non_null_ptr(self) -> NonNull<T> {
80037690:	27bdffe0 	addiu	sp,sp,-32
80037694:	afbf001c 	sw	ra,28(sp)
80037698:	afa40014 	sw	a0,20(sp)
8003769c:	afa50018 	sw	a1,24(sp)
        self.cast()
800376a0:	0c00e517 	jal	8003945c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hdae9d46e5c3f465bE>
800376a4:	00000000 	nop
    }
800376a8:	8fbf001c 	lw	ra,28(sp)
800376ac:	27bd0020 	addiu	sp,sp,32
800376b0:	03e00008 	jr	ra
800376b4:	00000000 	nop

800376b8 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h25684dcbb1a3276fE>:
    pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
800376b8:	27bdffe0 	addiu	sp,sp,-32
800376bc:	afbf001c 	sw	ra,28(sp)
800376c0:	afa40010 	sw	a0,16(sp)
800376c4:	afa50014 	sw	a1,20(sp)
800376c8:	afa40018 	sw	a0,24(sp)
        unsafe { Self::new_unchecked(super::slice_from_raw_parts_mut(data.as_ptr(), len)) }
800376cc:	0c00e6fd 	jal	80039bf4 <_ZN4core3ptr24slice_from_raw_parts_mut17h67dceb6de50bda88E>
800376d0:	00000000 	nop
800376d4:	00402025 	move	a0,v0
800376d8:	00602825 	move	a1,v1
800376dc:	0c00dd3e 	jal	800374f8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h04ab63b66ca68e7bE>
800376e0:	00000000 	nop
    }
800376e4:	8fbf001c 	lw	ra,28(sp)
800376e8:	27bd0020 	addiu	sp,sp,32
800376ec:	03e00008 	jr	ra
800376f0:	00000000 	nop

800376f4 <_ZN4core3ptr9alignment9Alignment8as_usize17h4e3ce773bb5bccebE>:
    pub const fn as_usize(self) -> usize {
800376f4:	27bdfff8 	addiu	sp,sp,-8
800376f8:	afa40004 	sw	a0,4(sp)
        self.0 as usize
800376fc:	afa40000 	sw	a0,0(sp)
80037700:	8fa20000 	lw	v0,0(sp)
80037704:	27bd0008 	addiu	sp,sp,8
    }
80037708:	03e00008 	jr	ra
8003770c:	00000000 	nop

80037710 <_ZN4core4hint16assert_unchecked18precondition_check17he821348f60d966f9E>:
            const fn precondition_check($($name:$ty),*) {
80037710:	27bdffe8 	addiu	sp,sp,-24
80037714:	a3a40017 	sb	a0,23(sp)
            (cond: bool = cond) => cond,
80037718:	14800008 	bnez	a0,8003773c <_ZN4core4hint16assert_unchecked18precondition_check17he821348f60d966f9E+0x2c>
8003771c:	00000000 	nop
80037720:	0800ddca 	j	80037728 <_ZN4core4hint16assert_unchecked18precondition_check17he821348f60d966f9E+0x18>
80037724:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80037728:	3c018108 	lui	at,0x8108
8003772c:	2424ac22 	addiu	a0,at,-21470
80037730:	24050068 	li	a1,104
80037734:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80037738:	00000000 	nop
8003773c:	27bd0018 	addiu	sp,sp,24
            }
80037740:	03e00008 	jr	ra
80037744:	00000000 	nop

80037748 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>:
    pub const fn size(&self) -> usize {
80037748:	27bdfff8 	addiu	sp,sp,-8
8003774c:	afa40004 	sw	a0,4(sp)
        self.size
80037750:	8c820004 	lw	v0,4(a0)
80037754:	27bd0008 	addiu	sp,sp,8
    }
80037758:	03e00008 	jr	ra
8003775c:	00000000 	nop

80037760 <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>:
    pub const fn align(&self) -> usize {
80037760:	27bdffe8 	addiu	sp,sp,-24
80037764:	afbf0014 	sw	ra,20(sp)
80037768:	afa40010 	sw	a0,16(sp)
        self.align.as_usize()
8003776c:	8c840000 	lw	a0,0(a0)
80037770:	0c00ddbd 	jal	800376f4 <_ZN4core3ptr9alignment9Alignment8as_usize17h4e3ce773bb5bccebE>
80037774:	00000000 	nop
    }
80037778:	8fbf0014 	lw	ra,20(sp)
8003777c:	27bd0018 	addiu	sp,sp,24
80037780:	03e00008 	jr	ra
80037784:	00000000 	nop

80037788 <_ZN4core5alloc6layout6Layout8dangling17h83029e46d45f62cfE>:
    pub const fn dangling(&self) -> NonNull<u8> {
80037788:	27bdffe0 	addiu	sp,sp,-32
8003778c:	afbf001c 	sw	ra,28(sp)
80037790:	afa40014 	sw	a0,20(sp)
        unsafe { NonNull::new_unchecked(crate::ptr::without_provenance_mut::<u8>(self.align())) }
80037794:	0c00ddd8 	jal	80037760 <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
80037798:	00000000 	nop
8003779c:	00402025 	move	a0,v0
800377a0:	afa40018 	sw	a0,24(sp)
800377a4:	0c00dd59 	jal	80037564 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h072c601e282e499eE>
800377a8:	00000000 	nop
    }
800377ac:	8fbf001c 	lw	ra,28(sp)
800377b0:	27bd0020 	addiu	sp,sp,32
800377b4:	03e00008 	jr	ra
800377b8:	00000000 	nop

800377bc <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
800377bc:	27bdfff0 	addiu	sp,sp,-16
800377c0:	afa40000 	sw	a0,0(sp)
800377c4:	24010000 	li	at,0
        match self {
800377c8:	a3a0000a 	sb	zero,10(sp)
800377cc:	24010001 	li	at,1
800377d0:	a3a1000a 	sb	at,10(sp)
800377d4:	8fa10000 	lw	at,0(sp)
800377d8:	14200008 	bnez	at,800377fc <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE+0x40>
800377dc:	00000000 	nop
800377e0:	0800ddfa 	j	800377e8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE+0x2c>
800377e4:	00000000 	nop
800377e8:	24010000 	li	at,0
            None => Err(err),
800377ec:	a3a0000a 	sb	zero,10(sp)
800377f0:	afa00004 	sw	zero,4(sp)
800377f4:	0800de04 	j	80037810 <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE+0x54>
800377f8:	00000000 	nop
            Some(v) => Ok(v),
800377fc:	8fa10000 	lw	at,0(sp)
80037800:	afa1000c 	sw	at,12(sp)
80037804:	afa10004 	sw	at,4(sp)
80037808:	0800de04 	j	80037810 <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE+0x54>
8003780c:	00000000 	nop
    }
80037810:	93a1000a 	lbu	at,10(sp)
80037814:	30210001 	andi	at,at,0x1
80037818:	14200007 	bnez	at,80037838 <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE+0x7c>
8003781c:	00000000 	nop
80037820:	0800de0a 	j	80037828 <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE+0x6c>
80037824:	00000000 	nop
80037828:	8fa20004 	lw	v0,4(sp)
8003782c:	27bd0010 	addiu	sp,sp,16
80037830:	03e00008 	jr	ra
80037834:	00000000 	nop
80037838:	0800de0a 	j	80037828 <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE+0x6c>
8003783c:	00000000 	nop

80037840 <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
80037840:	27bdffd8 	addiu	sp,sp,-40
80037844:	afa70000 	sw	a3,0(sp)
80037848:	afa40004 	sw	a0,4(sp)
8003784c:	afa40008 	sw	a0,8(sp)
80037850:	8fa10038 	lw	at,56(sp)
80037854:	afa1000c 	sw	at,12(sp)
80037858:	afa50010 	sw	a1,16(sp)
8003785c:	afa60014 	sw	a2,20(sp)
80037860:	afa7001c 	sw	a3,28(sp)
80037864:	afa10020 	sw	at,32(sp)
80037868:	24010000 	li	at,0
        match self {
8003786c:	a3a0001b 	sb	zero,27(sp)
80037870:	24010001 	li	at,1
80037874:	a3a1001b 	sb	at,27(sp)
80037878:	8fa10010 	lw	at,16(sp)
8003787c:	1420000c 	bnez	at,800378b0 <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E+0x70>
80037880:	00000000 	nop
80037884:	0800de23 	j	8003788c <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E+0x4c>
80037888:	00000000 	nop
8003788c:	8fa1000c 	lw	at,12(sp)
80037890:	8fa20004 	lw	v0,4(sp)
80037894:	8fa30000 	lw	v1,0(sp)
80037898:	24040000 	li	a0,0
            None => Err(err),
8003789c:	a3a0001b 	sb	zero,27(sp)
800378a0:	ac430000 	sw	v1,0(v0)
800378a4:	ac410004 	sw	at,4(v0)
800378a8:	0800de35 	j	800378d4 <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E+0x94>
800378ac:	00000000 	nop
            Some(v) => Ok(v),
800378b0:	8fa20004 	lw	v0,4(sp)
800378b4:	8fa10014 	lw	at,20(sp)
800378b8:	afa10024 	sw	at,36(sp)
800378bc:	ac410004 	sw	at,4(v0)
800378c0:	3c018000 	lui	at,0x8000
800378c4:	34210001 	ori	at,at,0x1
800378c8:	ac410000 	sw	at,0(v0)
800378cc:	0800de35 	j	800378d4 <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E+0x94>
800378d0:	00000000 	nop
    }
800378d4:	93a1001b 	lbu	at,27(sp)
800378d8:	30210001 	andi	at,at,0x1
800378dc:	14200007 	bnez	at,800378fc <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E+0xbc>
800378e0:	00000000 	nop
800378e4:	0800de3b 	j	800378ec <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E+0xac>
800378e8:	00000000 	nop
800378ec:	8fa20008 	lw	v0,8(sp)
800378f0:	27bd0028 	addiu	sp,sp,40
800378f4:	03e00008 	jr	ra
800378f8:	00000000 	nop
800378fc:	0800de3b 	j	800378ec <_ZN4core6option15Option$LT$T$GT$5ok_or17hbb98cebb18ea5f93E+0xac>
80037900:	00000000 	nop

80037904 <_ZN4core6option15Option$LT$T$GT$6expect17h537867a9d3760452E>:
    pub const fn expect(self, msg: &str) -> T {
80037904:	27bdffd0 	addiu	sp,sp,-48
80037908:	afa70010 	sw	a3,16(sp)
8003790c:	afa60014 	sw	a2,20(sp)
80037910:	8fa10040 	lw	at,64(sp)
80037914:	afa10018 	sw	at,24(sp)
80037918:	afa4001c 	sw	a0,28(sp)
8003791c:	afa50020 	sw	a1,32(sp)
80037920:	afa60024 	sw	a2,36(sp)
80037924:	afa70028 	sw	a3,40(sp)
        match self {
80037928:	8fa1001c 	lw	at,28(sp)
8003792c:	14200008 	bnez	at,80037950 <_ZN4core6option15Option$LT$T$GT$6expect17h537867a9d3760452E+0x4c>
80037930:	00000000 	nop
80037934:	0800de4f 	j	8003793c <_ZN4core6option15Option$LT$T$GT$6expect17h537867a9d3760452E+0x38>
80037938:	00000000 	nop
            None => expect_failed(msg),
8003793c:	8fa60018 	lw	a2,24(sp)
80037940:	8fa50010 	lw	a1,16(sp)
80037944:	8fa40014 	lw	a0,20(sp)
80037948:	0c00f1bd 	jal	8003c6f4 <_ZN4core6option13expect_failed17h75c0aba452453316E>
8003794c:	00000000 	nop
            Some(val) => val,
80037950:	8fa20020 	lw	v0,32(sp)
80037954:	afa2002c 	sw	v0,44(sp)
80037958:	27bd0030 	addiu	sp,sp,48
    }
8003795c:	03e00008 	jr	ra
80037960:	00000000 	nop

80037964 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
80037964:	27bdffd0 	addiu	sp,sp,-48
80037968:	afbf002c 	sw	ra,44(sp)
8003796c:	afa40010 	sw	a0,16(sp)
80037970:	afa40014 	sw	a0,20(sp)
80037974:	afa50018 	sw	a1,24(sp)
80037978:	afa6001c 	sw	a2,28(sp)
8003797c:	24010000 	li	at,0
        match self {
80037980:	a3a00021 	sb	zero,33(sp)
80037984:	24010001 	li	at,1
80037988:	a3a10021 	sb	at,33(sp)
8003798c:	8fa10018 	lw	at,24(sp)
80037990:	1020000d 	beqz	at,800379c8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E+0x64>
80037994:	00000000 	nop
80037998:	0800de68 	j	800379a0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E+0x3c>
8003799c:	00000000 	nop
            Ok(t) => Ok(t),
800379a0:	8fa10010 	lw	at,16(sp)
800379a4:	8fa30018 	lw	v1,24(sp)
800379a8:	8fa2001c 	lw	v0,28(sp)
800379ac:	afa30024 	sw	v1,36(sp)
800379b0:	afa20028 	sw	v0,40(sp)
800379b4:	ac230004 	sw	v1,4(at)
800379b8:	ac220008 	sw	v0,8(at)
800379bc:	ac200000 	sw	zero,0(at)
800379c0:	0800de7e 	j	800379f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E+0x94>
800379c4:	00000000 	nop
800379c8:	24010000 	li	at,0
            Err(e) => Err(op(e)),
800379cc:	a3a00021 	sb	zero,33(sp)
800379d0:	0c00e0db 	jal	8003836c <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h02a960f90665afe1E>
800379d4:	00000000 	nop
800379d8:	00400825 	move	at,v0
800379dc:	8fa20010 	lw	v0,16(sp)
800379e0:	ac410004 	sw	at,4(v0)
800379e4:	ac430008 	sw	v1,8(v0)
800379e8:	24010001 	li	at,1
800379ec:	ac410000 	sw	at,0(v0)
800379f0:	0800de7e 	j	800379f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E+0x94>
800379f4:	00000000 	nop
    }
800379f8:	93a10021 	lbu	at,33(sp)
800379fc:	30210001 	andi	at,at,0x1
80037a00:	14200008 	bnez	at,80037a24 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E+0xc0>
80037a04:	00000000 	nop
80037a08:	0800de84 	j	80037a10 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E+0xac>
80037a0c:	00000000 	nop
80037a10:	8fa20014 	lw	v0,20(sp)
80037a14:	8fbf002c 	lw	ra,44(sp)
80037a18:	27bd0030 	addiu	sp,sp,48
80037a1c:	03e00008 	jr	ra
80037a20:	00000000 	nop
80037a24:	0800de84 	j	80037a10 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E+0xac>
80037a28:	00000000 	nop

80037a2c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
80037a2c:	27bdffc0 	addiu	sp,sp,-64
80037a30:	afbf003c 	sw	ra,60(sp)
80037a34:	afa70014 	sw	a3,20(sp)
80037a38:	afa40018 	sw	a0,24(sp)
80037a3c:	afa4001c 	sw	a0,28(sp)
80037a40:	afa50020 	sw	a1,32(sp)
80037a44:	afa60024 	sw	a2,36(sp)
80037a48:	afa7002c 	sw	a3,44(sp)
80037a4c:	24010000 	li	at,0
        match self {
80037a50:	a3a0002b 	sb	zero,43(sp)
80037a54:	24010001 	li	at,1
80037a58:	a3a1002b 	sb	at,43(sp)
80037a5c:	8fa10020 	lw	at,32(sp)
80037a60:	1020000d 	beqz	at,80037a98 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E+0x6c>
80037a64:	00000000 	nop
80037a68:	0800de9c 	j	80037a70 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E+0x44>
80037a6c:	00000000 	nop
            Ok(t) => Ok(t),
80037a70:	8fa10018 	lw	at,24(sp)
80037a74:	8fa30020 	lw	v1,32(sp)
80037a78:	8fa20024 	lw	v0,36(sp)
80037a7c:	afa30034 	sw	v1,52(sp)
80037a80:	afa20038 	sw	v0,56(sp)
80037a84:	ac230004 	sw	v1,4(at)
80037a88:	ac220008 	sw	v0,8(at)
80037a8c:	ac200000 	sw	zero,0(at)
80037a90:	0800deb3 	j	80037acc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E+0xa0>
80037a94:	00000000 	nop
80037a98:	8fa40014 	lw	a0,20(sp)
80037a9c:	24010000 	li	at,0
            Err(e) => Err(op(e)),
80037aa0:	a3a0002b 	sb	zero,43(sp)
80037aa4:	0c00e0e2 	jal	80038388 <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17hb2464f62b037e93cE>
80037aa8:	00000000 	nop
80037aac:	00400825 	move	at,v0
80037ab0:	8fa20018 	lw	v0,24(sp)
80037ab4:	ac410004 	sw	at,4(v0)
80037ab8:	ac430008 	sw	v1,8(v0)
80037abc:	24010001 	li	at,1
80037ac0:	ac410000 	sw	at,0(v0)
80037ac4:	0800deb3 	j	80037acc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E+0xa0>
80037ac8:	00000000 	nop
    }
80037acc:	93a1002b 	lbu	at,43(sp)
80037ad0:	30210001 	andi	at,at,0x1
80037ad4:	14200008 	bnez	at,80037af8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E+0xcc>
80037ad8:	00000000 	nop
80037adc:	0800deb9 	j	80037ae4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E+0xb8>
80037ae0:	00000000 	nop
80037ae4:	8fa2001c 	lw	v0,28(sp)
80037ae8:	8fbf003c 	lw	ra,60(sp)
80037aec:	27bd0040 	addiu	sp,sp,64
80037af0:	03e00008 	jr	ra
80037af4:	00000000 	nop
80037af8:	0800deb9 	j	80037ae4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E+0xb8>
80037afc:	00000000 	nop

80037b00 <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>:
pub(crate) const fn check_language_ub() -> bool {
80037b00:	27bdffe8 	addiu	sp,sp,-24
80037b04:	afbf0014 	sw	ra,20(sp)
    intrinsics::ub_checks() && const_eval_select((), comptime, runtime)
80037b08:	0800dec4 	j	80037b10 <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E+0x10>
80037b0c:	00000000 	nop
80037b10:	0c00decf 	jal	80037b3c <_ZN4core9ub_checks17check_language_ub7runtime17hfc67b9aa45e668abE>
80037b14:	00000000 	nop
80037b18:	a3a20013 	sb	v0,19(sp)
80037b1c:	0800dec9 	j	80037b24 <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E+0x24>
80037b20:	00000000 	nop
}
80037b24:	93a10013 	lbu	at,19(sp)
80037b28:	30220001 	andi	v0,at,0x1
80037b2c:	8fbf0014 	lw	ra,20(sp)
80037b30:	27bd0018 	addiu	sp,sp,24
80037b34:	03e00008 	jr	ra
80037b38:	00000000 	nop

80037b3c <_ZN4core9ub_checks17check_language_ub7runtime17hfc67b9aa45e668abE>:
    fn runtime() -> bool {
80037b3c:	24020001 	li	v0,1
    }
80037b40:	03e00008 	jr	ra
80037b44:	00000000 	nop

80037b48 <_ZN4core9ub_checks17is_nonoverlapping17h9bdec536d9cabb31E>:
pub(crate) const fn is_nonoverlapping(
80037b48:	27bdffc8 	addiu	sp,sp,-56
80037b4c:	afbf0034 	sw	ra,52(sp)
80037b50:	afa40024 	sw	a0,36(sp)
80037b54:	afa50028 	sw	a1,40(sp)
80037b58:	afa6002c 	sw	a2,44(sp)
80037b5c:	afa70030 	sw	a3,48(sp)
    const_eval_select((src, dst, size, count), comptime, runtime)
80037b60:	afa40014 	sw	a0,20(sp)
80037b64:	afa50018 	sw	a1,24(sp)
80037b68:	afa6001c 	sw	a2,28(sp)
80037b6c:	afa70020 	sw	a3,32(sp)
80037b70:	8fa40014 	lw	a0,20(sp)
80037b74:	8fa50018 	lw	a1,24(sp)
80037b78:	8fa6001c 	lw	a2,28(sp)
80037b7c:	8fa70020 	lw	a3,32(sp)
80037b80:	0c00dee6 	jal	80037b98 <_ZN4core9ub_checks17is_nonoverlapping7runtime17hedd3416832afba5fE>
80037b84:	00000000 	nop
}
80037b88:	8fbf0034 	lw	ra,52(sp)
80037b8c:	27bd0038 	addiu	sp,sp,56
80037b90:	03e00008 	jr	ra
80037b94:	00000000 	nop

80037b98 <_ZN4core9ub_checks17is_nonoverlapping7runtime17hedd3416832afba5fE>:
    fn runtime(src: *const (), dst: *const (), size: usize, count: usize) -> bool {
80037b98:	27bdffa0 	addiu	sp,sp,-96
80037b9c:	afbf005c 	sw	ra,92(sp)
80037ba0:	afa70014 	sw	a3,20(sp)
80037ba4:	afa60018 	sw	a2,24(sp)
80037ba8:	00a00825 	move	at,a1
80037bac:	8fa50014 	lw	a1,20(sp)
80037bb0:	00801025 	move	v0,a0
80037bb4:	8fa40018 	lw	a0,24(sp)
80037bb8:	afa2002c 	sw	v0,44(sp)
80037bbc:	afa10030 	sw	at,48(sp)
80037bc0:	afa40034 	sw	a0,52(sp)
80037bc4:	afa50038 	sw	a1,56(sp)
80037bc8:	afa20050 	sw	v0,80(sp)
80037bcc:	afa20054 	sw	v0,84(sp)
        unsafe { mem::transmute(self.cast::<()>()) }
80037bd0:	00401825 	move	v1,v0
80037bd4:	afa3001c 	sw	v1,28(sp)
        let src_usize = src.addr();
80037bd8:	afa2003c 	sw	v0,60(sp)
80037bdc:	afa1004c 	sw	at,76(sp)
80037be0:	afa10058 	sw	at,88(sp)
80037be4:	00201025 	move	v0,at
80037be8:	afa20020 	sw	v0,32(sp)
        let dst_usize = dst.addr();
80037bec:	afa10040 	sw	at,64(sp)
        let Some(size) = size.checked_mul(count) else {
80037bf0:	0c00dc30 	jal	800370c0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17he7df2978cdc70b82E>
80037bf4:	00000000 	nop
80037bf8:	afa20024 	sw	v0,36(sp)
80037bfc:	afa30028 	sw	v1,40(sp)
80037c00:	8fa10024 	lw	at,36(sp)
80037c04:	24020001 	li	v0,1
80037c08:	14220012 	bne	at,v0,80037c54 <_ZN4core9ub_checks17is_nonoverlapping7runtime17hedd3416832afba5fE+0xbc>
80037c0c:	00000000 	nop
80037c10:	0800df06 	j	80037c18 <_ZN4core9ub_checks17is_nonoverlapping7runtime17hedd3416832afba5fE+0x80>
80037c14:	00000000 	nop
80037c18:	8fa50020 	lw	a1,32(sp)
80037c1c:	8fa4001c 	lw	a0,28(sp)
80037c20:	8fa10028 	lw	at,40(sp)
80037c24:	afa10010 	sw	at,16(sp)
80037c28:	afa10044 	sw	at,68(sp)
        let diff = src_usize.abs_diff(dst_usize);
80037c2c:	0c00dc58 	jal	80037160 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h1de43fb048fa4584E>
80037c30:	00000000 	nop
80037c34:	8fa10010 	lw	at,16(sp)
80037c38:	afa20048 	sw	v0,72(sp)
        diff >= size
80037c3c:	0041082b 	sltu	at,v0,at
80037c40:	38220001 	xori	v0,at,0x1
    }
80037c44:	8fbf005c 	lw	ra,92(sp)
80037c48:	27bd0060 	addiu	sp,sp,96
80037c4c:	03e00008 	jr	ra
80037c50:	00000000 	nop
            crate::panicking::panic_nounwind(
80037c54:	3c018108 	lui	at,0x8108
80037c58:	2424ac8a 	addiu	a0,at,-21366
80037c5c:	2405003d 	li	a1,61
80037c60:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80037c64:	00000000 	nop

80037c68 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E>:
pub(crate) const fn is_aligned_and_not_null(ptr: *const (), align: usize) -> bool {
80037c68:	27bdffd8 	addiu	sp,sp,-40
80037c6c:	afbf0024 	sw	ra,36(sp)
80037c70:	afa50010 	sw	a1,16(sp)
80037c74:	afa40014 	sw	a0,20(sp)
80037c78:	afa4001c 	sw	a0,28(sp)
80037c7c:	afa50020 	sw	a1,32(sp)
    !ptr.is_null() && ptr.is_aligned_to(align)
80037c80:	0c00e5c5 	jal	80039714 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h7332b93c4f97f066E>
80037c84:	00000000 	nop
80037c88:	1440000a 	bnez	v0,80037cb4 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E+0x4c>
80037c8c:	00000000 	nop
80037c90:	0800df26 	j	80037c98 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E+0x30>
80037c94:	00000000 	nop
80037c98:	8fa50010 	lw	a1,16(sp)
80037c9c:	8fa40014 	lw	a0,20(sp)
80037ca0:	0c00e61b 	jal	8003986c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to17hb855d440ce971e64E>
80037ca4:	00000000 	nop
80037ca8:	a3a2001b 	sb	v0,27(sp)
80037cac:	0800df31 	j	80037cc4 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E+0x5c>
80037cb0:	00000000 	nop
80037cb4:	24010000 	li	at,0
80037cb8:	a3a0001b 	sb	zero,27(sp)
80037cbc:	0800df31 	j	80037cc4 <_ZN4core9ub_checks23is_aligned_and_not_null17h60580bb5fa2e3248E+0x5c>
80037cc0:	00000000 	nop
}
80037cc4:	93a1001b 	lbu	at,27(sp)
80037cc8:	30220001 	andi	v0,at,0x1
80037ccc:	8fbf0024 	lw	ra,36(sp)
80037cd0:	27bd0028 	addiu	sp,sp,40
80037cd4:	03e00008 	jr	ra
80037cd8:	00000000 	nop

80037cdc <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h48d30d11e82a5204E>:
    fn into(self) -> U {
80037cdc:	27bdffe0 	addiu	sp,sp,-32
80037ce0:	afbf001c 	sw	ra,28(sp)
80037ce4:	afa40014 	sw	a0,20(sp)
80037ce8:	afa50018 	sw	a1,24(sp)
        U::from(self)
80037cec:	0c00e3a1 	jal	80038e84 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17h136c3be8ef9c5cdbE>
80037cf0:	00000000 	nop
    }
80037cf4:	8fbf001c 	lw	ra,28(sp)
80037cf8:	27bd0020 	addiu	sp,sp,32
80037cfc:	03e00008 	jr	ra
80037d00:	00000000 	nop

80037d04 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hd5655c75390c7c35E>:
    fn into(self) -> U {
80037d04:	27bdffe8 	addiu	sp,sp,-24
80037d08:	afbf0014 	sw	ra,20(sp)
80037d0c:	afa40010 	sw	a0,16(sp)
        U::from(self)
80037d10:	0c00daf7 	jal	80036bdc <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17hdecfcf5c197a58d9E>
80037d14:	00000000 	nop
    }
80037d18:	8fbf0014 	lw	ra,20(sp)
80037d1c:	27bd0018 	addiu	sp,sp,24
80037d20:	03e00008 	jr	ra
80037d24:	00000000 	nop

80037d28 <_ZN66_$LT$core..alloc..layout..Layout$u20$as$u20$core..clone..Clone$GT$5clone17h315816e7f53d18b6E>:
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
80037d28:	27bdfff8 	addiu	sp,sp,-8
80037d2c:	afa40004 	sw	a0,4(sp)
80037d30:	8c820000 	lw	v0,0(a0)
80037d34:	8c830004 	lw	v1,4(a0)
80037d38:	27bd0008 	addiu	sp,sp,8
80037d3c:	03e00008 	jr	ra
80037d40:	00000000 	nop

80037d44 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h31b02793b2359393E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
80037d44:	27bdffd8 	addiu	sp,sp,-40
80037d48:	afa50004 	sw	a1,4(sp)
80037d4c:	afa40008 	sw	a0,8(sp)
80037d50:	afa4000c 	sw	a0,12(sp)
        match self {
80037d54:	8ca10000 	lw	at,0(a1)
80037d58:	1420000e 	bnez	at,80037d94 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h31b02793b2359393E+0x50>
80037d5c:	00000000 	nop
80037d60:	0800df5a 	j	80037d68 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h31b02793b2359393E+0x24>
80037d64:	00000000 	nop
            Ok(v) => ControlFlow::Continue(v),
80037d68:	8fa10008 	lw	at,8(sp)
80037d6c:	8fa20004 	lw	v0,4(sp)
80037d70:	8c430004 	lw	v1,4(v0)
80037d74:	8c420008 	lw	v0,8(v0)
80037d78:	afa30018 	sw	v1,24(sp)
80037d7c:	afa2001c 	sw	v0,28(sp)
80037d80:	ac230004 	sw	v1,4(at)
80037d84:	ac220008 	sw	v0,8(at)
80037d88:	ac200000 	sw	zero,0(at)
80037d8c:	0800df75 	j	80037dd4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h31b02793b2359393E+0x90>
80037d90:	00000000 	nop
            Err(e) => ControlFlow::Break(Err(e)),
80037d94:	8fa20008 	lw	v0,8(sp)
80037d98:	8fa10004 	lw	at,4(sp)
80037d9c:	8c230004 	lw	v1,4(at)
80037da0:	8c210008 	lw	at,8(at)
80037da4:	afa30020 	sw	v1,32(sp)
80037da8:	afa10024 	sw	at,36(sp)
80037dac:	afa30010 	sw	v1,16(sp)
80037db0:	afa10014 	sw	at,20(sp)
80037db4:	8fa30010 	lw	v1,16(sp)
80037db8:	8fa10014 	lw	at,20(sp)
80037dbc:	ac430004 	sw	v1,4(v0)
80037dc0:	ac410008 	sw	at,8(v0)
80037dc4:	24010001 	li	at,1
80037dc8:	ac410000 	sw	at,0(v0)
80037dcc:	0800df75 	j	80037dd4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h31b02793b2359393E+0x90>
80037dd0:	00000000 	nop
    }
80037dd4:	8fa2000c 	lw	v0,12(sp)
80037dd8:	27bd0028 	addiu	sp,sp,40
80037ddc:	03e00008 	jr	ra
80037de0:	00000000 	nop

80037de4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h612605ee8356e453E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
80037de4:	27bdffe0 	addiu	sp,sp,-32
80037de8:	afa40004 	sw	a0,4(sp)
80037dec:	afa50008 	sw	a1,8(sp)
        match self {
80037df0:	8fa10004 	lw	at,4(sp)
80037df4:	1020000b 	beqz	at,80037e24 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h612605ee8356e453E+0x40>
80037df8:	00000000 	nop
80037dfc:	0800df81 	j	80037e04 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h612605ee8356e453E+0x20>
80037e00:	00000000 	nop
            Ok(v) => ControlFlow::Continue(v),
80037e04:	8fa20004 	lw	v0,4(sp)
80037e08:	8fa10008 	lw	at,8(sp)
80037e0c:	afa20018 	sw	v0,24(sp)
80037e10:	afa1001c 	sw	at,28(sp)
80037e14:	afa2000c 	sw	v0,12(sp)
80037e18:	afa10010 	sw	at,16(sp)
80037e1c:	0800df8c 	j	80037e30 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h612605ee8356e453E+0x4c>
80037e20:	00000000 	nop
            Err(e) => ControlFlow::Break(Err(e)),
80037e24:	afa0000c 	sw	zero,12(sp)
80037e28:	0800df8c 	j	80037e30 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h612605ee8356e453E+0x4c>
80037e2c:	00000000 	nop
    }
80037e30:	8fa2000c 	lw	v0,12(sp)
80037e34:	8fa30010 	lw	v1,16(sp)
80037e38:	27bd0020 	addiu	sp,sp,32
80037e3c:	03e00008 	jr	ra
80037e40:	00000000 	nop

80037e44 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
80037e44:	27bdffe0 	addiu	sp,sp,-32
80037e48:	afa50000 	sw	a1,0(sp)
80037e4c:	afa40004 	sw	a0,4(sp)
80037e50:	afa40008 	sw	a0,8(sp)
        match self {
80037e54:	8ca10000 	lw	at,0(a1)
80037e58:	3c028000 	lui	v0,0x8000
80037e5c:	34420001 	ori	v0,v0,0x1
80037e60:	1422000d 	bne	at,v0,80037e98 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E+0x54>
80037e64:	00000000 	nop
80037e68:	0800df9c 	j	80037e70 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E+0x2c>
80037e6c:	00000000 	nop
            Ok(v) => ControlFlow::Continue(v),
80037e70:	8fa20004 	lw	v0,4(sp)
80037e74:	8fa10000 	lw	at,0(sp)
80037e78:	8c210004 	lw	at,4(at)
80037e7c:	afa10014 	sw	at,20(sp)
80037e80:	ac410004 	sw	at,4(v0)
80037e84:	3c018000 	lui	at,0x8000
80037e88:	34210001 	ori	at,at,0x1
80037e8c:	ac410000 	sw	at,0(v0)
80037e90:	0800dfb4 	j	80037ed0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E+0x8c>
80037e94:	00000000 	nop
            Err(e) => ControlFlow::Break(Err(e)),
80037e98:	8fa20004 	lw	v0,4(sp)
80037e9c:	8fa10000 	lw	at,0(sp)
80037ea0:	8c230000 	lw	v1,0(at)
80037ea4:	8c210004 	lw	at,4(at)
80037ea8:	afa30018 	sw	v1,24(sp)
80037eac:	afa1001c 	sw	at,28(sp)
80037eb0:	afa3000c 	sw	v1,12(sp)
80037eb4:	afa10010 	sw	at,16(sp)
80037eb8:	8fa3000c 	lw	v1,12(sp)
80037ebc:	8fa10010 	lw	at,16(sp)
80037ec0:	ac430000 	sw	v1,0(v0)
80037ec4:	ac410004 	sw	at,4(v0)
80037ec8:	0800dfb4 	j	80037ed0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h74c3e653f49a6a70E+0x8c>
80037ecc:	00000000 	nop
    }
80037ed0:	8fa20008 	lw	v0,8(sp)
80037ed4:	27bd0020 	addiu	sp,sp,32
80037ed8:	03e00008 	jr	ra
80037edc:	00000000 	nop

80037ee0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h84151485091adff4E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
80037ee0:	27bdffd8 	addiu	sp,sp,-40
80037ee4:	afa40004 	sw	a0,4(sp)
80037ee8:	afa50008 	sw	a1,8(sp)
        match self {
80037eec:	8fa10004 	lw	at,4(sp)
80037ef0:	3c028000 	lui	v0,0x8000
80037ef4:	34420001 	ori	v0,v0,0x1
80037ef8:	14220008 	bne	at,v0,80037f1c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h84151485091adff4E+0x3c>
80037efc:	00000000 	nop
80037f00:	0800dfc2 	j	80037f08 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h84151485091adff4E+0x28>
80037f04:	00000000 	nop
80037f08:	3c018000 	lui	at,0x8000
80037f0c:	34210001 	ori	at,at,0x1
            Ok(v) => ControlFlow::Continue(v),
80037f10:	afa1000c 	sw	at,12(sp)
80037f14:	0800dfd3 	j	80037f4c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h84151485091adff4E+0x6c>
80037f18:	00000000 	nop
            Err(e) => ControlFlow::Break(Err(e)),
80037f1c:	8fa20004 	lw	v0,4(sp)
80037f20:	8fa10008 	lw	at,8(sp)
80037f24:	afa20020 	sw	v0,32(sp)
80037f28:	afa10024 	sw	at,36(sp)
80037f2c:	afa20014 	sw	v0,20(sp)
80037f30:	afa10018 	sw	at,24(sp)
80037f34:	8fa20014 	lw	v0,20(sp)
80037f38:	8fa10018 	lw	at,24(sp)
80037f3c:	afa2000c 	sw	v0,12(sp)
80037f40:	afa10010 	sw	at,16(sp)
80037f44:	0800dfd3 	j	80037f4c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h84151485091adff4E+0x6c>
80037f48:	00000000 	nop
    }
80037f4c:	8fa2000c 	lw	v0,12(sp)
80037f50:	8fa30010 	lw	v1,16(sp)
80037f54:	27bd0028 	addiu	sp,sp,40
80037f58:	03e00008 	jr	ra
80037f5c:	00000000 	nop

80037f60 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
80037f60:	27bdfff0 	addiu	sp,sp,-16
80037f64:	afa40000 	sw	a0,0(sp)
        match self {
80037f68:	8fa10000 	lw	at,0(sp)
80037f6c:	10200008 	beqz	at,80037f90 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE+0x30>
80037f70:	00000000 	nop
80037f74:	0800dfdf 	j	80037f7c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE+0x1c>
80037f78:	00000000 	nop
            Ok(v) => ControlFlow::Continue(v),
80037f7c:	8fa10000 	lw	at,0(sp)
80037f80:	afa1000c 	sw	at,12(sp)
80037f84:	afa10004 	sw	at,4(sp)
80037f88:	0800dfe7 	j	80037f9c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE+0x3c>
80037f8c:	00000000 	nop
            Err(e) => ControlFlow::Break(Err(e)),
80037f90:	afa00004 	sw	zero,4(sp)
80037f94:	0800dfe7 	j	80037f9c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE+0x3c>
80037f98:	00000000 	nop
    }
80037f9c:	8fa20004 	lw	v0,4(sp)
80037fa0:	27bd0010 	addiu	sp,sp,16
80037fa4:	03e00008 	jr	ra
80037fa8:	00000000 	nop

80037fac <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
80037fac:	27bdffd8 	addiu	sp,sp,-40
80037fb0:	afa50004 	sw	a1,4(sp)
80037fb4:	afa40008 	sw	a0,8(sp)
80037fb8:	afa4000c 	sw	a0,12(sp)
        match self {
80037fbc:	8ca10000 	lw	at,0(a1)
80037fc0:	1420000e 	bnez	at,80037ffc <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E+0x50>
80037fc4:	00000000 	nop
80037fc8:	0800dff4 	j	80037fd0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E+0x24>
80037fcc:	00000000 	nop
            Ok(v) => ControlFlow::Continue(v),
80037fd0:	8fa10008 	lw	at,8(sp)
80037fd4:	8fa20004 	lw	v0,4(sp)
80037fd8:	8c430004 	lw	v1,4(v0)
80037fdc:	8c420008 	lw	v0,8(v0)
80037fe0:	afa30018 	sw	v1,24(sp)
80037fe4:	afa2001c 	sw	v0,28(sp)
80037fe8:	ac230004 	sw	v1,4(at)
80037fec:	ac220008 	sw	v0,8(at)
80037ff0:	ac200000 	sw	zero,0(at)
80037ff4:	0800e00f 	j	8003803c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E+0x90>
80037ff8:	00000000 	nop
            Err(e) => ControlFlow::Break(Err(e)),
80037ffc:	8fa20008 	lw	v0,8(sp)
80038000:	8fa10004 	lw	at,4(sp)
80038004:	8c230004 	lw	v1,4(at)
80038008:	8c210008 	lw	at,8(at)
8003800c:	afa30020 	sw	v1,32(sp)
80038010:	afa10024 	sw	at,36(sp)
80038014:	afa30010 	sw	v1,16(sp)
80038018:	afa10014 	sw	at,20(sp)
8003801c:	8fa30010 	lw	v1,16(sp)
80038020:	8fa10014 	lw	at,20(sp)
80038024:	ac430004 	sw	v1,4(v0)
80038028:	ac410008 	sw	at,8(v0)
8003802c:	24010001 	li	at,1
80038030:	ac410000 	sw	at,0(v0)
80038034:	0800e00f 	j	8003803c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcef9af40536dccf7E+0x90>
80038038:	00000000 	nop
    }
8003803c:	8fa2000c 	lw	v0,12(sp)
80038040:	27bd0028 	addiu	sp,sp,40
80038044:	03e00008 	jr	ra
80038048:	00000000 	nop

8003804c <_ZN5alloc7raw_vec17capacity_overflow17h4b1cda53cb61e65dE>:
fn capacity_overflow() -> ! {
8003804c:	27bdffd0 	addiu	sp,sp,-48
80038050:	afbf002c 	sw	ra,44(sp)
    panic!("capacity overflow");
80038054:	3c018108 	lui	at,0x8108
80038058:	2425acd8 	addiu	a1,at,-21288
8003805c:	27a40014 	addiu	a0,sp,20
80038060:	afa40010 	sw	a0,16(sp)
80038064:	24060001 	li	a2,1
80038068:	0c00dbe4 	jal	80036f90 <_ZN4core3fmt9Arguments9new_const17h2470b053bfe06b9fE>
8003806c:	00000000 	nop
80038070:	8fa40010 	lw	a0,16(sp)
80038074:	3c018108 	lui	at,0x8108
80038078:	2425ad50 	addiu	a1,at,-21168
8003807c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80038080:	00000000 	nop

80038084 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E>:
fn finish_grow<A>(
80038084:	27bdff20 	addiu	sp,sp,-224
80038088:	afbf00dc 	sw	ra,220(sp)
8003808c:	afa7002c 	sw	a3,44(sp)
80038090:	afa40030 	sw	a0,48(sp)
80038094:	afa40034 	sw	a0,52(sp)
80038098:	8fa100f0 	lw	at,240(sp)
8003809c:	afa10038 	sw	at,56(sp)
    alloc_guard(new_layout.size())?;
800380a0:	afa500ac 	sw	a1,172(sp)
800380a4:	afa600b0 	sw	a2,176(sp)
800380a8:	27a40058 	addiu	a0,sp,88
800380ac:	afa4003c 	sw	a0,60(sp)
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
800380b0:	0c00de59 	jal	80037964 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3f6d80832c86a3a0E>
800380b4:	00000000 	nop
800380b8:	8fa5003c 	lw	a1,60(sp)
800380bc:	27a4004c 	addiu	a0,sp,76
800380c0:	0c00df51 	jal	80037d44 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h31b02793b2359393E>
800380c4:	00000000 	nop
800380c8:	8fa1004c 	lw	at,76(sp)
800380cc:	1420001c 	bnez	at,80038140 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0xbc>
800380d0:	00000000 	nop
800380d4:	0800e037 	j	800380dc <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x58>
800380d8:	00000000 	nop
800380dc:	8fa20050 	lw	v0,80(sp)
800380e0:	8fa10054 	lw	at,84(sp)
800380e4:	afa200b4 	sw	v0,180(sp)
800380e8:	afa100b8 	sw	at,184(sp)
800380ec:	afa20044 	sw	v0,68(sp)
800380f0:	afa10048 	sw	at,72(sp)
800380f4:	27a40044 	addiu	a0,sp,68
    alloc_guard(new_layout.size())?;
800380f8:	0c00ddd2 	jal	80037748 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
800380fc:	00000000 	nop
80038100:	00402025 	move	a0,v0
80038104:	0c00e10a 	jal	80038428 <_ZN5alloc7raw_vec11alloc_guard17hb78b6540db47032bE>
80038108:	00000000 	nop
8003810c:	00402025 	move	a0,v0
80038110:	00602825 	move	a1,v1
80038114:	0c00dfb8 	jal	80037ee0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h84151485091adff4E>
80038118:	00000000 	nop
8003811c:	afa20064 	sw	v0,100(sp)
80038120:	afa30068 	sw	v1,104(sp)
80038124:	8fa10064 	lw	at,100(sp)
80038128:	3c028000 	lui	v0,0x8000
8003812c:	34420001 	ori	v0,v0,0x1
80038130:	1022000e 	beq	at,v0,8003816c <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0xe8>
80038134:	00000000 	nop
80038138:	0800e061 	j	80038184 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x100>
8003813c:	00000000 	nop
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
80038140:	8fa40030 	lw	a0,48(sp)
80038144:	8fa50050 	lw	a1,80(sp)
80038148:	8fa60054 	lw	a2,84(sp)
8003814c:	afa500d0 	sw	a1,208(sp)
80038150:	afa600d4 	sw	a2,212(sp)
80038154:	3c018108 	lui	at,0x8108
80038158:	2427ad80 	addiu	a3,at,-21120
8003815c:	0c00db10 	jal	80036c40 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h64c4e0aa33532904E>
80038160:	00000000 	nop
80038164:	0800e0d6 	j	80038358 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x2d4>
80038168:	00000000 	nop
    let memory = if let Some((ptr, old_layout)) = current_memory {
8003816c:	8fa1002c 	lw	at,44(sp)
80038170:	8c210004 	lw	at,4(at)
80038174:	1420000e 	bnez	at,800381b0 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x12c>
80038178:	00000000 	nop
8003817c:	0800e076 	j	800381d8 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x154>
80038180:	00000000 	nop
    alloc_guard(new_layout.size())?;
80038184:	8fa40030 	lw	a0,48(sp)
80038188:	8fa50064 	lw	a1,100(sp)
8003818c:	8fa60068 	lw	a2,104(sp)
80038190:	afa500c8 	sw	a1,200(sp)
80038194:	afa600cc 	sw	a2,204(sp)
80038198:	3c018108 	lui	at,0x8108
8003819c:	2427ad70 	addiu	a3,at,-21136
800381a0:	0c00db39 	jal	80036ce4 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h8156b4d53ed91be5E>
800381a4:	00000000 	nop
800381a8:	0800e0d6 	j	80038358 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x2d4>
800381ac:	00000000 	nop
    let memory = if let Some((ptr, old_layout)) = current_memory {
800381b0:	8fa1002c 	lw	at,44(sp)
800381b4:	8c220000 	lw	v0,0(at)
800381b8:	afa20028 	sw	v0,40(sp)
800381bc:	afa200bc 	sw	v0,188(sp)
800381c0:	8c220004 	lw	v0,4(at)
800381c4:	8c210008 	lw	at,8(at)
800381c8:	afa20074 	sw	v0,116(sp)
800381cc:	afa10078 	sw	at,120(sp)
        debug_assert_eq!(old_layout.align(), new_layout.align());
800381d0:	0800e07f 	j	800381fc <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x178>
800381d4:	00000000 	nop
        alloc.allocate(new_layout)
800381d8:	8fa40038 	lw	a0,56(sp)
800381dc:	8fa50044 	lw	a1,68(sp)
800381e0:	8fa60048 	lw	a2,72(sp)
800381e4:	0c00e302 	jal	80038c08 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h9888178ac5e5e45cE>
800381e8:	00000000 	nop
800381ec:	afa2006c 	sw	v0,108(sp)
800381f0:	afa30070 	sw	v1,112(sp)
800381f4:	0800e0cc 	j	80038330 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x2ac>
800381f8:	00000000 	nop
800381fc:	27a40074 	addiu	a0,sp,116
        debug_assert_eq!(old_layout.align(), new_layout.align());
80038200:	0c00ddd8 	jal	80037760 <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
80038204:	00000000 	nop
80038208:	afa20084 	sw	v0,132(sp)
8003820c:	27a40044 	addiu	a0,sp,68
80038210:	0c00ddd8 	jal	80037760 <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
80038214:	00000000 	nop
80038218:	afa20088 	sw	v0,136(sp)
8003821c:	27a10084 	addiu	at,sp,132
80038220:	afa1007c 	sw	at,124(sp)
80038224:	27a10088 	addiu	at,sp,136
80038228:	afa10080 	sw	at,128(sp)
8003822c:	8fa1007c 	lw	at,124(sp)
80038230:	afa10020 	sw	at,32(sp)
80038234:	afa100c0 	sw	at,192(sp)
80038238:	8fa20080 	lw	v0,128(sp)
8003823c:	afa20024 	sw	v0,36(sp)
80038240:	afa200c4 	sw	v0,196(sp)
80038244:	8c210000 	lw	at,0(at)
80038248:	8c420000 	lw	v0,0(v0)
8003824c:	10220010 	beq	at,v0,80038290 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x20c>
80038250:	00000000 	nop
80038254:	0800e097 	j	8003825c <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x1d8>
80038258:	00000000 	nop
8003825c:	8fa60024 	lw	a2,36(sp)
80038260:	8fa50020 	lw	a1,32(sp)
80038264:	24010000 	li	at,0
80038268:	a3a0008f 	sb	zero,143(sp)
8003826c:	afa00090 	sw	zero,144(sp)
80038270:	93a4008f 	lbu	a0,143(sp)
80038274:	3c018108 	lui	at,0x8108
80038278:	2421ad60 	addiu	at,at,-21152
8003827c:	03a01025 	move	v0,sp
80038280:	ac410010 	sw	at,16(v0)
80038284:	27a70090 	addiu	a3,sp,144
80038288:	0c00f3b1 	jal	8003cec4 <_ZN4core9panicking13assert_failed17he51eb0fc731d6addE>
8003828c:	00000000 	nop
80038290:	27a40074 	addiu	a0,sp,116
            hint::assert_unchecked(old_layout.align() == new_layout.align());
80038294:	0c00ddd8 	jal	80037760 <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
80038298:	00000000 	nop
8003829c:	afa20018 	sw	v0,24(sp)
800382a0:	27a40044 	addiu	a0,sp,68
800382a4:	0c00ddd8 	jal	80037760 <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
800382a8:	00000000 	nop
800382ac:	00400825 	move	at,v0
800382b0:	8fa20018 	lw	v0,24(sp)
800382b4:	00410826 	xor	at,v0,at
800382b8:	2c210001 	sltiu	at,at,1
800382bc:	afa1001c 	sw	at,28(sp)
800382c0:	a3a100db 	sb	at,219(sp)
        ub_checks::assert_unsafe_precondition!(
800382c4:	0c00dec0 	jal	80037b00 <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
800382c8:	00000000 	nop
800382cc:	10400009 	beqz	v0,800382f4 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x270>
800382d0:	00000000 	nop
800382d4:	0800e0b7 	j	800382dc <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x258>
800382d8:	00000000 	nop
800382dc:	8fa1001c 	lw	at,28(sp)
800382e0:	30240001 	andi	a0,at,0x1
800382e4:	0c00ddc4 	jal	80037710 <_ZN4core4hint16assert_unchecked18precondition_check17he821348f60d966f9E>
800382e8:	00000000 	nop
800382ec:	0800e0bd 	j	800382f4 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x270>
800382f0:	00000000 	nop
            alloc.grow(ptr, old_layout, new_layout)
800382f4:	8fa50028 	lw	a1,40(sp)
800382f8:	8fa40038 	lw	a0,56(sp)
800382fc:	8fa60074 	lw	a2,116(sp)
80038300:	8fa70078 	lw	a3,120(sp)
80038304:	8fa10044 	lw	at,68(sp)
80038308:	8fa30048 	lw	v1,72(sp)
8003830c:	03a01025 	move	v0,sp
80038310:	ac430014 	sw	v1,20(v0)
80038314:	ac410010 	sw	at,16(v0)
80038318:	0c00e328 	jal	80038ca0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17hf5abdcd721bec62cE>
8003831c:	00000000 	nop
80038320:	afa2006c 	sw	v0,108(sp)
80038324:	afa30070 	sw	v1,112(sp)
80038328:	0800e0cc 	j	80038330 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x2ac>
8003832c:	00000000 	nop
    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
80038330:	8fa40030 	lw	a0,48(sp)
80038334:	8fa5006c 	lw	a1,108(sp)
80038338:	8fa60070 	lw	a2,112(sp)
8003833c:	27a10044 	addiu	at,sp,68
80038340:	afa100a8 	sw	at,168(sp)
80038344:	8fa700a8 	lw	a3,168(sp)
80038348:	0c00de8b 	jal	80037a2c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17ha7e520c633b48353E>
8003834c:	00000000 	nop
80038350:	0800e0d6 	j	80038358 <_ZN5alloc7raw_vec11finish_grow17h01d8c8511c2412a2E+0x2d4>
80038354:	00000000 	nop
}
80038358:	8fa20034 	lw	v0,52(sp)
8003835c:	8fbf00dc 	lw	ra,220(sp)
80038360:	27bd00e0 	addiu	sp,sp,224
80038364:	03e00008 	jr	ra
80038368:	00000000 	nop

8003836c <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h02a960f90665afe1E>:
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
8003836c:	27bdfff0 	addiu	sp,sp,-16
80038370:	afa00004 	sw	zero,4(sp)
80038374:	8fa20004 	lw	v0,4(sp)
80038378:	8fa30008 	lw	v1,8(sp)
8003837c:	27bd0010 	addiu	sp,sp,16
80038380:	03e00008 	jr	ra
80038384:	00000000 	nop

80038388 <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17hb2464f62b037e93cE>:
    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
80038388:	27bdffd8 	addiu	sp,sp,-40
8003838c:	afbf0024 	sw	ra,36(sp)
80038390:	afa40014 	sw	a0,20(sp)
80038394:	8fa10014 	lw	at,20(sp)
80038398:	8c220000 	lw	v0,0(at)
8003839c:	8c210004 	lw	at,4(at)
800383a0:	afa20018 	sw	v0,24(sp)
800383a4:	afa1001c 	sw	at,28(sp)
800383a8:	8fa40018 	lw	a0,24(sp)
800383ac:	8fa5001c 	lw	a1,28(sp)
800383b0:	3c018108 	lui	at,0x8108
800383b4:	2426ad90 	addiu	a2,at,-21104
800383b8:	0c00df37 	jal	80037cdc <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h48d30d11e82a5204E>
800383bc:	00000000 	nop
800383c0:	8fbf0024 	lw	ra,36(sp)
800383c4:	27bd0028 	addiu	sp,sp,40
800383c8:	03e00008 	jr	ra
800383cc:	00000000 	nop

800383d0 <_ZN5alloc7raw_vec12handle_error17hfb0478db9ca6b296E>:
}

// Central function for reserve error handling.
#[cfg(not(no_global_oom_handling))]
#[cold]
fn handle_error(e: TryReserveError) -> ! {
800383d0:	27bdffd0 	addiu	sp,sp,-48
800383d4:	afbf002c 	sw	ra,44(sp)
800383d8:	afa40014 	sw	a0,20(sp)
800383dc:	afa50018 	sw	a1,24(sp)
800383e0:	27a40014 	addiu	a0,sp,20
    match e.kind() {
800383e4:	0c00e398 	jal	80038e60 <_ZN5alloc11collections15TryReserveError4kind17h31476c26af2fe7bdE>
800383e8:	00000000 	nop
800383ec:	afa2001c 	sw	v0,28(sp)
800383f0:	afa30020 	sw	v1,32(sp)
800383f4:	8fa1001c 	lw	at,28(sp)
800383f8:	14200005 	bnez	at,80038410 <_ZN5alloc7raw_vec12handle_error17hfb0478db9ca6b296E+0x40>
800383fc:	00000000 	nop
80038400:	0800e102 	j	80038408 <_ZN5alloc7raw_vec12handle_error17hfb0478db9ca6b296E+0x38>
80038404:	00000000 	nop
        CapacityOverflow => capacity_overflow(),
80038408:	0c00e013 	jal	8003804c <_ZN5alloc7raw_vec17capacity_overflow17h4b1cda53cb61e65dE>
8003840c:	00000000 	nop
        AllocError { layout, .. } => handle_alloc_error(layout),
80038410:	8fa4001c 	lw	a0,28(sp)
80038414:	8fa50020 	lw	a1,32(sp)
80038418:	afa40024 	sw	a0,36(sp)
8003841c:	afa50028 	sw	a1,40(sp)
80038420:	0c00e33c 	jal	80038cf0 <_ZN5alloc5alloc18handle_alloc_error17h19617bae871f3d42E>
80038424:	00000000 	nop

80038428 <_ZN5alloc7raw_vec11alloc_guard17hb78b6540db47032bE>:
// On 64-bit we just need to check for overflow since trying to allocate
// `> isize::MAX` bytes will surely fail. On 32-bit and 16-bit we need to add
// an extra guard for this in case we're running on a platform which can use
// all 4GB in user-space, e.g., PAE or x32.
#[inline]
fn alloc_guard(alloc_size: usize) -> Result<(), TryReserveError> {
80038428:	27bdffd0 	addiu	sp,sp,-48
8003842c:	afbf002c 	sw	ra,44(sp)
80038430:	afa40014 	sw	a0,20(sp)
80038434:	afa40028 	sw	a0,40(sp)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
80038438:	0800e110 	j	80038440 <_ZN5alloc7raw_vec11alloc_guard17hb78b6540db47032bE+0x18>
8003843c:	00000000 	nop
80038440:	8fa10014 	lw	at,20(sp)
80038444:	04200008 	bltz	at,80038468 <_ZN5alloc7raw_vec11alloc_guard17hb78b6540db47032bE+0x40>
80038448:	00000000 	nop
8003844c:	0800e115 	j	80038454 <_ZN5alloc7raw_vec11alloc_guard17hb78b6540db47032bE+0x2c>
80038450:	00000000 	nop
80038454:	3c018000 	lui	at,0x8000
80038458:	34210001 	ori	at,at,0x1
        Err(CapacityOverflow.into())
    } else {
        Ok(())
8003845c:	afa10018 	sw	at,24(sp)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
80038460:	0800e125 	j	80038494 <_ZN5alloc7raw_vec11alloc_guard17hb78b6540db47032bE+0x6c>
80038464:	00000000 	nop
        Err(CapacityOverflow.into())
80038468:	afa00020 	sw	zero,32(sp)
8003846c:	8fa40020 	lw	a0,32(sp)
80038470:	8fa50024 	lw	a1,36(sp)
80038474:	3c018108 	lui	at,0x8108
80038478:	2426ada0 	addiu	a2,at,-21088
8003847c:	0c00df37 	jal	80037cdc <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h48d30d11e82a5204E>
80038480:	00000000 	nop
80038484:	afa20018 	sw	v0,24(sp)
80038488:	afa3001c 	sw	v1,28(sp)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
8003848c:	0800e125 	j	80038494 <_ZN5alloc7raw_vec11alloc_guard17hb78b6540db47032bE+0x6c>
80038490:	00000000 	nop
    }
}
80038494:	8fa20018 	lw	v0,24(sp)
80038498:	8fa3001c 	lw	v1,28(sp)
8003849c:	8fbf002c 	lw	ra,44(sp)
800384a0:	27bd0030 	addiu	sp,sp,48
800384a4:	03e00008 	jr	ra
800384a8:	00000000 	nop

800384ac <_ZN5alloc5alloc5alloc17hedb3bb3160d119f7E>:
pub unsafe fn alloc(layout: Layout) -> *mut u8 {
800384ac:	27bdffd8 	addiu	sp,sp,-40
800384b0:	afbf0024 	sw	ra,36(sp)
800384b4:	afa4001c 	sw	a0,28(sp)
800384b8:	afa50020 	sw	a1,32(sp)
        core::ptr::read_volatile(&__rust_no_alloc_shim_is_unstable);
800384bc:	3c018105 	lui	at,0x8105
800384c0:	2424b0d0 	addiu	a0,at,-20272
800384c4:	0c00dc9b 	jal	8003726c <_ZN4core3ptr13read_volatile17h18d49f1023aa1159E>
800384c8:	00000000 	nop
800384cc:	27a4001c 	addiu	a0,sp,28
800384d0:	afa40014 	sw	a0,20(sp)
        __rust_alloc(layout.size(), layout.align())
800384d4:	0c00ddd2 	jal	80037748 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
800384d8:	00000000 	nop
800384dc:	8fa40014 	lw	a0,20(sp)
800384e0:	afa20018 	sw	v0,24(sp)
800384e4:	0c00ddd8 	jal	80037760 <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
800384e8:	00000000 	nop
800384ec:	8fa40018 	lw	a0,24(sp)
800384f0:	00402825 	move	a1,v0
800384f4:	0c00d332 	jal	80034cc8 <__rust_alloc>
800384f8:	00000000 	nop
}
800384fc:	8fbf0024 	lw	ra,36(sp)
80038500:	27bd0028 	addiu	sp,sp,40
80038504:	03e00008 	jr	ra
80038508:	00000000 	nop

8003850c <_ZN5alloc5alloc7dealloc17h88130156a4554906E>:
pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {
8003850c:	27bdffd0 	addiu	sp,sp,-48
80038510:	afbf002c 	sw	ra,44(sp)
80038514:	afa40018 	sw	a0,24(sp)
80038518:	afa50020 	sw	a1,32(sp)
8003851c:	afa60024 	sw	a2,36(sp)
80038520:	afa40028 	sw	a0,40(sp)
80038524:	27a40020 	addiu	a0,sp,32
80038528:	afa40014 	sw	a0,20(sp)
    unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
8003852c:	0c00ddd2 	jal	80037748 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
80038530:	00000000 	nop
80038534:	8fa40014 	lw	a0,20(sp)
80038538:	afa2001c 	sw	v0,28(sp)
8003853c:	0c00ddd8 	jal	80037760 <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
80038540:	00000000 	nop
80038544:	8fa40018 	lw	a0,24(sp)
80038548:	8fa5001c 	lw	a1,28(sp)
8003854c:	00403025 	move	a2,v0
80038550:	0c00d342 	jal	80034d08 <__rust_dealloc>
80038554:	00000000 	nop
}
80038558:	8fbf002c 	lw	ra,44(sp)
8003855c:	27bd0030 	addiu	sp,sp,48
80038560:	03e00008 	jr	ra
80038564:	00000000 	nop

80038568 <_ZN5alloc5alloc7realloc17hb6b79216da939609E>:
pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
80038568:	27bdffc8 	addiu	sp,sp,-56
8003856c:	afbf0034 	sw	ra,52(sp)
80038570:	afa70020 	sw	a3,32(sp)
80038574:	afa40018 	sw	a0,24(sp)
80038578:	afa50024 	sw	a1,36(sp)
8003857c:	afa60028 	sw	a2,40(sp)
80038580:	afa4002c 	sw	a0,44(sp)
80038584:	afa70030 	sw	a3,48(sp)
80038588:	27a40024 	addiu	a0,sp,36
8003858c:	afa40014 	sw	a0,20(sp)
    unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
80038590:	0c00ddd2 	jal	80037748 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
80038594:	00000000 	nop
80038598:	8fa40014 	lw	a0,20(sp)
8003859c:	afa2001c 	sw	v0,28(sp)
800385a0:	0c00ddd8 	jal	80037760 <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
800385a4:	00000000 	nop
800385a8:	8fa40018 	lw	a0,24(sp)
800385ac:	8fa5001c 	lw	a1,28(sp)
800385b0:	8fa70020 	lw	a3,32(sp)
800385b4:	00403025 	move	a2,v0
800385b8:	0c00d35b 	jal	80034d6c <__rust_realloc>
800385bc:	00000000 	nop
}
800385c0:	8fbf0034 	lw	ra,52(sp)
800385c4:	27bd0038 	addiu	sp,sp,56
800385c8:	03e00008 	jr	ra
800385cc:	00000000 	nop

800385d0 <_ZN5alloc5alloc12alloc_zeroed17hc3c69bfdb7830301E>:
pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
800385d0:	27bdffd8 	addiu	sp,sp,-40
800385d4:	afbf0024 	sw	ra,36(sp)
800385d8:	afa4001c 	sw	a0,28(sp)
800385dc:	afa50020 	sw	a1,32(sp)
800385e0:	27a4001c 	addiu	a0,sp,28
800385e4:	afa40014 	sw	a0,20(sp)
    unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
800385e8:	0c00ddd2 	jal	80037748 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
800385ec:	00000000 	nop
800385f0:	8fa40014 	lw	a0,20(sp)
800385f4:	afa20018 	sw	v0,24(sp)
800385f8:	0c00ddd8 	jal	80037760 <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
800385fc:	00000000 	nop
80038600:	8fa40018 	lw	a0,24(sp)
80038604:	00402825 	move	a1,v0
80038608:	0c00d379 	jal	80034de4 <__rust_alloc_zeroed>
8003860c:	00000000 	nop
}
80038610:	8fbf0024 	lw	ra,36(sp)
80038614:	27bd0028 	addiu	sp,sp,40
80038618:	03e00008 	jr	ra
8003861c:	00000000 	nop

80038620 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE>:
    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {
80038620:	27bdffb8 	addiu	sp,sp,-72
80038624:	afbf0044 	sw	ra,68(sp)
80038628:	00e00825 	move	at,a3
8003862c:	afa10010 	sw	at,16(sp)
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
80038630:	afa5001c 	sw	a1,28(sp)
80038634:	afa60020 	sw	a2,32(sp)
80038638:	afa40034 	sw	a0,52(sp)
8003863c:	a3a7003b 	sb	a3,59(sp)
80038640:	27a4001c 	addiu	a0,sp,28
        match layout.size() {
80038644:	0c00ddd2 	jal	80037748 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
80038648:	00000000 	nop
8003864c:	00400825 	move	at,v0
80038650:	afa10014 	sw	at,20(sp)
80038654:	afa2003c 	sw	v0,60(sp)
80038658:	1440000e 	bnez	v0,80038694 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0x74>
8003865c:	00000000 	nop
80038660:	0800e19a 	j	80038668 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0x48>
80038664:	00000000 	nop
80038668:	27a4001c 	addiu	a0,sp,28
            0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
8003866c:	0c00dde2 	jal	80037788 <_ZN4core5alloc6layout6Layout8dangling17h83029e46d45f62cfE>
80038670:	00000000 	nop
80038674:	00402025 	move	a0,v0
80038678:	24050000 	li	a1,0
8003867c:	0c00ddae 	jal	800376b8 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h25684dcbb1a3276fE>
80038680:	00000000 	nop
80038684:	afa20024 	sw	v0,36(sp)
80038688:	afa30028 	sw	v1,40(sp)
8003868c:	0800e1ab 	j	800386ac <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0x8c>
80038690:	00000000 	nop
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
80038694:	8fa10010 	lw	at,16(sp)
80038698:	30210001 	andi	at,at,0x1
8003869c:	14200010 	bnez	at,800386e0 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0xc0>
800386a0:	00000000 	nop
800386a4:	0800e1b1 	j	800386c4 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0xa4>
800386a8:	00000000 	nop
    }
800386ac:	8fa20024 	lw	v0,36(sp)
800386b0:	8fa30028 	lw	v1,40(sp)
800386b4:	8fbf0044 	lw	ra,68(sp)
800386b8:	27bd0048 	addiu	sp,sp,72
800386bc:	03e00008 	jr	ra
800386c0:	00000000 	nop
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
800386c4:	8fa4001c 	lw	a0,28(sp)
800386c8:	8fa50020 	lw	a1,32(sp)
800386cc:	0c00e12b 	jal	800384ac <_ZN5alloc5alloc5alloc17hedb3bb3160d119f7E>
800386d0:	00000000 	nop
800386d4:	afa2002c 	sw	v0,44(sp)
800386d8:	0800e1bf 	j	800386fc <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0xdc>
800386dc:	00000000 	nop
800386e0:	8fa4001c 	lw	a0,28(sp)
800386e4:	8fa50020 	lw	a1,32(sp)
800386e8:	0c00e174 	jal	800385d0 <_ZN5alloc5alloc12alloc_zeroed17hc3c69bfdb7830301E>
800386ec:	00000000 	nop
800386f0:	afa2002c 	sw	v0,44(sp)
800386f4:	0800e1bf 	j	800386fc <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0xdc>
800386f8:	00000000 	nop
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
800386fc:	8fa4002c 	lw	a0,44(sp)
80038700:	0c00dd81 	jal	80037604 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E>
80038704:	00000000 	nop
80038708:	00402025 	move	a0,v0
8003870c:	0c00ddef 	jal	800377bc <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE>
80038710:	00000000 	nop
80038714:	00402025 	move	a0,v0
80038718:	0c00dfd8 	jal	80037f60 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE>
8003871c:	00000000 	nop
80038720:	afa20030 	sw	v0,48(sp)
80038724:	8fa10030 	lw	at,48(sp)
80038728:	1020000c 	beqz	at,8003875c <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0x13c>
8003872c:	00000000 	nop
80038730:	0800e1ce 	j	80038738 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0x118>
80038734:	00000000 	nop
80038738:	8fa50014 	lw	a1,20(sp)
8003873c:	8fa40030 	lw	a0,48(sp)
80038740:	afa40040 	sw	a0,64(sp)
                Ok(NonNull::slice_from_raw_parts(ptr, size))
80038744:	0c00ddae 	jal	800376b8 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h25684dcbb1a3276fE>
80038748:	00000000 	nop
8003874c:	afa20024 	sw	v0,36(sp)
80038750:	afa30028 	sw	v1,40(sp)
            },
80038754:	0800e1ab 	j	800386ac <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0x8c>
80038758:	00000000 	nop
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
8003875c:	3c018108 	lui	at,0x8108
80038760:	2424ae1c 	addiu	a0,at,-20964
80038764:	0c00db4a 	jal	80036d28 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hb6ff685e17a0e3feE>
80038768:	00000000 	nop
8003876c:	afa20024 	sw	v0,36(sp)
80038770:	afa30028 	sw	v1,40(sp)
80038774:	0800e1ab 	j	800386ac <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE+0x8c>
80038778:	00000000 	nop

8003877c <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE>:
    unsafe fn grow_impl(
8003877c:	27bdfef0 	addiu	sp,sp,-272
80038780:	afbf010c 	sw	ra,268(sp)
80038784:	afa50058 	sw	a1,88(sp)
80038788:	afa4005c 	sw	a0,92(sp)
8003878c:	8fa10128 	lw	at,296(sp)
80038790:	afa10060 	sw	at,96(sp)
80038794:	8fa20124 	lw	v0,292(sp)
80038798:	8fa30120 	lw	v1,288(sp)
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
8003879c:	afa60068 	sw	a2,104(sp)
800387a0:	afa7006c 	sw	a3,108(sp)
800387a4:	afa30070 	sw	v1,112(sp)
800387a8:	afa20074 	sw	v0,116(sp)
800387ac:	afa400a8 	sw	a0,168(sp)
800387b0:	afa500ac 	sw	a1,172(sp)
800387b4:	a3a100b3 	sb	at,179(sp)
        debug_assert!(
800387b8:	0800e1f0 	j	800387c0 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x44>
800387bc:	00000000 	nop
800387c0:	27a40070 	addiu	a0,sp,112
            new_layout.size() >= old_layout.size(),
800387c4:	0c00ddd2 	jal	80037748 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
800387c8:	00000000 	nop
800387cc:	afa20054 	sw	v0,84(sp)
800387d0:	27a40068 	addiu	a0,sp,104
800387d4:	0c00ddd2 	jal	80037748 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
800387d8:	00000000 	nop
800387dc:	00400825 	move	at,v0
800387e0:	8fa20054 	lw	v0,84(sp)
800387e4:	0041082b 	sltu	at,v0,at
800387e8:	1020000f 	beqz	at,80038828 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0xac>
800387ec:	00000000 	nop
800387f0:	0800e1fe 	j	800387f8 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x7c>
800387f4:	00000000 	nop
        debug_assert!(
800387f8:	3c018108 	lui	at,0x8108
800387fc:	2425ae74 	addiu	a1,at,-20876
80038800:	27a40080 	addiu	a0,sp,128
80038804:	afa40050 	sw	a0,80(sp)
80038808:	24060001 	li	a2,1
8003880c:	0c00dbe4 	jal	80036f90 <_ZN4core3fmt9Arguments9new_const17h2470b053bfe06b9fE>
80038810:	00000000 	nop
80038814:	8fa40050 	lw	a0,80(sp)
80038818:	3c018108 	lui	at,0x8108
8003881c:	2425ae7c 	addiu	a1,at,-20868
80038820:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80038824:	00000000 	nop
80038828:	27a40068 	addiu	a0,sp,104
        match old_layout.size() {
8003882c:	0c00ddd2 	jal	80037748 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
80038830:	00000000 	nop
80038834:	afa20098 	sw	v0,152(sp)
80038838:	8fa10098 	lw	at,152(sp)
8003883c:	1420000e 	bnez	at,80038878 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0xfc>
80038840:	00000000 	nop
80038844:	0800e213 	j	8003884c <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0xd0>
80038848:	00000000 	nop
            0 => self.alloc_impl(new_layout, zeroed),
8003884c:	8fa4005c 	lw	a0,92(sp)
80038850:	8fa10060 	lw	at,96(sp)
80038854:	8fa50070 	lw	a1,112(sp)
80038858:	8fa60074 	lw	a2,116(sp)
8003885c:	30270001 	andi	a3,at,0x1
80038860:	0c00e188 	jal	80038620 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE>
80038864:	00000000 	nop
80038868:	afa20078 	sw	v0,120(sp)
8003886c:	afa3007c 	sw	v1,124(sp)
80038870:	0800e22d 	j	800388b4 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x138>
80038874:	00000000 	nop
80038878:	27a10098 	addiu	at,sp,152
            old_size if old_layout.align() == new_layout.align() => unsafe {
8003887c:	afa100b4 	sw	at,180(sp)
80038880:	27a40068 	addiu	a0,sp,104
80038884:	0c00ddd8 	jal	80037760 <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
80038888:	00000000 	nop
8003888c:	afa2004c 	sw	v0,76(sp)
80038890:	27a40070 	addiu	a0,sp,112
80038894:	0c00ddd8 	jal	80037760 <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
80038898:	00000000 	nop
8003889c:	00400825 	move	at,v0
800388a0:	8fa2004c 	lw	v0,76(sp)
800388a4:	1041001e 	beq	v0,at,80038920 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x1a4>
800388a8:	00000000 	nop
800388ac:	0800e233 	j	800388cc <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x150>
800388b0:	00000000 	nop
    }
800388b4:	8fa20078 	lw	v0,120(sp)
800388b8:	8fa3007c 	lw	v1,124(sp)
800388bc:	8fbf010c 	lw	ra,268(sp)
800388c0:	27bd0110 	addiu	sp,sp,272
800388c4:	03e00008 	jr	ra
800388c8:	00000000 	nop
            old_size => unsafe {
800388cc:	8fa4005c 	lw	a0,92(sp)
800388d0:	8fa10060 	lw	at,96(sp)
800388d4:	8fa20098 	lw	v0,152(sp)
800388d8:	afa20048 	sw	v0,72(sp)
800388dc:	afa200b8 	sw	v0,184(sp)
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
800388e0:	8fa50070 	lw	a1,112(sp)
800388e4:	8fa60074 	lw	a2,116(sp)
800388e8:	30270001 	andi	a3,at,0x1
800388ec:	0c00e188 	jal	80038620 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE>
800388f0:	00000000 	nop
800388f4:	00402025 	move	a0,v0
800388f8:	00602825 	move	a1,v1
800388fc:	0c00df79 	jal	80037de4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h612605ee8356e453E>
80038900:	00000000 	nop
80038904:	afa200a0 	sw	v0,160(sp)
80038908:	afa300a4 	sw	v1,164(sp)
8003890c:	8fa100a0 	lw	at,160(sp)
80038910:	1420003b 	bnez	at,80038a00 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x284>
80038914:	00000000 	nop
80038918:	0800e2b3 	j	80038acc <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x350>
8003891c:	00000000 	nop
            old_size if old_layout.align() == new_layout.align() => unsafe {
80038920:	8fa10098 	lw	at,152(sp)
80038924:	afa10038 	sw	at,56(sp)
80038928:	afa100c4 	sw	at,196(sp)
8003892c:	27a40070 	addiu	a0,sp,112
                let new_size = new_layout.size();
80038930:	0c00ddd2 	jal	80037748 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
80038934:	00000000 	nop
80038938:	afa20040 	sw	v0,64(sp)
8003893c:	00400825 	move	at,v0
80038940:	afa1003c 	sw	at,60(sp)
80038944:	afa200c8 	sw	v0,200(sp)
80038948:	27a40068 	addiu	a0,sp,104
                hint::assert_unchecked(new_size >= old_layout.size());
8003894c:	0c00ddd2 	jal	80037748 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
80038950:	00000000 	nop
80038954:	00400825 	move	at,v0
80038958:	8fa20040 	lw	v0,64(sp)
8003895c:	0041082b 	sltu	at,v0,at
80038960:	38210001 	xori	at,at,0x1
80038964:	afa10044 	sw	at,68(sp)
80038968:	a3a1010b 	sb	at,267(sp)
8003896c:	0c00dec0 	jal	80037b00 <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
80038970:	00000000 	nop
80038974:	10400009 	beqz	v0,8003899c <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x220>
80038978:	00000000 	nop
8003897c:	0800e261 	j	80038984 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x208>
80038980:	00000000 	nop
80038984:	8fa10044 	lw	at,68(sp)
80038988:	30240001 	andi	a0,at,0x1
8003898c:	0c00ddc4 	jal	80037710 <_ZN4core4hint16assert_unchecked18precondition_check17he821348f60d966f9E>
80038990:	00000000 	nop
80038994:	0800e267 	j	8003899c <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x220>
80038998:	00000000 	nop
8003899c:	8fa7003c 	lw	a3,60(sp)
800389a0:	8fa40058 	lw	a0,88(sp)
800389a4:	afa40100 	sw	a0,256(sp)
                let raw_ptr = realloc(ptr.as_ptr(), old_layout, new_size);
800389a8:	8fa50068 	lw	a1,104(sp)
800389ac:	8fa6006c 	lw	a2,108(sp)
800389b0:	0c00e15a 	jal	80038568 <_ZN5alloc5alloc7realloc17hb6b79216da939609E>
800389b4:	00000000 	nop
800389b8:	00402025 	move	a0,v0
800389bc:	00801025 	move	v0,a0
800389c0:	afa20034 	sw	v0,52(sp)
800389c4:	afa400cc 	sw	a0,204(sp)
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
800389c8:	0c00dd81 	jal	80037604 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h0ca320a80980b778E>
800389cc:	00000000 	nop
800389d0:	00402025 	move	a0,v0
800389d4:	0c00ddef 	jal	800377bc <_ZN4core6option15Option$LT$T$GT$5ok_or17h9b741d2662cd81ddE>
800389d8:	00000000 	nop
800389dc:	00402025 	move	a0,v0
800389e0:	0c00dfd8 	jal	80037f60 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9b19f36cac897bfdE>
800389e4:	00000000 	nop
800389e8:	afa2009c 	sw	v0,156(sp)
800389ec:	8fa1009c 	lw	at,156(sp)
800389f0:	1420003e 	bnez	at,80038aec <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x370>
800389f4:	00000000 	nop
800389f8:	0800e2c4 	j	80038b10 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x394>
800389fc:	00000000 	nop
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
80038a00:	8fa10058 	lw	at,88(sp)
80038a04:	8fa400a0 	lw	a0,160(sp)
80038a08:	afa40028 	sw	a0,40(sp)
80038a0c:	8fa500a4 	lw	a1,164(sp)
80038a10:	afa5002c 	sw	a1,44(sp)
80038a14:	afa400bc 	sw	a0,188(sp)
80038a18:	afa500c0 	sw	a1,192(sp)
80038a1c:	afa10104 	sw	at,260(sp)
                ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);
80038a20:	0c00dd99 	jal	80037664 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h334546e067f56e32E>
80038a24:	00000000 	nop
80038a28:	8fa30058 	lw	v1,88(sp)
80038a2c:	8fa10048 	lw	at,72(sp)
80038a30:	00402025 	move	a0,v0
80038a34:	afa40030 	sw	a0,48(sp)
80038a38:	afa300d4 	sw	v1,212(sp)
80038a3c:	afa200d8 	sw	v0,216(sp)
80038a40:	afa100dc 	sw	at,220(sp)
    ub_checks::assert_unsafe_precondition!(
80038a44:	0c00dec0 	jal	80037b00 <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
80038a48:	00000000 	nop
80038a4c:	1040000e 	beqz	v0,80038a88 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x30c>
80038a50:	00000000 	nop
80038a54:	0800e297 	j	80038a5c <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x2e0>
80038a58:	00000000 	nop
80038a5c:	8fa50030 	lw	a1,48(sp)
80038a60:	8fa40058 	lw	a0,88(sp)
80038a64:	8fa10048 	lw	at,72(sp)
80038a68:	03a01025 	move	v0,sp
80038a6c:	ac410010 	sw	at,16(v0)
80038a70:	24070001 	li	a3,1
80038a74:	00e03025 	move	a2,a3
80038a78:	0c00db72 	jal	80036dc8 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hf3c9f6b477f38d67E>
80038a7c:	00000000 	nop
80038a80:	0800e2a2 	j	80038a88 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x30c>
80038a84:	00000000 	nop
    unsafe { copy_nonoverlapping(src, dst, count) }
80038a88:	8fa50058 	lw	a1,88(sp)
80038a8c:	8fa60048 	lw	a2,72(sp)
80038a90:	8fa40030 	lw	a0,48(sp)
80038a94:	0c00d3fd 	jal	80034ff4 <memcpy>
80038a98:	00000000 	nop
80038a9c:	8fa4005c 	lw	a0,92(sp)
80038aa0:	8fa50058 	lw	a1,88(sp)
                self.deallocate(ptr, old_layout);
80038aa4:	8fa60068 	lw	a2,104(sp)
80038aa8:	8fa7006c 	lw	a3,108(sp)
80038aac:	0c00e30e 	jal	80038c38 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h80fcfa996888c781E>
80038ab0:	00000000 	nop
80038ab4:	8fa20028 	lw	v0,40(sp)
80038ab8:	8fa1002c 	lw	at,44(sp)
                Ok(new_ptr)
80038abc:	afa20078 	sw	v0,120(sp)
80038ac0:	afa1007c 	sw	at,124(sp)
            },
80038ac4:	0800e22d 	j	800388b4 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x138>
80038ac8:	00000000 	nop
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
80038acc:	3c018108 	lui	at,0x8108
80038ad0:	2424ae8c 	addiu	a0,at,-20852
80038ad4:	0c00db4a 	jal	80036d28 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hb6ff685e17a0e3feE>
80038ad8:	00000000 	nop
80038adc:	afa20078 	sw	v0,120(sp)
80038ae0:	afa3007c 	sw	v1,124(sp)
80038ae4:	0800e22d 	j	800388b4 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x138>
80038ae8:	00000000 	nop
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
80038aec:	8fa10060 	lw	at,96(sp)
80038af0:	8fa2009c 	lw	v0,156(sp)
80038af4:	afa20024 	sw	v0,36(sp)
80038af8:	afa200d0 	sw	v0,208(sp)
                if zeroed {
80038afc:	30210001 	andi	at,at,0x1
80038b00:	14200013 	bnez	at,80038b50 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x3d4>
80038b04:	00000000 	nop
80038b08:	0800e2cc 	j	80038b30 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x3b4>
80038b0c:	00000000 	nop
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
80038b10:	3c018108 	lui	at,0x8108
80038b14:	2424aeac 	addiu	a0,at,-20820
80038b18:	0c00db4a 	jal	80036d28 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hb6ff685e17a0e3feE>
80038b1c:	00000000 	nop
80038b20:	afa20078 	sw	v0,120(sp)
80038b24:	afa3007c 	sw	v1,124(sp)
80038b28:	0800e22d 	j	800388b4 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x138>
80038b2c:	00000000 	nop
                Ok(NonNull::slice_from_raw_parts(ptr, new_size))
80038b30:	8fa5003c 	lw	a1,60(sp)
80038b34:	8fa40024 	lw	a0,36(sp)
80038b38:	0c00ddae 	jal	800376b8 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h25684dcbb1a3276fE>
80038b3c:	00000000 	nop
80038b40:	afa20078 	sw	v0,120(sp)
80038b44:	afa3007c 	sw	v1,124(sp)
            },
80038b48:	0800e22d 	j	800388b4 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x138>
80038b4c:	00000000 	nop
80038b50:	8fa1003c 	lw	at,60(sp)
80038b54:	8fa20038 	lw	v0,56(sp)
80038b58:	8fa30034 	lw	v1,52(sp)
80038b5c:	afa300f8 	sw	v1,248(sp)
80038b60:	afa200fc 	sw	v0,252(sp)
        unsafe { intrinsics::offset(self, count) }
80038b64:	00621821 	addu	v1,v1,v0
80038b68:	afa3001c 	sw	v1,28(sp)
                    raw_ptr.add(old_size).write_bytes(0, new_size - old_size);
80038b6c:	00221823 	subu	v1,at,v0
80038b70:	afa30020 	sw	v1,32(sp)
80038b74:	0022082b 	sltu	at,at,v0
80038b78:	1420001f 	bnez	at,80038bf8 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x47c>
80038b7c:	00000000 	nop
80038b80:	0800e2e2 	j	80038b88 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x40c>
80038b84:	00000000 	nop
80038b88:	8fa10020 	lw	at,32(sp)
80038b8c:	8fa2001c 	lw	v0,28(sp)
80038b90:	afa200e0 	sw	v0,224(sp)
80038b94:	24030000 	li	v1,0
80038b98:	a3a000e7 	sb	zero,231(sp)
80038b9c:	afa100e8 	sw	at,232(sp)
80038ba0:	afa200ec 	sw	v0,236(sp)
80038ba4:	a3a000f3 	sb	zero,243(sp)
80038ba8:	afa100f4 	sw	at,244(sp)
        ub_checks::assert_unsafe_precondition!(
80038bac:	0c00dec0 	jal	80037b00 <_ZN4core9ub_checks17check_language_ub17h4fc02316c4f677b4E>
80038bb0:	00000000 	nop
80038bb4:	10400009 	beqz	v0,80038bdc <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x460>
80038bb8:	00000000 	nop
80038bbc:	0800e2f1 	j	80038bc4 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x448>
80038bc0:	00000000 	nop
80038bc4:	8fa4001c 	lw	a0,28(sp)
80038bc8:	24050001 	li	a1,1
80038bcc:	0c00db5f 	jal	80036d7c <_ZN4core10intrinsics11write_bytes18precondition_check17hb30bbc705cf97fb4E>
80038bd0:	00000000 	nop
80038bd4:	0800e2f7 	j	80038bdc <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x460>
80038bd8:	00000000 	nop
        write_bytes(dst, val, count)
80038bdc:	8fa60020 	lw	a2,32(sp)
80038be0:	8fa4001c 	lw	a0,28(sp)
80038be4:	24050000 	li	a1,0
80038be8:	0c00d47d 	jal	800351f4 <memset>
80038bec:	00000000 	nop
80038bf0:	0800e2cc 	j	80038b30 <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE+0x3b4>
80038bf4:	00000000 	nop
80038bf8:	3c018108 	lui	at,0x8108
80038bfc:	2424ae9c 	addiu	a0,at,-20836
80038c00:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80038c04:	00000000 	nop

80038c08 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h9888178ac5e5e45cE>:
    fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
80038c08:	27bdffe0 	addiu	sp,sp,-32
80038c0c:	afbf001c 	sw	ra,28(sp)
80038c10:	afa40010 	sw	a0,16(sp)
80038c14:	afa50014 	sw	a1,20(sp)
80038c18:	afa60018 	sw	a2,24(sp)
80038c1c:	24070000 	li	a3,0
        self.alloc_impl(layout, false)
80038c20:	0c00e188 	jal	80038620 <_ZN5alloc5alloc6Global10alloc_impl17h408d5b49dd3c4f1dE>
80038c24:	00000000 	nop
    }
80038c28:	8fbf001c 	lw	ra,28(sp)
80038c2c:	27bd0020 	addiu	sp,sp,32
80038c30:	03e00008 	jr	ra
80038c34:	00000000 	nop

80038c38 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h80fcfa996888c781E>:
    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {
80038c38:	27bdffd0 	addiu	sp,sp,-48
80038c3c:	afbf002c 	sw	ra,44(sp)
80038c40:	afa50014 	sw	a1,20(sp)
80038c44:	afa60018 	sw	a2,24(sp)
80038c48:	afa7001c 	sw	a3,28(sp)
80038c4c:	afa40020 	sw	a0,32(sp)
80038c50:	afa50024 	sw	a1,36(sp)
80038c54:	27a40018 	addiu	a0,sp,24
        if layout.size() != 0 {
80038c58:	0c00ddd2 	jal	80037748 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
80038c5c:	00000000 	nop
80038c60:	14400007 	bnez	v0,80038c80 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h80fcfa996888c781E+0x48>
80038c64:	00000000 	nop
80038c68:	0800e31c 	j	80038c70 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h80fcfa996888c781E+0x38>
80038c6c:	00000000 	nop
    }
80038c70:	8fbf002c 	lw	ra,44(sp)
80038c74:	27bd0030 	addiu	sp,sp,48
80038c78:	03e00008 	jr	ra
80038c7c:	00000000 	nop
80038c80:	8fa40014 	lw	a0,20(sp)
80038c84:	afa40028 	sw	a0,40(sp)
            unsafe { dealloc(ptr.as_ptr(), layout) }
80038c88:	8fa50018 	lw	a1,24(sp)
80038c8c:	8fa6001c 	lw	a2,28(sp)
80038c90:	0c00e143 	jal	8003850c <_ZN5alloc5alloc7dealloc17h88130156a4554906E>
80038c94:	00000000 	nop
80038c98:	0800e31c 	j	80038c70 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h80fcfa996888c781E+0x38>
80038c9c:	00000000 	nop

80038ca0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17hf5abdcd721bec62cE>:
    unsafe fn grow(
80038ca0:	27bdffc0 	addiu	sp,sp,-64
80038ca4:	afbf003c 	sw	ra,60(sp)
80038ca8:	8fa30054 	lw	v1,84(sp)
80038cac:	8fa20050 	lw	v0,80(sp)
80038cb0:	afa40024 	sw	a0,36(sp)
80038cb4:	afa50028 	sw	a1,40(sp)
80038cb8:	afa6002c 	sw	a2,44(sp)
80038cbc:	afa70030 	sw	a3,48(sp)
80038cc0:	afa20034 	sw	v0,52(sp)
80038cc4:	afa30038 	sw	v1,56(sp)
        unsafe { self.grow_impl(ptr, old_layout, new_layout, false) }
80038cc8:	03a00825 	move	at,sp
80038ccc:	ac230014 	sw	v1,20(at)
80038cd0:	ac220010 	sw	v0,16(at)
80038cd4:	ac200018 	sw	zero,24(at)
80038cd8:	0c00e1df 	jal	8003877c <_ZN5alloc5alloc6Global9grow_impl17h117868b815d5215bE>
80038cdc:	00000000 	nop
    }
80038ce0:	8fbf003c 	lw	ra,60(sp)
80038ce4:	27bd0040 	addiu	sp,sp,64
80038ce8:	03e00008 	jr	ra
80038cec:	00000000 	nop

80038cf0 <_ZN5alloc5alloc18handle_alloc_error17h19617bae871f3d42E>:
/// [no_std]: https://doc.rust-lang.org/reference/names/preludes.html#the-no_std-attribute
#[stable(feature = "global_alloc", since = "1.28.0")]
#[rustc_const_unstable(feature = "const_alloc_error", issue = "92523")]
#[cfg(all(not(no_global_oom_handling), not(test)))]
#[cold]
pub const fn handle_alloc_error(layout: Layout) -> ! {
80038cf0:	27bdffe0 	addiu	sp,sp,-32
80038cf4:	afa40018 	sw	a0,24(sp)
80038cf8:	afa5001c 	sw	a1,28(sp)
        }
    }

    #[cfg(not(feature = "panic_immediate_abort"))]
    {
        core::intrinsics::const_eval_select((layout,), ct_error, rt_error)
80038cfc:	afa40010 	sw	a0,16(sp)
80038d00:	afa50014 	sw	a1,20(sp)
80038d04:	8fa40010 	lw	a0,16(sp)
80038d08:	8fa50014 	lw	a1,20(sp)
80038d0c:	0c00e345 	jal	80038d14 <_ZN5alloc5alloc18handle_alloc_error8rt_error17h54d01f35597063baE>
80038d10:	00000000 	nop

80038d14 <_ZN5alloc5alloc18handle_alloc_error8rt_error17h54d01f35597063baE>:
    fn rt_error(layout: Layout) -> ! {
80038d14:	27bdffd8 	addiu	sp,sp,-40
80038d18:	afbf0024 	sw	ra,36(sp)
80038d1c:	afa4001c 	sw	a0,28(sp)
80038d20:	afa50020 	sw	a1,32(sp)
80038d24:	27a4001c 	addiu	a0,sp,28
80038d28:	afa40014 	sw	a0,20(sp)
            __rust_alloc_error_handler(layout.size(), layout.align());
80038d2c:	0c00ddd2 	jal	80037748 <_ZN4core5alloc6layout6Layout4size17h76a7182843be9d9dE>
80038d30:	00000000 	nop
80038d34:	8fa40014 	lw	a0,20(sp)
80038d38:	afa20018 	sw	v0,24(sp)
80038d3c:	0c00ddd8 	jal	80037760 <_ZN4core5alloc6layout6Layout5align17hfb2444b5c73b6ef0E>
80038d40:	00000000 	nop
80038d44:	8fa40018 	lw	a0,24(sp)
80038d48:	00402825 	move	a1,v0
80038d4c:	0c00d3f5 	jal	80034fd4 <__rust_alloc_error_handler>
80038d50:	00000000 	nop

80038d54 <__rdl_oom>:
#[unstable(feature = "alloc_internals", issue = "none")]
pub mod __alloc_error_handler {
    // called via generated `__rust_alloc_error_handler` if there is no
    // `#[alloc_error_handler]`.
    #[rustc_std_internal_symbol]
    pub unsafe fn __rdl_oom(size: usize, _align: usize) -> ! {
80038d54:	27bdff68 	addiu	sp,sp,-152
80038d58:	afbf0094 	sw	ra,148(sp)
80038d5c:	afa40024 	sw	a0,36(sp)
80038d60:	afa50068 	sw	a1,104(sp)
            // This symbol is emitted by rustc next to __rust_alloc_error_handler.
            // Its value depends on the -Zoom={panic,abort} compiler option.
            static __rust_alloc_error_handler_should_panic: u8;
        }

        if unsafe { __rust_alloc_error_handler_should_panic != 0 } {
80038d64:	3c018105 	lui	at,0x8105
80038d68:	9021b0cc 	lbu	at,-20276(at)
80038d6c:	14200020 	bnez	at,80038df0 <__rdl_oom+0x9c>
80038d70:	00000000 	nop
80038d74:	0800e35f 	j	80038d7c <__rdl_oom+0x28>
80038d78:	00000000 	nop
80038d7c:	27a20024 	addiu	v0,sp,36
80038d80:	afa20070 	sw	v0,112(sp)
80038d84:	afa2007c 	sw	v0,124(sp)
80038d88:	3c018004 	lui	at,0x8004
80038d8c:	24217d60 	addiu	at,at,32096
80038d90:	afa10080 	sw	at,128(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80038d94:	afa20074 	sw	v0,116(sp)
80038d98:	afa10078 	sw	at,120(sp)
    }
80038d9c:	8fa20074 	lw	v0,116(sp)
80038da0:	8fa10078 	lw	at,120(sp)
            panic!("memory allocation of {size} bytes failed")
        } else {
            core::panicking::panic_nounwind_fmt(
                format_args!("memory allocation of {size} bytes failed"),
80038da4:	afa20060 	sw	v0,96(sp)
80038da8:	afa10064 	sw	at,100(sp)
80038dac:	03a01025 	move	v0,sp
80038db0:	24010001 	li	at,1
80038db4:	ac410010 	sw	at,16(v0)
80038db8:	3c018108 	lui	at,0x8108
80038dbc:	2425aee0 	addiu	a1,at,-20768
80038dc0:	27a40048 	addiu	a0,sp,72
80038dc4:	afa40020 	sw	a0,32(sp)
80038dc8:	24060002 	li	a2,2
80038dcc:	27a70060 	addiu	a3,sp,96
80038dd0:	0c00dba1 	jal	80036e84 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE>
80038dd4:	00000000 	nop
80038dd8:	8fa40020 	lw	a0,32(sp)
            core::panicking::panic_nounwind_fmt(
80038ddc:	3c018108 	lui	at,0x8108
80038de0:	2426aef0 	addiu	a2,at,-20752
80038de4:	24050000 	li	a1,0
80038de8:	0c00f28a 	jal	8003ca28 <_ZN4core9panicking18panic_nounwind_fmt17hf69a56259d4ee080E>
80038dec:	00000000 	nop
80038df0:	27a20024 	addiu	v0,sp,36
80038df4:	afa2006c 	sw	v0,108(sp)
80038df8:	afa2008c 	sw	v0,140(sp)
80038dfc:	3c018004 	lui	at,0x8004
80038e00:	24217d60 	addiu	at,at,32096
80038e04:	afa10090 	sw	at,144(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80038e08:	afa20084 	sw	v0,132(sp)
80038e0c:	afa10088 	sw	at,136(sp)
    }
80038e10:	8fa20084 	lw	v0,132(sp)
80038e14:	8fa10088 	lw	at,136(sp)
            panic!("memory allocation of {size} bytes failed")
80038e18:	afa20040 	sw	v0,64(sp)
80038e1c:	afa10044 	sw	at,68(sp)
80038e20:	03a01025 	move	v0,sp
80038e24:	24010001 	li	at,1
80038e28:	ac410010 	sw	at,16(v0)
80038e2c:	3c018108 	lui	at,0x8108
80038e30:	2425aee0 	addiu	a1,at,-20768
80038e34:	27a40028 	addiu	a0,sp,40
80038e38:	afa4001c 	sw	a0,28(sp)
80038e3c:	24060002 	li	a2,2
80038e40:	27a70040 	addiu	a3,sp,64
80038e44:	0c00dba1 	jal	80036e84 <_ZN4core3fmt9Arguments6new_v117hc2f19c451a9286bcE>
80038e48:	00000000 	nop
80038e4c:	8fa4001c 	lw	a0,28(sp)
80038e50:	3c018108 	lui	at,0x8108
80038e54:	2425af00 	addiu	a1,at,-20736
80038e58:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80038e5c:	00000000 	nop

80038e60 <_ZN5alloc11collections15TryReserveError4kind17h31476c26af2fe7bdE>:
    #[unstable(
        feature = "try_reserve_kind",
        reason = "Uncertain how much info should be exposed",
        issue = "48043"
    )]
    pub fn kind(&self) -> TryReserveErrorKind {
80038e60:	27bdffe8 	addiu	sp,sp,-24
80038e64:	afbf0014 	sw	ra,20(sp)
80038e68:	afa40010 	sw	a0,16(sp)
        self.kind.clone()
80038e6c:	0c00e3ab 	jal	80038eac <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17hd052bfa7320cfc75E>
80038e70:	00000000 	nop
    }
80038e74:	8fbf0014 	lw	ra,20(sp)
80038e78:	27bd0018 	addiu	sp,sp,24
80038e7c:	03e00008 	jr	ra
80038e80:	00000000 	nop

80038e84 <_ZN122_$LT$alloc..collections..TryReserveError$u20$as$u20$core..convert..From$LT$alloc..collections..TryReserveErrorKind$GT$$GT$4from17h136c3be8ef9c5cdbE>:
    reason = "Uncertain how much info should be exposed",
    issue = "48043"
)]
impl From<TryReserveErrorKind> for TryReserveError {
    #[inline]
    fn from(kind: TryReserveErrorKind) -> Self {
80038e84:	27bdfff0 	addiu	sp,sp,-16
80038e88:	afa40008 	sw	a0,8(sp)
80038e8c:	afa5000c 	sw	a1,12(sp)
        Self { kind }
80038e90:	afa40000 	sw	a0,0(sp)
80038e94:	afa50004 	sw	a1,4(sp)
    }
80038e98:	8fa20000 	lw	v0,0(sp)
80038e9c:	8fa30004 	lw	v1,4(sp)
80038ea0:	27bd0010 	addiu	sp,sp,16
80038ea4:	03e00008 	jr	ra
80038ea8:	00000000 	nop

80038eac <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17hd052bfa7320cfc75E>:
#[derive(Clone, PartialEq, Eq, Debug)]
80038eac:	27bdffd0 	addiu	sp,sp,-48
80038eb0:	afbf002c 	sw	ra,44(sp)
80038eb4:	afa40014 	sw	a0,20(sp)
80038eb8:	afa40020 	sw	a0,32(sp)
80038ebc:	8c810000 	lw	at,0(a0)
80038ec0:	14200006 	bnez	at,80038edc <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17hd052bfa7320cfc75E+0x30>
80038ec4:	00000000 	nop
80038ec8:	0800e3b4 	j	80038ed0 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17hd052bfa7320cfc75E+0x24>
80038ecc:	00000000 	nop
80038ed0:	afa00018 	sw	zero,24(sp)
80038ed4:	0800e3c1 	j	80038f04 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17hd052bfa7320cfc75E+0x58>
80038ed8:	00000000 	nop
        layout: Layout,
80038edc:	8fa40014 	lw	a0,20(sp)
80038ee0:	afa40024 	sw	a0,36(sp)
        non_exhaustive: (),
80038ee4:	24810008 	addiu	at,a0,8
80038ee8:	afa10028 	sw	at,40(sp)
        layout: Layout,
80038eec:	0c00df4a 	jal	80037d28 <_ZN66_$LT$core..alloc..layout..Layout$u20$as$u20$core..clone..Clone$GT$5clone17h315816e7f53d18b6E>
80038ef0:	00000000 	nop
#[derive(Clone, PartialEq, Eq, Debug)]
80038ef4:	afa20018 	sw	v0,24(sp)
80038ef8:	afa3001c 	sw	v1,28(sp)
80038efc:	0800e3c1 	j	80038f04 <_ZN78_$LT$alloc..collections..TryReserveErrorKind$u20$as$u20$core..clone..Clone$GT$5clone17hd052bfa7320cfc75E+0x58>
80038f00:	00000000 	nop
80038f04:	8fa20018 	lw	v0,24(sp)
80038f08:	8fa3001c 	lw	v1,28(sp)
80038f0c:	8fbf002c 	lw	ra,44(sp)
80038f10:	27bd0030 	addiu	sp,sp,48
80038f14:	03e00008 	jr	ra
80038f18:	00000000 	nop

80038f1c <_ZN4core3ops8function6FnOnce9call_once17h58ccafbc73184b93E>:
80038f1c:	27bdffe8 	addiu	sp,sp,-24
80038f20:	afbf0014 	sw	ra,20(sp)
80038f24:	a3a40012 	sb	a0,18(sp)
80038f28:	93a40012 	lbu	a0,18(sp)
80038f2c:	0c00eb7e 	jal	8003adf8 <_ZN4core4char7convert64_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$char$GT$4from17h3cd4ae837407df41E>
80038f30:	00000000 	nop
80038f34:	8fbf0014 	lw	ra,20(sp)
80038f38:	27bd0018 	addiu	sp,sp,24
80038f3c:	03e00008 	jr	ra
80038f40:	00000000 	nop

80038f44 <_ZN4core3ops8function6FnOnce9call_once17h791c912e8431a9d0E>:
80038f44:	27bdffe0 	addiu	sp,sp,-32
80038f48:	afbf001c 	sw	ra,28(sp)
80038f4c:	afa40010 	sw	a0,16(sp)
80038f50:	afa50014 	sw	a1,20(sp)
80038f54:	8fa40010 	lw	a0,16(sp)
80038f58:	8fa50014 	lw	a1,20(sp)
80038f5c:	0c0119e1 	jal	80046784 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17he219583d3b212753E>
80038f60:	00000000 	nop
80038f64:	8fbf001c 	lw	ra,28(sp)
80038f68:	27bd0020 	addiu	sp,sp,32
80038f6c:	03e00008 	jr	ra
80038f70:	00000000 	nop

80038f74 <_ZN4core3ops8function6FnOnce9call_once17hff92956d057e1979E>:
80038f74:	27bdffe0 	addiu	sp,sp,-32
80038f78:	afbf001c 	sw	ra,28(sp)
80038f7c:	afa40014 	sw	a0,20(sp)
80038f80:	afa50018 	sw	a1,24(sp)
80038f84:	8fa50014 	lw	a1,20(sp)
80038f88:	8fa60018 	lw	a2,24(sp)
80038f8c:	27a40013 	addiu	a0,sp,19
80038f90:	0c00fac5 	jal	8003eb14 <_ZN4core3fmt2rt12USIZE_MARKER28_$u7b$$u7b$closure$u7d$$u7d$17hf5206f4f02198d93E>
80038f94:	00000000 	nop
80038f98:	8fbf001c 	lw	ra,28(sp)
80038f9c:	27bd0020 	addiu	sp,sp,32
80038fa0:	03e00008 	jr	ra
80038fa4:	00000000 	nop

80038fa8 <_ZN4core3ptr30drop_in_place$LT$$RF$usize$GT$17h3559632f10d2fa89E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80038fa8:	27bdfff8 	addiu	sp,sp,-8
80038fac:	afa40004 	sw	a0,4(sp)
80038fb0:	27bd0008 	addiu	sp,sp,8
80038fb4:	03e00008 	jr	ra
80038fb8:	00000000 	nop

80038fbc <_ZN4core3ptr88drop_in_place$LT$core..panic..panic_info..PanicInfo..internal_constructor..NoPayload$GT$17h676df5d1e1a6eccdE>:
80038fbc:	27bdfff8 	addiu	sp,sp,-8
80038fc0:	afa40004 	sw	a0,4(sp)
80038fc4:	27bd0008 	addiu	sp,sp,8
80038fc8:	03e00008 	jr	ra
80038fcc:	00000000 	nop

80038fd0 <_ZN4core3num7nonzero16NonZero$LT$T$GT$3new17hd71ad0f64153bd17E>:
    /// Creates a non-zero if the given value is not zero.
    #[stable(feature = "nonzero", since = "1.28.0")]
    #[rustc_const_stable(feature = "const_nonzero_int_methods", since = "1.47.0")]
    #[must_use]
    #[inline]
    pub const fn new(n: T) -> Option<Self> {
80038fd0:	27bdfff8 	addiu	sp,sp,-8
80038fd4:	00801025 	move	v0,a0
80038fd8:	afa20004 	sw	v0,4(sp)
80038fdc:	27bd0008 	addiu	sp,sp,8
        // SAFETY: Memory layout optimization guarantees that `Option<NonZero<T>>` has
        //         the same layout and size as `T`, with `0` representing `None`.
        unsafe { intrinsics::transmute_unchecked(n) }
    }
80038fe0:	03e00008 	jr	ra
80038fe4:	00000000 	nop

80038fe8 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked17ha183bd3a225a1179E>:
    /// The value must not be zero.
    #[stable(feature = "nonzero", since = "1.28.0")]
    #[rustc_const_stable(feature = "nonzero", since = "1.28.0")]
    #[must_use]
    #[inline]
    pub const unsafe fn new_unchecked(n: T) -> Self {
80038fe8:	27bdffe0 	addiu	sp,sp,-32
80038fec:	afbf001c 	sw	ra,28(sp)
80038ff0:	afa40014 	sw	a0,20(sp)
        match Self::new(n) {
80038ff4:	0c00e3f4 	jal	80038fd0 <_ZN4core3num7nonzero16NonZero$LT$T$GT$3new17hd71ad0f64153bd17E>
80038ff8:	00000000 	nop
80038ffc:	afa20010 	sw	v0,16(sp)
80039000:	8fa10010 	lw	at,16(sp)
80039004:	14200009 	bnez	at,8003902c <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked17ha183bd3a225a1179E+0x44>
80039008:	00000000 	nop
8003900c:	0800e405 	j	80039014 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked17ha183bd3a225a1179E+0x2c>
80039010:	00000000 	nop
            Some(n) => n,
            None => {
                // SAFETY: The caller guarantees that `n` is non-zero, so this is unreachable.
                unsafe {
                    ub_checks::assert_unsafe_precondition!(
80039014:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80039018:	00000000 	nop
8003901c:	1440000a 	bnez	v0,80039048 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked17ha183bd3a225a1179E+0x60>
80039020:	00000000 	nop
80039024:	0800e411 	j	80039044 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked17ha183bd3a225a1179E+0x5c>
80039028:	00000000 	nop
            Some(n) => n,
8003902c:	8fa20010 	lw	v0,16(sp)
80039030:	afa20018 	sw	v0,24(sp)
                    );
                    intrinsics::unreachable()
                }
            }
        }
    }
80039034:	8fbf001c 	lw	ra,28(sp)
80039038:	27bd0020 	addiu	sp,sp,32
8003903c:	03e00008 	jr	ra
80039040:	00000000 	nop
        match Self::new(n) {
80039044:	0000000d 	break
                    ub_checks::assert_unsafe_precondition!(
80039048:	0c01186d 	jal	800461b4 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked18precondition_check17h2dffd53263e0e1a6E>
8003904c:	00000000 	nop
80039050:	0800e411 	j	80039044 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked17ha183bd3a225a1179E+0x5c>
80039054:	00000000 	nop

80039058 <_ZN4core3num20_$LT$impl$u20$u8$GT$21is_utf8_char_boundary17hd4b7d97890933c9eE>:
    pub fn escape_ascii(self) -> ascii::EscapeDefault {
        ascii::escape_default(self)
    }

    #[inline]
    pub(crate) const fn is_utf8_char_boundary(self) -> bool {
80039058:	27bdfff8 	addiu	sp,sp,-8
8003905c:	7c041420 	seb	v0,a0
80039060:	a3a40007 	sb	a0,7(sp)
80039064:	2401ffbf 	li	at,-65
        // This is bit magic equivalent to: b < 128 || b >= 192
        (self as i8) >= -0x40
80039068:	0022102a 	slt	v0,at,v0
8003906c:	27bd0008 	addiu	sp,sp,8
    }
80039070:	03e00008 	jr	ra
80039074:	00000000 	nop

80039078 <_ZN4core4hint21unreachable_unchecked17hb65475a0a116f39aE>:
pub const unsafe fn unreachable_unchecked() -> ! {
80039078:	27bdffe8 	addiu	sp,sp,-24
8003907c:	afbf0014 	sw	ra,20(sp)
    ub_checks::assert_unsafe_precondition!(
80039080:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80039084:	00000000 	nop
80039088:	14400004 	bnez	v0,8003909c <_ZN4core4hint21unreachable_unchecked17hb65475a0a116f39aE+0x24>
8003908c:	00000000 	nop
80039090:	0800e426 	j	80039098 <_ZN4core4hint21unreachable_unchecked17hb65475a0a116f39aE+0x20>
80039094:	00000000 	nop
    unsafe { intrinsics::unreachable() }
80039098:	0000000d 	break
    ub_checks::assert_unsafe_precondition!(
8003909c:	0c011926 	jal	80046498 <_ZN4core4hint21unreachable_unchecked18precondition_check17hfceb70dacfe74ff1E>
800390a0:	00000000 	nop
800390a4:	0800e426 	j	80039098 <_ZN4core4hint21unreachable_unchecked17hb65475a0a116f39aE+0x20>
800390a8:	00000000 	nop

800390ac <_ZN4core3mem7replace17h16554973e0f26abfE>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
800390ac:	27bdffd8 	addiu	sp,sp,-40
800390b0:	afbf0024 	sw	ra,36(sp)
800390b4:	afa50014 	sw	a1,20(sp)
800390b8:	afa40010 	sw	a0,16(sp)
800390bc:	afa4001c 	sw	a0,28(sp)
800390c0:	a3a50022 	sb	a1,34(sp)
        let result = ptr::read(dest);
800390c4:	0c00e71e 	jal	80039c78 <_ZN4core3ptr4read17h62ae591ccb22f4e5E>
800390c8:	00000000 	nop
800390cc:	8fa40010 	lw	a0,16(sp)
800390d0:	8fa50014 	lw	a1,20(sp)
800390d4:	afa20018 	sw	v0,24(sp)
800390d8:	a3a20023 	sb	v0,35(sp)
        ptr::write(dest, src);
800390dc:	0c00e74a 	jal	80039d28 <_ZN4core3ptr5write17h4459b32568548eceE>
800390e0:	00000000 	nop
800390e4:	8fa20018 	lw	v0,24(sp)
}
800390e8:	8fbf0024 	lw	ra,36(sp)
800390ec:	27bd0028 	addiu	sp,sp,40
800390f0:	03e00008 	jr	ra
800390f4:	00000000 	nop

800390f8 <_ZN4core3mem7replace17h8bdd203d298c7c3eE>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
800390f8:	27bdffd0 	addiu	sp,sp,-48
800390fc:	afbf002c 	sw	ra,44(sp)
80039100:	afa50018 	sw	a1,24(sp)
80039104:	afa40014 	sw	a0,20(sp)
80039108:	afa40020 	sw	a0,32(sp)
8003910c:	afa50024 	sw	a1,36(sp)
        let result = ptr::read(dest);
80039110:	0c00e734 	jal	80039cd0 <_ZN4core3ptr4read17h642b0fbf995d98adE>
80039114:	00000000 	nop
80039118:	8fa40014 	lw	a0,20(sp)
8003911c:	8fa50018 	lw	a1,24(sp)
80039120:	afa2001c 	sw	v0,28(sp)
80039124:	afa20028 	sw	v0,40(sp)
        ptr::write(dest, src);
80039128:	0c00e764 	jal	80039d90 <_ZN4core3ptr5write17h6c5fae36b352f0feE>
8003912c:	00000000 	nop
80039130:	8fa2001c 	lw	v0,28(sp)
}
80039134:	8fbf002c 	lw	ra,44(sp)
80039138:	27bd0030 	addiu	sp,sp,48
8003913c:	03e00008 	jr	ra
80039140:	00000000 	nop

80039144 <_ZN4core3ptr8metadata8metadata17h20bb056214aec1c6E>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
80039144:	27bdfff0 	addiu	sp,sp,-16
80039148:	afa40008 	sw	a0,8(sp)
8003914c:	afa5000c 	sw	a1,12(sp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
80039150:	afa40000 	sw	a0,0(sp)
80039154:	afa50004 	sw	a1,4(sp)
80039158:	8fa20004 	lw	v0,4(sp)
8003915c:	27bd0010 	addiu	sp,sp,16
}
80039160:	03e00008 	jr	ra
80039164:	00000000 	nop

80039168 <_ZN4core3ptr8metadata8metadata17hb7eaf43eba912fd2E>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
80039168:	27bdfff0 	addiu	sp,sp,-16
8003916c:	afa40008 	sw	a0,8(sp)
80039170:	afa5000c 	sw	a1,12(sp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
80039174:	afa40000 	sw	a0,0(sp)
80039178:	afa50004 	sw	a1,4(sp)
8003917c:	8fa20004 	lw	v0,4(sp)
80039180:	27bd0010 	addiu	sp,sp,16
}
80039184:	03e00008 	jr	ra
80039188:	00000000 	nop

8003918c <_ZN4core3ptr8metadata8metadata17hbb60b31b5db383cfE>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
8003918c:	27bdfff0 	addiu	sp,sp,-16
80039190:	afa40008 	sw	a0,8(sp)
80039194:	afa5000c 	sw	a1,12(sp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
80039198:	afa40000 	sw	a0,0(sp)
8003919c:	afa50004 	sw	a1,4(sp)
800391a0:	8fa20004 	lw	v0,4(sp)
800391a4:	27bd0010 	addiu	sp,sp,16
}
800391a8:	03e00008 	jr	ra
800391ac:	00000000 	nop

800391b0 <_ZN4core3ptr8metadata8metadata17hce8b7d7f1ef8a93eE>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
800391b0:	27bdfff0 	addiu	sp,sp,-16
800391b4:	afa40008 	sw	a0,8(sp)
800391b8:	afa5000c 	sw	a1,12(sp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
800391bc:	afa40000 	sw	a0,0(sp)
800391c0:	afa50004 	sw	a1,4(sp)
800391c4:	8fa20004 	lw	v0,4(sp)
800391c8:	27bd0010 	addiu	sp,sp,16
}
800391cc:	03e00008 	jr	ra
800391d0:	00000000 	nop

800391d4 <_ZN4core3ptr8metadata8metadata17he1acf955a0a571f5E>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
800391d4:	27bdfff0 	addiu	sp,sp,-16
800391d8:	afa40008 	sw	a0,8(sp)
800391dc:	afa5000c 	sw	a1,12(sp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
800391e0:	afa40000 	sw	a0,0(sp)
800391e4:	afa50004 	sw	a1,4(sp)
800391e8:	8fa20004 	lw	v0,4(sp)
800391ec:	27bd0010 	addiu	sp,sp,16
}
800391f0:	03e00008 	jr	ra
800391f4:	00000000 	nop

800391f8 <_ZN4core3ptr8metadata8metadata17he6569c9c74456ea7E>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
800391f8:	27bdfff0 	addiu	sp,sp,-16
800391fc:	afa40008 	sw	a0,8(sp)
80039200:	afa5000c 	sw	a1,12(sp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
80039204:	afa40000 	sw	a0,0(sp)
80039208:	afa50004 	sw	a1,4(sp)
8003920c:	8fa20004 	lw	v0,4(sp)
80039210:	27bd0010 	addiu	sp,sp,16
}
80039214:	03e00008 	jr	ra
80039218:	00000000 	nop

8003921c <_ZN4core3ptr8metadata14from_raw_parts17h59fb30269ae415d8E>:
pub const fn from_raw_parts<T: ?Sized>(
8003921c:	27bdffe8 	addiu	sp,sp,-24
80039220:	afa40010 	sw	a0,16(sp)
80039224:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
80039228:	afa40008 	sw	a0,8(sp)
8003922c:	afa5000c 	sw	a1,12(sp)
80039230:	8fa20008 	lw	v0,8(sp)
80039234:	8fa1000c 	lw	at,12(sp)
80039238:	afa20000 	sw	v0,0(sp)
8003923c:	afa10004 	sw	at,4(sp)
80039240:	8fa20000 	lw	v0,0(sp)
80039244:	8fa30004 	lw	v1,4(sp)
80039248:	27bd0018 	addiu	sp,sp,24
}
8003924c:	03e00008 	jr	ra
80039250:	00000000 	nop

80039254 <_ZN4core3ptr8metadata14from_raw_parts17h938c560b03e9d26fE>:
pub const fn from_raw_parts<T: ?Sized>(
80039254:	27bdffe8 	addiu	sp,sp,-24
80039258:	afa40010 	sw	a0,16(sp)
8003925c:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
80039260:	afa40008 	sw	a0,8(sp)
80039264:	afa5000c 	sw	a1,12(sp)
80039268:	8fa20008 	lw	v0,8(sp)
8003926c:	8fa1000c 	lw	at,12(sp)
80039270:	afa20000 	sw	v0,0(sp)
80039274:	afa10004 	sw	at,4(sp)
80039278:	8fa20000 	lw	v0,0(sp)
8003927c:	8fa30004 	lw	v1,4(sp)
80039280:	27bd0018 	addiu	sp,sp,24
}
80039284:	03e00008 	jr	ra
80039288:	00000000 	nop

8003928c <_ZN4core3ptr8metadata14from_raw_parts17hb362f311e3d98555E>:
pub const fn from_raw_parts<T: ?Sized>(
8003928c:	27bdffe8 	addiu	sp,sp,-24
80039290:	afa40010 	sw	a0,16(sp)
80039294:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
80039298:	afa40008 	sw	a0,8(sp)
8003929c:	afa5000c 	sw	a1,12(sp)
800392a0:	8fa20008 	lw	v0,8(sp)
800392a4:	8fa1000c 	lw	at,12(sp)
800392a8:	afa20000 	sw	v0,0(sp)
800392ac:	afa10004 	sw	at,4(sp)
800392b0:	8fa20000 	lw	v0,0(sp)
800392b4:	8fa30004 	lw	v1,4(sp)
800392b8:	27bd0018 	addiu	sp,sp,24
}
800392bc:	03e00008 	jr	ra
800392c0:	00000000 	nop

800392c4 <_ZN4core3ptr8metadata14from_raw_parts17hfcd6d7e30e5589bcE>:
pub const fn from_raw_parts<T: ?Sized>(
800392c4:	27bdffe8 	addiu	sp,sp,-24
800392c8:	afa40010 	sw	a0,16(sp)
800392cc:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
800392d0:	afa40008 	sw	a0,8(sp)
800392d4:	afa5000c 	sw	a1,12(sp)
800392d8:	8fa20008 	lw	v0,8(sp)
800392dc:	8fa1000c 	lw	at,12(sp)
800392e0:	afa20000 	sw	v0,0(sp)
800392e4:	afa10004 	sw	at,4(sp)
800392e8:	8fa20000 	lw	v0,0(sp)
800392ec:	8fa30004 	lw	v1,4(sp)
800392f0:	27bd0018 	addiu	sp,sp,24
}
800392f4:	03e00008 	jr	ra
800392f8:	00000000 	nop

800392fc <_ZN4core3ptr8metadata18from_raw_parts_mut17h632204f4052cbfb1E>:
pub const fn from_raw_parts_mut<T: ?Sized>(
800392fc:	27bdffe8 	addiu	sp,sp,-24
80039300:	afa40010 	sw	a0,16(sp)
80039304:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80039308:	afa40008 	sw	a0,8(sp)
8003930c:	afa5000c 	sw	a1,12(sp)
80039310:	8fa20008 	lw	v0,8(sp)
80039314:	8fa1000c 	lw	at,12(sp)
80039318:	afa20000 	sw	v0,0(sp)
8003931c:	afa10004 	sw	at,4(sp)
80039320:	8fa20000 	lw	v0,0(sp)
80039324:	8fa30004 	lw	v1,4(sp)
80039328:	27bd0018 	addiu	sp,sp,24
}
8003932c:	03e00008 	jr	ra
80039330:	00000000 	nop

80039334 <_ZN4core3ptr8metadata18from_raw_parts_mut17hc2806463ced23b28E>:
pub const fn from_raw_parts_mut<T: ?Sized>(
80039334:	27bdffe8 	addiu	sp,sp,-24
80039338:	afa40010 	sw	a0,16(sp)
8003933c:	afa50014 	sw	a1,20(sp)
    unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80039340:	afa40008 	sw	a0,8(sp)
80039344:	afa5000c 	sw	a1,12(sp)
80039348:	8fa20008 	lw	v0,8(sp)
8003934c:	8fa1000c 	lw	at,12(sp)
80039350:	afa20000 	sw	v0,0(sp)
80039354:	afa10004 	sw	at,4(sp)
80039358:	8fa20000 	lw	v0,0(sp)
8003935c:	8fa30004 	lw	v1,4(sp)
80039360:	27bd0018 	addiu	sp,sp,24
}
80039364:	03e00008 	jr	ra
80039368:	00000000 	nop

8003936c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h00d2554fa9e87b3eE>:
    pub const fn cast<U>(self) -> NonNull<U> {
8003936c:	27bdffe8 	addiu	sp,sp,-24
80039370:	afa40008 	sw	a0,8(sp)
80039374:	afa5000c 	sw	a1,12(sp)
80039378:	afa40010 	sw	a0,16(sp)
8003937c:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80039380:	afa40004 	sw	a0,4(sp)
    }
80039384:	8fa20004 	lw	v0,4(sp)
80039388:	27bd0018 	addiu	sp,sp,24
8003938c:	03e00008 	jr	ra
80039390:	00000000 	nop

80039394 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h5a7a1ff19e811062E>:
    pub const fn cast<U>(self) -> NonNull<U> {
80039394:	27bdffe8 	addiu	sp,sp,-24
80039398:	afa40008 	sw	a0,8(sp)
8003939c:	afa5000c 	sw	a1,12(sp)
800393a0:	afa40010 	sw	a0,16(sp)
800393a4:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
800393a8:	afa40004 	sw	a0,4(sp)
    }
800393ac:	8fa20004 	lw	v0,4(sp)
800393b0:	27bd0018 	addiu	sp,sp,24
800393b4:	03e00008 	jr	ra
800393b8:	00000000 	nop

800393bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h5fd7ff25d87ee5b2E>:
    pub const fn cast<U>(self) -> NonNull<U> {
800393bc:	27bdffe8 	addiu	sp,sp,-24
800393c0:	afa40008 	sw	a0,8(sp)
800393c4:	afa5000c 	sw	a1,12(sp)
800393c8:	afa40010 	sw	a0,16(sp)
800393cc:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
800393d0:	afa40004 	sw	a0,4(sp)
    }
800393d4:	8fa20004 	lw	v0,4(sp)
800393d8:	27bd0018 	addiu	sp,sp,24
800393dc:	03e00008 	jr	ra
800393e0:	00000000 	nop

800393e4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h71a9277f345cbca1E>:
    pub const fn cast<U>(self) -> NonNull<U> {
800393e4:	27bdffe8 	addiu	sp,sp,-24
800393e8:	afa40008 	sw	a0,8(sp)
800393ec:	afa5000c 	sw	a1,12(sp)
800393f0:	afa40010 	sw	a0,16(sp)
800393f4:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
800393f8:	afa40004 	sw	a0,4(sp)
    }
800393fc:	8fa20004 	lw	v0,4(sp)
80039400:	27bd0018 	addiu	sp,sp,24
80039404:	03e00008 	jr	ra
80039408:	00000000 	nop

8003940c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hc3931c08778c30c2E>:
    pub const fn cast<U>(self) -> NonNull<U> {
8003940c:	27bdffe8 	addiu	sp,sp,-24
80039410:	afa40008 	sw	a0,8(sp)
80039414:	afa5000c 	sw	a1,12(sp)
80039418:	afa40010 	sw	a0,16(sp)
8003941c:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80039420:	afa40004 	sw	a0,4(sp)
    }
80039424:	8fa20004 	lw	v0,4(sp)
80039428:	27bd0018 	addiu	sp,sp,24
8003942c:	03e00008 	jr	ra
80039430:	00000000 	nop

80039434 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hc62c740b2334bc63E>:
    pub const fn cast<U>(self) -> NonNull<U> {
80039434:	27bdffe8 	addiu	sp,sp,-24
80039438:	afa40008 	sw	a0,8(sp)
8003943c:	afa5000c 	sw	a1,12(sp)
80039440:	afa40010 	sw	a0,16(sp)
80039444:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80039448:	afa40004 	sw	a0,4(sp)
    }
8003944c:	8fa20004 	lw	v0,4(sp)
80039450:	27bd0018 	addiu	sp,sp,24
80039454:	03e00008 	jr	ra
80039458:	00000000 	nop

8003945c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hdae9d46e5c3f465bE>:
    pub const fn cast<U>(self) -> NonNull<U> {
8003945c:	27bdffe8 	addiu	sp,sp,-24
80039460:	afa40008 	sw	a0,8(sp)
80039464:	afa5000c 	sw	a1,12(sp)
80039468:	afa40010 	sw	a0,16(sp)
8003946c:	afa50014 	sw	a1,20(sp)
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80039470:	afa40004 	sw	a0,4(sp)
    }
80039474:	8fa20004 	lw	v0,4(sp)
80039478:	27bd0018 	addiu	sp,sp,24
8003947c:	03e00008 	jr	ra
80039480:	00000000 	nop

80039484 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$7sub_ptr17h9b9ab3e8577ce557E>:
    pub const unsafe fn sub_ptr(self, subtracted: NonNull<T>) -> usize
80039484:	27bdffe0 	addiu	sp,sp,-32
80039488:	afbf001c 	sw	ra,28(sp)
8003948c:	afa40014 	sw	a0,20(sp)
80039490:	afa50018 	sw	a1,24(sp)
        unsafe { self.pointer.sub_ptr(subtracted.pointer) }
80039494:	0c00e5d8 	jal	80039760 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E>
80039498:	00000000 	nop
    }
8003949c:	8fbf001c 	lw	ra,28(sp)
800394a0:	27bd0020 	addiu	sp,sp,32
800394a4:	03e00008 	jr	ra
800394a8:	00000000 	nop

800394ac <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h3eb9e52439106dd7E>:
    fn eq(&self, other: &Self) -> bool {
800394ac:	27bdfff0 	addiu	sp,sp,-16
800394b0:	afa40000 	sw	a0,0(sp)
800394b4:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
800394b8:	8c810000 	lw	at,0(a0)
800394bc:	afa1000c 	sw	at,12(sp)
800394c0:	8ca20000 	lw	v0,0(a1)
800394c4:	afa20008 	sw	v0,8(sp)
800394c8:	00220826 	xor	at,at,v0
800394cc:	2c220001 	sltiu	v0,at,1
800394d0:	27bd0010 	addiu	sp,sp,16
    }
800394d4:	03e00008 	jr	ra
800394d8:	00000000 	nop

800394dc <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h41d7ed9cbfe80c5aE>:
    fn eq(&self, other: &Self) -> bool {
800394dc:	27bdfff0 	addiu	sp,sp,-16
800394e0:	afa40000 	sw	a0,0(sp)
800394e4:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
800394e8:	8c810000 	lw	at,0(a0)
800394ec:	afa1000c 	sw	at,12(sp)
800394f0:	8ca20000 	lw	v0,0(a1)
800394f4:	afa20008 	sw	v0,8(sp)
800394f8:	00220826 	xor	at,at,v0
800394fc:	2c220001 	sltiu	v0,at,1
80039500:	27bd0010 	addiu	sp,sp,16
    }
80039504:	03e00008 	jr	ra
80039508:	00000000 	nop

8003950c <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h4eca0769a0300955E>:
    fn eq(&self, other: &Self) -> bool {
8003950c:	27bdfff0 	addiu	sp,sp,-16
80039510:	afa40000 	sw	a0,0(sp)
80039514:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
80039518:	8c810000 	lw	at,0(a0)
8003951c:	afa1000c 	sw	at,12(sp)
80039520:	8ca20000 	lw	v0,0(a1)
80039524:	afa20008 	sw	v0,8(sp)
80039528:	00220826 	xor	at,at,v0
8003952c:	2c220001 	sltiu	v0,at,1
80039530:	27bd0010 	addiu	sp,sp,16
    }
80039534:	03e00008 	jr	ra
80039538:	00000000 	nop

8003953c <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9ec4f98e00ed0785E>:
    fn eq(&self, other: &Self) -> bool {
8003953c:	27bdfff0 	addiu	sp,sp,-16
80039540:	afa40000 	sw	a0,0(sp)
80039544:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
80039548:	8c810000 	lw	at,0(a0)
8003954c:	afa1000c 	sw	at,12(sp)
80039550:	8ca20000 	lw	v0,0(a1)
80039554:	afa20008 	sw	v0,8(sp)
80039558:	00220826 	xor	at,at,v0
8003955c:	2c220001 	sltiu	v0,at,1
80039560:	27bd0010 	addiu	sp,sp,16
    }
80039564:	03e00008 	jr	ra
80039568:	00000000 	nop

8003956c <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbe3fcf7a36f19a66E>:
    fn eq(&self, other: &Self) -> bool {
8003956c:	27bdfff0 	addiu	sp,sp,-16
80039570:	afa40000 	sw	a0,0(sp)
80039574:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
80039578:	8c810000 	lw	at,0(a0)
8003957c:	afa1000c 	sw	at,12(sp)
80039580:	8ca20000 	lw	v0,0(a1)
80039584:	afa20008 	sw	v0,8(sp)
80039588:	00220826 	xor	at,at,v0
8003958c:	2c220001 	sltiu	v0,at,1
80039590:	27bd0010 	addiu	sp,sp,16
    }
80039594:	03e00008 	jr	ra
80039598:	00000000 	nop

8003959c <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc12b98033e3b55e1E>:
    fn eq(&self, other: &Self) -> bool {
8003959c:	27bdfff0 	addiu	sp,sp,-16
800395a0:	afa40000 	sw	a0,0(sp)
800395a4:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
800395a8:	8c810000 	lw	at,0(a0)
800395ac:	afa1000c 	sw	at,12(sp)
800395b0:	8ca20000 	lw	v0,0(a1)
800395b4:	afa20008 	sw	v0,8(sp)
800395b8:	00220826 	xor	at,at,v0
800395bc:	2c220001 	sltiu	v0,at,1
800395c0:	27bd0010 	addiu	sp,sp,16
    }
800395c4:	03e00008 	jr	ra
800395c8:	00000000 	nop

800395cc <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hdbd8a472611df449E>:
    fn eq(&self, other: &Self) -> bool {
800395cc:	27bdfff0 	addiu	sp,sp,-16
800395d0:	afa40000 	sw	a0,0(sp)
800395d4:	afa50004 	sw	a1,4(sp)
        self.as_ptr() == other.as_ptr()
800395d8:	8c810000 	lw	at,0(a0)
800395dc:	afa1000c 	sw	at,12(sp)
800395e0:	8ca20000 	lw	v0,0(a1)
800395e4:	afa20008 	sw	v0,8(sp)
800395e8:	00220826 	xor	at,at,v0
800395ec:	2c220001 	sltiu	v0,at,1
800395f0:	27bd0010 	addiu	sp,sp,16
    }
800395f4:	03e00008 	jr	ra
800395f8:	00000000 	nop

800395fc <_ZN98_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h2afdbdd28cb8f7c2E>:
    fn from(reference: &mut T) -> Self {
800395fc:	27bdfff0 	addiu	sp,sp,-16
80039600:	afa40008 	sw	a0,8(sp)
80039604:	afa5000c 	sw	a1,12(sp)
        unsafe { NonNull { pointer: reference as *mut T } }
80039608:	afa40000 	sw	a0,0(sp)
8003960c:	afa50004 	sw	a1,4(sp)
    }
80039610:	8fa20000 	lw	v0,0(sp)
80039614:	8fa30004 	lw	v1,4(sp)
80039618:	27bd0010 	addiu	sp,sp,16
8003961c:	03e00008 	jr	ra
80039620:	00000000 	nop

80039624 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17h4f1d8ecd37555f58E>:
    fn from(reference: &T) -> Self {
80039624:	27bdfff0 	addiu	sp,sp,-16
80039628:	afa40008 	sw	a0,8(sp)
8003962c:	afa5000c 	sw	a1,12(sp)
        unsafe { NonNull { pointer: reference as *const T } }
80039630:	afa40000 	sw	a0,0(sp)
80039634:	afa50004 	sw	a1,4(sp)
    }
80039638:	8fa20000 	lw	v0,0(sp)
8003963c:	8fa30004 	lw	v1,4(sp)
80039640:	27bd0010 	addiu	sp,sp,16
80039644:	03e00008 	jr	ra
80039648:	00000000 	nop

8003964c <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17h521f83d15ca4974aE>:
    fn from(reference: &T) -> Self {
8003964c:	27bdfff0 	addiu	sp,sp,-16
80039650:	afa40008 	sw	a0,8(sp)
80039654:	afa5000c 	sw	a1,12(sp)
        unsafe { NonNull { pointer: reference as *const T } }
80039658:	afa40000 	sw	a0,0(sp)
8003965c:	afa50004 	sw	a1,4(sp)
    }
80039660:	8fa20000 	lw	v0,0(sp)
80039664:	8fa30004 	lw	v1,4(sp)
80039668:	27bd0010 	addiu	sp,sp,16
8003966c:	03e00008 	jr	ra
80039670:	00000000 	nop

80039674 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17h70e047877930f053E>:
    fn from(reference: &T) -> Self {
80039674:	27bdfff0 	addiu	sp,sp,-16
80039678:	afa40008 	sw	a0,8(sp)
8003967c:	afa5000c 	sw	a1,12(sp)
        unsafe { NonNull { pointer: reference as *const T } }
80039680:	afa40000 	sw	a0,0(sp)
80039684:	afa50004 	sw	a1,4(sp)
    }
80039688:	8fa20000 	lw	v0,0(sp)
8003968c:	8fa30004 	lw	v1,4(sp)
80039690:	27bd0010 	addiu	sp,sp,16
80039694:	03e00008 	jr	ra
80039698:	00000000 	nop

8003969c <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hb05997782b961f4dE>:
    fn from(reference: &T) -> Self {
8003969c:	27bdfff0 	addiu	sp,sp,-16
800396a0:	afa40008 	sw	a0,8(sp)
800396a4:	afa5000c 	sw	a1,12(sp)
        unsafe { NonNull { pointer: reference as *const T } }
800396a8:	afa40000 	sw	a0,0(sp)
800396ac:	afa50004 	sw	a1,4(sp)
    }
800396b0:	8fa20000 	lw	v0,0(sp)
800396b4:	8fa30004 	lw	v1,4(sp)
800396b8:	27bd0010 	addiu	sp,sp,16
800396bc:	03e00008 	jr	ra
800396c0:	00000000 	nop

800396c4 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hbd53c9cbb1de8678E>:
    fn from(reference: &T) -> Self {
800396c4:	27bdfff0 	addiu	sp,sp,-16
800396c8:	afa40008 	sw	a0,8(sp)
800396cc:	afa5000c 	sw	a1,12(sp)
        unsafe { NonNull { pointer: reference as *const T } }
800396d0:	afa40000 	sw	a0,0(sp)
800396d4:	afa50004 	sw	a1,4(sp)
    }
800396d8:	8fa20000 	lw	v0,0(sp)
800396dc:	8fa30004 	lw	v1,4(sp)
800396e0:	27bd0010 	addiu	sp,sp,16
800396e4:	03e00008 	jr	ra
800396e8:	00000000 	nop

800396ec <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hbf2cf18804db8335E>:
    fn from(reference: &T) -> Self {
800396ec:	27bdfff0 	addiu	sp,sp,-16
800396f0:	afa40008 	sw	a0,8(sp)
800396f4:	afa5000c 	sw	a1,12(sp)
        unsafe { NonNull { pointer: reference as *const T } }
800396f8:	afa40000 	sw	a0,0(sp)
800396fc:	afa50004 	sw	a1,4(sp)
    }
80039700:	8fa20000 	lw	v0,0(sp)
80039704:	8fa30004 	lw	v1,4(sp)
80039708:	27bd0010 	addiu	sp,sp,16
8003970c:	03e00008 	jr	ra
80039710:	00000000 	nop

80039714 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h7332b93c4f97f066E>:
    pub const fn is_null(self) -> bool {
80039714:	27bdffe0 	addiu	sp,sp,-32
80039718:	afbf001c 	sw	ra,28(sp)
8003971c:	afa40018 	sw	a0,24(sp)
        const_eval_select((self as *const u8,), const_impl, runtime_impl)
80039720:	afa40014 	sw	a0,20(sp)
80039724:	8fa40014 	lw	a0,20(sp)
80039728:	0c00e5d0 	jal	80039740 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hc1edc93478f82fdcE>
8003972c:	00000000 	nop
    }
80039730:	8fbf001c 	lw	ra,28(sp)
80039734:	27bd0020 	addiu	sp,sp,32
80039738:	03e00008 	jr	ra
8003973c:	00000000 	nop

80039740 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hc1edc93478f82fdcE>:
        fn runtime_impl(ptr: *const u8) -> bool {
80039740:	27bdfff0 	addiu	sp,sp,-16
80039744:	afa40004 	sw	a0,4(sp)
80039748:	afa40008 	sw	a0,8(sp)
8003974c:	afa4000c 	sw	a0,12(sp)
            ptr.addr() == 0
80039750:	2c820001 	sltiu	v0,a0,1
80039754:	27bd0010 	addiu	sp,sp,16
        }
80039758:	03e00008 	jr	ra
8003975c:	00000000 	nop

80039760 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E>:
    pub const unsafe fn sub_ptr(self, origin: *const T) -> usize
80039760:	27bdffd0 	addiu	sp,sp,-48
80039764:	afbf002c 	sw	ra,44(sp)
80039768:	afa50014 	sw	a1,20(sp)
8003976c:	afa40018 	sw	a0,24(sp)
80039770:	afa4001c 	sw	a0,28(sp)
80039774:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80039778:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8003977c:	00000000 	nop
80039780:	14400009 	bnez	v0,800397a8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E+0x48>
80039784:	00000000 	nop
80039788:	0800e5e4 	j	80039790 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E+0x30>
8003978c:	00000000 	nop
80039790:	24010001 	li	at,1
        let pointee_size = mem::size_of::<T>();
80039794:	afa10024 	sw	at,36(sp)
        assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);
80039798:	14200010 	bnez	at,800397dc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E+0x7c>
8003979c:	00000000 	nop
800397a0:	0800e5f0 	j	800397c0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E+0x60>
800397a4:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800397a8:	8fa50014 	lw	a1,20(sp)
800397ac:	8fa40018 	lw	a0,24(sp)
800397b0:	0c01196b 	jal	800465ac <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr18precondition_check17hdcc3c25680e09c41E>
800397b4:	00000000 	nop
800397b8:	0800e5e4 	j	80039790 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E+0x30>
800397bc:	00000000 	nop
        assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);
800397c0:	3c018108 	lui	at,0x8108
800397c4:	2424b19a 	addiu	a0,at,-20070
800397c8:	3c018108 	lui	at,0x8108
800397cc:	2426b258 	addiu	a2,at,-19880
800397d0:	24050049 	li	a1,73
800397d4:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
800397d8:	00000000 	nop
800397dc:	24010000 	li	at,0
800397e0:	1400fff7 	bnez	zero,800397c0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E+0x60>
800397e4:	00000000 	nop
800397e8:	0800e5fc 	j	800397f0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h96da7f8a7a8990b8E+0x90>
800397ec:	00000000 	nop
        unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }
800397f0:	8fa10018 	lw	at,24(sp)
800397f4:	8fa20014 	lw	v0,20(sp)
800397f8:	00220823 	subu	at,at,v0
800397fc:	afa10028 	sw	at,40(sp)
80039800:	8fa20028 	lw	v0,40(sp)
    }
80039804:	8fbf002c 	lw	ra,44(sp)
80039808:	27bd0030 	addiu	sp,sp,48
8003980c:	03e00008 	jr	ra
80039810:	00000000 	nop

80039814 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr14runtime_ptr_ge17h2409c05d14b79ac4E>:
        const fn runtime_ptr_ge(this: *const (), origin: *const ()) -> bool {
80039814:	27bdffd8 	addiu	sp,sp,-40
80039818:	afbf0024 	sw	ra,36(sp)
8003981c:	afa4001c 	sw	a0,28(sp)
80039820:	afa50020 	sw	a1,32(sp)
            intrinsics::const_eval_select((this, origin), comptime, runtime)
80039824:	afa40014 	sw	a0,20(sp)
80039828:	afa50018 	sw	a1,24(sp)
8003982c:	8fa40014 	lw	a0,20(sp)
80039830:	8fa50018 	lw	a1,24(sp)
80039834:	0c00e613 	jal	8003984c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr14runtime_ptr_ge7runtime17hf1688f9563789161E>
80039838:	00000000 	nop
        }
8003983c:	8fbf0024 	lw	ra,36(sp)
80039840:	27bd0028 	addiu	sp,sp,40
80039844:	03e00008 	jr	ra
80039848:	00000000 	nop

8003984c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr14runtime_ptr_ge7runtime17hf1688f9563789161E>:
            fn runtime(this: *const (), origin: *const ()) -> bool {
8003984c:	27bdfff8 	addiu	sp,sp,-8
80039850:	afa40000 	sw	a0,0(sp)
80039854:	afa50004 	sw	a1,4(sp)
                this >= origin
80039858:	0085082b 	sltu	at,a0,a1
8003985c:	38220001 	xori	v0,at,0x1
80039860:	27bd0008 	addiu	sp,sp,8
            }
80039864:	03e00008 	jr	ra
80039868:	00000000 	nop

8003986c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to17hb855d440ce971e64E>:
    /// [tracking issue]: https://github.com/rust-lang/rust/issues/104203
    #[must_use]
    #[inline]
    #[unstable(feature = "pointer_is_aligned_to", issue = "96284")]
    #[rustc_const_unstable(feature = "const_pointer_is_aligned", issue = "104203")]
    pub const fn is_aligned_to(self, align: usize) -> bool {
8003986c:	27bdffa8 	addiu	sp,sp,-88
80039870:	afbf0054 	sw	ra,84(sp)
80039874:	afa50014 	sw	a1,20(sp)
80039878:	afa40018 	sw	a0,24(sp)
8003987c:	afa4003c 	sw	a0,60(sp)
80039880:	afa50040 	sw	a1,64(sp)
80039884:	afa50048 	sw	a1,72(sp)
80039888:	afa5004c 	sw	a1,76(sp)
            intrinsics::ctpop(self as $ActualT) as u32
8003988c:	00050842 	srl	at,a1,0x1
80039890:	3c025555 	lui	v0,0x5555
80039894:	34425555 	ori	v0,v0,0x5555
80039898:	00220824 	and	at,at,v0
8003989c:	00a11023 	subu	v0,a1,at
800398a0:	3c013333 	lui	at,0x3333
800398a4:	34233333 	ori	v1,at,0x3333
800398a8:	00430824 	and	at,v0,v1
800398ac:	00021082 	srl	v0,v0,0x2
800398b0:	00431024 	and	v0,v0,v1
800398b4:	00220821 	addu	at,at,v0
800398b8:	00011102 	srl	v0,at,0x4
800398bc:	00220821 	addu	at,at,v0
800398c0:	3c020f0f 	lui	v0,0xf0f
800398c4:	34420f0f 	ori	v0,v0,0xf0f
800398c8:	00220824 	and	at,at,v0
800398cc:	00011200 	sll	v0,at,0x8
800398d0:	00411821 	addu	v1,v0,at
800398d4:	00011400 	sll	v0,at,0x10
800398d8:	00431021 	addu	v0,v0,v1
800398dc:	00010e00 	sll	at,at,0x18
800398e0:	00220821 	addu	at,at,v0
800398e4:	00010e02 	srl	at,at,0x18
800398e8:	afa10050 	sw	at,80(sp)
800398ec:	8fa10050 	lw	at,80(sp)
800398f0:	24020001 	li	v0,1
        if !align.is_power_of_two() {
800398f4:	1022000f 	beq	at,v0,80039934 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to17hb855d440ce971e64E+0xc8>
800398f8:	00000000 	nop
800398fc:	0800e641 	j	80039904 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to17hb855d440ce971e64E+0x98>
80039900:	00000000 	nop
            panic!("is_aligned_to: align is not a power-of-two");
80039904:	3c018108 	lui	at,0x8108
80039908:	2425b294 	addiu	a1,at,-19820
8003990c:	27a4001c 	addiu	a0,sp,28
80039910:	afa40010 	sw	a0,16(sp)
80039914:	24060001 	li	a2,1
80039918:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003991c:	00000000 	nop
80039920:	8fa40010 	lw	a0,16(sp)
80039924:	3c018108 	lui	at,0x8108
80039928:	2425b29c 	addiu	a1,at,-19812
8003992c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80039930:	00000000 	nop
80039934:	8fa10014 	lw	at,20(sp)
80039938:	8fa20018 	lw	v0,24(sp)
8003993c:	afa20044 	sw	v0,68(sp)
        }

        // The cast to `()` is used to
        //   1. deal with fat pointers; and
        //   2. ensure that `align_offset` (in `const_impl`) doesn't actually try to compute an offset.
        const_eval_select((self.cast::<()>(), align), const_impl, runtime_impl)
80039940:	afa20034 	sw	v0,52(sp)
80039944:	afa10038 	sw	at,56(sp)
80039948:	8fa40034 	lw	a0,52(sp)
8003994c:	8fa50038 	lw	a1,56(sp)
80039950:	0c00e65a 	jal	80039968 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to12runtime_impl17h887c8e980b37e100E>
80039954:	00000000 	nop
    }
80039958:	8fbf0054 	lw	ra,84(sp)
8003995c:	27bd0058 	addiu	sp,sp,88
80039960:	03e00008 	jr	ra
80039964:	00000000 	nop

80039968 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to12runtime_impl17h887c8e980b37e100E>:
        fn runtime_impl(ptr: *const (), align: usize) -> bool {
80039968:	27bdffd8 	addiu	sp,sp,-40
8003996c:	afa40018 	sw	a0,24(sp)
80039970:	afa5001c 	sw	a1,28(sp)
80039974:	afa40020 	sw	a0,32(sp)
80039978:	afa40024 	sw	a0,36(sp)
8003997c:	afa40010 	sw	a0,16(sp)
            ptr.addr() & (align - 1) == 0
80039980:	24a1ffff 	addiu	at,a1,-1
80039984:	afa10014 	sw	at,20(sp)
80039988:	10a0000a 	beqz	a1,800399b4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to12runtime_impl17h887c8e980b37e100E+0x4c>
8003998c:	00000000 	nop
80039990:	0800e666 	j	80039998 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to12runtime_impl17h887c8e980b37e100E+0x30>
80039994:	00000000 	nop
80039998:	8fa10010 	lw	at,16(sp)
8003999c:	8fa20014 	lw	v0,20(sp)
800399a0:	00220824 	and	at,at,v0
800399a4:	2c220001 	sltiu	v0,at,1
800399a8:	27bd0028 	addiu	sp,sp,40
        }
800399ac:	03e00008 	jr	ra
800399b0:	00000000 	nop
            ptr.addr() & (align - 1) == 0
800399b4:	3c018108 	lui	at,0x8108
800399b8:	2424b2ac 	addiu	a0,at,-19796
800399bc:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800399c0:	00000000 	nop

800399c4 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17h14a33ded5ac369b8E>:
    /// assert_eq!(slice.len(), 3);
    /// ```
    #[inline]
    #[unstable(feature = "slice_ptr_len", issue = "71146")]
    #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
    pub const fn len(self) -> usize {
800399c4:	27bdffe0 	addiu	sp,sp,-32
800399c8:	afbf001c 	sw	ra,28(sp)
800399cc:	afa40014 	sw	a0,20(sp)
800399d0:	afa50018 	sw	a1,24(sp)
        metadata(self)
800399d4:	0c00e46c 	jal	800391b0 <_ZN4core3ptr8metadata8metadata17hce8b7d7f1ef8a93eE>
800399d8:	00000000 	nop
    }
800399dc:	8fbf001c 	lw	ra,28(sp)
800399e0:	27bd0020 	addiu	sp,sp,32
800399e4:	03e00008 	jr	ra
800399e8:	00000000 	nop

800399ec <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17ha931775fbc53b958E>:
    pub const fn len(self) -> usize {
800399ec:	27bdffe0 	addiu	sp,sp,-32
800399f0:	afbf001c 	sw	ra,28(sp)
800399f4:	afa40014 	sw	a0,20(sp)
800399f8:	afa50018 	sw	a1,24(sp)
        metadata(self)
800399fc:	0c00e475 	jal	800391d4 <_ZN4core3ptr8metadata8metadata17he1acf955a0a571f5E>
80039a00:	00000000 	nop
    }
80039a04:	8fbf001c 	lw	ra,28(sp)
80039a08:	27bd0020 	addiu	sp,sp,32
80039a0c:	03e00008 	jr	ra
80039a10:	00000000 	nop

80039a14 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17haefcf4bd787bad28E>:
    pub const fn len(self) -> usize {
80039a14:	27bdffe0 	addiu	sp,sp,-32
80039a18:	afbf001c 	sw	ra,28(sp)
80039a1c:	afa40014 	sw	a0,20(sp)
80039a20:	afa50018 	sw	a1,24(sp)
        metadata(self)
80039a24:	0c00e463 	jal	8003918c <_ZN4core3ptr8metadata8metadata17hbb60b31b5db383cfE>
80039a28:	00000000 	nop
    }
80039a2c:	8fbf001c 	lw	ra,28(sp)
80039a30:	27bd0020 	addiu	sp,sp,32
80039a34:	03e00008 	jr	ra
80039a38:	00000000 	nop

80039a3c <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hb4a60cfd4b05d1f1E>:
    pub const fn len(self) -> usize {
80039a3c:	27bdffe0 	addiu	sp,sp,-32
80039a40:	afbf001c 	sw	ra,28(sp)
80039a44:	afa40014 	sw	a0,20(sp)
80039a48:	afa50018 	sw	a1,24(sp)
        metadata(self)
80039a4c:	0c00e47e 	jal	800391f8 <_ZN4core3ptr8metadata8metadata17he6569c9c74456ea7E>
80039a50:	00000000 	nop
    }
80039a54:	8fbf001c 	lw	ra,28(sp)
80039a58:	27bd0020 	addiu	sp,sp,32
80039a5c:	03e00008 	jr	ra
80039a60:	00000000 	nop

80039a64 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hd4a723c2092474fbE>:
    pub const fn len(self) -> usize {
80039a64:	27bdffe0 	addiu	sp,sp,-32
80039a68:	afbf001c 	sw	ra,28(sp)
80039a6c:	afa40014 	sw	a0,20(sp)
80039a70:	afa50018 	sw	a1,24(sp)
        metadata(self)
80039a74:	0c00e45a 	jal	80039168 <_ZN4core3ptr8metadata8metadata17hb7eaf43eba912fd2E>
80039a78:	00000000 	nop
    }
80039a7c:	8fbf001c 	lw	ra,28(sp)
80039a80:	27bd0020 	addiu	sp,sp,32
80039a84:	03e00008 	jr	ra
80039a88:	00000000 	nop

80039a8c <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h4ba62f43f4e4d3efE>:
    /// assert_eq!(slice.as_ptr(), ptr::null());
    /// ```
    #[inline]
    #[unstable(feature = "slice_ptr_get", issue = "74265")]
    #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
    pub const fn as_ptr(self) -> *const T {
80039a8c:	27bdfff8 	addiu	sp,sp,-8
80039a90:	00801025 	move	v0,a0
80039a94:	afa20000 	sw	v0,0(sp)
80039a98:	afa50004 	sw	a1,4(sp)
80039a9c:	27bd0008 	addiu	sp,sp,8
        self as *const T
    }
80039aa0:	03e00008 	jr	ra
80039aa4:	00000000 	nop

80039aa8 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h6a7aae0b99a35e3eE>:
    pub const fn as_ptr(self) -> *const T {
80039aa8:	27bdfff8 	addiu	sp,sp,-8
80039aac:	00801025 	move	v0,a0
80039ab0:	afa20000 	sw	v0,0(sp)
80039ab4:	afa50004 	sw	a1,4(sp)
80039ab8:	27bd0008 	addiu	sp,sp,8
    }
80039abc:	03e00008 	jr	ra
80039ac0:	00000000 	nop

80039ac4 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h72dfbec44e82c8bcE>:
    pub const fn as_ptr(self) -> *const T {
80039ac4:	27bdfff8 	addiu	sp,sp,-8
80039ac8:	00801025 	move	v0,a0
80039acc:	afa20000 	sw	v0,0(sp)
80039ad0:	afa50004 	sw	a1,4(sp)
80039ad4:	27bd0008 	addiu	sp,sp,8
    }
80039ad8:	03e00008 	jr	ra
80039adc:	00000000 	nop

80039ae0 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h82c8eed925475b43E>:
    pub const fn as_ptr(self) -> *const T {
80039ae0:	27bdfff8 	addiu	sp,sp,-8
80039ae4:	00801025 	move	v0,a0
80039ae8:	afa20000 	sw	v0,0(sp)
80039aec:	afa50004 	sw	a1,4(sp)
80039af0:	27bd0008 	addiu	sp,sp,8
    }
80039af4:	03e00008 	jr	ra
80039af8:	00000000 	nop

80039afc <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17hdacca62b30e596aaE>:
    pub const fn as_ptr(self) -> *const T {
80039afc:	27bdfff8 	addiu	sp,sp,-8
80039b00:	00801025 	move	v0,a0
80039b04:	afa20000 	sw	v0,0(sp)
80039b08:	afa50004 	sw	a1,4(sp)
80039b0c:	27bd0008 	addiu	sp,sp,8
    }
80039b10:	03e00008 	jr	ra
80039b14:	00000000 	nop

80039b18 <_ZN4core3ptr20slice_from_raw_parts17h0ab563afab92ed6fE>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
80039b18:	27bdffe0 	addiu	sp,sp,-32
80039b1c:	afbf001c 	sw	ra,28(sp)
80039b20:	afa40010 	sw	a0,16(sp)
80039b24:	afa50014 	sw	a1,20(sp)
80039b28:	afa40018 	sw	a0,24(sp)
    from_raw_parts(data.cast(), len)
80039b2c:	0c00e4a3 	jal	8003928c <_ZN4core3ptr8metadata14from_raw_parts17hb362f311e3d98555E>
80039b30:	00000000 	nop
}
80039b34:	8fbf001c 	lw	ra,28(sp)
80039b38:	27bd0020 	addiu	sp,sp,32
80039b3c:	03e00008 	jr	ra
80039b40:	00000000 	nop

80039b44 <_ZN4core3ptr20slice_from_raw_parts17h0c1fd0adcab083c0E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
80039b44:	27bdffe0 	addiu	sp,sp,-32
80039b48:	afbf001c 	sw	ra,28(sp)
80039b4c:	afa40010 	sw	a0,16(sp)
80039b50:	afa50014 	sw	a1,20(sp)
80039b54:	afa40018 	sw	a0,24(sp)
    from_raw_parts(data.cast(), len)
80039b58:	0c00e487 	jal	8003921c <_ZN4core3ptr8metadata14from_raw_parts17h59fb30269ae415d8E>
80039b5c:	00000000 	nop
}
80039b60:	8fbf001c 	lw	ra,28(sp)
80039b64:	27bd0020 	addiu	sp,sp,32
80039b68:	03e00008 	jr	ra
80039b6c:	00000000 	nop

80039b70 <_ZN4core3ptr20slice_from_raw_parts17h0d7d46db288bcd34E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
80039b70:	27bdffe0 	addiu	sp,sp,-32
80039b74:	afbf001c 	sw	ra,28(sp)
80039b78:	afa40010 	sw	a0,16(sp)
80039b7c:	afa50014 	sw	a1,20(sp)
80039b80:	afa40018 	sw	a0,24(sp)
    from_raw_parts(data.cast(), len)
80039b84:	0c00e4b1 	jal	800392c4 <_ZN4core3ptr8metadata14from_raw_parts17hfcd6d7e30e5589bcE>
80039b88:	00000000 	nop
}
80039b8c:	8fbf001c 	lw	ra,28(sp)
80039b90:	27bd0020 	addiu	sp,sp,32
80039b94:	03e00008 	jr	ra
80039b98:	00000000 	nop

80039b9c <_ZN4core3ptr20slice_from_raw_parts17hfda2f490e7fcec8bE>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
80039b9c:	27bdffe0 	addiu	sp,sp,-32
80039ba0:	afbf001c 	sw	ra,28(sp)
80039ba4:	afa40010 	sw	a0,16(sp)
80039ba8:	afa50014 	sw	a1,20(sp)
80039bac:	afa40018 	sw	a0,24(sp)
    from_raw_parts(data.cast(), len)
80039bb0:	0c00e495 	jal	80039254 <_ZN4core3ptr8metadata14from_raw_parts17h938c560b03e9d26fE>
80039bb4:	00000000 	nop
}
80039bb8:	8fbf001c 	lw	ra,28(sp)
80039bbc:	27bd0020 	addiu	sp,sp,32
80039bc0:	03e00008 	jr	ra
80039bc4:	00000000 	nop

80039bc8 <_ZN4core3ptr24slice_from_raw_parts_mut17h141f33a1684c8a60E>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
80039bc8:	27bdffe0 	addiu	sp,sp,-32
80039bcc:	afbf001c 	sw	ra,28(sp)
80039bd0:	afa40010 	sw	a0,16(sp)
80039bd4:	afa50014 	sw	a1,20(sp)
80039bd8:	afa40018 	sw	a0,24(sp)
    from_raw_parts_mut(data.cast(), len)
80039bdc:	0c00e4bf 	jal	800392fc <_ZN4core3ptr8metadata18from_raw_parts_mut17h632204f4052cbfb1E>
80039be0:	00000000 	nop
}
80039be4:	8fbf001c 	lw	ra,28(sp)
80039be8:	27bd0020 	addiu	sp,sp,32
80039bec:	03e00008 	jr	ra
80039bf0:	00000000 	nop

80039bf4 <_ZN4core3ptr24slice_from_raw_parts_mut17h67dceb6de50bda88E>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
80039bf4:	27bdffe0 	addiu	sp,sp,-32
80039bf8:	afbf001c 	sw	ra,28(sp)
80039bfc:	afa40010 	sw	a0,16(sp)
80039c00:	afa50014 	sw	a1,20(sp)
80039c04:	afa40018 	sw	a0,24(sp)
    from_raw_parts_mut(data.cast(), len)
80039c08:	0c00e4cd 	jal	80039334 <_ZN4core3ptr8metadata18from_raw_parts_mut17hc2806463ced23b28E>
80039c0c:	00000000 	nop
}
80039c10:	8fbf001c 	lw	ra,28(sp)
80039c14:	27bd0020 	addiu	sp,sp,32
80039c18:	03e00008 	jr	ra
80039c1c:	00000000 	nop

80039c20 <_ZN4core3ptr4read17h577826971f2136a4E>:
pub const unsafe fn read<T>(src: *const T) -> T {
80039c20:	27bdffe0 	addiu	sp,sp,-32
80039c24:	afbf001c 	sw	ra,28(sp)
80039c28:	afa40014 	sw	a0,20(sp)
80039c2c:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80039c30:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80039c34:	00000000 	nop
80039c38:	14400009 	bnez	v0,80039c60 <_ZN4core3ptr4read17h577826971f2136a4E+0x40>
80039c3c:	00000000 	nop
80039c40:	0800e712 	j	80039c48 <_ZN4core3ptr4read17h577826971f2136a4E+0x28>
80039c44:	00000000 	nop
}
80039c48:	8fa10014 	lw	at,20(sp)
80039c4c:	90220000 	lbu	v0,0(at)
80039c50:	8fbf001c 	lw	ra,28(sp)
80039c54:	27bd0020 	addiu	sp,sp,32
80039c58:	03e00008 	jr	ra
80039c5c:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80039c60:	8fa40014 	lw	a0,20(sp)
80039c64:	24050001 	li	a1,1
80039c68:	0c01197e 	jal	800465f8 <_ZN4core3ptr4read18precondition_check17h9e0d16367bc3bfc8E>
80039c6c:	00000000 	nop
80039c70:	0800e712 	j	80039c48 <_ZN4core3ptr4read17h577826971f2136a4E+0x28>
80039c74:	00000000 	nop

80039c78 <_ZN4core3ptr4read17h62ae591ccb22f4e5E>:
pub const unsafe fn read<T>(src: *const T) -> T {
80039c78:	27bdffe0 	addiu	sp,sp,-32
80039c7c:	afbf001c 	sw	ra,28(sp)
80039c80:	afa40014 	sw	a0,20(sp)
80039c84:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80039c88:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80039c8c:	00000000 	nop
80039c90:	14400009 	bnez	v0,80039cb8 <_ZN4core3ptr4read17h62ae591ccb22f4e5E+0x40>
80039c94:	00000000 	nop
80039c98:	0800e728 	j	80039ca0 <_ZN4core3ptr4read17h62ae591ccb22f4e5E+0x28>
80039c9c:	00000000 	nop
}
80039ca0:	8fa10014 	lw	at,20(sp)
80039ca4:	90220000 	lbu	v0,0(at)
80039ca8:	8fbf001c 	lw	ra,28(sp)
80039cac:	27bd0020 	addiu	sp,sp,32
80039cb0:	03e00008 	jr	ra
80039cb4:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80039cb8:	8fa40014 	lw	a0,20(sp)
80039cbc:	24050001 	li	a1,1
80039cc0:	0c01197e 	jal	800465f8 <_ZN4core3ptr4read18precondition_check17h9e0d16367bc3bfc8E>
80039cc4:	00000000 	nop
80039cc8:	0800e728 	j	80039ca0 <_ZN4core3ptr4read17h62ae591ccb22f4e5E+0x28>
80039ccc:	00000000 	nop

80039cd0 <_ZN4core3ptr4read17h642b0fbf995d98adE>:
pub const unsafe fn read<T>(src: *const T) -> T {
80039cd0:	27bdffe0 	addiu	sp,sp,-32
80039cd4:	afbf001c 	sw	ra,28(sp)
80039cd8:	afa40014 	sw	a0,20(sp)
80039cdc:	afa40018 	sw	a0,24(sp)
        ub_checks::assert_unsafe_precondition!(
80039ce0:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80039ce4:	00000000 	nop
80039ce8:	14400009 	bnez	v0,80039d10 <_ZN4core3ptr4read17h642b0fbf995d98adE+0x40>
80039cec:	00000000 	nop
80039cf0:	0800e73e 	j	80039cf8 <_ZN4core3ptr4read17h642b0fbf995d98adE+0x28>
80039cf4:	00000000 	nop
        crate::intrinsics::read_via_copy(src)
80039cf8:	8fa10014 	lw	at,20(sp)
80039cfc:	8c220000 	lw	v0,0(at)
}
80039d00:	8fbf001c 	lw	ra,28(sp)
80039d04:	27bd0020 	addiu	sp,sp,32
80039d08:	03e00008 	jr	ra
80039d0c:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80039d10:	8fa40014 	lw	a0,20(sp)
80039d14:	24050004 	li	a1,4
80039d18:	0c01197e 	jal	800465f8 <_ZN4core3ptr4read18precondition_check17h9e0d16367bc3bfc8E>
80039d1c:	00000000 	nop
80039d20:	0800e73e 	j	80039cf8 <_ZN4core3ptr4read17h642b0fbf995d98adE+0x28>
80039d24:	00000000 	nop

80039d28 <_ZN4core3ptr5write17h4459b32568548eceE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80039d28:	27bdffd8 	addiu	sp,sp,-40
80039d2c:	afbf0024 	sw	ra,36(sp)
80039d30:	afa40014 	sw	a0,20(sp)
80039d34:	00a00825 	move	at,a1
80039d38:	afa10018 	sw	at,24(sp)
80039d3c:	afa4001c 	sw	a0,28(sp)
80039d40:	a3a50023 	sb	a1,35(sp)
        ub_checks::assert_unsafe_precondition!(
80039d44:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80039d48:	00000000 	nop
80039d4c:	1440000a 	bnez	v0,80039d78 <_ZN4core3ptr5write17h4459b32568548eceE+0x50>
80039d50:	00000000 	nop
80039d54:	0800e757 	j	80039d5c <_ZN4core3ptr5write17h4459b32568548eceE+0x34>
80039d58:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80039d5c:	8fa10018 	lw	at,24(sp)
80039d60:	8fa20014 	lw	v0,20(sp)
80039d64:	a0410000 	sb	at,0(v0)
}
80039d68:	8fbf0024 	lw	ra,36(sp)
80039d6c:	27bd0028 	addiu	sp,sp,40
80039d70:	03e00008 	jr	ra
80039d74:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80039d78:	8fa40014 	lw	a0,20(sp)
80039d7c:	24050001 	li	a1,1
80039d80:	0c011991 	jal	80046644 <_ZN4core3ptr5write18precondition_check17hf1cf4e5c013cb295E>
80039d84:	00000000 	nop
80039d88:	0800e757 	j	80039d5c <_ZN4core3ptr5write17h4459b32568548eceE+0x34>
80039d8c:	00000000 	nop

80039d90 <_ZN4core3ptr5write17h6c5fae36b352f0feE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
80039d90:	27bdffd8 	addiu	sp,sp,-40
80039d94:	afbf0024 	sw	ra,36(sp)
80039d98:	afa50014 	sw	a1,20(sp)
80039d9c:	afa40018 	sw	a0,24(sp)
80039da0:	afa4001c 	sw	a0,28(sp)
80039da4:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80039da8:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80039dac:	00000000 	nop
80039db0:	1440000a 	bnez	v0,80039ddc <_ZN4core3ptr5write17h6c5fae36b352f0feE+0x4c>
80039db4:	00000000 	nop
80039db8:	0800e770 	j	80039dc0 <_ZN4core3ptr5write17h6c5fae36b352f0feE+0x30>
80039dbc:	00000000 	nop
        intrinsics::write_via_move(dst, src)
80039dc0:	8fa10014 	lw	at,20(sp)
80039dc4:	8fa20018 	lw	v0,24(sp)
80039dc8:	ac410000 	sw	at,0(v0)
}
80039dcc:	8fbf0024 	lw	ra,36(sp)
80039dd0:	27bd0028 	addiu	sp,sp,40
80039dd4:	03e00008 	jr	ra
80039dd8:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80039ddc:	8fa40018 	lw	a0,24(sp)
80039de0:	24050004 	li	a1,4
80039de4:	0c011991 	jal	80046644 <_ZN4core3ptr5write18precondition_check17hf1cf4e5c013cb295E>
80039de8:	00000000 	nop
80039dec:	0800e770 	j	80039dc0 <_ZN4core3ptr5write17h6c5fae36b352f0feE+0x30>
80039df0:	00000000 	nop

80039df4 <_ZN4core3ptr13read_volatile17hd45decbd46c08055E>:
pub unsafe fn read_volatile<T>(src: *const T) -> T {
80039df4:	27bdffe0 	addiu	sp,sp,-32
80039df8:	afbf001c 	sw	ra,28(sp)
80039dfc:	afa40010 	sw	a0,16(sp)
80039e00:	afa40014 	sw	a0,20(sp)
        ub_checks::assert_unsafe_precondition!(
80039e04:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80039e08:	00000000 	nop
80039e0c:	1440000b 	bnez	v0,80039e3c <_ZN4core3ptr13read_volatile17hd45decbd46c08055E+0x48>
80039e10:	00000000 	nop
80039e14:	0800e787 	j	80039e1c <_ZN4core3ptr13read_volatile17hd45decbd46c08055E+0x28>
80039e18:	00000000 	nop
        intrinsics::volatile_load(src)
80039e1c:	8fa10010 	lw	at,16(sp)
80039e20:	8c210000 	lw	at,0(at)
80039e24:	afa10018 	sw	at,24(sp)
80039e28:	8fa20018 	lw	v0,24(sp)
}
80039e2c:	8fbf001c 	lw	ra,28(sp)
80039e30:	27bd0020 	addiu	sp,sp,32
80039e34:	03e00008 	jr	ra
80039e38:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
80039e3c:	8fa40010 	lw	a0,16(sp)
80039e40:	24050004 	li	a1,4
80039e44:	0c0119a4 	jal	80046690 <_ZN4core3ptr13read_volatile18precondition_check17hbf3699e138ebb66dE>
80039e48:	00000000 	nop
80039e4c:	0800e787 	j	80039e1c <_ZN4core3ptr13read_volatile17hd45decbd46c08055E+0x28>
80039e50:	00000000 	nop

80039e54 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E>:
/// power-of-two, it will probably be more prudent to just change to a naive implementation rather
/// than trying to adapt this to accommodate that change.
///
/// Any questions go to @nagisa.
#[lang = "align_offset"]
pub(crate) const unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {
80039e54:	27bdff78 	addiu	sp,sp,-136
80039e58:	afbf0084 	sw	ra,132(sp)
80039e5c:	afa50024 	sw	a1,36(sp)
80039e60:	afa40038 	sw	a0,56(sp)
80039e64:	afa5003c 	sw	a1,60(sp)
80039e68:	24010001 	li	at,1
            mod_gate = new_gate;
        }
        inverse & m_minus_one
    }

    let stride = mem::size_of::<T>();
80039e6c:	afa10040 	sw	at,64(sp)

    // SAFETY: This is just an inlined `p.addr()` (which is not
    // a `const fn` so we cannot call it).
    // During const eval, we hook this function to ensure that the pointer never
    // has provenance, making this sound.
    let addr: usize = unsafe { mem::transmute(p) };
80039e70:	00801025 	move	v0,a0
80039e74:	afa20028 	sw	v0,40(sp)
80039e78:	afa40044 	sw	a0,68(sp)

    // SAFETY: `a` is a power-of-two, therefore non-zero.
    let a_minus_one = unsafe { unchecked_sub(a, 1) };
80039e7c:	24a2ffff 	addiu	v0,a1,-1
80039e80:	afa2002c 	sw	v0,44(sp)
80039e84:	afa20048 	sw	v0,72(sp)

    if stride == 0 {
80039e88:	1420000b 	bnez	at,80039eb8 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x64>
80039e8c:	00000000 	nop
80039e90:	0800e7a6 	j	80039e98 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x44>
80039e94:	00000000 	nop
        // SPECIAL_CASE: handle 0-sized types. No matter how many times we step, the address will
        // stay the same, so no offset will be able to align the pointer unless it is already
        // aligned. This branch _will_ be optimized out as `stride` is known at compile-time.
        let p_mod_a = addr & a_minus_one;
80039e98:	8fa10028 	lw	at,40(sp)
80039e9c:	8fa2002c 	lw	v0,44(sp)
80039ea0:	00220824 	and	at,at,v0
80039ea4:	afa1004c 	sw	at,76(sp)
        return if p_mod_a == 0 { 0 } else { usize::MAX };
80039ea8:	10200009 	beqz	at,80039ed0 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x7c>
80039eac:	00000000 	nop
80039eb0:	0800e7b7 	j	80039edc <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x88>
80039eb4:	00000000 	nop
    }

    // SAFETY: `stride == 0` case has been handled by the special case above.
    let a_mod_stride = unsafe { unchecked_rem(a, stride) };
80039eb8:	afa00050 	sw	zero,80(sp)
80039ebc:	24010001 	li	at,1
    if a_mod_stride == 0 {
80039ec0:	1420000f 	bnez	at,80039f00 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0xac>
80039ec4:	00000000 	nop
80039ec8:	0800e7d1 	j	80039f44 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0xf0>
80039ecc:	00000000 	nop
        return if p_mod_a == 0 { 0 } else { usize::MAX };
80039ed0:	afa00030 	sw	zero,48(sp)
80039ed4:	0800e7bb 	j	80039eec <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x98>
80039ed8:	00000000 	nop
80039edc:	2401ffff 	li	at,-1
80039ee0:	afa10030 	sw	at,48(sp)
80039ee4:	0800e7bb 	j	80039eec <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x98>
80039ee8:	00000000 	nop
        return wrapping_mul(minusp2, unsafe { mod_inv(s2, a2) }) & a2minus1;
    }

    // Cannot be aligned at all.
    usize::MAX
}
80039eec:	8fa20030 	lw	v0,48(sp)
80039ef0:	8fbf0084 	lw	ra,132(sp)
80039ef4:	27bd0088 	addiu	sp,sp,136
80039ef8:	03e00008 	jr	ra
80039efc:	00000000 	nop
        let aligned_address = wrapping_add(addr, a_minus_one) & wrapping_sub(0, a);
80039f00:	8fa20028 	lw	v0,40(sp)
80039f04:	8fa30024 	lw	v1,36(sp)
80039f08:	8fa1002c 	lw	at,44(sp)
80039f0c:	00410821 	addu	at,v0,at
80039f10:	24040000 	li	a0,0
80039f14:	00031823 	negu	v1,v1
80039f18:	00230824 	and	at,at,v1
80039f1c:	afa10054 	sw	at,84(sp)
        let byte_offset = wrapping_sub(aligned_address, addr);
80039f20:	00220823 	subu	at,at,v0
80039f24:	afa10020 	sw	at,32(sp)
80039f28:	afa10058 	sw	at,88(sp)
        let addr_mod_stride = unsafe { unchecked_rem(addr, stride) };
80039f2c:	afa0005c 	sw	zero,92(sp)
80039f30:	24010001 	li	at,1
        return if addr_mod_stride == 0 {
80039f34:	14200017 	bnez	at,80039f94 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x140>
80039f38:	00000000 	nop
80039f3c:	0800e7e9 	j	80039fa4 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x150>
80039f40:	00000000 	nop
        let x = cttz_nonzero(stride);
80039f44:	8fa20024 	lw	v0,36(sp)
80039f48:	afa00060 	sw	zero,96(sp)
80039f4c:	8fa10060 	lw	at,96(sp)
80039f50:	afa10018 	sw	at,24(sp)
80039f54:	afa10064 	sw	at,100(sp)
        let y = cttz_nonzero(a);
80039f58:	2443ffff 	addiu	v1,v0,-1
80039f5c:	00401027 	nor	v0,v0,zero
80039f60:	00431024 	and	v0,v0,v1
80039f64:	70431820 	clz	v1,v0
80039f68:	24020020 	li	v0,32
80039f6c:	00431023 	subu	v0,v0,v1
80039f70:	afa20068 	sw	v0,104(sp)
80039f74:	8fa20068 	lw	v0,104(sp)
80039f78:	afa2001c 	sw	v0,28(sp)
80039f7c:	afa2006c 	sw	v0,108(sp)
        if x < y { x } else { y }
80039f80:	0022082b 	sltu	at,at,v0
80039f84:	1420000f 	bnez	at,80039fc4 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x170>
80039f88:	00000000 	nop
80039f8c:	0800e7ed 	j	80039fb4 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x160>
80039f90:	00000000 	nop
            unsafe { exact_div(byte_offset, stride) }
80039f94:	8fa10020 	lw	at,32(sp)
80039f98:	afa10030 	sw	at,48(sp)
80039f9c:	0800e7bb 	j	80039eec <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x98>
80039fa0:	00000000 	nop
80039fa4:	2401ffff 	li	at,-1
            usize::MAX
80039fa8:	afa10030 	sw	at,48(sp)
        return if addr_mod_stride == 0 {
80039fac:	0800e7bb 	j	80039eec <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x98>
80039fb0:	00000000 	nop
        if x < y { x } else { y }
80039fb4:	8fa1001c 	lw	at,28(sp)
80039fb8:	afa10034 	sw	at,52(sp)
80039fbc:	0800e7f5 	j	80039fd4 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x180>
80039fc0:	00000000 	nop
80039fc4:	8fa10018 	lw	at,24(sp)
80039fc8:	afa10034 	sw	at,52(sp)
80039fcc:	0800e7f5 	j	80039fd4 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x180>
80039fd0:	00000000 	nop
    let gcd = unsafe { unchecked_shl(1usize, gcdpow) };
80039fd4:	8fa10028 	lw	at,40(sp)
80039fd8:	8fa30034 	lw	v1,52(sp)
80039fdc:	24020001 	li	v0,1
80039fe0:	00621004 	sllv	v0,v0,v1
80039fe4:	afa20070 	sw	v0,112(sp)
    if addr & unsafe { unchecked_sub(gcd, 1) } == 0 {
80039fe8:	2442ffff 	addiu	v0,v0,-1
80039fec:	00220824 	and	at,at,v0
80039ff0:	14200020 	bnez	at,8003a074 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x220>
80039ff4:	00000000 	nop
80039ff8:	0800e800 	j	8003a000 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x1ac>
80039ffc:	00000000 	nop
        let a2 = unsafe { unchecked_shr(a, gcdpow) };
8003a000:	8fa10028 	lw	at,40(sp)
8003a004:	8fa2002c 	lw	v0,44(sp)
8003a008:	8fa30024 	lw	v1,36(sp)
8003a00c:	8fa40034 	lw	a0,52(sp)
8003a010:	00832806 	srlv	a1,v1,a0
8003a014:	afa50074 	sw	a1,116(sp)
        let a2minus1 = unsafe { unchecked_sub(a2, 1) };
8003a018:	24a3ffff 	addiu	v1,a1,-1
8003a01c:	afa30014 	sw	v1,20(sp)
8003a020:	afa30078 	sw	v1,120(sp)
        let s2 = unsafe { unchecked_shr(stride & a_minus_one, gcdpow) };
8003a024:	30430001 	andi	v1,v0,0x1
8003a028:	8fa40034 	lw	a0,52(sp)
8003a02c:	00832006 	srlv	a0,v1,a0
8003a030:	afa4007c 	sw	a0,124(sp)
        let minusp2 = unsafe { unchecked_sub(a2, unchecked_shr(addr & a_minus_one, gcdpow)) };
8003a034:	00220824 	and	at,at,v0
8003a038:	8fa20034 	lw	v0,52(sp)
8003a03c:	00410806 	srlv	at,at,v0
8003a040:	00a10823 	subu	at,a1,at
8003a044:	afa10010 	sw	at,16(sp)
8003a048:	afa10080 	sw	at,128(sp)
        return wrapping_mul(minusp2, unsafe { mod_inv(s2, a2) }) & a2minus1;
8003a04c:	0c00e821 	jal	8003a084 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E>
8003a050:	00000000 	nop
8003a054:	8fa10010 	lw	at,16(sp)
8003a058:	00401825 	move	v1,v0
8003a05c:	8fa20014 	lw	v0,20(sp)
8003a060:	70230802 	mul	at,at,v1
8003a064:	00220824 	and	at,at,v0
8003a068:	afa10030 	sw	at,48(sp)
//! # The Rust Core Library
8003a06c:	0800e7bb 	j	80039eec <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x98>
8003a070:	00000000 	nop
8003a074:	2401ffff 	li	at,-1
    usize::MAX
8003a078:	afa10030 	sw	at,48(sp)
}
8003a07c:	0800e7bb 	j	80039eec <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E+0x98>
8003a080:	00000000 	nop

8003a084 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E>:
    const unsafe fn mod_inv(x: usize, m: usize) -> usize {
8003a084:	27bdffb8 	addiu	sp,sp,-72
8003a088:	afa50014 	sw	a1,20(sp)
8003a08c:	afa40018 	sw	a0,24(sp)
8003a090:	afa40034 	sw	a0,52(sp)
8003a094:	afa50038 	sw	a1,56(sp)
        let m_minus_one = unsafe { unchecked_sub(m, 1) };
8003a098:	24a1ffff 	addiu	at,a1,-1
8003a09c:	afa1001c 	sw	at,28(sp)
8003a0a0:	afa1003c 	sw	at,60(sp)
        let mut inverse = INV_TABLE_MOD_16[(x & (INV_TABLE_MOD - 1)) >> 1] as usize;
8003a0a4:	3c028108 	lui	v0,0x8108
8003a0a8:	2443b2bc 	addiu	v1,v0,-19780
8003a0ac:	88610007 	lwl	at,7(v1)
8003a0b0:	98610004 	lwr	at,4(v1)
8003a0b4:	afa1002c 	sw	at,44(sp)
8003a0b8:	88610003 	lwl	at,3(v1)
8003a0bc:	9841b2bc 	lwr	at,-19780(v0)
8003a0c0:	afa10028 	sw	at,40(sp)
8003a0c4:	7c811040 	ext	at,a0,0x1,0x3
8003a0c8:	afa10020 	sw	at,32(sp)
8003a0cc:	2c210008 	sltiu	at,at,8
8003a0d0:	1020000c 	beqz	at,8003a104 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0x80>
8003a0d4:	00000000 	nop
8003a0d8:	0800e838 	j	8003a0e0 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0x5c>
8003a0dc:	00000000 	nop
8003a0e0:	8fa20020 	lw	v0,32(sp)
8003a0e4:	27a10028 	addiu	at,sp,40
8003a0e8:	00220821 	addu	at,at,v0
8003a0ec:	90210000 	lbu	at,0(at)
8003a0f0:	afa10024 	sw	at,36(sp)
8003a0f4:	24010010 	li	at,16
        let mut mod_gate = INV_TABLE_MOD;
8003a0f8:	afa10030 	sw	at,48(sp)
        loop {
8003a0fc:	0800e847 	j	8003a11c <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0x98>
8003a100:	00000000 	nop
        let mut inverse = INV_TABLE_MOD_16[(x & (INV_TABLE_MOD - 1)) >> 1] as usize;
8003a104:	8fa40020 	lw	a0,32(sp)
8003a108:	3c018108 	lui	at,0x8108
8003a10c:	2426b34c 	addiu	a2,at,-19636
8003a110:	24050008 	li	a1,8
8003a114:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
8003a118:	00000000 	nop
            if mod_gate >= m {
8003a11c:	8fa20014 	lw	v0,20(sp)
8003a120:	8fa10030 	lw	at,48(sp)
8003a124:	0022082b 	sltu	at,at,v0
8003a128:	10200016 	beqz	at,8003a184 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0x100>
8003a12c:	00000000 	nop
8003a130:	0800e84e 	j	8003a138 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0xb4>
8003a134:	00000000 	nop
            inverse = wrapping_mul(inverse, wrapping_sub(2usize, wrapping_mul(x, inverse)));
8003a138:	8fa20018 	lw	v0,24(sp)
8003a13c:	8fa10024 	lw	at,36(sp)
8003a140:	70411802 	mul	v1,v0,at
8003a144:	24020002 	li	v0,2
8003a148:	00431023 	subu	v0,v0,v1
8003a14c:	70220802 	mul	at,at,v0
8003a150:	afa10024 	sw	at,36(sp)
            let (new_gate, overflow) = mul_with_overflow(mod_gate, mod_gate);
8003a154:	8fa30030 	lw	v1,48(sp)
8003a158:	00630019 	multu	v1,v1
8003a15c:	00000810 	mfhi	at
8003a160:	0001102b 	sltu	v0,zero,at
8003a164:	70631802 	mul	v1,v1,v1
8003a168:	afa30010 	sw	v1,16(sp)
8003a16c:	afa30040 	sw	v1,64(sp)
8003a170:	a3a20047 	sb	v0,71(sp)
            if overflow {
8003a174:	10200009 	beqz	at,8003a19c <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0x118>
8003a178:	00000000 	nop
8003a17c:	0800e861 	j	8003a184 <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0x100>
8003a180:	00000000 	nop
        inverse & m_minus_one
8003a184:	8fa2001c 	lw	v0,28(sp)
8003a188:	8fa10024 	lw	at,36(sp)
8003a18c:	00221024 	and	v0,at,v0
8003a190:	27bd0048 	addiu	sp,sp,72
    }
8003a194:	03e00008 	jr	ra
8003a198:	00000000 	nop
            mod_gate = new_gate;
8003a19c:	8fa10010 	lw	at,16(sp)
8003a1a0:	afa10030 	sw	at,48(sp)
        loop {
8003a1a4:	0800e847 	j	8003a11c <_ZN4core3ptr12align_offset7mod_inv17h298cb9b39b92be95E+0x98>
8003a1a8:	00000000 	nop

8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>:
pub(crate) const fn check_language_ub() -> bool {
8003a1ac:	27bdffe8 	addiu	sp,sp,-24
8003a1b0:	afbf0014 	sw	ra,20(sp)
    intrinsics::ub_checks() && const_eval_select((), comptime, runtime)
8003a1b4:	0800e86f 	j	8003a1bc <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE+0x10>
8003a1b8:	00000000 	nop
8003a1bc:	0c00e87a 	jal	8003a1e8 <_ZN4core9ub_checks17check_language_ub7runtime17h5a1d8ecdd626287fE>
8003a1c0:	00000000 	nop
8003a1c4:	a3a20013 	sb	v0,19(sp)
8003a1c8:	0800e874 	j	8003a1d0 <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE+0x24>
8003a1cc:	00000000 	nop
}
8003a1d0:	93a10013 	lbu	at,19(sp)
8003a1d4:	30220001 	andi	v0,at,0x1
8003a1d8:	8fbf0014 	lw	ra,20(sp)
8003a1dc:	27bd0018 	addiu	sp,sp,24
8003a1e0:	03e00008 	jr	ra
8003a1e4:	00000000 	nop

8003a1e8 <_ZN4core9ub_checks17check_language_ub7runtime17h5a1d8ecdd626287fE>:
    fn runtime() -> bool {
8003a1e8:	24020001 	li	v0,1
    }
8003a1ec:	03e00008 	jr	ra
8003a1f0:	00000000 	nop

8003a1f4 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE>:
pub(crate) const fn is_aligned_and_not_null(ptr: *const (), align: usize) -> bool {
8003a1f4:	27bdffd8 	addiu	sp,sp,-40
8003a1f8:	afbf0024 	sw	ra,36(sp)
8003a1fc:	afa50010 	sw	a1,16(sp)
8003a200:	afa40014 	sw	a0,20(sp)
8003a204:	afa4001c 	sw	a0,28(sp)
8003a208:	afa50020 	sw	a1,32(sp)
    !ptr.is_null() && ptr.is_aligned_to(align)
8003a20c:	0c00e5c5 	jal	80039714 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h7332b93c4f97f066E>
8003a210:	00000000 	nop
8003a214:	1440000a 	bnez	v0,8003a240 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE+0x4c>
8003a218:	00000000 	nop
8003a21c:	0800e889 	j	8003a224 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE+0x30>
8003a220:	00000000 	nop
8003a224:	8fa50010 	lw	a1,16(sp)
8003a228:	8fa40014 	lw	a0,20(sp)
8003a22c:	0c00e61b 	jal	8003986c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13is_aligned_to17hb855d440ce971e64E>
8003a230:	00000000 	nop
8003a234:	a3a2001b 	sb	v0,27(sp)
8003a238:	0800e894 	j	8003a250 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE+0x5c>
8003a23c:	00000000 	nop
8003a240:	24010000 	li	at,0
8003a244:	a3a0001b 	sb	zero,27(sp)
8003a248:	0800e894 	j	8003a250 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE+0x5c>
8003a24c:	00000000 	nop
}
8003a250:	93a1001b 	lbu	at,27(sp)
8003a254:	30220001 	andi	v0,at,0x1
8003a258:	8fbf0024 	lw	ra,36(sp)
8003a25c:	27bd0028 	addiu	sp,sp,40
8003a260:	03e00008 	jr	ra
8003a264:	00000000 	nop

8003a268 <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E>:
pub(crate) const fn is_valid_allocation_size(size: usize, len: usize) -> bool {
8003a268:	27bdffd8 	addiu	sp,sp,-40
8003a26c:	afa50014 	sw	a1,20(sp)
8003a270:	afa40018 	sw	a0,24(sp)
8003a274:	afa40020 	sw	a0,32(sp)
8003a278:	afa50024 	sw	a1,36(sp)
    let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
8003a27c:	14800007 	bnez	a0,8003a29c <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E+0x34>
8003a280:	00000000 	nop
8003a284:	0800e8a3 	j	8003a28c <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E+0x24>
8003a288:	00000000 	nop
8003a28c:	2401ffff 	li	at,-1
8003a290:	afa1001c 	sw	at,28(sp)
8003a294:	0800e8ac 	j	8003a2b0 <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E+0x48>
8003a298:	00000000 	nop
8003a29c:	8fa10018 	lw	at,24(sp)
8003a2a0:	10200013 	beqz	at,8003a2f0 <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E+0x88>
8003a2a4:	00000000 	nop
8003a2a8:	0800e8b3 	j	8003a2cc <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E+0x64>
8003a2ac:	00000000 	nop
    len <= max_len
8003a2b0:	8fa20014 	lw	v0,20(sp)
8003a2b4:	8fa1001c 	lw	at,28(sp)
8003a2b8:	0022082b 	sltu	at,at,v0
8003a2bc:	38220001 	xori	v0,at,0x1
8003a2c0:	27bd0028 	addiu	sp,sp,40
}
8003a2c4:	03e00008 	jr	ra
8003a2c8:	00000000 	nop
8003a2cc:	8fa10018 	lw	at,24(sp)
8003a2d0:	3c027fff 	lui	v0,0x7fff
8003a2d4:	3442ffff 	ori	v0,v0,0xffff
    let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
8003a2d8:	0041001b 	divu	zero,v0,at
8003a2dc:	002001f4 	teq	at,zero,0x7
8003a2e0:	00000812 	mflo	at
8003a2e4:	afa1001c 	sw	at,28(sp)
8003a2e8:	0800e8ac 	j	8003a2b0 <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E+0x48>
8003a2ec:	00000000 	nop
8003a2f0:	3c018108 	lui	at,0x8108
8003a2f4:	2424b3cc 	addiu	a0,at,-19508
8003a2f8:	0c011b70 	jal	80046dc0 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
8003a2fc:	00000000 	nop

8003a300 <_ZN4core9ub_checks17is_nonoverlapping17h180be23ec26219b9E>:
pub(crate) const fn is_nonoverlapping(
8003a300:	27bdffc8 	addiu	sp,sp,-56
8003a304:	afbf0034 	sw	ra,52(sp)
8003a308:	afa40024 	sw	a0,36(sp)
8003a30c:	afa50028 	sw	a1,40(sp)
8003a310:	afa6002c 	sw	a2,44(sp)
8003a314:	afa70030 	sw	a3,48(sp)
    const_eval_select((src, dst, size, count), comptime, runtime)
8003a318:	afa40014 	sw	a0,20(sp)
8003a31c:	afa50018 	sw	a1,24(sp)
8003a320:	afa6001c 	sw	a2,28(sp)
8003a324:	afa70020 	sw	a3,32(sp)
8003a328:	8fa40014 	lw	a0,20(sp)
8003a32c:	8fa50018 	lw	a1,24(sp)
8003a330:	8fa6001c 	lw	a2,28(sp)
8003a334:	8fa70020 	lw	a3,32(sp)
8003a338:	0c00e8d4 	jal	8003a350 <_ZN4core9ub_checks17is_nonoverlapping7runtime17hb1cbf4182e21d395E>
8003a33c:	00000000 	nop
}
8003a340:	8fbf0034 	lw	ra,52(sp)
8003a344:	27bd0038 	addiu	sp,sp,56
8003a348:	03e00008 	jr	ra
8003a34c:	00000000 	nop

8003a350 <_ZN4core9ub_checks17is_nonoverlapping7runtime17hb1cbf4182e21d395E>:
    fn runtime(src: *const (), dst: *const (), size: usize, count: usize) -> bool {
8003a350:	27bdffa0 	addiu	sp,sp,-96
8003a354:	afbf005c 	sw	ra,92(sp)
8003a358:	afa70014 	sw	a3,20(sp)
8003a35c:	afa60018 	sw	a2,24(sp)
8003a360:	00a00825 	move	at,a1
8003a364:	8fa50014 	lw	a1,20(sp)
8003a368:	00801025 	move	v0,a0
8003a36c:	8fa40018 	lw	a0,24(sp)
8003a370:	afa2002c 	sw	v0,44(sp)
8003a374:	afa10030 	sw	at,48(sp)
8003a378:	afa40034 	sw	a0,52(sp)
8003a37c:	afa50038 	sw	a1,56(sp)
8003a380:	afa20054 	sw	v0,84(sp)
8003a384:	afa20058 	sw	v0,88(sp)
        unsafe { mem::transmute(self.cast::<()>()) }
8003a388:	00401825 	move	v1,v0
8003a38c:	afa3001c 	sw	v1,28(sp)
        let src_usize = src.addr();
8003a390:	afa2003c 	sw	v0,60(sp)
8003a394:	afa1004c 	sw	at,76(sp)
8003a398:	afa10050 	sw	at,80(sp)
8003a39c:	00201025 	move	v0,at
8003a3a0:	afa20020 	sw	v0,32(sp)
        let dst_usize = dst.addr();
8003a3a4:	afa10040 	sw	at,64(sp)
        let Some(size) = size.checked_mul(count) else {
8003a3a8:	0c0118bb 	jal	800462ec <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17ha947102a5b302d14E>
8003a3ac:	00000000 	nop
8003a3b0:	afa20024 	sw	v0,36(sp)
8003a3b4:	afa30028 	sw	v1,40(sp)
8003a3b8:	8fa10024 	lw	at,36(sp)
8003a3bc:	24020001 	li	v0,1
8003a3c0:	14220012 	bne	at,v0,8003a40c <_ZN4core9ub_checks17is_nonoverlapping7runtime17hb1cbf4182e21d395E+0xbc>
8003a3c4:	00000000 	nop
8003a3c8:	0800e8f4 	j	8003a3d0 <_ZN4core9ub_checks17is_nonoverlapping7runtime17hb1cbf4182e21d395E+0x80>
8003a3cc:	00000000 	nop
8003a3d0:	8fa50020 	lw	a1,32(sp)
8003a3d4:	8fa4001c 	lw	a0,28(sp)
8003a3d8:	8fa10028 	lw	at,40(sp)
8003a3dc:	afa10010 	sw	at,16(sp)
8003a3e0:	afa10044 	sw	at,68(sp)
        let diff = src_usize.abs_diff(dst_usize);
8003a3e4:	0c0118e3 	jal	8004638c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E>
8003a3e8:	00000000 	nop
8003a3ec:	8fa10010 	lw	at,16(sp)
8003a3f0:	afa20048 	sw	v0,72(sp)
        diff >= size
8003a3f4:	0041082b 	sltu	at,v0,at
8003a3f8:	38220001 	xori	v0,at,0x1
    }
8003a3fc:	8fbf005c 	lw	ra,92(sp)
8003a400:	27bd0060 	addiu	sp,sp,96
8003a404:	03e00008 	jr	ra
8003a408:	00000000 	nop
            crate::panicking::panic_nounwind(
8003a40c:	3c018108 	lui	at,0x8108
8003a410:	2424b3dc 	addiu	a0,at,-19492
8003a414:	2405003d 	li	a1,61
8003a418:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8003a41c:	00000000 	nop

8003a420 <_ZN4core3cmp3Ord3max17he84fd5cf4cdd5f92E>:
    fn max(self, other: Self) -> Self
8003a420:	27bdffe0 	addiu	sp,sp,-32
8003a424:	afbf001c 	sw	ra,28(sp)
8003a428:	afa40014 	sw	a0,20(sp)
8003a42c:	afa50018 	sw	a1,24(sp)
        max_by(self, other, Ord::cmp)
8003a430:	0c00e96f 	jal	8003a5bc <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E>
8003a434:	00000000 	nop
    }
8003a438:	8fbf001c 	lw	ra,28(sp)
8003a43c:	27bd0020 	addiu	sp,sp,32
8003a440:	03e00008 	jr	ra
8003a444:	00000000 	nop

8003a448 <_ZN4core3cmp3Ord3min17h2a72c5c1ea083727E>:
    fn min(self, other: Self) -> Self
8003a448:	27bdffe0 	addiu	sp,sp,-32
8003a44c:	afbf001c 	sw	ra,28(sp)
8003a450:	afa40014 	sw	a0,20(sp)
8003a454:	afa50018 	sw	a1,24(sp)
        min_by(self, other, Ord::cmp)
8003a458:	0c00e926 	jal	8003a498 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E>
8003a45c:	00000000 	nop
    }
8003a460:	8fbf001c 	lw	ra,28(sp)
8003a464:	27bd0020 	addiu	sp,sp,32
8003a468:	03e00008 	jr	ra
8003a46c:	00000000 	nop

8003a470 <_ZN4core3cmp3min17hec05a35ccdb294eaE>:
pub fn min<T: Ord>(v1: T, v2: T) -> T {
8003a470:	27bdffe0 	addiu	sp,sp,-32
8003a474:	afbf001c 	sw	ra,28(sp)
8003a478:	afa40014 	sw	a0,20(sp)
8003a47c:	afa50018 	sw	a1,24(sp)
    v1.min(v2)
8003a480:	0c00e912 	jal	8003a448 <_ZN4core3cmp3Ord3min17h2a72c5c1ea083727E>
8003a484:	00000000 	nop
}
8003a488:	8fbf001c 	lw	ra,28(sp)
8003a48c:	27bd0020 	addiu	sp,sp,32
8003a490:	03e00008 	jr	ra
8003a494:	00000000 	nop

8003a498 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E>:
pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
8003a498:	27bdffd0 	addiu	sp,sp,-48
8003a49c:	afbf002c 	sw	ra,44(sp)
8003a4a0:	afa40010 	sw	a0,16(sp)
8003a4a4:	afa50014 	sw	a1,20(sp)
8003a4a8:	24010000 	li	at,0
    match compare(&v1, &v2) {
8003a4ac:	a3a0002a 	sb	zero,42(sp)
8003a4b0:	a3a00029 	sb	zero,41(sp)
8003a4b4:	24010001 	li	at,1
8003a4b8:	a3a1002a 	sb	at,42(sp)
8003a4bc:	a3a10029 	sb	at,41(sp)
8003a4c0:	27a10010 	addiu	at,sp,16
8003a4c4:	afa10020 	sw	at,32(sp)
8003a4c8:	27a10014 	addiu	at,sp,20
8003a4cc:	afa10024 	sw	at,36(sp)
8003a4d0:	8fa40020 	lw	a0,32(sp)
8003a4d4:	8fa50024 	lw	a1,36(sp)
8003a4d8:	0c00e3d1 	jal	80038f44 <_ZN4core3ops8function6FnOnce9call_once17h791c912e8431a9d0E>
8003a4dc:	00000000 	nop
8003a4e0:	a3a2001f 	sb	v0,31(sp)
8003a4e4:	93a1001f 	lbu	at,31(sp)
8003a4e8:	24210001 	addiu	at,at,1
8003a4ec:	302100ff 	andi	at,at,0xff
8003a4f0:	2c210002 	sltiu	at,at,2
8003a4f4:	14200006 	bnez	at,8003a510 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0x78>
8003a4f8:	00000000 	nop
8003a4fc:	0800e941 	j	8003a504 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0x6c>
8003a500:	00000000 	nop
8003a504:	0800e94a 	j	8003a528 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0x90>
8003a508:	00000000 	nop
8003a50c:	0000000d 	break
8003a510:	24010000 	li	at,0
        Ordering::Less | Ordering::Equal => v1,
8003a514:	a3a0002a 	sb	zero,42(sp)
8003a518:	8fa10010 	lw	at,16(sp)
8003a51c:	afa10018 	sw	at,24(sp)
8003a520:	0800e950 	j	8003a540 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xa8>
8003a524:	00000000 	nop
8003a528:	24010000 	li	at,0
        Ordering::Greater => v2,
8003a52c:	a3a00029 	sb	zero,41(sp)
8003a530:	8fa10014 	lw	at,20(sp)
8003a534:	afa10018 	sw	at,24(sp)
8003a538:	0800e950 	j	8003a540 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xa8>
8003a53c:	00000000 	nop
}
8003a540:	93a10029 	lbu	at,41(sp)
8003a544:	30210001 	andi	at,at,0x1
8003a548:	14200009 	bnez	at,8003a570 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xd8>
8003a54c:	00000000 	nop
8003a550:	0800e956 	j	8003a558 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xc0>
8003a554:	00000000 	nop
8003a558:	93a1002a 	lbu	at,42(sp)
8003a55c:	30210001 	andi	at,at,0x1
8003a560:	1420000a 	bnez	at,8003a58c <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xf4>
8003a564:	00000000 	nop
8003a568:	0800e95e 	j	8003a578 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xe0>
8003a56c:	00000000 	nop
8003a570:	0800e956 	j	8003a558 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xc0>
8003a574:	00000000 	nop
8003a578:	8fa20018 	lw	v0,24(sp)
8003a57c:	8fbf002c 	lw	ra,44(sp)
8003a580:	27bd0030 	addiu	sp,sp,48
8003a584:	03e00008 	jr	ra
8003a588:	00000000 	nop
8003a58c:	0800e95e 	j	8003a578 <_ZN4core3cmp6min_by17h2f6ad30fa2cd57b4E+0xe0>
8003a590:	00000000 	nop

8003a594 <_ZN4core3cmp3max17hf65d74bc6a2d6e46E>:
pub fn max<T: Ord>(v1: T, v2: T) -> T {
8003a594:	27bdffe0 	addiu	sp,sp,-32
8003a598:	afbf001c 	sw	ra,28(sp)
8003a59c:	afa40014 	sw	a0,20(sp)
8003a5a0:	afa50018 	sw	a1,24(sp)
    v1.max(v2)
8003a5a4:	0c00e908 	jal	8003a420 <_ZN4core3cmp3Ord3max17he84fd5cf4cdd5f92E>
8003a5a8:	00000000 	nop
}
8003a5ac:	8fbf001c 	lw	ra,28(sp)
8003a5b0:	27bd0020 	addiu	sp,sp,32
8003a5b4:	03e00008 	jr	ra
8003a5b8:	00000000 	nop

8003a5bc <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E>:
pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
8003a5bc:	27bdffd0 	addiu	sp,sp,-48
8003a5c0:	afbf002c 	sw	ra,44(sp)
8003a5c4:	afa40010 	sw	a0,16(sp)
8003a5c8:	afa50014 	sw	a1,20(sp)
8003a5cc:	24010000 	li	at,0
    match compare(&v1, &v2) {
8003a5d0:	a3a0002a 	sb	zero,42(sp)
8003a5d4:	a3a00029 	sb	zero,41(sp)
8003a5d8:	24010001 	li	at,1
8003a5dc:	a3a1002a 	sb	at,42(sp)
8003a5e0:	a3a10029 	sb	at,41(sp)
8003a5e4:	27a10010 	addiu	at,sp,16
8003a5e8:	afa10020 	sw	at,32(sp)
8003a5ec:	27a10014 	addiu	at,sp,20
8003a5f0:	afa10024 	sw	at,36(sp)
8003a5f4:	8fa40020 	lw	a0,32(sp)
8003a5f8:	8fa50024 	lw	a1,36(sp)
8003a5fc:	0c00e3d1 	jal	80038f44 <_ZN4core3ops8function6FnOnce9call_once17h791c912e8431a9d0E>
8003a600:	00000000 	nop
8003a604:	a3a2001f 	sb	v0,31(sp)
8003a608:	93a1001f 	lbu	at,31(sp)
8003a60c:	24210001 	addiu	at,at,1
8003a610:	302100ff 	andi	at,at,0xff
8003a614:	2c210002 	sltiu	at,at,2
8003a618:	14200006 	bnez	at,8003a634 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0x78>
8003a61c:	00000000 	nop
8003a620:	0800e98a 	j	8003a628 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0x6c>
8003a624:	00000000 	nop
8003a628:	0800e993 	j	8003a64c <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0x90>
8003a62c:	00000000 	nop
8003a630:	0000000d 	break
8003a634:	24010000 	li	at,0
        Ordering::Less | Ordering::Equal => v2,
8003a638:	a3a00029 	sb	zero,41(sp)
8003a63c:	8fa10014 	lw	at,20(sp)
8003a640:	afa10018 	sw	at,24(sp)
8003a644:	0800e999 	j	8003a664 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xa8>
8003a648:	00000000 	nop
8003a64c:	24010000 	li	at,0
        Ordering::Greater => v1,
8003a650:	a3a0002a 	sb	zero,42(sp)
8003a654:	8fa10010 	lw	at,16(sp)
8003a658:	afa10018 	sw	at,24(sp)
8003a65c:	0800e999 	j	8003a664 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xa8>
8003a660:	00000000 	nop
}
8003a664:	93a10029 	lbu	at,41(sp)
8003a668:	30210001 	andi	at,at,0x1
8003a66c:	14200009 	bnez	at,8003a694 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xd8>
8003a670:	00000000 	nop
8003a674:	0800e99f 	j	8003a67c <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xc0>
8003a678:	00000000 	nop
8003a67c:	93a1002a 	lbu	at,42(sp)
8003a680:	30210001 	andi	at,at,0x1
8003a684:	1420000a 	bnez	at,8003a6b0 <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xf4>
8003a688:	00000000 	nop
8003a68c:	0800e9a7 	j	8003a69c <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xe0>
8003a690:	00000000 	nop
8003a694:	0800e99f 	j	8003a67c <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xc0>
8003a698:	00000000 	nop
8003a69c:	8fa20018 	lw	v0,24(sp)
8003a6a0:	8fbf002c 	lw	ra,44(sp)
8003a6a4:	27bd0030 	addiu	sp,sp,48
8003a6a8:	03e00008 	jr	ra
8003a6ac:	00000000 	nop
8003a6b0:	0800e9a7 	j	8003a69c <_ZN4core3cmp6max_by17h59c3ab0bddaa64a4E+0xe0>
8003a6b4:	00000000 	nop

8003a6b8 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE>:
    pub end: Idx,
}

#[stable(feature = "rust1", since = "1.0.0")]
impl<Idx: fmt::Debug> fmt::Debug for Range<Idx> {
    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
8003a6b8:	27bdffb0 	addiu	sp,sp,-80
8003a6bc:	afbf004c 	sw	ra,76(sp)
8003a6c0:	afa50014 	sw	a1,20(sp)
8003a6c4:	afa40018 	sw	a0,24(sp)
        self.start.fmt(fmt)?;
        write!(fmt, "..")?;
        self.end.fmt(fmt)?;
8003a6c8:	afa40044 	sw	a0,68(sp)
8003a6cc:	afa50048 	sw	a1,72(sp)
        self.start.fmt(fmt)?;
8003a6d0:	0c011d37 	jal	800474dc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E>
8003a6d4:	00000000 	nop
8003a6d8:	00402025 	move	a0,v0
8003a6dc:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003a6e0:	00000000 	nop
8003a6e4:	a3a20026 	sb	v0,38(sp)
8003a6e8:	93a10026 	lbu	at,38(sp)
8003a6ec:	30210001 	andi	at,at,0x1
8003a6f0:	14200018 	bnez	at,8003a754 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x9c>
8003a6f4:	00000000 	nop
8003a6f8:	0800e9c0 	j	8003a700 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x48>
8003a6fc:	00000000 	nop
        write!(fmt, "..")?;
8003a700:	3c018108 	lui	at,0x8108
8003a704:	2425b47c 	addiu	a1,at,-19332
8003a708:	27a40028 	addiu	a0,sp,40
8003a70c:	afa40010 	sw	a0,16(sp)
8003a710:	24060001 	li	a2,1
8003a714:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003a718:	00000000 	nop
8003a71c:	8fa40014 	lw	a0,20(sp)
8003a720:	8fa50010 	lw	a1,16(sp)
8003a724:	0c01018b 	jal	8004062c <_ZN4core3fmt9Formatter9write_fmt17h7d294feef253c98cE>
8003a728:	00000000 	nop
8003a72c:	00402025 	move	a0,v0
8003a730:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003a734:	00000000 	nop
8003a738:	a3a20027 	sb	v0,39(sp)
8003a73c:	93a10027 	lbu	at,39(sp)
8003a740:	30210001 	andi	at,at,0x1
8003a744:	1020000a 	beqz	at,8003a770 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0xb8>
8003a748:	00000000 	nop
8003a74c:	0800e9eb 	j	8003a7ac <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0xf4>
8003a750:	00000000 	nop
        self.start.fmt(fmt)?;
8003a754:	3c018108 	lui	at,0x8108
8003a758:	2424b514 	addiu	a0,at,-19180
8003a75c:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003a760:	00000000 	nop
8003a764:	a3a20025 	sb	v0,37(sp)
8003a768:	0800e9fd 	j	8003a7f4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x13c>
8003a76c:	00000000 	nop
        self.end.fmt(fmt)?;
8003a770:	8fa50014 	lw	a1,20(sp)
8003a774:	8fa10018 	lw	at,24(sp)
8003a778:	24240004 	addiu	a0,at,4
8003a77c:	0c011d37 	jal	800474dc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E>
8003a780:	00000000 	nop
8003a784:	00402025 	move	a0,v0
8003a788:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003a78c:	00000000 	nop
8003a790:	a3a20043 	sb	v0,67(sp)
8003a794:	93a10043 	lbu	at,67(sp)
8003a798:	30210001 	andi	at,at,0x1
8003a79c:	1020000a 	beqz	at,8003a7c8 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x110>
8003a7a0:	00000000 	nop
8003a7a4:	0800e9f6 	j	8003a7d8 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x120>
8003a7a8:	00000000 	nop
        write!(fmt, "..")?;
8003a7ac:	3c018108 	lui	at,0x8108
8003a7b0:	2424b504 	addiu	a0,at,-19196
8003a7b4:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003a7b8:	00000000 	nop
8003a7bc:	a3a20025 	sb	v0,37(sp)
8003a7c0:	0800e9fd 	j	8003a7f4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x13c>
8003a7c4:	00000000 	nop
8003a7c8:	24010000 	li	at,0
        Ok(())
8003a7cc:	a3a00025 	sb	zero,37(sp)
    }
8003a7d0:	0800e9fd 	j	8003a7f4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x13c>
8003a7d4:	00000000 	nop
        self.end.fmt(fmt)?;
8003a7d8:	3c018108 	lui	at,0x8108
8003a7dc:	2424b4f4 	addiu	a0,at,-19212
8003a7e0:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003a7e4:	00000000 	nop
8003a7e8:	a3a20025 	sb	v0,37(sp)
8003a7ec:	0800e9fd 	j	8003a7f4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d438a1408027cceE+0x13c>
8003a7f0:	00000000 	nop
    }
8003a7f4:	93a10025 	lbu	at,37(sp)
8003a7f8:	30220001 	andi	v0,at,0x1
8003a7fc:	8fbf004c 	lw	ra,76(sp)
8003a800:	27bd0050 	addiu	sp,sp,80
8003a804:	03e00008 	jr	ra
8003a808:	00000000 	nop

8003a80c <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E>:
    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
8003a80c:	27bdffb0 	addiu	sp,sp,-80
8003a810:	afbf004c 	sw	ra,76(sp)
8003a814:	afa50014 	sw	a1,20(sp)
8003a818:	afa40018 	sw	a0,24(sp)
        self.end.fmt(fmt)?;
8003a81c:	afa40044 	sw	a0,68(sp)
8003a820:	afa50048 	sw	a1,72(sp)
        self.start.fmt(fmt)?;
8003a824:	0c011d07 	jal	8004741c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E>
8003a828:	00000000 	nop
8003a82c:	00402025 	move	a0,v0
8003a830:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003a834:	00000000 	nop
8003a838:	a3a20026 	sb	v0,38(sp)
8003a83c:	93a10026 	lbu	at,38(sp)
8003a840:	30210001 	andi	at,at,0x1
8003a844:	14200018 	bnez	at,8003a8a8 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x9c>
8003a848:	00000000 	nop
8003a84c:	0800ea15 	j	8003a854 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x48>
8003a850:	00000000 	nop
        write!(fmt, "..")?;
8003a854:	3c018108 	lui	at,0x8108
8003a858:	2425b47c 	addiu	a1,at,-19332
8003a85c:	27a40028 	addiu	a0,sp,40
8003a860:	afa40010 	sw	a0,16(sp)
8003a864:	24060001 	li	a2,1
8003a868:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003a86c:	00000000 	nop
8003a870:	8fa40014 	lw	a0,20(sp)
8003a874:	8fa50010 	lw	a1,16(sp)
8003a878:	0c01018b 	jal	8004062c <_ZN4core3fmt9Formatter9write_fmt17h7d294feef253c98cE>
8003a87c:	00000000 	nop
8003a880:	00402025 	move	a0,v0
8003a884:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003a888:	00000000 	nop
8003a88c:	a3a20027 	sb	v0,39(sp)
8003a890:	93a10027 	lbu	at,39(sp)
8003a894:	30210001 	andi	at,at,0x1
8003a898:	1020000a 	beqz	at,8003a8c4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0xb8>
8003a89c:	00000000 	nop
8003a8a0:	0800ea40 	j	8003a900 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0xf4>
8003a8a4:	00000000 	nop
        self.start.fmt(fmt)?;
8003a8a8:	3c018108 	lui	at,0x8108
8003a8ac:	2424b514 	addiu	a0,at,-19180
8003a8b0:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003a8b4:	00000000 	nop
8003a8b8:	a3a20025 	sb	v0,37(sp)
8003a8bc:	0800ea52 	j	8003a948 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x13c>
8003a8c0:	00000000 	nop
        self.end.fmt(fmt)?;
8003a8c4:	8fa50014 	lw	a1,20(sp)
8003a8c8:	8fa10018 	lw	at,24(sp)
8003a8cc:	24240001 	addiu	a0,at,1
8003a8d0:	0c011d07 	jal	8004741c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E>
8003a8d4:	00000000 	nop
8003a8d8:	00402025 	move	a0,v0
8003a8dc:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003a8e0:	00000000 	nop
8003a8e4:	a3a20043 	sb	v0,67(sp)
8003a8e8:	93a10043 	lbu	at,67(sp)
8003a8ec:	30210001 	andi	at,at,0x1
8003a8f0:	1020000a 	beqz	at,8003a91c <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x110>
8003a8f4:	00000000 	nop
8003a8f8:	0800ea4b 	j	8003a92c <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x120>
8003a8fc:	00000000 	nop
        write!(fmt, "..")?;
8003a900:	3c018108 	lui	at,0x8108
8003a904:	2424b504 	addiu	a0,at,-19196
8003a908:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003a90c:	00000000 	nop
8003a910:	a3a20025 	sb	v0,37(sp)
8003a914:	0800ea52 	j	8003a948 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x13c>
8003a918:	00000000 	nop
8003a91c:	24010000 	li	at,0
        Ok(())
8003a920:	a3a00025 	sb	zero,37(sp)
    }
8003a924:	0800ea52 	j	8003a948 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x13c>
8003a928:	00000000 	nop
        self.end.fmt(fmt)?;
8003a92c:	3c018108 	lui	at,0x8108
8003a930:	2424b4f4 	addiu	a0,at,-19212
8003a934:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003a938:	00000000 	nop
8003a93c:	a3a20025 	sb	v0,37(sp)
8003a940:	0800ea52 	j	8003a948 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h701feae479d46015E+0x13c>
8003a944:	00000000 	nop
    }
8003a948:	93a10025 	lbu	at,37(sp)
8003a94c:	30220001 	andi	v0,at,0x1
8003a950:	8fbf004c 	lw	ra,76(sp)
8003a954:	27bd0050 	addiu	sp,sp,80
8003a958:	03e00008 	jr	ra
8003a95c:	00000000 	nop

8003a960 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17hc292ae9ef64e18eeE>:
    #[lang = "range_inclusive_new"]
    #[stable(feature = "inclusive_range_methods", since = "1.27.0")]
    #[inline]
    #[rustc_promotable]
    #[rustc_const_stable(feature = "const_range_new", since = "1.32.0")]
    pub const fn new(start: Idx, end: Idx) -> Self {
8003a960:	27bdfff8 	addiu	sp,sp,-8
8003a964:	00801025 	move	v0,a0
8003a968:	afa50000 	sw	a1,0(sp)
8003a96c:	afa60004 	sw	a2,4(sp)
        Self { start, end, exhausted: false }
8003a970:	ac850000 	sw	a1,0(a0)
8003a974:	ac860004 	sw	a2,4(a0)
8003a978:	24010000 	li	at,0
8003a97c:	a0800008 	sb	zero,8(a0)
8003a980:	27bd0008 	addiu	sp,sp,8
    }
8003a984:	03e00008 	jr	ra
8003a988:	00000000 	nop

8003a98c <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3end17h57262ba442efad6eE>:
    /// assert_eq!((3..=5).end(), &5);
    /// ```
    #[stable(feature = "inclusive_range_methods", since = "1.27.0")]
    #[rustc_const_stable(feature = "const_inclusive_range_methods", since = "1.32.0")]
    #[inline]
    pub const fn end(&self) -> &Idx {
8003a98c:	27bdfff8 	addiu	sp,sp,-8
8003a990:	afa40004 	sw	a0,4(sp)
        &self.end
8003a994:	24820004 	addiu	v0,a0,4
8003a998:	27bd0008 	addiu	sp,sp,8
    }
8003a99c:	03e00008 	jr	ra
8003a9a0:	00000000 	nop

8003a9a4 <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E>:

impl RangeInclusive<usize> {
    /// Converts to an exclusive `Range` for `SliceIndex` implementations.
    /// The caller is responsible for dealing with `end == usize::MAX`.
    #[inline]
    pub(crate) const fn into_slice_range(self) -> Range<usize> {
8003a9a4:	27bdffd8 	addiu	sp,sp,-40
8003a9a8:	afa40010 	sw	a0,16(sp)
        // If we're not exhausted, we want to simply slice `start..end + 1`.
        // If we are exhausted, then slicing with `end + 1..end + 1` gives us an
        // empty range that is still subject to bounds-checks for that endpoint.
        let exclusive_end = self.end + 1;
8003a9ac:	8c810004 	lw	at,4(a0)
8003a9b0:	24210001 	addiu	at,at,1
8003a9b4:	afa10014 	sw	at,20(sp)
8003a9b8:	1020000c 	beqz	at,8003a9ec <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E+0x48>
8003a9bc:	00000000 	nop
8003a9c0:	0800ea72 	j	8003a9c8 <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E+0x24>
8003a9c4:	00000000 	nop
8003a9c8:	8fa10010 	lw	at,16(sp)
8003a9cc:	8fa20014 	lw	v0,20(sp)
8003a9d0:	afa20024 	sw	v0,36(sp)
        let start = if self.exhausted { exclusive_end } else { self.start };
8003a9d4:	90210008 	lbu	at,8(at)
8003a9d8:	30210001 	andi	at,at,0x1
8003a9dc:	1420000c 	bnez	at,8003aa10 <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E+0x6c>
8003a9e0:	00000000 	nop
8003a9e4:	0800ea7f 	j	8003a9fc <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E+0x58>
8003a9e8:	00000000 	nop
        let exclusive_end = self.end + 1;
8003a9ec:	3c018108 	lui	at,0x8108
8003a9f0:	2424b524 	addiu	a0,at,-19164
8003a9f4:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003a9f8:	00000000 	nop
        let start = if self.exhausted { exclusive_end } else { self.start };
8003a9fc:	8fa10010 	lw	at,16(sp)
8003aa00:	8c210000 	lw	at,0(at)
8003aa04:	afa10020 	sw	at,32(sp)
8003aa08:	0800ea88 	j	8003aa20 <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E+0x7c>
8003aa0c:	00000000 	nop
8003aa10:	8fa10014 	lw	at,20(sp)
8003aa14:	afa10020 	sw	at,32(sp)
8003aa18:	0800ea88 	j	8003aa20 <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E+0x7c>
8003aa1c:	00000000 	nop
        start..exclusive_end
8003aa20:	8fa10014 	lw	at,20(sp)
8003aa24:	8fa20020 	lw	v0,32(sp)
8003aa28:	afa20018 	sw	v0,24(sp)
8003aa2c:	afa1001c 	sw	at,28(sp)
    }
8003aa30:	8fa20018 	lw	v0,24(sp)
8003aa34:	8fa3001c 	lw	v1,28(sp)
8003aa38:	27bd0028 	addiu	sp,sp,40
8003aa3c:	03e00008 	jr	ra
8003aa40:	00000000 	nop

8003aa44 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h8776d656ecbba387E>:
    fn type_id(&self) -> TypeId;
}

#[stable(feature = "rust1", since = "1.0.0")]
impl<T: 'static + ?Sized> Any for T {
    fn type_id(&self) -> TypeId {
8003aa44:	27bdffe8 	addiu	sp,sp,-24
8003aa48:	afbf0014 	sw	ra,20(sp)
8003aa4c:	afa40010 	sw	a0,16(sp)
        TypeId::of::<T>()
8003aa50:	0c00ea9a 	jal	8003aa68 <_ZN4core3any6TypeId2of17h278bb7d5a9056281E>
8003aa54:	00000000 	nop
    }
8003aa58:	8fbf0014 	lw	ra,20(sp)
8003aa5c:	27bd0018 	addiu	sp,sp,24
8003aa60:	03e00008 	jr	ra
8003aa64:	00000000 	nop

8003aa68 <_ZN4core3any6TypeId2of17h278bb7d5a9056281E>:
    /// assert_eq!(is_string(&"cookie monster".to_string()), true);
    /// ```
    #[must_use]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_unstable(feature = "const_type_id", issue = "77125")]
    pub const fn of<T: ?Sized + 'static>() -> TypeId {
8003aa68:	27bdffb0 	addiu	sp,sp,-80
8003aa6c:	3c015884 	lui	at,0x5884
8003aa70:	3421b7b4 	ori	at,at,0xb7b4
        let t: u128 = intrinsics::type_id::<T>();
8003aa74:	afa1002c 	sw	at,44(sp)
8003aa78:	3c013ed7 	lui	at,0x3ed7
8003aa7c:	3421d2c7 	ori	at,at,0xd2c7
8003aa80:	afa10028 	sw	at,40(sp)
8003aa84:	3c01bbd2 	lui	at,0xbbd2
8003aa88:	3421d934 	ori	at,at,0xd934
8003aa8c:	afa10024 	sw	at,36(sp)
8003aa90:	3c01530c 	lui	at,0x530c
8003aa94:	3421456c 	ori	at,at,0x456c
8003aa98:	afa10020 	sw	at,32(sp)
8003aa9c:	8fa10020 	lw	at,32(sp)
8003aaa0:	8fa20024 	lw	v0,36(sp)
8003aaa4:	8fa30028 	lw	v1,40(sp)
8003aaa8:	8fa4002c 	lw	a0,44(sp)
8003aaac:	afa4003c 	sw	a0,60(sp)
8003aab0:	afa30038 	sw	v1,56(sp)
8003aab4:	afa20034 	sw	v0,52(sp)
8003aab8:	afa10030 	sw	at,48(sp)

        let t1 = (t >> 64) as u64;
8003aabc:	afa40044 	sw	a0,68(sp)
8003aac0:	afa30040 	sw	v1,64(sp)
        let t2 = t as u64;
8003aac4:	afa2004c 	sw	v0,76(sp)
8003aac8:	afa10048 	sw	at,72(sp)
        TypeId { t: (t1, t2) }
8003aacc:	afa40014 	sw	a0,20(sp)
8003aad0:	afa30010 	sw	v1,16(sp)
8003aad4:	afa2001c 	sw	v0,28(sp)
8003aad8:	afa10018 	sw	at,24(sp)
8003aadc:	8fa30010 	lw	v1,16(sp)
8003aae0:	8fa40014 	lw	a0,20(sp)
8003aae4:	8fa10018 	lw	at,24(sp)
8003aae8:	8fa2001c 	lw	v0,28(sp)
8003aaec:	afa40004 	sw	a0,4(sp)
8003aaf0:	afa30000 	sw	v1,0(sp)
8003aaf4:	afa2000c 	sw	v0,12(sp)
8003aaf8:	afa10008 	sw	at,8(sp)
    }
8003aafc:	8fa20000 	lw	v0,0(sp)
8003ab00:	8fa30004 	lw	v1,4(sp)
8003ab04:	8fa40008 	lw	a0,8(sp)
8003ab08:	8fa5000c 	lw	a1,12(sp)
8003ab0c:	27bd0050 	addiu	sp,sp,80
8003ab10:	03e00008 	jr	ra
8003ab14:	00000000 	nop

8003ab18 <_ZN4core5array98_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u3b$$u20$N$u5d$$GT$9into_iter17h8eaf4e7ff4d3c707E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<'a, T, const N: usize> IntoIterator for &'a [T; N] {
    type Item = &'a T;
    type IntoIter = Iter<'a, T>;

    fn into_iter(self) -> Iter<'a, T> {
8003ab18:	27bdffe8 	addiu	sp,sp,-24
8003ab1c:	afbf0014 	sw	ra,20(sp)
8003ab20:	afa40010 	sw	a0,16(sp)
8003ab24:	24050004 	li	a1,4
        self.iter()
8003ab28:	0c010966 	jal	80042598 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hf734dea4d413a514E>
8003ab2c:	00000000 	nop
    }
8003ab30:	8fbf0014 	lw	ra,20(sp)
8003ab34:	27bd0018 	addiu	sp,sp,24
8003ab38:	03e00008 	jr	ra
8003ab3c:	00000000 	nop

8003ab40 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hfa0288d626a253cbE>:
    [T]: Index<I>,
{
    type Output = <[T] as Index<I>>::Output;

    #[inline]
    fn index(&self, index: I) -> &Self::Output {
8003ab40:	27bdffd0 	addiu	sp,sp,-48
8003ab44:	afbf002c 	sw	ra,44(sp)
8003ab48:	00c03825 	move	a3,a2
8003ab4c:	afa50014 	sw	a1,20(sp)
8003ab50:	00802825 	move	a1,a0
8003ab54:	8fa40014 	lw	a0,20(sp)
8003ab58:	afa50018 	sw	a1,24(sp)
8003ab5c:	afa4001c 	sw	a0,28(sp)
8003ab60:	afa50020 	sw	a1,32(sp)
8003ab64:	24060080 	li	a2,128
8003ab68:	afa60024 	sw	a2,36(sp)
8003ab6c:	afa40028 	sw	a0,40(sp)
        index.index(self)
8003ab70:	0c010676 	jal	800419d8 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h303723bc382a6e8fE>
8003ab74:	00000000 	nop
        Index::index(self as &[T], index)
    }
8003ab78:	8fbf002c 	lw	ra,44(sp)
8003ab7c:	27bd0030 	addiu	sp,sp,48
8003ab80:	03e00008 	jr	ra
8003ab84:	00000000 	nop

8003ab88 <_ZN4core5array88_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$9index_mut17h3b37ece2936c0239E>:
impl<T, I, const N: usize> IndexMut<I> for [T; N]
where
    [T]: IndexMut<I>,
{
    #[inline]
    fn index_mut(&mut self, index: I) -> &mut Self::Output {
8003ab88:	27bdffd0 	addiu	sp,sp,-48
8003ab8c:	afbf002c 	sw	ra,44(sp)
8003ab90:	00c03825 	move	a3,a2
8003ab94:	afa50014 	sw	a1,20(sp)
8003ab98:	00802825 	move	a1,a0
8003ab9c:	8fa40014 	lw	a0,20(sp)
8003aba0:	afa50018 	sw	a1,24(sp)
8003aba4:	afa4001c 	sw	a0,28(sp)
8003aba8:	afa50020 	sw	a1,32(sp)
8003abac:	2406000a 	li	a2,10
8003abb0:	afa60024 	sw	a2,36(sp)
8003abb4:	afa40028 	sw	a0,40(sp)
        index.index_mut(self)
8003abb8:	0c01062a 	jal	800418a8 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hcf5fb57ce5379036E>
8003abbc:	00000000 	nop
        IndexMut::index_mut(self as &mut [T], index)
    }
8003abc0:	8fbf002c 	lw	ra,44(sp)
8003abc4:	27bd0030 	addiu	sp,sp,48
8003abc8:	03e00008 	jr	ra
8003abcc:	00000000 	nop

8003abd0 <_ZN4core5array88_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$9index_mut17h64941d6709fd2000E>:
    fn index_mut(&mut self, index: I) -> &mut Self::Output {
8003abd0:	27bdffd0 	addiu	sp,sp,-48
8003abd4:	afbf002c 	sw	ra,44(sp)
8003abd8:	00c03825 	move	a3,a2
8003abdc:	afa50014 	sw	a1,20(sp)
8003abe0:	00802825 	move	a1,a0
8003abe4:	8fa40014 	lw	a0,20(sp)
8003abe8:	afa50018 	sw	a1,24(sp)
8003abec:	afa4001c 	sw	a0,28(sp)
8003abf0:	afa50020 	sw	a1,32(sp)
8003abf4:	2406000a 	li	a2,10
8003abf8:	afa60024 	sw	a2,36(sp)
8003abfc:	afa40028 	sw	a0,40(sp)
8003ac00:	0c010692 	jal	80041a48 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h634482a4c9969ff8E>
8003ac04:	00000000 	nop
    }
8003ac08:	8fbf002c 	lw	ra,44(sp)
8003ac0c:	27bd0030 	addiu	sp,sp,48
8003ac10:	03e00008 	jr	ra
8003ac14:	00000000 	nop

8003ac18 <_ZN4core5ascii10ascii_char9AsciiChar5to_u817he7dc2dbee10bd70dE>:
    }

    /// Gets this ASCII character as a byte.
    #[unstable(feature = "ascii_char", issue = "110998")]
    #[inline]
    pub const fn to_u8(self) -> u8 {
8003ac18:	27bdfff8 	addiu	sp,sp,-8
8003ac1c:	a3a40007 	sb	a0,7(sp)
        self as u8
    }
8003ac20:	93a20007 	lbu	v0,7(sp)
8003ac24:	27bd0008 	addiu	sp,sp,8
8003ac28:	03e00008 	jr	ra
8003ac2c:	00000000 	nop

8003ac30 <_ZN60_$LT$core..cell..BorrowError$u20$as$u20$core..fmt..Debug$GT$3fmt17hdb870ed7a14b79c4E>:
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8003ac30:	27bdffd8 	addiu	sp,sp,-40
8003ac34:	afbf0024 	sw	ra,36(sp)
8003ac38:	afa4001c 	sw	a0,28(sp)
8003ac3c:	afa50020 	sw	a1,32(sp)
        let mut builder = f.debug_struct("BorrowError");
8003ac40:	3c018108 	lui	at,0x8108
8003ac44:	2426b534 	addiu	a2,at,-19148
8003ac48:	27a40014 	addiu	a0,sp,20
8003ac4c:	afa40010 	sw	a0,16(sp)
8003ac50:	2407000b 	li	a3,11
8003ac54:	0c0101eb 	jal	800407ac <_ZN4core3fmt9Formatter12debug_struct17h6504f7339d778b3dE>
8003ac58:	00000000 	nop
8003ac5c:	8fa40010 	lw	a0,16(sp)
        builder.finish()
8003ac60:	0c00f59e 	jal	8003d678 <_ZN4core3fmt8builders11DebugStruct6finish17h7cc9f15e92184c03E>
8003ac64:	00000000 	nop
    }
8003ac68:	8fbf0024 	lw	ra,36(sp)
8003ac6c:	27bd0028 	addiu	sp,sp,40
8003ac70:	03e00008 	jr	ra
8003ac74:	00000000 	nop

8003ac78 <_ZN63_$LT$core..cell..BorrowMutError$u20$as$u20$core..fmt..Debug$GT$3fmt17h468449d84c9a526dE>:
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8003ac78:	27bdffd8 	addiu	sp,sp,-40
8003ac7c:	afbf0024 	sw	ra,36(sp)
8003ac80:	afa4001c 	sw	a0,28(sp)
8003ac84:	afa50020 	sw	a1,32(sp)
        let mut builder = f.debug_struct("BorrowMutError");
8003ac88:	3c018108 	lui	at,0x8108
8003ac8c:	2426b53f 	addiu	a2,at,-19137
8003ac90:	27a40014 	addiu	a0,sp,20
8003ac94:	afa40010 	sw	a0,16(sp)
8003ac98:	2407000e 	li	a3,14
8003ac9c:	0c0101eb 	jal	800407ac <_ZN4core3fmt9Formatter12debug_struct17h6504f7339d778b3dE>
8003aca0:	00000000 	nop
8003aca4:	8fa40010 	lw	a0,16(sp)
        builder.finish()
8003aca8:	0c00f59e 	jal	8003d678 <_ZN4core3fmt8builders11DebugStruct6finish17h7cc9f15e92184c03E>
8003acac:	00000000 	nop
    }
8003acb0:	8fbf0024 	lw	ra,36(sp)
8003acb4:	27bd0028 	addiu	sp,sp,40
8003acb8:	03e00008 	jr	ra
8003acbc:	00000000 	nop

8003acc0 <_ZN4core4cell22panic_already_borrowed17h5cddcb2dc4be68f9E>:
fn panic_already_borrowed(err: BorrowMutError) -> ! {
8003acc0:	27bdffa0 	addiu	sp,sp,-96
8003acc4:	afbf005c 	sw	ra,92(sp)
8003acc8:	afa40020 	sw	a0,32(sp)
8003accc:	27a20027 	addiu	v0,sp,39
8003acd0:	afa20048 	sw	v0,72(sp)
8003acd4:	afa20054 	sw	v0,84(sp)
8003acd8:	3c018004 	lui	at,0x8004
8003acdc:	2421ac78 	addiu	at,at,-21384
8003ace0:	afa10058 	sw	at,88(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003ace4:	afa2004c 	sw	v0,76(sp)
8003ace8:	afa10050 	sw	at,80(sp)
    }
8003acec:	8fa2004c 	lw	v0,76(sp)
8003acf0:	8fa10050 	lw	at,80(sp)
    panic!("already borrowed: {:?}", err)
8003acf4:	afa20040 	sw	v0,64(sp)
8003acf8:	afa10044 	sw	at,68(sp)
8003acfc:	03a00825 	move	at,sp
8003ad00:	24060001 	li	a2,1
8003ad04:	ac260010 	sw	a2,16(at)
8003ad08:	3c018108 	lui	at,0x8108
8003ad0c:	2425b560 	addiu	a1,at,-19104
8003ad10:	27a40028 	addiu	a0,sp,40
8003ad14:	afa4001c 	sw	a0,28(sp)
8003ad18:	27a70040 	addiu	a3,sp,64
8003ad1c:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8003ad20:	00000000 	nop
8003ad24:	8fa4001c 	lw	a0,28(sp)
8003ad28:	8fa50020 	lw	a1,32(sp)
8003ad2c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003ad30:	00000000 	nop

8003ad34 <_ZN4core4cell30panic_already_mutably_borrowed17h7c6bf9e42b40f6e0E>:
fn panic_already_mutably_borrowed(err: BorrowError) -> ! {
8003ad34:	27bdffa0 	addiu	sp,sp,-96
8003ad38:	afbf005c 	sw	ra,92(sp)
8003ad3c:	afa40020 	sw	a0,32(sp)
8003ad40:	27a20027 	addiu	v0,sp,39
8003ad44:	afa20048 	sw	v0,72(sp)
8003ad48:	afa20054 	sw	v0,84(sp)
8003ad4c:	3c018004 	lui	at,0x8004
8003ad50:	2421ac30 	addiu	at,at,-21456
8003ad54:	afa10058 	sw	at,88(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003ad58:	afa2004c 	sw	v0,76(sp)
8003ad5c:	afa10050 	sw	at,80(sp)
    }
8003ad60:	8fa2004c 	lw	v0,76(sp)
8003ad64:	8fa10050 	lw	at,80(sp)
    panic!("already mutably borrowed: {:?}", err)
8003ad68:	afa20040 	sw	v0,64(sp)
8003ad6c:	afa10044 	sw	at,68(sp)
8003ad70:	03a00825 	move	at,sp
8003ad74:	24060001 	li	a2,1
8003ad78:	ac260010 	sw	a2,16(at)
8003ad7c:	3c018108 	lui	at,0x8108
8003ad80:	2425b584 	addiu	a1,at,-19068
8003ad84:	27a40028 	addiu	a0,sp,40
8003ad88:	afa4001c 	sw	a0,28(sp)
8003ad8c:	27a70040 	addiu	a3,sp,64
8003ad90:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8003ad94:	00000000 	nop
8003ad98:	8fa4001c 	lw	a0,28(sp)
8003ad9c:	8fa50020 	lw	a1,32(sp)
8003ada0:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003ada4:	00000000 	nop

8003ada8 <_ZN4core4char7convert18from_u32_unchecked17ha8125af4d1c33174E>:
}

/// Converts a `u32` to a `char`, ignoring validity. See [`char::from_u32_unchecked`].
#[inline]
#[must_use]
pub(super) const unsafe fn from_u32_unchecked(i: u32) -> char {
8003ada8:	27bdffe0 	addiu	sp,sp,-32
8003adac:	afbf001c 	sw	ra,28(sp)
8003adb0:	afa40014 	sw	a0,20(sp)
8003adb4:	afa40018 	sw	a0,24(sp)
    // SAFETY: the caller must guarantee that `i` is a valid char value.
    unsafe {
        assert_unsafe_precondition!(
8003adb8:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8003adbc:	00000000 	nop
8003adc0:	14400008 	bnez	v0,8003ade4 <_ZN4core4char7convert18from_u32_unchecked17ha8125af4d1c33174E+0x3c>
8003adc4:	00000000 	nop
8003adc8:	0800eb74 	j	8003add0 <_ZN4core4char7convert18from_u32_unchecked17ha8125af4d1c33174E+0x28>
8003adcc:	00000000 	nop
            "invalid value for `char`",
            (i: u32 = i) => char_try_from_u32(i).is_ok()
        );
        transmute(i)
    }
}
8003add0:	8fa20014 	lw	v0,20(sp)
8003add4:	8fbf001c 	lw	ra,28(sp)
8003add8:	27bd0020 	addiu	sp,sp,32
8003addc:	03e00008 	jr	ra
8003ade0:	00000000 	nop
        assert_unsafe_precondition!(
8003ade4:	8fa40014 	lw	a0,20(sp)
8003ade8:	0c011ad6 	jal	80046b58 <_ZN4core4char7convert18from_u32_unchecked18precondition_check17h36fa9621690ca902E>
8003adec:	00000000 	nop
8003adf0:	0800eb74 	j	8003add0 <_ZN4core4char7convert18from_u32_unchecked17ha8125af4d1c33174E+0x28>
8003adf4:	00000000 	nop

8003adf8 <_ZN4core4char7convert64_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$char$GT$4from17h3cd4ae837407df41E>:
    /// let u = 32 as u8;
    /// let c = char::from(u);
    /// assert!(4 == mem::size_of_val(&c))
    /// ```
    #[inline]
    fn from(i: u8) -> Self {
8003adf8:	27bdfff8 	addiu	sp,sp,-8
8003adfc:	a3a40007 	sb	a0,7(sp)
        i as char
8003ae00:	308200ff 	andi	v0,a0,0xff
8003ae04:	27bd0008 	addiu	sp,sp,8
    }
8003ae08:	03e00008 	jr	ra
8003ae0c:	00000000 	nop

8003ae10 <_ZN4core4char7convert17char_try_from_u3217h8a0cd4dc4cb0f4a0E>:
        }
    }
}

#[inline]
const fn char_try_from_u32(i: u32) -> Result<char, CharTryFromError> {
8003ae10:	27bdffe8 	addiu	sp,sp,-24
8003ae14:	afa40004 	sw	a0,4(sp)
8003ae18:	afa4000c 	sw	a0,12(sp)
    //
    // Subtracting 0x800 causes 0x0000..0x0800 to wrap, meaning that a single
    // unsigned comparison against 0x110000 - 0x800 will detect both the wrapped
    // surrogate range as well as the numbers originally larger than 0x110000.
    //
    if (i ^ 0xD800).wrapping_sub(0x800) >= 0x110000 - 0x800 {
8003ae1c:	3881d800 	xori	at,a0,0xd800
8003ae20:	afa10010 	sw	at,16(sp)
8003ae24:	24020800 	li	v0,2048
8003ae28:	afa20014 	sw	v0,20(sp)
            intrinsics::wrapping_sub(self, rhs)
8003ae2c:	2422f800 	addiu	v0,at,-2048
8003ae30:	3c010010 	lui	at,0x10
8003ae34:	3421f7ff 	ori	at,at,0xf7ff
8003ae38:	0022082b 	sltu	at,at,v0
8003ae3c:	14200007 	bnez	at,8003ae5c <_ZN4core4char7convert17char_try_from_u3217h8a0cd4dc4cb0f4a0E+0x4c>
8003ae40:	00000000 	nop
8003ae44:	0800eb93 	j	8003ae4c <_ZN4core4char7convert17char_try_from_u3217h8a0cd4dc4cb0f4a0E+0x3c>
8003ae48:	00000000 	nop
        Err(CharTryFromError(()))
    } else {
        // SAFETY: checked that it's a legal unicode value
        Ok(unsafe { transmute(i) })
8003ae4c:	8fa10004 	lw	at,4(sp)
8003ae50:	afa10008 	sw	at,8(sp)
    if (i ^ 0xD800).wrapping_sub(0x800) >= 0x110000 - 0x800 {
8003ae54:	0800eb9b 	j	8003ae6c <_ZN4core4char7convert17char_try_from_u3217h8a0cd4dc4cb0f4a0E+0x5c>
8003ae58:	00000000 	nop
8003ae5c:	3c010011 	lui	at,0x11
        Err(CharTryFromError(()))
8003ae60:	afa10008 	sw	at,8(sp)
    if (i ^ 0xD800).wrapping_sub(0x800) >= 0x110000 - 0x800 {
8003ae64:	0800eb9b 	j	8003ae6c <_ZN4core4char7convert17char_try_from_u3217h8a0cd4dc4cb0f4a0E+0x5c>
8003ae68:	00000000 	nop
    }
}
8003ae6c:	8fa20008 	lw	v0,8(sp)
8003ae70:	27bd0018 	addiu	sp,sp,24
8003ae74:	03e00008 	jr	ra
8003ae78:	00000000 	nop

8003ae7c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$18from_u32_unchecked17h9f49626bc6b588f7E>:
    pub const unsafe fn from_u32_unchecked(i: u32) -> char {
8003ae7c:	27bdffe8 	addiu	sp,sp,-24
8003ae80:	afbf0014 	sw	ra,20(sp)
8003ae84:	afa40010 	sw	a0,16(sp)
        unsafe { super::convert::from_u32_unchecked(i) }
8003ae88:	0c00eb6a 	jal	8003ada8 <_ZN4core4char7convert18from_u32_unchecked17ha8125af4d1c33174E>
8003ae8c:	00000000 	nop
    }
8003ae90:	8fbf0014 	lw	ra,20(sp)
8003ae94:	27bd0018 	addiu	sp,sp,24
8003ae98:	03e00008 	jr	ra
8003ae9c:	00000000 	nop

8003aea0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$14escape_unicode17h9e633e122dbe17d1E>:
    pub fn escape_unicode(self) -> EscapeUnicode {
8003aea0:	27bdffe0 	addiu	sp,sp,-32
8003aea4:	afbf001c 	sw	ra,28(sp)
8003aea8:	00800825 	move	at,a0
8003aeac:	afa10014 	sw	at,20(sp)
8003aeb0:	afa50018 	sw	a1,24(sp)
        EscapeUnicode::new(self)
8003aeb4:	0c00ecad 	jal	8003b2b4 <_ZN4core4char13EscapeUnicode3new17h87023c6b1518ea8bE>
8003aeb8:	00000000 	nop
8003aebc:	8fa20014 	lw	v0,20(sp)
    }
8003aec0:	8fbf001c 	lw	ra,28(sp)
8003aec4:	27bd0020 	addiu	sp,sp,32
8003aec8:	03e00008 	jr	ra
8003aecc:	00000000 	nop

8003aed0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E>:
    pub(crate) fn escape_debug_ext(self, args: EscapeDebugExtArgs) -> EscapeDebug {
8003aed0:	27bdffa8 	addiu	sp,sp,-88
8003aed4:	afbf0054 	sw	ra,84(sp)
8003aed8:	afa5001c 	sw	a1,28(sp)
8003aedc:	afa40020 	sw	a0,32(sp)
8003aee0:	afa40024 	sw	a0,36(sp)
8003aee4:	00060c02 	srl	at,a2,0x10
8003aee8:	a3a1002e 	sb	at,46(sp)
8003aeec:	a7a6002c 	sh	a2,44(sp)
8003aef0:	93a1002e 	lbu	at,46(sp)
8003aef4:	a3a1002a 	sb	at,42(sp)
8003aef8:	97a1002c 	lhu	at,44(sp)
8003aefc:	a7a10028 	sh	at,40(sp)
8003af00:	afa50050 	sw	a1,80(sp)
        match self {
8003af04:	10a0002d 	beqz	a1,8003afbc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0xec>
8003af08:	00000000 	nop
8003af0c:	0800ebc5 	j	8003af14 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x44>
8003af10:	00000000 	nop
8003af14:	8fa1001c 	lw	at,28(sp)
8003af18:	24020009 	li	v0,9
8003af1c:	1022002f 	beq	at,v0,8003afdc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x10c>
8003af20:	00000000 	nop
8003af24:	0800ebcb 	j	8003af2c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x5c>
8003af28:	00000000 	nop
8003af2c:	8fa1001c 	lw	at,28(sp)
8003af30:	2402000a 	li	v0,10
8003af34:	10220039 	beq	at,v0,8003b01c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x14c>
8003af38:	00000000 	nop
8003af3c:	0800ebd1 	j	8003af44 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x74>
8003af40:	00000000 	nop
8003af44:	8fa1001c 	lw	at,28(sp)
8003af48:	2402000d 	li	v0,13
8003af4c:	1022002b 	beq	at,v0,8003affc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x12c>
8003af50:	00000000 	nop
8003af54:	0800ebd7 	j	8003af5c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x8c>
8003af58:	00000000 	nop
8003af5c:	8fa1001c 	lw	at,28(sp)
8003af60:	24020022 	li	v0,34
8003af64:	1022003d 	beq	at,v0,8003b05c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x18c>
8003af68:	00000000 	nop
8003af6c:	0800ebdd 	j	8003af74 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0xa4>
8003af70:	00000000 	nop
8003af74:	8fa1001c 	lw	at,28(sp)
8003af78:	24020027 	li	v0,39
8003af7c:	1022003d 	beq	at,v0,8003b074 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1a4>
8003af80:	00000000 	nop
8003af84:	0800ebe3 	j	8003af8c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0xbc>
8003af88:	00000000 	nop
8003af8c:	8fa1001c 	lw	at,28(sp)
8003af90:	2402005c 	li	v0,92
8003af94:	10220029 	beq	at,v0,8003b03c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x16c>
8003af98:	00000000 	nop
8003af9c:	0800ebe9 	j	8003afa4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0xd4>
8003afa0:	00000000 	nop
            _ if args.escape_grapheme_extended && self.is_grapheme_extended() => {
8003afa4:	93a10028 	lbu	at,40(sp)
8003afa8:	30210001 	andi	at,at,0x1
8003afac:	14200053 	bnez	at,8003b0fc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x22c>
8003afb0:	00000000 	nop
8003afb4:	0800ec38 	j	8003b0e0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x210>
8003afb8:	00000000 	nop
8003afbc:	8fa40020 	lw	a0,32(sp)
8003afc0:	24010030 	li	at,48
            '\0' => EscapeDebug::backslash(ascii::Char::Digit0),
8003afc4:	a3a10031 	sb	at,49(sp)
8003afc8:	93a50031 	lbu	a1,49(sp)
8003afcc:	0c00ecf0 	jal	8003b3c0 <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>
8003afd0:	00000000 	nop
8003afd4:	0800ec23 	j	8003b08c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003afd8:	00000000 	nop
8003afdc:	8fa40020 	lw	a0,32(sp)
8003afe0:	24010074 	li	at,116
            '\t' => EscapeDebug::backslash(ascii::Char::SmallT),
8003afe4:	a3a10032 	sb	at,50(sp)
8003afe8:	93a50032 	lbu	a1,50(sp)
8003afec:	0c00ecf0 	jal	8003b3c0 <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>
8003aff0:	00000000 	nop
8003aff4:	0800ec23 	j	8003b08c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003aff8:	00000000 	nop
8003affc:	8fa40020 	lw	a0,32(sp)
8003b000:	24010072 	li	at,114
            '\r' => EscapeDebug::backslash(ascii::Char::SmallR),
8003b004:	a3a10033 	sb	at,51(sp)
8003b008:	93a50033 	lbu	a1,51(sp)
8003b00c:	0c00ecf0 	jal	8003b3c0 <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>
8003b010:	00000000 	nop
8003b014:	0800ec23 	j	8003b08c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003b018:	00000000 	nop
8003b01c:	8fa40020 	lw	a0,32(sp)
8003b020:	2401006e 	li	at,110
            '\n' => EscapeDebug::backslash(ascii::Char::SmallN),
8003b024:	a3a10034 	sb	at,52(sp)
8003b028:	93a50034 	lbu	a1,52(sp)
8003b02c:	0c00ecf0 	jal	8003b3c0 <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>
8003b030:	00000000 	nop
8003b034:	0800ec23 	j	8003b08c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003b038:	00000000 	nop
8003b03c:	8fa40020 	lw	a0,32(sp)
8003b040:	2401005c 	li	at,92
            '\\' => EscapeDebug::backslash(ascii::Char::ReverseSolidus),
8003b044:	a3a10035 	sb	at,53(sp)
8003b048:	93a50035 	lbu	a1,53(sp)
8003b04c:	0c00ecf0 	jal	8003b3c0 <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>
8003b050:	00000000 	nop
8003b054:	0800ec23 	j	8003b08c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003b058:	00000000 	nop
            '\"' if args.escape_double_quote => EscapeDebug::backslash(ascii::Char::QuotationMark),
8003b05c:	93a1002a 	lbu	at,42(sp)
8003b060:	30210001 	andi	at,at,0x1
8003b064:	1420000e 	bnez	at,8003b0a0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1d0>
8003b068:	00000000 	nop
8003b06c:	0800ebe9 	j	8003afa4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0xd4>
8003b070:	00000000 	nop
            '\'' if args.escape_single_quote => EscapeDebug::backslash(ascii::Char::Apostrophe),
8003b074:	93a10029 	lbu	at,41(sp)
8003b078:	30210001 	andi	at,at,0x1
8003b07c:	14200010 	bnez	at,8003b0c0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1f0>
8003b080:	00000000 	nop
8003b084:	0800ebe9 	j	8003afa4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0xd4>
8003b088:	00000000 	nop
    }
8003b08c:	8fa20024 	lw	v0,36(sp)
8003b090:	8fbf0054 	lw	ra,84(sp)
8003b094:	27bd0058 	addiu	sp,sp,88
8003b098:	03e00008 	jr	ra
8003b09c:	00000000 	nop
8003b0a0:	8fa40020 	lw	a0,32(sp)
8003b0a4:	24010022 	li	at,34
            '\"' if args.escape_double_quote => EscapeDebug::backslash(ascii::Char::QuotationMark),
8003b0a8:	a3a10036 	sb	at,54(sp)
8003b0ac:	93a50036 	lbu	a1,54(sp)
8003b0b0:	0c00ecf0 	jal	8003b3c0 <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>
8003b0b4:	00000000 	nop
8003b0b8:	0800ec23 	j	8003b08c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003b0bc:	00000000 	nop
8003b0c0:	8fa40020 	lw	a0,32(sp)
8003b0c4:	24010027 	li	at,39
            '\'' if args.escape_single_quote => EscapeDebug::backslash(ascii::Char::Apostrophe),
8003b0c8:	a3a10037 	sb	at,55(sp)
8003b0cc:	93a50037 	lbu	a1,55(sp)
8003b0d0:	0c00ecf0 	jal	8003b3c0 <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>
8003b0d4:	00000000 	nop
8003b0d8:	0800ec23 	j	8003b08c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003b0dc:	00000000 	nop
            _ if is_printable(self) => EscapeDebug::printable(self),
8003b0e0:	8fa4001c 	lw	a0,28(sp)
8003b0e4:	0c01150c 	jal	80045430 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE>
8003b0e8:	00000000 	nop
8003b0ec:	14400020 	bnez	v0,8003b170 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x2a0>
8003b0f0:	00000000 	nop
8003b0f4:	0800ec51 	j	8003b144 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x274>
8003b0f8:	00000000 	nop
            _ if args.escape_grapheme_extended && self.is_grapheme_extended() => {
8003b0fc:	8fa4001c 	lw	a0,28(sp)
8003b100:	0c00ec6b 	jal	8003b1ac <_ZN4core4char7methods22_$LT$impl$u20$char$GT$20is_grapheme_extended17h1631973bee7394f0E>
8003b104:	00000000 	nop
8003b108:	1040fff5 	beqz	v0,8003b0e0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x210>
8003b10c:	00000000 	nop
8003b110:	0800ec46 	j	8003b118 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x248>
8003b114:	00000000 	nop
                EscapeDebug::from_unicode(self.escape_unicode())
8003b118:	8fa5001c 	lw	a1,28(sp)
8003b11c:	27a40038 	addiu	a0,sp,56
8003b120:	afa40018 	sw	a0,24(sp)
8003b124:	0c00eba8 	jal	8003aea0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$14escape_unicode17h9e633e122dbe17d1E>
8003b128:	00000000 	nop
8003b12c:	8fa40020 	lw	a0,32(sp)
8003b130:	8fa50018 	lw	a1,24(sp)
8003b134:	0c00ed1a 	jal	8003b468 <_ZN4core4char11EscapeDebug12from_unicode17h5a7561e3f92feba8E>
8003b138:	00000000 	nop
8003b13c:	0800ec23 	j	8003b08c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003b140:	00000000 	nop
            _ => EscapeDebug::from_unicode(self.escape_unicode()),
8003b144:	8fa5001c 	lw	a1,28(sp)
8003b148:	27a40044 	addiu	a0,sp,68
8003b14c:	afa40014 	sw	a0,20(sp)
8003b150:	0c00eba8 	jal	8003aea0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$14escape_unicode17h9e633e122dbe17d1E>
8003b154:	00000000 	nop
8003b158:	8fa40020 	lw	a0,32(sp)
8003b15c:	8fa50014 	lw	a1,20(sp)
8003b160:	0c00ed1a 	jal	8003b468 <_ZN4core4char11EscapeDebug12from_unicode17h5a7561e3f92feba8E>
8003b164:	00000000 	nop
8003b168:	0800ec23 	j	8003b08c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003b16c:	00000000 	nop
            _ if is_printable(self) => EscapeDebug::printable(self),
8003b170:	8fa5001c 	lw	a1,28(sp)
8003b174:	8fa40020 	lw	a0,32(sp)
8003b178:	0c00ece1 	jal	8003b384 <_ZN4core4char11EscapeDebug9printable17h28c6cc3edd9ab119E>
8003b17c:	00000000 	nop
8003b180:	0800ec23 	j	8003b08c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E+0x1bc>
8003b184:	00000000 	nop

8003b188 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$8len_utf817hb6087b2bc95d3ee8E>:
    pub const fn len_utf8(self) -> usize {
8003b188:	27bdffe8 	addiu	sp,sp,-24
8003b18c:	afbf0014 	sw	ra,20(sp)
8003b190:	afa40010 	sw	a0,16(sp)
        len_utf8(self as u32)
8003b194:	0c00ec84 	jal	8003b210 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E>
8003b198:	00000000 	nop
    }
8003b19c:	8fbf0014 	lw	ra,20(sp)
8003b1a0:	27bd0018 	addiu	sp,sp,24
8003b1a4:	03e00008 	jr	ra
8003b1a8:	00000000 	nop

8003b1ac <_ZN4core4char7methods22_$LT$impl$u20$char$GT$20is_grapheme_extended17h1631973bee7394f0E>:
    pub(crate) fn is_grapheme_extended(self) -> bool {
8003b1ac:	27bdffe0 	addiu	sp,sp,-32
8003b1b0:	afbf001c 	sw	ra,28(sp)
8003b1b4:	afa40010 	sw	a0,16(sp)
8003b1b8:	afa40018 	sw	a0,24(sp)
        self > '\x7f' && unicode::Grapheme_Extend(self)
8003b1bc:	2c810080 	sltiu	at,a0,128
8003b1c0:	10200007 	beqz	at,8003b1e0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$20is_grapheme_extended17h1631973bee7394f0E+0x34>
8003b1c4:	00000000 	nop
8003b1c8:	0800ec74 	j	8003b1d0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$20is_grapheme_extended17h1631973bee7394f0E+0x24>
8003b1cc:	00000000 	nop
8003b1d0:	24010000 	li	at,0
8003b1d4:	a3a00017 	sb	zero,23(sp)
8003b1d8:	0800ec7e 	j	8003b1f8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$20is_grapheme_extended17h1631973bee7394f0E+0x4c>
8003b1dc:	00000000 	nop
8003b1e0:	8fa40010 	lw	a0,16(sp)
8003b1e4:	0c0122d1 	jal	80048b44 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE>
8003b1e8:	00000000 	nop
8003b1ec:	a3a20017 	sb	v0,23(sp)
8003b1f0:	0800ec7e 	j	8003b1f8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$20is_grapheme_extended17h1631973bee7394f0E+0x4c>
8003b1f4:	00000000 	nop
    }
8003b1f8:	93a10017 	lbu	at,23(sp)
8003b1fc:	30220001 	andi	v0,at,0x1
8003b200:	8fbf001c 	lw	ra,28(sp)
8003b204:	27bd0020 	addiu	sp,sp,32
8003b208:	03e00008 	jr	ra
8003b20c:	00000000 	nop

8003b210 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E>:
const fn len_utf8(code: u32) -> usize {
8003b210:	27bdfff0 	addiu	sp,sp,-16
8003b214:	afa40004 	sw	a0,4(sp)
8003b218:	afa4000c 	sw	a0,12(sp)
    if code < MAX_ONE_B {
8003b21c:	2c810080 	sltiu	at,a0,128
8003b220:	14200009 	bnez	at,8003b248 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x38>
8003b224:	00000000 	nop
8003b228:	0800ec8c 	j	8003b230 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x20>
8003b22c:	00000000 	nop
    } else if code < MAX_TWO_B {
8003b230:	8fa10004 	lw	at,4(sp)
8003b234:	2c210800 	sltiu	at,at,2048
8003b238:	1420000e 	bnez	at,8003b274 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x64>
8003b23c:	00000000 	nop
8003b240:	0800ec96 	j	8003b258 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x48>
8003b244:	00000000 	nop
8003b248:	24010001 	li	at,1
        1
8003b24c:	afa10008 	sw	at,8(sp)
    if code < MAX_ONE_B {
8003b250:	0800eca9 	j	8003b2a4 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x94>
8003b254:	00000000 	nop
8003b258:	8fa10004 	lw	at,4(sp)
8003b25c:	3c020001 	lui	v0,0x1
    } else if code < MAX_THREE_B {
8003b260:	0022082b 	sltu	at,at,v0
8003b264:	1420000b 	bnez	at,8003b294 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x84>
8003b268:	00000000 	nop
8003b26c:	0800eca1 	j	8003b284 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x74>
8003b270:	00000000 	nop
8003b274:	24010002 	li	at,2
        2
8003b278:	afa10008 	sw	at,8(sp)
    } else if code < MAX_TWO_B {
8003b27c:	0800eca9 	j	8003b2a4 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x94>
8003b280:	00000000 	nop
8003b284:	24010004 	li	at,4
        4
8003b288:	afa10008 	sw	at,8(sp)
    } else if code < MAX_THREE_B {
8003b28c:	0800eca9 	j	8003b2a4 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x94>
8003b290:	00000000 	nop
8003b294:	24010003 	li	at,3
        3
8003b298:	afa10008 	sw	at,8(sp)
    } else if code < MAX_THREE_B {
8003b29c:	0800eca9 	j	8003b2a4 <_ZN4core4char7methods8len_utf817h2ebb948c1789e981E+0x94>
8003b2a0:	00000000 	nop
}
8003b2a4:	8fa20008 	lw	v0,8(sp)
8003b2a8:	27bd0010 	addiu	sp,sp,16
8003b2ac:	03e00008 	jr	ra
8003b2b0:	00000000 	nop

8003b2b4 <_ZN4core4char13EscapeUnicode3new17h87023c6b1518ea8bE>:
#[derive(Clone, Debug)]
#[stable(feature = "rust1", since = "1.0.0")]
pub struct EscapeUnicode(escape::EscapeIterInner<10>);

impl EscapeUnicode {
    fn new(chr: char) -> Self {
8003b2b4:	27bdffb8 	addiu	sp,sp,-72
8003b2b8:	afbf0044 	sw	ra,68(sp)
8003b2bc:	afa40010 	sw	a0,16(sp)
8003b2c0:	afa40014 	sw	a0,20(sp)
8003b2c4:	afa5003c 	sw	a1,60(sp)
8003b2c8:	24010000 	li	at,0
        let mut data = [ascii::Char::Null; 10];
8003b2cc:	a3a00023 	sb	zero,35(sp)
8003b2d0:	93a10023 	lbu	at,35(sp)
8003b2d4:	00011200 	sll	v0,at,0x8
8003b2d8:	00411825 	or	v1,v0,at
8003b2dc:	a7a30020 	sh	v1,32(sp)
8003b2e0:	00011400 	sll	v0,at,0x10
8003b2e4:	00431025 	or	v0,v0,v1
8003b2e8:	00010e00 	sll	at,at,0x18
8003b2ec:	00220825 	or	at,at,v0
8003b2f0:	afa1001c 	sw	at,28(sp)
8003b2f4:	afa10018 	sw	at,24(sp)
8003b2f8:	27a40018 	addiu	a0,sp,24
        let range = escape::escape_unicode_into(&mut data, chr);
8003b2fc:	0c01165f 	jal	8004597c <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE>
8003b300:	00000000 	nop
8003b304:	00403025 	move	a2,v0
8003b308:	00603825 	move	a3,v1
8003b30c:	a3a60042 	sb	a2,66(sp)
8003b310:	a3a70043 	sb	a3,67(sp)
        Self(escape::EscapeIterInner::new(data, range))
8003b314:	97a10020 	lhu	at,32(sp)
8003b318:	a7a10038 	sh	at,56(sp)
8003b31c:	8fa1001c 	lw	at,28(sp)
8003b320:	afa10034 	sw	at,52(sp)
8003b324:	8fa10018 	lw	at,24(sp)
8003b328:	afa10030 	sw	at,48(sp)
8003b32c:	27a40024 	addiu	a0,sp,36
8003b330:	27a50030 	addiu	a1,sp,48
8003b334:	0c011772 	jal	80045dc8 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE>
8003b338:	00000000 	nop
8003b33c:	8fa40010 	lw	a0,16(sp)
8003b340:	8fa20014 	lw	v0,20(sp)
8003b344:	8ba5002f 	lwl	a1,47(sp)
8003b348:	9ba5002c 	lwr	a1,44(sp)
8003b34c:	a885000b 	swl	a1,11(a0)
8003b350:	8ba3002b 	lwl	v1,43(sp)
8003b354:	9ba30028 	lwr	v1,40(sp)
8003b358:	a8830007 	swl	v1,7(a0)
8003b35c:	8ba10027 	lwl	at,39(sp)
8003b360:	9ba10024 	lwr	at,36(sp)
8003b364:	a8810003 	swl	at,3(a0)
8003b368:	b8850008 	swr	a1,8(a0)
8003b36c:	b8830004 	swr	v1,4(a0)
8003b370:	b8810000 	swr	at,0(a0)
    }
8003b374:	8fbf0044 	lw	ra,68(sp)
8003b378:	27bd0048 	addiu	sp,sp,72
8003b37c:	03e00008 	jr	ra
8003b380:	00000000 	nop

8003b384 <_ZN4core4char11EscapeDebug9printable17h28c6cc3edd9ab119E>:
    Bytes(escape::EscapeIterInner<10>),
    Char(char),
}

impl EscapeDebug {
    fn printable(chr: char) -> Self {
8003b384:	27bdfff0 	addiu	sp,sp,-16
8003b388:	00801025 	move	v0,a0
8003b38c:	afa5000c 	sw	a1,12(sp)
        Self(EscapeDebugInner::Char(chr))
8003b390:	afa50004 	sw	a1,4(sp)
8003b394:	24010080 	li	at,128
8003b398:	a3a10000 	sb	at,0(sp)
8003b39c:	8fa10008 	lw	at,8(sp)
8003b3a0:	ac810008 	sw	at,8(a0)
8003b3a4:	8fa10004 	lw	at,4(sp)
8003b3a8:	ac810004 	sw	at,4(a0)
8003b3ac:	8fa10000 	lw	at,0(sp)
8003b3b0:	ac810000 	sw	at,0(a0)
8003b3b4:	27bd0010 	addiu	sp,sp,16
    }
8003b3b8:	03e00008 	jr	ra
8003b3bc:	00000000 	nop

8003b3c0 <_ZN4core4char11EscapeDebug9backslash17h21ca141b5efcc38bE>:

    fn backslash(chr: ascii::Char) -> Self {
8003b3c0:	27bdffc0 	addiu	sp,sp,-64
8003b3c4:	afbf003c 	sw	ra,60(sp)
8003b3c8:	afa40010 	sw	a0,16(sp)
8003b3cc:	afa40014 	sw	a0,20(sp)
8003b3d0:	a3a50037 	sb	a1,55(sp)
8003b3d4:	2401005c 	li	at,92
        let data = [ascii::Char::ReverseSolidus, chr];
8003b3d8:	a3a1001b 	sb	at,27(sp)
8003b3dc:	93a1001b 	lbu	at,27(sp)
8003b3e0:	a3a10019 	sb	at,25(sp)
8003b3e4:	a3a5001a 	sb	a1,26(sp)
        let iter = escape::EscapeIterInner::from_array(data);
8003b3e8:	93a1001a 	lbu	at,26(sp)
8003b3ec:	00010a00 	sll	at,at,0x8
8003b3f0:	93a20019 	lbu	v0,25(sp)
8003b3f4:	00220825 	or	at,at,v0
8003b3f8:	a7a10038 	sh	at,56(sp)
8003b3fc:	97a10038 	lhu	at,56(sp)
8003b400:	a7a1003a 	sh	at,58(sp)
8003b404:	97a5003a 	lhu	a1,58(sp)
8003b408:	27a4001c 	addiu	a0,sp,28
8003b40c:	0c0117f0 	jal	80045fc0 <_ZN4core6escape24EscapeIterInner$LT$_$GT$10from_array17hd229c07af8ede3fdE>
8003b410:	00000000 	nop
8003b414:	8fa40010 	lw	a0,16(sp)
8003b418:	8fa20014 	lw	v0,20(sp)
        Self(EscapeDebugInner::Bytes(iter))
8003b41c:	8ba10027 	lwl	at,39(sp)
8003b420:	9ba10024 	lwr	at,36(sp)
8003b424:	afa10030 	sw	at,48(sp)
8003b428:	8ba10023 	lwl	at,35(sp)
8003b42c:	9ba10020 	lwr	at,32(sp)
8003b430:	afa1002c 	sw	at,44(sp)
8003b434:	8ba1001f 	lwl	at,31(sp)
8003b438:	9ba1001c 	lwr	at,28(sp)
8003b43c:	afa10028 	sw	at,40(sp)
8003b440:	8fa10030 	lw	at,48(sp)
8003b444:	ac810008 	sw	at,8(a0)
8003b448:	8fa1002c 	lw	at,44(sp)
8003b44c:	ac810004 	sw	at,4(a0)
8003b450:	8fa10028 	lw	at,40(sp)
8003b454:	ac810000 	sw	at,0(a0)
    }
8003b458:	8fbf003c 	lw	ra,60(sp)
8003b45c:	27bd0040 	addiu	sp,sp,64
8003b460:	03e00008 	jr	ra
8003b464:	00000000 	nop

8003b468 <_ZN4core4char11EscapeDebug12from_unicode17h5a7561e3f92feba8E>:

    fn from_unicode(esc: EscapeUnicode) -> Self {
8003b468:	27bdffe8 	addiu	sp,sp,-24
8003b46c:	00801025 	move	v0,a0
        Self(EscapeDebugInner::Bytes(esc.0))
8003b470:	88a1000b 	lwl	at,11(a1)
8003b474:	98a10008 	lwr	at,8(a1)
8003b478:	afa10014 	sw	at,20(sp)
8003b47c:	88a10007 	lwl	at,7(a1)
8003b480:	98a10004 	lwr	at,4(a1)
8003b484:	afa10010 	sw	at,16(sp)
8003b488:	88a10003 	lwl	at,3(a1)
8003b48c:	98a10000 	lwr	at,0(a1)
8003b490:	afa1000c 	sw	at,12(sp)
8003b494:	8fa10014 	lw	at,20(sp)
8003b498:	afa10008 	sw	at,8(sp)
8003b49c:	8fa10010 	lw	at,16(sp)
8003b4a0:	afa10004 	sw	at,4(sp)
8003b4a4:	8fa1000c 	lw	at,12(sp)
8003b4a8:	afa10000 	sw	at,0(sp)
8003b4ac:	8fa10008 	lw	at,8(sp)
8003b4b0:	ac810008 	sw	at,8(a0)
8003b4b4:	8fa10004 	lw	at,4(sp)
8003b4b8:	ac810004 	sw	at,4(a0)
8003b4bc:	8fa10000 	lw	at,0(sp)
8003b4c0:	ac810000 	sw	at,0(a0)
8003b4c4:	27bd0018 	addiu	sp,sp,24
    }
8003b4c8:	03e00008 	jr	ra
8003b4cc:	00000000 	nop

8003b4d0 <_ZN4core4char11EscapeDebug5clear17hb6d2810493a678a1E>:

    fn clear(&mut self) {
8003b4d0:	27bdffc8 	addiu	sp,sp,-56
8003b4d4:	afbf0034 	sw	ra,52(sp)
8003b4d8:	afa40014 	sw	a0,20(sp)
8003b4dc:	afa40030 	sw	a0,48(sp)
8003b4e0:	27a40018 	addiu	a0,sp,24
        let bytes = escape::EscapeIterInner::from_array([]);
8003b4e4:	0c0117bb 	jal	80045eec <_ZN4core6escape24EscapeIterInner$LT$_$GT$10from_array17h2d26a693fb365472E>
8003b4e8:	00000000 	nop
8003b4ec:	8fa40014 	lw	a0,20(sp)
        self.0 = EscapeDebugInner::Bytes(bytes);
8003b4f0:	8ba10023 	lwl	at,35(sp)
8003b4f4:	9ba10020 	lwr	at,32(sp)
8003b4f8:	afa1002c 	sw	at,44(sp)
8003b4fc:	8ba1001f 	lwl	at,31(sp)
8003b500:	9ba1001c 	lwr	at,28(sp)
8003b504:	afa10028 	sw	at,40(sp)
8003b508:	8ba1001b 	lwl	at,27(sp)
8003b50c:	9ba10018 	lwr	at,24(sp)
8003b510:	afa10024 	sw	at,36(sp)
8003b514:	8fa1002c 	lw	at,44(sp)
8003b518:	ac810008 	sw	at,8(a0)
8003b51c:	8fa10028 	lw	at,40(sp)
8003b520:	ac810004 	sw	at,4(a0)
8003b524:	8fa10024 	lw	at,36(sp)
8003b528:	ac810000 	sw	at,0(a0)
    }
8003b52c:	8fbf0034 	lw	ra,52(sp)
8003b530:	27bd0038 	addiu	sp,sp,56
8003b534:	03e00008 	jr	ra
8003b538:	00000000 	nop

8003b53c <_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4482fd071e18f61bE>:
#[stable(feature = "char_escape_debug", since = "1.20.0")]
impl Iterator for EscapeDebug {
    type Item = char;

    #[inline]
    fn next(&mut self) -> Option<char> {
8003b53c:	27bdffd0 	addiu	sp,sp,-48
8003b540:	afbf002c 	sw	ra,44(sp)
8003b544:	afa40018 	sw	a0,24(sp)
8003b548:	afa40020 	sw	a0,32(sp)
        match self.0 {
8003b54c:	90810000 	lbu	at,0(a0)
8003b550:	24020080 	li	v0,128
8003b554:	1022000e 	beq	at,v0,8003b590 <_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4482fd071e18f61bE+0x54>
8003b558:	00000000 	nop
8003b55c:	0800ed59 	j	8003b564 <_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4482fd071e18f61bE+0x28>
8003b560:	00000000 	nop
            EscapeDebugInner::Bytes(ref mut bytes) => bytes.next().map(char::from),
8003b564:	8fa40018 	lw	a0,24(sp)
8003b568:	afa40024 	sw	a0,36(sp)
8003b56c:	0c01183f 	jal	800460fc <_ZN4core6escape24EscapeIterInner$LT$_$GT$4next17h46da1e292175aea6E>
8003b570:	00000000 	nop
8003b574:	00602825 	move	a1,v1
8003b578:	30440001 	andi	a0,v0,0x1
8003b57c:	0c00f0ec 	jal	8003c3b0 <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E>
8003b580:	00000000 	nop
8003b584:	afa2001c 	sw	v0,28(sp)
8003b588:	0800ed6e 	j	8003b5b8 <_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4482fd071e18f61bE+0x7c>
8003b58c:	00000000 	nop
            EscapeDebugInner::Char(chr) => {
8003b590:	8fa40018 	lw	a0,24(sp)
8003b594:	8c810004 	lw	at,4(a0)
8003b598:	afa10014 	sw	at,20(sp)
8003b59c:	afa10028 	sw	at,40(sp)
                self.clear();
8003b5a0:	0c00ed34 	jal	8003b4d0 <_ZN4core4char11EscapeDebug5clear17hb6d2810493a678a1E>
8003b5a4:	00000000 	nop
8003b5a8:	8fa10014 	lw	at,20(sp)
                Some(chr)
8003b5ac:	afa1001c 	sw	at,28(sp)
            }
8003b5b0:	0800ed6e 	j	8003b5b8 <_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4482fd071e18f61bE+0x7c>
8003b5b4:	00000000 	nop
        }
    }
8003b5b8:	8fa2001c 	lw	v0,28(sp)
8003b5bc:	8fbf002c 	lw	ra,44(sp)
8003b5c0:	27bd0030 	addiu	sp,sp,48
8003b5c4:	03e00008 	jr	ra
8003b5c8:	00000000 	nop

8003b5cc <_ZN93_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..exact_size..ExactSizeIterator$GT$3len17hf4bcfdda21cc47c0E>:
    }
}

#[stable(feature = "char_escape_debug", since = "1.20.0")]
impl ExactSizeIterator for EscapeDebug {
    fn len(&self) -> usize {
8003b5cc:	27bdffd8 	addiu	sp,sp,-40
8003b5d0:	afbf0024 	sw	ra,36(sp)
8003b5d4:	afa40014 	sw	a0,20(sp)
8003b5d8:	afa4001c 	sw	a0,28(sp)
        match &self.0 {
8003b5dc:	90810000 	lbu	at,0(a0)
8003b5e0:	24020080 	li	v0,128
8003b5e4:	1022000a 	beq	at,v0,8003b610 <_ZN93_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..exact_size..ExactSizeIterator$GT$3len17hf4bcfdda21cc47c0E+0x44>
8003b5e8:	00000000 	nop
8003b5ec:	0800ed7d 	j	8003b5f4 <_ZN93_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..exact_size..ExactSizeIterator$GT$3len17hf4bcfdda21cc47c0E+0x28>
8003b5f0:	00000000 	nop
            EscapeDebugInner::Bytes(bytes) => bytes.len(),
8003b5f4:	8fa40014 	lw	a0,20(sp)
8003b5f8:	afa40020 	sw	a0,32(sp)
8003b5fc:	0c01182a 	jal	800460a8 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3len17h46a78ba788686e9dE>
8003b600:	00000000 	nop
8003b604:	afa20018 	sw	v0,24(sp)
8003b608:	0800ed88 	j	8003b620 <_ZN93_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..exact_size..ExactSizeIterator$GT$3len17hf4bcfdda21cc47c0E+0x54>
8003b60c:	00000000 	nop
8003b610:	24010001 	li	at,1
            EscapeDebugInner::Char(_) => 1,
8003b614:	afa10018 	sw	at,24(sp)
8003b618:	0800ed88 	j	8003b620 <_ZN93_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..exact_size..ExactSizeIterator$GT$3len17hf4bcfdda21cc47c0E+0x54>
8003b61c:	00000000 	nop
        }
    }
8003b620:	8fa20018 	lw	v0,24(sp)
8003b624:	8fbf0024 	lw	ra,36(sp)
8003b628:	27bd0028 	addiu	sp,sp,40
8003b62c:	03e00008 	jr	ra
8003b630:	00000000 	nop

8003b634 <_ZN4core4iter8adapters6cloned15Cloned$LT$I$GT$3new17h9502bc74172f8b49E>:
pub struct Cloned<I> {
    it: I,
}

impl<I> Cloned<I> {
    pub(in crate::iter) fn new(it: I) -> Cloned<I> {
8003b634:	27bdfff0 	addiu	sp,sp,-16
8003b638:	afa40008 	sw	a0,8(sp)
8003b63c:	afa5000c 	sw	a1,12(sp)
        Cloned { it }
8003b640:	afa40000 	sw	a0,0(sp)
8003b644:	afa50004 	sw	a1,4(sp)
    }
8003b648:	8fa20000 	lw	v0,0(sp)
8003b64c:	8fa30004 	lw	v1,4(sp)
8003b650:	27bd0010 	addiu	sp,sp,16
8003b654:	03e00008 	jr	ra
8003b658:	00000000 	nop

8003b65c <_ZN104_$LT$core..iter..adapters..cloned..Cloned$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h99c66ea835c86bdbE>:
    I: Iterator<Item = &'a T>,
    T: Clone,
{
    type Item = T;

    fn next(&mut self) -> Option<T> {
8003b65c:	27bdffe8 	addiu	sp,sp,-24
8003b660:	afbf0014 	sw	ra,20(sp)
8003b664:	afa40010 	sw	a0,16(sp)
        self.it.next().cloned()
8003b668:	0c011fec 	jal	80047fb0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE>
8003b66c:	00000000 	nop
8003b670:	00402025 	move	a0,v0
8003b674:	0c00f19d 	jal	8003c674 <_ZN4core6option19Option$LT$$RF$T$GT$6cloned17he089691e6463c91bE>
8003b678:	00000000 	nop
    }
8003b67c:	8fbf0014 	lw	ra,20(sp)
8003b680:	27bd0018 	addiu	sp,sp,24
8003b684:	03e00008 	jr	ra
8003b688:	00000000 	nop

8003b68c <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h088319821c4ff07bE>:
pub struct Enumerate<I> {
    iter: I,
    count: usize,
}
impl<I> Enumerate<I> {
    pub(in crate::iter) fn new(iter: I) -> Enumerate<I> {
8003b68c:	27bdfff8 	addiu	sp,sp,-8
8003b690:	00801025 	move	v0,a0
8003b694:	afa50000 	sw	a1,0(sp)
8003b698:	afa60004 	sw	a2,4(sp)
        Enumerate { iter, count: 0 }
8003b69c:	ac850000 	sw	a1,0(a0)
8003b6a0:	ac860004 	sw	a2,4(a0)
8003b6a4:	ac800008 	sw	zero,8(a0)
8003b6a8:	27bd0008 	addiu	sp,sp,8
    }
8003b6ac:	03e00008 	jr	ra
8003b6b0:	00000000 	nop

8003b6b4 <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h517df8d8eacec18dE>:
    pub(in crate::iter) fn new(iter: I) -> Enumerate<I> {
8003b6b4:	27bdfff8 	addiu	sp,sp,-8
8003b6b8:	00801025 	move	v0,a0
8003b6bc:	afa50000 	sw	a1,0(sp)
8003b6c0:	afa60004 	sw	a2,4(sp)
        Enumerate { iter, count: 0 }
8003b6c4:	ac850000 	sw	a1,0(a0)
8003b6c8:	ac860004 	sw	a2,4(a0)
8003b6cc:	ac800008 	sw	zero,8(a0)
8003b6d0:	27bd0008 	addiu	sp,sp,8
    }
8003b6d4:	03e00008 	jr	ra
8003b6d8:	00000000 	nop

8003b6dc <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E>:
    /// # Panics
    ///
    /// Might panic if the index of the element overflows a `usize`.
    #[inline]
    #[rustc_inherit_overflow_checks]
    fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {
8003b6dc:	27bdffb8 	addiu	sp,sp,-72
8003b6e0:	afbf0044 	sw	ra,68(sp)
8003b6e4:	afa4001c 	sw	a0,28(sp)
        let a = self.iter.next()?;
8003b6e8:	afa40038 	sw	a0,56(sp)
8003b6ec:	0c01205c 	jal	80048170 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E>
8003b6f0:	00000000 	nop
8003b6f4:	00402025 	move	a0,v0
8003b6f8:	0c00f201 	jal	8003c804 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hd9e76cd92f378f0bE>
8003b6fc:	00000000 	nop
8003b700:	afa2002c 	sw	v0,44(sp)
8003b704:	8fa1002c 	lw	at,44(sp)
8003b708:	10200011 	beqz	at,8003b750 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E+0x74>
8003b70c:	00000000 	nop
8003b710:	0800edc6 	j	8003b718 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E+0x3c>
8003b714:	00000000 	nop
8003b718:	8fa1001c 	lw	at,28(sp)
8003b71c:	8fa2002c 	lw	v0,44(sp)
8003b720:	afa20010 	sw	v0,16(sp)
8003b724:	afa2003c 	sw	v0,60(sp)
        let i = self.count;
8003b728:	8c220008 	lw	v0,8(at)
8003b72c:	afa20014 	sw	v0,20(sp)
8003b730:	afa20040 	sw	v0,64(sp)
        self.count += 1;
8003b734:	8c210008 	lw	at,8(at)
8003b738:	24210001 	addiu	at,at,1
8003b73c:	afa10018 	sw	at,24(sp)
8003b740:	10200016 	beqz	at,8003b79c <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E+0xc0>
8003b744:	00000000 	nop
8003b748:	0800edda 	j	8003b768 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E+0x8c>
8003b74c:	00000000 	nop
        let a = self.iter.next()?;
8003b750:	0c00f227 	jal	8003c89c <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h273a54921453764dE>
8003b754:	00000000 	nop
8003b758:	afa20024 	sw	v0,36(sp)
8003b75c:	afa30028 	sw	v1,40(sp)
8003b760:	0800edeb 	j	8003b7ac <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E+0xd0>
8003b764:	00000000 	nop
        self.count += 1;
8003b768:	8fa10010 	lw	at,16(sp)
8003b76c:	8fa20014 	lw	v0,20(sp)
8003b770:	8fa30018 	lw	v1,24(sp)
8003b774:	8fa4001c 	lw	a0,28(sp)
8003b778:	ac830008 	sw	v1,8(a0)
        Some((i, a))
8003b77c:	afa20030 	sw	v0,48(sp)
8003b780:	afa10034 	sw	at,52(sp)
8003b784:	8fa20030 	lw	v0,48(sp)
8003b788:	8fa10034 	lw	at,52(sp)
8003b78c:	afa20024 	sw	v0,36(sp)
8003b790:	afa10028 	sw	at,40(sp)
    }
8003b794:	0800edeb 	j	8003b7ac <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E+0xd0>
8003b798:	00000000 	nop
        self.count += 1;
8003b79c:	3c018108 	lui	at,0x8108
8003b7a0:	2424b60c 	addiu	a0,at,-18932
8003b7a4:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003b7a8:	00000000 	nop
    }
8003b7ac:	8fa20024 	lw	v0,36(sp)
8003b7b0:	8fa30028 	lw	v1,40(sp)
8003b7b4:	8fbf0044 	lw	ra,68(sp)
8003b7b8:	27bd0048 	addiu	sp,sp,72
8003b7bc:	03e00008 	jr	ra
8003b7c0:	00000000 	nop

8003b7c4 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE>:
    fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {
8003b7c4:	27bdffb8 	addiu	sp,sp,-72
8003b7c8:	afbf0044 	sw	ra,68(sp)
8003b7cc:	afa4001c 	sw	a0,28(sp)
        let a = self.iter.next()?;
8003b7d0:	afa40038 	sw	a0,56(sp)
8003b7d4:	0c012104 	jal	80048410 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E>
8003b7d8:	00000000 	nop
8003b7dc:	00402025 	move	a0,v0
8003b7e0:	0c00f214 	jal	8003c850 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17heb3c9f832ee98659E>
8003b7e4:	00000000 	nop
8003b7e8:	afa2002c 	sw	v0,44(sp)
8003b7ec:	8fa1002c 	lw	at,44(sp)
8003b7f0:	10200011 	beqz	at,8003b838 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE+0x74>
8003b7f4:	00000000 	nop
8003b7f8:	0800ee00 	j	8003b800 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE+0x3c>
8003b7fc:	00000000 	nop
8003b800:	8fa1001c 	lw	at,28(sp)
8003b804:	8fa2002c 	lw	v0,44(sp)
8003b808:	afa20010 	sw	v0,16(sp)
8003b80c:	afa2003c 	sw	v0,60(sp)
        let i = self.count;
8003b810:	8c220008 	lw	v0,8(at)
8003b814:	afa20014 	sw	v0,20(sp)
8003b818:	afa20040 	sw	v0,64(sp)
        self.count += 1;
8003b81c:	8c210008 	lw	at,8(at)
8003b820:	24210001 	addiu	at,at,1
8003b824:	afa10018 	sw	at,24(sp)
8003b828:	10200016 	beqz	at,8003b884 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE+0xc0>
8003b82c:	00000000 	nop
8003b830:	0800ee14 	j	8003b850 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE+0x8c>
8003b834:	00000000 	nop
        let a = self.iter.next()?;
8003b838:	0c00f235 	jal	8003c8d4 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h50f37f7fa945e0e3E>
8003b83c:	00000000 	nop
8003b840:	afa20024 	sw	v0,36(sp)
8003b844:	afa30028 	sw	v1,40(sp)
8003b848:	0800ee25 	j	8003b894 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE+0xd0>
8003b84c:	00000000 	nop
        self.count += 1;
8003b850:	8fa10010 	lw	at,16(sp)
8003b854:	8fa20014 	lw	v0,20(sp)
8003b858:	8fa30018 	lw	v1,24(sp)
8003b85c:	8fa4001c 	lw	a0,28(sp)
8003b860:	ac830008 	sw	v1,8(a0)
        Some((i, a))
8003b864:	afa20030 	sw	v0,48(sp)
8003b868:	afa10034 	sw	at,52(sp)
8003b86c:	8fa20030 	lw	v0,48(sp)
8003b870:	8fa10034 	lw	at,52(sp)
8003b874:	afa20024 	sw	v0,36(sp)
8003b878:	afa10028 	sw	at,40(sp)
    }
8003b87c:	0800ee25 	j	8003b894 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE+0xd0>
8003b880:	00000000 	nop
        self.count += 1;
8003b884:	3c018108 	lui	at,0x8108
8003b888:	2424b60c 	addiu	a0,at,-18932
8003b88c:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003b890:	00000000 	nop
    }
8003b894:	8fa20024 	lw	v0,36(sp)
8003b898:	8fa30028 	lw	v1,40(sp)
8003b89c:	8fbf0044 	lw	ra,68(sp)
8003b8a0:	27bd0048 	addiu	sp,sp,72
8003b8a4:	03e00008 	jr	ra
8003b8a8:	00000000 	nop

8003b8ac <_ZN4core4iter8adapters6filter19Filter$LT$I$C$P$GT$3new17he194c09ee979f5ebE>:
    // Used for `SplitWhitespace` and `SplitAsciiWhitespace` `as_str` methods
    pub(crate) iter: I,
    predicate: P,
}
impl<I, P> Filter<I, P> {
    pub(in crate::iter) fn new(iter: I, predicate: P) -> Filter<I, P> {
8003b8ac:	27bdffe8 	addiu	sp,sp,-24
8003b8b0:	afa4000c 	sw	a0,12(sp)
8003b8b4:	afa50010 	sw	a1,16(sp)
        Filter { iter, predicate }
8003b8b8:	afa40004 	sw	a0,4(sp)
8003b8bc:	afa50008 	sw	a1,8(sp)
    }
8003b8c0:	8fa20004 	lw	v0,4(sp)
8003b8c4:	8fa30008 	lw	v1,8(sp)
8003b8c8:	27bd0018 	addiu	sp,sp,24
8003b8cc:	03e00008 	jr	ra
8003b8d0:	00000000 	nop

8003b8d4 <_ZN108_$LT$core..iter..adapters..filter..Filter$LT$I$C$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count17ha76fd5484bcdeddfE>:
    // less readable and also less backwards-compatible to Rust before 1.10.
    //
    // Using the branchless version will also simplify the LLVM byte code, thus
    // leaving more budget for LLVM optimizations.
    #[inline]
    fn count(self) -> usize {
8003b8d4:	27bdffd8 	addiu	sp,sp,-40
8003b8d8:	afbf0024 	sw	ra,36(sp)
8003b8dc:	afa50018 	sw	a1,24(sp)
8003b8e0:	afa40014 	sw	a0,20(sp)
8003b8e4:	afa4001c 	sw	a0,28(sp)
8003b8e8:	afa50020 	sw	a1,32(sp)
        #[inline]
        fn to_usize<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut(T) -> usize {
            move |x| predicate(&x) as usize
        }

        self.iter.map(to_usize(self.predicate)).sum()
8003b8ec:	0c00ee49 	jal	8003b924 <_ZN108_$LT$core..iter..adapters..filter..Filter$LT$I$C$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count8to_usize17h2cbef7784263c681E>
8003b8f0:	00000000 	nop
8003b8f4:	8fa40014 	lw	a0,20(sp)
8003b8f8:	8fa50018 	lw	a1,24(sp)
8003b8fc:	0c00efba 	jal	8003bee8 <_ZN4core4iter6traits8iterator8Iterator3map17h9f304d63dc2cfd50E>
8003b900:	00000000 	nop
8003b904:	00402025 	move	a0,v0
8003b908:	00602825 	move	a1,v1
8003b90c:	0c00effc 	jal	8003bff0 <_ZN4core4iter6traits8iterator8Iterator3sum17hd4cbdc98fd060634E>
8003b910:	00000000 	nop
    }
8003b914:	8fbf0024 	lw	ra,36(sp)
8003b918:	27bd0028 	addiu	sp,sp,40
8003b91c:	03e00008 	jr	ra
8003b920:	00000000 	nop

8003b924 <_ZN108_$LT$core..iter..adapters..filter..Filter$LT$I$C$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count8to_usize17h2cbef7784263c681E>:
        fn to_usize<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut(T) -> usize {
8003b924:	27bdfff8 	addiu	sp,sp,-8
8003b928:	27bd0008 	addiu	sp,sp,8
        }
8003b92c:	03e00008 	jr	ra
8003b930:	00000000 	nop

8003b934 <_ZN108_$LT$core..iter..adapters..filter..Filter$LT$I$C$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count8to_usize28_$u7b$$u7b$closure$u7d$$u7d$17h24b79585006f1664E>:
            move |x| predicate(&x) as usize
8003b934:	27bdffe0 	addiu	sp,sp,-32
8003b938:	afbf001c 	sw	ra,28(sp)
8003b93c:	afa50010 	sw	a1,16(sp)
8003b940:	afa40018 	sw	a0,24(sp)
8003b944:	27a10010 	addiu	at,sp,16
8003b948:	afa10014 	sw	at,20(sp)
8003b94c:	8fa50014 	lw	a1,20(sp)
8003b950:	0c010ece 	jal	80043b38 <_ZN4core3str5count23char_count_general_case28_$u7b$$u7b$closure$u7d$$u7d$17h2bd39cb177afb02cE>
8003b954:	00000000 	nop
8003b958:	8fbf001c 	lw	ra,28(sp)
8003b95c:	27bd0020 	addiu	sp,sp,32
8003b960:	03e00008 	jr	ra
8003b964:	00000000 	nop

8003b968 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h648e941b4c47cec1E>:
    pub(crate) iter: I,
    f: F,
}

impl<I, F> Map<I, F> {
    pub(in crate::iter) fn new(iter: I, f: F) -> Map<I, F> {
8003b968:	27bdffe8 	addiu	sp,sp,-24
8003b96c:	afa4000c 	sw	a0,12(sp)
8003b970:	afa50010 	sw	a1,16(sp)
        Map { iter, f }
8003b974:	afa40004 	sw	a0,4(sp)
8003b978:	afa50008 	sw	a1,8(sp)
    }
8003b97c:	8fa20004 	lw	v0,4(sp)
8003b980:	8fa30008 	lw	v1,8(sp)
8003b984:	27bd0018 	addiu	sp,sp,24
8003b988:	03e00008 	jr	ra
8003b98c:	00000000 	nop

8003b990 <_ZN4core4iter8adapters3map8map_fold17h11f47a437456e247E>:
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("Map").field("iter", &self.iter).finish()
    }
}

fn map_fold<T, B, Acc>(
8003b990:	27bdfff8 	addiu	sp,sp,-8
8003b994:	27bd0008 	addiu	sp,sp,8
    mut f: impl FnMut(T) -> B,
    mut g: impl FnMut(Acc, B) -> Acc,
) -> impl FnMut(Acc, T) -> Acc {
    move |acc, elt| g(acc, f(elt))
}
8003b998:	03e00008 	jr	ra
8003b99c:	00000000 	nop

8003b9a0 <_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h0e22386d052a3b35E>:
    move |acc, elt| g(acc, f(elt))
8003b9a0:	27bdffc8 	addiu	sp,sp,-56
8003b9a4:	afbf0034 	sw	ra,52(sp)
8003b9a8:	afa50014 	sw	a1,20(sp)
8003b9ac:	afa40018 	sw	a0,24(sp)
8003b9b0:	afa40028 	sw	a0,40(sp)
8003b9b4:	afa5002c 	sw	a1,44(sp)
8003b9b8:	afa60030 	sw	a2,48(sp)
8003b9bc:	afa60024 	sw	a2,36(sp)
8003b9c0:	8fa50024 	lw	a1,36(sp)
8003b9c4:	0c00ee4d 	jal	8003b934 <_ZN108_$LT$core..iter..adapters..filter..Filter$LT$I$C$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count8to_usize28_$u7b$$u7b$closure$u7d$$u7d$17h24b79585006f1664E>
8003b9c8:	00000000 	nop
8003b9cc:	8fa50014 	lw	a1,20(sp)
8003b9d0:	8fa40018 	lw	a0,24(sp)
8003b9d4:	afa5001c 	sw	a1,28(sp)
8003b9d8:	afa20020 	sw	v0,32(sp)
8003b9dc:	8fa5001c 	lw	a1,28(sp)
8003b9e0:	8fa60020 	lw	a2,32(sp)
8003b9e4:	0c011b09 	jal	80046c24 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17h91b99a5637de417fE>
8003b9e8:	00000000 	nop
8003b9ec:	8fbf0034 	lw	ra,52(sp)
8003b9f0:	27bd0038 	addiu	sp,sp,56
8003b9f4:	03e00008 	jr	ra
8003b9f8:	00000000 	nop

8003b9fc <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h062a46d4e3bf2665E>:
        R: Try<Output = Acc>,
    {
        self.iter.try_fold(init, map_try_fold(&mut self.f, g))
    }

    fn fold<Acc, G>(self, init: Acc, g: G) -> Acc
8003b9fc:	27bdffd0 	addiu	sp,sp,-48
8003ba00:	afbf002c 	sw	ra,44(sp)
8003ba04:	afa60018 	sw	a2,24(sp)
8003ba08:	afa50014 	sw	a1,20(sp)
8003ba0c:	afa40010 	sw	a0,16(sp)
8003ba10:	afa4001c 	sw	a0,28(sp)
8003ba14:	afa50020 	sw	a1,32(sp)
8003ba18:	afa60024 	sw	a2,36(sp)
    where
        G: FnMut(Acc, Self::Item) -> Acc,
    {
        self.iter.fold(init, map_fold(self.f, g))
8003ba1c:	0c00ee64 	jal	8003b990 <_ZN4core4iter8adapters3map8map_fold17h11f47a437456e247E>
8003ba20:	00000000 	nop
8003ba24:	8fa40010 	lw	a0,16(sp)
8003ba28:	8fa50014 	lw	a1,20(sp)
8003ba2c:	8fa60018 	lw	a2,24(sp)
8003ba30:	0c01213c 	jal	800484f0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE>
8003ba34:	00000000 	nop
    }
8003ba38:	8fbf002c 	lw	ra,44(sp)
8003ba3c:	27bd0030 	addiu	sp,sp,48
8003ba40:	03e00008 	jr	ra
8003ba44:	00000000 	nop

8003ba48 <_ZN4core4iter8adapters3rev12Rev$LT$T$GT$3new17h0540977c63eb4e00E>:
pub struct Rev<T> {
    iter: T,
}

impl<T> Rev<T> {
    pub(in crate::iter) fn new(iter: T) -> Rev<T> {
8003ba48:	27bdfff0 	addiu	sp,sp,-16
8003ba4c:	afa40008 	sw	a0,8(sp)
8003ba50:	afa5000c 	sw	a1,12(sp)
        Rev { iter }
8003ba54:	afa40000 	sw	a0,0(sp)
8003ba58:	afa50004 	sw	a1,4(sp)
    }
8003ba5c:	8fa20000 	lw	v0,0(sp)
8003ba60:	8fa30004 	lw	v1,4(sp)
8003ba64:	27bd0010 	addiu	sp,sp,16
8003ba68:	03e00008 	jr	ra
8003ba6c:	00000000 	nop

8003ba70 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>:
    I: DoubleEndedIterator,
{
    type Item = <I as Iterator>::Item;

    #[inline]
    fn next(&mut self) -> Option<<I as Iterator>::Item> {
8003ba70:	27bdffe8 	addiu	sp,sp,-24
8003ba74:	afbf0014 	sw	ra,20(sp)
8003ba78:	afa40010 	sw	a0,16(sp)
        self.iter.next_back()
8003ba7c:	0c012225 	jal	80048894 <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE>
8003ba80:	00000000 	nop
    }
8003ba84:	8fbf0014 	lw	ra,20(sp)
8003ba88:	27bd0018 	addiu	sp,sp,24
8003ba8c:	03e00008 	jr	ra
8003ba90:	00000000 	nop

8003ba94 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0e7065e67880acdbE>:
    }
}

impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {
    #[inline]
    fn spec_next(&mut self) -> Option<T> {
8003ba94:	27bdffc8 	addiu	sp,sp,-56
8003ba98:	afbf0034 	sw	ra,52(sp)
8003ba9c:	afa40018 	sw	a0,24(sp)
8003baa0:	afa40024 	sw	a0,36(sp)
        if self.start < self.end {
8003baa4:	24810004 	addiu	at,a0,4
8003baa8:	afa4002c 	sw	a0,44(sp)
8003baac:	afa10030 	sw	at,48(sp)
                #[inline(always)]
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
8003bab0:	8c810000 	lw	at,0(a0)
8003bab4:	8c820004 	lw	v0,4(a0)
8003bab8:	0022082b 	sltu	at,at,v0
8003babc:	14200006 	bnez	at,8003bad8 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0e7065e67880acdbE+0x44>
8003bac0:	00000000 	nop
8003bac4:	0800eeb3 	j	8003bacc <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0e7065e67880acdbE+0x38>
8003bac8:	00000000 	nop
            let old = self.start;
            // SAFETY: just checked precondition
            self.start = unsafe { Step::forward_unchecked(old, 1) };
            Some(old)
        } else {
            None
8003bacc:	afa0001c 	sw	zero,28(sp)
        if self.start < self.end {
8003bad0:	0800eec7 	j	8003bb1c <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0e7065e67880acdbE+0x88>
8003bad4:	00000000 	nop
            let old = self.start;
8003bad8:	8fa10018 	lw	at,24(sp)
8003badc:	8c240000 	lw	a0,0(at)
8003bae0:	afa40014 	sw	a0,20(sp)
8003bae4:	afa40028 	sw	a0,40(sp)
8003bae8:	24050001 	li	a1,1
8003baec:	afa50010 	sw	a1,16(sp)
            self.start = unsafe { Step::forward_unchecked(old, 1) };
8003baf0:	0c011af5 	jal	80046bd4 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17heab11d2d1c4d0452E>
8003baf4:	00000000 	nop
8003baf8:	8fa40018 	lw	a0,24(sp)
8003bafc:	8fa10010 	lw	at,16(sp)
8003bb00:	00401825 	move	v1,v0
8003bb04:	8fa20014 	lw	v0,20(sp)
8003bb08:	ac830000 	sw	v1,0(a0)
            Some(old)
8003bb0c:	afa20020 	sw	v0,32(sp)
8003bb10:	afa1001c 	sw	at,28(sp)
        if self.start < self.end {
8003bb14:	0800eec7 	j	8003bb1c <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0e7065e67880acdbE+0x88>
8003bb18:	00000000 	nop
        }
    }
8003bb1c:	8fa2001c 	lw	v0,28(sp)
8003bb20:	8fa30020 	lw	v1,32(sp)
8003bb24:	8fbf0034 	lw	ra,52(sp)
8003bb28:	27bd0038 	addiu	sp,sp,56
8003bb2c:	03e00008 	jr	ra
8003bb30:	00000000 	nop

8003bb34 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h85ec8b075ea6c763E>:
    fn spec_next(&mut self) -> Option<T> {
8003bb34:	27bdffc8 	addiu	sp,sp,-56
8003bb38:	afbf0034 	sw	ra,52(sp)
8003bb3c:	afa4001c 	sw	a0,28(sp)
8003bb40:	afa40024 	sw	a0,36(sp)
        if self.start < self.end {
8003bb44:	24810001 	addiu	at,a0,1
8003bb48:	afa4002c 	sw	a0,44(sp)
8003bb4c:	afa10030 	sw	at,48(sp)
8003bb50:	90810000 	lbu	at,0(a0)
8003bb54:	90820001 	lbu	v0,1(a0)
8003bb58:	0022082b 	sltu	at,at,v0
8003bb5c:	14200007 	bnez	at,8003bb7c <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h85ec8b075ea6c763E+0x48>
8003bb60:	00000000 	nop
8003bb64:	0800eedb 	j	8003bb6c <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h85ec8b075ea6c763E+0x38>
8003bb68:	00000000 	nop
8003bb6c:	24010000 	li	at,0
            None
8003bb70:	a3a00022 	sb	zero,34(sp)
        if self.start < self.end {
8003bb74:	0800eef0 	j	8003bbc0 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h85ec8b075ea6c763E+0x8c>
8003bb78:	00000000 	nop
            let old = self.start;
8003bb7c:	8fa1001c 	lw	at,28(sp)
8003bb80:	90240000 	lbu	a0,0(at)
8003bb84:	afa40018 	sw	a0,24(sp)
8003bb88:	a3a4002b 	sb	a0,43(sp)
8003bb8c:	24050001 	li	a1,1
8003bb90:	afa50014 	sw	a1,20(sp)
            self.start = unsafe { Step::forward_unchecked(old, 1) };
8003bb94:	0c011aec 	jal	80046bb0 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h690f9a91247c04f4E>
8003bb98:	00000000 	nop
8003bb9c:	8fa4001c 	lw	a0,28(sp)
8003bba0:	8fa10014 	lw	at,20(sp)
8003bba4:	00401825 	move	v1,v0
8003bba8:	8fa20018 	lw	v0,24(sp)
8003bbac:	a0830000 	sb	v1,0(a0)
            Some(old)
8003bbb0:	a3a20023 	sb	v0,35(sp)
8003bbb4:	a3a10022 	sb	at,34(sp)
        if self.start < self.end {
8003bbb8:	0800eef0 	j	8003bbc0 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h85ec8b075ea6c763E+0x8c>
8003bbbc:	00000000 	nop
    }
8003bbc0:	93a20022 	lbu	v0,34(sp)
8003bbc4:	93a30023 	lbu	v1,35(sp)
8003bbc8:	8fbf0034 	lw	ra,52(sp)
8003bbcc:	27bd0038 	addiu	sp,sp,56
8003bbd0:	03e00008 	jr	ra
8003bbd4:	00000000 	nop

8003bbd8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h452dab29ddeb92e6E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<A: Step> Iterator for ops::Range<A> {
    type Item = A;

    #[inline]
    fn next(&mut self) -> Option<A> {
8003bbd8:	27bdffe8 	addiu	sp,sp,-24
8003bbdc:	afbf0014 	sw	ra,20(sp)
8003bbe0:	afa40010 	sw	a0,16(sp)
        self.spec_next()
8003bbe4:	0c00eecd 	jal	8003bb34 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h85ec8b075ea6c763E>
8003bbe8:	00000000 	nop
    }
8003bbec:	8fbf0014 	lw	ra,20(sp)
8003bbf0:	27bd0018 	addiu	sp,sp,24
8003bbf4:	03e00008 	jr	ra
8003bbf8:	00000000 	nop

8003bbfc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h77596a36d38db716E>:
    fn next(&mut self) -> Option<A> {
8003bbfc:	27bdffe8 	addiu	sp,sp,-24
8003bc00:	afbf0014 	sw	ra,20(sp)
8003bc04:	afa40010 	sw	a0,16(sp)
        self.spec_next()
8003bc08:	0c00eea5 	jal	8003ba94 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0e7065e67880acdbE>
8003bc0c:	00000000 	nop
    }
8003bc10:	8fbf0014 	lw	ra,20(sp)
8003bc14:	27bd0018 	addiu	sp,sp,24
8003bc18:	03e00008 	jr	ra
8003bc1c:	00000000 	nop

8003bc20 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h08672f7f2dd54636E>:
impl<I: Iterator> IntoIterator for I {
    type Item = I::Item;
    type IntoIter = I;

    #[inline]
    fn into_iter(self) -> I {
8003bc20:	27bdfff8 	addiu	sp,sp,-8
8003bc24:	00a01825 	move	v1,a1
8003bc28:	00801025 	move	v0,a0
8003bc2c:	afa20000 	sw	v0,0(sp)
8003bc30:	afa30004 	sw	v1,4(sp)
8003bc34:	27bd0008 	addiu	sp,sp,8
        self
    }
8003bc38:	03e00008 	jr	ra
8003bc3c:	00000000 	nop

8003bc40 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h527644712bfef04bE>:
    fn into_iter(self) -> I {
8003bc40:	00801025 	move	v0,a0
        self
8003bc44:	8ca10008 	lw	at,8(a1)
8003bc48:	ac810008 	sw	at,8(a0)
8003bc4c:	8ca10004 	lw	at,4(a1)
8003bc50:	ac810004 	sw	at,4(a0)
8003bc54:	8ca10000 	lw	at,0(a1)
8003bc58:	ac810000 	sw	at,0(a0)
    }
8003bc5c:	03e00008 	jr	ra
8003bc60:	00000000 	nop

8003bc64 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7649a48ed6f3f9b5E>:
    fn into_iter(self) -> I {
8003bc64:	00801025 	move	v0,a0
        self
8003bc68:	8ca10008 	lw	at,8(a1)
8003bc6c:	ac810008 	sw	at,8(a0)
8003bc70:	8ca10004 	lw	at,4(a1)
8003bc74:	ac810004 	sw	at,4(a0)
8003bc78:	8ca10000 	lw	at,0(a1)
8003bc7c:	ac810000 	sw	at,0(a0)
    }
8003bc80:	03e00008 	jr	ra
8003bc84:	00000000 	nop

8003bc88 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h995e6662883fadcfE>:
    fn into_iter(self) -> I {
8003bc88:	00801025 	move	v0,a0
        self
8003bc8c:	8ca10008 	lw	at,8(a1)
8003bc90:	ac810008 	sw	at,8(a0)
8003bc94:	8ca10004 	lw	at,4(a1)
8003bc98:	ac810004 	sw	at,4(a0)
8003bc9c:	8ca10000 	lw	at,0(a1)
8003bca0:	ac810000 	sw	at,0(a0)
    }
8003bca4:	03e00008 	jr	ra
8003bca8:	00000000 	nop

8003bcac <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hab92d4a309fc1853E>:
    fn into_iter(self) -> I {
8003bcac:	00801025 	move	v0,a0
        self
8003bcb0:	8ca10008 	lw	at,8(a1)
8003bcb4:	ac810008 	sw	at,8(a0)
8003bcb8:	8ca10004 	lw	at,4(a1)
8003bcbc:	ac810004 	sw	at,4(a0)
8003bcc0:	8ca10000 	lw	at,0(a1)
8003bcc4:	ac810000 	sw	at,0(a0)
    }
8003bcc8:	03e00008 	jr	ra
8003bccc:	00000000 	nop

8003bcd0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc1247a7b3b77f09fE>:
    fn into_iter(self) -> I {
8003bcd0:	00801025 	move	v0,a0
        self
8003bcd4:	8ca10008 	lw	at,8(a1)
8003bcd8:	ac810008 	sw	at,8(a0)
8003bcdc:	8ca10004 	lw	at,4(a1)
8003bce0:	ac810004 	sw	at,4(a0)
8003bce4:	8ca10000 	lw	at,0(a1)
8003bce8:	ac810000 	sw	at,0(a0)
    }
8003bcec:	03e00008 	jr	ra
8003bcf0:	00000000 	nop

8003bcf4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>:
    fn into_iter(self) -> I {
8003bcf4:	27bdfff8 	addiu	sp,sp,-8
8003bcf8:	00a01825 	move	v1,a1
8003bcfc:	00801025 	move	v0,a0
8003bd00:	afa20000 	sw	v0,0(sp)
8003bd04:	afa30004 	sw	v1,4(sp)
8003bd08:	27bd0008 	addiu	sp,sp,8
    }
8003bd0c:	03e00008 	jr	ra
8003bd10:	00000000 	nop

8003bd14 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17heb520da55e95499cE>:
    fn into_iter(self) -> I {
8003bd14:	27bdfff8 	addiu	sp,sp,-8
8003bd18:	00a01825 	move	v1,a1
8003bd1c:	00801025 	move	v0,a0
8003bd20:	afa20000 	sw	v0,0(sp)
8003bd24:	afa30004 	sw	v1,4(sp)
8003bd28:	27bd0008 	addiu	sp,sp,8
    }
8003bd2c:	03e00008 	jr	ra
8003bd30:	00000000 	nop

8003bd34 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E>:
    /// assert_eq!(iter.advance_by(100), Err(NonZero::new(99).unwrap())); // only `&4` was skipped
    /// ```
    #[inline]
    #[unstable(feature = "iter_advance_by", reason = "recently added", issue = "77404")]
    #[rustc_do_not_const_check]
    fn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {
8003bd34:	27bdffa8 	addiu	sp,sp,-88
8003bd38:	afbf0054 	sw	ra,84(sp)
8003bd3c:	afa5001c 	sw	a1,28(sp)
8003bd40:	afa40020 	sw	a0,32(sp)
8003bd44:	afa40048 	sw	a0,72(sp)
8003bd48:	afa5004c 	sw	a1,76(sp)
        for i in 0..n {
8003bd4c:	afa00028 	sw	zero,40(sp)
8003bd50:	afa5002c 	sw	a1,44(sp)
8003bd54:	8fa40028 	lw	a0,40(sp)
8003bd58:	8fa5002c 	lw	a1,44(sp)
8003bd5c:	0c00ef08 	jal	8003bc20 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h08672f7f2dd54636E>
8003bd60:	00000000 	nop
8003bd64:	afa20030 	sw	v0,48(sp)
8003bd68:	afa30034 	sw	v1,52(sp)
8003bd6c:	0800ef5d 	j	8003bd74 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0x40>
8003bd70:	00000000 	nop
8003bd74:	27a40030 	addiu	a0,sp,48
8003bd78:	0c00eeff 	jal	8003bbfc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h77596a36d38db716E>
8003bd7c:	00000000 	nop
8003bd80:	afa20038 	sw	v0,56(sp)
8003bd84:	afa3003c 	sw	v1,60(sp)
8003bd88:	8fa10038 	lw	at,56(sp)
8003bd8c:	14200006 	bnez	at,8003bda8 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0x74>
8003bd90:	00000000 	nop
8003bd94:	0800ef67 	j	8003bd9c <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0x68>
8003bd98:	00000000 	nop
            if self.next().is_none() {
                // SAFETY: `i` is always less than `n`.
                return Err(unsafe { NonZero::new_unchecked(n - i) });
            }
        }
        Ok(())
8003bd9c:	afa00024 	sw	zero,36(sp)
    }
8003bda0:	0800ef79 	j	8003bde4 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0xb0>
8003bda4:	00000000 	nop
        for i in 0..n {
8003bda8:	8fa40020 	lw	a0,32(sp)
8003bdac:	8fa1003c 	lw	at,60(sp)
8003bdb0:	afa10018 	sw	at,24(sp)
8003bdb4:	afa10050 	sw	at,80(sp)
            if self.next().is_none() {
8003bdb8:	0c010f0e 	jal	80043c38 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE>
8003bdbc:	00000000 	nop
8003bdc0:	afa20040 	sw	v0,64(sp)
8003bdc4:	afa30044 	sw	v1,68(sp)
8003bdc8:	27a40040 	addiu	a0,sp,64
8003bdcc:	0c00f044 	jal	8003c110 <_ZN4core6option15Option$LT$T$GT$7is_none17h12453519e8986051E>
8003bdd0:	00000000 	nop
8003bdd4:	1440000a 	bnez	v0,8003be00 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0xcc>
8003bdd8:	00000000 	nop
8003bddc:	0800ef7e 	j	8003bdf8 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0xc4>
8003bde0:	00000000 	nop
    }
8003bde4:	8fa20024 	lw	v0,36(sp)
8003bde8:	8fbf0054 	lw	ra,84(sp)
8003bdec:	27bd0058 	addiu	sp,sp,88
8003bdf0:	03e00008 	jr	ra
8003bdf4:	00000000 	nop
            if self.next().is_none() {
8003bdf8:	0800ef5d 	j	8003bd74 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0x40>
8003bdfc:	00000000 	nop
                return Err(unsafe { NonZero::new_unchecked(n - i) });
8003be00:	8fa1001c 	lw	at,28(sp)
8003be04:	8fa20018 	lw	v0,24(sp)
8003be08:	00221823 	subu	v1,at,v0
8003be0c:	afa30014 	sw	v1,20(sp)
8003be10:	0022082b 	sltu	at,at,v0
8003be14:	14200009 	bnez	at,8003be3c <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0x108>
8003be18:	00000000 	nop
8003be1c:	0800ef89 	j	8003be24 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0xf0>
8003be20:	00000000 	nop
8003be24:	8fa40014 	lw	a0,20(sp)
8003be28:	0c00e3fa 	jal	80038fe8 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked17ha183bd3a225a1179E>
8003be2c:	00000000 	nop
8003be30:	afa20024 	sw	v0,36(sp)
    }
8003be34:	0800ef79 	j	8003bde4 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E+0xb0>
8003be38:	00000000 	nop
                return Err(unsafe { NonZero::new_unchecked(n - i) });
8003be3c:	3c018108 	lui	at,0x8108
8003be40:	2424b698 	addiu	a0,at,-18792
8003be44:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003be48:	00000000 	nop

8003be4c <_ZN4core4iter6traits8iterator8Iterator3nth17h949acbaf33606195E>:
    /// assert_eq!(a.iter().nth(10), None);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_do_not_const_check]
    fn nth(&mut self, n: usize) -> Option<Self::Item> {
8003be4c:	27bdffd0 	addiu	sp,sp,-48
8003be50:	afbf002c 	sw	ra,44(sp)
8003be54:	afa40010 	sw	a0,16(sp)
        self.advance_by(n).ok()?;
8003be58:	afa40024 	sw	a0,36(sp)
8003be5c:	afa50028 	sw	a1,40(sp)
8003be60:	0c00ef4d 	jal	8003bd34 <_ZN4core4iter6traits8iterator8Iterator10advance_by17h08369bc15a014b38E>
8003be64:	00000000 	nop
8003be68:	00402025 	move	a0,v0
8003be6c:	0c00f491 	jal	8003d244 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E>
8003be70:	00000000 	nop
8003be74:	00402025 	move	a0,v0
8003be78:	0c00f1ec 	jal	8003c7b0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h4ffea4232db24cdcE>
8003be7c:	00000000 	nop
8003be80:	a3a20023 	sb	v0,35(sp)
8003be84:	93a10023 	lbu	at,35(sp)
8003be88:	30210001 	andi	at,at,0x1
8003be8c:	1420000a 	bnez	at,8003beb8 <_ZN4core4iter6traits8iterator8Iterator3nth17h949acbaf33606195E+0x6c>
8003be90:	00000000 	nop
8003be94:	0800efa7 	j	8003be9c <_ZN4core4iter6traits8iterator8Iterator3nth17h949acbaf33606195E+0x50>
8003be98:	00000000 	nop
        self.next()
8003be9c:	8fa40010 	lw	a0,16(sp)
8003bea0:	0c010f0e 	jal	80043c38 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE>
8003bea4:	00000000 	nop
8003bea8:	afa20018 	sw	v0,24(sp)
8003beac:	afa3001c 	sw	v1,28(sp)
8003beb0:	0800efb4 	j	8003bed0 <_ZN4core4iter6traits8iterator8Iterator3nth17h949acbaf33606195E+0x84>
8003beb4:	00000000 	nop
        self.advance_by(n).ok()?;
8003beb8:	0c00f243 	jal	8003c90c <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h766c7ebb6933a2baE>
8003bebc:	00000000 	nop
8003bec0:	afa20018 	sw	v0,24(sp)
8003bec4:	afa3001c 	sw	v1,28(sp)
8003bec8:	0800efb4 	j	8003bed0 <_ZN4core4iter6traits8iterator8Iterator3nth17h949acbaf33606195E+0x84>
8003becc:	00000000 	nop
    }
8003bed0:	8fa20018 	lw	v0,24(sp)
8003bed4:	8fa3001c 	lw	v1,28(sp)
8003bed8:	8fbf002c 	lw	ra,44(sp)
8003bedc:	27bd0030 	addiu	sp,sp,48
8003bee0:	03e00008 	jr	ra
8003bee4:	00000000 	nop

8003bee8 <_ZN4core4iter6traits8iterator8Iterator3map17h9f304d63dc2cfd50E>:
    /// ```
    #[rustc_diagnostic_item = "IteratorMap"]
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_do_not_const_check]
    fn map<B, F>(self, f: F) -> Map<Self, F>
8003bee8:	27bdffe0 	addiu	sp,sp,-32
8003beec:	afbf001c 	sw	ra,28(sp)
8003bef0:	afa40010 	sw	a0,16(sp)
8003bef4:	afa50014 	sw	a1,20(sp)
    where
        Self: Sized,
        F: FnMut(Self::Item) -> B,
    {
        Map::new(self, f)
8003bef8:	0c00ee5a 	jal	8003b968 <_ZN4core4iter8adapters3map16Map$LT$I$C$F$GT$3new17h648e941b4c47cec1E>
8003befc:	00000000 	nop
    }
8003bf00:	8fbf001c 	lw	ra,28(sp)
8003bf04:	27bd0020 	addiu	sp,sp,32
8003bf08:	03e00008 	jr	ra
8003bf0c:	00000000 	nop

8003bf10 <_ZN4core4iter6traits8iterator8Iterator6filter17h4fb980de80130199E>:
    ///
    /// Note that `iter.filter(f).next()` is equivalent to `iter.find(f)`.
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_do_not_const_check]
    fn filter<P>(self, predicate: P) -> Filter<Self, P>
8003bf10:	27bdffe0 	addiu	sp,sp,-32
8003bf14:	afbf001c 	sw	ra,28(sp)
8003bf18:	afa40010 	sw	a0,16(sp)
8003bf1c:	afa50014 	sw	a1,20(sp)
    where
        Self: Sized,
        P: FnMut(&Self::Item) -> bool,
    {
        Filter::new(self, predicate)
8003bf20:	0c00ee2b 	jal	8003b8ac <_ZN4core4iter8adapters6filter19Filter$LT$I$C$P$GT$3new17he194c09ee979f5ebE>
8003bf24:	00000000 	nop
    }
8003bf28:	8fbf001c 	lw	ra,28(sp)
8003bf2c:	27bd0020 	addiu	sp,sp,32
8003bf30:	03e00008 	jr	ra
8003bf34:	00000000 	nop

8003bf38 <_ZN4core4iter6traits8iterator8Iterator9enumerate17h177bb510e964e1c9E>:
    /// assert_eq!(iter.next(), None);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_do_not_const_check]
    fn enumerate(self) -> Enumerate<Self>
8003bf38:	27bdffe0 	addiu	sp,sp,-32
8003bf3c:	afbf001c 	sw	ra,28(sp)
8003bf40:	00800825 	move	at,a0
8003bf44:	afa10010 	sw	at,16(sp)
8003bf48:	afa50014 	sw	a1,20(sp)
8003bf4c:	afa60018 	sw	a2,24(sp)
    where
        Self: Sized,
    {
        Enumerate::new(self)
8003bf50:	0c00edad 	jal	8003b6b4 <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h517df8d8eacec18dE>
8003bf54:	00000000 	nop
8003bf58:	8fa20010 	lw	v0,16(sp)
    }
8003bf5c:	8fbf001c 	lw	ra,28(sp)
8003bf60:	27bd0020 	addiu	sp,sp,32
8003bf64:	03e00008 	jr	ra
8003bf68:	00000000 	nop

8003bf6c <_ZN4core4iter6traits8iterator8Iterator9enumerate17hc8825050a5fd6479E>:
    fn enumerate(self) -> Enumerate<Self>
8003bf6c:	27bdffe0 	addiu	sp,sp,-32
8003bf70:	afbf001c 	sw	ra,28(sp)
8003bf74:	00800825 	move	at,a0
8003bf78:	afa10010 	sw	at,16(sp)
8003bf7c:	afa50014 	sw	a1,20(sp)
8003bf80:	afa60018 	sw	a2,24(sp)
        Enumerate::new(self)
8003bf84:	0c00eda3 	jal	8003b68c <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h088319821c4ff07bE>
8003bf88:	00000000 	nop
8003bf8c:	8fa20010 	lw	v0,16(sp)
    }
8003bf90:	8fbf001c 	lw	ra,28(sp)
8003bf94:	27bd0020 	addiu	sp,sp,32
8003bf98:	03e00008 	jr	ra
8003bf9c:	00000000 	nop

8003bfa0 <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>:
    /// ```
    #[inline]
    #[doc(alias = "reverse")]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_do_not_const_check]
    fn rev(self) -> Rev<Self>
8003bfa0:	27bdffe0 	addiu	sp,sp,-32
8003bfa4:	afbf001c 	sw	ra,28(sp)
8003bfa8:	afa40014 	sw	a0,20(sp)
8003bfac:	afa50018 	sw	a1,24(sp)
    where
        Self: Sized + DoubleEndedIterator,
    {
        Rev::new(self)
8003bfb0:	0c00ee92 	jal	8003ba48 <_ZN4core4iter8adapters3rev12Rev$LT$T$GT$3new17h0540977c63eb4e00E>
8003bfb4:	00000000 	nop
    }
8003bfb8:	8fbf001c 	lw	ra,28(sp)
8003bfbc:	27bd0020 	addiu	sp,sp,32
8003bfc0:	03e00008 	jr	ra
8003bfc4:	00000000 	nop

8003bfc8 <_ZN4core4iter6traits8iterator8Iterator6cloned17hf35468160e5bd29eE>:
    /// let faster: Vec<_> = a.iter().filter(|s| s.len() == 1).cloned().collect();
    /// assert_eq!(&[vec![23]], &faster[..]);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_do_not_const_check]
    fn cloned<'a, T: 'a>(self) -> Cloned<Self>
8003bfc8:	27bdffe0 	addiu	sp,sp,-32
8003bfcc:	afbf001c 	sw	ra,28(sp)
8003bfd0:	afa40014 	sw	a0,20(sp)
8003bfd4:	afa50018 	sw	a1,24(sp)
    where
        Self: Sized + Iterator<Item = &'a T>,
        T: Clone,
    {
        Cloned::new(self)
8003bfd8:	0c00ed8d 	jal	8003b634 <_ZN4core4iter8adapters6cloned15Cloned$LT$I$GT$3new17h9502bc74172f8b49E>
8003bfdc:	00000000 	nop
    }
8003bfe0:	8fbf001c 	lw	ra,28(sp)
8003bfe4:	27bd0020 	addiu	sp,sp,32
8003bfe8:	03e00008 	jr	ra
8003bfec:	00000000 	nop

8003bff0 <_ZN4core4iter6traits8iterator8Iterator3sum17hd4cbdc98fd060634E>:
    ///
    /// assert_eq!(sum, 6);
    /// ```
    #[stable(feature = "iter_arith", since = "1.11.0")]
    #[rustc_do_not_const_check]
    fn sum<S>(self) -> S
8003bff0:	27bdffe0 	addiu	sp,sp,-32
8003bff4:	afbf001c 	sw	ra,28(sp)
8003bff8:	afa40014 	sw	a0,20(sp)
8003bffc:	afa50018 	sw	a1,24(sp)
    where
        Self: Sized,
        S: Sum<Self::Item>,
    {
        Sum::sum(self)
8003c000:	0c011afe 	jal	80046bf8 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum17h788a6b4423308929E>
8003c004:	00000000 	nop
    }
8003c008:	8fbf001c 	lw	ra,28(sp)
8003c00c:	27bd0020 	addiu	sp,sp,32
8003c010:	03e00008 	jr	ra
8003c014:	00000000 	nop

8003c018 <_ZN4core6option15Option$LT$T$GT$7is_some17h7e9a641f7c322dbcE>:
    pub const fn is_some(&self) -> bool {
8003c018:	27bdfff8 	addiu	sp,sp,-8
8003c01c:	afa40004 	sw	a0,4(sp)
        matches!(*self, Some(_))
8003c020:	8c810000 	lw	at,0(a0)
8003c024:	24020001 	li	v0,1
8003c028:	14220007 	bne	at,v0,8003c048 <_ZN4core6option15Option$LT$T$GT$7is_some17h7e9a641f7c322dbcE+0x30>
8003c02c:	00000000 	nop
8003c030:	0800f00e 	j	8003c038 <_ZN4core6option15Option$LT$T$GT$7is_some17h7e9a641f7c322dbcE+0x20>
8003c034:	00000000 	nop
8003c038:	24010001 	li	at,1
8003c03c:	a3a10003 	sb	at,3(sp)
8003c040:	0800f016 	j	8003c058 <_ZN4core6option15Option$LT$T$GT$7is_some17h7e9a641f7c322dbcE+0x40>
8003c044:	00000000 	nop
8003c048:	24010000 	li	at,0
8003c04c:	a3a00003 	sb	zero,3(sp)
8003c050:	0800f016 	j	8003c058 <_ZN4core6option15Option$LT$T$GT$7is_some17h7e9a641f7c322dbcE+0x40>
8003c054:	00000000 	nop
    }
8003c058:	93a10003 	lbu	at,3(sp)
8003c05c:	30220001 	andi	v0,at,0x1
8003c060:	27bd0008 	addiu	sp,sp,8
8003c064:	03e00008 	jr	ra
8003c068:	00000000 	nop

8003c06c <_ZN4core6option15Option$LT$T$GT$7is_some17h9a03cbe71de1bb10E>:
    pub const fn is_some(&self) -> bool {
8003c06c:	27bdfff8 	addiu	sp,sp,-8
8003c070:	afa40004 	sw	a0,4(sp)
        matches!(*self, Some(_))
8003c074:	8c810004 	lw	at,4(a0)
8003c078:	3c020011 	lui	v0,0x11
8003c07c:	10220007 	beq	at,v0,8003c09c <_ZN4core6option15Option$LT$T$GT$7is_some17h9a03cbe71de1bb10E+0x30>
8003c080:	00000000 	nop
8003c084:	0800f023 	j	8003c08c <_ZN4core6option15Option$LT$T$GT$7is_some17h9a03cbe71de1bb10E+0x20>
8003c088:	00000000 	nop
8003c08c:	24010001 	li	at,1
8003c090:	a3a10003 	sb	at,3(sp)
8003c094:	0800f02b 	j	8003c0ac <_ZN4core6option15Option$LT$T$GT$7is_some17h9a03cbe71de1bb10E+0x40>
8003c098:	00000000 	nop
8003c09c:	24010000 	li	at,0
8003c0a0:	a3a00003 	sb	zero,3(sp)
8003c0a4:	0800f02b 	j	8003c0ac <_ZN4core6option15Option$LT$T$GT$7is_some17h9a03cbe71de1bb10E+0x40>
8003c0a8:	00000000 	nop
    }
8003c0ac:	93a10003 	lbu	at,3(sp)
8003c0b0:	30220001 	andi	v0,at,0x1
8003c0b4:	27bd0008 	addiu	sp,sp,8
8003c0b8:	03e00008 	jr	ra
8003c0bc:	00000000 	nop

8003c0c0 <_ZN4core6option15Option$LT$T$GT$7is_some17hf03c679c9733e5acE>:
    pub const fn is_some(&self) -> bool {
8003c0c0:	27bdfff8 	addiu	sp,sp,-8
8003c0c4:	afa40004 	sw	a0,4(sp)
        matches!(*self, Some(_))
8003c0c8:	8c810000 	lw	at,0(a0)
8003c0cc:	10200007 	beqz	at,8003c0ec <_ZN4core6option15Option$LT$T$GT$7is_some17hf03c679c9733e5acE+0x2c>
8003c0d0:	00000000 	nop
8003c0d4:	0800f037 	j	8003c0dc <_ZN4core6option15Option$LT$T$GT$7is_some17hf03c679c9733e5acE+0x1c>
8003c0d8:	00000000 	nop
8003c0dc:	24010001 	li	at,1
8003c0e0:	a3a10003 	sb	at,3(sp)
8003c0e4:	0800f03f 	j	8003c0fc <_ZN4core6option15Option$LT$T$GT$7is_some17hf03c679c9733e5acE+0x3c>
8003c0e8:	00000000 	nop
8003c0ec:	24010000 	li	at,0
8003c0f0:	a3a00003 	sb	zero,3(sp)
8003c0f4:	0800f03f 	j	8003c0fc <_ZN4core6option15Option$LT$T$GT$7is_some17hf03c679c9733e5acE+0x3c>
8003c0f8:	00000000 	nop
    }
8003c0fc:	93a10003 	lbu	at,3(sp)
8003c100:	30220001 	andi	v0,at,0x1
8003c104:	27bd0008 	addiu	sp,sp,8
8003c108:	03e00008 	jr	ra
8003c10c:	00000000 	nop

8003c110 <_ZN4core6option15Option$LT$T$GT$7is_none17h12453519e8986051E>:
    pub const fn is_none(&self) -> bool {
8003c110:	27bdffe8 	addiu	sp,sp,-24
8003c114:	afbf0014 	sw	ra,20(sp)
8003c118:	afa40010 	sw	a0,16(sp)
        !self.is_some()
8003c11c:	0c00f01b 	jal	8003c06c <_ZN4core6option15Option$LT$T$GT$7is_some17h9a03cbe71de1bb10E>
8003c120:	00000000 	nop
8003c124:	38420001 	xori	v0,v0,0x1
    }
8003c128:	8fbf0014 	lw	ra,20(sp)
8003c12c:	27bd0018 	addiu	sp,sp,24
8003c130:	03e00008 	jr	ra
8003c134:	00000000 	nop

8003c138 <_ZN4core6option15Option$LT$T$GT$7is_none17h2a21bc401af51c77E>:
    pub const fn is_none(&self) -> bool {
8003c138:	27bdffe8 	addiu	sp,sp,-24
8003c13c:	afbf0014 	sw	ra,20(sp)
8003c140:	afa40010 	sw	a0,16(sp)
        !self.is_some()
8003c144:	0c00f006 	jal	8003c018 <_ZN4core6option15Option$LT$T$GT$7is_some17h7e9a641f7c322dbcE>
8003c148:	00000000 	nop
8003c14c:	38420001 	xori	v0,v0,0x1
    }
8003c150:	8fbf0014 	lw	ra,20(sp)
8003c154:	27bd0018 	addiu	sp,sp,24
8003c158:	03e00008 	jr	ra
8003c15c:	00000000 	nop

8003c160 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E>:
    pub fn unwrap_or(self, default: T) -> T {
8003c160:	27bdffd0 	addiu	sp,sp,-48
8003c164:	afa70004 	sw	a3,4(sp)
8003c168:	afa60008 	sw	a2,8(sp)
8003c16c:	afa4000c 	sw	a0,12(sp)
8003c170:	afa50010 	sw	a1,16(sp)
8003c174:	afa60020 	sw	a2,32(sp)
8003c178:	afa70024 	sw	a3,36(sp)
8003c17c:	24010000 	li	at,0
        match self {
8003c180:	a3a0001f 	sb	zero,31(sp)
8003c184:	24010001 	li	at,1
8003c188:	a3a1001f 	sb	at,31(sp)
8003c18c:	8fa1000c 	lw	at,12(sp)
8003c190:	1420000b 	bnez	at,8003c1c0 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E+0x60>
8003c194:	00000000 	nop
8003c198:	0800f068 	j	8003c1a0 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E+0x40>
8003c19c:	00000000 	nop
8003c1a0:	8fa10004 	lw	at,4(sp)
8003c1a4:	8fa20008 	lw	v0,8(sp)
8003c1a8:	24030000 	li	v1,0
            None => default,
8003c1ac:	a3a0001f 	sb	zero,31(sp)
8003c1b0:	afa20014 	sw	v0,20(sp)
8003c1b4:	afa10018 	sw	at,24(sp)
8003c1b8:	0800f078 	j	8003c1e0 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E+0x80>
8003c1bc:	00000000 	nop
            Some(x) => x,
8003c1c0:	8fa2000c 	lw	v0,12(sp)
8003c1c4:	8fa10010 	lw	at,16(sp)
8003c1c8:	afa20028 	sw	v0,40(sp)
8003c1cc:	afa1002c 	sw	at,44(sp)
8003c1d0:	afa20014 	sw	v0,20(sp)
8003c1d4:	afa10018 	sw	at,24(sp)
8003c1d8:	0800f078 	j	8003c1e0 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E+0x80>
8003c1dc:	00000000 	nop
    }
8003c1e0:	93a1001f 	lbu	at,31(sp)
8003c1e4:	30210001 	andi	at,at,0x1
8003c1e8:	14200008 	bnez	at,8003c20c <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E+0xac>
8003c1ec:	00000000 	nop
8003c1f0:	0800f07e 	j	8003c1f8 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E+0x98>
8003c1f4:	00000000 	nop
8003c1f8:	8fa20014 	lw	v0,20(sp)
8003c1fc:	8fa30018 	lw	v1,24(sp)
8003c200:	27bd0030 	addiu	sp,sp,48
8003c204:	03e00008 	jr	ra
8003c208:	00000000 	nop
8003c20c:	0800f07e 	j	8003c1f8 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E+0x98>
8003c210:	00000000 	nop

8003c214 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE>:
    pub fn unwrap_or(self, default: T) -> T {
8003c214:	27bdffe0 	addiu	sp,sp,-32
8003c218:	afa60004 	sw	a2,4(sp)
8003c21c:	afa40008 	sw	a0,8(sp)
8003c220:	afa5000c 	sw	a1,12(sp)
8003c224:	afa60018 	sw	a2,24(sp)
8003c228:	24010000 	li	at,0
        match self {
8003c22c:	a3a00017 	sb	zero,23(sp)
8003c230:	24010001 	li	at,1
8003c234:	a3a10017 	sb	at,23(sp)
8003c238:	8fa10008 	lw	at,8(sp)
8003c23c:	14200009 	bnez	at,8003c264 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE+0x50>
8003c240:	00000000 	nop
8003c244:	0800f093 	j	8003c24c <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE+0x38>
8003c248:	00000000 	nop
8003c24c:	8fa10004 	lw	at,4(sp)
8003c250:	24020000 	li	v0,0
            None => default,
8003c254:	a3a00017 	sb	zero,23(sp)
8003c258:	afa10010 	sw	at,16(sp)
8003c25c:	0800f09e 	j	8003c278 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE+0x64>
8003c260:	00000000 	nop
            Some(x) => x,
8003c264:	8fa1000c 	lw	at,12(sp)
8003c268:	afa1001c 	sw	at,28(sp)
8003c26c:	afa10010 	sw	at,16(sp)
8003c270:	0800f09e 	j	8003c278 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE+0x64>
8003c274:	00000000 	nop
    }
8003c278:	93a10017 	lbu	at,23(sp)
8003c27c:	30210001 	andi	at,at,0x1
8003c280:	14200007 	bnez	at,8003c2a0 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE+0x8c>
8003c284:	00000000 	nop
8003c288:	0800f0a4 	j	8003c290 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE+0x7c>
8003c28c:	00000000 	nop
8003c290:	8fa20010 	lw	v0,16(sp)
8003c294:	27bd0020 	addiu	sp,sp,32
8003c298:	03e00008 	jr	ra
8003c29c:	00000000 	nop
8003c2a0:	0800f0a4 	j	8003c290 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE+0x7c>
8003c2a4:	00000000 	nop

8003c2a8 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE>:
    pub fn unwrap_or(self, default: T) -> T {
8003c2a8:	27bdffe0 	addiu	sp,sp,-32
8003c2ac:	afa60004 	sw	a2,4(sp)
8003c2b0:	afa40008 	sw	a0,8(sp)
8003c2b4:	afa5000c 	sw	a1,12(sp)
8003c2b8:	afa60018 	sw	a2,24(sp)
8003c2bc:	24010000 	li	at,0
        match self {
8003c2c0:	a3a00017 	sb	zero,23(sp)
8003c2c4:	24010001 	li	at,1
8003c2c8:	a3a10017 	sb	at,23(sp)
8003c2cc:	8fa10008 	lw	at,8(sp)
8003c2d0:	14200009 	bnez	at,8003c2f8 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE+0x50>
8003c2d4:	00000000 	nop
8003c2d8:	0800f0b8 	j	8003c2e0 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE+0x38>
8003c2dc:	00000000 	nop
8003c2e0:	8fa10004 	lw	at,4(sp)
8003c2e4:	24020000 	li	v0,0
            None => default,
8003c2e8:	a3a00017 	sb	zero,23(sp)
8003c2ec:	afa10010 	sw	at,16(sp)
8003c2f0:	0800f0c3 	j	8003c30c <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE+0x64>
8003c2f4:	00000000 	nop
            Some(x) => x,
8003c2f8:	8fa1000c 	lw	at,12(sp)
8003c2fc:	afa1001c 	sw	at,28(sp)
8003c300:	afa10010 	sw	at,16(sp)
8003c304:	0800f0c3 	j	8003c30c <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE+0x64>
8003c308:	00000000 	nop
    }
8003c30c:	93a10017 	lbu	at,23(sp)
8003c310:	30210001 	andi	at,at,0x1
8003c314:	14200007 	bnez	at,8003c334 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE+0x8c>
8003c318:	00000000 	nop
8003c31c:	0800f0c9 	j	8003c324 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE+0x7c>
8003c320:	00000000 	nop
8003c324:	8fa20010 	lw	v0,16(sp)
8003c328:	27bd0020 	addiu	sp,sp,32
8003c32c:	03e00008 	jr	ra
8003c330:	00000000 	nop
8003c334:	0800f0c9 	j	8003c324 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h8ef400df9bb158ffE+0x7c>
8003c338:	00000000 	nop

8003c33c <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hd37948e99cc8a5c6E>:
    pub const unsafe fn unwrap_unchecked(self) -> T {
8003c33c:	27bdffe0 	addiu	sp,sp,-32
8003c340:	afa40014 	sw	a0,20(sp)
8003c344:	afa50018 	sw	a1,24(sp)
        match self {
8003c348:	8fa10014 	lw	at,20(sp)
8003c34c:	14200005 	bnez	at,8003c364 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hd37948e99cc8a5c6E+0x28>
8003c350:	00000000 	nop
8003c354:	0800f0d7 	j	8003c35c <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hd37948e99cc8a5c6E+0x20>
8003c358:	00000000 	nop
            None => unsafe { hint::unreachable_unchecked() },
8003c35c:	0c00e41e 	jal	80039078 <_ZN4core4hint21unreachable_unchecked17hb65475a0a116f39aE>
8003c360:	00000000 	nop
            Some(val) => val,
8003c364:	8fa20018 	lw	v0,24(sp)
8003c368:	afa2001c 	sw	v0,28(sp)
8003c36c:	27bd0020 	addiu	sp,sp,32
    }
8003c370:	03e00008 	jr	ra
8003c374:	00000000 	nop

8003c378 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hfe6e6fd17f6453c3E>:
    pub const unsafe fn unwrap_unchecked(self) -> T {
8003c378:	27bdffe8 	addiu	sp,sp,-24
8003c37c:	afa40010 	sw	a0,16(sp)
        match self {
8003c380:	8fa10010 	lw	at,16(sp)
8003c384:	14200005 	bnez	at,8003c39c <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hfe6e6fd17f6453c3E+0x24>
8003c388:	00000000 	nop
8003c38c:	0800f0e5 	j	8003c394 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hfe6e6fd17f6453c3E+0x1c>
8003c390:	00000000 	nop
            None => unsafe { hint::unreachable_unchecked() },
8003c394:	0c00e41e 	jal	80039078 <_ZN4core4hint21unreachable_unchecked17hb65475a0a116f39aE>
8003c398:	00000000 	nop
            Some(val) => val,
8003c39c:	8fa20010 	lw	v0,16(sp)
8003c3a0:	afa20014 	sw	v0,20(sp)
8003c3a4:	27bd0018 	addiu	sp,sp,24
    }
8003c3a8:	03e00008 	jr	ra
8003c3ac:	00000000 	nop

8003c3b0 <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E>:
    pub fn map<U, F>(self, f: F) -> Option<U>
8003c3b0:	27bdffe0 	addiu	sp,sp,-32
8003c3b4:	afbf001c 	sw	ra,28(sp)
8003c3b8:	a3a40012 	sb	a0,18(sp)
8003c3bc:	a3a50013 	sb	a1,19(sp)
8003c3c0:	24010000 	li	at,0
        match self {
8003c3c4:	a3a00019 	sb	zero,25(sp)
8003c3c8:	24010001 	li	at,1
8003c3cc:	a3a10019 	sb	at,25(sp)
8003c3d0:	93a10012 	lbu	at,18(sp)
8003c3d4:	30210001 	andi	at,at,0x1
8003c3d8:	14200007 	bnez	at,8003c3f8 <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E+0x48>
8003c3dc:	00000000 	nop
8003c3e0:	0800f0fa 	j	8003c3e8 <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E+0x38>
8003c3e4:	00000000 	nop
8003c3e8:	3c010011 	lui	at,0x11
            None => None,
8003c3ec:	afa10014 	sw	at,20(sp)
8003c3f0:	0800f109 	j	8003c424 <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E+0x74>
8003c3f4:	00000000 	nop
            Some(x) => Some(f(x)),
8003c3f8:	93a10013 	lbu	at,19(sp)
8003c3fc:	a3a1001b 	sb	at,27(sp)
8003c400:	24020000 	li	v0,0
8003c404:	a3a00019 	sb	zero,25(sp)
8003c408:	a3a10018 	sb	at,24(sp)
8003c40c:	93a40018 	lbu	a0,24(sp)
8003c410:	0c00e3c7 	jal	80038f1c <_ZN4core3ops8function6FnOnce9call_once17h58ccafbc73184b93E>
8003c414:	00000000 	nop
8003c418:	afa20014 	sw	v0,20(sp)
8003c41c:	0800f109 	j	8003c424 <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E+0x74>
8003c420:	00000000 	nop
    }
8003c424:	93a10019 	lbu	at,25(sp)
8003c428:	30210001 	andi	at,at,0x1
8003c42c:	14200008 	bnez	at,8003c450 <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E+0xa0>
8003c430:	00000000 	nop
8003c434:	0800f10f 	j	8003c43c <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E+0x8c>
8003c438:	00000000 	nop
8003c43c:	8fa20014 	lw	v0,20(sp)
8003c440:	8fbf001c 	lw	ra,28(sp)
8003c444:	27bd0020 	addiu	sp,sp,32
8003c448:	03e00008 	jr	ra
8003c44c:	00000000 	nop
8003c450:	0800f10f 	j	8003c43c <_ZN4core6option15Option$LT$T$GT$3map17h336ccdb662505f75E+0x8c>
8003c454:	00000000 	nop

8003c458 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE>:
    pub fn map<U, F>(self, f: F) -> Option<U>
8003c458:	27bdffd0 	addiu	sp,sp,-48
8003c45c:	afbf002c 	sw	ra,44(sp)
8003c460:	afa40014 	sw	a0,20(sp)
8003c464:	afa50018 	sw	a1,24(sp)
8003c468:	24010000 	li	at,0
        match self {
8003c46c:	a3a00026 	sb	zero,38(sp)
8003c470:	24010001 	li	at,1
8003c474:	a3a10026 	sb	at,38(sp)
8003c478:	8fa10014 	lw	at,20(sp)
8003c47c:	14200007 	bnez	at,8003c49c <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE+0x44>
8003c480:	00000000 	nop
8003c484:	0800f123 	j	8003c48c <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE+0x34>
8003c488:	00000000 	nop
8003c48c:	3c010011 	lui	at,0x11
            None => None,
8003c490:	afa1001c 	sw	at,28(sp)
8003c494:	0800f132 	j	8003c4c8 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE+0x70>
8003c498:	00000000 	nop
            Some(x) => Some(f(x)),
8003c49c:	8fa10018 	lw	at,24(sp)
8003c4a0:	afa10028 	sw	at,40(sp)
8003c4a4:	24020000 	li	v0,0
8003c4a8:	a3a00026 	sb	zero,38(sp)
8003c4ac:	afa10020 	sw	at,32(sp)
8003c4b0:	8fa40020 	lw	a0,32(sp)
8003c4b4:	0c010ee9 	jal	80043ba4 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17he800632fb07a6c54E>
8003c4b8:	00000000 	nop
8003c4bc:	afa2001c 	sw	v0,28(sp)
8003c4c0:	0800f132 	j	8003c4c8 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE+0x70>
8003c4c4:	00000000 	nop
    }
8003c4c8:	93a10026 	lbu	at,38(sp)
8003c4cc:	30210001 	andi	at,at,0x1
8003c4d0:	14200008 	bnez	at,8003c4f4 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE+0x9c>
8003c4d4:	00000000 	nop
8003c4d8:	0800f138 	j	8003c4e0 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE+0x88>
8003c4dc:	00000000 	nop
8003c4e0:	8fa2001c 	lw	v0,28(sp)
8003c4e4:	8fbf002c 	lw	ra,44(sp)
8003c4e8:	27bd0030 	addiu	sp,sp,48
8003c4ec:	03e00008 	jr	ra
8003c4f0:	00000000 	nop
8003c4f4:	0800f138 	j	8003c4e0 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE+0x88>
8003c4f8:	00000000 	nop

8003c4fc <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E>:
    pub fn map<U, F>(self, f: F) -> Option<U>
8003c4fc:	27bdffd8 	addiu	sp,sp,-40
8003c500:	afbf0024 	sw	ra,36(sp)
8003c504:	afa60010 	sw	a2,16(sp)
8003c508:	a3a40016 	sb	a0,22(sp)
8003c50c:	a3a50017 	sb	a1,23(sp)
8003c510:	afa6001c 	sw	a2,28(sp)
8003c514:	24010000 	li	at,0
        match self {
8003c518:	a3a0001b 	sb	zero,27(sp)
8003c51c:	24010001 	li	at,1
8003c520:	a3a1001b 	sb	at,27(sp)
8003c524:	93a10016 	lbu	at,22(sp)
8003c528:	30210001 	andi	at,at,0x1
8003c52c:	14200007 	bnez	at,8003c54c <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E+0x50>
8003c530:	00000000 	nop
8003c534:	0800f14f 	j	8003c53c <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E+0x40>
8003c538:	00000000 	nop
8003c53c:	24010000 	li	at,0
            None => None,
8003c540:	a3a00018 	sb	zero,24(sp)
8003c544:	0800f161 	j	8003c584 <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E+0x88>
8003c548:	00000000 	nop
            Some(x) => Some(f(x)),
8003c54c:	8fa40010 	lw	a0,16(sp)
8003c550:	93a10017 	lbu	at,23(sp)
8003c554:	a3a10023 	sb	at,35(sp)
8003c558:	24020000 	li	v0,0
8003c55c:	a3a0001b 	sb	zero,27(sp)
8003c560:	a3a1001a 	sb	at,26(sp)
8003c564:	93a5001a 	lbu	a1,26(sp)
8003c568:	0c011851 	jal	80046144 <_ZN4core6escape24EscapeIterInner$LT$_$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17haa901ecadf721869E>
8003c56c:	00000000 	nop
8003c570:	a3a20019 	sb	v0,25(sp)
8003c574:	24010001 	li	at,1
8003c578:	a3a10018 	sb	at,24(sp)
8003c57c:	0800f161 	j	8003c584 <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E+0x88>
8003c580:	00000000 	nop
    }
8003c584:	93a1001b 	lbu	at,27(sp)
8003c588:	30210001 	andi	at,at,0x1
8003c58c:	14200009 	bnez	at,8003c5b4 <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E+0xb8>
8003c590:	00000000 	nop
8003c594:	0800f167 	j	8003c59c <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E+0xa0>
8003c598:	00000000 	nop
8003c59c:	93a20018 	lbu	v0,24(sp)
8003c5a0:	93a30019 	lbu	v1,25(sp)
8003c5a4:	8fbf0024 	lw	ra,36(sp)
8003c5a8:	27bd0028 	addiu	sp,sp,40
8003c5ac:	03e00008 	jr	ra
8003c5b0:	00000000 	nop
8003c5b4:	0800f167 	j	8003c59c <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E+0xa0>
8003c5b8:	00000000 	nop

8003c5bc <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE>:
    pub fn map<U, F>(self, f: F) -> Option<U>
8003c5bc:	27bdffc8 	addiu	sp,sp,-56
8003c5c0:	afbf0034 	sw	ra,52(sp)
8003c5c4:	afa60010 	sw	a2,16(sp)
8003c5c8:	afa40014 	sw	a0,20(sp)
8003c5cc:	afa50018 	sw	a1,24(sp)
8003c5d0:	afa6002c 	sw	a2,44(sp)
8003c5d4:	24010000 	li	at,0
        match self {
8003c5d8:	a3a0002b 	sb	zero,43(sp)
8003c5dc:	24010001 	li	at,1
8003c5e0:	a3a1002b 	sb	at,43(sp)
8003c5e4:	8fa10014 	lw	at,20(sp)
8003c5e8:	14200006 	bnez	at,8003c604 <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE+0x48>
8003c5ec:	00000000 	nop
8003c5f0:	0800f17e 	j	8003c5f8 <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE+0x3c>
8003c5f4:	00000000 	nop
            None => None,
8003c5f8:	afa0001c 	sw	zero,28(sp)
8003c5fc:	0800f18f 	j	8003c63c <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE+0x80>
8003c600:	00000000 	nop
            Some(x) => Some(f(x)),
8003c604:	8fa40010 	lw	a0,16(sp)
8003c608:	8fa10018 	lw	at,24(sp)
8003c60c:	afa10030 	sw	at,48(sp)
8003c610:	24020000 	li	v0,0
8003c614:	a3a0002b 	sb	zero,43(sp)
8003c618:	afa10024 	sw	at,36(sp)
8003c61c:	8fa50024 	lw	a1,36(sp)
8003c620:	0c011644 	jal	80045910 <_ZN4core7unicode12unicode_data11skip_search28_$u7b$$u7b$closure$u7d$$u7d$17hf201449e22019ac1E>
8003c624:	00000000 	nop
8003c628:	afa20020 	sw	v0,32(sp)
8003c62c:	24010001 	li	at,1
8003c630:	afa1001c 	sw	at,28(sp)
8003c634:	0800f18f 	j	8003c63c <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE+0x80>
8003c638:	00000000 	nop
    }
8003c63c:	93a1002b 	lbu	at,43(sp)
8003c640:	30210001 	andi	at,at,0x1
8003c644:	14200009 	bnez	at,8003c66c <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE+0xb0>
8003c648:	00000000 	nop
8003c64c:	0800f195 	j	8003c654 <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE+0x98>
8003c650:	00000000 	nop
8003c654:	8fa2001c 	lw	v0,28(sp)
8003c658:	8fa30020 	lw	v1,32(sp)
8003c65c:	8fbf0034 	lw	ra,52(sp)
8003c660:	27bd0038 	addiu	sp,sp,56
8003c664:	03e00008 	jr	ra
8003c668:	00000000 	nop
8003c66c:	0800f195 	j	8003c654 <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE+0x98>
8003c670:	00000000 	nop

8003c674 <_ZN4core6option19Option$LT$$RF$T$GT$6cloned17he089691e6463c91bE>:
    pub fn cloned(self) -> Option<T>
8003c674:	27bdfff0 	addiu	sp,sp,-16
8003c678:	afa40000 	sw	a0,0(sp)
        match self {
8003c67c:	8fa10000 	lw	at,0(sp)
8003c680:	14200007 	bnez	at,8003c6a0 <_ZN4core6option19Option$LT$$RF$T$GT$6cloned17he089691e6463c91bE+0x2c>
8003c684:	00000000 	nop
8003c688:	0800f1a4 	j	8003c690 <_ZN4core6option19Option$LT$$RF$T$GT$6cloned17he089691e6463c91bE+0x1c>
8003c68c:	00000000 	nop
8003c690:	24010000 	li	at,0
            None => None,
8003c694:	a3a00006 	sb	zero,6(sp)
8003c698:	0800f1b1 	j	8003c6c4 <_ZN4core6option19Option$LT$$RF$T$GT$6cloned17he089691e6463c91bE+0x50>
8003c69c:	00000000 	nop
            Some(t) => Some(t.clone()),
8003c6a0:	8fa10000 	lw	at,0(sp)
8003c6a4:	afa10008 	sw	at,8(sp)
8003c6a8:	afa1000c 	sw	at,12(sp)
            $(
                #[stable(feature = "rust1", since = "1.0.0")]
                impl Clone for $t {
                    #[inline(always)]
                    fn clone(&self) -> Self {
                        *self
8003c6ac:	90210000 	lbu	at,0(at)
8003c6b0:	a3a10007 	sb	at,7(sp)
8003c6b4:	24010001 	li	at,1
8003c6b8:	a3a10006 	sb	at,6(sp)
8003c6bc:	0800f1b1 	j	8003c6c4 <_ZN4core6option19Option$LT$$RF$T$GT$6cloned17he089691e6463c91bE+0x50>
8003c6c0:	00000000 	nop
    }
8003c6c4:	93a20006 	lbu	v0,6(sp)
8003c6c8:	93a30007 	lbu	v1,7(sp)
8003c6cc:	27bd0010 	addiu	sp,sp,16
8003c6d0:	03e00008 	jr	ra
8003c6d4:	00000000 	nop

8003c6d8 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>:
const fn unwrap_failed() -> ! {
8003c6d8:	27bdfff0 	addiu	sp,sp,-16
8003c6dc:	00803025 	move	a2,a0
    panic("called `Option::unwrap()` on a `None` value")
8003c6e0:	3c018108 	lui	at,0x8108
8003c6e4:	2424b6b0 	addiu	a0,at,-18768
8003c6e8:	2405002b 	li	a1,43
8003c6ec:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
8003c6f0:	00000000 	nop

8003c6f4 <_ZN4core6option13expect_failed17h75c0aba452453316E>:
const fn expect_failed(msg: &str) -> ! {
8003c6f4:	27bdffe8 	addiu	sp,sp,-24
8003c6f8:	afa40010 	sw	a0,16(sp)
8003c6fc:	afa50014 	sw	a1,20(sp)
    panic_str(msg)
8003c700:	0c00f2dd 	jal	8003cb74 <_ZN4core9panicking9panic_str17h0c539eed0053eabcE>
8003c704:	00000000 	nop

8003c708 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h448b262f87af77b6E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003c708:	27bdfff0 	addiu	sp,sp,-16
8003c70c:	afa40004 	sw	a0,4(sp)
        match self {
8003c710:	8fa10004 	lw	at,4(sp)
8003c714:	14200006 	bnez	at,8003c730 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h448b262f87af77b6E+0x28>
8003c718:	00000000 	nop
8003c71c:	0800f1c9 	j	8003c724 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h448b262f87af77b6E+0x1c>
8003c720:	00000000 	nop
            None => ControlFlow::Break(None),
8003c724:	afa00008 	sw	zero,8(sp)
8003c728:	0800f1d1 	j	8003c744 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h448b262f87af77b6E+0x3c>
8003c72c:	00000000 	nop
            Some(v) => ControlFlow::Continue(v),
8003c730:	8fa10004 	lw	at,4(sp)
8003c734:	afa1000c 	sw	at,12(sp)
8003c738:	afa10008 	sw	at,8(sp)
    }
8003c73c:	0800f1d1 	j	8003c744 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h448b262f87af77b6E+0x3c>
8003c740:	00000000 	nop
8003c744:	8fa20008 	lw	v0,8(sp)
8003c748:	27bd0010 	addiu	sp,sp,16
8003c74c:	03e00008 	jr	ra
8003c750:	00000000 	nop

8003c754 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h46f0356384a6ddb1E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003c754:	27bdffe8 	addiu	sp,sp,-24
8003c758:	afa40004 	sw	a0,4(sp)
8003c75c:	afa50008 	sw	a1,8(sp)
        match self {
8003c760:	8fa10004 	lw	at,4(sp)
8003c764:	14200007 	bnez	at,8003c784 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h46f0356384a6ddb1E+0x30>
8003c768:	00000000 	nop
8003c76c:	0800f1dd 	j	8003c774 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h46f0356384a6ddb1E+0x20>
8003c770:	00000000 	nop
8003c774:	24010001 	li	at,1
            None => ControlFlow::Break(None),
8003c778:	afa1000c 	sw	at,12(sp)
8003c77c:	0800f1e7 	j	8003c79c <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h46f0356384a6ddb1E+0x48>
8003c780:	00000000 	nop
            Some(v) => ControlFlow::Continue(v),
8003c784:	8fa10008 	lw	at,8(sp)
8003c788:	afa10014 	sw	at,20(sp)
8003c78c:	afa10010 	sw	at,16(sp)
8003c790:	afa0000c 	sw	zero,12(sp)
    }
8003c794:	0800f1e7 	j	8003c79c <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h46f0356384a6ddb1E+0x48>
8003c798:	00000000 	nop
8003c79c:	8fa2000c 	lw	v0,12(sp)
8003c7a0:	8fa30010 	lw	v1,16(sp)
8003c7a4:	27bd0018 	addiu	sp,sp,24
8003c7a8:	03e00008 	jr	ra
8003c7ac:	00000000 	nop

8003c7b0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h4ffea4232db24cdcE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003c7b0:	27bdfff8 	addiu	sp,sp,-8
8003c7b4:	a3a40005 	sb	a0,5(sp)
        match self {
8003c7b8:	93a10005 	lbu	at,5(sp)
8003c7bc:	30210001 	andi	at,at,0x1
8003c7c0:	14200007 	bnez	at,8003c7e0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h4ffea4232db24cdcE+0x30>
8003c7c4:	00000000 	nop
8003c7c8:	0800f1f4 	j	8003c7d0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h4ffea4232db24cdcE+0x20>
8003c7cc:	00000000 	nop
8003c7d0:	24010001 	li	at,1
            None => ControlFlow::Break(None),
8003c7d4:	a3a10006 	sb	at,6(sp)
8003c7d8:	0800f1fc 	j	8003c7f0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h4ffea4232db24cdcE+0x40>
8003c7dc:	00000000 	nop
8003c7e0:	24010000 	li	at,0
            Some(v) => ControlFlow::Continue(v),
8003c7e4:	a3a00006 	sb	zero,6(sp)
    }
8003c7e8:	0800f1fc 	j	8003c7f0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h4ffea4232db24cdcE+0x40>
8003c7ec:	00000000 	nop
8003c7f0:	93a10006 	lbu	at,6(sp)
8003c7f4:	30220001 	andi	v0,at,0x1
8003c7f8:	27bd0008 	addiu	sp,sp,8
8003c7fc:	03e00008 	jr	ra
8003c800:	00000000 	nop

8003c804 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hd9e76cd92f378f0bE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003c804:	27bdfff0 	addiu	sp,sp,-16
8003c808:	afa40004 	sw	a0,4(sp)
        match self {
8003c80c:	8fa10004 	lw	at,4(sp)
8003c810:	14200006 	bnez	at,8003c82c <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hd9e76cd92f378f0bE+0x28>
8003c814:	00000000 	nop
8003c818:	0800f208 	j	8003c820 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hd9e76cd92f378f0bE+0x1c>
8003c81c:	00000000 	nop
            None => ControlFlow::Break(None),
8003c820:	afa00008 	sw	zero,8(sp)
8003c824:	0800f210 	j	8003c840 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hd9e76cd92f378f0bE+0x3c>
8003c828:	00000000 	nop
            Some(v) => ControlFlow::Continue(v),
8003c82c:	8fa10004 	lw	at,4(sp)
8003c830:	afa1000c 	sw	at,12(sp)
8003c834:	afa10008 	sw	at,8(sp)
    }
8003c838:	0800f210 	j	8003c840 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hd9e76cd92f378f0bE+0x3c>
8003c83c:	00000000 	nop
8003c840:	8fa20008 	lw	v0,8(sp)
8003c844:	27bd0010 	addiu	sp,sp,16
8003c848:	03e00008 	jr	ra
8003c84c:	00000000 	nop

8003c850 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17heb3c9f832ee98659E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003c850:	27bdfff0 	addiu	sp,sp,-16
8003c854:	afa40004 	sw	a0,4(sp)
        match self {
8003c858:	8fa10004 	lw	at,4(sp)
8003c85c:	14200006 	bnez	at,8003c878 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17heb3c9f832ee98659E+0x28>
8003c860:	00000000 	nop
8003c864:	0800f21b 	j	8003c86c <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17heb3c9f832ee98659E+0x1c>
8003c868:	00000000 	nop
            None => ControlFlow::Break(None),
8003c86c:	afa00008 	sw	zero,8(sp)
8003c870:	0800f223 	j	8003c88c <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17heb3c9f832ee98659E+0x3c>
8003c874:	00000000 	nop
            Some(v) => ControlFlow::Continue(v),
8003c878:	8fa10004 	lw	at,4(sp)
8003c87c:	afa1000c 	sw	at,12(sp)
8003c880:	afa10008 	sw	at,8(sp)
    }
8003c884:	0800f223 	j	8003c88c <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17heb3c9f832ee98659E+0x3c>
8003c888:	00000000 	nop
8003c88c:	8fa20008 	lw	v0,8(sp)
8003c890:	27bd0010 	addiu	sp,sp,16
8003c894:	03e00008 	jr	ra
8003c898:	00000000 	nop

8003c89c <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h273a54921453764dE>:
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
8003c89c:	27bdfff0 	addiu	sp,sp,-16
            None => None,
8003c8a0:	afa00008 	sw	zero,8(sp)
    }
8003c8a4:	8fa20004 	lw	v0,4(sp)
8003c8a8:	8fa30008 	lw	v1,8(sp)
8003c8ac:	27bd0010 	addiu	sp,sp,16
8003c8b0:	03e00008 	jr	ra
8003c8b4:	00000000 	nop

8003c8b8 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h499111ea8ee19989E>:
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
8003c8b8:	27bdfff0 	addiu	sp,sp,-16
            None => None,
8003c8bc:	afa00004 	sw	zero,4(sp)
    }
8003c8c0:	8fa20004 	lw	v0,4(sp)
8003c8c4:	8fa30008 	lw	v1,8(sp)
8003c8c8:	27bd0010 	addiu	sp,sp,16
8003c8cc:	03e00008 	jr	ra
8003c8d0:	00000000 	nop

8003c8d4 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h50f37f7fa945e0e3E>:
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
8003c8d4:	27bdfff0 	addiu	sp,sp,-16
            None => None,
8003c8d8:	afa00008 	sw	zero,8(sp)
    }
8003c8dc:	8fa20004 	lw	v0,4(sp)
8003c8e0:	8fa30008 	lw	v1,8(sp)
8003c8e4:	27bd0010 	addiu	sp,sp,16
8003c8e8:	03e00008 	jr	ra
8003c8ec:	00000000 	nop

8003c8f0 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h67c5eb85b2796ddcE>:
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
8003c8f0:	27bdfff0 	addiu	sp,sp,-16
            None => None,
8003c8f4:	afa00004 	sw	zero,4(sp)
    }
8003c8f8:	8fa20004 	lw	v0,4(sp)
8003c8fc:	8fa30008 	lw	v1,8(sp)
8003c900:	27bd0010 	addiu	sp,sp,16
8003c904:	03e00008 	jr	ra
8003c908:	00000000 	nop

8003c90c <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h766c7ebb6933a2baE>:
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
8003c90c:	27bdfff0 	addiu	sp,sp,-16
8003c910:	3c010011 	lui	at,0x11
            None => None,
8003c914:	afa10008 	sw	at,8(sp)
    }
8003c918:	8fa20004 	lw	v0,4(sp)
8003c91c:	8fa30008 	lw	v1,8(sp)
8003c920:	27bd0010 	addiu	sp,sp,16
8003c924:	03e00008 	jr	ra
8003c928:	00000000 	nop

8003c92c <_ZN4core5panic8location8Location6caller17h8d824196f6839e99E>:
    pub const fn caller() -> &'static Location<'static> {
8003c92c:	27bdfff8 	addiu	sp,sp,-8
        crate::intrinsics::caller_location()
8003c930:	afa40004 	sw	a0,4(sp)
8003c934:	8fa20004 	lw	v0,4(sp)
8003c938:	27bd0008 	addiu	sp,sp,8
    }
8003c93c:	03e00008 	jr	ra
8003c940:	00000000 	nop

8003c944 <_ZN4core5panic10panic_info9PanicInfo20internal_constructor17hc87a2c1ce13c07fdE>:
        reason = "internal details of the implementation of the `panic!` and related macros",
        issue = "none"
    )]
    #[doc(hidden)]
    #[inline]
    pub fn internal_constructor(
8003c944:	27bdfff0 	addiu	sp,sp,-16
8003c948:	00801025 	move	v0,a0
8003c94c:	8fa10020 	lw	at,32(sp)
8003c950:	afa50004 	sw	a1,4(sp)
8003c954:	afa60008 	sw	a2,8(sp)
8003c958:	a3a7000e 	sb	a3,14(sp)
8003c95c:	a3a1000f 	sb	at,15(sp)
        location: &'a Location<'a>,
        can_unwind: bool,
        force_no_backtrace: bool,
    ) -> Self {
        struct NoPayload;
        PanicInfo { location, message, payload: &NoPayload, can_unwind, force_no_backtrace }
8003c960:	3c038108 	lui	v1,0x8108
8003c964:	2463b030 	addiu	v1,v1,-20432
8003c968:	ac830000 	sw	v1,0(a0)
8003c96c:	3c038108 	lui	v1,0x8108
8003c970:	2463b6dc 	addiu	v1,v1,-18724
8003c974:	ac830004 	sw	v1,4(a0)
8003c978:	ac850008 	sw	a1,8(a0)
8003c97c:	ac86000c 	sw	a2,12(a0)
8003c980:	a0870010 	sb	a3,16(a0)
8003c984:	a0810011 	sb	at,17(a0)
8003c988:	27bd0010 	addiu	sp,sp,16
    }
8003c98c:	03e00008 	jr	ra
8003c990:	00000000 	nop

8003c994 <_ZN4core5panic10panic_info9PanicInfo7message17h276618d293c608e9E>:
    /// If the `panic!` macro from the `core` crate (not from `std`)
    /// was used with a formatting string and some additional arguments,
    /// returns that message ready to be used for example with [`fmt::write`]
    #[must_use]
    #[unstable(feature = "panic_info_message", issue = "66745")]
    pub fn message(&self) -> Option<&fmt::Arguments<'_>> {
8003c994:	27bdfff8 	addiu	sp,sp,-8
8003c998:	afa40004 	sw	a0,4(sp)
        self.message
8003c99c:	8c820008 	lw	v0,8(a0)
8003c9a0:	27bd0008 	addiu	sp,sp,8
    }
8003c9a4:	03e00008 	jr	ra
8003c9a8:	00000000 	nop

8003c9ac <_ZN4core5panic10panic_info9PanicInfo8location17hd53a7358fb18b234E>:
    ///
    /// panic!("Normal panic");
    /// ```
    #[must_use]
    #[stable(feature = "panic_hooks", since = "1.10.0")]
    pub fn location(&self) -> Option<&Location<'_>> {
8003c9ac:	27bdfff8 	addiu	sp,sp,-8
8003c9b0:	afa40004 	sw	a0,4(sp)
        // NOTE: If this is changed to sometimes return None,
        // deal with that case in std::panicking::default_hook and core::panicking::panic_fmt.
        Some(&self.location)
8003c9b4:	8c81000c 	lw	at,12(a0)
8003c9b8:	afa10000 	sw	at,0(sp)
    }
8003c9bc:	8fa20000 	lw	v0,0(sp)
8003c9c0:	27bd0008 	addiu	sp,sp,8
8003c9c4:	03e00008 	jr	ra
8003c9c8:	00000000 	nop

8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>:
#[cfg_attr(feature = "panic_immediate_abort", inline)]
#[track_caller]
#[lang = "panic_fmt"] // needed for const-evaluated panics
#[rustc_do_not_const_check] // hooked by const-eval
#[rustc_const_unstable(feature = "panic_internals", issue = "none")]
pub const fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {
8003c9cc:	27bdffc0 	addiu	sp,sp,-64
8003c9d0:	afbf003c 	sw	ra,60(sp)
8003c9d4:	afa5001c 	sw	a1,28(sp)
8003c9d8:	afa40020 	sw	a0,32(sp)
    if cfg!(feature = "panic_immediate_abort") {
8003c9dc:	0800f279 	j	8003c9e4 <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE+0x18>
8003c9e0:	00000000 	nop
        #[lang = "panic_impl"]
        fn panic_impl(pi: &PanicInfo<'_>) -> !;
    }

    let pi = PanicInfo::internal_constructor(
        Some(&fmt),
8003c9e4:	8fa4001c 	lw	a0,28(sp)
8003c9e8:	8fa10020 	lw	at,32(sp)
8003c9ec:	afa10038 	sw	at,56(sp)
        Location::caller(),
8003c9f0:	0c00f24b 	jal	8003c92c <_ZN4core5panic8location8Location6caller17h8d824196f6839e99E>
8003c9f4:	00000000 	nop
8003c9f8:	00403025 	move	a2,v0
    let pi = PanicInfo::internal_constructor(
8003c9fc:	8fa50038 	lw	a1,56(sp)
8003ca00:	03a00825 	move	at,sp
8003ca04:	ac200010 	sw	zero,16(at)
8003ca08:	27a40024 	addiu	a0,sp,36
8003ca0c:	afa40018 	sw	a0,24(sp)
8003ca10:	24070001 	li	a3,1
8003ca14:	0c00f251 	jal	8003c944 <_ZN4core5panic10panic_info9PanicInfo20internal_constructor17hc87a2c1ce13c07fdE>
8003ca18:	00000000 	nop
8003ca1c:	8fa40018 	lw	a0,24(sp)
        /* can_unwind */ true,
        /* force_no_backtrace */ false,
    );

    // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.
    unsafe { panic_impl(&pi) }
8003ca20:	0c00b481 	jal	8002d204 <rust_begin_unwind>
8003ca24:	00000000 	nop

8003ca28 <_ZN4core9panicking18panic_nounwind_fmt17hf69a56259d4ee080E>:
// This attribute has the key side-effect that if the panic handler ignores `can_unwind`
// and unwinds anyway, we will hit the "unwinding out of nounwind function" guard,
// which causes a "panic in a function that cannot unwind".
#[rustc_nounwind]
#[rustc_const_unstable(feature = "panic_internals", issue = "none")]
pub const fn panic_nounwind_fmt(fmt: fmt::Arguments<'_>, force_no_backtrace: bool) -> ! {
8003ca28:	27bdffd0 	addiu	sp,sp,-48
8003ca2c:	a3a5002f 	sb	a1,47(sp)
    const fn comptime(fmt: fmt::Arguments<'_>, _force_no_backtrace: bool) -> ! {
        // We don't unwind anyway at compile-time so we can call the regular `panic_fmt`.
        panic_fmt(fmt);
    }

    super::intrinsics::const_eval_select((fmt, force_no_backtrace), comptime, runtime);
8003ca30:	8c810014 	lw	at,20(a0)
8003ca34:	afa10024 	sw	at,36(sp)
8003ca38:	8c810010 	lw	at,16(a0)
8003ca3c:	afa10020 	sw	at,32(sp)
8003ca40:	8c81000c 	lw	at,12(a0)
8003ca44:	afa1001c 	sw	at,28(sp)
8003ca48:	8c810008 	lw	at,8(a0)
8003ca4c:	afa10018 	sw	at,24(sp)
8003ca50:	8c810004 	lw	at,4(a0)
8003ca54:	afa10014 	sw	at,20(sp)
8003ca58:	8c810000 	lw	at,0(a0)
8003ca5c:	afa10010 	sw	at,16(sp)
8003ca60:	a3a50028 	sb	a1,40(sp)
8003ca64:	93a10028 	lbu	at,40(sp)
8003ca68:	30250001 	andi	a1,at,0x1
8003ca6c:	27a40010 	addiu	a0,sp,16
8003ca70:	0c00f29e 	jal	8003ca78 <_ZN4core9panicking18panic_nounwind_fmt7runtime17h03c24f469ce74f85E>
8003ca74:	00000000 	nop

8003ca78 <_ZN4core9panicking18panic_nounwind_fmt7runtime17h03c24f469ce74f85E>:
    fn runtime(fmt: fmt::Arguments<'_>, force_no_backtrace: bool) -> ! {
8003ca78:	27bdffb8 	addiu	sp,sp,-72
8003ca7c:	afbf0044 	sw	ra,68(sp)
8003ca80:	afa6001c 	sw	a2,28(sp)
8003ca84:	afa40020 	sw	a0,32(sp)
8003ca88:	00a00825 	move	at,a1
8003ca8c:	afa10024 	sw	at,36(sp)
8003ca90:	a3a50043 	sb	a1,67(sp)
        if cfg!(feature = "panic_immediate_abort") {
8003ca94:	0800f2a7 	j	8003ca9c <_ZN4core9panicking18panic_nounwind_fmt7runtime17h03c24f469ce74f85E+0x24>
8003ca98:	00000000 	nop
            Some(&fmt),
8003ca9c:	8fa4001c 	lw	a0,28(sp)
8003caa0:	8fa10020 	lw	at,32(sp)
8003caa4:	afa1003c 	sw	at,60(sp)
            Location::caller(),
8003caa8:	0c00f24b 	jal	8003c92c <_ZN4core5panic8location8Location6caller17h8d824196f6839e99E>
8003caac:	00000000 	nop
8003cab0:	8fa10024 	lw	at,36(sp)
8003cab4:	00403025 	move	a2,v0
        let pi = PanicInfo::internal_constructor(
8003cab8:	8fa5003c 	lw	a1,60(sp)
8003cabc:	30210001 	andi	at,at,0x1
8003cac0:	03a01025 	move	v0,sp
8003cac4:	ac410010 	sw	at,16(v0)
8003cac8:	27a40028 	addiu	a0,sp,40
8003cacc:	afa40018 	sw	a0,24(sp)
8003cad0:	24070000 	li	a3,0
8003cad4:	0c00f251 	jal	8003c944 <_ZN4core5panic10panic_info9PanicInfo20internal_constructor17hc87a2c1ce13c07fdE>
8003cad8:	00000000 	nop
8003cadc:	8fa40018 	lw	a0,24(sp)
        unsafe { panic_impl(&pi) }
8003cae0:	0c00b481 	jal	8002d204 <rust_begin_unwind>
8003cae4:	00000000 	nop

8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>:
#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
#[cfg_attr(feature = "panic_immediate_abort", inline)]
#[track_caller]
#[rustc_const_unstable(feature = "panic_internals", issue = "none")]
#[lang = "panic"] // used by lints and miri for panics
pub const fn panic(expr: &'static str) -> ! {
8003cae8:	27bdffb8 	addiu	sp,sp,-72
8003caec:	afbf0044 	sw	ra,68(sp)
8003caf0:	afa60018 	sw	a2,24(sp)
8003caf4:	afa4003c 	sw	a0,60(sp)
8003caf8:	afa50040 	sw	a1,64(sp)
    // reduce size overhead. The format_args! macro uses str's Display trait to
    // write expr, which calls Formatter::pad, which must accommodate string
    // truncation and padding (even though none is used here). Using
    // Arguments::new_const may allow the compiler to omit Formatter::pad from the
    // output binary, saving up to a few kilobytes.
    panic_fmt(fmt::Arguments::new_const(&[expr]));
8003cafc:	afa40034 	sw	a0,52(sp)
8003cb00:	afa50038 	sw	a1,56(sp)
8003cb04:	27a4001c 	addiu	a0,sp,28
8003cb08:	afa40014 	sw	a0,20(sp)
8003cb0c:	27a50034 	addiu	a1,sp,52
8003cb10:	24060001 	li	a2,1
8003cb14:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003cb18:	00000000 	nop
8003cb1c:	8fa40014 	lw	a0,20(sp)
8003cb20:	8fa50018 	lw	a1,24(sp)
8003cb24:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003cb28:	00000000 	nop

8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>:
#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
#[cfg_attr(feature = "panic_immediate_abort", inline)]
#[lang = "panic_nounwind"] // needed by codegen for non-unwinding panics
#[rustc_nounwind]
#[rustc_const_unstable(feature = "panic_internals", issue = "none")]
pub const fn panic_nounwind(expr: &'static str) -> ! {
8003cb2c:	27bdffc0 	addiu	sp,sp,-64
8003cb30:	afbf003c 	sw	ra,60(sp)
8003cb34:	afa40034 	sw	a0,52(sp)
8003cb38:	afa50038 	sw	a1,56(sp)
    panic_nounwind_fmt(fmt::Arguments::new_const(&[expr]), /* force_no_backtrace */ false);
8003cb3c:	afa4002c 	sw	a0,44(sp)
8003cb40:	afa50030 	sw	a1,48(sp)
8003cb44:	27a40014 	addiu	a0,sp,20
8003cb48:	afa40010 	sw	a0,16(sp)
8003cb4c:	27a5002c 	addiu	a1,sp,44
8003cb50:	24060001 	li	a2,1
8003cb54:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003cb58:	00000000 	nop
8003cb5c:	8fa40010 	lw	a0,16(sp)
8003cb60:	3c018108 	lui	at,0x8108
8003cb64:	2426b75c 	addiu	a2,at,-18596
8003cb68:	24050000 	li	a1,0
8003cb6c:	0c00f28a 	jal	8003ca28 <_ZN4core9panicking18panic_nounwind_fmt17hf69a56259d4ee080E>
8003cb70:	00000000 	nop

8003cb74 <_ZN4core9panicking9panic_str17h0c539eed0053eabcE>:

#[inline]
#[track_caller]
#[rustc_diagnostic_item = "panic_str"]
#[rustc_const_unstable(feature = "panic_internals", issue = "none")]
pub const fn panic_str(expr: &str) -> ! {
8003cb74:	27bdffe0 	addiu	sp,sp,-32
8003cb78:	afa60014 	sw	a2,20(sp)
8003cb7c:	00a00825 	move	at,a1
8003cb80:	8fa50014 	lw	a1,20(sp)
8003cb84:	afa40018 	sw	a0,24(sp)
8003cb88:	afa1001c 	sw	at,28(sp)
8003cb8c:	27a40018 	addiu	a0,sp,24
    panic_display(&expr);
8003cb90:	0c00f2e6 	jal	8003cb98 <_ZN4core9panicking13panic_display17hf5921614ca7a587cE>
8003cb94:	00000000 	nop

8003cb98 <_ZN4core9panicking13panic_display17hf5921614ca7a587cE>:
#[track_caller]
#[rustc_do_not_const_check] // hooked by const-eval
// enforce a &&str argument in const-check and hook this by const-eval
#[rustc_const_panic_str]
#[rustc_const_unstable(feature = "panic_internals", issue = "none")]
pub const fn panic_display<T: fmt::Display>(x: &T) -> ! {
8003cb98:	27bdffa0 	addiu	sp,sp,-96
8003cb9c:	afbf005c 	sw	ra,92(sp)
8003cba0:	afa50020 	sw	a1,32(sp)
8003cba4:	afa40044 	sw	a0,68(sp)
8003cba8:	afa40048 	sw	a0,72(sp)
8003cbac:	afa40054 	sw	a0,84(sp)
8003cbb0:	3c018004 	lui	at,0x8004
8003cbb4:	24217e68 	addiu	at,at,32360
8003cbb8:	afa10058 	sw	at,88(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003cbbc:	afa4004c 	sw	a0,76(sp)
8003cbc0:	afa10050 	sw	at,80(sp)
    }
8003cbc4:	8fa2004c 	lw	v0,76(sp)
8003cbc8:	8fa10050 	lw	at,80(sp)
    panic_fmt(format_args!("{}", *x));
8003cbcc:	afa2003c 	sw	v0,60(sp)
8003cbd0:	afa10040 	sw	at,64(sp)
8003cbd4:	03a00825 	move	at,sp
8003cbd8:	24060001 	li	a2,1
8003cbdc:	ac260010 	sw	a2,16(at)
8003cbe0:	3c018108 	lui	at,0x8108
8003cbe4:	2425b6a8 	addiu	a1,at,-18776
8003cbe8:	27a40024 	addiu	a0,sp,36
8003cbec:	afa4001c 	sw	a0,28(sp)
8003cbf0:	27a7003c 	addiu	a3,sp,60
8003cbf4:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8003cbf8:	00000000 	nop
8003cbfc:	8fa4001c 	lw	a0,28(sp)
8003cc00:	8fa50020 	lw	a1,32(sp)
8003cc04:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003cc08:	00000000 	nop

8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>:

#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
#[cfg_attr(feature = "panic_immediate_abort", inline)]
#[track_caller]
#[lang = "panic_bounds_check"] // needed by codegen for panic on OOB array/slice access
fn panic_bounds_check(index: usize, len: usize) -> ! {
8003cc0c:	27bdff80 	addiu	sp,sp,-128
8003cc10:	afbf007c 	sw	ra,124(sp)
8003cc14:	afa60020 	sw	a2,32(sp)
8003cc18:	afa40024 	sw	a0,36(sp)
8003cc1c:	afa50028 	sw	a1,40(sp)
    if cfg!(feature = "panic_immediate_abort") {
8003cc20:	0800f30a 	j	8003cc28 <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE+0x1c>
8003cc24:	00000000 	nop
8003cc28:	27a20028 	addiu	v0,sp,40
8003cc2c:	afa20068 	sw	v0,104(sp)
8003cc30:	afa20074 	sw	v0,116(sp)
8003cc34:	3c018004 	lui	at,0x8004
8003cc38:	24217d60 	addiu	at,at,32096
8003cc3c:	afa10078 	sw	at,120(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003cc40:	afa2006c 	sw	v0,108(sp)
8003cc44:	afa10070 	sw	at,112(sp)
    }
8003cc48:	8fa4006c 	lw	a0,108(sp)
8003cc4c:	8fa30070 	lw	v1,112(sp)
8003cc50:	27a20024 	addiu	v0,sp,36
8003cc54:	afa20054 	sw	v0,84(sp)
8003cc58:	afa20060 	sw	v0,96(sp)
8003cc5c:	afa10064 	sw	at,100(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003cc60:	afa20058 	sw	v0,88(sp)
8003cc64:	afa1005c 	sw	at,92(sp)
    }
8003cc68:	8fa20058 	lw	v0,88(sp)
8003cc6c:	8fa1005c 	lw	at,92(sp)
        super::intrinsics::abort()
    }

    panic!("index out of bounds: the len is {len} but the index is {index}")
8003cc70:	afa40044 	sw	a0,68(sp)
8003cc74:	afa30048 	sw	v1,72(sp)
8003cc78:	afa2004c 	sw	v0,76(sp)
8003cc7c:	afa10050 	sw	at,80(sp)
8003cc80:	03a00825 	move	at,sp
8003cc84:	24060002 	li	a2,2
8003cc88:	ac260010 	sw	a2,16(at)
8003cc8c:	3c018108 	lui	at,0x8108
8003cc90:	2425b780 	addiu	a1,at,-18560
8003cc94:	27a4002c 	addiu	a0,sp,44
8003cc98:	afa4001c 	sw	a0,28(sp)
8003cc9c:	27a70044 	addiu	a3,sp,68
8003cca0:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8003cca4:	00000000 	nop
8003cca8:	8fa4001c 	lw	a0,28(sp)
8003ccac:	8fa50020 	lw	a1,32(sp)
8003ccb0:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003ccb4:	00000000 	nop

8003ccb8 <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE>:
#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
#[cfg_attr(feature = "panic_immediate_abort", inline)]
#[track_caller]
#[lang = "panic_misaligned_pointer_dereference"] // needed by codegen for panic on misaligned pointer deref
#[rustc_nounwind] // `CheckAlignment` MIR pass requires this function to never unwind
fn panic_misaligned_pointer_dereference(required: usize, found: usize) -> ! {
8003ccb8:	27bdfe90 	addiu	sp,sp,-368
8003ccbc:	afbf016c 	sw	ra,364(sp)
8003ccc0:	afa60028 	sw	a2,40(sp)
8003ccc4:	afa4002c 	sw	a0,44(sp)
8003ccc8:	afa50030 	sw	a1,48(sp)
    if cfg!(feature = "panic_immediate_abort") {
8003cccc:	0800f335 	j	8003ccd4 <_ZN4core9panicking36panic_misaligned_pointer_dereference17h2c5ec6455864a71fE+0x1c>
8003ccd0:	00000000 	nop
8003ccd4:	27a2002c 	addiu	v0,sp,44
8003ccd8:	afa20158 	sw	v0,344(sp)
8003ccdc:	afa20164 	sw	v0,356(sp)
8003cce0:	3c018004 	lui	at,0x8004
8003cce4:	24217304 	addiu	at,at,29444
8003cce8:	afa10168 	sw	at,360(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003ccec:	afa2015c 	sw	v0,348(sp)
8003ccf0:	afa10160 	sw	at,352(sp)
    }
8003ccf4:	8fa4015c 	lw	a0,348(sp)
8003ccf8:	8fa30160 	lw	v1,352(sp)
8003ccfc:	27a20030 	addiu	v0,sp,48
8003cd00:	afa20144 	sw	v0,324(sp)
8003cd04:	afa20150 	sw	v0,336(sp)
8003cd08:	afa10154 	sw	at,340(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003cd0c:	afa20148 	sw	v0,328(sp)
8003cd10:	afa1014c 	sw	at,332(sp)
    }
8003cd14:	8fa20148 	lw	v0,328(sp)
8003cd18:	8fa1014c 	lw	at,332(sp)
        super::intrinsics::abort()
    }

    panic_nounwind_fmt(
        format_args!(
8003cd1c:	afa4004c 	sw	a0,76(sp)
8003cd20:	afa30050 	sw	v1,80(sp)
8003cd24:	afa20054 	sw	v0,84(sp)
8003cd28:	afa10058 	sw	at,88(sp)
8003cd2c:	24010003 	li	at,3
8003cd30:	a3a100bf 	sb	at,191(sp)
8003cd34:	24060002 	li	a2,2
8003cd38:	afa600c0 	sw	a2,192(sp)
8003cd3c:	afa600c8 	sw	a2,200(sp)
8003cd40:	93a900bf 	lbu	t1,191(sp)
8003cd44:	8fa700c0 	lw	a3,192(sp)
8003cd48:	8fa400c4 	lw	a0,196(sp)
8003cd4c:	8fa300c8 	lw	v1,200(sp)
8003cd50:	8fa200cc 	lw	v0,204(sp)
8003cd54:	afa00124 	sw	zero,292(sp)
8003cd58:	24080020 	li	t0,32
8003cd5c:	afa80128 	sw	t0,296(sp)
8003cd60:	a3a9012f 	sb	t1,303(sp)
8003cd64:	24050004 	li	a1,4
8003cd68:	afa50130 	sw	a1,304(sp)
8003cd6c:	afa70134 	sw	a3,308(sp)
8003cd70:	afa40138 	sw	a0,312(sp)
8003cd74:	afa3013c 	sw	v1,316(sp)
8003cd78:	afa20140 	sw	v0,320(sp)
        Self { position, fill, align, flags, precision, width }
8003cd7c:	afa000b0 	sw	zero,176(sp)
8003cd80:	afa800ac 	sw	t0,172(sp)
8003cd84:	a3a900b8 	sb	t1,184(sp)
8003cd88:	afa500b4 	sw	a1,180(sp)
8003cd8c:	afa7009c 	sw	a3,156(sp)
8003cd90:	afa400a0 	sw	a0,160(sp)
8003cd94:	afa300a4 	sw	v1,164(sp)
8003cd98:	afa200a8 	sw	v0,168(sp)
8003cd9c:	a3a100f3 	sb	at,243(sp)
8003cda0:	afa600f4 	sw	a2,244(sp)
8003cda4:	afa600fc 	sw	a2,252(sp)
8003cda8:	93a700f3 	lbu	a3,243(sp)
8003cdac:	8fa400f4 	lw	a0,244(sp)
8003cdb0:	8fa300f8 	lw	v1,248(sp)
8003cdb4:	8fa200fc 	lw	v0,252(sp)
8003cdb8:	8fa10100 	lw	at,256(sp)
8003cdbc:	24090001 	li	t1,1
8003cdc0:	afa90104 	sw	t1,260(sp)
8003cdc4:	afa80108 	sw	t0,264(sp)
8003cdc8:	a3a7010f 	sb	a3,271(sp)
8003cdcc:	afa50110 	sw	a1,272(sp)
8003cdd0:	afa40114 	sw	a0,276(sp)
8003cdd4:	afa30118 	sw	v1,280(sp)
8003cdd8:	afa2011c 	sw	v0,284(sp)
8003cddc:	afa10120 	sw	at,288(sp)
8003cde0:	afa900e4 	sw	t1,228(sp)
8003cde4:	afa800e0 	sw	t0,224(sp)
8003cde8:	a3a700ec 	sb	a3,236(sp)
8003cdec:	afa500e8 	sw	a1,232(sp)
8003cdf0:	afa400d0 	sw	a0,208(sp)
8003cdf4:	afa300d4 	sw	v1,212(sp)
8003cdf8:	afa200d8 	sw	v0,216(sp)
8003cdfc:	afa100dc 	sw	at,220(sp)
8003ce00:	8fa100b8 	lw	at,184(sp)
8003ce04:	afa10078 	sw	at,120(sp)
8003ce08:	8fa100b4 	lw	at,180(sp)
8003ce0c:	afa10074 	sw	at,116(sp)
8003ce10:	8fa100b0 	lw	at,176(sp)
8003ce14:	afa10070 	sw	at,112(sp)
8003ce18:	8fa100ac 	lw	at,172(sp)
8003ce1c:	afa1006c 	sw	at,108(sp)
8003ce20:	8fa100a8 	lw	at,168(sp)
8003ce24:	afa10068 	sw	at,104(sp)
8003ce28:	8fa100a4 	lw	at,164(sp)
8003ce2c:	afa10064 	sw	at,100(sp)
8003ce30:	8fa100a0 	lw	at,160(sp)
8003ce34:	afa10060 	sw	at,96(sp)
8003ce38:	8fa1009c 	lw	at,156(sp)
8003ce3c:	afa1005c 	sw	at,92(sp)
8003ce40:	8fa100ec 	lw	at,236(sp)
8003ce44:	afa10098 	sw	at,152(sp)
8003ce48:	8fa100e8 	lw	at,232(sp)
8003ce4c:	afa10094 	sw	at,148(sp)
8003ce50:	8fa100e4 	lw	at,228(sp)
8003ce54:	afa10090 	sw	at,144(sp)
8003ce58:	8fa100e0 	lw	at,224(sp)
8003ce5c:	afa1008c 	sw	at,140(sp)
8003ce60:	8fa100dc 	lw	at,220(sp)
8003ce64:	afa10088 	sw	at,136(sp)
8003ce68:	8fa100d8 	lw	at,216(sp)
8003ce6c:	afa10084 	sw	at,132(sp)
8003ce70:	8fa100d4 	lw	at,212(sp)
8003ce74:	afa10080 	sw	at,128(sp)
8003ce78:	8fa100d0 	lw	at,208(sp)
8003ce7c:	afa1007c 	sw	at,124(sp)
8003ce80:	03a00825 	move	at,sp
8003ce84:	ac260018 	sw	a2,24(at)
8003ce88:	27a2005c 	addiu	v0,sp,92
8003ce8c:	ac220014 	sw	v0,20(at)
8003ce90:	ac260010 	sw	a2,16(at)
8003ce94:	3c018108 	lui	at,0x8108
8003ce98:	2425b7d0 	addiu	a1,at,-18480
8003ce9c:	27a40034 	addiu	a0,sp,52
8003cea0:	afa40024 	sw	a0,36(sp)
8003cea4:	27a7004c 	addiu	a3,sp,76
8003cea8:	0c00fb5d 	jal	8003ed74 <_ZN4core3fmt9Arguments16new_v1_formatted17h81eef672d0f8327cE>
8003ceac:	00000000 	nop
8003ceb0:	8fa40024 	lw	a0,36(sp)
8003ceb4:	8fa60028 	lw	a2,40(sp)
8003ceb8:	24050000 	li	a1,0
    panic_nounwind_fmt(
8003cebc:	0c00f28a 	jal	8003ca28 <_ZN4core9panicking18panic_nounwind_fmt17hf69a56259d4ee080E>
8003cec0:	00000000 	nop

8003cec4 <_ZN4core9panicking13assert_failed17he51eb0fc731d6addE>:
/// Internal function for `assert_eq!` and `assert_ne!` macros
#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
#[cfg_attr(feature = "panic_immediate_abort", inline)]
#[track_caller]
#[doc(hidden)]
pub fn assert_failed<T, U>(
8003cec4:	27bdffb8 	addiu	sp,sp,-72
8003cec8:	8fa20058 	lw	v0,88(sp)
8003cecc:	afa50024 	sw	a1,36(sp)
8003ced0:	afa60028 	sw	a2,40(sp)
8003ced4:	a3a4002f 	sb	a0,47(sp)
) -> !
where
    T: fmt::Debug + ?Sized,
    U: fmt::Debug + ?Sized,
{
    assert_failed_inner(kind, &left, &right, args)
8003ced8:	8ce10014 	lw	at,20(a3)
8003cedc:	afa10044 	sw	at,68(sp)
8003cee0:	8ce10010 	lw	at,16(a3)
8003cee4:	afa10040 	sw	at,64(sp)
8003cee8:	8ce1000c 	lw	at,12(a3)
8003ceec:	afa1003c 	sw	at,60(sp)
8003cef0:	8ce10008 	lw	at,8(a3)
8003cef4:	afa10038 	sw	at,56(sp)
8003cef8:	8ce10004 	lw	at,4(a3)
8003cefc:	afa10034 	sw	at,52(sp)
8003cf00:	8ce10000 	lw	at,0(a3)
8003cf04:	afa10030 	sw	at,48(sp)
8003cf08:	03a00825 	move	at,sp
8003cf0c:	ac220018 	sw	v0,24(at)
8003cf10:	27a20030 	addiu	v0,sp,48
8003cf14:	ac220014 	sw	v0,20(at)
8003cf18:	3c028108 	lui	v0,0x8108
8003cf1c:	2446b7e0 	addiu	a2,v0,-18464
8003cf20:	ac260010 	sw	a2,16(at)
8003cf24:	27a50024 	addiu	a1,sp,36
8003cf28:	27a70028 	addiu	a3,sp,40
8003cf2c:	0c00f3cd 	jal	8003cf34 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE>
8003cf30:	00000000 	nop

8003cf34 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE>:

/// Non-generic version of the above functions, to avoid code bloat.
#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold)]
#[cfg_attr(feature = "panic_immediate_abort", inline)]
#[track_caller]
fn assert_failed_inner(
8003cf34:	27bdfea8 	addiu	sp,sp,-344
8003cf38:	afbf0154 	sw	ra,340(sp)
8003cf3c:	8fa10170 	lw	at,368(sp)
8003cf40:	afa10020 	sw	at,32(sp)
8003cf44:	8fa1016c 	lw	at,364(sp)
8003cf48:	afa10024 	sw	at,36(sp)
8003cf4c:	8fa10168 	lw	at,360(sp)
8003cf50:	a3a4002f 	sb	a0,47(sp)
8003cf54:	afa50030 	sw	a1,48(sp)
8003cf58:	afa60034 	sw	a2,52(sp)
8003cf5c:	afa70038 	sw	a3,56(sp)
8003cf60:	afa1003c 	sw	at,60(sp)
    kind: AssertKind,
    left: &dyn fmt::Debug,
    right: &dyn fmt::Debug,
    args: Option<fmt::Arguments<'_>>,
) -> ! {
    let op = match kind {
8003cf64:	93a1002f 	lbu	at,47(sp)
8003cf68:	afa10028 	sw	at,40(sp)
8003cf6c:	1020000c 	beqz	at,8003cfa0 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0x6c>
8003cf70:	00000000 	nop
8003cf74:	0800f3df 	j	8003cf7c <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0x48>
8003cf78:	00000000 	nop
8003cf7c:	8fa10028 	lw	at,40(sp)
8003cf80:	24020001 	li	v0,1
8003cf84:	1022000d 	beq	at,v0,8003cfbc <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0x88>
8003cf88:	00000000 	nop
8003cf8c:	0800f3e5 	j	8003cf94 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0x60>
8003cf90:	00000000 	nop
8003cf94:	0800f3f6 	j	8003cfd8 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0xa4>
8003cf98:	00000000 	nop
8003cf9c:	0000000d 	break
        AssertKind::Eq => "==",
8003cfa0:	3c018108 	lui	at,0x8108
8003cfa4:	2421b7f0 	addiu	at,at,-18448
8003cfa8:	afa10040 	sw	at,64(sp)
8003cfac:	24010002 	li	at,2
8003cfb0:	afa10044 	sw	at,68(sp)
8003cfb4:	0800f3fd 	j	8003cff4 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0xc0>
8003cfb8:	00000000 	nop
        AssertKind::Ne => "!=",
8003cfbc:	3c018108 	lui	at,0x8108
8003cfc0:	2421b7f2 	addiu	at,at,-18446
8003cfc4:	afa10040 	sw	at,64(sp)
8003cfc8:	24010002 	li	at,2
8003cfcc:	afa10044 	sw	at,68(sp)
8003cfd0:	0800f3fd 	j	8003cff4 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0xc0>
8003cfd4:	00000000 	nop
        AssertKind::Match => "matches",
8003cfd8:	3c018108 	lui	at,0x8108
8003cfdc:	2421b7f4 	addiu	at,at,-18444
8003cfe0:	afa10040 	sw	at,64(sp)
8003cfe4:	24010007 	li	at,7
8003cfe8:	afa10044 	sw	at,68(sp)
8003cfec:	0800f3fd 	j	8003cff4 <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0xc0>
8003cff0:	00000000 	nop
    };

    match args {
8003cff4:	8fa10024 	lw	at,36(sp)
8003cff8:	8c210000 	lw	at,0(at)
8003cffc:	14200033 	bnez	at,8003d0cc <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0x198>
8003d000:	00000000 	nop
8003d004:	0800f403 	j	8003d00c <_ZN4core9panicking19assert_failed_inner17hdea6a1579eab106dE+0xd8>
8003d008:	00000000 	nop
8003d00c:	27a20040 	addiu	v0,sp,64
8003d010:	afa200f0 	sw	v0,240(sp)
8003d014:	afa200fc 	sw	v0,252(sp)
8003d018:	3c018004 	lui	at,0x8004
8003d01c:	24217e68 	addiu	at,at,32360
8003d020:	afa10100 	sw	at,256(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003d024:	afa200f4 	sw	v0,244(sp)
8003d028:	afa100f8 	sw	at,248(sp)
    }
8003d02c:	8fa600f4 	lw	a2,244(sp)
8003d030:	8fa500f8 	lw	a1,248(sp)
8003d034:	27a20030 	addiu	v0,sp,48
8003d038:	afa20140 	sw	v0,320(sp)
8003d03c:	afa2014c 	sw	v0,332(sp)
8003d040:	3c018004 	lui	at,0x8004
8003d044:	24217e30 	addiu	at,at,32304
8003d048:	afa10150 	sw	at,336(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003d04c:	afa20144 	sw	v0,324(sp)
8003d050:	afa10148 	sw	at,328(sp)
    }
8003d054:	8fa40144 	lw	a0,324(sp)
8003d058:	8fa30148 	lw	v1,328(sp)
8003d05c:	27a20038 	addiu	v0,sp,56
8003d060:	afa2012c 	sw	v0,300(sp)
8003d064:	afa20138 	sw	v0,312(sp)
8003d068:	afa1013c 	sw	at,316(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003d06c:	afa20130 	sw	v0,304(sp)
8003d070:	afa10134 	sw	at,308(sp)
    }
8003d074:	8fa20130 	lw	v0,304(sp)
8003d078:	8fa10134 	lw	at,308(sp)
        Some(args) => panic!(
            r#"assertion `left {op} right` failed: {args}
  left: {left:?}
 right: {right:?}"#
        ),
        None => panic!(
8003d07c:	afa600b0 	sw	a2,176(sp)
8003d080:	afa500b4 	sw	a1,180(sp)
8003d084:	afa400b8 	sw	a0,184(sp)
8003d088:	afa300bc 	sw	v1,188(sp)
8003d08c:	afa200c0 	sw	v0,192(sp)
8003d090:	afa100c4 	sw	at,196(sp)
8003d094:	03a00825 	move	at,sp
8003d098:	24060003 	li	a2,3
8003d09c:	ac260010 	sw	a2,16(at)
8003d0a0:	3c018108 	lui	at,0x8108
8003d0a4:	2425b81c 	addiu	a1,at,-18404
8003d0a8:	27a40098 	addiu	a0,sp,152
8003d0ac:	afa4001c 	sw	a0,28(sp)
8003d0b0:	27a700b0 	addiu	a3,sp,176
8003d0b4:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8003d0b8:	00000000 	nop
8003d0bc:	8fa4001c 	lw	a0,28(sp)
8003d0c0:	8fa50020 	lw	a1,32(sp)
8003d0c4:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003d0c8:	00000000 	nop
        Some(args) => panic!(
8003d0cc:	8fa10024 	lw	at,36(sp)
8003d0d0:	8c220014 	lw	v0,20(at)
8003d0d4:	afa2005c 	sw	v0,92(sp)
8003d0d8:	8c220010 	lw	v0,16(at)
8003d0dc:	afa20058 	sw	v0,88(sp)
8003d0e0:	8c22000c 	lw	v0,12(at)
8003d0e4:	afa20054 	sw	v0,84(sp)
8003d0e8:	8c220008 	lw	v0,8(at)
8003d0ec:	afa20050 	sw	v0,80(sp)
8003d0f0:	8c220004 	lw	v0,4(at)
8003d0f4:	afa2004c 	sw	v0,76(sp)
8003d0f8:	8c210000 	lw	at,0(at)
8003d0fc:	afa10048 	sw	at,72(sp)
8003d100:	27a20040 	addiu	v0,sp,64
8003d104:	afa200dc 	sw	v0,220(sp)
8003d108:	afa200e8 	sw	v0,232(sp)
8003d10c:	3c018004 	lui	at,0x8004
8003d110:	24217e68 	addiu	at,at,32360
8003d114:	afa100ec 	sw	at,236(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003d118:	afa200e0 	sw	v0,224(sp)
8003d11c:	afa100e4 	sw	at,228(sp)
    }
8003d120:	8fa800e0 	lw	t0,224(sp)
8003d124:	8fa700e4 	lw	a3,228(sp)
8003d128:	27a20048 	addiu	v0,sp,72
8003d12c:	afa200c8 	sw	v0,200(sp)
8003d130:	afa200d4 	sw	v0,212(sp)
8003d134:	3c018004 	lui	at,0x8004
8003d138:	2421ef30 	addiu	at,at,-4304
8003d13c:	afa100d8 	sw	at,216(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003d140:	afa200cc 	sw	v0,204(sp)
8003d144:	afa100d0 	sw	at,208(sp)
    }
8003d148:	8fa600cc 	lw	a2,204(sp)
8003d14c:	8fa500d0 	lw	a1,208(sp)
8003d150:	27a20030 	addiu	v0,sp,48
8003d154:	afa20118 	sw	v0,280(sp)
8003d158:	afa20124 	sw	v0,292(sp)
8003d15c:	3c018004 	lui	at,0x8004
8003d160:	24217e30 	addiu	at,at,32304
8003d164:	afa10128 	sw	at,296(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003d168:	afa2011c 	sw	v0,284(sp)
8003d16c:	afa10120 	sw	at,288(sp)
    }
8003d170:	8fa4011c 	lw	a0,284(sp)
8003d174:	8fa30120 	lw	v1,288(sp)
8003d178:	27a20038 	addiu	v0,sp,56
8003d17c:	afa20104 	sw	v0,260(sp)
8003d180:	afa20110 	sw	v0,272(sp)
8003d184:	afa10114 	sw	at,276(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003d188:	afa20108 	sw	v0,264(sp)
8003d18c:	afa1010c 	sw	at,268(sp)
    }
8003d190:	8fa20108 	lw	v0,264(sp)
8003d194:	8fa1010c 	lw	at,268(sp)
8003d198:	afa80078 	sw	t0,120(sp)
8003d19c:	afa7007c 	sw	a3,124(sp)
8003d1a0:	afa60080 	sw	a2,128(sp)
8003d1a4:	afa50084 	sw	a1,132(sp)
8003d1a8:	afa40088 	sw	a0,136(sp)
8003d1ac:	afa3008c 	sw	v1,140(sp)
8003d1b0:	afa20090 	sw	v0,144(sp)
8003d1b4:	afa10094 	sw	at,148(sp)
8003d1b8:	03a00825 	move	at,sp
8003d1bc:	24060004 	li	a2,4
8003d1c0:	ac260010 	sw	a2,16(at)
8003d1c4:	3c018108 	lui	at,0x8108
8003d1c8:	2425b840 	addiu	a1,at,-18368
8003d1cc:	27a40060 	addiu	a0,sp,96
8003d1d0:	afa40018 	sw	a0,24(sp)
8003d1d4:	27a70078 	addiu	a3,sp,120
8003d1d8:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8003d1dc:	00000000 	nop
8003d1e0:	8fa40018 	lw	a0,24(sp)
8003d1e4:	8fa50020 	lw	a1,32(sp)
8003d1e8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003d1ec:	00000000 	nop

8003d1f0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7cdd383e0a27670eE>:
    pub const fn is_ok(&self) -> bool {
8003d1f0:	27bdfff8 	addiu	sp,sp,-8
8003d1f4:	afa40004 	sw	a0,4(sp)
        matches!(*self, Ok(_))
8003d1f8:	8c810000 	lw	at,0(a0)
8003d1fc:	3c020011 	lui	v0,0x11
8003d200:	10220007 	beq	at,v0,8003d220 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7cdd383e0a27670eE+0x30>
8003d204:	00000000 	nop
8003d208:	0800f484 	j	8003d210 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7cdd383e0a27670eE+0x20>
8003d20c:	00000000 	nop
8003d210:	24010001 	li	at,1
8003d214:	a3a10003 	sb	at,3(sp)
8003d218:	0800f48c 	j	8003d230 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7cdd383e0a27670eE+0x40>
8003d21c:	00000000 	nop
8003d220:	24010000 	li	at,0
8003d224:	a3a00003 	sb	zero,3(sp)
8003d228:	0800f48c 	j	8003d230 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7cdd383e0a27670eE+0x40>
8003d22c:	00000000 	nop
    }
8003d230:	93a10003 	lbu	at,3(sp)
8003d234:	30220001 	andi	v0,at,0x1
8003d238:	27bd0008 	addiu	sp,sp,8
8003d23c:	03e00008 	jr	ra
8003d240:	00000000 	nop

8003d244 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E>:
    pub fn ok(self) -> Option<T> {
8003d244:	27bdfff8 	addiu	sp,sp,-8
8003d248:	afa40000 	sw	a0,0(sp)
        match self {
8003d24c:	8fa10000 	lw	at,0(sp)
8003d250:	14200007 	bnez	at,8003d270 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E+0x2c>
8003d254:	00000000 	nop
8003d258:	0800f498 	j	8003d260 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E+0x1c>
8003d25c:	00000000 	nop
8003d260:	24010001 	li	at,1
            Ok(x) => Some(x),
8003d264:	a3a10006 	sb	at,6(sp)
8003d268:	0800f4a0 	j	8003d280 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E+0x3c>
8003d26c:	00000000 	nop
8003d270:	24010000 	li	at,0
            Err(_) => None,
8003d274:	a3a00006 	sb	zero,6(sp)
8003d278:	0800f4a0 	j	8003d280 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E+0x3c>
8003d27c:	00000000 	nop
    }
8003d280:	8fa10000 	lw	at,0(sp)
8003d284:	14200008 	bnez	at,8003d2a8 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E+0x64>
8003d288:	00000000 	nop
8003d28c:	0800f4a5 	j	8003d294 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E+0x50>
8003d290:	00000000 	nop
8003d294:	93a10006 	lbu	at,6(sp)
8003d298:	30220001 	andi	v0,at,0x1
8003d29c:	27bd0008 	addiu	sp,sp,8
8003d2a0:	03e00008 	jr	ra
8003d2a4:	00000000 	nop
8003d2a8:	0800f4a5 	j	8003d294 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he6847d657d532af4E+0x50>
8003d2ac:	00000000 	nop

8003d2b0 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E>:
    pub fn and_then<U, F: FnOnce(T) -> Result<U, E>>(self, op: F) -> Result<U, E> {
8003d2b0:	27bdffd8 	addiu	sp,sp,-40
8003d2b4:	afbf0024 	sw	ra,36(sp)
8003d2b8:	afa50014 	sw	a1,20(sp)
8003d2bc:	a3a40019 	sb	a0,25(sp)
8003d2c0:	afa5001c 	sw	a1,28(sp)
8003d2c4:	24010000 	li	at,0
        match self {
8003d2c8:	a3a0001b 	sb	zero,27(sp)
8003d2cc:	24010001 	li	at,1
8003d2d0:	a3a1001b 	sb	at,27(sp)
8003d2d4:	93a10019 	lbu	at,25(sp)
8003d2d8:	30210001 	andi	at,at,0x1
8003d2dc:	1420000b 	bnez	at,8003d30c <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E+0x5c>
8003d2e0:	00000000 	nop
8003d2e4:	0800f4bb 	j	8003d2ec <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E+0x3c>
8003d2e8:	00000000 	nop
8003d2ec:	8fa40014 	lw	a0,20(sp)
8003d2f0:	24010000 	li	at,0
            Ok(t) => op(t),
8003d2f4:	a3a0001b 	sb	zero,27(sp)
8003d2f8:	0c00f5ba 	jal	8003d6e8 <_ZN4core3fmt8builders11DebugStruct6finish28_$u7b$$u7b$closure$u7d$$u7d$17hd19a7b2238e1cd62E>
8003d2fc:	00000000 	nop
8003d300:	a3a2001a 	sb	v0,26(sp)
8003d304:	0800f4c7 	j	8003d31c <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E+0x6c>
8003d308:	00000000 	nop
8003d30c:	24010001 	li	at,1
            Err(e) => Err(e),
8003d310:	a3a1001a 	sb	at,26(sp)
8003d314:	0800f4c7 	j	8003d31c <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E+0x6c>
8003d318:	00000000 	nop
    }
8003d31c:	93a1001b 	lbu	at,27(sp)
8003d320:	30210001 	andi	at,at,0x1
8003d324:	14200009 	bnez	at,8003d34c <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E+0x9c>
8003d328:	00000000 	nop
8003d32c:	0800f4cd 	j	8003d334 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E+0x84>
8003d330:	00000000 	nop
8003d334:	93a1001a 	lbu	at,26(sp)
8003d338:	30220001 	andi	v0,at,0x1
8003d33c:	8fbf0024 	lw	ra,36(sp)
8003d340:	27bd0028 	addiu	sp,sp,40
8003d344:	03e00008 	jr	ra
8003d348:	00000000 	nop
8003d34c:	0800f4cd 	j	8003d334 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E+0x84>
8003d350:	00000000 	nop

8003d354 <_ZN4core6result13unwrap_failed17hfa77adfd139575f4E>:
fn unwrap_failed(msg: &str, error: &dyn fmt::Debug) -> ! {
8003d354:	27bdff78 	addiu	sp,sp,-136
8003d358:	afbf0084 	sw	ra,132(sp)
8003d35c:	8fa10098 	lw	at,152(sp)
8003d360:	afa10020 	sw	at,32(sp)
8003d364:	afa40024 	sw	a0,36(sp)
8003d368:	afa50028 	sw	a1,40(sp)
8003d36c:	afa6002c 	sw	a2,44(sp)
8003d370:	afa70030 	sw	a3,48(sp)
8003d374:	27a20024 	addiu	v0,sp,36
8003d378:	afa2005c 	sw	v0,92(sp)
8003d37c:	afa20068 	sw	v0,104(sp)
8003d380:	3c018004 	lui	at,0x8004
8003d384:	24217e68 	addiu	at,at,32360
8003d388:	afa1006c 	sw	at,108(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003d38c:	afa20060 	sw	v0,96(sp)
8003d390:	afa10064 	sw	at,100(sp)
    }
8003d394:	8fa40060 	lw	a0,96(sp)
8003d398:	8fa30064 	lw	v1,100(sp)
8003d39c:	27a2002c 	addiu	v0,sp,44
8003d3a0:	afa20070 	sw	v0,112(sp)
8003d3a4:	afa2007c 	sw	v0,124(sp)
8003d3a8:	3c018004 	lui	at,0x8004
8003d3ac:	24217e30 	addiu	at,at,32304
8003d3b0:	afa10080 	sw	at,128(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8003d3b4:	afa20074 	sw	v0,116(sp)
8003d3b8:	afa10078 	sw	at,120(sp)
    }
8003d3bc:	8fa20074 	lw	v0,116(sp)
8003d3c0:	8fa10078 	lw	at,120(sp)
    panic!("{msg}: {error:?}")
8003d3c4:	afa4004c 	sw	a0,76(sp)
8003d3c8:	afa30050 	sw	v1,80(sp)
8003d3cc:	afa20054 	sw	v0,84(sp)
8003d3d0:	afa10058 	sw	at,88(sp)
8003d3d4:	03a00825 	move	at,sp
8003d3d8:	24060002 	li	a2,2
8003d3dc:	ac260010 	sw	a2,16(at)
8003d3e0:	3c018108 	lui	at,0x8108
8003d3e4:	2425b864 	addiu	a1,at,-18332
8003d3e8:	27a40034 	addiu	a0,sp,52
8003d3ec:	afa4001c 	sw	a0,28(sp)
8003d3f0:	27a7004c 	addiu	a3,sp,76
8003d3f4:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8003d3f8:	00000000 	nop
8003d3fc:	8fa4001c 	lw	a0,28(sp)
8003d400:	8fa50020 	lw	a1,32(sp)
8003d404:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003d408:	00000000 	nop

8003d40c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003d40c:	27bdffe0 	addiu	sp,sp,-32
8003d410:	afa40004 	sw	a0,4(sp)
8003d414:	afa50008 	sw	a1,8(sp)
        match self {
8003d418:	8fa10004 	lw	at,4(sp)
8003d41c:	3c020011 	lui	v0,0x11
8003d420:	1022000b 	beq	at,v0,8003d450 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE+0x44>
8003d424:	00000000 	nop
8003d428:	0800f50c 	j	8003d430 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE+0x24>
8003d42c:	00000000 	nop
            Ok(v) => ControlFlow::Continue(v),
8003d430:	8fa20004 	lw	v0,4(sp)
8003d434:	8fa10008 	lw	at,8(sp)
8003d438:	afa20018 	sw	v0,24(sp)
8003d43c:	afa1001c 	sw	at,28(sp)
8003d440:	afa2000c 	sw	v0,12(sp)
8003d444:	afa10010 	sw	at,16(sp)
8003d448:	0800f518 	j	8003d460 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE+0x54>
8003d44c:	00000000 	nop
8003d450:	3c010011 	lui	at,0x11
            Err(e) => ControlFlow::Break(Err(e)),
8003d454:	afa1000c 	sw	at,12(sp)
8003d458:	0800f518 	j	8003d460 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE+0x54>
8003d45c:	00000000 	nop
    }
8003d460:	8fa2000c 	lw	v0,12(sp)
8003d464:	8fa30010 	lw	v1,16(sp)
8003d468:	27bd0020 	addiu	sp,sp,32
8003d46c:	03e00008 	jr	ra
8003d470:	00000000 	nop

8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8003d474:	27bdfff8 	addiu	sp,sp,-8
8003d478:	a3a40004 	sb	a0,4(sp)
        match self {
8003d47c:	93a10004 	lbu	at,4(sp)
8003d480:	30210001 	andi	at,at,0x1
8003d484:	14200007 	bnez	at,8003d4a4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E+0x30>
8003d488:	00000000 	nop
8003d48c:	0800f525 	j	8003d494 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E+0x20>
8003d490:	00000000 	nop
8003d494:	24010000 	li	at,0
            Ok(v) => ControlFlow::Continue(v),
8003d498:	a3a00005 	sb	zero,5(sp)
8003d49c:	0800f52d 	j	8003d4b4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E+0x40>
8003d4a0:	00000000 	nop
8003d4a4:	24010001 	li	at,1
            Err(e) => ControlFlow::Break(Err(e)),
8003d4a8:	a3a10005 	sb	at,5(sp)
8003d4ac:	0800f52d 	j	8003d4b4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E+0x40>
8003d4b0:	00000000 	nop
    }
8003d4b4:	93a10005 	lbu	at,5(sp)
8003d4b8:	30220001 	andi	v0,at,0x1
8003d4bc:	27bd0008 	addiu	sp,sp,8
8003d4c0:	03e00008 	jr	ra
8003d4c4:	00000000 	nop

8003d4c8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h5e97ed1aef6b568cE>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
8003d4c8:	27bdfff0 	addiu	sp,sp,-16
8003d4cc:	3c010011 	lui	at,0x11
            Err(e) => Err(From::from(e)),
8003d4d0:	afa10004 	sw	at,4(sp)
    }
8003d4d4:	8fa20004 	lw	v0,4(sp)
8003d4d8:	8fa30008 	lw	v1,8(sp)
8003d4dc:	27bd0010 	addiu	sp,sp,16
8003d4e0:	03e00008 	jr	ra
8003d4e4:	00000000 	nop

8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
8003d4e8:	27bdfff8 	addiu	sp,sp,-8
8003d4ec:	24010001 	li	at,1
            Err(e) => Err(From::from(e)),
8003d4f0:	a3a10005 	sb	at,5(sp)
    }
8003d4f4:	93a10005 	lbu	at,5(sp)
8003d4f8:	30220001 	andi	v0,at,0x1
8003d4fc:	27bd0008 	addiu	sp,sp,8
8003d500:	03e00008 	jr	ra
8003d504:	00000000 	nop

8003d508 <_ZN4core4sync6atomic11atomic_load17h79b9762b4806e280E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
8003d508:	27bdffa0 	addiu	sp,sp,-96
8003d50c:	afbf005c 	sw	ra,92(sp)
8003d510:	afa40018 	sw	a0,24(sp)
8003d514:	a3a50023 	sb	a1,35(sp)
8003d518:	afa40058 	sw	a0,88(sp)
        match order {
8003d51c:	93a10023 	lbu	at,35(sp)
8003d520:	afa1001c 	sw	at,28(sp)
8003d524:	8fa1001c 	lw	at,28(sp)
8003d528:	00010880 	sll	at,at,0x2
8003d52c:	3c028108 	lui	v0,0x8108
8003d530:	00220821 	addu	at,at,v0
8003d534:	8c21af10 	lw	at,-20720(at)
8003d538:	00200008 	jr	at
8003d53c:	00000000 	nop
8003d540:	0000000d 	break
            Relaxed => intrinsics::atomic_load_relaxed(dst),
8003d544:	8fa10018 	lw	at,24(sp)
8003d548:	8c210000 	lw	at,0(at)
8003d54c:	afa10024 	sw	at,36(sp)
8003d550:	0800f57a 	j	8003d5e8 <_ZN4core4sync6atomic11atomic_load17h79b9762b4806e280E+0xe0>
8003d554:	00000000 	nop
            Release => panic!("there is no such thing as a release load"),
8003d558:	3c018108 	lui	at,0x8108
8003d55c:	2425b89c 	addiu	a1,at,-18276
8003d560:	27a40028 	addiu	a0,sp,40
8003d564:	afa40014 	sw	a0,20(sp)
8003d568:	24060001 	li	a2,1
8003d56c:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003d570:	00000000 	nop
8003d574:	8fa40014 	lw	a0,20(sp)
8003d578:	3c018108 	lui	at,0x8108
8003d57c:	2425b918 	addiu	a1,at,-18152
8003d580:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003d584:	00000000 	nop
            Acquire => intrinsics::atomic_load_acquire(dst),
8003d588:	8fa10018 	lw	at,24(sp)
8003d58c:	8c210000 	lw	at,0(at)
8003d590:	0000000f 	sync
8003d594:	afa10024 	sw	at,36(sp)
8003d598:	0800f57a 	j	8003d5e8 <_ZN4core4sync6atomic11atomic_load17h79b9762b4806e280E+0xe0>
8003d59c:	00000000 	nop
            AcqRel => panic!("there is no such thing as an acquire-release load"),
8003d5a0:	3c018108 	lui	at,0x8108
8003d5a4:	2425b95c 	addiu	a1,at,-18084
8003d5a8:	27a40040 	addiu	a0,sp,64
8003d5ac:	afa40010 	sw	a0,16(sp)
8003d5b0:	24060001 	li	a2,1
8003d5b4:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003d5b8:	00000000 	nop
8003d5bc:	8fa40010 	lw	a0,16(sp)
8003d5c0:	3c018108 	lui	at,0x8108
8003d5c4:	2425b964 	addiu	a1,at,-18076
8003d5c8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003d5cc:	00000000 	nop
            SeqCst => intrinsics::atomic_load_seqcst(dst),
8003d5d0:	8fa10018 	lw	at,24(sp)
8003d5d4:	8c210000 	lw	at,0(at)
8003d5d8:	0000000f 	sync
8003d5dc:	afa10024 	sw	at,36(sp)
8003d5e0:	0800f57a 	j	8003d5e8 <_ZN4core4sync6atomic11atomic_load17h79b9762b4806e280E+0xe0>
8003d5e4:	00000000 	nop
}
8003d5e8:	8fa20024 	lw	v0,36(sp)
8003d5ec:	8fbf005c 	lw	ra,92(sp)
8003d5f0:	27bd0060 	addiu	sp,sp,96
8003d5f4:	03e00008 	jr	ra
8003d5f8:	00000000 	nop

8003d5fc <_ZN4core3fmt8builders16debug_struct_new17h94cb061567626803E>:
    fmt: &'a mut fmt::Formatter<'b>,
    result: fmt::Result,
    has_fields: bool,
}

pub(super) fn debug_struct_new<'a, 'b>(
8003d5fc:	27bdffc8 	addiu	sp,sp,-56
8003d600:	afbf0034 	sw	ra,52(sp)
8003d604:	afa70010 	sw	a3,16(sp)
8003d608:	00c00825 	move	at,a2
8003d60c:	8fa60010 	lw	a2,16(sp)
8003d610:	afa10014 	sw	at,20(sp)
8003d614:	00a00825 	move	at,a1
8003d618:	8fa50014 	lw	a1,20(sp)
8003d61c:	afa10018 	sw	at,24(sp)
8003d620:	00800825 	move	at,a0
8003d624:	8fa40018 	lw	a0,24(sp)
8003d628:	afa1001c 	sw	at,28(sp)
8003d62c:	afa10020 	sw	at,32(sp)
8003d630:	afa40024 	sw	a0,36(sp)
8003d634:	afa50028 	sw	a1,40(sp)
8003d638:	afa6002c 	sw	a2,44(sp)
    fmt: &'a mut fmt::Formatter<'b>,
    name: &str,
) -> DebugStruct<'a, 'b> {
    let result = fmt.write_str(name);
8003d63c:	0c01017c 	jal	800405f0 <_ZN4core3fmt9Formatter9write_str17h2077d209297f8673E>
8003d640:	00000000 	nop
8003d644:	8fa50018 	lw	a1,24(sp)
8003d648:	8fa4001c 	lw	a0,28(sp)
8003d64c:	00400825 	move	at,v0
8003d650:	8fa20020 	lw	v0,32(sp)
8003d654:	a3a10033 	sb	at,51(sp)
    DebugStruct { fmt, result, has_fields: false }
8003d658:	ac850000 	sw	a1,0(a0)
8003d65c:	a0810004 	sb	at,4(a0)
8003d660:	24010000 	li	at,0
8003d664:	a0800005 	sb	zero,5(a0)
}
8003d668:	8fbf0034 	lw	ra,52(sp)
8003d66c:	27bd0038 	addiu	sp,sp,56
8003d670:	03e00008 	jr	ra
8003d674:	00000000 	nop

8003d678 <_ZN4core3fmt8builders11DebugStruct6finish17h7cc9f15e92184c03E>:
    ///     format!("{:?}", Bar { bar: 10, baz: "Hello World".to_string() }),
    ///     "Bar { bar: 10, baz: \"Hello World\" }",
    /// );
    /// ```
    #[stable(feature = "debug_builders", since = "1.2.0")]
    pub fn finish(&mut self) -> fmt::Result {
8003d678:	27bdffe0 	addiu	sp,sp,-32
8003d67c:	afbf001c 	sw	ra,28(sp)
8003d680:	afa40010 	sw	a0,16(sp)
8003d684:	afa40018 	sw	a0,24(sp)
        if self.has_fields {
8003d688:	90810005 	lbu	at,5(a0)
8003d68c:	30210001 	andi	at,at,0x1
8003d690:	1420000a 	bnez	at,8003d6bc <_ZN4core3fmt8builders11DebugStruct6finish17h7cc9f15e92184c03E+0x44>
8003d694:	00000000 	nop
8003d698:	0800f5a8 	j	8003d6a0 <_ZN4core3fmt8builders11DebugStruct6finish17h7cc9f15e92184c03E+0x28>
8003d69c:	00000000 	nop
            self.result = self.result.and_then(|_| {
                if self.is_pretty() { self.fmt.write_str("}") } else { self.fmt.write_str(" }") }
            });
        }
        self.result
    }
8003d6a0:	8fa10010 	lw	at,16(sp)
8003d6a4:	90210004 	lbu	at,4(at)
8003d6a8:	30220001 	andi	v0,at,0x1
8003d6ac:	8fbf001c 	lw	ra,28(sp)
8003d6b0:	27bd0020 	addiu	sp,sp,32
8003d6b4:	03e00008 	jr	ra
8003d6b8:	00000000 	nop
            self.result = self.result.and_then(|_| {
8003d6bc:	8fa20010 	lw	v0,16(sp)
8003d6c0:	90410004 	lbu	at,4(v0)
8003d6c4:	afa20014 	sw	v0,20(sp)
8003d6c8:	8fa50014 	lw	a1,20(sp)
8003d6cc:	30240001 	andi	a0,at,0x1
8003d6d0:	0c00f4ac 	jal	8003d2b0 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h129f51582373e2a1E>
8003d6d4:	00000000 	nop
8003d6d8:	8fa10010 	lw	at,16(sp)
8003d6dc:	a0220004 	sb	v0,4(at)
        if self.has_fields {
8003d6e0:	0800f5a8 	j	8003d6a0 <_ZN4core3fmt8builders11DebugStruct6finish17h7cc9f15e92184c03E+0x28>
8003d6e4:	00000000 	nop

8003d6e8 <_ZN4core3fmt8builders11DebugStruct6finish28_$u7b$$u7b$closure$u7d$$u7d$17hd19a7b2238e1cd62E>:
            self.result = self.result.and_then(|_| {
8003d6e8:	27bdffe0 	addiu	sp,sp,-32
8003d6ec:	afbf001c 	sw	ra,28(sp)
8003d6f0:	afa40014 	sw	a0,20(sp)
                if self.is_pretty() { self.fmt.write_str("}") } else { self.fmt.write_str(" }") }
8003d6f4:	8fa40014 	lw	a0,20(sp)
8003d6f8:	0c00f5de 	jal	8003d778 <_ZN4core3fmt8builders11DebugStruct9is_pretty17hbf5ac35705fdbf81E>
8003d6fc:	00000000 	nop
8003d700:	1440000d 	bnez	v0,8003d738 <_ZN4core3fmt8builders11DebugStruct6finish28_$u7b$$u7b$closure$u7d$$u7d$17hd19a7b2238e1cd62E+0x50>
8003d704:	00000000 	nop
8003d708:	0800f5c4 	j	8003d710 <_ZN4core3fmt8builders11DebugStruct6finish28_$u7b$$u7b$closure$u7d$$u7d$17hd19a7b2238e1cd62E+0x28>
8003d70c:	00000000 	nop
8003d710:	8fa10014 	lw	at,20(sp)
8003d714:	8c240000 	lw	a0,0(at)
8003d718:	3c018108 	lui	at,0x8108
8003d71c:	2425b975 	addiu	a1,at,-18059
8003d720:	24060002 	li	a2,2
8003d724:	0c01017c 	jal	800405f0 <_ZN4core3fmt9Formatter9write_str17h2077d209297f8673E>
8003d728:	00000000 	nop
8003d72c:	a3a2001a 	sb	v0,26(sp)
8003d730:	0800f5d8 	j	8003d760 <_ZN4core3fmt8builders11DebugStruct6finish28_$u7b$$u7b$closure$u7d$$u7d$17hd19a7b2238e1cd62E+0x78>
8003d734:	00000000 	nop
8003d738:	8fa10014 	lw	at,20(sp)
8003d73c:	8c240000 	lw	a0,0(at)
8003d740:	3c018108 	lui	at,0x8108
8003d744:	2425b974 	addiu	a1,at,-18060
8003d748:	24060001 	li	a2,1
8003d74c:	0c01017c 	jal	800405f0 <_ZN4core3fmt9Formatter9write_str17h2077d209297f8673E>
8003d750:	00000000 	nop
8003d754:	a3a2001a 	sb	v0,26(sp)
8003d758:	0800f5d8 	j	8003d760 <_ZN4core3fmt8builders11DebugStruct6finish28_$u7b$$u7b$closure$u7d$$u7d$17hd19a7b2238e1cd62E+0x78>
8003d75c:	00000000 	nop
            });
8003d760:	93a1001a 	lbu	at,26(sp)
8003d764:	30220001 	andi	v0,at,0x1
8003d768:	8fbf001c 	lw	ra,28(sp)
8003d76c:	27bd0020 	addiu	sp,sp,32
8003d770:	03e00008 	jr	ra
8003d774:	00000000 	nop

8003d778 <_ZN4core3fmt8builders11DebugStruct9is_pretty17hbf5ac35705fdbf81E>:

    fn is_pretty(&self) -> bool {
8003d778:	27bdffe8 	addiu	sp,sp,-24
8003d77c:	afbf0014 	sw	ra,20(sp)
8003d780:	afa40010 	sw	a0,16(sp)
        self.fmt.alternate()
8003d784:	8c840000 	lw	a0,0(a0)
8003d788:	0c0101cb 	jal	8004072c <_ZN4core3fmt9Formatter9alternate17h2b08e2c940b48bcaE>
8003d78c:	00000000 	nop
    }
8003d790:	8fbf0014 	lw	ra,20(sp)
8003d794:	27bd0018 	addiu	sp,sp,24
8003d798:	03e00008 	jr	ra
8003d79c:	00000000 	nop

8003d7a0 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE>:

    /// Converts an integer to corresponding radix digit.
    fn digit(x: u8) -> u8;

    /// Format an integer using the radix using a formatter.
    fn fmt_int<T: DisplayInt>(&self, mut x: T, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8003d7a0:	27bdfea8 	addiu	sp,sp,-344
8003d7a4:	afbf0154 	sw	ra,340(sp)
8003d7a8:	afa6002c 	sw	a2,44(sp)
8003d7ac:	a3a50042 	sb	a1,66(sp)
8003d7b0:	afa400ec 	sw	a0,236(sp)
8003d7b4:	afa600f0 	sw	a2,240(sp)
        // The radix can be as low as 2, so we need a buffer of at least 128
        // characters for a base 2 number.
        let zero = T::zero();
8003d7b8:	0c011b8c 	jal	80046e30 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h4faa43391429b7caE>
8003d7bc:	00000000 	nop
8003d7c0:	a3a20043 	sb	v0,67(sp)
8003d7c4:	27a10042 	addiu	at,sp,66
8003d7c8:	afa1014c 	sw	at,332(sp)
8003d7cc:	27a10043 	addiu	at,sp,67
8003d7d0:	afa10150 	sw	at,336(sp)
                #[inline(always)]
                fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
                #[inline(always)]
                fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
8003d7d4:	93a10042 	lbu	at,66(sp)
8003d7d8:	93a20043 	lbu	v0,67(sp)
8003d7dc:	0022082b 	sltu	at,at,v0
8003d7e0:	afa10038 	sw	at,56(sp)
8003d7e4:	38210001 	xori	at,at,0x1
8003d7e8:	afa10030 	sw	at,48(sp)
        let is_nonnegative = x >= zero;
8003d7ec:	a3a100f6 	sb	at,246(sp)
        let mut buf = [MaybeUninit::<u8>::uninit(); 128];
8003d7f0:	93a50113 	lbu	a1,275(sp)
8003d7f4:	27a40044 	addiu	a0,sp,68
8003d7f8:	24060080 	li	a2,128
8003d7fc:	afa60034 	sw	a2,52(sp)
8003d800:	0c00d47d 	jal	800351f4 <memset>
8003d804:	00000000 	nop
8003d808:	8fa10034 	lw	at,52(sp)
        let mut curr = buf.len();
8003d80c:	afa100c4 	sw	at,196(sp)
8003d810:	24040010 	li	a0,16
        let base = T::from_u8(Self::BASE);
8003d814:	0c011b8f 	jal	80046e3c <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817hde776fb7bbe296d4E>
8003d818:	00000000 	nop
8003d81c:	8fa10038 	lw	at,56(sp)
8003d820:	00401825 	move	v1,v0
8003d824:	afa3003c 	sw	v1,60(sp)
8003d828:	a3a200f7 	sb	v0,247(sp)
        if is_nonnegative {
8003d82c:	10200013 	beqz	at,8003d87c <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0xdc>
8003d830:	00000000 	nop
8003d834:	0800f60f 	j	8003d83c <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x9c>
8003d838:	00000000 	nop
8003d83c:	27a40044 	addiu	a0,sp,68
8003d840:	24050080 	li	a1,128
                    break;
                };
            }
        } else {
            // Do the same as above, but accounting for two's complement.
            for byte in buf.iter_mut().rev() {
8003d844:	0c010970 	jal	800425c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
8003d848:	00000000 	nop
8003d84c:	00402025 	move	a0,v0
8003d850:	00602825 	move	a1,v1
8003d854:	0c00efe8 	jal	8003bfa0 <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
8003d858:	00000000 	nop
8003d85c:	00402025 	move	a0,v0
8003d860:	00602825 	move	a1,v1
8003d864:	0c00ef3d 	jal	8003bcf4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
8003d868:	00000000 	nop
8003d86c:	afa200d8 	sw	v0,216(sp)
8003d870:	afa300dc 	sw	v1,220(sp)
8003d874:	0800f62f 	j	8003d8bc <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x11c>
8003d878:	00000000 	nop
8003d87c:	27a40044 	addiu	a0,sp,68
8003d880:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
8003d884:	0c010970 	jal	800425c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
8003d888:	00000000 	nop
8003d88c:	00402025 	move	a0,v0
8003d890:	00602825 	move	a1,v1
8003d894:	0c00efe8 	jal	8003bfa0 <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
8003d898:	00000000 	nop
8003d89c:	00402025 	move	a0,v0
8003d8a0:	00602825 	move	a1,v1
8003d8a4:	0c00ef3d 	jal	8003bcf4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
8003d8a8:	00000000 	nop
8003d8ac:	afa200c8 	sw	v0,200(sp)
8003d8b0:	afa300cc 	sw	v1,204(sp)
8003d8b4:	0800f6a0 	j	8003da80 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x2e0>
8003d8b8:	00000000 	nop
8003d8bc:	27a400d8 	addiu	a0,sp,216
            for byte in buf.iter_mut().rev() {
8003d8c0:	0c00ee9c 	jal	8003ba70 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
8003d8c4:	00000000 	nop
8003d8c8:	afa200e0 	sw	v0,224(sp)
8003d8cc:	8fa100e0 	lw	at,224(sp)
8003d8d0:	1420002b 	bnez	at,8003d980 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x1e0>
8003d8d4:	00000000 	nop
8003d8d8:	0800f638 	j	8003d8e0 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x140>
8003d8dc:	00000000 	nop
                    // No more digits left to accumulate.
                    break;
                };
            }
        }
        let buf = &buf[curr..];
8003d8e0:	8fa100c4 	lw	at,196(sp)
8003d8e4:	afa100e8 	sw	at,232(sp)
8003d8e8:	8fa500e8 	lw	a1,232(sp)
8003d8ec:	3c018108 	lui	at,0x8108
8003d8f0:	2426ba54 	addiu	a2,at,-17836
8003d8f4:	27a40044 	addiu	a0,sp,68
8003d8f8:	0c00ead0 	jal	8003ab40 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hfa0288d626a253cbE>
8003d8fc:	00000000 	nop
8003d900:	00402025 	move	a0,v0
8003d904:	00602825 	move	a1,v1
8003d908:	afa40100 	sw	a0,256(sp)
8003d90c:	afa50104 	sw	a1,260(sp)
8003d910:	afa4013c 	sw	a0,316(sp)
8003d914:	afa50140 	sw	a1,320(sp)
8003d918:	afa40144 	sw	a0,324(sp)
8003d91c:	afa50148 	sw	a1,328(sp)
        // SAFETY: The only chars in `buf` are created by `Self::digit` which are assumed to be
        // valid UTF-8
        let buf = unsafe {
            str::from_utf8_unchecked(slice::from_raw_parts(
8003d920:	0c01089b 	jal	8004226c <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
8003d924:	00000000 	nop
8003d928:	00402025 	move	a0,v0
8003d92c:	00602825 	move	a1,v1
8003d930:	0c010d19 	jal	80043464 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>
8003d934:	00000000 	nop
8003d938:	8fa10030 	lw	at,48(sp)
8003d93c:	8fa4002c 	lw	a0,44(sp)
8003d940:	00602825 	move	a1,v1
8003d944:	afa20108 	sw	v0,264(sp)
8003d948:	afa5010c 	sw	a1,268(sp)
                MaybeUninit::slice_as_ptr(buf),
                buf.len(),
            ))
        };
        f.pad_integral(is_nonnegative, Self::PREFIX, buf)
8003d94c:	03a01825 	move	v1,sp
8003d950:	ac650014 	sw	a1,20(v1)
8003d954:	ac620010 	sw	v0,16(v1)
8003d958:	30250001 	andi	a1,at,0x1
8003d95c:	3c018108 	lui	at,0x8108
8003d960:	2426ba64 	addiu	a2,at,-17820
8003d964:	24070002 	li	a3,2
8003d968:	0c00fdfe 	jal	8003f7f8 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E>
8003d96c:	00000000 	nop
    }
8003d970:	8fbf0154 	lw	ra,340(sp)
8003d974:	27bd0158 	addiu	sp,sp,344
8003d978:	03e00008 	jr	ra
8003d97c:	00000000 	nop
            for byte in buf.iter_mut().rev() {
8003d980:	8fa5003c 	lw	a1,60(sp)
8003d984:	8fa100e0 	lw	at,224(sp)
8003d988:	afa10024 	sw	at,36(sp)
8003d98c:	afa100f8 	sw	at,248(sp)
                let n = zero - (x % base); // Get the current place value.
8003d990:	93a40042 	lbu	a0,66(sp)
8003d994:	93a10043 	lbu	at,67(sp)
8003d998:	afa10020 	sw	at,32(sp)
8003d99c:	3c018108 	lui	at,0x8108
8003d9a0:	2426b9e4 	addiu	a2,at,-17948
8003d9a4:	0c011a88 	jal	80046a20 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Rem$GT$3rem17hcf0699d134763680E>
8003d9a8:	00000000 	nop
8003d9ac:	8fa40020 	lw	a0,32(sp)
8003d9b0:	00402825 	move	a1,v0
8003d9b4:	3c018108 	lui	at,0x8108
8003d9b8:	2426b9f4 	addiu	a2,at,-17932
8003d9bc:	0c011a09 	jal	80046824 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9d08ad2c426c5534E>
8003d9c0:	00000000 	nop
8003d9c4:	8fa5003c 	lw	a1,60(sp)
8003d9c8:	a3a200e7 	sb	v0,231(sp)
                x = x / base; // Deaccumulate the number.
8003d9cc:	93a40042 	lbu	a0,66(sp)
8003d9d0:	3c018108 	lui	at,0x8108
8003d9d4:	2426ba04 	addiu	a2,at,-17916
8003d9d8:	0c011a44 	jal	80046910 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Div$GT$3div17h8c44f7b15731be55E>
8003d9dc:	00000000 	nop
8003d9e0:	a3a20042 	sb	v0,66(sp)
8003d9e4:	27a400e7 	addiu	a0,sp,231
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
8003d9e8:	0c011b95 	jal	80046e54 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817hdb1dd13bcbe6748fE>
8003d9ec:	00000000 	nop
8003d9f0:	00402025 	move	a0,v0
8003d9f4:	0c011bcb 	jal	80046f2c <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E>
8003d9f8:	00000000 	nop
8003d9fc:	8fa10024 	lw	at,36(sp)
8003da00:	afa10120 	sw	at,288(sp)
8003da04:	a3a20127 	sb	v0,295(sp)
8003da08:	a3a20129 	sb	v0,297(sp)
8003da0c:	a3a2012b 	sb	v0,299(sp)
        ManuallyDrop { value }
8003da10:	a3a2012a 	sb	v0,298(sp)
    }
8003da14:	93a2012a 	lbu	v0,298(sp)
    #[stable(feature = "maybe_uninit", since = "1.36.0")]
    #[rustc_const_stable(feature = "const_maybe_uninit", since = "1.36.0")]
    #[must_use = "use `forget` to avoid running Drop code"]
    #[inline(always)]
    pub const fn new(val: T) -> MaybeUninit<T> {
        MaybeUninit { value: ManuallyDrop::new(val) }
8003da18:	a3a20128 	sb	v0,296(sp)
    }
8003da1c:	93a20128 	lbu	v0,296(sp)
    /// ```
    #[stable(feature = "maybe_uninit_write", since = "1.55.0")]
    #[rustc_const_unstable(feature = "const_maybe_uninit_write", issue = "63567")]
    #[inline(always)]
    pub const fn write(&mut self, val: T) -> &mut T {
        *self = MaybeUninit::new(val);
8003da20:	a0220000 	sb	v0,0(at)
8003da24:	afa1012c 	sw	at,300(sp)
8003da28:	afa10130 	sw	at,304(sp)
                curr -= 1;
8003da2c:	8fa100c4 	lw	at,196(sp)
8003da30:	2422ffff 	addiu	v0,at,-1
8003da34:	afa20028 	sw	v0,40(sp)
8003da38:	1020000d 	beqz	at,8003da70 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x2d0>
8003da3c:	00000000 	nop
8003da40:	0800f692 	j	8003da48 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x2a8>
8003da44:	00000000 	nop
8003da48:	8fa10028 	lw	at,40(sp)
8003da4c:	afa100c4 	sw	at,196(sp)
8003da50:	27a40042 	addiu	a0,sp,66
8003da54:	27a50043 	addiu	a1,sp,67
                if x == zero {
8003da58:	0c0119cd 	jal	80046734 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h979542bb5e2130d6E>
8003da5c:	00000000 	nop
8003da60:	1440ff9f 	bnez	v0,8003d8e0 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x140>
8003da64:	00000000 	nop
8003da68:	0800f62f 	j	8003d8bc <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x11c>
8003da6c:	00000000 	nop
                curr -= 1;
8003da70:	3c018108 	lui	at,0x8108
8003da74:	2424ba14 	addiu	a0,at,-17900
8003da78:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003da7c:	00000000 	nop
8003da80:	27a400c8 	addiu	a0,sp,200
            for byte in buf.iter_mut().rev() {
8003da84:	0c00ee9c 	jal	8003ba70 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
8003da88:	00000000 	nop
8003da8c:	afa200d0 	sw	v0,208(sp)
8003da90:	8fa100d0 	lw	at,208(sp)
8003da94:	1020ff92 	beqz	at,8003d8e0 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x140>
8003da98:	00000000 	nop
8003da9c:	0800f6a9 	j	8003daa4 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x304>
8003daa0:	00000000 	nop
8003daa4:	8fa5003c 	lw	a1,60(sp)
8003daa8:	8fa100d0 	lw	at,208(sp)
8003daac:	afa10018 	sw	at,24(sp)
8003dab0:	afa100fc 	sw	at,252(sp)
                let n = x % base; // Get the current place value.
8003dab4:	93a40042 	lbu	a0,66(sp)
8003dab8:	3c018108 	lui	at,0x8108
8003dabc:	2426ba24 	addiu	a2,at,-17884
8003dac0:	0c011a88 	jal	80046a20 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Rem$GT$3rem17hcf0699d134763680E>
8003dac4:	00000000 	nop
8003dac8:	8fa5003c 	lw	a1,60(sp)
8003dacc:	a3a200d7 	sb	v0,215(sp)
                x = x / base; // Deaccumulate the number.
8003dad0:	93a40042 	lbu	a0,66(sp)
8003dad4:	3c018108 	lui	at,0x8108
8003dad8:	2426ba34 	addiu	a2,at,-17868
8003dadc:	0c011a44 	jal	80046910 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Div$GT$3div17h8c44f7b15731be55E>
8003dae0:	00000000 	nop
8003dae4:	a3a20042 	sb	v0,66(sp)
8003dae8:	27a400d7 	addiu	a0,sp,215
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
8003daec:	0c011b95 	jal	80046e54 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817hdb1dd13bcbe6748fE>
8003daf0:	00000000 	nop
8003daf4:	00402025 	move	a0,v0
8003daf8:	0c011bcb 	jal	80046f2c <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E>
8003dafc:	00000000 	nop
8003db00:	8fa10018 	lw	at,24(sp)
8003db04:	afa10114 	sw	at,276(sp)
8003db08:	a3a2011b 	sb	v0,283(sp)
8003db0c:	a3a2011d 	sb	v0,285(sp)
8003db10:	a3a2011f 	sb	v0,287(sp)
        ManuallyDrop { value }
8003db14:	a3a2011e 	sb	v0,286(sp)
    }
8003db18:	93a2011e 	lbu	v0,286(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
8003db1c:	a3a2011c 	sb	v0,284(sp)
    }
8003db20:	93a2011c 	lbu	v0,284(sp)
        *self = MaybeUninit::new(val);
8003db24:	a0220000 	sb	v0,0(at)
8003db28:	afa10134 	sw	at,308(sp)
8003db2c:	afa10138 	sw	at,312(sp)
                curr -= 1;
8003db30:	8fa100c4 	lw	at,196(sp)
8003db34:	2422ffff 	addiu	v0,at,-1
8003db38:	afa2001c 	sw	v0,28(sp)
8003db3c:	1020000d 	beqz	at,8003db74 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x3d4>
8003db40:	00000000 	nop
8003db44:	0800f6d3 	j	8003db4c <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x3ac>
8003db48:	00000000 	nop
8003db4c:	8fa1001c 	lw	at,28(sp)
8003db50:	afa100c4 	sw	at,196(sp)
8003db54:	27a40042 	addiu	a0,sp,66
8003db58:	27a50043 	addiu	a1,sp,67
                if x == zero {
8003db5c:	0c0119cd 	jal	80046734 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h979542bb5e2130d6E>
8003db60:	00000000 	nop
8003db64:	1440ff5e 	bnez	v0,8003d8e0 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x140>
8003db68:	00000000 	nop
8003db6c:	0800f6a0 	j	8003da80 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE+0x2e0>
8003db70:	00000000 	nop
                curr -= 1;
8003db74:	3c018108 	lui	at,0x8108
8003db78:	2424ba44 	addiu	a0,at,-17852
8003db7c:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003db80:	00000000 	nop

8003db84 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E>:
    fn fmt_int<T: DisplayInt>(&self, mut x: T, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8003db84:	27bdfea0 	addiu	sp,sp,-352
8003db88:	afbf015c 	sw	ra,348(sp)
8003db8c:	afa6002c 	sw	a2,44(sp)
8003db90:	afa50040 	sw	a1,64(sp)
8003db94:	afa400f0 	sw	a0,240(sp)
8003db98:	afa600f4 	sw	a2,244(sp)
        let zero = T::zero();
8003db9c:	0c011bb6 	jal	80046ed8 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h270aff8721106dedE>
8003dba0:	00000000 	nop
8003dba4:	afa20044 	sw	v0,68(sp)
8003dba8:	27a10040 	addiu	at,sp,64
8003dbac:	afa10154 	sw	at,340(sp)
8003dbb0:	27a10044 	addiu	at,sp,68
8003dbb4:	afa10158 	sw	at,344(sp)
8003dbb8:	8fa10040 	lw	at,64(sp)
8003dbbc:	8fa20044 	lw	v0,68(sp)
8003dbc0:	0022082b 	sltu	at,at,v0
8003dbc4:	afa10038 	sw	at,56(sp)
8003dbc8:	38210001 	xori	at,at,0x1
8003dbcc:	afa10030 	sw	at,48(sp)
        let is_nonnegative = x >= zero;
8003dbd0:	a3a100fb 	sb	at,251(sp)
        let mut buf = [MaybeUninit::<u8>::uninit(); 128];
8003dbd4:	93a5011b 	lbu	a1,283(sp)
8003dbd8:	27a40048 	addiu	a0,sp,72
8003dbdc:	24060080 	li	a2,128
8003dbe0:	afa60034 	sw	a2,52(sp)
8003dbe4:	0c00d47d 	jal	800351f4 <memset>
8003dbe8:	00000000 	nop
8003dbec:	8fa10034 	lw	at,52(sp)
        let mut curr = buf.len();
8003dbf0:	afa100c8 	sw	at,200(sp)
8003dbf4:	24040010 	li	a0,16
        let base = T::from_u8(Self::BASE);
8003dbf8:	0c011bb9 	jal	80046ee4 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817h1c1cc6cf834b4db9E>
8003dbfc:	00000000 	nop
8003dc00:	8fa10038 	lw	at,56(sp)
8003dc04:	00401825 	move	v1,v0
8003dc08:	afa3003c 	sw	v1,60(sp)
8003dc0c:	afa200fc 	sw	v0,252(sp)
        if is_nonnegative {
8003dc10:	10200013 	beqz	at,8003dc60 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0xdc>
8003dc14:	00000000 	nop
8003dc18:	0800f708 	j	8003dc20 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x9c>
8003dc1c:	00000000 	nop
8003dc20:	27a40048 	addiu	a0,sp,72
8003dc24:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
8003dc28:	0c010970 	jal	800425c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
8003dc2c:	00000000 	nop
8003dc30:	00402025 	move	a0,v0
8003dc34:	00602825 	move	a1,v1
8003dc38:	0c00efe8 	jal	8003bfa0 <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
8003dc3c:	00000000 	nop
8003dc40:	00402025 	move	a0,v0
8003dc44:	00602825 	move	a1,v1
8003dc48:	0c00ef3d 	jal	8003bcf4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
8003dc4c:	00000000 	nop
8003dc50:	afa200dc 	sw	v0,220(sp)
8003dc54:	afa300e0 	sw	v1,224(sp)
8003dc58:	0800f728 	j	8003dca0 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x11c>
8003dc5c:	00000000 	nop
8003dc60:	27a40048 	addiu	a0,sp,72
8003dc64:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
8003dc68:	0c010970 	jal	800425c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
8003dc6c:	00000000 	nop
8003dc70:	00402025 	move	a0,v0
8003dc74:	00602825 	move	a1,v1
8003dc78:	0c00efe8 	jal	8003bfa0 <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
8003dc7c:	00000000 	nop
8003dc80:	00402025 	move	a0,v0
8003dc84:	00602825 	move	a1,v1
8003dc88:	0c00ef3d 	jal	8003bcf4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
8003dc8c:	00000000 	nop
8003dc90:	afa200cc 	sw	v0,204(sp)
8003dc94:	afa300d0 	sw	v1,208(sp)
8003dc98:	0800f799 	j	8003de64 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x2e0>
8003dc9c:	00000000 	nop
8003dca0:	27a400dc 	addiu	a0,sp,220
            for byte in buf.iter_mut().rev() {
8003dca4:	0c00ee9c 	jal	8003ba70 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
8003dca8:	00000000 	nop
8003dcac:	afa200e4 	sw	v0,228(sp)
8003dcb0:	8fa100e4 	lw	at,228(sp)
8003dcb4:	1420002b 	bnez	at,8003dd64 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x1e0>
8003dcb8:	00000000 	nop
8003dcbc:	0800f731 	j	8003dcc4 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x140>
8003dcc0:	00000000 	nop
        let buf = &buf[curr..];
8003dcc4:	8fa100c8 	lw	at,200(sp)
8003dcc8:	afa100ec 	sw	at,236(sp)
8003dccc:	8fa500ec 	lw	a1,236(sp)
8003dcd0:	3c018108 	lui	at,0x8108
8003dcd4:	2426ba54 	addiu	a2,at,-17836
8003dcd8:	27a40048 	addiu	a0,sp,72
8003dcdc:	0c00ead0 	jal	8003ab40 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hfa0288d626a253cbE>
8003dce0:	00000000 	nop
8003dce4:	00402025 	move	a0,v0
8003dce8:	00602825 	move	a1,v1
8003dcec:	afa40108 	sw	a0,264(sp)
8003dcf0:	afa5010c 	sw	a1,268(sp)
8003dcf4:	afa40144 	sw	a0,324(sp)
8003dcf8:	afa50148 	sw	a1,328(sp)
8003dcfc:	afa4014c 	sw	a0,332(sp)
8003dd00:	afa50150 	sw	a1,336(sp)
            str::from_utf8_unchecked(slice::from_raw_parts(
8003dd04:	0c01089b 	jal	8004226c <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
8003dd08:	00000000 	nop
8003dd0c:	00402025 	move	a0,v0
8003dd10:	00602825 	move	a1,v1
8003dd14:	0c010d19 	jal	80043464 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>
8003dd18:	00000000 	nop
8003dd1c:	8fa10030 	lw	at,48(sp)
8003dd20:	8fa4002c 	lw	a0,44(sp)
8003dd24:	00602825 	move	a1,v1
8003dd28:	afa20110 	sw	v0,272(sp)
8003dd2c:	afa50114 	sw	a1,276(sp)
        f.pad_integral(is_nonnegative, Self::PREFIX, buf)
8003dd30:	03a01825 	move	v1,sp
8003dd34:	ac650014 	sw	a1,20(v1)
8003dd38:	ac620010 	sw	v0,16(v1)
8003dd3c:	30250001 	andi	a1,at,0x1
8003dd40:	3c018108 	lui	at,0x8108
8003dd44:	2426ba64 	addiu	a2,at,-17820
8003dd48:	24070002 	li	a3,2
8003dd4c:	0c00fdfe 	jal	8003f7f8 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E>
8003dd50:	00000000 	nop
    }
8003dd54:	8fbf015c 	lw	ra,348(sp)
8003dd58:	27bd0160 	addiu	sp,sp,352
8003dd5c:	03e00008 	jr	ra
8003dd60:	00000000 	nop
            for byte in buf.iter_mut().rev() {
8003dd64:	8fa5003c 	lw	a1,60(sp)
8003dd68:	8fa100e4 	lw	at,228(sp)
8003dd6c:	afa10024 	sw	at,36(sp)
8003dd70:	afa10100 	sw	at,256(sp)
                let n = zero - (x % base); // Get the current place value.
8003dd74:	8fa10044 	lw	at,68(sp)
8003dd78:	afa10020 	sw	at,32(sp)
8003dd7c:	8fa40040 	lw	a0,64(sp)
8003dd80:	3c018108 	lui	at,0x8108
8003dd84:	2426b9e4 	addiu	a2,at,-17948
8003dd88:	0c011a73 	jal	800469cc <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Rem$GT$3rem17h9f903c597deb573bE>
8003dd8c:	00000000 	nop
8003dd90:	8fa40020 	lw	a0,32(sp)
8003dd94:	00402825 	move	a1,v0
8003dd98:	3c018108 	lui	at,0x8108
8003dd9c:	2426b9f4 	addiu	a2,at,-17932
8003dda0:	0c0119f7 	jal	800467dc <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Sub$GT$3sub17h90e33352f2ecaf79E>
8003dda4:	00000000 	nop
8003dda8:	8fa5003c 	lw	a1,60(sp)
8003ddac:	afa200e8 	sw	v0,232(sp)
                x = x / base; // Deaccumulate the number.
8003ddb0:	8fa40040 	lw	a0,64(sp)
8003ddb4:	3c018108 	lui	at,0x8108
8003ddb8:	2426ba04 	addiu	a2,at,-17916
8003ddbc:	0c011a2f 	jal	800468bc <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Div$GT$3div17h9fd659e674ef8f18E>
8003ddc0:	00000000 	nop
8003ddc4:	afa20040 	sw	v0,64(sp)
8003ddc8:	27a400e8 	addiu	a0,sp,232
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
8003ddcc:	0c011bbf 	jal	80046efc <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h34321a1be99db044E>
8003ddd0:	00000000 	nop
8003ddd4:	00402025 	move	a0,v0
8003ddd8:	0c011bcb 	jal	80046f2c <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E>
8003dddc:	00000000 	nop
8003dde0:	8fa10024 	lw	at,36(sp)
8003dde4:	afa10128 	sw	at,296(sp)
8003dde8:	a3a2012f 	sb	v0,303(sp)
8003ddec:	a3a20131 	sb	v0,305(sp)
8003ddf0:	a3a20133 	sb	v0,307(sp)
        ManuallyDrop { value }
8003ddf4:	a3a20132 	sb	v0,306(sp)
    }
8003ddf8:	93a20132 	lbu	v0,306(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
8003ddfc:	a3a20130 	sb	v0,304(sp)
    }
8003de00:	93a20130 	lbu	v0,304(sp)
        *self = MaybeUninit::new(val);
8003de04:	a0220000 	sb	v0,0(at)
8003de08:	afa10134 	sw	at,308(sp)
8003de0c:	afa10138 	sw	at,312(sp)
                curr -= 1;
8003de10:	8fa100c8 	lw	at,200(sp)
8003de14:	2422ffff 	addiu	v0,at,-1
8003de18:	afa20028 	sw	v0,40(sp)
8003de1c:	1020000d 	beqz	at,8003de54 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x2d0>
8003de20:	00000000 	nop
8003de24:	0800f78b 	j	8003de2c <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x2a8>
8003de28:	00000000 	nop
8003de2c:	8fa10028 	lw	at,40(sp)
8003de30:	afa100c8 	sw	at,200(sp)
8003de34:	27a40040 	addiu	a0,sp,64
8003de38:	27a50044 	addiu	a1,sp,68
                if x == zero {
8003de3c:	0c0119c3 	jal	8004670c <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hbdfa0bd26f3ca07fE>
8003de40:	00000000 	nop
8003de44:	1440ff9f 	bnez	v0,8003dcc4 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x140>
8003de48:	00000000 	nop
8003de4c:	0800f728 	j	8003dca0 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x11c>
8003de50:	00000000 	nop
                curr -= 1;
8003de54:	3c018108 	lui	at,0x8108
8003de58:	2424ba14 	addiu	a0,at,-17900
8003de5c:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003de60:	00000000 	nop
8003de64:	27a400cc 	addiu	a0,sp,204
            for byte in buf.iter_mut().rev() {
8003de68:	0c00ee9c 	jal	8003ba70 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
8003de6c:	00000000 	nop
8003de70:	afa200d4 	sw	v0,212(sp)
8003de74:	8fa100d4 	lw	at,212(sp)
8003de78:	1020ff92 	beqz	at,8003dcc4 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x140>
8003de7c:	00000000 	nop
8003de80:	0800f7a2 	j	8003de88 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x304>
8003de84:	00000000 	nop
8003de88:	8fa5003c 	lw	a1,60(sp)
8003de8c:	8fa100d4 	lw	at,212(sp)
8003de90:	afa10018 	sw	at,24(sp)
8003de94:	afa10104 	sw	at,260(sp)
                let n = x % base; // Get the current place value.
8003de98:	8fa40040 	lw	a0,64(sp)
8003de9c:	3c018108 	lui	at,0x8108
8003dea0:	2426ba24 	addiu	a2,at,-17884
8003dea4:	0c011a73 	jal	800469cc <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Rem$GT$3rem17h9f903c597deb573bE>
8003dea8:	00000000 	nop
8003deac:	8fa5003c 	lw	a1,60(sp)
8003deb0:	afa200d8 	sw	v0,216(sp)
                x = x / base; // Deaccumulate the number.
8003deb4:	8fa40040 	lw	a0,64(sp)
8003deb8:	3c018108 	lui	at,0x8108
8003debc:	2426ba34 	addiu	a2,at,-17868
8003dec0:	0c011a2f 	jal	800468bc <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Div$GT$3div17h9fd659e674ef8f18E>
8003dec4:	00000000 	nop
8003dec8:	afa20040 	sw	v0,64(sp)
8003decc:	27a400d8 	addiu	a0,sp,216
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
8003ded0:	0c011bbf 	jal	80046efc <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h34321a1be99db044E>
8003ded4:	00000000 	nop
8003ded8:	00402025 	move	a0,v0
8003dedc:	0c011bcb 	jal	80046f2c <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E>
8003dee0:	00000000 	nop
8003dee4:	8fa10018 	lw	at,24(sp)
8003dee8:	afa1011c 	sw	at,284(sp)
8003deec:	a3a20123 	sb	v0,291(sp)
8003def0:	a3a20125 	sb	v0,293(sp)
8003def4:	a3a20127 	sb	v0,295(sp)
        ManuallyDrop { value }
8003def8:	a3a20126 	sb	v0,294(sp)
    }
8003defc:	93a20126 	lbu	v0,294(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
8003df00:	a3a20124 	sb	v0,292(sp)
    }
8003df04:	93a20124 	lbu	v0,292(sp)
        *self = MaybeUninit::new(val);
8003df08:	a0220000 	sb	v0,0(at)
8003df0c:	afa1013c 	sw	at,316(sp)
8003df10:	afa10140 	sw	at,320(sp)
                curr -= 1;
8003df14:	8fa100c8 	lw	at,200(sp)
8003df18:	2422ffff 	addiu	v0,at,-1
8003df1c:	afa2001c 	sw	v0,28(sp)
8003df20:	1020000d 	beqz	at,8003df58 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x3d4>
8003df24:	00000000 	nop
8003df28:	0800f7cc 	j	8003df30 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x3ac>
8003df2c:	00000000 	nop
8003df30:	8fa1001c 	lw	at,28(sp)
8003df34:	afa100c8 	sw	at,200(sp)
8003df38:	27a40040 	addiu	a0,sp,64
8003df3c:	27a50044 	addiu	a1,sp,68
                if x == zero {
8003df40:	0c0119c3 	jal	8004670c <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hbdfa0bd26f3ca07fE>
8003df44:	00000000 	nop
8003df48:	1440ff5e 	bnez	v0,8003dcc4 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x140>
8003df4c:	00000000 	nop
8003df50:	0800f799 	j	8003de64 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E+0x2e0>
8003df54:	00000000 	nop
                curr -= 1;
8003df58:	3c018108 	lui	at,0x8108
8003df5c:	2424ba44 	addiu	a0,at,-17852
8003df60:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003df64:	00000000 	nop

8003df68 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE>:
    fn fmt_int<T: DisplayInt>(&self, mut x: T, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8003df68:	27bdfea8 	addiu	sp,sp,-344
8003df6c:	afbf0154 	sw	ra,340(sp)
8003df70:	afa6002c 	sw	a2,44(sp)
8003df74:	a3a50042 	sb	a1,66(sp)
8003df78:	afa400ec 	sw	a0,236(sp)
8003df7c:	afa600f0 	sw	a2,240(sp)
        let zero = T::zero();
8003df80:	0c011b8c 	jal	80046e30 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h4faa43391429b7caE>
8003df84:	00000000 	nop
8003df88:	a3a20043 	sb	v0,67(sp)
8003df8c:	27a10042 	addiu	at,sp,66
8003df90:	afa1014c 	sw	at,332(sp)
8003df94:	27a10043 	addiu	at,sp,67
8003df98:	afa10150 	sw	at,336(sp)
8003df9c:	93a10042 	lbu	at,66(sp)
8003dfa0:	93a20043 	lbu	v0,67(sp)
8003dfa4:	0022082b 	sltu	at,at,v0
8003dfa8:	afa10038 	sw	at,56(sp)
8003dfac:	38210001 	xori	at,at,0x1
8003dfb0:	afa10030 	sw	at,48(sp)
        let is_nonnegative = x >= zero;
8003dfb4:	a3a100f6 	sb	at,246(sp)
        let mut buf = [MaybeUninit::<u8>::uninit(); 128];
8003dfb8:	93a50113 	lbu	a1,275(sp)
8003dfbc:	27a40044 	addiu	a0,sp,68
8003dfc0:	24060080 	li	a2,128
8003dfc4:	afa60034 	sw	a2,52(sp)
8003dfc8:	0c00d47d 	jal	800351f4 <memset>
8003dfcc:	00000000 	nop
8003dfd0:	8fa10034 	lw	at,52(sp)
        let mut curr = buf.len();
8003dfd4:	afa100c4 	sw	at,196(sp)
8003dfd8:	24040010 	li	a0,16
        let base = T::from_u8(Self::BASE);
8003dfdc:	0c011b8f 	jal	80046e3c <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817hde776fb7bbe296d4E>
8003dfe0:	00000000 	nop
8003dfe4:	8fa10038 	lw	at,56(sp)
8003dfe8:	00401825 	move	v1,v0
8003dfec:	afa3003c 	sw	v1,60(sp)
8003dff0:	a3a200f7 	sb	v0,247(sp)
        if is_nonnegative {
8003dff4:	10200013 	beqz	at,8003e044 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0xdc>
8003dff8:	00000000 	nop
8003dffc:	0800f801 	j	8003e004 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x9c>
8003e000:	00000000 	nop
8003e004:	27a40044 	addiu	a0,sp,68
8003e008:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
8003e00c:	0c010970 	jal	800425c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
8003e010:	00000000 	nop
8003e014:	00402025 	move	a0,v0
8003e018:	00602825 	move	a1,v1
8003e01c:	0c00efe8 	jal	8003bfa0 <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
8003e020:	00000000 	nop
8003e024:	00402025 	move	a0,v0
8003e028:	00602825 	move	a1,v1
8003e02c:	0c00ef3d 	jal	8003bcf4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
8003e030:	00000000 	nop
8003e034:	afa200d8 	sw	v0,216(sp)
8003e038:	afa300dc 	sw	v1,220(sp)
8003e03c:	0800f821 	j	8003e084 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x11c>
8003e040:	00000000 	nop
8003e044:	27a40044 	addiu	a0,sp,68
8003e048:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
8003e04c:	0c010970 	jal	800425c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
8003e050:	00000000 	nop
8003e054:	00402025 	move	a0,v0
8003e058:	00602825 	move	a1,v1
8003e05c:	0c00efe8 	jal	8003bfa0 <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
8003e060:	00000000 	nop
8003e064:	00402025 	move	a0,v0
8003e068:	00602825 	move	a1,v1
8003e06c:	0c00ef3d 	jal	8003bcf4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
8003e070:	00000000 	nop
8003e074:	afa200c8 	sw	v0,200(sp)
8003e078:	afa300cc 	sw	v1,204(sp)
8003e07c:	0800f892 	j	8003e248 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x2e0>
8003e080:	00000000 	nop
8003e084:	27a400d8 	addiu	a0,sp,216
            for byte in buf.iter_mut().rev() {
8003e088:	0c00ee9c 	jal	8003ba70 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
8003e08c:	00000000 	nop
8003e090:	afa200e0 	sw	v0,224(sp)
8003e094:	8fa100e0 	lw	at,224(sp)
8003e098:	1420002b 	bnez	at,8003e148 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x1e0>
8003e09c:	00000000 	nop
8003e0a0:	0800f82a 	j	8003e0a8 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x140>
8003e0a4:	00000000 	nop
        let buf = &buf[curr..];
8003e0a8:	8fa100c4 	lw	at,196(sp)
8003e0ac:	afa100e8 	sw	at,232(sp)
8003e0b0:	8fa500e8 	lw	a1,232(sp)
8003e0b4:	3c018108 	lui	at,0x8108
8003e0b8:	2426ba54 	addiu	a2,at,-17836
8003e0bc:	27a40044 	addiu	a0,sp,68
8003e0c0:	0c00ead0 	jal	8003ab40 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hfa0288d626a253cbE>
8003e0c4:	00000000 	nop
8003e0c8:	00402025 	move	a0,v0
8003e0cc:	00602825 	move	a1,v1
8003e0d0:	afa40100 	sw	a0,256(sp)
8003e0d4:	afa50104 	sw	a1,260(sp)
8003e0d8:	afa4013c 	sw	a0,316(sp)
8003e0dc:	afa50140 	sw	a1,320(sp)
8003e0e0:	afa40144 	sw	a0,324(sp)
8003e0e4:	afa50148 	sw	a1,328(sp)
            str::from_utf8_unchecked(slice::from_raw_parts(
8003e0e8:	0c01089b 	jal	8004226c <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
8003e0ec:	00000000 	nop
8003e0f0:	00402025 	move	a0,v0
8003e0f4:	00602825 	move	a1,v1
8003e0f8:	0c010d19 	jal	80043464 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>
8003e0fc:	00000000 	nop
8003e100:	8fa10030 	lw	at,48(sp)
8003e104:	8fa4002c 	lw	a0,44(sp)
8003e108:	00602825 	move	a1,v1
8003e10c:	afa20108 	sw	v0,264(sp)
8003e110:	afa5010c 	sw	a1,268(sp)
        f.pad_integral(is_nonnegative, Self::PREFIX, buf)
8003e114:	03a01825 	move	v1,sp
8003e118:	ac650014 	sw	a1,20(v1)
8003e11c:	ac620010 	sw	v0,16(v1)
8003e120:	30250001 	andi	a1,at,0x1
8003e124:	3c018108 	lui	at,0x8108
8003e128:	2426ba64 	addiu	a2,at,-17820
8003e12c:	24070002 	li	a3,2
8003e130:	0c00fdfe 	jal	8003f7f8 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E>
8003e134:	00000000 	nop
    }
8003e138:	8fbf0154 	lw	ra,340(sp)
8003e13c:	27bd0158 	addiu	sp,sp,344
8003e140:	03e00008 	jr	ra
8003e144:	00000000 	nop
            for byte in buf.iter_mut().rev() {
8003e148:	8fa5003c 	lw	a1,60(sp)
8003e14c:	8fa100e0 	lw	at,224(sp)
8003e150:	afa10024 	sw	at,36(sp)
8003e154:	afa100f8 	sw	at,248(sp)
                let n = zero - (x % base); // Get the current place value.
8003e158:	93a40042 	lbu	a0,66(sp)
8003e15c:	93a10043 	lbu	at,67(sp)
8003e160:	afa10020 	sw	at,32(sp)
8003e164:	3c018108 	lui	at,0x8108
8003e168:	2426b9e4 	addiu	a2,at,-17948
8003e16c:	0c011a88 	jal	80046a20 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Rem$GT$3rem17hcf0699d134763680E>
8003e170:	00000000 	nop
8003e174:	8fa40020 	lw	a0,32(sp)
8003e178:	00402825 	move	a1,v0
8003e17c:	3c018108 	lui	at,0x8108
8003e180:	2426b9f4 	addiu	a2,at,-17932
8003e184:	0c011a09 	jal	80046824 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9d08ad2c426c5534E>
8003e188:	00000000 	nop
8003e18c:	8fa5003c 	lw	a1,60(sp)
8003e190:	a3a200e7 	sb	v0,231(sp)
                x = x / base; // Deaccumulate the number.
8003e194:	93a40042 	lbu	a0,66(sp)
8003e198:	3c018108 	lui	at,0x8108
8003e19c:	2426ba04 	addiu	a2,at,-17916
8003e1a0:	0c011a44 	jal	80046910 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Div$GT$3div17h8c44f7b15731be55E>
8003e1a4:	00000000 	nop
8003e1a8:	a3a20042 	sb	v0,66(sp)
8003e1ac:	27a400e7 	addiu	a0,sp,231
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
8003e1b0:	0c011b95 	jal	80046e54 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817hdb1dd13bcbe6748fE>
8003e1b4:	00000000 	nop
8003e1b8:	00402025 	move	a0,v0
8003e1bc:	0c011c46 	jal	80047118 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE>
8003e1c0:	00000000 	nop
8003e1c4:	8fa10024 	lw	at,36(sp)
8003e1c8:	afa10120 	sw	at,288(sp)
8003e1cc:	a3a20127 	sb	v0,295(sp)
8003e1d0:	a3a20129 	sb	v0,297(sp)
8003e1d4:	a3a2012b 	sb	v0,299(sp)
        ManuallyDrop { value }
8003e1d8:	a3a2012a 	sb	v0,298(sp)
    }
8003e1dc:	93a2012a 	lbu	v0,298(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
8003e1e0:	a3a20128 	sb	v0,296(sp)
    }
8003e1e4:	93a20128 	lbu	v0,296(sp)
        *self = MaybeUninit::new(val);
8003e1e8:	a0220000 	sb	v0,0(at)
8003e1ec:	afa1012c 	sw	at,300(sp)
8003e1f0:	afa10130 	sw	at,304(sp)
                curr -= 1;
8003e1f4:	8fa100c4 	lw	at,196(sp)
8003e1f8:	2422ffff 	addiu	v0,at,-1
8003e1fc:	afa20028 	sw	v0,40(sp)
8003e200:	1020000d 	beqz	at,8003e238 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x2d0>
8003e204:	00000000 	nop
8003e208:	0800f884 	j	8003e210 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x2a8>
8003e20c:	00000000 	nop
8003e210:	8fa10028 	lw	at,40(sp)
8003e214:	afa100c4 	sw	at,196(sp)
8003e218:	27a40042 	addiu	a0,sp,66
8003e21c:	27a50043 	addiu	a1,sp,67
                if x == zero {
8003e220:	0c0119cd 	jal	80046734 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h979542bb5e2130d6E>
8003e224:	00000000 	nop
8003e228:	1440ff9f 	bnez	v0,8003e0a8 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x140>
8003e22c:	00000000 	nop
8003e230:	0800f821 	j	8003e084 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x11c>
8003e234:	00000000 	nop
                curr -= 1;
8003e238:	3c018108 	lui	at,0x8108
8003e23c:	2424ba14 	addiu	a0,at,-17900
8003e240:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003e244:	00000000 	nop
8003e248:	27a400c8 	addiu	a0,sp,200
            for byte in buf.iter_mut().rev() {
8003e24c:	0c00ee9c 	jal	8003ba70 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
8003e250:	00000000 	nop
8003e254:	afa200d0 	sw	v0,208(sp)
8003e258:	8fa100d0 	lw	at,208(sp)
8003e25c:	1020ff92 	beqz	at,8003e0a8 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x140>
8003e260:	00000000 	nop
8003e264:	0800f89b 	j	8003e26c <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x304>
8003e268:	00000000 	nop
8003e26c:	8fa5003c 	lw	a1,60(sp)
8003e270:	8fa100d0 	lw	at,208(sp)
8003e274:	afa10018 	sw	at,24(sp)
8003e278:	afa100fc 	sw	at,252(sp)
                let n = x % base; // Get the current place value.
8003e27c:	93a40042 	lbu	a0,66(sp)
8003e280:	3c018108 	lui	at,0x8108
8003e284:	2426ba24 	addiu	a2,at,-17884
8003e288:	0c011a88 	jal	80046a20 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Rem$GT$3rem17hcf0699d134763680E>
8003e28c:	00000000 	nop
8003e290:	8fa5003c 	lw	a1,60(sp)
8003e294:	a3a200d7 	sb	v0,215(sp)
                x = x / base; // Deaccumulate the number.
8003e298:	93a40042 	lbu	a0,66(sp)
8003e29c:	3c018108 	lui	at,0x8108
8003e2a0:	2426ba34 	addiu	a2,at,-17868
8003e2a4:	0c011a44 	jal	80046910 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Div$GT$3div17h8c44f7b15731be55E>
8003e2a8:	00000000 	nop
8003e2ac:	a3a20042 	sb	v0,66(sp)
8003e2b0:	27a400d7 	addiu	a0,sp,215
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
8003e2b4:	0c011b95 	jal	80046e54 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817hdb1dd13bcbe6748fE>
8003e2b8:	00000000 	nop
8003e2bc:	00402025 	move	a0,v0
8003e2c0:	0c011c46 	jal	80047118 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE>
8003e2c4:	00000000 	nop
8003e2c8:	8fa10018 	lw	at,24(sp)
8003e2cc:	afa10114 	sw	at,276(sp)
8003e2d0:	a3a2011b 	sb	v0,283(sp)
8003e2d4:	a3a2011d 	sb	v0,285(sp)
8003e2d8:	a3a2011f 	sb	v0,287(sp)
        ManuallyDrop { value }
8003e2dc:	a3a2011e 	sb	v0,286(sp)
    }
8003e2e0:	93a2011e 	lbu	v0,286(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
8003e2e4:	a3a2011c 	sb	v0,284(sp)
    }
8003e2e8:	93a2011c 	lbu	v0,284(sp)
        *self = MaybeUninit::new(val);
8003e2ec:	a0220000 	sb	v0,0(at)
8003e2f0:	afa10134 	sw	at,308(sp)
8003e2f4:	afa10138 	sw	at,312(sp)
                curr -= 1;
8003e2f8:	8fa100c4 	lw	at,196(sp)
8003e2fc:	2422ffff 	addiu	v0,at,-1
8003e300:	afa2001c 	sw	v0,28(sp)
8003e304:	1020000d 	beqz	at,8003e33c <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x3d4>
8003e308:	00000000 	nop
8003e30c:	0800f8c5 	j	8003e314 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x3ac>
8003e310:	00000000 	nop
8003e314:	8fa1001c 	lw	at,28(sp)
8003e318:	afa100c4 	sw	at,196(sp)
8003e31c:	27a40042 	addiu	a0,sp,66
8003e320:	27a50043 	addiu	a1,sp,67
                if x == zero {
8003e324:	0c0119cd 	jal	80046734 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h979542bb5e2130d6E>
8003e328:	00000000 	nop
8003e32c:	1440ff5e 	bnez	v0,8003e0a8 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x140>
8003e330:	00000000 	nop
8003e334:	0800f892 	j	8003e248 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE+0x2e0>
8003e338:	00000000 	nop
                curr -= 1;
8003e33c:	3c018108 	lui	at,0x8108
8003e340:	2424ba44 	addiu	a0,at,-17852
8003e344:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003e348:	00000000 	nop

8003e34c <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE>:
    fn fmt_int<T: DisplayInt>(&self, mut x: T, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8003e34c:	27bdfea0 	addiu	sp,sp,-352
8003e350:	afbf015c 	sw	ra,348(sp)
8003e354:	afa6002c 	sw	a2,44(sp)
8003e358:	afa50040 	sw	a1,64(sp)
8003e35c:	afa400f0 	sw	a0,240(sp)
8003e360:	afa600f4 	sw	a2,244(sp)
        let zero = T::zero();
8003e364:	0c011bb6 	jal	80046ed8 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h270aff8721106dedE>
8003e368:	00000000 	nop
8003e36c:	afa20044 	sw	v0,68(sp)
8003e370:	27a10040 	addiu	at,sp,64
8003e374:	afa10154 	sw	at,340(sp)
8003e378:	27a10044 	addiu	at,sp,68
8003e37c:	afa10158 	sw	at,344(sp)
8003e380:	8fa10040 	lw	at,64(sp)
8003e384:	8fa20044 	lw	v0,68(sp)
8003e388:	0022082b 	sltu	at,at,v0
8003e38c:	afa10038 	sw	at,56(sp)
8003e390:	38210001 	xori	at,at,0x1
8003e394:	afa10030 	sw	at,48(sp)
        let is_nonnegative = x >= zero;
8003e398:	a3a100fb 	sb	at,251(sp)
        let mut buf = [MaybeUninit::<u8>::uninit(); 128];
8003e39c:	93a5011b 	lbu	a1,283(sp)
8003e3a0:	27a40048 	addiu	a0,sp,72
8003e3a4:	24060080 	li	a2,128
8003e3a8:	afa60034 	sw	a2,52(sp)
8003e3ac:	0c00d47d 	jal	800351f4 <memset>
8003e3b0:	00000000 	nop
8003e3b4:	8fa10034 	lw	at,52(sp)
        let mut curr = buf.len();
8003e3b8:	afa100c8 	sw	at,200(sp)
8003e3bc:	24040010 	li	a0,16
        let base = T::from_u8(Self::BASE);
8003e3c0:	0c011bb9 	jal	80046ee4 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817h1c1cc6cf834b4db9E>
8003e3c4:	00000000 	nop
8003e3c8:	8fa10038 	lw	at,56(sp)
8003e3cc:	00401825 	move	v1,v0
8003e3d0:	afa3003c 	sw	v1,60(sp)
8003e3d4:	afa200fc 	sw	v0,252(sp)
        if is_nonnegative {
8003e3d8:	10200013 	beqz	at,8003e428 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0xdc>
8003e3dc:	00000000 	nop
8003e3e0:	0800f8fa 	j	8003e3e8 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x9c>
8003e3e4:	00000000 	nop
8003e3e8:	27a40048 	addiu	a0,sp,72
8003e3ec:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
8003e3f0:	0c010970 	jal	800425c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
8003e3f4:	00000000 	nop
8003e3f8:	00402025 	move	a0,v0
8003e3fc:	00602825 	move	a1,v1
8003e400:	0c00efe8 	jal	8003bfa0 <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
8003e404:	00000000 	nop
8003e408:	00402025 	move	a0,v0
8003e40c:	00602825 	move	a1,v1
8003e410:	0c00ef3d 	jal	8003bcf4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
8003e414:	00000000 	nop
8003e418:	afa200dc 	sw	v0,220(sp)
8003e41c:	afa300e0 	sw	v1,224(sp)
8003e420:	0800f91a 	j	8003e468 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x11c>
8003e424:	00000000 	nop
8003e428:	27a40048 	addiu	a0,sp,72
8003e42c:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
8003e430:	0c010970 	jal	800425c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
8003e434:	00000000 	nop
8003e438:	00402025 	move	a0,v0
8003e43c:	00602825 	move	a1,v1
8003e440:	0c00efe8 	jal	8003bfa0 <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
8003e444:	00000000 	nop
8003e448:	00402025 	move	a0,v0
8003e44c:	00602825 	move	a1,v1
8003e450:	0c00ef3d 	jal	8003bcf4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
8003e454:	00000000 	nop
8003e458:	afa200cc 	sw	v0,204(sp)
8003e45c:	afa300d0 	sw	v1,208(sp)
8003e460:	0800f98b 	j	8003e62c <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x2e0>
8003e464:	00000000 	nop
8003e468:	27a400dc 	addiu	a0,sp,220
            for byte in buf.iter_mut().rev() {
8003e46c:	0c00ee9c 	jal	8003ba70 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
8003e470:	00000000 	nop
8003e474:	afa200e4 	sw	v0,228(sp)
8003e478:	8fa100e4 	lw	at,228(sp)
8003e47c:	1420002b 	bnez	at,8003e52c <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x1e0>
8003e480:	00000000 	nop
8003e484:	0800f923 	j	8003e48c <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x140>
8003e488:	00000000 	nop
        let buf = &buf[curr..];
8003e48c:	8fa100c8 	lw	at,200(sp)
8003e490:	afa100ec 	sw	at,236(sp)
8003e494:	8fa500ec 	lw	a1,236(sp)
8003e498:	3c018108 	lui	at,0x8108
8003e49c:	2426ba54 	addiu	a2,at,-17836
8003e4a0:	27a40048 	addiu	a0,sp,72
8003e4a4:	0c00ead0 	jal	8003ab40 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hfa0288d626a253cbE>
8003e4a8:	00000000 	nop
8003e4ac:	00402025 	move	a0,v0
8003e4b0:	00602825 	move	a1,v1
8003e4b4:	afa40108 	sw	a0,264(sp)
8003e4b8:	afa5010c 	sw	a1,268(sp)
8003e4bc:	afa40144 	sw	a0,324(sp)
8003e4c0:	afa50148 	sw	a1,328(sp)
8003e4c4:	afa4014c 	sw	a0,332(sp)
8003e4c8:	afa50150 	sw	a1,336(sp)
            str::from_utf8_unchecked(slice::from_raw_parts(
8003e4cc:	0c01089b 	jal	8004226c <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
8003e4d0:	00000000 	nop
8003e4d4:	00402025 	move	a0,v0
8003e4d8:	00602825 	move	a1,v1
8003e4dc:	0c010d19 	jal	80043464 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>
8003e4e0:	00000000 	nop
8003e4e4:	8fa10030 	lw	at,48(sp)
8003e4e8:	8fa4002c 	lw	a0,44(sp)
8003e4ec:	00602825 	move	a1,v1
8003e4f0:	afa20110 	sw	v0,272(sp)
8003e4f4:	afa50114 	sw	a1,276(sp)
        f.pad_integral(is_nonnegative, Self::PREFIX, buf)
8003e4f8:	03a01825 	move	v1,sp
8003e4fc:	ac650014 	sw	a1,20(v1)
8003e500:	ac620010 	sw	v0,16(v1)
8003e504:	30250001 	andi	a1,at,0x1
8003e508:	3c018108 	lui	at,0x8108
8003e50c:	2426ba64 	addiu	a2,at,-17820
8003e510:	24070002 	li	a3,2
8003e514:	0c00fdfe 	jal	8003f7f8 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E>
8003e518:	00000000 	nop
    }
8003e51c:	8fbf015c 	lw	ra,348(sp)
8003e520:	27bd0160 	addiu	sp,sp,352
8003e524:	03e00008 	jr	ra
8003e528:	00000000 	nop
            for byte in buf.iter_mut().rev() {
8003e52c:	8fa5003c 	lw	a1,60(sp)
8003e530:	8fa100e4 	lw	at,228(sp)
8003e534:	afa10024 	sw	at,36(sp)
8003e538:	afa10100 	sw	at,256(sp)
                let n = zero - (x % base); // Get the current place value.
8003e53c:	8fa10044 	lw	at,68(sp)
8003e540:	afa10020 	sw	at,32(sp)
8003e544:	8fa40040 	lw	a0,64(sp)
8003e548:	3c018108 	lui	at,0x8108
8003e54c:	2426b9e4 	addiu	a2,at,-17948
8003e550:	0c011a73 	jal	800469cc <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Rem$GT$3rem17h9f903c597deb573bE>
8003e554:	00000000 	nop
8003e558:	8fa40020 	lw	a0,32(sp)
8003e55c:	00402825 	move	a1,v0
8003e560:	3c018108 	lui	at,0x8108
8003e564:	2426b9f4 	addiu	a2,at,-17932
8003e568:	0c0119f7 	jal	800467dc <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Sub$GT$3sub17h90e33352f2ecaf79E>
8003e56c:	00000000 	nop
8003e570:	8fa5003c 	lw	a1,60(sp)
8003e574:	afa200e8 	sw	v0,232(sp)
                x = x / base; // Deaccumulate the number.
8003e578:	8fa40040 	lw	a0,64(sp)
8003e57c:	3c018108 	lui	at,0x8108
8003e580:	2426ba04 	addiu	a2,at,-17916
8003e584:	0c011a2f 	jal	800468bc <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Div$GT$3div17h9fd659e674ef8f18E>
8003e588:	00000000 	nop
8003e58c:	afa20040 	sw	v0,64(sp)
8003e590:	27a400e8 	addiu	a0,sp,232
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
8003e594:	0c011bbf 	jal	80046efc <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h34321a1be99db044E>
8003e598:	00000000 	nop
8003e59c:	00402025 	move	a0,v0
8003e5a0:	0c011c46 	jal	80047118 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE>
8003e5a4:	00000000 	nop
8003e5a8:	8fa10024 	lw	at,36(sp)
8003e5ac:	afa10128 	sw	at,296(sp)
8003e5b0:	a3a2012f 	sb	v0,303(sp)
8003e5b4:	a3a20131 	sb	v0,305(sp)
8003e5b8:	a3a20133 	sb	v0,307(sp)
        ManuallyDrop { value }
8003e5bc:	a3a20132 	sb	v0,306(sp)
    }
8003e5c0:	93a20132 	lbu	v0,306(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
8003e5c4:	a3a20130 	sb	v0,304(sp)
    }
8003e5c8:	93a20130 	lbu	v0,304(sp)
        *self = MaybeUninit::new(val);
8003e5cc:	a0220000 	sb	v0,0(at)
8003e5d0:	afa10134 	sw	at,308(sp)
8003e5d4:	afa10138 	sw	at,312(sp)
                curr -= 1;
8003e5d8:	8fa100c8 	lw	at,200(sp)
8003e5dc:	2422ffff 	addiu	v0,at,-1
8003e5e0:	afa20028 	sw	v0,40(sp)
8003e5e4:	1020000d 	beqz	at,8003e61c <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x2d0>
8003e5e8:	00000000 	nop
8003e5ec:	0800f97d 	j	8003e5f4 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x2a8>
8003e5f0:	00000000 	nop
8003e5f4:	8fa10028 	lw	at,40(sp)
8003e5f8:	afa100c8 	sw	at,200(sp)
8003e5fc:	27a40040 	addiu	a0,sp,64
8003e600:	27a50044 	addiu	a1,sp,68
                if x == zero {
8003e604:	0c0119c3 	jal	8004670c <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hbdfa0bd26f3ca07fE>
8003e608:	00000000 	nop
8003e60c:	1440ff9f 	bnez	v0,8003e48c <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x140>
8003e610:	00000000 	nop
8003e614:	0800f91a 	j	8003e468 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x11c>
8003e618:	00000000 	nop
                curr -= 1;
8003e61c:	3c018108 	lui	at,0x8108
8003e620:	2424ba14 	addiu	a0,at,-17900
8003e624:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003e628:	00000000 	nop
8003e62c:	27a400cc 	addiu	a0,sp,204
            for byte in buf.iter_mut().rev() {
8003e630:	0c00ee9c 	jal	8003ba70 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
8003e634:	00000000 	nop
8003e638:	afa200d4 	sw	v0,212(sp)
8003e63c:	8fa100d4 	lw	at,212(sp)
8003e640:	1020ff92 	beqz	at,8003e48c <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x140>
8003e644:	00000000 	nop
8003e648:	0800f994 	j	8003e650 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x304>
8003e64c:	00000000 	nop
8003e650:	8fa5003c 	lw	a1,60(sp)
8003e654:	8fa100d4 	lw	at,212(sp)
8003e658:	afa10018 	sw	at,24(sp)
8003e65c:	afa10104 	sw	at,260(sp)
                let n = x % base; // Get the current place value.
8003e660:	8fa40040 	lw	a0,64(sp)
8003e664:	3c018108 	lui	at,0x8108
8003e668:	2426ba24 	addiu	a2,at,-17884
8003e66c:	0c011a73 	jal	800469cc <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Rem$GT$3rem17h9f903c597deb573bE>
8003e670:	00000000 	nop
8003e674:	8fa5003c 	lw	a1,60(sp)
8003e678:	afa200d8 	sw	v0,216(sp)
                x = x / base; // Deaccumulate the number.
8003e67c:	8fa40040 	lw	a0,64(sp)
8003e680:	3c018108 	lui	at,0x8108
8003e684:	2426ba34 	addiu	a2,at,-17868
8003e688:	0c011a2f 	jal	800468bc <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Div$GT$3div17h9fd659e674ef8f18E>
8003e68c:	00000000 	nop
8003e690:	afa20040 	sw	v0,64(sp)
8003e694:	27a400d8 	addiu	a0,sp,216
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
8003e698:	0c011bbf 	jal	80046efc <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h34321a1be99db044E>
8003e69c:	00000000 	nop
8003e6a0:	00402025 	move	a0,v0
8003e6a4:	0c011c46 	jal	80047118 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE>
8003e6a8:	00000000 	nop
8003e6ac:	8fa10018 	lw	at,24(sp)
8003e6b0:	afa1011c 	sw	at,284(sp)
8003e6b4:	a3a20123 	sb	v0,291(sp)
8003e6b8:	a3a20125 	sb	v0,293(sp)
8003e6bc:	a3a20127 	sb	v0,295(sp)
        ManuallyDrop { value }
8003e6c0:	a3a20126 	sb	v0,294(sp)
    }
8003e6c4:	93a20126 	lbu	v0,294(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
8003e6c8:	a3a20124 	sb	v0,292(sp)
    }
8003e6cc:	93a20124 	lbu	v0,292(sp)
        *self = MaybeUninit::new(val);
8003e6d0:	a0220000 	sb	v0,0(at)
8003e6d4:	afa1013c 	sw	at,316(sp)
8003e6d8:	afa10140 	sw	at,320(sp)
                curr -= 1;
8003e6dc:	8fa100c8 	lw	at,200(sp)
8003e6e0:	2422ffff 	addiu	v0,at,-1
8003e6e4:	afa2001c 	sw	v0,28(sp)
8003e6e8:	1020000d 	beqz	at,8003e720 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x3d4>
8003e6ec:	00000000 	nop
8003e6f0:	0800f9be 	j	8003e6f8 <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x3ac>
8003e6f4:	00000000 	nop
8003e6f8:	8fa1001c 	lw	at,28(sp)
8003e6fc:	afa100c8 	sw	at,200(sp)
8003e700:	27a40040 	addiu	a0,sp,64
8003e704:	27a50044 	addiu	a1,sp,68
                if x == zero {
8003e708:	0c0119c3 	jal	8004670c <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hbdfa0bd26f3ca07fE>
8003e70c:	00000000 	nop
8003e710:	1440ff5e 	bnez	v0,8003e48c <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x140>
8003e714:	00000000 	nop
8003e718:	0800f98b 	j	8003e62c <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE+0x2e0>
8003e71c:	00000000 	nop
                curr -= 1;
8003e720:	3c018108 	lui	at,0x8108
8003e724:	2424ba44 	addiu	a0,at,-17852
8003e728:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003e72c:	00000000 	nop

8003e730 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E>:
    fn fmt_int<T: DisplayInt>(&self, mut x: T, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8003e730:	27bdfea0 	addiu	sp,sp,-352
8003e734:	afbf015c 	sw	ra,348(sp)
8003e738:	afa6002c 	sw	a2,44(sp)
8003e73c:	afa50040 	sw	a1,64(sp)
8003e740:	afa400f0 	sw	a0,240(sp)
8003e744:	afa600f4 	sw	a2,244(sp)
        let zero = T::zero();
8003e748:	0c011ba1 	jal	80046e84 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h82437499101b7905E>
8003e74c:	00000000 	nop
8003e750:	afa20044 	sw	v0,68(sp)
8003e754:	27a10040 	addiu	at,sp,64
8003e758:	afa10154 	sw	at,340(sp)
8003e75c:	27a10044 	addiu	at,sp,68
8003e760:	afa10158 	sw	at,344(sp)
8003e764:	8fa10040 	lw	at,64(sp)
8003e768:	8fa20044 	lw	v0,68(sp)
8003e76c:	0022082b 	sltu	at,at,v0
8003e770:	afa10038 	sw	at,56(sp)
8003e774:	38210001 	xori	at,at,0x1
8003e778:	afa10030 	sw	at,48(sp)
        let is_nonnegative = x >= zero;
8003e77c:	a3a100fb 	sb	at,251(sp)
        let mut buf = [MaybeUninit::<u8>::uninit(); 128];
8003e780:	93a5011b 	lbu	a1,283(sp)
8003e784:	27a40048 	addiu	a0,sp,72
8003e788:	24060080 	li	a2,128
8003e78c:	afa60034 	sw	a2,52(sp)
8003e790:	0c00d47d 	jal	800351f4 <memset>
8003e794:	00000000 	nop
8003e798:	8fa10034 	lw	at,52(sp)
        let mut curr = buf.len();
8003e79c:	afa100c8 	sw	at,200(sp)
8003e7a0:	24040010 	li	a0,16
        let base = T::from_u8(Self::BASE);
8003e7a4:	0c011ba4 	jal	80046e90 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817hb5a1ba67db0bffc6E>
8003e7a8:	00000000 	nop
8003e7ac:	8fa10038 	lw	at,56(sp)
8003e7b0:	00401825 	move	v1,v0
8003e7b4:	afa3003c 	sw	v1,60(sp)
8003e7b8:	afa200fc 	sw	v0,252(sp)
        if is_nonnegative {
8003e7bc:	10200013 	beqz	at,8003e80c <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0xdc>
8003e7c0:	00000000 	nop
8003e7c4:	0800f9f3 	j	8003e7cc <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x9c>
8003e7c8:	00000000 	nop
8003e7cc:	27a40048 	addiu	a0,sp,72
8003e7d0:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
8003e7d4:	0c010970 	jal	800425c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
8003e7d8:	00000000 	nop
8003e7dc:	00402025 	move	a0,v0
8003e7e0:	00602825 	move	a1,v1
8003e7e4:	0c00efe8 	jal	8003bfa0 <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
8003e7e8:	00000000 	nop
8003e7ec:	00402025 	move	a0,v0
8003e7f0:	00602825 	move	a1,v1
8003e7f4:	0c00ef3d 	jal	8003bcf4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
8003e7f8:	00000000 	nop
8003e7fc:	afa200dc 	sw	v0,220(sp)
8003e800:	afa300e0 	sw	v1,224(sp)
8003e804:	0800fa13 	j	8003e84c <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x11c>
8003e808:	00000000 	nop
8003e80c:	27a40048 	addiu	a0,sp,72
8003e810:	24050080 	li	a1,128
            for byte in buf.iter_mut().rev() {
8003e814:	0c010970 	jal	800425c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>
8003e818:	00000000 	nop
8003e81c:	00402025 	move	a0,v0
8003e820:	00602825 	move	a1,v1
8003e824:	0c00efe8 	jal	8003bfa0 <_ZN4core4iter6traits8iterator8Iterator3rev17h5fe5efbe8b825abeE>
8003e828:	00000000 	nop
8003e82c:	00402025 	move	a0,v0
8003e830:	00602825 	move	a1,v1
8003e834:	0c00ef3d 	jal	8003bcf4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcf38cd2ef3da8a01E>
8003e838:	00000000 	nop
8003e83c:	afa200cc 	sw	v0,204(sp)
8003e840:	afa300d0 	sw	v1,208(sp)
8003e844:	0800fa84 	j	8003ea10 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x2e0>
8003e848:	00000000 	nop
8003e84c:	27a400dc 	addiu	a0,sp,220
            for byte in buf.iter_mut().rev() {
8003e850:	0c00ee9c 	jal	8003ba70 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
8003e854:	00000000 	nop
8003e858:	afa200e4 	sw	v0,228(sp)
8003e85c:	8fa100e4 	lw	at,228(sp)
8003e860:	1420002b 	bnez	at,8003e910 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x1e0>
8003e864:	00000000 	nop
8003e868:	0800fa1c 	j	8003e870 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x140>
8003e86c:	00000000 	nop
        let buf = &buf[curr..];
8003e870:	8fa100c8 	lw	at,200(sp)
8003e874:	afa100ec 	sw	at,236(sp)
8003e878:	8fa500ec 	lw	a1,236(sp)
8003e87c:	3c018108 	lui	at,0x8108
8003e880:	2426ba54 	addiu	a2,at,-17836
8003e884:	27a40048 	addiu	a0,sp,72
8003e888:	0c00ead0 	jal	8003ab40 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hfa0288d626a253cbE>
8003e88c:	00000000 	nop
8003e890:	00402025 	move	a0,v0
8003e894:	00602825 	move	a1,v1
8003e898:	afa40108 	sw	a0,264(sp)
8003e89c:	afa5010c 	sw	a1,268(sp)
8003e8a0:	afa40144 	sw	a0,324(sp)
8003e8a4:	afa50148 	sw	a1,328(sp)
8003e8a8:	afa4014c 	sw	a0,332(sp)
8003e8ac:	afa50150 	sw	a1,336(sp)
            str::from_utf8_unchecked(slice::from_raw_parts(
8003e8b0:	0c01089b 	jal	8004226c <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
8003e8b4:	00000000 	nop
8003e8b8:	00402025 	move	a0,v0
8003e8bc:	00602825 	move	a1,v1
8003e8c0:	0c010d19 	jal	80043464 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>
8003e8c4:	00000000 	nop
8003e8c8:	8fa10030 	lw	at,48(sp)
8003e8cc:	8fa4002c 	lw	a0,44(sp)
8003e8d0:	00602825 	move	a1,v1
8003e8d4:	afa20110 	sw	v0,272(sp)
8003e8d8:	afa50114 	sw	a1,276(sp)
        f.pad_integral(is_nonnegative, Self::PREFIX, buf)
8003e8dc:	03a01825 	move	v1,sp
8003e8e0:	ac650014 	sw	a1,20(v1)
8003e8e4:	ac620010 	sw	v0,16(v1)
8003e8e8:	30250001 	andi	a1,at,0x1
8003e8ec:	3c018108 	lui	at,0x8108
8003e8f0:	2426ba64 	addiu	a2,at,-17820
8003e8f4:	24070002 	li	a3,2
8003e8f8:	0c00fdfe 	jal	8003f7f8 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E>
8003e8fc:	00000000 	nop
    }
8003e900:	8fbf015c 	lw	ra,348(sp)
8003e904:	27bd0160 	addiu	sp,sp,352
8003e908:	03e00008 	jr	ra
8003e90c:	00000000 	nop
            for byte in buf.iter_mut().rev() {
8003e910:	8fa5003c 	lw	a1,60(sp)
8003e914:	8fa100e4 	lw	at,228(sp)
8003e918:	afa10024 	sw	at,36(sp)
8003e91c:	afa10100 	sw	at,256(sp)
                let n = zero - (x % base); // Get the current place value.
8003e920:	8fa10044 	lw	at,68(sp)
8003e924:	afa10020 	sw	at,32(sp)
8003e928:	8fa40040 	lw	a0,64(sp)
8003e92c:	3c018108 	lui	at,0x8108
8003e930:	2426b9e4 	addiu	a2,at,-17948
8003e934:	0c011aa2 	jal	80046a88 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Rem$GT$3rem17h4d9fcb1072ae4614E>
8003e938:	00000000 	nop
8003e93c:	8fa40020 	lw	a0,32(sp)
8003e940:	00402825 	move	a1,v0
8003e944:	3c018108 	lui	at,0x8108
8003e948:	2426b9f4 	addiu	a2,at,-17932
8003e94c:	0c011a1d 	jal	80046874 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9f0e833ee6c9c697E>
8003e950:	00000000 	nop
8003e954:	8fa5003c 	lw	a1,60(sp)
8003e958:	afa200e8 	sw	v0,232(sp)
                x = x / base; // Deaccumulate the number.
8003e95c:	8fa40040 	lw	a0,64(sp)
8003e960:	3c018108 	lui	at,0x8108
8003e964:	2426ba04 	addiu	a2,at,-17916
8003e968:	0c011a5e 	jal	80046978 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Div$GT$3div17he4860b2e94c433bbE>
8003e96c:	00000000 	nop
8003e970:	afa20040 	sw	v0,64(sp)
8003e974:	27a400e8 	addiu	a0,sp,232
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
8003e978:	0c011baa 	jal	80046ea8 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h3cd2e303bc7c4816E>
8003e97c:	00000000 	nop
8003e980:	00402025 	move	a0,v0
8003e984:	0c011c46 	jal	80047118 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE>
8003e988:	00000000 	nop
8003e98c:	8fa10024 	lw	at,36(sp)
8003e990:	afa10128 	sw	at,296(sp)
8003e994:	a3a2012f 	sb	v0,303(sp)
8003e998:	a3a20131 	sb	v0,305(sp)
8003e99c:	a3a20133 	sb	v0,307(sp)
        ManuallyDrop { value }
8003e9a0:	a3a20132 	sb	v0,306(sp)
    }
8003e9a4:	93a20132 	lbu	v0,306(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
8003e9a8:	a3a20130 	sb	v0,304(sp)
    }
8003e9ac:	93a20130 	lbu	v0,304(sp)
        *self = MaybeUninit::new(val);
8003e9b0:	a0220000 	sb	v0,0(at)
8003e9b4:	afa10134 	sw	at,308(sp)
8003e9b8:	afa10138 	sw	at,312(sp)
                curr -= 1;
8003e9bc:	8fa100c8 	lw	at,200(sp)
8003e9c0:	2422ffff 	addiu	v0,at,-1
8003e9c4:	afa20028 	sw	v0,40(sp)
8003e9c8:	1020000d 	beqz	at,8003ea00 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x2d0>
8003e9cc:	00000000 	nop
8003e9d0:	0800fa76 	j	8003e9d8 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x2a8>
8003e9d4:	00000000 	nop
8003e9d8:	8fa10028 	lw	at,40(sp)
8003e9dc:	afa100c8 	sw	at,200(sp)
8003e9e0:	27a40040 	addiu	a0,sp,64
8003e9e4:	27a50044 	addiu	a1,sp,68
                if x == zero {
8003e9e8:	0c0119d7 	jal	8004675c <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u32$GT$2eq17hc4809db554f420ceE>
8003e9ec:	00000000 	nop
8003e9f0:	1440ff9f 	bnez	v0,8003e870 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x140>
8003e9f4:	00000000 	nop
8003e9f8:	0800fa13 	j	8003e84c <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x11c>
8003e9fc:	00000000 	nop
                curr -= 1;
8003ea00:	3c018108 	lui	at,0x8108
8003ea04:	2424ba14 	addiu	a0,at,-17900
8003ea08:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003ea0c:	00000000 	nop
8003ea10:	27a400cc 	addiu	a0,sp,204
            for byte in buf.iter_mut().rev() {
8003ea14:	0c00ee9c 	jal	8003ba70 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00f1ab10e32c233cE>
8003ea18:	00000000 	nop
8003ea1c:	afa200d4 	sw	v0,212(sp)
8003ea20:	8fa100d4 	lw	at,212(sp)
8003ea24:	1020ff92 	beqz	at,8003e870 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x140>
8003ea28:	00000000 	nop
8003ea2c:	0800fa8d 	j	8003ea34 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x304>
8003ea30:	00000000 	nop
8003ea34:	8fa5003c 	lw	a1,60(sp)
8003ea38:	8fa100d4 	lw	at,212(sp)
8003ea3c:	afa10018 	sw	at,24(sp)
8003ea40:	afa10104 	sw	at,260(sp)
                let n = x % base; // Get the current place value.
8003ea44:	8fa40040 	lw	a0,64(sp)
8003ea48:	3c018108 	lui	at,0x8108
8003ea4c:	2426ba24 	addiu	a2,at,-17884
8003ea50:	0c011aa2 	jal	80046a88 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Rem$GT$3rem17h4d9fcb1072ae4614E>
8003ea54:	00000000 	nop
8003ea58:	8fa5003c 	lw	a1,60(sp)
8003ea5c:	afa200d8 	sw	v0,216(sp)
                x = x / base; // Deaccumulate the number.
8003ea60:	8fa40040 	lw	a0,64(sp)
8003ea64:	3c018108 	lui	at,0x8108
8003ea68:	2426ba34 	addiu	a2,at,-17868
8003ea6c:	0c011a5e 	jal	80046978 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Div$GT$3div17he4860b2e94c433bbE>
8003ea70:	00000000 	nop
8003ea74:	afa20040 	sw	v0,64(sp)
8003ea78:	27a400d8 	addiu	a0,sp,216
                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.
8003ea7c:	0c011baa 	jal	80046ea8 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h3cd2e303bc7c4816E>
8003ea80:	00000000 	nop
8003ea84:	00402025 	move	a0,v0
8003ea88:	0c011c46 	jal	80047118 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE>
8003ea8c:	00000000 	nop
8003ea90:	8fa10018 	lw	at,24(sp)
8003ea94:	afa1011c 	sw	at,284(sp)
8003ea98:	a3a20123 	sb	v0,291(sp)
8003ea9c:	a3a20125 	sb	v0,293(sp)
8003eaa0:	a3a20127 	sb	v0,295(sp)
        ManuallyDrop { value }
8003eaa4:	a3a20126 	sb	v0,294(sp)
    }
8003eaa8:	93a20126 	lbu	v0,294(sp)
        MaybeUninit { value: ManuallyDrop::new(val) }
8003eaac:	a3a20124 	sb	v0,292(sp)
    }
8003eab0:	93a20124 	lbu	v0,292(sp)
        *self = MaybeUninit::new(val);
8003eab4:	a0220000 	sb	v0,0(at)
8003eab8:	afa1013c 	sw	at,316(sp)
8003eabc:	afa10140 	sw	at,320(sp)
                curr -= 1;
8003eac0:	8fa100c8 	lw	at,200(sp)
8003eac4:	2422ffff 	addiu	v0,at,-1
8003eac8:	afa2001c 	sw	v0,28(sp)
8003eacc:	1020000d 	beqz	at,8003eb04 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x3d4>
8003ead0:	00000000 	nop
8003ead4:	0800fab7 	j	8003eadc <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x3ac>
8003ead8:	00000000 	nop
8003eadc:	8fa1001c 	lw	at,28(sp)
8003eae0:	afa100c8 	sw	at,200(sp)
8003eae4:	27a40040 	addiu	a0,sp,64
8003eae8:	27a50044 	addiu	a1,sp,68
                if x == zero {
8003eaec:	0c0119d7 	jal	8004675c <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u32$GT$2eq17hc4809db554f420ceE>
8003eaf0:	00000000 	nop
8003eaf4:	1440ff5e 	bnez	v0,8003e870 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x140>
8003eaf8:	00000000 	nop
8003eafc:	0800fa84 	j	8003ea10 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E+0x2e0>
8003eb00:	00000000 	nop
                curr -= 1;
8003eb04:	3c018108 	lui	at,0x8108
8003eb08:	2424ba44 	addiu	a0,at,-17852
8003eb0c:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003eb10:	00000000 	nop

8003eb14 <_ZN4core3fmt2rt12USIZE_MARKER28_$u7b$$u7b$closure$u7d$$u7d$17hf5206f4f02198d93E>:
// We primarily want to ensure that the function pointer at `USIZE_MARKER` has
// an address corresponding *only* to functions that also take `&usize` as their
// first argument. The read_volatile here ensures that we can safely ready out a
// usize from the passed reference and that this address does not point at a
// non-usize taking function.
static USIZE_MARKER: fn(&usize, &mut Formatter<'_>) -> Result = |ptr, _| {
8003eb14:	27bdffd8 	addiu	sp,sp,-40
8003eb18:	afbf0024 	sw	ra,36(sp)
8003eb1c:	afa50010 	sw	a1,16(sp)
8003eb20:	00800825 	move	at,a0
8003eb24:	8fa40010 	lw	a0,16(sp)
8003eb28:	afa10014 	sw	at,20(sp)
8003eb2c:	afa40018 	sw	a0,24(sp)
8003eb30:	afa6001c 	sw	a2,28(sp)
    // SAFETY: ptr is a reference
    let _v: usize = unsafe { crate::ptr::read_volatile(ptr) };
8003eb34:	0c00e77d 	jal	80039df4 <_ZN4core3ptr13read_volatile17hd45decbd46c08055E>
8003eb38:	00000000 	nop
8003eb3c:	afa20020 	sw	v0,32(sp)
8003eb40:	0800fad2 	j	8003eb48 <_ZN4core3fmt2rt12USIZE_MARKER28_$u7b$$u7b$closure$u7d$$u7d$17hf5206f4f02198d93E+0x34>
8003eb44:	00000000 	nop
    loop {}
8003eb48:	0800fad2 	j	8003eb48 <_ZN4core3fmt2rt12USIZE_MARKER28_$u7b$$u7b$closure$u7d$$u7d$17hf5206f4f02198d93E+0x34>
8003eb4c:	00000000 	nop

8003eb50 <_ZN4core3fmt9Formatter3new17haddd14998f43875aE>:
    pub fn new(buf: &'a mut (dyn Write + 'a)) -> Formatter<'a> {
8003eb50:	27bdffe0 	addiu	sp,sp,-32
8003eb54:	00801025 	move	v0,a0
8003eb58:	afa50018 	sw	a1,24(sp)
8003eb5c:	afa6001c 	sw	a2,28(sp)
8003eb60:	24010003 	li	at,3
            align: rt::Alignment::Unknown,
8003eb64:	a3a10007 	sb	at,7(sp)
            width: None,
8003eb68:	afa00008 	sw	zero,8(sp)
            precision: None,
8003eb6c:	afa00010 	sw	zero,16(sp)
        Formatter {
8003eb70:	ac80001c 	sw	zero,28(a0)
8003eb74:	24010020 	li	at,32
8003eb78:	ac810010 	sw	at,16(a0)
8003eb7c:	93a10007 	lbu	at,7(sp)
8003eb80:	a0810020 	sb	at,32(a0)
8003eb84:	8fa30008 	lw	v1,8(sp)
8003eb88:	8fa1000c 	lw	at,12(sp)
8003eb8c:	ac830000 	sw	v1,0(a0)
8003eb90:	ac810004 	sw	at,4(a0)
8003eb94:	8fa30010 	lw	v1,16(sp)
8003eb98:	8fa10014 	lw	at,20(sp)
8003eb9c:	ac830008 	sw	v1,8(a0)
8003eba0:	ac81000c 	sw	at,12(a0)
8003eba4:	ac850014 	sw	a1,20(a0)
8003eba8:	ac860018 	sw	a2,24(a0)
8003ebac:	27bd0020 	addiu	sp,sp,32
    }
8003ebb0:	03e00008 	jr	ra
8003ebb4:	00000000 	nop

8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>:
    pub const fn new_const(pieces: &'a [&'static str]) -> Self {
8003ebb8:	27bdffb0 	addiu	sp,sp,-80
8003ebbc:	afbf004c 	sw	ra,76(sp)
8003ebc0:	afa60014 	sw	a2,20(sp)
8003ebc4:	afa50018 	sw	a1,24(sp)
8003ebc8:	afa4001c 	sw	a0,28(sp)
8003ebcc:	afa40020 	sw	a0,32(sp)
8003ebd0:	afa50044 	sw	a1,68(sp)
8003ebd4:	afa60048 	sw	a2,72(sp)
        if pieces.len() > 1 {
8003ebd8:	2cc10002 	sltiu	at,a2,2
8003ebdc:	10200016 	beqz	at,8003ec38 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE+0x80>
8003ebe0:	00000000 	nop
8003ebe4:	0800fafb 	j	8003ebec <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE+0x34>
8003ebe8:	00000000 	nop
        Arguments { pieces, fmt: None, args: &[] }
8003ebec:	8fa20020 	lw	v0,32(sp)
8003ebf0:	8fa1001c 	lw	at,28(sp)
8003ebf4:	8fa30014 	lw	v1,20(sp)
8003ebf8:	8fa40018 	lw	a0,24(sp)
8003ebfc:	afa0003c 	sw	zero,60(sp)
8003ec00:	ac240000 	sw	a0,0(at)
8003ec04:	ac230004 	sw	v1,4(at)
8003ec08:	8fa4003c 	lw	a0,60(sp)
8003ec0c:	8fa30040 	lw	v1,64(sp)
8003ec10:	ac240010 	sw	a0,16(at)
8003ec14:	ac230014 	sw	v1,20(at)
8003ec18:	3c038108 	lui	v1,0x8108
8003ec1c:	2463b030 	addiu	v1,v1,-20432
8003ec20:	ac230008 	sw	v1,8(at)
8003ec24:	ac20000c 	sw	zero,12(at)
    }
8003ec28:	8fbf004c 	lw	ra,76(sp)
8003ec2c:	27bd0050 	addiu	sp,sp,80
8003ec30:	03e00008 	jr	ra
8003ec34:	00000000 	nop
            panic!("invalid args");
8003ec38:	3c018108 	lui	at,0x8108
8003ec3c:	2425bb40 	addiu	a1,at,-17600
8003ec40:	27a40024 	addiu	a0,sp,36
8003ec44:	afa40010 	sw	a0,16(sp)
8003ec48:	24060001 	li	a2,1
8003ec4c:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003ec50:	00000000 	nop
8003ec54:	8fa40010 	lw	a0,16(sp)
8003ec58:	3c018108 	lui	at,0x8108
8003ec5c:	2425bbb8 	addiu	a1,at,-17480
8003ec60:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003ec64:	00000000 	nop

8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>:
    pub fn new_v1(pieces: &'a [&'static str], args: &'a [rt::Argument<'a>]) -> Arguments<'a> {
8003ec68:	27bdff98 	addiu	sp,sp,-104
8003ec6c:	afbf0064 	sw	ra,100(sp)
8003ec70:	afa7001c 	sw	a3,28(sp)
8003ec74:	afa60020 	sw	a2,32(sp)
8003ec78:	afa50024 	sw	a1,36(sp)
8003ec7c:	afa40028 	sw	a0,40(sp)
8003ec80:	afa4002c 	sw	a0,44(sp)
8003ec84:	8fa10078 	lw	at,120(sp)
8003ec88:	afa10030 	sw	at,48(sp)
8003ec8c:	afa50054 	sw	a1,84(sp)
8003ec90:	afa60058 	sw	a2,88(sp)
8003ec94:	afa7005c 	sw	a3,92(sp)
8003ec98:	afa10060 	sw	at,96(sp)
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
8003ec9c:	00c1082b 	sltu	at,a2,at
8003eca0:	1420000a 	bnez	at,8003eccc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E+0x64>
8003eca4:	00000000 	nop
8003eca8:	0800fb2c 	j	8003ecb0 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E+0x48>
8003ecac:	00000000 	nop
8003ecb0:	8fa10030 	lw	at,48(sp)
8003ecb4:	24210001 	addiu	at,at,1
8003ecb8:	afa10018 	sw	at,24(sp)
8003ecbc:	10200016 	beqz	at,8003ed18 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E+0xb0>
8003ecc0:	00000000 	nop
8003ecc4:	0800fb3f 	j	8003ecfc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E+0x94>
8003ecc8:	00000000 	nop
            panic!("invalid args");
8003eccc:	3c018108 	lui	at,0x8108
8003ecd0:	2425bb40 	addiu	a1,at,-17600
8003ecd4:	27a40034 	addiu	a0,sp,52
8003ecd8:	afa40014 	sw	a0,20(sp)
8003ecdc:	24060001 	li	a2,1
8003ece0:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
8003ece4:	00000000 	nop
8003ece8:	8fa40014 	lw	a0,20(sp)
8003ecec:	3c018108 	lui	at,0x8108
8003ecf0:	2425bbd8 	addiu	a1,at,-17448
8003ecf4:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8003ecf8:	00000000 	nop
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
8003ecfc:	8fa10018 	lw	at,24(sp)
8003ed00:	8fa20020 	lw	v0,32(sp)
8003ed04:	0022082b 	sltu	at,at,v0
8003ed08:	1420fff0 	bnez	at,8003eccc <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E+0x64>
8003ed0c:	00000000 	nop
8003ed10:	0800fb4a 	j	8003ed28 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E+0xc0>
8003ed14:	00000000 	nop
8003ed18:	3c018108 	lui	at,0x8108
8003ed1c:	2424bbc8 	addiu	a0,at,-17464
8003ed20:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003ed24:	00000000 	nop
        Arguments { pieces, fmt: None, args }
8003ed28:	8fa2002c 	lw	v0,44(sp)
8003ed2c:	8fa10030 	lw	at,48(sp)
8003ed30:	8fa30028 	lw	v1,40(sp)
8003ed34:	8fa4001c 	lw	a0,28(sp)
8003ed38:	8fa50020 	lw	a1,32(sp)
8003ed3c:	8fa60024 	lw	a2,36(sp)
8003ed40:	afa0004c 	sw	zero,76(sp)
8003ed44:	ac660000 	sw	a2,0(v1)
8003ed48:	ac650004 	sw	a1,4(v1)
8003ed4c:	8fa6004c 	lw	a2,76(sp)
8003ed50:	8fa50050 	lw	a1,80(sp)
8003ed54:	ac660010 	sw	a2,16(v1)
8003ed58:	ac650014 	sw	a1,20(v1)
8003ed5c:	ac640008 	sw	a0,8(v1)
8003ed60:	ac61000c 	sw	at,12(v1)
    }
8003ed64:	8fbf0064 	lw	ra,100(sp)
8003ed68:	27bd0068 	addiu	sp,sp,104
8003ed6c:	03e00008 	jr	ra
8003ed70:	00000000 	nop

8003ed74 <_ZN4core3fmt9Arguments16new_v1_formatted17h81eef672d0f8327cE>:
    pub fn new_v1_formatted(
8003ed74:	27bdffd8 	addiu	sp,sp,-40
8003ed78:	00801025 	move	v0,a0
8003ed7c:	8fa30040 	lw	v1,64(sp)
8003ed80:	8fa8003c 	lw	t0,60(sp)
8003ed84:	8fa10038 	lw	at,56(sp)
        _unsafe_arg: rt::UnsafeArg,
8003ed88:	afa5000c 	sw	a1,12(sp)
8003ed8c:	afa60010 	sw	a2,16(sp)
8003ed90:	afa70014 	sw	a3,20(sp)
8003ed94:	afa10018 	sw	at,24(sp)
8003ed98:	afa8001c 	sw	t0,28(sp)
8003ed9c:	afa30020 	sw	v1,32(sp)
        Arguments { pieces, fmt: Some(fmt), args }
8003eda0:	afa80004 	sw	t0,4(sp)
8003eda4:	afa30008 	sw	v1,8(sp)
8003eda8:	ac850000 	sw	a1,0(a0)
8003edac:	ac860004 	sw	a2,4(a0)
8003edb0:	8fa50004 	lw	a1,4(sp)
8003edb4:	8fa30008 	lw	v1,8(sp)
8003edb8:	ac850010 	sw	a1,16(a0)
8003edbc:	ac830014 	sw	v1,20(a0)
8003edc0:	ac870008 	sw	a3,8(a0)
8003edc4:	ac81000c 	sw	at,12(a0)
8003edc8:	27bd0028 	addiu	sp,sp,40
    }
8003edcc:	03e00008 	jr	ra
8003edd0:	00000000 	nop

8003edd4 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E>:
    pub const fn as_str(&self) -> Option<&'static str> {
8003edd4:	27bdffe0 	addiu	sp,sp,-32
8003edd8:	00800825 	move	at,a0
8003eddc:	afa10018 	sw	at,24(sp)
        match (self.pieces, self.args) {
8003ede0:	8c240000 	lw	a0,0(at)
8003ede4:	8c230004 	lw	v1,4(at)
8003ede8:	8c220008 	lw	v0,8(at)
8003edec:	8c21000c 	lw	at,12(at)
8003edf0:	afa40008 	sw	a0,8(sp)
8003edf4:	afa3000c 	sw	v1,12(sp)
8003edf8:	afa20010 	sw	v0,16(sp)
8003edfc:	afa10014 	sw	at,20(sp)
            ([], []) => Some(""),
8003ee00:	8fa1000c 	lw	at,12(sp)
8003ee04:	10200009 	beqz	at,8003ee2c <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0x58>
8003ee08:	00000000 	nop
8003ee0c:	0800fb85 	j	8003ee14 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0x40>
8003ee10:	00000000 	nop
            ([s], []) => Some(s),
8003ee14:	8fa1000c 	lw	at,12(sp)
8003ee18:	24020001 	li	v0,1
8003ee1c:	1022000b 	beq	at,v0,8003ee4c <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0x78>
8003ee20:	00000000 	nop
8003ee24:	0800fb90 	j	8003ee40 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0x6c>
8003ee28:	00000000 	nop
            ([], []) => Some(""),
8003ee2c:	8fa10014 	lw	at,20(sp)
8003ee30:	10200018 	beqz	at,8003ee94 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0xc0>
8003ee34:	00000000 	nop
8003ee38:	0800fb90 	j	8003ee40 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0x6c>
8003ee3c:	00000000 	nop
            _ => None,
8003ee40:	afa00000 	sw	zero,0(sp)
8003ee44:	0800fba0 	j	8003ee80 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0xac>
8003ee48:	00000000 	nop
            ([s], []) => Some(s),
8003ee4c:	8fa10014 	lw	at,20(sp)
8003ee50:	1420fffb 	bnez	at,8003ee40 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0x6c>
8003ee54:	00000000 	nop
8003ee58:	0800fb98 	j	8003ee60 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0x8c>
8003ee5c:	00000000 	nop
8003ee60:	8fa10008 	lw	at,8(sp)
8003ee64:	afa1001c 	sw	at,28(sp)
8003ee68:	8c220000 	lw	v0,0(at)
8003ee6c:	8c210004 	lw	at,4(at)
8003ee70:	afa20000 	sw	v0,0(sp)
8003ee74:	afa10004 	sw	at,4(sp)
8003ee78:	0800fba0 	j	8003ee80 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0xac>
8003ee7c:	00000000 	nop
    }
8003ee80:	8fa20000 	lw	v0,0(sp)
8003ee84:	8fa30004 	lw	v1,4(sp)
8003ee88:	27bd0020 	addiu	sp,sp,32
8003ee8c:	03e00008 	jr	ra
8003ee90:	00000000 	nop
            ([], []) => Some(""),
8003ee94:	3c018108 	lui	at,0x8108
8003ee98:	2421b030 	addiu	at,at,-20432
8003ee9c:	afa10000 	sw	at,0(sp)
8003eea0:	afa00004 	sw	zero,4(sp)
8003eea4:	0800fba0 	j	8003ee80 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E+0xac>
8003eea8:	00000000 	nop

8003eeac <_ZN4core3fmt9Arguments23as_statically_known_str17hd9501a45a7712a76E>:
    fn as_statically_known_str(&self) -> Option<&'static str> {
8003eeac:	27bdffd0 	addiu	sp,sp,-48
8003eeb0:	afbf002c 	sw	ra,44(sp)
8003eeb4:	afa40024 	sw	a0,36(sp)
        let s = self.as_str();
8003eeb8:	0c00fb75 	jal	8003edd4 <_ZN4core3fmt9Arguments6as_str17hebc33fb7e1e21b62E>
8003eebc:	00000000 	nop
8003eec0:	afa2001c 	sw	v0,28(sp)
8003eec4:	afa30020 	sw	v1,32(sp)
8003eec8:	27a4001c 	addiu	a0,sp,28
        if core::intrinsics::is_val_statically_known(s.is_some()) { s } else { None }
8003eecc:	0c00f030 	jal	8003c0c0 <_ZN4core6option15Option$LT$T$GT$7is_some17hf03c679c9733e5acE>
8003eed0:	00000000 	nop
8003eed4:	24010000 	li	at,0
8003eed8:	a3a0002b 	sb	zero,43(sp)
8003eedc:	93a1002b 	lbu	at,43(sp)
8003eee0:	30210001 	andi	at,at,0x1
8003eee4:	14200006 	bnez	at,8003ef00 <_ZN4core3fmt9Arguments23as_statically_known_str17hd9501a45a7712a76E+0x54>
8003eee8:	00000000 	nop
8003eeec:	0800fbbd 	j	8003eef4 <_ZN4core3fmt9Arguments23as_statically_known_str17hd9501a45a7712a76E+0x48>
8003eef0:	00000000 	nop
8003eef4:	afa00014 	sw	zero,20(sp)
8003eef8:	0800fbc6 	j	8003ef18 <_ZN4core3fmt9Arguments23as_statically_known_str17hd9501a45a7712a76E+0x6c>
8003eefc:	00000000 	nop
8003ef00:	8fa2001c 	lw	v0,28(sp)
8003ef04:	8fa10020 	lw	at,32(sp)
8003ef08:	afa20014 	sw	v0,20(sp)
8003ef0c:	afa10018 	sw	at,24(sp)
8003ef10:	0800fbc6 	j	8003ef18 <_ZN4core3fmt9Arguments23as_statically_known_str17hd9501a45a7712a76E+0x6c>
8003ef14:	00000000 	nop
    }
8003ef18:	8fa20014 	lw	v0,20(sp)
8003ef1c:	8fa30018 	lw	v1,24(sp)
8003ef20:	8fbf002c 	lw	ra,44(sp)
8003ef24:	27bd0030 	addiu	sp,sp,48
8003ef28:	03e00008 	jr	ra
8003ef2c:	00000000 	nop

8003ef30 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h21f7f40895f3b40cE>:
    fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {
8003ef30:	27bdffc8 	addiu	sp,sp,-56
8003ef34:	afbf0034 	sw	ra,52(sp)
8003ef38:	00800825 	move	at,a0
8003ef3c:	afa1002c 	sw	at,44(sp)
8003ef40:	afa50030 	sw	a1,48(sp)
        write(fmt.buf, *self)
8003ef44:	8ca40014 	lw	a0,20(a1)
8003ef48:	8ca50018 	lw	a1,24(a1)
8003ef4c:	8c220014 	lw	v0,20(at)
8003ef50:	afa20028 	sw	v0,40(sp)
8003ef54:	8c220010 	lw	v0,16(at)
8003ef58:	afa20024 	sw	v0,36(sp)
8003ef5c:	8c22000c 	lw	v0,12(at)
8003ef60:	afa20020 	sw	v0,32(sp)
8003ef64:	8c220008 	lw	v0,8(at)
8003ef68:	afa2001c 	sw	v0,28(sp)
8003ef6c:	8c220004 	lw	v0,4(at)
8003ef70:	afa20018 	sw	v0,24(sp)
8003ef74:	8c210000 	lw	at,0(at)
8003ef78:	afa10014 	sw	at,20(sp)
8003ef7c:	27a60014 	addiu	a2,sp,20
8003ef80:	0c00fbe6 	jal	8003ef98 <_ZN4core3fmt5write17h6036e54969122141E>
8003ef84:	00000000 	nop
    }
8003ef88:	8fbf0034 	lw	ra,52(sp)
8003ef8c:	27bd0038 	addiu	sp,sp,56
8003ef90:	03e00008 	jr	ra
8003ef94:	00000000 	nop

8003ef98 <_ZN4core3fmt5write17h6036e54969122141E>:
pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {
8003ef98:	27bdfef8 	addiu	sp,sp,-264
8003ef9c:	afbf0104 	sw	ra,260(sp)
8003efa0:	afa60030 	sw	a2,48(sp)
8003efa4:	00a03025 	move	a2,a1
8003efa8:	00802825 	move	a1,a0
        formatter.buf.write_str(*piece)?;
8003efac:	afa500d0 	sw	a1,208(sp)
8003efb0:	afa600d4 	sw	a2,212(sp)
8003efb4:	27a40040 	addiu	a0,sp,64
    let mut formatter = Formatter::new(output);
8003efb8:	0c00fad4 	jal	8003eb50 <_ZN4core3fmt9Formatter3new17haddd14998f43875aE>
8003efbc:	00000000 	nop
8003efc0:	8fa60030 	lw	a2,48(sp)
    let mut idx = 0;
8003efc4:	afa00064 	sw	zero,100(sp)
    match args.fmt {
8003efc8:	8cc10010 	lw	at,16(a2)
8003efcc:	1420001a 	bnez	at,8003f038 <_ZN4core3fmt5write17h6036e54969122141E+0xa0>
8003efd0:	00000000 	nop
8003efd4:	0800fbf7 	j	8003efdc <_ZN4core3fmt5write17h6036e54969122141E+0x44>
8003efd8:	00000000 	nop
            for (i, arg) in args.args.iter().enumerate() {
8003efdc:	8fa10030 	lw	at,48(sp)
8003efe0:	8c240008 	lw	a0,8(at)
8003efe4:	8c25000c 	lw	a1,12(at)
8003efe8:	0c010952 	jal	80042548 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hc220d605b982b825E>
8003efec:	00000000 	nop
8003eff0:	00402825 	move	a1,v0
8003eff4:	00603025 	move	a2,v1
8003eff8:	27a40074 	addiu	a0,sp,116
8003effc:	afa4002c 	sw	a0,44(sp)
8003f000:	0c00efdb 	jal	8003bf6c <_ZN4core4iter6traits8iterator8Iterator9enumerate17hc8825050a5fd6479E>
8003f004:	00000000 	nop
8003f008:	8fa5002c 	lw	a1,44(sp)
8003f00c:	27a40068 	addiu	a0,sp,104
8003f010:	0c00ef34 	jal	8003bcd0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc1247a7b3b77f09fE>
8003f014:	00000000 	nop
8003f018:	8fa10070 	lw	at,112(sp)
8003f01c:	afa10088 	sw	at,136(sp)
8003f020:	8fa1006c 	lw	at,108(sp)
8003f024:	afa10084 	sw	at,132(sp)
8003f028:	8fa10068 	lw	at,104(sp)
8003f02c:	afa10080 	sw	at,128(sp)
8003f030:	0800fc27 	j	8003f09c <_ZN4core3fmt5write17h6036e54969122141E+0x104>
8003f034:	00000000 	nop
        Some(fmt) => {
8003f038:	8fa10030 	lw	at,48(sp)
8003f03c:	8c240010 	lw	a0,16(at)
8003f040:	8c250014 	lw	a1,20(at)
8003f044:	afa400e4 	sw	a0,228(sp)
8003f048:	afa500e8 	sw	a1,232(sp)
            for (i, arg) in fmt.iter().enumerate() {
8003f04c:	0c01093e 	jal	800424f8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h5bb4b3109a0ec868E>
8003f050:	00000000 	nop
8003f054:	00402825 	move	a1,v0
8003f058:	00603025 	move	a2,v1
8003f05c:	27a400a4 	addiu	a0,sp,164
8003f060:	afa40028 	sw	a0,40(sp)
8003f064:	0c00efce 	jal	8003bf38 <_ZN4core4iter6traits8iterator8Iterator9enumerate17h177bb510e964e1c9E>
8003f068:	00000000 	nop
8003f06c:	8fa50028 	lw	a1,40(sp)
8003f070:	27a40098 	addiu	a0,sp,152
8003f074:	0c00ef19 	jal	8003bc64 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7649a48ed6f3f9b5E>
8003f078:	00000000 	nop
8003f07c:	8fa100a0 	lw	at,160(sp)
8003f080:	afa100b8 	sw	at,184(sp)
8003f084:	8fa1009c 	lw	at,156(sp)
8003f088:	afa100b4 	sw	at,180(sp)
8003f08c:	8fa10098 	lw	at,152(sp)
8003f090:	afa100b0 	sw	at,176(sp)
8003f094:	0800fc99 	j	8003f264 <_ZN4core3fmt5write17h6036e54969122141E+0x2cc>
8003f098:	00000000 	nop
8003f09c:	27a40080 	addiu	a0,sp,128
            for (i, arg) in args.args.iter().enumerate() {
8003f0a0:	0c00edf1 	jal	8003b7c4 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64bb729b688eb76bE>
8003f0a4:	00000000 	nop
8003f0a8:	afa2008c 	sw	v0,140(sp)
8003f0ac:	afa30090 	sw	v1,144(sp)
8003f0b0:	8fa10090 	lw	at,144(sp)
8003f0b4:	1420000f 	bnez	at,8003f0f4 <_ZN4core3fmt5write17h6036e54969122141E+0x15c>
8003f0b8:	00000000 	nop
8003f0bc:	0800fc31 	j	8003f0c4 <_ZN4core3fmt5write17h6036e54969122141E+0x12c>
8003f0c0:	00000000 	nop
    if let Some(piece) = args.pieces.get(idx) {
8003f0c4:	8fa10030 	lw	at,48(sp)
8003f0c8:	8c240000 	lw	a0,0(at)
8003f0cc:	8c250004 	lw	a1,4(at)
8003f0d0:	8fa60064 	lw	a2,100(sp)
8003f0d4:	0c0108e9 	jal	800423a4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h437f19a6e4d4a724E>
8003f0d8:	00000000 	nop
8003f0dc:	afa200c8 	sw	v0,200(sp)
8003f0e0:	8fa100c8 	lw	at,200(sp)
8003f0e4:	1420007e 	bnez	at,8003f2e0 <_ZN4core3fmt5write17h6036e54969122141E+0x348>
8003f0e8:	00000000 	nop
8003f0ec:	0800fccb 	j	8003f32c <_ZN4core3fmt5write17h6036e54969122141E+0x394>
8003f0f0:	00000000 	nop
            for (i, arg) in args.args.iter().enumerate() {
8003f0f4:	8fa10030 	lw	at,48(sp)
8003f0f8:	8fa6008c 	lw	a2,140(sp)
8003f0fc:	afa600d8 	sw	a2,216(sp)
8003f100:	8fa20090 	lw	v0,144(sp)
8003f104:	afa20020 	sw	v0,32(sp)
8003f108:	afa200dc 	sw	v0,220(sp)
                let piece = unsafe { args.pieces.get_unchecked(i) };
8003f10c:	8c240000 	lw	a0,0(at)
8003f110:	8c250004 	lw	a1,4(at)
8003f114:	0c010907 	jal	8004241c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17h2440dac3f0c7bee0E>
8003f118:	00000000 	nop
8003f11c:	00400825 	move	at,v0
8003f120:	afa10024 	sw	at,36(sp)
8003f124:	afa200e0 	sw	v0,224(sp)
                if !piece.is_empty() {
8003f128:	8c440000 	lw	a0,0(v0)
8003f12c:	8c450004 	lw	a1,4(v0)
8003f130:	0c01131e 	jal	80044c78 <_ZN4core3str21_$LT$impl$u20$str$GT$8is_empty17h5474706a12608b3eE>
8003f134:	00000000 	nop
8003f138:	14400015 	bnez	v0,8003f190 <_ZN4core3fmt5write17h6036e54969122141E+0x1f8>
8003f13c:	00000000 	nop
8003f140:	0800fc52 	j	8003f148 <_ZN4core3fmt5write17h6036e54969122141E+0x1b0>
8003f144:	00000000 	nop
                    formatter.buf.write_str(*piece)?;
8003f148:	8fa20024 	lw	v0,36(sp)
8003f14c:	8fa40054 	lw	a0,84(sp)
8003f150:	8fa10058 	lw	at,88(sp)
8003f154:	8c450000 	lw	a1,0(v0)
8003f158:	8c460004 	lw	a2,4(v0)
8003f15c:	8c39000c 	lw	t9,12(at)
8003f160:	0320f809 	jalr	t9
8003f164:	00000000 	nop
8003f168:	00402025 	move	a0,v0
8003f16c:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003f170:	00000000 	nop
8003f174:	a3a20096 	sb	v0,150(sp)
8003f178:	93a10096 	lbu	at,150(sp)
8003f17c:	30210001 	andi	at,at,0x1
8003f180:	14200015 	bnez	at,8003f1d8 <_ZN4core3fmt5write17h6036e54969122141E+0x240>
8003f184:	00000000 	nop
8003f188:	0800fc64 	j	8003f190 <_ZN4core3fmt5write17h6036e54969122141E+0x1f8>
8003f18c:	00000000 	nop
8003f190:	8fa10020 	lw	at,32(sp)
8003f194:	afa100fc 	sw	at,252(sp)
8003f198:	27a50040 	addiu	a1,sp,64
8003f19c:	afa50100 	sw	a1,256(sp)
        (self.formatter)(self.value, f)
8003f1a0:	8c390004 	lw	t9,4(at)
8003f1a4:	8c240000 	lw	a0,0(at)
8003f1a8:	0320f809 	jalr	t9
8003f1ac:	00000000 	nop
8003f1b0:	00402025 	move	a0,v0
                arg.fmt(&mut formatter)?;
8003f1b4:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003f1b8:	00000000 	nop
8003f1bc:	a3a20097 	sb	v0,151(sp)
8003f1c0:	93a10097 	lbu	at,151(sp)
8003f1c4:	30210001 	andi	at,at,0x1
8003f1c8:	10200010 	beqz	at,8003f20c <_ZN4core3fmt5write17h6036e54969122141E+0x274>
8003f1cc:	00000000 	nop
8003f1d0:	0800fc8a 	j	8003f228 <_ZN4core3fmt5write17h6036e54969122141E+0x290>
8003f1d4:	00000000 	nop
                    formatter.buf.write_str(*piece)?;
8003f1d8:	3c018108 	lui	at,0x8108
8003f1dc:	2424bbe8 	addiu	a0,at,-17432
8003f1e0:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003f1e4:	00000000 	nop
8003f1e8:	a3a2003f 	sb	v0,63(sp)
8003f1ec:	0800fc7d 	j	8003f1f4 <_ZN4core3fmt5write17h6036e54969122141E+0x25c>
8003f1f0:	00000000 	nop
}
8003f1f4:	93a1003f 	lbu	at,63(sp)
8003f1f8:	30220001 	andi	v0,at,0x1
8003f1fc:	8fbf0104 	lw	ra,260(sp)
8003f200:	27bd0108 	addiu	sp,sp,264
8003f204:	03e00008 	jr	ra
8003f208:	00000000 	nop
                idx += 1;
8003f20c:	8fa10064 	lw	at,100(sp)
8003f210:	24210001 	addiu	at,at,1
8003f214:	afa1001c 	sw	at,28(sp)
8003f218:	1020000e 	beqz	at,8003f254 <_ZN4core3fmt5write17h6036e54969122141E+0x2bc>
8003f21c:	00000000 	nop
8003f220:	0800fc91 	j	8003f244 <_ZN4core3fmt5write17h6036e54969122141E+0x2ac>
8003f224:	00000000 	nop
                arg.fmt(&mut formatter)?;
8003f228:	3c018108 	lui	at,0x8108
8003f22c:	2424bc08 	addiu	a0,at,-17400
8003f230:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003f234:	00000000 	nop
8003f238:	a3a2003f 	sb	v0,63(sp)
8003f23c:	0800fc7d 	j	8003f1f4 <_ZN4core3fmt5write17h6036e54969122141E+0x25c>
8003f240:	00000000 	nop
                idx += 1;
8003f244:	8fa1001c 	lw	at,28(sp)
8003f248:	afa10064 	sw	at,100(sp)
            for (i, arg) in args.args.iter().enumerate() {
8003f24c:	0800fc27 	j	8003f09c <_ZN4core3fmt5write17h6036e54969122141E+0x104>
8003f250:	00000000 	nop
                idx += 1;
8003f254:	3c018108 	lui	at,0x8108
8003f258:	2424bbf8 	addiu	a0,at,-17416
8003f25c:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003f260:	00000000 	nop
8003f264:	27a400b0 	addiu	a0,sp,176
            for (i, arg) in fmt.iter().enumerate() {
8003f268:	0c00edb7 	jal	8003b6dc <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h189ea909efe6fdf2E>
8003f26c:	00000000 	nop
8003f270:	afa200bc 	sw	v0,188(sp)
8003f274:	afa300c0 	sw	v1,192(sp)
8003f278:	8fa100c0 	lw	at,192(sp)
8003f27c:	1020ff91 	beqz	at,8003f0c4 <_ZN4core3fmt5write17h6036e54969122141E+0x12c>
8003f280:	00000000 	nop
8003f284:	0800fca3 	j	8003f28c <_ZN4core3fmt5write17h6036e54969122141E+0x2f4>
8003f288:	00000000 	nop
8003f28c:	8fa10030 	lw	at,48(sp)
8003f290:	8fa600bc 	lw	a2,188(sp)
8003f294:	afa600f0 	sw	a2,240(sp)
8003f298:	8fa200c0 	lw	v0,192(sp)
8003f29c:	afa20014 	sw	v0,20(sp)
8003f2a0:	afa200f4 	sw	v0,244(sp)
                let piece = unsafe { args.pieces.get_unchecked(i) };
8003f2a4:	8c240000 	lw	a0,0(at)
8003f2a8:	8c250004 	lw	a1,4(at)
8003f2ac:	0c010907 	jal	8004241c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17h2440dac3f0c7bee0E>
8003f2b0:	00000000 	nop
8003f2b4:	00400825 	move	at,v0
8003f2b8:	afa10018 	sw	at,24(sp)
8003f2bc:	afa200f8 	sw	v0,248(sp)
                if !piece.is_empty() {
8003f2c0:	8c440000 	lw	a0,0(v0)
8003f2c4:	8c450004 	lw	a1,4(v0)
8003f2c8:	0c01131e 	jal	80044c78 <_ZN4core3str21_$LT$impl$u20$str$GT$8is_empty17h5474706a12608b3eE>
8003f2cc:	00000000 	nop
8003f2d0:	14400033 	bnez	v0,8003f3a0 <_ZN4core3fmt5write17h6036e54969122141E+0x408>
8003f2d4:	00000000 	nop
8003f2d8:	0800fcd6 	j	8003f358 <_ZN4core3fmt5write17h6036e54969122141E+0x3c0>
8003f2dc:	00000000 	nop
    if let Some(piece) = args.pieces.get(idx) {
8003f2e0:	8fa200c8 	lw	v0,200(sp)
8003f2e4:	afa200ec 	sw	v0,236(sp)
        formatter.buf.write_str(*piece)?;
8003f2e8:	8fa40054 	lw	a0,84(sp)
8003f2ec:	8fa10058 	lw	at,88(sp)
8003f2f0:	8c450000 	lw	a1,0(v0)
8003f2f4:	8c460004 	lw	a2,4(v0)
8003f2f8:	8c39000c 	lw	t9,12(at)
8003f2fc:	0320f809 	jalr	t9
8003f300:	00000000 	nop
8003f304:	00402025 	move	a0,v0
8003f308:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003f30c:	00000000 	nop
8003f310:	a3a200cf 	sb	v0,207(sp)
8003f314:	93a100cf 	lbu	at,207(sp)
8003f318:	30210001 	andi	at,at,0x1
8003f31c:	14200007 	bnez	at,8003f33c <_ZN4core3fmt5write17h6036e54969122141E+0x3a4>
8003f320:	00000000 	nop
8003f324:	0800fccb 	j	8003f32c <_ZN4core3fmt5write17h6036e54969122141E+0x394>
8003f328:	00000000 	nop
8003f32c:	24010000 	li	at,0
    Ok(())
8003f330:	a3a0003f 	sb	zero,63(sp)
}
8003f334:	0800fc7d 	j	8003f1f4 <_ZN4core3fmt5write17h6036e54969122141E+0x25c>
8003f338:	00000000 	nop
        formatter.buf.write_str(*piece)?;
8003f33c:	3c018108 	lui	at,0x8108
8003f340:	2424bc18 	addiu	a0,at,-17384
8003f344:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003f348:	00000000 	nop
8003f34c:	a3a2003f 	sb	v0,63(sp)
8003f350:	0800fc7d 	j	8003f1f4 <_ZN4core3fmt5write17h6036e54969122141E+0x25c>
8003f354:	00000000 	nop
                    formatter.buf.write_str(*piece)?;
8003f358:	8fa20018 	lw	v0,24(sp)
8003f35c:	8fa40054 	lw	a0,84(sp)
8003f360:	8fa10058 	lw	at,88(sp)
8003f364:	8c450000 	lw	a1,0(v0)
8003f368:	8c460004 	lw	a2,4(v0)
8003f36c:	8c39000c 	lw	t9,12(at)
8003f370:	0320f809 	jalr	t9
8003f374:	00000000 	nop
8003f378:	00402025 	move	a0,v0
8003f37c:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003f380:	00000000 	nop
8003f384:	a3a200c6 	sb	v0,198(sp)
8003f388:	93a100c6 	lbu	at,198(sp)
8003f38c:	30210001 	andi	at,at,0x1
8003f390:	14200014 	bnez	at,8003f3e4 <_ZN4core3fmt5write17h6036e54969122141E+0x44c>
8003f394:	00000000 	nop
8003f398:	0800fce8 	j	8003f3a0 <_ZN4core3fmt5write17h6036e54969122141E+0x408>
8003f39c:	00000000 	nop
                unsafe { run(&mut formatter, arg, args.args) }?;
8003f3a0:	8fa50014 	lw	a1,20(sp)
8003f3a4:	8fa10030 	lw	at,48(sp)
8003f3a8:	8c260008 	lw	a2,8(at)
8003f3ac:	8c27000c 	lw	a3,12(at)
8003f3b0:	27a40040 	addiu	a0,sp,64
8003f3b4:	0c00fd16 	jal	8003f458 <_ZN4core3fmt3run17h0fd8f215a23abf7bE>
8003f3b8:	00000000 	nop
8003f3bc:	00402025 	move	a0,v0
8003f3c0:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003f3c4:	00000000 	nop
8003f3c8:	a3a200c7 	sb	v0,199(sp)
8003f3cc:	93a100c7 	lbu	at,199(sp)
8003f3d0:	30210001 	andi	at,at,0x1
8003f3d4:	1020000a 	beqz	at,8003f400 <_ZN4core3fmt5write17h6036e54969122141E+0x468>
8003f3d8:	00000000 	nop
8003f3dc:	0800fd07 	j	8003f41c <_ZN4core3fmt5write17h6036e54969122141E+0x484>
8003f3e0:	00000000 	nop
                    formatter.buf.write_str(*piece)?;
8003f3e4:	3c018108 	lui	at,0x8108
8003f3e8:	2424bc28 	addiu	a0,at,-17368
8003f3ec:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003f3f0:	00000000 	nop
8003f3f4:	a3a2003f 	sb	v0,63(sp)
8003f3f8:	0800fc7d 	j	8003f1f4 <_ZN4core3fmt5write17h6036e54969122141E+0x25c>
8003f3fc:	00000000 	nop
                idx += 1;
8003f400:	8fa10064 	lw	at,100(sp)
8003f404:	24210001 	addiu	at,at,1
8003f408:	afa10010 	sw	at,16(sp)
8003f40c:	1020000e 	beqz	at,8003f448 <_ZN4core3fmt5write17h6036e54969122141E+0x4b0>
8003f410:	00000000 	nop
8003f414:	0800fd0e 	j	8003f438 <_ZN4core3fmt5write17h6036e54969122141E+0x4a0>
8003f418:	00000000 	nop
                unsafe { run(&mut formatter, arg, args.args) }?;
8003f41c:	3c018108 	lui	at,0x8108
8003f420:	2424bc48 	addiu	a0,at,-17336
8003f424:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003f428:	00000000 	nop
8003f42c:	a3a2003f 	sb	v0,63(sp)
8003f430:	0800fc7d 	j	8003f1f4 <_ZN4core3fmt5write17h6036e54969122141E+0x25c>
8003f434:	00000000 	nop
                idx += 1;
8003f438:	8fa10010 	lw	at,16(sp)
8003f43c:	afa10064 	sw	at,100(sp)
            for (i, arg) in fmt.iter().enumerate() {
8003f440:	0800fc99 	j	8003f264 <_ZN4core3fmt5write17h6036e54969122141E+0x2cc>
8003f444:	00000000 	nop
                idx += 1;
8003f448:	3c018108 	lui	at,0x8108
8003f44c:	2424bc38 	addiu	a0,at,-17352
8003f450:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003f454:	00000000 	nop

8003f458 <_ZN4core3fmt3run17h0fd8f215a23abf7bE>:
unsafe fn run(fmt: &mut Formatter<'_>, arg: &rt::Placeholder, args: &[rt::Argument<'_>]) -> Result {
8003f458:	27bdffc0 	addiu	sp,sp,-64
8003f45c:	afbf003c 	sw	ra,60(sp)
8003f460:	afa70014 	sw	a3,20(sp)
8003f464:	afa60010 	sw	a2,16(sp)
8003f468:	00a00825 	move	at,a1
8003f46c:	8fa50014 	lw	a1,20(sp)
8003f470:	afa10018 	sw	at,24(sp)
8003f474:	00801825 	move	v1,a0
8003f478:	8fa40010 	lw	a0,16(sp)
8003f47c:	afa3001c 	sw	v1,28(sp)
8003f480:	afa30020 	sw	v1,32(sp)
8003f484:	afa10024 	sw	at,36(sp)
8003f488:	afa40028 	sw	a0,40(sp)
8003f48c:	afa5002c 	sw	a1,44(sp)
    fmt.fill = arg.fill;
8003f490:	8c220010 	lw	v0,16(at)
8003f494:	ac620010 	sw	v0,16(v1)
    fmt.align = arg.align;
8003f498:	9022001c 	lbu	v0,28(at)
8003f49c:	a0620020 	sb	v0,32(v1)
    fmt.flags = arg.flags;
8003f4a0:	8c220018 	lw	v0,24(at)
8003f4a4:	ac62001c 	sw	v0,28(v1)
        fmt.width = getcount(args, &arg.width);
8003f4a8:	24260008 	addiu	a2,at,8
8003f4ac:	0c00fd5b 	jal	8003f56c <_ZN4core3fmt8getcount17h22c87cd4dc34f261E>
8003f4b0:	00000000 	nop
8003f4b4:	8fa40010 	lw	a0,16(sp)
8003f4b8:	8fa50014 	lw	a1,20(sp)
8003f4bc:	8fa60018 	lw	a2,24(sp)
8003f4c0:	8fa1001c 	lw	at,28(sp)
8003f4c4:	ac220000 	sw	v0,0(at)
8003f4c8:	ac230004 	sw	v1,4(at)
        fmt.precision = getcount(args, &arg.precision);
8003f4cc:	0c00fd5b 	jal	8003f56c <_ZN4core3fmt8getcount17h22c87cd4dc34f261E>
8003f4d0:	00000000 	nop
8003f4d4:	8fa4001c 	lw	a0,28(sp)
8003f4d8:	ac820008 	sw	v0,8(a0)
8003f4dc:	ac83000c 	sw	v1,12(a0)
    debug_assert!(arg.position < args.len());
8003f4e0:	0800fd3a 	j	8003f4e8 <_ZN4core3fmt3run17h0fd8f215a23abf7bE+0x90>
8003f4e4:	00000000 	nop
8003f4e8:	8fa20014 	lw	v0,20(sp)
8003f4ec:	8fa10018 	lw	at,24(sp)
8003f4f0:	8c210014 	lw	at,20(at)
8003f4f4:	0022082b 	sltu	at,at,v0
8003f4f8:	1420000a 	bnez	at,8003f524 <_ZN4core3fmt3run17h0fd8f215a23abf7bE+0xcc>
8003f4fc:	00000000 	nop
8003f500:	0800fd42 	j	8003f508 <_ZN4core3fmt3run17h0fd8f215a23abf7bE+0xb0>
8003f504:	00000000 	nop
8003f508:	3c018108 	lui	at,0x8108
8003f50c:	2424bc58 	addiu	a0,at,-17320
8003f510:	3c018108 	lui	at,0x8108
8003f514:	2426bc84 	addiu	a2,at,-17276
8003f518:	2405002b 	li	a1,43
8003f51c:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
8003f520:	00000000 	nop
    let value = unsafe { args.get_unchecked(arg.position) };
8003f524:	8fa50014 	lw	a1,20(sp)
8003f528:	8fa40010 	lw	a0,16(sp)
8003f52c:	8fa10018 	lw	at,24(sp)
8003f530:	8c260014 	lw	a2,20(at)
8003f534:	0c010916 	jal	80042458 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17h6d5ffdb6f0126765E>
8003f538:	00000000 	nop
8003f53c:	8fa5001c 	lw	a1,28(sp)
8003f540:	afa20030 	sw	v0,48(sp)
8003f544:	afa20034 	sw	v0,52(sp)
8003f548:	afa50038 	sw	a1,56(sp)
8003f54c:	8c590004 	lw	t9,4(v0)
8003f550:	8c440000 	lw	a0,0(v0)
8003f554:	0320f809 	jalr	t9
8003f558:	00000000 	nop
}
8003f55c:	8fbf003c 	lw	ra,60(sp)
8003f560:	27bd0040 	addiu	sp,sp,64
8003f564:	03e00008 	jr	ra
8003f568:	00000000 	nop

8003f56c <_ZN4core3fmt8getcount17h22c87cd4dc34f261E>:
unsafe fn getcount(args: &[rt::Argument<'_>], cnt: &rt::Count) -> Option<usize> {
8003f56c:	27bdffa8 	addiu	sp,sp,-88
8003f570:	afbf0054 	sw	ra,84(sp)
8003f574:	afa6001c 	sw	a2,28(sp)
8003f578:	afa50020 	sw	a1,32(sp)
8003f57c:	afa40024 	sw	a0,36(sp)
8003f580:	afa40034 	sw	a0,52(sp)
8003f584:	afa50038 	sw	a1,56(sp)
8003f588:	afa6003c 	sw	a2,60(sp)
    match *cnt {
8003f58c:	8cc10000 	lw	at,0(a2)
8003f590:	afa10028 	sw	at,40(sp)
8003f594:	1020000c 	beqz	at,8003f5c8 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x5c>
8003f598:	00000000 	nop
8003f59c:	0800fd69 	j	8003f5a4 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x38>
8003f5a0:	00000000 	nop
8003f5a4:	8fa10028 	lw	at,40(sp)
8003f5a8:	24020001 	li	v0,1
8003f5ac:	1022000e 	beq	at,v0,8003f5e8 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x7c>
8003f5b0:	00000000 	nop
8003f5b4:	0800fd6f 	j	8003f5bc <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x50>
8003f5b8:	00000000 	nop
8003f5bc:	0800fd80 	j	8003f600 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x94>
8003f5c0:	00000000 	nop
8003f5c4:	0000000d 	break
        rt::Count::Is(n) => Some(n),
8003f5c8:	8fa1001c 	lw	at,28(sp)
8003f5cc:	8c210004 	lw	at,4(at)
8003f5d0:	afa10040 	sw	at,64(sp)
8003f5d4:	afa10030 	sw	at,48(sp)
8003f5d8:	24010001 	li	at,1
8003f5dc:	afa1002c 	sw	at,44(sp)
8003f5e0:	0800fd83 	j	8003f60c <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0xa0>
8003f5e4:	00000000 	nop
        rt::Count::Param(i) => {
8003f5e8:	8fa1001c 	lw	at,28(sp)
8003f5ec:	8c210004 	lw	at,4(at)
8003f5f0:	afa10018 	sw	at,24(sp)
8003f5f4:	afa10044 	sw	at,68(sp)
            debug_assert!(i < args.len());
8003f5f8:	0800fd89 	j	8003f624 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0xb8>
8003f5fc:	00000000 	nop
        rt::Count::Implied => None,
8003f600:	afa0002c 	sw	zero,44(sp)
8003f604:	0800fd83 	j	8003f60c <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0xa0>
8003f608:	00000000 	nop
}
8003f60c:	8fa2002c 	lw	v0,44(sp)
8003f610:	8fa30030 	lw	v1,48(sp)
8003f614:	8fbf0054 	lw	ra,84(sp)
8003f618:	27bd0058 	addiu	sp,sp,88
8003f61c:	03e00008 	jr	ra
8003f620:	00000000 	nop
            debug_assert!(i < args.len());
8003f624:	8fa10018 	lw	at,24(sp)
8003f628:	8fa20020 	lw	v0,32(sp)
8003f62c:	0022082b 	sltu	at,at,v0
8003f630:	1420000a 	bnez	at,8003f65c <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0xf0>
8003f634:	00000000 	nop
8003f638:	0800fd90 	j	8003f640 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0xd4>
8003f63c:	00000000 	nop
8003f640:	3c018108 	lui	at,0x8108
8003f644:	2424afb4 	addiu	a0,at,-20556
8003f648:	3c018108 	lui	at,0x8108
8003f64c:	2426bc94 	addiu	a2,at,-17260
8003f650:	24050020 	li	a1,32
8003f654:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
8003f658:	00000000 	nop
            unsafe { args.get_unchecked(i).as_usize() }
8003f65c:	8fa60018 	lw	a2,24(sp)
8003f660:	8fa50020 	lw	a1,32(sp)
8003f664:	8fa40024 	lw	a0,36(sp)
8003f668:	0c010916 	jal	80042458 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17h6d5ffdb6f0126765E>
8003f66c:	00000000 	nop
8003f670:	00400825 	move	at,v0
8003f674:	afa10014 	sw	at,20(sp)
8003f678:	afa20050 	sw	v0,80(sp)
        if self.formatter as usize == USIZE_MARKER as usize {
8003f67c:	8c410004 	lw	at,4(v0)
8003f680:	3c028004 	lui	v0,0x8004
8003f684:	24428f74 	addiu	v0,v0,-28812
8003f688:	10220006 	beq	at,v0,8003f6a4 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x138>
8003f68c:	00000000 	nop
8003f690:	0800fda6 	j	8003f698 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x12c>
8003f694:	00000000 	nop
            None
8003f698:	afa00048 	sw	zero,72(sp)
        if self.formatter as usize == USIZE_MARKER as usize {
8003f69c:	0800fdb1 	j	8003f6c4 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x158>
8003f6a0:	00000000 	nop
            Some(unsafe { *(self.value as *const _ as *const usize) })
8003f6a4:	8fa10014 	lw	at,20(sp)
8003f6a8:	8c210000 	lw	at,0(at)
8003f6ac:	8c210000 	lw	at,0(at)
8003f6b0:	afa1004c 	sw	at,76(sp)
8003f6b4:	24010001 	li	at,1
8003f6b8:	afa10048 	sw	at,72(sp)
        if self.formatter as usize == USIZE_MARKER as usize {
8003f6bc:	0800fdb1 	j	8003f6c4 <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0x158>
8003f6c0:	00000000 	nop
    }
8003f6c4:	8fa20048 	lw	v0,72(sp)
8003f6c8:	8fa1004c 	lw	at,76(sp)
8003f6cc:	afa2002c 	sw	v0,44(sp)
8003f6d0:	afa10030 	sw	at,48(sp)
8003f6d4:	0800fd83 	j	8003f60c <_ZN4core3fmt8getcount17h22c87cd4dc34f261E+0xa0>
8003f6d8:	00000000 	nop

8003f6dc <_ZN4core3fmt11PostPadding3new17h08745825ff7a709cE>:
    fn new(fill: char, padding: usize) -> PostPadding {
8003f6dc:	27bdfff0 	addiu	sp,sp,-16
8003f6e0:	afa40008 	sw	a0,8(sp)
8003f6e4:	afa5000c 	sw	a1,12(sp)
        PostPadding { fill, padding }
8003f6e8:	afa40000 	sw	a0,0(sp)
8003f6ec:	afa50004 	sw	a1,4(sp)
    }
8003f6f0:	8fa20000 	lw	v0,0(sp)
8003f6f4:	8fa30004 	lw	v1,4(sp)
8003f6f8:	27bd0010 	addiu	sp,sp,16
8003f6fc:	03e00008 	jr	ra
8003f700:	00000000 	nop

8003f704 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E>:
    pub(crate) fn write(self, f: &mut Formatter<'_>) -> Result {
8003f704:	27bdffb8 	addiu	sp,sp,-72
8003f708:	afbf0044 	sw	ra,68(sp)
8003f70c:	afa60010 	sw	a2,16(sp)
8003f710:	afa40014 	sw	a0,20(sp)
            f.buf.write_char(self.fill)?;
8003f714:	afa40038 	sw	a0,56(sp)
8003f718:	afa5003c 	sw	a1,60(sp)
8003f71c:	afa60040 	sw	a2,64(sp)
        for _ in 0..self.padding {
8003f720:	afa0001c 	sw	zero,28(sp)
8003f724:	afa50020 	sw	a1,32(sp)
8003f728:	8fa4001c 	lw	a0,28(sp)
8003f72c:	8fa50020 	lw	a1,32(sp)
8003f730:	0c00ef08 	jal	8003bc20 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h08672f7f2dd54636E>
8003f734:	00000000 	nop
8003f738:	afa20024 	sw	v0,36(sp)
8003f73c:	afa30028 	sw	v1,40(sp)
8003f740:	0800fdd2 	j	8003f748 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E+0x44>
8003f744:	00000000 	nop
8003f748:	27a40024 	addiu	a0,sp,36
8003f74c:	0c00eeff 	jal	8003bbfc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h77596a36d38db716E>
8003f750:	00000000 	nop
8003f754:	afa2002c 	sw	v0,44(sp)
8003f758:	afa30030 	sw	v1,48(sp)
8003f75c:	8fa1002c 	lw	at,44(sp)
8003f760:	14200007 	bnez	at,8003f780 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E+0x7c>
8003f764:	00000000 	nop
8003f768:	0800fddc 	j	8003f770 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E+0x6c>
8003f76c:	00000000 	nop
8003f770:	24010000 	li	at,0
        Ok(())
8003f774:	a3a0001b 	sb	zero,27(sp)
    }
8003f778:	0800fdf1 	j	8003f7c4 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E+0xc0>
8003f77c:	00000000 	nop
            f.buf.write_char(self.fill)?;
8003f780:	8fa50014 	lw	a1,20(sp)
8003f784:	8fa10010 	lw	at,16(sp)
8003f788:	8c240014 	lw	a0,20(at)
8003f78c:	8c210018 	lw	at,24(at)
8003f790:	8c390010 	lw	t9,16(at)
8003f794:	0320f809 	jalr	t9
8003f798:	00000000 	nop
8003f79c:	00402025 	move	a0,v0
8003f7a0:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003f7a4:	00000000 	nop
8003f7a8:	a3a20037 	sb	v0,55(sp)
8003f7ac:	93a10037 	lbu	at,55(sp)
8003f7b0:	30210001 	andi	at,at,0x1
8003f7b4:	1020ffe4 	beqz	at,8003f748 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E+0x44>
8003f7b8:	00000000 	nop
8003f7bc:	0800fdf7 	j	8003f7dc <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E+0xd8>
8003f7c0:	00000000 	nop
    }
8003f7c4:	93a1001b 	lbu	at,27(sp)
8003f7c8:	30220001 	andi	v0,at,0x1
8003f7cc:	8fbf0044 	lw	ra,68(sp)
8003f7d0:	27bd0048 	addiu	sp,sp,72
8003f7d4:	03e00008 	jr	ra
8003f7d8:	00000000 	nop
            f.buf.write_char(self.fill)?;
8003f7dc:	3c018108 	lui	at,0x8108
8003f7e0:	2424bca4 	addiu	a0,at,-17244
8003f7e4:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003f7e8:	00000000 	nop
8003f7ec:	a3a2001b 	sb	v0,27(sp)
8003f7f0:	0800fdf1 	j	8003f7c4 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E+0xc0>
8003f7f4:	00000000 	nop

8003f7f8 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E>:
    pub fn pad_integral(&mut self, is_nonnegative: bool, prefix: &str, buf: &str) -> Result {
8003f7f8:	27bdff18 	addiu	sp,sp,-232
8003f7fc:	afbf00e4 	sw	ra,228(sp)
8003f800:	afa70040 	sw	a3,64(sp)
8003f804:	afa60044 	sw	a2,68(sp)
8003f808:	00a00825 	move	at,a1
8003f80c:	afa10054 	sw	at,84(sp)
8003f810:	00801025 	move	v0,a0
8003f814:	afa20048 	sw	v0,72(sp)
8003f818:	8fa500fc 	lw	a1,252(sp)
8003f81c:	afa5004c 	sw	a1,76(sp)
8003f820:	8fa400f8 	lw	a0,248(sp)
8003f824:	afa40050 	sw	a0,80(sp)
                self.buf.write_str(buf)?;
8003f828:	afa200a0 	sw	v0,160(sp)
8003f82c:	a3a100a7 	sb	at,167(sp)
8003f830:	afa600a8 	sw	a2,168(sp)
8003f834:	afa700ac 	sw	a3,172(sp)
8003f838:	afa400b0 	sw	a0,176(sp)
8003f83c:	afa500b4 	sw	a1,180(sp)
        let mut width = buf.len();
8003f840:	0c011315 	jal	80044c54 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
8003f844:	00000000 	nop
8003f848:	8fa50054 	lw	a1,84(sp)
8003f84c:	afa2006c 	sw	v0,108(sp)
8003f850:	3c010011 	lui	at,0x11
        let mut sign = None;
8003f854:	afa10070 	sw	at,112(sp)
        if !is_nonnegative {
8003f858:	14a0000e 	bnez	a1,8003f894 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x9c>
8003f85c:	00000000 	nop
8003f860:	0800fe1a 	j	8003f868 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x70>
8003f864:	00000000 	nop
8003f868:	2401002d 	li	at,45
            sign = Some('-');
8003f86c:	afa10074 	sw	at,116(sp)
8003f870:	8fa10074 	lw	at,116(sp)
8003f874:	afa10070 	sw	at,112(sp)
            width += 1;
8003f878:	8fa1006c 	lw	at,108(sp)
8003f87c:	24210001 	addiu	at,at,1
8003f880:	afa1003c 	sw	at,60(sp)
8003f884:	1020000e 	beqz	at,8003f8c0 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0xc8>
8003f888:	00000000 	nop
8003f88c:	0800fe2c 	j	8003f8b0 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0xb8>
8003f890:	00000000 	nop
        } else if self.sign_plus() {
8003f894:	8fa40048 	lw	a0,72(sp)
8003f898:	0c0101c4 	jal	80040710 <_ZN4core3fmt9Formatter9sign_plus17hea17fcfa5b72c758E>
8003f89c:	00000000 	nop
8003f8a0:	14400012 	bnez	v0,8003f8ec <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0xf4>
8003f8a4:	00000000 	nop
8003f8a8:	0800fe34 	j	8003f8d0 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0xd8>
8003f8ac:	00000000 	nop
            width += 1;
8003f8b0:	8fa1003c 	lw	at,60(sp)
8003f8b4:	afa1006c 	sw	at,108(sp)
        if !is_nonnegative {
8003f8b8:	0800fe34 	j	8003f8d0 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0xd8>
8003f8bc:	00000000 	nop
            width += 1;
8003f8c0:	3c018108 	lui	at,0x8108
8003f8c4:	2424bcb4 	addiu	a0,at,-17228
8003f8c8:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003f8cc:	00000000 	nop
        let prefix = if self.alternate() {
8003f8d0:	8fa40048 	lw	a0,72(sp)
8003f8d4:	0c0101cb 	jal	8004072c <_ZN4core3fmt9Formatter9alternate17h2b08e2c940b48bcaE>
8003f8d8:	00000000 	nop
8003f8dc:	14400019 	bnez	v0,8003f944 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x14c>
8003f8e0:	00000000 	nop
8003f8e4:	0800fe4e 	j	8003f938 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x140>
8003f8e8:	00000000 	nop
8003f8ec:	2401002b 	li	at,43
            sign = Some('+');
8003f8f0:	afa10078 	sw	at,120(sp)
8003f8f4:	8fa10078 	lw	at,120(sp)
8003f8f8:	afa10070 	sw	at,112(sp)
            width += 1;
8003f8fc:	8fa1006c 	lw	at,108(sp)
8003f900:	24210001 	addiu	at,at,1
8003f904:	afa10038 	sw	at,56(sp)
8003f908:	10200007 	beqz	at,8003f928 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x130>
8003f90c:	00000000 	nop
8003f910:	0800fe46 	j	8003f918 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x120>
8003f914:	00000000 	nop
8003f918:	8fa10038 	lw	at,56(sp)
8003f91c:	afa1006c 	sw	at,108(sp)
        } else if self.sign_plus() {
8003f920:	0800fe34 	j	8003f8d0 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0xd8>
8003f924:	00000000 	nop
            width += 1;
8003f928:	3c018108 	lui	at,0x8108
8003f92c:	2424bcc4 	addiu	a0,at,-17212
8003f930:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003f934:	00000000 	nop
            None
8003f938:	afa0007c 	sw	zero,124(sp)
        let prefix = if self.alternate() {
8003f93c:	0800fe62 	j	8003f988 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x190>
8003f940:	00000000 	nop
            width += prefix.chars().count();
8003f944:	8fa50040 	lw	a1,64(sp)
8003f948:	8fa40044 	lw	a0,68(sp)
8003f94c:	0c0113d3 	jal	80044f4c <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h9ac6a59f518bf3d7E>
8003f950:	00000000 	nop
8003f954:	00402025 	move	a0,v0
8003f958:	00602825 	move	a1,v1
8003f95c:	0c010ef2 	jal	80043bc8 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count17h53f43070aad197f4E>
8003f960:	00000000 	nop
8003f964:	00400825 	move	at,v0
8003f968:	8fa2006c 	lw	v0,108(sp)
8003f96c:	00410821 	addu	at,v0,at
8003f970:	afa10034 	sw	at,52(sp)
8003f974:	0022082b 	sltu	at,at,v0
8003f978:	14200011 	bnez	at,8003f9c0 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x1c8>
8003f97c:	00000000 	nop
8003f980:	0800fe68 	j	8003f9a0 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x1a8>
8003f984:	00000000 	nop
        match self.width {
8003f988:	8fa10048 	lw	at,72(sp)
8003f98c:	8c210000 	lw	at,0(at)
8003f990:	1020000f 	beqz	at,8003f9d0 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x1d8>
8003f994:	00000000 	nop
8003f998:	0800fe84 	j	8003fa10 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x218>
8003f99c:	00000000 	nop
            width += prefix.chars().count();
8003f9a0:	8fa10040 	lw	at,64(sp)
8003f9a4:	8fa20044 	lw	v0,68(sp)
8003f9a8:	8fa30034 	lw	v1,52(sp)
8003f9ac:	afa3006c 	sw	v1,108(sp)
            Some(prefix)
8003f9b0:	afa2007c 	sw	v0,124(sp)
8003f9b4:	afa10080 	sw	at,128(sp)
        let prefix = if self.alternate() {
8003f9b8:	0800fe62 	j	8003f988 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x190>
8003f9bc:	00000000 	nop
            width += prefix.chars().count();
8003f9c0:	3c018108 	lui	at,0x8108
8003f9c4:	2424bcd4 	addiu	a0,at,-17196
8003f9c8:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
8003f9cc:	00000000 	nop
                write_prefix(self, sign, prefix)?;
8003f9d0:	8fa40048 	lw	a0,72(sp)
8003f9d4:	8fa50070 	lw	a1,112(sp)
8003f9d8:	8fa6007c 	lw	a2,124(sp)
8003f9dc:	8fa70080 	lw	a3,128(sp)
8003f9e0:	0c00ffcb 	jal	8003ff2c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E>
8003f9e4:	00000000 	nop
8003f9e8:	00402025 	move	a0,v0
8003f9ec:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003f9f0:	00000000 	nop
8003f9f4:	a3a20084 	sb	v0,132(sp)
8003f9f8:	93a10084 	lbu	at,132(sp)
8003f9fc:	30210001 	andi	at,at,0x1
8003fa00:	1020000d 	beqz	at,8003fa38 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x240>
8003fa04:	00000000 	nop
8003fa08:	0800fe99 	j	8003fa64 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x26c>
8003fa0c:	00000000 	nop
            Some(min) if width >= min => {
8003fa10:	8fa20048 	lw	v0,72(sp)
8003fa14:	24410004 	addiu	at,v0,4
8003fa18:	afa100b8 	sw	at,184(sp)
8003fa1c:	8fa1006c 	lw	at,108(sp)
8003fa20:	8c420004 	lw	v0,4(v0)
8003fa24:	0022082b 	sltu	at,at,v0
8003fa28:	10200024 	beqz	at,8003fabc <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x2c4>
8003fa2c:	00000000 	nop
8003fa30:	0800fea6 	j	8003fa98 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x2a0>
8003fa34:	00000000 	nop
                self.buf.write_str(buf)
8003fa38:	8fa6004c 	lw	a2,76(sp)
8003fa3c:	8fa50050 	lw	a1,80(sp)
8003fa40:	8fa10048 	lw	at,72(sp)
8003fa44:	8c240014 	lw	a0,20(at)
8003fa48:	8c210018 	lw	at,24(at)
8003fa4c:	8c39000c 	lw	t9,12(at)
8003fa50:	0320f809 	jalr	t9
8003fa54:	00000000 	nop
8003fa58:	a3a2006b 	sb	v0,107(sp)
8003fa5c:	0800fea0 	j	8003fa80 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
8003fa60:	00000000 	nop
                write_prefix(self, sign, prefix)?;
8003fa64:	3c018108 	lui	at,0x8108
8003fa68:	2424bce4 	addiu	a0,at,-17180
8003fa6c:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003fa70:	00000000 	nop
8003fa74:	a3a2006b 	sb	v0,107(sp)
8003fa78:	0800fea0 	j	8003fa80 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
8003fa7c:	00000000 	nop
    }
8003fa80:	93a1006b 	lbu	at,107(sp)
8003fa84:	30220001 	andi	v0,at,0x1
8003fa88:	8fbf00e4 	lw	ra,228(sp)
8003fa8c:	27bd00e8 	addiu	sp,sp,232
8003fa90:	03e00008 	jr	ra
8003fa94:	00000000 	nop
            Some(min) if self.sign_aware_zero_pad() => {
8003fa98:	8fa40048 	lw	a0,72(sp)
8003fa9c:	24810004 	addiu	at,a0,4
8003faa0:	afa100bc 	sw	at,188(sp)
8003faa4:	0c0101d3 	jal	8004074c <_ZN4core3fmt9Formatter19sign_aware_zero_pad17h321b41f12d0477a7E>
8003faa8:	00000000 	nop
8003faac:	14400020 	bnez	v0,8003fb30 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x338>
8003fab0:	00000000 	nop
8003fab4:	0800fec1 	j	8003fb04 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x30c>
8003fab8:	00000000 	nop
            Some(min) if width >= min => {
8003fabc:	8fa40048 	lw	a0,72(sp)
8003fac0:	8c810004 	lw	at,4(a0)
8003fac4:	afa100e0 	sw	at,224(sp)
                write_prefix(self, sign, prefix)?;
8003fac8:	8fa50070 	lw	a1,112(sp)
8003facc:	8fa6007c 	lw	a2,124(sp)
8003fad0:	8fa70080 	lw	a3,128(sp)
8003fad4:	0c00ffcb 	jal	8003ff2c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E>
8003fad8:	00000000 	nop
8003fadc:	00402025 	move	a0,v0
8003fae0:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003fae4:	00000000 	nop
8003fae8:	a3a20085 	sb	v0,133(sp)
8003faec:	93a10085 	lbu	at,133(sp)
8003faf0:	30210001 	andi	at,at,0x1
8003faf4:	102000fb 	beqz	at,8003fee4 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x6ec>
8003faf8:	00000000 	nop
8003fafc:	0800ffc4 	j	8003ff10 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x718>
8003fb00:	00000000 	nop
            Some(min) => {
8003fb04:	8fa10048 	lw	at,72(sp)
8003fb08:	8c210004 	lw	at,4(at)
8003fb0c:	afa100c0 	sw	at,192(sp)
                let post_padding = self.padding(min - width, Alignment::Right)?;
8003fb10:	8fa2006c 	lw	v0,108(sp)
8003fb14:	00221823 	subu	v1,at,v0
8003fb18:	afa30030 	sw	v1,48(sp)
8003fb1c:	0022082b 	sltu	at,at,v0
8003fb20:	1420003b 	bnez	at,8003fc10 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x418>
8003fb24:	00000000 	nop
8003fb28:	0800fef1 	j	8003fbc4 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x3cc>
8003fb2c:	00000000 	nop
            Some(min) if self.sign_aware_zero_pad() => {
8003fb30:	8fa10048 	lw	at,72(sp)
8003fb34:	8c220004 	lw	v0,4(at)
8003fb38:	afa20024 	sw	v0,36(sp)
8003fb3c:	afa200cc 	sw	v0,204(sp)
                let old_fill = crate::mem::replace(&mut self.fill, '0');
8003fb40:	24240010 	addiu	a0,at,16
8003fb44:	24050030 	li	a1,48
8003fb48:	0c00e43e 	jal	800390f8 <_ZN4core3mem7replace17h8bdd203d298c7c3eE>
8003fb4c:	00000000 	nop
8003fb50:	8fa10048 	lw	at,72(sp)
8003fb54:	00401825 	move	v1,v0
8003fb58:	afa30028 	sw	v1,40(sp)
8003fb5c:	afa200d0 	sw	v0,208(sp)
                let old_align = crate::mem::replace(&mut self.align, rt::Alignment::Right);
8003fb60:	24240020 	addiu	a0,at,32
8003fb64:	24010001 	li	at,1
8003fb68:	a3a10086 	sb	at,134(sp)
8003fb6c:	93a50086 	lbu	a1,134(sp)
8003fb70:	0c00e42b 	jal	800390ac <_ZN4core3mem7replace17h16554973e0f26abfE>
8003fb74:	00000000 	nop
8003fb78:	8fa40048 	lw	a0,72(sp)
8003fb7c:	00400825 	move	at,v0
8003fb80:	afa1002c 	sw	at,44(sp)
8003fb84:	a3a200d7 	sb	v0,215(sp)
                write_prefix(self, sign, prefix)?;
8003fb88:	8fa50070 	lw	a1,112(sp)
8003fb8c:	8fa6007c 	lw	a2,124(sp)
8003fb90:	8fa70080 	lw	a3,128(sp)
8003fb94:	0c00ffcb 	jal	8003ff2c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E>
8003fb98:	00000000 	nop
8003fb9c:	00402025 	move	a0,v0
8003fba0:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003fba4:	00000000 	nop
8003fba8:	a3a20087 	sb	v0,135(sp)
8003fbac:	93a10087 	lbu	at,135(sp)
8003fbb0:	30210001 	andi	at,at,0x1
8003fbb4:	1020005f 	beqz	at,8003fd34 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x53c>
8003fbb8:	00000000 	nop
8003fbbc:	0800ff56 	j	8003fd58 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x560>
8003fbc0:	00000000 	nop
8003fbc4:	8fa50030 	lw	a1,48(sp)
8003fbc8:	8fa40048 	lw	a0,72(sp)
8003fbcc:	24010001 	li	at,1
                let post_padding = self.padding(min - width, Alignment::Right)?;
8003fbd0:	a3a1009d 	sb	at,157(sp)
8003fbd4:	93a6009d 	lbu	a2,157(sp)
8003fbd8:	0c0100ec 	jal	800403b0 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE>
8003fbdc:	00000000 	nop
8003fbe0:	00402025 	move	a0,v0
8003fbe4:	00602825 	move	a1,v1
8003fbe8:	0c00f503 	jal	8003d40c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE>
8003fbec:	00000000 	nop
8003fbf0:	afa20094 	sw	v0,148(sp)
8003fbf4:	afa30098 	sw	v1,152(sp)
8003fbf8:	8fa10094 	lw	at,148(sp)
8003fbfc:	3c020011 	lui	v0,0x11
8003fc00:	14220007 	bne	at,v0,8003fc20 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x428>
8003fc04:	00000000 	nop
8003fc08:	0800ff1e 	j	8003fc78 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x480>
8003fc0c:	00000000 	nop
8003fc10:	3c018108 	lui	at,0x8108
8003fc14:	2424bcf4 	addiu	a0,at,-17164
8003fc18:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003fc1c:	00000000 	nop
8003fc20:	8fa40048 	lw	a0,72(sp)
8003fc24:	8fa20094 	lw	v0,148(sp)
8003fc28:	afa2001c 	sw	v0,28(sp)
8003fc2c:	8fa10098 	lw	at,152(sp)
8003fc30:	afa10020 	sw	at,32(sp)
8003fc34:	afa200c4 	sw	v0,196(sp)
8003fc38:	afa100c8 	sw	at,200(sp)
                write_prefix(self, sign, prefix)?;
8003fc3c:	8fa50070 	lw	a1,112(sp)
8003fc40:	8fa6007c 	lw	a2,124(sp)
8003fc44:	8fa70080 	lw	a3,128(sp)
8003fc48:	0c00ffcb 	jal	8003ff2c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E>
8003fc4c:	00000000 	nop
8003fc50:	00402025 	move	a0,v0
8003fc54:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003fc58:	00000000 	nop
8003fc5c:	a3a2009e 	sb	v0,158(sp)
8003fc60:	93a1009e 	lbu	at,158(sp)
8003fc64:	30210001 	andi	at,at,0x1
8003fc68:	1020000a 	beqz	at,8003fc94 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x49c>
8003fc6c:	00000000 	nop
8003fc70:	0800ff37 	j	8003fcdc <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x4e4>
8003fc74:	00000000 	nop
                let post_padding = self.padding(min - width, Alignment::Right)?;
8003fc78:	3c018108 	lui	at,0x8108
8003fc7c:	2424bd24 	addiu	a0,at,-17116
8003fc80:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003fc84:	00000000 	nop
8003fc88:	a3a2006b 	sb	v0,107(sp)
8003fc8c:	0800fea0 	j	8003fa80 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
8003fc90:	00000000 	nop
                self.buf.write_str(buf)?;
8003fc94:	8fa6004c 	lw	a2,76(sp)
8003fc98:	8fa50050 	lw	a1,80(sp)
8003fc9c:	8fa10048 	lw	at,72(sp)
8003fca0:	8c240014 	lw	a0,20(at)
8003fca4:	8c210018 	lw	at,24(at)
8003fca8:	8c39000c 	lw	t9,12(at)
8003fcac:	0320f809 	jalr	t9
8003fcb0:	00000000 	nop
8003fcb4:	00402025 	move	a0,v0
8003fcb8:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003fcbc:	00000000 	nop
8003fcc0:	a3a2009f 	sb	v0,159(sp)
8003fcc4:	93a1009f 	lbu	at,159(sp)
8003fcc8:	30210001 	andi	at,at,0x1
8003fccc:	1020000a 	beqz	at,8003fcf8 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x500>
8003fcd0:	00000000 	nop
8003fcd4:	0800ff46 	j	8003fd18 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x520>
8003fcd8:	00000000 	nop
                write_prefix(self, sign, prefix)?;
8003fcdc:	3c018108 	lui	at,0x8108
8003fce0:	2424bd14 	addiu	a0,at,-17132
8003fce4:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003fce8:	00000000 	nop
8003fcec:	a3a2006b 	sb	v0,107(sp)
8003fcf0:	0800fea0 	j	8003fa80 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
8003fcf4:	00000000 	nop
                post_padding.write(self)
8003fcf8:	8fa60048 	lw	a2,72(sp)
8003fcfc:	8fa50020 	lw	a1,32(sp)
8003fd00:	8fa4001c 	lw	a0,28(sp)
8003fd04:	0c00fdc1 	jal	8003f704 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E>
8003fd08:	00000000 	nop
8003fd0c:	a3a2006b 	sb	v0,107(sp)
8003fd10:	0800fea0 	j	8003fa80 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
8003fd14:	00000000 	nop
                self.buf.write_str(buf)?;
8003fd18:	3c018108 	lui	at,0x8108
8003fd1c:	2424bd04 	addiu	a0,at,-17148
8003fd20:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003fd24:	00000000 	nop
8003fd28:	a3a2006b 	sb	v0,107(sp)
8003fd2c:	0800fea0 	j	8003fa80 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
8003fd30:	00000000 	nop
                let post_padding = self.padding(min - width, Alignment::Right)?;
8003fd34:	8fa10024 	lw	at,36(sp)
8003fd38:	8fa2006c 	lw	v0,108(sp)
8003fd3c:	00221823 	subu	v1,at,v0
8003fd40:	afa30018 	sw	v1,24(sp)
8003fd44:	0022082b 	sltu	at,at,v0
8003fd48:	1420001d 	bnez	at,8003fdc0 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x5c8>
8003fd4c:	00000000 	nop
8003fd50:	0800ff5d 	j	8003fd74 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x57c>
8003fd54:	00000000 	nop
                write_prefix(self, sign, prefix)?;
8003fd58:	3c018108 	lui	at,0x8108
8003fd5c:	2424bd74 	addiu	a0,at,-17036
8003fd60:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003fd64:	00000000 	nop
8003fd68:	a3a2006b 	sb	v0,107(sp)
8003fd6c:	0800fea0 	j	8003fa80 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
8003fd70:	00000000 	nop
8003fd74:	8fa50018 	lw	a1,24(sp)
8003fd78:	8fa40048 	lw	a0,72(sp)
8003fd7c:	24010001 	li	at,1
                let post_padding = self.padding(min - width, Alignment::Right)?;
8003fd80:	a3a10091 	sb	at,145(sp)
8003fd84:	93a60091 	lbu	a2,145(sp)
8003fd88:	0c0100ec 	jal	800403b0 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE>
8003fd8c:	00000000 	nop
8003fd90:	00402025 	move	a0,v0
8003fd94:	00602825 	move	a1,v1
8003fd98:	0c00f503 	jal	8003d40c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE>
8003fd9c:	00000000 	nop
8003fda0:	afa20088 	sw	v0,136(sp)
8003fda4:	afa3008c 	sw	v1,140(sp)
8003fda8:	8fa10088 	lw	at,136(sp)
8003fdac:	3c020011 	lui	v0,0x11
8003fdb0:	14220007 	bne	at,v0,8003fdd0 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x5d8>
8003fdb4:	00000000 	nop
8003fdb8:	0800ff8c 	j	8003fe30 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x638>
8003fdbc:	00000000 	nop
8003fdc0:	3c018108 	lui	at,0x8108
8003fdc4:	2424bd34 	addiu	a0,at,-17100
8003fdc8:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8003fdcc:	00000000 	nop
8003fdd0:	8fa6004c 	lw	a2,76(sp)
8003fdd4:	8fa50050 	lw	a1,80(sp)
8003fdd8:	8fa10048 	lw	at,72(sp)
8003fddc:	8fa30088 	lw	v1,136(sp)
8003fde0:	afa30010 	sw	v1,16(sp)
8003fde4:	8fa2008c 	lw	v0,140(sp)
8003fde8:	afa20014 	sw	v0,20(sp)
8003fdec:	afa300d8 	sw	v1,216(sp)
8003fdf0:	afa200dc 	sw	v0,220(sp)
                self.buf.write_str(buf)?;
8003fdf4:	8c240014 	lw	a0,20(at)
8003fdf8:	8c210018 	lw	at,24(at)
8003fdfc:	8c39000c 	lw	t9,12(at)
8003fe00:	0320f809 	jalr	t9
8003fe04:	00000000 	nop
8003fe08:	00402025 	move	a0,v0
8003fe0c:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003fe10:	00000000 	nop
8003fe14:	a3a20092 	sb	v0,146(sp)
8003fe18:	93a10092 	lbu	at,146(sp)
8003fe1c:	30210001 	andi	at,at,0x1
8003fe20:	1020000a 	beqz	at,8003fe4c <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x654>
8003fe24:	00000000 	nop
8003fe28:	0800ffa2 	j	8003fe88 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x690>
8003fe2c:	00000000 	nop
                let post_padding = self.padding(min - width, Alignment::Right)?;
8003fe30:	3c018108 	lui	at,0x8108
8003fe34:	2424bd64 	addiu	a0,at,-17052
8003fe38:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003fe3c:	00000000 	nop
8003fe40:	a3a2006b 	sb	v0,107(sp)
8003fe44:	0800fea0 	j	8003fa80 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
8003fe48:	00000000 	nop
                post_padding.write(self)?;
8003fe4c:	8fa60048 	lw	a2,72(sp)
8003fe50:	8fa50014 	lw	a1,20(sp)
8003fe54:	8fa40010 	lw	a0,16(sp)
8003fe58:	0c00fdc1 	jal	8003f704 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E>
8003fe5c:	00000000 	nop
8003fe60:	00402025 	move	a0,v0
8003fe64:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003fe68:	00000000 	nop
8003fe6c:	a3a20093 	sb	v0,147(sp)
8003fe70:	93a10093 	lbu	at,147(sp)
8003fe74:	30210001 	andi	at,at,0x1
8003fe78:	1020000a 	beqz	at,8003fea4 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x6ac>
8003fe7c:	00000000 	nop
8003fe80:	0800ffb2 	j	8003fec8 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x6d0>
8003fe84:	00000000 	nop
                self.buf.write_str(buf)?;
8003fe88:	3c018108 	lui	at,0x8108
8003fe8c:	2424bd54 	addiu	a0,at,-17068
8003fe90:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003fe94:	00000000 	nop
8003fe98:	a3a2006b 	sb	v0,107(sp)
8003fe9c:	0800fea0 	j	8003fa80 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
8003fea0:	00000000 	nop
                self.fill = old_fill;
8003fea4:	8fa1002c 	lw	at,44(sp)
8003fea8:	8fa20048 	lw	v0,72(sp)
8003feac:	8fa30028 	lw	v1,40(sp)
8003feb0:	ac430010 	sw	v1,16(v0)
                self.align = old_align;
8003feb4:	a0410020 	sb	at,32(v0)
8003feb8:	24010000 	li	at,0
                Ok(())
8003febc:	a3a0006b 	sb	zero,107(sp)
            }
8003fec0:	0800fea0 	j	8003fa80 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
8003fec4:	00000000 	nop
                post_padding.write(self)?;
8003fec8:	3c018108 	lui	at,0x8108
8003fecc:	2424bd44 	addiu	a0,at,-17084
8003fed0:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003fed4:	00000000 	nop
8003fed8:	a3a2006b 	sb	v0,107(sp)
8003fedc:	0800fea0 	j	8003fa80 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
8003fee0:	00000000 	nop
                self.buf.write_str(buf)
8003fee4:	8fa6004c 	lw	a2,76(sp)
8003fee8:	8fa50050 	lw	a1,80(sp)
8003feec:	8fa10048 	lw	at,72(sp)
8003fef0:	8c240014 	lw	a0,20(at)
8003fef4:	8c210018 	lw	at,24(at)
8003fef8:	8c39000c 	lw	t9,12(at)
8003fefc:	0320f809 	jalr	t9
8003ff00:	00000000 	nop
8003ff04:	a3a2006b 	sb	v0,107(sp)
8003ff08:	0800fea0 	j	8003fa80 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
8003ff0c:	00000000 	nop
                write_prefix(self, sign, prefix)?;
8003ff10:	3c018108 	lui	at,0x8108
8003ff14:	2424bd84 	addiu	a0,at,-17020
8003ff18:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003ff1c:	00000000 	nop
8003ff20:	a3a2006b 	sb	v0,107(sp)
8003ff24:	0800fea0 	j	8003fa80 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E+0x288>
8003ff28:	00000000 	nop

8003ff2c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E>:
        fn write_prefix(f: &mut Formatter<'_>, sign: Option<char>, prefix: Option<&str>) -> Result {
8003ff2c:	27bdffc0 	addiu	sp,sp,-64
8003ff30:	afbf003c 	sw	ra,60(sp)
8003ff34:	afa40014 	sw	a0,20(sp)
                f.buf.write_char(c)?;
8003ff38:	afa5001c 	sw	a1,28(sp)
8003ff3c:	afa60020 	sw	a2,32(sp)
8003ff40:	afa70024 	sw	a3,36(sp)
8003ff44:	afa4002c 	sw	a0,44(sp)
            if let Some(c) = sign {
8003ff48:	8fa1001c 	lw	at,28(sp)
8003ff4c:	3c020011 	lui	v0,0x11
8003ff50:	10220015 	beq	at,v0,8003ffa8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0x7c>
8003ff54:	00000000 	nop
8003ff58:	0800ffd8 	j	8003ff60 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0x34>
8003ff5c:	00000000 	nop
8003ff60:	8fa10014 	lw	at,20(sp)
8003ff64:	8fa5001c 	lw	a1,28(sp)
8003ff68:	afa50030 	sw	a1,48(sp)
                f.buf.write_char(c)?;
8003ff6c:	8c240014 	lw	a0,20(at)
8003ff70:	8c210018 	lw	at,24(at)
8003ff74:	8c390010 	lw	t9,16(at)
8003ff78:	0320f809 	jalr	t9
8003ff7c:	00000000 	nop
8003ff80:	00402025 	move	a0,v0
8003ff84:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8003ff88:	00000000 	nop
8003ff8c:	a3a2002b 	sb	v0,43(sp)
8003ff90:	93a1002b 	lbu	at,43(sp)
8003ff94:	30210001 	andi	at,at,0x1
8003ff98:	14200008 	bnez	at,8003ffbc <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0x90>
8003ff9c:	00000000 	nop
8003ffa0:	0800ffea 	j	8003ffa8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0x7c>
8003ffa4:	00000000 	nop
            if let Some(prefix) = prefix { f.buf.write_str(prefix) } else { Ok(()) }
8003ffa8:	8fa10020 	lw	at,32(sp)
8003ffac:	14200010 	bnez	at,8003fff0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0xc4>
8003ffb0:	00000000 	nop
8003ffb4:	08010009 	j	80040024 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0xf8>
8003ffb8:	00000000 	nop
                f.buf.write_char(c)?;
8003ffbc:	3c018108 	lui	at,0x8108
8003ffc0:	2424bd94 	addiu	a0,at,-17004
8003ffc4:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
8003ffc8:	00000000 	nop
8003ffcc:	a3a2002a 	sb	v0,42(sp)
8003ffd0:	0800fff6 	j	8003ffd8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0xac>
8003ffd4:	00000000 	nop
        }
8003ffd8:	93a1002a 	lbu	at,42(sp)
8003ffdc:	30220001 	andi	v0,at,0x1
8003ffe0:	8fbf003c 	lw	ra,60(sp)
8003ffe4:	27bd0040 	addiu	sp,sp,64
8003ffe8:	03e00008 	jr	ra
8003ffec:	00000000 	nop
            if let Some(prefix) = prefix { f.buf.write_str(prefix) } else { Ok(()) }
8003fff0:	8fa10014 	lw	at,20(sp)
8003fff4:	8fa50020 	lw	a1,32(sp)
8003fff8:	8fa60024 	lw	a2,36(sp)
8003fffc:	afa50034 	sw	a1,52(sp)
80040000:	afa60038 	sw	a2,56(sp)
80040004:	8c240014 	lw	a0,20(at)
80040008:	8c210018 	lw	at,24(at)
8004000c:	8c39000c 	lw	t9,12(at)
80040010:	0320f809 	jalr	t9
80040014:	00000000 	nop
80040018:	a3a2002a 	sb	v0,42(sp)
8004001c:	0800fff6 	j	8003ffd8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0xac>
80040020:	00000000 	nop
80040024:	24010000 	li	at,0
80040028:	a3a0002a 	sb	zero,42(sp)
8004002c:	0800fff6 	j	8003ffd8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h4aaff145ff65bbf3E+0xac>
80040030:	00000000 	nop

80040034 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E>:
    pub fn pad(&mut self, s: &str) -> Result {
80040034:	27bdff70 	addiu	sp,sp,-144
80040038:	afbf008c 	sw	ra,140(sp)
8004003c:	afa4002c 	sw	a0,44(sp)
                    self.buf.write_str(s)?;
80040040:	afa50034 	sw	a1,52(sp)
80040044:	afa60038 	sw	a2,56(sp)
80040048:	afa40070 	sw	a0,112(sp)
        if self.width.is_none() && self.precision.is_none() {
8004004c:	0c00f04e 	jal	8003c138 <_ZN4core6option15Option$LT$T$GT$7is_none17h2a21bc401af51c77E>
80040050:	00000000 	nop
80040054:	1440000a 	bnez	v0,80040080 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x4c>
80040058:	00000000 	nop
8004005c:	08010019 	j	80040064 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x30>
80040060:	00000000 	nop
        let s = if let Some(max) = self.precision {
80040064:	8fa1002c 	lw	at,44(sp)
80040068:	8c210008 	lw	at,8(at)
8004006c:	24020001 	li	v0,1
80040070:	10220016 	beq	at,v0,800400cc <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x98>
80040074:	00000000 	nop
80040078:	08010049 	j	80040124 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0xf0>
8004007c:	00000000 	nop
        if self.width.is_none() && self.precision.is_none() {
80040080:	8fa1002c 	lw	at,44(sp)
80040084:	24240008 	addiu	a0,at,8
80040088:	0c00f04e 	jal	8003c138 <_ZN4core6option15Option$LT$T$GT$7is_none17h2a21bc401af51c77E>
8004008c:	00000000 	nop
80040090:	1040fff4 	beqz	v0,80040064 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x30>
80040094:	00000000 	nop
80040098:	08010028 	j	800400a0 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x6c>
8004009c:	00000000 	nop
            return self.buf.write_str(s);
800400a0:	8fa1002c 	lw	at,44(sp)
800400a4:	8c240014 	lw	a0,20(at)
800400a8:	8c210018 	lw	at,24(at)
800400ac:	8fa50034 	lw	a1,52(sp)
800400b0:	8fa60038 	lw	a2,56(sp)
800400b4:	8c39000c 	lw	t9,12(at)
800400b8:	0320f809 	jalr	t9
800400bc:	00000000 	nop
800400c0:	a3a2003f 	sb	v0,63(sp)
800400c4:	0801008d 	j	80040234 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x200>
800400c8:	00000000 	nop
        let s = if let Some(max) = self.precision {
800400cc:	8fa1002c 	lw	at,44(sp)
800400d0:	8c21000c 	lw	at,12(at)
800400d4:	afa10028 	sw	at,40(sp)
800400d8:	afa10074 	sw	at,116(sp)
            if let Some((i, _)) = s.char_indices().nth(max) {
800400dc:	8fa50034 	lw	a1,52(sp)
800400e0:	8fa60038 	lw	a2,56(sp)
800400e4:	27a40050 	addiu	a0,sp,80
800400e8:	afa40024 	sw	a0,36(sp)
800400ec:	0c0113e3 	jal	80044f8c <_ZN4core3str21_$LT$impl$u20$str$GT$12char_indices17hbaf3c99ff2948506E>
800400f0:	00000000 	nop
800400f4:	8fa40024 	lw	a0,36(sp)
800400f8:	8fa50028 	lw	a1,40(sp)
800400fc:	0c00ef93 	jal	8003be4c <_ZN4core4iter6traits8iterator8Iterator3nth17h949acbaf33606195E>
80040100:	00000000 	nop
80040104:	afa20048 	sw	v0,72(sp)
80040108:	afa3004c 	sw	v1,76(sp)
8004010c:	8fa1004c 	lw	at,76(sp)
80040110:	3c020011 	lui	v0,0x11
80040114:	14220009 	bne	at,v0,8004013c <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x108>
80040118:	00000000 	nop
8004011c:	08010061 	j	80040184 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x150>
80040120:	00000000 	nop
            &s
80040124:	8fa20034 	lw	v0,52(sp)
80040128:	8fa10038 	lw	at,56(sp)
8004012c:	afa20040 	sw	v0,64(sp)
80040130:	afa10044 	sw	at,68(sp)
        let s = if let Some(max) = self.precision {
80040134:	08010067 	j	8004019c <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x168>
80040138:	00000000 	nop
            if let Some((i, _)) = s.char_indices().nth(max) {
8004013c:	8fa10048 	lw	at,72(sp)
80040140:	afa10078 	sw	at,120(sp)
                s.get(..i).unwrap_or(s)
80040144:	8fa40034 	lw	a0,52(sp)
80040148:	8fa50038 	lw	a1,56(sp)
8004014c:	afa1005c 	sw	at,92(sp)
80040150:	8fa6005c 	lw	a2,92(sp)
80040154:	0c0113c4 	jal	80044f10 <_ZN4core3str21_$LT$impl$u20$str$GT$3get17h22d03a90dc93b151E>
80040158:	00000000 	nop
8004015c:	00402025 	move	a0,v0
80040160:	00602825 	move	a1,v1
80040164:	8fa60034 	lw	a2,52(sp)
80040168:	8fa70038 	lw	a3,56(sp)
8004016c:	0c00f058 	jal	8003c160 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h33f0e8f8cfa7c401E>
80040170:	00000000 	nop
80040174:	afa20040 	sw	v0,64(sp)
80040178:	afa30044 	sw	v1,68(sp)
8004017c:	08010067 	j	8004019c <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x168>
80040180:	00000000 	nop
                &s
80040184:	8fa20034 	lw	v0,52(sp)
80040188:	8fa10038 	lw	at,56(sp)
8004018c:	afa20040 	sw	v0,64(sp)
80040190:	afa10044 	sw	at,68(sp)
            if let Some((i, _)) = s.char_indices().nth(max) {
80040194:	08010067 	j	8004019c <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x168>
80040198:	00000000 	nop
        match self.width {
8004019c:	8fa1002c 	lw	at,44(sp)
800401a0:	8c210000 	lw	at,0(at)
800401a4:	1420000e 	bnez	at,800401e0 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x1ac>
800401a8:	00000000 	nop
800401ac:	0801006d 	j	800401b4 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x180>
800401b0:	00000000 	nop
            None => self.buf.write_str(s),
800401b4:	8fa1002c 	lw	at,44(sp)
800401b8:	8c240014 	lw	a0,20(at)
800401bc:	8c210018 	lw	at,24(at)
800401c0:	8fa50040 	lw	a1,64(sp)
800401c4:	8fa60044 	lw	a2,68(sp)
800401c8:	8c39000c 	lw	t9,12(at)
800401cc:	0320f809 	jalr	t9
800401d0:	00000000 	nop
800401d4:	a3a2003f 	sb	v0,63(sp)
800401d8:	0801008d 	j	80040234 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x200>
800401dc:	00000000 	nop
            Some(width) => {
800401e0:	8fa1002c 	lw	at,44(sp)
800401e4:	8c210004 	lw	at,4(at)
800401e8:	afa1001c 	sw	at,28(sp)
800401ec:	afa1007c 	sw	at,124(sp)
                let chars_count = s.chars().count();
800401f0:	8fa40040 	lw	a0,64(sp)
800401f4:	8fa50044 	lw	a1,68(sp)
800401f8:	0c0113d3 	jal	80044f4c <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h9ac6a59f518bf3d7E>
800401fc:	00000000 	nop
80040200:	00402025 	move	a0,v0
80040204:	00602825 	move	a1,v1
80040208:	0c010ef2 	jal	80043bc8 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count17h53f43070aad197f4E>
8004020c:	00000000 	nop
80040210:	8fa1001c 	lw	at,28(sp)
80040214:	00401825 	move	v1,v0
80040218:	afa30020 	sw	v1,32(sp)
8004021c:	afa20080 	sw	v0,128(sp)
                if chars_count >= width {
80040220:	0041082b 	sltu	at,v0,at
80040224:	10200014 	beqz	at,80040278 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x244>
80040228:	00000000 	nop
8004022c:	08010093 	j	8004024c <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x218>
80040230:	00000000 	nop
    }
80040234:	93a1003f 	lbu	at,63(sp)
80040238:	30220001 	andi	v0,at,0x1
8004023c:	8fbf008c 	lw	ra,140(sp)
80040240:	27bd0090 	addiu	sp,sp,144
80040244:	03e00008 	jr	ra
80040248:	00000000 	nop
8004024c:	8fa1001c 	lw	at,28(sp)
80040250:	8fa20020 	lw	v0,32(sp)
80040254:	24030000 	li	v1,0
                    let align = Alignment::Left;
80040258:	a3a00063 	sb	zero,99(sp)
                    let post_padding = self.padding(width - chars_count, align)?;
8004025c:	00221823 	subu	v1,at,v0
80040260:	afa30018 	sw	v1,24(sp)
80040264:	0022082b 	sltu	at,at,v0
80040268:	1420001f 	bnez	at,800402e8 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x2b4>
8004026c:	00000000 	nop
80040270:	080100a9 	j	800402a4 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x270>
80040274:	00000000 	nop
                    self.buf.write_str(s)
80040278:	8fa1002c 	lw	at,44(sp)
8004027c:	8c240014 	lw	a0,20(at)
80040280:	8c210018 	lw	at,24(at)
80040284:	8fa50040 	lw	a1,64(sp)
80040288:	8fa60044 	lw	a2,68(sp)
8004028c:	8c39000c 	lw	t9,12(at)
80040290:	0320f809 	jalr	t9
80040294:	00000000 	nop
80040298:	a3a2003f 	sb	v0,63(sp)
8004029c:	0801008d 	j	80040234 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x200>
800402a0:	00000000 	nop
                    let post_padding = self.padding(width - chars_count, align)?;
800402a4:	8fa50018 	lw	a1,24(sp)
800402a8:	8fa4002c 	lw	a0,44(sp)
800402ac:	93a60063 	lbu	a2,99(sp)
800402b0:	0c0100ec 	jal	800403b0 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE>
800402b4:	00000000 	nop
800402b8:	00402025 	move	a0,v0
800402bc:	00602825 	move	a1,v1
800402c0:	0c00f503 	jal	8003d40c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h28a26325308e50efE>
800402c4:	00000000 	nop
800402c8:	afa20064 	sw	v0,100(sp)
800402cc:	afa30068 	sw	v1,104(sp)
800402d0:	8fa10064 	lw	at,100(sp)
800402d4:	3c020011 	lui	v0,0x11
800402d8:	14220007 	bne	at,v0,800402f8 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x2c4>
800402dc:	00000000 	nop
800402e0:	080100d6 	j	80040358 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x324>
800402e4:	00000000 	nop
800402e8:	3c018108 	lui	at,0x8108
800402ec:	2424bda4 	addiu	a0,at,-16988
800402f0:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800402f4:	00000000 	nop
800402f8:	8fa1002c 	lw	at,44(sp)
800402fc:	8fa30064 	lw	v1,100(sp)
80040300:	afa30010 	sw	v1,16(sp)
80040304:	8fa20068 	lw	v0,104(sp)
80040308:	afa20014 	sw	v0,20(sp)
8004030c:	afa30084 	sw	v1,132(sp)
80040310:	afa20088 	sw	v0,136(sp)
                    self.buf.write_str(s)?;
80040314:	8c240014 	lw	a0,20(at)
80040318:	8c210018 	lw	at,24(at)
8004031c:	8fa50040 	lw	a1,64(sp)
80040320:	8fa60044 	lw	a2,68(sp)
80040324:	8c39000c 	lw	t9,12(at)
80040328:	0320f809 	jalr	t9
8004032c:	00000000 	nop
80040330:	00402025 	move	a0,v0
80040334:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80040338:	00000000 	nop
8004033c:	a3a2006f 	sb	v0,111(sp)
80040340:	93a1006f 	lbu	at,111(sp)
80040344:	30210001 	andi	at,at,0x1
80040348:	1020000a 	beqz	at,80040374 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x340>
8004034c:	00000000 	nop
80040350:	080100e5 	j	80040394 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x360>
80040354:	00000000 	nop
                    let post_padding = self.padding(width - chars_count, align)?;
80040358:	3c018108 	lui	at,0x8108
8004035c:	2424bdc4 	addiu	a0,at,-16956
80040360:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80040364:	00000000 	nop
80040368:	a3a2003f 	sb	v0,63(sp)
8004036c:	0801008d 	j	80040234 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x200>
80040370:	00000000 	nop
                    post_padding.write(self)
80040374:	8fa6002c 	lw	a2,44(sp)
80040378:	8fa50014 	lw	a1,20(sp)
8004037c:	8fa40010 	lw	a0,16(sp)
80040380:	0c00fdc1 	jal	8003f704 <_ZN4core3fmt11PostPadding5write17ha6adc3bc9ab8c1c1E>
80040384:	00000000 	nop
80040388:	a3a2003f 	sb	v0,63(sp)
8004038c:	0801008d 	j	80040234 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x200>
80040390:	00000000 	nop
                    self.buf.write_str(s)?;
80040394:	3c018108 	lui	at,0x8108
80040398:	2424bdb4 	addiu	a0,at,-16972
8004039c:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
800403a0:	00000000 	nop
800403a4:	a3a2003f 	sb	v0,63(sp)
800403a8:	0801008d 	j	80040234 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E+0x200>
800403ac:	00000000 	nop

800403b0 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE>:
    pub(crate) fn padding(
800403b0:	27bdff80 	addiu	sp,sp,-128
800403b4:	afbf007c 	sw	ra,124(sp)
800403b8:	afa50024 	sw	a1,36(sp)
800403bc:	afa40028 	sw	a0,40(sp)
800403c0:	00c00825 	move	at,a2
800403c4:	afa1002c 	sw	at,44(sp)
            self.buf.write_char(self.fill)?;
800403c8:	afa40068 	sw	a0,104(sp)
800403cc:	afa5006c 	sw	a1,108(sp)
800403d0:	a3a60073 	sb	a2,115(sp)
        let align = match self.align {
800403d4:	90810020 	lbu	at,32(a0)
800403d8:	afa10030 	sw	at,48(sp)
800403dc:	8fa10030 	lw	at,48(sp)
800403e0:	00010880 	sll	at,at,0x2
800403e4:	3c028108 	lui	v0,0x8108
800403e8:	00220821 	addu	at,at,v0
800403ec:	8c21af24 	lw	at,-20700(at)
800403f0:	00200008 	jr	at
800403f4:	00000000 	nop
800403f8:	0000000d 	break
800403fc:	24010000 	li	at,0
            rt::Alignment::Left => Alignment::Left,
80040400:	a3a00043 	sb	zero,67(sp)
80040404:	0801010f 	j	8004043c <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x8c>
80040408:	00000000 	nop
8004040c:	24010001 	li	at,1
            rt::Alignment::Right => Alignment::Right,
80040410:	a3a10043 	sb	at,67(sp)
80040414:	0801010f 	j	8004043c <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x8c>
80040418:	00000000 	nop
8004041c:	24010002 	li	at,2
            rt::Alignment::Center => Alignment::Center,
80040420:	a3a10043 	sb	at,67(sp)
80040424:	0801010f 	j	8004043c <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x8c>
80040428:	00000000 	nop
            rt::Alignment::Unknown => default,
8004042c:	8fa1002c 	lw	at,44(sp)
80040430:	a3a10043 	sb	at,67(sp)
80040434:	0801010f 	j	8004043c <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x8c>
80040438:	00000000 	nop
        let (pre_pad, post_pad) = match align {
8004043c:	93a10043 	lbu	at,67(sp)
80040440:	afa10020 	sw	at,32(sp)
80040444:	1020000b 	beqz	at,80040474 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0xc4>
80040448:	00000000 	nop
8004044c:	08010115 	j	80040454 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0xa4>
80040450:	00000000 	nop
80040454:	8fa10020 	lw	at,32(sp)
80040458:	24020001 	li	v0,1
8004045c:	1022000a 	beq	at,v0,80040488 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0xd8>
80040460:	00000000 	nop
80040464:	0801011b 	j	8004046c <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0xbc>
80040468:	00000000 	nop
8004046c:	08010127 	j	8004049c <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0xec>
80040470:	00000000 	nop
            Alignment::Left => (0, padding),
80040474:	8fa10024 	lw	at,36(sp)
80040478:	afa00044 	sw	zero,68(sp)
8004047c:	afa10048 	sw	at,72(sp)
80040480:	08010130 	j	800404c0 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x110>
80040484:	00000000 	nop
            Alignment::Right => (padding, 0),
80040488:	8fa10024 	lw	at,36(sp)
8004048c:	afa10044 	sw	at,68(sp)
80040490:	afa00048 	sw	zero,72(sp)
80040494:	08010130 	j	800404c0 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x110>
80040498:	00000000 	nop
            Alignment::Center => (padding / 2, (padding + 1) / 2),
8004049c:	8fa10024 	lw	at,36(sp)
800404a0:	00011042 	srl	v0,at,0x1
800404a4:	afa20018 	sw	v0,24(sp)
800404a8:	24210001 	addiu	at,at,1
800404ac:	afa1001c 	sw	at,28(sp)
800404b0:	10200019 	beqz	at,80040518 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x168>
800404b4:	00000000 	nop
800404b8:	0801013f 	j	800404fc <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x14c>
800404bc:	00000000 	nop
        let (pre_pad, post_pad) = match align {
800404c0:	8fa10044 	lw	at,68(sp)
800404c4:	afa10074 	sw	at,116(sp)
800404c8:	8fa20048 	lw	v0,72(sp)
800404cc:	afa20014 	sw	v0,20(sp)
800404d0:	afa20078 	sw	v0,120(sp)
        for _ in 0..pre_pad {
800404d4:	afa0004c 	sw	zero,76(sp)
800404d8:	afa10050 	sw	at,80(sp)
800404dc:	8fa4004c 	lw	a0,76(sp)
800404e0:	8fa50050 	lw	a1,80(sp)
800404e4:	0c00ef08 	jal	8003bc20 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h08672f7f2dd54636E>
800404e8:	00000000 	nop
800404ec:	afa20054 	sw	v0,84(sp)
800404f0:	afa30058 	sw	v1,88(sp)
800404f4:	0801014a 	j	80040528 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x178>
800404f8:	00000000 	nop
            Alignment::Center => (padding / 2, (padding + 1) / 2),
800404fc:	8fa20018 	lw	v0,24(sp)
80040500:	8fa1001c 	lw	at,28(sp)
80040504:	00010842 	srl	at,at,0x1
80040508:	afa20044 	sw	v0,68(sp)
8004050c:	afa10048 	sw	at,72(sp)
80040510:	08010130 	j	800404c0 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x110>
80040514:	00000000 	nop
80040518:	3c018108 	lui	at,0x8108
8004051c:	2424bdd4 	addiu	a0,at,-16940
80040520:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80040524:	00000000 	nop
80040528:	27a40054 	addiu	a0,sp,84
        for _ in 0..pre_pad {
8004052c:	0c00eeff 	jal	8003bbfc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h77596a36d38db716E>
80040530:	00000000 	nop
80040534:	afa2005c 	sw	v0,92(sp)
80040538:	afa30060 	sw	v1,96(sp)
8004053c:	8fa1005c 	lw	at,92(sp)
80040540:	1420000c 	bnez	at,80040574 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x1c4>
80040544:	00000000 	nop
80040548:	08010154 	j	80040550 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x1a0>
8004054c:	00000000 	nop
        Ok(PostPadding::new(self.fill, post_pad))
80040550:	8fa50014 	lw	a1,20(sp)
80040554:	8fa10028 	lw	at,40(sp)
80040558:	8c240010 	lw	a0,16(at)
8004055c:	0c00fdb7 	jal	8003f6dc <_ZN4core3fmt11PostPadding3new17h08745825ff7a709cE>
80040560:	00000000 	nop
80040564:	afa20038 	sw	v0,56(sp)
80040568:	afa3003c 	sw	v1,60(sp)
    }
8004056c:	0801016e 	j	800405b8 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x208>
80040570:	00000000 	nop
            self.buf.write_char(self.fill)?;
80040574:	8fa20028 	lw	v0,40(sp)
80040578:	8c440014 	lw	a0,20(v0)
8004057c:	8c410018 	lw	at,24(v0)
80040580:	8c450010 	lw	a1,16(v0)
80040584:	8c390010 	lw	t9,16(at)
80040588:	0320f809 	jalr	t9
8004058c:	00000000 	nop
80040590:	00402025 	move	a0,v0
80040594:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80040598:	00000000 	nop
8004059c:	a3a20067 	sb	v0,103(sp)
800405a0:	93a10067 	lbu	at,103(sp)
800405a4:	30210001 	andi	at,at,0x1
800405a8:	1020ffdf 	beqz	at,80040528 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x178>
800405ac:	00000000 	nop
800405b0:	08010174 	j	800405d0 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x220>
800405b4:	00000000 	nop
    }
800405b8:	8fa20038 	lw	v0,56(sp)
800405bc:	8fa3003c 	lw	v1,60(sp)
800405c0:	8fbf007c 	lw	ra,124(sp)
800405c4:	27bd0080 	addiu	sp,sp,128
800405c8:	03e00008 	jr	ra
800405cc:	00000000 	nop
            self.buf.write_char(self.fill)?;
800405d0:	3c018108 	lui	at,0x8108
800405d4:	2424bde4 	addiu	a0,at,-16924
800405d8:	0c00f532 	jal	8003d4c8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h5e97ed1aef6b568cE>
800405dc:	00000000 	nop
800405e0:	afa20038 	sw	v0,56(sp)
800405e4:	afa3003c 	sw	v1,60(sp)
800405e8:	0801016e 	j	800405b8 <_ZN4core3fmt9Formatter7padding17h34cb953ec12a8acaE+0x208>
800405ec:	00000000 	nop

800405f0 <_ZN4core3fmt9Formatter9write_str17h2077d209297f8673E>:
    pub fn write_str(&mut self, data: &str) -> Result {
800405f0:	27bdffe0 	addiu	sp,sp,-32
800405f4:	afbf001c 	sw	ra,28(sp)
800405f8:	00800825 	move	at,a0
800405fc:	afa10010 	sw	at,16(sp)
80040600:	afa50014 	sw	a1,20(sp)
80040604:	afa60018 	sw	a2,24(sp)
        self.buf.write_str(data)
80040608:	8c240014 	lw	a0,20(at)
8004060c:	8c210018 	lw	at,24(at)
80040610:	8c39000c 	lw	t9,12(at)
80040614:	0320f809 	jalr	t9
80040618:	00000000 	nop
    }
8004061c:	8fbf001c 	lw	ra,28(sp)
80040620:	27bd0020 	addiu	sp,sp,32
80040624:	03e00008 	jr	ra
80040628:	00000000 	nop

8004062c <_ZN4core3fmt9Formatter9write_fmt17h7d294feef253c98cE>:
    pub fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result {
8004062c:	27bdffb0 	addiu	sp,sp,-80
80040630:	afbf004c 	sw	ra,76(sp)
80040634:	afa50014 	sw	a1,20(sp)
80040638:	00800825 	move	at,a0
8004063c:	8fa40014 	lw	a0,20(sp)
80040640:	afa10018 	sw	at,24(sp)
80040644:	afa10040 	sw	at,64(sp)
        if let Some(s) = fmt.as_statically_known_str() {
80040648:	0c00fbab 	jal	8003eeac <_ZN4core3fmt9Arguments23as_statically_known_str17hd9501a45a7712a76E>
8004064c:	00000000 	nop
80040650:	afa20020 	sw	v0,32(sp)
80040654:	afa30024 	sw	v1,36(sp)
80040658:	8fa10020 	lw	at,32(sp)
8004065c:	10200010 	beqz	at,800406a0 <_ZN4core3fmt9Formatter9write_fmt17h7d294feef253c98cE+0x74>
80040660:	00000000 	nop
80040664:	0801019b 	j	8004066c <_ZN4core3fmt9Formatter9write_fmt17h7d294feef253c98cE+0x40>
80040668:	00000000 	nop
8004066c:	8fa10018 	lw	at,24(sp)
80040670:	8fa50020 	lw	a1,32(sp)
80040674:	8fa60024 	lw	a2,36(sp)
80040678:	afa50044 	sw	a1,68(sp)
8004067c:	afa60048 	sw	a2,72(sp)
            self.buf.write_str(s)
80040680:	8c240014 	lw	a0,20(at)
80040684:	8c210018 	lw	at,24(at)
80040688:	8c39000c 	lw	t9,12(at)
8004068c:	0320f809 	jalr	t9
80040690:	00000000 	nop
80040694:	a3a2001f 	sb	v0,31(sp)
80040698:	080101be 	j	800406f8 <_ZN4core3fmt9Formatter9write_fmt17h7d294feef253c98cE+0xcc>
8004069c:	00000000 	nop
            write(self.buf, fmt)
800406a0:	8fa10014 	lw	at,20(sp)
800406a4:	8fa20018 	lw	v0,24(sp)
800406a8:	8c440014 	lw	a0,20(v0)
800406ac:	8c450018 	lw	a1,24(v0)
800406b0:	8c220014 	lw	v0,20(at)
800406b4:	afa2003c 	sw	v0,60(sp)
800406b8:	8c220010 	lw	v0,16(at)
800406bc:	afa20038 	sw	v0,56(sp)
800406c0:	8c22000c 	lw	v0,12(at)
800406c4:	afa20034 	sw	v0,52(sp)
800406c8:	8c220008 	lw	v0,8(at)
800406cc:	afa20030 	sw	v0,48(sp)
800406d0:	8c220004 	lw	v0,4(at)
800406d4:	afa2002c 	sw	v0,44(sp)
800406d8:	8c210000 	lw	at,0(at)
800406dc:	afa10028 	sw	at,40(sp)
800406e0:	27a60028 	addiu	a2,sp,40
800406e4:	0c00fbe6 	jal	8003ef98 <_ZN4core3fmt5write17h6036e54969122141E>
800406e8:	00000000 	nop
800406ec:	a3a2001f 	sb	v0,31(sp)
800406f0:	080101be 	j	800406f8 <_ZN4core3fmt9Formatter9write_fmt17h7d294feef253c98cE+0xcc>
800406f4:	00000000 	nop
    }
800406f8:	93a1001f 	lbu	at,31(sp)
800406fc:	30220001 	andi	v0,at,0x1
80040700:	8fbf004c 	lw	ra,76(sp)
80040704:	27bd0050 	addiu	sp,sp,80
80040708:	03e00008 	jr	ra
8004070c:	00000000 	nop

80040710 <_ZN4core3fmt9Formatter9sign_plus17hea17fcfa5b72c758E>:
    pub fn sign_plus(&self) -> bool {
80040710:	27bdfff8 	addiu	sp,sp,-8
80040714:	afa40004 	sw	a0,4(sp)
        self.flags & (1 << rt::Flag::SignPlus as u32) != 0
80040718:	8c81001c 	lw	at,28(a0)
8004071c:	30220001 	andi	v0,at,0x1
80040720:	27bd0008 	addiu	sp,sp,8
    }
80040724:	03e00008 	jr	ra
80040728:	00000000 	nop

8004072c <_ZN4core3fmt9Formatter9alternate17h2b08e2c940b48bcaE>:
    pub fn alternate(&self) -> bool {
8004072c:	27bdfff8 	addiu	sp,sp,-8
80040730:	afa40004 	sw	a0,4(sp)
        self.flags & (1 << rt::Flag::Alternate as u32) != 0
80040734:	9081001c 	lbu	at,28(a0)
80040738:	30210004 	andi	at,at,0x4
8004073c:	00011082 	srl	v0,at,0x2
80040740:	27bd0008 	addiu	sp,sp,8
    }
80040744:	03e00008 	jr	ra
80040748:	00000000 	nop

8004074c <_ZN4core3fmt9Formatter19sign_aware_zero_pad17h321b41f12d0477a7E>:
    pub fn sign_aware_zero_pad(&self) -> bool {
8004074c:	27bdfff8 	addiu	sp,sp,-8
80040750:	afa40004 	sw	a0,4(sp)
        self.flags & (1 << rt::Flag::SignAwareZeroPad as u32) != 0
80040754:	9081001c 	lbu	at,28(a0)
80040758:	30210008 	andi	at,at,0x8
8004075c:	000110c2 	srl	v0,at,0x3
80040760:	27bd0008 	addiu	sp,sp,8
    }
80040764:	03e00008 	jr	ra
80040768:	00000000 	nop

8004076c <_ZN4core3fmt9Formatter15debug_lower_hex17h09a19bcedc4d5af7E>:
    fn debug_lower_hex(&self) -> bool {
8004076c:	27bdfff8 	addiu	sp,sp,-8
80040770:	afa40004 	sw	a0,4(sp)
        self.flags & (1 << rt::Flag::DebugLowerHex as u32) != 0
80040774:	9081001c 	lbu	at,28(a0)
80040778:	30210010 	andi	at,at,0x10
8004077c:	00011102 	srl	v0,at,0x4
80040780:	27bd0008 	addiu	sp,sp,8
    }
80040784:	03e00008 	jr	ra
80040788:	00000000 	nop

8004078c <_ZN4core3fmt9Formatter15debug_upper_hex17h021fe51b661c830dE>:
    fn debug_upper_hex(&self) -> bool {
8004078c:	27bdfff8 	addiu	sp,sp,-8
80040790:	afa40004 	sw	a0,4(sp)
        self.flags & (1 << rt::Flag::DebugUpperHex as u32) != 0
80040794:	9081001c 	lbu	at,28(a0)
80040798:	30210020 	andi	at,at,0x20
8004079c:	00011142 	srl	v0,at,0x5
800407a0:	27bd0008 	addiu	sp,sp,8
    }
800407a4:	03e00008 	jr	ra
800407a8:	00000000 	nop

800407ac <_ZN4core3fmt9Formatter12debug_struct17h6504f7339d778b3dE>:
    pub fn debug_struct<'b>(&'b mut self, name: &str) -> DebugStruct<'b, 'a> {
800407ac:	27bdffd8 	addiu	sp,sp,-40
800407b0:	afbf0024 	sw	ra,36(sp)
800407b4:	00800825 	move	at,a0
800407b8:	afa10014 	sw	at,20(sp)
800407bc:	afa50018 	sw	a1,24(sp)
800407c0:	afa6001c 	sw	a2,28(sp)
800407c4:	afa70020 	sw	a3,32(sp)
        builders::debug_struct_new(self, name)
800407c8:	0c00f57f 	jal	8003d5fc <_ZN4core3fmt8builders16debug_struct_new17h94cb061567626803E>
800407cc:	00000000 	nop
800407d0:	8fa20014 	lw	v0,20(sp)
    }
800407d4:	8fbf0024 	lw	ra,36(sp)
800407d8:	27bd0028 	addiu	sp,sp,40
800407dc:	03e00008 	jr	ra
800407e0:	00000000 	nop

800407e4 <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$10write_char17hce317d8c45d1f9c9E>:
    fn write_char(&mut self, c: char) -> Result {
800407e4:	27bdffe0 	addiu	sp,sp,-32
800407e8:	afbf001c 	sw	ra,28(sp)
800407ec:	00800825 	move	at,a0
800407f0:	afa10014 	sw	at,20(sp)
800407f4:	afa50018 	sw	a1,24(sp)
        self.buf.write_char(c)
800407f8:	8c240014 	lw	a0,20(at)
800407fc:	8c210018 	lw	at,24(at)
80040800:	8c390010 	lw	t9,16(at)
80040804:	0320f809 	jalr	t9
80040808:	00000000 	nop
    }
8004080c:	8fbf001c 	lw	ra,28(sp)
80040810:	27bd0020 	addiu	sp,sp,32
80040814:	03e00008 	jr	ra
80040818:	00000000 	nop

8004081c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E>:
    }
}

#[stable(feature = "rust1", since = "1.0.0")]
impl Debug for str {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
8004081c:	27bdff20 	addiu	sp,sp,-224
80040820:	afbf00dc 	sw	ra,220(sp)
80040824:	afa60034 	sw	a2,52(sp)
80040828:	afa50030 	sw	a1,48(sp)
8004082c:	00800825 	move	at,a0
80040830:	8fa40034 	lw	a0,52(sp)
80040834:	afa10038 	sw	at,56(sp)
                    f.write_char(c)?;
                }
                from = i + c.len_utf8();
            }
        }
        f.write_str(&self[from..])?;
80040838:	afa100c0 	sw	at,192(sp)
8004083c:	afa500c4 	sw	a1,196(sp)
80040840:	afa400c8 	sw	a0,200(sp)
80040844:	24050022 	li	a1,34
        f.write_char('"')?;
80040848:	0c0101f9 	jal	800407e4 <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$10write_char17hce317d8c45d1f9c9E>
8004084c:	00000000 	nop
80040850:	00402025 	move	a0,v0
80040854:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80040858:	00000000 	nop
8004085c:	a3a20047 	sb	v0,71(sp)
80040860:	93a10047 	lbu	at,71(sp)
80040864:	30210001 	andi	at,at,0x1
80040868:	14200016 	bnez	at,800408c4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0xa8>
8004086c:	00000000 	nop
80040870:	0801021e 	j	80040878 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x5c>
80040874:	00000000 	nop
        let mut from = 0;
80040878:	8fa60030 	lw	a2,48(sp)
8004087c:	8fa50038 	lw	a1,56(sp)
80040880:	afa00048 	sw	zero,72(sp)
80040884:	27a40058 	addiu	a0,sp,88
80040888:	afa4002c 	sw	a0,44(sp)
        for (i, c) in self.char_indices() {
8004088c:	0c0113e3 	jal	80044f8c <_ZN4core3str21_$LT$impl$u20$str$GT$12char_indices17hbaf3c99ff2948506E>
80040890:	00000000 	nop
80040894:	8fa5002c 	lw	a1,44(sp)
80040898:	27a4004c 	addiu	a0,sp,76
8004089c:	0c00ef22 	jal	8003bc88 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h995e6662883fadcfE>
800408a0:	00000000 	nop
800408a4:	8fa10054 	lw	at,84(sp)
800408a8:	afa1006c 	sw	at,108(sp)
800408ac:	8fa10050 	lw	at,80(sp)
800408b0:	afa10068 	sw	at,104(sp)
800408b4:	8fa1004c 	lw	at,76(sp)
800408b8:	afa10064 	sw	at,100(sp)
800408bc:	08010238 	j	800408e0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0xc4>
800408c0:	00000000 	nop
        f.write_char('"')?;
800408c4:	3c018108 	lui	at,0x8108
800408c8:	2424be54 	addiu	a0,at,-16812
800408cc:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
800408d0:	00000000 	nop
800408d4:	a3a20046 	sb	v0,70(sp)
800408d8:	0801028c 	j	80040a30 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x214>
800408dc:	00000000 	nop
800408e0:	27a40064 	addiu	a0,sp,100
        for (i, c) in self.char_indices() {
800408e4:	0c010f0e 	jal	80043c38 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE>
800408e8:	00000000 	nop
800408ec:	afa20070 	sw	v0,112(sp)
800408f0:	afa30074 	sw	v1,116(sp)
800408f4:	8fa10074 	lw	at,116(sp)
800408f8:	3c020011 	lui	v0,0x11
800408fc:	1422001b 	bne	at,v0,8004096c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x150>
80040900:	00000000 	nop
80040904:	08010243 	j	8004090c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0xf0>
80040908:	00000000 	nop
        f.write_str(&self[from..])?;
8004090c:	8fa50030 	lw	a1,48(sp)
80040910:	8fa40038 	lw	a0,56(sp)
80040914:	8fa10048 	lw	at,72(sp)
80040918:	afa100bc 	sw	at,188(sp)
8004091c:	8fa600bc 	lw	a2,188(sp)
80040920:	3c018108 	lui	at,0x8108
80040924:	2427bdf4 	addiu	a3,at,-16908
80040928:	0c010f81 	jal	80043e04 <_ZN4core3str6traits66_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$str$GT$5index17h530a1160dbfa1a41E>
8004092c:	00000000 	nop
80040930:	8fa40034 	lw	a0,52(sp)
80040934:	00402825 	move	a1,v0
80040938:	00603025 	move	a2,v1
8004093c:	0c01017c 	jal	800405f0 <_ZN4core3fmt9Formatter9write_str17h2077d209297f8673E>
80040940:	00000000 	nop
80040944:	00402025 	move	a0,v0
80040948:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
8004094c:	00000000 	nop
80040950:	a3a200bb 	sb	v0,187(sp)
80040954:	93a100bb 	lbu	at,187(sp)
80040958:	30210001 	andi	at,at,0x1
8004095c:	10200026 	beqz	at,800409f8 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x1dc>
80040960:	00000000 	nop
80040964:	08010285 	j	80040a14 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x1f8>
80040968:	00000000 	nop
        for (i, c) in self.char_indices() {
8004096c:	8fa10070 	lw	at,112(sp)
80040970:	afa1001c 	sw	at,28(sp)
80040974:	afa100cc 	sw	at,204(sp)
80040978:	8fa50074 	lw	a1,116(sp)
8004097c:	afa50020 	sw	a1,32(sp)
80040980:	afa500d0 	sw	a1,208(sp)
80040984:	24010001 	li	at,1
80040988:	afa10028 	sw	at,40(sp)
            let esc = c.escape_debug_ext(EscapeDebugExtArgs {
8004098c:	a3a10084 	sb	at,132(sp)
80040990:	24020000 	li	v0,0
80040994:	a3a00085 	sb	zero,133(sp)
80040998:	a3a10086 	sb	at,134(sp)
8004099c:	93a10086 	lbu	at,134(sp)
800409a0:	a3a100d6 	sb	at,214(sp)
800409a4:	93a10085 	lbu	at,133(sp)
800409a8:	00010a00 	sll	at,at,0x8
800409ac:	93a20084 	lbu	v0,132(sp)
800409b0:	00220825 	or	at,at,v0
800409b4:	a7a100d4 	sh	at,212(sp)
800409b8:	93a100d6 	lbu	at,214(sp)
800409bc:	00011400 	sll	v0,at,0x10
800409c0:	97a100d4 	lhu	at,212(sp)
800409c4:	00223025 	or	a2,at,v0
800409c8:	27a40078 	addiu	a0,sp,120
800409cc:	afa40024 	sw	a0,36(sp)
800409d0:	0c00ebb4 	jal	8003aed0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E>
800409d4:	00000000 	nop
800409d8:	8fa40024 	lw	a0,36(sp)
            if esc.len() != 1 {
800409dc:	0c00ed73 	jal	8003b5cc <_ZN93_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..exact_size..ExactSizeIterator$GT$3len17hf4bcfdda21cc47c0E>
800409e0:	00000000 	nop
800409e4:	8fa10028 	lw	at,40(sp)
800409e8:	1041ffbd 	beq	v0,at,800408e0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0xc4>
800409ec:	00000000 	nop
800409f0:	08010292 	j	80040a48 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x22c>
800409f4:	00000000 	nop
        f.write_char('"')
800409f8:	8fa40034 	lw	a0,52(sp)
800409fc:	24050022 	li	a1,34
80040a00:	0c0101f9 	jal	800407e4 <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$10write_char17hce317d8c45d1f9c9E>
80040a04:	00000000 	nop
80040a08:	a3a20046 	sb	v0,70(sp)
80040a0c:	0801028c 	j	80040a30 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x214>
80040a10:	00000000 	nop
        f.write_str(&self[from..])?;
80040a14:	3c018108 	lui	at,0x8108
80040a18:	2424be04 	addiu	a0,at,-16892
80040a1c:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80040a20:	00000000 	nop
80040a24:	a3a20046 	sb	v0,70(sp)
80040a28:	0801028c 	j	80040a30 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x214>
80040a2c:	00000000 	nop
    }
80040a30:	93a10046 	lbu	at,70(sp)
80040a34:	30220001 	andi	v0,at,0x1
80040a38:	8fbf00dc 	lw	ra,220(sp)
80040a3c:	27bd00e0 	addiu	sp,sp,224
80040a40:	03e00008 	jr	ra
80040a44:	00000000 	nop
                f.write_str(&self[from..i])?;
80040a48:	8fa50030 	lw	a1,48(sp)
80040a4c:	8fa40038 	lw	a0,56(sp)
80040a50:	8fa1001c 	lw	at,28(sp)
80040a54:	8fa20048 	lw	v0,72(sp)
80040a58:	afa20088 	sw	v0,136(sp)
80040a5c:	afa1008c 	sw	at,140(sp)
80040a60:	8fa60088 	lw	a2,136(sp)
80040a64:	8fa7008c 	lw	a3,140(sp)
80040a68:	3c018108 	lui	at,0x8108
80040a6c:	2421be14 	addiu	at,at,-16876
80040a70:	03a01025 	move	v0,sp
80040a74:	ac410010 	sw	at,16(v0)
80040a78:	0c010f6c 	jal	80043db0 <_ZN4core3str6traits66_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$str$GT$5index17h3aebf7787939ace3E>
80040a7c:	00000000 	nop
80040a80:	8fa40034 	lw	a0,52(sp)
80040a84:	00402825 	move	a1,v0
80040a88:	00603025 	move	a2,v1
80040a8c:	0c01017c 	jal	800405f0 <_ZN4core3fmt9Formatter9write_str17h2077d209297f8673E>
80040a90:	00000000 	nop
80040a94:	00402025 	move	a0,v0
80040a98:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80040a9c:	00000000 	nop
80040aa0:	a3a20087 	sb	v0,135(sp)
80040aa4:	93a10087 	lbu	at,135(sp)
80040aa8:	30210001 	andi	at,at,0x1
80040aac:	14200015 	bnez	at,80040b04 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x2e8>
80040ab0:	00000000 	nop
80040ab4:	080102af 	j	80040abc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x2a0>
80040ab8:	00000000 	nop
                for c in esc {
80040abc:	8fa10080 	lw	at,128(sp)
80040ac0:	afa100a4 	sw	at,164(sp)
80040ac4:	8fa1007c 	lw	at,124(sp)
80040ac8:	afa100a0 	sw	at,160(sp)
80040acc:	8fa10078 	lw	at,120(sp)
80040ad0:	afa1009c 	sw	at,156(sp)
80040ad4:	27a40090 	addiu	a0,sp,144
80040ad8:	27a5009c 	addiu	a1,sp,156
80040adc:	0c00ef2b 	jal	8003bcac <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hab92d4a309fc1853E>
80040ae0:	00000000 	nop
80040ae4:	8fa10098 	lw	at,152(sp)
80040ae8:	afa100b0 	sw	at,176(sp)
80040aec:	8fa10094 	lw	at,148(sp)
80040af0:	afa100ac 	sw	at,172(sp)
80040af4:	8fa10090 	lw	at,144(sp)
80040af8:	afa100a8 	sw	at,168(sp)
80040afc:	080102c8 	j	80040b20 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x304>
80040b00:	00000000 	nop
                f.write_str(&self[from..i])?;
80040b04:	3c018108 	lui	at,0x8108
80040b08:	2424be44 	addiu	a0,at,-16828
80040b0c:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80040b10:	00000000 	nop
80040b14:	a3a20046 	sb	v0,70(sp)
80040b18:	0801028c 	j	80040a30 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x214>
80040b1c:	00000000 	nop
80040b20:	27a400a8 	addiu	a0,sp,168
                for c in esc {
80040b24:	0c00ed4f 	jal	8003b53c <_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4482fd071e18f61bE>
80040b28:	00000000 	nop
80040b2c:	afa200b4 	sw	v0,180(sp)
80040b30:	8fa100b4 	lw	at,180(sp)
80040b34:	3c020011 	lui	v0,0x11
80040b38:	1422000f 	bne	at,v0,80040b78 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x35c>
80040b3c:	00000000 	nop
80040b40:	080102d2 	j	80040b48 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x32c>
80040b44:	00000000 	nop
                from = i + c.len_utf8();
80040b48:	8fa40020 	lw	a0,32(sp)
80040b4c:	0c00ec62 	jal	8003b188 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$8len_utf817hb6087b2bc95d3ee8E>
80040b50:	00000000 	nop
80040b54:	00400825 	move	at,v0
80040b58:	8fa2001c 	lw	v0,28(sp)
80040b5c:	00410821 	addu	at,v0,at
80040b60:	afa10018 	sw	at,24(sp)
80040b64:	0022082b 	sltu	at,at,v0
80040b68:	14200016 	bnez	at,80040bc4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x3a8>
80040b6c:	00000000 	nop
80040b70:	080102ed 	j	80040bb4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x398>
80040b74:	00000000 	nop
                for c in esc {
80040b78:	8fa40034 	lw	a0,52(sp)
80040b7c:	8fa500b4 	lw	a1,180(sp)
80040b80:	afa500d8 	sw	a1,216(sp)
                    f.write_char(c)?;
80040b84:	0c0101f9 	jal	800407e4 <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$10write_char17hce317d8c45d1f9c9E>
80040b88:	00000000 	nop
80040b8c:	00402025 	move	a0,v0
80040b90:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80040b94:	00000000 	nop
80040b98:	a3a200ba 	sb	v0,186(sp)
80040b9c:	93a100ba 	lbu	at,186(sp)
80040ba0:	30210001 	andi	at,at,0x1
80040ba4:	1020ffde 	beqz	at,80040b20 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x304>
80040ba8:	00000000 	nop
80040bac:	080102f5 	j	80040bd4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x3b8>
80040bb0:	00000000 	nop
                from = i + c.len_utf8();
80040bb4:	8fa10018 	lw	at,24(sp)
80040bb8:	afa10048 	sw	at,72(sp)
            if esc.len() != 1 {
80040bbc:	08010238 	j	800408e0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0xc4>
80040bc0:	00000000 	nop
                from = i + c.len_utf8();
80040bc4:	3c018108 	lui	at,0x8108
80040bc8:	2424be24 	addiu	a0,at,-16860
80040bcc:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80040bd0:	00000000 	nop
                    f.write_char(c)?;
80040bd4:	3c018108 	lui	at,0x8108
80040bd8:	2424be34 	addiu	a0,at,-16844
80040bdc:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80040be0:	00000000 	nop
80040be4:	a3a20046 	sb	v0,70(sp)
80040be8:	0801028c 	j	80040a30 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h33f624a9669f6113E+0x214>
80040bec:	00000000 	nop

80040bf0 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h9fa5bfb18ba922eeE>:
}

#[stable(feature = "rust1", since = "1.0.0")]
impl Display for str {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
80040bf0:	27bdffd8 	addiu	sp,sp,-40
80040bf4:	afbf0024 	sw	ra,36(sp)
80040bf8:	afa60014 	sw	a2,20(sp)
80040bfc:	00a03025 	move	a2,a1
80040c00:	00802825 	move	a1,a0
80040c04:	8fa40014 	lw	a0,20(sp)
80040c08:	afa50018 	sw	a1,24(sp)
80040c0c:	afa6001c 	sw	a2,28(sp)
80040c10:	afa40020 	sw	a0,32(sp)
        f.pad(self)
80040c14:	0c01000d 	jal	80040034 <_ZN4core3fmt9Formatter3pad17hd1b9130c5c640e05E>
80040c18:	00000000 	nop
    }
80040c1c:	8fbf0024 	lw	ra,36(sp)
80040c20:	27bd0028 	addiu	sp,sp,40
80040c24:	03e00008 	jr	ra
80040c28:	00000000 	nop

80040c2c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE>:
}

#[stable(feature = "rust1", since = "1.0.0")]
impl Debug for char {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
80040c2c:	27bdff98 	addiu	sp,sp,-104
80040c30:	afbf0064 	sw	ra,100(sp)
80040c34:	afa50014 	sw	a1,20(sp)
80040c38:	00800825 	move	at,a0
80040c3c:	8fa40014 	lw	a0,20(sp)
80040c40:	afa10018 	sw	at,24(sp)
        for c in self.escape_debug_ext(EscapeDebugExtArgs {
            escape_grapheme_extended: true,
            escape_single_quote: true,
            escape_double_quote: false,
        }) {
            f.write_char(c)?
80040c44:	afa10054 	sw	at,84(sp)
80040c48:	afa40058 	sw	a0,88(sp)
80040c4c:	24050027 	li	a1,39
        f.write_char('\'')?;
80040c50:	0c0101f9 	jal	800407e4 <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$10write_char17hce317d8c45d1f9c9E>
80040c54:	00000000 	nop
80040c58:	00402025 	move	a0,v0
80040c5c:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80040c60:	00000000 	nop
80040c64:	a3a20023 	sb	v0,35(sp)
80040c68:	93a10023 	lbu	at,35(sp)
80040c6c:	30210001 	andi	at,at,0x1
80040c70:	14200025 	bnez	at,80040d08 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0xdc>
80040c74:	00000000 	nop
80040c78:	08010320 	j	80040c80 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0x54>
80040c7c:	00000000 	nop
        for c in self.escape_debug_ext(EscapeDebugExtArgs {
80040c80:	8fa10018 	lw	at,24(sp)
80040c84:	8c250000 	lw	a1,0(at)
80040c88:	24010001 	li	at,1
80040c8c:	a3a1003d 	sb	at,61(sp)
80040c90:	a3a1003e 	sb	at,62(sp)
80040c94:	24010000 	li	at,0
80040c98:	a3a0003f 	sb	zero,63(sp)
80040c9c:	93a1003f 	lbu	at,63(sp)
80040ca0:	a3a1005e 	sb	at,94(sp)
80040ca4:	93a1003e 	lbu	at,62(sp)
80040ca8:	00010a00 	sll	at,at,0x8
80040cac:	93a2003d 	lbu	v0,61(sp)
80040cb0:	00220825 	or	at,at,v0
80040cb4:	a7a1005c 	sh	at,92(sp)
80040cb8:	93a1005e 	lbu	at,94(sp)
80040cbc:	00011400 	sll	v0,at,0x10
80040cc0:	97a1005c 	lhu	at,92(sp)
80040cc4:	00223025 	or	a2,at,v0
80040cc8:	27a40030 	addiu	a0,sp,48
80040ccc:	afa40010 	sw	a0,16(sp)
80040cd0:	0c00ebb4 	jal	8003aed0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h92ad6deff8c78019E>
80040cd4:	00000000 	nop
80040cd8:	8fa50010 	lw	a1,16(sp)
80040cdc:	27a40024 	addiu	a0,sp,36
80040ce0:	0c00ef2b 	jal	8003bcac <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hab92d4a309fc1853E>
80040ce4:	00000000 	nop
80040ce8:	8fa1002c 	lw	at,44(sp)
80040cec:	afa10048 	sw	at,72(sp)
80040cf0:	8fa10028 	lw	at,40(sp)
80040cf4:	afa10044 	sw	at,68(sp)
80040cf8:	8fa10024 	lw	at,36(sp)
80040cfc:	afa10040 	sw	at,64(sp)
80040d00:	08010349 	j	80040d24 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0xf8>
80040d04:	00000000 	nop
        f.write_char('\'')?;
80040d08:	3c018108 	lui	at,0x8108
80040d0c:	2424be74 	addiu	a0,at,-16780
80040d10:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80040d14:	00000000 	nop
80040d18:	a3a20022 	sb	v0,34(sp)
80040d1c:	08010369 	j	80040da4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0x178>
80040d20:	00000000 	nop
80040d24:	27a40040 	addiu	a0,sp,64
        for c in self.escape_debug_ext(EscapeDebugExtArgs {
80040d28:	0c00ed4f 	jal	8003b53c <_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4482fd071e18f61bE>
80040d2c:	00000000 	nop
80040d30:	afa2004c 	sw	v0,76(sp)
80040d34:	8fa1004c 	lw	at,76(sp)
80040d38:	3c020011 	lui	v0,0x11
80040d3c:	1422000a 	bne	at,v0,80040d68 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0x13c>
80040d40:	00000000 	nop
80040d44:	08010353 	j	80040d4c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0x120>
80040d48:	00000000 	nop
        }
        f.write_char('\'')
80040d4c:	8fa40014 	lw	a0,20(sp)
80040d50:	24050027 	li	a1,39
80040d54:	0c0101f9 	jal	800407e4 <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$10write_char17hce317d8c45d1f9c9E>
80040d58:	00000000 	nop
80040d5c:	a3a20022 	sb	v0,34(sp)
80040d60:	08010369 	j	80040da4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0x178>
80040d64:	00000000 	nop
        for c in self.escape_debug_ext(EscapeDebugExtArgs {
80040d68:	8fa40014 	lw	a0,20(sp)
80040d6c:	8fa5004c 	lw	a1,76(sp)
80040d70:	afa50060 	sw	a1,96(sp)
            f.write_char(c)?
80040d74:	0c0101f9 	jal	800407e4 <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$10write_char17hce317d8c45d1f9c9E>
80040d78:	00000000 	nop
80040d7c:	00402025 	move	a0,v0
80040d80:	0c00f51d 	jal	8003d474 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hdc006ae5ecbbad77E>
80040d84:	00000000 	nop
80040d88:	a3a20053 	sb	v0,83(sp)
80040d8c:	93a10053 	lbu	at,83(sp)
80040d90:	30210001 	andi	at,at,0x1
80040d94:	1020ffe3 	beqz	at,80040d24 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0xf8>
80040d98:	00000000 	nop
80040d9c:	0801036f 	j	80040dbc <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0x190>
80040da0:	00000000 	nop
    }
80040da4:	93a10022 	lbu	at,34(sp)
80040da8:	30220001 	andi	v0,at,0x1
80040dac:	8fbf0064 	lw	ra,100(sp)
80040db0:	27bd0068 	addiu	sp,sp,104
80040db4:	03e00008 	jr	ra
80040db8:	00000000 	nop
            f.write_char(c)?
80040dbc:	3c018108 	lui	at,0x8108
80040dc0:	2424be64 	addiu	a0,at,-16796
80040dc4:	0c00f53a 	jal	8003d4e8 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hf91fcc08dbe2af1fE>
80040dc8:	00000000 	nop
80040dcc:	a3a20022 	sb	v0,34(sp)
80040dd0:	08010369 	j	80040da4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3493205e5bd470eE+0x178>
80040dd4:	00000000 	nop

80040dd8 <_ZN4core5slice5index26slice_start_index_len_fail17h7d16ec469bcb47d5E>:
const fn slice_start_index_len_fail(index: usize, len: usize) -> ! {
80040dd8:	27bdffe0 	addiu	sp,sp,-32
80040ddc:	afa40018 	sw	a0,24(sp)
80040de0:	afa5001c 	sw	a1,28(sp)
    const_eval_select((index, len), slice_start_index_len_fail_ct, slice_start_index_len_fail_rt)
80040de4:	afa40010 	sw	a0,16(sp)
80040de8:	afa50014 	sw	a1,20(sp)
80040dec:	8fa40010 	lw	a0,16(sp)
80040df0:	8fa50014 	lw	a1,20(sp)
80040df4:	0c01037f 	jal	80040dfc <_ZN4core5slice5index29slice_start_index_len_fail_rt17h2dae12d37a6a2feeE>
80040df8:	00000000 	nop

80040dfc <_ZN4core5slice5index29slice_start_index_len_fail_rt17h2dae12d37a6a2feeE>:
fn slice_start_index_len_fail_rt(index: usize, len: usize) -> ! {
80040dfc:	27bdff80 	addiu	sp,sp,-128
80040e00:	afbf007c 	sw	ra,124(sp)
80040e04:	afa60020 	sw	a2,32(sp)
80040e08:	afa40024 	sw	a0,36(sp)
80040e0c:	afa50028 	sw	a1,40(sp)
80040e10:	27a20024 	addiu	v0,sp,36
80040e14:	afa20068 	sw	v0,104(sp)
80040e18:	afa20074 	sw	v0,116(sp)
80040e1c:	3c018004 	lui	at,0x8004
80040e20:	24217d60 	addiu	at,at,32096
80040e24:	afa10078 	sw	at,120(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80040e28:	afa2006c 	sw	v0,108(sp)
80040e2c:	afa10070 	sw	at,112(sp)
    }
80040e30:	8fa4006c 	lw	a0,108(sp)
80040e34:	8fa30070 	lw	v1,112(sp)
80040e38:	27a20028 	addiu	v0,sp,40
80040e3c:	afa20054 	sw	v0,84(sp)
80040e40:	afa20060 	sw	v0,96(sp)
80040e44:	afa10064 	sw	at,100(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80040e48:	afa20058 	sw	v0,88(sp)
80040e4c:	afa1005c 	sw	at,92(sp)
    }
80040e50:	8fa20058 	lw	v0,88(sp)
80040e54:	8fa1005c 	lw	at,92(sp)
    panic!("range start index {index} out of range for slice of length {len}");
80040e58:	afa40044 	sw	a0,68(sp)
80040e5c:	afa30048 	sw	v1,72(sp)
80040e60:	afa2004c 	sw	v0,76(sp)
80040e64:	afa10050 	sw	at,80(sp)
80040e68:	03a00825 	move	at,sp
80040e6c:	24060002 	li	a2,2
80040e70:	ac260010 	sw	a2,16(at)
80040e74:	3c018108 	lui	at,0x8108
80040e78:	2425beb8 	addiu	a1,at,-16712
80040e7c:	27a4002c 	addiu	a0,sp,44
80040e80:	afa4001c 	sw	a0,28(sp)
80040e84:	27a70044 	addiu	a3,sp,68
80040e88:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
80040e8c:	00000000 	nop
80040e90:	8fa4001c 	lw	a0,28(sp)
80040e94:	8fa50020 	lw	a1,32(sp)
80040e98:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80040e9c:	00000000 	nop

80040ea0 <_ZN4core5slice5index24slice_end_index_len_fail17hc8473d7595779981E>:
const fn slice_end_index_len_fail(index: usize, len: usize) -> ! {
80040ea0:	27bdffe0 	addiu	sp,sp,-32
80040ea4:	afa40018 	sw	a0,24(sp)
80040ea8:	afa5001c 	sw	a1,28(sp)
    const_eval_select((index, len), slice_end_index_len_fail_ct, slice_end_index_len_fail_rt)
80040eac:	afa40010 	sw	a0,16(sp)
80040eb0:	afa50014 	sw	a1,20(sp)
80040eb4:	8fa40010 	lw	a0,16(sp)
80040eb8:	8fa50014 	lw	a1,20(sp)
80040ebc:	0c0103b1 	jal	80040ec4 <_ZN4core5slice5index27slice_end_index_len_fail_rt17ha7de40be801361f9E>
80040ec0:	00000000 	nop

80040ec4 <_ZN4core5slice5index27slice_end_index_len_fail_rt17ha7de40be801361f9E>:
fn slice_end_index_len_fail_rt(index: usize, len: usize) -> ! {
80040ec4:	27bdff80 	addiu	sp,sp,-128
80040ec8:	afbf007c 	sw	ra,124(sp)
80040ecc:	afa60020 	sw	a2,32(sp)
80040ed0:	afa40024 	sw	a0,36(sp)
80040ed4:	afa50028 	sw	a1,40(sp)
80040ed8:	27a20024 	addiu	v0,sp,36
80040edc:	afa20068 	sw	v0,104(sp)
80040ee0:	afa20074 	sw	v0,116(sp)
80040ee4:	3c018004 	lui	at,0x8004
80040ee8:	24217d60 	addiu	at,at,32096
80040eec:	afa10078 	sw	at,120(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80040ef0:	afa2006c 	sw	v0,108(sp)
80040ef4:	afa10070 	sw	at,112(sp)
    }
80040ef8:	8fa4006c 	lw	a0,108(sp)
80040efc:	8fa30070 	lw	v1,112(sp)
80040f00:	27a20028 	addiu	v0,sp,40
80040f04:	afa20054 	sw	v0,84(sp)
80040f08:	afa20060 	sw	v0,96(sp)
80040f0c:	afa10064 	sw	at,100(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80040f10:	afa20058 	sw	v0,88(sp)
80040f14:	afa1005c 	sw	at,92(sp)
    }
80040f18:	8fa20058 	lw	v0,88(sp)
80040f1c:	8fa1005c 	lw	at,92(sp)
    panic!("range end index {index} out of range for slice of length {len}");
80040f20:	afa40044 	sw	a0,68(sp)
80040f24:	afa30048 	sw	v1,72(sp)
80040f28:	afa2004c 	sw	v0,76(sp)
80040f2c:	afa10050 	sw	at,80(sp)
80040f30:	03a00825 	move	at,sp
80040f34:	24060002 	li	a2,2
80040f38:	ac260010 	sw	a2,16(at)
80040f3c:	3c018108 	lui	at,0x8108
80040f40:	2425bec8 	addiu	a1,at,-16696
80040f44:	27a4002c 	addiu	a0,sp,44
80040f48:	afa4001c 	sw	a0,28(sp)
80040f4c:	27a70044 	addiu	a3,sp,68
80040f50:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
80040f54:	00000000 	nop
80040f58:	8fa4001c 	lw	a0,28(sp)
80040f5c:	8fa50020 	lw	a1,32(sp)
80040f60:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80040f64:	00000000 	nop

80040f68 <_ZN4core5slice5index22slice_index_order_fail17h449e604cb79353f4E>:
const fn slice_index_order_fail(index: usize, end: usize) -> ! {
80040f68:	27bdffe0 	addiu	sp,sp,-32
80040f6c:	afa40018 	sw	a0,24(sp)
80040f70:	afa5001c 	sw	a1,28(sp)
    const_eval_select((index, end), slice_index_order_fail_ct, slice_index_order_fail_rt)
80040f74:	afa40010 	sw	a0,16(sp)
80040f78:	afa50014 	sw	a1,20(sp)
80040f7c:	8fa40010 	lw	a0,16(sp)
80040f80:	8fa50014 	lw	a1,20(sp)
80040f84:	0c0103e3 	jal	80040f8c <_ZN4core5slice5index25slice_index_order_fail_rt17hd0ae5c98f7c5218eE>
80040f88:	00000000 	nop

80040f8c <_ZN4core5slice5index25slice_index_order_fail_rt17hd0ae5c98f7c5218eE>:
fn slice_index_order_fail_rt(index: usize, end: usize) -> ! {
80040f8c:	27bdff80 	addiu	sp,sp,-128
80040f90:	afbf007c 	sw	ra,124(sp)
80040f94:	afa60020 	sw	a2,32(sp)
80040f98:	afa40024 	sw	a0,36(sp)
80040f9c:	afa50028 	sw	a1,40(sp)
80040fa0:	27a20024 	addiu	v0,sp,36
80040fa4:	afa20068 	sw	v0,104(sp)
80040fa8:	afa20074 	sw	v0,116(sp)
80040fac:	3c018004 	lui	at,0x8004
80040fb0:	24217d60 	addiu	at,at,32096
80040fb4:	afa10078 	sw	at,120(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80040fb8:	afa2006c 	sw	v0,108(sp)
80040fbc:	afa10070 	sw	at,112(sp)
    }
80040fc0:	8fa4006c 	lw	a0,108(sp)
80040fc4:	8fa30070 	lw	v1,112(sp)
80040fc8:	27a20028 	addiu	v0,sp,40
80040fcc:	afa20054 	sw	v0,84(sp)
80040fd0:	afa20060 	sw	v0,96(sp)
80040fd4:	afa10064 	sw	at,100(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80040fd8:	afa20058 	sw	v0,88(sp)
80040fdc:	afa1005c 	sw	at,92(sp)
    }
80040fe0:	8fa20058 	lw	v0,88(sp)
80040fe4:	8fa1005c 	lw	at,92(sp)
    panic!("slice index starts at {index} but ends at {end}");
80040fe8:	afa40044 	sw	a0,68(sp)
80040fec:	afa30048 	sw	v1,72(sp)
80040ff0:	afa2004c 	sw	v0,76(sp)
80040ff4:	afa10050 	sw	at,80(sp)
80040ff8:	03a00825 	move	at,sp
80040ffc:	24060002 	li	a2,2
80041000:	ac260010 	sw	a2,16(at)
80041004:	3c018108 	lui	at,0x8108
80041008:	2425befc 	addiu	a1,at,-16644
8004100c:	27a4002c 	addiu	a0,sp,44
80041010:	afa4001c 	sw	a0,28(sp)
80041014:	27a70044 	addiu	a3,sp,68
80041018:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8004101c:	00000000 	nop
80041020:	8fa4001c 	lw	a0,28(sp)
80041024:	8fa50020 	lw	a1,32(sp)
80041028:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8004102c:	00000000 	nop

80041030 <_ZN4core5slice5index29slice_end_index_overflow_fail17h6abcd4ef789741ecE>:
const fn slice_end_index_overflow_fail() -> ! {
80041030:	27bdffc8 	addiu	sp,sp,-56
80041034:	afbf0034 	sw	ra,52(sp)
80041038:	afa40018 	sw	a0,24(sp)
    panic!("attempted to index slice up to maximum usize");
8004103c:	3c018108 	lui	at,0x8108
80041040:	2425bf38 	addiu	a1,at,-16584
80041044:	27a4001c 	addiu	a0,sp,28
80041048:	afa40014 	sw	a0,20(sp)
8004104c:	24060001 	li	a2,1
80041050:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80041054:	00000000 	nop
80041058:	8fa40014 	lw	a0,20(sp)
8004105c:	8fa50018 	lw	a1,24(sp)
80041060:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80041064:	00000000 	nop

80041068 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h14bc8037b64de363E>:
    fn get(self, slice: &[T]) -> Option<&T> {
80041068:	27bdffd0 	addiu	sp,sp,-48
8004106c:	afbf002c 	sw	ra,44(sp)
80041070:	afa60010 	sw	a2,16(sp)
80041074:	afa50014 	sw	a1,20(sp)
80041078:	afa40018 	sw	a0,24(sp)
8004107c:	afa40020 	sw	a0,32(sp)
80041080:	afa50024 	sw	a1,36(sp)
80041084:	afa60028 	sw	a2,40(sp)
        if self < slice.len() { unsafe { Some(&*self.get_unchecked(slice)) } } else { None }
80041088:	0086082b 	sltu	at,a0,a2
8004108c:	14200006 	bnez	at,800410a8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h14bc8037b64de363E+0x40>
80041090:	00000000 	nop
80041094:	08010427 	j	8004109c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h14bc8037b64de363E+0x34>
80041098:	00000000 	nop
8004109c:	afa0001c 	sw	zero,28(sp)
800410a0:	08010432 	j	800410c8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h14bc8037b64de363E+0x60>
800410a4:	00000000 	nop
800410a8:	8fa60010 	lw	a2,16(sp)
800410ac:	8fa50014 	lw	a1,20(sp)
800410b0:	8fa40018 	lw	a0,24(sp)
800410b4:	0c010471 	jal	800411c4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h1cfb3a955405feddE>
800410b8:	00000000 	nop
800410bc:	afa2001c 	sw	v0,28(sp)
800410c0:	08010432 	j	800410c8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h14bc8037b64de363E+0x60>
800410c4:	00000000 	nop
    }
800410c8:	8fa2001c 	lw	v0,28(sp)
800410cc:	8fbf002c 	lw	ra,44(sp)
800410d0:	27bd0030 	addiu	sp,sp,48
800410d4:	03e00008 	jr	ra
800410d8:	00000000 	nop

800410dc <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h3178bb15dbadb5bcE>:
    fn get(self, slice: &[T]) -> Option<&T> {
800410dc:	27bdffd0 	addiu	sp,sp,-48
800410e0:	afbf002c 	sw	ra,44(sp)
800410e4:	afa60010 	sw	a2,16(sp)
800410e8:	afa50014 	sw	a1,20(sp)
800410ec:	afa40018 	sw	a0,24(sp)
800410f0:	afa40020 	sw	a0,32(sp)
800410f4:	afa50024 	sw	a1,36(sp)
800410f8:	afa60028 	sw	a2,40(sp)
        if self < slice.len() { unsafe { Some(&*self.get_unchecked(slice)) } } else { None }
800410fc:	0086082b 	sltu	at,a0,a2
80041100:	14200006 	bnez	at,8004111c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h3178bb15dbadb5bcE+0x40>
80041104:	00000000 	nop
80041108:	08010444 	j	80041110 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h3178bb15dbadb5bcE+0x34>
8004110c:	00000000 	nop
80041110:	afa0001c 	sw	zero,28(sp)
80041114:	0801044f 	j	8004113c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h3178bb15dbadb5bcE+0x60>
80041118:	00000000 	nop
8004111c:	8fa60010 	lw	a2,16(sp)
80041120:	8fa50014 	lw	a1,20(sp)
80041124:	8fa40018 	lw	a0,24(sp)
80041128:	0c0104eb 	jal	800413ac <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hab2db58a58b371faE>
8004112c:	00000000 	nop
80041130:	afa2001c 	sw	v0,28(sp)
80041134:	0801044f 	j	8004113c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h3178bb15dbadb5bcE+0x60>
80041138:	00000000 	nop
    }
8004113c:	8fa2001c 	lw	v0,28(sp)
80041140:	8fbf002c 	lw	ra,44(sp)
80041144:	27bd0030 	addiu	sp,sp,48
80041148:	03e00008 	jr	ra
8004114c:	00000000 	nop

80041150 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17he78150f80a7d8cf9E>:
    fn get(self, slice: &[T]) -> Option<&T> {
80041150:	27bdffd0 	addiu	sp,sp,-48
80041154:	afbf002c 	sw	ra,44(sp)
80041158:	afa60010 	sw	a2,16(sp)
8004115c:	afa50014 	sw	a1,20(sp)
80041160:	afa40018 	sw	a0,24(sp)
80041164:	afa40020 	sw	a0,32(sp)
80041168:	afa50024 	sw	a1,36(sp)
8004116c:	afa60028 	sw	a2,40(sp)
        if self < slice.len() { unsafe { Some(&*self.get_unchecked(slice)) } } else { None }
80041170:	0086082b 	sltu	at,a0,a2
80041174:	14200006 	bnez	at,80041190 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17he78150f80a7d8cf9E+0x40>
80041178:	00000000 	nop
8004117c:	08010461 	j	80041184 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17he78150f80a7d8cf9E+0x34>
80041180:	00000000 	nop
80041184:	afa0001c 	sw	zero,28(sp)
80041188:	0801046c 	j	800411b0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17he78150f80a7d8cf9E+0x60>
8004118c:	00000000 	nop
80041190:	8fa60010 	lw	a2,16(sp)
80041194:	8fa50014 	lw	a1,20(sp)
80041198:	8fa40018 	lw	a0,24(sp)
8004119c:	0c010499 	jal	80041264 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h2b3719edff8e275cE>
800411a0:	00000000 	nop
800411a4:	afa2001c 	sw	v0,28(sp)
800411a8:	0801046c 	j	800411b0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17he78150f80a7d8cf9E+0x60>
800411ac:	00000000 	nop
    }
800411b0:	8fa2001c 	lw	v0,28(sp)
800411b4:	8fbf002c 	lw	ra,44(sp)
800411b8:	27bd0030 	addiu	sp,sp,48
800411bc:	03e00008 	jr	ra
800411c0:	00000000 	nop

800411c4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h1cfb3a955405feddE>:
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {
800411c4:	27bdffc8 	addiu	sp,sp,-56
800411c8:	afbf0034 	sw	ra,52(sp)
800411cc:	afa60014 	sw	a2,20(sp)
800411d0:	afa50018 	sw	a1,24(sp)
800411d4:	afa4001c 	sw	a0,28(sp)
800411d8:	afa40020 	sw	a0,32(sp)
800411dc:	afa50024 	sw	a1,36(sp)
800411e0:	afa60028 	sw	a2,40(sp)
        assert_unsafe_precondition!(
800411e4:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
800411e8:	00000000 	nop
800411ec:	14400013 	bnez	v0,8004123c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h1cfb3a955405feddE+0x78>
800411f0:	00000000 	nop
800411f4:	0801047f 	j	800411fc <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h1cfb3a955405feddE+0x38>
800411f8:	00000000 	nop
            crate::intrinsics::assume(self < slice.len());
800411fc:	8fa50014 	lw	a1,20(sp)
80041200:	8fa40018 	lw	a0,24(sp)
80041204:	0c00e68f 	jal	80039a3c <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hb4a60cfd4b05d1f1E>
80041208:	00000000 	nop
8004120c:	8fa40018 	lw	a0,24(sp)
80041210:	8fa50014 	lw	a1,20(sp)
            slice.as_ptr().add(self)
80041214:	0c00e6bf 	jal	80039afc <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17hdacca62b30e596aaE>
80041218:	00000000 	nop
8004121c:	8fa1001c 	lw	at,28(sp)
80041220:	afa2002c 	sw	v0,44(sp)
80041224:	afa10030 	sw	at,48(sp)
        unsafe { intrinsics::offset(self, count) }
80041228:	00411021 	addu	v0,v0,at
    }
8004122c:	8fbf0034 	lw	ra,52(sp)
80041230:	27bd0038 	addiu	sp,sp,56
80041234:	03e00008 	jr	ra
80041238:	00000000 	nop
            (this: usize = self, len: usize = slice.len()) => this < len
8004123c:	8fa50014 	lw	a1,20(sp)
80041240:	8fa40018 	lw	a0,24(sp)
80041244:	0c00e68f 	jal	80039a3c <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hb4a60cfd4b05d1f1E>
80041248:	00000000 	nop
8004124c:	8fa4001c 	lw	a0,28(sp)
80041250:	00402825 	move	a1,v0
        assert_unsafe_precondition!(
80041254:	0c011fa8 	jal	80047ea0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1ff0c4beaf99429fE>
80041258:	00000000 	nop
8004125c:	0801047f 	j	800411fc <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h1cfb3a955405feddE+0x38>
80041260:	00000000 	nop

80041264 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h2b3719edff8e275cE>:
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {
80041264:	27bdffc8 	addiu	sp,sp,-56
80041268:	afbf0034 	sw	ra,52(sp)
8004126c:	afa60014 	sw	a2,20(sp)
80041270:	afa50018 	sw	a1,24(sp)
80041274:	afa4001c 	sw	a0,28(sp)
80041278:	afa40020 	sw	a0,32(sp)
8004127c:	afa50024 	sw	a1,36(sp)
80041280:	afa60028 	sw	a2,40(sp)
        assert_unsafe_precondition!(
80041284:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80041288:	00000000 	nop
8004128c:	14400014 	bnez	v0,800412e0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h2b3719edff8e275cE+0x7c>
80041290:	00000000 	nop
80041294:	080104a7 	j	8004129c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h2b3719edff8e275cE+0x38>
80041298:	00000000 	nop
            crate::intrinsics::assume(self < slice.len());
8004129c:	8fa50014 	lw	a1,20(sp)
800412a0:	8fa40018 	lw	a0,24(sp)
800412a4:	0c00e699 	jal	80039a64 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hd4a723c2092474fbE>
800412a8:	00000000 	nop
800412ac:	8fa40018 	lw	a0,24(sp)
800412b0:	8fa50014 	lw	a1,20(sp)
            slice.as_ptr().add(self)
800412b4:	0c00e6b8 	jal	80039ae0 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h82c8eed925475b43E>
800412b8:	00000000 	nop
800412bc:	8fa1001c 	lw	at,28(sp)
800412c0:	afa2002c 	sw	v0,44(sp)
800412c4:	afa10030 	sw	at,48(sp)
800412c8:	000108c0 	sll	at,at,0x3
800412cc:	00411021 	addu	v0,v0,at
    }
800412d0:	8fbf0034 	lw	ra,52(sp)
800412d4:	27bd0038 	addiu	sp,sp,56
800412d8:	03e00008 	jr	ra
800412dc:	00000000 	nop
            (this: usize = self, len: usize = slice.len()) => this < len
800412e0:	8fa50014 	lw	a1,20(sp)
800412e4:	8fa40018 	lw	a0,24(sp)
800412e8:	0c00e699 	jal	80039a64 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hd4a723c2092474fbE>
800412ec:	00000000 	nop
800412f0:	8fa4001c 	lw	a0,28(sp)
800412f4:	00402825 	move	a1,v0
        assert_unsafe_precondition!(
800412f8:	0c011fa8 	jal	80047ea0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1ff0c4beaf99429fE>
800412fc:	00000000 	nop
80041300:	080104a7 	j	8004129c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h2b3719edff8e275cE+0x38>
80041304:	00000000 	nop

80041308 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h9107849c459d3e13E>:
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {
80041308:	27bdffc8 	addiu	sp,sp,-56
8004130c:	afbf0034 	sw	ra,52(sp)
80041310:	afa60014 	sw	a2,20(sp)
80041314:	afa50018 	sw	a1,24(sp)
80041318:	afa4001c 	sw	a0,28(sp)
8004131c:	afa40020 	sw	a0,32(sp)
80041320:	afa50024 	sw	a1,36(sp)
80041324:	afa60028 	sw	a2,40(sp)
        assert_unsafe_precondition!(
80041328:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8004132c:	00000000 	nop
80041330:	14400014 	bnez	v0,80041384 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h9107849c459d3e13E+0x7c>
80041334:	00000000 	nop
80041338:	080104d0 	j	80041340 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h9107849c459d3e13E+0x38>
8004133c:	00000000 	nop
            crate::intrinsics::assume(self < slice.len());
80041340:	8fa50014 	lw	a1,20(sp)
80041344:	8fa40018 	lw	a0,24(sp)
80041348:	0c00e685 	jal	80039a14 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17haefcf4bd787bad28E>
8004134c:	00000000 	nop
80041350:	8fa40018 	lw	a0,24(sp)
80041354:	8fa50014 	lw	a1,20(sp)
            slice.as_ptr().add(self)
80041358:	0c00e6a3 	jal	80039a8c <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h4ba62f43f4e4d3efE>
8004135c:	00000000 	nop
80041360:	8fa1001c 	lw	at,28(sp)
80041364:	afa2002c 	sw	v0,44(sp)
80041368:	afa10030 	sw	at,48(sp)
8004136c:	000108c0 	sll	at,at,0x3
80041370:	00411021 	addu	v0,v0,at
    }
80041374:	8fbf0034 	lw	ra,52(sp)
80041378:	27bd0038 	addiu	sp,sp,56
8004137c:	03e00008 	jr	ra
80041380:	00000000 	nop
            (this: usize = self, len: usize = slice.len()) => this < len
80041384:	8fa50014 	lw	a1,20(sp)
80041388:	8fa40018 	lw	a0,24(sp)
8004138c:	0c00e685 	jal	80039a14 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17haefcf4bd787bad28E>
80041390:	00000000 	nop
80041394:	8fa4001c 	lw	a0,28(sp)
80041398:	00402825 	move	a1,v0
        assert_unsafe_precondition!(
8004139c:	0c011fa8 	jal	80047ea0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1ff0c4beaf99429fE>
800413a0:	00000000 	nop
800413a4:	080104d0 	j	80041340 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h9107849c459d3e13E+0x38>
800413a8:	00000000 	nop

800413ac <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hab2db58a58b371faE>:
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {
800413ac:	27bdffc8 	addiu	sp,sp,-56
800413b0:	afbf0034 	sw	ra,52(sp)
800413b4:	afa60014 	sw	a2,20(sp)
800413b8:	afa50018 	sw	a1,24(sp)
800413bc:	afa4001c 	sw	a0,28(sp)
800413c0:	afa40020 	sw	a0,32(sp)
800413c4:	afa50024 	sw	a1,36(sp)
800413c8:	afa60028 	sw	a2,40(sp)
        assert_unsafe_precondition!(
800413cc:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
800413d0:	00000000 	nop
800413d4:	14400014 	bnez	v0,80041428 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hab2db58a58b371faE+0x7c>
800413d8:	00000000 	nop
800413dc:	080104f9 	j	800413e4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hab2db58a58b371faE+0x38>
800413e0:	00000000 	nop
            crate::intrinsics::assume(self < slice.len());
800413e4:	8fa50014 	lw	a1,20(sp)
800413e8:	8fa40018 	lw	a0,24(sp)
800413ec:	0c00e671 	jal	800399c4 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17h14a33ded5ac369b8E>
800413f0:	00000000 	nop
800413f4:	8fa40018 	lw	a0,24(sp)
800413f8:	8fa50014 	lw	a1,20(sp)
            slice.as_ptr().add(self)
800413fc:	0c00e6aa 	jal	80039aa8 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h6a7aae0b99a35e3eE>
80041400:	00000000 	nop
80041404:	8fa1001c 	lw	at,28(sp)
80041408:	afa2002c 	sw	v0,44(sp)
8004140c:	afa10030 	sw	at,48(sp)
80041410:	00010880 	sll	at,at,0x2
80041414:	00411021 	addu	v0,v0,at
    }
80041418:	8fbf0034 	lw	ra,52(sp)
8004141c:	27bd0038 	addiu	sp,sp,56
80041420:	03e00008 	jr	ra
80041424:	00000000 	nop
            (this: usize = self, len: usize = slice.len()) => this < len
80041428:	8fa50014 	lw	a1,20(sp)
8004142c:	8fa40018 	lw	a0,24(sp)
80041430:	0c00e671 	jal	800399c4 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17h14a33ded5ac369b8E>
80041434:	00000000 	nop
80041438:	8fa4001c 	lw	a0,28(sp)
8004143c:	00402825 	move	a1,v0
        assert_unsafe_precondition!(
80041440:	0c011fa8 	jal	80047ea0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1ff0c4beaf99429fE>
80041444:	00000000 	nop
80041448:	080104f9 	j	800413e4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hab2db58a58b371faE+0x38>
8004144c:	00000000 	nop

80041450 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb3ac7c8e535d317cE>:
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
80041450:	27bdffb8 	addiu	sp,sp,-72
80041454:	afbf0044 	sw	ra,68(sp)
80041458:	afa70018 	sw	a3,24(sp)
8004145c:	afa6001c 	sw	a2,28(sp)
80041460:	afa50020 	sw	a1,32(sp)
80041464:	afa40024 	sw	a0,36(sp)
80041468:	afa40028 	sw	a0,40(sp)
8004146c:	afa5002c 	sw	a1,44(sp)
80041470:	afa60030 	sw	a2,48(sp)
80041474:	afa70034 	sw	a3,52(sp)
        assert_unsafe_precondition!(
80041478:	08010520 	j	80041480 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb3ac7c8e535d317cE+0x30>
8004147c:	00000000 	nop
                len: usize = slice.len()
80041480:	8fa50018 	lw	a1,24(sp)
80041484:	8fa4001c 	lw	a0,28(sp)
80041488:	0c00e68f 	jal	80039a3c <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hb4a60cfd4b05d1f1E>
8004148c:	00000000 	nop
80041490:	8fa40024 	lw	a0,36(sp)
80041494:	8fa50020 	lw	a1,32(sp)
80041498:	00403025 	move	a2,v0
        assert_unsafe_precondition!(
8004149c:	0c011fb8 	jal	80047ee0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17ha89e1374a944983cE>
800414a0:	00000000 	nop
800414a4:	0801052b 	j	800414ac <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb3ac7c8e535d317cE+0x5c>
800414a8:	00000000 	nop
            let new_len = unchecked_sub(self.end, self.start);
800414ac:	8fa20024 	lw	v0,36(sp)
800414b0:	8fa50018 	lw	a1,24(sp)
800414b4:	8fa4001c 	lw	a0,28(sp)
800414b8:	8fa10020 	lw	at,32(sp)
800414bc:	00220823 	subu	at,at,v0
800414c0:	afa10014 	sw	at,20(sp)
800414c4:	afa10038 	sw	at,56(sp)
            ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), new_len)
800414c8:	0c00e6bf 	jal	80039afc <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17hdacca62b30e596aaE>
800414cc:	00000000 	nop
800414d0:	8fa10024 	lw	at,36(sp)
800414d4:	8fa50014 	lw	a1,20(sp)
800414d8:	afa2003c 	sw	v0,60(sp)
800414dc:	afa10040 	sw	at,64(sp)
800414e0:	00412021 	addu	a0,v0,at
800414e4:	0c00e6c6 	jal	80039b18 <_ZN4core3ptr20slice_from_raw_parts17h0ab563afab92ed6fE>
800414e8:	00000000 	nop
    }
800414ec:	8fbf0044 	lw	ra,68(sp)
800414f0:	27bd0048 	addiu	sp,sp,72
800414f4:	03e00008 	jr	ra
800414f8:	00000000 	nop

800414fc <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hd29bb42ba8f63631E>:
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
800414fc:	27bdffb8 	addiu	sp,sp,-72
80041500:	afbf0044 	sw	ra,68(sp)
80041504:	afa70018 	sw	a3,24(sp)
80041508:	afa6001c 	sw	a2,28(sp)
8004150c:	afa50020 	sw	a1,32(sp)
80041510:	afa40024 	sw	a0,36(sp)
80041514:	afa40028 	sw	a0,40(sp)
80041518:	afa5002c 	sw	a1,44(sp)
8004151c:	afa60030 	sw	a2,48(sp)
80041520:	afa70034 	sw	a3,52(sp)
        assert_unsafe_precondition!(
80041524:	0801054b 	j	8004152c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hd29bb42ba8f63631E+0x30>
80041528:	00000000 	nop
                len: usize = slice.len()
8004152c:	8fa50018 	lw	a1,24(sp)
80041530:	8fa4001c 	lw	a0,28(sp)
80041534:	0c00e67b 	jal	800399ec <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17ha931775fbc53b958E>
80041538:	00000000 	nop
8004153c:	8fa40024 	lw	a0,36(sp)
80041540:	8fa50020 	lw	a1,32(sp)
80041544:	00403025 	move	a2,v0
        assert_unsafe_precondition!(
80041548:	0c011fb8 	jal	80047ee0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17ha89e1374a944983cE>
8004154c:	00000000 	nop
80041550:	08010556 	j	80041558 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hd29bb42ba8f63631E+0x5c>
80041554:	00000000 	nop
            let new_len = unchecked_sub(self.end, self.start);
80041558:	8fa20024 	lw	v0,36(sp)
8004155c:	8fa50018 	lw	a1,24(sp)
80041560:	8fa4001c 	lw	a0,28(sp)
80041564:	8fa10020 	lw	at,32(sp)
80041568:	00220823 	subu	at,at,v0
8004156c:	afa10014 	sw	at,20(sp)
80041570:	afa10038 	sw	at,56(sp)
            ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), new_len)
80041574:	0c00e6b1 	jal	80039ac4 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17h72dfbec44e82c8bcE>
80041578:	00000000 	nop
8004157c:	8fa10024 	lw	at,36(sp)
80041580:	8fa50014 	lw	a1,20(sp)
80041584:	afa2003c 	sw	v0,60(sp)
80041588:	afa10040 	sw	at,64(sp)
8004158c:	00412021 	addu	a0,v0,at
80041590:	0c00e6dc 	jal	80039b70 <_ZN4core3ptr20slice_from_raw_parts17h0d7d46db288bcd34E>
80041594:	00000000 	nop
    }
80041598:	8fbf0044 	lw	ra,68(sp)
8004159c:	27bd0048 	addiu	sp,sp,72
800415a0:	03e00008 	jr	ra
800415a4:	00000000 	nop

800415a8 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h36147982303d7f1dE>:
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
800415a8:	27bdffb0 	addiu	sp,sp,-80
800415ac:	afbf004c 	sw	ra,76(sp)
800415b0:	afa70010 	sw	a3,16(sp)
800415b4:	afa60014 	sw	a2,20(sp)
800415b8:	afa50018 	sw	a1,24(sp)
800415bc:	afa4001c 	sw	a0,28(sp)
800415c0:	afa40020 	sw	a0,32(sp)
800415c4:	afa50024 	sw	a1,36(sp)
800415c8:	afa60028 	sw	a2,40(sp)
800415cc:	afa7002c 	sw	a3,44(sp)
        assert_unsafe_precondition!(
800415d0:	08010576 	j	800415d8 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h36147982303d7f1dE+0x30>
800415d4:	00000000 	nop
800415d8:	8fa50010 	lw	a1,16(sp)
800415dc:	8fa40014 	lw	a0,20(sp)
800415e0:	afa4003c 	sw	a0,60(sp)
800415e4:	afa50040 	sw	a1,64(sp)
    /// ```
    #[inline(always)]
    #[unstable(feature = "slice_ptr_len", issue = "71146")]
    #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
    pub const fn len(self) -> usize {
        metadata(self)
800415e8:	0c00e47e 	jal	800391f8 <_ZN4core3ptr8metadata8metadata17he6569c9c74456ea7E>
800415ec:	00000000 	nop
800415f0:	8fa4001c 	lw	a0,28(sp)
800415f4:	8fa50018 	lw	a1,24(sp)
800415f8:	00403025 	move	a2,v0
800415fc:	0c011fd2 	jal	80047f48 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h341e88cd759afc93E>
80041600:	00000000 	nop
80041604:	08010583 	j	8004160c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h36147982303d7f1dE+0x64>
80041608:	00000000 	nop
            let new_len = unchecked_sub(self.end, self.start);
8004160c:	8fa10014 	lw	at,20(sp)
80041610:	8fa2001c 	lw	v0,28(sp)
80041614:	8fa30010 	lw	v1,16(sp)
80041618:	8fa40018 	lw	a0,24(sp)
8004161c:	00822823 	subu	a1,a0,v0
80041620:	afa50030 	sw	a1,48(sp)
80041624:	afa10044 	sw	at,68(sp)
80041628:	afa30048 	sw	v1,72(sp)
8004162c:	afa10034 	sw	at,52(sp)
80041630:	afa20038 	sw	v0,56(sp)
        unsafe { intrinsics::offset(self, count) }
80041634:	00222021 	addu	a0,at,v0
            ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), new_len)
80041638:	0c00e6fd 	jal	80039bf4 <_ZN4core3ptr24slice_from_raw_parts_mut17h67dceb6de50bda88E>
8004163c:	00000000 	nop
    }
80041640:	8fbf004c 	lw	ra,76(sp)
80041644:	27bd0050 	addiu	sp,sp,80
80041648:	03e00008 	jr	ra
8004164c:	00000000 	nop

80041650 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h8761ae5f424cbd6fE>:
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
80041650:	27bdffb0 	addiu	sp,sp,-80
80041654:	afbf004c 	sw	ra,76(sp)
80041658:	afa70010 	sw	a3,16(sp)
8004165c:	afa60014 	sw	a2,20(sp)
80041660:	afa50018 	sw	a1,24(sp)
80041664:	afa4001c 	sw	a0,28(sp)
80041668:	afa40020 	sw	a0,32(sp)
8004166c:	afa50024 	sw	a1,36(sp)
80041670:	afa60028 	sw	a2,40(sp)
80041674:	afa7002c 	sw	a3,44(sp)
        assert_unsafe_precondition!(
80041678:	080105a0 	j	80041680 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h8761ae5f424cbd6fE+0x30>
8004167c:	00000000 	nop
80041680:	8fa50010 	lw	a1,16(sp)
80041684:	8fa40014 	lw	a0,20(sp)
80041688:	afa4003c 	sw	a0,60(sp)
8004168c:	afa50040 	sw	a1,64(sp)
        metadata(self)
80041690:	0c00e451 	jal	80039144 <_ZN4core3ptr8metadata8metadata17h20bb056214aec1c6E>
80041694:	00000000 	nop
80041698:	8fa4001c 	lw	a0,28(sp)
8004169c:	8fa50018 	lw	a1,24(sp)
800416a0:	00403025 	move	a2,v0
800416a4:	0c011fd2 	jal	80047f48 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h341e88cd759afc93E>
800416a8:	00000000 	nop
800416ac:	080105ad 	j	800416b4 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h8761ae5f424cbd6fE+0x64>
800416b0:	00000000 	nop
            let new_len = unchecked_sub(self.end, self.start);
800416b4:	8fa10014 	lw	at,20(sp)
800416b8:	8fa2001c 	lw	v0,28(sp)
800416bc:	8fa30010 	lw	v1,16(sp)
800416c0:	8fa40018 	lw	a0,24(sp)
800416c4:	00822823 	subu	a1,a0,v0
800416c8:	afa50030 	sw	a1,48(sp)
800416cc:	afa10044 	sw	at,68(sp)
800416d0:	afa30048 	sw	v1,72(sp)
800416d4:	afa10034 	sw	at,52(sp)
800416d8:	afa20038 	sw	v0,56(sp)
        unsafe { intrinsics::offset(self, count) }
800416dc:	00222021 	addu	a0,at,v0
            ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), new_len)
800416e0:	0c00e6f2 	jal	80039bc8 <_ZN4core3ptr24slice_from_raw_parts_mut17h141f33a1684c8a60E>
800416e4:	00000000 	nop
    }
800416e8:	8fbf004c 	lw	ra,76(sp)
800416ec:	27bd0050 	addiu	sp,sp,80
800416f0:	03e00008 	jr	ra
800416f4:	00000000 	nop

800416f8 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h40e5eeeb169b8cf2E>:
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
800416f8:	27bdffc8 	addiu	sp,sp,-56
800416fc:	afbf0034 	sw	ra,52(sp)
80041700:	afa70010 	sw	a3,16(sp)
80041704:	afa60014 	sw	a2,20(sp)
80041708:	afa50018 	sw	a1,24(sp)
8004170c:	afa4001c 	sw	a0,28(sp)
80041710:	8fa10048 	lw	at,72(sp)
80041714:	afa10020 	sw	at,32(sp)
80041718:	afa40024 	sw	a0,36(sp)
8004171c:	afa50028 	sw	a1,40(sp)
80041720:	afa6002c 	sw	a2,44(sp)
80041724:	afa70030 	sw	a3,48(sp)
        if self.start > self.end {
80041728:	00a4082b 	sltu	at,a1,a0
8004172c:	1420000a 	bnez	at,80041758 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h40e5eeeb169b8cf2E+0x60>
80041730:	00000000 	nop
80041734:	080105cf 	j	8004173c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h40e5eeeb169b8cf2E+0x44>
80041738:	00000000 	nop
            slice_index_order_fail(self.start, self.end);
        } else if self.end > slice.len() {
8004173c:	8fa10010 	lw	at,16(sp)
80041740:	8fa20018 	lw	v0,24(sp)
80041744:	0022082b 	sltu	at,at,v0
80041748:	14200012 	bnez	at,80041794 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h40e5eeeb169b8cf2E+0x9c>
8004174c:	00000000 	nop
80041750:	080105db 	j	8004176c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h40e5eeeb169b8cf2E+0x74>
80041754:	00000000 	nop
            slice_index_order_fail(self.start, self.end);
80041758:	8fa60020 	lw	a2,32(sp)
8004175c:	8fa50018 	lw	a1,24(sp)
80041760:	8fa4001c 	lw	a0,28(sp)
80041764:	0c0103da 	jal	80040f68 <_ZN4core5slice5index22slice_index_order_fail17h449e604cb79353f4E>
80041768:	00000000 	nop
            slice_end_index_len_fail(self.end, slice.len());
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &mut *self.get_unchecked_mut(slice) }
8004176c:	8fa70010 	lw	a3,16(sp)
80041770:	8fa60014 	lw	a2,20(sp)
80041774:	8fa50018 	lw	a1,24(sp)
80041778:	8fa4001c 	lw	a0,28(sp)
8004177c:	0c010594 	jal	80041650 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h8761ae5f424cbd6fE>
80041780:	00000000 	nop
    }
80041784:	8fbf0034 	lw	ra,52(sp)
80041788:	27bd0038 	addiu	sp,sp,56
8004178c:	03e00008 	jr	ra
80041790:	00000000 	nop
            slice_end_index_len_fail(self.end, slice.len());
80041794:	8fa60020 	lw	a2,32(sp)
80041798:	8fa50010 	lw	a1,16(sp)
8004179c:	8fa40018 	lw	a0,24(sp)
800417a0:	0c0103a8 	jal	80040ea0 <_ZN4core5slice5index24slice_end_index_len_fail17hc8473d7595779981E>
800417a4:	00000000 	nop

800417a8 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he03f9f6b056bb3bdE>:
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
800417a8:	27bdffc8 	addiu	sp,sp,-56
800417ac:	afbf0034 	sw	ra,52(sp)
800417b0:	afa70010 	sw	a3,16(sp)
800417b4:	afa60014 	sw	a2,20(sp)
800417b8:	afa50018 	sw	a1,24(sp)
800417bc:	afa4001c 	sw	a0,28(sp)
800417c0:	8fa10048 	lw	at,72(sp)
800417c4:	afa10020 	sw	at,32(sp)
800417c8:	afa40024 	sw	a0,36(sp)
800417cc:	afa50028 	sw	a1,40(sp)
800417d0:	afa6002c 	sw	a2,44(sp)
800417d4:	afa70030 	sw	a3,48(sp)
        if self.start > self.end {
800417d8:	00a4082b 	sltu	at,a1,a0
800417dc:	1420000a 	bnez	at,80041808 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he03f9f6b056bb3bdE+0x60>
800417e0:	00000000 	nop
800417e4:	080105fb 	j	800417ec <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he03f9f6b056bb3bdE+0x44>
800417e8:	00000000 	nop
        } else if self.end > slice.len() {
800417ec:	8fa10010 	lw	at,16(sp)
800417f0:	8fa20018 	lw	v0,24(sp)
800417f4:	0022082b 	sltu	at,at,v0
800417f8:	14200012 	bnez	at,80041844 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he03f9f6b056bb3bdE+0x9c>
800417fc:	00000000 	nop
80041800:	08010607 	j	8004181c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he03f9f6b056bb3bdE+0x74>
80041804:	00000000 	nop
            slice_index_order_fail(self.start, self.end);
80041808:	8fa60020 	lw	a2,32(sp)
8004180c:	8fa50018 	lw	a1,24(sp)
80041810:	8fa4001c 	lw	a0,28(sp)
80041814:	0c0103da 	jal	80040f68 <_ZN4core5slice5index22slice_index_order_fail17h449e604cb79353f4E>
80041818:	00000000 	nop
        unsafe { &mut *self.get_unchecked_mut(slice) }
8004181c:	8fa70010 	lw	a3,16(sp)
80041820:	8fa60014 	lw	a2,20(sp)
80041824:	8fa50018 	lw	a1,24(sp)
80041828:	8fa4001c 	lw	a0,28(sp)
8004182c:	0c01056a 	jal	800415a8 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h36147982303d7f1dE>
80041830:	00000000 	nop
    }
80041834:	8fbf0034 	lw	ra,52(sp)
80041838:	27bd0038 	addiu	sp,sp,56
8004183c:	03e00008 	jr	ra
80041840:	00000000 	nop
            slice_end_index_len_fail(self.end, slice.len());
80041844:	8fa60020 	lw	a2,32(sp)
80041848:	8fa50010 	lw	a1,16(sp)
8004184c:	8fa40018 	lw	a0,24(sp)
80041850:	0c0103a8 	jal	80040ea0 <_ZN4core5slice5index24slice_end_index_len_fail17hc8473d7595779981E>
80041854:	00000000 	nop

80041858 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h939accfbe24507e3E>:
    fn index(self, slice: &[T]) -> &[T] {
        (0..self.end).index(slice)
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
80041858:	27bdffd0 	addiu	sp,sp,-48
8004185c:	afbf002c 	sw	ra,44(sp)
80041860:	00e00825 	move	at,a3
80041864:	00c03825 	move	a3,a2
80041868:	00a03025 	move	a2,a1
8004186c:	afa40020 	sw	a0,32(sp)
80041870:	afa60024 	sw	a2,36(sp)
80041874:	afa70028 	sw	a3,40(sp)
        (0..self.end).index_mut(slice)
80041878:	afa00018 	sw	zero,24(sp)
8004187c:	afa4001c 	sw	a0,28(sp)
80041880:	8fa40018 	lw	a0,24(sp)
80041884:	8fa5001c 	lw	a1,28(sp)
80041888:	03a01025 	move	v0,sp
8004188c:	ac410010 	sw	at,16(v0)
80041890:	0c0105ea 	jal	800417a8 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he03f9f6b056bb3bdE>
80041894:	00000000 	nop
    }
80041898:	8fbf002c 	lw	ra,44(sp)
8004189c:	27bd0030 	addiu	sp,sp,48
800418a0:	03e00008 	jr	ra
800418a4:	00000000 	nop

800418a8 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hcf5fb57ce5379036E>:
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
800418a8:	27bdffd0 	addiu	sp,sp,-48
800418ac:	afbf002c 	sw	ra,44(sp)
800418b0:	00e00825 	move	at,a3
800418b4:	00c03825 	move	a3,a2
800418b8:	00a03025 	move	a2,a1
800418bc:	afa40020 	sw	a0,32(sp)
800418c0:	afa60024 	sw	a2,36(sp)
800418c4:	afa70028 	sw	a3,40(sp)
        (0..self.end).index_mut(slice)
800418c8:	afa00018 	sw	zero,24(sp)
800418cc:	afa4001c 	sw	a0,28(sp)
800418d0:	8fa40018 	lw	a0,24(sp)
800418d4:	8fa5001c 	lw	a1,28(sp)
800418d8:	03a01025 	move	v0,sp
800418dc:	ac410010 	sw	at,16(v0)
800418e0:	0c0105be 	jal	800416f8 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h40e5eeeb169b8cf2E>
800418e4:	00000000 	nop
    }
800418e8:	8fbf002c 	lw	ra,44(sp)
800418ec:	27bd0030 	addiu	sp,sp,48
800418f0:	03e00008 	jr	ra
800418f4:	00000000 	nop

800418f8 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h784d6a8ede97eed2E>:
    fn get_mut(self, slice: &mut [T]) -> Option<&mut [T]> {
        (self.start..slice.len()).get_mut(slice)
    }

    #[inline]
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
800418f8:	27bdffc8 	addiu	sp,sp,-56
800418fc:	afbf0034 	sw	ra,52(sp)
80041900:	afa6001c 	sw	a2,28(sp)
80041904:	00a00825 	move	at,a1
80041908:	8fa5001c 	lw	a1,28(sp)
8004190c:	afa10018 	sw	at,24(sp)
80041910:	00800825 	move	at,a0
80041914:	8fa40018 	lw	a0,24(sp)
80041918:	afa10014 	sw	at,20(sp)
8004191c:	afa10028 	sw	at,40(sp)
80041920:	afa4002c 	sw	a0,44(sp)
80041924:	afa50030 	sw	a1,48(sp)
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked`.
        unsafe { (self.start..slice.len()).get_unchecked(slice) }
80041928:	0c00e67b 	jal	800399ec <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17ha931775fbc53b958E>
8004192c:	00000000 	nop
80041930:	8fa40014 	lw	a0,20(sp)
80041934:	8fa60018 	lw	a2,24(sp)
80041938:	8fa7001c 	lw	a3,28(sp)
8004193c:	afa40020 	sw	a0,32(sp)
80041940:	afa20024 	sw	v0,36(sp)
80041944:	8fa40020 	lw	a0,32(sp)
80041948:	8fa50024 	lw	a1,36(sp)
8004194c:	0c01053f 	jal	800414fc <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hd29bb42ba8f63631E>
80041950:	00000000 	nop
    }
80041954:	8fbf0034 	lw	ra,52(sp)
80041958:	27bd0038 	addiu	sp,sp,56
8004195c:	03e00008 	jr	ra
80041960:	00000000 	nop

80041964 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hb6159762e9006fafE>:

    #[inline]
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
80041964:	27bdffc0 	addiu	sp,sp,-64
80041968:	afbf003c 	sw	ra,60(sp)
8004196c:	afa6001c 	sw	a2,28(sp)
80041970:	00a00825 	move	at,a1
80041974:	8fa5001c 	lw	a1,28(sp)
80041978:	afa10018 	sw	at,24(sp)
8004197c:	00800825 	move	at,a0
80041980:	8fa40018 	lw	a0,24(sp)
80041984:	afa10014 	sw	at,20(sp)
80041988:	afa10028 	sw	at,40(sp)
8004198c:	afa4002c 	sw	a0,44(sp)
80041990:	afa50030 	sw	a1,48(sp)
80041994:	afa40034 	sw	a0,52(sp)
80041998:	afa50038 	sw	a1,56(sp)
        metadata(self)
8004199c:	0c00e451 	jal	80039144 <_ZN4core3ptr8metadata8metadata17h20bb056214aec1c6E>
800419a0:	00000000 	nop
800419a4:	8fa40014 	lw	a0,20(sp)
800419a8:	8fa60018 	lw	a2,24(sp)
800419ac:	8fa7001c 	lw	a3,28(sp)
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
        unsafe { (self.start..slice.len()).get_unchecked_mut(slice) }
800419b0:	afa40020 	sw	a0,32(sp)
800419b4:	afa20024 	sw	v0,36(sp)
800419b8:	8fa40020 	lw	a0,32(sp)
800419bc:	8fa50024 	lw	a1,36(sp)
800419c0:	0c010594 	jal	80041650 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h8761ae5f424cbd6fE>
800419c4:	00000000 	nop
    }
800419c8:	8fbf003c 	lw	ra,60(sp)
800419cc:	27bd0040 	addiu	sp,sp,64
800419d0:	03e00008 	jr	ra
800419d4:	00000000 	nop

800419d8 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h303723bc382a6e8fE>:

    #[inline]
    fn index(self, slice: &[T]) -> &[T] {
800419d8:	27bdffd0 	addiu	sp,sp,-48
800419dc:	afbf002c 	sw	ra,44(sp)
800419e0:	afa70010 	sw	a3,16(sp)
800419e4:	afa60014 	sw	a2,20(sp)
800419e8:	afa50018 	sw	a1,24(sp)
800419ec:	afa4001c 	sw	a0,28(sp)
800419f0:	afa40020 	sw	a0,32(sp)
800419f4:	afa50024 	sw	a1,36(sp)
800419f8:	afa60028 	sw	a2,40(sp)
        if self.start > slice.len() {
800419fc:	00c4082b 	sltu	at,a2,a0
80041a00:	1420000c 	bnez	at,80041a34 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h303723bc382a6e8fE+0x5c>
80041a04:	00000000 	nop
80041a08:	08010684 	j	80041a10 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h303723bc382a6e8fE+0x38>
80041a0c:	00000000 	nop
            slice_start_index_len_fail(self.start, slice.len());
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &*self.get_unchecked(slice) }
80041a10:	8fa60014 	lw	a2,20(sp)
80041a14:	8fa50018 	lw	a1,24(sp)
80041a18:	8fa4001c 	lw	a0,28(sp)
80041a1c:	0c01063e 	jal	800418f8 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h784d6a8ede97eed2E>
80041a20:	00000000 	nop
    }
80041a24:	8fbf002c 	lw	ra,44(sp)
80041a28:	27bd0030 	addiu	sp,sp,48
80041a2c:	03e00008 	jr	ra
80041a30:	00000000 	nop
            slice_start_index_len_fail(self.start, slice.len());
80041a34:	8fa60010 	lw	a2,16(sp)
80041a38:	8fa50014 	lw	a1,20(sp)
80041a3c:	8fa4001c 	lw	a0,28(sp)
80041a40:	0c010376 	jal	80040dd8 <_ZN4core5slice5index26slice_start_index_len_fail17h7d16ec469bcb47d5E>
80041a44:	00000000 	nop

80041a48 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h634482a4c9969ff8E>:

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
80041a48:	27bdffd0 	addiu	sp,sp,-48
80041a4c:	afbf002c 	sw	ra,44(sp)
80041a50:	afa70010 	sw	a3,16(sp)
80041a54:	afa60014 	sw	a2,20(sp)
80041a58:	afa50018 	sw	a1,24(sp)
80041a5c:	afa4001c 	sw	a0,28(sp)
80041a60:	afa40020 	sw	a0,32(sp)
80041a64:	afa50024 	sw	a1,36(sp)
80041a68:	afa60028 	sw	a2,40(sp)
        if self.start > slice.len() {
80041a6c:	00c4082b 	sltu	at,a2,a0
80041a70:	1420000c 	bnez	at,80041aa4 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h634482a4c9969ff8E+0x5c>
80041a74:	00000000 	nop
80041a78:	080106a0 	j	80041a80 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h634482a4c9969ff8E+0x38>
80041a7c:	00000000 	nop
            slice_start_index_len_fail(self.start, slice.len());
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &mut *self.get_unchecked_mut(slice) }
80041a80:	8fa60014 	lw	a2,20(sp)
80041a84:	8fa50018 	lw	a1,24(sp)
80041a88:	8fa4001c 	lw	a0,28(sp)
80041a8c:	0c010659 	jal	80041964 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hb6159762e9006fafE>
80041a90:	00000000 	nop
    }
80041a94:	8fbf002c 	lw	ra,44(sp)
80041a98:	27bd0030 	addiu	sp,sp,48
80041a9c:	03e00008 	jr	ra
80041aa0:	00000000 	nop
            slice_start_index_len_fail(self.start, slice.len());
80041aa4:	8fa60010 	lw	a2,16(sp)
80041aa8:	8fa50014 	lw	a1,20(sp)
80041aac:	8fa4001c 	lw	a0,28(sp)
80041ab0:	0c010376 	jal	80040dd8 <_ZN4core5slice5index26slice_start_index_len_fail17h7d16ec469bcb47d5E>
80041ab4:	00000000 	nop

80041ab8 <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h0fbdbc71c20a79daE>:
    fn index(self, slice: &[T]) -> &[T] {
        slice
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
80041ab8:	27bdfff0 	addiu	sp,sp,-16
80041abc:	00a01825 	move	v1,a1
80041ac0:	00801025 	move	v0,a0
80041ac4:	afa20008 	sw	v0,8(sp)
80041ac8:	afa3000c 	sw	v1,12(sp)
80041acc:	27bd0010 	addiu	sp,sp,16
        slice
    }
80041ad0:	03e00008 	jr	ra
80041ad4:	00000000 	nop

80041ad8 <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE>:
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
        unsafe { self.into_slice_range().get_unchecked_mut(slice) }
    }

    #[inline]
    fn index(self, slice: &[T]) -> &[T] {
80041ad8:	27bdffb0 	addiu	sp,sp,-80
80041adc:	afbf004c 	sw	ra,76(sp)
80041ae0:	afa70018 	sw	a3,24(sp)
80041ae4:	afa6001c 	sw	a2,28(sp)
80041ae8:	afa50020 	sw	a1,32(sp)
80041aec:	afa40024 	sw	a0,36(sp)
80041af0:	afa50034 	sw	a1,52(sp)
80041af4:	afa60038 	sw	a2,56(sp)
        if *self.end() == usize::MAX {
80041af8:	0c00ea63 	jal	8003a98c <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3end17h57262ba442efad6eE>
80041afc:	00000000 	nop
80041b00:	8c410000 	lw	at,0(v0)
80041b04:	2402ffff 	li	v0,-1
80041b08:	10220037 	beq	at,v0,80041be8 <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE+0x110>
80041b0c:	00000000 	nop
80041b10:	080106c6 	j	80041b18 <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE+0x40>
80041b14:	00000000 	nop
            slice_end_index_overflow_fail();
        }
        self.into_slice_range().index(slice)
80041b18:	8fa10024 	lw	at,36(sp)
80041b1c:	8c220008 	lw	v0,8(at)
80041b20:	afa20030 	sw	v0,48(sp)
80041b24:	8c220004 	lw	v0,4(at)
80041b28:	afa2002c 	sw	v0,44(sp)
80041b2c:	8c210000 	lw	at,0(at)
80041b30:	afa10028 	sw	at,40(sp)
80041b34:	27a40028 	addiu	a0,sp,40
80041b38:	0c00ea69 	jal	8003a9a4 <_ZN4core3ops5range27RangeInclusive$LT$usize$GT$16into_slice_range17he3682bea15c72c80E>
80041b3c:	00000000 	nop
80041b40:	8fa40020 	lw	a0,32(sp)
80041b44:	8fa1001c 	lw	at,28(sp)
80041b48:	00402825 	move	a1,v0
80041b4c:	afa50010 	sw	a1,16(sp)
80041b50:	00602825 	move	a1,v1
80041b54:	afa50014 	sw	a1,20(sp)
80041b58:	afa2003c 	sw	v0,60(sp)
80041b5c:	afa30040 	sw	v1,64(sp)
80041b60:	afa40044 	sw	a0,68(sp)
80041b64:	afa10048 	sw	at,72(sp)
        if self.start > self.end {
80041b68:	0062082b 	sltu	at,v1,v0
80041b6c:	1420000a 	bnez	at,80041b98 <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE+0xc0>
80041b70:	00000000 	nop
80041b74:	080106df 	j	80041b7c <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE+0xa4>
80041b78:	00000000 	nop
        } else if self.end > slice.len() {
80041b7c:	8fa1001c 	lw	at,28(sp)
80041b80:	8fa20014 	lw	v0,20(sp)
80041b84:	0022082b 	sltu	at,at,v0
80041b88:	14200008 	bnez	at,80041bac <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE+0xd4>
80041b8c:	00000000 	nop
80041b90:	080106f0 	j	80041bc0 <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE+0xe8>
80041b94:	00000000 	nop
            slice_index_order_fail(self.start, self.end);
80041b98:	8fa60018 	lw	a2,24(sp)
80041b9c:	8fa50014 	lw	a1,20(sp)
80041ba0:	8fa40010 	lw	a0,16(sp)
80041ba4:	0c0103da 	jal	80040f68 <_ZN4core5slice5index22slice_index_order_fail17h449e604cb79353f4E>
80041ba8:	00000000 	nop
            slice_end_index_len_fail(self.end, slice.len());
80041bac:	8fa60018 	lw	a2,24(sp)
80041bb0:	8fa5001c 	lw	a1,28(sp)
80041bb4:	8fa40014 	lw	a0,20(sp)
80041bb8:	0c0103a8 	jal	80040ea0 <_ZN4core5slice5index24slice_end_index_len_fail17hc8473d7595779981E>
80041bbc:	00000000 	nop
        unsafe { &*self.get_unchecked(slice) }
80041bc0:	8fa7001c 	lw	a3,28(sp)
80041bc4:	8fa60020 	lw	a2,32(sp)
80041bc8:	8fa50014 	lw	a1,20(sp)
80041bcc:	8fa40010 	lw	a0,16(sp)
80041bd0:	0c010514 	jal	80041450 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb3ac7c8e535d317cE>
80041bd4:	00000000 	nop
    }
80041bd8:	8fbf004c 	lw	ra,76(sp)
80041bdc:	27bd0050 	addiu	sp,sp,80
80041be0:	03e00008 	jr	ra
80041be4:	00000000 	nop
            slice_end_index_overflow_fail();
80041be8:	8fa40018 	lw	a0,24(sp)
80041bec:	0c01040c 	jal	80041030 <_ZN4core5slice5index29slice_end_index_overflow_fail17h6abcd4ef789741ecE>
80041bf0:	00000000 	nop

80041bf4 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h506506b1e938b365E>:
    fn into_iter(self) -> Iter<'a, T> {
80041bf4:	27bdffe0 	addiu	sp,sp,-32
80041bf8:	afbf001c 	sw	ra,28(sp)
80041bfc:	afa40014 	sw	a0,20(sp)
80041c00:	afa50018 	sw	a1,24(sp)
        self.iter()
80041c04:	0c01095c 	jal	80042570 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hd871f51187fc7ba3E>
80041c08:	00000000 	nop
    }
80041c0c:	8fbf001c 	lw	ra,28(sp)
80041c10:	27bd0020 	addiu	sp,sp,32
80041c14:	03e00008 	jr	ra
80041c18:	00000000 	nop

80041c1c <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h57eea16c7126e9e6E>:
    fn into_iter(self) -> Iter<'a, T> {
80041c1c:	27bdffe0 	addiu	sp,sp,-32
80041c20:	afbf001c 	sw	ra,28(sp)
80041c24:	afa40014 	sw	a0,20(sp)
80041c28:	afa50018 	sw	a1,24(sp)
        self.iter()
80041c2c:	0c010948 	jal	80042520 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9fbf31f27946410E>
80041c30:	00000000 	nop
    }
80041c34:	8fbf001c 	lw	ra,28(sp)
80041c38:	27bd0020 	addiu	sp,sp,32
80041c3c:	03e00008 	jr	ra
80041c40:	00000000 	nop

80041c44 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17heae6ddbb441c7c91E>:
    fn into_iter(self) -> Iter<'a, T> {
80041c44:	27bdffe0 	addiu	sp,sp,-32
80041c48:	afbf001c 	sw	ra,28(sp)
80041c4c:	afa40014 	sw	a0,20(sp)
80041c50:	afa50018 	sw	a1,24(sp)
        self.iter()
80041c54:	0c010966 	jal	80042598 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hf734dea4d413a514E>
80041c58:	00000000 	nop
    }
80041c5c:	8fbf001c 	lw	ra,28(sp)
80041c60:	27bd0020 	addiu	sp,sp,32
80041c64:	03e00008 	jr	ra
80041c68:	00000000 	nop

80041c6c <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hf62cec3fc988412fE>:
    fn into_iter(self) -> Iter<'a, T> {
80041c6c:	27bdffe0 	addiu	sp,sp,-32
80041c70:	afbf001c 	sw	ra,28(sp)
80041c74:	afa40014 	sw	a0,20(sp)
80041c78:	afa50018 	sw	a1,24(sp)
        self.iter()
80041c7c:	0c010934 	jal	800424d0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h4398d67ccee7f921E>
80041c80:	00000000 	nop
    }
80041c84:	8fbf001c 	lw	ra,28(sp)
80041c88:	27bd0020 	addiu	sp,sp,32
80041c8c:	03e00008 	jr	ra
80041c90:	00000000 	nop

80041c94 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h31de047743410105E>:
    pub(super) fn new(slice: &'a [T]) -> Self {
80041c94:	27bdffb8 	addiu	sp,sp,-72
80041c98:	afbf0044 	sw	ra,68(sp)
80041c9c:	afa50014 	sw	a1,20(sp)
80041ca0:	afa40028 	sw	a0,40(sp)
80041ca4:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
80041ca8:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
80041cac:	0c00e5bb 	jal	800396ec <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hbf2cf18804db8335E>
80041cb0:	00000000 	nop
80041cb4:	00402025 	move	a0,v0
80041cb8:	00602825 	move	a1,v1
80041cbc:	0c00e503 	jal	8003940c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hc3931c08778c30c2E>
80041cc0:	00000000 	nop
80041cc4:	00400825 	move	at,v0
80041cc8:	afa10018 	sw	at,24(sp)
80041ccc:	afa20034 	sw	v0,52(sp)
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80041cd0:	08010736 	j	80041cd8 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h31de047743410105E+0x44>
80041cd4:	00000000 	nop
80041cd8:	8fa10018 	lw	at,24(sp)
80041cdc:	8fa20014 	lw	v0,20(sp)
80041ce0:	afa10038 	sw	at,56(sp)
80041ce4:	afa1003c 	sw	at,60(sp)
80041ce8:	afa20040 	sw	v0,64(sp)
        unsafe { intrinsics::offset(self, count) }
80041cec:	00021080 	sll	v0,v0,0x2
80041cf0:	00220821 	addu	at,at,v0
80041cf4:	afa10024 	sw	at,36(sp)
80041cf8:	08010740 	j	80041d00 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h31de047743410105E+0x6c>
80041cfc:	00000000 	nop
            Self { ptr, end_or_len, _marker: PhantomData }
80041d00:	8fa20018 	lw	v0,24(sp)
80041d04:	8fa10024 	lw	at,36(sp)
80041d08:	afa2001c 	sw	v0,28(sp)
80041d0c:	afa10020 	sw	at,32(sp)
    }
80041d10:	8fa2001c 	lw	v0,28(sp)
80041d14:	8fa30020 	lw	v1,32(sp)
80041d18:	8fbf0044 	lw	ra,68(sp)
80041d1c:	27bd0048 	addiu	sp,sp,72
80041d20:	03e00008 	jr	ra
80041d24:	00000000 	nop

80041d28 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6d32bad37be50033E>:
    pub(super) fn new(slice: &'a [T]) -> Self {
80041d28:	27bdffb8 	addiu	sp,sp,-72
80041d2c:	afbf0044 	sw	ra,68(sp)
80041d30:	afa50014 	sw	a1,20(sp)
80041d34:	afa40028 	sw	a0,40(sp)
80041d38:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
80041d3c:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
80041d40:	0c00e593 	jal	8003964c <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17h521f83d15ca4974aE>
80041d44:	00000000 	nop
80041d48:	00402025 	move	a0,v0
80041d4c:	00602825 	move	a1,v1
80041d50:	0c00e4f9 	jal	800393e4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h71a9277f345cbca1E>
80041d54:	00000000 	nop
80041d58:	00400825 	move	at,v0
80041d5c:	afa10018 	sw	at,24(sp)
80041d60:	afa20034 	sw	v0,52(sp)
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80041d64:	0801075b 	j	80041d6c <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6d32bad37be50033E+0x44>
80041d68:	00000000 	nop
80041d6c:	8fa10018 	lw	at,24(sp)
80041d70:	8fa20014 	lw	v0,20(sp)
80041d74:	afa10038 	sw	at,56(sp)
80041d78:	afa1003c 	sw	at,60(sp)
80041d7c:	afa20040 	sw	v0,64(sp)
80041d80:	00021100 	sll	v0,v0,0x4
80041d84:	00220821 	addu	at,at,v0
80041d88:	afa10024 	sw	at,36(sp)
80041d8c:	08010765 	j	80041d94 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6d32bad37be50033E+0x6c>
80041d90:	00000000 	nop
            Self { ptr, end_or_len, _marker: PhantomData }
80041d94:	8fa20018 	lw	v0,24(sp)
80041d98:	8fa10024 	lw	at,36(sp)
80041d9c:	afa2001c 	sw	v0,28(sp)
80041da0:	afa10020 	sw	at,32(sp)
    }
80041da4:	8fa2001c 	lw	v0,28(sp)
80041da8:	8fa30020 	lw	v1,32(sp)
80041dac:	8fbf0044 	lw	ra,68(sp)
80041db0:	27bd0048 	addiu	sp,sp,72
80041db4:	03e00008 	jr	ra
80041db8:	00000000 	nop

80041dbc <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6df4cda69de864a5E>:
    pub(super) fn new(slice: &'a [T]) -> Self {
80041dbc:	27bdffb8 	addiu	sp,sp,-72
80041dc0:	afbf0044 	sw	ra,68(sp)
80041dc4:	afa50014 	sw	a1,20(sp)
80041dc8:	afa40028 	sw	a0,40(sp)
80041dcc:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
80041dd0:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
80041dd4:	0c00e589 	jal	80039624 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17h4f1d8ecd37555f58E>
80041dd8:	00000000 	nop
80041ddc:	00402025 	move	a0,v0
80041de0:	00602825 	move	a1,v1
80041de4:	0c00e4ef 	jal	800393bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h5fd7ff25d87ee5b2E>
80041de8:	00000000 	nop
80041dec:	00400825 	move	at,v0
80041df0:	afa10018 	sw	at,24(sp)
80041df4:	afa20034 	sw	v0,52(sp)
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80041df8:	08010780 	j	80041e00 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6df4cda69de864a5E+0x44>
80041dfc:	00000000 	nop
80041e00:	8fa10018 	lw	at,24(sp)
80041e04:	8fa20014 	lw	v0,20(sp)
80041e08:	afa10038 	sw	at,56(sp)
80041e0c:	afa1003c 	sw	at,60(sp)
80041e10:	afa20040 	sw	v0,64(sp)
80041e14:	000210c0 	sll	v0,v0,0x3
80041e18:	00220821 	addu	at,at,v0
80041e1c:	afa10024 	sw	at,36(sp)
80041e20:	0801078a 	j	80041e28 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6df4cda69de864a5E+0x6c>
80041e24:	00000000 	nop
            Self { ptr, end_or_len, _marker: PhantomData }
80041e28:	8fa20018 	lw	v0,24(sp)
80041e2c:	8fa10024 	lw	at,36(sp)
80041e30:	afa2001c 	sw	v0,28(sp)
80041e34:	afa10020 	sw	at,32(sp)
    }
80041e38:	8fa2001c 	lw	v0,28(sp)
80041e3c:	8fa30020 	lw	v1,32(sp)
80041e40:	8fbf0044 	lw	ra,68(sp)
80041e44:	27bd0048 	addiu	sp,sp,72
80041e48:	03e00008 	jr	ra
80041e4c:	00000000 	nop

80041e50 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7b080c04c0ba8aaeE>:
    pub(super) fn new(slice: &'a [T]) -> Self {
80041e50:	27bdffb8 	addiu	sp,sp,-72
80041e54:	afbf0044 	sw	ra,68(sp)
80041e58:	afa50014 	sw	a1,20(sp)
80041e5c:	afa40028 	sw	a0,40(sp)
80041e60:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
80041e64:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
80041e68:	0c00e5a7 	jal	8003969c <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hb05997782b961f4dE>
80041e6c:	00000000 	nop
80041e70:	00402025 	move	a0,v0
80041e74:	00602825 	move	a1,v1
80041e78:	0c00e517 	jal	8003945c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hdae9d46e5c3f465bE>
80041e7c:	00000000 	nop
80041e80:	00400825 	move	at,v0
80041e84:	afa10018 	sw	at,24(sp)
80041e88:	afa20034 	sw	v0,52(sp)
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80041e8c:	080107a5 	j	80041e94 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7b080c04c0ba8aaeE+0x44>
80041e90:	00000000 	nop
80041e94:	8fa10018 	lw	at,24(sp)
80041e98:	8fa20014 	lw	v0,20(sp)
80041e9c:	afa10038 	sw	at,56(sp)
80041ea0:	afa1003c 	sw	at,60(sp)
80041ea4:	afa20040 	sw	v0,64(sp)
80041ea8:	00220821 	addu	at,at,v0
80041eac:	afa10024 	sw	at,36(sp)
80041eb0:	080107ae 	j	80041eb8 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7b080c04c0ba8aaeE+0x68>
80041eb4:	00000000 	nop
            Self { ptr, end_or_len, _marker: PhantomData }
80041eb8:	8fa20018 	lw	v0,24(sp)
80041ebc:	8fa10024 	lw	at,36(sp)
80041ec0:	afa2001c 	sw	v0,28(sp)
80041ec4:	afa10020 	sw	at,32(sp)
    }
80041ec8:	8fa2001c 	lw	v0,28(sp)
80041ecc:	8fa30020 	lw	v1,32(sp)
80041ed0:	8fbf0044 	lw	ra,68(sp)
80041ed4:	27bd0048 	addiu	sp,sp,72
80041ed8:	03e00008 	jr	ra
80041edc:	00000000 	nop

80041ee0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hccab3c6803aea82eE>:
    pub(super) fn new(slice: &'a [T]) -> Self {
80041ee0:	27bdffb8 	addiu	sp,sp,-72
80041ee4:	afbf0044 	sw	ra,68(sp)
80041ee8:	afa50014 	sw	a1,20(sp)
80041eec:	afa40028 	sw	a0,40(sp)
80041ef0:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
80041ef4:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
80041ef8:	0c00e5b1 	jal	800396c4 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hbd53c9cbb1de8678E>
80041efc:	00000000 	nop
80041f00:	00402025 	move	a0,v0
80041f04:	00602825 	move	a1,v1
80041f08:	0c00e4e5 	jal	80039394 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h5a7a1ff19e811062E>
80041f0c:	00000000 	nop
80041f10:	00400825 	move	at,v0
80041f14:	afa10018 	sw	at,24(sp)
80041f18:	afa20034 	sw	v0,52(sp)
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80041f1c:	080107c9 	j	80041f24 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hccab3c6803aea82eE+0x44>
80041f20:	00000000 	nop
80041f24:	8fa10018 	lw	at,24(sp)
80041f28:	8fa20014 	lw	v0,20(sp)
80041f2c:	afa10038 	sw	at,56(sp)
80041f30:	afa1003c 	sw	at,60(sp)
80041f34:	afa20040 	sw	v0,64(sp)
80041f38:	00021040 	sll	v0,v0,0x1
80041f3c:	00220821 	addu	at,at,v0
80041f40:	afa10024 	sw	at,36(sp)
80041f44:	080107d3 	j	80041f4c <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hccab3c6803aea82eE+0x6c>
80041f48:	00000000 	nop
            Self { ptr, end_or_len, _marker: PhantomData }
80041f4c:	8fa20018 	lw	v0,24(sp)
80041f50:	8fa10024 	lw	at,36(sp)
80041f54:	afa2001c 	sw	v0,28(sp)
80041f58:	afa10020 	sw	at,32(sp)
    }
80041f5c:	8fa2001c 	lw	v0,28(sp)
80041f60:	8fa30020 	lw	v1,32(sp)
80041f64:	8fbf0044 	lw	ra,68(sp)
80041f68:	27bd0048 	addiu	sp,sp,72
80041f6c:	03e00008 	jr	ra
80041f70:	00000000 	nop

80041f74 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6cfb7ebcdf3ab3eE>:
    pub(super) fn new(slice: &'a [T]) -> Self {
80041f74:	27bdffb8 	addiu	sp,sp,-72
80041f78:	afbf0044 	sw	ra,68(sp)
80041f7c:	afa50014 	sw	a1,20(sp)
80041f80:	afa40028 	sw	a0,40(sp)
80041f84:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
80041f88:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
80041f8c:	0c00e59d 	jal	80039674 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17h70e047877930f053E>
80041f90:	00000000 	nop
80041f94:	00402025 	move	a0,v0
80041f98:	00602825 	move	a1,v1
80041f9c:	0c00e50d 	jal	80039434 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hc62c740b2334bc63E>
80041fa0:	00000000 	nop
80041fa4:	00400825 	move	at,v0
80041fa8:	afa10018 	sw	at,24(sp)
80041fac:	afa20034 	sw	v0,52(sp)
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80041fb0:	080107ee 	j	80041fb8 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6cfb7ebcdf3ab3eE+0x44>
80041fb4:	00000000 	nop
80041fb8:	8fa10018 	lw	at,24(sp)
80041fbc:	8fa20014 	lw	v0,20(sp)
80041fc0:	afa10038 	sw	at,56(sp)
80041fc4:	afa1003c 	sw	at,60(sp)
80041fc8:	afa20040 	sw	v0,64(sp)
80041fcc:	00021140 	sll	v0,v0,0x5
80041fd0:	00220821 	addu	at,at,v0
80041fd4:	afa10024 	sw	at,36(sp)
80041fd8:	080107f8 	j	80041fe0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6cfb7ebcdf3ab3eE+0x6c>
80041fdc:	00000000 	nop
            Self { ptr, end_or_len, _marker: PhantomData }
80041fe0:	8fa20018 	lw	v0,24(sp)
80041fe4:	8fa10024 	lw	at,36(sp)
80041fe8:	afa2001c 	sw	v0,28(sp)
80041fec:	afa10020 	sw	at,32(sp)
    }
80041ff0:	8fa2001c 	lw	v0,28(sp)
80041ff4:	8fa30020 	lw	v1,32(sp)
80041ff8:	8fbf0044 	lw	ra,68(sp)
80041ffc:	27bd0048 	addiu	sp,sp,72
80042000:	03e00008 	jr	ra
80042004:	00000000 	nop

80042008 <_ZN4core5slice4iter13Iter$LT$T$GT$8as_slice17h7c85becc54e8e8beE>:
    /// println!("{:?}", iter.as_slice());
    /// ```
    #[must_use]
    #[stable(feature = "iter_to_slice", since = "1.4.0")]
    #[inline]
    pub fn as_slice(&self) -> &'a [T] {
80042008:	27bdffd0 	addiu	sp,sp,-48
8004200c:	afbf002c 	sw	ra,44(sp)
80042010:	00800825 	move	at,a0
80042014:	afa10014 	sw	at,20(sp)
80042018:	afa1001c 	sw	at,28(sp)
                unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
8004201c:	8c220000 	lw	v0,0(at)
80042020:	afa20010 	sw	v0,16(sp)
80042024:	afa20024 	sw	v0,36(sp)
80042028:	24220004 	addiu	v0,at,4
8004202c:	afa20028 	sw	v0,40(sp)
80042030:	8c240004 	lw	a0,4(at)
80042034:	afa40020 	sw	a0,32(sp)
80042038:	8c250000 	lw	a1,0(at)
8004203c:	0c00e521 	jal	80039484 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$7sub_ptr17h9b9ab3e8577ce557E>
80042040:	00000000 	nop
80042044:	8fa40010 	lw	a0,16(sp)
80042048:	afa20018 	sw	v0,24(sp)
8004204c:	8fa50018 	lw	a1,24(sp)
80042050:	0c01089b 	jal	8004226c <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
80042054:	00000000 	nop
        self.make_slice()
    }
80042058:	8fbf002c 	lw	ra,44(sp)
8004205c:	27bd0030 	addiu	sp,sp,48
80042060:	03e00008 	jr	ra
80042064:	00000000 	nop

80042068 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h329d5012612464b4E>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Send> Send for IterMut<'_, T> {}

impl<'a, T> IterMut<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a mut [T]) -> Self {
80042068:	27bdffb8 	addiu	sp,sp,-72
8004206c:	afbf0044 	sw	ra,68(sp)
80042070:	afa50014 	sw	a1,20(sp)
80042074:	afa40028 	sw	a0,40(sp)
80042078:	afa5002c 	sw	a1,44(sp)
        let len = slice.len();
8004207c:	afa50030 	sw	a1,48(sp)
        let ptr: NonNull<T> = NonNull::from(slice).cast();
80042080:	0c00e57f 	jal	800395fc <_ZN98_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h2afdbdd28cb8f7c2E>
80042084:	00000000 	nop
80042088:	00402025 	move	a0,v0
8004208c:	00602825 	move	a1,v1
80042090:	0c00e4db 	jal	8003936c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h00d2554fa9e87b3eE>
80042094:	00000000 	nop
80042098:	00400825 	move	at,v0
8004209c:	afa10018 	sw	at,24(sp)
800420a0:	afa20034 	sw	v0,52(sp)
        //
        // See the `next_unchecked!` and `is_empty!` macros as well as the
        // `post_inc_start` method for more information.
        unsafe {
            let end_or_len =
                if T::IS_ZST { without_provenance_mut(len) } else { ptr.as_ptr().add(len) };
800420a4:	0801082b 	j	800420ac <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h329d5012612464b4E+0x44>
800420a8:	00000000 	nop
800420ac:	8fa10018 	lw	at,24(sp)
800420b0:	8fa20014 	lw	v0,20(sp)
800420b4:	afa10038 	sw	at,56(sp)
800420b8:	afa1003c 	sw	at,60(sp)
800420bc:	afa20040 	sw	v0,64(sp)
800420c0:	00220821 	addu	at,at,v0
800420c4:	afa10024 	sw	at,36(sp)
800420c8:	08010834 	j	800420d0 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h329d5012612464b4E+0x68>
800420cc:	00000000 	nop

            Self { ptr, end_or_len, _marker: PhantomData }
800420d0:	8fa20018 	lw	v0,24(sp)
800420d4:	8fa10024 	lw	at,36(sp)
800420d8:	afa2001c 	sw	v0,28(sp)
800420dc:	afa10020 	sw	at,32(sp)
        }
    }
800420e0:	8fa2001c 	lw	v0,28(sp)
800420e4:	8fa30020 	lw	v1,32(sp)
800420e8:	8fbf0044 	lw	ra,68(sp)
800420ec:	27bd0048 	addiu	sp,sp,72
800420f0:	03e00008 	jr	ra
800420f4:	00000000 	nop

800420f8 <_ZN4core5slice4iter15Chunks$LT$T$GT$3new17h4c42651d7c0f5105E>:
    chunk_size: usize,
}

impl<'a, T: 'a> Chunks<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a [T], size: usize) -> Self {
800420f8:	27bdfff0 	addiu	sp,sp,-16
800420fc:	00801025 	move	v0,a0
80042100:	afa50004 	sw	a1,4(sp)
80042104:	afa60008 	sw	a2,8(sp)
80042108:	afa7000c 	sw	a3,12(sp)
        Self { v: slice, chunk_size: size }
8004210c:	ac850000 	sw	a1,0(a0)
80042110:	ac860004 	sw	a2,4(a0)
80042114:	ac870008 	sw	a3,8(a0)
80042118:	27bd0010 	addiu	sp,sp,16
    }
8004211c:	03e00008 	jr	ra
80042120:	00000000 	nop

80042124 <_ZN93_$LT$core..slice..iter..Chunks$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47ac45bc3c7539b6E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<'a, T> Iterator for Chunks<'a, T> {
    type Item = &'a [T];

    #[inline]
    fn next(&mut self) -> Option<&'a [T]> {
80042124:	27bdffb0 	addiu	sp,sp,-80
80042128:	afbf004c 	sw	ra,76(sp)
8004212c:	00800825 	move	at,a0
80042130:	afa10018 	sw	at,24(sp)
80042134:	afa10034 	sw	at,52(sp)
        if self.v.is_empty() {
80042138:	8c240000 	lw	a0,0(at)
8004213c:	8c250004 	lw	a1,4(at)
80042140:	0c0108d3 	jal	8004234c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8is_empty17h919103cb7fc266a9E>
80042144:	00000000 	nop
80042148:	14400023 	bnez	v0,800421d8 <_ZN93_$LT$core..slice..iter..Chunks$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47ac45bc3c7539b6E+0xb4>
8004214c:	00000000 	nop
80042150:	08010856 	j	80042158 <_ZN93_$LT$core..slice..iter..Chunks$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47ac45bc3c7539b6E+0x34>
80042154:	00000000 	nop
            None
        } else {
            let chunksz = cmp::min(self.v.len(), self.chunk_size);
80042158:	8fa10018 	lw	at,24(sp)
8004215c:	8c240004 	lw	a0,4(at)
80042160:	8c250008 	lw	a1,8(at)
80042164:	0c00e91c 	jal	8003a470 <_ZN4core3cmp3min17hec05a35ccdb294eaE>
80042168:	00000000 	nop
8004216c:	8fa10018 	lw	at,24(sp)
80042170:	00403825 	move	a3,v0
80042174:	afa70038 	sw	a3,56(sp)
            let (fst, snd) = self.v.split_at(chunksz);
80042178:	8c250000 	lw	a1,0(at)
8004217c:	8c260004 	lw	a2,4(at)
80042180:	3c018108 	lui	at,0x8108
80042184:	2421bfb0 	addiu	at,at,-16464
80042188:	03a01025 	move	v0,sp
8004218c:	ac410010 	sw	at,16(v0)
80042190:	27a40024 	addiu	a0,sp,36
80042194:	0c010a29 	jal	800428a4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17hf27feb3532af0a22E>
80042198:	00000000 	nop
8004219c:	8fa40018 	lw	a0,24(sp)
800421a0:	8fa20024 	lw	v0,36(sp)
800421a4:	8fa10028 	lw	at,40(sp)
800421a8:	afa2003c 	sw	v0,60(sp)
800421ac:	afa10040 	sw	at,64(sp)
800421b0:	8fa5002c 	lw	a1,44(sp)
800421b4:	8fa30030 	lw	v1,48(sp)
800421b8:	afa50044 	sw	a1,68(sp)
800421bc:	afa30048 	sw	v1,72(sp)
            self.v = snd;
800421c0:	ac850000 	sw	a1,0(a0)
800421c4:	ac830004 	sw	v1,4(a0)
            Some(fst)
800421c8:	afa2001c 	sw	v0,28(sp)
800421cc:	afa10020 	sw	at,32(sp)
        if self.v.is_empty() {
800421d0:	08010879 	j	800421e4 <_ZN93_$LT$core..slice..iter..Chunks$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47ac45bc3c7539b6E+0xc0>
800421d4:	00000000 	nop
            None
800421d8:	afa0001c 	sw	zero,28(sp)
        if self.v.is_empty() {
800421dc:	08010879 	j	800421e4 <_ZN93_$LT$core..slice..iter..Chunks$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47ac45bc3c7539b6E+0xc0>
800421e0:	00000000 	nop
        }
    }
800421e4:	8fa2001c 	lw	v0,28(sp)
800421e8:	8fa30020 	lw	v1,32(sp)
800421ec:	8fbf004c 	lw	ra,76(sp)
800421f0:	27bd0050 	addiu	sp,sp,80
800421f4:	03e00008 	jr	ra
800421f8:	00000000 	nop

800421fc <_ZN4core5slice3raw14from_raw_parts17h1495287b2578ef29E>:
pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
800421fc:	27bdffd8 	addiu	sp,sp,-40
80042200:	afbf0024 	sw	ra,36(sp)
80042204:	afa50014 	sw	a1,20(sp)
80042208:	afa40018 	sw	a0,24(sp)
8004220c:	afa4001c 	sw	a0,28(sp)
80042210:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80042214:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80042218:	00000000 	nop
8004221c:	1440000b 	bnez	v0,8004224c <_ZN4core5slice3raw14from_raw_parts17h1495287b2578ef29E+0x50>
80042220:	00000000 	nop
80042224:	0801088b 	j	8004222c <_ZN4core5slice3raw14from_raw_parts17h1495287b2578ef29E+0x30>
80042228:	00000000 	nop
        &*ptr::slice_from_raw_parts(data, len)
8004222c:	8fa50014 	lw	a1,20(sp)
80042230:	8fa40018 	lw	a0,24(sp)
80042234:	0c00e6d1 	jal	80039b44 <_ZN4core3ptr20slice_from_raw_parts17h0c1fd0adcab083c0E>
80042238:	00000000 	nop
}
8004223c:	8fbf0024 	lw	ra,36(sp)
80042240:	27bd0028 	addiu	sp,sp,40
80042244:	03e00008 	jr	ra
80042248:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8004224c:	8fa70014 	lw	a3,20(sp)
80042250:	8fa40018 	lw	a0,24(sp)
80042254:	24060004 	li	a2,4
80042258:	00c02825 	move	a1,a2
8004225c:	0c012262 	jal	80048988 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE>
80042260:	00000000 	nop
80042264:	0801088b 	j	8004222c <_ZN4core5slice3raw14from_raw_parts17h1495287b2578ef29E+0x30>
80042268:	00000000 	nop

8004226c <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>:
pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
8004226c:	27bdffd8 	addiu	sp,sp,-40
80042270:	afbf0024 	sw	ra,36(sp)
80042274:	afa50014 	sw	a1,20(sp)
80042278:	afa40018 	sw	a0,24(sp)
8004227c:	afa4001c 	sw	a0,28(sp)
80042280:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
80042284:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80042288:	00000000 	nop
8004228c:	1440000b 	bnez	v0,800422bc <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E+0x50>
80042290:	00000000 	nop
80042294:	080108a7 	j	8004229c <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E+0x30>
80042298:	00000000 	nop
        &*ptr::slice_from_raw_parts(data, len)
8004229c:	8fa50014 	lw	a1,20(sp)
800422a0:	8fa40018 	lw	a0,24(sp)
800422a4:	0c00e6c6 	jal	80039b18 <_ZN4core3ptr20slice_from_raw_parts17h0ab563afab92ed6fE>
800422a8:	00000000 	nop
}
800422ac:	8fbf0024 	lw	ra,36(sp)
800422b0:	27bd0028 	addiu	sp,sp,40
800422b4:	03e00008 	jr	ra
800422b8:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
800422bc:	8fa70014 	lw	a3,20(sp)
800422c0:	8fa40018 	lw	a0,24(sp)
800422c4:	24060001 	li	a2,1
800422c8:	00c02825 	move	a1,a2
800422cc:	0c012262 	jal	80048988 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE>
800422d0:	00000000 	nop
800422d4:	080108a7 	j	8004229c <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E+0x30>
800422d8:	00000000 	nop

800422dc <_ZN4core5slice3raw14from_raw_parts17hbd196beca63c9654E>:
pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
800422dc:	27bdffd8 	addiu	sp,sp,-40
800422e0:	afbf0024 	sw	ra,36(sp)
800422e4:	afa50014 	sw	a1,20(sp)
800422e8:	afa40018 	sw	a0,24(sp)
800422ec:	afa4001c 	sw	a0,28(sp)
800422f0:	afa50020 	sw	a1,32(sp)
        ub_checks::assert_unsafe_precondition!(
800422f4:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
800422f8:	00000000 	nop
800422fc:	1440000b 	bnez	v0,8004232c <_ZN4core5slice3raw14from_raw_parts17hbd196beca63c9654E+0x50>
80042300:	00000000 	nop
80042304:	080108c3 	j	8004230c <_ZN4core5slice3raw14from_raw_parts17hbd196beca63c9654E+0x30>
80042308:	00000000 	nop
        &*ptr::slice_from_raw_parts(data, len)
8004230c:	8fa50014 	lw	a1,20(sp)
80042310:	8fa40018 	lw	a0,24(sp)
80042314:	0c00e6e7 	jal	80039b9c <_ZN4core3ptr20slice_from_raw_parts17hfda2f490e7fcec8bE>
80042318:	00000000 	nop
}
8004231c:	8fbf0024 	lw	ra,36(sp)
80042320:	27bd0028 	addiu	sp,sp,40
80042324:	03e00008 	jr	ra
80042328:	00000000 	nop
        ub_checks::assert_unsafe_precondition!(
8004232c:	8fa70014 	lw	a3,20(sp)
80042330:	8fa40018 	lw	a0,24(sp)
80042334:	24050010 	li	a1,16
80042338:	24060004 	li	a2,4
8004233c:	0c012262 	jal	80048988 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE>
80042340:	00000000 	nop
80042344:	080108c3 	j	8004230c <_ZN4core5slice3raw14from_raw_parts17hbd196beca63c9654E+0x30>
80042348:	00000000 	nop

8004234c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8is_empty17h919103cb7fc266a9E>:
    pub const fn is_empty(&self) -> bool {
8004234c:	27bdfff8 	addiu	sp,sp,-8
80042350:	afa40000 	sw	a0,0(sp)
80042354:	afa50004 	sw	a1,4(sp)
        self.len() == 0
80042358:	2ca20001 	sltiu	v0,a1,1
8004235c:	27bd0008 	addiu	sp,sp,8
    }
80042360:	03e00008 	jr	ra
80042364:	00000000 	nop

80042368 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h0e1c4c7e4b7b26b1E>:
    pub fn get<I>(&self, index: I) -> Option<&I::Output>
80042368:	27bdffd8 	addiu	sp,sp,-40
8004236c:	afbf0024 	sw	ra,36(sp)
80042370:	afa60014 	sw	a2,20(sp)
80042374:	00a03025 	move	a2,a1
80042378:	00802825 	move	a1,a0
8004237c:	8fa40014 	lw	a0,20(sp)
80042380:	afa50018 	sw	a1,24(sp)
80042384:	afa6001c 	sw	a2,28(sp)
80042388:	afa40020 	sw	a0,32(sp)
        index.get(self)
8004238c:	0c01041a 	jal	80041068 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h14bc8037b64de363E>
80042390:	00000000 	nop
    }
80042394:	8fbf0024 	lw	ra,36(sp)
80042398:	27bd0028 	addiu	sp,sp,40
8004239c:	03e00008 	jr	ra
800423a0:	00000000 	nop

800423a4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h437f19a6e4d4a724E>:
    pub fn get<I>(&self, index: I) -> Option<&I::Output>
800423a4:	27bdffd8 	addiu	sp,sp,-40
800423a8:	afbf0024 	sw	ra,36(sp)
800423ac:	afa60014 	sw	a2,20(sp)
800423b0:	00a03025 	move	a2,a1
800423b4:	00802825 	move	a1,a0
800423b8:	8fa40014 	lw	a0,20(sp)
800423bc:	afa50018 	sw	a1,24(sp)
800423c0:	afa6001c 	sw	a2,28(sp)
800423c4:	afa40020 	sw	a0,32(sp)
        index.get(self)
800423c8:	0c010454 	jal	80041150 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17he78150f80a7d8cf9E>
800423cc:	00000000 	nop
    }
800423d0:	8fbf0024 	lw	ra,36(sp)
800423d4:	27bd0028 	addiu	sp,sp,40
800423d8:	03e00008 	jr	ra
800423dc:	00000000 	nop

800423e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17he7a74869bcb725e5E>:
    pub fn get<I>(&self, index: I) -> Option<&I::Output>
800423e0:	27bdffd8 	addiu	sp,sp,-40
800423e4:	afbf0024 	sw	ra,36(sp)
800423e8:	afa60014 	sw	a2,20(sp)
800423ec:	00a03025 	move	a2,a1
800423f0:	00802825 	move	a1,a0
800423f4:	8fa40014 	lw	a0,20(sp)
800423f8:	afa50018 	sw	a1,24(sp)
800423fc:	afa6001c 	sw	a2,28(sp)
80042400:	afa40020 	sw	a0,32(sp)
        index.get(self)
80042404:	0c010437 	jal	800410dc <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h3178bb15dbadb5bcE>
80042408:	00000000 	nop
    }
8004240c:	8fbf0024 	lw	ra,36(sp)
80042410:	27bd0028 	addiu	sp,sp,40
80042414:	03e00008 	jr	ra
80042418:	00000000 	nop

8004241c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17h2440dac3f0c7bee0E>:
    pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output
8004241c:	27bdffd8 	addiu	sp,sp,-40
80042420:	afbf0024 	sw	ra,36(sp)
80042424:	afa60014 	sw	a2,20(sp)
80042428:	00a03025 	move	a2,a1
8004242c:	00802825 	move	a1,a0
80042430:	8fa40014 	lw	a0,20(sp)
80042434:	afa50018 	sw	a1,24(sp)
80042438:	afa6001c 	sw	a2,28(sp)
8004243c:	afa40020 	sw	a0,32(sp)
        unsafe { &*index.get_unchecked(self) }
80042440:	0c010499 	jal	80041264 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h2b3719edff8e275cE>
80042444:	00000000 	nop
    }
80042448:	8fbf0024 	lw	ra,36(sp)
8004244c:	27bd0028 	addiu	sp,sp,40
80042450:	03e00008 	jr	ra
80042454:	00000000 	nop

80042458 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17h6d5ffdb6f0126765E>:
    pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output
80042458:	27bdffd8 	addiu	sp,sp,-40
8004245c:	afbf0024 	sw	ra,36(sp)
80042460:	afa60014 	sw	a2,20(sp)
80042464:	00a03025 	move	a2,a1
80042468:	00802825 	move	a1,a0
8004246c:	8fa40014 	lw	a0,20(sp)
80042470:	afa50018 	sw	a1,24(sp)
80042474:	afa6001c 	sw	a2,28(sp)
80042478:	afa40020 	sw	a0,32(sp)
        unsafe { &*index.get_unchecked(self) }
8004247c:	0c0104c2 	jal	80041308 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h9107849c459d3e13E>
80042480:	00000000 	nop
    }
80042484:	8fbf0024 	lw	ra,36(sp)
80042488:	27bd0028 	addiu	sp,sp,40
8004248c:	03e00008 	jr	ra
80042490:	00000000 	nop

80042494 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17he56cda5e0b659a59E>:
    pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output
80042494:	27bdffd8 	addiu	sp,sp,-40
80042498:	afbf0024 	sw	ra,36(sp)
8004249c:	afa60014 	sw	a2,20(sp)
800424a0:	00a03025 	move	a2,a1
800424a4:	00802825 	move	a1,a0
800424a8:	8fa40014 	lw	a0,20(sp)
800424ac:	afa50018 	sw	a1,24(sp)
800424b0:	afa6001c 	sw	a2,28(sp)
800424b4:	afa40020 	sw	a0,32(sp)
        unsafe { &*index.get_unchecked(self) }
800424b8:	0c0104eb 	jal	800413ac <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hab2db58a58b371faE>
800424bc:	00000000 	nop
    }
800424c0:	8fbf0024 	lw	ra,36(sp)
800424c4:	27bd0028 	addiu	sp,sp,40
800424c8:	03e00008 	jr	ra
800424cc:	00000000 	nop

800424d0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h4398d67ccee7f921E>:
    pub fn iter(&self) -> Iter<'_, T> {
800424d0:	27bdffe0 	addiu	sp,sp,-32
800424d4:	afbf001c 	sw	ra,28(sp)
800424d8:	afa40014 	sw	a0,20(sp)
800424dc:	afa50018 	sw	a1,24(sp)
        Iter::new(self)
800424e0:	0c0107b8 	jal	80041ee0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hccab3c6803aea82eE>
800424e4:	00000000 	nop
    }
800424e8:	8fbf001c 	lw	ra,28(sp)
800424ec:	27bd0020 	addiu	sp,sp,32
800424f0:	03e00008 	jr	ra
800424f4:	00000000 	nop

800424f8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h5bb4b3109a0ec868E>:
    pub fn iter(&self) -> Iter<'_, T> {
800424f8:	27bdffe0 	addiu	sp,sp,-32
800424fc:	afbf001c 	sw	ra,28(sp)
80042500:	afa40014 	sw	a0,20(sp)
80042504:	afa50018 	sw	a1,24(sp)
        Iter::new(self)
80042508:	0c0107dd 	jal	80041f74 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6cfb7ebcdf3ab3eE>
8004250c:	00000000 	nop
    }
80042510:	8fbf001c 	lw	ra,28(sp)
80042514:	27bd0020 	addiu	sp,sp,32
80042518:	03e00008 	jr	ra
8004251c:	00000000 	nop

80042520 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9fbf31f27946410E>:
    pub fn iter(&self) -> Iter<'_, T> {
80042520:	27bdffe0 	addiu	sp,sp,-32
80042524:	afbf001c 	sw	ra,28(sp)
80042528:	afa40014 	sw	a0,20(sp)
8004252c:	afa50018 	sw	a1,24(sp)
        Iter::new(self)
80042530:	0c010794 	jal	80041e50 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7b080c04c0ba8aaeE>
80042534:	00000000 	nop
    }
80042538:	8fbf001c 	lw	ra,28(sp)
8004253c:	27bd0020 	addiu	sp,sp,32
80042540:	03e00008 	jr	ra
80042544:	00000000 	nop

80042548 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hc220d605b982b825E>:
    pub fn iter(&self) -> Iter<'_, T> {
80042548:	27bdffe0 	addiu	sp,sp,-32
8004254c:	afbf001c 	sw	ra,28(sp)
80042550:	afa40014 	sw	a0,20(sp)
80042554:	afa50018 	sw	a1,24(sp)
        Iter::new(self)
80042558:	0c01076f 	jal	80041dbc <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6df4cda69de864a5E>
8004255c:	00000000 	nop
    }
80042560:	8fbf001c 	lw	ra,28(sp)
80042564:	27bd0020 	addiu	sp,sp,32
80042568:	03e00008 	jr	ra
8004256c:	00000000 	nop

80042570 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hd871f51187fc7ba3E>:
    pub fn iter(&self) -> Iter<'_, T> {
80042570:	27bdffe0 	addiu	sp,sp,-32
80042574:	afbf001c 	sw	ra,28(sp)
80042578:	afa40014 	sw	a0,20(sp)
8004257c:	afa50018 	sw	a1,24(sp)
        Iter::new(self)
80042580:	0c01074a 	jal	80041d28 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h6d32bad37be50033E>
80042584:	00000000 	nop
    }
80042588:	8fbf001c 	lw	ra,28(sp)
8004258c:	27bd0020 	addiu	sp,sp,32
80042590:	03e00008 	jr	ra
80042594:	00000000 	nop

80042598 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hf734dea4d413a514E>:
    pub fn iter(&self) -> Iter<'_, T> {
80042598:	27bdffe0 	addiu	sp,sp,-32
8004259c:	afbf001c 	sw	ra,28(sp)
800425a0:	afa40014 	sw	a0,20(sp)
800425a4:	afa50018 	sw	a1,24(sp)
        Iter::new(self)
800425a8:	0c010725 	jal	80041c94 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h31de047743410105E>
800425ac:	00000000 	nop
    }
800425b0:	8fbf001c 	lw	ra,28(sp)
800425b4:	27bd0020 	addiu	sp,sp,32
800425b8:	03e00008 	jr	ra
800425bc:	00000000 	nop

800425c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h92cf6f326b77c8a9E>:
    /// }
    /// assert_eq!(x, &[3, 4, 6]);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn iter_mut(&mut self) -> IterMut<'_, T> {
800425c0:	27bdffe0 	addiu	sp,sp,-32
800425c4:	afbf001c 	sw	ra,28(sp)
800425c8:	afa40014 	sw	a0,20(sp)
800425cc:	afa50018 	sw	a1,24(sp)
        IterMut::new(self)
800425d0:	0c01081a 	jal	80042068 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h329d5012612464b4E>
800425d4:	00000000 	nop
    }
800425d8:	8fbf001c 	lw	ra,28(sp)
800425dc:	27bd0020 	addiu	sp,sp,32
800425e0:	03e00008 	jr	ra
800425e4:	00000000 	nop

800425e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6chunks17h77ab5ed9164bef81E>:
    /// [`chunks_exact`]: slice::chunks_exact
    /// [`rchunks`]: slice::rchunks
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    #[track_caller]
    pub fn chunks(&self, chunk_size: usize) -> Chunks<'_, T> {
800425e8:	27bdffa8 	addiu	sp,sp,-88
800425ec:	afbf0054 	sw	ra,84(sp)
800425f0:	afa70018 	sw	a3,24(sp)
800425f4:	afa6001c 	sw	a2,28(sp)
800425f8:	afa50020 	sw	a1,32(sp)
800425fc:	afa40024 	sw	a0,36(sp)
80042600:	afa40028 	sw	a0,40(sp)
80042604:	8fa10068 	lw	at,104(sp)
80042608:	afa1002c 	sw	at,44(sp)
8004260c:	afa50048 	sw	a1,72(sp)
80042610:	afa6004c 	sw	a2,76(sp)
80042614:	afa70050 	sw	a3,80(sp)
        assert!(chunk_size != 0, "chunk size must be non-zero");
80042618:	14e0000e 	bnez	a3,80042654 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6chunks17h77ab5ed9164bef81E+0x6c>
8004261c:	00000000 	nop
80042620:	0801098a 	j	80042628 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6chunks17h77ab5ed9164bef81E+0x40>
80042624:	00000000 	nop
80042628:	3c018108 	lui	at,0x8108
8004262c:	2425bfdc 	addiu	a1,at,-16420
80042630:	27a40030 	addiu	a0,sp,48
80042634:	afa40014 	sw	a0,20(sp)
80042638:	24060001 	li	a2,1
8004263c:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80042640:	00000000 	nop
80042644:	8fa40014 	lw	a0,20(sp)
80042648:	8fa5002c 	lw	a1,44(sp)
8004264c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80042650:	00000000 	nop
        Chunks::new(self, chunk_size)
80042654:	8fa70018 	lw	a3,24(sp)
80042658:	8fa6001c 	lw	a2,28(sp)
8004265c:	8fa50020 	lw	a1,32(sp)
80042660:	8fa40024 	lw	a0,36(sp)
80042664:	0c01083e 	jal	800420f8 <_ZN4core5slice4iter15Chunks$LT$T$GT$3new17h4c42651d7c0f5105E>
80042668:	00000000 	nop
8004266c:	8fa20028 	lw	v0,40(sp)
    }
80042670:	8fbf0054 	lw	ra,84(sp)
80042674:	27bd0058 	addiu	sp,sp,88
80042678:	03e00008 	jr	ra
8004267c:	00000000 	nop

80042680 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked17h984c86d798c757f7E>:
    /// // let chunks: &[[_; 0]] = slice.as_chunks_unchecked() // Zero-length chunks are never allowed
    /// ```
    #[unstable(feature = "slice_as_chunks", issue = "74985")]
    #[inline]
    #[must_use]
    pub const unsafe fn as_chunks_unchecked<const N: usize>(&self) -> &[[T; N]] {
80042680:	27bdffc8 	addiu	sp,sp,-56
80042684:	afbf0034 	sw	ra,52(sp)
80042688:	afa50010 	sw	a1,16(sp)
8004268c:	afa40014 	sw	a0,20(sp)
80042690:	afa40018 	sw	a0,24(sp)
80042694:	afa5001c 	sw	a1,28(sp)
        assert_unsafe_precondition!(
80042698:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
8004269c:	00000000 	nop
800426a0:	14400012 	bnez	v0,800426ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked17h984c86d798c757f7E+0x6c>
800426a4:	00000000 	nop
800426a8:	080109ac 	j	800426b0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked17h984c86d798c757f7E+0x30>
800426ac:	00000000 	nop
            check_language_ub,
            "slice::as_chunks_unchecked requires `N != 0` and the slice to split exactly into `N`-element chunks",
            (n: usize = N, len: usize = self.len()) => n != 0 && len % n == 0,
        );
        // SAFETY: Caller must guarantee that `N` is nonzero and exactly divides the slice length
        let new_len = unsafe { exact_div(self.len(), N) };
800426b0:	8fa40014 	lw	a0,20(sp)
800426b4:	8fa10010 	lw	at,16(sp)
800426b8:	00011082 	srl	v0,at,0x2
800426bc:	afa20020 	sw	v0,32(sp)
800426c0:	8fa50020 	lw	a1,32(sp)
800426c4:	afa50024 	sw	a1,36(sp)
800426c8:	afa4002c 	sw	a0,44(sp)
800426cc:	afa10030 	sw	at,48(sp)
800426d0:	afa40028 	sw	a0,40(sp)
        // SAFETY: We cast a slice of `new_len * N` elements into
        // a slice of `new_len` many `N` elements chunks.
        unsafe { from_raw_parts(self.as_ptr().cast(), new_len) }
800426d4:	0c0108b7 	jal	800422dc <_ZN4core5slice3raw14from_raw_parts17hbd196beca63c9654E>
800426d8:	00000000 	nop
    }
800426dc:	8fbf0034 	lw	ra,52(sp)
800426e0:	27bd0038 	addiu	sp,sp,56
800426e4:	03e00008 	jr	ra
800426e8:	00000000 	nop
        assert_unsafe_precondition!(
800426ec:	8fa50010 	lw	a1,16(sp)
800426f0:	24040004 	li	a0,4
800426f4:	0c012284 	jal	80048a10 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE>
800426f8:	00000000 	nop
800426fc:	080109ac 	j	800426b0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked17h984c86d798c757f7E+0x30>
80042700:	00000000 	nop

80042704 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$9as_chunks17h8beb15ae9ec351f9E>:
    /// ```
    #[unstable(feature = "slice_as_chunks", issue = "74985")]
    #[inline]
    #[track_caller]
    #[must_use]
    pub const fn as_chunks<const N: usize>(&self) -> (&[[T; N]], &[T]) {
80042704:	27bdff78 	addiu	sp,sp,-136
80042708:	afbf0084 	sw	ra,132(sp)
8004270c:	afa70024 	sw	a3,36(sp)
80042710:	afa60028 	sw	a2,40(sp)
80042714:	afa5002c 	sw	a1,44(sp)
80042718:	afa40030 	sw	a0,48(sp)
8004271c:	afa40034 	sw	a0,52(sp)
80042720:	afa50060 	sw	a1,96(sp)
80042724:	afa60064 	sw	a2,100(sp)
        assert!(N != 0, "chunk size must be non-zero");
80042728:	080109cc 	j	80042730 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$9as_chunks17h8beb15ae9ec351f9E+0x2c>
8004272c:	00000000 	nop
        let len = self.len() / N;
80042730:	8fa10028 	lw	at,40(sp)
80042734:	00011082 	srl	v0,at,0x2
80042738:	afa20068 	sw	v0,104(sp)
8004273c:	2402fffc 	li	v0,-4
        let (multiple_of_n, remainder) = self.split_at(len * N);
80042740:	00220824 	and	at,at,v0
80042744:	afa10020 	sw	at,32(sp)
80042748:	24010000 	li	at,0
8004274c:	14000028 	bnez	zero,800427f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$9as_chunks17h8beb15ae9ec351f9E+0xec>
80042750:	00000000 	nop
80042754:	080109d7 	j	8004275c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$9as_chunks17h8beb15ae9ec351f9E+0x58>
80042758:	00000000 	nop
8004275c:	8fa70020 	lw	a3,32(sp)
80042760:	8fa60028 	lw	a2,40(sp)
80042764:	8fa5002c 	lw	a1,44(sp)
80042768:	8fa10024 	lw	at,36(sp)
8004276c:	03a01025 	move	v0,sp
80042770:	ac410010 	sw	at,16(v0)
80042774:	27a40050 	addiu	a0,sp,80
80042778:	0c010a29 	jal	800428a4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17hf27feb3532af0a22E>
8004277c:	00000000 	nop
80042780:	8fa40050 	lw	a0,80(sp)
80042784:	8fa50054 	lw	a1,84(sp)
80042788:	afa4006c 	sw	a0,108(sp)
8004278c:	afa50070 	sw	a1,112(sp)
80042790:	8fa20058 	lw	v0,88(sp)
80042794:	afa20018 	sw	v0,24(sp)
80042798:	8fa1005c 	lw	at,92(sp)
8004279c:	afa1001c 	sw	at,28(sp)
800427a0:	afa20074 	sw	v0,116(sp)
800427a4:	afa10078 	sw	at,120(sp)
        // SAFETY: We already panicked for zero, and ensured by construction
        // that the length of the subslice is a multiple of N.
        let array_slice = unsafe { multiple_of_n.as_chunks_unchecked() };
800427a8:	0c0109a0 	jal	80042680 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked17h984c86d798c757f7E>
800427ac:	00000000 	nop
800427b0:	8fa40018 	lw	a0,24(sp)
800427b4:	8fa1001c 	lw	at,28(sp)
800427b8:	00403025 	move	a2,v0
800427bc:	8fa20034 	lw	v0,52(sp)
800427c0:	00602825 	move	a1,v1
800427c4:	8fa30030 	lw	v1,48(sp)
800427c8:	afa6007c 	sw	a2,124(sp)
800427cc:	afa50080 	sw	a1,128(sp)
        (array_slice, remainder)
800427d0:	ac660000 	sw	a2,0(v1)
800427d4:	ac650004 	sw	a1,4(v1)
800427d8:	ac640008 	sw	a0,8(v1)
800427dc:	ac61000c 	sw	at,12(v1)
    }
800427e0:	8fbf0084 	lw	ra,132(sp)
800427e4:	27bd0088 	addiu	sp,sp,136
800427e8:	03e00008 	jr	ra
800427ec:	00000000 	nop
        let (multiple_of_n, remainder) = self.split_at(len * N);
800427f0:	8fa40024 	lw	a0,36(sp)
800427f4:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
800427f8:	00000000 	nop

800427fc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17h7f0dba53eee5d866E>:
    #[rustc_const_stable(feature = "const_slice_split_at_not_mut", since = "1.71.0")]
    #[rustc_allow_const_fn_unstable(split_at_checked)]
    #[inline]
    #[track_caller]
    #[must_use]
    pub const fn split_at(&self, mid: usize) -> (&[T], &[T]) {
800427fc:	27bdffa8 	addiu	sp,sp,-88
80042800:	afbf0054 	sw	ra,84(sp)
80042804:	afa40014 	sw	a0,20(sp)
80042808:	afa40018 	sw	a0,24(sp)
8004280c:	8fa10068 	lw	at,104(sp)
80042810:	afa1001c 	sw	at,28(sp)
80042814:	afa50048 	sw	a1,72(sp)
80042818:	afa6004c 	sw	a2,76(sp)
8004281c:	afa70050 	sw	a3,80(sp)
80042820:	27a40020 	addiu	a0,sp,32
        match self.split_at_checked(mid) {
80042824:	0c010aff 	jal	80042bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hb8915365f7d2841fE>
80042828:	00000000 	nop
8004282c:	8fa10020 	lw	at,32(sp)
80042830:	1420000e 	bnez	at,8004286c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17h7f0dba53eee5d866E+0x70>
80042834:	00000000 	nop
80042838:	08010a10 	j	80042840 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17h7f0dba53eee5d866E+0x44>
8004283c:	00000000 	nop
            Some(pair) => pair,
            None => panic!("mid > len"),
80042840:	3c018108 	lui	at,0x8108
80042844:	2425bff0 	addiu	a1,at,-16400
80042848:	27a40030 	addiu	a0,sp,48
8004284c:	afa40010 	sw	a0,16(sp)
80042850:	24060001 	li	a2,1
80042854:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80042858:	00000000 	nop
8004285c:	8fa40010 	lw	a0,16(sp)
80042860:	8fa5001c 	lw	a1,28(sp)
80042864:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80042868:	00000000 	nop
            Some(pair) => pair,
8004286c:	8fa20018 	lw	v0,24(sp)
80042870:	8fa30014 	lw	v1,20(sp)
80042874:	8fa1002c 	lw	at,44(sp)
80042878:	ac61000c 	sw	at,12(v1)
8004287c:	8fa10028 	lw	at,40(sp)
80042880:	ac610008 	sw	at,8(v1)
80042884:	8fa10024 	lw	at,36(sp)
80042888:	ac610004 	sw	at,4(v1)
8004288c:	8fa10020 	lw	at,32(sp)
80042890:	ac610000 	sw	at,0(v1)
        }
    }
80042894:	8fbf0054 	lw	ra,84(sp)
80042898:	27bd0058 	addiu	sp,sp,88
8004289c:	03e00008 	jr	ra
800428a0:	00000000 	nop

800428a4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17hf27feb3532af0a22E>:
    pub const fn split_at(&self, mid: usize) -> (&[T], &[T]) {
800428a4:	27bdffa8 	addiu	sp,sp,-88
800428a8:	afbf0054 	sw	ra,84(sp)
800428ac:	afa40014 	sw	a0,20(sp)
800428b0:	afa40018 	sw	a0,24(sp)
800428b4:	8fa10068 	lw	at,104(sp)
800428b8:	afa1001c 	sw	at,28(sp)
800428bc:	afa50048 	sw	a1,72(sp)
800428c0:	afa6004c 	sw	a2,76(sp)
800428c4:	afa70050 	sw	a3,80(sp)
800428c8:	27a40020 	addiu	a0,sp,32
        match self.split_at_checked(mid) {
800428cc:	0c010ad6 	jal	80042b58 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hafb4fe7603d89e28E>
800428d0:	00000000 	nop
800428d4:	8fa10020 	lw	at,32(sp)
800428d8:	1420000e 	bnez	at,80042914 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17hf27feb3532af0a22E+0x70>
800428dc:	00000000 	nop
800428e0:	08010a3a 	j	800428e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17hf27feb3532af0a22E+0x44>
800428e4:	00000000 	nop
            None => panic!("mid > len"),
800428e8:	3c018108 	lui	at,0x8108
800428ec:	2425bff0 	addiu	a1,at,-16400
800428f0:	27a40030 	addiu	a0,sp,48
800428f4:	afa40010 	sw	a0,16(sp)
800428f8:	24060001 	li	a2,1
800428fc:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80042900:	00000000 	nop
80042904:	8fa40010 	lw	a0,16(sp)
80042908:	8fa5001c 	lw	a1,28(sp)
8004290c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80042910:	00000000 	nop
            Some(pair) => pair,
80042914:	8fa20018 	lw	v0,24(sp)
80042918:	8fa30014 	lw	v1,20(sp)
8004291c:	8fa1002c 	lw	at,44(sp)
80042920:	ac61000c 	sw	at,12(v1)
80042924:	8fa10028 	lw	at,40(sp)
80042928:	ac610008 	sw	at,8(v1)
8004292c:	8fa10024 	lw	at,36(sp)
80042930:	ac610004 	sw	at,4(v1)
80042934:	8fa10020 	lw	at,32(sp)
80042938:	ac610000 	sw	at,0(v1)
    }
8004293c:	8fbf0054 	lw	ra,84(sp)
80042940:	27bd0058 	addiu	sp,sp,88
80042944:	03e00008 	jr	ra
80042948:	00000000 	nop

8004294c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17h7600a822702feb5eE>:
    /// ```
    #[stable(feature = "slice_split_at_unchecked", since = "CURRENT_RUSTC_VERSION")]
    #[rustc_const_stable(feature = "const_slice_split_at_unchecked", since = "1.77.0")]
    #[inline]
    #[must_use]
    pub const unsafe fn split_at_unchecked(&self, mid: usize) -> (&[T], &[T]) {
8004294c:	27bdffa0 	addiu	sp,sp,-96
80042950:	afbf005c 	sw	ra,92(sp)
80042954:	afa70024 	sw	a3,36(sp)
80042958:	afa60028 	sw	a2,40(sp)
8004295c:	afa5002c 	sw	a1,44(sp)
80042960:	afa40030 	sw	a0,48(sp)
80042964:	afa40034 	sw	a0,52(sp)
80042968:	afa50038 	sw	a1,56(sp)
8004296c:	afa6003c 	sw	a2,60(sp)
80042970:	afa70040 	sw	a3,64(sp)
        // HACK: the const function `from_raw_parts` is used to make this
        // function const; previously the implementation used
        // `(self.get_unchecked(..mid), self.get_unchecked(mid..))`

        let len = self.len();
80042974:	afa60044 	sw	a2,68(sp)
80042978:	afa50054 	sw	a1,84(sp)
8004297c:	afa60058 	sw	a2,88(sp)
        let ptr = self.as_ptr();
80042980:	afa50048 	sw	a1,72(sp)

        assert_unsafe_precondition!(
80042984:	08010a63 	j	8004298c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17h7600a822702feb5eE+0x40>
80042988:	00000000 	nop
8004298c:	8fa50028 	lw	a1,40(sp)
80042990:	8fa40024 	lw	a0,36(sp)
80042994:	0c0122a7 	jal	80048a9c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked18precondition_check17h2b5a4e6c0f917b4cE>
80042998:	00000000 	nop
8004299c:	08010a69 	j	800429a4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17h7600a822702feb5eE+0x58>
800429a0:	00000000 	nop
            "slice::split_at_unchecked requires the index to be within the slice",
            (mid: usize = mid, len: usize = len) => mid <= len,
        );

        // SAFETY: Caller has to check that `0 <= mid <= self.len()`
        unsafe { (from_raw_parts(ptr, mid), from_raw_parts(ptr.add(mid), len - mid)) }
800429a4:	8fa50024 	lw	a1,36(sp)
800429a8:	8fa4002c 	lw	a0,44(sp)
800429ac:	0c01087f 	jal	800421fc <_ZN4core5slice3raw14from_raw_parts17h1495287b2578ef29E>
800429b0:	00000000 	nop
800429b4:	8fa10028 	lw	at,40(sp)
800429b8:	00402825 	move	a1,v0
800429bc:	8fa20024 	lw	v0,36(sp)
800429c0:	00602025 	move	a0,v1
800429c4:	8fa3002c 	lw	v1,44(sp)
800429c8:	afa50014 	sw	a1,20(sp)
800429cc:	afa40018 	sw	a0,24(sp)
800429d0:	afa3004c 	sw	v1,76(sp)
800429d4:	afa20050 	sw	v0,80(sp)
800429d8:	00022080 	sll	a0,v0,0x2
800429dc:	00641821 	addu	v1,v1,a0
800429e0:	afa3001c 	sw	v1,28(sp)
800429e4:	00221823 	subu	v1,at,v0
800429e8:	afa30020 	sw	v1,32(sp)
800429ec:	0022082b 	sltu	at,at,v0
800429f0:	14200014 	bnez	at,80042a44 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17h7600a822702feb5eE+0xf8>
800429f4:	00000000 	nop
800429f8:	08010a80 	j	80042a00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17h7600a822702feb5eE+0xb4>
800429fc:	00000000 	nop
80042a00:	8fa50020 	lw	a1,32(sp)
80042a04:	8fa4001c 	lw	a0,28(sp)
80042a08:	0c01087f 	jal	800421fc <_ZN4core5slice3raw14from_raw_parts17h1495287b2578ef29E>
80042a0c:	00000000 	nop
80042a10:	8fa60014 	lw	a2,20(sp)
80042a14:	8fa50018 	lw	a1,24(sp)
80042a18:	8fa10030 	lw	at,48(sp)
80042a1c:	00402025 	move	a0,v0
80042a20:	8fa20034 	lw	v0,52(sp)
80042a24:	ac260000 	sw	a2,0(at)
80042a28:	ac250004 	sw	a1,4(at)
80042a2c:	ac240008 	sw	a0,8(at)
80042a30:	ac23000c 	sw	v1,12(at)
    }
80042a34:	8fbf005c 	lw	ra,92(sp)
80042a38:	27bd0060 	addiu	sp,sp,96
80042a3c:	03e00008 	jr	ra
80042a40:	00000000 	nop
        unsafe { (from_raw_parts(ptr, mid), from_raw_parts(ptr.add(mid), len - mid)) }
80042a44:	3c018108 	lui	at,0x8108
80042a48:	2424c068 	addiu	a0,at,-16280
80042a4c:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80042a50:	00000000 	nop

80042a54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17ha6a421826eeb49c4E>:
    pub const unsafe fn split_at_unchecked(&self, mid: usize) -> (&[T], &[T]) {
80042a54:	27bdffa0 	addiu	sp,sp,-96
80042a58:	afbf005c 	sw	ra,92(sp)
80042a5c:	afa70024 	sw	a3,36(sp)
80042a60:	afa60028 	sw	a2,40(sp)
80042a64:	afa5002c 	sw	a1,44(sp)
80042a68:	afa40030 	sw	a0,48(sp)
80042a6c:	afa40034 	sw	a0,52(sp)
80042a70:	afa50038 	sw	a1,56(sp)
80042a74:	afa6003c 	sw	a2,60(sp)
80042a78:	afa70040 	sw	a3,64(sp)
        let len = self.len();
80042a7c:	afa60044 	sw	a2,68(sp)
80042a80:	afa50054 	sw	a1,84(sp)
80042a84:	afa60058 	sw	a2,88(sp)
        let ptr = self.as_ptr();
80042a88:	afa50048 	sw	a1,72(sp)
        assert_unsafe_precondition!(
80042a8c:	08010aa5 	j	80042a94 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17ha6a421826eeb49c4E+0x40>
80042a90:	00000000 	nop
80042a94:	8fa50028 	lw	a1,40(sp)
80042a98:	8fa40024 	lw	a0,36(sp)
80042a9c:	0c0122a7 	jal	80048a9c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked18precondition_check17h2b5a4e6c0f917b4cE>
80042aa0:	00000000 	nop
80042aa4:	08010aab 	j	80042aac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17ha6a421826eeb49c4E+0x58>
80042aa8:	00000000 	nop
        unsafe { (from_raw_parts(ptr, mid), from_raw_parts(ptr.add(mid), len - mid)) }
80042aac:	8fa50024 	lw	a1,36(sp)
80042ab0:	8fa4002c 	lw	a0,44(sp)
80042ab4:	0c01089b 	jal	8004226c <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
80042ab8:	00000000 	nop
80042abc:	8fa10028 	lw	at,40(sp)
80042ac0:	00402825 	move	a1,v0
80042ac4:	8fa20024 	lw	v0,36(sp)
80042ac8:	00602025 	move	a0,v1
80042acc:	8fa3002c 	lw	v1,44(sp)
80042ad0:	afa50014 	sw	a1,20(sp)
80042ad4:	afa40018 	sw	a0,24(sp)
80042ad8:	afa3004c 	sw	v1,76(sp)
80042adc:	afa20050 	sw	v0,80(sp)
80042ae0:	00621821 	addu	v1,v1,v0
80042ae4:	afa3001c 	sw	v1,28(sp)
80042ae8:	00221823 	subu	v1,at,v0
80042aec:	afa30020 	sw	v1,32(sp)
80042af0:	0022082b 	sltu	at,at,v0
80042af4:	14200014 	bnez	at,80042b48 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17ha6a421826eeb49c4E+0xf4>
80042af8:	00000000 	nop
80042afc:	08010ac1 	j	80042b04 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17ha6a421826eeb49c4E+0xb0>
80042b00:	00000000 	nop
80042b04:	8fa50020 	lw	a1,32(sp)
80042b08:	8fa4001c 	lw	a0,28(sp)
80042b0c:	0c01089b 	jal	8004226c <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
80042b10:	00000000 	nop
80042b14:	8fa60014 	lw	a2,20(sp)
80042b18:	8fa50018 	lw	a1,24(sp)
80042b1c:	8fa10030 	lw	at,48(sp)
80042b20:	00402025 	move	a0,v0
80042b24:	8fa20034 	lw	v0,52(sp)
80042b28:	ac260000 	sw	a2,0(at)
80042b2c:	ac250004 	sw	a1,4(at)
80042b30:	ac240008 	sw	a0,8(at)
80042b34:	ac23000c 	sw	v1,12(at)
    }
80042b38:	8fbf005c 	lw	ra,92(sp)
80042b3c:	27bd0060 	addiu	sp,sp,96
80042b40:	03e00008 	jr	ra
80042b44:	00000000 	nop
        unsafe { (from_raw_parts(ptr, mid), from_raw_parts(ptr.add(mid), len - mid)) }
80042b48:	3c018108 	lui	at,0x8108
80042b4c:	2424c068 	addiu	a0,at,-16280
80042b50:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80042b54:	00000000 	nop

80042b58 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hafb4fe7603d89e28E>:
    /// ```
    #[unstable(feature = "split_at_checked", reason = "new API", issue = "119128")]
    #[rustc_const_unstable(feature = "split_at_checked", issue = "119128")]
    #[inline]
    #[must_use]
    pub const fn split_at_checked(&self, mid: usize) -> Option<(&[T], &[T])> {
80042b58:	27bdffb8 	addiu	sp,sp,-72
80042b5c:	afbf0044 	sw	ra,68(sp)
80042b60:	afa70014 	sw	a3,20(sp)
80042b64:	afa60018 	sw	a2,24(sp)
80042b68:	afa5001c 	sw	a1,28(sp)
80042b6c:	afa40020 	sw	a0,32(sp)
80042b70:	afa40024 	sw	a0,36(sp)
80042b74:	afa50038 	sw	a1,56(sp)
80042b78:	afa6003c 	sw	a2,60(sp)
80042b7c:	afa70040 	sw	a3,64(sp)
        if mid <= self.len() {
80042b80:	00c7082b 	sltu	at,a2,a3
80042b84:	10200007 	beqz	at,80042ba4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hafb4fe7603d89e28E+0x4c>
80042b88:	00000000 	nop
80042b8c:	08010ae5 	j	80042b94 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hafb4fe7603d89e28E+0x3c>
80042b90:	00000000 	nop
            // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
            // fulfills the requirements of `split_at_unchecked`.
            Some(unsafe { self.split_at_unchecked(mid) })
        } else {
            None
80042b94:	8fa10020 	lw	at,32(sp)
80042b98:	ac200000 	sw	zero,0(at)
        if mid <= self.len() {
80042b9c:	08010afa 	j	80042be8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hafb4fe7603d89e28E+0x90>
80042ba0:	00000000 	nop
            Some(unsafe { self.split_at_unchecked(mid) })
80042ba4:	8fa70014 	lw	a3,20(sp)
80042ba8:	8fa60018 	lw	a2,24(sp)
80042bac:	8fa5001c 	lw	a1,28(sp)
80042bb0:	27a40028 	addiu	a0,sp,40
80042bb4:	0c010a53 	jal	8004294c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17h7600a822702feb5eE>
80042bb8:	00000000 	nop
80042bbc:	8fa20020 	lw	v0,32(sp)
80042bc0:	8fa10034 	lw	at,52(sp)
80042bc4:	ac41000c 	sw	at,12(v0)
80042bc8:	8fa10030 	lw	at,48(sp)
80042bcc:	ac410008 	sw	at,8(v0)
80042bd0:	8fa1002c 	lw	at,44(sp)
80042bd4:	ac410004 	sw	at,4(v0)
80042bd8:	8fa10028 	lw	at,40(sp)
80042bdc:	ac410000 	sw	at,0(v0)
        if mid <= self.len() {
80042be0:	08010afa 	j	80042be8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hafb4fe7603d89e28E+0x90>
80042be4:	00000000 	nop
        }
    }
80042be8:	8fa20024 	lw	v0,36(sp)
80042bec:	8fbf0044 	lw	ra,68(sp)
80042bf0:	27bd0048 	addiu	sp,sp,72
80042bf4:	03e00008 	jr	ra
80042bf8:	00000000 	nop

80042bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hb8915365f7d2841fE>:
    pub const fn split_at_checked(&self, mid: usize) -> Option<(&[T], &[T])> {
80042bfc:	27bdffb8 	addiu	sp,sp,-72
80042c00:	afbf0044 	sw	ra,68(sp)
80042c04:	afa70014 	sw	a3,20(sp)
80042c08:	afa60018 	sw	a2,24(sp)
80042c0c:	afa5001c 	sw	a1,28(sp)
80042c10:	afa40020 	sw	a0,32(sp)
80042c14:	afa40024 	sw	a0,36(sp)
80042c18:	afa50038 	sw	a1,56(sp)
80042c1c:	afa6003c 	sw	a2,60(sp)
80042c20:	afa70040 	sw	a3,64(sp)
        if mid <= self.len() {
80042c24:	00c7082b 	sltu	at,a2,a3
80042c28:	10200007 	beqz	at,80042c48 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hb8915365f7d2841fE+0x4c>
80042c2c:	00000000 	nop
80042c30:	08010b0e 	j	80042c38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hb8915365f7d2841fE+0x3c>
80042c34:	00000000 	nop
            None
80042c38:	8fa10020 	lw	at,32(sp)
80042c3c:	ac200000 	sw	zero,0(at)
        if mid <= self.len() {
80042c40:	08010b23 	j	80042c8c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hb8915365f7d2841fE+0x90>
80042c44:	00000000 	nop
            Some(unsafe { self.split_at_unchecked(mid) })
80042c48:	8fa70014 	lw	a3,20(sp)
80042c4c:	8fa60018 	lw	a2,24(sp)
80042c50:	8fa5001c 	lw	a1,28(sp)
80042c54:	27a40028 	addiu	a0,sp,40
80042c58:	0c010a95 	jal	80042a54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked17ha6a421826eeb49c4E>
80042c5c:	00000000 	nop
80042c60:	8fa20020 	lw	v0,32(sp)
80042c64:	8fa10034 	lw	at,52(sp)
80042c68:	ac41000c 	sw	at,12(v0)
80042c6c:	8fa10030 	lw	at,48(sp)
80042c70:	ac410008 	sw	at,8(v0)
80042c74:	8fa1002c 	lw	at,44(sp)
80042c78:	ac410004 	sw	at,4(v0)
80042c7c:	8fa10028 	lw	at,40(sp)
80042c80:	ac410000 	sw	at,0(v0)
        if mid <= self.len() {
80042c84:	08010b23 	j	80042c8c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16split_at_checked17hb8915365f7d2841fE+0x90>
80042c88:	00000000 	nop
    }
80042c8c:	8fa20024 	lw	v0,36(sp)
80042c90:	8fbf0044 	lw	ra,68(sp)
80042c94:	27bd0048 	addiu	sp,sp,72
80042c98:	03e00008 	jr	ra
80042c9c:	00000000 	nop

80042ca0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE>:
    /// let r = s.binary_search_by(|probe| probe.cmp(&seek));
    /// assert!(match r { Ok(1..=4) => true, _ => false, });
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
80042ca0:	27bdff90 	addiu	sp,sp,-112
80042ca4:	afbf006c 	sw	ra,108(sp)
80042ca8:	afa50028 	sw	a1,40(sp)
80042cac:	afa4002c 	sw	a0,44(sp)
80042cb0:	afa60030 	sw	a2,48(sp)
80042cb4:	afa70034 	sw	a3,52(sp)
80042cb8:	afa4005c 	sw	a0,92(sp)
80042cbc:	afa50060 	sw	a1,96(sp)
    {
        // INVARIANTS:
        // - 0 <= left <= left + size = right <= self.len()
        // - f returns Less for everything in self[..left]
        // - f returns Greater for everything in self[right..]
        let mut size = self.len();
80042cc0:	afa50040 	sw	a1,64(sp)
        let mut left = 0;
80042cc4:	afa00044 	sw	zero,68(sp)
        let mut right = size;
80042cc8:	8fa10040 	lw	at,64(sp)
80042ccc:	afa10048 	sw	at,72(sp)
        while left < right {
80042cd0:	08010b36 	j	80042cd8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x38>
80042cd4:	00000000 	nop
80042cd8:	8fa10044 	lw	at,68(sp)
80042cdc:	8fa20048 	lw	v0,72(sp)
80042ce0:	0022082b 	sltu	at,at,v0
80042ce4:	1420001b 	bnez	at,80042d54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0xb4>
80042ce8:	00000000 	nop
80042cec:	08010b3d 	j	80042cf4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x54>
80042cf0:	00000000 	nop
            size = right - left;
        }

        // SAFETY: directly true from the overall invariant.
        // Note that this is `<=`, unlike the assume in the `Ok` path.
        unsafe { hint::assert_unchecked(left <= self.len()) };
80042cf4:	8fa10028 	lw	at,40(sp)
80042cf8:	8fa20044 	lw	v0,68(sp)
80042cfc:	0022082b 	sltu	at,at,v0
80042d00:	38210001 	xori	at,at,0x1
80042d04:	afa10024 	sw	at,36(sp)
80042d08:	a3a1006b 	sb	at,107(sp)
        ub_checks::assert_unsafe_precondition!(
80042d0c:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80042d10:	00000000 	nop
80042d14:	10400009 	beqz	v0,80042d3c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x9c>
80042d18:	00000000 	nop
80042d1c:	08010b49 	j	80042d24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x84>
80042d20:	00000000 	nop
80042d24:	8fa10024 	lw	at,36(sp)
80042d28:	30240001 	andi	a0,at,0x1
80042d2c:	0c01192e 	jal	800464b8 <_ZN4core4hint16assert_unchecked18precondition_check17h0b93bb2a861dbe92E>
80042d30:	00000000 	nop
80042d34:	08010b4f 	j	80042d3c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x9c>
80042d38:	00000000 	nop
        Err(left)
80042d3c:	8fa10044 	lw	at,68(sp)
80042d40:	afa1003c 	sw	at,60(sp)
80042d44:	24010001 	li	at,1
80042d48:	afa10038 	sw	at,56(sp)
    }
80042d4c:	08010b5f 	j	80042d7c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0xdc>
80042d50:	00000000 	nop
            let mid = left + size / 2;
80042d54:	8fa20044 	lw	v0,68(sp)
80042d58:	8fa10040 	lw	at,64(sp)
80042d5c:	00010842 	srl	at,at,0x1
80042d60:	00410821 	addu	at,v0,at
80042d64:	afa10020 	sw	at,32(sp)
80042d68:	0022082b 	sltu	at,at,v0
80042d6c:	1420001e 	bnez	at,80042de8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x148>
80042d70:	00000000 	nop
80042d74:	08010b65 	j	80042d94 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0xf4>
80042d78:	00000000 	nop
    }
80042d7c:	8fa20038 	lw	v0,56(sp)
80042d80:	8fa3003c 	lw	v1,60(sp)
80042d84:	8fbf006c 	lw	ra,108(sp)
80042d88:	27bd0070 	addiu	sp,sp,112
80042d8c:	03e00008 	jr	ra
80042d90:	00000000 	nop
            let mid = left + size / 2;
80042d94:	8fa60020 	lw	a2,32(sp)
80042d98:	8fa50028 	lw	a1,40(sp)
80042d9c:	8fa4002c 	lw	a0,44(sp)
80042da0:	afa60064 	sw	a2,100(sp)
            let cmp = f(unsafe { self.get_unchecked(mid) });
80042da4:	0c010925 	jal	80042494 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$13get_unchecked17he56cda5e0b659a59E>
80042da8:	00000000 	nop
80042dac:	afa20050 	sw	v0,80(sp)
80042db0:	8fa50050 	lw	a1,80(sp)
80042db4:	27a40030 	addiu	a0,sp,48
80042db8:	0c010be6 	jal	80042f98 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$20binary_search_by_key28_$u7b$$u7b$closure$u7d$$u7d$17haf09e97a6a8cc404E>
80042dbc:	00000000 	nop
80042dc0:	a3a2004f 	sb	v0,79(sp)
            left = if cmp == Less { mid + 1 } else { left };
80042dc4:	3c018108 	lui	at,0x8108
80042dc8:	2425c088 	addiu	a1,at,-16248
80042dcc:	27a4004f 	addiu	a0,sp,79
80042dd0:	0c0119b7 	jal	800466dc <_ZN60_$LT$core..cmp..Ordering$u20$as$u20$core..cmp..PartialEq$GT$2eq17hf658a71d46e80c1cE>
80042dd4:	00000000 	nop
80042dd8:	1440000b 	bnez	v0,80042e08 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x168>
80042ddc:	00000000 	nop
80042de0:	08010b7e 	j	80042df8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x158>
80042de4:	00000000 	nop
            let mid = left + size / 2;
80042de8:	3c018108 	lui	at,0x8108
80042dec:	2424c078 	addiu	a0,at,-16264
80042df0:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80042df4:	00000000 	nop
            left = if cmp == Less { mid + 1 } else { left };
80042df8:	8fa10044 	lw	at,68(sp)
80042dfc:	afa10054 	sw	at,84(sp)
80042e00:	08010b89 	j	80042e24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x184>
80042e04:	00000000 	nop
80042e08:	8fa10020 	lw	at,32(sp)
80042e0c:	24210001 	addiu	at,at,1
80042e10:	afa1001c 	sw	at,28(sp)
80042e14:	10200012 	beqz	at,80042e60 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x1c0>
80042e18:	00000000 	nop
80042e1c:	08010b94 	j	80042e50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x1b0>
80042e20:	00000000 	nop
80042e24:	8fa10054 	lw	at,84(sp)
80042e28:	afa10044 	sw	at,68(sp)
            right = if cmp == Greater { mid } else { right };
80042e2c:	3c018108 	lui	at,0x8108
80042e30:	2425b014 	addiu	a1,at,-20460
80042e34:	27a4004f 	addiu	a0,sp,79
80042e38:	0c0119b7 	jal	800466dc <_ZN60_$LT$core..cmp..Ordering$u20$as$u20$core..cmp..PartialEq$GT$2eq17hf658a71d46e80c1cE>
80042e3c:	00000000 	nop
80042e40:	1440000f 	bnez	v0,80042e80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x1e0>
80042e44:	00000000 	nop
80042e48:	08010b9c 	j	80042e70 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x1d0>
80042e4c:	00000000 	nop
            left = if cmp == Less { mid + 1 } else { left };
80042e50:	8fa1001c 	lw	at,28(sp)
80042e54:	afa10054 	sw	at,84(sp)
80042e58:	08010b89 	j	80042e24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x184>
80042e5c:	00000000 	nop
80042e60:	3c018108 	lui	at,0x8108
80042e64:	2424c08c 	addiu	a0,at,-16244
80042e68:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80042e6c:	00000000 	nop
            right = if cmp == Greater { mid } else { right };
80042e70:	8fa10048 	lw	at,72(sp)
80042e74:	afa10058 	sw	at,88(sp)
80042e78:	08010ba4 	j	80042e90 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x1f0>
80042e7c:	00000000 	nop
80042e80:	8fa10020 	lw	at,32(sp)
80042e84:	afa10058 	sw	at,88(sp)
80042e88:	08010ba4 	j	80042e90 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x1f0>
80042e8c:	00000000 	nop
80042e90:	8fa10058 	lw	at,88(sp)
80042e94:	afa10048 	sw	at,72(sp)
            if cmp == Equal {
80042e98:	3c018108 	lui	at,0x8108
80042e9c:	2425b015 	addiu	a1,at,-20459
80042ea0:	27a4004f 	addiu	a0,sp,79
80042ea4:	0c0119b7 	jal	800466dc <_ZN60_$LT$core..cmp..Ordering$u20$as$u20$core..cmp..PartialEq$GT$2eq17hf658a71d46e80c1cE>
80042ea8:	00000000 	nop
80042eac:	1440000c 	bnez	v0,80042ee0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x240>
80042eb0:	00000000 	nop
80042eb4:	08010baf 	j	80042ebc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x21c>
80042eb8:	00000000 	nop
            size = right - left;
80042ebc:	8fa10048 	lw	at,72(sp)
80042ec0:	8fa20044 	lw	v0,68(sp)
80042ec4:	00221823 	subu	v1,at,v0
80042ec8:	afa30018 	sw	v1,24(sp)
80042ecc:	0022082b 	sltu	at,at,v0
80042ed0:	1420001d 	bnez	at,80042f48 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x2a8>
80042ed4:	00000000 	nop
80042ed8:	08010bce 	j	80042f38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x298>
80042edc:	00000000 	nop
                unsafe { hint::assert_unchecked(mid < self.len()) };
80042ee0:	8fa10020 	lw	at,32(sp)
80042ee4:	8fa20028 	lw	v0,40(sp)
80042ee8:	0022082b 	sltu	at,at,v0
80042eec:	afa10014 	sw	at,20(sp)
80042ef0:	a3a1006a 	sb	at,106(sp)
80042ef4:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80042ef8:	00000000 	nop
80042efc:	10400009 	beqz	v0,80042f24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x284>
80042f00:	00000000 	nop
80042f04:	08010bc3 	j	80042f0c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x26c>
80042f08:	00000000 	nop
80042f0c:	8fa10014 	lw	at,20(sp)
80042f10:	30240001 	andi	a0,at,0x1
80042f14:	0c01192e 	jal	800464b8 <_ZN4core4hint16assert_unchecked18precondition_check17h0b93bb2a861dbe92E>
80042f18:	00000000 	nop
80042f1c:	08010bc9 	j	80042f24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x284>
80042f20:	00000000 	nop
                return Ok(mid);
80042f24:	8fa10020 	lw	at,32(sp)
80042f28:	afa1003c 	sw	at,60(sp)
80042f2c:	afa00038 	sw	zero,56(sp)
    }
80042f30:	08010b5f 	j	80042d7c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0xdc>
80042f34:	00000000 	nop
            size = right - left;
80042f38:	8fa10018 	lw	at,24(sp)
80042f3c:	afa10040 	sw	at,64(sp)
        while left < right {
80042f40:	08010b36 	j	80042cd8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE+0x38>
80042f44:	00000000 	nop
            size = right - left;
80042f48:	3c018108 	lui	at,0x8108
80042f4c:	2424c09c 	addiu	a0,at,-16228
80042f50:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80042f54:	00000000 	nop

80042f58 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$20binary_search_by_key17hb631560c3d60eb27E>:
    // This breaks links when slice is displayed in core, but changing it to use relative links
    // would break when the item is re-exported. So allow the core links to be broken for now.
    #[allow(rustdoc::broken_intra_doc_links)]
    #[stable(feature = "slice_binary_search_by_key", since = "1.10.0")]
    #[inline]
    pub fn binary_search_by_key<'a, B, F>(&'a self, b: &B, mut f: F) -> Result<usize, usize>
80042f58:	27bdffd0 	addiu	sp,sp,-48
80042f5c:	afbf002c 	sw	ra,44(sp)
80042f60:	afa40020 	sw	a0,32(sp)
80042f64:	afa50024 	sw	a1,36(sp)
80042f68:	afa60028 	sw	a2,40(sp)
80042f6c:	27a10017 	addiu	at,sp,23
    where
        F: FnMut(&'a T) -> B,
        B: Ord,
    {
        self.binary_search_by(|k| f(k).cmp(b))
80042f70:	afa10018 	sw	at,24(sp)
80042f74:	afa6001c 	sw	a2,28(sp)
80042f78:	8fa60018 	lw	a2,24(sp)
80042f7c:	8fa7001c 	lw	a3,28(sp)
80042f80:	0c010b28 	jal	80042ca0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16binary_search_by17ha3d780b2a816f50bE>
80042f84:	00000000 	nop
    }
80042f88:	8fbf002c 	lw	ra,44(sp)
80042f8c:	27bd0030 	addiu	sp,sp,48
80042f90:	03e00008 	jr	ra
80042f94:	00000000 	nop

80042f98 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$20binary_search_by_key28_$u7b$$u7b$closure$u7d$$u7d$17haf09e97a6a8cc404E>:
        self.binary_search_by(|k| f(k).cmp(b))
80042f98:	27bdffd8 	addiu	sp,sp,-40
80042f9c:	afbf0024 	sw	ra,36(sp)
80042fa0:	afa40010 	sw	a0,16(sp)
80042fa4:	afa4001c 	sw	a0,28(sp)
80042fa8:	afa50020 	sw	a1,32(sp)
80042fac:	8c840000 	lw	a0,0(a0)
80042fb0:	afa50018 	sw	a1,24(sp)
80042fb4:	8fa50018 	lw	a1,24(sp)
80042fb8:	0c011634 	jal	800458d0 <_ZN4core7unicode12unicode_data11skip_search28_$u7b$$u7b$closure$u7d$$u7d$17hdc343340b1dfbf33E>
80042fbc:	00000000 	nop
80042fc0:	8fa40010 	lw	a0,16(sp)
80042fc4:	afa20014 	sw	v0,20(sp)
80042fc8:	8c850004 	lw	a1,4(a0)
80042fcc:	27a40014 	addiu	a0,sp,20
80042fd0:	0c0119ec 	jal	800467b0 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u32$GT$3cmp17ha5f8b88f44088c34E>
80042fd4:	00000000 	nop
80042fd8:	8fbf0024 	lw	ra,36(sp)
80042fdc:	27bd0028 	addiu	sp,sp,40
80042fe0:	03e00008 	jr	ra
80042fe4:	00000000 	nop

80042fe8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E>:
    /// [`clone_from_slice`]: slice::clone_from_slice
    /// [`split_at_mut`]: slice::split_at_mut
    #[doc(alias = "memcpy")]
    #[stable(feature = "copy_from_slice", since = "1.9.0")]
    #[track_caller]
    pub fn copy_from_slice(&mut self, src: &[T])
80042fe8:	27bdffa0 	addiu	sp,sp,-96
80042fec:	afbf005c 	sw	ra,92(sp)
80042ff0:	afa7001c 	sw	a3,28(sp)
80042ff4:	afa60020 	sw	a2,32(sp)
80042ff8:	afa50024 	sw	a1,36(sp)
80042ffc:	afa40028 	sw	a0,40(sp)
80043000:	8fa10070 	lw	at,112(sp)
80043004:	afa1002c 	sw	at,44(sp)
80043008:	afa40030 	sw	a0,48(sp)
8004300c:	afa50034 	sw	a1,52(sp)
80043010:	afa60038 	sw	a2,56(sp)
80043014:	afa7003c 	sw	a3,60(sp)
                "source slice length ({}) does not match destination slice length ({})",
                src_len, dst_len,
            );
        }

        if self.len() != src.len() {
80043018:	14a70028 	bne	a1,a3,800430bc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E+0xd4>
8004301c:	00000000 	nop
80043020:	08010c0a 	j	80043028 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E+0x40>
80043024:	00000000 	nop
80043028:	8fa10024 	lw	at,36(sp)
8004302c:	8fa20028 	lw	v0,40(sp)
80043030:	8fa30020 	lw	v1,32(sp)
80043034:	8fa4001c 	lw	a0,28(sp)
80043038:	afa3004c 	sw	v1,76(sp)
8004303c:	afa40050 	sw	a0,80(sp)
80043040:	afa20054 	sw	v0,84(sp)
80043044:	afa10058 	sw	at,88(sp)
80043048:	afa30040 	sw	v1,64(sp)
8004304c:	afa20044 	sw	v0,68(sp)
80043050:	afa10048 	sw	at,72(sp)
    ub_checks::assert_unsafe_precondition!(
80043054:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80043058:	00000000 	nop
8004305c:	1040000e 	beqz	v0,80043098 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E+0xb0>
80043060:	00000000 	nop
80043064:	08010c1b 	j	8004306c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E+0x84>
80043068:	00000000 	nop
8004306c:	8fa50028 	lw	a1,40(sp)
80043070:	8fa40020 	lw	a0,32(sp)
80043074:	8fa10024 	lw	at,36(sp)
80043078:	03a01025 	move	v0,sp
8004307c:	ac410010 	sw	at,16(v0)
80043080:	24070001 	li	a3,1
80043084:	00e03025 	move	a2,a3
80043088:	0c01193c 	jal	800464f0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E>
8004308c:	00000000 	nop
80043090:	08010c26 	j	80043098 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E+0xb0>
80043094:	00000000 	nop
    unsafe { copy_nonoverlapping(src, dst, count) }
80043098:	8fa60024 	lw	a2,36(sp)
8004309c:	8fa50020 	lw	a1,32(sp)
800430a0:	8fa40028 	lw	a0,40(sp)
800430a4:	0c00d3fd 	jal	80034ff4 <memcpy>
800430a8:	00000000 	nop
        // checked to have the same length. The slices cannot overlap because
        // mutable references are exclusive.
        unsafe {
            ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
        }
    }
800430ac:	8fbf005c 	lw	ra,92(sp)
800430b0:	27bd0060 	addiu	sp,sp,96
800430b4:	03e00008 	jr	ra
800430b8:	00000000 	nop
            len_mismatch_fail(self.len(), src.len());
800430bc:	8fa6002c 	lw	a2,44(sp)
800430c0:	8fa5001c 	lw	a1,28(sp)
800430c4:	8fa40024 	lw	a0,36(sp)
800430c8:	0c010c34 	jal	800430d0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17ha11eccd574206b36E>
800430cc:	00000000 	nop

800430d0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17ha11eccd574206b36E>:
        fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
800430d0:	27bdff80 	addiu	sp,sp,-128
800430d4:	afbf007c 	sw	ra,124(sp)
800430d8:	afa60020 	sw	a2,32(sp)
800430dc:	afa40024 	sw	a0,36(sp)
800430e0:	afa50028 	sw	a1,40(sp)
800430e4:	27a20028 	addiu	v0,sp,40
800430e8:	afa20068 	sw	v0,104(sp)
800430ec:	afa20074 	sw	v0,116(sp)
800430f0:	3c018004 	lui	at,0x8004
800430f4:	24217d60 	addiu	at,at,32096
800430f8:	afa10078 	sw	at,120(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
800430fc:	afa2006c 	sw	v0,108(sp)
80043100:	afa10070 	sw	at,112(sp)
    }
80043104:	8fa4006c 	lw	a0,108(sp)
80043108:	8fa30070 	lw	v1,112(sp)
8004310c:	27a20024 	addiu	v0,sp,36
80043110:	afa20054 	sw	v0,84(sp)
80043114:	afa20060 	sw	v0,96(sp)
80043118:	afa10064 	sw	at,100(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8004311c:	afa20058 	sw	v0,88(sp)
80043120:	afa1005c 	sw	at,92(sp)
    }
80043124:	8fa20058 	lw	v0,88(sp)
80043128:	8fa1005c 	lw	at,92(sp)
            panic!(
8004312c:	afa40044 	sw	a0,68(sp)
80043130:	afa30048 	sw	v1,72(sp)
80043134:	afa2004c 	sw	v0,76(sp)
80043138:	afa10050 	sw	at,80(sp)
8004313c:	03a01025 	move	v0,sp
80043140:	24010002 	li	at,2
80043144:	ac410010 	sw	at,16(v0)
80043148:	3c018108 	lui	at,0x8108
8004314c:	2425c0ec 	addiu	a1,at,-16148
80043150:	27a4002c 	addiu	a0,sp,44
80043154:	afa4001c 	sw	a0,28(sp)
80043158:	24060003 	li	a2,3
8004315c:	27a70044 	addiu	a3,sp,68
80043160:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
80043164:	00000000 	nop
80043168:	8fa4001c 	lw	a0,28(sp)
8004316c:	8fa50020 	lw	a1,32(sp)
80043170:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80043174:	00000000 	nop

80043178 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E>:
            ptr::swap_nonoverlapping(self.as_mut_ptr(), other.as_mut_ptr(), self.len());
        }
    }

    /// Function to calculate lengths of the middle and trailing slice for `align_to{,_mut}`.
    fn align_to_offsets<U>(&self) -> (usize, usize) {
80043178:	27bdffb8 	addiu	sp,sp,-72
8004317c:	afa50018 	sw	a1,24(sp)
80043180:	24010001 	li	at,1
80043184:	afa1001c 	sw	at,28(sp)
            if b == 0 { a } else { gcd(b, a % b) }
        }

        // Explicitly wrap the function call in a const block so it gets
        // constant-evaluated even in debug mode.
        let gcd: usize = const { gcd(mem::size_of::<T>(), mem::size_of::<U>()) };
80043188:	afa10024 	sw	at,36(sp)
8004318c:	afa40030 	sw	a0,48(sp)
80043190:	afa50034 	sw	a1,52(sp)
80043194:	24020004 	li	v0,4
80043198:	afa20020 	sw	v0,32(sp)
        let ts: usize = mem::size_of::<U>() / gcd;
8004319c:	afa20038 	sw	v0,56(sp)
        let us: usize = mem::size_of::<T>() / gcd;
800431a0:	afa1003c 	sw	at,60(sp)
800431a4:	24010000 	li	at,0

        // Armed with this knowledge, we can find how many `U`s we can fit!
        let us_len = self.len() / ts * us;
800431a8:	14000011 	bnez	zero,800431f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E+0x78>
800431ac:	00000000 	nop
800431b0:	08010c6e 	j	800431b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E+0x40>
800431b4:	00000000 	nop
800431b8:	8fa2001c 	lw	v0,28(sp)
800431bc:	8fa10020 	lw	at,32(sp)
800431c0:	8fa30018 	lw	v1,24(sp)
800431c4:	0061001b 	divu	zero,v1,at
800431c8:	002001f4 	teq	at,zero,0x7
800431cc:	00000812 	mflo	at
800431d0:	70221802 	mul	v1,at,v0
800431d4:	afa30014 	sw	v1,20(sp)
800431d8:	00220019 	multu	at,v0
800431dc:	00000810 	mfhi	at
800431e0:	1420000e 	bnez	at,8004321c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E+0xa4>
800431e4:	00000000 	nop
800431e8:	08010c80 	j	80043200 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E+0x88>
800431ec:	00000000 	nop
800431f0:	3c018108 	lui	at,0x8108
800431f4:	2424c104 	addiu	a0,at,-16124
800431f8:	0c011b70 	jal	80046dc0 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
800431fc:	00000000 	nop
80043200:	8fa10020 	lw	at,32(sp)
80043204:	8fa20014 	lw	v0,20(sp)
80043208:	afa20040 	sw	v0,64(sp)
        // And how many `T`s will be in the trailing slice!
        let ts_len = self.len() % ts;
8004320c:	10200015 	beqz	at,80043264 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E+0xec>
80043210:	00000000 	nop
80043214:	08010c8b 	j	8004322c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E+0xb4>
80043218:	00000000 	nop
        let us_len = self.len() / ts * us;
8004321c:	3c018108 	lui	at,0x8108
80043220:	2424c104 	addiu	a0,at,-16124
80043224:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
80043228:	00000000 	nop
        let ts_len = self.len() % ts;
8004322c:	8fa20014 	lw	v0,20(sp)
80043230:	8fa10020 	lw	at,32(sp)
80043234:	8fa30018 	lw	v1,24(sp)
80043238:	0061001b 	divu	zero,v1,at
8004323c:	002001f4 	teq	at,zero,0x7
80043240:	00000810 	mfhi	at
80043244:	afa10044 	sw	at,68(sp)
        (us_len, ts_len)
80043248:	afa20028 	sw	v0,40(sp)
8004324c:	afa1002c 	sw	at,44(sp)
    }
80043250:	8fa20028 	lw	v0,40(sp)
80043254:	8fa3002c 	lw	v1,44(sp)
80043258:	27bd0048 	addiu	sp,sp,72
8004325c:	03e00008 	jr	ra
80043260:	00000000 	nop
        let ts_len = self.len() % ts;
80043264:	3c018108 	lui	at,0x8108
80043268:	2424c114 	addiu	a0,at,-16108
8004326c:	0c011b7e 	jal	80046df8 <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80043270:	00000000 	nop

80043274 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E>:
    ///     // less_efficient_algorithm_for_bytes(suffix);
    /// }
    /// ```
    #[stable(feature = "slice_align_to", since = "1.30.0")]
    #[must_use]
    pub unsafe fn align_to<U>(&self) -> (&[T], &[U], &[T]) {
80043274:	27bdff50 	addiu	sp,sp,-176
80043278:	afbf00ac 	sw	ra,172(sp)
8004327c:	afa60044 	sw	a2,68(sp)
80043280:	afa50048 	sw	a1,72(sp)
80043284:	afa4004c 	sw	a0,76(sp)
80043288:	afa40050 	sw	a0,80(sp)
8004328c:	afa50064 	sw	a1,100(sp)
80043290:	afa60068 	sw	a2,104(sp)
        // Note that most of this function will be constant-evaluated,
        if U::IS_ZST || T::IS_ZST {
80043294:	08010ca7 	j	8004329c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x28>
80043298:	00000000 	nop
8004329c:	08010ca9 	j	800432a4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x30>
800432a0:	00000000 	nop
800432a4:	8fa10044 	lw	at,68(sp)
800432a8:	8fa40048 	lw	a0,72(sp)
800432ac:	afa400a4 	sw	a0,164(sp)
800432b0:	afa100a8 	sw	at,168(sp)
            return (self, &[], &[]);
        }

        // First, find at what point do we split between the first and 2nd slice. Easy with
        // ptr.align_offset.
        let ptr = self.as_ptr();
800432b4:	afa4006c 	sw	a0,108(sp)
800432b8:	24050004 	li	a1,4
        // SAFETY: See the `align_to_mut` method for the detailed safety comment.
        let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
800432bc:	0c00e795 	jal	80039e54 <_ZN4core3ptr12align_offset17hb3cf3b3ab979c2f6E>
800432c0:	00000000 	nop
800432c4:	8fa10044 	lw	at,68(sp)
800432c8:	00401825 	move	v1,v0
800432cc:	afa30040 	sw	v1,64(sp)
800432d0:	afa20070 	sw	v0,112(sp)
        if offset > self.len() {
800432d4:	0022082b 	sltu	at,at,v0
800432d8:	14200037 	bnez	at,800433b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x144>
800432dc:	00000000 	nop
800432e0:	08010cba 	j	800432e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x74>
800432e4:	00000000 	nop
            (self, &[], &[])
        } else {
            let (left, rest) = self.split_at(offset);
800432e8:	8fa70040 	lw	a3,64(sp)
800432ec:	8fa60044 	lw	a2,68(sp)
800432f0:	8fa50048 	lw	a1,72(sp)
800432f4:	3c018108 	lui	at,0x8108
800432f8:	2421c124 	addiu	at,at,-16092
800432fc:	03a01025 	move	v0,sp
80043300:	ac410010 	sw	at,16(v0)
80043304:	27a40054 	addiu	a0,sp,84
80043308:	0c0109ff 	jal	800427fc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8split_at17h7f0dba53eee5d866E>
8004330c:	00000000 	nop
80043310:	8fa20054 	lw	v0,84(sp)
80043314:	afa2001c 	sw	v0,28(sp)
80043318:	8fa10058 	lw	at,88(sp)
8004331c:	afa10020 	sw	at,32(sp)
80043320:	afa20074 	sw	v0,116(sp)
80043324:	afa10078 	sw	at,120(sp)
80043328:	8fa4005c 	lw	a0,92(sp)
8004332c:	afa4002c 	sw	a0,44(sp)
80043330:	8fa50060 	lw	a1,96(sp)
80043334:	afa50028 	sw	a1,40(sp)
80043338:	afa4007c 	sw	a0,124(sp)
8004333c:	afa50080 	sw	a1,128(sp)
            let (us_len, ts_len) = rest.align_to_offsets::<U>();
80043340:	0c010c5e 	jal	80043178 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$16align_to_offsets17hf547d0d31b43e7e4E>
80043344:	00000000 	nop
80043348:	8fa4002c 	lw	a0,44(sp)
8004334c:	8fa10028 	lw	at,40(sp)
80043350:	00402825 	move	a1,v0
80043354:	afa30030 	sw	v1,48(sp)
80043358:	00601025 	move	v0,v1
8004335c:	afa20024 	sw	v0,36(sp)
80043360:	afa50084 	sw	a1,132(sp)
80043364:	afa30088 	sw	v1,136(sp)
80043368:	afa4009c 	sw	a0,156(sp)
8004336c:	afa100a0 	sw	at,160(sp)
            // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
            // since the caller guarantees that we can transmute `T` to `U` safely.
            unsafe {
                (
                    left,
                    from_raw_parts(rest.as_ptr() as *const U, us_len),
80043370:	0c01087f 	jal	800421fc <_ZN4core5slice3raw14from_raw_parts17h1495287b2578ef29E>
80043374:	00000000 	nop
80043378:	8fa10028 	lw	at,40(sp)
8004337c:	00402825 	move	a1,v0
80043380:	8fa2002c 	lw	v0,44(sp)
80043384:	00602025 	move	a0,v1
80043388:	8fa30030 	lw	v1,48(sp)
8004338c:	afa50034 	sw	a1,52(sp)
80043390:	afa40038 	sw	a0,56(sp)
80043394:	afa20094 	sw	v0,148(sp)
80043398:	afa10098 	sw	at,152(sp)
                    from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
8004339c:	00231023 	subu	v0,at,v1
800433a0:	afa2003c 	sw	v0,60(sp)
800433a4:	0023082b 	sltu	at,at,v1
800433a8:	14200025 	bnez	at,80043440 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x1cc>
800433ac:	00000000 	nop
800433b0:	08010cfb 	j	800433ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x178>
800433b4:	00000000 	nop
            (self, &[], &[])
800433b8:	8fa1004c 	lw	at,76(sp)
800433bc:	8fa20044 	lw	v0,68(sp)
800433c0:	8fa30048 	lw	v1,72(sp)
800433c4:	ac230000 	sw	v1,0(at)
800433c8:	ac220004 	sw	v0,4(at)
800433cc:	3c028108 	lui	v0,0x8108
800433d0:	2442b030 	addiu	v0,v0,-20432
800433d4:	ac220008 	sw	v0,8(at)
800433d8:	ac20000c 	sw	zero,12(at)
800433dc:	ac220010 	sw	v0,16(at)
800433e0:	ac200014 	sw	zero,20(at)
        if offset > self.len() {
800433e4:	08010d14 	j	80043450 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x1dc>
800433e8:	00000000 	nop
800433ec:	8fa50024 	lw	a1,36(sp)
800433f0:	8fa1002c 	lw	at,44(sp)
800433f4:	8fa2003c 	lw	v0,60(sp)
800433f8:	afa1008c 	sw	at,140(sp)
800433fc:	afa20090 	sw	v0,144(sp)
80043400:	00222021 	addu	a0,at,v0
                    from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
80043404:	0c01089b 	jal	8004226c <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
80043408:	00000000 	nop
8004340c:	8fa7001c 	lw	a3,28(sp)
80043410:	8fa60020 	lw	a2,32(sp)
80043414:	8fa50034 	lw	a1,52(sp)
80043418:	8fa40038 	lw	a0,56(sp)
8004341c:	8fa1004c 	lw	at,76(sp)
                (
80043420:	ac270000 	sw	a3,0(at)
80043424:	ac260004 	sw	a2,4(at)
80043428:	ac250008 	sw	a1,8(at)
8004342c:	ac24000c 	sw	a0,12(at)
80043430:	ac220010 	sw	v0,16(at)
80043434:	ac230014 	sw	v1,20(at)
        if offset > self.len() {
80043438:	08010d14 	j	80043450 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E+0x1dc>
8004343c:	00000000 	nop
                    from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
80043440:	3c018108 	lui	at,0x8108
80043444:	2424c134 	addiu	a0,at,-16076
80043448:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
8004344c:	00000000 	nop
                )
            }
        }
    }
80043450:	8fa20050 	lw	v0,80(sp)
80043454:	8fbf00ac 	lw	ra,172(sp)
80043458:	27bd00b0 	addiu	sp,sp,176
8004345c:	03e00008 	jr	ra
80043460:	00000000 	nop

80043464 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>:
pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {
80043464:	27bdfff8 	addiu	sp,sp,-8
80043468:	00a01825 	move	v1,a1
8004346c:	00801025 	move	v0,a0
80043470:	afa20000 	sw	v0,0(sp)
80043474:	afa30004 	sw	v1,4(sp)
80043478:	27bd0008 	addiu	sp,sp,8
}
8004347c:	03e00008 	jr	ra
80043480:	00000000 	nop

80043484 <_ZN4core3str5count11count_chars17hb701d6a0293152ceE>:

const USIZE_SIZE: usize = core::mem::size_of::<usize>();
const UNROLL_INNER: usize = 4;

#[inline]
pub(super) fn count_chars(s: &str) -> usize {
80043484:	27bdffc8 	addiu	sp,sp,-56
80043488:	afbf0034 	sw	ra,52(sp)
8004348c:	afa50010 	sw	a1,16(sp)
80043490:	afa40014 	sw	a0,20(sp)
80043494:	afa40024 	sw	a0,36(sp)
80043498:	afa50028 	sw	a1,40(sp)
    if s.len() < USIZE_SIZE * UNROLL_INNER {
8004349c:	0c011315 	jal	80044c54 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
800434a0:	00000000 	nop
800434a4:	afa20018 	sw	v0,24(sp)
800434a8:	24010010 	li	at,16
800434ac:	afa1001c 	sw	at,28(sp)
800434b0:	24010000 	li	at,0
800434b4:	1400000a 	bnez	zero,800434e0 <_ZN4core3str5count11count_chars17hb701d6a0293152ceE+0x5c>
800434b8:	00000000 	nop
800434bc:	08010d31 	j	800434c4 <_ZN4core3str5count11count_chars17hb701d6a0293152ceE+0x40>
800434c0:	00000000 	nop
800434c4:	8fa10018 	lw	at,24(sp)
800434c8:	8fa2001c 	lw	v0,28(sp)
800434cc:	0022082b 	sltu	at,at,v0
800434d0:	1420000e 	bnez	at,8004350c <_ZN4core3str5count11count_chars17hb701d6a0293152ceE+0x88>
800434d4:	00000000 	nop
800434d8:	08010d3c 	j	800434f0 <_ZN4core3str5count11count_chars17hb701d6a0293152ceE+0x6c>
800434dc:	00000000 	nop
800434e0:	3c018108 	lui	at,0x8108
800434e4:	2424c1b4 	addiu	a0,at,-15948
800434e8:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
800434ec:	00000000 	nop
        // difference is not likely to matter, or where it might even be slower.
        // That said, a ton of thought was not spent on the particular threshold
        // here, beyond "this value seems to make sense".
        char_count_general_case(s.as_bytes())
    } else {
        do_count_chars(s)
800434f0:	8fa50010 	lw	a1,16(sp)
800434f4:	8fa40014 	lw	a0,20(sp)
800434f8:	0c010d51 	jal	80043544 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E>
800434fc:	00000000 	nop
80043500:	afa20020 	sw	v0,32(sp)
80043504:	08010d4c 	j	80043530 <_ZN4core3str5count11count_chars17hb701d6a0293152ceE+0xac>
80043508:	00000000 	nop
8004350c:	8fa50010 	lw	a1,16(sp)
80043510:	8fa40014 	lw	a0,20(sp)
80043514:	afa4002c 	sw	a0,44(sp)
80043518:	afa50030 	sw	a1,48(sp)
        char_count_general_case(s.as_bytes())
8004351c:	0c010ebc 	jal	80043af0 <_ZN4core3str5count23char_count_general_case17ha5b861e4fe7674b1E>
80043520:	00000000 	nop
80043524:	afa20020 	sw	v0,32(sp)
80043528:	08010d4c 	j	80043530 <_ZN4core3str5count11count_chars17hb701d6a0293152ceE+0xac>
8004352c:	00000000 	nop
    }
}
80043530:	8fa20020 	lw	v0,32(sp)
80043534:	8fbf0034 	lw	ra,52(sp)
80043538:	27bd0038 	addiu	sp,sp,56
8004353c:	03e00008 	jr	ra
80043540:	00000000 	nop

80043544 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E>:

fn do_count_chars(s: &str) -> usize {
80043544:	27bdfeb8 	addiu	sp,sp,-328
80043548:	afbf0144 	sw	ra,324(sp)
8004354c:	00a03025 	move	a2,a1
80043550:	afa60040 	sw	a2,64(sp)
80043554:	00802825 	move	a1,a0
80043558:	afa50044 	sw	a1,68(sp)
8004355c:	afa500ec 	sw	a1,236(sp)
80043560:	afa600f0 	sw	a2,240(sp)
80043564:	afa5013c 	sw	a1,316(sp)
80043568:	afa60140 	sw	a2,320(sp)
8004356c:	27a40064 	addiu	a0,sp,100
    const _: () = assert!(CHUNK_SIZE < 256);
    const _: () = assert!(CHUNK_SIZE % UNROLL_INNER == 0);

    // SAFETY: transmuting `[u8]` to `[usize]` is safe except for size
    // differences which are handled by `align_to`.
    let (head, body, tail) = unsafe { s.as_bytes().align_to::<usize>() };
80043570:	0c010c9d 	jal	80043274 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8align_to17hdf62ed9d7fc95a47E>
80043574:	00000000 	nop
80043578:	8fa20064 	lw	v0,100(sp)
8004357c:	afa20048 	sw	v0,72(sp)
80043580:	8fa10068 	lw	at,104(sp)
80043584:	afa1004c 	sw	at,76(sp)
80043588:	afa200f4 	sw	v0,244(sp)
8004358c:	afa100f8 	sw	at,248(sp)
80043590:	8fa4006c 	lw	a0,108(sp)
80043594:	afa40050 	sw	a0,80(sp)
80043598:	8fa50070 	lw	a1,112(sp)
8004359c:	afa50054 	sw	a1,84(sp)
800435a0:	afa400fc 	sw	a0,252(sp)
800435a4:	afa50100 	sw	a1,256(sp)
800435a8:	8fa20074 	lw	v0,116(sp)
800435ac:	afa20058 	sw	v0,88(sp)
800435b0:	8fa10078 	lw	at,120(sp)
800435b4:	afa1005c 	sw	at,92(sp)
800435b8:	afa20104 	sw	v0,260(sp)
800435bc:	afa10108 	sw	at,264(sp)
    // mode).
    //
    // The `unlikely` helps discourage LLVM from inlining the body, which is
    // nice, as we would rather not mark the `char_count_general_case` function
    // as cold.
    if unlikely(body.is_empty() || head.len() > USIZE_SIZE || tail.len() > USIZE_SIZE) {
800435c0:	0c0108d3 	jal	8004234c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8is_empty17h919103cb7fc266a9E>
800435c4:	00000000 	nop
800435c8:	14400009 	bnez	v0,800435f0 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0xac>
800435cc:	00000000 	nop
800435d0:	08010d76 	j	800435d8 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x94>
800435d4:	00000000 	nop
800435d8:	8fa1004c 	lw	at,76(sp)
800435dc:	2c210005 	sltiu	at,at,5
800435e0:	14200007 	bnez	at,80043600 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0xbc>
800435e4:	00000000 	nop
800435e8:	08010d7c 	j	800435f0 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0xac>
800435ec:	00000000 	nop
800435f0:	24010001 	li	at,1
800435f4:	a3a1007f 	sb	at,127(sp)
800435f8:	08010d86 	j	80043618 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0xd4>
800435fc:	00000000 	nop
80043600:	8fa2005c 	lw	v0,92(sp)
80043604:	24010004 	li	at,4
80043608:	0022082b 	sltu	at,at,v0
8004360c:	a3a1007f 	sb	at,127(sp)
80043610:	08010d86 	j	80043618 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0xd4>
80043614:	00000000 	nop
80043618:	93a1007f 	lbu	at,127(sp)
8004361c:	30210001 	andi	at,at,0x1
80043620:	a3a1010f 	sb	at,271(sp)
80043624:	93a1010f 	lbu	at,271(sp)
80043628:	30210001 	andi	at,at,0x1
8004362c:	14200015 	bnez	at,80043684 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x140>
80043630:	00000000 	nop
80043634:	08010d8f 	j	8004363c <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0xf8>
80043638:	00000000 	nop
        return char_count_general_case(s.as_bytes());
    }

    let mut total = char_count_general_case(head) + char_count_general_case(tail);
8004363c:	8fa5004c 	lw	a1,76(sp)
80043640:	8fa40048 	lw	a0,72(sp)
80043644:	0c010ebc 	jal	80043af0 <_ZN4core3str5count23char_count_general_case17ha5b861e4fe7674b1E>
80043648:	00000000 	nop
8004364c:	8fa40058 	lw	a0,88(sp)
80043650:	8fa5005c 	lw	a1,92(sp)
80043654:	afa20038 	sw	v0,56(sp)
80043658:	0c010ebc 	jal	80043af0 <_ZN4core3str5count23char_count_general_case17ha5b861e4fe7674b1E>
8004365c:	00000000 	nop
80043660:	00400825 	move	at,v0
80043664:	8fa20038 	lw	v0,56(sp)
80043668:	00410821 	addu	at,v0,at
8004366c:	afa1003c 	sw	at,60(sp)
80043670:	0022082b 	sltu	at,at,v0
80043674:	14200025 	bnez	at,8004370c <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x1c8>
80043678:	00000000 	nop
8004367c:	08010daa 	j	800436a8 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x164>
80043680:	00000000 	nop
80043684:	8fa50040 	lw	a1,64(sp)
80043688:	8fa40044 	lw	a0,68(sp)
8004368c:	afa40134 	sw	a0,308(sp)
80043690:	afa50138 	sw	a1,312(sp)
        return char_count_general_case(s.as_bytes());
80043694:	0c010ebc 	jal	80043af0 <_ZN4core3str5count23char_count_general_case17ha5b861e4fe7674b1E>
80043698:	00000000 	nop
8004369c:	afa20060 	sw	v0,96(sp)
800436a0:	08010e4e 	j	80043938 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x3f4>
800436a4:	00000000 	nop
    let mut total = char_count_general_case(head) + char_count_general_case(tail);
800436a8:	8fa60054 	lw	a2,84(sp)
800436ac:	8fa50050 	lw	a1,80(sp)
800436b0:	8fa1003c 	lw	at,60(sp)
800436b4:	afa10080 	sw	at,128(sp)
    // Split `body` into `CHUNK_SIZE` chunks to reduce the frequency with which
    // we call `sum_bytes_in_usize`.
    for chunk in body.chunks(CHUNK_SIZE) {
800436b8:	3c018108 	lui	at,0x8108
800436bc:	2421c1d4 	addiu	at,at,-15916
800436c0:	03a01025 	move	v0,sp
800436c4:	ac410010 	sw	at,16(v0)
800436c8:	27a40090 	addiu	a0,sp,144
800436cc:	afa40034 	sw	a0,52(sp)
800436d0:	240700c0 	li	a3,192
800436d4:	0c01097a 	jal	800425e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6chunks17h77ab5ed9164bef81E>
800436d8:	00000000 	nop
800436dc:	8fa50034 	lw	a1,52(sp)
800436e0:	27a40084 	addiu	a0,sp,132
800436e4:	0c00ef10 	jal	8003bc40 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h527644712bfef04bE>
800436e8:	00000000 	nop
800436ec:	8fa1008c 	lw	at,140(sp)
800436f0:	afa100a4 	sw	at,164(sp)
800436f4:	8fa10088 	lw	at,136(sp)
800436f8:	afa100a0 	sw	at,160(sp)
800436fc:	8fa10084 	lw	at,132(sp)
80043700:	afa1009c 	sw	at,156(sp)
80043704:	08010dc7 	j	8004371c <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x1d8>
80043708:	00000000 	nop
    let mut total = char_count_general_case(head) + char_count_general_case(tail);
8004370c:	3c018108 	lui	at,0x8108
80043710:	2424c1c4 	addiu	a0,at,-15932
80043714:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80043718:	00000000 	nop
8004371c:	27a4009c 	addiu	a0,sp,156
    for chunk in body.chunks(CHUNK_SIZE) {
80043720:	0c010849 	jal	80042124 <_ZN93_$LT$core..slice..iter..Chunks$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47ac45bc3c7539b6E>
80043724:	00000000 	nop
80043728:	afa200a8 	sw	v0,168(sp)
8004372c:	afa300ac 	sw	v1,172(sp)
80043730:	8fa100a8 	lw	at,168(sp)
80043734:	14200007 	bnez	at,80043754 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x210>
80043738:	00000000 	nop
8004373c:	08010dd1 	j	80043744 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x200>
80043740:	00000000 	nop
            }
            total += sum_bytes_in_usize(counts);
            break;
        }
    }
    total
80043744:	8fa10080 	lw	at,128(sp)
80043748:	afa10060 	sw	at,96(sp)
}
8004374c:	08010e4e 	j	80043938 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x3f4>
80043750:	00000000 	nop
    for chunk in body.chunks(CHUNK_SIZE) {
80043754:	8fa500a8 	lw	a1,168(sp)
80043758:	8fa600ac 	lw	a2,172(sp)
8004375c:	afa50110 	sw	a1,272(sp)
80043760:	afa60114 	sw	a2,276(sp)
        let mut counts = 0;
80043764:	afa000b0 	sw	zero,176(sp)
        let (unrolled_chunks, remainder) = chunk.as_chunks::<UNROLL_INNER>();
80043768:	3c018108 	lui	at,0x8108
8004376c:	2427c1e4 	addiu	a3,at,-15900
80043770:	27a400b4 	addiu	a0,sp,180
80043774:	0c0109c1 	jal	80042704 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$9as_chunks17h8beb15ae9ec351f9E>
80043778:	00000000 	nop
8004377c:	8fa400b4 	lw	a0,180(sp)
80043780:	8fa500b8 	lw	a1,184(sp)
80043784:	afa40118 	sw	a0,280(sp)
80043788:	afa5011c 	sw	a1,284(sp)
8004378c:	8fa200bc 	lw	v0,188(sp)
80043790:	afa2002c 	sw	v0,44(sp)
80043794:	8fa100c0 	lw	at,192(sp)
80043798:	afa10030 	sw	at,48(sp)
8004379c:	afa20120 	sw	v0,288(sp)
800437a0:	afa10124 	sw	at,292(sp)
        for unrolled in unrolled_chunks {
800437a4:	0c0106fd 	jal	80041bf4 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h506506b1e938b365E>
800437a8:	00000000 	nop
800437ac:	afa200c4 	sw	v0,196(sp)
800437b0:	afa300c8 	sw	v1,200(sp)
800437b4:	08010def 	j	800437bc <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x278>
800437b8:	00000000 	nop
800437bc:	27a400c4 	addiu	a0,sp,196
800437c0:	0c012094 	jal	80048250 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E>
800437c4:	00000000 	nop
800437c8:	afa200cc 	sw	v0,204(sp)
800437cc:	8fa100cc 	lw	at,204(sp)
800437d0:	1420000f 	bnez	at,80043810 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x2cc>
800437d4:	00000000 	nop
800437d8:	08010df8 	j	800437e0 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x29c>
800437dc:	00000000 	nop
        total += sum_bytes_in_usize(counts);
800437e0:	8fa400b0 	lw	a0,176(sp)
800437e4:	0c010e86 	jal	80043a18 <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E>
800437e8:	00000000 	nop
800437ec:	00400825 	move	at,v0
800437f0:	8fa20080 	lw	v0,128(sp)
800437f4:	00410821 	addu	at,v0,at
800437f8:	afa10028 	sw	at,40(sp)
800437fc:	0022082b 	sltu	at,at,v0
80043800:	14200015 	bnez	at,80043858 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x314>
80043804:	00000000 	nop
80043808:	08010e0c 	j	80043830 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x2ec>
8004380c:	00000000 	nop
        for unrolled in unrolled_chunks {
80043810:	8fa400cc 	lw	a0,204(sp)
80043814:	afa4012c 	sw	a0,300(sp)
            for &word in unrolled {
80043818:	0c00eac6 	jal	8003ab18 <_ZN4core5array98_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u3b$$u20$N$u5d$$GT$9into_iter17h8eaf4e7ff4d3c707E>
8004381c:	00000000 	nop
80043820:	afa200d0 	sw	v0,208(sp)
80043824:	afa300d4 	sw	v1,212(sp)
80043828:	08010e5b 	j	8004396c <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x428>
8004382c:	00000000 	nop
        total += sum_bytes_in_usize(counts);
80043830:	8fa50030 	lw	a1,48(sp)
80043834:	8fa4002c 	lw	a0,44(sp)
80043838:	8fa10028 	lw	at,40(sp)
8004383c:	afa10080 	sw	at,128(sp)
        if !remainder.is_empty() {
80043840:	0c0108d3 	jal	8004234c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8is_empty17h919103cb7fc266a9E>
80043844:	00000000 	nop
80043848:	1440ffb4 	bnez	v0,8004371c <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x1d8>
8004384c:	00000000 	nop
80043850:	08010e1a 	j	80043868 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x324>
80043854:	00000000 	nop
        total += sum_bytes_in_usize(counts);
80043858:	3c018108 	lui	at,0x8108
8004385c:	2424c1f4 	addiu	a0,at,-15884
80043860:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80043864:	00000000 	nop
            let mut counts = 0;
80043868:	8fa50030 	lw	a1,48(sp)
8004386c:	8fa4002c 	lw	a0,44(sp)
80043870:	afa000dc 	sw	zero,220(sp)
            for &word in remainder {
80043874:	0c010711 	jal	80041c44 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17heae6ddbb441c7c91E>
80043878:	00000000 	nop
8004387c:	afa200e0 	sw	v0,224(sp)
80043880:	afa300e4 	sw	v1,228(sp)
80043884:	08010e23 	j	8004388c <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x348>
80043888:	00000000 	nop
8004388c:	27a400e0 	addiu	a0,sp,224
80043890:	0c0120cc 	jal	80048330 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E>
80043894:	00000000 	nop
80043898:	afa200e8 	sw	v0,232(sp)
8004389c:	8fa100e8 	lw	at,232(sp)
800438a0:	1420000f 	bnez	at,800438e0 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x39c>
800438a4:	00000000 	nop
800438a8:	08010e2c 	j	800438b0 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x36c>
800438ac:	00000000 	nop
            total += sum_bytes_in_usize(counts);
800438b0:	8fa400dc 	lw	a0,220(sp)
800438b4:	0c010e86 	jal	80043a18 <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E>
800438b8:	00000000 	nop
800438bc:	00400825 	move	at,v0
800438c0:	8fa20080 	lw	v0,128(sp)
800438c4:	00410821 	addu	at,v0,at
800438c8:	afa10024 	sw	at,36(sp)
800438cc:	0022082b 	sltu	at,at,v0
800438d0:	14200015 	bnez	at,80043928 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x3e4>
800438d4:	00000000 	nop
800438d8:	08010e46 	j	80043918 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x3d4>
800438dc:	00000000 	nop
            for &word in remainder {
800438e0:	8fa100e8 	lw	at,232(sp)
800438e4:	8c240000 	lw	a0,0(at)
800438e8:	afa40128 	sw	a0,296(sp)
                counts += contains_non_continuation_byte(word);
800438ec:	0c010e7a 	jal	800439e8 <_ZN4core3str5count30contains_non_continuation_byte17ha09d8f91a66ddc5fE>
800438f0:	00000000 	nop
800438f4:	00400825 	move	at,v0
800438f8:	8fa200dc 	lw	v0,220(sp)
800438fc:	00410821 	addu	at,v0,at
80043900:	afa10020 	sw	at,32(sp)
80043904:	0022082b 	sltu	at,at,v0
80043908:	14200014 	bnez	at,8004395c <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x418>
8004390c:	00000000 	nop
80043910:	08010e53 	j	8004394c <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x408>
80043914:	00000000 	nop
            total += sum_bytes_in_usize(counts);
80043918:	8fa10024 	lw	at,36(sp)
8004391c:	afa10080 	sw	at,128(sp)
80043920:	08010dd1 	j	80043744 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x200>
80043924:	00000000 	nop
80043928:	3c018108 	lui	at,0x8108
8004392c:	2424c204 	addiu	a0,at,-15868
80043930:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80043934:	00000000 	nop
}
80043938:	8fa20060 	lw	v0,96(sp)
8004393c:	8fbf0144 	lw	ra,324(sp)
80043940:	27bd0148 	addiu	sp,sp,328
80043944:	03e00008 	jr	ra
80043948:	00000000 	nop
                counts += contains_non_continuation_byte(word);
8004394c:	8fa10020 	lw	at,32(sp)
80043950:	afa100dc 	sw	at,220(sp)
            for &word in remainder {
80043954:	08010e23 	j	8004388c <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x348>
80043958:	00000000 	nop
                counts += contains_non_continuation_byte(word);
8004395c:	3c018108 	lui	at,0x8108
80043960:	2424c214 	addiu	a0,at,-15852
80043964:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80043968:	00000000 	nop
8004396c:	27a400d0 	addiu	a0,sp,208
            for &word in unrolled {
80043970:	0c0120cc 	jal	80048330 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E>
80043974:	00000000 	nop
80043978:	afa200d8 	sw	v0,216(sp)
8004397c:	8fa100d8 	lw	at,216(sp)
80043980:	1020ff8e 	beqz	at,800437bc <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x278>
80043984:	00000000 	nop
80043988:	08010e64 	j	80043990 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x44c>
8004398c:	00000000 	nop
80043990:	8fa100d8 	lw	at,216(sp)
80043994:	8c240000 	lw	a0,0(at)
80043998:	afa40130 	sw	a0,304(sp)
                counts += contains_non_continuation_byte(word);
8004399c:	0c010e7a 	jal	800439e8 <_ZN4core3str5count30contains_non_continuation_byte17ha09d8f91a66ddc5fE>
800439a0:	00000000 	nop
800439a4:	00400825 	move	at,v0
800439a8:	8fa200b0 	lw	v0,176(sp)
800439ac:	00410821 	addu	at,v0,at
800439b0:	afa1001c 	sw	at,28(sp)
800439b4:	0022082b 	sltu	at,at,v0
800439b8:	14200007 	bnez	at,800439d8 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x494>
800439bc:	00000000 	nop
800439c0:	08010e72 	j	800439c8 <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x484>
800439c4:	00000000 	nop
800439c8:	8fa1001c 	lw	at,28(sp)
800439cc:	afa100b0 	sw	at,176(sp)
            for &word in unrolled {
800439d0:	08010e5b 	j	8004396c <_ZN4core3str5count14do_count_chars17h548c9679bf40fa52E+0x428>
800439d4:	00000000 	nop
                counts += contains_non_continuation_byte(word);
800439d8:	3c018108 	lui	at,0x8108
800439dc:	2424c224 	addiu	a0,at,-15836
800439e0:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800439e4:	00000000 	nop

800439e8 <_ZN4core3str5count30contains_non_continuation_byte17ha09d8f91a66ddc5fE>:
// Checks each byte of `w` to see if it contains the first byte in a UTF-8
// sequence. Bytes in `w` which are continuation bytes are left as `0x00` (e.g.
// false), and bytes which are non-continuation bytes are left as `0x01` (e.g.
// true)
#[inline]
fn contains_non_continuation_byte(w: usize) -> usize {
800439e8:	27bdfff8 	addiu	sp,sp,-8
800439ec:	afa40004 	sw	a0,4(sp)
    const LSB: usize = usize::repeat_u8(0x01);
    ((!w >> 7) | (w >> 6)) & LSB
800439f0:	00800827 	nor	at,a0,zero
800439f4:	000109c2 	srl	at,at,0x7
800439f8:	00041182 	srl	v0,a0,0x6
800439fc:	00220825 	or	at,at,v0
80043a00:	3c020101 	lui	v0,0x101
80043a04:	34420101 	ori	v0,v0,0x101
80043a08:	00221024 	and	v0,at,v0
80043a0c:	27bd0008 	addiu	sp,sp,8
}
80043a10:	03e00008 	jr	ra
80043a14:	00000000 	nop

80043a18 <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E>:

// Morally equivalent to `values.to_ne_bytes().into_iter().sum::<usize>()`, but
// more efficient.
#[inline]
fn sum_bytes_in_usize(values: usize) -> usize {
80043a18:	27bdffd0 	addiu	sp,sp,-48
80043a1c:	afa40020 	sw	a0,32(sp)
80043a20:	3c0100ff 	lui	at,0xff
80043a24:	342300ff 	ori	v1,at,0xff
    const LSB_SHORTS: usize = usize::repeat_u16(0x0001);
    const SKIP_BYTES: usize = usize::repeat_u16(0x00ff);

    let pair_sum: usize = (values & SKIP_BYTES) + ((values >> 8) & SKIP_BYTES);
80043a28:	00830824 	and	at,a0,v1
80043a2c:	00041202 	srl	v0,a0,0x8
80043a30:	00431024 	and	v0,v0,v1
80043a34:	00220821 	addu	at,at,v0
80043a38:	afa1001c 	sw	at,28(sp)
80043a3c:	24010000 	li	at,0
80043a40:	14000013 	bnez	zero,80043a90 <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E+0x78>
80043a44:	00000000 	nop
80043a48:	08010e94 	j	80043a50 <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E+0x38>
80043a4c:	00000000 	nop
80043a50:	8fa2001c 	lw	v0,28(sp)
80043a54:	afa20024 	sw	v0,36(sp)
80043a58:	afa20028 	sw	v0,40(sp)
80043a5c:	3c010001 	lui	at,0x1
80043a60:	34210001 	ori	at,at,0x1
80043a64:	afa1002c 	sw	at,44(sp)
            intrinsics::wrapping_mul(self, rhs)
80043a68:	00020c00 	sll	at,v0,0x10
80043a6c:	00220821 	addu	at,at,v0
80043a70:	afa10014 	sw	at,20(sp)
80043a74:	24010010 	li	at,16
80043a78:	afa10018 	sw	at,24(sp)
80043a7c:	24010000 	li	at,0
    pair_sum.wrapping_mul(LSB_SHORTS) >> ((USIZE_SIZE - 2) * 8)
80043a80:	1400000d 	bnez	zero,80043ab8 <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E+0xa0>
80043a84:	00000000 	nop
80043a88:	08010ea8 	j	80043aa0 <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E+0x88>
80043a8c:	00000000 	nop
    let pair_sum: usize = (values & SKIP_BYTES) + ((values >> 8) & SKIP_BYTES);
80043a90:	3c018108 	lui	at,0x8108
80043a94:	2424c234 	addiu	a0,at,-15820
80043a98:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80043a9c:	00000000 	nop
    pair_sum.wrapping_mul(LSB_SHORTS) >> ((USIZE_SIZE - 2) * 8)
80043aa0:	8fa10018 	lw	at,24(sp)
80043aa4:	2c210020 	sltiu	at,at,32
80043aa8:	14200007 	bnez	at,80043ac8 <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E+0xb0>
80043aac:	00000000 	nop
80043ab0:	08010eb8 	j	80043ae0 <_ZN4core3str5count18sum_bytes_in_usize17h83b84f064e85a3d6E+0xc8>
80043ab4:	00000000 	nop
80043ab8:	3c018108 	lui	at,0x8108
80043abc:	2424c244 	addiu	a0,at,-15804
80043ac0:	0c011b38 	jal	80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>
80043ac4:	00000000 	nop
80043ac8:	8fa10014 	lw	at,20(sp)
80043acc:	8fa20018 	lw	v0,24(sp)
80043ad0:	00411006 	srlv	v0,at,v0
80043ad4:	27bd0030 	addiu	sp,sp,48
}
80043ad8:	03e00008 	jr	ra
80043adc:	00000000 	nop
    pair_sum.wrapping_mul(LSB_SHORTS) >> ((USIZE_SIZE - 2) * 8)
80043ae0:	3c018108 	lui	at,0x8108
80043ae4:	2424c254 	addiu	a0,at,-15788
80043ae8:	0c011b54 	jal	80046d50 <_ZN4core9panicking11panic_const24panic_const_shr_overflow17h51109cf1c6739500E>
80043aec:	00000000 	nop

80043af0 <_ZN4core3str5count23char_count_general_case17ha5b861e4fe7674b1E>:

// This is the most direct implementation of the concept of "count the number of
// bytes in the string which are not continuation bytes", and is used for the
// head and tail of the input string (the first and last item in the tuple
// returned by `slice::align_to`).
fn char_count_general_case(s: &[u8]) -> usize {
80043af0:	27bdffe0 	addiu	sp,sp,-32
80043af4:	afbf001c 	sw	ra,28(sp)
80043af8:	afa40014 	sw	a0,20(sp)
80043afc:	afa50018 	sw	a1,24(sp)
    s.iter().filter(|&&byte| !super::validations::utf8_is_cont_byte(byte)).count()
80043b00:	0c010948 	jal	80042520 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9fbf31f27946410E>
80043b04:	00000000 	nop
80043b08:	00402025 	move	a0,v0
80043b0c:	00602825 	move	a1,v1
80043b10:	0c00efc4 	jal	8003bf10 <_ZN4core4iter6traits8iterator8Iterator6filter17h4fb980de80130199E>
80043b14:	00000000 	nop
80043b18:	00402025 	move	a0,v0
80043b1c:	00602825 	move	a1,v1
80043b20:	0c00ee35 	jal	8003b8d4 <_ZN108_$LT$core..iter..adapters..filter..Filter$LT$I$C$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count17ha76fd5484bcdeddfE>
80043b24:	00000000 	nop
}
80043b28:	8fbf001c 	lw	ra,28(sp)
80043b2c:	27bd0020 	addiu	sp,sp,32
80043b30:	03e00008 	jr	ra
80043b34:	00000000 	nop

80043b38 <_ZN4core3str5count23char_count_general_case28_$u7b$$u7b$closure$u7d$$u7d$17h2bd39cb177afb02cE>:
    s.iter().filter(|&&byte| !super::validations::utf8_is_cont_byte(byte)).count()
80043b38:	27bdffe0 	addiu	sp,sp,-32
80043b3c:	afbf001c 	sw	ra,28(sp)
80043b40:	afa40010 	sw	a0,16(sp)
80043b44:	afa50014 	sw	a1,20(sp)
80043b48:	8ca10000 	lw	at,0(a1)
80043b4c:	90240000 	lbu	a0,0(at)
80043b50:	a3a4001b 	sb	a0,27(sp)
80043b54:	0c01111a 	jal	80044468 <_ZN4core3str11validations17utf8_is_cont_byte17hfd9fecd852438cdeE>
80043b58:	00000000 	nop
80043b5c:	38420001 	xori	v0,v0,0x1
80043b60:	8fbf001c 	lw	ra,28(sp)
80043b64:	27bd0020 	addiu	sp,sp,32
80043b68:	03e00008 	jr	ra
80043b6c:	00000000 	nop

80043b70 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h322ca2115794f866E>:
    fn next(&mut self) -> Option<char> {
80043b70:	27bdffe8 	addiu	sp,sp,-24
80043b74:	afbf0014 	sw	ra,20(sp)
80043b78:	afa40010 	sw	a0,16(sp)
        unsafe { next_code_point(&mut self.iter).map(|ch| char::from_u32_unchecked(ch)) }
80043b7c:	0c011121 	jal	80044484 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E>
80043b80:	00000000 	nop
80043b84:	00402025 	move	a0,v0
80043b88:	00602825 	move	a1,v1
80043b8c:	0c00f116 	jal	8003c458 <_ZN4core6option15Option$LT$T$GT$3map17h5c59602e60019a3bE>
80043b90:	00000000 	nop
    }
80043b94:	8fbf0014 	lw	ra,20(sp)
80043b98:	27bd0018 	addiu	sp,sp,24
80043b9c:	03e00008 	jr	ra
80043ba0:	00000000 	nop

80043ba4 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17he800632fb07a6c54E>:
        unsafe { next_code_point(&mut self.iter).map(|ch| char::from_u32_unchecked(ch)) }
80043ba4:	27bdffe0 	addiu	sp,sp,-32
80043ba8:	afbf001c 	sw	ra,28(sp)
80043bac:	afa40018 	sw	a0,24(sp)
80043bb0:	0c00eb9f 	jal	8003ae7c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$18from_u32_unchecked17h9f49626bc6b588f7E>
80043bb4:	00000000 	nop
80043bb8:	8fbf001c 	lw	ra,28(sp)
80043bbc:	27bd0020 	addiu	sp,sp,32
80043bc0:	03e00008 	jr	ra
80043bc4:	00000000 	nop

80043bc8 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$5count17h53f43070aad197f4E>:

    #[inline]
    fn count(self) -> usize {
80043bc8:	27bdffe0 	addiu	sp,sp,-32
80043bcc:	afbf001c 	sw	ra,28(sp)
80043bd0:	afa40014 	sw	a0,20(sp)
80043bd4:	afa50018 	sw	a1,24(sp)
80043bd8:	27a40014 	addiu	a0,sp,20
        super::count::count_chars(self.as_str())
80043bdc:	0c010f01 	jal	80043c04 <_ZN4core3str4iter5Chars6as_str17h1617b32cce1037c4E>
80043be0:	00000000 	nop
80043be4:	00402025 	move	a0,v0
80043be8:	00602825 	move	a1,v1
80043bec:	0c010d21 	jal	80043484 <_ZN4core3str5count11count_chars17hb701d6a0293152ceE>
80043bf0:	00000000 	nop
    }
80043bf4:	8fbf001c 	lw	ra,28(sp)
80043bf8:	27bd0020 	addiu	sp,sp,32
80043bfc:	03e00008 	jr	ra
80043c00:	00000000 	nop

80043c04 <_ZN4core3str4iter5Chars6as_str17h1617b32cce1037c4E>:
    /// assert_eq!(chars.as_str(), "");
    /// ```
    #[stable(feature = "iter_to_slice", since = "1.4.0")]
    #[must_use]
    #[inline]
    pub fn as_str(&self) -> &'a str {
80043c04:	27bdffe8 	addiu	sp,sp,-24
80043c08:	afbf0014 	sw	ra,20(sp)
80043c0c:	afa40010 	sw	a0,16(sp)
        // SAFETY: `Chars` is only made from a str, which guarantees the iter is valid UTF-8.
        unsafe { from_utf8_unchecked(self.iter.as_slice()) }
80043c10:	0c010802 	jal	80042008 <_ZN4core5slice4iter13Iter$LT$T$GT$8as_slice17h7c85becc54e8e8beE>
80043c14:	00000000 	nop
80043c18:	00402025 	move	a0,v0
80043c1c:	00602825 	move	a1,v1
80043c20:	0c010d19 	jal	80043464 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>
80043c24:	00000000 	nop
    }
80043c28:	8fbf0014 	lw	ra,20(sp)
80043c2c:	27bd0018 	addiu	sp,sp,24
80043c30:	03e00008 	jr	ra
80043c34:	00000000 	nop

80043c38 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<'a> Iterator for CharIndices<'a> {
    type Item = (usize, char);

    #[inline]
    fn next(&mut self) -> Option<(usize, char)> {
80043c38:	27bdff88 	addiu	sp,sp,-120
80043c3c:	afbf0074 	sw	ra,116(sp)
80043c40:	00800825 	move	at,a0
80043c44:	afa10024 	sw	at,36(sp)
80043c48:	afa10040 	sw	at,64(sp)
80043c4c:	afa10068 	sw	at,104(sp)
                len!(self)
80043c50:	24220004 	addiu	v0,at,4
80043c54:	afa20070 	sw	v0,112(sp)
80043c58:	8c240004 	lw	a0,4(at)
80043c5c:	afa4006c 	sw	a0,108(sp)
80043c60:	8c250000 	lw	a1,0(at)
80043c64:	0c00e521 	jal	80039484 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$7sub_ptr17h9b9ab3e8577ce557E>
80043c68:	00000000 	nop
80043c6c:	8fa40024 	lw	a0,36(sp)
80043c70:	afa20064 	sw	v0,100(sp)
            }
80043c74:	8fa10064 	lw	at,100(sp)
80043c78:	afa10028 	sw	at,40(sp)
        let pre_len = self.iter.iter.len();
80043c7c:	afa10044 	sw	at,68(sp)
        match self.iter.next() {
80043c80:	0c010edc 	jal	80043b70 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h322ca2115794f866E>
80043c84:	00000000 	nop
80043c88:	afa20034 	sw	v0,52(sp)
80043c8c:	8fa10034 	lw	at,52(sp)
80043c90:	3c020011 	lui	v0,0x11
80043c94:	14220007 	bne	at,v0,80043cb4 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0x7c>
80043c98:	00000000 	nop
80043c9c:	08010f29 	j	80043ca4 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0x6c>
80043ca0:	00000000 	nop
80043ca4:	3c010011 	lui	at,0x11
            None => None,
80043ca8:	afa10030 	sw	at,48(sp)
80043cac:	08010f47 	j	80043d1c <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0xe4>
80043cb0:	00000000 	nop
            Some(ch) => {
80043cb4:	8fa10024 	lw	at,36(sp)
80043cb8:	8fa20034 	lw	v0,52(sp)
80043cbc:	afa20018 	sw	v0,24(sp)
80043cc0:	afa20048 	sw	v0,72(sp)
                let index = self.front_offset;
80043cc4:	8c220008 	lw	v0,8(at)
80043cc8:	afa2001c 	sw	v0,28(sp)
80043ccc:	afa2004c 	sw	v0,76(sp)
80043cd0:	afa10058 	sw	at,88(sp)
                len!(self)
80043cd4:	24220004 	addiu	v0,at,4
80043cd8:	afa20060 	sw	v0,96(sp)
80043cdc:	8c240004 	lw	a0,4(at)
80043ce0:	afa4005c 	sw	a0,92(sp)
80043ce4:	8c250000 	lw	a1,0(at)
80043ce8:	0c00e521 	jal	80039484 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$7sub_ptr17h9b9ab3e8577ce557E>
80043cec:	00000000 	nop
80043cf0:	8fa10028 	lw	at,40(sp)
80043cf4:	afa20054 	sw	v0,84(sp)
            }
80043cf8:	8fa20054 	lw	v0,84(sp)
                let len = self.iter.iter.len();
80043cfc:	afa20050 	sw	v0,80(sp)
                self.front_offset += pre_len - len;
80043d00:	00221823 	subu	v1,at,v0
80043d04:	afa30020 	sw	v1,32(sp)
80043d08:	0022082b 	sltu	at,at,v0
80043d0c:	14200013 	bnez	at,80043d5c <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0x124>
80043d10:	00000000 	nop
80043d14:	08010f4d 	j	80043d34 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0xfc>
80043d18:	00000000 	nop
                Some((index, ch))
            }
        }
    }
80043d1c:	8fa2002c 	lw	v0,44(sp)
80043d20:	8fa30030 	lw	v1,48(sp)
80043d24:	8fbf0074 	lw	ra,116(sp)
80043d28:	27bd0078 	addiu	sp,sp,120
80043d2c:	03e00008 	jr	ra
80043d30:	00000000 	nop
                self.front_offset += pre_len - len;
80043d34:	8fa10020 	lw	at,32(sp)
80043d38:	8fa20024 	lw	v0,36(sp)
80043d3c:	8c420008 	lw	v0,8(v0)
80043d40:	00410821 	addu	at,v0,at
80043d44:	afa10014 	sw	at,20(sp)
80043d48:	0022082b 	sltu	at,at,v0
80043d4c:	14200014 	bnez	at,80043da0 <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0x168>
80043d50:	00000000 	nop
80043d54:	08010f5b 	j	80043d6c <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0x134>
80043d58:	00000000 	nop
80043d5c:	3c018108 	lui	at,0x8108
80043d60:	2424c2d4 	addiu	a0,at,-15660
80043d64:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80043d68:	00000000 	nop
80043d6c:	8fa10018 	lw	at,24(sp)
80043d70:	8fa2001c 	lw	v0,28(sp)
80043d74:	8fa30014 	lw	v1,20(sp)
80043d78:	8fa40024 	lw	a0,36(sp)
80043d7c:	ac830008 	sw	v1,8(a0)
                Some((index, ch))
80043d80:	afa20038 	sw	v0,56(sp)
80043d84:	afa1003c 	sw	at,60(sp)
80043d88:	8fa20038 	lw	v0,56(sp)
80043d8c:	8fa1003c 	lw	at,60(sp)
80043d90:	afa2002c 	sw	v0,44(sp)
80043d94:	afa10030 	sw	at,48(sp)
            }
80043d98:	08010f47 	j	80043d1c <_ZN87_$LT$core..str..iter..CharIndices$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h722ba26c1e0f349aE+0xe4>
80043d9c:	00000000 	nop
                self.front_offset += pre_len - len;
80043da0:	3c018108 	lui	at,0x8108
80043da4:	2424c2e4 	addiu	a0,at,-15644
80043da8:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80043dac:	00000000 	nop

80043db0 <_ZN4core3str6traits66_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$str$GT$5index17h3aebf7787939ace3E>:
    I: SliceIndex<str>,
{
    type Output = I::Output;

    #[inline]
    fn index(&self, index: I) -> &I::Output {
80043db0:	27bdffc8 	addiu	sp,sp,-56
80043db4:	afbf0034 	sw	ra,52(sp)
80043db8:	afa7001c 	sw	a3,28(sp)
80043dbc:	afa60020 	sw	a2,32(sp)
80043dc0:	00a03825 	move	a3,a1
80043dc4:	8fa5001c 	lw	a1,28(sp)
80043dc8:	00803025 	move	a2,a0
80043dcc:	8fa40020 	lw	a0,32(sp)
80043dd0:	8fa10048 	lw	at,72(sp)
80043dd4:	afa60024 	sw	a2,36(sp)
80043dd8:	afa70028 	sw	a3,40(sp)
80043ddc:	afa4002c 	sw	a0,44(sp)
80043de0:	afa50030 	sw	a1,48(sp)
        index.index(self)
80043de4:	03a01025 	move	v0,sp
80043de8:	ac410010 	sw	at,16(v0)
80043dec:	0c011000 	jal	80044000 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$5index17h9e673dd3fdef6a34E>
80043df0:	00000000 	nop
    }
80043df4:	8fbf0034 	lw	ra,52(sp)
80043df8:	27bd0038 	addiu	sp,sp,56
80043dfc:	03e00008 	jr	ra
80043e00:	00000000 	nop

80043e04 <_ZN4core3str6traits66_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$str$GT$5index17h530a1160dbfa1a41E>:
    fn index(&self, index: I) -> &I::Output {
80043e04:	27bdffd8 	addiu	sp,sp,-40
80043e08:	afbf0024 	sw	ra,36(sp)
80043e0c:	afa60014 	sw	a2,20(sp)
80043e10:	00a03025 	move	a2,a1
80043e14:	00802825 	move	a1,a0
80043e18:	8fa40014 	lw	a0,20(sp)
80043e1c:	afa50018 	sw	a1,24(sp)
80043e20:	afa6001c 	sw	a2,28(sp)
80043e24:	afa40020 	sw	a0,32(sp)
        index.index(self)
80043e28:	0c0110c5 	jal	80044314 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$5index17h36cebc17e135b426E>
80043e2c:	00000000 	nop
    }
80043e30:	8fbf0024 	lw	ra,36(sp)
80043e34:	27bd0028 	addiu	sp,sp,40
80043e38:	03e00008 	jr	ra
80043e3c:	00000000 	nop

80043e40 <_ZN4core3str6traits66_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$str$GT$5index17hba11477e2e0499e2E>:
    fn index(&self, index: I) -> &I::Output {
80043e40:	27bdffd8 	addiu	sp,sp,-40
80043e44:	afbf0024 	sw	ra,36(sp)
80043e48:	afa60014 	sw	a2,20(sp)
80043e4c:	00a03025 	move	a2,a1
80043e50:	00802825 	move	a1,a0
80043e54:	8fa40014 	lw	a0,20(sp)
80043e58:	afa50018 	sw	a1,24(sp)
80043e5c:	afa6001c 	sw	a2,28(sp)
80043e60:	afa40020 	sw	a0,32(sp)
        index.index(self)
80043e64:	0c011061 	jal	80044184 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$5index17h396b8ff5c19b629dE>
80043e68:	00000000 	nop
    }
80043e6c:	8fbf0024 	lw	ra,36(sp)
80043e70:	27bd0028 	addiu	sp,sp,40
80043e74:	03e00008 	jr	ra
80043e78:	00000000 	nop

80043e7c <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E>:
#[stable(feature = "str_checked_slicing", since = "1.20.0")]
#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
unsafe impl SliceIndex<str> for ops::Range<usize> {
    type Output = str;
    #[inline]
    fn get(self, slice: &str) -> Option<&Self::Output> {
80043e7c:	27bdffc0 	addiu	sp,sp,-64
80043e80:	afbf003c 	sw	ra,60(sp)
80043e84:	afa70014 	sw	a3,20(sp)
80043e88:	afa60018 	sw	a2,24(sp)
80043e8c:	afa5001c 	sw	a1,28(sp)
80043e90:	afa40020 	sw	a0,32(sp)
80043e94:	afa4002c 	sw	a0,44(sp)
80043e98:	afa50030 	sw	a1,48(sp)
80043e9c:	afa60034 	sw	a2,52(sp)
80043ea0:	afa70038 	sw	a3,56(sp)
        if self.start <= self.end
80043ea4:	00a4082b 	sltu	at,a1,a0
80043ea8:	10200006 	beqz	at,80043ec4 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0x48>
80043eac:	00000000 	nop
80043eb0:	08010fae 	j	80043eb8 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0x3c>
80043eb4:	00000000 	nop
            // SAFETY: just checked that `start` and `end` are on a char boundary,
            // and we are passing in a safe reference, so the return value will also be one.
            // We also checked char boundaries, so this is valid UTF-8.
            Some(unsafe { &*self.get_unchecked(slice) })
        } else {
            None
80043eb8:	afa00024 	sw	zero,36(sp)
        if self.start <= self.end
80043ebc:	08010fcd 	j	80043f34 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0xb8>
80043ec0:	00000000 	nop
            && slice.is_char_boundary(self.start)
80043ec4:	8fa60020 	lw	a2,32(sp)
80043ec8:	8fa50014 	lw	a1,20(sp)
80043ecc:	8fa40018 	lw	a0,24(sp)
80043ed0:	0c011329 	jal	80044ca4 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E>
80043ed4:	00000000 	nop
80043ed8:	1040fff7 	beqz	v0,80043eb8 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0x3c>
80043edc:	00000000 	nop
80043ee0:	08010fba 	j	80043ee8 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0x6c>
80043ee4:	00000000 	nop
            && slice.is_char_boundary(self.end)
80043ee8:	8fa6001c 	lw	a2,28(sp)
80043eec:	8fa50014 	lw	a1,20(sp)
80043ef0:	8fa40018 	lw	a0,24(sp)
80043ef4:	0c011329 	jal	80044ca4 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E>
80043ef8:	00000000 	nop
80043efc:	1040ffee 	beqz	v0,80043eb8 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0x3c>
80043f00:	00000000 	nop
80043f04:	08010fc3 	j	80043f0c <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0x90>
80043f08:	00000000 	nop
            Some(unsafe { &*self.get_unchecked(slice) })
80043f0c:	8fa70014 	lw	a3,20(sp)
80043f10:	8fa60018 	lw	a2,24(sp)
80043f14:	8fa5001c 	lw	a1,28(sp)
80043f18:	8fa40020 	lw	a0,32(sp)
80043f1c:	0c010fd3 	jal	80043f4c <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked17hffa5e1fde556c725E>
80043f20:	00000000 	nop
80043f24:	afa20024 	sw	v0,36(sp)
80043f28:	afa30028 	sw	v1,40(sp)
        if self.start <= self.end
80043f2c:	08010fcd 	j	80043f34 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E+0xb8>
80043f30:	00000000 	nop
        }
    }
80043f34:	8fa20024 	lw	v0,36(sp)
80043f38:	8fa30028 	lw	v1,40(sp)
80043f3c:	8fbf003c 	lw	ra,60(sp)
80043f40:	27bd0040 	addiu	sp,sp,64
80043f44:	03e00008 	jr	ra
80043f48:	00000000 	nop

80043f4c <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked17hffa5e1fde556c725E>:
        } else {
            None
        }
    }
    #[inline]
    unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
80043f4c:	27bdffb0 	addiu	sp,sp,-80
80043f50:	afbf004c 	sw	ra,76(sp)
80043f54:	afa70018 	sw	a3,24(sp)
80043f58:	afa6001c 	sw	a2,28(sp)
80043f5c:	afa50020 	sw	a1,32(sp)
80043f60:	afa40024 	sw	a0,36(sp)
80043f64:	afa40028 	sw	a0,40(sp)
80043f68:	afa5002c 	sw	a1,44(sp)
80043f6c:	afa60030 	sw	a2,48(sp)
80043f70:	afa70034 	sw	a3,52(sp)
        let slice = slice as *const [u8];
80043f74:	afa60038 	sw	a2,56(sp)
80043f78:	afa7003c 	sw	a3,60(sp)

        assert_unsafe_precondition!(
80043f7c:	08010fe1 	j	80043f84 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked17hffa5e1fde556c725E+0x38>
80043f80:	00000000 	nop
            check_library_ub,
            "str::get_unchecked requires that the range is within the string slice",
            (
                start: usize = self.start,
                end: usize = self.end,
                len: usize = slice.len()
80043f84:	8fa50018 	lw	a1,24(sp)
80043f88:	8fa4001c 	lw	a0,28(sp)
80043f8c:	0c00e68f 	jal	80039a3c <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hb4a60cfd4b05d1f1E>
80043f90:	00000000 	nop
80043f94:	8fa40024 	lw	a0,36(sp)
80043f98:	8fa50020 	lw	a1,32(sp)
80043f9c:	00403025 	move	a2,v0
        assert_unsafe_precondition!(
80043fa0:	0c0122b7 	jal	80048adc <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked18precondition_check17h0c93f18c8b2c7519E>
80043fa4:	00000000 	nop
80043fa8:	08010fec 	j	80043fb0 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked17hffa5e1fde556c725E+0x64>
80043fac:	00000000 	nop
        );

        // SAFETY: the caller guarantees that `self` is in bounds of `slice`
        // which satisfies all the conditions for `add`.
        unsafe {
            let new_len = unchecked_sub(self.end, self.start);
80043fb0:	8fa20024 	lw	v0,36(sp)
80043fb4:	8fa50018 	lw	a1,24(sp)
80043fb8:	8fa4001c 	lw	a0,28(sp)
80043fbc:	8fa10020 	lw	at,32(sp)
80043fc0:	00220823 	subu	at,at,v0
80043fc4:	afa10014 	sw	at,20(sp)
80043fc8:	afa10040 	sw	at,64(sp)
            ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), new_len) as *const str
80043fcc:	0c00e6bf 	jal	80039afc <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17hdacca62b30e596aaE>
80043fd0:	00000000 	nop
80043fd4:	8fa10024 	lw	at,36(sp)
80043fd8:	8fa50014 	lw	a1,20(sp)
80043fdc:	afa20044 	sw	v0,68(sp)
80043fe0:	afa10048 	sw	at,72(sp)
80043fe4:	00412021 	addu	a0,v0,at
80043fe8:	0c00e6c6 	jal	80039b18 <_ZN4core3ptr20slice_from_raw_parts17h0ab563afab92ed6fE>
80043fec:	00000000 	nop
        }
    }
80043ff0:	8fbf004c 	lw	ra,76(sp)
80043ff4:	27bd0050 	addiu	sp,sp,80
80043ff8:	03e00008 	jr	ra
80043ffc:	00000000 	nop

80044000 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$5index17h9e673dd3fdef6a34E>:
            let new_len = unchecked_sub(self.end, self.start);
            ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), new_len) as *mut str
        }
    }
    #[inline]
    fn index(self, slice: &str) -> &Self::Output {
80044000:	27bdffa0 	addiu	sp,sp,-96
80044004:	afbf005c 	sw	ra,92(sp)
80044008:	afa70018 	sw	a3,24(sp)
8004400c:	afa6001c 	sw	a2,28(sp)
80044010:	8fa10070 	lw	at,112(sp)
80044014:	afa10020 	sw	at,32(sp)
80044018:	afa4003c 	sw	a0,60(sp)
8004401c:	afa50040 	sw	a1,64(sp)
80044020:	afa60044 	sw	a2,68(sp)
80044024:	afa70048 	sw	a3,72(sp)
        let (start, end) = (self.start, self.end);
80044028:	afa4002c 	sw	a0,44(sp)
8004402c:	afa50030 	sw	a1,48(sp)
80044030:	8fa1002c 	lw	at,44(sp)
80044034:	afa10024 	sw	at,36(sp)
80044038:	afa1004c 	sw	at,76(sp)
8004403c:	8fa10030 	lw	at,48(sp)
80044040:	afa10028 	sw	at,40(sp)
80044044:	afa10050 	sw	at,80(sp)
        match self.get(slice) {
80044048:	0c010f9f 	jal	80043e7c <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$3get17h98e9fdb949c93967E>
8004404c:	00000000 	nop
80044050:	afa20034 	sw	v0,52(sp)
80044054:	afa30038 	sw	v1,56(sp)
80044058:	8fa10034 	lw	at,52(sp)
8004405c:	1420000c 	bnez	at,80044090 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$5index17h9e673dd3fdef6a34E+0x90>
80044060:	00000000 	nop
80044064:	0801101b 	j	8004406c <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$5index17h9e673dd3fdef6a34E+0x6c>
80044068:	00000000 	nop
            Some(s) => s,
            None => super::slice_error_fail(slice, start, end),
8004406c:	8fa70028 	lw	a3,40(sp)
80044070:	8fa60024 	lw	a2,36(sp)
80044074:	8fa50018 	lw	a1,24(sp)
80044078:	8fa4001c 	lw	a0,28(sp)
8004407c:	8fa10020 	lw	at,32(sp)
80044080:	03a01025 	move	v0,sp
80044084:	ac410010 	sw	at,16(v0)
80044088:	0c0111a5 	jal	80044694 <_ZN4core3str16slice_error_fail17h3a85009d830cf91cE>
8004408c:	00000000 	nop
            Some(s) => s,
80044090:	8fa20034 	lw	v0,52(sp)
80044094:	8fa30038 	lw	v1,56(sp)
80044098:	afa20054 	sw	v0,84(sp)
8004409c:	afa30058 	sw	v1,88(sp)
        }
    }
800440a0:	8fbf005c 	lw	ra,92(sp)
800440a4:	27bd0060 	addiu	sp,sp,96
800440a8:	03e00008 	jr	ra
800440ac:	00000000 	nop

800440b0 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$3get17h4c2a4b91bf57c6dcE>:
#[stable(feature = "str_checked_slicing", since = "1.20.0")]
#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
unsafe impl SliceIndex<str> for ops::RangeTo<usize> {
    type Output = str;
    #[inline]
    fn get(self, slice: &str) -> Option<&Self::Output> {
800440b0:	27bdffc8 	addiu	sp,sp,-56
800440b4:	afbf0034 	sw	ra,52(sp)
800440b8:	afa60014 	sw	a2,20(sp)
800440bc:	00a00825 	move	at,a1
800440c0:	8fa50014 	lw	a1,20(sp)
800440c4:	afa10018 	sw	at,24(sp)
800440c8:	00803025 	move	a2,a0
800440cc:	8fa40018 	lw	a0,24(sp)
800440d0:	afa6001c 	sw	a2,28(sp)
800440d4:	afa60028 	sw	a2,40(sp)
800440d8:	afa4002c 	sw	a0,44(sp)
800440dc:	afa50030 	sw	a1,48(sp)
        if slice.is_char_boundary(self.end) {
800440e0:	0c011329 	jal	80044ca4 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E>
800440e4:	00000000 	nop
800440e8:	14400006 	bnez	v0,80044104 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$3get17h4c2a4b91bf57c6dcE+0x54>
800440ec:	00000000 	nop
800440f0:	0801103e 	j	800440f8 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$3get17h4c2a4b91bf57c6dcE+0x48>
800440f4:	00000000 	nop
            // SAFETY: just checked that `end` is on a char boundary,
            // and we are passing in a safe reference, so the return value will also be one.
            Some(unsafe { &*self.get_unchecked(slice) })
        } else {
            None
800440f8:	afa00020 	sw	zero,32(sp)
        if slice.is_char_boundary(self.end) {
800440fc:	0801104a 	j	80044128 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$3get17h4c2a4b91bf57c6dcE+0x78>
80044100:	00000000 	nop
            Some(unsafe { &*self.get_unchecked(slice) })
80044104:	8fa60014 	lw	a2,20(sp)
80044108:	8fa50018 	lw	a1,24(sp)
8004410c:	8fa4001c 	lw	a0,28(sp)
80044110:	0c011050 	jal	80044140 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$13get_unchecked17h14add8345fc880e4E>
80044114:	00000000 	nop
80044118:	afa20020 	sw	v0,32(sp)
8004411c:	afa30024 	sw	v1,36(sp)
        if slice.is_char_boundary(self.end) {
80044120:	0801104a 	j	80044128 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$3get17h4c2a4b91bf57c6dcE+0x78>
80044124:	00000000 	nop
        }
    }
80044128:	8fa20020 	lw	v0,32(sp)
8004412c:	8fa30024 	lw	v1,36(sp)
80044130:	8fbf0034 	lw	ra,52(sp)
80044134:	27bd0038 	addiu	sp,sp,56
80044138:	03e00008 	jr	ra
8004413c:	00000000 	nop

80044140 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$13get_unchecked17h14add8345fc880e4E>:
        } else {
            None
        }
    }
    #[inline]
    unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
80044140:	27bdffd8 	addiu	sp,sp,-40
80044144:	afbf0024 	sw	ra,36(sp)
80044148:	00c03825 	move	a3,a2
8004414c:	00a03025 	move	a2,a1
80044150:	afa40018 	sw	a0,24(sp)
80044154:	afa6001c 	sw	a2,28(sp)
80044158:	afa70020 	sw	a3,32(sp)
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked`.
        unsafe { (0..self.end).get_unchecked(slice) }
8004415c:	afa00010 	sw	zero,16(sp)
80044160:	afa40014 	sw	a0,20(sp)
80044164:	8fa40010 	lw	a0,16(sp)
80044168:	8fa50014 	lw	a1,20(sp)
8004416c:	0c010fd3 	jal	80043f4c <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked17hffa5e1fde556c725E>
80044170:	00000000 	nop
    }
80044174:	8fbf0024 	lw	ra,36(sp)
80044178:	27bd0028 	addiu	sp,sp,40
8004417c:	03e00008 	jr	ra
80044180:	00000000 	nop

80044184 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$5index17h396b8ff5c19b629dE>:
    unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
        unsafe { (0..self.end).get_unchecked_mut(slice) }
    }
    #[inline]
    fn index(self, slice: &str) -> &Self::Output {
80044184:	27bdffb0 	addiu	sp,sp,-80
80044188:	afbf004c 	sw	ra,76(sp)
8004418c:	afa7001c 	sw	a3,28(sp)
80044190:	afa60020 	sw	a2,32(sp)
80044194:	afa50024 	sw	a1,36(sp)
80044198:	afa40028 	sw	a0,40(sp)
8004419c:	afa40034 	sw	a0,52(sp)
800441a0:	afa50038 	sw	a1,56(sp)
800441a4:	afa6003c 	sw	a2,60(sp)
        let end = self.end;
800441a8:	afa40040 	sw	a0,64(sp)
        match self.get(slice) {
800441ac:	0c01102c 	jal	800440b0 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$3get17h4c2a4b91bf57c6dcE>
800441b0:	00000000 	nop
800441b4:	afa2002c 	sw	v0,44(sp)
800441b8:	afa30030 	sw	v1,48(sp)
800441bc:	8fa1002c 	lw	at,44(sp)
800441c0:	1420000c 	bnez	at,800441f4 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$5index17h396b8ff5c19b629dE+0x70>
800441c4:	00000000 	nop
800441c8:	08011074 	j	800441d0 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$5index17h396b8ff5c19b629dE+0x4c>
800441cc:	00000000 	nop
            Some(s) => s,
            None => super::slice_error_fail(slice, 0, end),
800441d0:	8fa70028 	lw	a3,40(sp)
800441d4:	8fa50020 	lw	a1,32(sp)
800441d8:	8fa40024 	lw	a0,36(sp)
800441dc:	8fa1001c 	lw	at,28(sp)
800441e0:	03a01025 	move	v0,sp
800441e4:	ac410010 	sw	at,16(v0)
800441e8:	24060000 	li	a2,0
800441ec:	0c0111a5 	jal	80044694 <_ZN4core3str16slice_error_fail17h3a85009d830cf91cE>
800441f0:	00000000 	nop
            Some(s) => s,
800441f4:	8fa2002c 	lw	v0,44(sp)
800441f8:	8fa30030 	lw	v1,48(sp)
800441fc:	afa20044 	sw	v0,68(sp)
80044200:	afa30048 	sw	v1,72(sp)
        }
    }
80044204:	8fbf004c 	lw	ra,76(sp)
80044208:	27bd0050 	addiu	sp,sp,80
8004420c:	03e00008 	jr	ra
80044210:	00000000 	nop

80044214 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$3get17hdb36dc80780e5e82E>:
#[stable(feature = "str_checked_slicing", since = "1.20.0")]
#[rustc_const_unstable(feature = "const_slice_index", issue = "none")]
unsafe impl SliceIndex<str> for ops::RangeFrom<usize> {
    type Output = str;
    #[inline]
    fn get(self, slice: &str) -> Option<&Self::Output> {
80044214:	27bdffc8 	addiu	sp,sp,-56
80044218:	afbf0034 	sw	ra,52(sp)
8004421c:	afa60014 	sw	a2,20(sp)
80044220:	00a00825 	move	at,a1
80044224:	8fa50014 	lw	a1,20(sp)
80044228:	afa10018 	sw	at,24(sp)
8004422c:	00803025 	move	a2,a0
80044230:	8fa40018 	lw	a0,24(sp)
80044234:	afa6001c 	sw	a2,28(sp)
80044238:	afa60028 	sw	a2,40(sp)
8004423c:	afa4002c 	sw	a0,44(sp)
80044240:	afa50030 	sw	a1,48(sp)
        if slice.is_char_boundary(self.start) {
80044244:	0c011329 	jal	80044ca4 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E>
80044248:	00000000 	nop
8004424c:	14400006 	bnez	v0,80044268 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$3get17hdb36dc80780e5e82E+0x54>
80044250:	00000000 	nop
80044254:	08011097 	j	8004425c <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$3get17hdb36dc80780e5e82E+0x48>
80044258:	00000000 	nop
            // SAFETY: just checked that `start` is on a char boundary,
            // and we are passing in a safe reference, so the return value will also be one.
            Some(unsafe { &*self.get_unchecked(slice) })
        } else {
            None
8004425c:	afa00020 	sw	zero,32(sp)
        if slice.is_char_boundary(self.start) {
80044260:	080110a3 	j	8004428c <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$3get17hdb36dc80780e5e82E+0x78>
80044264:	00000000 	nop
            Some(unsafe { &*self.get_unchecked(slice) })
80044268:	8fa60014 	lw	a2,20(sp)
8004426c:	8fa50018 	lw	a1,24(sp)
80044270:	8fa4001c 	lw	a0,28(sp)
80044274:	0c0110a9 	jal	800442a4 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$13get_unchecked17h1bac03d5b0fd8d75E>
80044278:	00000000 	nop
8004427c:	afa20020 	sw	v0,32(sp)
80044280:	afa30024 	sw	v1,36(sp)
        if slice.is_char_boundary(self.start) {
80044284:	080110a3 	j	8004428c <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$3get17hdb36dc80780e5e82E+0x78>
80044288:	00000000 	nop
        }
    }
8004428c:	8fa20020 	lw	v0,32(sp)
80044290:	8fa30024 	lw	v1,36(sp)
80044294:	8fbf0034 	lw	ra,52(sp)
80044298:	27bd0038 	addiu	sp,sp,56
8004429c:	03e00008 	jr	ra
800442a0:	00000000 	nop

800442a4 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$13get_unchecked17h1bac03d5b0fd8d75E>:
        } else {
            None
        }
    }
    #[inline]
    unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
800442a4:	27bdffc8 	addiu	sp,sp,-56
800442a8:	afbf0034 	sw	ra,52(sp)
800442ac:	afa60018 	sw	a2,24(sp)
800442b0:	00a00825 	move	at,a1
800442b4:	8fa50018 	lw	a1,24(sp)
800442b8:	afa10014 	sw	at,20(sp)
800442bc:	00800825 	move	at,a0
800442c0:	8fa40014 	lw	a0,20(sp)
800442c4:	afa10010 	sw	at,16(sp)
800442c8:	afa10024 	sw	at,36(sp)
800442cc:	afa40028 	sw	a0,40(sp)
800442d0:	afa5002c 	sw	a1,44(sp)
        let len = (slice as *const [u8]).len();
800442d4:	0c00e68f 	jal	80039a3c <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$3len17hb4a60cfd4b05d1f1E>
800442d8:	00000000 	nop
800442dc:	8fa40010 	lw	a0,16(sp)
800442e0:	8fa60014 	lw	a2,20(sp)
800442e4:	8fa70018 	lw	a3,24(sp)
800442e8:	afa20030 	sw	v0,48(sp)
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked`.
        unsafe { (self.start..len).get_unchecked(slice) }
800442ec:	afa4001c 	sw	a0,28(sp)
800442f0:	afa20020 	sw	v0,32(sp)
800442f4:	8fa4001c 	lw	a0,28(sp)
800442f8:	8fa50020 	lw	a1,32(sp)
800442fc:	0c010fd3 	jal	80043f4c <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked17hffa5e1fde556c725E>
80044300:	00000000 	nop
    }
80044304:	8fbf0034 	lw	ra,52(sp)
80044308:	27bd0038 	addiu	sp,sp,56
8004430c:	03e00008 	jr	ra
80044310:	00000000 	nop

80044314 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$5index17h36cebc17e135b426E>:
        let len = (slice as *mut [u8]).len();
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
        unsafe { (self.start..len).get_unchecked_mut(slice) }
    }
    #[inline]
    fn index(self, slice: &str) -> &Self::Output {
80044314:	27bdffa0 	addiu	sp,sp,-96
80044318:	afbf005c 	sw	ra,92(sp)
8004431c:	afa70018 	sw	a3,24(sp)
80044320:	afa60024 	sw	a2,36(sp)
80044324:	00a00825 	move	at,a1
80044328:	8fa50024 	lw	a1,36(sp)
8004432c:	afa10020 	sw	at,32(sp)
80044330:	00800825 	move	at,a0
80044334:	8fa40020 	lw	a0,32(sp)
80044338:	afa1001c 	sw	at,28(sp)
8004433c:	afa10040 	sw	at,64(sp)
80044340:	afa40044 	sw	a0,68(sp)
80044344:	afa50048 	sw	a1,72(sp)
        let (start, end) = (self.start, slice.len());
80044348:	0c011315 	jal	80044c54 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
8004434c:	00000000 	nop
80044350:	8fa4001c 	lw	a0,28(sp)
80044354:	8fa50020 	lw	a1,32(sp)
80044358:	8fa60024 	lw	a2,36(sp)
8004435c:	afa40030 	sw	a0,48(sp)
80044360:	afa20034 	sw	v0,52(sp)
80044364:	8fa10030 	lw	at,48(sp)
80044368:	afa10028 	sw	at,40(sp)
8004436c:	afa1004c 	sw	at,76(sp)
80044370:	8fa10034 	lw	at,52(sp)
80044374:	afa1002c 	sw	at,44(sp)
80044378:	afa10050 	sw	at,80(sp)
        match self.get(slice) {
8004437c:	0c011085 	jal	80044214 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$3get17hdb36dc80780e5e82E>
80044380:	00000000 	nop
80044384:	afa20038 	sw	v0,56(sp)
80044388:	afa3003c 	sw	v1,60(sp)
8004438c:	8fa10038 	lw	at,56(sp)
80044390:	1420000c 	bnez	at,800443c4 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$5index17h36cebc17e135b426E+0xb0>
80044394:	00000000 	nop
80044398:	080110e8 	j	800443a0 <_ZN4core3str6traits112_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeFrom$LT$usize$GT$$GT$5index17h36cebc17e135b426E+0x8c>
8004439c:	00000000 	nop
            Some(s) => s,
            None => super::slice_error_fail(slice, start, end),
800443a0:	8fa7002c 	lw	a3,44(sp)
800443a4:	8fa60028 	lw	a2,40(sp)
800443a8:	8fa50024 	lw	a1,36(sp)
800443ac:	8fa40020 	lw	a0,32(sp)
800443b0:	8fa10018 	lw	at,24(sp)
800443b4:	03a01025 	move	v0,sp
800443b8:	ac410010 	sw	at,16(v0)
800443bc:	0c0111a5 	jal	80044694 <_ZN4core3str16slice_error_fail17h3a85009d830cf91cE>
800443c0:	00000000 	nop
            Some(s) => s,
800443c4:	8fa20038 	lw	v0,56(sp)
800443c8:	8fa3003c 	lw	v1,60(sp)
800443cc:	afa20054 	sw	v0,84(sp)
800443d0:	afa30058 	sw	v1,88(sp)
        }
    }
800443d4:	8fbf005c 	lw	ra,92(sp)
800443d8:	27bd0060 	addiu	sp,sp,96
800443dc:	03e00008 	jr	ra
800443e0:	00000000 	nop

800443e4 <_ZN4core3str11validations15utf8_first_byte17h4be84c73ff1050a0E>:

/// Returns the initial codepoint accumulator for the first byte.
/// The first byte is special, only want bottom 5 bits for width 2, 4 bits
/// for width 3, and 3 bits for width 4.
#[inline]
const fn utf8_first_byte(byte: u8, width: u32) -> u32 {
800443e4:	27bdffe0 	addiu	sp,sp,-32
800443e8:	afa50010 	sw	a1,16(sp)
800443ec:	00800825 	move	at,a0
800443f0:	afa10014 	sw	at,20(sp)
800443f4:	a3a4001b 	sb	a0,27(sp)
800443f8:	afa5001c 	sw	a1,28(sp)
    (byte & (0x7F >> width)) as u32
800443fc:	2ca10008 	sltiu	at,a1,8
80044400:	1020000c 	beqz	at,80044434 <_ZN4core3str11validations15utf8_first_byte17h4be84c73ff1050a0E+0x50>
80044404:	00000000 	nop
80044408:	08011104 	j	80044410 <_ZN4core3str11validations15utf8_first_byte17h4be84c73ff1050a0E+0x2c>
8004440c:	00000000 	nop
80044410:	8fa10014 	lw	at,20(sp)
80044414:	8fa20010 	lw	v0,16(sp)
80044418:	30430007 	andi	v1,v0,0x7
8004441c:	2402007f 	li	v0,127
80044420:	00621006 	srlv	v0,v0,v1
80044424:	00221024 	and	v0,at,v0
80044428:	27bd0020 	addiu	sp,sp,32
}
8004442c:	03e00008 	jr	ra
80044430:	00000000 	nop
    (byte & (0x7F >> width)) as u32
80044434:	3c018108 	lui	at,0x8108
80044438:	2424c36c 	addiu	a0,at,-15508
8004443c:	0c011b54 	jal	80046d50 <_ZN4core9panicking11panic_const24panic_const_shr_overflow17h51109cf1c6739500E>
80044440:	00000000 	nop

80044444 <_ZN4core3str11validations18utf8_acc_cont_byte17hff4f17aab0fe43c8E>:

/// Returns the value of `ch` updated with continuation byte `byte`.
#[inline]
const fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 {
80044444:	27bdfff8 	addiu	sp,sp,-8
80044448:	afa40000 	sw	a0,0(sp)
8004444c:	a3a50007 	sb	a1,7(sp)
    (ch << 6) | (byte & CONT_MASK) as u32
80044450:	00040980 	sll	at,a0,0x6
80044454:	30a2003f 	andi	v0,a1,0x3f
80044458:	00221025 	or	v0,at,v0
8004445c:	27bd0008 	addiu	sp,sp,8
}
80044460:	03e00008 	jr	ra
80044464:	00000000 	nop

80044468 <_ZN4core3str11validations17utf8_is_cont_byte17hfd9fecd852438cdeE>:

/// Checks whether the byte is a UTF-8 continuation byte (i.e., starts with the
/// bits `10`).
#[inline]
pub(super) const fn utf8_is_cont_byte(byte: u8) -> bool {
80044468:	27bdfff8 	addiu	sp,sp,-8
8004446c:	7c040c20 	seb	at,a0
80044470:	a3a40007 	sb	a0,7(sp)
    (byte as i8) < -64
80044474:	2822ffc0 	slti	v0,at,-64
80044478:	27bd0008 	addiu	sp,sp,8
}
8004447c:	03e00008 	jr	ra
80044480:	00000000 	nop

80044484 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E>:
/// # Safety
///
/// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
#[unstable(feature = "str_internals", issue = "none")]
#[inline]
pub unsafe fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {
80044484:	27bdff98 	addiu	sp,sp,-104
80044488:	afbf0064 	sw	ra,100(sp)
8004448c:	afa40030 	sw	a0,48(sp)
    // Decode UTF-8
    let x = *bytes.next()?;
80044490:	afa40048 	sw	a0,72(sp)
80044494:	0c011fec 	jal	80047fb0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE>
80044498:	00000000 	nop
8004449c:	00402025 	move	a0,v0
800444a0:	0c00f1c2 	jal	8003c708 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h448b262f87af77b6E>
800444a4:	00000000 	nop
800444a8:	afa20040 	sw	v0,64(sp)
800444ac:	8fa10040 	lw	at,64(sp)
800444b0:	1020000c 	beqz	at,800444e4 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x60>
800444b4:	00000000 	nop
800444b8:	08011130 	j	800444c0 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x3c>
800444bc:	00000000 	nop
800444c0:	8fa10040 	lw	at,64(sp)
800444c4:	afa1004c 	sw	at,76(sp)
800444c8:	80210000 	lb	at,0(at)
800444cc:	afa1002c 	sw	at,44(sp)
800444d0:	a3a10053 	sb	at,83(sp)
    if x < 128 {
800444d4:	04210029 	bgez	at,8004457c <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0xf8>
800444d8:	00000000 	nop
800444dc:	0801113f 	j	800444fc <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x78>
800444e0:	00000000 	nop
    let x = *bytes.next()?;
800444e4:	0c00f22e 	jal	8003c8b8 <_ZN84_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h499111ea8ee19989E>
800444e8:	00000000 	nop
800444ec:	afa20038 	sw	v0,56(sp)
800444f0:	afa3003c 	sw	v1,60(sp)
800444f4:	0801119f 	j	8004467c <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x1f8>
800444f8:	00000000 	nop
    }

    // Multibyte case follows
    // Decode from a byte combination out of: [[[x y] z] w]
    // NOTE: Performance is sensitive to the exact formulation here
    let init = utf8_first_byte(x, 2);
800444fc:	8fa4002c 	lw	a0,44(sp)
80044500:	24050002 	li	a1,2
80044504:	0c0110f9 	jal	800443e4 <_ZN4core3str11validations15utf8_first_byte17h4be84c73ff1050a0E>
80044508:	00000000 	nop
8004450c:	8fa1002c 	lw	at,44(sp)
80044510:	8fa40030 	lw	a0,48(sp)
80044514:	afa20020 	sw	v0,32(sp)
80044518:	302100ff 	andi	at,at,0xff
8004451c:	afa10028 	sw	at,40(sp)
80044520:	00400825 	move	at,v0
80044524:	afa1001c 	sw	at,28(sp)
80044528:	afa20054 	sw	v0,84(sp)
    // SAFETY: `bytes` produces an UTF-8-like string,
    // so the iterator must produce a value here.
    let y = unsafe { *bytes.next().unwrap_unchecked() };
8004452c:	0c011fec 	jal	80047fb0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE>
80044530:	00000000 	nop
80044534:	00402025 	move	a0,v0
80044538:	3c018108 	lui	at,0x8108
8004453c:	2425c37c 	addiu	a1,at,-15492
80044540:	0c00f0de 	jal	8003c378 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hfe6e6fd17f6453c3E>
80044544:	00000000 	nop
80044548:	8fa40020 	lw	a0,32(sp)
8004454c:	90450000 	lbu	a1,0(v0)
80044550:	afa50024 	sw	a1,36(sp)
80044554:	a3a5005a 	sb	a1,90(sp)
    let mut ch = utf8_acc_cont_byte(init, y);
80044558:	0c011111 	jal	80044444 <_ZN4core3str11validations18utf8_acc_cont_byte17hff4f17aab0fe43c8E>
8004455c:	00000000 	nop
80044560:	8fa10028 	lw	at,40(sp)
80044564:	afa20044 	sw	v0,68(sp)
    if x >= 0xE0 {
80044568:	2c2100e0 	sltiu	at,at,224
8004456c:	10200010 	beqz	at,800445b0 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x12c>
80044570:	00000000 	nop
80044574:	08011166 	j	80044598 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x114>
80044578:	00000000 	nop
        return Some(x as u32);
8004457c:	8fa1002c 	lw	at,44(sp)
80044580:	302100ff 	andi	at,at,0xff
80044584:	afa1003c 	sw	at,60(sp)
80044588:	24010001 	li	at,1
8004458c:	afa10038 	sw	at,56(sp)
80044590:	0801119f 	j	8004467c <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x1f8>
80044594:	00000000 	nop
            let w = unsafe { *bytes.next().unwrap_unchecked() };
            ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
        }
    }

    Some(ch)
80044598:	8fa10044 	lw	at,68(sp)
8004459c:	afa1003c 	sw	at,60(sp)
800445a0:	24010001 	li	at,1
800445a4:	afa10038 	sw	at,56(sp)
}
800445a8:	0801119f 	j	8004467c <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x1f8>
800445ac:	00000000 	nop
        let z = unsafe { *bytes.next().unwrap_unchecked() };
800445b0:	8fa40030 	lw	a0,48(sp)
800445b4:	0c011fec 	jal	80047fb0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE>
800445b8:	00000000 	nop
800445bc:	00402025 	move	a0,v0
800445c0:	3c018108 	lui	at,0x8108
800445c4:	2425c38c 	addiu	a1,at,-15476
800445c8:	0c00f0de 	jal	8003c378 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hfe6e6fd17f6453c3E>
800445cc:	00000000 	nop
800445d0:	8fa10024 	lw	at,36(sp)
800445d4:	90450000 	lbu	a1,0(v0)
800445d8:	a3a5005b 	sb	a1,91(sp)
        let y_z = utf8_acc_cont_byte((y & CONT_MASK) as u32, z);
800445dc:	3024003f 	andi	a0,at,0x3f
800445e0:	0c011111 	jal	80044444 <_ZN4core3str11validations18utf8_acc_cont_byte17hff4f17aab0fe43c8E>
800445e4:	00000000 	nop
800445e8:	8fa1002c 	lw	at,44(sp)
800445ec:	00401825 	move	v1,v0
800445f0:	8fa2001c 	lw	v0,28(sp)
800445f4:	00602025 	move	a0,v1
800445f8:	afa40018 	sw	a0,24(sp)
800445fc:	afa3005c 	sw	v1,92(sp)
        ch = init << 12 | y_z;
80044600:	00021300 	sll	v0,v0,0xc
80044604:	00431025 	or	v0,v0,v1
80044608:	afa20044 	sw	v0,68(sp)
        if x >= 0xF0 {
8004460c:	302100ff 	andi	at,at,0xff
80044610:	2c2100f0 	sltiu	at,at,240
80044614:	1420ffe0 	bnez	at,80044598 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x114>
80044618:	00000000 	nop
8004461c:	08011189 	j	80044624 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x1a0>
80044620:	00000000 	nop
            let w = unsafe { *bytes.next().unwrap_unchecked() };
80044624:	8fa40030 	lw	a0,48(sp)
80044628:	0c011fec 	jal	80047fb0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE>
8004462c:	00000000 	nop
80044630:	00402025 	move	a0,v0
80044634:	3c018108 	lui	at,0x8108
80044638:	2425c39c 	addiu	a1,at,-15460
8004463c:	0c00f0de 	jal	8003c378 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hfe6e6fd17f6453c3E>
80044640:	00000000 	nop
80044644:	8fa1001c 	lw	at,28(sp)
80044648:	8fa40018 	lw	a0,24(sp)
8004464c:	90450000 	lbu	a1,0(v0)
80044650:	a3a50063 	sb	a1,99(sp)
            ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
80044654:	30210007 	andi	at,at,0x7
80044658:	00010c80 	sll	at,at,0x12
8004465c:	afa10014 	sw	at,20(sp)
80044660:	0c011111 	jal	80044444 <_ZN4core3str11validations18utf8_acc_cont_byte17hff4f17aab0fe43c8E>
80044664:	00000000 	nop
80044668:	8fa10014 	lw	at,20(sp)
8004466c:	00220825 	or	at,at,v0
80044670:	afa10044 	sw	at,68(sp)
        if x >= 0xF0 {
80044674:	08011166 	j	80044598 <_ZN4core3str11validations15next_code_point17hefb6a42a439bc157E+0x114>
80044678:	00000000 	nop
}
8004467c:	8fa20038 	lw	v0,56(sp)
80044680:	8fa3003c 	lw	v1,60(sp)
80044684:	8fbf0064 	lw	ra,100(sp)
80044688:	27bd0068 	addiu	sp,sp,104
8004468c:	03e00008 	jr	ra
80044690:	00000000 	nop

80044694 <_ZN4core3str16slice_error_fail17h3a85009d830cf91cE>:
const fn slice_error_fail(s: &str, begin: usize, end: usize) -> ! {
80044694:	27bdffc8 	addiu	sp,sp,-56
80044698:	8fa10048 	lw	at,72(sp)
8004469c:	afa40028 	sw	a0,40(sp)
800446a0:	afa5002c 	sw	a1,44(sp)
800446a4:	afa60030 	sw	a2,48(sp)
800446a8:	afa70034 	sw	a3,52(sp)
    crate::intrinsics::const_eval_select((s, begin, end), slice_error_fail_ct, slice_error_fail_rt)
800446ac:	afa40018 	sw	a0,24(sp)
800446b0:	afa5001c 	sw	a1,28(sp)
800446b4:	afa60020 	sw	a2,32(sp)
800446b8:	afa70024 	sw	a3,36(sp)
800446bc:	8fa40018 	lw	a0,24(sp)
800446c0:	8fa5001c 	lw	a1,28(sp)
800446c4:	8fa60020 	lw	a2,32(sp)
800446c8:	8fa70024 	lw	a3,36(sp)
800446cc:	03a01025 	move	v0,sp
800446d0:	ac410010 	sw	at,16(v0)
800446d4:	0c0111b7 	jal	800446dc <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE>
800446d8:	00000000 	nop

800446dc <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE>:
fn slice_error_fail_rt(s: &str, begin: usize, end: usize) -> ! {
800446dc:	27bdfdc8 	addiu	sp,sp,-568
800446e0:	afbf0234 	sw	ra,564(sp)
800446e4:	afa50040 	sw	a1,64(sp)
800446e8:	afa4003c 	sw	a0,60(sp)
800446ec:	8fa10248 	lw	at,584(sp)
800446f0:	afa10038 	sw	at,56(sp)
800446f4:	afa60048 	sw	a2,72(sp)
800446f8:	afa7004c 	sw	a3,76(sp)
800446fc:	afa4012c 	sw	a0,300(sp)
80044700:	afa50130 	sw	a1,304(sp)
80044704:	24060100 	li	a2,256
    let trunc_len = s.floor_char_boundary(MAX_DISPLAY_LENGTH);
80044708:	0c01135e 	jal	80044d78 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E>
8004470c:	00000000 	nop
80044710:	8fa70038 	lw	a3,56(sp)
80044714:	8fa4003c 	lw	a0,60(sp)
80044718:	8fa50040 	lw	a1,64(sp)
8004471c:	afa20044 	sw	v0,68(sp)
80044720:	afa20134 	sw	v0,308(sp)
    let s_trunc = &s[..trunc_len];
80044724:	afa20058 	sw	v0,88(sp)
80044728:	8fa60058 	lw	a2,88(sp)
8004472c:	0c010f90 	jal	80043e40 <_ZN4core3str6traits66_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$str$GT$5index17hba11477e2e0499e2E>
80044730:	00000000 	nop
80044734:	8fa4003c 	lw	a0,60(sp)
80044738:	8fa50040 	lw	a1,64(sp)
8004473c:	afa20050 	sw	v0,80(sp)
80044740:	afa30054 	sw	v1,84(sp)
    let ellipsis = if trunc_len < s.len() { "[...]" } else { "" };
80044744:	0c011315 	jal	80044c54 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
80044748:	00000000 	nop
8004474c:	00400825 	move	at,v0
80044750:	8fa20044 	lw	v0,68(sp)
80044754:	0041082b 	sltu	at,v0,at
80044758:	14200009 	bnez	at,80044780 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0xa4>
8004475c:	00000000 	nop
80044760:	080111da 	j	80044768 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x8c>
80044764:	00000000 	nop
80044768:	3c018108 	lui	at,0x8108
8004476c:	2421b030 	addiu	at,at,-20432
80044770:	afa1005c 	sw	at,92(sp)
80044774:	afa00060 	sw	zero,96(sp)
80044778:	080111e7 	j	8004479c <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0xc0>
8004477c:	00000000 	nop
80044780:	3c018108 	lui	at,0x8108
80044784:	2421c3ac 	addiu	at,at,-15444
80044788:	afa1005c 	sw	at,92(sp)
8004478c:	24010005 	li	at,5
80044790:	afa10060 	sw	at,96(sp)
80044794:	080111e7 	j	8004479c <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0xc0>
80044798:	00000000 	nop
    if begin > s.len() || end > s.len() {
8004479c:	8fa50040 	lw	a1,64(sp)
800447a0:	8fa4003c 	lw	a0,60(sp)
800447a4:	8fa10048 	lw	at,72(sp)
800447a8:	afa10034 	sw	at,52(sp)
800447ac:	0c011315 	jal	80044c54 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
800447b0:	00000000 	nop
800447b4:	8fa10034 	lw	at,52(sp)
800447b8:	0041082b 	sltu	at,v0,at
800447bc:	1420000f 	bnez	at,800447fc <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x120>
800447c0:	00000000 	nop
800447c4:	080111f3 	j	800447cc <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0xf0>
800447c8:	00000000 	nop
800447cc:	8fa50040 	lw	a1,64(sp)
800447d0:	8fa4003c 	lw	a0,60(sp)
800447d4:	8fa1004c 	lw	at,76(sp)
800447d8:	afa10030 	sw	at,48(sp)
800447dc:	0c011315 	jal	80044c54 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
800447e0:	00000000 	nop
800447e4:	8fa10030 	lw	at,48(sp)
800447e8:	0041082b 	sltu	at,v0,at
800447ec:	1020000f 	beqz	at,8004482c <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x150>
800447f0:	00000000 	nop
800447f4:	080111ff 	j	800447fc <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x120>
800447f8:	00000000 	nop
        let oob_index = if begin > s.len() { begin } else { end };
800447fc:	8fa50040 	lw	a1,64(sp)
80044800:	8fa4003c 	lw	a0,60(sp)
80044804:	8fa10048 	lw	at,72(sp)
80044808:	afa1002c 	sw	at,44(sp)
8004480c:	0c011315 	jal	80044c54 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
80044810:	00000000 	nop
80044814:	8fa1002c 	lw	at,44(sp)
80044818:	0041082b 	sltu	at,v0,at
8004481c:	142000d9 	bnez	at,80044b84 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x4a8>
80044820:	00000000 	nop
80044824:	080112dd 	j	80044b74 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x498>
80044828:	00000000 	nop
        begin <= end,
8004482c:	8fa20048 	lw	v0,72(sp)
80044830:	8fa1004c 	lw	at,76(sp)
80044834:	0022082b 	sltu	at,at,v0
80044838:	1020003d 	beqz	at,80044930 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x254>
8004483c:	00000000 	nop
80044840:	08011212 	j	80044848 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x16c>
80044844:	00000000 	nop
80044848:	27a20048 	addiu	v0,sp,72
8004484c:	afa20180 	sw	v0,384(sp)
80044850:	afa2018c 	sw	v0,396(sp)
80044854:	3c018004 	lui	at,0x8004
80044858:	24217d60 	addiu	at,at,32096
8004485c:	afa10190 	sw	at,400(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80044860:	afa20184 	sw	v0,388(sp)
80044864:	afa10188 	sw	at,392(sp)
    }
80044868:	8fa80184 	lw	t0,388(sp)
8004486c:	8fa70188 	lw	a3,392(sp)
80044870:	27a2004c 	addiu	v0,sp,76
80044874:	afa2016c 	sw	v0,364(sp)
80044878:	afa20178 	sw	v0,376(sp)
8004487c:	afa1017c 	sw	at,380(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80044880:	afa20170 	sw	v0,368(sp)
80044884:	afa10174 	sw	at,372(sp)
    }
80044888:	8fa60170 	lw	a2,368(sp)
8004488c:	8fa50174 	lw	a1,372(sp)
80044890:	27a20050 	addiu	v0,sp,80
80044894:	afa201f8 	sw	v0,504(sp)
80044898:	afa20204 	sw	v0,516(sp)
8004489c:	3c018004 	lui	at,0x8004
800448a0:	24217e68 	addiu	at,at,32360
800448a4:	afa10208 	sw	at,520(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
800448a8:	afa201fc 	sw	v0,508(sp)
800448ac:	afa10200 	sw	at,512(sp)
    }
800448b0:	8fa401fc 	lw	a0,508(sp)
800448b4:	8fa30200 	lw	v1,512(sp)
800448b8:	27a2005c 	addiu	v0,sp,92
800448bc:	afa201e4 	sw	v0,484(sp)
800448c0:	afa201f0 	sw	v0,496(sp)
800448c4:	afa101f4 	sw	at,500(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
800448c8:	afa201e8 	sw	v0,488(sp)
800448cc:	afa101ec 	sw	at,492(sp)
    }
800448d0:	8fa201e8 	lw	v0,488(sp)
800448d4:	8fa101ec 	lw	at,492(sp)
    assert!(
800448d8:	afa800b0 	sw	t0,176(sp)
800448dc:	afa700b4 	sw	a3,180(sp)
800448e0:	afa600b8 	sw	a2,184(sp)
800448e4:	afa500bc 	sw	a1,188(sp)
800448e8:	afa400c0 	sw	a0,192(sp)
800448ec:	afa300c4 	sw	v1,196(sp)
800448f0:	afa200c8 	sw	v0,200(sp)
800448f4:	afa100cc 	sw	at,204(sp)
800448f8:	03a00825 	move	at,sp
800448fc:	24060004 	li	a2,4
80044900:	ac260010 	sw	a2,16(at)
80044904:	3c018108 	lui	at,0x8108
80044908:	2425c3c0 	addiu	a1,at,-15424
8004490c:	27a40098 	addiu	a0,sp,152
80044910:	afa40028 	sw	a0,40(sp)
80044914:	27a700b0 	addiu	a3,sp,176
80044918:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
8004491c:	00000000 	nop
80044920:	8fa40028 	lw	a0,40(sp)
80044924:	8fa50038 	lw	a1,56(sp)
80044928:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8004492c:	00000000 	nop
    let index = if !s.is_char_boundary(begin) { begin } else { end };
80044930:	8fa50040 	lw	a1,64(sp)
80044934:	8fa4003c 	lw	a0,60(sp)
80044938:	8fa60048 	lw	a2,72(sp)
8004493c:	0c011329 	jal	80044ca4 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E>
80044940:	00000000 	nop
80044944:	14400007 	bnez	v0,80044964 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x288>
80044948:	00000000 	nop
8004494c:	08011255 	j	80044954 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x278>
80044950:	00000000 	nop
80044954:	8fa10048 	lw	at,72(sp)
80044958:	afa100d0 	sw	at,208(sp)
8004495c:	0801125d 	j	80044974 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x298>
80044960:	00000000 	nop
80044964:	8fa1004c 	lw	at,76(sp)
80044968:	afa100d0 	sw	at,208(sp)
8004496c:	0801125d 	j	80044974 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x298>
80044970:	00000000 	nop
    let char_start = s.floor_char_boundary(index);
80044974:	8fa50040 	lw	a1,64(sp)
80044978:	8fa4003c 	lw	a0,60(sp)
8004497c:	8fa600d0 	lw	a2,208(sp)
80044980:	0c01135e 	jal	80044d78 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E>
80044984:	00000000 	nop
80044988:	8fa4003c 	lw	a0,60(sp)
8004498c:	8fa50040 	lw	a1,64(sp)
80044990:	8fa70038 	lw	a3,56(sp)
80044994:	00400825 	move	at,v0
80044998:	afa10024 	sw	at,36(sp)
8004499c:	afa20138 	sw	v0,312(sp)
    let ch = s[char_start..].chars().next().unwrap();
800449a0:	afa200e0 	sw	v0,224(sp)
800449a4:	8fa600e0 	lw	a2,224(sp)
800449a8:	0c010f81 	jal	80043e04 <_ZN4core3str6traits66_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$str$GT$5index17h530a1160dbfa1a41E>
800449ac:	00000000 	nop
800449b0:	00402025 	move	a0,v0
800449b4:	00602825 	move	a1,v1
800449b8:	0c0113d3 	jal	80044f4c <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h9ac6a59f518bf3d7E>
800449bc:	00000000 	nop
800449c0:	afa200d8 	sw	v0,216(sp)
800449c4:	afa300dc 	sw	v1,220(sp)
800449c8:	27a400d8 	addiu	a0,sp,216
800449cc:	0c010edc 	jal	80043b70 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h322ca2115794f866E>
800449d0:	00000000 	nop
800449d4:	afa2013c 	sw	v0,316(sp)
        match self {
800449d8:	8fa1013c 	lw	at,316(sp)
800449dc:	3c020011 	lui	v0,0x11
800449e0:	14220006 	bne	at,v0,800449fc <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x320>
800449e4:	00000000 	nop
800449e8:	0801127c 	j	800449f0 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x314>
800449ec:	00000000 	nop
            None => unwrap_failed(),
800449f0:	8fa40038 	lw	a0,56(sp)
800449f4:	0c00f1b6 	jal	8003c6d8 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
800449f8:	00000000 	nop
            Some(val) => val,
800449fc:	8fa1013c 	lw	at,316(sp)
80044a00:	afa10140 	sw	at,320(sp)
80044a04:	afa100d4 	sw	at,212(sp)
    let char_range = char_start..char_start + ch.len_utf8();
80044a08:	8fa400d4 	lw	a0,212(sp)
80044a0c:	0c00ec62 	jal	8003b188 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$8len_utf817hb6087b2bc95d3ee8E>
80044a10:	00000000 	nop
80044a14:	00400825 	move	at,v0
80044a18:	8fa20024 	lw	v0,36(sp)
80044a1c:	00410821 	addu	at,v0,at
80044a20:	afa10020 	sw	at,32(sp)
80044a24:	0022082b 	sltu	at,at,v0
80044a28:	1420004f 	bnez	at,80044b68 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x48c>
80044a2c:	00000000 	nop
80044a30:	0801128e 	j	80044a38 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x35c>
80044a34:	00000000 	nop
80044a38:	8fa10020 	lw	at,32(sp)
80044a3c:	8fa20024 	lw	v0,36(sp)
80044a40:	afa200e4 	sw	v0,228(sp)
80044a44:	afa100e8 	sw	at,232(sp)
80044a48:	27a200d0 	addiu	v0,sp,208
80044a4c:	afa20158 	sw	v0,344(sp)
80044a50:	afa20164 	sw	v0,356(sp)
80044a54:	3c018004 	lui	at,0x8004
80044a58:	24217d60 	addiu	at,at,32096
80044a5c:	afa10168 	sw	at,360(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80044a60:	afa2015c 	sw	v0,348(sp)
80044a64:	afa10160 	sw	at,352(sp)
    }
80044a68:	8faa015c 	lw	t2,348(sp)
80044a6c:	8fa90160 	lw	t1,352(sp)
80044a70:	27a200d4 	addiu	v0,sp,212
80044a74:	afa2020c 	sw	v0,524(sp)
80044a78:	afa20218 	sw	v0,536(sp)
80044a7c:	3c018004 	lui	at,0x8004
80044a80:	24210c2c 	addiu	at,at,3116
80044a84:	afa1021c 	sw	at,540(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80044a88:	afa20210 	sw	v0,528(sp)
80044a8c:	afa10214 	sw	at,532(sp)
    }
80044a90:	8fa80210 	lw	t0,528(sp)
80044a94:	8fa70214 	lw	a3,532(sp)
80044a98:	27a200e4 	addiu	v0,sp,228
80044a9c:	afa20220 	sw	v0,544(sp)
80044aa0:	afa2022c 	sw	v0,556(sp)
80044aa4:	3c018004 	lui	at,0x8004
80044aa8:	2421a6b8 	addiu	at,at,-22856
80044aac:	afa10230 	sw	at,560(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80044ab0:	afa20224 	sw	v0,548(sp)
80044ab4:	afa10228 	sw	at,552(sp)
    }
80044ab8:	8fa60224 	lw	a2,548(sp)
80044abc:	8fa50228 	lw	a1,552(sp)
80044ac0:	27a20050 	addiu	v0,sp,80
80044ac4:	afa201d0 	sw	v0,464(sp)
80044ac8:	afa201dc 	sw	v0,476(sp)
80044acc:	3c018004 	lui	at,0x8004
80044ad0:	24217e68 	addiu	at,at,32360
80044ad4:	afa101e0 	sw	at,480(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80044ad8:	afa201d4 	sw	v0,468(sp)
80044adc:	afa101d8 	sw	at,472(sp)
    }
80044ae0:	8fa401d4 	lw	a0,468(sp)
80044ae4:	8fa301d8 	lw	v1,472(sp)
80044ae8:	27a2005c 	addiu	v0,sp,92
80044aec:	afa201bc 	sw	v0,444(sp)
80044af0:	afa201c8 	sw	v0,456(sp)
80044af4:	afa101cc 	sw	at,460(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80044af8:	afa201c0 	sw	v0,448(sp)
80044afc:	afa101c4 	sw	at,452(sp)
    }
80044b00:	8fa201c0 	lw	v0,448(sp)
80044b04:	8fa101c4 	lw	at,452(sp)
    panic!(
80044b08:	afaa0104 	sw	t2,260(sp)
80044b0c:	afa90108 	sw	t1,264(sp)
80044b10:	afa8010c 	sw	t0,268(sp)
80044b14:	afa70110 	sw	a3,272(sp)
80044b18:	afa60114 	sw	a2,276(sp)
80044b1c:	afa50118 	sw	a1,280(sp)
80044b20:	afa4011c 	sw	a0,284(sp)
80044b24:	afa30120 	sw	v1,288(sp)
80044b28:	afa20124 	sw	v0,292(sp)
80044b2c:	afa10128 	sw	at,296(sp)
80044b30:	03a00825 	move	at,sp
80044b34:	24060005 	li	a2,5
80044b38:	ac260010 	sw	a2,16(at)
80044b3c:	3c018108 	lui	at,0x8108
80044b40:	2425c418 	addiu	a1,at,-15336
80044b44:	27a400ec 	addiu	a0,sp,236
80044b48:	afa4001c 	sw	a0,28(sp)
80044b4c:	27a70104 	addiu	a3,sp,260
80044b50:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
80044b54:	00000000 	nop
80044b58:	8fa4001c 	lw	a0,28(sp)
80044b5c:	8fa50038 	lw	a1,56(sp)
80044b60:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80044b64:	00000000 	nop
    let char_range = char_start..char_start + ch.len_utf8();
80044b68:	8fa40038 	lw	a0,56(sp)
80044b6c:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80044b70:	00000000 	nop
        let oob_index = if begin > s.len() { begin } else { end };
80044b74:	8fa1004c 	lw	at,76(sp)
80044b78:	afa10064 	sw	at,100(sp)
80044b7c:	080112e5 	j	80044b94 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x4b8>
80044b80:	00000000 	nop
80044b84:	8fa10048 	lw	at,72(sp)
80044b88:	afa10064 	sw	at,100(sp)
80044b8c:	080112e5 	j	80044b94 <_ZN4core3str19slice_error_fail_rt17hc571e0189bc3551eE+0x4b8>
80044b90:	00000000 	nop
80044b94:	27a20064 	addiu	v0,sp,100
80044b98:	afa20144 	sw	v0,324(sp)
80044b9c:	afa20150 	sw	v0,336(sp)
80044ba0:	3c018004 	lui	at,0x8004
80044ba4:	24217d60 	addiu	at,at,32096
80044ba8:	afa10154 	sw	at,340(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80044bac:	afa20148 	sw	v0,328(sp)
80044bb0:	afa1014c 	sw	at,332(sp)
    }
80044bb4:	8fa60148 	lw	a2,328(sp)
80044bb8:	8fa5014c 	lw	a1,332(sp)
80044bbc:	27a20050 	addiu	v0,sp,80
80044bc0:	afa201a8 	sw	v0,424(sp)
80044bc4:	afa201b4 	sw	v0,436(sp)
80044bc8:	3c018004 	lui	at,0x8004
80044bcc:	24217e68 	addiu	at,at,32360
80044bd0:	afa101b8 	sw	at,440(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80044bd4:	afa201ac 	sw	v0,428(sp)
80044bd8:	afa101b0 	sw	at,432(sp)
    }
80044bdc:	8fa401ac 	lw	a0,428(sp)
80044be0:	8fa301b0 	lw	v1,432(sp)
80044be4:	27a2005c 	addiu	v0,sp,92
80044be8:	afa20194 	sw	v0,404(sp)
80044bec:	afa201a0 	sw	v0,416(sp)
80044bf0:	afa101a4 	sw	at,420(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80044bf4:	afa20198 	sw	v0,408(sp)
80044bf8:	afa1019c 	sw	at,412(sp)
    }
80044bfc:	8fa20198 	lw	v0,408(sp)
80044c00:	8fa1019c 	lw	at,412(sp)
        panic!("byte index {oob_index} is out of bounds of `{s_trunc}`{ellipsis}");
80044c04:	afa60080 	sw	a2,128(sp)
80044c08:	afa50084 	sw	a1,132(sp)
80044c0c:	afa40088 	sw	a0,136(sp)
80044c10:	afa3008c 	sw	v1,140(sp)
80044c14:	afa20090 	sw	v0,144(sp)
80044c18:	afa10094 	sw	at,148(sp)
80044c1c:	03a00825 	move	at,sp
80044c20:	24060003 	li	a2,3
80044c24:	ac260010 	sw	a2,16(at)
80044c28:	3c018108 	lui	at,0x8108
80044c2c:	2425c458 	addiu	a1,at,-15272
80044c30:	27a40068 	addiu	a0,sp,104
80044c34:	afa40018 	sw	a0,24(sp)
80044c38:	27a70080 	addiu	a3,sp,128
80044c3c:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
80044c40:	00000000 	nop
80044c44:	8fa40018 	lw	a0,24(sp)
80044c48:	8fa50038 	lw	a1,56(sp)
80044c4c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80044c50:	00000000 	nop

80044c54 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>:
    pub const fn len(&self) -> usize {
80044c54:	27bdfff0 	addiu	sp,sp,-16
80044c58:	00a01025 	move	v0,a1
80044c5c:	afa40000 	sw	a0,0(sp)
80044c60:	afa20004 	sw	v0,4(sp)
80044c64:	afa40008 	sw	a0,8(sp)
80044c68:	afa2000c 	sw	v0,12(sp)
80044c6c:	27bd0010 	addiu	sp,sp,16
    }
80044c70:	03e00008 	jr	ra
80044c74:	00000000 	nop

80044c78 <_ZN4core3str21_$LT$impl$u20$str$GT$8is_empty17h5474706a12608b3eE>:
    pub const fn is_empty(&self) -> bool {
80044c78:	27bdffe0 	addiu	sp,sp,-32
80044c7c:	afbf001c 	sw	ra,28(sp)
80044c80:	afa40014 	sw	a0,20(sp)
80044c84:	afa50018 	sw	a1,24(sp)
        self.len() == 0
80044c88:	0c011315 	jal	80044c54 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
80044c8c:	00000000 	nop
80044c90:	2c420001 	sltiu	v0,v0,1
    }
80044c94:	8fbf001c 	lw	ra,28(sp)
80044c98:	27bd0020 	addiu	sp,sp,32
80044c9c:	03e00008 	jr	ra
80044ca0:	00000000 	nop

80044ca4 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E>:
    pub fn is_char_boundary(&self, index: usize) -> bool {
80044ca4:	27bdffc0 	addiu	sp,sp,-64
80044ca8:	afbf003c 	sw	ra,60(sp)
80044cac:	afa60010 	sw	a2,16(sp)
80044cb0:	afa50014 	sw	a1,20(sp)
80044cb4:	afa40018 	sw	a0,24(sp)
80044cb8:	afa40024 	sw	a0,36(sp)
80044cbc:	afa50028 	sw	a1,40(sp)
80044cc0:	afa6002c 	sw	a2,44(sp)
        if index == 0 {
80044cc4:	14c00007 	bnez	a2,80044ce4 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E+0x40>
80044cc8:	00000000 	nop
80044ccc:	08011335 	j	80044cd4 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E+0x30>
80044cd0:	00000000 	nop
80044cd4:	24010001 	li	at,1
            return true;
80044cd8:	a3a1001f 	sb	at,31(sp)
    }
80044cdc:	08011346 	j	80044d18 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E+0x74>
80044ce0:	00000000 	nop
80044ce4:	8fa60010 	lw	a2,16(sp)
80044ce8:	8fa50014 	lw	a1,20(sp)
80044cec:	8fa40018 	lw	a0,24(sp)
80044cf0:	afa40034 	sw	a0,52(sp)
80044cf4:	afa50038 	sw	a1,56(sp)
        match self.as_bytes().get(index) {
80044cf8:	0c0108da 	jal	80042368 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h0e1c4c7e4b7b26b1E>
80044cfc:	00000000 	nop
80044d00:	afa20020 	sw	v0,32(sp)
80044d04:	8fa10020 	lw	at,32(sp)
80044d08:	10200009 	beqz	at,80044d30 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E+0x8c>
80044d0c:	00000000 	nop
80044d10:	08011356 	j	80044d58 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E+0xb4>
80044d14:	00000000 	nop
    }
80044d18:	93a1001f 	lbu	at,31(sp)
80044d1c:	30220001 	andi	v0,at,0x1
80044d20:	8fbf003c 	lw	ra,60(sp)
80044d24:	27bd0040 	addiu	sp,sp,64
80044d28:	03e00008 	jr	ra
80044d2c:	00000000 	nop
            None => index == self.len(),
80044d30:	8fa50014 	lw	a1,20(sp)
80044d34:	8fa40018 	lw	a0,24(sp)
80044d38:	0c011315 	jal	80044c54 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
80044d3c:	00000000 	nop
80044d40:	8fa10010 	lw	at,16(sp)
80044d44:	00220826 	xor	at,at,v0
80044d48:	2c210001 	sltiu	at,at,1
80044d4c:	a3a1001f 	sb	at,31(sp)
80044d50:	08011346 	j	80044d18 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E+0x74>
80044d54:	00000000 	nop
            Some(&b) => b.is_utf8_char_boundary(),
80044d58:	8fa10020 	lw	at,32(sp)
80044d5c:	90240000 	lbu	a0,0(at)
80044d60:	a3a40033 	sb	a0,51(sp)
80044d64:	0c00e416 	jal	80039058 <_ZN4core3num20_$LT$impl$u20$u8$GT$21is_utf8_char_boundary17hd4b7d97890933c9eE>
80044d68:	00000000 	nop
80044d6c:	a3a2001f 	sb	v0,31(sp)
80044d70:	08011346 	j	80044d18 <_ZN4core3str21_$LT$impl$u20$str$GT$16is_char_boundary17h5c40787c03779139E+0x74>
80044d74:	00000000 	nop

80044d78 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E>:
    pub fn floor_char_boundary(&self, index: usize) -> usize {
80044d78:	27bdff88 	addiu	sp,sp,-120
80044d7c:	afbf0074 	sw	ra,116(sp)
80044d80:	afa60024 	sw	a2,36(sp)
80044d84:	afa5001c 	sw	a1,28(sp)
80044d88:	afa40020 	sw	a0,32(sp)
80044d8c:	afa40040 	sw	a0,64(sp)
80044d90:	afa50044 	sw	a1,68(sp)
80044d94:	afa60048 	sw	a2,72(sp)
        if index >= self.len() {
80044d98:	0c011315 	jal	80044c54 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
80044d9c:	00000000 	nop
80044da0:	8fa60024 	lw	a2,36(sp)
80044da4:	00c2082b 	sltu	at,a2,v0
80044da8:	1020003a 	beqz	at,80044e94 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E+0x11c>
80044dac:	00000000 	nop
80044db0:	0801136e 	j	80044db8 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E+0x40>
80044db4:	00000000 	nop
80044db8:	8fa1001c 	lw	at,28(sp)
80044dbc:	8fa20020 	lw	v0,32(sp)
80044dc0:	8fa60024 	lw	a2,36(sp)
80044dc4:	afa60068 	sw	a2,104(sp)
80044dc8:	24030003 	li	v1,3
80044dcc:	afa3006c 	sw	v1,108(sp)
            intrinsics::saturating_sub(self, rhs)
80044dd0:	24c3fffd 	addiu	v1,a2,-3
80044dd4:	00c3202b 	sltu	a0,a2,v1
80044dd8:	24050000 	li	a1,0
80044ddc:	0004180b 	movn	v1,zero,a0
80044de0:	afa30070 	sw	v1,112(sp)
80044de4:	8fa50070 	lw	a1,112(sp)
80044de8:	afa50014 	sw	a1,20(sp)
            let lower_bound = index.saturating_sub(3);
80044dec:	afa5004c 	sw	a1,76(sp)
80044df0:	afa20060 	sw	v0,96(sp)
80044df4:	afa10064 	sw	at,100(sp)
80044df8:	27a40034 	addiu	a0,sp,52
80044dfc:	afa40010 	sw	a0,16(sp)
            let new_index = self.as_bytes()[lower_bound..=index]
80044e00:	0c00ea58 	jal	8003a960 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17hc292ae9ef64e18eeE>
80044e04:	00000000 	nop
80044e08:	8fa40010 	lw	a0,16(sp)
80044e0c:	8fa50020 	lw	a1,32(sp)
80044e10:	8fa6001c 	lw	a2,28(sp)
80044e14:	afa50058 	sw	a1,88(sp)
80044e18:	afa6005c 	sw	a2,92(sp)
        index.index(self)
80044e1c:	3c018108 	lui	at,0x8108
80044e20:	2427c4e0 	addiu	a3,at,-15136
80044e24:	0c0106b6 	jal	80041ad8 <_ZN115_$LT$core..ops..range..RangeInclusive$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17he898d92a72173eefE>
80044e28:	00000000 	nop
80044e2c:	00402025 	move	a0,v0
80044e30:	00602825 	move	a1,v1
80044e34:	0c010948 	jal	80042520 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9fbf31f27946410E>
80044e38:	00000000 	nop
80044e3c:	afa2002c 	sw	v0,44(sp)
80044e40:	afa30030 	sw	v1,48(sp)
80044e44:	27a4002c 	addiu	a0,sp,44
80044e48:	0c01218f 	jal	8004863c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E>
80044e4c:	00000000 	nop
80044e50:	00402025 	move	a0,v0
80044e54:	00602825 	move	a1,v1
80044e58:	afa40050 	sw	a0,80(sp)
80044e5c:	afa50054 	sw	a1,84(sp)
            unsafe { lower_bound + new_index.unwrap_unchecked() }
80044e60:	3c018108 	lui	at,0x8108
80044e64:	2426c4f0 	addiu	a2,at,-15120
80044e68:	0c00f0cf 	jal	8003c33c <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17hd37948e99cc8a5c6E>
80044e6c:	00000000 	nop
80044e70:	00400825 	move	at,v0
80044e74:	8fa20014 	lw	v0,20(sp)
80044e78:	00410821 	addu	at,v0,at
80044e7c:	afa10018 	sw	at,24(sp)
80044e80:	0022082b 	sltu	at,at,v0
80044e84:	1420000e 	bnez	at,80044ec0 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E+0x148>
80044e88:	00000000 	nop
80044e8c:	080113ac 	j	80044eb0 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E+0x138>
80044e90:	00000000 	nop
            self.len()
80044e94:	8fa5001c 	lw	a1,28(sp)
80044e98:	8fa40020 	lw	a0,32(sp)
80044e9c:	0c011315 	jal	80044c54 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h2e3f1437e5a07e40E>
80044ea0:	00000000 	nop
80044ea4:	afa20028 	sw	v0,40(sp)
80044ea8:	080113b4 	j	80044ed0 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E+0x158>
80044eac:	00000000 	nop
            unsafe { lower_bound + new_index.unwrap_unchecked() }
80044eb0:	8fa10018 	lw	at,24(sp)
80044eb4:	afa10028 	sw	at,40(sp)
        if index >= self.len() {
80044eb8:	080113b4 	j	80044ed0 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary17h1eec683326419ae0E+0x158>
80044ebc:	00000000 	nop
            unsafe { lower_bound + new_index.unwrap_unchecked() }
80044ec0:	3c018108 	lui	at,0x8108
80044ec4:	2424c500 	addiu	a0,at,-15104
80044ec8:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80044ecc:	00000000 	nop
    }
80044ed0:	8fa20028 	lw	v0,40(sp)
80044ed4:	8fbf0074 	lw	ra,116(sp)
80044ed8:	27bd0078 	addiu	sp,sp,120
80044edc:	03e00008 	jr	ra
80044ee0:	00000000 	nop

80044ee4 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary28_$u7b$$u7b$closure$u7d$$u7d$17h492e5ca2d572b958E>:
                .rposition(|b| b.is_utf8_char_boundary());
80044ee4:	27bdffe0 	addiu	sp,sp,-32
80044ee8:	afbf001c 	sw	ra,28(sp)
80044eec:	afa40014 	sw	a0,20(sp)
80044ef0:	afa50018 	sw	a1,24(sp)
80044ef4:	90a40000 	lbu	a0,0(a1)
80044ef8:	0c00e416 	jal	80039058 <_ZN4core3num20_$LT$impl$u20$u8$GT$21is_utf8_char_boundary17hd4b7d97890933c9eE>
80044efc:	00000000 	nop
80044f00:	8fbf001c 	lw	ra,28(sp)
80044f04:	27bd0020 	addiu	sp,sp,32
80044f08:	03e00008 	jr	ra
80044f0c:	00000000 	nop

80044f10 <_ZN4core3str21_$LT$impl$u20$str$GT$3get17h22d03a90dc93b151E>:
    pub fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {
80044f10:	27bdffd8 	addiu	sp,sp,-40
80044f14:	afbf0024 	sw	ra,36(sp)
80044f18:	afa60014 	sw	a2,20(sp)
80044f1c:	00a03025 	move	a2,a1
80044f20:	00802825 	move	a1,a0
80044f24:	8fa40014 	lw	a0,20(sp)
80044f28:	afa50018 	sw	a1,24(sp)
80044f2c:	afa6001c 	sw	a2,28(sp)
80044f30:	afa40020 	sw	a0,32(sp)
        i.get(self)
80044f34:	0c01102c 	jal	800440b0 <_ZN4core3str6traits110_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..RangeTo$LT$usize$GT$$GT$3get17h4c2a4b91bf57c6dcE>
80044f38:	00000000 	nop
    }
80044f3c:	8fbf0024 	lw	ra,36(sp)
80044f40:	27bd0028 	addiu	sp,sp,40
80044f44:	03e00008 	jr	ra
80044f48:	00000000 	nop

80044f4c <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h9ac6a59f518bf3d7E>:
    pub fn chars(&self) -> Chars<'_> {
80044f4c:	27bdffd0 	addiu	sp,sp,-48
80044f50:	afbf002c 	sw	ra,44(sp)
80044f54:	afa4001c 	sw	a0,28(sp)
80044f58:	afa50020 	sw	a1,32(sp)
80044f5c:	afa40024 	sw	a0,36(sp)
80044f60:	afa50028 	sw	a1,40(sp)
        Chars { iter: self.as_bytes().iter() }
80044f64:	0c010948 	jal	80042520 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9fbf31f27946410E>
80044f68:	00000000 	nop
80044f6c:	afa20014 	sw	v0,20(sp)
80044f70:	afa30018 	sw	v1,24(sp)
    }
80044f74:	8fa20014 	lw	v0,20(sp)
80044f78:	8fa30018 	lw	v1,24(sp)
80044f7c:	8fbf002c 	lw	ra,44(sp)
80044f80:	27bd0030 	addiu	sp,sp,48
80044f84:	03e00008 	jr	ra
80044f88:	00000000 	nop

80044f8c <_ZN4core3str21_$LT$impl$u20$str$GT$12char_indices17hbaf3c99ff2948506E>:
    ///
    /// assert_eq!(None, char_indices.next());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn char_indices(&self) -> CharIndices<'_> {
80044f8c:	27bdffd0 	addiu	sp,sp,-48
80044f90:	afbf002c 	sw	ra,44(sp)
80044f94:	afa60014 	sw	a2,20(sp)
80044f98:	00a00825 	move	at,a1
80044f9c:	8fa50014 	lw	a1,20(sp)
80044fa0:	afa10018 	sw	at,24(sp)
80044fa4:	00800825 	move	at,a0
80044fa8:	8fa40018 	lw	a0,24(sp)
80044fac:	afa1001c 	sw	at,28(sp)
80044fb0:	afa10020 	sw	at,32(sp)
80044fb4:	afa40024 	sw	a0,36(sp)
80044fb8:	afa50028 	sw	a1,40(sp)
        CharIndices { front_offset: 0, iter: self.chars() }
80044fbc:	0c0113d3 	jal	80044f4c <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h9ac6a59f518bf3d7E>
80044fc0:	00000000 	nop
80044fc4:	8fa4001c 	lw	a0,28(sp)
80044fc8:	00400825 	move	at,v0
80044fcc:	8fa20020 	lw	v0,32(sp)
80044fd0:	ac800008 	sw	zero,8(a0)
80044fd4:	ac810000 	sw	at,0(a0)
80044fd8:	ac830004 	sw	v1,4(a0)
    }
80044fdc:	8fbf002c 	lw	ra,44(sp)
80044fe0:	27bd0030 	addiu	sp,sp,48
80044fe4:	03e00008 	jr	ra
80044fe8:	00000000 	nop

80044fec <_ZN4core7unicode9printable5check17hd052c6660265343eE>:
// NOTE: The following code was generated by "library/core/src/unicode/printable.py",
//       do not edit directly!

fn check(x: u16, singletonuppers: &[(u8, u8)], singletonlowers: &[u8], normal: &[u8]) -> bool {
80044fec:	27bdff28 	addiu	sp,sp,-216
80044ff0:	afbf00d4 	sw	ra,212(sp)
80044ff4:	afa7002c 	sw	a3,44(sp)
80044ff8:	afa60030 	sw	a2,48(sp)
80044ffc:	00a00825 	move	at,a1
80045000:	8fa50030 	lw	a1,48(sp)
80045004:	afa10034 	sw	at,52(sp)
80045008:	00800825 	move	at,a0
8004500c:	8fa40034 	lw	a0,52(sp)
80045010:	8fa200f0 	lw	v0,240(sp)
80045014:	afa20038 	sw	v0,56(sp)
80045018:	8fa300ec 	lw	v1,236(sp)
8004501c:	afa3003c 	sw	v1,60(sp)
80045020:	8fa600e8 	lw	a2,232(sp)
80045024:	afa60040 	sw	a2,64(sp)
80045028:	00204025 	move	t0,at
8004502c:	afa80044 	sw	t0,68(sp)
80045030:	a7a1008a 	sh	at,138(sp)
80045034:	afa4008c 	sw	a0,140(sp)
80045038:	afa50090 	sw	a1,144(sp)
8004503c:	afa70094 	sw	a3,148(sp)
80045040:	afa60098 	sw	a2,152(sp)
80045044:	afa3009c 	sw	v1,156(sp)
80045048:	afa200a0 	sw	v0,160(sp)
    let xupper = (x >> 8) as u8;
8004504c:	7c223a00 	ext	v0,at,0x8,0x8
80045050:	afa20048 	sw	v0,72(sp)
80045054:	00010a02 	srl	at,at,0x8
80045058:	a3a100a5 	sb	at,165(sp)
    let mut lowerstart = 0;
8004505c:	afa00050 	sw	zero,80(sp)
    for &(upper, lowercount) in singletonuppers {
80045060:	0c01071b 	jal	80041c6c <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hf62cec3fc988412fE>
80045064:	00000000 	nop
80045068:	afa20054 	sw	v0,84(sp)
8004506c:	afa30058 	sw	v1,88(sp)
80045070:	0801141e 	j	80045078 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x8c>
80045074:	00000000 	nop
80045078:	27a40054 	addiu	a0,sp,84
8004507c:	0c012024 	jal	80048090 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE>
80045080:	00000000 	nop
80045084:	afa2005c 	sw	v0,92(sp)
80045088:	8fa1005c 	lw	at,92(sp)
8004508c:	14200014 	bnez	at,800450e0 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0xf4>
80045090:	00000000 	nop
80045094:	08011427 	j	8004509c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0xb0>
80045098:	00000000 	nop
            break;
        }
        lowerstart = lowerend;
    }

    let mut x = x as i32;
8004509c:	8fa50038 	lw	a1,56(sp)
800450a0:	8fa4003c 	lw	a0,60(sp)
800450a4:	8fa10044 	lw	at,68(sp)
800450a8:	3021ffff 	andi	at,at,0xffff
800450ac:	afa10074 	sw	at,116(sp)
    let mut normal = normal.iter().cloned();
800450b0:	0c010948 	jal	80042520 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9fbf31f27946410E>
800450b4:	00000000 	nop
800450b8:	00402025 	move	a0,v0
800450bc:	00602825 	move	a1,v1
800450c0:	0c00eff2 	jal	8003bfc8 <_ZN4core4iter6traits8iterator8Iterator6cloned17hf35468160e5bd29eE>
800450c4:	00000000 	nop
800450c8:	afa20078 	sw	v0,120(sp)
800450cc:	afa3007c 	sw	v1,124(sp)
800450d0:	24010001 	li	at,1
    let mut current = true;
800450d4:	a3a10081 	sb	at,129(sp)
    while let Some(v) = normal.next() {
800450d8:	0801149a 	j	80045268 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x27c>
800450dc:	00000000 	nop
    for &(upper, lowercount) in singletonuppers {
800450e0:	8fa1005c 	lw	at,92(sp)
800450e4:	90210000 	lbu	at,0(at)
800450e8:	afa10024 	sw	at,36(sp)
800450ec:	a3a100a6 	sb	at,166(sp)
800450f0:	8fa1005c 	lw	at,92(sp)
800450f4:	90210001 	lbu	at,1(at)
800450f8:	a3a100a7 	sb	at,167(sp)
        let lowerend = lowerstart + lowercount as usize;
800450fc:	8fa20050 	lw	v0,80(sp)
80045100:	00410821 	addu	at,v0,at
80045104:	afa10028 	sw	at,40(sp)
80045108:	0022082b 	sltu	at,at,v0
8004510c:	1420000d 	bnez	at,80045144 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x158>
80045110:	00000000 	nop
80045114:	08011447 	j	8004511c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x130>
80045118:	00000000 	nop
8004511c:	8fa10048 	lw	at,72(sp)
80045120:	8fa20024 	lw	v0,36(sp)
80045124:	8fa30028 	lw	v1,40(sp)
80045128:	afa300a8 	sw	v1,168(sp)
        if xupper == upper {
8004512c:	304200ff 	andi	v0,v0,0xff
80045130:	302100ff 	andi	at,at,0xff
80045134:	10220010 	beq	at,v0,80045178 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x18c>
80045138:	00000000 	nop
8004513c:	08011455 	j	80045154 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x168>
80045140:	00000000 	nop
        let lowerend = lowerstart + lowercount as usize;
80045144:	3c018108 	lui	at,0x8108
80045148:	2424c588 	addiu	a0,at,-14968
8004514c:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80045150:	00000000 	nop
        } else if xupper < upper {
80045154:	8fa10048 	lw	at,72(sp)
80045158:	8fa20024 	lw	v0,36(sp)
8004515c:	304200ff 	andi	v0,v0,0xff
80045160:	302100ff 	andi	at,at,0xff
80045164:	0022082b 	sltu	at,at,v0
80045168:	1420ffcc 	bnez	at,8004509c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0xb0>
8004516c:	00000000 	nop
80045170:	08011496 	j	80045258 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x26c>
80045174:	00000000 	nop
            for &lower in &singletonlowers[lowerstart..lowerend] {
80045178:	8fa30040 	lw	v1,64(sp)
8004517c:	8fa4002c 	lw	a0,44(sp)
80045180:	8fa10028 	lw	at,40(sp)
80045184:	8fa20050 	lw	v0,80(sp)
80045188:	afa20060 	sw	v0,96(sp)
8004518c:	afa10064 	sw	at,100(sp)
80045190:	8fa20060 	lw	v0,96(sp)
80045194:	afa2001c 	sw	v0,28(sp)
80045198:	8fa10064 	lw	at,100(sp)
8004519c:	afa10020 	sw	at,32(sp)
800451a0:	afa400b4 	sw	a0,180(sp)
800451a4:	afa300b8 	sw	v1,184(sp)
800451a8:	afa200bc 	sw	v0,188(sp)
800451ac:	afa100c0 	sw	at,192(sp)
800451b0:	afa200c4 	sw	v0,196(sp)
800451b4:	afa100c8 	sw	at,200(sp)
800451b8:	afa400cc 	sw	a0,204(sp)
800451bc:	afa300d0 	sw	v1,208(sp)
        if self.start > self.end {
800451c0:	0022082b 	sltu	at,at,v0
800451c4:	1420000a 	bnez	at,800451f0 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x204>
800451c8:	00000000 	nop
800451cc:	08011475 	j	800451d4 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x1e8>
800451d0:	00000000 	nop
        } else if self.end > slice.len() {
800451d4:	8fa10040 	lw	at,64(sp)
800451d8:	8fa20020 	lw	v0,32(sp)
800451dc:	0022082b 	sltu	at,at,v0
800451e0:	14200009 	bnez	at,80045208 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x21c>
800451e4:	00000000 	nop
800451e8:	08011488 	j	80045220 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x234>
800451ec:	00000000 	nop
            slice_index_order_fail(self.start, self.end);
800451f0:	8fa50020 	lw	a1,32(sp)
800451f4:	8fa4001c 	lw	a0,28(sp)
800451f8:	3c018108 	lui	at,0x8108
800451fc:	2426c5b8 	addiu	a2,at,-14920
80045200:	0c0103da 	jal	80040f68 <_ZN4core5slice5index22slice_index_order_fail17h449e604cb79353f4E>
80045204:	00000000 	nop
            slice_end_index_len_fail(self.end, slice.len());
80045208:	8fa50040 	lw	a1,64(sp)
8004520c:	8fa40020 	lw	a0,32(sp)
80045210:	3c018108 	lui	at,0x8108
80045214:	2426c5b8 	addiu	a2,at,-14920
80045218:	0c0103a8 	jal	80040ea0 <_ZN4core5slice5index24slice_end_index_len_fail17hc8473d7595779981E>
8004521c:	00000000 	nop
        unsafe { &*self.get_unchecked(slice) }
80045220:	8fa70040 	lw	a3,64(sp)
80045224:	8fa6002c 	lw	a2,44(sp)
80045228:	8fa50020 	lw	a1,32(sp)
8004522c:	8fa4001c 	lw	a0,28(sp)
80045230:	0c010514 	jal	80041450 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb3ac7c8e535d317cE>
80045234:	00000000 	nop
80045238:	00402025 	move	a0,v0
8004523c:	00602825 	move	a1,v1
80045240:	0c010707 	jal	80041c1c <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h57eea16c7126e9e6E>
80045244:	00000000 	nop
80045248:	afa20068 	sw	v0,104(sp)
8004524c:	afa3006c 	sw	v1,108(sp)
80045250:	080114f6 	j	800453d8 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x3ec>
80045254:	00000000 	nop
        lowerstart = lowerend;
80045258:	8fa10028 	lw	at,40(sp)
8004525c:	afa10050 	sw	at,80(sp)
    for &(upper, lowercount) in singletonuppers {
80045260:	0801141e 	j	80045078 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x8c>
80045264:	00000000 	nop
80045268:	27a40078 	addiu	a0,sp,120
    while let Some(v) = normal.next() {
8004526c:	0c00ed97 	jal	8003b65c <_ZN104_$LT$core..iter..adapters..cloned..Cloned$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h99c66ea835c86bdbE>
80045270:	00000000 	nop
80045274:	30410001 	andi	at,v0,0x1
80045278:	a3a10082 	sb	at,130(sp)
8004527c:	a3a30083 	sb	v1,131(sp)
80045280:	93a10082 	lbu	at,130(sp)
80045284:	30210001 	andi	at,at,0x1
80045288:	1020000b 	beqz	at,800452b8 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x2cc>
8004528c:	00000000 	nop
80045290:	080114a6 	j	80045298 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x2ac>
80045294:	00000000 	nop
80045298:	93a10083 	lbu	at,131(sp)
8004529c:	afa10018 	sw	at,24(sp)
800452a0:	a3a100af 	sb	at,175(sp)
        let len = if v & 0x80 != 0 {
800452a4:	30210080 	andi	at,at,0x80
800452a8:	10200008 	beqz	at,800452cc <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x2e0>
800452ac:	00000000 	nop
800452b0:	080114b8 	j	800452e0 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x2f4>
800452b4:	00000000 	nop
        if x < 0 {
            break;
        }
        current = !current;
    }
    current
800452b8:	93a10081 	lbu	at,129(sp)
800452bc:	30210001 	andi	at,at,0x1
800452c0:	a3a1004f 	sb	at,79(sp)
}
800452c4:	080114f0 	j	800453c0 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x3d4>
800452c8:	00000000 	nop
            v as i32
800452cc:	8fa10018 	lw	at,24(sp)
800452d0:	302100ff 	andi	at,at,0xff
800452d4:	afa10084 	sw	at,132(sp)
        let len = if v & 0x80 != 0 {
800452d8:	080114d3 	j	8004534c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x360>
800452dc:	00000000 	nop
            ((v & 0x7f) as i32) << 8 | normal.next().unwrap() as i32
800452e0:	8fa10018 	lw	at,24(sp)
800452e4:	3021007f 	andi	at,at,0x7f
800452e8:	00010a00 	sll	at,at,0x8
800452ec:	afa10014 	sw	at,20(sp)
800452f0:	27a40078 	addiu	a0,sp,120
800452f4:	0c00ed97 	jal	8003b65c <_ZN104_$LT$core..iter..adapters..cloned..Cloned$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h99c66ea835c86bdbE>
800452f8:	00000000 	nop
800452fc:	30410001 	andi	at,v0,0x1
80045300:	a3a100b1 	sb	at,177(sp)
80045304:	a3a300b2 	sb	v1,178(sp)
        match self {
80045308:	93a100b1 	lbu	at,177(sp)
8004530c:	30210001 	andi	at,at,0x1
80045310:	14200007 	bnez	at,80045330 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x344>
80045314:	00000000 	nop
80045318:	080114c8 	j	80045320 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x334>
8004531c:	00000000 	nop
            None => unwrap_failed(),
80045320:	3c018108 	lui	at,0x8108
80045324:	2424c598 	addiu	a0,at,-14952
80045328:	0c00f1b6 	jal	8003c6d8 <_ZN4core6option13unwrap_failed17h911a9cef81c80d1eE>
8004532c:	00000000 	nop
            Some(val) => val,
80045330:	8fa10014 	lw	at,20(sp)
80045334:	93a200b2 	lbu	v0,178(sp)
80045338:	a3a200b3 	sb	v0,179(sp)
8004533c:	00220825 	or	at,at,v0
80045340:	afa10084 	sw	at,132(sp)
        let len = if v & 0x80 != 0 {
80045344:	080114d3 	j	8004534c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x360>
80045348:	00000000 	nop
        x -= len;
8004534c:	8fa20084 	lw	v0,132(sp)
80045350:	8fa30074 	lw	v1,116(sp)
80045354:	24010000 	li	at,0
80045358:	0002082a 	slt	at,zero,v0
8004535c:	00621023 	subu	v0,v1,v0
80045360:	afa20010 	sw	v0,16(sp)
80045364:	0043102a 	slt	v0,v0,v1
80045368:	00220826 	xor	at,at,v0
8004536c:	1420000a 	bnez	at,80045398 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x3ac>
80045370:	00000000 	nop
80045374:	080114df 	j	8004537c <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x390>
80045378:	00000000 	nop
8004537c:	8fa10010 	lw	at,16(sp)
80045380:	afa10074 	sw	at,116(sp)
        if x < 0 {
80045384:	8fa10074 	lw	at,116(sp)
80045388:	0420ffcb 	bltz	at,800452b8 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x2cc>
8004538c:	00000000 	nop
80045390:	080114ea 	j	800453a8 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x3bc>
80045394:	00000000 	nop
        x -= len;
80045398:	3c018108 	lui	at,0x8108
8004539c:	2424c5a8 	addiu	a0,at,-14936
800453a0:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800453a4:	00000000 	nop
        current = !current;
800453a8:	93a10081 	lbu	at,129(sp)
800453ac:	00200827 	nor	at,at,zero
800453b0:	30210001 	andi	at,at,0x1
800453b4:	a3a10081 	sb	at,129(sp)
    while let Some(v) = normal.next() {
800453b8:	0801149a 	j	80045268 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x27c>
800453bc:	00000000 	nop
}
800453c0:	93a1004f 	lbu	at,79(sp)
800453c4:	30220001 	andi	v0,at,0x1
800453c8:	8fbf00d4 	lw	ra,212(sp)
800453cc:	27bd00d8 	addiu	sp,sp,216
800453d0:	03e00008 	jr	ra
800453d4:	00000000 	nop
800453d8:	27a40068 	addiu	a0,sp,104
            for &lower in &singletonlowers[lowerstart..lowerend] {
800453dc:	0c011fec 	jal	80047fb0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE>
800453e0:	00000000 	nop
800453e4:	afa20070 	sw	v0,112(sp)
800453e8:	8fa10070 	lw	at,112(sp)
800453ec:	1020ff9a 	beqz	at,80045258 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x26c>
800453f0:	00000000 	nop
800453f4:	080114ff 	j	800453fc <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x410>
800453f8:	00000000 	nop
800453fc:	8fa20044 	lw	v0,68(sp)
80045400:	8fa10070 	lw	at,112(sp)
80045404:	90210000 	lbu	at,0(at)
80045408:	a3a100b0 	sb	at,176(sp)
                if lower == x as u8 {
8004540c:	304200ff 	andi	v0,v0,0xff
80045410:	1422fff1 	bne	at,v0,800453d8 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x3ec>
80045414:	00000000 	nop
80045418:	08011508 	j	80045420 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x434>
8004541c:	00000000 	nop
80045420:	24010000 	li	at,0
                    return false;
80045424:	a3a0004f 	sb	zero,79(sp)
}
80045428:	080114f0 	j	800453c0 <_ZN4core7unicode9printable5check17hd052c6660265343eE+0x3d4>
8004542c:	00000000 	nop

80045430 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE>:

pub(crate) fn is_printable(x: char) -> bool {
80045430:	27bdffc0 	addiu	sp,sp,-64
80045434:	afbf003c 	sw	ra,60(sp)
80045438:	afa40024 	sw	a0,36(sp)
8004543c:	afa40030 	sw	a0,48(sp)
    let x = x as u32;
80045440:	afa40034 	sw	a0,52(sp)
    let lower = x as u16;
80045444:	00800825 	move	at,a0
80045448:	afa10028 	sw	at,40(sp)
8004544c:	a7a4003a 	sh	a0,58(sp)

    if x < 32 {
80045450:	2c810020 	sltiu	at,a0,32
80045454:	14200009 	bnez	at,8004547c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x4c>
80045458:	00000000 	nop
8004545c:	08011519 	j	80045464 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x34>
80045460:	00000000 	nop
        // ASCII fast path
        false
    } else if x < 127 {
80045464:	8fa10024 	lw	at,36(sp)
80045468:	2c21007f 	sltiu	at,at,127
8004546c:	1420000e 	bnez	at,800454a8 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x78>
80045470:	00000000 	nop
80045474:	08011523 	j	8004548c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x5c>
80045478:	00000000 	nop
8004547c:	24010000 	li	at,0
        false
80045480:	a3a0002f 	sb	zero,47(sp)
    if x < 32 {
80045484:	08011622 	j	80045888 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80045488:	00000000 	nop
8004548c:	8fa10024 	lw	at,36(sp)
80045490:	3c020001 	lui	v0,0x1
        // ASCII fast path
        true
    } else if x < 0x10000 {
80045494:	0022082b 	sltu	at,at,v0
80045498:	1420000e 	bnez	at,800454d4 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0xa4>
8004549c:	00000000 	nop
800454a0:	0801152e 	j	800454b8 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x88>
800454a4:	00000000 	nop
800454a8:	24010001 	li	at,1
        true
800454ac:	a3a1002f 	sb	at,47(sp)
    } else if x < 127 {
800454b0:	08011622 	j	80045888 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
800454b4:	00000000 	nop
800454b8:	8fa10024 	lw	at,36(sp)
800454bc:	3c020002 	lui	v0,0x2
        check(lower, SINGLETONS0U, SINGLETONS0L, NORMAL0)
    } else if x < 0x20000 {
800454c0:	0022082b 	sltu	at,at,v0
800454c4:	1420001e 	bnez	at,80045540 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x110>
800454c8:	00000000 	nop
800454cc:	08011548 	j	80045520 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0xf0>
800454d0:	00000000 	nop
        check(lower, SINGLETONS0U, SINGLETONS0L, NORMAL0)
800454d4:	8fa40028 	lw	a0,40(sp)
800454d8:	03a01025 	move	v0,sp
800454dc:	2401012d 	li	at,301
800454e0:	ac410018 	sw	at,24(v0)
800454e4:	3c018108 	lui	at,0x8108
800454e8:	2421ca16 	addiu	at,at,-13802
800454ec:	ac410014 	sw	at,20(v0)
800454f0:	24010120 	li	at,288
800454f4:	ac410010 	sw	at,16(v0)
800454f8:	3c018108 	lui	at,0x8108
800454fc:	2425c8a6 	addiu	a1,at,-14170
80045500:	3c018108 	lui	at,0x8108
80045504:	2427c8f6 	addiu	a3,at,-14090
80045508:	24060028 	li	a2,40
8004550c:	0c0113fb 	jal	80044fec <_ZN4core7unicode9printable5check17hd052c6660265343eE>
80045510:	00000000 	nop
80045514:	a3a2002f 	sb	v0,47(sp)
80045518:	08011622 	j	80045888 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
8004551c:	00000000 	nop
80045520:	8fa20024 	lw	v0,36(sp)
80045524:	3c010002 	lui	at,0x2
80045528:	3421a6df 	ori	at,at,0xa6df
        check(lower, SINGLETONS1U, SINGLETONS1L, NORMAL1)
    } else {
        if 0x2a6e0 <= x && x < 0x2a700 {
8004552c:	0022082b 	sltu	at,at,v0
80045530:	1420001e 	bnez	at,800455ac <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x17c>
80045534:	00000000 	nop
80045538:	08011563 	j	8004558c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x15c>
8004553c:	00000000 	nop
        check(lower, SINGLETONS1U, SINGLETONS1L, NORMAL1)
80045540:	8fa40028 	lw	a0,40(sp)
80045544:	03a01025 	move	v0,sp
80045548:	240101c2 	li	at,450
8004554c:	ac410018 	sw	at,24(v0)
80045550:	3c018108 	lui	at,0x8108
80045554:	2421c6e4 	addiu	at,at,-14620
80045558:	ac410014 	sw	at,20(v0)
8004555c:	240100c4 	li	at,196
80045560:	ac410010 	sw	at,16(v0)
80045564:	3c018108 	lui	at,0x8108
80045568:	2425c5c8 	addiu	a1,at,-14904
8004556c:	3c018108 	lui	at,0x8108
80045570:	2427c620 	addiu	a3,at,-14816
80045574:	2406002c 	li	a2,44
80045578:	0c0113fb 	jal	80044fec <_ZN4core7unicode9printable5check17hd052c6660265343eE>
8004557c:	00000000 	nop
80045580:	a3a2002f 	sb	v0,47(sp)
80045584:	08011622 	j	80045888 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80045588:	00000000 	nop
8004558c:	8fa20024 	lw	v0,36(sp)
80045590:	3c010002 	lui	at,0x2
80045594:	3421b739 	ori	at,at,0xb739
            return false;
        }
        if 0x2b73a <= x && x < 0x2b740 {
80045598:	0022082b 	sltu	at,at,v0
8004559c:	14200017 	bnez	at,800455fc <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x1cc>
800455a0:	00000000 	nop
800455a4:	08011577 	j	800455dc <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x1ac>
800455a8:	00000000 	nop
800455ac:	8fa20024 	lw	v0,36(sp)
800455b0:	3c010002 	lui	at,0x2
800455b4:	3421a6ff 	ori	at,at,0xa6ff
        if 0x2a6e0 <= x && x < 0x2a700 {
800455b8:	0022082b 	sltu	at,at,v0
800455bc:	1420fff3 	bnez	at,8004558c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x15c>
800455c0:	00000000 	nop
800455c4:	08011573 	j	800455cc <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x19c>
800455c8:	00000000 	nop
800455cc:	24010000 	li	at,0
            return false;
800455d0:	a3a0002f 	sb	zero,47(sp)
800455d4:	08011622 	j	80045888 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
800455d8:	00000000 	nop
800455dc:	8fa20024 	lw	v0,36(sp)
800455e0:	3c010002 	lui	at,0x2
800455e4:	3421b81d 	ori	at,at,0xb81d
            return false;
        }
        if 0x2b81e <= x && x < 0x2b820 {
800455e8:	0022082b 	sltu	at,at,v0
800455ec:	14200017 	bnez	at,8004564c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x21c>
800455f0:	00000000 	nop
800455f4:	0801158b 	j	8004562c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x1fc>
800455f8:	00000000 	nop
800455fc:	8fa20024 	lw	v0,36(sp)
80045600:	3c010002 	lui	at,0x2
80045604:	3421b73f 	ori	at,at,0xb73f
        if 0x2b73a <= x && x < 0x2b740 {
80045608:	0022082b 	sltu	at,at,v0
8004560c:	1420fff3 	bnez	at,800455dc <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x1ac>
80045610:	00000000 	nop
80045614:	08011587 	j	8004561c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x1ec>
80045618:	00000000 	nop
8004561c:	24010000 	li	at,0
            return false;
80045620:	a3a0002f 	sb	zero,47(sp)
80045624:	08011622 	j	80045888 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80045628:	00000000 	nop
8004562c:	8fa20024 	lw	v0,36(sp)
80045630:	3c010002 	lui	at,0x2
80045634:	3421cea1 	ori	at,at,0xcea1
            return false;
        }
        if 0x2cea2 <= x && x < 0x2ceb0 {
80045638:	0022082b 	sltu	at,at,v0
8004563c:	14200017 	bnez	at,8004569c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x26c>
80045640:	00000000 	nop
80045644:	0801159f 	j	8004567c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x24c>
80045648:	00000000 	nop
8004564c:	8fa20024 	lw	v0,36(sp)
80045650:	3c010002 	lui	at,0x2
80045654:	3421b81f 	ori	at,at,0xb81f
        if 0x2b81e <= x && x < 0x2b820 {
80045658:	0022082b 	sltu	at,at,v0
8004565c:	1420fff3 	bnez	at,8004562c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x1fc>
80045660:	00000000 	nop
80045664:	0801159b 	j	8004566c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x23c>
80045668:	00000000 	nop
8004566c:	24010000 	li	at,0
            return false;
80045670:	a3a0002f 	sb	zero,47(sp)
80045674:	08011622 	j	80045888 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80045678:	00000000 	nop
8004567c:	8fa20024 	lw	v0,36(sp)
80045680:	3c010002 	lui	at,0x2
80045684:	3421ebe0 	ori	at,at,0xebe0
            return false;
        }
        if 0x2ebe1 <= x && x < 0x2ebf0 {
80045688:	0022082b 	sltu	at,at,v0
8004568c:	14200017 	bnez	at,800456ec <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x2bc>
80045690:	00000000 	nop
80045694:	080115b3 	j	800456cc <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x29c>
80045698:	00000000 	nop
8004569c:	8fa20024 	lw	v0,36(sp)
800456a0:	3c010002 	lui	at,0x2
800456a4:	3421ceaf 	ori	at,at,0xceaf
        if 0x2cea2 <= x && x < 0x2ceb0 {
800456a8:	0022082b 	sltu	at,at,v0
800456ac:	1420fff3 	bnez	at,8004567c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x24c>
800456b0:	00000000 	nop
800456b4:	080115af 	j	800456bc <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x28c>
800456b8:	00000000 	nop
800456bc:	24010000 	li	at,0
            return false;
800456c0:	a3a0002f 	sb	zero,47(sp)
800456c4:	08011622 	j	80045888 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
800456c8:	00000000 	nop
800456cc:	8fa20024 	lw	v0,36(sp)
800456d0:	3c010002 	lui	at,0x2
800456d4:	3421ee5d 	ori	at,at,0xee5d
            return false;
        }
        if 0x2ee5e <= x && x < 0x2f800 {
800456d8:	0022082b 	sltu	at,at,v0
800456dc:	14200017 	bnez	at,8004573c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x30c>
800456e0:	00000000 	nop
800456e4:	080115c7 	j	8004571c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x2ec>
800456e8:	00000000 	nop
800456ec:	8fa20024 	lw	v0,36(sp)
800456f0:	3c010002 	lui	at,0x2
800456f4:	3421ebef 	ori	at,at,0xebef
        if 0x2ebe1 <= x && x < 0x2ebf0 {
800456f8:	0022082b 	sltu	at,at,v0
800456fc:	1420fff3 	bnez	at,800456cc <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x29c>
80045700:	00000000 	nop
80045704:	080115c3 	j	8004570c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x2dc>
80045708:	00000000 	nop
8004570c:	24010000 	li	at,0
            return false;
80045710:	a3a0002f 	sb	zero,47(sp)
80045714:	08011622 	j	80045888 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80045718:	00000000 	nop
8004571c:	8fa20024 	lw	v0,36(sp)
80045720:	3c010002 	lui	at,0x2
80045724:	3421fa1d 	ori	at,at,0xfa1d
            return false;
        }
        if 0x2fa1e <= x && x < 0x30000 {
80045728:	0022082b 	sltu	at,at,v0
8004572c:	14200017 	bnez	at,8004578c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x35c>
80045730:	00000000 	nop
80045734:	080115db 	j	8004576c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x33c>
80045738:	00000000 	nop
8004573c:	8fa20024 	lw	v0,36(sp)
80045740:	3c010002 	lui	at,0x2
80045744:	3421f7ff 	ori	at,at,0xf7ff
        if 0x2ee5e <= x && x < 0x2f800 {
80045748:	0022082b 	sltu	at,at,v0
8004574c:	1420fff3 	bnez	at,8004571c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x2ec>
80045750:	00000000 	nop
80045754:	080115d7 	j	8004575c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x32c>
80045758:	00000000 	nop
8004575c:	24010000 	li	at,0
            return false;
80045760:	a3a0002f 	sb	zero,47(sp)
80045764:	08011622 	j	80045888 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80045768:	00000000 	nop
8004576c:	8fa20024 	lw	v0,36(sp)
80045770:	3c010003 	lui	at,0x3
80045774:	3421134a 	ori	at,at,0x134a
            return false;
        }
        if 0x3134b <= x && x < 0x31350 {
80045778:	0022082b 	sltu	at,at,v0
8004577c:	14200017 	bnez	at,800457dc <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x3ac>
80045780:	00000000 	nop
80045784:	080115ef 	j	800457bc <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x38c>
80045788:	00000000 	nop
8004578c:	8fa20024 	lw	v0,36(sp)
80045790:	3c010002 	lui	at,0x2
80045794:	3421ffff 	ori	at,at,0xffff
        if 0x2fa1e <= x && x < 0x30000 {
80045798:	0022082b 	sltu	at,at,v0
8004579c:	1420fff3 	bnez	at,8004576c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x33c>
800457a0:	00000000 	nop
800457a4:	080115eb 	j	800457ac <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x37c>
800457a8:	00000000 	nop
800457ac:	24010000 	li	at,0
            return false;
800457b0:	a3a0002f 	sb	zero,47(sp)
800457b4:	08011622 	j	80045888 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
800457b8:	00000000 	nop
800457bc:	8fa20024 	lw	v0,36(sp)
800457c0:	3c010003 	lui	at,0x3
800457c4:	342123af 	ori	at,at,0x23af
            return false;
        }
        if 0x323b0 <= x && x < 0xe0100 {
800457c8:	0022082b 	sltu	at,at,v0
800457cc:	14200017 	bnez	at,8004582c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x3fc>
800457d0:	00000000 	nop
800457d4:	08011603 	j	8004580c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x3dc>
800457d8:	00000000 	nop
800457dc:	8fa20024 	lw	v0,36(sp)
800457e0:	3c010003 	lui	at,0x3
800457e4:	3421134f 	ori	at,at,0x134f
        if 0x3134b <= x && x < 0x31350 {
800457e8:	0022082b 	sltu	at,at,v0
800457ec:	1420fff3 	bnez	at,800457bc <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x38c>
800457f0:	00000000 	nop
800457f4:	080115ff 	j	800457fc <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x3cc>
800457f8:	00000000 	nop
800457fc:	24010000 	li	at,0
            return false;
80045800:	a3a0002f 	sb	zero,47(sp)
80045804:	08011622 	j	80045888 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80045808:	00000000 	nop
8004580c:	8fa20024 	lw	v0,36(sp)
80045810:	3c01000e 	lui	at,0xe
80045814:	342101ef 	ori	at,at,0x1ef
            return false;
        }
        if 0xe01f0 <= x && x < 0x110000 {
80045818:	0022082b 	sltu	at,at,v0
8004581c:	14200013 	bnez	at,8004586c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x43c>
80045820:	00000000 	nop
80045824:	08011617 	j	8004585c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x42c>
80045828:	00000000 	nop
8004582c:	8fa20024 	lw	v0,36(sp)
80045830:	3c01000e 	lui	at,0xe
80045834:	342100ff 	ori	at,at,0xff
        if 0x323b0 <= x && x < 0xe0100 {
80045838:	0022082b 	sltu	at,at,v0
8004583c:	1420fff3 	bnez	at,8004580c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x3dc>
80045840:	00000000 	nop
80045844:	08011613 	j	8004584c <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x41c>
80045848:	00000000 	nop
8004584c:	24010000 	li	at,0
            return false;
80045850:	a3a0002f 	sb	zero,47(sp)
80045854:	08011622 	j	80045888 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80045858:	00000000 	nop
8004585c:	24010001 	li	at,1
            return false;
        }
        true
80045860:	a3a1002f 	sb	at,47(sp)
    } else if x < 0x20000 {
80045864:	08011622 	j	80045888 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80045868:	00000000 	nop
8004586c:	8fa20024 	lw	v0,36(sp)
80045870:	3c010010 	lui	at,0x10
80045874:	3421ffff 	ori	at,at,0xffff
        if 0xe01f0 <= x && x < 0x110000 {
80045878:	0022082b 	sltu	at,at,v0
8004587c:	a3a1002f 	sb	at,47(sp)
80045880:	08011622 	j	80045888 <_ZN4core7unicode9printable12is_printable17h6b91c3102b789a5dE+0x458>
80045884:	00000000 	nop
    }
}
80045888:	93a1002f 	lbu	at,47(sp)
8004588c:	30220001 	andi	v0,at,0x1
80045890:	8fbf003c 	lw	ra,60(sp)
80045894:	27bd0040 	addiu	sp,sp,64
80045898:	03e00008 	jr	ra
8004589c:	00000000 	nop

800458a0 <_ZN4core7unicode12unicode_data17decode_prefix_sum17h3883e93af65b8b3cE>:
        word
    };
    (word & (1 << (needle % 64) as u64)) != 0
}

fn decode_prefix_sum(short_offset_run_header: u32) -> u32 {
800458a0:	27bdfff8 	addiu	sp,sp,-8
800458a4:	afa40004 	sw	a0,4(sp)
    short_offset_run_header & ((1 << 21) - 1)
800458a8:	7c82a000 	ext	v0,a0,0x0,0x15
800458ac:	27bd0008 	addiu	sp,sp,8
}
800458b0:	03e00008 	jr	ra
800458b4:	00000000 	nop

800458b8 <_ZN4core7unicode12unicode_data13decode_length17h5d277b1fd55038d4E>:

fn decode_length(short_offset_run_header: u32) -> usize {
800458b8:	27bdfff8 	addiu	sp,sp,-8
800458bc:	afa40004 	sw	a0,4(sp)
    (short_offset_run_header >> 21) as usize
800458c0:	00041542 	srl	v0,a0,0x15
800458c4:	27bd0008 	addiu	sp,sp,8
}
800458c8:	03e00008 	jr	ra
800458cc:	00000000 	nop

800458d0 <_ZN4core7unicode12unicode_data11skip_search28_$u7b$$u7b$closure$u7d$$u7d$17hdc343340b1dfbf33E>:
    // So, we cannot have found it (i.e. Ok(idx) + 1 != length) and the correct
    // location cannot be past it, so Err(idx) != length either.
    //
    // This means that we can avoid bounds checking for the accesses below, too.
    let last_idx =
        match short_offset_runs.binary_search_by_key(&(needle << 11), |header| header << 11) {
800458d0:	27bdffe0 	addiu	sp,sp,-32
800458d4:	afbf001c 	sw	ra,28(sp)
800458d8:	afa50010 	sw	a1,16(sp)
800458dc:	00800825 	move	at,a0
800458e0:	8fa40010 	lw	a0,16(sp)
800458e4:	afa10014 	sw	at,20(sp)
800458e8:	afa40018 	sw	a0,24(sp)
800458ec:	3c018108 	lui	at,0x8108
800458f0:	2426cc60 	addiu	a2,at,-13216
800458f4:	2405000b 	li	a1,11
800458f8:	0c011acb 	jal	80046b2c <_ZN58_$LT$$RF$u32$u20$as$u20$core..ops..bit..Shl$LT$i32$GT$$GT$3shl17hc085b2381ec8eeb3E>
800458fc:	00000000 	nop
80045900:	8fbf001c 	lw	ra,28(sp)
80045904:	27bd0020 	addiu	sp,sp,32
80045908:	03e00008 	jr	ra
8004590c:	00000000 	nop

80045910 <_ZN4core7unicode12unicode_data11skip_search28_$u7b$$u7b$closure$u7d$$u7d$17hf201449e22019ac1E>:
        decode_length(*next) - offset_idx
    } else {
        offsets.len() - offset_idx
    };
    let prev =
        last_idx.checked_sub(1).map(|prev| decode_prefix_sum(short_offset_runs[prev])).unwrap_or(0);
80045910:	27bdffe0 	addiu	sp,sp,-32
80045914:	afbf001c 	sw	ra,28(sp)
80045918:	afa50010 	sw	a1,16(sp)
8004591c:	afa40014 	sw	a0,20(sp)
80045920:	afa50018 	sw	a1,24(sp)
80045924:	2ca10021 	sltiu	at,a1,33
80045928:	1020000e 	beqz	at,80045964 <_ZN4core7unicode12unicode_data11skip_search28_$u7b$$u7b$closure$u7d$$u7d$17hf201449e22019ac1E+0x54>
8004592c:	00000000 	nop
80045930:	0801164e 	j	80045938 <_ZN4core7unicode12unicode_data11skip_search28_$u7b$$u7b$closure$u7d$$u7d$17hf201449e22019ac1E+0x28>
80045934:	00000000 	nop
80045938:	8fa20010 	lw	v0,16(sp)
8004593c:	8fa10014 	lw	at,20(sp)
80045940:	00021080 	sll	v0,v0,0x2
80045944:	00220821 	addu	at,at,v0
80045948:	8c240000 	lw	a0,0(at)
8004594c:	0c011628 	jal	800458a0 <_ZN4core7unicode12unicode_data17decode_prefix_sum17h3883e93af65b8b3cE>
80045950:	00000000 	nop
80045954:	8fbf001c 	lw	ra,28(sp)
80045958:	27bd0020 	addiu	sp,sp,32
8004595c:	03e00008 	jr	ra
80045960:	00000000 	nop
80045964:	8fa40010 	lw	a0,16(sp)
80045968:	3c018108 	lui	at,0x8108
8004596c:	2426cc70 	addiu	a2,at,-13200
80045970:	24050021 	li	a1,33
80045974:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80045978:	00000000 	nop

8004597c <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE>:
    *output = data;
    0..len
}

/// Escapes a character into provided buffer using `\u{NNNN}` representation.
pub(crate) fn escape_unicode_into(output: &mut [ascii::Char; 10], ch: char) -> Range<u8> {
8004597c:	27bdff28 	addiu	sp,sp,-216
80045980:	afbf00d4 	sw	ra,212(sp)
80045984:	afa50038 	sw	a1,56(sp)
80045988:	afa4003c 	sw	a0,60(sp)
8004598c:	afa400b0 	sw	a0,176(sp)
80045990:	afa500b4 	sw	a1,180(sp)
80045994:	2401007d 	li	at,125
    output[9] = ascii::Char::RightCurlyBracket;
80045998:	a3a10047 	sb	at,71(sp)
8004599c:	93a10047 	lbu	at,71(sp)
800459a0:	a0810009 	sb	at,9(a0)

    let ch = ch as u32;
800459a4:	afa500b8 	sw	a1,184(sp)
    output[3] = HEX_DIGITS[((ch >> 20) & 15) as usize];
800459a8:	3c028108 	lui	v0,0x8108
800459ac:	2443b429 	addiu	v1,v0,-19415
800459b0:	8861000f 	lwl	at,15(v1)
800459b4:	9861000c 	lwr	at,12(v1)
800459b8:	afa10054 	sw	at,84(sp)
800459bc:	8861000b 	lwl	at,11(v1)
800459c0:	98610008 	lwr	at,8(v1)
800459c4:	afa10050 	sw	at,80(sp)
800459c8:	88610007 	lwl	at,7(v1)
800459cc:	98610004 	lwr	at,4(v1)
800459d0:	afa1004c 	sw	at,76(sp)
800459d4:	88610003 	lwl	at,3(v1)
800459d8:	9841b429 	lwr	at,-19415(v0)
800459dc:	afa10048 	sw	at,72(sp)
800459e0:	7ca11d00 	ext	at,a1,0x14,0x4
800459e4:	afa10040 	sw	at,64(sp)
800459e8:	2c210010 	sltiu	at,at,16
800459ec:	1020001f 	beqz	at,80045a6c <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0xf0>
800459f0:	00000000 	nop
800459f4:	0801167f 	j	800459fc <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x80>
800459f8:	00000000 	nop
800459fc:	8fa10038 	lw	at,56(sp)
80045a00:	8fa3003c 	lw	v1,60(sp)
80045a04:	8fa40040 	lw	a0,64(sp)
80045a08:	27a20048 	addiu	v0,sp,72
80045a0c:	00441021 	addu	v0,v0,a0
80045a10:	90420000 	lbu	v0,0(v0)
80045a14:	a0620003 	sb	v0,3(v1)
    output[4] = HEX_DIGITS[((ch >> 16) & 15) as usize];
80045a18:	3c038108 	lui	v1,0x8108
80045a1c:	2464b429 	addiu	a0,v1,-19415
80045a20:	8882000f 	lwl	v0,15(a0)
80045a24:	9882000c 	lwr	v0,12(a0)
80045a28:	afa20064 	sw	v0,100(sp)
80045a2c:	8882000b 	lwl	v0,11(a0)
80045a30:	98820008 	lwr	v0,8(a0)
80045a34:	afa20060 	sw	v0,96(sp)
80045a38:	88820007 	lwl	v0,7(a0)
80045a3c:	98820004 	lwr	v0,4(a0)
80045a40:	afa2005c 	sw	v0,92(sp)
80045a44:	88820003 	lwl	v0,3(a0)
80045a48:	9862b429 	lwr	v0,-19415(v1)
80045a4c:	afa20058 	sw	v0,88(sp)
80045a50:	7c211c00 	ext	at,at,0x10,0x4
80045a54:	afa10034 	sw	at,52(sp)
80045a58:	2c210010 	sltiu	at,at,16
80045a5c:	14200009 	bnez	at,80045a84 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x108>
80045a60:	00000000 	nop
80045a64:	080116bd 	j	80045af4 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x178>
80045a68:	00000000 	nop
    output[3] = HEX_DIGITS[((ch >> 20) & 15) as usize];
80045a6c:	8fa40040 	lw	a0,64(sp)
80045a70:	3c018108 	lui	at,0x8108
80045a74:	2426ccec 	addiu	a2,at,-13076
80045a78:	24050010 	li	a1,16
80045a7c:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80045a80:	00000000 	nop
80045a84:	8fa10038 	lw	at,56(sp)
80045a88:	8fa3003c 	lw	v1,60(sp)
80045a8c:	8fa40034 	lw	a0,52(sp)
80045a90:	27a20058 	addiu	v0,sp,88
    output[4] = HEX_DIGITS[((ch >> 16) & 15) as usize];
80045a94:	00441021 	addu	v0,v0,a0
80045a98:	90420000 	lbu	v0,0(v0)
80045a9c:	a0620004 	sb	v0,4(v1)
    output[5] = HEX_DIGITS[((ch >> 12) & 15) as usize];
80045aa0:	3c038108 	lui	v1,0x8108
80045aa4:	2464b429 	addiu	a0,v1,-19415
80045aa8:	8882000f 	lwl	v0,15(a0)
80045aac:	9882000c 	lwr	v0,12(a0)
80045ab0:	afa20074 	sw	v0,116(sp)
80045ab4:	8882000b 	lwl	v0,11(a0)
80045ab8:	98820008 	lwr	v0,8(a0)
80045abc:	afa20070 	sw	v0,112(sp)
80045ac0:	88820007 	lwl	v0,7(a0)
80045ac4:	98820004 	lwr	v0,4(a0)
80045ac8:	afa2006c 	sw	v0,108(sp)
80045acc:	88820003 	lwl	v0,3(a0)
80045ad0:	9862b429 	lwr	v0,-19415(v1)
80045ad4:	afa20068 	sw	v0,104(sp)
80045ad8:	7c211b00 	ext	at,at,0xc,0x4
80045adc:	afa10030 	sw	at,48(sp)
80045ae0:	2c210010 	sltiu	at,at,16
80045ae4:	14200009 	bnez	at,80045b0c <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x190>
80045ae8:	00000000 	nop
80045aec:	080116df 	j	80045b7c <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x200>
80045af0:	00000000 	nop
    output[4] = HEX_DIGITS[((ch >> 16) & 15) as usize];
80045af4:	8fa40034 	lw	a0,52(sp)
80045af8:	3c018108 	lui	at,0x8108
80045afc:	2426ccfc 	addiu	a2,at,-13060
80045b00:	24050010 	li	a1,16
80045b04:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80045b08:	00000000 	nop
80045b0c:	8fa10038 	lw	at,56(sp)
80045b10:	8fa3003c 	lw	v1,60(sp)
80045b14:	8fa40030 	lw	a0,48(sp)
80045b18:	27a20068 	addiu	v0,sp,104
    output[5] = HEX_DIGITS[((ch >> 12) & 15) as usize];
80045b1c:	00441021 	addu	v0,v0,a0
80045b20:	90420000 	lbu	v0,0(v0)
80045b24:	a0620005 	sb	v0,5(v1)
    output[6] = HEX_DIGITS[((ch >> 8) & 15) as usize];
80045b28:	3c038108 	lui	v1,0x8108
80045b2c:	2464b429 	addiu	a0,v1,-19415
80045b30:	8882000f 	lwl	v0,15(a0)
80045b34:	9882000c 	lwr	v0,12(a0)
80045b38:	afa20084 	sw	v0,132(sp)
80045b3c:	8882000b 	lwl	v0,11(a0)
80045b40:	98820008 	lwr	v0,8(a0)
80045b44:	afa20080 	sw	v0,128(sp)
80045b48:	88820007 	lwl	v0,7(a0)
80045b4c:	98820004 	lwr	v0,4(a0)
80045b50:	afa2007c 	sw	v0,124(sp)
80045b54:	88820003 	lwl	v0,3(a0)
80045b58:	9862b429 	lwr	v0,-19415(v1)
80045b5c:	afa20078 	sw	v0,120(sp)
80045b60:	7c211a00 	ext	at,at,0x8,0x4
80045b64:	afa1002c 	sw	at,44(sp)
80045b68:	2c210010 	sltiu	at,at,16
80045b6c:	14200009 	bnez	at,80045b94 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x218>
80045b70:	00000000 	nop
80045b74:	08011701 	j	80045c04 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x288>
80045b78:	00000000 	nop
    output[5] = HEX_DIGITS[((ch >> 12) & 15) as usize];
80045b7c:	8fa40030 	lw	a0,48(sp)
80045b80:	3c018108 	lui	at,0x8108
80045b84:	2426cd0c 	addiu	a2,at,-13044
80045b88:	24050010 	li	a1,16
80045b8c:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80045b90:	00000000 	nop
80045b94:	8fa10038 	lw	at,56(sp)
80045b98:	8fa3003c 	lw	v1,60(sp)
80045b9c:	8fa4002c 	lw	a0,44(sp)
80045ba0:	27a20078 	addiu	v0,sp,120
    output[6] = HEX_DIGITS[((ch >> 8) & 15) as usize];
80045ba4:	00441021 	addu	v0,v0,a0
80045ba8:	90420000 	lbu	v0,0(v0)
80045bac:	a0620006 	sb	v0,6(v1)
    output[7] = HEX_DIGITS[((ch >> 4) & 15) as usize];
80045bb0:	3c038108 	lui	v1,0x8108
80045bb4:	2464b429 	addiu	a0,v1,-19415
80045bb8:	8882000f 	lwl	v0,15(a0)
80045bbc:	9882000c 	lwr	v0,12(a0)
80045bc0:	afa20094 	sw	v0,148(sp)
80045bc4:	8882000b 	lwl	v0,11(a0)
80045bc8:	98820008 	lwr	v0,8(a0)
80045bcc:	afa20090 	sw	v0,144(sp)
80045bd0:	88820007 	lwl	v0,7(a0)
80045bd4:	98820004 	lwr	v0,4(a0)
80045bd8:	afa2008c 	sw	v0,140(sp)
80045bdc:	88820003 	lwl	v0,3(a0)
80045be0:	9862b429 	lwr	v0,-19415(v1)
80045be4:	afa20088 	sw	v0,136(sp)
80045be8:	7c211900 	ext	at,at,0x4,0x4
80045bec:	afa10028 	sw	at,40(sp)
80045bf0:	2c210010 	sltiu	at,at,16
80045bf4:	14200009 	bnez	at,80045c1c <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x2a0>
80045bf8:	00000000 	nop
80045bfc:	08011723 	j	80045c8c <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x310>
80045c00:	00000000 	nop
    output[6] = HEX_DIGITS[((ch >> 8) & 15) as usize];
80045c04:	8fa4002c 	lw	a0,44(sp)
80045c08:	3c018108 	lui	at,0x8108
80045c0c:	2426cd1c 	addiu	a2,at,-13028
80045c10:	24050010 	li	a1,16
80045c14:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80045c18:	00000000 	nop
80045c1c:	8fa10038 	lw	at,56(sp)
80045c20:	8fa3003c 	lw	v1,60(sp)
80045c24:	8fa40028 	lw	a0,40(sp)
80045c28:	27a20088 	addiu	v0,sp,136
    output[7] = HEX_DIGITS[((ch >> 4) & 15) as usize];
80045c2c:	00441021 	addu	v0,v0,a0
80045c30:	90420000 	lbu	v0,0(v0)
80045c34:	a0620007 	sb	v0,7(v1)
    output[8] = HEX_DIGITS[((ch >> 0) & 15) as usize];
80045c38:	3c038108 	lui	v1,0x8108
80045c3c:	2464b429 	addiu	a0,v1,-19415
80045c40:	8882000f 	lwl	v0,15(a0)
80045c44:	9882000c 	lwr	v0,12(a0)
80045c48:	afa200a4 	sw	v0,164(sp)
80045c4c:	8882000b 	lwl	v0,11(a0)
80045c50:	98820008 	lwr	v0,8(a0)
80045c54:	afa200a0 	sw	v0,160(sp)
80045c58:	88820007 	lwl	v0,7(a0)
80045c5c:	98820004 	lwr	v0,4(a0)
80045c60:	afa2009c 	sw	v0,156(sp)
80045c64:	88820003 	lwl	v0,3(a0)
80045c68:	9862b429 	lwr	v0,-19415(v1)
80045c6c:	afa20098 	sw	v0,152(sp)
80045c70:	3021000f 	andi	at,at,0xf
80045c74:	afa10024 	sw	at,36(sp)
80045c78:	2c210010 	sltiu	at,at,16
80045c7c:	14200009 	bnez	at,80045ca4 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x328>
80045c80:	00000000 	nop
80045c84:	0801173d 	j	80045cf4 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x378>
80045c88:	00000000 	nop
    output[7] = HEX_DIGITS[((ch >> 4) & 15) as usize];
80045c8c:	8fa40028 	lw	a0,40(sp)
80045c90:	3c018108 	lui	at,0x8108
80045c94:	2426cd2c 	addiu	a2,at,-13012
80045c98:	24050010 	li	a1,16
80045c9c:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80045ca0:	00000000 	nop
80045ca4:	8fa10038 	lw	at,56(sp)
80045ca8:	8fa3003c 	lw	v1,60(sp)
80045cac:	8fa40024 	lw	a0,36(sp)
80045cb0:	27a20098 	addiu	v0,sp,152
    output[8] = HEX_DIGITS[((ch >> 0) & 15) as usize];
80045cb4:	00441021 	addu	v0,v0,a0
80045cb8:	90420000 	lbu	v0,0(v0)
80045cbc:	a0620008 	sb	v0,8(v1)

    // or-ing 1 ensures that for ch==0 the code computes that one digit should
    // be printed.
    let start = (ch | 1).leading_zeros() as usize / 4 - 2;
80045cc0:	34210001 	ori	at,at,0x1
80045cc4:	afa100cc 	sw	at,204(sp)
            intrinsics::ctlz(self as $ActualT) as u32
80045cc8:	70210820 	clz	at,at
80045ccc:	afa100d0 	sw	at,208(sp)
80045cd0:	8fa100d0 	lw	at,208(sp)
80045cd4:	00010882 	srl	at,at,0x2
80045cd8:	2422fffe 	addiu	v0,at,-2
80045cdc:	afa20020 	sw	v0,32(sp)
80045ce0:	2c210002 	sltiu	at,at,2
80045ce4:	14200034 	bnez	at,80045db8 <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x43c>
80045ce8:	00000000 	nop
80045cec:	08011743 	j	80045d0c <_ZN4core6escape19escape_unicode_into17hef7eabda6bb54d9eE+0x390>
80045cf0:	00000000 	nop
    output[8] = HEX_DIGITS[((ch >> 0) & 15) as usize];
80045cf4:	8fa40024 	lw	a0,36(sp)
80045cf8:	3c018108 	lui	at,0x8108
80045cfc:	2426cd3c 	addiu	a2,at,-12996
80045d00:	24050010 	li	a1,16
80045d04:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80045d08:	00000000 	nop
    let start = (ch | 1).leading_zeros() as usize / 4 - 2;
80045d0c:	8fa10020 	lw	at,32(sp)
80045d10:	8fa4003c 	lw	a0,60(sp)
80045d14:	afa100bc 	sw	at,188(sp)
    const UNICODE_ESCAPE_PREFIX: &[ascii::Char; 3] = b"\\u{".as_ascii().unwrap();
    output[start..][..3].copy_from_slice(UNICODE_ESCAPE_PREFIX);
80045d18:	afa100a8 	sw	at,168(sp)
80045d1c:	8fa500a8 	lw	a1,168(sp)
80045d20:	3c018108 	lui	at,0x8108
80045d24:	2426cd5c 	addiu	a2,at,-12964
80045d28:	0c00eaf4 	jal	8003abd0 <_ZN4core5array88_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$9index_mut17h64941d6709fd2000E>
80045d2c:	00000000 	nop
80045d30:	00402825 	move	a1,v0
80045d34:	00603025 	move	a2,v1
80045d38:	24010003 	li	at,3
80045d3c:	afa1001c 	sw	at,28(sp)
80045d40:	afa100ac 	sw	at,172(sp)
80045d44:	8fa400ac 	lw	a0,172(sp)
80045d48:	afa500c0 	sw	a1,192(sp)
80045d4c:	afa600c4 	sw	a2,196(sp)
80045d50:	afa400c8 	sw	a0,200(sp)
        index.index_mut(self)
80045d54:	3c018108 	lui	at,0x8108
80045d58:	2427cd6c 	addiu	a3,at,-12948
80045d5c:	0c01062a 	jal	800418a8 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hcf5fb57ce5379036E>
80045d60:	00000000 	nop
80045d64:	8fa7001c 	lw	a3,28(sp)
80045d68:	00402025 	move	a0,v0
80045d6c:	00602825 	move	a1,v1
80045d70:	3c018108 	lui	at,0x8108
80045d74:	2421cd80 	addiu	at,at,-12928
80045d78:	03a01025 	move	v0,sp
80045d7c:	ac410010 	sw	at,16(v0)
80045d80:	3c018108 	lui	at,0x8108
80045d84:	2426cd7c 	addiu	a2,at,-12932
80045d88:	0c010bfa 	jal	80042fe8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E>
80045d8c:	00000000 	nop
80045d90:	8fa10020 	lw	at,32(sp)

    (start as u8)..10
80045d94:	a3a10045 	sb	at,69(sp)
80045d98:	2401000a 	li	at,10
80045d9c:	a3a10046 	sb	at,70(sp)
}
80045da0:	93a20045 	lbu	v0,69(sp)
80045da4:	93a30046 	lbu	v1,70(sp)
80045da8:	8fbf00d4 	lw	ra,212(sp)
80045dac:	27bd00d8 	addiu	sp,sp,216
80045db0:	03e00008 	jr	ra
80045db4:	00000000 	nop
    let start = (ch | 1).leading_zeros() as usize / 4 - 2;
80045db8:	3c018108 	lui	at,0x8108
80045dbc:	2424cd4c 	addiu	a0,at,-12980
80045dc0:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80045dc4:	00000000 	nop

80045dc8 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE>:
    // Invariant: alive.start <= alive.end <= N.
    pub(crate) alive: Range<u8>,
}

impl<const N: usize> EscapeIterInner<N> {
    pub fn new(data: [ascii::Char; N], alive: Range<u8>) -> Self {
80045dc8:	27bdff98 	addiu	sp,sp,-104
80045dcc:	afbf0064 	sw	ra,100(sp)
80045dd0:	afa5001c 	sw	a1,28(sp)
80045dd4:	afa40020 	sw	a0,32(sp)
80045dd8:	afa40024 	sw	a0,36(sp)
80045ddc:	a3a6002a 	sb	a2,42(sp)
80045de0:	a3a7002b 	sb	a3,43(sp)
        const { assert!(N < 256) };
        debug_assert!(alive.start <= alive.end && usize::from(alive.end) <= N, "{alive:?}");
80045de4:	0801177b 	j	80045dec <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE+0x24>
80045de8:	00000000 	nop
80045dec:	93a2002a 	lbu	v0,42(sp)
80045df0:	93a1002b 	lbu	at,43(sp)
80045df4:	0022082b 	sltu	at,at,v0
80045df8:	1020001e 	beqz	at,80045e74 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE+0xac>
80045dfc:	00000000 	nop
80045e00:	08011782 	j	80045e08 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE+0x40>
80045e04:	00000000 	nop
80045e08:	27a2002a 	addiu	v0,sp,42
80045e0c:	afa2004c 	sw	v0,76(sp)
80045e10:	afa20058 	sw	v0,88(sp)
80045e14:	3c018004 	lui	at,0x8004
80045e18:	2421a80c 	addiu	at,at,-22516
80045e1c:	afa1005c 	sw	at,92(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80045e20:	afa20050 	sw	v0,80(sp)
80045e24:	afa10054 	sw	at,84(sp)
    }
80045e28:	8fa20050 	lw	v0,80(sp)
80045e2c:	8fa10054 	lw	at,84(sp)
80045e30:	afa20044 	sw	v0,68(sp)
80045e34:	afa10048 	sw	at,72(sp)
80045e38:	03a00825 	move	at,sp
80045e3c:	24060001 	li	a2,1
80045e40:	ac260010 	sw	a2,16(at)
80045e44:	3c018108 	lui	at,0x8108
80045e48:	2425b6a8 	addiu	a1,at,-18776
80045e4c:	27a4002c 	addiu	a0,sp,44
80045e50:	afa40018 	sw	a0,24(sp)
80045e54:	27a70044 	addiu	a3,sp,68
80045e58:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
80045e5c:	00000000 	nop
80045e60:	8fa40018 	lw	a0,24(sp)
80045e64:	3c018108 	lui	at,0x8108
80045e68:	2425cd90 	addiu	a1,at,-12912
80045e6c:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80045e70:	00000000 	nop
80045e74:	93a1002b 	lbu	at,43(sp)
80045e78:	a3a10063 	sb	at,99(sp)
80045e7c:	2c21000b 	sltiu	at,at,11
80045e80:	1020ffe1 	beqz	at,80045e08 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE+0x40>
80045e84:	00000000 	nop
80045e88:	080117a4 	j	80045e90 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE+0xc8>
80045e8c:	00000000 	nop
        Self { data, alive }
80045e90:	8fa20024 	lw	v0,36(sp)
80045e94:	8fa30020 	lw	v1,32(sp)
80045e98:	8fa7001c 	lw	a3,28(sp)
80045e9c:	93a4002a 	lbu	a0,42(sp)
80045ea0:	93a1002b 	lbu	at,43(sp)
80045ea4:	88e60007 	lwl	a2,7(a3)
80045ea8:	98e60004 	lwr	a2,4(a3)
80045eac:	a8660007 	swl	a2,7(v1)
80045eb0:	88e50003 	lwl	a1,3(a3)
80045eb4:	98e50000 	lwr	a1,0(a3)
80045eb8:	a8650003 	swl	a1,3(v1)
80045ebc:	90e80009 	lbu	t0,9(a3)
80045ec0:	a0680009 	sb	t0,9(v1)
80045ec4:	90e70008 	lbu	a3,8(a3)
80045ec8:	a0670008 	sb	a3,8(v1)
80045ecc:	b8660004 	swr	a2,4(v1)
80045ed0:	b8650000 	swr	a1,0(v1)
80045ed4:	a064000a 	sb	a0,10(v1)
80045ed8:	a061000b 	sb	at,11(v1)
    }
80045edc:	8fbf0064 	lw	ra,100(sp)
80045ee0:	27bd0068 	addiu	sp,sp,104
80045ee4:	03e00008 	jr	ra
80045ee8:	00000000 	nop

80045eec <_ZN4core6escape24EscapeIterInner$LT$_$GT$10from_array17h2d26a693fb365472E>:

    pub fn from_array<const M: usize>(array: [ascii::Char; M]) -> Self {
80045eec:	27bdffb8 	addiu	sp,sp,-72
80045ef0:	afbf0044 	sw	ra,68(sp)
80045ef4:	afa4001c 	sw	a0,28(sp)
80045ef8:	afa40020 	sw	a0,32(sp)
80045efc:	24010000 	li	at,0
80045f00:	afa10018 	sw	at,24(sp)
        const { assert!(M <= N) };

        let mut data = [ascii::Char::Null; N];
80045f04:	a3a00033 	sb	zero,51(sp)
80045f08:	93a10033 	lbu	at,51(sp)
80045f0c:	00011200 	sll	v0,at,0x8
80045f10:	00411825 	or	v1,v0,at
80045f14:	a7a30030 	sh	v1,48(sp)
80045f18:	00011400 	sll	v0,at,0x10
80045f1c:	00431025 	or	v0,v0,v1
80045f20:	00010e00 	sll	at,at,0x18
80045f24:	00220825 	or	at,at,v0
80045f28:	afa1002c 	sw	at,44(sp)
80045f2c:	afa10028 	sw	at,40(sp)
        data[..M].copy_from_slice(&array);
80045f30:	afa00034 	sw	zero,52(sp)
80045f34:	8fa50034 	lw	a1,52(sp)
80045f38:	3c018108 	lui	at,0x8108
80045f3c:	2426cda0 	addiu	a2,at,-12896
80045f40:	27a40028 	addiu	a0,sp,40
80045f44:	0c00eae2 	jal	8003ab88 <_ZN4core5array88_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$9index_mut17h3b37ece2936c0239E>
80045f48:	00000000 	nop
80045f4c:	8fa70018 	lw	a3,24(sp)
80045f50:	00402025 	move	a0,v0
80045f54:	00602825 	move	a1,v1
80045f58:	3c018108 	lui	at,0x8108
80045f5c:	2421cdb0 	addiu	at,at,-12880
80045f60:	03a01025 	move	v0,sp
80045f64:	ac410010 	sw	at,16(v0)
80045f68:	27a60027 	addiu	a2,sp,39
80045f6c:	0c010bfa 	jal	80042fe8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E>
80045f70:	00000000 	nop
80045f74:	8fa4001c 	lw	a0,28(sp)
        Self::new(data, 0..M as u8)
80045f78:	97a10030 	lhu	at,48(sp)
80045f7c:	a7a10040 	sh	at,64(sp)
80045f80:	8fa1002c 	lw	at,44(sp)
80045f84:	afa1003c 	sw	at,60(sp)
80045f88:	8fa10028 	lw	at,40(sp)
80045f8c:	afa10038 	sw	at,56(sp)
80045f90:	a3a00042 	sb	zero,66(sp)
80045f94:	a3a00043 	sb	zero,67(sp)
80045f98:	93a70043 	lbu	a3,67(sp)
80045f9c:	93a60042 	lbu	a2,66(sp)
80045fa0:	27a50038 	addiu	a1,sp,56
80045fa4:	0c011772 	jal	80045dc8 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE>
80045fa8:	00000000 	nop
80045fac:	8fa20020 	lw	v0,32(sp)
    }
80045fb0:	8fbf0044 	lw	ra,68(sp)
80045fb4:	27bd0048 	addiu	sp,sp,72
80045fb8:	03e00008 	jr	ra
80045fbc:	00000000 	nop

80045fc0 <_ZN4core6escape24EscapeIterInner$LT$_$GT$10from_array17hd229c07af8ede3fdE>:
    pub fn from_array<const M: usize>(array: [ascii::Char; M]) -> Self {
80045fc0:	27bdffb8 	addiu	sp,sp,-72
80045fc4:	afbf0044 	sw	ra,68(sp)
80045fc8:	afa4001c 	sw	a0,28(sp)
80045fcc:	afa40020 	sw	a0,32(sp)
80045fd0:	a7a50026 	sh	a1,38(sp)
80045fd4:	97a10026 	lhu	at,38(sp)
80045fd8:	a7a10024 	sh	at,36(sp)
80045fdc:	24010000 	li	at,0
        let mut data = [ascii::Char::Null; N];
80045fe0:	a3a00033 	sb	zero,51(sp)
80045fe4:	93a10033 	lbu	at,51(sp)
80045fe8:	00011200 	sll	v0,at,0x8
80045fec:	00411825 	or	v1,v0,at
80045ff0:	a7a30030 	sh	v1,48(sp)
80045ff4:	00011400 	sll	v0,at,0x10
80045ff8:	00431025 	or	v0,v0,v1
80045ffc:	00010e00 	sll	at,at,0x18
80046000:	00220825 	or	at,at,v0
80046004:	afa1002c 	sw	at,44(sp)
80046008:	afa10028 	sw	at,40(sp)
8004600c:	24010002 	li	at,2
80046010:	afa10018 	sw	at,24(sp)
        data[..M].copy_from_slice(&array);
80046014:	afa10034 	sw	at,52(sp)
80046018:	8fa50034 	lw	a1,52(sp)
8004601c:	3c018108 	lui	at,0x8108
80046020:	2426cda0 	addiu	a2,at,-12896
80046024:	27a40028 	addiu	a0,sp,40
80046028:	0c00eae2 	jal	8003ab88 <_ZN4core5array88_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$9index_mut17h3b37ece2936c0239E>
8004602c:	00000000 	nop
80046030:	8fa70018 	lw	a3,24(sp)
80046034:	00402025 	move	a0,v0
80046038:	00602825 	move	a1,v1
8004603c:	3c018108 	lui	at,0x8108
80046040:	2421cdb0 	addiu	at,at,-12880
80046044:	03a01025 	move	v0,sp
80046048:	ac410010 	sw	at,16(v0)
8004604c:	27a60024 	addiu	a2,sp,36
80046050:	0c010bfa 	jal	80042fe8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hc859f9d6f92c4eb7E>
80046054:	00000000 	nop
80046058:	8fa10018 	lw	at,24(sp)
8004605c:	8fa4001c 	lw	a0,28(sp)
        Self::new(data, 0..M as u8)
80046060:	97a20030 	lhu	v0,48(sp)
80046064:	a7a20040 	sh	v0,64(sp)
80046068:	8fa2002c 	lw	v0,44(sp)
8004606c:	afa2003c 	sw	v0,60(sp)
80046070:	8fa20028 	lw	v0,40(sp)
80046074:	afa20038 	sw	v0,56(sp)
80046078:	a3a00042 	sb	zero,66(sp)
8004607c:	a3a10043 	sb	at,67(sp)
80046080:	93a70043 	lbu	a3,67(sp)
80046084:	93a60042 	lbu	a2,66(sp)
80046088:	27a50038 	addiu	a1,sp,56
8004608c:	0c011772 	jal	80045dc8 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3new17hfd993d672392464cE>
80046090:	00000000 	nop
80046094:	8fa20020 	lw	v0,32(sp)
    }
80046098:	8fbf0044 	lw	ra,68(sp)
8004609c:	27bd0048 	addiu	sp,sp,72
800460a0:	03e00008 	jr	ra
800460a4:	00000000 	nop

800460a8 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3len17h46a78ba788686e9dE>:

    pub fn as_str(&self) -> &str {
        self.as_ascii().as_str()
    }

    pub fn len(&self) -> usize {
800460a8:	27bdffe0 	addiu	sp,sp,-32
800460ac:	afa40018 	sw	a0,24(sp)
        usize::from(self.alive.end - self.alive.start)
800460b0:	9081000b 	lbu	at,11(a0)
800460b4:	9082000a 	lbu	v0,10(a0)
800460b8:	00221823 	subu	v1,at,v0
800460bc:	afa30014 	sw	v1,20(sp)
800460c0:	0022082b 	sltu	at,at,v0
800460c4:	14200009 	bnez	at,800460ec <_ZN4core6escape24EscapeIterInner$LT$_$GT$3len17h46a78ba788686e9dE+0x44>
800460c8:	00000000 	nop
800460cc:	08011835 	j	800460d4 <_ZN4core6escape24EscapeIterInner$LT$_$GT$3len17h46a78ba788686e9dE+0x2c>
800460d0:	00000000 	nop
800460d4:	8fa10014 	lw	at,20(sp)
800460d8:	a3a1001f 	sb	at,31(sp)
800460dc:	302200ff 	andi	v0,at,0xff
800460e0:	27bd0020 	addiu	sp,sp,32
    }
800460e4:	03e00008 	jr	ra
800460e8:	00000000 	nop
        usize::from(self.alive.end - self.alive.start)
800460ec:	3c018108 	lui	at,0x8108
800460f0:	2424cdc0 	addiu	a0,at,-12864
800460f4:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800460f8:	00000000 	nop

800460fc <_ZN4core6escape24EscapeIterInner$LT$_$GT$4next17h46da1e292175aea6E>:

    pub fn next(&mut self) -> Option<u8> {
800460fc:	27bdffe0 	addiu	sp,sp,-32
80046100:	afbf001c 	sw	ra,28(sp)
80046104:	afa40010 	sw	a0,16(sp)
80046108:	afa40018 	sw	a0,24(sp)
        self.alive.next().map(|i| self.data[usize::from(i)].to_u8())
8004610c:	2484000a 	addiu	a0,a0,10
80046110:	0c00eef6 	jal	8003bbd8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h452dab29ddeb92e6E>
80046114:	00000000 	nop
80046118:	8fa40010 	lw	a0,16(sp)
8004611c:	00602825 	move	a1,v1
80046120:	afa40014 	sw	a0,20(sp)
80046124:	8fa60014 	lw	a2,20(sp)
80046128:	30440001 	andi	a0,v0,0x1
8004612c:	0c00f13f 	jal	8003c4fc <_ZN4core6option15Option$LT$T$GT$3map17ha5fb958d327a6e51E>
80046130:	00000000 	nop
    }
80046134:	8fbf001c 	lw	ra,28(sp)
80046138:	27bd0020 	addiu	sp,sp,32
8004613c:	03e00008 	jr	ra
80046140:	00000000 	nop

80046144 <_ZN4core6escape24EscapeIterInner$LT$_$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17haa901ecadf721869E>:
        self.alive.next().map(|i| self.data[usize::from(i)].to_u8())
80046144:	27bdffe0 	addiu	sp,sp,-32
80046148:	afbf001c 	sw	ra,28(sp)
8004614c:	afa40014 	sw	a0,20(sp)
80046150:	a3a5001a 	sb	a1,26(sp)
80046154:	a3a5001b 	sb	a1,27(sp)
80046158:	30a100ff 	andi	at,a1,0xff
8004615c:	afa10010 	sw	at,16(sp)
80046160:	2c21000a 	sltiu	at,at,10
80046164:	1020000d 	beqz	at,8004619c <_ZN4core6escape24EscapeIterInner$LT$_$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17haa901ecadf721869E+0x58>
80046168:	00000000 	nop
8004616c:	0801185d 	j	80046174 <_ZN4core6escape24EscapeIterInner$LT$_$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17haa901ecadf721869E+0x30>
80046170:	00000000 	nop
80046174:	8fa20010 	lw	v0,16(sp)
80046178:	8fa10014 	lw	at,20(sp)
8004617c:	00220821 	addu	at,at,v0
80046180:	90240000 	lbu	a0,0(at)
80046184:	0c00eb06 	jal	8003ac18 <_ZN4core5ascii10ascii_char9AsciiChar5to_u817he7dc2dbee10bd70dE>
80046188:	00000000 	nop
8004618c:	8fbf001c 	lw	ra,28(sp)
80046190:	27bd0020 	addiu	sp,sp,32
80046194:	03e00008 	jr	ra
80046198:	00000000 	nop
8004619c:	8fa40010 	lw	a0,16(sp)
800461a0:	3c018108 	lui	at,0x8108
800461a4:	2426cdd0 	addiu	a2,at,-12848
800461a8:	2405000a 	li	a1,10
800461ac:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
800461b0:	00000000 	nop

800461b4 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked18precondition_check17h2dffd53263e0e1a6E>:
            const fn precondition_check($($name:$ty),*) {
800461b4:	27bdfff0 	addiu	sp,sp,-16
                        () => false,
800461b8:	08011870 	j	800461c0 <_ZN4core3num7nonzero16NonZero$LT$T$GT$13new_unchecked18precondition_check17h2dffd53263e0e1a6E+0xc>
800461bc:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800461c0:	3c018108 	lui	at,0x8108
800461c4:	2424cde0 	addiu	a0,at,-12832
800461c8:	2405005c 	li	a1,92
800461cc:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800461d0:	00000000 	nop

800461d4 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E>:
        pub const fn abs(self) -> Self {
800461d4:	27bdffe0 	addiu	sp,sp,-32
800461d8:	afa40010 	sw	a0,16(sp)
800461dc:	afa40018 	sw	a0,24(sp)
800461e0:	afa4001c 	sw	a0,28(sp)
            if self.is_negative() {
800461e4:	04800007 	bltz	a0,80046204 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E+0x30>
800461e8:	00000000 	nop
800461ec:	0801187d 	j	800461f4 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E+0x20>
800461f0:	00000000 	nop
                self
800461f4:	8fa10010 	lw	at,16(sp)
800461f8:	afa10014 	sw	at,20(sp)
            if self.is_negative() {
800461fc:	08011887 	j	8004621c <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E+0x48>
80046200:	00000000 	nop
80046204:	8fa10010 	lw	at,16(sp)
80046208:	3c028000 	lui	v0,0x8000
                -self
8004620c:	1022000d 	beq	at,v0,80046244 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E+0x70>
80046210:	00000000 	nop
80046214:	0801188b 	j	8004622c <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E+0x58>
80046218:	00000000 	nop
        }
8004621c:	8fa20014 	lw	v0,20(sp)
80046220:	27bd0020 	addiu	sp,sp,32
80046224:	03e00008 	jr	ra
80046228:	00000000 	nop
8004622c:	8fa10010 	lw	at,16(sp)
80046230:	24020000 	li	v0,0
                -self
80046234:	00010823 	negu	at,at
80046238:	afa10014 	sw	at,20(sp)
            if self.is_negative() {
8004623c:	08011887 	j	8004621c <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E+0x48>
80046240:	00000000 	nop
                -self
80046244:	3c018108 	lui	at,0x8108
80046248:	2424ce3c 	addiu	a0,at,-12740
8004624c:	0c011b46 	jal	80046d18 <_ZN4core9panicking11panic_const24panic_const_neg_overflow17h933ac1df2ff681f7E>
80046250:	00000000 	nop

80046254 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h794c6c83e98caf43E>:
        pub const fn checked_sub(self, rhs: Self) -> Option<Self> {
80046254:	27bdffc8 	addiu	sp,sp,-56
80046258:	afa40010 	sw	a0,16(sp)
8004625c:	afa50014 	sw	a1,20(sp)
80046260:	afa40028 	sw	a0,40(sp)
80046264:	afa5002c 	sw	a1,44(sp)
            let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
80046268:	00851023 	subu	v0,a0,a1
8004626c:	0085082b 	sltu	at,a0,a1
80046270:	afa20030 	sw	v0,48(sp)
80046274:	a3a10037 	sb	at,55(sp)
            (a as Self, b)
80046278:	afa20020 	sw	v0,32(sp)
8004627c:	a3a10024 	sb	at,36(sp)
        }
80046280:	8fa20020 	lw	v0,32(sp)
80046284:	afa20004 	sw	v0,4(sp)
80046288:	93a10024 	lbu	at,36(sp)
            let (a, b) = self.overflowing_sub(rhs);
8004628c:	afa20018 	sw	v0,24(sp)
80046290:	30210001 	andi	at,at,0x1
80046294:	a3a1001e 	sb	at,30(sp)
            if unlikely!(b) { None } else { Some(a) }
80046298:	a3a1001f 	sb	at,31(sp)
8004629c:	93a1001f 	lbu	at,31(sp)
800462a0:	30210001 	andi	at,at,0x1
800462a4:	14200009 	bnez	at,800462cc <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h794c6c83e98caf43E+0x78>
800462a8:	00000000 	nop
800462ac:	080118ad 	j	800462b4 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h794c6c83e98caf43E+0x60>
800462b0:	00000000 	nop
800462b4:	8fa10004 	lw	at,4(sp)
800462b8:	afa1000c 	sw	at,12(sp)
800462bc:	24010001 	li	at,1
800462c0:	afa10008 	sw	at,8(sp)
800462c4:	080118b6 	j	800462d8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h794c6c83e98caf43E+0x84>
800462c8:	00000000 	nop
800462cc:	afa00008 	sw	zero,8(sp)
800462d0:	080118b6 	j	800462d8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h794c6c83e98caf43E+0x84>
800462d4:	00000000 	nop
        }
800462d8:	8fa20008 	lw	v0,8(sp)
800462dc:	8fa3000c 	lw	v1,12(sp)
800462e0:	27bd0038 	addiu	sp,sp,56
800462e4:	03e00008 	jr	ra
800462e8:	00000000 	nop

800462ec <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17ha947102a5b302d14E>:
        pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
800462ec:	27bdffc8 	addiu	sp,sp,-56
800462f0:	afa40010 	sw	a0,16(sp)
800462f4:	afa50014 	sw	a1,20(sp)
800462f8:	afa40028 	sw	a0,40(sp)
800462fc:	afa5002c 	sw	a1,44(sp)
            let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
80046300:	00850019 	multu	a0,a1
80046304:	00000810 	mfhi	at
80046308:	0001082b 	sltu	at,zero,at
8004630c:	70851002 	mul	v0,a0,a1
80046310:	afa20030 	sw	v0,48(sp)
80046314:	a3a10037 	sb	at,55(sp)
            (a as Self, b)
80046318:	afa20020 	sw	v0,32(sp)
8004631c:	a3a10024 	sb	at,36(sp)
        }
80046320:	8fa20020 	lw	v0,32(sp)
80046324:	afa20004 	sw	v0,4(sp)
80046328:	93a10024 	lbu	at,36(sp)
            let (a, b) = self.overflowing_mul(rhs);
8004632c:	afa20018 	sw	v0,24(sp)
80046330:	30210001 	andi	at,at,0x1
80046334:	a3a1001e 	sb	at,30(sp)
            if unlikely!(b) { None } else { Some(a) }
80046338:	a3a1001f 	sb	at,31(sp)
8004633c:	93a1001f 	lbu	at,31(sp)
80046340:	30210001 	andi	at,at,0x1
80046344:	14200009 	bnez	at,8004636c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17ha947102a5b302d14E+0x80>
80046348:	00000000 	nop
8004634c:	080118d5 	j	80046354 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17ha947102a5b302d14E+0x68>
80046350:	00000000 	nop
80046354:	8fa10004 	lw	at,4(sp)
80046358:	afa1000c 	sw	at,12(sp)
8004635c:	24010001 	li	at,1
80046360:	afa10008 	sw	at,8(sp)
80046364:	080118de 	j	80046378 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17ha947102a5b302d14E+0x8c>
80046368:	00000000 	nop
8004636c:	afa00008 	sw	zero,8(sp)
80046370:	080118de 	j	80046378 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17ha947102a5b302d14E+0x8c>
80046374:	00000000 	nop
        }
80046378:	8fa20008 	lw	v0,8(sp)
8004637c:	8fa3000c 	lw	v1,12(sp)
80046380:	27bd0038 	addiu	sp,sp,56
80046384:	03e00008 	jr	ra
80046388:	00000000 	nop

8004638c <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E>:
        pub const fn abs_diff(self, other: Self) -> Self {
8004638c:	27bdffc8 	addiu	sp,sp,-56
80046390:	afbf0034 	sw	ra,52(sp)
80046394:	afa50018 	sw	a1,24(sp)
80046398:	afa4001c 	sw	a0,28(sp)
8004639c:	afa40024 	sw	a0,36(sp)
800463a0:	afa50028 	sw	a1,40(sp)
800463a4:	24010001 	li	at,1
            if mem::size_of::<Self>() == 1 {
800463a8:	1420000d 	bnez	at,800463e0 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0x54>
800463ac:	00000000 	nop
800463b0:	080118ee 	j	800463b8 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0x2c>
800463b4:	00000000 	nop
800463b8:	8fa1001c 	lw	at,28(sp)
800463bc:	8fa20018 	lw	v0,24(sp)
800463c0:	afa1002c 	sw	at,44(sp)
800463c4:	afa20030 	sw	v0,48(sp)
            intrinsics::wrapping_sub(self, rhs)
800463c8:	00222023 	subu	a0,at,v0
                (self as i32).wrapping_sub(other as i32).abs() as Self
800463cc:	0c011875 	jal	800461d4 <_ZN4core3num21_$LT$impl$u20$i32$GT$3abs17h9b44ee9e4bd038c8E>
800463d0:	00000000 	nop
800463d4:	afa20020 	sw	v0,32(sp)
            if mem::size_of::<Self>() == 1 {
800463d8:	080118ff 	j	800463fc <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0x70>
800463dc:	00000000 	nop
                if self < other {
800463e0:	8fa1001c 	lw	at,28(sp)
800463e4:	8fa20018 	lw	v0,24(sp)
800463e8:	0022082b 	sltu	at,at,v0
800463ec:	14200011 	bnez	at,80046434 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0xa8>
800463f0:	00000000 	nop
800463f4:	08011904 	j	80046410 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0x84>
800463f8:	00000000 	nop
        }
800463fc:	8fa20020 	lw	v0,32(sp)
80046400:	8fbf0034 	lw	ra,52(sp)
80046404:	27bd0038 	addiu	sp,sp,56
80046408:	03e00008 	jr	ra
8004640c:	00000000 	nop
                    self - other
80046410:	8fa1001c 	lw	at,28(sp)
80046414:	8fa20018 	lw	v0,24(sp)
80046418:	00221823 	subu	v1,at,v0
8004641c:	afa30014 	sw	v1,20(sp)
80046420:	0022082b 	sltu	at,at,v0
80046424:	14200010 	bnez	at,80046468 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0xdc>
80046428:	00000000 	nop
8004642c:	08011916 	j	80046458 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0xcc>
80046430:	00000000 	nop
                    other - self
80046434:	8fa10018 	lw	at,24(sp)
80046438:	8fa2001c 	lw	v0,28(sp)
8004643c:	00221823 	subu	v1,at,v0
80046440:	afa30010 	sw	v1,16(sp)
80046444:	0022082b 	sltu	at,at,v0
80046448:	1420000f 	bnez	at,80046488 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0xfc>
8004644c:	00000000 	nop
80046450:	0801191e 	j	80046478 <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0xec>
80046454:	00000000 	nop
                    self - other
80046458:	8fa10014 	lw	at,20(sp)
8004645c:	afa10020 	sw	at,32(sp)
                if self < other {
80046460:	080118ff 	j	800463fc <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0x70>
80046464:	00000000 	nop
                    self - other
80046468:	3c018108 	lui	at,0x8108
8004646c:	2424ce4c 	addiu	a0,at,-12724
80046470:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80046474:	00000000 	nop
                    other - self
80046478:	8fa10010 	lw	at,16(sp)
8004647c:	afa10020 	sw	at,32(sp)
                if self < other {
80046480:	080118ff 	j	800463fc <_ZN4core3num23_$LT$impl$u20$usize$GT$8abs_diff17h445f8bde098f3ef1E+0x70>
80046484:	00000000 	nop
                    other - self
80046488:	3c018108 	lui	at,0x8108
8004648c:	2424ce4c 	addiu	a0,at,-12724
80046490:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80046494:	00000000 	nop

80046498 <_ZN4core4hint21unreachable_unchecked18precondition_check17hfceb70dacfe74ff1E>:
            const fn precondition_check($($name:$ty),*) {
80046498:	27bdfff0 	addiu	sp,sp,-16
        () => false
8004649c:	08011929 	j	800464a4 <_ZN4core4hint21unreachable_unchecked18precondition_check17hfceb70dacfe74ff1E+0xc>
800464a0:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800464a4:	3c018108 	lui	at,0x8108
800464a8:	2424ce5c 	addiu	a0,at,-12708
800464ac:	24050052 	li	a1,82
800464b0:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800464b4:	00000000 	nop

800464b8 <_ZN4core4hint16assert_unchecked18precondition_check17h0b93bb2a861dbe92E>:
            const fn precondition_check($($name:$ty),*) {
800464b8:	27bdffe8 	addiu	sp,sp,-24
800464bc:	a3a40017 	sb	a0,23(sp)
            (cond: bool = cond) => cond,
800464c0:	14800008 	bnez	a0,800464e4 <_ZN4core4hint16assert_unchecked18precondition_check17h0b93bb2a861dbe92E+0x2c>
800464c4:	00000000 	nop
800464c8:	08011934 	j	800464d0 <_ZN4core4hint16assert_unchecked18precondition_check17h0b93bb2a861dbe92E+0x18>
800464cc:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800464d0:	3c018108 	lui	at,0x8108
800464d4:	2424ceae 	addiu	a0,at,-12626
800464d8:	24050068 	li	a1,104
800464dc:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800464e0:	00000000 	nop
800464e4:	27bd0018 	addiu	sp,sp,24
            }
800464e8:	03e00008 	jr	ra
800464ec:	00000000 	nop

800464f0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E>:
            const fn precondition_check($($name:$ty),*) {
800464f0:	27bdffc8 	addiu	sp,sp,-56
800464f4:	afbf0034 	sw	ra,52(sp)
800464f8:	afa70014 	sw	a3,20(sp)
800464fc:	afa60010 	sw	a2,16(sp)
80046500:	00a00825 	move	at,a1
80046504:	8fa50014 	lw	a1,20(sp)
80046508:	afa10018 	sw	at,24(sp)
8004650c:	afa4001c 	sw	a0,28(sp)
80046510:	8fa20048 	lw	v0,72(sp)
80046514:	afa20020 	sw	v0,32(sp)
80046518:	afa40024 	sw	a0,36(sp)
8004651c:	afa10028 	sw	at,40(sp)
80046520:	afa6002c 	sw	a2,44(sp)
80046524:	afa50030 	sw	a1,48(sp)
        ub_checks::is_aligned_and_not_null(src, align)
80046528:	0c00e87d 	jal	8003a1f4 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE>
8004652c:	00000000 	nop
80046530:	14400008 	bnez	v0,80046554 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E+0x64>
80046534:	00000000 	nop
80046538:	08011950 	j	80046540 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E+0x50>
8004653c:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80046540:	3c018108 	lui	at,0x8108
80046544:	2424cf16 	addiu	a0,at,-12522
80046548:	240500a6 	li	a1,166
8004654c:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80046550:	00000000 	nop
            && ub_checks::is_aligned_and_not_null(dst, align)
80046554:	8fa50014 	lw	a1,20(sp)
80046558:	8fa40018 	lw	a0,24(sp)
8004655c:	0c00e87d 	jal	8003a1f4 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE>
80046560:	00000000 	nop
80046564:	1040fff6 	beqz	v0,80046540 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E+0x50>
80046568:	00000000 	nop
8004656c:	0801195d 	j	80046574 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E+0x84>
80046570:	00000000 	nop
            && ub_checks::is_nonoverlapping(src, dst, size, count)
80046574:	8fa70020 	lw	a3,32(sp)
80046578:	8fa60010 	lw	a2,16(sp)
8004657c:	8fa50018 	lw	a1,24(sp)
80046580:	8fa4001c 	lw	a0,28(sp)
80046584:	0c00e8c0 	jal	8003a300 <_ZN4core9ub_checks17is_nonoverlapping17h180be23ec26219b9E>
80046588:	00000000 	nop
8004658c:	1040ffec 	beqz	v0,80046540 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E+0x50>
80046590:	00000000 	nop
80046594:	08011967 	j	8004659c <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E+0xac>
80046598:	00000000 	nop
            }
8004659c:	8fbf0034 	lw	ra,52(sp)
800465a0:	27bd0038 	addiu	sp,sp,56
800465a4:	03e00008 	jr	ra
800465a8:	00000000 	nop

800465ac <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr18precondition_check17hdcc3c25680e09c41E>:
            const fn precondition_check($($name:$ty),*) {
800465ac:	27bdffe0 	addiu	sp,sp,-32
800465b0:	afbf001c 	sw	ra,28(sp)
800465b4:	afa40014 	sw	a0,20(sp)
800465b8:	afa50018 	sw	a1,24(sp)
            ) => runtime_ptr_ge(this, origin)
800465bc:	0c00e605 	jal	80039814 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr14runtime_ptr_ge17h2409c05d14b79ac4E>
800465c0:	00000000 	nop
800465c4:	14400008 	bnez	v0,800465e8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr18precondition_check17hdcc3c25680e09c41E+0x3c>
800465c8:	00000000 	nop
800465cc:	08011975 	j	800465d4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr18precondition_check17hdcc3c25680e09c41E+0x28>
800465d0:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800465d4:	3c018108 	lui	at,0x8108
800465d8:	2424cfbc 	addiu	a0,at,-12356
800465dc:	24050047 	li	a1,71
800465e0:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800465e4:	00000000 	nop
            }
800465e8:	8fbf001c 	lw	ra,28(sp)
800465ec:	27bd0020 	addiu	sp,sp,32
800465f0:	03e00008 	jr	ra
800465f4:	00000000 	nop

800465f8 <_ZN4core3ptr4read18precondition_check17h9e0d16367bc3bfc8E>:
            const fn precondition_check($($name:$ty),*) {
800465f8:	27bdffe0 	addiu	sp,sp,-32
800465fc:	afbf001c 	sw	ra,28(sp)
80046600:	afa40014 	sw	a0,20(sp)
80046604:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80046608:	0c00e87d 	jal	8003a1f4 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE>
8004660c:	00000000 	nop
80046610:	14400008 	bnez	v0,80046634 <_ZN4core3ptr4read18precondition_check17h9e0d16367bc3bfc8E+0x3c>
80046614:	00000000 	nop
80046618:	08011988 	j	80046620 <_ZN4core3ptr4read18precondition_check17h9e0d16367bc3bfc8E+0x28>
8004661c:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80046620:	3c018108 	lui	at,0x8108
80046624:	2424d003 	addiu	a0,at,-12285
80046628:	24050065 	li	a1,101
8004662c:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80046630:	00000000 	nop
            }
80046634:	8fbf001c 	lw	ra,28(sp)
80046638:	27bd0020 	addiu	sp,sp,32
8004663c:	03e00008 	jr	ra
80046640:	00000000 	nop

80046644 <_ZN4core3ptr5write18precondition_check17hf1cf4e5c013cb295E>:
            const fn precondition_check($($name:$ty),*) {
80046644:	27bdffe0 	addiu	sp,sp,-32
80046648:	afbf001c 	sw	ra,28(sp)
8004664c:	afa40014 	sw	a0,20(sp)
80046650:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
80046654:	0c00e87d 	jal	8003a1f4 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE>
80046658:	00000000 	nop
8004665c:	14400008 	bnez	v0,80046680 <_ZN4core3ptr5write18precondition_check17hf1cf4e5c013cb295E+0x3c>
80046660:	00000000 	nop
80046664:	0801199b 	j	8004666c <_ZN4core3ptr5write18precondition_check17hf1cf4e5c013cb295E+0x28>
80046668:	00000000 	nop
                    ::core::panicking::panic_nounwind(
8004666c:	3c018108 	lui	at,0x8108
80046670:	2424d068 	addiu	a0,at,-12184
80046674:	24050066 	li	a1,102
80046678:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
8004667c:	00000000 	nop
            }
80046680:	8fbf001c 	lw	ra,28(sp)
80046684:	27bd0020 	addiu	sp,sp,32
80046688:	03e00008 	jr	ra
8004668c:	00000000 	nop

80046690 <_ZN4core3ptr13read_volatile18precondition_check17hbf3699e138ebb66dE>:
            const fn precondition_check($($name:$ty),*) {
80046690:	27bdffe0 	addiu	sp,sp,-32
80046694:	afbf001c 	sw	ra,28(sp)
80046698:	afa40014 	sw	a0,20(sp)
8004669c:	afa50018 	sw	a1,24(sp)
            ) => ub_checks::is_aligned_and_not_null(addr, align)
800466a0:	0c00e87d 	jal	8003a1f4 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE>
800466a4:	00000000 	nop
800466a8:	14400008 	bnez	v0,800466cc <_ZN4core3ptr13read_volatile18precondition_check17hbf3699e138ebb66dE+0x3c>
800466ac:	00000000 	nop
800466b0:	080119ae 	j	800466b8 <_ZN4core3ptr13read_volatile18precondition_check17hbf3699e138ebb66dE+0x28>
800466b4:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800466b8:	3c018108 	lui	at,0x8108
800466bc:	2424d0ce 	addiu	a0,at,-12082
800466c0:	2405006e 	li	a1,110
800466c4:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800466c8:	00000000 	nop
            }
800466cc:	8fbf001c 	lw	ra,28(sp)
800466d0:	27bd0020 	addiu	sp,sp,32
800466d4:	03e00008 	jr	ra
800466d8:	00000000 	nop

800466dc <_ZN60_$LT$core..cmp..Ordering$u20$as$u20$core..cmp..PartialEq$GT$2eq17hf658a71d46e80c1cE>:
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]
800466dc:	27bdfff0 	addiu	sp,sp,-16
800466e0:	afa40004 	sw	a0,4(sp)
800466e4:	afa50008 	sw	a1,8(sp)
800466e8:	90810000 	lbu	at,0(a0)
800466ec:	a3a1000e 	sb	at,14(sp)
800466f0:	90a20000 	lbu	v0,0(a1)
800466f4:	a3a2000f 	sb	v0,15(sp)
800466f8:	00220826 	xor	at,at,v0
800466fc:	2c220001 	sltiu	v0,at,1
80046700:	27bd0010 	addiu	sp,sp,16
80046704:	03e00008 	jr	ra
80046708:	00000000 	nop

8004670c <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hbdfa0bd26f3ca07fE>:
                fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
8004670c:	27bdfff8 	addiu	sp,sp,-8
80046710:	afa40000 	sw	a0,0(sp)
80046714:	afa50004 	sw	a1,4(sp)
80046718:	8c810000 	lw	at,0(a0)
8004671c:	8ca20000 	lw	v0,0(a1)
80046720:	00220826 	xor	at,at,v0
80046724:	2c220001 	sltiu	v0,at,1
80046728:	27bd0008 	addiu	sp,sp,8
8004672c:	03e00008 	jr	ra
80046730:	00000000 	nop

80046734 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h979542bb5e2130d6E>:
80046734:	27bdfff8 	addiu	sp,sp,-8
80046738:	afa40000 	sw	a0,0(sp)
8004673c:	afa50004 	sw	a1,4(sp)
80046740:	90810000 	lbu	at,0(a0)
80046744:	90a20000 	lbu	v0,0(a1)
80046748:	00220826 	xor	at,at,v0
8004674c:	2c220001 	sltiu	v0,at,1
80046750:	27bd0008 	addiu	sp,sp,8
80046754:	03e00008 	jr	ra
80046758:	00000000 	nop

8004675c <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u32$GT$2eq17hc4809db554f420ceE>:
8004675c:	27bdfff8 	addiu	sp,sp,-8
80046760:	afa40000 	sw	a0,0(sp)
80046764:	afa50004 	sw	a1,4(sp)
80046768:	8c810000 	lw	at,0(a0)
8004676c:	8ca20000 	lw	v0,0(a1)
80046770:	00220826 	xor	at,at,v0
80046774:	2c220001 	sltiu	v0,at,1
80046778:	27bd0008 	addiu	sp,sp,8
8004677c:	03e00008 	jr	ra
80046780:	00000000 	nop

80046784 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17he219583d3b212753E>:
            }

            #[stable(feature = "rust1", since = "1.0.0")]
            impl Ord for $t {
                #[inline]
                fn cmp(&self, other: &$t) -> Ordering {
80046784:	27bdfff8 	addiu	sp,sp,-8
80046788:	afa40000 	sw	a0,0(sp)
8004678c:	afa50004 	sw	a1,4(sp)
                        else if *self == *other { Equal }
                        else { Greater }
                    }
                    #[cfg(not(bootstrap))]
                    {
                        crate::intrinsics::three_way_compare(*self, *other)
80046790:	8c820000 	lw	v0,0(a0)
80046794:	8ca30000 	lw	v1,0(a1)
80046798:	0062082b 	sltu	at,v1,v0
8004679c:	0043102b 	sltu	v0,v0,v1
800467a0:	00221023 	subu	v0,at,v0
800467a4:	27bd0008 	addiu	sp,sp,8
                    }
                }
800467a8:	03e00008 	jr	ra
800467ac:	00000000 	nop

800467b0 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u32$GT$3cmp17ha5f8b88f44088c34E>:
                fn cmp(&self, other: &$t) -> Ordering {
800467b0:	27bdfff8 	addiu	sp,sp,-8
800467b4:	afa40000 	sw	a0,0(sp)
800467b8:	afa50004 	sw	a1,4(sp)
                        crate::intrinsics::three_way_compare(*self, *other)
800467bc:	8c820000 	lw	v0,0(a0)
800467c0:	8ca30000 	lw	v1,0(a1)
800467c4:	0062082b 	sltu	at,v1,v0
800467c8:	0043102b 	sltu	v0,v0,v1
800467cc:	00221023 	subu	v0,at,v0
800467d0:	27bd0008 	addiu	sp,sp,8
                }
800467d4:	03e00008 	jr	ra
800467d8:	00000000 	nop

800467dc <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Sub$GT$3sub17h90e33352f2ecaf79E>:
            type Output = $t;

            #[inline]
            #[track_caller]
            #[rustc_inherit_overflow_checks]
            fn sub(self, other: $t) -> $t { self - other }
800467dc:	27bdffe0 	addiu	sp,sp,-32
800467e0:	afa60010 	sw	a2,16(sp)
800467e4:	afa40018 	sw	a0,24(sp)
800467e8:	afa5001c 	sw	a1,28(sp)
800467ec:	00850823 	subu	at,a0,a1
800467f0:	afa10014 	sw	at,20(sp)
800467f4:	0085082b 	sltu	at,a0,a1
800467f8:	14200007 	bnez	at,80046818 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Sub$GT$3sub17h90e33352f2ecaf79E+0x3c>
800467fc:	00000000 	nop
80046800:	08011a02 	j	80046808 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Sub$GT$3sub17h90e33352f2ecaf79E+0x2c>
80046804:	00000000 	nop
80046808:	8fa20014 	lw	v0,20(sp)
8004680c:	27bd0020 	addiu	sp,sp,32
80046810:	03e00008 	jr	ra
80046814:	00000000 	nop
80046818:	8fa40010 	lw	a0,16(sp)
8004681c:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80046820:	00000000 	nop

80046824 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9d08ad2c426c5534E>:
80046824:	27bdffe0 	addiu	sp,sp,-32
80046828:	afa60014 	sw	a2,20(sp)
8004682c:	30a200ff 	andi	v0,a1,0xff
80046830:	308100ff 	andi	at,a0,0xff
80046834:	a3a4001e 	sb	a0,30(sp)
80046838:	a3a5001f 	sb	a1,31(sp)
8004683c:	00851823 	subu	v1,a0,a1
80046840:	afa30018 	sw	v1,24(sp)
80046844:	0022082b 	sltu	at,at,v0
80046848:	14200007 	bnez	at,80046868 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9d08ad2c426c5534E+0x44>
8004684c:	00000000 	nop
80046850:	08011a16 	j	80046858 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9d08ad2c426c5534E+0x34>
80046854:	00000000 	nop
80046858:	8fa20018 	lw	v0,24(sp)
8004685c:	27bd0020 	addiu	sp,sp,32
80046860:	03e00008 	jr	ra
80046864:	00000000 	nop
80046868:	8fa40014 	lw	a0,20(sp)
8004686c:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80046870:	00000000 	nop

80046874 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9f0e833ee6c9c697E>:
80046874:	27bdffe0 	addiu	sp,sp,-32
80046878:	afa60010 	sw	a2,16(sp)
8004687c:	afa40018 	sw	a0,24(sp)
80046880:	afa5001c 	sw	a1,28(sp)
80046884:	00850823 	subu	at,a0,a1
80046888:	afa10014 	sw	at,20(sp)
8004688c:	0085082b 	sltu	at,a0,a1
80046890:	14200007 	bnez	at,800468b0 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9f0e833ee6c9c697E+0x3c>
80046894:	00000000 	nop
80046898:	08011a28 	j	800468a0 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Sub$GT$3sub17h9f0e833ee6c9c697E+0x2c>
8004689c:	00000000 	nop
800468a0:	8fa20014 	lw	v0,20(sp)
800468a4:	27bd0020 	addiu	sp,sp,32
800468a8:	03e00008 	jr	ra
800468ac:	00000000 	nop
800468b0:	8fa40010 	lw	a0,16(sp)
800468b4:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800468b8:	00000000 	nop

800468bc <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Div$GT$3div17h9fd659e674ef8f18E>:
        impl Div for $t {
            type Output = $t;

            #[inline]
            #[track_caller]
            fn div(self, other: $t) -> $t { self / other }
800468bc:	27bdffd8 	addiu	sp,sp,-40
800468c0:	afa60014 	sw	a2,20(sp)
800468c4:	afa50018 	sw	a1,24(sp)
800468c8:	afa4001c 	sw	a0,28(sp)
800468cc:	afa40020 	sw	a0,32(sp)
800468d0:	afa50024 	sw	a1,36(sp)
800468d4:	10a0000b 	beqz	a1,80046904 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Div$GT$3div17h9fd659e674ef8f18E+0x48>
800468d8:	00000000 	nop
800468dc:	08011a39 	j	800468e4 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Div$GT$3div17h9fd659e674ef8f18E+0x28>
800468e0:	00000000 	nop
800468e4:	8fa10018 	lw	at,24(sp)
800468e8:	8fa2001c 	lw	v0,28(sp)
800468ec:	0041001b 	divu	zero,v0,at
800468f0:	002001f4 	teq	at,zero,0x7
800468f4:	00001012 	mflo	v0
800468f8:	27bd0028 	addiu	sp,sp,40
800468fc:	03e00008 	jr	ra
80046900:	00000000 	nop
80046904:	8fa40014 	lw	a0,20(sp)
80046908:	0c011b70 	jal	80046dc0 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
8004690c:	00000000 	nop

80046910 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Div$GT$3div17h8c44f7b15731be55E>:
80046910:	27bdffe0 	addiu	sp,sp,-32
80046914:	afa60010 	sw	a2,16(sp)
80046918:	30a100ff 	andi	at,a1,0xff
8004691c:	00a01025 	move	v0,a1
80046920:	afa20014 	sw	v0,20(sp)
80046924:	00801025 	move	v0,a0
80046928:	afa20018 	sw	v0,24(sp)
8004692c:	a3a4001e 	sb	a0,30(sp)
80046930:	a3a5001f 	sb	a1,31(sp)
80046934:	1020000d 	beqz	at,8004696c <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Div$GT$3div17h8c44f7b15731be55E+0x5c>
80046938:	00000000 	nop
8004693c:	08011a51 	j	80046944 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Div$GT$3div17h8c44f7b15731be55E+0x34>
80046940:	00000000 	nop
80046944:	8fa20018 	lw	v0,24(sp)
80046948:	8fa10014 	lw	at,20(sp)
8004694c:	302100ff 	andi	at,at,0xff
80046950:	304200ff 	andi	v0,v0,0xff
80046954:	0041001b 	divu	zero,v0,at
80046958:	002001f4 	teq	at,zero,0x7
8004695c:	00001012 	mflo	v0
80046960:	27bd0020 	addiu	sp,sp,32
80046964:	03e00008 	jr	ra
80046968:	00000000 	nop
8004696c:	8fa40010 	lw	a0,16(sp)
80046970:	0c011b70 	jal	80046dc0 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
80046974:	00000000 	nop

80046978 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Div$GT$3div17he4860b2e94c433bbE>:
80046978:	27bdffd8 	addiu	sp,sp,-40
8004697c:	afa60014 	sw	a2,20(sp)
80046980:	afa50018 	sw	a1,24(sp)
80046984:	afa4001c 	sw	a0,28(sp)
80046988:	afa40020 	sw	a0,32(sp)
8004698c:	afa50024 	sw	a1,36(sp)
80046990:	10a0000b 	beqz	a1,800469c0 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Div$GT$3div17he4860b2e94c433bbE+0x48>
80046994:	00000000 	nop
80046998:	08011a68 	j	800469a0 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Div$GT$3div17he4860b2e94c433bbE+0x28>
8004699c:	00000000 	nop
800469a0:	8fa10018 	lw	at,24(sp)
800469a4:	8fa2001c 	lw	v0,28(sp)
800469a8:	0041001b 	divu	zero,v0,at
800469ac:	002001f4 	teq	at,zero,0x7
800469b0:	00001012 	mflo	v0
800469b4:	27bd0028 	addiu	sp,sp,40
800469b8:	03e00008 	jr	ra
800469bc:	00000000 	nop
800469c0:	8fa40014 	lw	a0,20(sp)
800469c4:	0c011b70 	jal	80046dc0 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>
800469c8:	00000000 	nop

800469cc <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Rem$GT$3rem17h9f903c597deb573bE>:
        impl Rem for $t {
            type Output = $t;

            #[inline]
            #[track_caller]
            fn rem(self, other: $t) -> $t { self % other }
800469cc:	27bdffd8 	addiu	sp,sp,-40
800469d0:	afa60014 	sw	a2,20(sp)
800469d4:	afa50018 	sw	a1,24(sp)
800469d8:	afa4001c 	sw	a0,28(sp)
800469dc:	afa40020 	sw	a0,32(sp)
800469e0:	afa50024 	sw	a1,36(sp)
800469e4:	10a0000b 	beqz	a1,80046a14 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Rem$GT$3rem17h9f903c597deb573bE+0x48>
800469e8:	00000000 	nop
800469ec:	08011a7d 	j	800469f4 <_ZN47_$LT$usize$u20$as$u20$core..ops..arith..Rem$GT$3rem17h9f903c597deb573bE+0x28>
800469f0:	00000000 	nop
800469f4:	8fa10018 	lw	at,24(sp)
800469f8:	8fa2001c 	lw	v0,28(sp)
800469fc:	0041001b 	divu	zero,v0,at
80046a00:	002001f4 	teq	at,zero,0x7
80046a04:	00001010 	mfhi	v0
80046a08:	27bd0028 	addiu	sp,sp,40
80046a0c:	03e00008 	jr	ra
80046a10:	00000000 	nop
80046a14:	8fa40014 	lw	a0,20(sp)
80046a18:	0c011b7e 	jal	80046df8 <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80046a1c:	00000000 	nop

80046a20 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Rem$GT$3rem17hcf0699d134763680E>:
80046a20:	27bdffe0 	addiu	sp,sp,-32
80046a24:	afa60010 	sw	a2,16(sp)
80046a28:	30a100ff 	andi	at,a1,0xff
80046a2c:	00a01025 	move	v0,a1
80046a30:	afa20014 	sw	v0,20(sp)
80046a34:	00801025 	move	v0,a0
80046a38:	afa20018 	sw	v0,24(sp)
80046a3c:	a3a4001e 	sb	a0,30(sp)
80046a40:	a3a5001f 	sb	a1,31(sp)
80046a44:	1020000d 	beqz	at,80046a7c <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Rem$GT$3rem17hcf0699d134763680E+0x5c>
80046a48:	00000000 	nop
80046a4c:	08011a95 	j	80046a54 <_ZN44_$LT$u8$u20$as$u20$core..ops..arith..Rem$GT$3rem17hcf0699d134763680E+0x34>
80046a50:	00000000 	nop
80046a54:	8fa20018 	lw	v0,24(sp)
80046a58:	8fa10014 	lw	at,20(sp)
80046a5c:	302100ff 	andi	at,at,0xff
80046a60:	304200ff 	andi	v0,v0,0xff
80046a64:	0041001b 	divu	zero,v0,at
80046a68:	002001f4 	teq	at,zero,0x7
80046a6c:	00001010 	mfhi	v0
80046a70:	27bd0020 	addiu	sp,sp,32
80046a74:	03e00008 	jr	ra
80046a78:	00000000 	nop
80046a7c:	8fa40010 	lw	a0,16(sp)
80046a80:	0c011b7e 	jal	80046df8 <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80046a84:	00000000 	nop

80046a88 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Rem$GT$3rem17h4d9fcb1072ae4614E>:
80046a88:	27bdffd8 	addiu	sp,sp,-40
80046a8c:	afa60014 	sw	a2,20(sp)
80046a90:	afa50018 	sw	a1,24(sp)
80046a94:	afa4001c 	sw	a0,28(sp)
80046a98:	afa40020 	sw	a0,32(sp)
80046a9c:	afa50024 	sw	a1,36(sp)
80046aa0:	10a0000b 	beqz	a1,80046ad0 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Rem$GT$3rem17h4d9fcb1072ae4614E+0x48>
80046aa4:	00000000 	nop
80046aa8:	08011aac 	j	80046ab0 <_ZN45_$LT$u32$u20$as$u20$core..ops..arith..Rem$GT$3rem17h4d9fcb1072ae4614E+0x28>
80046aac:	00000000 	nop
80046ab0:	8fa10018 	lw	at,24(sp)
80046ab4:	8fa2001c 	lw	v0,28(sp)
80046ab8:	0041001b 	divu	zero,v0,at
80046abc:	002001f4 	teq	at,zero,0x7
80046ac0:	00001010 	mfhi	v0
80046ac4:	27bd0028 	addiu	sp,sp,40
80046ac8:	03e00008 	jr	ra
80046acc:	00000000 	nop
80046ad0:	8fa40014 	lw	a0,20(sp)
80046ad4:	0c011b7e 	jal	80046df8 <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80046ad8:	00000000 	nop

80046adc <_ZN54_$LT$u32$u20$as$u20$core..ops..bit..Shl$LT$i32$GT$$GT$3shl17he581443b8f7136b2E>:
        impl Shl<$f> for $t {
            type Output = $t;

            #[inline]
            #[rustc_inherit_overflow_checks]
            fn shl(self, other: $f) -> $t {
80046adc:	27bdffe0 	addiu	sp,sp,-32
80046ae0:	afa50010 	sw	a1,16(sp)
80046ae4:	afa40014 	sw	a0,20(sp)
80046ae8:	afa40018 	sw	a0,24(sp)
80046aec:	afa5001c 	sw	a1,28(sp)
                self << other
80046af0:	2ca10020 	sltiu	at,a1,32
80046af4:	10200009 	beqz	at,80046b1c <_ZN54_$LT$u32$u20$as$u20$core..ops..bit..Shl$LT$i32$GT$$GT$3shl17he581443b8f7136b2E+0x40>
80046af8:	00000000 	nop
80046afc:	08011ac1 	j	80046b04 <_ZN54_$LT$u32$u20$as$u20$core..ops..bit..Shl$LT$i32$GT$$GT$3shl17he581443b8f7136b2E+0x28>
80046b00:	00000000 	nop
80046b04:	8fa10014 	lw	at,20(sp)
80046b08:	8fa20010 	lw	v0,16(sp)
80046b0c:	00411004 	sllv	v0,at,v0
80046b10:	27bd0020 	addiu	sp,sp,32
            }
80046b14:	03e00008 	jr	ra
80046b18:	00000000 	nop
                self << other
80046b1c:	3c018108 	lui	at,0x8108
80046b20:	2424d1ac 	addiu	a0,at,-11860
80046b24:	0c011b62 	jal	80046d88 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h6a79b323d0787a78E>
80046b28:	00000000 	nop

80046b2c <_ZN58_$LT$$RF$u32$u20$as$u20$core..ops..bit..Shl$LT$i32$GT$$GT$3shl17hc085b2381ec8eeb3E>:
        impl<'a> $imp<$u> for &'a $t {
            type Output = <$t as $imp<$u>>::Output;

            #[inline]
            #[track_caller]
            fn $method(self, other: $u) -> <$t as $imp<$u>>::Output {
80046b2c:	27bdffe0 	addiu	sp,sp,-32
80046b30:	afbf001c 	sw	ra,28(sp)
80046b34:	afa40014 	sw	a0,20(sp)
80046b38:	afa50018 	sw	a1,24(sp)
                $imp::$method(*self, other)
80046b3c:	8c840000 	lw	a0,0(a0)
80046b40:	0c011ab7 	jal	80046adc <_ZN54_$LT$u32$u20$as$u20$core..ops..bit..Shl$LT$i32$GT$$GT$3shl17he581443b8f7136b2E>
80046b44:	00000000 	nop
            }
80046b48:	8fbf001c 	lw	ra,28(sp)
80046b4c:	27bd0020 	addiu	sp,sp,32
80046b50:	03e00008 	jr	ra
80046b54:	00000000 	nop

80046b58 <_ZN4core4char7convert18from_u32_unchecked18precondition_check17h36fa9621690ca902E>:
            const fn precondition_check($($name:$ty),*) {
80046b58:	27bdffe0 	addiu	sp,sp,-32
80046b5c:	afbf001c 	sw	ra,28(sp)
80046b60:	afa40018 	sw	a0,24(sp)
            (i: u32 = i) => char_try_from_u32(i).is_ok()
80046b64:	0c00eb84 	jal	8003ae10 <_ZN4core4char7convert17char_try_from_u3217h8a0cd4dc4cb0f4a0E>
80046b68:	00000000 	nop
80046b6c:	afa20014 	sw	v0,20(sp)
80046b70:	27a40014 	addiu	a0,sp,20
80046b74:	0c00f47c 	jal	8003d1f0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7cdd383e0a27670eE>
80046b78:	00000000 	nop
80046b7c:	14400008 	bnez	v0,80046ba0 <_ZN4core4char7convert18from_u32_unchecked18precondition_check17h36fa9621690ca902E+0x48>
80046b80:	00000000 	nop
80046b84:	08011ae3 	j	80046b8c <_ZN4core4char7convert18from_u32_unchecked18precondition_check17h36fa9621690ca902E+0x34>
80046b88:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80046b8c:	3c018108 	lui	at,0x8108
80046b90:	2424d1bc 	addiu	a0,at,-11844
80046b94:	24050039 	li	a1,57
80046b98:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80046b9c:	00000000 	nop
            }
80046ba0:	8fbf001c 	lw	ra,28(sp)
80046ba4:	27bd0020 	addiu	sp,sp,32
80046ba8:	03e00008 	jr	ra
80046bac:	00000000 	nop

80046bb0 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h690f9a91247c04f4E>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
80046bb0:	27bdfff0 	addiu	sp,sp,-16
80046bb4:	a3a40007 	sb	a0,7(sp)
80046bb8:	afa50008 	sw	a1,8(sp)
80046bbc:	a3a4000e 	sb	a0,14(sp)
80046bc0:	a3a5000f 	sb	a1,15(sp)
            unsafe { intrinsics::unchecked_add(self, rhs) }
80046bc4:	00851021 	addu	v0,a0,a1
80046bc8:	27bd0010 	addiu	sp,sp,16
        }
80046bcc:	03e00008 	jr	ra
80046bd0:	00000000 	nop

80046bd4 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17heab11d2d1c4d0452E>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
80046bd4:	27bdfff0 	addiu	sp,sp,-16
80046bd8:	afa40000 	sw	a0,0(sp)
80046bdc:	afa50004 	sw	a1,4(sp)
80046be0:	afa40008 	sw	a0,8(sp)
80046be4:	afa5000c 	sw	a1,12(sp)
80046be8:	00851021 	addu	v0,a0,a1
80046bec:	27bd0010 	addiu	sp,sp,16
        }
80046bf0:	03e00008 	jr	ra
80046bf4:	00000000 	nop

80046bf8 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum17h788a6b4423308929E>:

macro_rules! integer_sum_product {
    (@impls $zero:expr, $one:expr, #[$attr:meta], $($a:ty)*) => ($(
        #[$attr]
        impl Sum for $a {
            fn sum<I: Iterator<Item=Self>>(iter: I) -> Self {
80046bf8:	27bdffe0 	addiu	sp,sp,-32
80046bfc:	afbf001c 	sw	ra,28(sp)
80046c00:	afa40014 	sw	a0,20(sp)
80046c04:	afa50018 	sw	a1,24(sp)
80046c08:	24060000 	li	a2,0
                iter.fold(
80046c0c:	0c00ee7f 	jal	8003b9fc <_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h062a46d4e3bf2665E>
80046c10:	00000000 	nop
                    $zero,
                    #[rustc_inherit_overflow_checks]
                    |a, b| a + b,
                )
            }
80046c14:	8fbf001c 	lw	ra,28(sp)
80046c18:	27bd0020 	addiu	sp,sp,32
80046c1c:	03e00008 	jr	ra
80046c20:	00000000 	nop

80046c24 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17h91b99a5637de417fE>:
                    |a, b| a + b,
80046c24:	27bdffe0 	addiu	sp,sp,-32
80046c28:	afa40014 	sw	a0,20(sp)
80046c2c:	afa50018 	sw	a1,24(sp)
80046c30:	afa6001c 	sw	a2,28(sp)
80046c34:	00a60821 	addu	at,a1,a2
80046c38:	afa10010 	sw	at,16(sp)
80046c3c:	0025082b 	sltu	at,at,a1
80046c40:	14200007 	bnez	at,80046c60 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17h91b99a5637de417fE+0x3c>
80046c44:	00000000 	nop
80046c48:	08011b14 	j	80046c50 <_ZN56_$LT$usize$u20$as$u20$core..iter..traits..accum..Sum$GT$3sum28_$u7b$$u7b$closure$u7d$$u7d$17h91b99a5637de417fE+0x2c>
80046c4c:	00000000 	nop
80046c50:	8fa20010 	lw	v0,16(sp)
80046c54:	27bd0020 	addiu	sp,sp,32
80046c58:	03e00008 	jr	ra
80046c5c:	00000000 	nop
80046c60:	3c018108 	lui	at,0x8108
80046c64:	2424d26c 	addiu	a0,at,-11668
80046c68:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80046c6c:	00000000 	nop

80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>:
                pub const fn $lang() -> ! {
80046c70:	27bdffc8 	addiu	sp,sp,-56
80046c74:	afbf0034 	sw	ra,52(sp)
80046c78:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
80046c7c:	3c018108 	lui	at,0x8108
80046c80:	2425b04c 	addiu	a1,at,-20404
80046c84:	27a4001c 	addiu	a0,sp,28
80046c88:	afa40014 	sw	a0,20(sp)
80046c8c:	24060001 	li	a2,1
80046c90:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80046c94:	00000000 	nop
80046c98:	8fa40014 	lw	a0,20(sp)
80046c9c:	8fa50018 	lw	a1,24(sp)
80046ca0:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80046ca4:	00000000 	nop

80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>:
                pub const fn $lang() -> ! {
80046ca8:	27bdffc8 	addiu	sp,sp,-56
80046cac:	afbf0034 	sw	ra,52(sp)
80046cb0:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
80046cb4:	3c018108 	lui	at,0x8108
80046cb8:	2425b078 	addiu	a1,at,-20360
80046cbc:	27a4001c 	addiu	a0,sp,28
80046cc0:	afa40014 	sw	a0,20(sp)
80046cc4:	24060001 	li	a2,1
80046cc8:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80046ccc:	00000000 	nop
80046cd0:	8fa40014 	lw	a0,20(sp)
80046cd4:	8fa50018 	lw	a1,24(sp)
80046cd8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80046cdc:	00000000 	nop

80046ce0 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h9e7cb904cc57c7e6E>:
                pub const fn $lang() -> ! {
80046ce0:	27bdffc8 	addiu	sp,sp,-56
80046ce4:	afbf0034 	sw	ra,52(sp)
80046ce8:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
80046cec:	3c018108 	lui	at,0x8108
80046cf0:	2425b0a4 	addiu	a1,at,-20316
80046cf4:	27a4001c 	addiu	a0,sp,28
80046cf8:	afa40014 	sw	a0,20(sp)
80046cfc:	24060001 	li	a2,1
80046d00:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80046d04:	00000000 	nop
80046d08:	8fa40014 	lw	a0,20(sp)
80046d0c:	8fa50018 	lw	a1,24(sp)
80046d10:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80046d14:	00000000 	nop

80046d18 <_ZN4core9panicking11panic_const24panic_const_neg_overflow17h933ac1df2ff681f7E>:
                pub const fn $lang() -> ! {
80046d18:	27bdffc8 	addiu	sp,sp,-56
80046d1c:	afbf0034 	sw	ra,52(sp)
80046d20:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
80046d24:	3c018108 	lui	at,0x8108
80046d28:	2425b0cc 	addiu	a1,at,-20276
80046d2c:	27a4001c 	addiu	a0,sp,28
80046d30:	afa40014 	sw	a0,20(sp)
80046d34:	24060001 	li	a2,1
80046d38:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80046d3c:	00000000 	nop
80046d40:	8fa40014 	lw	a0,20(sp)
80046d44:	8fa50018 	lw	a1,24(sp)
80046d48:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80046d4c:	00000000 	nop

80046d50 <_ZN4core9panicking11panic_const24panic_const_shr_overflow17h51109cf1c6739500E>:
                pub const fn $lang() -> ! {
80046d50:	27bdffc8 	addiu	sp,sp,-56
80046d54:	afbf0034 	sw	ra,52(sp)
80046d58:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
80046d5c:	3c018108 	lui	at,0x8108
80046d60:	2425b0f8 	addiu	a1,at,-20232
80046d64:	27a4001c 	addiu	a0,sp,28
80046d68:	afa40014 	sw	a0,20(sp)
80046d6c:	24060001 	li	a2,1
80046d70:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80046d74:	00000000 	nop
80046d78:	8fa40014 	lw	a0,20(sp)
80046d7c:	8fa50018 	lw	a1,24(sp)
80046d80:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80046d84:	00000000 	nop

80046d88 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h6a79b323d0787a78E>:
                pub const fn $lang() -> ! {
80046d88:	27bdffc8 	addiu	sp,sp,-56
80046d8c:	afbf0034 	sw	ra,52(sp)
80046d90:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
80046d94:	3c018108 	lui	at,0x8108
80046d98:	2425b124 	addiu	a1,at,-20188
80046d9c:	27a4001c 	addiu	a0,sp,28
80046da0:	afa40014 	sw	a0,20(sp)
80046da4:	24060001 	li	a2,1
80046da8:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80046dac:	00000000 	nop
80046db0:	8fa40014 	lw	a0,20(sp)
80046db4:	8fa50018 	lw	a1,24(sp)
80046db8:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80046dbc:	00000000 	nop

80046dc0 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hd6240109d1a78571E>:
                pub const fn $lang() -> ! {
80046dc0:	27bdffc8 	addiu	sp,sp,-56
80046dc4:	afbf0034 	sw	ra,52(sp)
80046dc8:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
80046dcc:	3c018108 	lui	at,0x8108
80046dd0:	2425d298 	addiu	a1,at,-11624
80046dd4:	27a4001c 	addiu	a0,sp,28
80046dd8:	afa40014 	sw	a0,20(sp)
80046ddc:	24060001 	li	a2,1
80046de0:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80046de4:	00000000 	nop
80046de8:	8fa40014 	lw	a0,20(sp)
80046dec:	8fa50018 	lw	a1,24(sp)
80046df0:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80046df4:	00000000 	nop

80046df8 <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>:
                pub const fn $lang() -> ! {
80046df8:	27bdffc8 	addiu	sp,sp,-56
80046dfc:	afbf0034 	sw	ra,52(sp)
80046e00:	afa40018 	sw	a0,24(sp)
                    panic_fmt(fmt::Arguments::new_const(&[$message]));
80046e04:	3c018108 	lui	at,0x8108
80046e08:	2425d2dc 	addiu	a1,at,-11556
80046e0c:	27a4001c 	addiu	a0,sp,28
80046e10:	afa40014 	sw	a0,20(sp)
80046e14:	24060001 	li	a2,1
80046e18:	0c00faee 	jal	8003ebb8 <_ZN4core3fmt9Arguments9new_const17hf62e3826cb3f555aE>
80046e1c:	00000000 	nop
80046e20:	8fa40014 	lw	a0,20(sp)
80046e24:	8fa50018 	lw	a1,24(sp)
80046e28:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80046e2c:	00000000 	nop

80046e30 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h4faa43391429b7caE>:
          fn zero() -> Self { 0 }
80046e30:	24020000 	li	v0,0
80046e34:	03e00008 	jr	ra
80046e38:	00000000 	nop

80046e3c <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817hde776fb7bbe296d4E>:
          fn from_u8(u: u8) -> Self { u as Self }
80046e3c:	27bdfff8 	addiu	sp,sp,-8
80046e40:	00801025 	move	v0,a0
80046e44:	a3a20007 	sb	v0,7(sp)
80046e48:	27bd0008 	addiu	sp,sp,8
80046e4c:	03e00008 	jr	ra
80046e50:	00000000 	nop

80046e54 <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817hdb1dd13bcbe6748fE>:
          fn to_u8(&self) -> u8 { *self as u8 }
80046e54:	27bdfff8 	addiu	sp,sp,-8
80046e58:	afa40004 	sw	a0,4(sp)
80046e5c:	90820000 	lbu	v0,0(a0)
80046e60:	27bd0008 	addiu	sp,sp,8
80046e64:	03e00008 	jr	ra
80046e68:	00000000 	nop

80046e6c <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h37e6986c1a52507dE>:
          fn to_u32(&self) -> u32 { *self as u32 }
80046e6c:	27bdfff8 	addiu	sp,sp,-8
80046e70:	afa40004 	sw	a0,4(sp)
80046e74:	90820000 	lbu	v0,0(a0)
80046e78:	27bd0008 	addiu	sp,sp,8
80046e7c:	03e00008 	jr	ra
80046e80:	00000000 	nop

80046e84 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h82437499101b7905E>:
          fn zero() -> Self { 0 }
80046e84:	24020000 	li	v0,0
80046e88:	03e00008 	jr	ra
80046e8c:	00000000 	nop

80046e90 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817hb5a1ba67db0bffc6E>:
          fn from_u8(u: u8) -> Self { u as Self }
80046e90:	27bdfff8 	addiu	sp,sp,-8
80046e94:	a3a40007 	sb	a0,7(sp)
80046e98:	308200ff 	andi	v0,a0,0xff
80046e9c:	27bd0008 	addiu	sp,sp,8
80046ea0:	03e00008 	jr	ra
80046ea4:	00000000 	nop

80046ea8 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h3cd2e303bc7c4816E>:
          fn to_u8(&self) -> u8 { *self as u8 }
80046ea8:	27bdfff8 	addiu	sp,sp,-8
80046eac:	afa40004 	sw	a0,4(sp)
80046eb0:	8c820000 	lw	v0,0(a0)
80046eb4:	27bd0008 	addiu	sp,sp,8
80046eb8:	03e00008 	jr	ra
80046ebc:	00000000 	nop

80046ec0 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h93506426df48ccd6E>:
          fn to_u32(&self) -> u32 { *self as u32 }
80046ec0:	27bdfff8 	addiu	sp,sp,-8
80046ec4:	afa40004 	sw	a0,4(sp)
80046ec8:	8c820000 	lw	v0,0(a0)
80046ecc:	27bd0008 	addiu	sp,sp,8
80046ed0:	03e00008 	jr	ra
80046ed4:	00000000 	nop

80046ed8 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$4zero17h270aff8721106dedE>:
          fn zero() -> Self { 0 }
80046ed8:	24020000 	li	v0,0
80046edc:	03e00008 	jr	ra
80046ee0:	00000000 	nop

80046ee4 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$7from_u817h1c1cc6cf834b4db9E>:
          fn from_u8(u: u8) -> Self { u as Self }
80046ee4:	27bdfff8 	addiu	sp,sp,-8
80046ee8:	a3a40007 	sb	a0,7(sp)
80046eec:	308200ff 	andi	v0,a0,0xff
80046ef0:	27bd0008 	addiu	sp,sp,8
80046ef4:	03e00008 	jr	ra
80046ef8:	00000000 	nop

80046efc <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$5to_u817h34321a1be99db044E>:
          fn to_u8(&self) -> u8 { *self as u8 }
80046efc:	27bdfff8 	addiu	sp,sp,-8
80046f00:	afa40004 	sw	a0,4(sp)
80046f04:	8c820000 	lw	v0,0(a0)
80046f08:	27bd0008 	addiu	sp,sp,8
80046f0c:	03e00008 	jr	ra
80046f10:	00000000 	nop

80046f14 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h3480a5b3e6b033f7E>:
          fn to_u32(&self) -> u32 { *self as u32 }
80046f14:	27bdfff8 	addiu	sp,sp,-8
80046f18:	afa40004 	sw	a0,4(sp)
80046f1c:	8c820000 	lw	v0,0(a0)
80046f20:	27bd0008 	addiu	sp,sp,8
80046f24:	03e00008 	jr	ra
80046f28:	00000000 	nop

80046f2c <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E>:
macro_rules! radix {
    ($T:ident, $base:expr, $prefix:expr, $($x:pat => $conv:expr),+) => {
        unsafe impl GenericRadix for $T {
            const BASE: u8 = $base;
            const PREFIX: &'static str = $prefix;
            fn digit(x: u8) -> u8 {
80046f2c:	27bdff78 	addiu	sp,sp,-136
80046f30:	afbf0084 	sw	ra,132(sp)
80046f34:	00800825 	move	at,a0
80046f38:	afa10028 	sw	at,40(sp)
80046f3c:	a3a4005b 	sb	a0,91(sp)
80046f40:	24010001 	li	at,1
    }
}

radix! { Binary,    2, "0b", x @  0 ..=  1 => b'0' + x }
radix! { Octal,     8, "0o", x @  0 ..=  7 => b'0' + x }
radix! { LowerHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'a' + (x - 10) }
80046f44:	1420000a 	bnez	at,80046f70 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x44>
80046f48:	00000000 	nop
80046f4c:	08011bd5 	j	80046f54 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x28>
80046f50:	00000000 	nop
80046f54:	8fa10028 	lw	at,40(sp)
80046f58:	302100ff 	andi	at,at,0xff
80046f5c:	2c21000a 	sltiu	at,at,10
80046f60:	1020003b 	beqz	at,80047050 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x124>
80046f64:	00000000 	nop
80046f68:	08011bec 	j	80046fb0 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x84>
80046f6c:	00000000 	nop
80046f70:	8fa10028 	lw	at,40(sp)
80046f74:	302100ff 	andi	at,at,0xff
80046f78:	2c21000a 	sltiu	at,at,10
80046f7c:	1020fff5 	beqz	at,80046f54 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x28>
80046f80:	00000000 	nop
80046f84:	08011be3 	j	80046f8c <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x60>
80046f88:	00000000 	nop
80046f8c:	8fa10028 	lw	at,40(sp)
80046f90:	302100ff 	andi	at,at,0xff
80046f94:	24220030 	addiu	v0,at,48
80046f98:	afa20024 	sw	v0,36(sp)
80046f9c:	304100ff 	andi	at,v0,0xff
80046fa0:	14220059 	bne	at,v0,80047108 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x1dc>
80046fa4:	00000000 	nop
80046fa8:	08011c3e 	j	800470f8 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x1cc>
80046fac:	00000000 	nop
                    x => panic!("number not in the range 0..={}: {}", Self::BASE - 1, x),
80046fb0:	8fa10028 	lw	at,40(sp)
80046fb4:	a3a1002f 	sb	at,47(sp)
80046fb8:	3c018108 	lui	at,0x8108
80046fbc:	2422d310 	addiu	v0,at,-11504
80046fc0:	afa20070 	sw	v0,112(sp)
80046fc4:	afa2007c 	sw	v0,124(sp)
80046fc8:	3c018004 	lui	at,0x8004
80046fcc:	24217c18 	addiu	at,at,31768
80046fd0:	afa10080 	sw	at,128(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80046fd4:	afa20074 	sw	v0,116(sp)
80046fd8:	afa10078 	sw	at,120(sp)
    }
80046fdc:	8fa40074 	lw	a0,116(sp)
80046fe0:	8fa30078 	lw	v1,120(sp)
80046fe4:	27a2002f 	addiu	v0,sp,47
80046fe8:	afa2005c 	sw	v0,92(sp)
80046fec:	afa20068 	sw	v0,104(sp)
80046ff0:	afa1006c 	sw	at,108(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80046ff4:	afa20060 	sw	v0,96(sp)
80046ff8:	afa10064 	sw	at,100(sp)
    }
80046ffc:	8fa20060 	lw	v0,96(sp)
80047000:	8fa10064 	lw	at,100(sp)
80047004:	afa40048 	sw	a0,72(sp)
80047008:	afa3004c 	sw	v1,76(sp)
8004700c:	afa20050 	sw	v0,80(sp)
80047010:	afa10054 	sw	at,84(sp)
80047014:	03a00825 	move	at,sp
80047018:	24060002 	li	a2,2
8004701c:	ac260010 	sw	a2,16(at)
80047020:	3c018108 	lui	at,0x8108
80047024:	2425d300 	addiu	a1,at,-11520
80047028:	27a40030 	addiu	a0,sp,48
8004702c:	afa40020 	sw	a0,32(sp)
80047030:	27a70048 	addiu	a3,sp,72
80047034:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
80047038:	00000000 	nop
8004703c:	8fa40020 	lw	a0,32(sp)
80047040:	3c018108 	lui	at,0x8108
80047044:	2425d314 	addiu	a1,at,-11500
80047048:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
8004704c:	00000000 	nop
radix! { LowerHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'a' + (x - 10) }
80047050:	8fa10028 	lw	at,40(sp)
80047054:	302100ff 	andi	at,at,0xff
80047058:	2c210010 	sltiu	at,at,16
8004705c:	1020ffd4 	beqz	at,80046fb0 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x84>
80047060:	00000000 	nop
80047064:	08011c1b 	j	8004706c <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x140>
80047068:	00000000 	nop
8004706c:	8fa10028 	lw	at,40(sp)
80047070:	2422fff6 	addiu	v0,at,-10
80047074:	afa2001c 	sw	v0,28(sp)
80047078:	302100ff 	andi	at,at,0xff
8004707c:	2c21000a 	sltiu	at,at,10
80047080:	1420000c 	bnez	at,800470b4 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x188>
80047084:	00000000 	nop
80047088:	08011c24 	j	80047090 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x164>
8004708c:	00000000 	nop
80047090:	8fa1001c 	lw	at,28(sp)
80047094:	302100ff 	andi	at,at,0xff
80047098:	24220061 	addiu	v0,at,97
8004709c:	afa20018 	sw	v0,24(sp)
800470a0:	304100ff 	andi	at,v0,0xff
800470a4:	1422000b 	bne	at,v0,800470d4 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x1a8>
800470a8:	00000000 	nop
800470ac:	08011c31 	j	800470c4 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x198>
800470b0:	00000000 	nop
800470b4:	3c018108 	lui	at,0x8108
800470b8:	2424d324 	addiu	a0,at,-11484
800470bc:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800470c0:	00000000 	nop
800470c4:	8fa10018 	lw	at,24(sp)
800470c8:	a3a1002e 	sb	at,46(sp)
                    $($x => $conv,)+
800470cc:	08011c39 	j	800470e4 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x1b8>
800470d0:	00000000 	nop
radix! { LowerHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'a' + (x - 10) }
800470d4:	3c018108 	lui	at,0x8108
800470d8:	2424d334 	addiu	a0,at,-11468
800470dc:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800470e0:	00000000 	nop
            }
800470e4:	93a2002e 	lbu	v0,46(sp)
800470e8:	8fbf0084 	lw	ra,132(sp)
800470ec:	27bd0088 	addiu	sp,sp,136
800470f0:	03e00008 	jr	ra
800470f4:	00000000 	nop
radix! { LowerHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'a' + (x - 10) }
800470f8:	8fa10024 	lw	at,36(sp)
800470fc:	a3a1002e 	sb	at,46(sp)
                    $($x => $conv,)+
80047100:	08011c39 	j	800470e4 <_ZN73_$LT$core..fmt..num..LowerHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h40afc7efef0a1130E+0x1b8>
80047104:	00000000 	nop
radix! { LowerHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'a' + (x - 10) }
80047108:	3c018108 	lui	at,0x8108
8004710c:	2424d344 	addiu	a0,at,-11452
80047110:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80047114:	00000000 	nop

80047118 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE>:
            fn digit(x: u8) -> u8 {
80047118:	27bdff78 	addiu	sp,sp,-136
8004711c:	afbf0084 	sw	ra,132(sp)
80047120:	00800825 	move	at,a0
80047124:	afa10028 	sw	at,40(sp)
80047128:	a3a4005b 	sb	a0,91(sp)
8004712c:	24010001 	li	at,1
radix! { UpperHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'A' + (x - 10) }
80047130:	1420000a 	bnez	at,8004715c <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x44>
80047134:	00000000 	nop
80047138:	08011c50 	j	80047140 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x28>
8004713c:	00000000 	nop
80047140:	8fa10028 	lw	at,40(sp)
80047144:	302100ff 	andi	at,at,0xff
80047148:	2c21000a 	sltiu	at,at,10
8004714c:	1020003b 	beqz	at,8004723c <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x124>
80047150:	00000000 	nop
80047154:	08011c67 	j	8004719c <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x84>
80047158:	00000000 	nop
8004715c:	8fa10028 	lw	at,40(sp)
80047160:	302100ff 	andi	at,at,0xff
80047164:	2c21000a 	sltiu	at,at,10
80047168:	1020fff5 	beqz	at,80047140 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x28>
8004716c:	00000000 	nop
80047170:	08011c5e 	j	80047178 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x60>
80047174:	00000000 	nop
80047178:	8fa10028 	lw	at,40(sp)
8004717c:	302100ff 	andi	at,at,0xff
80047180:	24220030 	addiu	v0,at,48
80047184:	afa20024 	sw	v0,36(sp)
80047188:	304100ff 	andi	at,v0,0xff
8004718c:	14220059 	bne	at,v0,800472f4 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x1dc>
80047190:	00000000 	nop
80047194:	08011cb9 	j	800472e4 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x1cc>
80047198:	00000000 	nop
                    x => panic!("number not in the range 0..={}: {}", Self::BASE - 1, x),
8004719c:	8fa10028 	lw	at,40(sp)
800471a0:	a3a1002f 	sb	at,47(sp)
800471a4:	3c018108 	lui	at,0x8108
800471a8:	2422d310 	addiu	v0,at,-11504
800471ac:	afa20070 	sw	v0,112(sp)
800471b0:	afa2007c 	sw	v0,124(sp)
800471b4:	3c018004 	lui	at,0x8004
800471b8:	24217c18 	addiu	at,at,31768
800471bc:	afa10080 	sw	at,128(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
800471c0:	afa20074 	sw	v0,116(sp)
800471c4:	afa10078 	sw	at,120(sp)
    }
800471c8:	8fa40074 	lw	a0,116(sp)
800471cc:	8fa30078 	lw	v1,120(sp)
800471d0:	27a2002f 	addiu	v0,sp,47
800471d4:	afa2005c 	sw	v0,92(sp)
800471d8:	afa20068 	sw	v0,104(sp)
800471dc:	afa1006c 	sw	at,108(sp)
        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
800471e0:	afa20060 	sw	v0,96(sp)
800471e4:	afa10064 	sw	at,100(sp)
    }
800471e8:	8fa20060 	lw	v0,96(sp)
800471ec:	8fa10064 	lw	at,100(sp)
800471f0:	afa40048 	sw	a0,72(sp)
800471f4:	afa3004c 	sw	v1,76(sp)
800471f8:	afa20050 	sw	v0,80(sp)
800471fc:	afa10054 	sw	at,84(sp)
80047200:	03a00825 	move	at,sp
80047204:	24060002 	li	a2,2
80047208:	ac260010 	sw	a2,16(at)
8004720c:	3c018108 	lui	at,0x8108
80047210:	2425d300 	addiu	a1,at,-11520
80047214:	27a40030 	addiu	a0,sp,48
80047218:	afa40020 	sw	a0,32(sp)
8004721c:	27a70048 	addiu	a3,sp,72
80047220:	0c00fb1a 	jal	8003ec68 <_ZN4core3fmt9Arguments6new_v117h79f77af337d7fbb5E>
80047224:	00000000 	nop
80047228:	8fa40020 	lw	a0,32(sp)
8004722c:	3c018108 	lui	at,0x8108
80047230:	2425d354 	addiu	a1,at,-11436
80047234:	0c00f273 	jal	8003c9cc <_ZN4core9panicking9panic_fmt17haa0b7b5320725eccE>
80047238:	00000000 	nop
radix! { UpperHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'A' + (x - 10) }
8004723c:	8fa10028 	lw	at,40(sp)
80047240:	302100ff 	andi	at,at,0xff
80047244:	2c210010 	sltiu	at,at,16
80047248:	1020ffd4 	beqz	at,8004719c <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x84>
8004724c:	00000000 	nop
80047250:	08011c96 	j	80047258 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x140>
80047254:	00000000 	nop
80047258:	8fa10028 	lw	at,40(sp)
8004725c:	2422fff6 	addiu	v0,at,-10
80047260:	afa2001c 	sw	v0,28(sp)
80047264:	302100ff 	andi	at,at,0xff
80047268:	2c21000a 	sltiu	at,at,10
8004726c:	1420000c 	bnez	at,800472a0 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x188>
80047270:	00000000 	nop
80047274:	08011c9f 	j	8004727c <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x164>
80047278:	00000000 	nop
8004727c:	8fa1001c 	lw	at,28(sp)
80047280:	302100ff 	andi	at,at,0xff
80047284:	24220041 	addiu	v0,at,65
80047288:	afa20018 	sw	v0,24(sp)
8004728c:	304100ff 	andi	at,v0,0xff
80047290:	1422000b 	bne	at,v0,800472c0 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x1a8>
80047294:	00000000 	nop
80047298:	08011cac 	j	800472b0 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x198>
8004729c:	00000000 	nop
800472a0:	3c018108 	lui	at,0x8108
800472a4:	2424d364 	addiu	a0,at,-11420
800472a8:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800472ac:	00000000 	nop
800472b0:	8fa10018 	lw	at,24(sp)
800472b4:	a3a1002e 	sb	at,46(sp)
                    $($x => $conv,)+
800472b8:	08011cb4 	j	800472d0 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x1b8>
800472bc:	00000000 	nop
radix! { UpperHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'A' + (x - 10) }
800472c0:	3c018108 	lui	at,0x8108
800472c4:	2424d374 	addiu	a0,at,-11404
800472c8:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
800472cc:	00000000 	nop
            }
800472d0:	93a2002e 	lbu	v0,46(sp)
800472d4:	8fbf0084 	lw	ra,132(sp)
800472d8:	27bd0088 	addiu	sp,sp,136
800472dc:	03e00008 	jr	ra
800472e0:	00000000 	nop
radix! { UpperHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'A' + (x - 10) }
800472e4:	8fa10024 	lw	at,36(sp)
800472e8:	a3a1002e 	sb	at,46(sp)
                    $($x => $conv,)+
800472ec:	08011cb4 	j	800472d0 <_ZN73_$LT$core..fmt..num..UpperHex$u20$as$u20$core..fmt..num..GenericRadix$GT$5digit17h4f023982f951515eE+0x1b8>
800472f0:	00000000 	nop
radix! { UpperHex, 16, "0x", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'A' + (x - 10) }
800472f4:	3c018108 	lui	at,0x8108
800472f8:	2424d384 	addiu	a0,at,-11388
800472fc:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80047300:	00000000 	nop

80047304 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17ha9c952a2178178e1E>:

macro_rules! int_base {
    (fmt::$Trait:ident for $T:ident as $U:ident -> $Radix:ident) => {
        #[stable(feature = "rust1", since = "1.0.0")]
        impl fmt::$Trait for $T {
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80047304:	27bdffe0 	addiu	sp,sp,-32
80047308:	afbf001c 	sw	ra,28(sp)
8004730c:	00a03025 	move	a2,a1
80047310:	afa40014 	sw	a0,20(sp)
80047314:	afa60018 	sw	a2,24(sp)
                $Radix.fmt_int(*self as $U, f)
80047318:	8c850000 	lw	a1,0(a0)
8004731c:	3c018108 	lui	at,0x8108
80047320:	2424b030 	addiu	a0,at,-20432
80047324:	0c00f6e1 	jal	8003db84 <_ZN4core3fmt3num12GenericRadix7fmt_int17h82a3791debf3b1c2E>
80047328:	00000000 	nop
            }
8004732c:	8fbf001c 	lw	ra,28(sp)
80047330:	27bd0020 	addiu	sp,sp,32
80047334:	03e00008 	jr	ra
80047338:	00000000 	nop

8004733c <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17hfaf75d7b2ba6aa03E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8004733c:	27bdffe0 	addiu	sp,sp,-32
80047340:	afbf001c 	sw	ra,28(sp)
80047344:	00a03025 	move	a2,a1
80047348:	afa40014 	sw	a0,20(sp)
8004734c:	afa60018 	sw	a2,24(sp)
                $Radix.fmt_int(*self as $U, f)
80047350:	8c850000 	lw	a1,0(a0)
80047354:	3c018108 	lui	at,0x8108
80047358:	2424b030 	addiu	a0,at,-20432
8004735c:	0c00f8d3 	jal	8003e34c <_ZN4core3fmt3num12GenericRadix7fmt_int17ha596ec1ec4e52b6eE>
80047360:	00000000 	nop
            }
80047364:	8fbf001c 	lw	ra,28(sp)
80047368:	27bd0020 	addiu	sp,sp,32
8004736c:	03e00008 	jr	ra
80047370:	00000000 	nop

80047374 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h58d0fe377f333152E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80047374:	27bdffe0 	addiu	sp,sp,-32
80047378:	afbf001c 	sw	ra,28(sp)
8004737c:	00a03025 	move	a2,a1
80047380:	afa40014 	sw	a0,20(sp)
80047384:	afa60018 	sw	a2,24(sp)
                $Radix.fmt_int(*self as $U, f)
80047388:	90850000 	lbu	a1,0(a0)
8004738c:	3c018108 	lui	at,0x8108
80047390:	2424b030 	addiu	a0,at,-20432
80047394:	0c00f5e8 	jal	8003d7a0 <_ZN4core3fmt3num12GenericRadix7fmt_int17h133333d4419efafdE>
80047398:	00000000 	nop
            }
8004739c:	8fbf001c 	lw	ra,28(sp)
800473a0:	27bd0020 	addiu	sp,sp,32
800473a4:	03e00008 	jr	ra
800473a8:	00000000 	nop

800473ac <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h86e3a1b67e1742acE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
800473ac:	27bdffe0 	addiu	sp,sp,-32
800473b0:	afbf001c 	sw	ra,28(sp)
800473b4:	00a03025 	move	a2,a1
800473b8:	afa40014 	sw	a0,20(sp)
800473bc:	afa60018 	sw	a2,24(sp)
                $Radix.fmt_int(*self as $U, f)
800473c0:	90850000 	lbu	a1,0(a0)
800473c4:	3c018108 	lui	at,0x8108
800473c8:	2424b030 	addiu	a0,at,-20432
800473cc:	0c00f7da 	jal	8003df68 <_ZN4core3fmt3num12GenericRadix7fmt_int17h990859b8858f665aE>
800473d0:	00000000 	nop
            }
800473d4:	8fbf001c 	lw	ra,28(sp)
800473d8:	27bd0020 	addiu	sp,sp,32
800473dc:	03e00008 	jr	ra
800473e0:	00000000 	nop

800473e4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17hb2027a54af880faeE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
800473e4:	27bdffe0 	addiu	sp,sp,-32
800473e8:	afbf001c 	sw	ra,28(sp)
800473ec:	00a03025 	move	a2,a1
800473f0:	afa40014 	sw	a0,20(sp)
800473f4:	afa60018 	sw	a2,24(sp)
                $Radix.fmt_int(*self as $U, f)
800473f8:	8c850000 	lw	a1,0(a0)
800473fc:	3c018108 	lui	at,0x8108
80047400:	2424b030 	addiu	a0,at,-20432
80047404:	0c00f9cc 	jal	8003e730 <_ZN4core3fmt3num12GenericRadix7fmt_int17hb338d64af17f6e61E>
80047408:	00000000 	nop
            }
8004740c:	8fbf001c 	lw	ra,28(sp)
80047410:	27bd0020 	addiu	sp,sp,32
80047414:	03e00008 	jr	ra
80047418:	00000000 	nop

8004741c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E>:
macro_rules! debug {
    ($($T:ident)*) => {$(
        #[stable(feature = "rust1", since = "1.0.0")]
        impl fmt::Debug for $T {
            #[inline]
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8004741c:	27bdffd8 	addiu	sp,sp,-40
80047420:	afbf0024 	sw	ra,36(sp)
80047424:	afa50010 	sw	a1,16(sp)
80047428:	00800825 	move	at,a0
8004742c:	8fa40010 	lw	a0,16(sp)
80047430:	afa10014 	sw	at,20(sp)
80047434:	afa1001c 	sw	at,28(sp)
80047438:	afa40020 	sw	a0,32(sp)
                if f.debug_lower_hex() {
8004743c:	0c0101db 	jal	8004076c <_ZN4core3fmt9Formatter15debug_lower_hex17h09a19bcedc4d5af7E>
80047440:	00000000 	nop
80047444:	1440000a 	bnez	v0,80047470 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E+0x54>
80047448:	00000000 	nop
8004744c:	08011d15 	j	80047454 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E+0x38>
80047450:	00000000 	nop
                    fmt::LowerHex::fmt(self, f)
                } else if f.debug_upper_hex() {
80047454:	8fa40010 	lw	a0,16(sp)
80047458:	0c0101e3 	jal	8004078c <_ZN4core3fmt9Formatter15debug_upper_hex17h021fe51b661c830dE>
8004745c:	00000000 	nop
80047460:	14400011 	bnez	v0,800474a8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E+0x8c>
80047464:	00000000 	nop
80047468:	08011d23 	j	8004748c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E+0x70>
8004746c:	00000000 	nop
                    fmt::LowerHex::fmt(self, f)
80047470:	8fa50010 	lw	a1,16(sp)
80047474:	8fa40014 	lw	a0,20(sp)
80047478:	0c011cdd 	jal	80047374 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h58d0fe377f333152E>
8004747c:	00000000 	nop
80047480:	a3a2001b 	sb	v0,27(sp)
80047484:	08011d31 	j	800474c4 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E+0xa8>
80047488:	00000000 	nop
                    fmt::UpperHex::fmt(self, f)
                } else {
                    fmt::Display::fmt(self, f)
8004748c:	8fa50010 	lw	a1,16(sp)
80047490:	8fa40014 	lw	a0,20(sp)
80047494:	0c011f06 	jal	80047c18 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h3260c0ca39427d61E>
80047498:	00000000 	nop
8004749c:	a3a2001b 	sb	v0,27(sp)
800474a0:	08011d31 	j	800474c4 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E+0xa8>
800474a4:	00000000 	nop
                    fmt::UpperHex::fmt(self, f)
800474a8:	8fa50010 	lw	a1,16(sp)
800474ac:	8fa40014 	lw	a0,20(sp)
800474b0:	0c011ceb 	jal	800473ac <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h86e3a1b67e1742acE>
800474b4:	00000000 	nop
800474b8:	a3a2001b 	sb	v0,27(sp)
800474bc:	08011d31 	j	800474c4 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17he9a729a2ed3338a3E+0xa8>
800474c0:	00000000 	nop
                }
            }
800474c4:	93a1001b 	lbu	at,27(sp)
800474c8:	30220001 	andi	v0,at,0x1
800474cc:	8fbf0024 	lw	ra,36(sp)
800474d0:	27bd0028 	addiu	sp,sp,40
800474d4:	03e00008 	jr	ra
800474d8:	00000000 	nop

800474dc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
800474dc:	27bdffd8 	addiu	sp,sp,-40
800474e0:	afbf0024 	sw	ra,36(sp)
800474e4:	afa50010 	sw	a1,16(sp)
800474e8:	00800825 	move	at,a0
800474ec:	8fa40010 	lw	a0,16(sp)
800474f0:	afa10014 	sw	at,20(sp)
800474f4:	afa1001c 	sw	at,28(sp)
800474f8:	afa40020 	sw	a0,32(sp)
                if f.debug_lower_hex() {
800474fc:	0c0101db 	jal	8004076c <_ZN4core3fmt9Formatter15debug_lower_hex17h09a19bcedc4d5af7E>
80047500:	00000000 	nop
80047504:	1440000a 	bnez	v0,80047530 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E+0x54>
80047508:	00000000 	nop
8004750c:	08011d45 	j	80047514 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E+0x38>
80047510:	00000000 	nop
                } else if f.debug_upper_hex() {
80047514:	8fa40010 	lw	a0,16(sp)
80047518:	0c0101e3 	jal	8004078c <_ZN4core3fmt9Formatter15debug_upper_hex17h021fe51b661c830dE>
8004751c:	00000000 	nop
80047520:	14400011 	bnez	v0,80047568 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E+0x8c>
80047524:	00000000 	nop
80047528:	08011d53 	j	8004754c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E+0x70>
8004752c:	00000000 	nop
                    fmt::LowerHex::fmt(self, f)
80047530:	8fa50010 	lw	a1,16(sp)
80047534:	8fa40014 	lw	a0,20(sp)
80047538:	0c011cc1 	jal	80047304 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17ha9c952a2178178e1E>
8004753c:	00000000 	nop
80047540:	a3a2001b 	sb	v0,27(sp)
80047544:	08011d61 	j	80047584 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E+0xa8>
80047548:	00000000 	nop
                    fmt::Display::fmt(self, f)
8004754c:	8fa50010 	lw	a1,16(sp)
80047550:	8fa40014 	lw	a0,20(sp)
80047554:	0c011f58 	jal	80047d60 <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h5a8a6dbd9db1e804E>
80047558:	00000000 	nop
8004755c:	a3a2001b 	sb	v0,27(sp)
80047560:	08011d61 	j	80047584 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E+0xa8>
80047564:	00000000 	nop
                    fmt::UpperHex::fmt(self, f)
80047568:	8fa50010 	lw	a1,16(sp)
8004756c:	8fa40014 	lw	a0,20(sp)
80047570:	0c011ccf 	jal	8004733c <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17hfaf75d7b2ba6aa03E>
80047574:	00000000 	nop
80047578:	a3a2001b 	sb	v0,27(sp)
8004757c:	08011d61 	j	80047584 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E+0xa8>
80047580:	00000000 	nop
            }
80047584:	93a1001b 	lbu	at,27(sp)
80047588:	30220001 	andi	v0,at,0x1
8004758c:	8fbf0024 	lw	ra,36(sp)
80047590:	27bd0028 	addiu	sp,sp,40
80047594:	03e00008 	jr	ra
80047598:	00000000 	nop

8004759c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E>:
      6061626364656667686970717273747576777879\
      8081828384858687888990919293949596979899";

macro_rules! impl_Display {
    ($($t:ident),* as $u:ident via $conv_fn:ident named $name:ident) => {
        fn $name(mut n: $u, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8004759c:	27bdfe80 	addiu	sp,sp,-384
800475a0:	afbf017c 	sw	ra,380(sp)
800475a4:	afa6006c 	sw	a2,108(sp)
800475a8:	00a00825 	move	at,a1
800475ac:	afa10070 	sw	at,112(sp)
800475b0:	afa40080 	sw	a0,128(sp)
800475b4:	a3a500b7 	sb	a1,183(sp)
800475b8:	afa600b8 	sw	a2,184(sp)
            // 2^128 is about 3*10^38, so 39 gives an extra byte of space
            let mut buf = [MaybeUninit::<u8>::uninit(); 39];
800475bc:	93a50113 	lbu	a1,275(sp)
800475c0:	27a40085 	addiu	a0,sp,133
800475c4:	afa40074 	sw	a0,116(sp)
800475c8:	24060027 	li	a2,39
800475cc:	afa60078 	sw	a2,120(sp)
800475d0:	0c00d47d 	jal	800351f4 <memset>
800475d4:	00000000 	nop
800475d8:	8fa10074 	lw	at,116(sp)
            let mut curr = buf.len();
800475dc:	8fa20078 	lw	v0,120(sp)
800475e0:	afa200ac 	sw	v0,172(sp)
800475e4:	afa10114 	sw	at,276(sp)
800475e8:	afa20118 	sw	v0,280(sp)
800475ec:	afa10174 	sw	at,372(sp)
800475f0:	afa20178 	sw	v0,376(sp)
            let buf_ptr = MaybeUninit::slice_as_mut_ptr(&mut buf);
800475f4:	afa100bc 	sw	at,188(sp)
            let lut_ptr = DEC_DIGITS_LUT.as_ptr();
800475f8:	3c018108 	lui	at,0x8108
800475fc:	8c21bb30 	lw	at,-17616(at)
80047600:	afa1007c 	sw	at,124(sp)
80047604:	afa1016c 	sw	at,364(sp)
80047608:	240200c8 	li	v0,200
8004760c:	afa20170 	sw	v0,368(sp)
80047610:	afa100c0 	sw	at,192(sp)
80047614:	24010001 	li	at,1
            // each step this is kept the same as `n` is divided. Since `n` is always
            // non-negative, this means that `curr > 0` so `buf_ptr[curr..curr + 1]`
            // is safe to access.
            unsafe {
                // need at least 16 bits for the 4-characters-at-a-time to work.
                assert!(crate::mem::size_of::<$u>() >= 2);
80047618:	1420000a 	bnez	at,80047644 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0xa8>
8004761c:	00000000 	nop
80047620:	08011d8a 	j	80047628 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x8c>
80047624:	00000000 	nop
80047628:	3c018108 	lui	at,0x8108
8004762c:	2424d394 	addiu	a0,at,-11372
80047630:	3c018108 	lui	at,0x8108
80047634:	2426d3c8 	addiu	a2,at,-11320
80047638:	24050033 	li	a1,51
8004763c:	0c00f2ba 	jal	8003cae8 <_ZN4core9panicking5panic17h32a569da5456796dE>
80047640:	00000000 	nop

                // eagerly decode 4 characters at a time
                while n >= 10000 {
80047644:	8fa10080 	lw	at,128(sp)
80047648:	2c212710 	sltiu	at,at,10000
8004764c:	1020000b 	beqz	at,8004767c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0xe0>
80047650:	00000000 	nop
80047654:	08011d97 	j	8004765c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0xc0>
80047658:	00000000 	nop
                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
                    ptr::copy_nonoverlapping(lut_ptr.add(d2), buf_ptr.add(curr + 2), 2);
                }

                // if we reach here numbers are <= 9999, so at most 4 chars long
                let mut n = n as usize; // possibly reduce 64bit math
8004765c:	8fa10080 	lw	at,128(sp)
80047660:	afa100b0 	sw	at,176(sp)

                // decode 2 more chars, if > 2 chars
                if n >= 100 {
80047664:	8fa100b0 	lw	at,176(sp)
80047668:	2c210064 	sltiu	at,at,100
8004766c:	10200030 	beqz	at,80047730 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x194>
80047670:	00000000 	nop
80047674:	08011dc6 	j	80047718 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x17c>
80047678:	00000000 	nop
                    let rem = (n % 10000) as usize;
8004767c:	8fa10080 	lw	at,128(sp)
80047680:	3c02d1b7 	lui	v0,0xd1b7
80047684:	34431759 	ori	v1,v0,0x1759
80047688:	00230019 	multu	at,v1
8004768c:	00001010 	mfhi	v0
80047690:	00021342 	srl	v0,v0,0xd
80047694:	24042710 	li	a0,10000
80047698:	70441002 	mul	v0,v0,a0
8004769c:	00220823 	subu	at,at,v0
800476a0:	afa100d4 	sw	at,212(sp)
                    n /= 10000;
800476a4:	8fa20080 	lw	v0,128(sp)
800476a8:	00430019 	multu	v0,v1
800476ac:	00001010 	mfhi	v0
800476b0:	00021342 	srl	v0,v0,0xd
800476b4:	afa20080 	sw	v0,128(sp)
800476b8:	3c02028f 	lui	v0,0x28f
800476bc:	34425c29 	ori	v0,v0,0x5c29
                    let d2 = (rem % 100) << 1;
800476c0:	00220019 	multu	at,v0
800476c4:	00001010 	mfhi	v0
                    let d1 = (rem / 100) << 1;
800476c8:	00021840 	sll	v1,v0,0x1
800476cc:	afa30060 	sw	v1,96(sp)
800476d0:	afa300d8 	sw	v1,216(sp)
                    let d2 = (rem % 100) << 1;
800476d4:	00022140 	sll	a0,v0,0x5
800476d8:	00021880 	sll	v1,v0,0x2
800476dc:	00641823 	subu	v1,v1,a0
800476e0:	000211c0 	sll	v0,v0,0x7
800476e4:	00431021 	addu	v0,v0,v1
800476e8:	00220823 	subu	at,at,v0
800476ec:	00010840 	sll	at,at,0x1
800476f0:	afa10064 	sw	at,100(sp)
800476f4:	afa100dc 	sw	at,220(sp)
                    curr -= 4;
800476f8:	8fa100ac 	lw	at,172(sp)
800476fc:	2422fffc 	addiu	v0,at,-4
80047700:	afa20068 	sw	v0,104(sp)
80047704:	2c210004 	sltiu	at,at,4
80047708:	14200117 	bnez	at,80047b68 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x5cc>
8004770c:	00000000 	nop
80047710:	08011ea3 	j	80047a8c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x4f0>
80047714:	00000000 	nop
                    curr -= 2;
                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
                }

                // decode last 1 or 2 chars
                if n < 10 {
80047718:	8fa100b0 	lw	at,176(sp)
8004771c:	2c21000a 	sltiu	at,at,10
80047720:	1420005c 	bnez	at,80047894 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x2f8>
80047724:	00000000 	nop
80047728:	08011e19 	j	80047864 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x2c8>
8004772c:	00000000 	nop
                    let d1 = (n % 100) << 1;
80047730:	8fa100b0 	lw	at,176(sp)
80047734:	3c0251eb 	lui	v0,0x51eb
80047738:	3442851f 	ori	v0,v0,0x851f
8004773c:	00220019 	multu	at,v0
80047740:	00001810 	mfhi	v1
80047744:	3c047fff 	lui	a0,0x7fff
80047748:	3484ffe0 	ori	a0,a0,0xffe0
8004774c:	00642824 	and	a1,v1,a0
80047750:	00031942 	srl	v1,v1,0x5
80047754:	00032080 	sll	a0,v1,0x2
80047758:	00852023 	subu	a0,a0,a1
8004775c:	000319c0 	sll	v1,v1,0x7
80047760:	00641821 	addu	v1,v1,a0
80047764:	00230823 	subu	at,at,v1
80047768:	00010840 	sll	at,at,0x1
8004776c:	afa10058 	sw	at,88(sp)
80047770:	afa100c4 	sw	at,196(sp)
                    n /= 100;
80047774:	8fa100b0 	lw	at,176(sp)
80047778:	00220019 	multu	at,v0
8004777c:	00000810 	mfhi	at
80047780:	00010942 	srl	at,at,0x5
80047784:	afa100b0 	sw	at,176(sp)
                    curr -= 2;
80047788:	8fa100ac 	lw	at,172(sp)
8004778c:	2422fffe 	addiu	v0,at,-2
80047790:	afa2005c 	sw	v0,92(sp)
80047794:	2c210002 	sltiu	at,at,2
80047798:	1420002e 	bnez	at,80047854 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x2b8>
8004779c:	00000000 	nop
800477a0:	08011dea 	j	800477a8 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x20c>
800477a4:	00000000 	nop
800477a8:	8fa1007c 	lw	at,124(sp)
800477ac:	8fa20058 	lw	v0,88(sp)
800477b0:	8fa3005c 	lw	v1,92(sp)
800477b4:	afa300ac 	sw	v1,172(sp)
800477b8:	afa10134 	sw	at,308(sp)
800477bc:	afa20138 	sw	v0,312(sp)
        unsafe { intrinsics::offset(self, count) }
800477c0:	00221021 	addu	v0,at,v0
800477c4:	afa20050 	sw	v0,80(sp)
                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
800477c8:	8fa300ac 	lw	v1,172(sp)
800477cc:	27a10085 	addiu	at,sp,133
800477d0:	afa10164 	sw	at,356(sp)
800477d4:	afa30168 	sw	v1,360(sp)
800477d8:	00230821 	addu	at,at,v1
800477dc:	afa10054 	sw	at,84(sp)
800477e0:	afa20104 	sw	v0,260(sp)
800477e4:	afa10108 	sw	at,264(sp)
800477e8:	24010002 	li	at,2
800477ec:	afa1010c 	sw	at,268(sp)
    ub_checks::assert_unsafe_precondition!(
800477f0:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
800477f4:	00000000 	nop
800477f8:	1040000e 	beqz	v0,80047834 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x298>
800477fc:	00000000 	nop
80047800:	08011e02 	j	80047808 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x26c>
80047804:	00000000 	nop
80047808:	8fa50054 	lw	a1,84(sp)
8004780c:	8fa40050 	lw	a0,80(sp)
80047810:	03a01025 	move	v0,sp
80047814:	24010002 	li	at,2
80047818:	ac410010 	sw	at,16(v0)
8004781c:	24070001 	li	a3,1
80047820:	00e03025 	move	a2,a3
80047824:	0c01193c 	jal	800464f0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E>
80047828:	00000000 	nop
8004782c:	08011e0d 	j	80047834 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x298>
80047830:	00000000 	nop
    unsafe { copy_nonoverlapping(src, dst, count) }
80047834:	8fa20054 	lw	v0,84(sp)
80047838:	8fa10050 	lw	at,80(sp)
8004783c:	90230001 	lbu	v1,1(at)
80047840:	a0430001 	sb	v1,1(v0)
80047844:	90210000 	lbu	at,0(at)
80047848:	a0410000 	sb	at,0(v0)
8004784c:	08011dc6 	j	80047718 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x17c>
80047850:	00000000 	nop
                    curr -= 2;
80047854:	3c018108 	lui	at,0x8108
80047858:	2424d3c8 	addiu	a0,at,-11320
8004785c:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80047860:	00000000 	nop
                    curr -= 1;
                    *buf_ptr.add(curr) = (n as u8) + b'0';
                } else {
                    let d1 = n << 1;
80047864:	8fa100b0 	lw	at,176(sp)
80047868:	00010840 	sll	at,at,0x1
8004786c:	afa10048 	sw	at,72(sp)
80047870:	afa100c8 	sw	at,200(sp)
                    curr -= 2;
80047874:	8fa100ac 	lw	at,172(sp)
80047878:	2422fffe 	addiu	v0,at,-2
8004787c:	afa2004c 	sw	v0,76(sp)
80047880:	2c210002 	sltiu	at,at,2
80047884:	14200035 	bnez	at,8004795c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x3c0>
80047888:	00000000 	nop
8004788c:	08011e2c 	j	800478b0 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x314>
80047890:	00000000 	nop
                    curr -= 1;
80047894:	8fa100ac 	lw	at,172(sp)
80047898:	2422ffff 	addiu	v0,at,-1
8004789c:	afa20044 	sw	v0,68(sp)
800478a0:	1020004b 	beqz	at,800479d0 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x434>
800478a4:	00000000 	nop
800478a8:	08011e6a 	j	800479a8 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x40c>
800478ac:	00000000 	nop
                    curr -= 2;
800478b0:	8fa1007c 	lw	at,124(sp)
800478b4:	8fa20048 	lw	v0,72(sp)
800478b8:	8fa3004c 	lw	v1,76(sp)
800478bc:	afa300ac 	sw	v1,172(sp)
800478c0:	afa1012c 	sw	at,300(sp)
800478c4:	afa20130 	sw	v0,304(sp)
800478c8:	00221021 	addu	v0,at,v0
800478cc:	afa2003c 	sw	v0,60(sp)
                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
800478d0:	8fa300ac 	lw	v1,172(sp)
800478d4:	27a10085 	addiu	at,sp,133
800478d8:	afa1015c 	sw	at,348(sp)
800478dc:	afa30160 	sw	v1,352(sp)
800478e0:	00230821 	addu	at,at,v1
800478e4:	afa10040 	sw	at,64(sp)
800478e8:	afa200f8 	sw	v0,248(sp)
800478ec:	afa100fc 	sw	at,252(sp)
800478f0:	24010002 	li	at,2
800478f4:	afa10100 	sw	at,256(sp)
    ub_checks::assert_unsafe_precondition!(
800478f8:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
800478fc:	00000000 	nop
80047900:	1040000e 	beqz	v0,8004793c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x3a0>
80047904:	00000000 	nop
80047908:	08011e44 	j	80047910 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x374>
8004790c:	00000000 	nop
80047910:	8fa50040 	lw	a1,64(sp)
80047914:	8fa4003c 	lw	a0,60(sp)
80047918:	03a01025 	move	v0,sp
8004791c:	24010002 	li	at,2
80047920:	ac410010 	sw	at,16(v0)
80047924:	24070001 	li	a3,1
80047928:	00e03025 	move	a2,a3
8004792c:	0c01193c 	jal	800464f0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E>
80047930:	00000000 	nop
80047934:	08011e4f 	j	8004793c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x3a0>
80047938:	00000000 	nop
    unsafe { copy_nonoverlapping(src, dst, count) }
8004793c:	8fa20040 	lw	v0,64(sp)
80047940:	8fa1003c 	lw	at,60(sp)
80047944:	90230001 	lbu	v1,1(at)
80047948:	a0430001 	sb	v1,1(v0)
8004794c:	90210000 	lbu	at,0(at)
80047950:	a0410000 	sb	at,0(v0)
80047954:	08011e5b 	j	8004796c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x3d0>
80047958:	00000000 	nop
                    curr -= 2;
8004795c:	3c018108 	lui	at,0x8108
80047960:	2424d3c8 	addiu	a0,at,-11320
80047964:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80047968:	00000000 	nop

            // SAFETY: `curr` > 0 (since we made `buf` large enough), and all the chars are valid
            // UTF-8 since `DEC_DIGITS_LUT` is
            let buf_slice = unsafe {
                str::from_utf8_unchecked(
                    slice::from_raw_parts(buf_ptr.add(curr), buf.len() - curr))
8004796c:	8fa200ac 	lw	v0,172(sp)
80047970:	27a10085 	addiu	at,sp,133
80047974:	afa1014c 	sw	at,332(sp)
80047978:	afa20150 	sw	v0,336(sp)
8004797c:	00220821 	addu	at,at,v0
80047980:	afa10034 	sw	at,52(sp)
80047984:	8fa100ac 	lw	at,172(sp)
80047988:	24020027 	li	v0,39
8004798c:	00411023 	subu	v0,v0,at
80047990:	afa20038 	sw	v0,56(sp)
80047994:	2c210028 	sltiu	at,at,40
80047998:	10200038 	beqz	at,80047a7c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x4e0>
8004799c:	00000000 	nop
800479a0:	08011e85 	j	80047a14 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x478>
800479a4:	00000000 	nop
                    curr -= 1;
800479a8:	8fa10044 	lw	at,68(sp)
800479ac:	afa100ac 	sw	at,172(sp)
                    *buf_ptr.add(curr) = (n as u8) + b'0';
800479b0:	93a100b0 	lbu	at,176(sp)
800479b4:	24220030 	addiu	v0,at,48
800479b8:	afa20030 	sw	v0,48(sp)
800479bc:	304100ff 	andi	at,v0,0xff
800479c0:	14220010 	bne	at,v0,80047a04 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x468>
800479c4:	00000000 	nop
800479c8:	08011e78 	j	800479e0 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x444>
800479cc:	00000000 	nop
                    curr -= 1;
800479d0:	3c018108 	lui	at,0x8108
800479d4:	2424d3c8 	addiu	a0,at,-11320
800479d8:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
800479dc:	00000000 	nop
                    *buf_ptr.add(curr) = (n as u8) + b'0';
800479e0:	8fa10030 	lw	at,48(sp)
800479e4:	8fa300ac 	lw	v1,172(sp)
800479e8:	27a20085 	addiu	v0,sp,133
800479ec:	afa20154 	sw	v0,340(sp)
800479f0:	afa30158 	sw	v1,344(sp)
800479f4:	00431021 	addu	v0,v0,v1
800479f8:	a0410000 	sb	at,0(v0)
                if n < 10 {
800479fc:	08011e5b 	j	8004796c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x3d0>
80047a00:	00000000 	nop
                    *buf_ptr.add(curr) = (n as u8) + b'0';
80047a04:	3c018108 	lui	at,0x8108
80047a08:	2424d3c8 	addiu	a0,at,-11320
80047a0c:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80047a10:	00000000 	nop
                    slice::from_raw_parts(buf_ptr.add(curr), buf.len() - curr))
80047a14:	8fa50038 	lw	a1,56(sp)
80047a18:	8fa40034 	lw	a0,52(sp)
80047a1c:	0c01089b 	jal	8004226c <_ZN4core5slice3raw14from_raw_parts17hbb13f6e72cb227e8E>
80047a20:	00000000 	nop
80047a24:	00402025 	move	a0,v0
80047a28:	00602825 	move	a1,v1
                str::from_utf8_unchecked(
80047a2c:	0c010d19 	jal	80043464 <_ZN4core3str8converts19from_utf8_unchecked17h39df93acbcc29107E>
80047a30:	00000000 	nop
80047a34:	8fa10070 	lw	at,112(sp)
80047a38:	8fa4006c 	lw	a0,108(sp)
80047a3c:	00602825 	move	a1,v1
80047a40:	afa200cc 	sw	v0,204(sp)
80047a44:	afa500d0 	sw	a1,208(sp)
            };
            f.pad_integral(is_nonnegative, "", buf_slice)
80047a48:	03a01825 	move	v1,sp
80047a4c:	ac650014 	sw	a1,20(v1)
80047a50:	ac620010 	sw	v0,16(v1)
80047a54:	30250001 	andi	a1,at,0x1
80047a58:	3c018108 	lui	at,0x8108
80047a5c:	2426b030 	addiu	a2,at,-20432
80047a60:	24070000 	li	a3,0
80047a64:	0c00fdfe 	jal	8003f7f8 <_ZN4core3fmt9Formatter12pad_integral17hf9ac33288b64ea44E>
80047a68:	00000000 	nop
        }
80047a6c:	8fbf017c 	lw	ra,380(sp)
80047a70:	27bd0180 	addiu	sp,sp,384
80047a74:	03e00008 	jr	ra
80047a78:	00000000 	nop
                    slice::from_raw_parts(buf_ptr.add(curr), buf.len() - curr))
80047a7c:	3c018108 	lui	at,0x8108
80047a80:	2424d3c8 	addiu	a0,at,-11320
80047a84:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80047a88:	00000000 	nop
                    curr -= 4;
80047a8c:	8fa1007c 	lw	at,124(sp)
80047a90:	8fa20060 	lw	v0,96(sp)
80047a94:	8fa30068 	lw	v1,104(sp)
80047a98:	afa300ac 	sw	v1,172(sp)
80047a9c:	afa10124 	sw	at,292(sp)
80047aa0:	afa20128 	sw	v0,296(sp)
80047aa4:	00221021 	addu	v0,at,v0
80047aa8:	afa20028 	sw	v0,40(sp)
                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
80047aac:	8fa300ac 	lw	v1,172(sp)
80047ab0:	27a10085 	addiu	at,sp,133
80047ab4:	afa10144 	sw	at,324(sp)
80047ab8:	afa30148 	sw	v1,328(sp)
80047abc:	00230821 	addu	at,at,v1
80047ac0:	afa1002c 	sw	at,44(sp)
80047ac4:	afa200ec 	sw	v0,236(sp)
80047ac8:	afa100f0 	sw	at,240(sp)
80047acc:	24010002 	li	at,2
80047ad0:	afa100f4 	sw	at,244(sp)
    ub_checks::assert_unsafe_precondition!(
80047ad4:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80047ad8:	00000000 	nop
80047adc:	1040000e 	beqz	v0,80047b18 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x57c>
80047ae0:	00000000 	nop
80047ae4:	08011ebb 	j	80047aec <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x550>
80047ae8:	00000000 	nop
80047aec:	8fa5002c 	lw	a1,44(sp)
80047af0:	8fa40028 	lw	a0,40(sp)
80047af4:	03a01025 	move	v0,sp
80047af8:	24010002 	li	at,2
80047afc:	ac410010 	sw	at,16(v0)
80047b00:	24070001 	li	a3,1
80047b04:	00e03025 	move	a2,a3
80047b08:	0c01193c 	jal	800464f0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E>
80047b0c:	00000000 	nop
80047b10:	08011ec6 	j	80047b18 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x57c>
80047b14:	00000000 	nop
    unsafe { copy_nonoverlapping(src, dst, count) }
80047b18:	8fa1007c 	lw	at,124(sp)
80047b1c:	8fa20064 	lw	v0,100(sp)
80047b20:	8fa4002c 	lw	a0,44(sp)
80047b24:	8fa30028 	lw	v1,40(sp)
80047b28:	90650001 	lbu	a1,1(v1)
80047b2c:	a0850001 	sb	a1,1(a0)
80047b30:	90630000 	lbu	v1,0(v1)
80047b34:	a0830000 	sb	v1,0(a0)
80047b38:	afa1011c 	sw	at,284(sp)
80047b3c:	afa20120 	sw	v0,288(sp)
80047b40:	00220821 	addu	at,at,v0
80047b44:	afa10020 	sw	at,32(sp)
                    ptr::copy_nonoverlapping(lut_ptr.add(d2), buf_ptr.add(curr + 2), 2);
80047b48:	8fa200ac 	lw	v0,172(sp)
80047b4c:	24410002 	addiu	at,v0,2
80047b50:	afa10024 	sw	at,36(sp)
80047b54:	0022082b 	sltu	at,at,v0
80047b58:	1420002b 	bnez	at,80047c08 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x66c>
80047b5c:	00000000 	nop
80047b60:	08011ede 	j	80047b78 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x5dc>
80047b64:	00000000 	nop
                    curr -= 4;
80047b68:	3c018108 	lui	at,0x8108
80047b6c:	2424d3c8 	addiu	a0,at,-11320
80047b70:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80047b74:	00000000 	nop
80047b78:	8fa20020 	lw	v0,32(sp)
80047b7c:	8fa30024 	lw	v1,36(sp)
80047b80:	27a10085 	addiu	at,sp,133
80047b84:	afa1013c 	sw	at,316(sp)
80047b88:	afa30140 	sw	v1,320(sp)
80047b8c:	00230821 	addu	at,at,v1
80047b90:	afa1001c 	sw	at,28(sp)
80047b94:	afa200e0 	sw	v0,224(sp)
80047b98:	afa100e4 	sw	at,228(sp)
80047b9c:	24010002 	li	at,2
80047ba0:	afa100e8 	sw	at,232(sp)
    ub_checks::assert_unsafe_precondition!(
80047ba4:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80047ba8:	00000000 	nop
80047bac:	1040000e 	beqz	v0,80047be8 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x64c>
80047bb0:	00000000 	nop
80047bb4:	08011eef 	j	80047bbc <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x620>
80047bb8:	00000000 	nop
80047bbc:	8fa5001c 	lw	a1,28(sp)
80047bc0:	8fa40020 	lw	a0,32(sp)
80047bc4:	03a01025 	move	v0,sp
80047bc8:	24010002 	li	at,2
80047bcc:	ac410010 	sw	at,16(v0)
80047bd0:	24070001 	li	a3,1
80047bd4:	00e03025 	move	a2,a3
80047bd8:	0c01193c 	jal	800464f0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h404a272bcbba0127E>
80047bdc:	00000000 	nop
80047be0:	08011efa 	j	80047be8 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0x64c>
80047be4:	00000000 	nop
    unsafe { copy_nonoverlapping(src, dst, count) }
80047be8:	8fa2001c 	lw	v0,28(sp)
80047bec:	8fa10020 	lw	at,32(sp)
80047bf0:	90230001 	lbu	v1,1(at)
80047bf4:	a0430001 	sb	v1,1(v0)
80047bf8:	90210000 	lbu	at,0(at)
80047bfc:	a0410000 	sb	at,0(v0)
                    ptr::copy_nonoverlapping(lut_ptr.add(d2), buf_ptr.add(curr + 2), 2);
80047c00:	08011d91 	j	80047644 <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E+0xa8>
80047c04:	00000000 	nop
80047c08:	3c018108 	lui	at,0x8108
80047c0c:	2424d3c8 	addiu	a0,at,-11320
80047c10:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80047c14:	00000000 	nop

80047c18 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h3260c0ca39427d61E>:

        $(#[stable(feature = "rust1", since = "1.0.0")]
        impl fmt::Display for $t {
            #[allow(unused_comparisons)]
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80047c18:	27bdffc8 	addiu	sp,sp,-56
80047c1c:	afbf0034 	sw	ra,52(sp)
80047c20:	afa50010 	sw	a1,16(sp)
80047c24:	afa40014 	sw	a0,20(sp)
80047c28:	afa40020 	sw	a0,32(sp)
80047c2c:	afa50024 	sw	a1,36(sp)
80047c30:	24010001 	li	at,1
80047c34:	afa10018 	sw	at,24(sp)
                let is_nonnegative = *self >= 0;
80047c38:	a3a1002b 	sb	at,43(sp)
                let n = if is_nonnegative {
80047c3c:	1420000f 	bnez	at,80047c7c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h3260c0ca39427d61E+0x64>
80047c40:	00000000 	nop
80047c44:	08011f13 	j	80047c4c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h3260c0ca39427d61E+0x34>
80047c48:	00000000 	nop
                    self.$conv_fn()
                } else {
                    // convert the negative num to positive by summing 1 to it's 2 complement
                    (!self.$conv_fn()).wrapping_add(1)
80047c4c:	8fa40014 	lw	a0,20(sp)
80047c50:	0c011b9b 	jal	80046e6c <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h37e6986c1a52507dE>
80047c54:	00000000 	nop
80047c58:	00400827 	nor	at,v0,zero
80047c5c:	afa1002c 	sw	at,44(sp)
80047c60:	24010001 	li	at,1
80047c64:	afa10030 	sw	at,48(sp)
80047c68:	24010000 	li	at,0
            intrinsics::wrapping_add(self, rhs)
80047c6c:	00020823 	negu	at,v0
80047c70:	afa1001c 	sw	at,28(sp)
80047c74:	08011f25 	j	80047c94 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h3260c0ca39427d61E+0x7c>
80047c78:	00000000 	nop
                    self.$conv_fn()
80047c7c:	8fa40014 	lw	a0,20(sp)
80047c80:	0c011b9b 	jal	80046e6c <_ZN49_$LT$u8$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h37e6986c1a52507dE>
80047c84:	00000000 	nop
80047c88:	afa2001c 	sw	v0,28(sp)
80047c8c:	08011f25 	j	80047c94 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h3260c0ca39427d61E+0x7c>
80047c90:	00000000 	nop
                };
                $name(n, is_nonnegative, f)
80047c94:	8fa60010 	lw	a2,16(sp)
80047c98:	8fa10018 	lw	at,24(sp)
80047c9c:	8fa4001c 	lw	a0,28(sp)
80047ca0:	30250001 	andi	a1,at,0x1
80047ca4:	0c011d67 	jal	8004759c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E>
80047ca8:	00000000 	nop
            }
80047cac:	8fbf0034 	lw	ra,52(sp)
80047cb0:	27bd0038 	addiu	sp,sp,56
80047cb4:	03e00008 	jr	ra
80047cb8:	00000000 	nop

80047cbc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hb86930f88adb910cE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80047cbc:	27bdffc8 	addiu	sp,sp,-56
80047cc0:	afbf0034 	sw	ra,52(sp)
80047cc4:	afa50010 	sw	a1,16(sp)
80047cc8:	afa40014 	sw	a0,20(sp)
80047ccc:	afa40020 	sw	a0,32(sp)
80047cd0:	afa50024 	sw	a1,36(sp)
80047cd4:	24010001 	li	at,1
80047cd8:	afa10018 	sw	at,24(sp)
                let is_nonnegative = *self >= 0;
80047cdc:	a3a1002b 	sb	at,43(sp)
                let n = if is_nonnegative {
80047ce0:	1420000f 	bnez	at,80047d20 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hb86930f88adb910cE+0x64>
80047ce4:	00000000 	nop
80047ce8:	08011f3c 	j	80047cf0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hb86930f88adb910cE+0x34>
80047cec:	00000000 	nop
                    (!self.$conv_fn()).wrapping_add(1)
80047cf0:	8fa40014 	lw	a0,20(sp)
80047cf4:	0c011bb0 	jal	80046ec0 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h93506426df48ccd6E>
80047cf8:	00000000 	nop
80047cfc:	00400827 	nor	at,v0,zero
80047d00:	afa1002c 	sw	at,44(sp)
80047d04:	24010001 	li	at,1
80047d08:	afa10030 	sw	at,48(sp)
80047d0c:	24010000 	li	at,0
80047d10:	00020823 	negu	at,v0
80047d14:	afa1001c 	sw	at,28(sp)
80047d18:	08011f4e 	j	80047d38 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hb86930f88adb910cE+0x7c>
80047d1c:	00000000 	nop
                    self.$conv_fn()
80047d20:	8fa40014 	lw	a0,20(sp)
80047d24:	0c011bb0 	jal	80046ec0 <_ZN50_$LT$u32$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h93506426df48ccd6E>
80047d28:	00000000 	nop
80047d2c:	afa2001c 	sw	v0,28(sp)
80047d30:	08011f4e 	j	80047d38 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hb86930f88adb910cE+0x7c>
80047d34:	00000000 	nop
                $name(n, is_nonnegative, f)
80047d38:	8fa60010 	lw	a2,16(sp)
80047d3c:	8fa10018 	lw	at,24(sp)
80047d40:	8fa4001c 	lw	a0,28(sp)
80047d44:	30250001 	andi	a1,at,0x1
80047d48:	0c011d67 	jal	8004759c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E>
80047d4c:	00000000 	nop
            }
80047d50:	8fbf0034 	lw	ra,52(sp)
80047d54:	27bd0038 	addiu	sp,sp,56
80047d58:	03e00008 	jr	ra
80047d5c:	00000000 	nop

80047d60 <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h5a8a6dbd9db1e804E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80047d60:	27bdffc8 	addiu	sp,sp,-56
80047d64:	afbf0034 	sw	ra,52(sp)
80047d68:	afa50010 	sw	a1,16(sp)
80047d6c:	afa40014 	sw	a0,20(sp)
80047d70:	afa40020 	sw	a0,32(sp)
80047d74:	afa50024 	sw	a1,36(sp)
80047d78:	24010001 	li	at,1
80047d7c:	afa10018 	sw	at,24(sp)
                let is_nonnegative = *self >= 0;
80047d80:	a3a1002b 	sb	at,43(sp)
                let n = if is_nonnegative {
80047d84:	1420000f 	bnez	at,80047dc4 <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h5a8a6dbd9db1e804E+0x64>
80047d88:	00000000 	nop
80047d8c:	08011f65 	j	80047d94 <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h5a8a6dbd9db1e804E+0x34>
80047d90:	00000000 	nop
                    (!self.$conv_fn()).wrapping_add(1)
80047d94:	8fa40014 	lw	a0,20(sp)
80047d98:	0c011bc5 	jal	80046f14 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h3480a5b3e6b033f7E>
80047d9c:	00000000 	nop
80047da0:	00400827 	nor	at,v0,zero
80047da4:	afa1002c 	sw	at,44(sp)
80047da8:	24010001 	li	at,1
80047dac:	afa10030 	sw	at,48(sp)
80047db0:	24010000 	li	at,0
80047db4:	00020823 	negu	at,v0
80047db8:	afa1001c 	sw	at,28(sp)
80047dbc:	08011f77 	j	80047ddc <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h5a8a6dbd9db1e804E+0x7c>
80047dc0:	00000000 	nop
                    self.$conv_fn()
80047dc4:	8fa40014 	lw	a0,20(sp)
80047dc8:	0c011bc5 	jal	80046f14 <_ZN52_$LT$usize$u20$as$u20$core..fmt..num..DisplayInt$GT$6to_u3217h3480a5b3e6b033f7E>
80047dcc:	00000000 	nop
80047dd0:	afa2001c 	sw	v0,28(sp)
80047dd4:	08011f77 	j	80047ddc <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h5a8a6dbd9db1e804E+0x7c>
80047dd8:	00000000 	nop
                $name(n, is_nonnegative, f)
80047ddc:	8fa60010 	lw	a2,16(sp)
80047de0:	8fa10018 	lw	at,24(sp)
80047de4:	8fa4001c 	lw	a0,28(sp)
80047de8:	30250001 	andi	a1,at,0x1
80047dec:	0c011d67 	jal	8004759c <_ZN4core3fmt3num3imp7fmt_u3217he23a05fecf68f239E>
80047df0:	00000000 	nop
            }
80047df4:	8fbf0034 	lw	ra,52(sp)
80047df8:	27bd0038 	addiu	sp,sp,56
80047dfc:	03e00008 	jr	ra
80047e00:	00000000 	nop

80047e04 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5af29f73f3b1363cE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
80047e04:	27bdffe0 	addiu	sp,sp,-32
80047e08:	afbf001c 	sw	ra,28(sp)
80047e0c:	afa40014 	sw	a0,20(sp)
80047e10:	afa50018 	sw	a1,24(sp)
80047e14:	8c840000 	lw	a0,0(a0)
80047e18:	0c011d37 	jal	800474dc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h564cac2e1f679837E>
80047e1c:	00000000 	nop
80047e20:	8fbf001c 	lw	ra,28(sp)
80047e24:	27bd0020 	addiu	sp,sp,32
80047e28:	03e00008 	jr	ra
80047e2c:	00000000 	nop

80047e30 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9f79e7c41db63aa5E>:
80047e30:	27bdffe0 	addiu	sp,sp,-32
80047e34:	afbf001c 	sw	ra,28(sp)
80047e38:	00800825 	move	at,a0
80047e3c:	afa10014 	sw	at,20(sp)
80047e40:	afa50018 	sw	a1,24(sp)
80047e44:	8c240000 	lw	a0,0(at)
80047e48:	8c210004 	lw	at,4(at)
80047e4c:	8c39000c 	lw	t9,12(at)
80047e50:	0320f809 	jalr	t9
80047e54:	00000000 	nop
80047e58:	8fbf001c 	lw	ra,28(sp)
80047e5c:	27bd0020 	addiu	sp,sp,32
80047e60:	03e00008 	jr	ra
80047e64:	00000000 	nop

80047e68 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17ha51c6bd69265b845E>:
80047e68:	27bdffe0 	addiu	sp,sp,-32
80047e6c:	afbf001c 	sw	ra,28(sp)
80047e70:	00a03025 	move	a2,a1
80047e74:	00800825 	move	at,a0
80047e78:	afa10014 	sw	at,20(sp)
80047e7c:	afa60018 	sw	a2,24(sp)
80047e80:	8c240000 	lw	a0,0(at)
80047e84:	8c250004 	lw	a1,4(at)
80047e88:	0c0102fc 	jal	80040bf0 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h9fa5bfb18ba922eeE>
80047e8c:	00000000 	nop
80047e90:	8fbf001c 	lw	ra,28(sp)
80047e94:	27bd0020 	addiu	sp,sp,32
80047e98:	03e00008 	jr	ra
80047e9c:	00000000 	nop

80047ea0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1ff0c4beaf99429fE>:
            const fn precondition_check($($name:$ty),*) {
80047ea0:	27bdffe8 	addiu	sp,sp,-24
80047ea4:	afa40010 	sw	a0,16(sp)
80047ea8:	afa50014 	sw	a1,20(sp)
            (this: usize = self, len: usize = slice.len()) => this < len
80047eac:	0085082b 	sltu	at,a0,a1
80047eb0:	14200008 	bnez	at,80047ed4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1ff0c4beaf99429fE+0x34>
80047eb4:	00000000 	nop
80047eb8:	08011fb0 	j	80047ec0 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1ff0c4beaf99429fE+0x20>
80047ebc:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80047ec0:	3c018108 	lui	at,0x8108
80047ec4:	2424d3d8 	addiu	a0,at,-11304
80047ec8:	24050061 	li	a1,97
80047ecc:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80047ed0:	00000000 	nop
80047ed4:	27bd0018 	addiu	sp,sp,24
            }
80047ed8:	03e00008 	jr	ra
80047edc:	00000000 	nop

80047ee0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17ha89e1374a944983cE>:
            const fn precondition_check($($name:$ty),*) {
80047ee0:	27bdffd8 	addiu	sp,sp,-40
80047ee4:	afa60014 	sw	a2,20(sp)
80047ee8:	afa50018 	sw	a1,24(sp)
80047eec:	afa4001c 	sw	a0,28(sp)
80047ef0:	afa50020 	sw	a1,32(sp)
80047ef4:	afa60024 	sw	a2,36(sp)
            ) => end >= start && end <= len
80047ef8:	00a4082b 	sltu	at,a1,a0
80047efc:	10200008 	beqz	at,80047f20 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17ha89e1374a944983cE+0x40>
80047f00:	00000000 	nop
80047f04:	08011fc3 	j	80047f0c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17ha89e1374a944983cE+0x2c>
80047f08:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80047f0c:	3c018108 	lui	at,0x8108
80047f10:	2424d439 	addiu	a0,at,-11207
80047f14:	24050061 	li	a1,97
80047f18:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80047f1c:	00000000 	nop
80047f20:	8fa10014 	lw	at,20(sp)
80047f24:	8fa20018 	lw	v0,24(sp)
80047f28:	0022082b 	sltu	at,at,v0
80047f2c:	1420fff7 	bnez	at,80047f0c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17ha89e1374a944983cE+0x2c>
80047f30:	00000000 	nop
80047f34:	08011fcf 	j	80047f3c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17ha89e1374a944983cE+0x5c>
80047f38:	00000000 	nop
80047f3c:	27bd0028 	addiu	sp,sp,40
            }
80047f40:	03e00008 	jr	ra
80047f44:	00000000 	nop

80047f48 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h341e88cd759afc93E>:
            const fn precondition_check($($name:$ty),*) {
80047f48:	27bdffd8 	addiu	sp,sp,-40
80047f4c:	afa60014 	sw	a2,20(sp)
80047f50:	afa50018 	sw	a1,24(sp)
80047f54:	afa4001c 	sw	a0,28(sp)
80047f58:	afa50020 	sw	a1,32(sp)
80047f5c:	afa60024 	sw	a2,36(sp)
            ) => end >= start && end <= len
80047f60:	00a4082b 	sltu	at,a1,a0
80047f64:	10200008 	beqz	at,80047f88 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h341e88cd759afc93E+0x40>
80047f68:	00000000 	nop
80047f6c:	08011fdd 	j	80047f74 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h341e88cd759afc93E+0x2c>
80047f70:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80047f74:	3c018108 	lui	at,0x8108
80047f78:	2424d49a 	addiu	a0,at,-11110
80047f7c:	24050065 	li	a1,101
80047f80:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80047f84:	00000000 	nop
80047f88:	8fa10014 	lw	at,20(sp)
80047f8c:	8fa20018 	lw	v0,24(sp)
80047f90:	0022082b 	sltu	at,at,v0
80047f94:	1420fff7 	bnez	at,80047f74 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h341e88cd759afc93E+0x2c>
80047f98:	00000000 	nop
80047f9c:	08011fe9 	j	80047fa4 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h341e88cd759afc93E+0x5c>
80047fa0:	00000000 	nop
80047fa4:	27bd0028 	addiu	sp,sp,40
            }
80047fa8:	03e00008 	jr	ra
80047fac:	00000000 	nop

80047fb0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE>:
            fn next(&mut self) -> Option<$elem> {
80047fb0:	27bdffa0 	addiu	sp,sp,-96
80047fb4:	afbf005c 	sw	ra,92(sp)
80047fb8:	afa40014 	sw	a0,20(sp)
80047fbc:	afa40028 	sw	a0,40(sp)
                    if is_empty!(self) {
80047fc0:	08011ff2 	j	80047fc8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE+0x18>
80047fc4:	00000000 	nop
80047fc8:	8fa40014 	lw	a0,20(sp)
80047fcc:	24810004 	addiu	at,a0,4
80047fd0:	afa10034 	sw	at,52(sp)
80047fd4:	8c810004 	lw	at,4(a0)
80047fd8:	afa10020 	sw	at,32(sp)
80047fdc:	27a50020 	addiu	a1,sp,32
80047fe0:	0c00e537 	jal	800394dc <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h41d7ed9cbfe80c5aE>
80047fe4:	00000000 	nop
80047fe8:	a3a2001f 	sb	v0,31(sp)
80047fec:	08011ffd 	j	80047ff4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE+0x44>
80047ff0:	00000000 	nop
80047ff4:	93a1001f 	lbu	at,31(sp)
80047ff8:	30210001 	andi	at,at,0x1
80047ffc:	1420001c 	bnez	at,80048070 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE+0xc0>
80048000:	00000000 	nop
80048004:	08012003 	j	8004800c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE+0x5c>
80048008:	00000000 	nop
8004800c:	8fa30014 	lw	v1,20(sp)
80048010:	afa3003c 	sw	v1,60(sp)
80048014:	24040001 	li	a0,1
80048018:	afa40040 	sw	a0,64(sp)
                let old = self.ptr;
8004801c:	8c610000 	lw	at,0(v1)
80048020:	afa10044 	sw	at,68(sp)
                    if_zst!(mut self,
80048024:	24620004 	addiu	v0,v1,4
80048028:	afa20058 	sw	v0,88(sp)
8004802c:	afa20048 	sw	v0,72(sp)
                        _end => self.ptr = self.ptr.add(offset),
80048030:	8c620000 	lw	v0,0(v1)
80048034:	afa20050 	sw	v0,80(sp)
80048038:	afa40054 	sw	a0,84(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8004803c:	24420001 	addiu	v0,v0,1
80048040:	afa2004c 	sw	v0,76(sp)
    }
80048044:	8fa2004c 	lw	v0,76(sp)
80048048:	ac620000 	sw	v0,0(v1)
                        Some(next_unchecked!(self))
8004804c:	afa10024 	sw	at,36(sp)
80048050:	27a10024 	addiu	at,sp,36
80048054:	afa1002c 	sw	at,44(sp)
        unsafe { &*self.as_ptr().cast_const() }
80048058:	8fa10024 	lw	at,36(sp)
8004805c:	afa10030 	sw	at,48(sp)
80048060:	afa10038 	sw	at,56(sp)
80048064:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
80048068:	0801201f 	j	8004807c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE+0xcc>
8004806c:	00000000 	nop
                        None
80048070:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
80048074:	0801201f 	j	8004807c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6729e861f357662cE+0xcc>
80048078:	00000000 	nop
            }
8004807c:	8fa20018 	lw	v0,24(sp)
80048080:	8fbf005c 	lw	ra,92(sp)
80048084:	27bd0060 	addiu	sp,sp,96
80048088:	03e00008 	jr	ra
8004808c:	00000000 	nop

80048090 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE>:
            fn next(&mut self) -> Option<$elem> {
80048090:	27bdffa0 	addiu	sp,sp,-96
80048094:	afbf005c 	sw	ra,92(sp)
80048098:	afa40014 	sw	a0,20(sp)
8004809c:	afa40028 	sw	a0,40(sp)
                    if is_empty!(self) {
800480a0:	0801202a 	j	800480a8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE+0x18>
800480a4:	00000000 	nop
800480a8:	8fa40014 	lw	a0,20(sp)
800480ac:	24810004 	addiu	at,a0,4
800480b0:	afa10034 	sw	at,52(sp)
800480b4:	8c810004 	lw	at,4(a0)
800480b8:	afa10020 	sw	at,32(sp)
800480bc:	27a50020 	addiu	a1,sp,32
800480c0:	0c00e54f 	jal	8003953c <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9ec4f98e00ed0785E>
800480c4:	00000000 	nop
800480c8:	a3a2001f 	sb	v0,31(sp)
800480cc:	08012035 	j	800480d4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE+0x44>
800480d0:	00000000 	nop
800480d4:	93a1001f 	lbu	at,31(sp)
800480d8:	30210001 	andi	at,at,0x1
800480dc:	1420001c 	bnez	at,80048150 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE+0xc0>
800480e0:	00000000 	nop
800480e4:	0801203b 	j	800480ec <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE+0x5c>
800480e8:	00000000 	nop
800480ec:	8fa30014 	lw	v1,20(sp)
800480f0:	afa3003c 	sw	v1,60(sp)
800480f4:	24040001 	li	a0,1
800480f8:	afa40040 	sw	a0,64(sp)
                let old = self.ptr;
800480fc:	8c610000 	lw	at,0(v1)
80048100:	afa10044 	sw	at,68(sp)
                    if_zst!(mut self,
80048104:	24620004 	addiu	v0,v1,4
80048108:	afa20058 	sw	v0,88(sp)
8004810c:	afa20048 	sw	v0,72(sp)
                        _end => self.ptr = self.ptr.add(offset),
80048110:	8c620000 	lw	v0,0(v1)
80048114:	afa20050 	sw	v0,80(sp)
80048118:	afa40054 	sw	a0,84(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8004811c:	24420002 	addiu	v0,v0,2
80048120:	afa2004c 	sw	v0,76(sp)
    }
80048124:	8fa2004c 	lw	v0,76(sp)
80048128:	ac620000 	sw	v0,0(v1)
                        Some(next_unchecked!(self))
8004812c:	afa10024 	sw	at,36(sp)
80048130:	27a10024 	addiu	at,sp,36
80048134:	afa1002c 	sw	at,44(sp)
        unsafe { &*self.as_ptr().cast_const() }
80048138:	8fa10024 	lw	at,36(sp)
8004813c:	afa10030 	sw	at,48(sp)
80048140:	afa10038 	sw	at,56(sp)
80048144:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
80048148:	08012057 	j	8004815c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE+0xcc>
8004814c:	00000000 	nop
                        None
80048150:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
80048154:	08012057 	j	8004815c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17haa6a40511e0f8c8bE+0xcc>
80048158:	00000000 	nop
            }
8004815c:	8fa20018 	lw	v0,24(sp)
80048160:	8fbf005c 	lw	ra,92(sp)
80048164:	27bd0060 	addiu	sp,sp,96
80048168:	03e00008 	jr	ra
8004816c:	00000000 	nop

80048170 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E>:
            fn next(&mut self) -> Option<$elem> {
80048170:	27bdffa0 	addiu	sp,sp,-96
80048174:	afbf005c 	sw	ra,92(sp)
80048178:	afa40014 	sw	a0,20(sp)
8004817c:	afa40028 	sw	a0,40(sp)
                    if is_empty!(self) {
80048180:	08012062 	j	80048188 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E+0x18>
80048184:	00000000 	nop
80048188:	8fa40014 	lw	a0,20(sp)
8004818c:	24810004 	addiu	at,a0,4
80048190:	afa10034 	sw	at,52(sp)
80048194:	8c810004 	lw	at,4(a0)
80048198:	afa10020 	sw	at,32(sp)
8004819c:	27a50020 	addiu	a1,sp,32
800481a0:	0c00e543 	jal	8003950c <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h4eca0769a0300955E>
800481a4:	00000000 	nop
800481a8:	a3a2001f 	sb	v0,31(sp)
800481ac:	0801206d 	j	800481b4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E+0x44>
800481b0:	00000000 	nop
800481b4:	93a1001f 	lbu	at,31(sp)
800481b8:	30210001 	andi	at,at,0x1
800481bc:	1420001c 	bnez	at,80048230 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E+0xc0>
800481c0:	00000000 	nop
800481c4:	08012073 	j	800481cc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E+0x5c>
800481c8:	00000000 	nop
800481cc:	8fa30014 	lw	v1,20(sp)
800481d0:	afa3003c 	sw	v1,60(sp)
800481d4:	24040001 	li	a0,1
800481d8:	afa40040 	sw	a0,64(sp)
                let old = self.ptr;
800481dc:	8c610000 	lw	at,0(v1)
800481e0:	afa10044 	sw	at,68(sp)
                    if_zst!(mut self,
800481e4:	24620004 	addiu	v0,v1,4
800481e8:	afa20058 	sw	v0,88(sp)
800481ec:	afa20048 	sw	v0,72(sp)
                        _end => self.ptr = self.ptr.add(offset),
800481f0:	8c620000 	lw	v0,0(v1)
800481f4:	afa20050 	sw	v0,80(sp)
800481f8:	afa40054 	sw	a0,84(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
800481fc:	24420020 	addiu	v0,v0,32
80048200:	afa2004c 	sw	v0,76(sp)
    }
80048204:	8fa2004c 	lw	v0,76(sp)
80048208:	ac620000 	sw	v0,0(v1)
                        Some(next_unchecked!(self))
8004820c:	afa10024 	sw	at,36(sp)
80048210:	27a10024 	addiu	at,sp,36
80048214:	afa1002c 	sw	at,44(sp)
        unsafe { &*self.as_ptr().cast_const() }
80048218:	8fa10024 	lw	at,36(sp)
8004821c:	afa10030 	sw	at,48(sp)
80048220:	afa10038 	sw	at,56(sp)
80048224:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
80048228:	0801208f 	j	8004823c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E+0xcc>
8004822c:	00000000 	nop
                        None
80048230:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
80048234:	0801208f 	j	8004823c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb2a6d1983de17147E+0xcc>
80048238:	00000000 	nop
            }
8004823c:	8fa20018 	lw	v0,24(sp)
80048240:	8fbf005c 	lw	ra,92(sp)
80048244:	27bd0060 	addiu	sp,sp,96
80048248:	03e00008 	jr	ra
8004824c:	00000000 	nop

80048250 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E>:
            fn next(&mut self) -> Option<$elem> {
80048250:	27bdffa0 	addiu	sp,sp,-96
80048254:	afbf005c 	sw	ra,92(sp)
80048258:	afa40014 	sw	a0,20(sp)
8004825c:	afa40028 	sw	a0,40(sp)
                    if is_empty!(self) {
80048260:	0801209a 	j	80048268 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E+0x18>
80048264:	00000000 	nop
80048268:	8fa40014 	lw	a0,20(sp)
8004826c:	24810004 	addiu	at,a0,4
80048270:	afa10034 	sw	at,52(sp)
80048274:	8c810004 	lw	at,4(a0)
80048278:	afa10020 	sw	at,32(sp)
8004827c:	27a50020 	addiu	a1,sp,32
80048280:	0c00e567 	jal	8003959c <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc12b98033e3b55e1E>
80048284:	00000000 	nop
80048288:	a3a2001f 	sb	v0,31(sp)
8004828c:	080120a5 	j	80048294 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E+0x44>
80048290:	00000000 	nop
80048294:	93a1001f 	lbu	at,31(sp)
80048298:	30210001 	andi	at,at,0x1
8004829c:	1420001c 	bnez	at,80048310 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E+0xc0>
800482a0:	00000000 	nop
800482a4:	080120ab 	j	800482ac <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E+0x5c>
800482a8:	00000000 	nop
800482ac:	8fa30014 	lw	v1,20(sp)
800482b0:	afa3003c 	sw	v1,60(sp)
800482b4:	24040001 	li	a0,1
800482b8:	afa40040 	sw	a0,64(sp)
                let old = self.ptr;
800482bc:	8c610000 	lw	at,0(v1)
800482c0:	afa10044 	sw	at,68(sp)
                    if_zst!(mut self,
800482c4:	24620004 	addiu	v0,v1,4
800482c8:	afa20058 	sw	v0,88(sp)
800482cc:	afa20048 	sw	v0,72(sp)
                        _end => self.ptr = self.ptr.add(offset),
800482d0:	8c620000 	lw	v0,0(v1)
800482d4:	afa20050 	sw	v0,80(sp)
800482d8:	afa40054 	sw	a0,84(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
800482dc:	24420010 	addiu	v0,v0,16
800482e0:	afa2004c 	sw	v0,76(sp)
    }
800482e4:	8fa2004c 	lw	v0,76(sp)
800482e8:	ac620000 	sw	v0,0(v1)
                        Some(next_unchecked!(self))
800482ec:	afa10024 	sw	at,36(sp)
800482f0:	27a10024 	addiu	at,sp,36
800482f4:	afa1002c 	sw	at,44(sp)
        unsafe { &*self.as_ptr().cast_const() }
800482f8:	8fa10024 	lw	at,36(sp)
800482fc:	afa10030 	sw	at,48(sp)
80048300:	afa10038 	sw	at,56(sp)
80048304:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
80048308:	080120c7 	j	8004831c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E+0xcc>
8004830c:	00000000 	nop
                        None
80048310:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
80048314:	080120c7 	j	8004831c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd85e576b3ed1016E+0xcc>
80048318:	00000000 	nop
            }
8004831c:	8fa20018 	lw	v0,24(sp)
80048320:	8fbf005c 	lw	ra,92(sp)
80048324:	27bd0060 	addiu	sp,sp,96
80048328:	03e00008 	jr	ra
8004832c:	00000000 	nop

80048330 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E>:
            fn next(&mut self) -> Option<$elem> {
80048330:	27bdffa0 	addiu	sp,sp,-96
80048334:	afbf005c 	sw	ra,92(sp)
80048338:	afa40014 	sw	a0,20(sp)
8004833c:	afa40028 	sw	a0,40(sp)
                    if is_empty!(self) {
80048340:	080120d2 	j	80048348 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E+0x18>
80048344:	00000000 	nop
80048348:	8fa40014 	lw	a0,20(sp)
8004834c:	24810004 	addiu	at,a0,4
80048350:	afa10034 	sw	at,52(sp)
80048354:	8c810004 	lw	at,4(a0)
80048358:	afa10020 	sw	at,32(sp)
8004835c:	27a50020 	addiu	a1,sp,32
80048360:	0c00e573 	jal	800395cc <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hdbd8a472611df449E>
80048364:	00000000 	nop
80048368:	a3a2001f 	sb	v0,31(sp)
8004836c:	080120dd 	j	80048374 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E+0x44>
80048370:	00000000 	nop
80048374:	93a1001f 	lbu	at,31(sp)
80048378:	30210001 	andi	at,at,0x1
8004837c:	1420001c 	bnez	at,800483f0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E+0xc0>
80048380:	00000000 	nop
80048384:	080120e3 	j	8004838c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E+0x5c>
80048388:	00000000 	nop
8004838c:	8fa30014 	lw	v1,20(sp)
80048390:	afa3003c 	sw	v1,60(sp)
80048394:	24040001 	li	a0,1
80048398:	afa40040 	sw	a0,64(sp)
                let old = self.ptr;
8004839c:	8c610000 	lw	at,0(v1)
800483a0:	afa10044 	sw	at,68(sp)
                    if_zst!(mut self,
800483a4:	24620004 	addiu	v0,v1,4
800483a8:	afa20058 	sw	v0,88(sp)
800483ac:	afa20048 	sw	v0,72(sp)
                        _end => self.ptr = self.ptr.add(offset),
800483b0:	8c620000 	lw	v0,0(v1)
800483b4:	afa20050 	sw	v0,80(sp)
800483b8:	afa40054 	sw	a0,84(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
800483bc:	24420004 	addiu	v0,v0,4
800483c0:	afa2004c 	sw	v0,76(sp)
    }
800483c4:	8fa2004c 	lw	v0,76(sp)
800483c8:	ac620000 	sw	v0,0(v1)
                        Some(next_unchecked!(self))
800483cc:	afa10024 	sw	at,36(sp)
800483d0:	27a10024 	addiu	at,sp,36
800483d4:	afa1002c 	sw	at,44(sp)
        unsafe { &*self.as_ptr().cast_const() }
800483d8:	8fa10024 	lw	at,36(sp)
800483dc:	afa10030 	sw	at,48(sp)
800483e0:	afa10038 	sw	at,56(sp)
800483e4:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
800483e8:	080120ff 	j	800483fc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E+0xcc>
800483ec:	00000000 	nop
                        None
800483f0:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
800483f4:	080120ff 	j	800483fc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd025536d58d33890E+0xcc>
800483f8:	00000000 	nop
            }
800483fc:	8fa20018 	lw	v0,24(sp)
80048400:	8fbf005c 	lw	ra,92(sp)
80048404:	27bd0060 	addiu	sp,sp,96
80048408:	03e00008 	jr	ra
8004840c:	00000000 	nop

80048410 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E>:
            fn next(&mut self) -> Option<$elem> {
80048410:	27bdffa0 	addiu	sp,sp,-96
80048414:	afbf005c 	sw	ra,92(sp)
80048418:	afa40014 	sw	a0,20(sp)
8004841c:	afa40028 	sw	a0,40(sp)
                    if is_empty!(self) {
80048420:	0801210a 	j	80048428 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E+0x18>
80048424:	00000000 	nop
80048428:	8fa40014 	lw	a0,20(sp)
8004842c:	24810004 	addiu	at,a0,4
80048430:	afa10034 	sw	at,52(sp)
80048434:	8c810004 	lw	at,4(a0)
80048438:	afa10020 	sw	at,32(sp)
8004843c:	27a50020 	addiu	a1,sp,32
80048440:	0c00e55b 	jal	8003956c <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbe3fcf7a36f19a66E>
80048444:	00000000 	nop
80048448:	a3a2001f 	sb	v0,31(sp)
8004844c:	08012115 	j	80048454 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E+0x44>
80048450:	00000000 	nop
80048454:	93a1001f 	lbu	at,31(sp)
80048458:	30210001 	andi	at,at,0x1
8004845c:	1420001c 	bnez	at,800484d0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E+0xc0>
80048460:	00000000 	nop
80048464:	0801211b 	j	8004846c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E+0x5c>
80048468:	00000000 	nop
8004846c:	8fa30014 	lw	v1,20(sp)
80048470:	afa3003c 	sw	v1,60(sp)
80048474:	24040001 	li	a0,1
80048478:	afa40040 	sw	a0,64(sp)
                let old = self.ptr;
8004847c:	8c610000 	lw	at,0(v1)
80048480:	afa10044 	sw	at,68(sp)
                    if_zst!(mut self,
80048484:	24620004 	addiu	v0,v1,4
80048488:	afa20058 	sw	v0,88(sp)
8004848c:	afa20048 	sw	v0,72(sp)
                        _end => self.ptr = self.ptr.add(offset),
80048490:	8c620000 	lw	v0,0(v1)
80048494:	afa20050 	sw	v0,80(sp)
80048498:	afa40054 	sw	a0,84(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8004849c:	24420008 	addiu	v0,v0,8
800484a0:	afa2004c 	sw	v0,76(sp)
    }
800484a4:	8fa2004c 	lw	v0,76(sp)
800484a8:	ac620000 	sw	v0,0(v1)
                        Some(next_unchecked!(self))
800484ac:	afa10024 	sw	at,36(sp)
800484b0:	27a10024 	addiu	at,sp,36
800484b4:	afa1002c 	sw	at,44(sp)
        unsafe { &*self.as_ptr().cast_const() }
800484b8:	8fa10024 	lw	at,36(sp)
800484bc:	afa10030 	sw	at,48(sp)
800484c0:	afa10038 	sw	at,56(sp)
800484c4:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
800484c8:	08012137 	j	800484dc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E+0xcc>
800484cc:	00000000 	nop
                        None
800484d0:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
800484d4:	08012137 	j	800484dc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf07481e163bf4f38E+0xcc>
800484d8:	00000000 	nop
            }
800484dc:	8fa20018 	lw	v0,24(sp)
800484e0:	8fbf005c 	lw	ra,92(sp)
800484e4:	27bd0060 	addiu	sp,sp,96
800484e8:	03e00008 	jr	ra
800484ec:	00000000 	nop

800484f0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE>:
            fn fold<B, F>(self, init: B, mut f: F) -> B
800484f0:	27bdff90 	addiu	sp,sp,-112
800484f4:	afbf006c 	sw	ra,108(sp)
800484f8:	afa60014 	sw	a2,20(sp)
800484fc:	afa40018 	sw	a0,24(sp)
80048500:	afa5001c 	sw	a1,28(sp)
80048504:	afa60044 	sw	a2,68(sp)
                if is_empty!(self) {
80048508:	08012144 	j	80048510 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x20>
8004850c:	00000000 	nop
80048510:	27a40018 	addiu	a0,sp,24
80048514:	24810004 	addiu	at,a0,4
80048518:	afa10060 	sw	at,96(sp)
8004851c:	8fa1001c 	lw	at,28(sp)
80048520:	afa1002c 	sw	at,44(sp)
80048524:	27a5002c 	addiu	a1,sp,44
80048528:	0c00e537 	jal	800394dc <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h41d7ed9cbfe80c5aE>
8004852c:	00000000 	nop
80048530:	a3a2002b 	sb	v0,43(sp)
80048534:	0801214f 	j	8004853c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x4c>
80048538:	00000000 	nop
8004853c:	93a1002b 	lbu	at,43(sp)
80048540:	30210001 	andi	at,at,0x1
80048544:	14200008 	bnez	at,80048568 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x78>
80048548:	00000000 	nop
8004854c:	08012155 	j	80048554 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x64>
80048550:	00000000 	nop
                let mut acc = init;
80048554:	8fa10014 	lw	at,20(sp)
80048558:	afa10030 	sw	at,48(sp)
                let mut i = 0;
8004855c:	afa00034 	sw	zero,52(sp)
                let len = len!(self);
80048560:	0801215e 	j	80048578 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x88>
80048564:	00000000 	nop
                    return init;
80048568:	8fa10014 	lw	at,20(sp)
8004856c:	afa10024 	sw	at,36(sp)
            }
80048570:	0801218a 	j	80048628 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x138>
80048574:	00000000 	nop
80048578:	27a10018 	addiu	at,sp,24
                let len = len!(self);
8004857c:	24210004 	addiu	at,at,4
80048580:	afa1005c 	sw	at,92(sp)
80048584:	8fa4001c 	lw	a0,28(sp)
80048588:	afa40048 	sw	a0,72(sp)
8004858c:	8fa50018 	lw	a1,24(sp)
80048590:	0c00e521 	jal	80039484 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$7sub_ptr17h9b9ab3e8577ce557E>
80048594:	00000000 	nop
80048598:	afa20038 	sw	v0,56(sp)
8004859c:	08012169 	j	800485a4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0xb4>
800485a0:	00000000 	nop
                    acc = f(acc, unsafe { & $( $mut_ )? *self.ptr.add(i).as_ptr() });
800485a4:	8fa20030 	lw	v0,48(sp)
800485a8:	8fa10018 	lw	at,24(sp)
800485ac:	8fa30034 	lw	v1,52(sp)
800485b0:	afa10054 	sw	at,84(sp)
800485b4:	afa30058 	sw	v1,88(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
800485b8:	00230821 	addu	at,at,v1
800485bc:	afa10050 	sw	at,80(sp)
    }
800485c0:	8fa10050 	lw	at,80(sp)
800485c4:	afa1004c 	sw	at,76(sp)
800485c8:	afa2003c 	sw	v0,60(sp)
800485cc:	afa10040 	sw	at,64(sp)
800485d0:	8fa5003c 	lw	a1,60(sp)
800485d4:	8fa60040 	lw	a2,64(sp)
800485d8:	27a40023 	addiu	a0,sp,35
800485dc:	0c00ee68 	jal	8003b9a0 <_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h0e22386d052a3b35E>
800485e0:	00000000 	nop
800485e4:	afa20030 	sw	v0,48(sp)
                    i = unsafe { i.unchecked_add(1) };
800485e8:	8fa10034 	lw	at,52(sp)
800485ec:	afa10064 	sw	at,100(sp)
800485f0:	24020001 	li	v0,1
800485f4:	afa20068 	sw	v0,104(sp)
            unsafe { intrinsics::unchecked_add(self, rhs) }
800485f8:	24210001 	addiu	at,at,1
800485fc:	afa10034 	sw	at,52(sp)
                    if i == len {
80048600:	8fa10034 	lw	at,52(sp)
80048604:	8fa20038 	lw	v0,56(sp)
80048608:	1422ffe6 	bne	at,v0,800485a4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0xb4>
8004860c:	00000000 	nop
80048610:	08012186 	j	80048618 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x128>
80048614:	00000000 	nop
                acc
80048618:	8fa10030 	lw	at,48(sp)
8004861c:	afa10024 	sw	at,36(sp)
            }
80048620:	0801218a 	j	80048628 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h904f8a00f447cb1eE+0x138>
80048624:	00000000 	nop
80048628:	8fa20024 	lw	v0,36(sp)
8004862c:	8fbf006c 	lw	ra,108(sp)
80048630:	27bd0070 	addiu	sp,sp,112
80048634:	03e00008 	jr	ra
80048638:	00000000 	nop

8004863c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E>:

            // We override the default implementation, which uses `try_fold`,
            // because this simple implementation generates less LLVM IR and is
            // faster to compile. Also, the `assume` avoids a bounds check.
            #[inline]
            fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
8004863c:	27bdffa8 	addiu	sp,sp,-88
80048640:	afbf0054 	sw	ra,84(sp)
80048644:	afa40020 	sw	a0,32(sp)
80048648:	afa40040 	sw	a0,64(sp)
                P: FnMut(Self::Item) -> bool,
                Self: Sized + ExactSizeIterator + DoubleEndedIterator
            {
                let n = len!(self);
8004864c:	08012195 	j	80048654 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x18>
80048650:	00000000 	nop
80048654:	8fa10020 	lw	at,32(sp)
80048658:	24220004 	addiu	v0,at,4
8004865c:	afa20050 	sw	v0,80(sp)
80048660:	8c240004 	lw	a0,4(at)
80048664:	afa40044 	sw	a0,68(sp)
80048668:	8c250000 	lw	a1,0(at)
8004866c:	0c00e521 	jal	80039484 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$7sub_ptr17h9b9ab3e8577ce557E>
80048670:	00000000 	nop
80048674:	afa20030 	sw	v0,48(sp)
80048678:	080121a0 	j	80048680 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x44>
8004867c:	00000000 	nop
                let mut i = n;
80048680:	8fa10030 	lw	at,48(sp)
80048684:	afa10034 	sw	at,52(sp)
                while let Some(x) = self.next_back() {
80048688:	080121a4 	j	80048690 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x54>
8004868c:	00000000 	nop
80048690:	8fa40020 	lw	a0,32(sp)
80048694:	0c0121e7 	jal	8004879c <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E>
80048698:	00000000 	nop
8004869c:	afa20038 	sw	v0,56(sp)
800486a0:	8fa10038 	lw	at,56(sp)
800486a4:	1020000d 	beqz	at,800486dc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0xa0>
800486a8:	00000000 	nop
800486ac:	080121ad 	j	800486b4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x78>
800486b0:	00000000 	nop
800486b4:	8fa10038 	lw	at,56(sp)
800486b8:	afa10018 	sw	at,24(sp)
800486bc:	afa10048 	sw	at,72(sp)
                    i -= 1;
800486c0:	8fa10034 	lw	at,52(sp)
800486c4:	2422ffff 	addiu	v0,at,-1
800486c8:	afa2001c 	sw	v0,28(sp)
800486cc:	10200012 	beqz	at,80048718 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0xdc>
800486d0:	00000000 	nop
800486d4:	080121ba 	j	800486e8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0xac>
800486d8:	00000000 	nop
                        // and is only decreasing.
                        unsafe { assert_unchecked(i < n) };
                        return Some(i);
                    }
                }
                None
800486dc:	afa00028 	sw	zero,40(sp)
            }
800486e0:	080121e1 	j	80048784 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x148>
800486e4:	00000000 	nop
                    i -= 1;
800486e8:	8fa10018 	lw	at,24(sp)
800486ec:	8fa2001c 	lw	v0,28(sp)
800486f0:	afa20034 	sw	v0,52(sp)
                    if predicate(x) {
800486f4:	afa1003c 	sw	at,60(sp)
800486f8:	8fa5003c 	lw	a1,60(sp)
800486fc:	27a40027 	addiu	a0,sp,39
80048700:	0c0113b9 	jal	80044ee4 <_ZN4core3str21_$LT$impl$u20$str$GT$19floor_char_boundary28_$u7b$$u7b$closure$u7d$$u7d$17h492e5ca2d572b958E>
80048704:	00000000 	nop
80048708:	14400007 	bnez	v0,80048728 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0xec>
8004870c:	00000000 	nop
80048710:	080121a4 	j	80048690 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x54>
80048714:	00000000 	nop
                    i -= 1;
80048718:	3c018108 	lui	at,0x8108
8004871c:	2424d500 	addiu	a0,at,-11008
80048720:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80048724:	00000000 	nop
                        unsafe { assert_unchecked(i < n) };
80048728:	8fa10034 	lw	at,52(sp)
8004872c:	8fa20030 	lw	v0,48(sp)
80048730:	0022082b 	sltu	at,at,v0
80048734:	afa10014 	sw	at,20(sp)
80048738:	a3a1004f 	sb	at,79(sp)
        ub_checks::assert_unsafe_precondition!(
8004873c:	0c00e86b 	jal	8003a1ac <_ZN4core9ub_checks17check_language_ub17h9bba00001bd78e2bE>
80048740:	00000000 	nop
80048744:	10400009 	beqz	v0,8004876c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x130>
80048748:	00000000 	nop
8004874c:	080121d5 	j	80048754 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x118>
80048750:	00000000 	nop
80048754:	8fa10014 	lw	at,20(sp)
80048758:	30240001 	andi	a0,at,0x1
8004875c:	0c01192e 	jal	800464b8 <_ZN4core4hint16assert_unchecked18precondition_check17h0b93bb2a861dbe92E>
80048760:	00000000 	nop
80048764:	080121db 	j	8004876c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x130>
80048768:	00000000 	nop
                        return Some(i);
8004876c:	8fa10034 	lw	at,52(sp)
80048770:	afa1002c 	sw	at,44(sp)
80048774:	24010001 	li	at,1
80048778:	afa10028 	sw	at,40(sp)
            }
8004877c:	080121e1 	j	80048784 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9rposition17h3324f533e84e6971E+0x148>
80048780:	00000000 	nop
80048784:	8fa20028 	lw	v0,40(sp)
80048788:	8fa3002c 	lw	v1,44(sp)
8004878c:	8fbf0054 	lw	ra,84(sp)
80048790:	27bd0058 	addiu	sp,sp,88
80048794:	03e00008 	jr	ra
80048798:	00000000 	nop

8004879c <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E>:
        }

        #[stable(feature = "rust1", since = "1.0.0")]
        impl<'a, T> DoubleEndedIterator for $name<'a, T> {
            #[inline]
            fn next_back(&mut self) -> Option<$elem> {
8004879c:	27bdff98 	addiu	sp,sp,-104
800487a0:	afbf0064 	sw	ra,100(sp)
800487a4:	afa40010 	sw	a0,16(sp)
800487a8:	afa40024 	sw	a0,36(sp)
                // could be implemented with slices, but this avoids bounds checks

                // SAFETY: The call to `next_back_unchecked!`
                // is safe since we check if the iterator is empty first.
                unsafe {
                    if is_empty!(self) {
800487ac:	080121ed 	j	800487b4 <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E+0x18>
800487b0:	00000000 	nop
800487b4:	8fa40010 	lw	a0,16(sp)
800487b8:	24810004 	addiu	at,a0,4
800487bc:	afa10030 	sw	at,48(sp)
800487c0:	8c810004 	lw	at,4(a0)
800487c4:	afa1001c 	sw	at,28(sp)
800487c8:	27a5001c 	addiu	a1,sp,28
800487cc:	0c00e537 	jal	800394dc <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h41d7ed9cbfe80c5aE>
800487d0:	00000000 	nop
800487d4:	a3a2001b 	sb	v0,27(sp)
800487d8:	080121f8 	j	800487e0 <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E+0x44>
800487dc:	00000000 	nop
800487e0:	93a1001b 	lbu	at,27(sp)
800487e4:	30210001 	andi	at,at,0x1
800487e8:	14200022 	bnez	at,80048874 <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E+0xd8>
800487ec:	00000000 	nop
800487f0:	080121fe 	j	800487f8 <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E+0x5c>
800487f4:	00000000 	nop
800487f8:	8fa10010 	lw	at,16(sp)
800487fc:	afa1003c 	sw	at,60(sp)
80048800:	24030001 	li	v1,1
80048804:	afa30040 	sw	v1,64(sp)
                if_zst!(mut self,
80048808:	24220004 	addiu	v0,at,4
8004880c:	afa20060 	sw	v0,96(sp)
80048810:	afa20044 	sw	v0,68(sp)
                        *end = end.sub(offset);
80048814:	8c220004 	lw	v0,4(at)
80048818:	afa2004c 	sw	v0,76(sp)
8004881c:	afa30050 	sw	v1,80(sp)
80048820:	afa20058 	sw	v0,88(sp)
80048824:	2403ffff 	li	v1,-1
80048828:	afa3005c 	sw	v1,92(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8004882c:	2442ffff 	addiu	v0,v0,-1
80048830:	afa20054 	sw	v0,84(sp)
    }
80048834:	8fa20054 	lw	v0,84(sp)
            unsafe { self.offset(intrinsics::unchecked_sub(0, count as isize)) }
80048838:	afa20048 	sw	v0,72(sp)
    }
8004883c:	8fa20048 	lw	v0,72(sp)
80048840:	ac220004 	sw	v0,4(at)
                        *end
80048844:	8c210004 	lw	at,4(at)
80048848:	afa10038 	sw	at,56(sp)
            }
8004884c:	8fa10038 	lw	at,56(sp)
                        None
                    } else {
                        Some(next_back_unchecked!(self))
80048850:	afa10020 	sw	at,32(sp)
80048854:	27a10020 	addiu	at,sp,32
80048858:	afa10028 	sw	at,40(sp)
        unsafe { &*self.as_ptr().cast_const() }
8004885c:	8fa10020 	lw	at,32(sp)
80048860:	afa1002c 	sw	at,44(sp)
80048864:	afa10034 	sw	at,52(sp)
80048868:	afa10014 	sw	at,20(sp)
                    if is_empty!(self) {
8004886c:	08012220 	j	80048880 <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E+0xe4>
80048870:	00000000 	nop
                        None
80048874:	afa00014 	sw	zero,20(sp)
                    if is_empty!(self) {
80048878:	08012220 	j	80048880 <_ZN106_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17h2d9f5e56d0038164E+0xe4>
8004887c:	00000000 	nop
                    }
                }
            }
80048880:	8fa20014 	lw	v0,20(sp)
80048884:	8fbf0064 	lw	ra,100(sp)
80048888:	27bd0068 	addiu	sp,sp,104
8004888c:	03e00008 	jr	ra
80048890:	00000000 	nop

80048894 <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE>:
            fn next_back(&mut self) -> Option<$elem> {
80048894:	27bdff98 	addiu	sp,sp,-104
80048898:	afbf0064 	sw	ra,100(sp)
8004889c:	afa40014 	sw	a0,20(sp)
800488a0:	afa40028 	sw	a0,40(sp)
                    if is_empty!(self) {
800488a4:	0801222b 	j	800488ac <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE+0x18>
800488a8:	00000000 	nop
800488ac:	8fa40014 	lw	a0,20(sp)
800488b0:	24810004 	addiu	at,a0,4
800488b4:	afa10034 	sw	at,52(sp)
800488b8:	8c810004 	lw	at,4(a0)
800488bc:	afa10020 	sw	at,32(sp)
800488c0:	27a50020 	addiu	a1,sp,32
800488c4:	0c00e52b 	jal	800394ac <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h3eb9e52439106dd7E>
800488c8:	00000000 	nop
800488cc:	a3a2001f 	sb	v0,31(sp)
800488d0:	08012236 	j	800488d8 <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE+0x44>
800488d4:	00000000 	nop
800488d8:	93a1001f 	lbu	at,31(sp)
800488dc:	30210001 	andi	at,at,0x1
800488e0:	14200021 	bnez	at,80048968 <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE+0xd4>
800488e4:	00000000 	nop
800488e8:	0801223c 	j	800488f0 <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE+0x5c>
800488ec:	00000000 	nop
800488f0:	8fa10014 	lw	at,20(sp)
800488f4:	afa1003c 	sw	at,60(sp)
800488f8:	24030001 	li	v1,1
800488fc:	afa30040 	sw	v1,64(sp)
                if_zst!(mut self,
80048900:	24220004 	addiu	v0,at,4
80048904:	afa20060 	sw	v0,96(sp)
80048908:	afa20044 	sw	v0,68(sp)
                        *end = end.sub(offset);
8004890c:	8c220004 	lw	v0,4(at)
80048910:	afa2004c 	sw	v0,76(sp)
80048914:	afa30050 	sw	v1,80(sp)
80048918:	afa20058 	sw	v0,88(sp)
8004891c:	2403ffff 	li	v1,-1
80048920:	afa3005c 	sw	v1,92(sp)
        unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
80048924:	2442ffff 	addiu	v0,v0,-1
80048928:	afa20054 	sw	v0,84(sp)
    }
8004892c:	8fa20054 	lw	v0,84(sp)
            unsafe { self.offset(intrinsics::unchecked_sub(0, count as isize)) }
80048930:	afa20048 	sw	v0,72(sp)
    }
80048934:	8fa20048 	lw	v0,72(sp)
80048938:	ac220004 	sw	v0,4(at)
                        *end
8004893c:	8c210004 	lw	at,4(at)
80048940:	afa10038 	sw	at,56(sp)
            }
80048944:	8fa10038 	lw	at,56(sp)
                        Some(next_back_unchecked!(self))
80048948:	afa10024 	sw	at,36(sp)
8004894c:	27a10024 	addiu	at,sp,36
80048950:	afa1002c 	sw	at,44(sp)
        unsafe { &mut *self.as_ptr() }
80048954:	8fa10024 	lw	at,36(sp)
80048958:	afa10030 	sw	at,48(sp)
8004895c:	afa10018 	sw	at,24(sp)
                    if is_empty!(self) {
80048960:	0801225d 	j	80048974 <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE+0xe0>
80048964:	00000000 	nop
                        None
80048968:	afa00018 	sw	zero,24(sp)
                    if is_empty!(self) {
8004896c:	0801225d 	j	80048974 <_ZN109_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..double_ended..DoubleEndedIterator$GT$9next_back17hefe03f3683abd12fE+0xe0>
80048970:	00000000 	nop
            }
80048974:	8fa20018 	lw	v0,24(sp)
80048978:	8fbf0064 	lw	ra,100(sp)
8004897c:	27bd0068 	addiu	sp,sp,104
80048980:	03e00008 	jr	ra
80048984:	00000000 	nop

80048988 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE>:
            const fn precondition_check($($name:$ty),*) {
80048988:	27bdffd0 	addiu	sp,sp,-48
8004898c:	afbf002c 	sw	ra,44(sp)
80048990:	afa70010 	sw	a3,16(sp)
80048994:	afa60014 	sw	a2,20(sp)
80048998:	00a00825 	move	at,a1
8004899c:	8fa50014 	lw	a1,20(sp)
800489a0:	afa10018 	sw	at,24(sp)
800489a4:	afa4001c 	sw	a0,28(sp)
800489a8:	afa10020 	sw	at,32(sp)
800489ac:	afa50024 	sw	a1,36(sp)
800489b0:	afa70028 	sw	a3,40(sp)
            ub_checks::is_aligned_and_not_null(data, align)
800489b4:	0c00e87d 	jal	8003a1f4 <_ZN4core9ub_checks23is_aligned_and_not_null17hb7d6b304120d110bE>
800489b8:	00000000 	nop
800489bc:	14400008 	bnez	v0,800489e0 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE+0x58>
800489c0:	00000000 	nop
800489c4:	08012273 	j	800489cc <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE+0x44>
800489c8:	00000000 	nop
                    ::core::panicking::panic_nounwind(
800489cc:	3c018108 	lui	at,0x8108
800489d0:	2424d510 	addiu	a0,at,-10992
800489d4:	240500a2 	li	a1,162
800489d8:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
800489dc:	00000000 	nop
                && ub_checks::is_valid_allocation_size(size, len)
800489e0:	8fa50010 	lw	a1,16(sp)
800489e4:	8fa40018 	lw	a0,24(sp)
800489e8:	0c00e89a 	jal	8003a268 <_ZN4core9ub_checks24is_valid_allocation_size17hfc53b34e2dd1e758E>
800489ec:	00000000 	nop
800489f0:	1040fff6 	beqz	v0,800489cc <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE+0x44>
800489f4:	00000000 	nop
800489f8:	08012280 	j	80048a00 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hdd979cef43283a5cE+0x78>
800489fc:	00000000 	nop
            }
80048a00:	8fbf002c 	lw	ra,44(sp)
80048a04:	27bd0030 	addiu	sp,sp,48
80048a08:	03e00008 	jr	ra
80048a0c:	00000000 	nop

80048a10 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE>:
            const fn precondition_check($($name:$ty),*) {
80048a10:	27bdffe0 	addiu	sp,sp,-32
80048a14:	afa50010 	sw	a1,16(sp)
80048a18:	afa40014 	sw	a0,20(sp)
80048a1c:	afa40018 	sw	a0,24(sp)
80048a20:	afa5001c 	sw	a1,28(sp)
            (n: usize = N, len: usize = self.len()) => n != 0 && len % n == 0,
80048a24:	14800008 	bnez	a0,80048a48 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE+0x38>
80048a28:	00000000 	nop
80048a2c:	0801228d 	j	80048a34 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE+0x24>
80048a30:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80048a34:	3c018108 	lui	at,0x8108
80048a38:	2424d5c4 	addiu	a0,at,-10812
80048a3c:	24050084 	li	a1,132
80048a40:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80048a44:	00000000 	nop
80048a48:	8fa10014 	lw	at,20(sp)
80048a4c:	1020000c 	beqz	at,80048a80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE+0x70>
80048a50:	00000000 	nop
80048a54:	08012297 	j	80048a5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE+0x4c>
80048a58:	00000000 	nop
80048a5c:	8fa10014 	lw	at,20(sp)
80048a60:	8fa20010 	lw	v0,16(sp)
80048a64:	0041001b 	divu	zero,v0,at
80048a68:	002001f4 	teq	at,zero,0x7
80048a6c:	00000810 	mfhi	at
80048a70:	10200007 	beqz	at,80048a90 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE+0x80>
80048a74:	00000000 	nop
80048a78:	0801228d 	j	80048a34 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$19as_chunks_unchecked18precondition_check17h535f4ad418d5750fE+0x24>
80048a7c:	00000000 	nop
80048a80:	3c018108 	lui	at,0x8108
80048a84:	2424d5b4 	addiu	a0,at,-10828
80048a88:	0c011b7e 	jal	80046df8 <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h72ce14823ad34e71E>
80048a8c:	00000000 	nop
80048a90:	27bd0020 	addiu	sp,sp,32
            }
80048a94:	03e00008 	jr	ra
80048a98:	00000000 	nop

80048a9c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked18precondition_check17h2b5a4e6c0f917b4cE>:
            const fn precondition_check($($name:$ty),*) {
80048a9c:	27bdffe8 	addiu	sp,sp,-24
80048aa0:	afa40010 	sw	a0,16(sp)
80048aa4:	afa50014 	sw	a1,20(sp)
            (mid: usize = mid, len: usize = len) => mid <= len,
80048aa8:	00a4082b 	sltu	at,a1,a0
80048aac:	10200008 	beqz	at,80048ad0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked18precondition_check17h2b5a4e6c0f917b4cE+0x34>
80048ab0:	00000000 	nop
80048ab4:	080122af 	j	80048abc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$18split_at_unchecked18precondition_check17h2b5a4e6c0f917b4cE+0x20>
80048ab8:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80048abc:	3c018108 	lui	at,0x8108
80048ac0:	2424d648 	addiu	a0,at,-10680
80048ac4:	24050064 	li	a1,100
80048ac8:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80048acc:	00000000 	nop
80048ad0:	27bd0018 	addiu	sp,sp,24
            }
80048ad4:	03e00008 	jr	ra
80048ad8:	00000000 	nop

80048adc <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked18precondition_check17h0c93f18c8b2c7519E>:
            const fn precondition_check($($name:$ty),*) {
80048adc:	27bdffd8 	addiu	sp,sp,-40
80048ae0:	afa60014 	sw	a2,20(sp)
80048ae4:	afa50018 	sw	a1,24(sp)
80048ae8:	afa4001c 	sw	a0,28(sp)
80048aec:	afa50020 	sw	a1,32(sp)
80048af0:	afa60024 	sw	a2,36(sp)
            ) => end >= start && end <= len,
80048af4:	00a4082b 	sltu	at,a1,a0
80048af8:	10200008 	beqz	at,80048b1c <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked18precondition_check17h0c93f18c8b2c7519E+0x40>
80048afc:	00000000 	nop
80048b00:	080122c2 	j	80048b08 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked18precondition_check17h0c93f18c8b2c7519E+0x2c>
80048b04:	00000000 	nop
                    ::core::panicking::panic_nounwind(
80048b08:	3c018108 	lui	at,0x8108
80048b0c:	2424d6ac 	addiu	a0,at,-10580
80048b10:	24050066 	li	a1,102
80048b14:	0c00f2cb 	jal	8003cb2c <_ZN4core9panicking14panic_nounwind17hf334d53364621da5E>
80048b18:	00000000 	nop
80048b1c:	8fa10014 	lw	at,20(sp)
80048b20:	8fa20018 	lw	v0,24(sp)
80048b24:	0022082b 	sltu	at,at,v0
80048b28:	1420fff7 	bnez	at,80048b08 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked18precondition_check17h0c93f18c8b2c7519E+0x2c>
80048b2c:	00000000 	nop
80048b30:	080122ce 	j	80048b38 <_ZN4core3str6traits108_$LT$impl$u20$core..slice..index..SliceIndex$LT$str$GT$$u20$for$u20$core..ops..range..Range$LT$usize$GT$$GT$13get_unchecked18precondition_check17h0c93f18c8b2c7519E+0x5c>
80048b34:	00000000 	nop
80048b38:	27bd0028 	addiu	sp,sp,40
            }
80048b3c:	03e00008 	jr	ra
80048b40:	00000000 	nop

80048b44 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE>:
        1, 0, 2, 11, 2, 52, 5, 5, 1, 1, 1, 0, 1, 6, 15, 0, 5, 59, 7, 0, 1, 63, 4, 81, 1, 0, 2, 0,
        46, 2, 23, 0, 1, 1, 3, 4, 5, 8, 8, 2, 7, 30, 4, 148, 3, 0, 55, 4, 50, 8, 1, 14, 1, 22, 5, 1,
        15, 0, 7, 1, 17, 2, 7, 1, 2, 1, 5, 100, 1, 160, 7, 0, 1, 61, 4, 0, 4, 0, 7, 109, 7, 0, 96,
        128, 240, 0,
    ];
    pub fn lookup(c: char) -> bool {
80048b44:	27bdff58 	addiu	sp,sp,-168
80048b48:	afbf00a4 	sw	ra,164(sp)
80048b4c:	00800825 	move	at,a0
80048b50:	afa1003c 	sw	at,60(sp)
80048b54:	afa10040 	sw	at,64(sp)
80048b58:	afa10080 	sw	at,128(sp)
80048b5c:	3c028108 	lui	v0,0x8108
80048b60:	2444d714 	addiu	a0,v0,-10476
80048b64:	afa40084 	sw	a0,132(sp)
80048b68:	3c028108 	lui	v0,0x8108
80048b6c:	2442d798 	addiu	v0,v0,-10344
80048b70:	afa20088 	sw	v0,136(sp)
        match short_offset_runs.binary_search_by_key(&(needle << 11), |header| header << 11) {
80048b74:	00010ac0 	sll	at,at,0xb
80048b78:	afa10050 	sw	at,80(sp)
80048b7c:	24050021 	li	a1,33
80048b80:	27a60050 	addiu	a2,sp,80
80048b84:	0c010bd6 	jal	80042f58 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$20binary_search_by_key17hb631560c3d60eb27E>
80048b88:	00000000 	nop
80048b8c:	afa20048 	sw	v0,72(sp)
80048b90:	afa3004c 	sw	v1,76(sp)
80048b94:	8fa10048 	lw	at,72(sp)
80048b98:	1420000b 	bnez	at,80048bc8 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x84>
80048b9c:	00000000 	nop
80048ba0:	080122ea 	j	80048ba8 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x64>
80048ba4:	00000000 	nop
            Ok(idx) => idx + 1,
80048ba8:	8fa1004c 	lw	at,76(sp)
80048bac:	afa1008c 	sw	at,140(sp)
80048bb0:	24210001 	addiu	at,at,1
80048bb4:	afa10038 	sw	at,56(sp)
80048bb8:	1020000c 	beqz	at,80048bec <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0xa8>
80048bbc:	00000000 	nop
80048bc0:	080122f7 	j	80048bdc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x98>
80048bc4:	00000000 	nop
            Err(idx) => idx,
80048bc8:	8fa1004c 	lw	at,76(sp)
80048bcc:	afa10090 	sw	at,144(sp)
80048bd0:	afa10044 	sw	at,68(sp)
80048bd4:	080122ff 	j	80048bfc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0xb8>
80048bd8:	00000000 	nop
            Ok(idx) => idx + 1,
80048bdc:	8fa10038 	lw	at,56(sp)
80048be0:	afa10044 	sw	at,68(sp)
80048be4:	080122ff 	j	80048bfc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0xb8>
80048be8:	00000000 	nop
80048bec:	3c018108 	lui	at,0x8108
80048bf0:	2424cbc0 	addiu	a0,at,-13376
80048bf4:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80048bf8:	00000000 	nop
    let mut offset_idx = decode_length(short_offset_runs[last_idx]);
80048bfc:	8fa10044 	lw	at,68(sp)
80048c00:	afa10034 	sw	at,52(sp)
80048c04:	2c210021 	sltiu	at,at,33
80048c08:	10200013 	beqz	at,80048c58 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x114>
80048c0c:	00000000 	nop
80048c10:	08012306 	j	80048c18 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0xd4>
80048c14:	00000000 	nop
80048c18:	8fa10034 	lw	at,52(sp)
80048c1c:	00011080 	sll	v0,at,0x2
80048c20:	3c018108 	lui	at,0x8108
80048c24:	2421d714 	addiu	at,at,-10476
80048c28:	00220821 	addu	at,at,v0
80048c2c:	8c240000 	lw	a0,0(at)
80048c30:	0c01162e 	jal	800458b8 <_ZN4core7unicode12unicode_data13decode_length17h5d277b1fd55038d4E>
80048c34:	00000000 	nop
80048c38:	afa20054 	sw	v0,84(sp)
    let length = if let Some(next) = short_offset_runs.get(last_idx + 1) {
80048c3c:	8fa10044 	lw	at,68(sp)
80048c40:	24210001 	addiu	at,at,1
80048c44:	afa10030 	sw	at,48(sp)
80048c48:	10200015 	beqz	at,80048ca0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x15c>
80048c4c:	00000000 	nop
80048c50:	0801231c 	j	80048c70 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x12c>
80048c54:	00000000 	nop
    let mut offset_idx = decode_length(short_offset_runs[last_idx]);
80048c58:	8fa40034 	lw	a0,52(sp)
80048c5c:	3c018108 	lui	at,0x8108
80048c60:	2426cbd0 	addiu	a2,at,-13360
80048c64:	24050021 	li	a1,33
80048c68:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80048c6c:	00000000 	nop
    let length = if let Some(next) = short_offset_runs.get(last_idx + 1) {
80048c70:	8fa60030 	lw	a2,48(sp)
80048c74:	3c018108 	lui	at,0x8108
80048c78:	2424d714 	addiu	a0,at,-10476
80048c7c:	24050021 	li	a1,33
80048c80:	0c0108f8 	jal	800423e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17he7a74869bcb725e5E>
80048c84:	00000000 	nop
80048c88:	afa2005c 	sw	v0,92(sp)
80048c8c:	8fa1005c 	lw	at,92(sp)
80048c90:	14200007 	bnez	at,80048cb0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x16c>
80048c94:	00000000 	nop
80048c98:	08012339 	j	80048ce4 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x1a0>
80048c9c:	00000000 	nop
80048ca0:	3c018108 	lui	at,0x8108
80048ca4:	2424cbe0 	addiu	a0,at,-13344
80048ca8:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80048cac:	00000000 	nop
80048cb0:	8fa1005c 	lw	at,92(sp)
80048cb4:	afa10094 	sw	at,148(sp)
        decode_length(*next) - offset_idx
80048cb8:	8c240000 	lw	a0,0(at)
80048cbc:	0c01162e 	jal	800458b8 <_ZN4core7unicode12unicode_data13decode_length17h5d277b1fd55038d4E>
80048cc0:	00000000 	nop
80048cc4:	8fa10054 	lw	at,84(sp)
80048cc8:	00411823 	subu	v1,v0,at
80048ccc:	afa3002c 	sw	v1,44(sp)
80048cd0:	0041082b 	sltu	at,v0,at
80048cd4:	14200010 	bnez	at,80048d18 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x1d4>
80048cd8:	00000000 	nop
80048cdc:	08012342 	j	80048d08 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x1c4>
80048ce0:	00000000 	nop
        offsets.len() - offset_idx
80048ce4:	8fa10054 	lw	at,84(sp)
80048ce8:	240202d7 	li	v0,727
80048cec:	00411023 	subu	v0,v0,at
80048cf0:	afa20028 	sw	v0,40(sp)
80048cf4:	2c2102d8 	sltiu	at,at,728
80048cf8:	10200029 	beqz	at,80048da0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x25c>
80048cfc:	00000000 	nop
80048d00:	08012364 	j	80048d90 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x24c>
80048d04:	00000000 	nop
        decode_length(*next) - offset_idx
80048d08:	8fa1002c 	lw	at,44(sp)
80048d0c:	afa10058 	sw	at,88(sp)
    let length = if let Some(next) = short_offset_runs.get(last_idx + 1) {
80048d10:	0801234a 	j	80048d28 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x1e4>
80048d14:	00000000 	nop
        decode_length(*next) - offset_idx
80048d18:	3c018108 	lui	at,0x8108
80048d1c:	2424cbf0 	addiu	a0,at,-13328
80048d20:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80048d24:	00000000 	nop
        last_idx.checked_sub(1).map(|prev| decode_prefix_sum(short_offset_runs[prev])).unwrap_or(0);
80048d28:	8fa40044 	lw	a0,68(sp)
80048d2c:	24050001 	li	a1,1
80048d30:	0c011895 	jal	80046254 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h794c6c83e98caf43E>
80048d34:	00000000 	nop
80048d38:	00402025 	move	a0,v0
80048d3c:	00602825 	move	a1,v1
80048d40:	3c018108 	lui	at,0x8108
80048d44:	2421d714 	addiu	at,at,-10476
80048d48:	afa10060 	sw	at,96(sp)
80048d4c:	8fa60060 	lw	a2,96(sp)
80048d50:	0c00f16f 	jal	8003c5bc <_ZN4core6option15Option$LT$T$GT$3map17hb65f5112fd9dc36dE>
80048d54:	00000000 	nop
80048d58:	00402025 	move	a0,v0
80048d5c:	00602825 	move	a1,v1
80048d60:	24060000 	li	a2,0
80048d64:	0c00f085 	jal	8003c214 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h70938c5c72b1253bE>
80048d68:	00000000 	nop
80048d6c:	8fa1003c 	lw	at,60(sp)
80048d70:	afa20098 	sw	v0,152(sp)
    let total = needle - prev;
80048d74:	00221823 	subu	v1,at,v0
80048d78:	afa30024 	sw	v1,36(sp)
80048d7c:	0022082b 	sltu	at,at,v0
80048d80:	14200015 	bnez	at,80048dd8 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x294>
80048d84:	00000000 	nop
80048d88:	0801236c 	j	80048db0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x26c>
80048d8c:	00000000 	nop
        offsets.len() - offset_idx
80048d90:	8fa10028 	lw	at,40(sp)
80048d94:	afa10058 	sw	at,88(sp)
    let length = if let Some(next) = short_offset_runs.get(last_idx + 1) {
80048d98:	0801234a 	j	80048d28 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x1e4>
80048d9c:	00000000 	nop
        offsets.len() - offset_idx
80048da0:	3c018108 	lui	at,0x8108
80048da4:	2424cc00 	addiu	a0,at,-13312
80048da8:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80048dac:	00000000 	nop
    let total = needle - prev;
80048db0:	8fa10024 	lw	at,36(sp)
80048db4:	afa1009c 	sw	at,156(sp)
    let mut prefix_sum = 0;
80048db8:	afa00064 	sw	zero,100(sp)
    for _ in 0..(length - 1) {
80048dbc:	8fa10058 	lw	at,88(sp)
80048dc0:	2422ffff 	addiu	v0,at,-1
80048dc4:	afa20020 	sw	v0,32(sp)
80048dc8:	10200012 	beqz	at,80048e14 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x2d0>
80048dcc:	00000000 	nop
80048dd0:	0801237a 	j	80048de8 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x2a4>
80048dd4:	00000000 	nop
    let total = needle - prev;
80048dd8:	3c018108 	lui	at,0x8108
80048ddc:	2424cc10 	addiu	a0,at,-13296
80048de0:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80048de4:	00000000 	nop
    for _ in 0..(length - 1) {
80048de8:	8fa10020 	lw	at,32(sp)
80048dec:	afa00068 	sw	zero,104(sp)
80048df0:	afa1006c 	sw	at,108(sp)
80048df4:	8fa40068 	lw	a0,104(sp)
80048df8:	8fa5006c 	lw	a1,108(sp)
80048dfc:	0c00ef08 	jal	8003bc20 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h08672f7f2dd54636E>
80048e00:	00000000 	nop
80048e04:	afa20070 	sw	v0,112(sp)
80048e08:	afa30074 	sw	v1,116(sp)
80048e0c:	08012389 	j	80048e24 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x2e0>
80048e10:	00000000 	nop
80048e14:	3c018108 	lui	at,0x8108
80048e18:	2424cc20 	addiu	a0,at,-13280
80048e1c:	0c011b2a 	jal	80046ca8 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h4a39d2ada8c2e196E>
80048e20:	00000000 	nop
80048e24:	27a40070 	addiu	a0,sp,112
80048e28:	0c00eeff 	jal	8003bbfc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h77596a36d38db716E>
80048e2c:	00000000 	nop
80048e30:	afa20078 	sw	v0,120(sp)
80048e34:	afa3007c 	sw	v1,124(sp)
80048e38:	8fa10078 	lw	at,120(sp)
80048e3c:	1020003a 	beqz	at,80048f28 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x3e4>
80048e40:	00000000 	nop
80048e44:	08012393 	j	80048e4c <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x308>
80048e48:	00000000 	nop
        let offset = offsets[offset_idx];
80048e4c:	8fa10054 	lw	at,84(sp)
80048e50:	afa1001c 	sw	at,28(sp)
80048e54:	2c2102d7 	sltiu	at,at,727
80048e58:	10200011 	beqz	at,80048ea0 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x35c>
80048e5c:	00000000 	nop
80048e60:	0801239a 	j	80048e68 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x324>
80048e64:	00000000 	nop
80048e68:	8fa2001c 	lw	v0,28(sp)
80048e6c:	3c018108 	lui	at,0x8108
80048e70:	2421d798 	addiu	at,at,-10344
80048e74:	00220821 	addu	at,at,v0
80048e78:	90210000 	lbu	at,0(at)
80048e7c:	a3a100a3 	sb	at,163(sp)
        prefix_sum += offset as u32;
80048e80:	8fa20064 	lw	v0,100(sp)
80048e84:	00410821 	addu	at,v0,at
80048e88:	afa10018 	sw	at,24(sp)
80048e8c:	0022082b 	sltu	at,at,v0
80048e90:	14200012 	bnez	at,80048edc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x398>
80048e94:	00000000 	nop
80048e98:	080123ae 	j	80048eb8 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x374>
80048e9c:	00000000 	nop
        let offset = offsets[offset_idx];
80048ea0:	8fa4001c 	lw	a0,28(sp)
80048ea4:	3c018108 	lui	at,0x8108
80048ea8:	2426cc30 	addiu	a2,at,-13264
80048eac:	240502d7 	li	a1,727
80048eb0:	0c00f303 	jal	8003cc0c <_ZN4core9panicking18panic_bounds_check17h3351be7fdb1cde2fE>
80048eb4:	00000000 	nop
        prefix_sum += offset as u32;
80048eb8:	8fa10024 	lw	at,36(sp)
80048ebc:	8fa20018 	lw	v0,24(sp)
80048ec0:	afa20064 	sw	v0,100(sp)
        if prefix_sum > total {
80048ec4:	8fa20064 	lw	v0,100(sp)
80048ec8:	0022082b 	sltu	at,at,v0
80048ecc:	14200016 	bnez	at,80048f28 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x3e4>
80048ed0:	00000000 	nop
80048ed4:	080123bb 	j	80048eec <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x3a8>
80048ed8:	00000000 	nop
        prefix_sum += offset as u32;
80048edc:	3c018108 	lui	at,0x8108
80048ee0:	2424cc40 	addiu	a0,at,-13248
80048ee4:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80048ee8:	00000000 	nop
        offset_idx += 1;
80048eec:	8fa10054 	lw	at,84(sp)
80048ef0:	24210001 	addiu	at,at,1
80048ef4:	afa10014 	sw	at,20(sp)
80048ef8:	10200007 	beqz	at,80048f18 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x3d4>
80048efc:	00000000 	nop
80048f00:	080123c2 	j	80048f08 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x3c4>
80048f04:	00000000 	nop
80048f08:	8fa10014 	lw	at,20(sp)
80048f0c:	afa10054 	sw	at,84(sp)
    for _ in 0..(length - 1) {
80048f10:	08012389 	j	80048e24 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h4c4b25c4cc35f1cdE+0x2e0>
80048f14:	00000000 	nop
        offset_idx += 1;
80048f18:	3c018108 	lui	at,0x8108
80048f1c:	2424cc50 	addiu	a0,at,-13232
80048f20:	0c011b1c 	jal	80046c70 <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3e0d9a11179a97aE>
80048f24:	00000000 	nop
    offset_idx % 2 == 1
80048f28:	8fa10054 	lw	at,84(sp)
        super::skip_search(
            c as u32,
            &SHORT_OFFSET_RUNS,
            &OFFSETS,
        )
    }
80048f2c:	30220001 	andi	v0,at,0x1
80048f30:	8fbf00a4 	lw	ra,164(sp)
80048f34:	27bd00a8 	addiu	sp,sp,168
80048f38:	03e00008 	jr	ra
80048f3c:	00000000 	nop

80048f40 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hf6230c95c9a62101E>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
80048f40:	27bdfff0 	addiu	sp,sp,-16
80048f44:	afa40000 	sw	a0,0(sp)
80048f48:	afa50004 	sw	a1,4(sp)
80048f4c:	afa40008 	sw	a0,8(sp)
80048f50:	afa5000c 	sw	a1,12(sp)
80048f54:	00851021 	addu	v0,a0,a1
80048f58:	27bd0010 	addiu	sp,sp,16
        }
80048f5c:	03e00008 	jr	ra
80048f60:	00000000 	nop

80048f64 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf8b92d966c7e39b8E>:
    fn next(&mut self) -> Option<A> {
80048f64:	27bdffe8 	addiu	sp,sp,-24
80048f68:	afbf0014 	sw	ra,20(sp)
80048f6c:	afa40010 	sw	a0,16(sp)
        self.spec_next()
80048f70:	0c0123ea 	jal	80048fa8 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5d9e55b9152dab6fE>
80048f74:	00000000 	nop
    }
80048f78:	8fbf0014 	lw	ra,20(sp)
80048f7c:	27bd0018 	addiu	sp,sp,24
80048f80:	03e00008 	jr	ra
80048f84:	00000000 	nop

80048f88 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9794c854b34bb344E>:
    fn into_iter(self) -> I {
80048f88:	27bdfff8 	addiu	sp,sp,-8
80048f8c:	00a01825 	move	v1,a1
80048f90:	00801025 	move	v0,a0
80048f94:	afa20000 	sw	v0,0(sp)
80048f98:	afa30004 	sw	v1,4(sp)
80048f9c:	27bd0008 	addiu	sp,sp,8
    }
80048fa0:	03e00008 	jr	ra
80048fa4:	00000000 	nop

80048fa8 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5d9e55b9152dab6fE>:
    fn spec_next(&mut self) -> Option<T> {
80048fa8:	27bdffc8 	addiu	sp,sp,-56
80048fac:	afbf0034 	sw	ra,52(sp)
80048fb0:	afa40018 	sw	a0,24(sp)
80048fb4:	afa40024 	sw	a0,36(sp)
        if self.start < self.end {
80048fb8:	24810004 	addiu	at,a0,4
80048fbc:	afa4002c 	sw	a0,44(sp)
80048fc0:	afa10030 	sw	at,48(sp)
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
80048fc4:	8c810000 	lw	at,0(a0)
80048fc8:	8c820004 	lw	v0,4(a0)
80048fcc:	0022082b 	sltu	at,at,v0
80048fd0:	14200006 	bnez	at,80048fec <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5d9e55b9152dab6fE+0x44>
80048fd4:	00000000 	nop
80048fd8:	080123f8 	j	80048fe0 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5d9e55b9152dab6fE+0x38>
80048fdc:	00000000 	nop
            None
80048fe0:	afa0001c 	sw	zero,28(sp)
        if self.start < self.end {
80048fe4:	0801240c 	j	80049030 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5d9e55b9152dab6fE+0x88>
80048fe8:	00000000 	nop
            let old = self.start;
80048fec:	8fa10018 	lw	at,24(sp)
80048ff0:	8c240000 	lw	a0,0(at)
80048ff4:	afa40014 	sw	a0,20(sp)
80048ff8:	afa40028 	sw	a0,40(sp)
80048ffc:	24050001 	li	a1,1
80049000:	afa50010 	sw	a1,16(sp)
            self.start = unsafe { Step::forward_unchecked(old, 1) };
80049004:	0c0123d0 	jal	80048f40 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hf6230c95c9a62101E>
80049008:	00000000 	nop
8004900c:	8fa40018 	lw	a0,24(sp)
80049010:	8fa10010 	lw	at,16(sp)
80049014:	00401825 	move	v1,v0
80049018:	8fa20014 	lw	v0,20(sp)
8004901c:	ac830000 	sw	v1,0(a0)
            Some(old)
80049020:	afa20020 	sw	v0,32(sp)
80049024:	afa1001c 	sw	at,28(sp)
        if self.start < self.end {
80049028:	0801240c 	j	80049030 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5d9e55b9152dab6fE+0x88>
8004902c:	00000000 	nop
    }
80049030:	8fa2001c 	lw	v0,28(sp)
80049034:	8fa30020 	lw	v1,32(sp)
80049038:	8fbf0034 	lw	ra,52(sp)
8004903c:	27bd0038 	addiu	sp,sp,56
80049040:	03e00008 	jr	ra
80049044:	00000000 	nop
